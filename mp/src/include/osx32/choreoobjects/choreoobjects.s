Archive : /Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(choreoactor.o):
(__TEXT,__text) section
CChoreoActor::CChoreoActor():
00000000	movl	0x04(%esp),%eax
00000004	movb	CChoreoActor::CChoreoActor(),(%eax)
00000007	movb	CChoreoActor::CChoreoActor(),0x00000080(%eax)
0000000e	movl	CChoreoActor::CChoreoActor(),0x00000104(%eax)
00000018	movl	CChoreoActor::CChoreoActor(),0x00000100(%eax)
00000022	movl	CChoreoActor::CChoreoActor(),0x0000010c(%eax)
0000002c	movl	CChoreoActor::CChoreoActor(),0x00000108(%eax)
00000036	movl	CChoreoActor::CChoreoActor(),0x00000110(%eax)
00000040	movb	$0x01,0x00000114(%eax)
00000047	ret
00000048	nopl	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::CChoreoActor():
00000050	movl	0x04(%esp),%eax
00000054	movb	CChoreoActor::CChoreoActor(),(%eax)
00000057	movb	CChoreoActor::CChoreoActor(),0x00000080(%eax)
0000005e	movl	CChoreoActor::CChoreoActor(),0x00000104(%eax)
00000068	movl	CChoreoActor::CChoreoActor(),0x00000100(%eax)
00000072	movl	CChoreoActor::CChoreoActor(),0x0000010c(%eax)
0000007c	movl	CChoreoActor::CChoreoActor(),0x00000108(%eax)
00000086	movl	CChoreoActor::CChoreoActor(),0x00000110(%eax)
00000090	movb	$0x01,0x00000114(%eax)
00000097	ret
00000098	nopl	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::Init():
000000a0	movl	0x04(%esp),%eax
000000a4	movb	CChoreoActor::CChoreoActor(),(%eax)
000000a7	movb	CChoreoActor::CChoreoActor(),0x00000080(%eax)
000000ae	movb	$0x01,0x00000114(%eax)
000000b5	ret
000000b6	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::CChoreoActor(char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%edi
000000cb	movb	CChoreoActor::CChoreoActor(),(%edi)
000000ce	movb	CChoreoActor::CChoreoActor(),0x00000080(%edi)
000000d5	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
000000df	movl	CChoreoActor::CChoreoActor(),0x00000100(%edi)
000000e9	movl	CChoreoActor::CChoreoActor(),0x0000010c(%edi)
000000f3	movl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
000000fd	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
00000107	movb	$0x01,0x00000114(%edi)
0000010e	movl	0x0c(%ebp),%eax
00000111	movl	%eax,0x04(%esp)
00000115	movl	%edi,(%esp)
00000118	movl	$0x00000080,0x08(%esp)
00000120	calll	V_strncpy(char*, char const*, int)
00000125	addl	$0x10,%esp
00000128	popl	%esi
00000129	popl	%edi
0000012a	popl	%ebp
0000012b	ret
0000012c	movl	%eax,%esi
0000012e	movl	CChoreoActor::CChoreoActor(),0x0000010c(%edi)
00000138	movl	0x00000100(%edi),%eax
0000013e	cmpl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
00000145	jns	0x00000155
00000147	movl	%eax,0x00000110(%edi)
0000014d	movl	%esi,(%esp)
00000150	calll	__Unwind_Resume
00000155	testl	%eax,%eax
00000157	jne	0x0000016f
00000159	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
00000163	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
0000016d	jmp	0x0000019e
0000016f	movl	%eax,(%esp)
00000172	calll	_free
00000177	movl	CChoreoActor::CChoreoActor(),0x00000100(%edi)
00000181	cmpl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
00000188	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
00000192	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
0000019c	js	0x000001a8
0000019e	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
000001a8	movl	%esi,(%esp)
000001ab	calll	__Unwind_Resume
CChoreoActor::CChoreoActor(char const*):
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	pushl	%edi
000001b4	pushl	%esi
000001b5	subl	$0x10,%esp
000001b8	movl	0x08(%ebp),%edi
000001bb	movb	CChoreoActor::CChoreoActor(),(%edi)
000001be	movb	CChoreoActor::CChoreoActor(),0x00000080(%edi)
000001c5	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
000001cf	movl	CChoreoActor::CChoreoActor(),0x00000100(%edi)
000001d9	movl	CChoreoActor::CChoreoActor(),0x0000010c(%edi)
000001e3	movl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
000001ed	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
000001f7	movb	$0x01,0x00000114(%edi)
000001fe	movl	0x0c(%ebp),%eax
00000201	movl	%eax,0x04(%esp)
00000205	movl	%edi,(%esp)
00000208	movl	$0x00000080,0x08(%esp)
00000210	calll	V_strncpy(char*, char const*, int)
00000215	addl	$0x10,%esp
00000218	popl	%esi
00000219	popl	%edi
0000021a	popl	%ebp
0000021b	ret
0000021c	movl	%eax,%esi
0000021e	movl	CChoreoActor::CChoreoActor(),0x0000010c(%edi)
00000228	movl	0x00000100(%edi),%eax
0000022e	cmpl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
00000235	jns	0x00000245
00000237	movl	%eax,0x00000110(%edi)
0000023d	movl	%esi,(%esp)
00000240	calll	__Unwind_Resume
00000245	testl	%eax,%eax
00000247	jne	0x0000025f
00000249	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
00000253	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
0000025d	jmp	0x0000028e
0000025f	movl	%eax,(%esp)
00000262	calll	_free
00000267	movl	CChoreoActor::CChoreoActor(),0x00000100(%edi)
00000271	cmpl	CChoreoActor::CChoreoActor(),0x00000108(%edi)
00000278	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
00000282	movl	CChoreoActor::CChoreoActor(),0x00000110(%edi)
0000028c	js	0x00000298
0000028e	movl	CChoreoActor::CChoreoActor(),0x00000104(%edi)
00000298	movl	%esi,(%esp)
0000029b	calll	__Unwind_Resume
CChoreoActor::SetName(char const*):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	subl	$0x18,%esp
000002a6	movl	0x0c(%ebp),%eax
000002a9	movl	%eax,0x04(%esp)
000002ad	movl	0x08(%ebp),%eax
000002b0	movl	%eax,(%esp)
000002b3	movl	$0x00000080,0x08(%esp)
000002bb	calll	V_strncpy(char*, char const*, int)
000002c0	addl	$0x18,%esp
000002c3	popl	%ebp
000002c4	ret
000002c5	nopl	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::operator=(CChoreoActor const&):
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	pushl	%ebx
000002d4	pushl	%edi
000002d5	pushl	%esi
000002d6	subl	$0x1c,%esp
000002d9	movl	0x0c(%ebp),%esi
000002dc	movb	0x00000114(%esi),%al
000002e2	andb	$0x01,%al
000002e4	movl	0x08(%ebp),%ebx
000002e7	movb	%al,0x00000114(%ebx)
000002ed	movl	%esi,0x04(%esp)
000002f1	movl	%ebx,(%esp)
000002f4	movl	$0x00000080,0x08(%esp)
000002fc	calll	V_strncpy(char*, char const*, int)
00000301	movl	%esi,%eax
00000303	subl	$0x80,%eax
00000306	movl	%eax,0x04(%esp)
0000030a	movl	%ebx,%eax
0000030c	subl	$0x80,%eax
0000030f	movl	%eax,(%esp)
00000312	movl	$0x00000080,0x08(%esp)
0000031a	calll	V_strncpy(char*, char const*, int)
0000031f	leal	0x00000100(%ebx),%eax
00000325	movl	%eax,0xe8(%ebp)
00000328	xorl	%ecx,%ecx
0000032a	jmp	0x00000397
0000032c	nopl	CChoreoActor::CChoreoActor()(%eax)
00000330	movl	%edi,%ecx
00000332	subl	%eax,%ecx
00000334	movl	%ecx,0x04(%esp)
00000338	movl	0xe8(%ebp),%eax
0000033b	movl	%eax,(%esp)
0000033e	calll	CUtlMemory<CChoreoChannel*, int>::Grow(int)
00000343	movl	0x0000010c(%ebx),%ecx
00000349	incl	%ecx
0000034a	movl	%ecx,0x0000010c(%ebx)
00000350	movl	0x00000100(%ebx),%eax
00000356	movl	%eax,0x00000110(%ebx)
0000035c	subl	%esi,%ecx
0000035e	decl	%ecx
0000035f	testl	%ecx,%ecx
00000361	jle	0x00000381
00000363	shll	$0x02,%ecx
00000366	movl	%ecx,0x08(%esp)
0000036a	leal	(%eax,%esi,4),%ecx
0000036d	movl	%ecx,0x04(%esp)
00000371	leal	(%eax,%edi,4),%eax
00000374	movl	%eax,(%esp)
00000377	calll	_memmove
0000037c	movl	0xe8(%ebp),%eax
0000037f	movl	(%eax),%eax
00000381	movl	0xf0(%ebp),%ecx
00000384	movl	0xec(%ebp),%edx
00000387	shll	$0x02,%esi
0000038a	addl	%eax,%esi
0000038c	movl	0x08(%ebp),%ebx
0000038f	je	0x00000393
00000391	movl	%edx,(%esi)
00000393	incl	%ecx
00000394	movl	0x0c(%ebp),%esi
00000397	cmpl	0x0000010c(%esi),%ecx
0000039d	jge	0x000003fa
0000039f	movl	0x00000100(%esi),%eax
000003a5	movl	(%eax,%ecx,4),%esi
000003a8	movl	%ecx,0xf0(%ebp)
000003ab	movl	$0x0000009c,(%esp)
000003b2	calll	operator new(unsigned long)
000003b7	movl	%eax,%edi
000003b9	movl	%edi,(%esp)
000003bc	calll	CChoreoChannel::CChoreoChannel()
000003c1	movl	%ebx,0x04(%esp)
000003c5	movl	%edi,(%esp)
000003c8	calll	CChoreoChannel::SetActor(CChoreoActor*)
000003cd	movl	%esi,0x04(%esp)
000003d1	movl	%edi,(%esp)
000003d4	movl	%edi,0xec(%ebp)
000003d7	calll	CChoreoChannel::operator=(CChoreoChannel const&)
000003dc	movl	0x00000104(%ebx),%eax
000003e2	movl	0x0000010c(%ebx),%esi
000003e8	leal	0x01(%esi),%edi
000003eb	cmpl	%eax,%edi
000003ed	movl	%esi,%ecx
000003ef	jle	0x00000349
000003f5	jmp	0x00000330
000003fa	movl	%ebx,%eax
000003fc	addl	$0x1c,%esp
000003ff	popl	%esi
00000400	popl	%edi
00000401	popl	%ebx
00000402	popl	%ebp
00000403	ret
00000404	movl	%eax,%esi
00000406	movl	%edi,(%esp)
00000409	calll	operator delete(void*)
0000040e	movl	%esi,(%esp)
00000411	calll	__Unwind_Resume
00000416	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::AddChannel(CChoreoChannel*):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x1c,%esp
00000429	movl	0x08(%ebp),%edi
0000042c	movl	0x00000104(%edi),%eax
00000432	movl	0x0000010c(%edi),%esi
00000438	leal	0x00000100(%edi),%ebx
0000043e	leal	0x01(%esi),%edx
00000441	cmpl	%eax,%edx
00000443	movl	%esi,%ecx
00000445	jle	0x00000467
00000447	movl	%edx,%ecx
00000449	subl	%eax,%ecx
0000044b	movl	%ecx,0x04(%esp)
0000044f	movl	%ebx,(%esp)
00000452	movl	%ebx,0xf0(%ebp)
00000455	movl	%edx,%ebx
00000457	calll	CUtlMemory<CChoreoChannel*, int>::Grow(int)
0000045c	movl	%ebx,%edx
0000045e	movl	0xf0(%ebp),%ebx
00000461	movl	0x0000010c(%edi),%ecx
00000467	movl	%ebx,0xf0(%ebp)
0000046a	incl	%ecx
0000046b	movl	%ecx,0x0000010c(%edi)
00000471	movl	0x00000100(%edi),%eax
00000477	movl	%eax,0x00000110(%edi)
0000047d	subl	%esi,%ecx
0000047f	decl	%ecx
00000480	testl	%ecx,%ecx
00000482	jle	0x000004a2
00000484	shll	$0x02,%ecx
00000487	movl	%ecx,0x08(%esp)
0000048b	leal	(%eax,%esi,4),%ecx
0000048e	movl	%ecx,0x04(%esp)
00000492	leal	(%eax,%edx,4),%eax
00000495	movl	%eax,(%esp)
00000498	calll	_memmove
0000049d	movl	0xf0(%ebp),%eax
000004a0	movl	(%eax),%eax
000004a2	shll	$0x02,%esi
000004a5	addl	%eax,%esi
000004a7	je	0x000004ae
000004a9	movl	0x0c(%ebp),%eax
000004ac	movl	%eax,(%esi)
000004ae	addl	$0x1c,%esp
000004b1	popl	%esi
000004b2	popl	%edi
000004b3	popl	%ebx
000004b4	popl	%ebp
000004b5	ret
000004b6	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::GetName():
000004c0	movl	0x04(%esp),%eax
000004c4	ret
000004c5	nopl	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::GetNumChannels():
000004d0	movl	0x04(%esp),%eax
000004d4	movl	0x0000010c(%eax),%eax
000004da	ret
000004db	nopl	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::GetChannel(int):
000004e0	xorl	%eax,%eax
000004e2	movl	0x08(%esp),%ecx
000004e6	testl	%ecx,%ecx
000004e8	js	0x00000501
000004ea	movl	0x04(%esp),%edx
000004ee	xorl	%eax,%eax
000004f0	cmpl	%ecx,0x0000010c(%edx)
000004f6	jle	0x00000501
000004f8	movl	0x00000100(%edx),%eax
000004fe	movl	(%eax,%ecx,4),%eax
00000501	ret
00000502	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::RemoveChannel(CChoreoChannel*):
00000510	pushl	%ebp
00000511	movl	%esp,%ebp
00000513	pushl	%ebx
00000514	pushl	%edi
00000515	pushl	%esi
00000516	subl	$0x0c,%esp
00000519	movl	0x08(%ebp),%esi
0000051c	movl	0x0000010c(%esi),%eax
00000522	xorl	%edx,%edx
00000524	movl	$0xfffffffc,%ecx
00000529	movl	0x0c(%ebp),%ebx
0000052c	jmp	0x00000534
0000052e	nop
00000530	addl	$0xfc,%ecx
00000533	incl	%edx
00000534	cmpl	%eax,%edx
00000536	jge	0x00000576
00000538	movl	0x00000100(%esi),%edi
0000053e	cmpl	%ebx,(%edi,%edx,4)
00000541	jne	0x00000530
00000543	cmpl	$0xff,%edx
00000546	je	0x00000576
00000548	leal	0xff(%eax),%ebx
0000054b	subl	%edx,%ebx
0000054d	testl	%ebx,%ebx
0000054f	jle	0x0000056f
00000551	subl	%ecx,%edi
00000553	movl	%edi,0x04(%esp)
00000557	leal	(%ecx,%eax,4),%eax
0000055a	movl	%eax,0x08(%esp)
0000055e	addl	$0xfc,%edi
00000561	movl	%edi,(%esp)
00000564	calll	_memmove
00000569	movl	0x0000010c(%esi),%eax
0000056f	decl	%eax
00000570	movl	%eax,0x0000010c(%esi)
00000576	addl	$0x0c,%esp
00000579	popl	%esi
0000057a	popl	%edi
0000057b	popl	%ebx
0000057c	popl	%ebp
0000057d	ret
0000057e	nop
CChoreoActor::FindChannelIndex(CChoreoChannel*):
00000580	pushl	%edi
00000581	pushl	%esi
00000582	movl	0x0c(%esp),%ecx
00000586	movl	0x0000010c(%ecx),%esi
0000058c	xorl	%edx,%edx
0000058e	movl	0x10(%esp),%edi
00000592	jmp	0x000005a1
00000594	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
000005a0	incl	%edx
000005a1	movl	$0xffffffff,%eax
000005a6	cmpl	%esi,%edx
000005a8	jge	0x000005b7
000005aa	movl	0x00000100(%ecx),%eax
000005b0	cmpl	%edi,(%eax,%edx,4)
000005b3	jne	0x000005a0
000005b5	movl	%edx,%eax
000005b7	popl	%esi
000005b8	popl	%edi
000005b9	ret
000005ba	nopw	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::RemoveAllChannels():
000005c0	movl	0x04(%esp),%eax
000005c4	movl	CChoreoActor::CChoreoActor(),0x0000010c(%eax)
000005ce	ret
000005cf	nop
CChoreoActor::SwapChannels(int, int):
000005d0	pushl	%ebx
000005d1	pushl	%edi
000005d2	pushl	%esi
000005d3	movl	0x10(%esp),%eax
000005d7	movl	0x00000100(%eax),%edx
000005dd	movl	0x14(%esp),%edi
000005e1	movl	(%edx,%edi,4),%ecx
000005e4	movl	0x18(%esp),%esi
000005e8	movl	(%edx,%esi,4),%ebx
000005eb	movl	%ebx,(%edx,%edi,4)
000005ee	movl	0x00000100(%eax),%eax
000005f4	movl	%ecx,(%eax,%esi,4)
000005f7	popl	%esi
000005f8	popl	%edi
000005f9	popl	%ebx
000005fa	ret
000005fb	nopl	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::SetFacePoserModelName(char const*):
00000600	pushl	%ebp
00000601	movl	%esp,%ebp
00000603	subl	$0x18,%esp
00000606	movl	0x0c(%ebp),%eax
00000609	movl	%eax,0x04(%esp)
0000060d	movl	$0x00000080,%eax
00000612	addl	0x08(%ebp),%eax
00000615	movl	%eax,(%esp)
00000618	movl	$0x00000080,0x08(%esp)
00000620	calll	V_strncpy(char*, char const*, int)
00000625	addl	$0x18,%esp
00000628	popl	%ebp
00000629	ret
0000062a	nopw	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::GetFacePoserModelName() const:
00000630	movl	$0x00000080,%eax
00000635	addl	0x04(%esp),%eax
00000639	ret
0000063a	nopw	CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::SetActive(bool):
00000640	movb	0x08(%esp),%al
00000644	movl	0x04(%esp),%ecx
00000648	movb	%al,0x00000114(%ecx)
0000064e	ret
0000064f	nop
CChoreoActor::GetActive() const:
00000650	movl	0x04(%esp),%eax
00000654	movzbl	0x00000114(%eax),%eax
0000065b	andl	$0x01,%eax
0000065e	ret
0000065f	nop
CChoreoActor::MarkForSaveAll(bool):
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x0c,%esp
00000669	movb	0x0c(%ebp),%al
0000066c	movl	0x08(%ebp),%esi
0000066f	movb	%al,0x00000115(%esi)
00000675	movl	0x0000010c(%esi),%edi
0000067b	testl	%edi,%edi
0000067d	jle	0x000006bb
0000067f	xorl	%ebx,%ebx
00000681	nopl	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
00000690	cmpl	%ebx,0x0000010c(%esi)
00000696	movl	CChoreoActor::CChoreoActor(),%eax
0000069b	jle	0x000006a6
0000069d	movl	0x00000100(%esi),%eax
000006a3	movl	(%eax,%ebx,4),%eax
000006a6	movzbl	0x0c(%ebp),%ecx
000006aa	movl	%ecx,0x04(%esp)
000006ae	movl	%eax,(%esp)
000006b1	calll	CChoreoChannel::MarkForSaveAll(bool)
000006b6	incl	%ebx
000006b7	cmpl	%ebx,%edi
000006b9	jne	0x00000690
000006bb	addl	$0x0c,%esp
000006be	popl	%esi
000006bf	popl	%edi
000006c0	popl	%ebx
000006c1	popl	%ebp
000006c2	ret
000006c3	nopl	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
CChoreoActor::FindChannel(char const*):
000006d0	pushl	%ebp
000006d1	movl	%esp,%ebp
000006d3	pushl	%ebx
000006d4	pushl	%edi
000006d5	pushl	%esi
000006d6	subl	$0x0c,%esp
000006d9	movl	0x08(%ebp),%ebx
000006dc	movl	0x0000010c(%ebx),%eax
000006e2	movl	%eax,0xf0(%ebp)
000006e5	xorl	%edi,%edi
000006e7	jmp	0x0000071f
000006e9	nopl	CChoreoActor::CChoreoActor()(%eax)
000006f0	xorl	%esi,%esi
000006f2	cmpl	%edi,0x0000010c(%ebx)
000006f8	jle	0x00000703
000006fa	movl	0x00000100(%ebx),%eax
00000700	movl	(%eax,%edi,4),%esi
00000703	movl	%esi,(%esp)
00000706	calll	CChoreoChannel::GetName()
0000070b	movl	0x0c(%ebp),%ecx
0000070e	movl	%ecx,0x04(%esp)
00000712	movl	%eax,(%esp)
00000715	calll	V_stricmp(char const*, char const*)
0000071a	testl	%eax,%eax
0000071c	je	0x00000726
0000071e	incl	%edi
0000071f	cmpl	0xf0(%ebp),%edi
00000722	jl	0x000006f0
00000724	xorl	%esi,%esi
00000726	movl	%esi,%eax
00000728	addl	$0x0c,%esp
0000072b	popl	%esi
0000072c	popl	%edi
0000072d	popl	%ebx
0000072e	popl	%ebp
0000072f	ret
CChoreoActor::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*):
00000730	pushl	%ebp
00000731	movl	%esp,%ebp
00000733	pushl	%ebx
00000734	pushl	%edi
00000735	pushl	%esi
00000736	subl	$0x1c,%esp
00000739	calll	0x0000073e
0000073e	popl	%ebx
0000073f	movl	0x14(%ebp),%ecx
00000742	movl	(%ecx),%eax
00000744	movl	0x08(%ebp),%edx
00000747	movl	%edx,0x04(%esp)
0000074b	movl	%ecx,(%esp)
0000074e	call	(%eax)
00000750	movw	%ax,%si
00000753	movl	0x0c(%ebp),%edi
00000756	testb	$0x01,0x15(%edi)
0000075a	jne	0x0000079a
0000075c	movl	%ebx,0xf0(%ebp)
0000075f	movl	%edi,(%esp)
00000762	movl	$0x00000002,0x04(%esp)
0000076a	calll	CUtlBuffer::CheckPut(int)
0000076f	cmpb	$0x01,%al
00000771	jne	0x000007b6
00000773	movl	0x10(%edi),%eax
00000776	subl	0x20(%edi),%eax
00000779	addl	(%edi),%eax
0000077b	testb	$0x01,0x34(%edi)
0000077f	je	0x00000789
00000781	testl	%eax,%eax
00000783	je	0x0000078c
00000785	rolw	$0x08,%si
00000789	movw	%si,(%eax)
0000078c	addl	$0x02,0x10(%edi)
00000790	movl	%edi,(%esp)
00000793	calll	CUtlBuffer::AddNullTermination()
00000798	jmp	0x000007b6
0000079a	movswl	%si,%eax
0000079d	movl	%eax,0x08(%esp)
000007a1	leal	0x2f2d2-0x73e(%ebx),%eax
000007a7	movl	%ebx,0xf0(%ebp)
000007aa	movl	%eax,0x04(%esp)
000007ae	movl	%edi,(%esp)
000007b1	calll	CUtlBuffer::Printf(char const*, ...)
000007b6	movl	0x08(%ebp),%eax
000007b9	movl	0x0000010c(%eax),%ebx
000007bf	testb	$0x01,0x15(%edi)
000007c3	movl	0xf0(%ebp),%eax
000007c6	jne	0x000007f4
000007c8	movl	%edi,(%esp)
000007cb	movl	$0x00000001,0x04(%esp)
000007d3	calll	CUtlBuffer::CheckPut(int)
000007d8	cmpb	$0x01,%al
000007da	jne	0x0000080d
000007dc	movl	(%edi),%eax
000007de	movl	0x10(%edi),%ecx
000007e1	subl	0x20(%edi),%ecx
000007e4	movb	%bl,(%eax,%ecx)
000007e7	incl	0x10(%edi)
000007ea	movl	%edi,(%esp)
000007ed	calll	CUtlBuffer::AddNullTermination()
000007f2	jmp	0x0000080d
000007f4	leal	0x2f2cf-0x73e(%eax),%eax
000007fa	movl	%eax,0x04(%esp)
000007fe	movl	%edi,(%esp)
00000801	movzbl	%bl,%eax
00000804	movl	%eax,0x08(%esp)
00000808	calll	CUtlBuffer::Printf(char const*, ...)
0000080d	testl	%ebx,%ebx
0000080f	movl	0x08(%ebp),%ecx
00000812	jle	0x0000085c
00000814	xorl	%esi,%esi
00000816	nopw	%cs:CChoreoActor::CChoreoActor()(%eax,%eax)
00000820	cmpl	%esi,0x0000010c(%ecx)
00000826	movl	CChoreoActor::CChoreoActor(),%eax
0000082b	jle	0x00000836
0000082d	movl	0x00000100(%ecx),%eax
00000833	movl	(%eax,%esi,4),%eax
00000836	movl	%ecx,%edi
00000838	movl	0x14(%ebp),%ecx
0000083b	movl	%ecx,0x0c(%esp)
0000083f	movl	0x10(%ebp),%ecx
00000842	movl	%ecx,0x08(%esp)
00000846	movl	0x0c(%ebp),%ecx
00000849	movl	%ecx,0x04(%esp)
0000084d	movl	%eax,(%esp)
00000850	calll	CChoreoChannel::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00000855	movl	%edi,%ecx
00000857	incl	%esi
00000858	cmpl	%esi,%ebx
0000085a	jne	0x00000820
0000085c	movzbl	0x00000114(%ecx),%eax
00000863	andl	$0x01,%eax
00000866	movl	%eax,0x04(%esp)
0000086a	movl	0x0c(%ebp),%eax
0000086d	movl	%eax,(%esp)
00000870	calll	CUtlBuffer::PutChar(char)
00000875	addl	$0x1c,%esp
00000878	popl	%esi
00000879	popl	%edi
0000087a	popl	%ebx
0000087b	popl	%ebp
0000087c	ret
0000087d	nopl	(%eax)
CChoreoActor::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*):
00000880	pushl	%ebp
00000881	movl	%esp,%ebp
00000883	pushl	%ebx
00000884	pushl	%edi
00000885	pushl	%esi
00000886	subl	$0x0000013c,%esp
0000088c	calll	0x00000891
00000891	popl	%ecx
00000892	movl	0x31c4d-0x891(%ecx),%eax
00000898	movl	%eax,0xfffffed4(%ebp)
0000089e	movl	(%eax),%eax
000008a0	movl	%eax,0xf0(%ebp)
000008a3	movl	0x14(%ebp),%eax
000008a6	movl	(%eax),%eax
000008a8	movl	0x04(%eax),%eax
000008ab	movl	%eax,0xfffffee8(%ebp)
000008b1	movl	0x0c(%ebp),%esi
000008b4	movl	0x08(%ebp),%ebx
000008b7	testb	$0x01,0x15(%esi)
000008bb	jne	0x0000091f
000008bd	movl	%ecx,0xfffffed8(%ebp)
000008c3	movl	%esi,(%esp)
000008c6	movl	$0x00000002,0x04(%esp)
000008ce	calll	CUtlBuffer::CheckGet(int)
000008d3	cmpb	$0x01,%al
000008d5	jne	0x00000912
000008d7	movl	0x0c(%esi),%eax
000008da	movl	%eax,%ecx
000008dc	subl	0x20(%esi),%ecx
000008df	addl	(%esi),%ecx
000008e1	testb	$0x01,0x34(%esi)
000008e5	jne	0x000008ec
000008e7	movzwl	(%ecx),%ecx
000008ea	jmp	0x00000903
000008ec	leal	0xfffffeec(%ebp),%edi
000008f2	testl	%ecx,%ecx
000008f4	cmovnel	%ecx,%edi
000008f7	movzbl	0x01(%edi),%edx
000008fb	movzbl	(%edi),%ecx
000008fe	shll	$0x08,%ecx
00000901	orl	%edx,%ecx
00000903	movw	%cx,0xfffffeec(%ebp)
0000090a	addl	$0x02,%eax
0000090d	movl	%eax,0x0c(%esi)
00000910	jmp	0x00000951
00000912	movw	CChoreoActor::CChoreoActor(),0xfffffeec(%ebp)
0000091b	xorl	%ecx,%ecx
0000091d	jmp	0x00000951
0000091f	movw	CChoreoActor::CChoreoActor(),0xfffffeec(%ebp)
00000928	leal	0xfffffeec(%ebp),%eax
0000092e	movl	%eax,0x08(%esp)
00000932	leal	0x2f2d2-0x891(%ecx),%eax
00000938	movl	%ecx,0xfffffed8(%ebp)
0000093e	movl	%eax,0x04(%esp)
00000942	movl	%esi,(%esp)
00000945	calll	CUtlBuffer::Scanf(char const*, ...)
0000094a	movzwl	0xfffffeec(%ebp),%ecx
00000951	leal	0xfffffef0(%ebp),%edi
00000957	movl	%edi,0x08(%esp)
0000095b	movswl	%cx,%eax
0000095e	movl	%eax,0x04(%esp)
00000962	movl	0x14(%ebp),%eax
00000965	movl	%eax,(%esp)
00000968	movl	$0x00000100,0x0c(%esp)
00000970	call	*0xfffffee8(%ebp)
00000976	movl	%edi,0x04(%esp)
0000097a	movl	%ebx,%edi
0000097c	movl	%edi,(%esp)
0000097f	movl	$0x00000080,0x08(%esp)
00000987	calll	V_strncpy(char*, char const*, int)
0000098c	testb	$0x01,0x15(%esi)
00000990	jne	0x000009ca
00000992	movl	%esi,(%esp)
00000995	movl	$0x00000001,0x04(%esp)
0000099d	calll	CUtlBuffer::CheckGet(int)
000009a2	cmpb	$0x01,%al
000009a4	jne	0x000009bf
000009a6	movl	(%esi),%eax
000009a8	movl	0x0c(%esi),%ecx
000009ab	movl	%ecx,%edx
000009ad	subl	0x20(%esi),%edx
000009b0	movb	(%eax,%edx),%al
000009b3	movb	%al,0xfffffeee(%ebp)
000009b9	incl	%ecx
000009ba	movl	%ecx,0x0c(%esi)
000009bd	jmp	0x000009f9
000009bf	movb	CChoreoActor::CChoreoActor(),0xfffffeee(%ebp)
000009c6	xorb	%al,%al
000009c8	jmp	0x000009f9
000009ca	movb	CChoreoActor::CChoreoActor(),0xfffffeee(%ebp)
000009d1	leal	0xfffffeee(%ebp),%eax
000009d7	movl	%eax,0x08(%esp)
000009db	movl	0xfffffed8(%ebp),%eax
000009e1	leal	0x2f2cf-0x891(%eax),%eax
000009e7	movl	%eax,0x04(%esp)
000009eb	movl	%esi,(%esp)
000009ee	calll	CUtlBuffer::Scanf(char const*, ...)
000009f3	movb	0xfffffeee(%ebp),%al
000009f9	leal	0x00000100(%edi),%ecx
000009ff	movl	%ecx,0xfffffee8(%ebp)
00000a05	movzbl	%al,%eax
00000a08	movl	%eax,0xfffffedc(%ebp)
00000a0e	movl	$0xffffffff,%eax
00000a13	jmp	0x00000af1
00000a18	nopl	CChoreoActor::CChoreoActor()(%eax,%eax)
00000a20	movl	%eax,0xfffffee4(%ebp)
00000a26	movl	0x10(%ebp),%ebx
00000a29	movl	%ebx,(%esp)
00000a2c	calll	CChoreoScene::AllocChannel()
00000a31	movl	%eax,%ecx
00000a33	movl	%ecx,0xfffffee0(%ebp)
00000a39	movl	0x14(%ebp),%eax
00000a3c	movl	%eax,0x10(%esp)
00000a40	movl	%edi,0x0c(%esp)
00000a44	movl	%ebx,0x08(%esp)
00000a48	movl	%esi,0x04(%esp)
00000a4c	movl	%ecx,(%esp)
00000a4f	calll	CChoreoChannel::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, CChoreoActor*, IChoreoStringPool*)
00000a54	xorb	%cl,%cl
00000a56	testb	%al,%al
00000a58	je	0x00000b76
00000a5e	movl	0x00000104(%edi),%eax
00000a64	movl	0x0000010c(%edi),%esi
00000a6a	leal	0x01(%esi),%ebx
00000a6d	cmpl	%eax,%ebx
00000a6f	movl	%esi,%ecx
00000a71	jle	0x00000a8f
00000a73	movl	%ebx,%ecx
00000a75	subl	%eax,%ecx
00000a77	movl	%ecx,0x04(%esp)
00000a7b	movl	0xfffffee8(%ebp),%eax
00000a81	movl	%eax,(%esp)
00000a84	calll	CUtlMemory<CChoreoChannel*, int>::Grow(int)
00000a89	movl	0x0000010c(%edi),%ecx
00000a8f	incl	%ecx
00000a90	movl	%ecx,0x0000010c(%edi)
00000a96	movl	0x00000100(%edi),%eax
00000a9c	movl	%eax,0x00000110(%edi)
00000aa2	subl	%esi,%ecx
00000aa4	decl	%ecx
00000aa5	testl	%ecx,%ecx
00000aa7	jle	0x00000aca
00000aa9	shll	$0x02,%ecx
00000aac	movl	%ecx,0x08(%esp)
00000ab0	leal	(%eax,%esi,4),%ecx
00000ab3	movl	%ecx,0x04(%esp)
00000ab7	leal	(%eax,%ebx,4),%eax
00000aba	movl	%eax,(%esp)
00000abd	calll	_memmove
00000ac2	movl	0xfffffee8(%ebp),%eax
00000ac8	movl	(%eax),%eax
00000aca	shll	$0x02,%esi
00000acd	addl	%eax,%esi
00000acf	movl	0xfffffee0(%ebp),%eax
00000ad5	je	0x00000ad9
00000ad7	movl	%eax,(%esi)
00000ad9	movl	0x08(%ebp),%edi
00000adc	movl	%edi,0x04(%esp)
00000ae0	movl	%eax,(%esp)
00000ae3	calll	CChoreoChannel::SetActor(CChoreoActor*)
00000ae8	movl	0x0c(%ebp),%esi
00000aeb	movl	0xfffffee4(%ebp),%eax
00000af1	incl	%eax
00000af2	cmpl	0xfffffedc(%ebp),%eax
00000af8	jl	0x00000a20
00000afe	testb	$0x01,0x15(%esi)
00000b02	jne	0x00000b3c
00000b04	movl	%esi,(%esp)
00000b07	movl	$0x00000001,0x04(%esp)
00000b0f	calll	CUtlBuffer::CheckGet(int)
00000b14	cmpb	$0x01,%al
00000b16	jne	0x00000b31
00000b18	movl	(%esi),%eax
00000b1a	movl	0x0c(%esi),%ecx
00000b1d	movl	%ecx,%edx
00000b1f	subl	0x20(%esi),%edx
00000b22	movb	(%eax,%edx),%al
00000b25	movb	%al,0xfffffeef(%ebp)
00000b2b	incl	%ecx
00000b2c	movl	%ecx,0x0c(%esi)
00000b2f	jmp	0x00000b6b
00000b31	movb	CChoreoActor::CChoreoActor(),0xfffffeef(%ebp)
00000b38	xorb	%al,%al
00000b3a	jmp	0x00000b6b
00000b3c	movb	CChoreoActor::CChoreoActor(),0xfffffeef(%ebp)
00000b43	leal	0xfffffeef(%ebp),%eax
00000b49	movl	%eax,0x08(%esp)
00000b4d	movl	0xfffffed8(%ebp),%eax
00000b53	leal	0x2f2cc-0x891(%eax),%eax
00000b59	movl	%eax,0x04(%esp)
00000b5d	movl	%esi,(%esp)
00000b60	calll	CUtlBuffer::Scanf(char const*, ...)
00000b65	movb	0xfffffeef(%ebp),%al
00000b6b	cmpb	$0x01,%al
00000b6d	sete	0x00000114(%edi)
00000b74	movb	$0x01,%cl
00000b76	movl	0xfffffed4(%ebp),%eax
00000b7c	movl	(%eax),%eax
00000b7e	cmpl	0xf0(%ebp),%eax
00000b81	jne	0x00000b91
00000b83	movzbl	%cl,%eax
00000b86	addl	$0x0000013c,%esp
00000b8c	popl	%esi
00000b8d	popl	%edi
00000b8e	popl	%ebx
00000b8f	popl	%ebp
00000b90	ret
00000b91	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(choreochannel.o):
(__TEXT,__text) section
CChoreoChannel::CChoreoChannel():
00000000	movl	0x04(%esp),%eax
00000004	movb	CChoreoChannel::CChoreoChannel(),0x04(%eax)
00000008	movl	CChoreoChannel::CChoreoChannel(),(%eax)
0000000e	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%eax)
00000018	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%eax)
00000022	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%eax)
0000002c	movl	CChoreoChannel::CChoreoChannel(),0x0000008c(%eax)
00000036	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%eax)
00000040	movb	$0x01,0x00000098(%eax)
00000047	ret
00000048	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::CChoreoChannel():
00000050	movl	0x04(%esp),%eax
00000054	movb	CChoreoChannel::CChoreoChannel(),0x04(%eax)
00000058	movl	CChoreoChannel::CChoreoChannel(),(%eax)
0000005e	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%eax)
00000068	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%eax)
00000072	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%eax)
0000007c	movl	CChoreoChannel::CChoreoChannel(),0x0000008c(%eax)
00000086	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%eax)
00000090	movb	$0x01,0x00000098(%eax)
00000097	ret
00000098	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::Init():
000000a0	movl	0x04(%esp),%eax
000000a4	movb	CChoreoChannel::CChoreoChannel(),0x04(%eax)
000000a8	movl	CChoreoChannel::CChoreoChannel(),(%eax)
000000ae	movb	$0x01,0x00000098(%eax)
000000b5	ret
000000b6	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::CChoreoChannel(char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%edi
000000cb	movb	CChoreoChannel::CChoreoChannel(),0x04(%edi)
000000cf	movl	CChoreoChannel::CChoreoChannel(),(%edi)
000000d5	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
000000df	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%edi)
000000e9	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%edi)
000000f3	movl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
000000fd	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
00000107	movb	$0x01,0x00000098(%edi)
0000010e	movl	0x0c(%ebp),%eax
00000111	movl	%eax,0x04(%esp)
00000115	leal	0x04(%edi),%eax
00000118	movl	%eax,(%esp)
0000011b	movl	$0x00000080,0x08(%esp)
00000123	calll	V_strncpy(char*, char const*, int)
00000128	addl	$0x10,%esp
0000012b	popl	%esi
0000012c	popl	%edi
0000012d	popl	%ebp
0000012e	ret
0000012f	movl	%eax,%esi
00000131	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%edi)
0000013b	movl	0x00000084(%edi),%eax
00000141	cmpl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
00000148	jns	0x00000158
0000014a	movl	%eax,0x00000094(%edi)
00000150	movl	%esi,(%esp)
00000153	calll	__Unwind_Resume
00000158	testl	%eax,%eax
0000015a	jne	0x00000172
0000015c	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
00000166	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
00000170	jmp	0x000001a1
00000172	movl	%eax,(%esp)
00000175	calll	_free
0000017a	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%edi)
00000184	cmpl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
0000018b	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
00000195	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
0000019f	js	0x000001ab
000001a1	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
000001ab	movl	%esi,(%esp)
000001ae	calll	__Unwind_Resume
000001b3	nopl	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::CChoreoChannel(char const*):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%edi
000001c4	pushl	%esi
000001c5	subl	$0x10,%esp
000001c8	movl	0x08(%ebp),%edi
000001cb	movb	CChoreoChannel::CChoreoChannel(),0x04(%edi)
000001cf	movl	CChoreoChannel::CChoreoChannel(),(%edi)
000001d5	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
000001df	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%edi)
000001e9	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%edi)
000001f3	movl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
000001fd	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
00000207	movb	$0x01,0x00000098(%edi)
0000020e	movl	0x0c(%ebp),%eax
00000211	movl	%eax,0x04(%esp)
00000215	leal	0x04(%edi),%eax
00000218	movl	%eax,(%esp)
0000021b	movl	$0x00000080,0x08(%esp)
00000223	calll	V_strncpy(char*, char const*, int)
00000228	addl	$0x10,%esp
0000022b	popl	%esi
0000022c	popl	%edi
0000022d	popl	%ebp
0000022e	ret
0000022f	movl	%eax,%esi
00000231	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%edi)
0000023b	movl	0x00000084(%edi),%eax
00000241	cmpl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
00000248	jns	0x00000258
0000024a	movl	%eax,0x00000094(%edi)
00000250	movl	%esi,(%esp)
00000253	calll	__Unwind_Resume
00000258	testl	%eax,%eax
0000025a	jne	0x00000272
0000025c	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
00000266	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
00000270	jmp	0x000002a1
00000272	movl	%eax,(%esp)
00000275	calll	_free
0000027a	movl	CChoreoChannel::CChoreoChannel(),0x00000084(%edi)
00000284	cmpl	CChoreoChannel::CChoreoChannel(),0x0000008c(%edi)
0000028b	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
00000295	movl	CChoreoChannel::CChoreoChannel(),0x00000094(%edi)
0000029f	js	0x000002ab
000002a1	movl	CChoreoChannel::CChoreoChannel(),0x00000088(%edi)
000002ab	movl	%esi,(%esp)
000002ae	calll	__Unwind_Resume
000002b3	nopl	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::SetName(char const*):
000002c0	pushl	%ebp
000002c1	movl	%esp,%ebp
000002c3	subl	$0x18,%esp
000002c6	movl	0x0c(%ebp),%eax
000002c9	movl	%eax,0x04(%esp)
000002cd	movl	0x08(%ebp),%eax
000002d0	addl	$0x04,%eax
000002d3	movl	%eax,(%esp)
000002d6	movl	$0x00000080,0x08(%esp)
000002de	calll	V_strncpy(char*, char const*, int)
000002e3	addl	$0x18,%esp
000002e6	popl	%ebp
000002e7	ret
000002e8	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::operator=(CChoreoChannel const&):
000002f0	pushl	%ebp
000002f1	movl	%esp,%ebp
000002f3	pushl	%ebx
000002f4	pushl	%edi
000002f5	pushl	%esi
000002f6	subl	$0x1c,%esp
000002f9	movl	0x0c(%ebp),%esi
000002fc	movb	0x00000098(%esi),%al
00000302	andb	$0x01,%al
00000304	movl	0x08(%ebp),%ebx
00000307	movb	%al,0x00000098(%ebx)
0000030d	leal	0x04(%esi),%eax
00000310	movl	%eax,0x04(%esp)
00000314	leal	0x04(%ebx),%eax
00000317	movl	%eax,(%esp)
0000031a	movl	$0x00000080,0x08(%esp)
00000322	calll	V_strncpy(char*, char const*, int)
00000327	leal	0x00000084(%ebx),%eax
0000032d	movl	%eax,0xec(%ebp)
00000330	xorl	%ecx,%ecx
00000332	jmp	0x000003c1
00000337	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000340	movl	%edi,%ecx
00000342	subl	%eax,%ecx
00000344	movl	%ecx,0x04(%esp)
00000348	movl	0xec(%ebp),%eax
0000034b	movl	%eax,(%esp)
0000034e	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
00000353	movl	0x00000090(%ebx),%ecx
00000359	incl	%ecx
0000035a	movl	%ecx,0x00000090(%ebx)
00000360	movl	0x00000084(%ebx),%eax
00000366	movl	%eax,0x00000094(%ebx)
0000036c	subl	%esi,%ecx
0000036e	decl	%ecx
0000036f	testl	%ecx,%ecx
00000371	jle	0x00000391
00000373	shll	$0x02,%ecx
00000376	movl	%ecx,0x08(%esp)
0000037a	leal	(%eax,%esi,4),%ecx
0000037d	movl	%ecx,0x04(%esp)
00000381	leal	(%eax,%edi,4),%eax
00000384	movl	%eax,(%esp)
00000387	calll	_memmove
0000038c	movl	0xec(%ebp),%eax
0000038f	movl	(%eax),%eax
00000391	movl	0xf0(%ebp),%edi
00000394	shll	$0x02,%esi
00000397	addl	%eax,%esi
00000399	movl	0x08(%ebp),%ebx
0000039c	je	0x000003a0
0000039e	movl	%edi,(%esi)
000003a0	movl	%ebx,0x04(%esp)
000003a4	movl	%edi,(%esp)
000003a7	calll	CChoreoEvent::SetChannel(CChoreoChannel*)
000003ac	movl	(%ebx),%eax
000003ae	movl	%eax,0x04(%esp)
000003b2	movl	%edi,(%esp)
000003b5	calll	CChoreoEvent::SetActor(CChoreoActor*)
000003ba	movl	0xe8(%ebp),%ecx
000003bd	incl	%ecx
000003be	movl	0x0c(%ebp),%esi
000003c1	cmpl	0x00000090(%esi),%ecx
000003c7	jge	0x00000424
000003c9	movl	0x00000084(%esi),%eax
000003cf	movl	(%eax,%ecx,4),%esi
000003d2	movl	%ecx,0xe8(%ebp)
000003d5	movl	$0x0000017c,(%esp)
000003dc	calll	operator new(unsigned long)
000003e1	movl	%eax,%edi
000003e3	movl	%esi,(%esp)
000003e6	calll	CChoreoEvent::GetScene()
000003eb	movl	%eax,0x04(%esp)
000003ef	movl	%edi,(%esp)
000003f2	calll	CChoreoEvent::CChoreoEvent(CChoreoScene*)
000003f7	movl	%esi,0x04(%esp)
000003fb	movl	%edi,(%esp)
000003fe	movl	%edi,0xf0(%ebp)
00000401	calll	CChoreoEvent::operator=(CChoreoEvent const&)
00000406	movl	0x00000088(%ebx),%eax
0000040c	movl	0x00000090(%ebx),%esi
00000412	leal	0x01(%esi),%edi
00000415	cmpl	%eax,%edi
00000417	movl	%esi,%ecx
00000419	jle	0x00000359
0000041f	jmp	0x00000340
00000424	movl	%ebx,%eax
00000426	addl	$0x1c,%esp
00000429	popl	%esi
0000042a	popl	%edi
0000042b	popl	%ebx
0000042c	popl	%ebp
0000042d	ret
0000042e	movl	%eax,%esi
00000430	movl	%edi,(%esp)
00000433	calll	operator delete(void*)
00000438	movl	%esi,(%esp)
0000043b	calll	__Unwind_Resume
CChoreoChannel::AddEvent(CChoreoEvent*):
00000440	pushl	%ebp
00000441	movl	%esp,%ebp
00000443	pushl	%ebx
00000444	pushl	%edi
00000445	pushl	%esi
00000446	subl	$0x1c,%esp
00000449	movl	0x08(%ebp),%edi
0000044c	movl	0x00000088(%edi),%eax
00000452	movl	0x00000090(%edi),%esi
00000458	leal	0x00000084(%edi),%ebx
0000045e	leal	0x01(%esi),%edx
00000461	cmpl	%eax,%edx
00000463	movl	%esi,%ecx
00000465	jle	0x00000487
00000467	movl	%edx,%ecx
00000469	subl	%eax,%ecx
0000046b	movl	%ecx,0x04(%esp)
0000046f	movl	%ebx,(%esp)
00000472	movl	%ebx,0xf0(%ebp)
00000475	movl	%edx,%ebx
00000477	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
0000047c	movl	%ebx,%edx
0000047e	movl	0xf0(%ebp),%ebx
00000481	movl	0x00000090(%edi),%ecx
00000487	movl	%ebx,0xf0(%ebp)
0000048a	incl	%ecx
0000048b	movl	%ecx,0x00000090(%edi)
00000491	movl	0x00000084(%edi),%eax
00000497	movl	%eax,0x00000094(%edi)
0000049d	subl	%esi,%ecx
0000049f	decl	%ecx
000004a0	testl	%ecx,%ecx
000004a2	jle	0x000004c2
000004a4	shll	$0x02,%ecx
000004a7	movl	%ecx,0x08(%esp)
000004ab	leal	(%eax,%esi,4),%ecx
000004ae	movl	%ecx,0x04(%esp)
000004b2	leal	(%eax,%edx,4),%eax
000004b5	movl	%eax,(%esp)
000004b8	calll	_memmove
000004bd	movl	0xf0(%ebp),%eax
000004c0	movl	(%eax),%eax
000004c2	shll	$0x02,%esi
000004c5	addl	%eax,%esi
000004c7	je	0x000004ce
000004c9	movl	0x0c(%ebp),%eax
000004cc	movl	%eax,(%esi)
000004ce	addl	$0x1c,%esp
000004d1	popl	%esi
000004d2	popl	%edi
000004d3	popl	%ebx
000004d4	popl	%ebp
000004d5	ret
000004d6	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::GetName():
000004e0	movl	0x04(%esp),%eax
000004e4	addl	$0x04,%eax
000004e7	ret
000004e8	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::GetNumEvents():
000004f0	movl	0x04(%esp),%eax
000004f4	movl	0x00000090(%eax),%eax
000004fa	ret
000004fb	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::GetEvent(int):
00000500	xorl	%eax,%eax
00000502	movl	0x08(%esp),%ecx
00000506	testl	%ecx,%ecx
00000508	js	0x00000521
0000050a	movl	0x04(%esp),%edx
0000050e	xorl	%eax,%eax
00000510	cmpl	%ecx,0x00000090(%edx)
00000516	jle	0x00000521
00000518	movl	0x00000084(%edx),%eax
0000051e	movl	(%eax,%ecx,4),%eax
00000521	ret
00000522	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::RemoveEvent(CChoreoEvent*):
00000530	pushl	%ebp
00000531	movl	%esp,%ebp
00000533	pushl	%ebx
00000534	pushl	%edi
00000535	pushl	%esi
00000536	subl	$0x0c,%esp
00000539	movl	0x08(%ebp),%esi
0000053c	movl	0x00000090(%esi),%eax
00000542	xorl	%edx,%edx
00000544	movl	$0xfffffffc,%ecx
00000549	movl	0x0c(%ebp),%ebx
0000054c	jmp	0x00000554
0000054e	nop
00000550	addl	$0xfc,%ecx
00000553	incl	%edx
00000554	cmpl	%eax,%edx
00000556	jge	0x00000596
00000558	movl	0x00000084(%esi),%edi
0000055e	cmpl	%ebx,(%edi,%edx,4)
00000561	jne	0x00000550
00000563	cmpl	$0xff,%edx
00000566	je	0x00000596
00000568	leal	0xff(%eax),%ebx
0000056b	subl	%edx,%ebx
0000056d	testl	%ebx,%ebx
0000056f	jle	0x0000058f
00000571	subl	%ecx,%edi
00000573	movl	%edi,0x04(%esp)
00000577	leal	(%ecx,%eax,4),%eax
0000057a	movl	%eax,0x08(%esp)
0000057e	addl	$0xfc,%edi
00000581	movl	%edi,(%esp)
00000584	calll	_memmove
00000589	movl	0x00000090(%esi),%eax
0000058f	decl	%eax
00000590	movl	%eax,0x00000090(%esi)
00000596	addl	$0x0c,%esp
00000599	popl	%esi
0000059a	popl	%edi
0000059b	popl	%ebx
0000059c	popl	%ebp
0000059d	ret
0000059e	nop
CChoreoChannel::FindEventIndex(CChoreoEvent*):
000005a0	pushl	%edi
000005a1	pushl	%esi
000005a2	movl	0x0c(%esp),%ecx
000005a6	movl	0x00000090(%ecx),%esi
000005ac	xorl	%edx,%edx
000005ae	movl	0x10(%esp),%edi
000005b2	jmp	0x000005c1
000005b4	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
000005c0	incl	%edx
000005c1	movl	$0xffffffff,%eax
000005c6	cmpl	%esi,%edx
000005c8	jge	0x000005d7
000005ca	movl	0x00000084(%ecx),%eax
000005d0	cmpl	%edi,(%eax,%edx,4)
000005d3	jne	0x000005c0
000005d5	movl	%edx,%eax
000005d7	popl	%esi
000005d8	popl	%edi
000005d9	ret
000005da	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::RemoveAllEvents():
000005e0	movl	0x04(%esp),%eax
000005e4	movl	CChoreoChannel::CChoreoChannel(),0x00000090(%eax)
000005ee	ret
000005ef	nop
CChoreoChannel::SetActor(CChoreoActor*):
000005f0	movl	0x08(%esp),%eax
000005f4	movl	0x04(%esp),%ecx
000005f8	movl	%eax,(%ecx)
000005fa	ret
000005fb	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::GetActor():
00000600	movl	0x04(%esp),%eax
00000604	movl	(%eax),%eax
00000606	ret
00000607	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::SetActive(bool):
00000610	movb	0x08(%esp),%al
00000614	movl	0x04(%esp),%ecx
00000618	movb	%al,0x00000098(%ecx)
0000061e	ret
0000061f	nop
CChoreoChannel::GetActive() const:
00000620	movl	0x04(%esp),%eax
00000624	movzbl	0x00000098(%eax),%eax
0000062b	andl	$0x01,%eax
0000062e	ret
0000062f	nop
CChoreoChannel::ReconcileGestureTimes():
00000630	pushl	%ebp
00000631	movl	%esp,%ebp
00000633	pushl	%ebx
00000634	pushl	%edi
00000635	pushl	%esi
00000636	subl	$0x5c,%esp
00000639	calll	0x0000063e
0000063e	popl	%eax
0000063f	movl	%eax,0xac(%ebp)
00000642	leal	ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)-0x63e(%eax),%eax
00000648	movl	%eax,0xd8(%ebp)
0000064b	movl	CChoreoChannel::CChoreoChannel(),0xdc(%ebp)
00000652	movl	CChoreoChannel::CChoreoChannel(),0xe0(%ebp)
00000659	movl	CChoreoChannel::CChoreoChannel(),0xe4(%ebp)
00000660	movw	$0xffff,0xe8(%ebp)
00000666	movw	CChoreoChannel::CChoreoChannel(),0xea(%ebp)
0000066c	movw	$0xffff,0xec(%ebp)
00000672	movw	$0xffff,0xee(%ebp)
00000678	movl	CChoreoChannel::CChoreoChannel(),0xf0(%ebp)
0000067f	movl	0x08(%ebp),%esi
00000682	movl	0x00000090(%esi),%edi
00000688	xorl	%ebx,%ebx
0000068a	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000690	cmpl	%edi,%ebx
00000692	jge	0x000006e5
00000694	xorl	%eax,%eax
00000696	cmpl	%ebx,0x00000090(%esi)
0000069c	jle	0x000006a7
0000069e	movl	0x00000084(%esi),%eax
000006a4	movl	(%eax,%ebx,4),%eax
000006a7	movl	%eax,0xd4(%ebp)
000006aa	movl	%eax,(%esp)
000006ad	calll	CChoreoEvent::GetType()
000006b2	cmpl	$0x06,%eax
000006b5	jne	0x000006c9
000006b7	leal	0xd4(%ebp),%eax
000006ba	movl	%eax,0x04(%esp)
000006be	leal	0xd8(%ebp),%eax
000006c1	movl	%eax,(%esp)
000006c4	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
000006c9	incl	%ebx
000006ca	jmp	0x00000690
000006cc	jmp	0x000006d0
000006ce	jmp	0x000006d0
000006d0	movl	%eax,%esi
000006d2	leal	0xd8(%ebp),%eax
000006d5	movl	%eax,(%esp)
000006d8	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::~CUtlRBTree()
000006dd	movl	%esi,(%esp)
000006e0	calll	__Unwind_Resume
000006e5	cmpw	CChoreoChannel::CChoreoChannel(),0xea(%ebp)
000006ea	je	0x0000087a
000006f0	leal	0xd8(%ebp),%eax
000006f3	movl	%eax,(%esp)
000006f6	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FirstInorder() const
000006fb	movl	CChoreoChannel::CChoreoChannel(),CChoreoChannel::CChoreoChannel(char const*)(%ebp)
00000702	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000710	movl	CChoreoChannel::CChoreoChannel(char const*)(%ebp),%ebx
00000713	cmpw	$0xff,%ax
00000717	je	0x0000086e
0000071d	movzwl	%ax,%eax
00000720	movl	%eax,0xb8(%ebp)
00000723	imull	$0x0c,%eax,%eax
00000726	movl	0xdc(%ebp),%ecx
00000729	movl	0x08(%ecx,%eax),%eax
0000072d	movl	%eax,CChoreoChannel::CChoreoChannel(char const*)(%ebp)
00000730	testl	%ebx,%ebx
00000732	je	0x00000857
00000738	movl	%ebx,(%esp)
0000073b	calll	CChoreoEvent::GetSyncToFollowingGesture()
00000740	cmpb	$0x01,%al
00000742	jne	0x00000857
00000748	movl	CChoreoChannel::CChoreoChannel(char const*)(%ebp),%eax
0000074b	movl	%eax,(%esp)
0000074e	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000756	calll	CChoreoEvent::FindEntryTag(CChoreoEvent::AbsTagType)
0000075b	movl	%eax,%edi
0000075d	movl	%ebx,(%esp)
00000760	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000768	calll	CChoreoEvent::FindExitTag(CChoreoEvent::AbsTagType)
0000076d	movl	%eax,%esi
0000076f	testl	%edi,%edi
00000771	je	0x00000857
00000777	testl	%esi,%esi
00000779	je	0x00000857
0000077f	movl	%edi,(%esp)
00000782	calll	CEventAbsoluteTag::GetAbsoluteTime()
00000787	fstps	0xd0(%ebp)
0000078a	movss	0xd0(%ebp),%xmm0
0000078f	movss	%xmm0,0xbc(%ebp)
00000794	movl	(%ebx),%eax
00000796	movl	(%eax),%eax
00000798	movl	%ebx,(%esp)
0000079b	call	*%eax
0000079d	fstps	0xcc(%ebp)
000007a0	movss	0xcc(%ebp),%xmm0
000007a5	movss	%xmm0,0xb4(%ebp)
000007aa	movl	%esi,(%esp)
000007ad	calll	CEventAbsoluteTag::GetPercentage()
000007b2	fstps	0xc8(%ebp)
000007b5	movss	0xc8(%ebp),%xmm0
000007ba	movss	%xmm0,0xb0(%ebp)
000007bf	movl	%ebx,(%esp)
000007c2	calll	CChoreoEvent::GetStartTime()
000007c7	fstps	0xc4(%ebp)
000007ca	movss	0xc4(%ebp),%xmm0
000007cf	movss	0xb0(%ebp),%xmm1
000007d4	cvtss2sd	%xmm1,%xmm2
000007d8	movl	0xac(%ebp),%eax
000007db	movsd	0x45bd0-0x63e(%eax),%xmm1
000007e3	subsd	%xmm2,%xmm1
000007e7	movss	0xb4(%ebp),%xmm2
000007ec	cvtss2sd	%xmm2,%xmm2
000007f0	mulsd	%xmm1,%xmm2
000007f4	cvtsd2ss	%xmm2,%xmm1
000007f8	addss	0xbc(%ebp),%xmm1
000007fd	movss	%xmm1,0xb4(%ebp)
00000802	movss	%xmm1,0x08(%esp)
00000808	movss	%xmm0,0x04(%esp)
0000080e	movl	%ebx,(%esp)
00000811	movl	$0x00000001,0x0c(%esp)
00000819	calll	CChoreoEvent::RescaleGestureTimes(float, float, bool)
0000081e	movss	0xb4(%ebp),%xmm0
00000823	movss	%xmm0,0x04(%esp)
00000829	movl	%ebx,(%esp)
0000082c	calll	CChoreoEvent::SetEndTime(float)
00000831	movss	0xbc(%ebp),%xmm0
00000836	movss	%xmm0,0x04(%esp)
0000083c	movl	%esi,(%esp)
0000083f	calll	CEventAbsoluteTag::SetAbsoluteTime(float)
00000844	movl	CChoreoChannel::CChoreoChannel(char const*)(%ebp),%eax
00000847	movl	%eax,(%esp)
0000084a	calll	CChoreoEvent::PreventTagOverlap()
0000084f	movl	%ebx,(%esp)
00000852	calll	CChoreoEvent::PreventTagOverlap()
00000857	movl	0xb8(%ebp),%eax
0000085a	movl	%eax,0x04(%esp)
0000085e	leal	0xd8(%ebp),%eax
00000861	movl	%eax,(%esp)
00000864	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
00000869	jmp	0x00000710
0000086e	testl	%ebx,%ebx
00000870	je	0x0000087a
00000872	movl	%ebx,(%esp)
00000875	calll	CChoreoEvent::GetScene()
0000087a	leal	0xd8(%ebp),%eax
0000087d	movl	%eax,(%esp)
00000880	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::~CUtlRBTree()
00000885	addl	$0x5c,%esp
00000888	popl	%esi
00000889	popl	%edi
0000088a	popl	%ebx
0000088b	popl	%ebp
0000088c	ret
0000088d	calll	std::terminate()
00000892	nopw	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&):
000008a0	pushl	%ebp
000008a1	movl	%esp,%ebp
000008a3	pushl	%esi
000008a4	subl	$0x14,%esp
000008a7	movl	0x0c(%ebp),%eax
000008aa	movl	(%eax),%esi
000008ac	movl	0x08(%ebp),%eax
000008af	movl	(%eax),%eax
000008b1	movl	%eax,(%esp)
000008b4	calll	CChoreoEvent::GetStartTime()
000008b9	movl	%esi,(%esp)
000008bc	fstps	0xf8(%ebp)
000008bf	calll	CChoreoEvent::GetStartTime()
000008c4	fstps	0xf4(%ebp)
000008c7	movss	0xf4(%ebp),%xmm0
000008cc	ucomiss	0xf8(%ebp),%xmm0
000008d0	seta	%al
000008d3	movzbl	%al,%eax
000008d6	addl	$0x14,%esp
000008d9	popl	%esi
000008da	popl	%ebp
000008db	ret
000008dc	nopl	CChoreoChannel::CChoreoChannel()(%eax)
CChoreoChannel::MarkForSaveAll(bool):
000008e0	pushl	%edi
000008e1	pushl	%esi
000008e2	movb	0x10(%esp),%al
000008e6	movl	0x0c(%esp),%ecx
000008ea	movb	%al,0x00000099(%ecx)
000008f0	movl	0x00000090(%ecx),%edx
000008f6	testl	%edx,%edx
000008f8	jle	0x0000092c
000008fa	shlb	$0x06,%al
000008fd	xorl	%esi,%esi
000008ff	nop
00000900	cmpl	%esi,0x00000090(%ecx)
00000906	movl	CChoreoChannel::CChoreoChannel(),%edi
0000090b	jle	0x00000916
0000090d	movl	0x00000084(%ecx),%edi
00000913	movl	(%edi,%esi,4),%edi
00000916	movb	0x00000178(%edi),%ah
0000091c	andb	$0xbf,%ah
0000091f	orb	%al,%ah
00000921	movb	%ah,0x00000178(%edi)
00000927	incl	%esi
00000928	cmpl	%esi,%edx
0000092a	jne	0x00000900
0000092c	popl	%esi
0000092d	popl	%edi
0000092e	ret
0000092f	nop
CChoreoChannel::ReconcileCloseCaption():
00000930	pushl	%ebp
00000931	movl	%esp,%ebp
00000933	pushl	%ebx
00000934	pushl	%edi
00000935	pushl	%esi
00000936	subl	$0x7c,%esp
00000939	calll	0x0000093e
0000093e	popl	%eax
0000093f	movl	%eax,0x98(%ebp)
00000942	xorps	%xmm0,%xmm0
00000945	movaps	%xmm0,0xc8(%ebp)
00000949	movl	$0xffffffff,0xd8(%ebp)
00000950	movl	CChoreoChannel::CChoreoChannel(),0xdc(%ebp)
00000957	movl	$0xffffffff,0xe0(%ebp)
0000095e	movl	$0xffffffff,0xe4(%ebp)
00000965	movl	CChoreoChannel::CChoreoChannel(),0xe8(%ebp)
0000096c	leal	CaselessStringLessThan(char const* const&, char const* const&)-0x93e(%eax),%eax
00000972	movl	%eax,0xc8(%ebp)
00000975	movl	0x08(%ebp),%ecx
00000978	movl	0x00000090(%ecx),%eax
0000097e	movl	%eax,0x94(%ebp)
00000981	xorl	%edx,%edx
00000983	nopl	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000990	cmpl	0x94(%ebp),%edx
00000993	jge	0x00000b6e
00000999	xorl	%eax,%eax
0000099b	cmpl	%edx,0x00000090(%ecx)
000009a1	jle	0x000009ac
000009a3	movl	0x00000084(%ecx),%eax
000009a9	movl	(%eax,%edx,4),%eax
000009ac	movl	%edx,0x9c(%ebp)
000009af	movl	%eax,0xc4(%ebp)
000009b2	movl	%eax,(%esp)
000009b5	calll	CChoreoEvent::GetType()
000009ba	cmpl	$0x05,%eax
000009bd	jne	0x00000b62
000009c3	movl	0xc4(%ebp),%eax
000009c6	movl	%eax,(%esp)
000009c9	calll	CChoreoEvent::GetCloseCaptionType() const
000009ce	movl	%eax,%edi
000009d0	movl	0xc4(%ebp),%eax
000009d3	cmpl	$0x02,%edi
000009d6	jne	0x00000a3b
000009d8	movl	%eax,(%esp)
000009db	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
000009e3	calll	CChoreoEvent::SetUsingCombinedFile(bool)
000009e8	movl	0xc4(%ebp),%eax
000009eb	movl	%eax,(%esp)
000009ee	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
000009f6	calll	CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
000009fb	movl	0xc4(%ebp),%eax
000009fe	movl	%eax,(%esp)
00000a01	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a09	calll	CChoreoEvent::SetNumSlaves(int)
00000a0e	movl	0xc4(%ebp),%eax
00000a11	movl	%eax,(%esp)
00000a14	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a1c	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000a21	jmp	0x00000b62
00000a26	movl	%eax,%esi
00000a28	jmp	0x00000d20
00000a2d	movl	%eax,%esi
00000a2f	jmp	0x00000d20
00000a34	movl	%eax,%esi
00000a36	jmp	0x00000d20
00000a3b	movl	%eax,(%esp)
00000a3e	calll	CChoreoEvent::GetCloseCaptionToken() const
00000a43	movl	%eax,%esi
00000a45	testl	%esi,%esi
00000a47	je	0x00000a4e
00000a49	cmpb	CChoreoChannel::CChoreoChannel(),(%esi)
00000a4c	jne	0x00000abb
00000a4e	cmpl	$0x01,%edi
00000a51	jne	0x00000b62
00000a57	movl	0xc4(%ebp),%eax
00000a5a	movl	%eax,(%esp)
00000a5d	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a65	calll	CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
00000a6a	movl	0xc4(%ebp),%eax
00000a6d	movl	%eax,(%esp)
00000a70	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a78	calll	CChoreoEvent::SetUsingCombinedFile(bool)
00000a7d	movl	0xc4(%ebp),%eax
00000a80	movl	%eax,(%esp)
00000a83	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a8b	calll	CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
00000a90	movl	0xc4(%ebp),%eax
00000a93	movl	%eax,(%esp)
00000a96	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000a9e	calll	CChoreoEvent::SetNumSlaves(int)
00000aa3	movl	0xc4(%ebp),%eax
00000aa6	movl	%eax,(%esp)
00000aa9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000ab1	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000ab6	jmp	0x00000b62
00000abb	movl	%esi,0x04(%esp)
00000abf	leal	0xc8(%ebp),%edi
00000ac2	movl	%edi,(%esp)
00000ac5	calll	CUtlDict<EventGroup, int>::Find(char const*) const
00000aca	cmpl	$0xff,%eax
00000acd	jne	0x00000b49
00000acf	movl	0x98(%ebp),%eax
00000ad2	leal	ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)-0x93e(%eax),%eax
00000ad8	movl	%eax,0xa8(%ebp)
00000adb	movl	CChoreoChannel::CChoreoChannel(),0xac(%ebp)
00000ae2	movl	CChoreoChannel::CChoreoChannel(),0xb0(%ebp)
00000ae9	movl	CChoreoChannel::CChoreoChannel(),0xb4(%ebp)
00000af0	movw	$0xffff,0xb8(%ebp)
00000af6	movw	CChoreoChannel::CChoreoChannel(),0xba(%ebp)
00000afc	movw	$0xffff,0xbc(%ebp)
00000b02	movw	$0xffff,0xbe(%ebp)
00000b08	movl	CChoreoChannel::CChoreoChannel(),CChoreoChannel::CChoreoChannel(char const*)(%ebp)
00000b0f	leal	0xc4(%ebp),%eax
00000b12	movl	%eax,0x04(%esp)
00000b16	leal	0xa8(%ebp),%ebx
00000b19	movl	%ebx,(%esp)
00000b1c	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
00000b21	movl	%esi,(%esp)
00000b24	calll	_strdup
00000b29	movl	%eax,0xf0(%ebp)
00000b2c	movl	%ebx,0x08(%esp)
00000b30	leal	0xf0(%ebp),%eax
00000b33	movl	%eax,0x04(%esp)
00000b37	movl	%edi,(%esp)
00000b3a	calll	CUtlMap<char const*, EventGroup, int>::Insert(char const* const&, EventGroup const&)
00000b3f	movl	%ebx,(%esp)
00000b42	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::~CUtlRBTree()
00000b47	jmp	0x00000b62
00000b49	movl	0xcc(%ebp),%ecx
00000b4c	leal	0xc4(%ebp),%edx
00000b4f	movl	%edx,0x04(%esp)
00000b53	imull	$0x30,%eax,%eax
00000b56	leal	0x14(%ecx,%eax),%eax
00000b5a	movl	%eax,(%esp)
00000b5d	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
00000b62	movl	0x9c(%ebp),%edx
00000b65	incl	%edx
00000b66	movl	0x08(%ebp),%ecx
00000b69	jmp	0x00000990
00000b6e	movl	0xdc(%ebp),%eax
00000b71	movl	%eax,0x8c(%ebp)
00000b74	testl	%eax,%eax
00000b76	je	0x00000d03
00000b7c	xorl	%eax,%eax
00000b7e	nop
00000b80	cmpl	0x8c(%ebp),%eax
00000b83	jge	0x00000d03
00000b89	imull	$0x30,%eax,%esi
00000b8c	movl	%eax,0x90(%ebp)
00000b8f	movl	0xcc(%ebp),%edi
00000b92	movzwl	0x26(%edi,%esi),%eax
00000b97	movl	%eax,0x9c(%ebp)
00000b9a	cmpl	$0x01,%eax
00000b9d	ja	0x00000bfc
00000b9f	movl	0x18(%edi,%esi),%eax
00000ba3	movl	0x08(%eax),%esi
00000ba6	movl	%esi,(%esp)
00000ba9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000bb1	calll	CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
00000bb6	movl	%esi,(%esp)
00000bb9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000bc1	calll	CChoreoEvent::SetUsingCombinedFile(bool)
00000bc6	movl	%esi,(%esp)
00000bc9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000bd1	calll	CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
00000bd6	movl	%esi,(%esp)
00000bd9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000be1	calll	CChoreoEvent::SetNumSlaves(int)
00000be6	movl	%esi,(%esp)
00000be9	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000bf1	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000bf6	movl	0x90(%ebp),%eax
00000bf9	incl	%eax
00000bfa	jmp	0x00000b80
00000bfc	leal	0x14(%edi,%esi),%eax
00000c00	movl	%eax,0x98(%ebp)
00000c03	movl	%eax,(%esp)
00000c06	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FirstInorder() const
00000c0b	leal	0x18(%edi,%esi),%ecx
00000c0f	movl	%ecx,0x94(%ebp)
00000c12	decl	0x9c(%ebp)
00000c15	xorl	%esi,%esi
00000c17	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000c20	cmpw	$0xff,%ax
00000c24	je	0x00000bf6
00000c26	movl	0x94(%ebp),%ecx
00000c29	movl	(%ecx),%ecx
00000c2b	movzwl	%ax,%edi
00000c2e	imull	$0x0c,%edi,%eax
00000c31	movl	0x08(%ecx,%eax),%ebx
00000c35	testl	%esi,%esi
00000c37	jne	0x00000c8a
00000c39	movl	%ebx,(%esp)
00000c3c	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000c44	calll	CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
00000c49	movl	%ebx,(%esp)
00000c4c	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000c54	calll	CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
00000c59	movl	0x9c(%ebp),%eax
00000c5c	movl	%eax,0x04(%esp)
00000c60	movl	%ebx,(%esp)
00000c63	calll	CChoreoEvent::SetNumSlaves(int)
00000c68	movl	%ebx,(%esp)
00000c6b	calll	CChoreoEvent::GetEndTime()
00000c70	fstps	CChoreoChannel::Init()(%ebp)
00000c73	movss	CChoreoChannel::Init()(%ebp),%xmm0
00000c78	movss	%xmm0,0x04(%esp)
00000c7e	movl	%ebx,(%esp)
00000c81	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000c86	movl	%ebx,%esi
00000c88	jmp	0x00000cef
00000c8a	movl	%ebx,(%esp)
00000c8d	calll	CChoreoEvent::GetEndTime()
00000c92	fstps	0xa4(%ebp)
00000c95	movss	0xa4(%ebp),%xmm0
00000c9a	movss	%xmm0,0x04(%esp)
00000ca0	movl	%esi,(%esp)
00000ca3	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000ca8	movl	%ebx,(%esp)
00000cab	movl	$0x00000001,0x04(%esp)
00000cb3	calll	CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
00000cb8	movl	%esi,(%esp)
00000cbb	calll	CChoreoEvent::IsUsingCombinedFile() const
00000cc0	movzbl	%al,%eax
00000cc3	movl	%eax,0x04(%esp)
00000cc7	movl	%ebx,(%esp)
00000cca	calll	CChoreoEvent::SetUsingCombinedFile(bool)
00000ccf	movl	%ebx,(%esp)
00000cd2	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000cda	calll	CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
00000cdf	movl	%ebx,(%esp)
00000ce2	movl	CChoreoChannel::CChoreoChannel(),0x04(%esp)
00000cea	calll	CChoreoEvent::SetLastSlaveEndTime(float)
00000cef	movl	%edi,0x04(%esp)
00000cf3	movl	0x98(%ebp),%eax
00000cf6	movl	%eax,(%esp)
00000cf9	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
00000cfe	jmp	0x00000c20
00000d03	leal	0xc8(%ebp),%eax
00000d06	movl	%eax,(%esp)
00000d09	calll	CUtlDict<EventGroup, int>::~CUtlDict()
00000d0e	addl	$0x7c,%esp
00000d11	popl	%esi
00000d12	popl	%edi
00000d13	popl	%ebx
00000d14	popl	%ebp
00000d15	ret
00000d16	movl	%eax,%esi
00000d18	movl	%ebx,(%esp)
00000d1b	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::~CUtlRBTree()
00000d20	leal	0xc8(%ebp),%eax
00000d23	movl	%eax,(%esp)
00000d26	calll	CUtlDict<EventGroup, int>::~CUtlDict()
00000d2b	movl	%esi,(%esp)
00000d2e	calll	__Unwind_Resume
00000d33	calll	std::terminate()
00000d38	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::GetSortedCombinedEventList(char const*, CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >&):
00000d40	pushl	%ebp
00000d41	movl	%esp,%ebp
00000d43	pushl	%ebx
00000d44	pushl	%edi
00000d45	pushl	%esi
00000d46	subl	$0x0c,%esp
00000d49	movl	0x10(%ebp),%eax
00000d4c	movl	%eax,(%esp)
00000d4f	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RemoveAll()
00000d54	movl	0x08(%ebp),%ebx
00000d57	movl	0x00000090(%ebx),%edi
00000d5d	testl	%edi,%edi
00000d5f	jle	0x00000dfd
00000d65	xorl	%esi,%esi
00000d67	nopw	CChoreoChannel::CChoreoChannel()(%eax,%eax)
00000d70	cmpl	%esi,0x00000090(%ebx)
00000d76	movl	CChoreoChannel::CChoreoChannel(),%eax
00000d7b	jle	0x00000d86
00000d7d	movl	0x00000084(%ebx),%eax
00000d83	movl	(%eax,%esi,4),%eax
00000d86	movl	%eax,0xf0(%ebp)
00000d89	movl	%eax,(%esp)
00000d8c	calll	CChoreoEvent::GetType()
00000d91	cmpl	$0x05,%eax
00000d94	jne	0x00000df4
00000d96	movl	0xf0(%ebp),%eax
00000d99	movl	%eax,(%esp)
00000d9c	calll	CChoreoEvent::GetCloseCaptionType() const
00000da1	cmpl	$0x02,%eax
00000da4	je	0x00000df4
00000da6	movl	0xf0(%ebp),%eax
00000da9	movl	%eax,(%esp)
00000dac	calll	CChoreoEvent::GetCloseCaptionType() const
00000db1	testl	%eax,%eax
00000db3	jne	0x00000dc4
00000db5	movl	0xf0(%ebp),%eax
00000db8	movl	%eax,(%esp)
00000dbb	calll	CChoreoEvent::GetNumSlaves() const
00000dc0	testl	%eax,%eax
00000dc2	je	0x00000df4
00000dc4	movl	0xf0(%ebp),%eax
00000dc7	movl	%eax,(%esp)
00000dca	calll	CChoreoEvent::GetCloseCaptionToken() const
00000dcf	movl	0x0c(%ebp),%ecx
00000dd2	movl	%ecx,0x04(%esp)
00000dd6	movl	%eax,(%esp)
00000dd9	calll	V_stricmp(char const*, char const*)
00000dde	testl	%eax,%eax
00000de0	jne	0x00000df4
00000de2	leal	0xf0(%ebp),%eax
00000de5	movl	%eax,0x04(%esp)
00000de9	movl	0x10(%ebp),%eax
00000dec	movl	%eax,(%esp)
00000def	calll	CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
00000df4	incl	%esi
00000df5	cmpl	%esi,%edi
00000df7	jne	0x00000d70
00000dfd	movl	0x10(%ebp),%eax
00000e00	cmpw	CChoreoChannel::CChoreoChannel(),0x12(%eax)
00000e05	setne	%al
00000e08	movzbl	%al,%eax
00000e0b	addl	$0x0c,%esp
00000e0e	popl	%esi
00000e0f	popl	%edi
00000e10	popl	%ebx
00000e11	popl	%ebp
00000e12	ret
00000e13	nopl	%cs:CChoreoChannel::CChoreoChannel()(%eax,%eax)
CChoreoChannel::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*):
00000e20	pushl	%ebp
00000e21	movl	%esp,%ebp
00000e23	pushl	%ebx
00000e24	pushl	%edi
00000e25	pushl	%esi
00000e26	subl	$0x1c,%esp
00000e29	calll	0x00000e2e
00000e2e	popl	%ebx
00000e2f	movl	0x14(%ebp),%edx
00000e32	movl	(%edx),%eax
00000e34	movl	0x08(%ebp),%ecx
00000e37	leal	0x04(%ecx),%ecx
00000e3a	movl	%ecx,0x04(%esp)
00000e3e	movl	%edx,(%esp)
00000e41	call	(%eax)
00000e43	movw	%ax,%si
00000e46	movl	0x0c(%ebp),%edi
00000e49	testb	$0x01,0x15(%edi)
00000e4d	jne	0x00000e8d
00000e4f	movl	%ebx,0xf0(%ebp)
00000e52	movl	%edi,(%esp)
00000e55	movl	$0x00000002,0x04(%esp)
00000e5d	calll	CUtlBuffer::CheckPut(int)
00000e62	cmpb	$0x01,%al
00000e64	jne	0x00000ea9
00000e66	movl	0x10(%edi),%eax
00000e69	subl	0x20(%edi),%eax
00000e6c	addl	(%edi),%eax
00000e6e	testb	$0x01,0x34(%edi)
00000e72	je	0x00000e7c
00000e74	testl	%eax,%eax
00000e76	je	0x00000e7f
00000e78	rolw	$0x08,%si
00000e7c	movw	%si,(%eax)
00000e7f	addl	$0x02,0x10(%edi)
00000e83	movl	%edi,(%esp)
00000e86	calll	CUtlBuffer::AddNullTermination()
00000e8b	jmp	0x00000ea9
00000e8d	movswl	%si,%eax
00000e90	movl	%eax,0x08(%esp)
00000e94	leal	0x49274-0xe2e(%ebx),%eax
00000e9a	movl	%ebx,0xf0(%ebp)
00000e9d	movl	%eax,0x04(%esp)
00000ea1	movl	%edi,(%esp)
00000ea4	calll	CUtlBuffer::Printf(char const*, ...)
00000ea9	movl	0x08(%ebp),%eax
00000eac	movl	0x00000090(%eax),%ebx
00000eb2	testb	$0x01,0x15(%edi)
00000eb6	movl	0xf0(%ebp),%eax
00000eb9	jne	0x00000ee7
00000ebb	movl	%edi,(%esp)
00000ebe	movl	$0x00000001,0x04(%esp)
00000ec6	calll	CUtlBuffer::CheckPut(int)
00000ecb	cmpb	$0x01,%al
00000ecd	jne	0x00000f00
00000ecf	movl	(%edi),%eax
00000ed1	movl	0x10(%edi),%ecx
00000ed4	subl	0x20(%edi),%ecx
00000ed7	movb	%bl,(%eax,%ecx)
00000eda	incl	0x10(%edi)
00000edd	movl	%edi,(%esp)
00000ee0	calll	CUtlBuffer::AddNullTermination()
00000ee5	jmp	0x00000f00
00000ee7	leal	0x49271-0xe2e(%eax),%eax
00000eed	movl	%eax,0x04(%esp)
00000ef1	movl	%edi,(%esp)
00000ef4	movzbl	%bl,%eax
00000ef7	movl	%eax,0x08(%esp)
00000efb	calll	CUtlBuffer::Printf(char const*, ...)
00000f00	testl	%ebx,%ebx
00000f02	movl	0x08(%ebp),%ecx
00000f05	jle	0x00000f4c
00000f07	xorl	%esi,%esi
00000f09	nopl	CChoreoChannel::CChoreoChannel()(%eax)
00000f10	cmpl	%esi,0x00000090(%ecx)
00000f16	movl	CChoreoChannel::CChoreoChannel(),%eax
00000f1b	jle	0x00000f26
00000f1d	movl	0x00000084(%ecx),%eax
00000f23	movl	(%eax,%esi,4),%eax
00000f26	movl	%ecx,%edi
00000f28	movl	0x14(%ebp),%ecx
00000f2b	movl	%ecx,0x0c(%esp)
00000f2f	movl	0x10(%ebp),%ecx
00000f32	movl	%ecx,0x08(%esp)
00000f36	movl	0x0c(%ebp),%ecx
00000f39	movl	%ecx,0x04(%esp)
00000f3d	movl	%eax,(%esp)
00000f40	calll	CChoreoEvent::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00000f45	movl	%edi,%ecx
00000f47	incl	%esi
00000f48	cmpl	%esi,%ebx
00000f4a	jne	0x00000f10
00000f4c	movzbl	0x00000098(%ecx),%eax
00000f53	andl	$0x01,%eax
00000f56	movl	%eax,0x04(%esp)
00000f5a	movl	0x0c(%ebp),%eax
00000f5d	movl	%eax,(%esp)
00000f60	calll	CUtlBuffer::PutChar(char)
00000f65	addl	$0x1c,%esp
00000f68	popl	%esi
00000f69	popl	%edi
00000f6a	popl	%ebx
00000f6b	popl	%ebp
00000f6c	ret
00000f6d	nopl	(%eax)
CChoreoChannel::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, CChoreoActor*, IChoreoStringPool*):
00000f70	pushl	%ebp
00000f71	movl	%esp,%ebp
00000f73	pushl	%ebx
00000f74	pushl	%edi
00000f75	pushl	%esi
00000f76	subl	$0x0000013c,%esp
00000f7c	calll	0x00000f81
00000f81	popl	%ecx
00000f82	movl	0x4fa1a-0xf81(%ecx),%eax
00000f88	movl	%eax,0xfffffed4(%ebp)
00000f8e	movl	(%eax),%eax
00000f90	movl	%eax,0xf0(%ebp)
00000f93	movl	0x18(%ebp),%eax
00000f96	movl	(%eax),%eax
00000f98	movl	0x04(%eax),%eax
00000f9b	movl	%eax,0xfffffee8(%ebp)
00000fa1	movl	0x0c(%ebp),%esi
00000fa4	movl	0x08(%ebp),%ebx
00000fa7	testb	$0x01,0x15(%esi)
00000fab	jne	0x0000100f
00000fad	movl	%ecx,0xfffffed8(%ebp)
00000fb3	movl	%esi,(%esp)
00000fb6	movl	$0x00000002,0x04(%esp)
00000fbe	calll	CUtlBuffer::CheckGet(int)
00000fc3	cmpb	$0x01,%al
00000fc5	jne	0x00001002
00000fc7	movl	0x0c(%esi),%eax
00000fca	movl	%eax,%ecx
00000fcc	subl	0x20(%esi),%ecx
00000fcf	addl	(%esi),%ecx
00000fd1	testb	$0x01,0x34(%esi)
00000fd5	jne	0x00000fdc
00000fd7	movzwl	(%ecx),%ecx
00000fda	jmp	0x00000ff3
00000fdc	leal	0xfffffeec(%ebp),%edi
00000fe2	testl	%ecx,%ecx
00000fe4	cmovnel	%ecx,%edi
00000fe7	movzbl	0x01(%edi),%edx
00000feb	movzbl	(%edi),%ecx
00000fee	shll	$0x08,%ecx
00000ff1	orl	%edx,%ecx
00000ff3	movw	%cx,0xfffffeec(%ebp)
00000ffa	addl	$0x02,%eax
00000ffd	movl	%eax,0x0c(%esi)
00001000	jmp	0x00001041
00001002	movw	CChoreoChannel::CChoreoChannel(),0xfffffeec(%ebp)
0000100b	xorl	%ecx,%ecx
0000100d	jmp	0x00001041
0000100f	movw	CChoreoChannel::CChoreoChannel(),0xfffffeec(%ebp)
00001018	leal	0xfffffeec(%ebp),%eax
0000101e	movl	%eax,0x08(%esp)
00001022	leal	0x49274-0xf81(%ecx),%eax
00001028	movl	%ecx,0xfffffed8(%ebp)
0000102e	movl	%eax,0x04(%esp)
00001032	movl	%esi,(%esp)
00001035	calll	CUtlBuffer::Scanf(char const*, ...)
0000103a	movzwl	0xfffffeec(%ebp),%ecx
00001041	leal	0xfffffef0(%ebp),%edi
00001047	movl	%edi,0x08(%esp)
0000104b	movswl	%cx,%eax
0000104e	movl	%eax,0x04(%esp)
00001052	movl	0x18(%ebp),%eax
00001055	movl	%eax,(%esp)
00001058	movl	$0x00000100,0x0c(%esp)
00001060	call	*0xfffffee8(%ebp)
00001066	movl	%edi,0x04(%esp)
0000106a	movl	%ebx,%edi
0000106c	leal	0x04(%edi),%eax
0000106f	movl	%eax,(%esp)
00001072	movl	$0x00000080,0x08(%esp)
0000107a	calll	V_strncpy(char*, char const*, int)
0000107f	testb	$0x01,0x15(%esi)
00001083	jne	0x000010bd
00001085	movl	%esi,(%esp)
00001088	movl	$0x00000001,0x04(%esp)
00001090	calll	CUtlBuffer::CheckGet(int)
00001095	cmpb	$0x01,%al
00001097	jne	0x000010b2
00001099	movl	(%esi),%eax
0000109b	movl	0x0c(%esi),%ecx
0000109e	movl	%ecx,%edx
000010a0	subl	0x20(%esi),%edx
000010a3	movb	(%eax,%edx),%al
000010a6	movb	%al,0xfffffeee(%ebp)
000010ac	incl	%ecx
000010ad	movl	%ecx,0x0c(%esi)
000010b0	jmp	0x000010ec
000010b2	movb	CChoreoChannel::CChoreoChannel(),0xfffffeee(%ebp)
000010b9	xorb	%al,%al
000010bb	jmp	0x000010ec
000010bd	movb	CChoreoChannel::CChoreoChannel(),0xfffffeee(%ebp)
000010c4	leal	0xfffffeee(%ebp),%eax
000010ca	movl	%eax,0x08(%esp)
000010ce	movl	0xfffffed8(%ebp),%eax
000010d4	leal	0x49271-0xf81(%eax),%eax
000010da	movl	%eax,0x04(%esp)
000010de	movl	%esi,(%esp)
000010e1	calll	CUtlBuffer::Scanf(char const*, ...)
000010e6	movb	0xfffffeee(%ebp),%al
000010ec	leal	0x00000084(%edi),%ecx
000010f2	movl	%ecx,0xfffffee8(%ebp)
000010f8	movzbl	%al,%eax
000010fb	movl	%eax,0xfffffedc(%ebp)
00001101	movl	$0xffffffff,%eax
00001106	jmp	0x000011ee
0000110b	nopl	CChoreoChannel::CChoreoChannel()(%eax,%eax)
00001110	movl	%eax,0xfffffee4(%ebp)
00001116	movl	0x10(%ebp),%ebx
00001119	movl	%ebx,(%esp)
0000111c	calll	CChoreoScene::AllocEvent()
00001121	movl	%eax,%ecx
00001123	movl	%ecx,0xfffffee0(%ebp)
00001129	movl	0x18(%ebp),%eax
0000112c	movl	%eax,0x0c(%esp)
00001130	movl	%ebx,0x08(%esp)
00001134	movl	%esi,0x04(%esp)
00001138	movl	%ecx,(%esp)
0000113b	calll	CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00001140	xorb	%cl,%cl
00001142	testb	%al,%al
00001144	je	0x00001273
0000114a	movl	0x00000088(%edi),%eax
00001150	movl	0x00000090(%edi),%esi
00001156	leal	0x01(%esi),%ebx
00001159	cmpl	%eax,%ebx
0000115b	movl	%esi,%ecx
0000115d	jle	0x0000117b
0000115f	movl	%ebx,%ecx
00001161	subl	%eax,%ecx
00001163	movl	%ecx,0x04(%esp)
00001167	movl	0xfffffee8(%ebp),%eax
0000116d	movl	%eax,(%esp)
00001170	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
00001175	movl	0x00000090(%edi),%ecx
0000117b	incl	%ecx
0000117c	movl	%ecx,0x00000090(%edi)
00001182	movl	0x00000084(%edi),%eax
00001188	movl	%eax,0x00000094(%edi)
0000118e	subl	%esi,%ecx
00001190	decl	%ecx
00001191	testl	%ecx,%ecx
00001193	jle	0x000011b6
00001195	shll	$0x02,%ecx
00001198	movl	%ecx,0x08(%esp)
0000119c	leal	(%eax,%esi,4),%ecx
0000119f	movl	%ecx,0x04(%esp)
000011a3	leal	(%eax,%ebx,4),%eax
000011a6	movl	%eax,(%esp)
000011a9	calll	_memmove
000011ae	movl	0xfffffee8(%ebp),%eax
000011b4	movl	(%eax),%eax
000011b6	shll	$0x02,%esi
000011b9	addl	%eax,%esi
000011bb	movl	0xfffffee0(%ebp),%eax
000011c1	je	0x000011c5
000011c3	movl	%eax,(%esi)
000011c5	movl	0x08(%ebp),%edi
000011c8	movl	%edi,0x04(%esp)
000011cc	movl	%eax,(%esp)
000011cf	movl	%eax,%esi
000011d1	calll	CChoreoEvent::SetChannel(CChoreoChannel*)
000011d6	movl	0x14(%ebp),%eax
000011d9	movl	%eax,0x04(%esp)
000011dd	movl	%esi,(%esp)
000011e0	calll	CChoreoEvent::SetActor(CChoreoActor*)
000011e5	movl	0x0c(%ebp),%esi
000011e8	movl	0xfffffee4(%ebp),%eax
000011ee	incl	%eax
000011ef	cmpl	0xfffffedc(%ebp),%eax
000011f5	jl	0x00001110
000011fb	testb	$0x01,0x15(%esi)
000011ff	jne	0x00001239
00001201	movl	%esi,(%esp)
00001204	movl	$0x00000001,0x04(%esp)
0000120c	calll	CUtlBuffer::CheckGet(int)
00001211	cmpb	$0x01,%al
00001213	jne	0x0000122e
00001215	movl	(%esi),%eax
00001217	movl	0x0c(%esi),%ecx
0000121a	movl	%ecx,%edx
0000121c	subl	0x20(%esi),%edx
0000121f	movb	(%eax,%edx),%al
00001222	movb	%al,0xfffffeef(%ebp)
00001228	incl	%ecx
00001229	movl	%ecx,0x0c(%esi)
0000122c	jmp	0x00001268
0000122e	movb	CChoreoChannel::CChoreoChannel(),0xfffffeef(%ebp)
00001235	xorb	%al,%al
00001237	jmp	0x00001268
00001239	movb	CChoreoChannel::CChoreoChannel(),0xfffffeef(%ebp)
00001240	leal	0xfffffeef(%ebp),%eax
00001246	movl	%eax,0x08(%esp)
0000124a	movl	0xfffffed8(%ebp),%eax
00001250	leal	0x4926e-0xf81(%eax),%eax
00001256	movl	%eax,0x04(%esp)
0000125a	movl	%esi,(%esp)
0000125d	calll	CUtlBuffer::Scanf(char const*, ...)
00001262	movb	0xfffffeef(%ebp),%al
00001268	cmpb	$0x01,%al
0000126a	sete	0x00000098(%edi)
00001271	movb	$0x01,%cl
00001273	movl	0xfffffed4(%ebp),%eax
00001279	movl	(%eax),%eax
0000127b	cmpl	0xf0(%ebp),%eax
0000127e	jne	0x0000128e
00001280	movzbl	%cl,%eax
00001283	addl	$0x0000013c,%esp
00001289	popl	%esi
0000128a	popl	%edi
0000128b	popl	%ebx
0000128c	popl	%ebp
0000128d	ret
0000128e	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(choreoevent.o):
(__TEXT,__text) section
CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%edi
0000000b	movl	%edi,(%esp)
0000000e	calll	CUtlString::CUtlString()
00000013	movl	0x10(%ebp),%eax
00000016	movl	%eax,0x04(%esp)
0000001a	movl	%edi,(%esp)
0000001d	calll	CUtlString::operator=(char const*)
00000022	movss	0x14(%ebp),%xmm0
00000027	movl	0x0c(%ebp),%eax
0000002a	movss	%xmm0,0x10(%edi)
0000002f	movl	%eax,0x14(%edi)
00000032	addl	$0x10,%esp
00000035	popl	%esi
00000036	popl	%edi
00000037	popl	%ebp
00000038	ret
00000039	movl	%eax,%esi
0000003b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
0000003f	js	0x0000005c
00000041	movl	(%edi),%eax
00000043	testl	%eax,%eax
00000045	je	0x00000055
00000047	movl	%eax,(%esp)
0000004a	calll	_free
0000004f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
00000055	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
0000005c	movl	%esi,(%esp)
0000005f	calll	__Unwind_Resume
00000064	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float):
00000070	pushl	%ebp
00000071	movl	%esp,%ebp
00000073	pushl	%edi
00000074	pushl	%esi
00000075	subl	$0x10,%esp
00000078	movl	0x08(%ebp),%edi
0000007b	movl	%edi,(%esp)
0000007e	calll	CUtlString::CUtlString()
00000083	movl	0x10(%ebp),%eax
00000086	movl	%eax,0x04(%esp)
0000008a	movl	%edi,(%esp)
0000008d	calll	CUtlString::operator=(char const*)
00000092	movss	0x14(%ebp),%xmm0
00000097	movl	0x0c(%ebp),%eax
0000009a	movss	%xmm0,0x10(%edi)
0000009f	movl	%eax,0x14(%edi)
000000a2	addl	$0x10,%esp
000000a5	popl	%esi
000000a6	popl	%edi
000000a7	popl	%ebp
000000a8	ret
000000a9	movl	%eax,%esi
000000ab	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
000000af	js	0x000000cc
000000b1	movl	(%edi),%eax
000000b3	testl	%eax,%eax
000000b5	je	0x000000c5
000000b7	movl	%eax,(%esp)
000000ba	calll	_free
000000bf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000000c5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000000cc	movl	%esi,(%esp)
000000cf	calll	__Unwind_Resume
000000d4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%edi
000000e4	pushl	%esi
000000e5	subl	$0x10,%esp
000000e8	movl	0x08(%ebp),%edi
000000eb	movl	%edi,(%esp)
000000ee	calll	CUtlString::CUtlString()
000000f3	movl	0x0c(%ebp),%esi
000000f6	movl	%esi,0x04(%esp)
000000fa	movl	%edi,(%esp)
000000fd	calll	CUtlString::operator=(CUtlString const&)
00000102	movss	0x10(%esi),%xmm0
00000107	movss	%xmm0,0x10(%edi)
0000010c	movl	0x14(%esi),%eax
0000010f	movl	%eax,0x14(%edi)
00000112	addl	$0x10,%esp
00000115	popl	%esi
00000116	popl	%edi
00000117	popl	%ebp
00000118	ret
00000119	movl	%eax,%esi
0000011b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
0000011f	js	0x0000013c
00000121	movl	(%edi),%eax
00000123	testl	%eax,%eax
00000125	je	0x00000135
00000127	movl	%eax,(%esp)
0000012a	calll	_free
0000012f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
00000135	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
0000013c	movl	%esi,(%esp)
0000013f	calll	__Unwind_Resume
00000144	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&):
00000150	pushl	%ebp
00000151	movl	%esp,%ebp
00000153	pushl	%edi
00000154	pushl	%esi
00000155	subl	$0x10,%esp
00000158	movl	0x08(%ebp),%edi
0000015b	movl	%edi,(%esp)
0000015e	calll	CUtlString::CUtlString()
00000163	movl	0x0c(%ebp),%esi
00000166	movl	%esi,0x04(%esp)
0000016a	movl	%edi,(%esp)
0000016d	calll	CUtlString::operator=(CUtlString const&)
00000172	movss	0x10(%esi),%xmm0
00000177	movss	%xmm0,0x10(%edi)
0000017c	movl	0x14(%esi),%eax
0000017f	movl	%eax,0x14(%edi)
00000182	addl	$0x10,%esp
00000185	popl	%esi
00000186	popl	%edi
00000187	popl	%ebp
00000188	ret
00000189	movl	%eax,%esi
0000018b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
0000018f	js	0x000001ac
00000191	movl	(%edi),%eax
00000193	testl	%eax,%eax
00000195	je	0x000001a5
00000197	movl	%eax,(%esp)
0000019a	calll	_free
0000019f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000001a5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000001ac	movl	%esi,(%esp)
000001af	calll	__Unwind_Resume
000001b4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::GetName():
000001c0	jmp	CUtlString::Get()
000001c5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::GetPercentage():
000001d0	movl	0x04(%esp),%eax
000001d4	flds	0x10(%eax)
000001d7	ret
000001d8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::SetPercentage(float):
000001e0	movss	0x08(%esp),%xmm0
000001e6	movl	0x04(%esp),%eax
000001ea	movss	%xmm0,0x10(%eax)
000001ef	ret
CEventRelativeTag::GetOwner():
000001f0	movl	0x04(%esp),%eax
000001f4	movl	0x14(%eax),%eax
000001f7	ret
000001f8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventRelativeTag::SetOwner(CChoreoEvent*):
00000200	movl	0x08(%esp),%eax
00000204	movl	0x04(%esp),%ecx
00000208	movl	%eax,0x14(%ecx)
0000020b	ret
0000020c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CEventRelativeTag::GetStartTime():
00000210	pushl	%ebp
00000211	movl	%esp,%ebp
00000213	pushl	%esi
00000214	subl	$0x14,%esp
00000217	movl	0x08(%ebp),%esi
0000021a	movl	0x14(%esi),%eax
0000021d	pxor	%xmm0,%xmm0
00000221	testl	%eax,%eax
00000223	je	0x00000248
00000225	movss	0x48(%eax),%xmm0
0000022a	movss	%xmm0,0xf0(%ebp)
0000022f	movl	(%eax),%ecx
00000231	movl	%eax,(%esp)
00000234	call	(%ecx)
00000236	fstps	0xf8(%ebp)
00000239	movss	0xf8(%ebp),%xmm0
0000023e	mulss	0x10(%esi),%xmm0
00000243	addss	0xf0(%ebp),%xmm0
00000248	movss	%xmm0,0xf4(%ebp)
0000024d	flds	0xf4(%ebp)
00000250	addl	$0x14,%esp
00000253	popl	%esi
00000254	popl	%ebp
00000255	ret
00000256	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetStartTime():
00000260	movl	0x04(%esp),%eax
00000264	flds	0x48(%eax)
00000267	ret
00000268	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexTimingTag::CFlexTimingTag(CChoreoEvent*, char const*, float, bool):
00000270	pushl	%ebp
00000271	movl	%esp,%ebp
00000273	pushl	%edi
00000274	pushl	%esi
00000275	subl	$0x10,%esp
00000278	movl	0x08(%ebp),%edi
0000027b	movl	%edi,(%esp)
0000027e	calll	CUtlString::CUtlString()
00000283	movl	0x10(%ebp),%eax
00000286	movl	%eax,0x04(%esp)
0000028a	movl	%edi,(%esp)
0000028d	calll	CUtlString::operator=(char const*)
00000292	movb	0x18(%ebp),%al
00000295	movss	0x14(%ebp),%xmm0
0000029a	movl	0x0c(%ebp),%ecx
0000029d	movss	%xmm0,0x10(%edi)
000002a2	movl	%ecx,0x14(%edi)
000002a5	movb	%al,0x18(%edi)
000002a8	addl	$0x10,%esp
000002ab	popl	%esi
000002ac	popl	%edi
000002ad	popl	%ebp
000002ae	ret
000002af	movl	%eax,%esi
000002b1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
000002b5	js	0x000002d2
000002b7	movl	(%edi),%eax
000002b9	testl	%eax,%eax
000002bb	je	0x000002cb
000002bd	movl	%eax,(%esp)
000002c0	calll	_free
000002c5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000002cb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000002d2	movl	%esi,(%esp)
000002d5	calll	__Unwind_Resume
000002da	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexTimingTag::CFlexTimingTag(CChoreoEvent*, char const*, float, bool):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%edi
000002e4	pushl	%esi
000002e5	subl	$0x10,%esp
000002e8	movl	0x08(%ebp),%edi
000002eb	movl	%edi,(%esp)
000002ee	calll	CUtlString::CUtlString()
000002f3	movl	0x10(%ebp),%eax
000002f6	movl	%eax,0x04(%esp)
000002fa	movl	%edi,(%esp)
000002fd	calll	CUtlString::operator=(char const*)
00000302	movb	0x18(%ebp),%al
00000305	movss	0x14(%ebp),%xmm0
0000030a	movl	0x0c(%ebp),%ecx
0000030d	movss	%xmm0,0x10(%edi)
00000312	movl	%ecx,0x14(%edi)
00000315	movb	%al,0x18(%edi)
00000318	addl	$0x10,%esp
0000031b	popl	%esi
0000031c	popl	%edi
0000031d	popl	%ebp
0000031e	ret
0000031f	movl	%eax,%esi
00000321	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00000325	js	0x00000342
00000327	movl	(%edi),%eax
00000329	testl	%eax,%eax
0000032b	je	0x0000033b
0000032d	movl	%eax,(%esp)
00000330	calll	_free
00000335	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
0000033b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
00000342	movl	%esi,(%esp)
00000345	calll	__Unwind_Resume
0000034a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexTimingTag::CFlexTimingTag(CFlexTimingTag const&):
00000350	pushl	%ebp
00000351	movl	%esp,%ebp
00000353	pushl	%edi
00000354	pushl	%esi
00000355	subl	$0x10,%esp
00000358	movl	0x08(%ebp),%edi
0000035b	movl	%edi,(%esp)
0000035e	calll	CUtlString::CUtlString()
00000363	movl	0x0c(%ebp),%esi
00000366	movl	%esi,0x04(%esp)
0000036a	movl	%edi,(%esp)
0000036d	calll	CUtlString::operator=(CUtlString const&)
00000372	movss	0x10(%esi),%xmm0
00000377	movss	%xmm0,0x10(%edi)
0000037c	movl	0x14(%esi),%eax
0000037f	movl	%eax,0x14(%edi)
00000382	movb	0x18(%esi),%al
00000385	andb	$0x01,%al
00000387	movb	%al,0x18(%edi)
0000038a	addl	$0x10,%esp
0000038d	popl	%esi
0000038e	popl	%edi
0000038f	popl	%ebp
00000390	ret
00000391	movl	%eax,%esi
00000393	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00000397	js	0x000003b4
00000399	movl	(%edi),%eax
0000039b	testl	%eax,%eax
0000039d	je	0x000003ad
0000039f	movl	%eax,(%esp)
000003a2	calll	_free
000003a7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000003ad	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000003b4	movl	%esi,(%esp)
000003b7	calll	__Unwind_Resume
000003bc	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexTimingTag::CFlexTimingTag(CFlexTimingTag const&):
000003c0	pushl	%ebp
000003c1	movl	%esp,%ebp
000003c3	pushl	%edi
000003c4	pushl	%esi
000003c5	subl	$0x10,%esp
000003c8	movl	0x08(%ebp),%edi
000003cb	movl	%edi,(%esp)
000003ce	calll	CUtlString::CUtlString()
000003d3	movl	0x0c(%ebp),%esi
000003d6	movl	%esi,0x04(%esp)
000003da	movl	%edi,(%esp)
000003dd	calll	CUtlString::operator=(CUtlString const&)
000003e2	movss	0x10(%esi),%xmm0
000003e7	movss	%xmm0,0x10(%edi)
000003ec	movl	0x14(%esi),%eax
000003ef	movl	%eax,0x14(%edi)
000003f2	movb	0x18(%esi),%al
000003f5	andb	$0x01,%al
000003f7	movb	%al,0x18(%edi)
000003fa	addl	$0x10,%esp
000003fd	popl	%esi
000003fe	popl	%edi
000003ff	popl	%ebp
00000400	ret
00000401	movl	%eax,%esi
00000403	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00000407	js	0x00000424
00000409	movl	(%edi),%eax
0000040b	testl	%eax,%eax
0000040d	je	0x0000041d
0000040f	movl	%eax,(%esp)
00000412	calll	_free
00000417	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
0000041d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
00000424	movl	%esi,(%esp)
00000427	calll	__Unwind_Resume
0000042c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexTimingTag::GetLocked():
00000430	movl	0x04(%esp),%eax
00000434	movzbl	0x18(%eax),%eax
00000438	andl	$0x01,%eax
0000043b	ret
0000043c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexTimingTag::SetLocked(bool):
00000440	movb	0x08(%esp),%al
00000444	movl	0x04(%esp),%ecx
00000448	movb	%al,0x18(%ecx)
0000044b	ret
0000044c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CEventAbsoluteTag::CEventAbsoluteTag(CChoreoEvent*, char const*, float):
00000450	pushl	%ebp
00000451	movl	%esp,%ebp
00000453	pushl	%edi
00000454	pushl	%esi
00000455	subl	$0x10,%esp
00000458	movl	0x08(%ebp),%edi
0000045b	movl	%edi,(%esp)
0000045e	calll	CUtlString::CUtlString()
00000463	movl	0x10(%ebp),%eax
00000466	movl	%eax,0x04(%esp)
0000046a	movl	%edi,(%esp)
0000046d	calll	CUtlString::operator=(char const*)
00000472	movss	0x14(%ebp),%xmm0
00000477	movl	0x0c(%ebp),%eax
0000047a	movss	%xmm0,0x10(%edi)
0000047f	movl	%eax,0x18(%edi)
00000482	andb	$0xf0,0x14(%edi)
00000486	addl	$0x10,%esp
00000489	popl	%esi
0000048a	popl	%edi
0000048b	popl	%ebp
0000048c	ret
0000048d	movl	%eax,%esi
0000048f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00000493	js	0x000004b0
00000495	movl	(%edi),%eax
00000497	testl	%eax,%eax
00000499	je	0x000004a9
0000049b	movl	%eax,(%esp)
0000049e	calll	_free
000004a3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000004a9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000004b0	movl	%esi,(%esp)
000004b3	calll	__Unwind_Resume
000004b8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::CEventAbsoluteTag(CChoreoEvent*, char const*, float):
000004c0	pushl	%ebp
000004c1	movl	%esp,%ebp
000004c3	pushl	%edi
000004c4	pushl	%esi
000004c5	subl	$0x10,%esp
000004c8	movl	0x08(%ebp),%edi
000004cb	movl	%edi,(%esp)
000004ce	calll	CUtlString::CUtlString()
000004d3	movl	0x10(%ebp),%eax
000004d6	movl	%eax,0x04(%esp)
000004da	movl	%edi,(%esp)
000004dd	calll	CUtlString::operator=(char const*)
000004e2	movss	0x14(%ebp),%xmm0
000004e7	movl	0x0c(%ebp),%eax
000004ea	movss	%xmm0,0x10(%edi)
000004ef	movl	%eax,0x18(%edi)
000004f2	andb	$0xf0,0x14(%edi)
000004f6	addl	$0x10,%esp
000004f9	popl	%esi
000004fa	popl	%edi
000004fb	popl	%ebp
000004fc	ret
000004fd	movl	%eax,%esi
000004ff	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00000503	js	0x00000520
00000505	movl	(%edi),%eax
00000507	testl	%eax,%eax
00000509	je	0x00000519
0000050b	movl	%eax,(%esp)
0000050e	calll	_free
00000513	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
00000519	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
00000520	movl	%esi,(%esp)
00000523	calll	__Unwind_Resume
00000528	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&):
00000530	jmp	CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
00000535	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%edi
00000544	pushl	%esi
00000545	subl	$0x10,%esp
00000548	movl	0x08(%ebp),%edi
0000054b	movl	%edi,(%esp)
0000054e	calll	CUtlString::CUtlString()
00000553	movl	0x0c(%ebp),%esi
00000556	movl	%esi,0x04(%esp)
0000055a	movl	%edi,(%esp)
0000055d	calll	CUtlString::operator=(CUtlString const&)
00000562	movss	0x10(%esi),%xmm0
00000567	movss	%xmm0,0x10(%edi)
0000056c	movl	0x18(%esi),%eax
0000056f	movl	%eax,0x18(%edi)
00000572	movb	0x14(%esi),%cl
00000575	andb	$0x01,%cl
00000578	movb	0x14(%edi),%al
0000057b	andb	$0xfe,%al
0000057d	orb	%cl,%al
0000057f	movb	%al,0x14(%edi)
00000582	andb	$0xfd,%al
00000584	movb	0x14(%esi),%cl
00000587	andb	$0x02,%cl
0000058a	orb	%al,%cl
0000058c	movb	%cl,0x14(%edi)
0000058f	andb	$0xfb,%cl
00000592	movb	0x14(%esi),%al
00000595	andb	$0x04,%al
00000597	orb	%cl,%al
00000599	movb	%al,0x14(%edi)
0000059c	andb	$0xf7,%al
0000059e	movb	0x14(%esi),%cl
000005a1	andb	$0x08,%cl
000005a4	orb	%al,%cl
000005a6	movb	%cl,0x14(%edi)
000005a9	addl	$0x10,%esp
000005ac	popl	%esi
000005ad	popl	%edi
000005ae	popl	%ebp
000005af	ret
000005b0	movl	%eax,%esi
000005b2	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
000005b6	js	0x000005d3
000005b8	movl	(%edi),%eax
000005ba	testl	%eax,%eax
000005bc	je	0x000005cc
000005be	movl	%eax,(%esp)
000005c1	calll	_free
000005c6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
000005cc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%edi)
000005d3	movl	%esi,(%esp)
000005d6	calll	__Unwind_Resume
000005db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetName():
000005e0	jmp	CUtlString::Get()
000005e5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetPercentage():
000005f0	movl	0x04(%esp),%eax
000005f4	flds	0x10(%eax)
000005f7	ret
000005f8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::SetPercentage(float):
00000600	movss	0x08(%esp),%xmm0
00000606	movl	0x04(%esp),%eax
0000060a	movss	%xmm0,0x10(%eax)
0000060f	ret
CEventAbsoluteTag::GetEventTime():
00000610	pushl	%ebp
00000611	movl	%esp,%ebp
00000613	pushl	%esi
00000614	subl	$0x14,%esp
00000617	movl	0x08(%ebp),%esi
0000061a	movl	0x18(%esi),%eax
0000061d	pxor	%xmm0,%xmm0
00000621	testl	%eax,%eax
00000623	je	0x00000639
00000625	movl	(%eax),%ecx
00000627	movl	%eax,(%esp)
0000062a	call	(%ecx)
0000062c	fstps	0xf8(%ebp)
0000062f	movss	0x10(%esi),%xmm0
00000634	mulss	0xf8(%ebp),%xmm0
00000639	movss	%xmm0,0xf4(%ebp)
0000063e	flds	0xf4(%ebp)
00000641	addl	$0x14,%esp
00000644	popl	%esi
00000645	popl	%ebp
00000646	ret
00000647	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::SetEventTime(float):
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	pushl	%esi
00000654	subl	$0x14,%esp
00000657	movl	0x08(%ebp),%esi
0000065a	movl	0x18(%esi),%eax
0000065d	testl	%eax,%eax
0000065f	je	0x0000067a
00000661	movl	(%eax),%ecx
00000663	movl	%eax,(%esp)
00000666	call	(%ecx)
00000668	fstps	0xf8(%ebp)
0000066b	movss	0x0c(%ebp),%xmm0
00000670	divss	0xf8(%ebp),%xmm0
00000675	movss	%xmm0,0x10(%esi)
0000067a	addl	$0x14,%esp
0000067d	popl	%esi
0000067e	popl	%ebp
0000067f	ret
CEventAbsoluteTag::GetAbsoluteTime():
00000680	pushl	%ebp
00000681	movl	%esp,%ebp
00000683	pushl	%esi
00000684	subl	$0x14,%esp
00000687	movl	0x08(%ebp),%esi
0000068a	movl	0x18(%esi),%eax
0000068d	pxor	%xmm0,%xmm0
00000691	testl	%eax,%eax
00000693	je	0x000006b8
00000695	movss	0x48(%eax),%xmm0
0000069a	movss	%xmm0,0xf0(%ebp)
0000069f	movl	(%eax),%ecx
000006a1	movl	%eax,(%esp)
000006a4	call	(%ecx)
000006a6	fstps	0xf8(%ebp)
000006a9	movss	0x10(%esi),%xmm0
000006ae	mulss	0xf8(%ebp),%xmm0
000006b3	addss	0xf0(%ebp),%xmm0
000006b8	movss	%xmm0,0xf4(%ebp)
000006bd	flds	0xf4(%ebp)
000006c0	addl	$0x14,%esp
000006c3	popl	%esi
000006c4	popl	%ebp
000006c5	ret
000006c6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::SetAbsoluteTime(float):
000006d0	pushl	%ebp
000006d1	movl	%esp,%ebp
000006d3	pushl	%esi
000006d4	subl	$0x14,%esp
000006d7	movl	0x08(%ebp),%esi
000006da	movl	0x18(%esi),%eax
000006dd	testl	%eax,%eax
000006df	je	0x00000709
000006e1	movss	0x0c(%ebp),%xmm0
000006e6	subss	0x48(%eax),%xmm0
000006eb	movss	%xmm0,0xf4(%ebp)
000006f0	movl	(%eax),%ecx
000006f2	movl	%eax,(%esp)
000006f5	call	(%ecx)
000006f7	fstps	0xf8(%ebp)
000006fa	movss	0xf4(%ebp),%xmm0
000006ff	divss	0xf8(%ebp),%xmm0
00000704	movss	%xmm0,0x10(%esi)
00000709	addl	$0x14,%esp
0000070c	popl	%esi
0000070d	popl	%ebp
0000070e	ret
0000070f	nop
CEventAbsoluteTag::GetOwner():
00000710	movl	0x04(%esp),%eax
00000714	movl	0x18(%eax),%eax
00000717	ret
00000718	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::SetOwner(CChoreoEvent*):
00000720	movl	0x08(%esp),%eax
00000724	movl	0x04(%esp),%ecx
00000728	movl	%eax,0x18(%ecx)
0000072b	ret
0000072c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CEventAbsoluteTag::SetLocked(bool):
00000730	movl	0x04(%esp),%eax
00000734	movb	0x14(%eax),%cl
00000737	andb	$0xfe,%cl
0000073a	movb	0x08(%esp),%dl
0000073e	orb	%cl,%dl
00000740	movb	%dl,0x14(%eax)
00000743	ret
00000744	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetLocked():
00000750	movl	0x04(%esp),%eax
00000754	movzbl	0x14(%eax),%eax
00000758	andl	$0x01,%eax
0000075b	ret
0000075c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CEventAbsoluteTag::SetLinear(bool):
00000760	movb	0x08(%esp),%al
00000764	addb	%al,%al
00000766	movl	0x04(%esp),%ecx
0000076a	movb	0x14(%ecx),%dl
0000076d	andb	$0xfd,%dl
00000770	orb	%al,%dl
00000772	movb	%dl,0x14(%ecx)
00000775	ret
00000776	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetLinear():
00000780	movl	0x04(%esp),%eax
00000784	movb	0x14(%eax),%al
00000787	andb	$0x02,%al
00000789	shrb	%al
0000078b	movzbl	%al,%eax
0000078e	ret
0000078f	nop
CEventAbsoluteTag::SetEntry(bool):
00000790	movb	0x08(%esp),%al
00000794	shlb	$0x02,%al
00000797	movl	0x04(%esp),%ecx
0000079b	movb	0x14(%ecx),%dl
0000079e	andb	$0xfb,%dl
000007a1	orb	%al,%dl
000007a3	movb	%dl,0x14(%ecx)
000007a6	ret
000007a7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetEntry():
000007b0	movl	0x04(%esp),%eax
000007b4	movb	0x14(%eax),%al
000007b7	andb	$0x04,%al
000007b9	shrb	$0x02,%al
000007bc	movzbl	%al,%eax
000007bf	ret
CEventAbsoluteTag::SetExit(bool):
000007c0	movb	0x08(%esp),%al
000007c4	shlb	$0x03,%al
000007c7	movl	0x04(%esp),%ecx
000007cb	movb	0x14(%ecx),%dl
000007ce	andb	$0xf7,%dl
000007d1	orb	%al,%dl
000007d3	movb	%dl,0x14(%ecx)
000007d6	ret
000007d7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CEventAbsoluteTag::GetExit():
000007e0	movl	0x04(%esp),%eax
000007e4	movb	0x14(%eax),%al
000007e7	andb	$0x08,%al
000007e9	shrb	$0x03,%al
000007ec	movzbl	%al,%eax
000007ef	ret
CFlexAnimationTrack::CFlexAnimationTrack(CChoreoEvent*):
000007f0	calll	0x000007f5
000007f5	popl	%eax
000007f6	leal	vtable for CFlexAnimationTrack-0x7f5+0x00000008(%eax),%ecx
000007fc	movl	0x04(%esp),%eax
00000800	movl	%ecx,(%eax)
00000802	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%eax)
00000809	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%eax)
00000810	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%eax)
00000817	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%eax)
0000081e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x24(%eax)
00000825	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%eax)
0000082c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%eax)
00000833	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%eax)
0000083a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%eax)
00000841	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%eax)
00000848	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4c(%eax)
0000084f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x48(%eax)
00000856	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x54(%eax)
0000085c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x50(%eax)
00000863	movl	0x08(%esp),%ecx
00000867	movl	%ecx,0x58(%eax)
0000086a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%eax)
00000871	andb	$0xf8,0x5c(%eax)
00000875	movl	$0xffffffff,0x44(%eax)
0000087c	movl	$0xffffffff,0x40(%eax)
00000883	movl	$0xffffffff,0x3c(%eax)
0000088a	movl	$0xffffffff,0x38(%eax)
00000891	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%eax)
00000898	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%eax)
0000089f	ret
CFlexAnimationTrack::CFlexAnimationTrack(CChoreoEvent*):
000008a0	calll	0x000008a5
000008a5	popl	%eax
000008a6	leal	vtable for CFlexAnimationTrack-0x8a5+0x00000008(%eax),%ecx
000008ac	movl	0x04(%esp),%eax
000008b0	movl	%ecx,(%eax)
000008b2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%eax)
000008b9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%eax)
000008c0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%eax)
000008c7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%eax)
000008ce	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%eax)
000008d5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x24(%eax)
000008dc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%eax)
000008e3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%eax)
000008ea	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%eax)
000008f1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%eax)
000008f8	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x48(%eax)
000008fc	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x49(%eax)
00000902	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4b(%eax)
00000909	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4f(%eax)
0000090d	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x50(%eax)
00000913	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x52(%eax)
0000091a	movl	0x08(%esp),%ecx
0000091e	movl	%ecx,0x58(%eax)
00000921	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%eax)
00000928	andb	$0xf8,0x5c(%eax)
0000092c	movl	$0xffffffff,0x44(%eax)
00000933	movl	$0xffffffff,0x40(%eax)
0000093a	movl	$0xffffffff,0x3c(%eax)
00000941	movl	$0xffffffff,0x38(%eax)
00000948	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%eax)
0000094f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%eax)
00000956	ret
00000957	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::CFlexAnimationTrack(CFlexAnimationTrack const*):
00000960	jmp	CFlexAnimationTrack::CFlexAnimationTrack(CFlexAnimationTrack const*)
00000965	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::CFlexAnimationTrack(CFlexAnimationTrack const*):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%ebx
00000974	pushl	%edi
00000975	pushl	%esi
00000976	subl	$0x4c,%esp
00000979	calll	0x0000097e
0000097e	popl	%eax
0000097f	leal	vtable for CFlexAnimationTrack-0x97e+0x00000008(%eax),%ecx
00000985	movl	0x08(%ebp),%ebx
00000988	movl	%ecx,(%ebx)
0000098a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%ebx)
00000991	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%ebx)
00000998	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%ebx)
0000099f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%ebx)
000009a6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%ebx)
000009ad	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x24(%ebx)
000009b4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%ebx)
000009bb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%ebx)
000009c2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%ebx)
000009c9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%ebx)
000009d0	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x48(%ebx)
000009d4	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x49(%ebx)
000009da	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4b(%ebx)
000009e1	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4f(%ebx)
000009e5	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x50(%ebx)
000009eb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x52(%ebx)
000009f2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%ebx)
000009f9	movl	0x0c(%ebp),%ecx
000009fc	movl	0x04(%ecx),%ecx
000009ff	leal	0x6f540-0x97e(%eax),%edi
00000a05	testl	%ecx,%ecx
00000a07	cmovnel	%ecx,%edi
00000a0a	movl	%edi,(%esp)
00000a0d	calll	_strlen
00000a12	movl	%eax,%esi
00000a14	incl	%esi
00000a15	testl	%esi,%esi
00000a17	movl	$0xffffffff,%eax
00000a1c	cmovnsl	%esi,%eax
00000a1f	movl	%eax,(%esp)
00000a22	calll	operator new[](unsigned long)
00000a27	movl	%eax,0x04(%ebx)
00000a2a	movl	%esi,0x08(%esp)
00000a2e	movl	%edi,0x04(%esp)
00000a32	movl	%eax,(%esp)
00000a35	calll	V_strncpy(char*, char const*, int)
00000a3a	movl	0x0c(%ebp),%edx
00000a3d	movb	0x5c(%edx),%al
00000a40	andb	$0x01,%al
00000a42	movb	0x5c(%ebx),%cl
00000a45	andb	$0xfe,%cl
00000a48	orb	%al,%cl
00000a4a	movb	%cl,0x5c(%ebx)
00000a4d	andb	$0xfd,%cl
00000a50	movb	0x5c(%edx),%al
00000a53	andb	$0x02,%al
00000a55	orb	%cl,%al
00000a57	movb	%al,0x5c(%ebx)
00000a5a	andb	$0xfb,%al
00000a5c	movb	0x5c(%edx),%cl
00000a5f	andb	$0x04,%cl
00000a62	orb	%al,%cl
00000a64	movb	%cl,0x5c(%ebx)
00000a67	leal	0x48(%ebx),%eax
00000a6a	movl	%eax,0xc0(%ebp)
00000a6d	xorl	%eax,%eax
00000a6f	nop
00000a70	movl	%eax,0xc4(%ebp)
00000a73	imull	$0x14,%eax,%esi
00000a76	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%ebx,%esi)
00000a7e	leal	0x10(%ebx,%esi),%ecx
00000a82	movl	0x10(%ebx,%esi),%eax
00000a86	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%ebx,%esi)
00000a8b	js	0x00000aad
00000a8d	testl	%eax,%eax
00000a8f	je	0x00000aa3
00000a91	movl	%eax,(%esp)
00000a94	movl	%ecx,%edi
00000a96	calll	_free
00000a9b	movl	%edi,%ecx
00000a9d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ecx)
00000aa3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%ebx,%esi)
00000aab	xorl	%eax,%eax
00000aad	movl	%ecx,0xd8(%ebp)
00000ab0	movl	%eax,0x20(%ebx,%esi)
00000ab4	movl	0x0c(%ebp),%eax
00000ab7	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%eax,%esi)
00000abc	jle	0x00000bcb
00000ac2	movl	0x08(%ebp),%eax
00000ac5	leal	0x1c(%eax,%esi),%edx
00000ac9	movl	%edx,0xf0(%ebp)
00000acc	movl	0x0c(%ebp),%ecx
00000acf	leal	0x1c(%ecx,%esi),%edi
00000ad3	movl	%edi,0xd4(%ebp)
00000ad6	leal	0x20(%eax,%esi),%edi
00000ada	movl	%edi,0xd0(%ebp)
00000add	leal	0x14(%eax,%esi),%eax
00000ae1	movl	%eax,0xcc(%ebp)
00000ae4	leal	0x10(%ecx,%esi),%eax
00000ae8	movl	%eax,0xc8(%ebp)
00000aeb	xorl	%ecx,%ecx
00000aed	movl	$0x00000009,%ebx
00000af2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00000b00	movl	%ecx,0xec(%ebp)
00000b03	movl	0xc8(%ebp),%eax
00000b06	movl	(%eax),%eax
00000b08	movb	(%eax,%ebx),%cl
00000b0b	movb	%cl,0xeb(%ebp)
00000b0e	movb	0xff(%eax,%ebx),%cl
00000b12	movb	%cl,0xea(%ebp)
00000b15	movss	0xf7(%eax,%ebx),%xmm0
00000b1b	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00000b20	movss	0xfb(%eax,%ebx),%xmm0
00000b26	movss	%xmm0,0xe4(%ebp)
00000b2b	movl	0xcc(%ebp),%eax
00000b2e	movl	(%eax),%eax
00000b30	movl	(%edx),%ecx
00000b32	movl	%ecx,0xdc(%ebp)
00000b35	leal	0x01(%ecx),%edi
00000b38	cmpl	%eax,%edi
00000b3a	movl	0xd8(%ebp),%esi
00000b3d	jle	0x00000b54
00000b3f	movl	%edi,%ecx
00000b41	subl	%eax,%ecx
00000b43	movl	%ecx,0x04(%esp)
00000b47	movl	%esi,(%esp)
00000b4a	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
00000b4f	movl	0xf0(%ebp),%edx
00000b52	movl	(%edx),%ecx
00000b54	incl	%ecx
00000b55	movl	%ecx,(%edx)
00000b57	movl	(%esi),%eax
00000b59	movl	0xd0(%ebp),%edx
00000b5c	movl	%eax,(%edx)
00000b5e	movl	0xdc(%ebp),%edx
00000b61	subl	%edx,%ecx
00000b63	decl	%ecx
00000b64	testl	%ecx,%ecx
00000b66	jle	0x00000b8b
00000b68	imull	$0x0a,%ecx,%ecx
00000b6b	movl	%ecx,0x08(%esp)
00000b6f	imull	$0x0a,%edx,%ecx
00000b72	addl	%eax,%ecx
00000b74	movl	%ecx,0x04(%esp)
00000b78	imull	$0x0a,%edi,%ecx
00000b7b	addl	%eax,%ecx
00000b7d	movl	%ecx,(%esp)
00000b80	movl	%edx,%edi
00000b82	calll	_memmove
00000b87	movl	%edi,%edx
00000b89	movl	(%esi),%eax
00000b8b	imull	$0x0a,%edx,%ecx
00000b8e	movl	%eax,%edx
00000b90	addl	%ecx,%edx
00000b92	je	0x00000bb6
00000b94	movss	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
00000b99	movss	%xmm0,(%edx)
00000b9d	movss	0xe4(%ebp),%xmm0
00000ba2	movss	%xmm0,0x04(%eax,%ecx)
00000ba8	movb	0xea(%ebp),%dl
00000bab	movb	%dl,0x08(%eax,%ecx)
00000baf	movb	0xeb(%ebp),%dl
00000bb2	movb	%dl,0x09(%eax,%ecx)
00000bb6	addl	$0x0a,%ebx
00000bb9	movl	0xec(%ebp),%ecx
00000bbc	incl	%ecx
00000bbd	movl	0xd4(%ebp),%eax
00000bc0	cmpl	(%eax),%ecx
00000bc2	movl	0xf0(%ebp),%edx
00000bc5	jl	0x00000b00
00000bcb	movl	0xc4(%ebp),%eax
00000bce	incl	%eax
00000bcf	cmpl	$0x02,%eax
00000bd2	movl	0x08(%ebp),%ebx
00000bd5	jne	0x00000a70
00000bdb	movl	0x0c(%ebp),%ecx
00000bde	movl	0x38(%ecx),%eax
00000be1	movl	%eax,0x38(%ebx)
00000be4	movl	0x40(%ecx),%eax
00000be7	movl	%eax,0x40(%ebx)
00000bea	movl	0x3c(%ecx),%eax
00000bed	movl	%eax,0x3c(%ebx)
00000bf0	movl	0x44(%ecx),%eax
00000bf3	movl	%eax,0x44(%ebx)
00000bf6	movss	0x08(%ecx),%xmm0
00000bfb	movss	%xmm0,0x08(%ebx)
00000c00	movss	0x0c(%ecx),%xmm0
00000c05	movss	%xmm0,0x0c(%ebx)
00000c0a	movb	0x4e(%ecx),%al
00000c0d	movl	0xc0(%ebp),%edx
00000c10	movb	%al,0x06(%edx)
00000c13	movw	0x4c(%ecx),%ax
00000c17	movw	%ax,0x04(%edx)
00000c1b	movl	0x48(%ecx),%eax
00000c1e	movl	%eax,(%edx)
00000c20	movb	0x55(%ecx),%al
00000c23	movb	%al,0x55(%ebx)
00000c26	movw	0x53(%ecx),%ax
00000c2a	movw	%ax,0x53(%ebx)
00000c2e	movl	0x4f(%ecx),%eax
00000c31	movl	%eax,0x4f(%ebx)
00000c34	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x58(%ebx)
00000c3b	addl	$0x4c,%esp
00000c3e	popl	%esi
00000c3f	popl	%edi
00000c40	popl	%ebx
00000c41	popl	%ebp
00000c42	ret
00000c43	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::SetFlexControllerName(char const*):
00000c50	pushl	%ebp
00000c51	movl	%esp,%ebp
00000c53	pushl	%ebx
00000c54	pushl	%edi
00000c55	pushl	%esi
00000c56	subl	$0x0c,%esp
00000c59	movl	0x08(%ebp),%edi
00000c5c	movl	0x04(%edi),%eax
00000c5f	testl	%eax,%eax
00000c61	je	0x00000c6b
00000c63	movl	%eax,(%esp)
00000c66	calll	operator delete[](void*)
00000c6b	movl	0x0c(%ebp),%ebx
00000c6e	movl	%ebx,(%esp)
00000c71	calll	_strlen
00000c76	movl	%eax,%esi
00000c78	incl	%esi
00000c79	testl	%esi,%esi
00000c7b	movl	$0xffffffff,%eax
00000c80	cmovnsl	%esi,%eax
00000c83	movl	%eax,(%esp)
00000c86	calll	operator new[](unsigned long)
00000c8b	movl	%eax,0x04(%edi)
00000c8e	movl	%esi,0x08(%esp)
00000c92	movl	%ebx,0x04(%esp)
00000c96	movl	%eax,(%esp)
00000c99	calll	V_strncpy(char*, char const*, int)
00000c9e	addl	$0x0c,%esp
00000ca1	popl	%esi
00000ca2	popl	%edi
00000ca3	popl	%ebx
00000ca4	popl	%ebp
00000ca5	ret
00000ca6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::~CFlexAnimationTrack():
00000cb0	pushl	%ebp
00000cb1	movl	%esp,%ebp
00000cb3	pushl	%edi
00000cb4	pushl	%esi
00000cb5	subl	$0x10,%esp
00000cb8	movl	0x08(%ebp),%edi
00000cbb	movl	%edi,(%esp)
00000cbe	calll	CFlexAnimationTrack::~CFlexAnimationTrack()
00000cc3	addl	$0x10,%esp
00000cc6	popl	%esi
00000cc7	popl	%edi
00000cc8	popl	%ebp
00000cc9	jmp	operator delete(void*)
00000cce	movl	%eax,%esi
00000cd0	movl	%edi,(%esp)
00000cd3	calll	operator delete(void*)
00000cd8	movl	%esi,(%esp)
00000cdb	calll	__Unwind_Resume
CFlexAnimationTrack::~CFlexAnimationTrack():
00000ce0	jmp	CFlexAnimationTrack::~CFlexAnimationTrack()
00000ce5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::~CFlexAnimationTrack():
00000cf0	pushl	%ebp
00000cf1	movl	%esp,%ebp
00000cf3	pushl	%esi
00000cf4	pushl	%eax
00000cf5	calll	0x00000cfa
00000cfa	popl	%eax
00000cfb	leal	vtable for CFlexAnimationTrack-0xcfa+0x00000008(%eax),%eax
00000d01	movl	0x08(%ebp),%esi
00000d04	movl	%eax,(%esi)
00000d06	movl	0x04(%esi),%eax
00000d09	testl	%eax,%eax
00000d0b	je	0x00000d15
00000d0d	movl	%eax,(%esp)
00000d10	calll	operator delete[](void*)
00000d15	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%esi)
00000d1c	movl	0x10(%esi),%eax
00000d1f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%esi)
00000d23	js	0x00000d41
00000d25	testl	%eax,%eax
00000d27	je	0x00000d38
00000d29	movl	%eax,(%esp)
00000d2c	calll	_free
00000d31	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%esi)
00000d38	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%esi)
00000d3f	xorl	%eax,%eax
00000d41	movl	%eax,0x20(%esi)
00000d44	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%esi)
00000d4b	movl	0x24(%esi),%eax
00000d4e	movl	0x2c(%esi),%ecx
00000d51	testl	%ecx,%ecx
00000d53	jns	0x00000dd2
00000d55	movl	%eax,0x34(%esi)
00000d58	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%esi)
00000d5f	movl	%eax,0x34(%esi)
00000d62	jmp	0x00000d79
00000d64	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%esi)
00000d6b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%esi)
00000d72	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%esi)
00000d79	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%esi)
00000d80	movl	0x10(%esi),%eax
00000d83	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%esi)
00000d87	js	0x00000dc9
00000d89	testl	%eax,%eax
00000d8b	je	0x00000db2
00000d8d	movl	%eax,(%esp)
00000d90	calll	_free
00000d95	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%esi)
00000d9c	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%esi)
00000da0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%esi)
00000da7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%esi)
00000dae	jns	0x00000dc0
00000db0	jmp	0x00000dcc
00000db2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%esi)
00000db9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%esi)
00000dc0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%esi)
00000dc7	jmp	0x00000dcc
00000dc9	movl	%eax,0x20(%esi)
00000dcc	addl	$0x04,%esp
00000dcf	popl	%esi
00000dd0	popl	%ebp
00000dd1	ret
00000dd2	testl	%eax,%eax
00000dd4	je	0x00000de8
00000dd6	movl	%eax,(%esp)
00000dd9	calll	_free
00000dde	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x24(%esi)
00000de5	movl	0x2c(%esi),%ecx
00000de8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%esi)
00000def	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%esi)
00000df6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%esi)
00000dfd	xorl	%eax,%eax
00000dff	testl	%ecx,%ecx
00000e01	jns	0x00000d64
00000e07	jmp	0x00000d5f
00000e0c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::SetEvent(CChoreoEvent*):
00000e10	movl	0x08(%esp),%eax
00000e14	movl	0x04(%esp),%ecx
00000e18	movl	%eax,0x58(%ecx)
00000e1b	ret
00000e1c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::Clear():
00000e20	movl	0x04(%esp),%eax
00000e24	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%eax)
00000e2b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%eax)
00000e32	ret
00000e33	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::RemoveSample(int, int):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%ebx
00000e44	pushl	%edi
00000e45	pushl	%esi
00000e46	subl	$0x0c,%esp
00000e49	movl	0x10(%ebp),%eax
00000e4c	imull	$0x14,%eax,%edx
00000e4f	movl	0x08(%ebp),%edi
00000e52	leal	0x1c(%edi,%edx),%esi
00000e56	movl	0x1c(%edi,%edx),%eax
00000e5a	movl	0x0c(%ebp),%ecx
00000e5d	movl	%eax,%ebx
00000e5f	subl	%ecx,%ebx
00000e61	decl	%ebx
00000e62	testl	%ebx,%ebx
00000e64	jle	0x00000e88
00000e66	movl	0x10(%edi,%edx),%eax
00000e6a	imull	$0x0a,%ebx,%edx
00000e6d	movl	%edx,0x08(%esp)
00000e71	imull	$0x0a,%ecx,%ecx
00000e74	leal	0x0a(%eax,%ecx),%edx
00000e78	movl	%edx,0x04(%esp)
00000e7c	addl	%ecx,%eax
00000e7e	movl	%eax,(%esp)
00000e81	calll	_memmove
00000e86	movl	(%esi),%eax
00000e88	decl	%eax
00000e89	movl	%eax,(%esi)
00000e8b	addl	$0x0c,%esp
00000e8e	popl	%esi
00000e8f	popl	%edi
00000e90	popl	%ebx
00000e91	popl	%ebp
00000e92	ret
00000e93	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetFlexControllerName():
00000ea0	calll	0x00000ea5
00000ea5	popl	%eax
00000ea6	movl	0x04(%esp),%ecx
00000eaa	movl	0x04(%ecx),%ecx
00000ead	leal	0x6f540-0xea5(%eax),%eax
00000eb3	testl	%ecx,%ecx
00000eb5	cmovnel	%ecx,%eax
00000eb8	ret
00000eb9	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::GetNumSamples(int):
00000ec0	imull	$0x14,0x08(%esp),%eax
00000ec5	movl	0x04(%esp),%ecx
00000ec9	movl	0x1c(%ecx,%eax),%eax
00000ecd	ret
00000ece	nop
CFlexAnimationTrack::GetSample(int, int):
00000ed0	pushl	%esi
00000ed1	xorl	%eax,%eax
00000ed3	movl	0x0c(%esp),%ecx
00000ed7	testl	%ecx,%ecx
00000ed9	js	0x00000ef5
00000edb	movl	0x10(%esp),%eax
00000edf	movl	0x08(%esp),%edx
00000ee3	imull	$0x14,%eax,%esi
00000ee6	xorl	%eax,%eax
00000ee8	cmpl	%ecx,0x1c(%edx,%esi)
00000eec	jle	0x00000ef5
00000eee	imull	$0x0a,%ecx,%eax
00000ef1	addl	0x10(%edx,%esi),%eax
00000ef5	popl	%esi
00000ef6	ret
00000ef7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::IsTrackActive():
00000f00	movl	0x04(%esp),%eax
00000f04	movzbl	0x5c(%eax),%eax
00000f08	andl	$0x01,%eax
00000f0b	ret
00000f0c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::SetTrackActive(bool):
00000f10	movl	0x04(%esp),%eax
00000f14	movb	0x5c(%eax),%cl
00000f17	andb	$0xfe,%cl
00000f1a	movb	0x08(%esp),%dl
00000f1e	orb	%cl,%dl
00000f20	movb	%dl,0x5c(%eax)
00000f23	ret
00000f24	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::SetEdgeInfo(bool, int, float):
00000f30	movb	0x08(%esp),%al
00000f34	movzbl	%al,%eax
00000f37	xorl	$0x01,%eax
00000f3a	imull	$0x07,%eax,%eax
00000f3d	movw	0x0c(%esp),%dx
00000f42	movl	0x04(%esp),%ecx
00000f46	movw	%dx,0x49(%ecx,%eax)
00000f4b	movss	0x10(%esp),%xmm0
00000f51	movss	%xmm0,0x4b(%ecx,%eax)
00000f57	ret
00000f58	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetEdgeInfo(bool, int&, float&) const:
00000f60	pushl	%esi
00000f61	movb	0x0c(%esp),%al
00000f65	movzbl	%al,%eax
00000f68	xorl	$0x01,%eax
00000f6b	imull	$0x07,%eax,%eax
00000f6e	movl	0x08(%esp),%ecx
00000f72	movzwl	0x49(%ecx,%eax),%edx
00000f77	movl	0x10(%esp),%esi
00000f7b	movl	%edx,(%esi)
00000f7d	movss	0x4b(%ecx,%eax),%xmm0
00000f83	movl	0x14(%esp),%eax
00000f87	movss	%xmm0,(%eax)
00000f8b	popl	%esi
00000f8c	ret
00000f8d	nopl	(%eax)
CFlexAnimationTrack::SetEdgeActive(bool, bool):
00000f90	movb	0x08(%esp),%al
00000f94	movzbl	%al,%eax
00000f97	xorl	$0x01,%eax
00000f9a	imull	$0x07,%eax,%eax
00000f9d	movb	0x0c(%esp),%cl
00000fa1	movl	0x04(%esp),%edx
00000fa5	movb	%cl,0x48(%edx,%eax)
00000fa9	ret
00000faa	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::IsEdgeActive(bool) const:
00000fb0	movb	0x08(%esp),%al
00000fb4	movzbl	%al,%eax
00000fb7	xorl	$0x01,%eax
00000fba	imull	$0x07,%eax,%eax
00000fbd	movl	0x04(%esp),%ecx
00000fc1	movzbl	0x48(%ecx,%eax),%eax
00000fc6	andl	$0x01,%eax
00000fc9	ret
00000fca	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetEdgeCurveType(bool) const:
00000fd0	movb	0x08(%esp),%al
00000fd4	movzbl	%al,%eax
00000fd7	xorl	$0x01,%eax
00000fda	imull	$0x07,%eax,%eax
00000fdd	movl	0x04(%esp),%ecx
00000fe1	testb	$0x01,0x48(%ecx,%eax)
00000fe6	jne	0x00000feb
00000fe8	xorl	%eax,%eax
00000fea	ret
00000feb	movzwl	0x49(%ecx,%eax),%eax
00000ff0	ret
00000ff1	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetEdgeZeroValue(bool) const:
00001000	pushl	%eax
00001001	movb	0x0c(%esp),%al
00001005	movzbl	%al,%eax
00001008	xorl	$0x01,%eax
0000100b	imull	$0x07,%eax,%eax
0000100e	pxor	%xmm0,%xmm0
00001012	movl	0x08(%esp),%ecx
00001016	testb	$0x01,0x48(%ecx,%eax)
0000101b	je	0x00001023
0000101d	movss	0x4b(%ecx,%eax),%xmm0
00001023	movss	%xmm0,(%esp)
00001028	flds	(%esp)
0000102b	popl	%eax
0000102c	ret
0000102d	nopl	(%eax)
CFlexAnimationTrack::GetDefaultEdgeZeroPos() const:
00001030	pushl	%eax
00001031	movl	0x08(%esp),%eax
00001035	movss	0x08(%eax),%xmm2
0000103a	movss	0x0c(%eax),%xmm0
0000103f	pxor	%xmm1,%xmm1
00001043	ucomiss	%xmm0,%xmm2
00001046	jne	0x0000104a
00001048	jnp	0x0000105a
0000104a	subss	%xmm2,%xmm0
0000104e	pxor	%xmm1,%xmm1
00001052	subss	%xmm2,%xmm1
00001056	divss	%xmm0,%xmm1
0000105a	movss	%xmm1,(%esp)
0000105f	flds	(%esp)
00001062	popl	%eax
00001063	ret
00001064	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetZeroValue(int, bool):
00001070	pushl	%eax
00001071	cmpl	$0x01,0x0c(%esp)
00001076	jne	0x00001088
00001078	calll	0x0000107d
0000107d	popl	%eax
0000107e	movss	0x6e99c-0x107d(%eax),%xmm0
00001086	jmp	0x000010cd
00001088	movb	0x10(%esp),%cl
0000108c	movl	0x08(%esp),%eax
00001090	movzbl	%cl,%ecx
00001093	xorl	$0x01,%ecx
00001096	imull	$0x07,%ecx,%ecx
00001099	testb	$0x01,0x48(%eax,%ecx)
0000109e	je	0x000010a8
000010a0	movss	0x4b(%eax,%ecx),%xmm0
000010a6	jmp	0x000010cd
000010a8	movss	0x08(%eax),%xmm2
000010ad	movss	0x0c(%eax),%xmm1
000010b2	pxor	%xmm0,%xmm0
000010b6	ucomiss	%xmm1,%xmm2
000010b9	jne	0x000010bd
000010bb	jnp	0x000010cd
000010bd	subss	%xmm2,%xmm1
000010c1	pxor	%xmm0,%xmm0
000010c5	subss	%xmm2,%xmm0
000010c9	divss	%xmm1,%xmm0
000010cd	movss	%xmm0,(%esp)
000010d2	flds	(%esp)
000010d5	popl	%eax
000010d6	ret
000010d7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetBoundedSample(int, bool&, int):
000010e0	pushl	%ebp
000010e1	movl	%esp,%ebp
000010e3	pushl	%ebx
000010e4	pushl	%edi
000010e5	pushl	%esi
000010e6	subl	$0x0c,%esp
000010e9	calll	0x000010ee
000010ee	popl	%esi
000010ef	movl	0x14(%ebp),%edi
000010f2	movl	0x0c(%ebp),%ecx
000010f5	movl	0x08(%ebp),%ebx
000010f8	testl	%ecx,%ecx
000010fa	jns	0x000011db
00001100	movb	guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi),%al
00001106	testb	%al,%al
00001108	jne	0x00001141
0000110a	leal	guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi),%ebx
00001110	movl	%ebx,(%esp)
00001113	calll	___cxa_guard_acquire
00001118	testl	%eax,%eax
0000111a	je	0x00001141
0000111c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi)
00001126	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000004(%esi)
00001130	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000008(%esi)
00001139	movl	%ebx,(%esp)
0000113c	calll	___cxa_guard_release
00001141	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000004(%esi)
0000114b	movl	%edi,%eax
0000114d	cmpl	$0x01,%eax
00001150	jne	0x00001168
00001152	movl	$0x3f000000,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi)
0000115c	movzwl	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000008(%esi),%ecx
00001163	andl	$0x01,%ecx
00001166	jmp	0x000011c3
00001168	movl	0x08(%ebp),%ecx
0000116b	testb	$0x01,0x48(%ecx)
0000116f	je	0x00001178
00001171	movss	0x4b(%ecx),%xmm0
00001176	jmp	0x0000119d
00001178	movss	0x08(%ecx),%xmm2
0000117d	movss	0x0c(%ecx),%xmm1
00001182	pxor	%xmm0,%xmm0
00001186	ucomiss	%xmm1,%xmm2
00001189	jne	0x0000118d
0000118b	jnp	0x0000119d
0000118d	subss	%xmm2,%xmm1
00001191	pxor	%xmm0,%xmm0
00001195	subss	%xmm2,%xmm0
00001199	divss	%xmm1,%xmm0
0000119d	movss	%xmm0,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi)
000011a5	testl	%eax,%eax
000011a7	jne	0x0000115c
000011a9	xorl	%eax,%eax
000011ab	testb	$0x01,0x48(%ecx)
000011af	je	0x000011b7
000011b1	movzwl	0x49(%ecx),%eax
000011b5	addl	%eax,%eax
000011b7	movzwl	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000008(%esi),%ecx
000011be	andl	$0x01,%ecx
000011c1	orl	%eax,%ecx
000011c3	movw	%cx,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee+0x00000008(%esi)
000011ca	movl	0x10(%ebp),%eax
000011cd	movb	$0x01,(%eax)
000011d0	leal	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart-0x10ee(%esi),%eax
000011d6	jmp	0x000012db
000011db	imull	$0x14,%edi,%edx
000011de	cmpl	%ecx,0x1c(%ebx,%edx)
000011e2	jg	0x000012c4
000011e8	movb	guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi),%al
000011ee	testb	%al,%al
000011f0	jne	0x00001229
000011f2	leal	guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi),%edi
000011f8	movl	%edi,(%esp)
000011fb	calll	___cxa_guard_acquire
00001200	testl	%eax,%eax
00001202	je	0x00001229
00001204	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi)
0000120e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000004(%esi)
00001218	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000008(%esi)
00001221	movl	%edi,(%esp)
00001224	calll	___cxa_guard_release
00001229	movl	0x58(%ebx),%ecx
0000122c	movl	(%ecx),%eax
0000122e	movl	%ecx,(%esp)
00001231	call	(%eax)
00001233	fstps	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000004(%esi)
00001239	movl	0x14(%ebp),%eax
0000123c	cmpl	$0x01,%eax
0000123f	jne	0x00001257
00001241	movl	$0x3f000000,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi)
0000124b	movzwl	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000008(%esi),%ecx
00001252	andl	$0x01,%ecx
00001255	jmp	0x000012af
00001257	testb	$0x01,0x4f(%ebx)
0000125b	je	0x00001264
0000125d	movss	0x52(%ebx),%xmm0
00001262	jmp	0x00001289
00001264	movss	0x08(%ebx),%xmm2
00001269	movss	0x0c(%ebx),%xmm1
0000126e	pxor	%xmm0,%xmm0
00001272	ucomiss	%xmm1,%xmm2
00001275	jne	0x00001279
00001277	jnp	0x00001289
00001279	subss	%xmm2,%xmm1
0000127d	pxor	%xmm0,%xmm0
00001281	subss	%xmm2,%xmm0
00001285	divss	%xmm1,%xmm0
00001289	movss	%xmm0,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi)
00001291	testl	%eax,%eax
00001293	jne	0x0000124b
00001295	xorl	%eax,%eax
00001297	testb	$0x01,0x4f(%ebx)
0000129b	je	0x000012a3
0000129d	movzwl	0x50(%ebx),%eax
000012a1	addl	%eax,%eax
000012a3	movzwl	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000008(%esi),%ecx
000012aa	andl	$0x01,%ecx
000012ad	orl	%eax,%ecx
000012af	movw	%cx,CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee+0x00000008(%esi)
000012b6	movl	0x10(%ebp),%eax
000012b9	movb	$0x01,(%eax)
000012bc	leal	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend-0x10ee(%esi),%eax
000012c2	jmp	0x000012db
000012c4	leal	0x1c(%ebx,%edx),%esi
000012c8	movl	0x10(%ebp),%eax
000012cb	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%eax)
000012ce	xorl	%eax,%eax
000012d0	cmpl	%ecx,(%esi)
000012d2	jle	0x000012db
000012d4	imull	$0x0a,%ecx,%eax
000012d7	addl	0x10(%ebx,%edx),%eax
000012db	addl	$0x0c,%esp
000012de	popl	%esi
000012df	popl	%edi
000012e0	popl	%ebx
000012e1	popl	%ebp
000012e2	ret
000012e3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetIntensityInternal(float, int):
000012f0	pushl	%ebp
000012f1	movl	%esp,%ebp
000012f3	pushl	%edi
000012f4	pushl	%esi
000012f5	subl	$0x20,%esp
000012f8	calll	0x000012fd
000012fd	popl	%eax
000012fe	movl	0x08(%ebp),%esi
00001301	movl	0x58(%esi),%ecx
00001304	movl	0x10(%ebp),%edi
00001307	testl	%ecx,%ecx
00001309	je	0x0000132a
0000130b	movss	0x4c(%ecx),%xmm2
00001310	ucomiss	0x6e9a0-0x12fd(%eax),%xmm2
00001317	jne	0x0000131b
00001319	jnp	0x0000132a
0000131b	movss	0x0c(%ebp),%xmm0
00001320	movss	0x48(%ecx),%xmm1
00001325	ucomiss	%xmm0,%xmm1
00001328	jbe	0x00001370
0000132a	cmpl	$0x01,%edi
0000132d	jne	0x0000133c
0000132f	movss	0x6e9a4-0x12fd(%eax),%xmm0
00001337	jmp	0x000013e7
0000133c	testb	$0x01,0x48(%esi)
00001340	je	0x00001349
00001342	movss	0x4b(%esi),%xmm0
00001347	jmp	0x000013c6
00001349	movss	0x08(%esi),%xmm2
0000134e	movss	0x0c(%esi),%xmm1
00001353	pxor	%xmm0,%xmm0
00001357	ucomiss	%xmm1,%xmm2
0000135a	jne	0x0000135e
0000135c	jnp	0x000013c6
0000135e	subss	%xmm2,%xmm1
00001362	pxor	%xmm0,%xmm0
00001366	subss	%xmm2,%xmm0
0000136a	divss	%xmm1,%xmm0
0000136e	jmp	0x000013c6
00001370	ucomiss	%xmm2,%xmm0
00001373	jbe	0x000013a8
00001375	cmpl	$0x01,%edi
00001378	jne	0x00001384
0000137a	movss	0x6e9a4-0x12fd(%eax),%xmm0
00001382	jmp	0x000013e7
00001384	testb	$0x01,0x4f(%esi)
00001388	je	0x00001391
0000138a	movss	0x52(%esi),%xmm0
0000138f	jmp	0x000013c6
00001391	movss	0x08(%esi),%xmm2
00001396	movss	0x0c(%esi),%xmm1
0000139b	pxor	%xmm0,%xmm0
0000139f	ucomiss	%xmm1,%xmm2
000013a2	jne	0x000013a6
000013a4	jnp	0x000013c6
000013a6	jmp	0x0000135e
000013a8	movl	%edi,0x08(%esp)
000013ac	subss	%xmm1,%xmm0
000013b0	movss	%xmm0,0x04(%esp)
000013b6	movl	%esi,(%esp)
000013b9	calll	CFlexAnimationTrack::GetFracIntensity(float, int)
000013be	fstps	0xf4(%ebp)
000013c1	movss	0xf4(%ebp),%xmm0
000013c6	testl	%edi,%edi
000013c8	jne	0x000013e7
000013ca	movss	0x08(%esi),%xmm1
000013cf	movss	0x0c(%esi),%xmm2
000013d4	ucomiss	%xmm2,%xmm1
000013d7	jne	0x000013db
000013d9	jnp	0x000013e7
000013db	subss	%xmm1,%xmm2
000013df	mulss	%xmm2,%xmm0
000013e3	addss	%xmm1,%xmm0
000013e7	movss	%xmm0,0xf0(%ebp)
000013ec	flds	0xf0(%ebp)
000013ef	addl	$0x20,%esp
000013f2	popl	%esi
000013f3	popl	%edi
000013f4	popl	%ebp
000013f5	ret
000013f6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::HasEndTime():
00001400	calll	0x00001405
00001405	popl	%eax
00001406	movl	0x04(%esp),%ecx
0000140a	movss	0x4c(%ecx),%xmm0
0000140f	cmpss	$0x4,0x6e9a8-0x1405(%eax),%xmm0
00001418	movd	%xmm0,%eax
0000141c	andl	$0x01,%eax
0000141f	ret
CChoreoEvent::GetEndTime():
00001420	movl	0x04(%esp),%eax
00001424	flds	0x4c(%eax)
00001427	ret
00001428	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetFracIntensity(float, int):
00001430	pushl	%ebp
00001431	movl	%esp,%ebp
00001433	pushl	%ebx
00001434	pushl	%edi
00001435	pushl	%esi
00001436	subl	$0x000000dc,%esp
0000143c	calll	0x00001441
00001441	popl	%ecx
00001442	movl	0x10(%ebp),%esi
00001445	movl	0x08(%ebp),%edx
00001448	cmpl	$0x01,%esi
0000144b	jne	0x00001457
0000144d	movss	0x6e9ac-0x1441(%ecx),%xmm2
00001455	jmp	0x00001489
00001457	testb	$0x01,0x48(%edx)
0000145b	je	0x00001464
0000145d	movss	0x4b(%edx),%xmm2
00001462	jmp	0x00001489
00001464	movss	0x08(%edx),%xmm1
00001469	movss	0x0c(%edx),%xmm0
0000146e	pxor	%xmm2,%xmm2
00001472	ucomiss	%xmm0,%xmm1
00001475	jne	0x00001479
00001477	jnp	0x00001489
00001479	subss	%xmm1,%xmm0
0000147d	pxor	%xmm2,%xmm2
00001481	subss	%xmm1,%xmm2
00001485	divss	%xmm0,%xmm2
00001489	movaps	%xmm2,0xffffff48(%ebp)
00001490	movl	0x58(%edx),%eax
00001493	testl	%eax,%eax
00001495	je	0x0000193c
0000149b	movss	0x4c(%eax),%xmm0
000014a0	ucomiss	0x6e9b0-0x1441(%ecx),%xmm0
000014a7	jne	0x000014af
000014a9	jnp	0x0000193c
000014af	imull	$0x14,%esi,%eax
000014b2	movl	0x1c(%edx,%eax),%eax
000014b6	testl	%eax,%eax
000014b8	jle	0x0000193c
000014be	movl	$0x00000001,%esi
000014c3	cmpl	$0x04,%eax
000014c6	jl	0x000014d1
000014c8	movl	%eax,%esi
000014ca	shrl	$0x1f,%esi
000014cd	addl	%eax,%esi
000014cf	sarl	%esi
000014d1	movl	%ecx,0xffffff3c(%ebp)
000014d7	leal	0x01(%eax),%ecx
000014da	movl	%ecx,0xffffff40(%ebp)
000014e0	movl	%eax,0xffffff38(%ebp)
000014e6	xorl	%ecx,%ecx
000014e8	xorl	%eax,%eax
000014ea	movl	%esi,%edi
000014ec	jmp	0x00001598
000014f1	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00001500	cmpl	0xffffff40(%ebp),%edi
00001506	jge	0x000015a7
0000150c	movl	%edi,%ebx
0000150e	movl	0x10(%ebp),%edi
00001511	movl	%edi,0x0c(%esp)
00001515	leal	0xf3(%ebp),%eax
00001518	movl	%eax,0x08(%esp)
0000151c	movl	%ebx,0x04(%esp)
00001520	movl	0x08(%ebp),%esi
00001523	movl	%esi,(%esp)
00001526	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
0000152b	movl	%eax,0xffffff70(%ebp)
00001531	movl	%edi,0x0c(%esp)
00001535	movl	%ebx,%edi
00001537	leal	0xf3(%ebp),%eax
0000153a	movl	%eax,0x08(%esp)
0000153e	leal	0x01(%edi),%eax
00001541	movl	%eax,0xffffff44(%ebp)
00001547	movl	%eax,0x04(%esp)
0000154b	movl	%esi,(%esp)
0000154e	movl	$0x00000001,%esi
00001553	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
00001558	movl	0xffffff58(%ebp),%ebx
0000155e	cmpl	$0x04,%ebx
00001561	jl	0x0000156c
00001563	movl	%ebx,%esi
00001565	shrl	$0x1f,%esi
00001568	addl	%ebx,%esi
0000156a	sarl	%esi
0000156c	movl	0xffffff70(%ebp),%ecx
00001572	movss	0x04(%ecx),%xmm0
00001577	movss	0x0c(%ebp),%xmm1
0000157c	ucomiss	%xmm1,%xmm0
0000157f	movaps	0xffffff48(%ebp),%xmm2
00001586	jbe	0x0000158c
00001588	subl	%esi,%edi
0000158a	jmp	0x00001598
0000158c	movss	0x04(%eax),%xmm0
00001591	ucomiss	%xmm0,%xmm1
00001594	jbe	0x000015b1
00001596	addl	%esi,%edi
00001598	movl	%esi,0xffffff58(%ebp)
0000159e	cmpl	$0xff,%edi
000015a1	jge	0x00001500
000015a7	movl	%edi,%ebx
000015a9	movl	0x08(%ebp),%esi
000015ac	movl	0x10(%ebp),%edi
000015af	jmp	0x0000161f
000015b1	movl	%edi,0xffffff58(%ebp)
000015b7	ucomiss	%xmm1,%xmm0
000015ba	jne	0x000015be
000015bc	jnp	0x000015c6
000015be	movl	0xffffff58(%ebp),%ebx
000015c4	jmp	0x000015a9
000015c6	movl	0x10(%ebp),%edi
000015c9	movl	%edi,0x0c(%esp)
000015cd	leal	0xf3(%ebp),%ebx
000015d0	movl	%ebx,0x08(%esp)
000015d4	movl	0xffffff44(%ebp),%eax
000015da	movl	%eax,0x04(%esp)
000015de	movl	0x08(%ebp),%esi
000015e1	movl	%esi,(%esp)
000015e4	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
000015e9	movl	%eax,0xffffff70(%ebp)
000015ef	movl	%edi,0x0c(%esp)
000015f3	movl	%ebx,0x08(%esp)
000015f7	movl	0xffffff58(%ebp),%ebx
000015fd	addl	$0x02,%ebx
00001600	movl	%ebx,0x04(%esp)
00001604	movl	0xffffff44(%ebp),%ebx
0000160a	movl	%esi,(%esp)
0000160d	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
00001612	movl	0xffffff70(%ebp),%ecx
00001618	movaps	0xffffff48(%ebp),%xmm2
0000161f	movl	%eax,0xffffff44(%ebp)
00001625	movl	%ecx,0xffffff70(%ebp)
0000162b	testl	%ecx,%ecx
0000162d	je	0x0000193c
00001633	movl	%edi,0x0c(%esp)
00001637	leal	0xf1(%ebp),%eax
0000163a	movl	%eax,0x08(%esp)
0000163e	movl	%esi,(%esp)
00001641	leal	0xff(%ebx),%eax
00001644	cmpl	$0xff,%eax
00001647	movl	$0xffffffff,%ecx
0000164c	cmovgel	%eax,%ecx
0000164f	movl	%ecx,0x04(%esp)
00001653	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
00001658	movl	%ebx,%ecx
0000165a	movl	%eax,%ebx
0000165c	movl	%edi,0x0c(%esp)
00001660	leal	0xf2(%ebp),%eax
00001663	movl	%eax,0x08(%esp)
00001667	addl	$0x02,%ecx
0000166a	movl	0xffffff38(%ebp),%eax
00001670	cmpl	%eax,%ecx
00001672	cmovgel	%eax,%ecx
00001675	movl	%ecx,0x04(%esp)
00001679	movl	%esi,(%esp)
0000167c	calll	CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
00001681	movl	0xffffff44(%ebp),%edx
00001687	movss	0x04(%edx),%xmm0
0000168c	movl	0xffffff70(%ebp),%ecx
00001692	subss	0x04(%ecx),%xmm0
00001697	movss	(%ebx),%xmm1
0000169b	movss	0x04(%ebx),%xmm2
000016a0	movss	%xmm2,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
000016a5	movss	%xmm1,0xe4(%ebp)
000016aa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
000016b1	movss	(%ecx),%xmm1
000016b5	movss	0x04(%ecx),%xmm2
000016ba	movss	%xmm2,0xd0(%ebp)
000016bf	movss	%xmm1,0xd4(%ebp)
000016c4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
000016cb	movss	(%edx),%xmm1
000016cf	movss	0x04(%edx),%xmm2
000016d4	movss	%xmm2,0xc0(%ebp)
000016d9	movss	%xmm1,0xc4(%ebp)
000016de	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
000016e5	movss	(%eax),%xmm1
000016e9	movss	0x04(%eax),%xmm2
000016ee	movss	%xmm2,0xb0(%ebp)
000016f3	movss	%xmm1,0xb4(%ebp)
000016f8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
000016ff	pxor	%xmm1,%xmm1
00001703	ucomiss	%xmm1,%xmm0
00001706	movl	%ecx,%eax
00001708	movl	%edx,%edi
0000170a	jbe	0x0000171a
0000170c	movss	0x0c(%ebp),%xmm1
00001711	subss	0x04(%eax),%xmm1
00001716	divss	%xmm0,%xmm1
0000171a	movaps	%xmm1,0xffffff58(%ebp)
00001721	movzwl	0x08(%eax),%eax
00001725	leal	0x98(%ebp),%ecx
00001728	movl	%ecx,0x08(%esp)
0000172c	leal	0x9c(%ebp),%esi
0000172f	movl	%esi,0x04(%esp)
00001733	shrl	%eax
00001735	movl	%eax,(%esp)
00001738	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
0000173d	movzwl	0x08(%edi),%eax
00001741	movl	%esi,0x08(%esp)
00001745	leal	0x94(%ebp),%ecx
00001748	movl	%ecx,0x04(%esp)
0000174c	shrl	%eax
0000174e	movl	%eax,(%esp)
00001751	xorps	%xmm0,%xmm0
00001754	movaps	0xffffff58(%ebp),%xmm1
0000175b	maxss	%xmm0,%xmm1
0000175f	movl	0xffffff3c(%ebp),%eax
00001765	minss	0x6e9b4-0x1441(%eax),%xmm1
0000176d	movaps	%xmm1,0xffffff58(%ebp)
00001774	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
00001779	movl	0x98(%ebp),%eax
0000177c	cmpl	$0x0f,%eax
0000177f	jne	0x000017cd
00001781	movss	0xd0(%ebp),%xmm1
00001786	movss	0xc0(%ebp),%xmm0
0000178b	subss	%xmm1,%xmm0
0000178f	movaps	0xffffff58(%ebp),%xmm3
00001796	mulss	%xmm3,%xmm0
0000179a	addss	%xmm1,%xmm0
0000179e	movss	%xmm0,0xa0(%ebp)
000017a3	movss	0xd4(%ebp),%xmm2
000017a8	movss	0xd8(%ebp),%xmm1
000017ad	movss	0xc8(%ebp),%xmm0
000017b2	subss	%xmm1,%xmm0
000017b6	mulss	%xmm3,%xmm0
000017ba	addss	%xmm1,%xmm0
000017be	movss	%xmm0,0xa8(%ebp)
000017c3	movss	%xmm2,0xa4(%ebp)
000017c8	jmp	0x00001927
000017cd	movaps	0xffffff58(%ebp),%xmm2
000017d4	movl	0x94(%ebp),%ecx
000017d7	cmpl	$0x0f,%ecx
000017da	jne	0x00001824
000017dc	movss	0xd0(%ebp),%xmm1
000017e1	movss	0xc0(%ebp),%xmm0
000017e6	subss	%xmm1,%xmm0
000017ea	movaps	%xmm2,%xmm3
000017ed	mulss	%xmm3,%xmm0
000017f1	addss	%xmm1,%xmm0
000017f5	movss	%xmm0,0xa0(%ebp)
000017fa	movss	0xd8(%ebp),%xmm0
000017ff	movss	0xc4(%ebp),%xmm2
00001804	movss	0xc8(%ebp),%xmm1
00001809	subss	%xmm0,%xmm1
0000180d	mulss	%xmm3,%xmm1
00001811	addss	%xmm0,%xmm1
00001815	movss	%xmm1,0xa8(%ebp)
0000181a	movss	%xmm2,0xa4(%ebp)
0000181f	jmp	0x00001927
00001824	cmpl	%ecx,%eax
00001826	jne	0x00001863
00001828	leal	0xa0(%ebp),%eax
0000182b	movl	%eax,0x18(%esp)
0000182f	movss	%xmm2,0x14(%esp)
00001835	leal	0xb0(%ebp),%eax
00001838	movl	%eax,0x10(%esp)
0000183c	leal	0xc0(%ebp),%eax
0000183f	movl	%eax,0x0c(%esp)
00001843	leal	0xd0(%ebp),%eax
00001846	movl	%eax,0x08(%esp)
0000184a	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
0000184d	movl	%eax,0x04(%esp)
00001851	movl	%ecx,(%esp)
00001854	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00001859	movss	0xa4(%ebp),%xmm2
0000185e	jmp	0x00001927
00001863	leal	0x88(%ebp),%ecx
00001866	movl	%ecx,0x18(%esp)
0000186a	movss	%xmm2,0x14(%esp)
00001870	leal	0xb0(%ebp),%ecx
00001873	movl	%ecx,0x10(%esp)
00001877	leal	0xc0(%ebp),%ebx
0000187a	movl	%ebx,0x0c(%esp)
0000187e	leal	0xd0(%ebp),%esi
00001881	movl	%esi,0x08(%esp)
00001885	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%edi
00001888	movl	%edi,0x04(%esp)
0000188c	movl	%eax,(%esp)
0000188f	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00001894	movl	0x94(%ebp),%eax
00001897	leal	0xffffff78(%ebp),%ecx
0000189d	movl	%ecx,0x18(%esp)
000018a1	movaps	0xffffff58(%ebp),%xmm0
000018a8	movss	%xmm0,0x14(%esp)
000018ae	leal	0xb0(%ebp),%ecx
000018b1	movl	%ecx,0x10(%esp)
000018b5	movl	%ebx,0x0c(%esp)
000018b9	movl	%esi,0x08(%esp)
000018bd	movl	%edi,0x04(%esp)
000018c1	movl	%eax,(%esp)
000018c4	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
000018c9	movss	0x88(%ebp),%xmm1
000018ce	movss	0xffffff78(%ebp),%xmm0
000018d6	subss	%xmm1,%xmm0
000018da	movaps	0xffffff58(%ebp),%xmm3
000018e1	mulss	%xmm3,%xmm0
000018e5	addss	%xmm1,%xmm0
000018e9	movss	%xmm0,0xa0(%ebp)
000018ee	movss	0x8c(%ebp),%xmm0
000018f3	movss	0xffffff7c(%ebp),%xmm2
000018fb	subss	%xmm0,%xmm2
000018ff	mulss	%xmm3,%xmm2
00001903	addss	%xmm0,%xmm2
00001907	movss	%xmm2,0xa4(%ebp)
0000190c	movss	0x90(%ebp),%xmm1
00001911	movss	0x80(%ebp),%xmm0
00001916	subss	%xmm1,%xmm0
0000191a	mulss	%xmm3,%xmm0
0000191e	addss	%xmm1,%xmm0
00001922	movss	%xmm0,0xa8(%ebp)
00001927	xorps	%xmm0,%xmm0
0000192a	maxss	%xmm0,%xmm2
0000192e	movl	0xffffff3c(%ebp),%eax
00001934	minss	0x6e9b4-0x1441(%eax),%xmm2
0000193c	movss	%xmm2,0xffffff74(%ebp)
00001944	flds	0xffffff74(%ebp)
0000194a	addl	$0x000000dc,%esp
00001950	popl	%esi
00001951	popl	%edi
00001952	popl	%ebx
00001953	popl	%ebp
00001954	ret
00001955	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetSampleIntensity(float):
00001960	pushl	%ebp
00001961	movl	%esp,%ebp
00001963	subl	$0x18,%esp
00001966	movss	0x0c(%ebp),%xmm0
0000196b	movss	%xmm0,0x04(%esp)
00001971	movl	0x08(%ebp),%eax
00001974	movl	%eax,(%esp)
00001977	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%esp)
0000197f	calll	CFlexAnimationTrack::GetIntensityInternal(float, int)
00001984	addl	$0x18,%esp
00001987	popl	%ebp
00001988	ret
00001989	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::GetBalanceIntensity(float):
00001990	pushl	%ebp
00001991	movl	%esp,%ebp
00001993	subl	$0x18,%esp
00001996	movl	0x08(%ebp),%eax
00001999	testb	$0x02,0x5c(%eax)
0000199d	je	0x000019bc
0000199f	movss	0x0c(%ebp),%xmm0
000019a4	movss	%xmm0,0x04(%esp)
000019aa	movl	%eax,(%esp)
000019ad	movl	$0x00000001,0x08(%esp)
000019b5	calll	CFlexAnimationTrack::GetIntensityInternal(float, int)
000019ba	jmp	0x000019be
000019bc	fld1
000019be	addl	$0x18,%esp
000019c1	popl	%ebp
000019c2	ret
000019c3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::IsComboType():
000019d0	movl	0x04(%esp),%eax
000019d4	movb	0x5c(%eax),%al
000019d7	andb	$0x02,%al
000019d9	shrb	%al
000019db	movzbl	%al,%eax
000019de	ret
000019df	nop
CFlexAnimationTrack::GetIntensity(float, int):
000019e0	pushl	%ebp
000019e1	movl	%esp,%ebp
000019e3	pushl	%ebx
000019e4	pushl	%edi
000019e5	pushl	%esi
000019e6	subl	$0x1c,%esp
000019e9	calll	0x000019ee
000019ee	popl	%esi
000019ef	movss	0x0c(%ebp),%xmm0
000019f4	movss	%xmm0,0x04(%esp)
000019fa	movl	0x08(%ebp),%ebx
000019fd	movl	%ebx,(%esp)
00001a00	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%esp)
00001a08	calll	CFlexAnimationTrack::GetIntensityInternal(float, int)
00001a0d	fstps	0xf0(%ebp)
00001a10	movss	0xf0(%ebp),%xmm0
00001a15	movss	%xmm0,0xe4(%ebp)
00001a1a	testb	$0x02,0x5c(%ebx)
00001a1e	jne	0x00001a2a
00001a20	movss	0x6e9b8-0x19ee(%esi),%xmm0
00001a28	jmp	0x00001a90
00001a2a	movl	0x10(%ebp),%edi
00001a2d	movss	0x0c(%ebp),%xmm0
00001a32	movss	%xmm0,0x04(%esp)
00001a38	movl	%ebx,(%esp)
00001a3b	movl	$0x00000001,0x08(%esp)
00001a43	calll	CFlexAnimationTrack::GetIntensityInternal(float, int)
00001a48	fstps	0xec(%ebp)
00001a4b	movss	0xec(%ebp),%xmm1
00001a50	testl	%edi,%edi
00001a52	jne	0x00001a6f
00001a54	ucomiss	0x6e9bc-0x19ee(%esi),%xmm1
00001a5b	jbe	0x00001a6f
00001a5d	movss	0x6e9b8-0x19ee(%esi),%xmm0
00001a65	subss	%xmm1,%xmm0
00001a69	addss	%xmm0,%xmm0
00001a6d	jmp	0x00001a90
00001a6f	movss	0x6e9b8-0x19ee(%esi),%xmm0
00001a77	cmpl	$0x01,%edi
00001a7a	jne	0x00001a90
00001a7c	movss	0x6e9bc-0x19ee(%esi),%xmm2
00001a84	ucomiss	%xmm1,%xmm2
00001a87	jbe	0x00001a90
00001a89	addss	%xmm1,%xmm1
00001a8d	movaps	%xmm1,%xmm0
00001a90	movss	0xe4(%ebp),%xmm1
00001a95	mulss	%xmm0,%xmm1
00001a99	movss	%xmm1,0xe8(%ebp)
00001a9e	flds	0xe8(%ebp)
00001aa1	addl	$0x1c,%esp
00001aa4	popl	%esi
00001aa5	popl	%edi
00001aa6	popl	%ebx
00001aa7	popl	%ebp
00001aa8	ret
00001aa9	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::AddSample(float, float, int):
00001ab0	pushl	%ebp
00001ab1	movl	%esp,%ebp
00001ab3	pushl	%ebx
00001ab4	pushl	%edi
00001ab5	pushl	%esi
00001ab6	subl	$0x1c,%esp
00001ab9	movl	0x14(%ebp),%eax
00001abc	imull	$0x14,%eax,%esi
00001abf	movl	0x08(%ebp),%ecx
00001ac2	leal	0x1c(%ecx,%esi),%edi
00001ac6	leal	0x10(%ecx,%esi),%edx
00001aca	movl	0x14(%ecx,%esi),%eax
00001ace	movl	0x1c(%ecx,%esi),%ecx
00001ad2	movl	%ecx,0xec(%ebp)
00001ad5	leal	0x01(%ecx),%ebx
00001ad8	cmpl	%eax,%ebx
00001ada	jle	0x00001af8
00001adc	movl	%ebx,%ecx
00001ade	subl	%eax,%ecx
00001ae0	movl	%ecx,0x04(%esp)
00001ae4	movl	%edx,(%esp)
00001ae7	movl	%ebx,0xf0(%ebp)
00001aea	movl	%edx,%ebx
00001aec	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
00001af1	movl	%ebx,%edx
00001af3	movl	0xf0(%ebp),%ebx
00001af6	movl	(%edi),%ecx
00001af8	incl	%ecx
00001af9	movl	%ecx,(%edi)
00001afb	movl	(%edx),%eax
00001afd	movl	0x08(%ebp),%edi
00001b00	movl	%eax,0x20(%edi,%esi)
00001b04	movl	0xec(%ebp),%edi
00001b07	subl	%edi,%ecx
00001b09	decl	%ecx
00001b0a	testl	%ecx,%ecx
00001b0c	jg	0x00001b12
00001b0e	movl	%edx,%ebx
00001b10	jmp	0x00001b35
00001b12	imull	$0x0a,%ecx,%ecx
00001b15	movl	%ecx,0x08(%esp)
00001b19	imull	$0x0a,%edi,%ecx
00001b1c	addl	%eax,%ecx
00001b1e	movl	%ecx,0x04(%esp)
00001b22	imull	$0x0a,%ebx,%ecx
00001b25	addl	%eax,%ecx
00001b27	movl	%ecx,(%esp)
00001b2a	movl	%edx,%esi
00001b2c	calll	_memmove
00001b31	movl	(%esi),%eax
00001b33	movl	%esi,%ebx
00001b35	imull	$0x0a,%edi,%ecx
00001b38	movl	%eax,%edx
00001b3a	addl	%ecx,%edx
00001b3c	je	0x00001b51
00001b3e	xorl	%eax,%eax
00001b40	movl	0x0c(%ebp),%esi
00001b43	movl	0x10(%ebp),%edi
00001b46	movl	%edi,(%edx)
00001b48	movl	%esi,0x04(%edx)
00001b4b	movw	%ax,0x08(%edx)
00001b4f	movl	(%ebx),%eax
00001b51	addl	%ecx,%eax
00001b53	addl	$0x1c,%esp
00001b56	popl	%esi
00001b57	popl	%edi
00001b58	popl	%ebx
00001b59	popl	%ebp
00001b5a	ret
00001b5b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::Resort(int):
00001b60	pushl	%ebp
00001b61	movl	%esp,%ebp
00001b63	pushl	%ebx
00001b64	pushl	%edi
00001b65	pushl	%esi
00001b66	subl	$0x3c,%esp
00001b69	movl	0x0c(%ebp),%eax
00001b6c	imull	$0x14,%eax,%eax
00001b6f	movl	0x08(%ebp),%ecx
00001b72	movl	0x1c(%ecx,%eax),%ebx
00001b76	testl	%ebx,%ebx
00001b78	jle	0x00001c66
00001b7e	movl	0x08(%ebp),%ecx
00001b81	leal	0x1c(%ecx,%eax),%edx
00001b85	movl	%edx,0xd0(%ebp)
00001b88	leal	0x10(%ecx,%eax),%ecx
00001b8c	movl	%ecx,0xcc(%ebp)
00001b8f	xorl	%eax,%eax
00001b91	movl	$0x00000013,%esi
00001b96	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00001ba0	movl	%esi,0xc4(%ebp)
00001ba3	movl	%eax,0xd4(%ebp)
00001ba6	leal	0x01(%eax),%edx
00001ba9	movl	%edx,0xc8(%ebp)
00001bac	cmpl	%ebx,%edx
00001bae	movl	%esi,%edi
00001bb0	jge	0x00001c55
00001bb6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00001bc0	imull	$0x0a,0xd4(%ebp),%eax
00001bc4	movl	(%ecx),%esi
00001bc6	movss	0x04(%esi,%eax),%xmm0
00001bcc	movss	0xfb(%esi,%edi),%xmm1
00001bd2	ucomiss	%xmm1,%xmm0
00001bd5	jbe	0x00001c49
00001bd7	leal	0x04(%esi,%eax),%ecx
00001bdb	movl	%ecx,0xe8(%ebp)
00001bde	leal	0x08(%esi,%eax),%ecx
00001be2	movl	%ecx,0xdc(%ebp)
00001be5	leal	0x09(%esi,%eax),%ebx
00001be9	addl	%esi,%eax
00001beb	movb	(%esi,%edi),%cl
00001bee	movb	%cl,0xe2(%ebp)
00001bf1	movb	0xff(%esi,%edi),%cl
00001bf5	movb	%cl,0xdb(%ebp)
00001bf8	movss	0xf7(%esi,%edi),%xmm3
00001bfe	movb	(%ebx),%cl
00001c00	movl	%ebx,%esi
00001c02	movb	%cl,0xe4(%ebp)
00001c05	movl	0xdc(%ebp),%ecx
00001c08	movb	(%ecx),%bl
00001c0a	movb	%bl,0xe3(%ebp)
00001c0d	movss	(%eax),%xmm2
00001c11	movss	%xmm3,(%eax)
00001c15	movl	0xe8(%ebp),%eax
00001c18	movss	%xmm1,(%eax)
00001c1c	movb	0xdb(%ebp),%al
00001c1f	movb	%al,(%ecx)
00001c21	movl	0xcc(%ebp),%ecx
00001c24	movb	0xe2(%ebp),%al
00001c27	movb	%al,(%esi)
00001c29	movl	(%ecx),%eax
00001c2b	movss	%xmm2,0xf7(%eax,%edi)
00001c31	movss	%xmm0,0xfb(%eax,%edi)
00001c37	movb	0xe3(%ebp),%bl
00001c3a	movb	%bl,0xff(%eax,%edi)
00001c3e	movb	0xe4(%ebp),%bl
00001c41	movb	%bl,(%eax,%edi)
00001c44	movl	0xd0(%ebp),%eax
00001c47	movl	(%eax),%ebx
00001c49	addl	$0x0a,%edi
00001c4c	incl	%edx
00001c4d	cmpl	%ebx,%edx
00001c4f	jl	0x00001bc0
00001c55	movl	0xc4(%ebp),%esi
00001c58	addl	$0x0a,%esi
00001c5b	movl	0xc8(%ebp),%eax
00001c5e	cmpl	%ebx,%eax
00001c60	jl	0x00001ba0
00001c66	movl	0x08(%ebp),%edx
00001c69	movl	0x58(%edx),%eax
00001c6c	testl	%eax,%eax
00001c6e	je	0x00001d82
00001c74	movl	(%eax),%ecx
00001c76	movl	%eax,(%esp)
00001c79	movl	%edx,%esi
00001c7b	call	(%ecx)
00001c7d	movl	%esi,%edx
00001c7f	fstps	0xf0(%ebp)
00001c82	movl	0x1c(%edx),%eax
00001c85	testl	%eax,%eax
00001c87	jle	0x00001cf6
00001c89	movss	0xf0(%ebp),%xmm0
00001c8e	movss	%xmm0,0xe4(%ebp)
00001c93	imull	$0x0a,%eax,%edi
00001c96	movl	%eax,%ebx
00001c98	negl	%ebx
00001c9a	movl	%eax,%esi
00001c9c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00001ca0	movl	0x10(%edx),%ecx
00001ca3	movss	0xfa(%ecx,%edi),%xmm0
00001ca9	decl	%esi
00001caa	pxor	%xmm1,%xmm1
00001cae	ucomiss	%xmm0,%xmm1
00001cb1	ja	0x00001cc3
00001cb3	ucomiss	0xe4(%ebp),%xmm0
00001cb7	ja	0x00001cc3
00001cb9	addl	$0xf6,%edi
00001cbc	incl	%ebx
00001cbd	testl	%esi,%esi
00001cbf	jg	0x00001ca0
00001cc1	jmp	0x00001cf6
00001cc3	movl	%esi,0xe8(%ebp)
00001cc6	movl	%edx,%esi
00001cc8	leal	(%eax,%ebx),%edx
00001ccb	testl	%edx,%edx
00001ccd	jle	0x00001ceb
00001ccf	imull	$0x0a,%edx,%eax
00001cd2	movl	%eax,0x08(%esp)
00001cd6	leal	0xf6(%ecx,%edi),%eax
00001cda	addl	%edi,%ecx
00001cdc	movl	%ecx,0x04(%esp)
00001ce0	movl	%eax,(%esp)
00001ce3	calll	_memmove
00001ce8	movl	0x1c(%esi),%eax
00001ceb	decl	%eax
00001cec	movl	%eax,0x1c(%esi)
00001cef	movl	%esi,%edx
00001cf1	movl	0xe8(%ebp),%esi
00001cf4	jmp	0x00001cb9
00001cf6	movl	0x58(%edx),%eax
00001cf9	testl	%eax,%eax
00001cfb	je	0x00001d82
00001d01	movl	(%eax),%ecx
00001d03	movl	%eax,(%esp)
00001d06	movl	%edx,%esi
00001d08	call	(%ecx)
00001d0a	movl	%esi,%edx
00001d0c	fstps	0xec(%ebp)
00001d0f	movl	0x30(%edx),%eax
00001d12	testl	%eax,%eax
00001d14	jle	0x00001d82
00001d16	movss	0xec(%ebp),%xmm0
00001d1b	movss	%xmm0,0xe4(%ebp)
00001d20	imull	$0x0a,%eax,%edi
00001d23	movl	%eax,%ebx
00001d25	negl	%ebx
00001d27	movl	%eax,%esi
00001d29	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00001d30	movl	0x24(%edx),%ecx
00001d33	movss	0xfa(%ecx,%edi),%xmm0
00001d39	decl	%esi
00001d3a	pxor	%xmm1,%xmm1
00001d3e	ucomiss	%xmm0,%xmm1
00001d41	ja	0x00001d49
00001d43	ucomiss	0xe4(%ebp),%xmm0
00001d47	jbe	0x00001d7a
00001d49	movl	%esi,0xe8(%ebp)
00001d4c	movl	%edx,%esi
00001d4e	leal	(%eax,%ebx),%edx
00001d51	testl	%edx,%edx
00001d53	jle	0x00001d71
00001d55	imull	$0x0a,%edx,%eax
00001d58	movl	%eax,0x08(%esp)
00001d5c	leal	0xf6(%ecx,%edi),%eax
00001d60	addl	%edi,%ecx
00001d62	movl	%ecx,0x04(%esp)
00001d66	movl	%eax,(%esp)
00001d69	calll	_memmove
00001d6e	movl	0x30(%esi),%eax
00001d71	decl	%eax
00001d72	movl	%eax,0x30(%esi)
00001d75	movl	%esi,%edx
00001d77	movl	0xe8(%ebp),%esi
00001d7a	addl	$0xf6,%edi
00001d7d	incl	%ebx
00001d7e	testl	%esi,%esi
00001d80	jg	0x00001d30
00001d82	addl	$0x3c,%esp
00001d85	popl	%esi
00001d86	popl	%edi
00001d87	popl	%ebx
00001d88	popl	%ebp
00001d89	ret
00001d8a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::RemoveOutOfRangeSamples(int):
00001d90	pushl	%ebp
00001d91	movl	%esp,%ebp
00001d93	pushl	%ebx
00001d94	pushl	%edi
00001d95	pushl	%esi
00001d96	subl	$0x1c,%esp
00001d99	movl	0x08(%ebp),%esi
00001d9c	movl	0x58(%esi),%eax
00001d9f	testl	%eax,%eax
00001da1	je	0x00001e36
00001da7	movl	0x0c(%ebp),%edi
00001daa	movl	(%eax),%ecx
00001dac	movl	%eax,(%esp)
00001daf	call	(%ecx)
00001db1	fstps	0xf0(%ebp)
00001db4	imull	$0x14,%edi,%ecx
00001db7	movl	0x1c(%esi,%ecx),%eax
00001dbb	testl	%eax,%eax
00001dbd	jle	0x00001e36
00001dbf	leal	0x1c(%esi,%ecx),%edx
00001dc3	movss	0xf0(%ebp),%xmm0
00001dc8	movss	%xmm0,0xe8(%ebp)
00001dcd	leal	0x10(%esi,%ecx),%ecx
00001dd1	movl	%ecx,0xe4(%ebp)
00001dd4	imull	$0x0a,%eax,%ebx
00001dd7	movl	%eax,%edi
00001dd9	negl	%edi
00001ddb	movl	%eax,%esi
00001ddd	nopl	(%eax)
00001de0	movl	0xe4(%ebp),%ecx
00001de3	movl	(%ecx),%ecx
00001de5	movss	0xfa(%ecx,%ebx),%xmm0
00001deb	decl	%esi
00001dec	pxor	%xmm1,%xmm1
00001df0	ucomiss	%xmm0,%xmm1
00001df3	ja	0x00001e05
00001df5	ucomiss	0xe8(%ebp),%xmm0
00001df9	ja	0x00001e05
00001dfb	incl	%edi
00001dfc	addl	$0xf6,%ebx
00001dff	testl	%esi,%esi
00001e01	jg	0x00001de0
00001e03	jmp	0x00001e36
00001e05	movl	%esi,0xec(%ebp)
00001e08	movl	%edx,%esi
00001e0a	leal	(%eax,%edi),%edx
00001e0d	testl	%edx,%edx
00001e0f	jle	0x00001e2c
00001e11	imull	$0x0a,%edx,%eax
00001e14	movl	%eax,0x08(%esp)
00001e18	leal	0xf6(%ecx,%ebx),%eax
00001e1c	addl	%ebx,%ecx
00001e1e	movl	%ecx,0x04(%esp)
00001e22	movl	%eax,(%esp)
00001e25	calll	_memmove
00001e2a	movl	(%esi),%eax
00001e2c	decl	%eax
00001e2d	movl	%eax,(%esi)
00001e2f	movl	%esi,%edx
00001e31	movl	0xec(%ebp),%esi
00001e34	jmp	0x00001dfb
00001e36	addl	$0x1c,%esp
00001e39	popl	%esi
00001e3a	popl	%edi
00001e3b	popl	%ebx
00001e3c	popl	%ebp
00001e3d	ret
00001e3e	nop
CFlexAnimationTrack::GetEvent():
00001e40	movl	0x04(%esp),%eax
00001e44	movl	0x58(%eax),%eax
00001e47	ret
00001e48	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetFlexControllerIndex(int):
00001e50	movl	0x04(%esp),%eax
00001e54	testb	$0x02,0x5c(%eax)
00001e58	je	0x00001e65
00001e5a	movl	0x08(%esp),%ecx
00001e5e	leal	0x38(%eax,%ecx,4),%eax
00001e62	movl	(%eax),%eax
00001e64	ret
00001e65	addl	$0x38,%eax
00001e68	movl	(%eax),%eax
00001e6a	ret
00001e6b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::GetRawFlexControllerIndex(int):
00001e70	movl	0x04(%esp),%eax
00001e74	testb	$0x02,0x5c(%eax)
00001e78	je	0x00001e85
00001e7a	movl	0x08(%esp),%ecx
00001e7e	leal	0x40(%eax,%ecx,4),%eax
00001e82	movl	(%eax),%eax
00001e84	ret
00001e85	addl	$0x40,%eax
00001e88	movl	(%eax),%eax
00001e8a	ret
00001e8b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::SetFlexControllerIndex(LocalFlexController_t, int, int):
00001e90	movl	0x0c(%esp),%edx
00001e94	movl	0x10(%esp),%eax
00001e98	movl	0x04(%esp),%ecx
00001e9c	movl	%edx,0x38(%ecx,%eax,4)
00001ea0	movl	0x08(%esp),%edx
00001ea4	movl	%edx,0x40(%ecx,%eax,4)
00001ea8	ret
00001ea9	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::SetComboType(bool):
00001eb0	movb	0x08(%esp),%al
00001eb4	addb	%al,%al
00001eb6	movl	0x04(%esp),%ecx
00001eba	movb	0x5c(%ecx),%dl
00001ebd	andb	$0xfd,%dl
00001ec0	orb	%al,%dl
00001ec2	movb	%dl,0x5c(%ecx)
00001ec5	ret
00001ec6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::SetServerSide(bool):
00001ed0	movb	0x08(%esp),%al
00001ed4	shlb	$0x02,%al
00001ed7	movl	0x04(%esp),%ecx
00001edb	movb	0x5c(%ecx),%dl
00001ede	andb	$0xfb,%dl
00001ee1	orb	%al,%dl
00001ee3	movb	%dl,0x5c(%ecx)
00001ee6	ret
00001ee7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::IsServerSide() const:
00001ef0	movl	0x04(%esp),%eax
00001ef4	movb	0x5c(%eax),%al
00001ef7	andb	$0x04,%al
00001ef9	shrb	$0x02,%al
00001efc	movzbl	%al,%eax
00001eff	ret
CFlexAnimationTrack::SetMin(float):
00001f00	movss	0x08(%esp),%xmm0
00001f06	movl	0x04(%esp),%eax
00001f0a	movss	%xmm0,0x08(%eax)
00001f0f	ret
CFlexAnimationTrack::SetMax(float):
00001f10	movss	0x08(%esp),%xmm0
00001f16	movl	0x04(%esp),%eax
00001f1a	movss	%xmm0,0x0c(%eax)
00001f1f	ret
CFlexAnimationTrack::GetMin(int):
00001f20	pushl	%eax
00001f21	pxor	%xmm0,%xmm0
00001f25	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%esp)
00001f2a	jne	0x00001f35
00001f2c	movl	0x08(%esp),%eax
00001f30	movss	0x08(%eax),%xmm0
00001f35	movss	%xmm0,(%esp)
00001f3a	flds	(%esp)
00001f3d	popl	%eax
00001f3e	ret
00001f3f	nop
CFlexAnimationTrack::GetMax(int):
00001f40	pushl	%eax
00001f41	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%esp)
00001f46	je	0x00001f58
00001f48	calll	0x00001f4d
00001f4d	popl	%eax
00001f4e	movss	0x6e9c0-0x1f4d(%eax),%xmm0
00001f56	jmp	0x00001f61
00001f58	movl	0x08(%esp),%eax
00001f5c	movss	0x0c(%eax),%xmm0
00001f61	movss	%xmm0,(%esp)
00001f66	flds	(%esp)
00001f69	popl	%eax
00001f6a	ret
00001f6b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CFlexAnimationTrack::IsInverted():
00001f70	movl	0x04(%esp),%eax
00001f74	movzbl	0x5d(%eax),%eax
00001f78	andl	$0x01,%eax
00001f7b	ret
00001f7c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CFlexAnimationTrack::SetInverted(bool):
00001f80	movb	0x08(%esp),%al
00001f84	movl	0x04(%esp),%ecx
00001f88	movb	%al,0x5d(%ecx)
00001f8b	ret
00001f8c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::CChoreoEvent(CChoreoScene*):
00001f90	jmp	CChoreoEvent::CChoreoEvent(CChoreoScene*)
00001f95	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CChoreoEvent(CChoreoScene*):
00001fa0	pushl	%ebp
00001fa1	movl	%esp,%ebp
00001fa3	pushl	%ebx
00001fa4	pushl	%edi
00001fa5	pushl	%esi
00001fa6	subl	$0x2c,%esp
00001fa9	calll	0x00001fae
00001fae	popl	%eax
00001faf	leal	vtable for CChoreoEvent-0x1fae+0x00000008(%eax),%eax
00001fb5	movl	0x08(%ebp),%edi
00001fb8	movl	%eax,(%edi)
00001fba	leal	0x08(%edi),%esi
00001fbd	movl	%esi,(%esp)
00001fc0	calll	CUtlString::CUtlString()
00001fc5	leal	0x18(%edi),%ebx
00001fc8	movl	%ebx,(%esp)
00001fcb	calll	CUtlString::CUtlString()
00001fd0	leal	0x28(%edi),%eax
00001fd3	movl	%eax,0xe8(%ebp)
00001fd6	movl	%eax,(%esp)
00001fd9	calll	CUtlString::CUtlString()
00001fde	movl	%esi,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00001fe1	leal	0x38(%edi),%esi
00001fe4	movl	%esi,(%esp)
00001fe7	calll	CUtlString::CUtlString()
00001fec	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00001ff6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00002000	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
0000200a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002014	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
0000201e	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x7c(%edi)
00002024	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x74(%edi)
0000202b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x78(%edi)
00002032	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00002039	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%edi)
00002040	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00002047	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
0000204e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
00002055	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
0000205c	leal	0x00000094(%edi),%eax
00002062	movl	%eax,0xe4(%ebp)
00002065	movl	%eax,(%esp)
00002068	calll	CUtlString::CUtlString()
0000206d	leal	0x000000a4(%edi),%eax
00002073	movl	%eax,0xd8(%ebp)
00002076	movl	%eax,(%esp)
00002079	calll	CUtlString::CUtlString()
0000207e	movl	%esi,0xdc(%ebp)
00002081	movl	%ebx,0xec(%ebp)
00002084	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
0000208e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000bc(%edi)
00002098	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c8(%edi)
000020a2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
000020ac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d0(%edi)
000020b6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000cc(%edi)
000020c0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
000020ca	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
000020d4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%edi)
000020de	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000dc(%edi)
000020e8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e4(%edi)
000020f2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ec(%edi)
000020fc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e8(%edi)
00002106	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f4(%edi)
00002110	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f0(%edi)
0000211a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f8(%edi)
00002124	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000108(%edi)
0000212e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000104(%edi)
00002138	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000100(%edi)
00002142	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000fc(%edi)
0000214c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00002156	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00002160	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
0000216a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
00002174	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
0000217e	leal	0x0000013c(%edi),%esi
00002184	leal	0x000000d0(%edi),%ebx
0000218a	leal	0x000000bc(%edi),%eax
00002190	movl	%eax,0xd4(%ebp)
00002193	movl	%esi,(%esp)
00002196	calll	CUtlString::CUtlString()
0000219b	movl	0x0c(%ebp),%eax
0000219e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
000021a8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
000021b2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
000021bc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
000021c6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
000021d0	movl	%eax,0x04(%esp)
000021d4	movl	%edi,(%esp)
000021d7	calll	CChoreoEvent::Init(CChoreoScene*)
000021dc	addl	$0x2c,%esp
000021df	popl	%esi
000021e0	popl	%edi
000021e1	popl	%ebx
000021e2	popl	%ebp
000021e3	ret
000021e4	movl	%eax,0xf0(%ebp)
000021e7	jmp	0x00002527
000021ec	movl	%esi,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
000021ef	movl	%eax,0xf0(%ebp)
000021f2	jmp	0x00002503
000021f7	movl	%eax,0xf0(%ebp)
000021fa	jmp	0x000024dd
000021ff	movl	%eax,0xf0(%ebp)
00002202	jmp	0x000023f5
00002207	movl	%eax,0xf0(%ebp)
0000220a	movl	0xe4(%ebp),%eax
0000220d	jmp	0x000023c2
00002212	movl	%eax,0xf0(%ebp)
00002215	jmp	0x000022b8
0000221a	movl	%eax,0xf0(%ebp)
0000221d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
00002227	movl	0x00000158(%edi),%eax
0000222d	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00002234	jns	0x0000223e
00002236	movl	%eax,0x00000168(%edi)
0000223c	jmp	0x00002291
0000223e	testl	%eax,%eax
00002240	jne	0x00002258
00002242	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000224c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00002256	jmp	0x00002287
00002258	movl	%eax,(%esp)
0000225b	calll	_free
00002260	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
0000226a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00002271	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000227b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00002285	js	0x00002291
00002287	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00002291	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000144(%edi)
00002298	js	0x000022b8
0000229a	movl	(%esi),%eax
0000229c	testl	%eax,%eax
0000229e	je	0x000022ae
000022a0	movl	%eax,(%esp)
000022a3	calll	_free
000022a8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000022ae	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000140(%edi)
000022b8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
000022c2	movl	0x0000010c(%edi),%eax
000022c8	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
000022cf	movl	0xd4(%ebp),%esi
000022d2	jns	0x000022dc
000022d4	movl	%eax,0x0000011c(%edi)
000022da	jmp	0x0000232f
000022dc	testl	%eax,%eax
000022de	jne	0x000022f6
000022e0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000022ea	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
000022f4	jmp	0x00002325
000022f6	movl	%eax,(%esp)
000022f9	calll	_free
000022fe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
00002308	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
0000230f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00002319	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00002323	js	0x0000232f
00002325	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
0000232f	movl	%ebx,(%esp)
00002332	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00002337	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
0000233e	js	0x0000235e
00002340	movl	(%ebx),%eax
00002342	testl	%eax,%eax
00002344	je	0x00002354
00002346	movl	%eax,(%esp)
00002349	calll	_free
0000234e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002354	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
0000235e	movl	%esi,(%esp)
00002361	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00002366	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
0000236d	movl	0xec(%ebp),%ebx
00002370	js	0x00002390
00002372	movl	(%esi),%eax
00002374	testl	%eax,%eax
00002376	je	0x00002386
00002378	movl	%eax,(%esp)
0000237b	calll	_free
00002380	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00002386	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
00002390	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ac(%edi)
00002397	movl	0xd8(%ebp),%eax
0000239a	js	0x000023bc
0000239c	movl	%eax,%esi
0000239e	movl	(%esi),%eax
000023a0	testl	%eax,%eax
000023a2	je	0x000023b2
000023a4	movl	%eax,(%esp)
000023a7	calll	_free
000023ac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000023b2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a8(%edi)
000023bc	movl	0xe4(%ebp),%eax
000023bf	movl	0xdc(%ebp),%esi
000023c2	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000009c(%edi)
000023c9	js	0x000023f5
000023cb	movl	%ebx,0xec(%ebp)
000023ce	movl	%esi,%ebx
000023d0	movl	%eax,%esi
000023d2	movl	(%esi),%eax
000023d4	testl	%eax,%eax
000023d6	je	0x000023e6
000023d8	movl	%eax,(%esp)
000023db	calll	_free
000023e0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000023e6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000098(%edi)
000023f0	movl	%ebx,%esi
000023f2	movl	0xec(%ebp),%ebx
000023f5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
000023ff	movl	0x00000080(%edi),%eax
00002405	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
0000240c	jns	0x00002416
0000240e	movl	%eax,0x00000090(%edi)
00002414	jmp	0x00002469
00002416	testl	%eax,%eax
00002418	jne	0x00002430
0000241a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002424	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
0000242e	jmp	0x0000245f
00002430	movl	%eax,(%esp)
00002433	calll	_free
00002438	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00002442	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002449	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002453	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
0000245d	js	0x00002469
0000245f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002469	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
00002470	movl	0x5c(%edi),%eax
00002473	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00002477	jns	0x0000247e
00002479	movl	%eax,0x6c(%edi)
0000247c	jmp	0x000024bc
0000247e	testl	%eax,%eax
00002480	jne	0x00002492
00002482	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00002489	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00002490	jmp	0x000024b5
00002492	movl	%eax,(%esp)
00002495	calll	_free
0000249a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
000024a1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
000024a5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
000024ac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
000024b3	js	0x000024bc
000024b5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
000024bc	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x40(%edi)
000024c0	js	0x000024dd
000024c2	movl	(%esi),%eax
000024c4	testl	%eax,%eax
000024c6	je	0x000024d6
000024c8	movl	%eax,(%esp)
000024cb	calll	_free
000024d0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000024d6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x3c(%edi)
000024dd	movl	0xe8(%ebp),%eax
000024e0	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%edi)
000024e4	js	0x00002503
000024e6	movl	%eax,%esi
000024e8	movl	(%esi),%eax
000024ea	testl	%eax,%eax
000024ec	je	0x000024fc
000024ee	movl	%eax,(%esp)
000024f1	calll	_free
000024f6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000024fc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%edi)
00002503	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%edi)
00002507	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%esi
0000250a	js	0x00002527
0000250c	movl	(%ebx),%eax
0000250e	testl	%eax,%eax
00002510	je	0x00002520
00002512	movl	%eax,(%esp)
00002515	calll	_free
0000251a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002520	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%edi)
00002527	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%edi)
0000252b	js	0x00002548
0000252d	movl	(%esi),%eax
0000252f	testl	%eax,%eax
00002531	je	0x00002541
00002533	movl	%eax,(%esp)
00002536	calll	_free
0000253b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00002541	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%edi)
00002548	movl	0xf0(%ebp),%eax
0000254b	movl	%eax,(%esp)
0000254e	calll	__Unwind_Resume
00002553	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::Init(CChoreoScene*):
00002560	pushl	%ebp
00002561	movl	%esp,%ebp
00002563	pushl	%edi
00002564	pushl	%esi
00002565	subl	$0x10,%esp
00002568	calll	0x0000256d
0000256d	popl	%eax
0000256e	movl	CChoreoEvent::s_nGlobalID-0x256d(%eax),%ecx
00002574	leal	0x01(%ecx),%edx
00002577	movl	%edx,CChoreoEvent::s_nGlobalID-0x256d(%eax)
0000257d	movl	0x08(%ebp),%esi
00002580	movl	%ecx,0x00000138(%esi)
00002586	movl	$0x00000101,0x0000016c(%esi)
00002590	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esi)
00002594	leal	0x6f540-0x256d(%eax),%edi
0000259a	movl	%edi,0x04(%esp)
0000259e	leal	0x08(%esi),%eax
000025a1	movl	%eax,(%esp)
000025a4	calll	CUtlString::Set(char const*)
000025a9	movl	%edi,0x04(%esp)
000025ad	leal	0x18(%esi),%eax
000025b0	movl	%eax,(%esp)
000025b3	calll	CUtlString::Set(char const*)
000025b8	movl	%edi,0x04(%esp)
000025bc	leal	0x28(%esi),%eax
000025bf	movl	%eax,(%esp)
000025c2	calll	CUtlString::Set(char const*)
000025c7	movl	%edi,0x04(%esp)
000025cb	leal	0x38(%esi),%eax
000025ce	movl	%eax,(%esp)
000025d1	calll	CUtlString::Set(char const*)
000025d6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x48(%esi)
000025dd	movl	$0xbf800000,0x4c(%esi)
000025e4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000b4(%esi)
000025ee	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000b8(%esi)
000025f8	movl	0x0c(%ebp),%eax
000025fb	movl	%eax,0x00000128(%esi)
00002601	andb	$0xf8,0x00000178(%esi)
00002608	movl	%edi,0x04(%esp)
0000260c	leal	0x00000094(%esi),%eax
00002612	movl	%eax,(%esp)
00002615	calll	CUtlString::Set(char const*)
0000261a	movl	%edi,0x04(%esp)
0000261e	leal	0x000000a4(%esi),%eax
00002624	movl	%eax,(%esp)
00002627	calll	CUtlString::Set(char const*)
0000262c	movzwl	0x00000178(%esi),%eax
00002633	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000134(%esi)
0000263d	movb	%ah,%cl
0000263f	andb	$0xa7,%cl
00002642	movb	%cl,0x00000179(%esi)
00002648	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000120(%esi)
00002652	andb	$0xc7,%al
00002654	movb	%al,0x00000178(%esi)
0000265a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000124(%esi)
00002664	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x50(%esi)
0000266b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000130(%esi)
00002675	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000012c(%esi)
0000267f	movl	$0xffffffff,0x54(%esi)
00002686	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x58(%esi)
0000268d	movl	%edi,0x04(%esp)
00002691	leal	0x0000013c(%esi),%eax
00002697	movl	%eax,(%esp)
0000269a	calll	CUtlString::Set(char const*)
0000269f	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x05(%esi)
000026a3	movzwl	0x00000178(%esi),%eax
000026aa	movb	%al,%cl
000026ac	andb	$0x7f,%cl
000026af	movb	%cl,0x00000178(%esi)
000026b5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000014c(%esi)
000026bf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%esi)
000026c9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000154(%esi)
000026d3	andb	$0xd8,%ah
000026d6	orb	$0x20,%ah
000026d9	movb	%ah,0x00000179(%esi)
000026df	addl	$0x10,%esp
000026e2	popl	%esi
000026e3	popl	%edi
000026e4	popl	%ebp
000026e5	ret
000026e6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*):
000026f0	jmp	CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*)
000026f5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*):
00002700	pushl	%ebp
00002701	movl	%esp,%ebp
00002703	pushl	%ebx
00002704	pushl	%edi
00002705	pushl	%esi
00002706	subl	$0x2c,%esp
00002709	calll	0x0000270e
0000270e	popl	%eax
0000270f	leal	vtable for CChoreoEvent-0x270e+0x00000008(%eax),%eax
00002715	movl	0x08(%ebp),%edi
00002718	movl	%eax,(%edi)
0000271a	leal	0x08(%edi),%eax
0000271d	movl	%eax,0xe8(%ebp)
00002720	movl	%eax,(%esp)
00002723	calll	CUtlString::CUtlString()
00002728	leal	0x18(%edi),%esi
0000272b	movl	%esi,(%esp)
0000272e	calll	CUtlString::CUtlString()
00002733	movl	%esi,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00002736	leal	0x28(%edi),%ebx
00002739	movl	%ebx,(%esp)
0000273c	calll	CUtlString::CUtlString()
00002741	leal	0x38(%edi),%eax
00002744	movl	%eax,0xdc(%ebp)
00002747	movl	%eax,(%esp)
0000274a	calll	CUtlString::CUtlString()
0000274f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002759	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00002763	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
0000276d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002777	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00002781	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x7c(%edi)
00002787	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x74(%edi)
0000278e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x78(%edi)
00002795	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
0000279c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%edi)
000027a3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
000027aa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
000027b1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
000027b8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
000027bf	leal	0x00000094(%edi),%esi
000027c5	movl	%esi,(%esp)
000027c8	calll	CUtlString::CUtlString()
000027cd	movl	%esi,0xd8(%ebp)
000027d0	leal	0x000000a4(%edi),%eax
000027d6	movl	%eax,0xd4(%ebp)
000027d9	movl	%eax,(%esp)
000027dc	calll	CUtlString::CUtlString()
000027e1	movl	%ebx,0xec(%ebp)
000027e4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
000027ee	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000bc(%edi)
000027f8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c8(%edi)
00002802	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
0000280c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d0(%edi)
00002816	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000cc(%edi)
00002820	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
0000282a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
00002834	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%edi)
0000283e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000dc(%edi)
00002848	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e4(%edi)
00002852	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ec(%edi)
0000285c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e8(%edi)
00002866	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f4(%edi)
00002870	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f0(%edi)
0000287a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f8(%edi)
00002884	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000108(%edi)
0000288e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000104(%edi)
00002898	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000100(%edi)
000028a2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000fc(%edi)
000028ac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
000028b6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
000028c0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
000028ca	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
000028d4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000028de	leal	0x0000013c(%edi),%ebx
000028e4	leal	0x000000d0(%edi),%eax
000028ea	movl	%eax,0xd0(%ebp)
000028ed	leal	0x000000bc(%edi),%esi
000028f3	movl	%ebx,(%esp)
000028f6	calll	CUtlString::CUtlString()
000028fb	movl	0x0c(%ebp),%eax
000028fe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00002908	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
00002912	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
0000291c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00002926	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00002930	movl	%eax,0x04(%esp)
00002934	movl	%edi,(%esp)
00002937	calll	CChoreoEvent::Init(CChoreoScene*)
0000293c	movl	0x14(%ebp),%eax
0000293f	movl	0x10(%ebp),%ecx
00002942	movb	%cl,0x04(%edi)
00002945	movzbl	%cl,%ecx
00002948	cmpl	$0x05,%ecx
0000294b	je	0x00002952
0000294d	cmpl	$0x0b,%ecx
00002950	jne	0x0000295b
00002952	orb	$0x01,0x00000178(%edi)
00002959	jmp	0x00002962
0000295b	andb	$0xfe,0x00000178(%edi)
00002962	movl	%eax,0x04(%esp)
00002966	movl	0xe8(%ebp),%eax
00002969	movl	%eax,(%esp)
0000296c	calll	CUtlString::operator=(char const*)
00002971	addl	$0x2c,%esp
00002974	popl	%esi
00002975	popl	%edi
00002976	popl	%ebx
00002977	popl	%ebp
00002978	ret
00002979	movl	%eax,%esi
0000297b	jmp	0x00002cc2
00002980	movl	%eax,%esi
00002982	jmp	0x00002c9e
00002987	movl	%eax,0xf0(%ebp)
0000298a	jmp	0x00002c7a
0000298f	movl	%eax,0xf0(%ebp)
00002992	jmp	0x00002b87
00002997	movl	%eax,0xf0(%ebp)
0000299a	jmp	0x00002b5d
0000299f	movl	%eax,0xf0(%ebp)
000029a2	jmp	0x00002a45
000029a7	movl	%eax,0xf0(%ebp)
000029aa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
000029b4	movl	0x00000158(%edi),%eax
000029ba	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
000029c1	jns	0x000029cb
000029c3	movl	%eax,0x00000168(%edi)
000029c9	jmp	0x00002a1e
000029cb	testl	%eax,%eax
000029cd	jne	0x000029e5
000029cf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
000029d9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
000029e3	jmp	0x00002a14
000029e5	movl	%eax,(%esp)
000029e8	calll	_free
000029ed	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
000029f7	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
000029fe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00002a08	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00002a12	js	0x00002a1e
00002a14	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00002a1e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000144(%edi)
00002a25	js	0x00002a45
00002a27	movl	(%ebx),%eax
00002a29	testl	%eax,%eax
00002a2b	je	0x00002a3b
00002a2d	movl	%eax,(%esp)
00002a30	calll	_free
00002a35	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002a3b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000140(%edi)
00002a45	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
00002a4f	movl	0x0000010c(%edi),%eax
00002a55	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00002a5c	movl	0xd0(%ebp),%ecx
00002a5f	jns	0x00002a6c
00002a61	movl	%esi,0xe4(%ebp)
00002a64	movl	%eax,0x0000011c(%edi)
00002a6a	jmp	0x00002ac6
00002a6c	movl	%esi,0xe4(%ebp)
00002a6f	testl	%eax,%eax
00002a71	jne	0x00002a89
00002a73	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00002a7d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00002a87	jmp	0x00002abc
00002a89	movl	%eax,(%esp)
00002a8c	movl	%ecx,%esi
00002a8e	calll	_free
00002a93	movl	%esi,%ecx
00002a95	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
00002a9f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00002aa6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00002ab0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00002aba	js	0x00002ac6
00002abc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00002ac6	movl	%ecx,(%esp)
00002ac9	movl	%ecx,%ebx
00002acb	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00002ad0	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
00002ad7	js	0x00002af7
00002ad9	movl	(%ebx),%eax
00002adb	testl	%eax,%eax
00002add	je	0x00002aed
00002adf	movl	%eax,(%esp)
00002ae2	calll	_free
00002ae7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002aed	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
00002af7	movl	0xe4(%ebp),%ebx
00002afa	movl	%ebx,(%esp)
00002afd	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00002b02	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
00002b09	js	0x00002b29
00002b0b	movl	(%ebx),%eax
00002b0d	testl	%eax,%eax
00002b0f	je	0x00002b1f
00002b11	movl	%eax,(%esp)
00002b14	calll	_free
00002b19	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002b1f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
00002b29	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ac(%edi)
00002b30	movl	0xd4(%ebp),%eax
00002b33	jns	0x00002b3a
00002b35	movl	0xec(%ebp),%ebx
00002b38	jmp	0x00002b5d
00002b3a	movl	%eax,%esi
00002b3c	movl	(%esi),%eax
00002b3e	testl	%eax,%eax
00002b40	movl	0xec(%ebp),%ebx
00002b43	je	0x00002b53
00002b45	movl	%eax,(%esp)
00002b48	calll	_free
00002b4d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00002b53	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a8(%edi)
00002b5d	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000009c(%edi)
00002b64	js	0x00002b87
00002b66	movl	0xd8(%ebp),%esi
00002b69	movl	(%esi),%eax
00002b6b	testl	%eax,%eax
00002b6d	je	0x00002b7d
00002b6f	movl	%eax,(%esp)
00002b72	calll	_free
00002b77	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00002b7d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000098(%edi)
00002b87	movl	%ebx,0xec(%ebp)
00002b8a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
00002b94	movl	0x00000080(%edi),%eax
00002b9a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002ba1	jns	0x00002bab
00002ba3	movl	%eax,0x00000090(%edi)
00002ba9	jmp	0x00002bfe
00002bab	testl	%eax,%eax
00002bad	jne	0x00002bc5
00002baf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002bb9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00002bc3	jmp	0x00002bf4
00002bc5	movl	%eax,(%esp)
00002bc8	calll	_free
00002bcd	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00002bd7	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002bde	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002be8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00002bf2	js	0x00002bfe
00002bf4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002bfe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
00002c05	movl	0x5c(%edi),%eax
00002c08	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00002c0c	jns	0x00002c13
00002c0e	movl	%eax,0x6c(%edi)
00002c11	jmp	0x00002c51
00002c13	testl	%eax,%eax
00002c15	jne	0x00002c27
00002c17	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00002c1e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00002c25	jmp	0x00002c4a
00002c27	movl	%eax,(%esp)
00002c2a	calll	_free
00002c2f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
00002c36	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00002c3a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00002c41	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00002c48	js	0x00002c51
00002c4a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00002c51	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x40(%edi)
00002c55	movl	0xdc(%ebp),%eax
00002c58	js	0x00002c77
00002c5a	movl	%eax,%ebx
00002c5c	movl	(%ebx),%eax
00002c5e	testl	%eax,%eax
00002c60	je	0x00002c70
00002c62	movl	%eax,(%esp)
00002c65	calll	_free
00002c6a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002c70	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x3c(%edi)
00002c77	movl	0xec(%ebp),%ebx
00002c7a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%edi)
00002c7e	js	0x00002c9b
00002c80	movl	(%ebx),%eax
00002c82	testl	%eax,%eax
00002c84	je	0x00002c94
00002c86	movl	%eax,(%esp)
00002c89	calll	_free
00002c8e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002c94	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%edi)
00002c9b	movl	0xf0(%ebp),%esi
00002c9e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%edi)
00002ca2	js	0x00002cc2
00002ca4	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%ebx
00002ca7	movl	(%ebx),%eax
00002ca9	testl	%eax,%eax
00002cab	je	0x00002cbb
00002cad	movl	%eax,(%esp)
00002cb0	calll	_free
00002cb5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002cbb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%edi)
00002cc2	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%edi)
00002cc6	js	0x00002ce6
00002cc8	movl	0xe8(%ebp),%ebx
00002ccb	movl	(%ebx),%eax
00002ccd	testl	%eax,%eax
00002ccf	je	0x00002cdf
00002cd1	movl	%eax,(%esp)
00002cd4	calll	_free
00002cd9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00002cdf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%edi)
00002ce6	movl	%esi,(%esp)
00002ce9	calll	__Unwind_Resume
00002cee	nop
CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE):
00002cf0	movl	0x08(%esp),%ecx
00002cf4	movl	0x04(%esp),%eax
00002cf8	movb	%cl,0x04(%eax)
00002cfb	movzbl	%cl,%ecx
00002cfe	cmpl	$0x05,%ecx
00002d01	je	0x00002d08
00002d03	cmpl	$0x0b,%ecx
00002d06	jne	0x00002d10
00002d08	orb	$0x01,0x00000178(%eax)
00002d0f	ret
00002d10	andb	$0xfe,0x00000178(%eax)
00002d17	ret
00002d18	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetName(char const*):
00002d20	pushl	%ebp
00002d21	movl	%esp,%ebp
00002d23	subl	$0x08,%esp
00002d26	movl	0x0c(%ebp),%eax
00002d29	movl	%eax,0x04(%esp)
00002d2d	movl	0x08(%ebp),%eax
00002d30	addl	$0x08,%eax
00002d33	movl	%eax,(%esp)
00002d36	calll	CUtlString::operator=(char const*)
00002d3b	addl	$0x08,%esp
00002d3e	popl	%ebp
00002d3f	ret
CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*, char const*):
00002d40	jmp	CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*, char const*)
00002d45	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CChoreoEvent(CChoreoScene*, CChoreoEvent::EVENTTYPE, char const*, char const*):
00002d50	pushl	%ebp
00002d51	movl	%esp,%ebp
00002d53	pushl	%ebx
00002d54	pushl	%edi
00002d55	pushl	%esi
00002d56	subl	$0x2c,%esp
00002d59	calll	0x00002d5e
00002d5e	popl	%eax
00002d5f	leal	vtable for CChoreoEvent-0x2d5e+0x00000008(%eax),%eax
00002d65	movl	0x08(%ebp),%edi
00002d68	movl	%eax,(%edi)
00002d6a	leal	0x08(%edi),%eax
00002d6d	movl	%eax,0xec(%ebp)
00002d70	movl	%eax,(%esp)
00002d73	calll	CUtlString::CUtlString()
00002d78	leal	0x18(%edi),%esi
00002d7b	movl	%esi,(%esp)
00002d7e	calll	CUtlString::CUtlString()
00002d83	movl	%esi,0xe8(%ebp)
00002d86	leal	0x28(%edi),%esi
00002d89	movl	%esi,(%esp)
00002d8c	calll	CUtlString::CUtlString()
00002d91	leal	0x38(%edi),%eax
00002d94	movl	%eax,0xdc(%ebp)
00002d97	movl	%eax,(%esp)
00002d9a	calll	CUtlString::CUtlString()
00002d9f	movl	%esi,0xe4(%ebp)
00002da2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00002dac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00002db6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
00002dc0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00002dca	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00002dd4	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x7c(%edi)
00002dda	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x74(%edi)
00002de1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x78(%edi)
00002de8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00002def	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%edi)
00002df6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00002dfd	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
00002e04	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
00002e0b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00002e12	leal	0x00000094(%edi),%ebx
00002e18	movl	%ebx,(%esp)
00002e1b	calll	CUtlString::CUtlString()
00002e20	leal	0x000000a4(%edi),%eax
00002e26	movl	%eax,0xd8(%ebp)
00002e29	movl	%eax,(%esp)
00002e2c	calll	CUtlString::CUtlString()
00002e31	movl	%ebx,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00002e34	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
00002e3e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000bc(%edi)
00002e48	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c8(%edi)
00002e52	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
00002e5c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d0(%edi)
00002e66	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000cc(%edi)
00002e70	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
00002e7a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
00002e84	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%edi)
00002e8e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000dc(%edi)
00002e98	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e4(%edi)
00002ea2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ec(%edi)
00002eac	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e8(%edi)
00002eb6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f4(%edi)
00002ec0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f0(%edi)
00002eca	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000f8(%edi)
00002ed4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000108(%edi)
00002ede	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000104(%edi)
00002ee8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000100(%edi)
00002ef2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000fc(%edi)
00002efc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00002f06	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00002f10	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
00002f1a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
00002f24	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00002f2e	leal	0x0000013c(%edi),%ebx
00002f34	leal	0x000000d0(%edi),%eax
00002f3a	movl	%eax,0xd4(%ebp)
00002f3d	leal	0x000000bc(%edi),%esi
00002f43	movl	%ebx,(%esp)
00002f46	calll	CUtlString::CUtlString()
00002f4b	movl	0x0c(%ebp),%eax
00002f4e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00002f58	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
00002f62	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
00002f6c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00002f76	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00002f80	movl	%eax,0x04(%esp)
00002f84	movl	%edi,(%esp)
00002f87	calll	CChoreoEvent::Init(CChoreoScene*)
00002f8c	movl	0x14(%ebp),%eax
00002f8f	movl	0x10(%ebp),%ecx
00002f92	movb	%cl,0x04(%edi)
00002f95	movzbl	%cl,%ecx
00002f98	cmpl	$0x05,%ecx
00002f9b	je	0x00002fa2
00002f9d	cmpl	$0x0b,%ecx
00002fa0	jne	0x00002fab
00002fa2	orb	$0x01,0x00000178(%edi)
00002fa9	jmp	0x00002fb2
00002fab	andb	$0xfe,0x00000178(%edi)
00002fb2	movl	%eax,0x04(%esp)
00002fb6	movl	0xec(%ebp),%eax
00002fb9	movl	%eax,(%esp)
00002fbc	calll	CUtlString::operator=(char const*)
00002fc1	movl	0x18(%ebp),%eax
00002fc4	movl	%eax,0x04(%esp)
00002fc8	movl	0xe8(%ebp),%eax
00002fcb	movl	%eax,(%esp)
00002fce	calll	CUtlString::operator=(char const*)
00002fd3	addl	$0x2c,%esp
00002fd6	popl	%esi
00002fd7	popl	%edi
00002fd8	popl	%ebx
00002fd9	popl	%ebp
00002fda	ret
00002fdb	movl	%eax,0xf0(%ebp)
00002fde	jmp	0x0000330e
00002fe3	movl	%eax,0xf0(%ebp)
00002fe6	jmp	0x000032ea
00002feb	movl	%eax,0xf0(%ebp)
00002fee	jmp	0x000032c9
00002ff3	movl	%eax,0xf0(%ebp)
00002ff6	jmp	0x000031d9
00002ffb	movl	%eax,0xf0(%ebp)
00002ffe	jmp	0x000031b2
00003003	movl	%eax,0xf0(%ebp)
00003006	jmp	0x000030a9
0000300b	movl	%eax,0xf0(%ebp)
0000300e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
00003018	movl	0x00000158(%edi),%eax
0000301e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00003025	jns	0x0000302f
00003027	movl	%eax,0x00000168(%edi)
0000302d	jmp	0x00003082
0000302f	testl	%eax,%eax
00003031	jne	0x00003049
00003033	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000303d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00003047	jmp	0x00003078
00003049	movl	%eax,(%esp)
0000304c	calll	_free
00003051	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
0000305b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00003062	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000306c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00003076	js	0x00003082
00003078	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00003082	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000144(%edi)
00003089	js	0x000030a9
0000308b	movl	(%ebx),%eax
0000308d	testl	%eax,%eax
0000308f	je	0x0000309f
00003091	movl	%eax,(%esp)
00003094	calll	_free
00003099	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
0000309f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000140(%edi)
000030a9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
000030b3	movl	0x0000010c(%edi),%eax
000030b9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
000030c0	movl	0xd4(%ebp),%ebx
000030c3	jns	0x000030cd
000030c5	movl	%eax,0x0000011c(%edi)
000030cb	jmp	0x00003120
000030cd	testl	%eax,%eax
000030cf	jne	0x000030e7
000030d1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000030db	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
000030e5	jmp	0x00003116
000030e7	movl	%eax,(%esp)
000030ea	calll	_free
000030ef	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
000030f9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00003100	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
0000310a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00003114	js	0x00003120
00003116	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00003120	movl	%ebx,(%esp)
00003123	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00003128	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
0000312f	js	0x0000314f
00003131	movl	(%ebx),%eax
00003133	testl	%eax,%eax
00003135	je	0x00003145
00003137	movl	%eax,(%esp)
0000313a	calll	_free
0000313f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00003145	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
0000314f	movl	%esi,(%esp)
00003152	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00003157	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
0000315e	js	0x0000317e
00003160	movl	(%esi),%eax
00003162	testl	%eax,%eax
00003164	je	0x00003174
00003166	movl	%eax,(%esp)
00003169	calll	_free
0000316e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00003174	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
0000317e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ac(%edi)
00003185	movl	0xd8(%ebp),%eax
00003188	jns	0x0000318f
0000318a	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%ebx
0000318d	jmp	0x000031b2
0000318f	movl	%eax,%esi
00003191	movl	(%esi),%eax
00003193	testl	%eax,%eax
00003195	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%ebx
00003198	je	0x000031a8
0000319a	movl	%eax,(%esp)
0000319d	calll	_free
000031a2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000031a8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a8(%edi)
000031b2	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000009c(%edi)
000031b9	js	0x000031d9
000031bb	movl	(%ebx),%eax
000031bd	testl	%eax,%eax
000031bf	je	0x000031cf
000031c1	movl	%eax,(%esp)
000031c4	calll	_free
000031c9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
000031cf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000098(%edi)
000031d9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
000031e3	movl	0x00000080(%edi),%eax
000031e9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
000031f0	jns	0x000031fa
000031f2	movl	%eax,0x00000090(%edi)
000031f8	jmp	0x0000324d
000031fa	testl	%eax,%eax
000031fc	jne	0x00003214
000031fe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003208	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00003212	jmp	0x00003243
00003214	movl	%eax,(%esp)
00003217	calll	_free
0000321c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00003226	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
0000322d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003237	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00003241	js	0x0000324d
00003243	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
0000324d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
00003254	movl	0x5c(%edi),%eax
00003257	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
0000325b	jns	0x00003262
0000325d	movl	%eax,0x6c(%edi)
00003260	jmp	0x000032a0
00003262	testl	%eax,%eax
00003264	jne	0x00003276
00003266	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
0000326d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00003274	jmp	0x00003299
00003276	movl	%eax,(%esp)
00003279	calll	_free
0000327e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
00003285	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00003289	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00003290	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00003297	js	0x000032a0
00003299	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
000032a0	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x40(%edi)
000032a4	movl	0xdc(%ebp),%eax
000032a7	js	0x000032c6
000032a9	movl	%eax,%ebx
000032ab	movl	(%ebx),%eax
000032ad	testl	%eax,%eax
000032af	je	0x000032bf
000032b1	movl	%eax,(%esp)
000032b4	calll	_free
000032b9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
000032bf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x3c(%edi)
000032c6	movl	0xe4(%ebp),%esi
000032c9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%edi)
000032cd	js	0x000032ea
000032cf	movl	(%esi),%eax
000032d1	testl	%eax,%eax
000032d3	je	0x000032e3
000032d5	movl	%eax,(%esp)
000032d8	calll	_free
000032dd	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000032e3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%edi)
000032ea	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%edi)
000032ee	js	0x0000330e
000032f0	movl	0xe8(%ebp),%ebx
000032f3	movl	(%ebx),%eax
000032f5	testl	%eax,%eax
000032f7	je	0x00003307
000032f9	movl	%eax,(%esp)
000032fc	calll	_free
00003301	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00003307	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%edi)
0000330e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%edi)
00003312	js	0x00003332
00003314	movl	0xec(%ebp),%ebx
00003317	movl	(%ebx),%eax
00003319	testl	%eax,%eax
0000331b	je	0x0000332b
0000331d	movl	%eax,(%esp)
00003320	calll	_free
00003325	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
0000332b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%edi)
00003332	movl	0xf0(%ebp),%eax
00003335	movl	%eax,(%esp)
00003338	calll	__Unwind_Resume
0000333d	nopl	(%eax)
CChoreoEvent::SetParameters(char const*):
00003340	pushl	%ebp
00003341	movl	%esp,%ebp
00003343	subl	$0x08,%esp
00003346	movl	0x0c(%ebp),%eax
00003349	movl	%eax,0x04(%esp)
0000334d	movl	0x08(%ebp),%eax
00003350	addl	$0x18,%eax
00003353	movl	%eax,(%esp)
00003356	calll	CUtlString::operator=(char const*)
0000335b	addl	$0x08,%esp
0000335e	popl	%ebp
0000335f	ret
CChoreoEvent::~CChoreoEvent():
00003360	jmp	CChoreoEvent::~CChoreoEvent()
00003365	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::~CChoreoEvent():
00003370	pushl	%ebp
00003371	movl	%esp,%ebp
00003373	pushl	%ebx
00003374	pushl	%edi
00003375	pushl	%esi
00003376	subl	$0x0c,%esp
00003379	calll	0x0000337e
0000337e	popl	%eax
0000337f	leal	vtable for CChoreoEvent-0x337e+0x00000008(%eax),%eax
00003385	movl	0x08(%ebp),%edi
00003388	movl	%eax,(%edi)
0000338a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00003390	movl	0x00000118(%edi),%eax
00003396	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000033a0	testl	%eax,%eax
000033a2	jle	0x000033e6
000033a4	movl	0x0000010c(%edi),%ecx
000033aa	movl	(%ecx),%esi
000033ac	testl	%esi,%esi
000033ae	je	0x000033a0
000033b0	leal	0xff(%eax),%edx
000033b3	testl	%edx,%edx
000033b5	jle	0x000033d3
000033b7	movl	%ecx,(%esp)
000033ba	shll	$0x02,%edx
000033bd	movl	%edx,0x08(%esp)
000033c1	addl	$0x04,%ecx
000033c4	movl	%ecx,0x04(%esp)
000033c8	calll	_memmove
000033cd	movl	0x00000118(%edi),%eax
000033d3	decl	%eax
000033d4	movl	%eax,0x00000118(%edi)
000033da	movl	(%esi),%eax
000033dc	movl	0x04(%eax),%eax
000033df	movl	%esi,(%esp)
000033e2	call	*%eax
000033e4	jmp	0x00003390
000033e6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
000033f0	movl	0x00000120(%edi),%ebx
000033f6	testl	%ebx,%ebx
000033f8	je	0x0000340a
000033fa	movl	%ebx,(%esp)
000033fd	calll	CChoreoScene::~CChoreoScene()
00003402	movl	%ebx,(%esp)
00003405	calll	operator delete(void*)
0000340a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
00003414	movl	0x00000158(%edi),%eax
0000341a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00003421	jns	0x0000342b
00003423	movl	%eax,0x00000168(%edi)
00003429	jmp	0x0000347e
0000342b	testl	%eax,%eax
0000342d	jne	0x00003445
0000342f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00003439	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00003443	jmp	0x00003474
00003445	movl	%eax,(%esp)
00003448	calll	_free
0000344d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
00003457	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
0000345e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00003468	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00003472	js	0x0000347e
00003474	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000347e	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000144(%edi)
00003485	js	0x000034ad
00003487	movl	0x0000013c(%edi),%eax
0000348d	testl	%eax,%eax
0000348f	je	0x000034a3
00003491	movl	%eax,(%esp)
00003494	calll	_free
00003499	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000013c(%edi)
000034a3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000140(%edi)
000034ad	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
000034b7	movl	0x0000010c(%edi),%eax
000034bd	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
000034c4	jns	0x000034ce
000034c6	movl	%eax,0x0000011c(%edi)
000034cc	jmp	0x00003521
000034ce	testl	%eax,%eax
000034d0	jne	0x000034e8
000034d2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000034dc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
000034e6	jmp	0x00003517
000034e8	movl	%eax,(%esp)
000034eb	calll	_free
000034f0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
000034fa	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00003501	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
0000350b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00003515	js	0x00003521
00003517	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
00003521	leal	0x000000f8(%edi),%esi
00003527	movl	%esi,(%esp)
0000352a	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
0000352f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000100(%edi)
00003536	js	0x00003556
00003538	movl	(%esi),%eax
0000353a	testl	%eax,%eax
0000353c	je	0x0000354c
0000353e	movl	%eax,(%esp)
00003541	calll	_free
00003546	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
0000354c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000fc(%edi)
00003556	leal	0x000000e4(%edi),%esi
0000355c	movl	%esi,(%esp)
0000355f	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
00003564	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ec(%edi)
0000356b	js	0x0000358b
0000356d	movl	(%esi),%eax
0000356f	testl	%eax,%eax
00003571	je	0x00003581
00003573	movl	%eax,(%esp)
00003576	calll	_free
0000357b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00003581	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e8(%edi)
0000358b	leal	0x000000d0(%edi),%esi
00003591	movl	%esi,(%esp)
00003594	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00003599	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
000035a0	js	0x000035c0
000035a2	movl	(%esi),%eax
000035a4	testl	%eax,%eax
000035a6	je	0x000035b6
000035a8	movl	%eax,(%esp)
000035ab	calll	_free
000035b0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000035b6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
000035c0	leal	0x000000bc(%edi),%esi
000035c6	movl	%esi,(%esp)
000035c9	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
000035ce	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
000035d5	js	0x000035f5
000035d7	movl	(%esi),%eax
000035d9	testl	%eax,%eax
000035db	je	0x000035eb
000035dd	movl	%eax,(%esp)
000035e0	calll	_free
000035e5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000035eb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
000035f5	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ac(%edi)
000035fc	js	0x00003624
000035fe	movl	0x000000a4(%edi),%eax
00003604	testl	%eax,%eax
00003606	je	0x0000361a
00003608	movl	%eax,(%esp)
0000360b	calll	_free
00003610	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a4(%edi)
0000361a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a8(%edi)
00003624	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000009c(%edi)
0000362b	js	0x00003653
0000362d	movl	0x00000094(%edi),%eax
00003633	testl	%eax,%eax
00003635	je	0x00003649
00003637	movl	%eax,(%esp)
0000363a	calll	_free
0000363f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000094(%edi)
00003649	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000098(%edi)
00003653	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
0000365d	movl	0x00000080(%edi),%eax
00003663	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
0000366a	jns	0x00003674
0000366c	movl	%eax,0x00000090(%edi)
00003672	jmp	0x000036c7
00003674	testl	%eax,%eax
00003676	jne	0x0000368e
00003678	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003682	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
0000368c	jmp	0x000036bd
0000368e	movl	%eax,(%esp)
00003691	calll	_free
00003696	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
000036a0	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
000036a7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
000036b1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
000036bb	js	0x000036c7
000036bd	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
000036c7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
000036ce	movl	0x5c(%edi),%eax
000036d1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
000036d5	jns	0x000036dc
000036d7	movl	%eax,0x6c(%edi)
000036da	jmp	0x0000371a
000036dc	testl	%eax,%eax
000036de	jne	0x000036f0
000036e0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
000036e7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
000036ee	jmp	0x00003713
000036f0	movl	%eax,(%esp)
000036f3	calll	_free
000036f8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
000036ff	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00003703	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
0000370a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00003711	js	0x0000371a
00003713	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
0000371a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x40(%edi)
0000371e	js	0x0000373d
00003720	movl	0x38(%edi),%eax
00003723	testl	%eax,%eax
00003725	je	0x00003736
00003727	movl	%eax,(%esp)
0000372a	calll	_free
0000372f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x38(%edi)
00003736	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x3c(%edi)
0000373d	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%edi)
00003741	js	0x00003760
00003743	movl	0x28(%edi),%eax
00003746	testl	%eax,%eax
00003748	je	0x00003759
0000374a	movl	%eax,(%esp)
0000374d	calll	_free
00003752	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%edi)
00003759	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%edi)
00003760	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%edi)
00003764	js	0x00003783
00003766	movl	0x18(%edi),%eax
00003769	testl	%eax,%eax
0000376b	je	0x0000377c
0000376d	movl	%eax,(%esp)
00003770	calll	_free
00003775	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%edi)
0000377c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%edi)
00003783	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%edi)
00003787	js	0x000037a6
00003789	movl	0x08(%edi),%eax
0000378c	testl	%eax,%eax
0000378e	je	0x0000379f
00003790	movl	%eax,(%esp)
00003793	calll	_free
00003798	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
0000379f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%edi)
000037a6	addl	$0x0c,%esp
000037a9	popl	%esi
000037aa	popl	%edi
000037ab	popl	%ebx
000037ac	popl	%ebp
000037ad	ret
000037ae	movl	%eax,%esi
000037b0	jmp	0x000037bc
000037b2	movl	%eax,%esi
000037b4	movl	%ebx,(%esp)
000037b7	calll	operator delete(void*)
000037bc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%edi)
000037c6	movl	0x00000158(%edi),%eax
000037cc	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
000037d3	jns	0x000037dd
000037d5	movl	%eax,0x00000168(%edi)
000037db	jmp	0x00003830
000037dd	testl	%eax,%eax
000037df	jne	0x000037f7
000037e1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
000037eb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
000037f5	jmp	0x00003826
000037f7	movl	%eax,(%esp)
000037fa	calll	_free
000037ff	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000158(%edi)
00003809	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000160(%edi)
00003810	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
0000381a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000168(%edi)
00003824	js	0x00003830
00003826	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000015c(%edi)
00003830	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000144(%edi)
00003837	js	0x0000385f
00003839	movl	0x0000013c(%edi),%eax
0000383f	testl	%eax,%eax
00003841	je	0x00003855
00003843	movl	%eax,(%esp)
00003846	calll	_free
0000384b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000013c(%edi)
00003855	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000140(%edi)
0000385f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000118(%edi)
00003869	movl	0x0000010c(%edi),%eax
0000386f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
00003876	jns	0x00003880
00003878	movl	%eax,0x0000011c(%edi)
0000387e	jmp	0x000038d3
00003880	testl	%eax,%eax
00003882	jne	0x0000389a
00003884	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
0000388e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
00003898	jmp	0x000038c9
0000389a	movl	%eax,(%esp)
0000389d	calll	_free
000038a2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000010c(%edi)
000038ac	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000114(%edi)
000038b3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000038bd	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000011c(%edi)
000038c7	js	0x000038d3
000038c9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000110(%edi)
000038d3	leal	0x000000f8(%edi),%ebx
000038d9	movl	%ebx,(%esp)
000038dc	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
000038e1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000100(%edi)
000038e8	js	0x00003908
000038ea	movl	(%ebx),%eax
000038ec	testl	%eax,%eax
000038ee	je	0x000038fe
000038f0	movl	%eax,(%esp)
000038f3	calll	_free
000038f8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
000038fe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000fc(%edi)
00003908	leal	0x000000e4(%edi),%ebx
0000390e	movl	%ebx,(%esp)
00003911	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
00003916	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ec(%edi)
0000391d	js	0x0000393d
0000391f	movl	(%ebx),%eax
00003921	testl	%eax,%eax
00003923	je	0x00003933
00003925	movl	%eax,(%esp)
00003928	calll	_free
0000392d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00003933	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000e8(%edi)
0000393d	leal	0x000000d0(%edi),%ebx
00003943	movl	%ebx,(%esp)
00003946	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
0000394b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d8(%edi)
00003952	js	0x00003972
00003954	movl	(%ebx),%eax
00003956	testl	%eax,%eax
00003958	je	0x00003968
0000395a	movl	%eax,(%esp)
0000395d	calll	_free
00003962	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
00003968	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000d4(%edi)
00003972	leal	0x000000bc(%edi),%ebx
00003978	movl	%ebx,(%esp)
0000397b	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00003980	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c4(%edi)
00003987	js	0x000039a7
00003989	movl	(%ebx),%eax
0000398b	testl	%eax,%eax
0000398d	je	0x0000399d
0000398f	movl	%eax,(%esp)
00003992	calll	_free
00003997	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ebx)
0000399d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000c0(%edi)
000039a7	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000ac(%edi)
000039ae	js	0x000039d6
000039b0	movl	0x000000a4(%edi),%eax
000039b6	testl	%eax,%eax
000039b8	je	0x000039cc
000039ba	movl	%eax,(%esp)
000039bd	calll	_free
000039c2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a4(%edi)
000039cc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000a8(%edi)
000039d6	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000009c(%edi)
000039dd	js	0x00003a05
000039df	movl	0x00000094(%edi),%eax
000039e5	testl	%eax,%eax
000039e7	je	0x000039fb
000039e9	movl	%eax,(%esp)
000039ec	calll	_free
000039f1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000094(%edi)
000039fb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000098(%edi)
00003a05	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0000008c(%edi)
00003a0f	movl	0x00000080(%edi),%eax
00003a15	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00003a1c	jns	0x00003a26
00003a1e	movl	%eax,0x00000090(%edi)
00003a24	jmp	0x00003a79
00003a26	testl	%eax,%eax
00003a28	jne	0x00003a40
00003a2a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003a34	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00003a3e	jmp	0x00003a6f
00003a40	movl	%eax,(%esp)
00003a43	calll	_free
00003a48	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000080(%edi)
00003a52	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000088(%edi)
00003a59	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003a63	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000090(%edi)
00003a6d	js	0x00003a79
00003a6f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000084(%edi)
00003a79	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x68(%edi)
00003a80	movl	0x5c(%edi),%eax
00003a83	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00003a87	jns	0x00003a8e
00003a89	movl	%eax,0x6c(%edi)
00003a8c	jmp	0x00003acc
00003a8e	testl	%eax,%eax
00003a90	jne	0x00003aa2
00003a92	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00003a99	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00003aa0	jmp	0x00003ac5
00003aa2	movl	%eax,(%esp)
00003aa5	calll	_free
00003aaa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%edi)
00003ab1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x64(%edi)
00003ab5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00003abc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x6c(%edi)
00003ac3	js	0x00003acc
00003ac5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x60(%edi)
00003acc	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x40(%edi)
00003ad0	js	0x00003aef
00003ad2	movl	0x38(%edi),%eax
00003ad5	testl	%eax,%eax
00003ad7	je	0x00003ae8
00003ad9	movl	%eax,(%esp)
00003adc	calll	_free
00003ae1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x38(%edi)
00003ae8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x3c(%edi)
00003aef	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%edi)
00003af3	js	0x00003b12
00003af5	movl	0x28(%edi),%eax
00003af8	testl	%eax,%eax
00003afa	je	0x00003b0b
00003afc	movl	%eax,(%esp)
00003aff	calll	_free
00003b04	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%edi)
00003b0b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%edi)
00003b12	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%edi)
00003b16	js	0x00003b35
00003b18	movl	0x18(%edi),%eax
00003b1b	testl	%eax,%eax
00003b1d	je	0x00003b2e
00003b1f	movl	%eax,(%esp)
00003b22	calll	_free
00003b27	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%edi)
00003b2e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%edi)
00003b35	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%edi)
00003b39	js	0x00003b58
00003b3b	movl	0x08(%edi),%eax
00003b3e	testl	%eax,%eax
00003b40	je	0x00003b51
00003b42	movl	%eax,(%esp)
00003b45	calll	_free
00003b4a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%edi)
00003b51	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%edi)
00003b58	movl	%esi,(%esp)
00003b5b	calll	__Unwind_Resume
CChoreoEvent::RemoveAllTracks():
00003b60	pushl	%ebp
00003b61	movl	%esp,%ebp
00003b63	pushl	%edi
00003b64	pushl	%esi
00003b65	subl	$0x10,%esp
00003b68	movl	0x08(%ebp),%esi
00003b6b	jmp	0x00003bae
00003b6d	nopl	(%eax)
00003b70	movl	0x0000010c(%esi),%ecx
00003b76	movl	(%ecx),%edi
00003b78	testl	%edi,%edi
00003b7a	je	0x00003bc0
00003b7c	leal	0xff(%eax),%edx
00003b7f	testl	%edx,%edx
00003b81	jle	0x00003b9f
00003b83	movl	%ecx,(%esp)
00003b86	shll	$0x02,%edx
00003b89	movl	%edx,0x08(%esp)
00003b8d	addl	$0x04,%ecx
00003b90	movl	%ecx,0x04(%esp)
00003b94	calll	_memmove
00003b99	movl	0x00000118(%esi),%eax
00003b9f	decl	%eax
00003ba0	movl	%eax,0x00000118(%esi)
00003ba6	movl	(%edi),%eax
00003ba8	movl	%edi,(%esp)
00003bab	call	*0x04(%eax)
00003bae	movl	0x00000118(%esi),%eax
00003bb4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00003bc0	testl	%eax,%eax
00003bc2	jg	0x00003b70
00003bc4	addl	$0x10,%esp
00003bc7	popl	%esi
00003bc8	popl	%edi
00003bc9	popl	%ebp
00003bca	ret
00003bcb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ClearEventDependencies():
00003bd0	movl	0x04(%esp),%eax
00003bd4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000164(%eax)
00003bde	ret
00003bdf	nop
CChoreoEvent::operator=(CChoreoEvent const&):
00003be0	pushl	%ebp
00003be1	movl	%esp,%ebp
00003be3	pushl	%ebx
00003be4	pushl	%edi
00003be5	pushl	%esi
00003be6	subl	$0x0000008c,%esp
00003bec	movl	0x0c(%ebp),%edi
00003bef	movl	0x00000138(%edi),%eax
00003bf5	movl	0x08(%ebp),%esi
00003bf8	movl	%eax,0x00000138(%esi)
00003bfe	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000b4(%esi)
00003c08	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x000000b8(%esi)
00003c12	movl	0x0000016c(%edi),%eax
00003c18	movl	%eax,0x0000016c(%esi)
00003c1e	movb	0x04(%edi),%al
00003c21	movb	%al,0x04(%esi)
00003c24	leal	0x08(%edi),%eax
00003c27	movl	%eax,0x04(%esp)
00003c2b	leal	0x08(%esi),%eax
00003c2e	movl	%eax,(%esp)
00003c31	calll	CUtlString::operator=(CUtlString const&)
00003c36	leal	0x18(%edi),%eax
00003c39	movl	%eax,0x04(%esp)
00003c3d	leal	0x18(%esi),%eax
00003c40	movl	%eax,(%esp)
00003c43	calll	CUtlString::operator=(CUtlString const&)
00003c48	leal	0x28(%edi),%eax
00003c4b	movl	%eax,0x04(%esp)
00003c4f	leal	0x28(%esi),%eax
00003c52	movl	%eax,(%esp)
00003c55	calll	CUtlString::operator=(CUtlString const&)
00003c5a	leal	0x38(%edi),%eax
00003c5d	movl	%eax,0x04(%esp)
00003c61	leal	0x38(%esi),%eax
00003c64	movl	%eax,(%esp)
00003c67	calll	CUtlString::operator=(CUtlString const&)
00003c6c	movss	0x48(%edi),%xmm0
00003c71	movss	%xmm0,0x48(%esi)
00003c76	movss	0x4c(%edi),%xmm0
00003c7b	movss	%xmm0,0x4c(%esi)
00003c80	movb	0x00000178(%edi),%dl
00003c86	andb	$0x01,%dl
00003c89	movzwl	0x00000178(%esi),%ecx
00003c90	movb	%cl,%al
00003c92	andb	$0xfe,%al
00003c94	orb	%dl,%al
00003c96	movb	%al,0x00000178(%esi)
00003c9c	movss	0x50(%edi),%xmm0
00003ca1	movss	%xmm0,0x50(%esi)
00003ca6	andb	$0xfd,%al
00003ca8	movb	0x00000178(%edi),%dl
00003cae	andb	$0x02,%dl
00003cb1	orb	%al,%dl
00003cb3	movb	%dl,0x00000178(%esi)
00003cb9	andb	$0xdf,%dl
00003cbc	movb	0x00000178(%edi),%al
00003cc2	andb	$0x20,%al
00003cc4	orb	%dl,%al
00003cc6	movb	%al,0x00000178(%esi)
00003ccc	movss	0x00000134(%edi),%xmm0
00003cd4	movss	%xmm0,0x00000134(%esi)
00003cdc	andb	$0xf7,%ch
00003cdf	movb	0x00000179(%edi),%dl
00003ce5	andb	$0x08,%dl
00003ce8	orb	%ch,%dl
00003cea	movb	%dl,0x00000179(%esi)
00003cf0	andb	$0xef,%dl
00003cf3	movb	0x00000179(%edi),%cl
00003cf9	andb	$0x10,%cl
00003cfc	orb	%dl,%cl
00003cfe	movb	%cl,0x00000179(%esi)
00003d04	andb	$0xbf,%cl
00003d07	movb	0x00000179(%edi),%dl
00003d0d	andb	$0x40,%dl
00003d10	orb	%cl,%dl
00003d12	movb	%dl,0x00000179(%esi)
00003d18	andb	$0xfb,%al
00003d1a	movb	0x00000178(%edi),%cl
00003d20	andb	$0x04,%cl
00003d23	orb	%al,%cl
00003d25	movb	%cl,0x00000178(%esi)
00003d2b	leal	0x00000094(%edi),%eax
00003d31	movl	%eax,0x04(%esp)
00003d35	leal	0x00000094(%esi),%eax
00003d3b	movl	%eax,(%esp)
00003d3e	calll	CUtlString::operator=(CUtlString const&)
00003d43	leal	0x000000a4(%edi),%eax
00003d49	movl	%eax,0x04(%esp)
00003d4d	leal	0x000000a4(%esi),%eax
00003d53	movl	%eax,(%esp)
00003d56	calll	CUtlString::operator=(CUtlString const&)
00003d5b	leal	0x000000bc(%esi),%eax
00003d61	movl	%eax,0x8c(%ebp)
00003d64	movl	%eax,(%esp)
00003d67	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00003d6c	leal	0x000000d0(%esi),%eax
00003d72	movl	%eax,0x88(%ebp)
00003d75	movl	%eax,(%esp)
00003d78	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00003d7d	leal	0x000000e4(%esi),%eax
00003d83	movl	%eax,(%esp)
00003d86	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
00003d8b	leal	0x000000f8(%esi),%eax
00003d91	movl	%eax,(%esp)
00003d94	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
00003d99	xorl	%ecx,%ecx
00003d9b	movl	$0xffffffff,0x94(%ebp)
00003da2	jmp	0x00003dd1
00003da4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00003db0	movl	%ecx,%esi
00003db2	movl	0xd8(%ebp),%eax
00003db5	testl	%eax,%eax
00003db7	je	0x00003dc8
00003db9	movl	%eax,(%esp)
00003dbc	calll	_free
00003dc1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00003dc8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00003dcf	movl	%esi,%ecx
00003dd1	movl	0x94(%ebp),%edx
00003dd4	incl	%edx
00003dd5	movl	%edx,0x94(%ebp)
00003dd8	movl	0x0c(%ebp),%eax
00003ddb	cmpl	0x000000c8(%eax),%edx
00003de1	jl	0x00003fe2
00003de7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x94(%ebp)
00003dee	movl	$0xffffffff,0x90(%ebp)
00003df5	movl	%eax,%esi
00003df7	jmp	0x00003e1d
00003df9	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00003e00	movl	0xb8(%ebp),%eax
00003e03	testl	%eax,%eax
00003e05	je	0x00003e16
00003e07	movl	%eax,(%esp)
00003e0a	calll	_free
00003e0f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00003e16	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00003e1d	movl	0x90(%ebp),%eax
00003e20	incl	%eax
00003e21	movl	%eax,0x90(%ebp)
00003e24	cmpl	0x000000dc(%esi),%eax
00003e2a	jl	0x000040aa
00003e30	xorl	%eax,%eax
00003e32	movl	0x08(%ebp),%ebx
00003e35	jmp	0x00003e6c
00003e37	movl	%eax,(%esp)
00003e3a	calll	_free
00003e3f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
00003e46	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x9c(%ebp)
00003e4d	movl	%esi,(%esp)
00003e50	calll	__Unwind_Resume
00003e55	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00003e60	movl	0xffffff74(%ebp),%eax
00003e66	incl	%eax
00003e67	movl	0x0c(%ebp),%edi
00003e6a	movl	%edi,%esi
00003e6c	cmpl	$0x01,%eax
00003e6f	jg	0x00004176
00003e75	movl	%eax,0xffffff74(%ebp)
00003e7b	imull	$0x14,%eax,%eax
00003e7e	leal	0x000000f4(%ebx,%eax),%ecx
00003e85	movl	%ecx,0x84(%ebp)
00003e88	leal	0x000000e8(%ebx,%eax),%ecx
00003e8f	movl	%ecx,0x80(%ebp)
00003e92	leal	0x000000f0(%ebx,%eax),%ecx
00003e99	movl	%ecx,0x94(%ebp)
00003e9c	leal	0x000000e4(%ebx,%eax),%edi
00003ea3	leal	0x000000e4(%esi,%eax),%ecx
00003eaa	movl	%ecx,0xffffff7c(%ebp)
00003eb0	leal	0x000000f0(%esi,%eax),%eax
00003eb7	movl	%eax,0xffffff78(%ebp)
00003ebd	xorl	%esi,%esi
00003ebf	movl	$0xffffffff,0x90(%ebp)
00003ec6	jmp	0x00003eed
00003ec8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00003ed0	movl	0x98(%ebp),%eax
00003ed3	testl	%eax,%eax
00003ed5	je	0x00003ee6
00003ed7	movl	%eax,(%esp)
00003eda	calll	_free
00003edf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
00003ee6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x9c(%ebp)
00003eed	movl	0x90(%ebp),%ecx
00003ef0	incl	%ecx
00003ef1	movl	%ecx,0x90(%ebp)
00003ef4	movl	0xffffff78(%ebp),%eax
00003efa	cmpl	(%eax),%ecx
00003efc	jge	0x00003e60
00003f02	movl	0xffffff7c(%ebp),%eax
00003f08	movl	(%eax),%eax
00003f0a	addl	%esi,%eax
00003f0c	movl	%esi,0x8c(%ebp)
00003f0f	movl	%eax,0x04(%esp)
00003f13	leal	0x98(%ebp),%eax
00003f16	movl	%eax,(%esp)
00003f19	calll	CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
00003f1e	movl	%ebx,0xb0(%ebp)
00003f21	movl	0x80(%ebp),%eax
00003f24	movl	(%eax),%eax
00003f26	movl	0x94(%ebp),%edx
00003f29	movl	(%edx),%ebx
00003f2b	leal	0x01(%ebx),%esi
00003f2e	cmpl	%eax,%esi
00003f30	movl	%ebx,%ecx
00003f32	jle	0x00003f50
00003f34	movl	%esi,%ecx
00003f36	subl	%eax,%ecx
00003f38	movl	%ecx,0x04(%esp)
00003f3c	movl	%edi,(%esp)
00003f3f	movl	%esi,0x88(%ebp)
00003f42	movl	%edx,%esi
00003f44	calll	CUtlMemory<CEventAbsoluteTag, int>::Grow(int)
00003f49	movl	%esi,%edx
00003f4b	movl	0x88(%ebp),%esi
00003f4e	movl	(%edx),%ecx
00003f50	movl	%edx,0x94(%ebp)
00003f53	incl	%ecx
00003f54	movl	%ecx,(%edx)
00003f56	movl	(%edi),%eax
00003f58	movl	0x84(%ebp),%edx
00003f5b	movl	%eax,(%edx)
00003f5d	subl	%ebx,%ecx
00003f5f	decl	%ecx
00003f60	testl	%ecx,%ecx
00003f62	jle	0x00003f83
00003f64	imull	$0x1c,%ecx,%ecx
00003f67	movl	%ecx,0x08(%esp)
00003f6b	imull	$0x1c,%ebx,%ecx
00003f6e	addl	%eax,%ecx
00003f70	movl	%ecx,0x04(%esp)
00003f74	imull	$0x1c,%esi,%ecx
00003f77	addl	%eax,%ecx
00003f79	movl	%ecx,(%esp)
00003f7c	calll	_memmove
00003f81	movl	(%edi),%eax
00003f83	imull	$0x1c,%ebx,%ecx
00003f86	addl	%eax,%ecx
00003f88	movl	0x8c(%ebp),%esi
00003f8b	je	0x00003f9c
00003f8d	leal	0x98(%ebp),%eax
00003f90	movl	%eax,0x04(%esp)
00003f94	movl	%ecx,(%esp)
00003f97	calll	CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
00003f9c	addl	$0x1c,%esi
00003f9f	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xa0(%ebp)
00003fa3	movl	0x08(%ebp),%ebx
00003fa6	js	0x00003eed
00003fac	jmp	0x00003ed0
00003fb1	movl	%eax,%esi
00003fb3	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00003fb7	js	0x000043eb
00003fbd	movl	0xd8(%ebp),%eax
00003fc0	testl	%eax,%eax
00003fc2	je	0x00003fd3
00003fc4	movl	%eax,(%esp)
00003fc7	calll	_free
00003fcc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00003fd3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00003fda	movl	%esi,(%esp)
00003fdd	calll	__Unwind_Resume
00003fe2	movl	0x000000bc(%eax),%ebx
00003fe8	leal	0xd8(%ebp),%edi
00003feb	movl	%edi,(%esp)
00003fee	movl	%ecx,%esi
00003ff0	leal	(%ebx,%esi),%eax
00003ff3	movl	%eax,0x90(%ebp)
00003ff6	calll	CUtlString::CUtlString()
00003ffb	movl	0x90(%ebp),%eax
00003ffe	movl	%eax,0x04(%esp)
00004002	movl	%edi,(%esp)
00004005	calll	CUtlString::operator=(CUtlString const&)
0000400a	movss	0x10(%ebx,%esi),%xmm0
00004010	movss	%xmm0,0xe8(%ebp)
00004015	movl	0x08(%ebp),%eax
00004018	movl	%eax,0xec(%ebp)
0000401b	movl	0x000000c8(%eax),%eax
00004021	movl	%edi,0x08(%esp)
00004025	movl	%eax,0x04(%esp)
00004029	movl	0x8c(%ebp),%eax
0000402c	movl	%eax,(%esp)
0000402f	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::InsertBefore(int, CEventRelativeTag const&)
00004034	movl	%esi,%ecx
00004036	addl	$0x18,%ecx
00004039	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
0000403d	js	0x00003dd1
00004043	jmp	0x00003db0
00004048	movl	%eax,%esi
0000404a	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
0000404e	js	0x000043eb
00004054	movl	0xd8(%ebp),%eax
00004057	testl	%eax,%eax
00004059	je	0x0000406a
0000405b	movl	%eax,(%esp)
0000405e	calll	_free
00004063	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
0000406a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00004071	movl	%esi,(%esp)
00004074	calll	__Unwind_Resume
00004079	movl	%eax,%esi
0000407b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
0000407f	js	0x000043eb
00004085	movl	0xb8(%ebp),%eax
00004088	testl	%eax,%eax
0000408a	je	0x0000409b
0000408c	movl	%eax,(%esp)
0000408f	calll	_free
00004094	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
0000409b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
000040a2	movl	%esi,(%esp)
000040a5	calll	__Unwind_Resume
000040aa	movl	%esi,%edi
000040ac	movl	0x000000d0(%edi),%edi
000040b2	leal	0xb8(%ebp),%ebx
000040b5	movl	%ebx,(%esp)
000040b8	movl	0x94(%ebp),%esi
000040bb	leal	(%edi,%esi),%eax
000040be	movl	%eax,0x8c(%ebp)
000040c1	calll	CUtlString::CUtlString()
000040c6	movl	0x8c(%ebp),%eax
000040c9	movl	%eax,0x04(%esp)
000040cd	movl	%ebx,(%esp)
000040d0	calll	CUtlString::operator=(CUtlString const&)
000040d5	movss	0x10(%edi,%esi),%xmm0
000040db	movss	%xmm0,0xc8(%ebp)
000040e0	movl	0x14(%edi,%esi),%eax
000040e4	movl	%eax,0xcc(%ebp)
000040e7	movb	0x18(%edi,%esi),%al
000040eb	andb	$0x01,%al
000040ed	movb	%al,0xd0(%ebp)
000040f0	movl	0x08(%ebp),%eax
000040f3	movl	%eax,0xcc(%ebp)
000040f6	movl	0x000000dc(%eax),%eax
000040fc	movl	%ebx,0x08(%esp)
00004100	movl	%eax,0x04(%esp)
00004104	movl	0x88(%ebp),%eax
00004107	movl	%eax,(%esp)
0000410a	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::InsertBefore(int, CFlexTimingTag const&)
0000410f	addl	$0x1c,%esi
00004112	movl	%esi,0x94(%ebp)
00004115	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00004119	movl	0x0c(%ebp),%edi
0000411c	movl	%edi,%esi
0000411e	js	0x00003e1d
00004124	jmp	0x00003e00
00004129	movl	%eax,%esi
0000412b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
0000412f	js	0x000043eb
00004135	movl	0xb8(%ebp),%eax
00004138	testl	%eax,%eax
0000413a	je	0x0000414b
0000413c	movl	%eax,(%esp)
0000413f	calll	_free
00004144	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
0000414b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00004152	movl	%esi,(%esp)
00004155	calll	__Unwind_Resume
0000415a	movl	%eax,%esi
0000415c	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xa0(%ebp)
00004160	js	0x000043eb
00004166	movl	0x98(%ebp),%eax
00004169	testl	%eax,%eax
0000416b	je	0x00003e46
00004171	jmp	0x00003e37
00004176	movl	%esi,%edi
00004178	jmp	0x000041be
0000417a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00004180	movl	0x0000010c(%ebx),%ecx
00004186	movl	(%ecx),%esi
00004188	testl	%esi,%esi
0000418a	je	0x000041d0
0000418c	leal	0xff(%eax),%edx
0000418f	testl	%edx,%edx
00004191	jle	0x000041af
00004193	movl	%ecx,(%esp)
00004196	shll	$0x02,%edx
00004199	movl	%edx,0x08(%esp)
0000419d	addl	$0x04,%ecx
000041a0	movl	%ecx,0x04(%esp)
000041a4	calll	_memmove
000041a9	movl	0x00000118(%ebx),%eax
000041af	decl	%eax
000041b0	movl	%eax,0x00000118(%ebx)
000041b6	movl	(%esi),%eax
000041b8	movl	%esi,(%esp)
000041bb	call	*0x04(%eax)
000041be	movl	0x00000118(%ebx),%eax
000041c4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000041d0	testl	%eax,%eax
000041d2	jg	0x00004180
000041d4	leal	0x0000010c(%ebx),%eax
000041da	movl	%eax,0x94(%ebp)
000041dd	xorl	%esi,%esi
000041df	jmp	0x00004257
000041e1	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000041f0	movl	%edi,%ecx
000041f2	subl	%eax,%ecx
000041f4	movl	%ecx,0x04(%esp)
000041f8	movl	0x94(%ebp),%eax
000041fb	movl	%eax,(%esp)
000041fe	calll	CUtlMemory<CFlexAnimationTrack*, int>::Grow(int)
00004203	movl	0x00000118(%ebx),%ecx
00004209	incl	%ecx
0000420a	movl	%ecx,0x00000118(%ebx)
00004210	movl	0x0000010c(%ebx),%eax
00004216	movl	%eax,0x0000011c(%ebx)
0000421c	subl	%esi,%ecx
0000421e	decl	%ecx
0000421f	testl	%ecx,%ecx
00004221	jle	0x00004241
00004223	shll	$0x02,%ecx
00004226	movl	%ecx,0x08(%esp)
0000422a	leal	(%eax,%esi,4),%ecx
0000422d	movl	%ecx,0x04(%esp)
00004231	leal	(%eax,%edi,4),%eax
00004234	movl	%eax,(%esp)
00004237	calll	_memmove
0000423c	movl	0x94(%ebp),%eax
0000423f	movl	(%eax),%eax
00004241	shll	$0x02,%esi
00004244	addl	%eax,%esi
00004246	movl	0x08(%ebp),%ebx
00004249	movl	0x0c(%ebp),%edi
0000424c	je	0x00004253
0000424e	movl	0x8c(%ebp),%eax
00004251	movl	%eax,(%esi)
00004253	movl	0x90(%ebp),%esi
00004256	incl	%esi
00004257	cmpl	0x00000118(%edi),%esi
0000425d	jge	0x000042a9
0000425f	movl	$0x00000060,(%esp)
00004266	calll	operator new(unsigned long)
0000426b	movl	0x0000010c(%edi),%ecx
00004271	movl	%eax,%edi
00004273	movl	(%ecx,%esi,4),%eax
00004276	movl	%eax,0x04(%esp)
0000427a	movl	%edi,(%esp)
0000427d	calll	CFlexAnimationTrack::CFlexAnimationTrack(CFlexAnimationTrack const*)
00004282	movl	%esi,0x90(%ebp)
00004285	movl	%ebx,0x58(%edi)
00004288	movl	%edi,0x8c(%ebp)
0000428b	movl	0x00000110(%ebx),%eax
00004291	movl	0x00000118(%ebx),%esi
00004297	leal	0x01(%esi),%edi
0000429a	cmpl	%eax,%edi
0000429c	movl	%esi,%ecx
0000429e	jle	0x00004209
000042a4	jmp	0x000041f0
000042a9	movb	0x00000178(%edi),%cl
000042af	andb	$0x08,%cl
000042b2	movb	0x00000178(%ebx),%al
000042b8	andb	$0xf7,%al
000042ba	orb	%cl,%al
000042bc	movb	%al,0x00000178(%ebx)
000042c2	andb	$0xef,%al
000042c4	movb	0x00000178(%edi),%cl
000042ca	andb	$0x10,%cl
000042cd	orb	%al,%cl
000042cf	movb	%cl,0x00000178(%ebx)
000042d5	movl	0x00000124(%edi),%eax
000042db	movl	%eax,0x00000124(%ebx)
000042e1	movl	0x00000128(%edi),%eax
000042e7	movl	%eax,0x00000128(%ebx)
000042ed	movl	0x0000012c(%edi),%eax
000042f3	movl	%eax,0x0000012c(%ebx)
000042f9	movl	0x00000130(%edi),%eax
000042ff	movl	%eax,0x00000130(%ebx)
00004305	movl	0x54(%edi),%eax
00004308	movl	%eax,0x54(%ebx)
0000430b	movl	0x58(%edi),%eax
0000430e	movl	%eax,0x58(%ebx)
00004311	leal	0x5c(%edi),%eax
00004314	movl	%eax,0x04(%esp)
00004318	leal	0x5c(%ebx),%eax
0000431b	movl	%eax,(%esp)
0000431e	calll	CCurveData::operator=(CCurveData const&)
00004323	movb	0x05(%edi),%al
00004326	movb	%al,0x05(%ebx)
00004329	leal	0x0000013c(%edi),%eax
0000432f	movl	%eax,0x04(%esp)
00004333	leal	0x0000013c(%ebx),%eax
00004339	movl	%eax,(%esp)
0000433c	calll	CUtlString::operator=(CUtlString const&)
00004341	movb	0x00000178(%edi),%cl
00004347	andb	$0x80,%cl
0000434a	movzwl	0x00000178(%ebx),%eax
00004351	movb	%al,%dl
00004353	andb	$0x7f,%dl
00004356	orb	%cl,%dl
00004358	movb	%dl,0x00000178(%ebx)
0000435e	movl	0x0000014c(%edi),%ecx
00004364	movl	%ecx,0x0000014c(%ebx)
0000436a	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%edi),%ecx
00004370	movl	%ecx,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebx)
00004376	movss	0x00000154(%edi),%xmm0
0000437e	movss	%xmm0,0x00000154(%ebx)
00004386	andb	$0xfe,%ah
00004389	movb	0x00000179(%edi),%dl
0000438f	andb	$0x01,%dl
00004392	orb	%ah,%dl
00004394	movb	%dl,0x00000179(%ebx)
0000439a	andb	$0xfd,%dl
0000439d	movb	0x00000179(%edi),%cl
000043a3	andb	$0x02,%cl
000043a6	orb	%dl,%cl
000043a8	movb	%cl,0x00000179(%ebx)
000043ae	andb	$0xfb,%cl
000043b1	movb	0x00000179(%edi),%al
000043b7	andb	$0x04,%al
000043b9	orb	%cl,%al
000043bb	movb	%al,0x00000179(%ebx)
000043c1	andb	$0xdf,%al
000043c3	movb	0x00000179(%edi),%cl
000043c9	andb	$0x20,%cl
000043cc	orb	%al,%cl
000043ce	movb	%cl,0x00000179(%ebx)
000043d4	movl	%ebx,%eax
000043d6	addl	$0x0000008c,%esp
000043dc	popl	%esi
000043dd	popl	%edi
000043de	popl	%ebx
000043df	popl	%ebp
000043e0	ret
000043e1	movl	%eax,%esi
000043e3	movl	%edi,(%esp)
000043e6	calll	operator delete(void*)
000043eb	movl	%esi,(%esp)
000043ee	calll	__Unwind_Resume
000043f3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ClearAllRelativeTags():
00004400	pushl	%ebp
00004401	movl	%esp,%ebp
00004403	subl	$0x08,%esp
00004406	movl	$0x000000bc,%eax
0000440b	addl	0x08(%ebp),%eax
0000440e	movl	%eax,(%esp)
00004411	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::Purge()
00004416	addl	$0x08,%esp
00004419	popl	%ebp
0000441a	ret
0000441b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ClearAllTimingTags():
00004420	pushl	%ebp
00004421	movl	%esp,%ebp
00004423	subl	$0x08,%esp
00004426	movl	$0x000000d0,%eax
0000442b	addl	0x08(%ebp),%eax
0000442e	movl	%eax,(%esp)
00004431	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::Purge()
00004436	addl	$0x08,%esp
00004439	popl	%ebp
0000443a	ret
0000443b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ClearAllAbsoluteTags(CChoreoEvent::AbsTagType):
00004440	pushl	%ebp
00004441	movl	%esp,%ebp
00004443	subl	$0x08,%esp
00004446	imull	$0x14,0x0c(%ebp),%eax
0000444a	movl	0x08(%ebp),%ecx
0000444d	leal	0x000000e4(%ecx,%eax),%eax
00004454	movl	%eax,(%esp)
00004457	calll	CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::Purge()
0000445c	addl	$0x08,%esp
0000445f	popl	%ebp
00004460	ret
00004461	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*):
00004470	pushl	%ebp
00004471	movl	%esp,%ebp
00004473	pushl	%ebx
00004474	pushl	%edi
00004475	pushl	%esi
00004476	subl	$0x0c,%esp
00004479	calll	0x0000447e
0000447e	popl	%edi
0000447f	movb	0x0c(%ebp),%al
00004482	shlb	$0x02,%al
00004485	movl	0x08(%ebp),%esi
00004488	movb	0x00000178(%esi),%cl
0000448e	andb	$0xfb,%cl
00004491	orb	%al,%cl
00004493	movb	%cl,0x00000178(%esi)
00004499	leal	0x00000094(%esi),%eax
0000449f	movl	0x14(%ebp),%ebx
000044a2	movl	0x10(%ebp),%ecx
000044a5	testl	%ecx,%ecx
000044a7	je	0x000044b7
000044a9	movl	%ecx,0x04(%esp)
000044ad	movl	%eax,(%esp)
000044b0	calll	CUtlString::operator=(char const*)
000044b5	jmp	0x000044c9
000044b7	leal	0x6f540-0x447e(%edi),%ecx
000044bd	movl	%ecx,0x04(%esp)
000044c1	movl	%eax,(%esp)
000044c4	calll	CUtlString::Set(char const*)
000044c9	addl	$0x000000a4,%esi
000044cf	testl	%ebx,%ebx
000044d1	je	0x000044e7
000044d3	movl	%ebx,0x04(%esp)
000044d7	movl	%esi,(%esp)
000044da	calll	CUtlString::operator=(char const*)
000044df	addl	$0x0c,%esp
000044e2	popl	%esi
000044e3	popl	%edi
000044e4	popl	%ebx
000044e5	popl	%ebp
000044e6	ret
000044e7	leal	0x6f540-0x447e(%edi),%eax
000044ed	movl	%eax,0x04(%esp)
000044f1	movl	%esi,(%esp)
000044f4	calll	CUtlString::Set(char const*)
000044f9	jmp	0x000044df
000044fb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetType():
00004500	movl	0x04(%esp),%eax
00004504	movzbl	0x04(%eax),%eax
00004508	ret
00004509	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::GetName():
00004510	pushl	%ebp
00004511	movl	%esp,%ebp
00004513	subl	$0x08,%esp
00004516	movl	0x08(%ebp),%eax
00004519	addl	$0x08,%eax
0000451c	movl	%eax,(%esp)
0000451f	calll	CUtlString::Get()
00004524	addl	$0x08,%esp
00004527	popl	%ebp
00004528	ret
00004529	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::GetParameters():
00004530	pushl	%ebp
00004531	movl	%esp,%ebp
00004533	subl	$0x08,%esp
00004536	movl	0x08(%ebp),%eax
00004539	addl	$0x18,%eax
0000453c	movl	%eax,(%esp)
0000453f	calll	CUtlString::Get()
00004544	addl	$0x08,%esp
00004547	popl	%ebp
00004548	ret
00004549	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::SetParameters2(char const*):
00004550	pushl	%ebp
00004551	movl	%esp,%ebp
00004553	pushl	%ebx
00004554	pushl	%edi
00004555	pushl	%esi
00004556	subl	$0x0000041c,%esp
0000455c	calll	0x00004561
00004561	popl	%eax
00004562	movl	0x80d3a-0x4561(%eax),%eax
00004568	movl	%eax,0xfffffbec(%ebp)
0000456e	movl	(%eax),%eax
00004570	movl	%eax,0xf0(%ebp)
00004573	movl	0x0c(%ebp),%edi
00004576	movl	%edi,(%esp)
00004579	calll	_strlen
0000457e	movl	%eax,%esi
00004580	movl	%edi,0x04(%esp)
00004584	movl	0x08(%ebp),%ebx
00004587	addl	$0x28,%ebx
0000458a	movl	%ebx,(%esp)
0000458d	calll	CUtlString::operator=(char const*)
00004592	testl	%esi,%esi
00004594	jle	0x000045cb
00004596	cmpb	$0x20,0xff(%esi,%edi)
0000459b	jne	0x000045cb
0000459d	movl	%edi,0x04(%esp)
000045a1	leal	0xfffffbf0(%ebp),%edi
000045a7	movl	%edi,(%esp)
000045aa	movl	$0x00000400,0x08(%esp)
000045b2	calll	V_strncpy(char*, char const*, int)
000045b7	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffbef(%ebp,%esi)
000045bf	movl	%edi,0x04(%esp)
000045c3	movl	%ebx,(%esp)
000045c6	calll	CUtlString::Set(char const*)
000045cb	movl	0xfffffbec(%ebp),%eax
000045d1	movl	(%eax),%eax
000045d3	cmpl	0xf0(%ebp),%eax
000045d6	jne	0x000045e3
000045d8	addl	$0x0000041c,%esp
000045de	popl	%esi
000045df	popl	%edi
000045e0	popl	%ebx
000045e1	popl	%ebp
000045e2	ret
000045e3	calll	___stack_chk_fail
000045e8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetParameters2():
000045f0	pushl	%ebp
000045f1	movl	%esp,%ebp
000045f3	subl	$0x08,%esp
000045f6	movl	0x08(%ebp),%eax
000045f9	addl	$0x28,%eax
000045fc	movl	%eax,(%esp)
000045ff	calll	CUtlString::Get()
00004604	addl	$0x08,%esp
00004607	popl	%ebp
00004608	ret
00004609	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::SetParameters3(char const*):
00004610	pushl	%ebp
00004611	movl	%esp,%ebp
00004613	pushl	%ebx
00004614	pushl	%edi
00004615	pushl	%esi
00004616	subl	$0x0000041c,%esp
0000461c	calll	0x00004621
00004621	popl	%eax
00004622	movl	0x80d3a-0x4621(%eax),%eax
00004628	movl	%eax,0xfffffbec(%ebp)
0000462e	movl	(%eax),%eax
00004630	movl	%eax,0xf0(%ebp)
00004633	movl	0x0c(%ebp),%edi
00004636	movl	%edi,(%esp)
00004639	calll	_strlen
0000463e	movl	%eax,%esi
00004640	movl	%edi,0x04(%esp)
00004644	movl	0x08(%ebp),%ebx
00004647	addl	$0x38,%ebx
0000464a	movl	%ebx,(%esp)
0000464d	calll	CUtlString::operator=(char const*)
00004652	testl	%esi,%esi
00004654	jle	0x0000468b
00004656	cmpb	$0x20,0xff(%esi,%edi)
0000465b	jne	0x0000468b
0000465d	movl	%edi,0x04(%esp)
00004661	leal	0xfffffbf0(%ebp),%edi
00004667	movl	%edi,(%esp)
0000466a	movl	$0x00000400,0x08(%esp)
00004672	calll	V_strncpy(char*, char const*, int)
00004677	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffbef(%ebp,%esi)
0000467f	movl	%edi,0x04(%esp)
00004683	movl	%ebx,(%esp)
00004686	calll	CUtlString::Set(char const*)
0000468b	movl	0xfffffbec(%ebp),%eax
00004691	movl	(%eax),%eax
00004693	cmpl	0xf0(%ebp),%eax
00004696	jne	0x000046a3
00004698	addl	$0x0000041c,%esp
0000469e	popl	%esi
0000469f	popl	%edi
000046a0	popl	%ebx
000046a1	popl	%ebp
000046a2	ret
000046a3	calll	___stack_chk_fail
000046a8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetParameters3():
000046b0	pushl	%ebp
000046b1	movl	%esp,%ebp
000046b3	subl	$0x08,%esp
000046b6	movl	0x08(%ebp),%eax
000046b9	addl	$0x38,%eax
000046bc	movl	%eax,(%esp)
000046bf	calll	CUtlString::Get()
000046c4	addl	$0x08,%esp
000046c7	popl	%ebp
000046c8	ret
000046c9	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::GetDescription():
000046d0	pushl	%ebp
000046d1	movl	%esp,%ebp
000046d3	pushl	%ebx
000046d4	pushl	%edi
000046d5	pushl	%esi
000046d6	subl	$0x0000013c,%esp
000046dc	calll	0x000046e1
000046e1	popl	%esi
000046e2	movl	0x80d3a-0x46e1(%esi),%eax
000046e8	movl	%eax,0xfffffeec(%ebp)
000046ee	movl	(%eax),%eax
000046f0	movl	%eax,0xf0(%ebp)
000046f3	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CChoreoEvent::GetDescription()::description-0x46e1(%esi)
000046fa	movl	0x08(%ebp),%edi
000046fd	movl	0x000000b4(%edi),%eax
00004703	testl	%eax,%eax
00004705	jne	0x0000473b
00004707	addl	$0x08,%edi
0000470a	movl	%edi,(%esp)
0000470d	calll	CUtlString::Get()
00004712	movl	%eax,0x0c(%esp)
00004716	leal	0x6f541-0x46e1(%esi),%eax
0000471c	movl	%eax,0x08(%esp)
00004720	leal	CChoreoEvent::GetDescription()::description-0x46e1(%esi),%eax
00004726	movl	%eax,(%esp)
00004729	movl	$0x00000100,0x04(%esp)
00004731	calll	V_snprintf(char*, int, char const*, ...)
00004736	jmp	0x00004828
0000473b	movl	%eax,(%esp)
0000473e	calll	CChoreoActor::GetName()
00004743	movl	%eax,0xfffffee8(%ebp)
00004749	movl	0x000000b8(%edi),%eax
0000474f	movl	%eax,(%esp)
00004752	calll	CChoreoChannel::GetName()
00004757	movl	%eax,0xfffffee4(%ebp)
0000475d	leal	0x08(%edi),%eax
00004760	movl	%eax,(%esp)
00004763	calll	CUtlString::Get()
00004768	movl	%eax,0xfffffee0(%ebp)
0000476e	movzbl	0x04(%edi),%eax
00004772	cmpl	$0x10,%eax
00004775	jbe	0x0000477f
00004777	leal	0x6f602-0x46e1(%esi),%ebx
0000477d	jmp	0x00004786
0000477f	movl	g_NameMap-0x46e1+0x00000004(%esi,%eax,8),%ebx
00004786	leal	0x18(%edi),%eax
00004789	movl	%eax,(%esp)
0000478c	calll	CUtlString::Get()
00004791	movl	%eax,0x1c(%esp)
00004795	movl	%ebx,0x18(%esp)
00004799	movl	0xfffffee0(%ebp),%eax
0000479f	movl	%eax,0x14(%esp)
000047a3	movl	0xfffffee4(%ebp),%eax
000047a9	movl	%eax,0x10(%esp)
000047ad	movl	0xfffffee8(%ebp),%eax
000047b3	movl	%eax,0x0c(%esp)
000047b7	leal	0x6f54b-0x46e1(%esi),%eax
000047bd	movl	%eax,0x08(%esp)
000047c1	leal	CChoreoEvent::GetDescription()::description-0x46e1(%esi),%ebx
000047c7	movl	%ebx,(%esp)
000047ca	movl	$0x00000100,0x04(%esp)
000047d2	calll	V_snprintf(char*, int, char const*, ...)
000047d7	cmpb	$0x02,0x04(%edi)
000047db	jne	0x00004828
000047dd	addl	$0x28,%edi
000047e0	movl	%edi,(%esp)
000047e3	calll	CUtlString::Get()
000047e8	movl	%eax,0x0c(%esp)
000047ec	leal	0x6f563-0x46e1(%esi),%eax
000047f2	movl	%eax,0x08(%esp)
000047f6	leal	0xfffffef0(%ebp),%edi
000047fc	movl	%edi,(%esp)
000047ff	movl	$0x00000100,0x04(%esp)
00004807	calll	V_snprintf(char*, int, char const*, ...)
0000480c	movl	%edi,0x04(%esp)
00004810	movl	%ebx,(%esp)
00004813	movl	$0xffffffff,0x0c(%esp)
0000481b	movl	$0x00000100,0x08(%esp)
00004823	calll	V_strncat(char*, char const*, unsigned long, int)
00004828	movl	0xfffffeec(%ebp),%eax
0000482e	movl	(%eax),%eax
00004830	cmpl	0xf0(%ebp),%eax
00004833	jne	0x00004846
00004835	leal	CChoreoEvent::GetDescription()::description-0x46e1(%esi),%eax
0000483b	addl	$0x0000013c,%esp
00004841	popl	%esi
00004842	popl	%edi
00004843	popl	%ebx
00004844	popl	%ebp
00004845	ret
00004846	calll	___stack_chk_fail
0000484b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetActor():
00004850	movl	0x04(%esp),%eax
00004854	movl	0x000000b4(%eax),%eax
0000485a	ret
0000485b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::NameForType(CChoreoEvent::EVENTTYPE):
00004860	calll	0x00004865
00004865	popl	%eax
00004866	movl	0x04(%esp),%ecx
0000486a	cmpl	$0x10,%ecx
0000486d	jbe	0x00004876
0000486f	leal	0x6f602-0x4865(%eax),%eax
00004875	ret
00004876	movl	g_NameMap-0x4865+0x00000004(%eax,%ecx,8),%eax
0000487d	ret
0000487e	nop
CChoreoEvent::SetStartTime(float):
00004880	calll	0x00004885
00004885	popl	%ecx
00004886	movss	0x08(%esp),%xmm0
0000488c	movl	0x04(%esp),%eax
00004890	movss	%xmm0,0x48(%eax)
00004895	movss	0x4c(%eax),%xmm1
0000489a	ucomiss	0x6e9c4-0x4885(%ecx),%xmm1
000048a1	jne	0x000048a5
000048a3	jnp	0x000048af
000048a5	ucomiss	%xmm1,%xmm0
000048a8	jbe	0x000048af
000048aa	movss	%xmm0,0x4c(%eax)
000048af	ret
CChoreoEvent::SetEndTime(float):
000048b0	pushl	%ebp
000048b1	movl	%esp,%ebp
000048b3	pushl	%ebx
000048b4	pushl	%edi
000048b5	pushl	%esi
000048b6	subl	$0x0c,%esp
000048b9	calll	0x000048be
000048be	popl	%eax
000048bf	movl	0x08(%ebp),%esi
000048c2	movss	0x4c(%esi),%xmm0
000048c7	movss	0x0c(%ebp),%xmm1
000048cc	movss	%xmm1,0x4c(%esi)
000048d1	ucomiss	0x6e9c8-0x48be(%eax),%xmm1
000048d8	jne	0x000048dc
000048da	jnp	0x0000493c
000048dc	movss	0x48(%esi),%xmm2
000048e1	ucomiss	%xmm1,%xmm2
000048e4	jbe	0x000048eb
000048e6	movss	%xmm2,0x4c(%esi)
000048eb	ucomiss	%xmm1,%xmm0
000048ee	jne	0x000048f2
000048f0	jnp	0x0000493c
000048f2	movl	0x00000118(%esi),%eax
000048f8	testl	%eax,%eax
000048fa	jle	0x0000493c
000048fc	xorl	%edi,%edi
000048fe	leal	0xff(%eax),%ebx
00004901	jmp	0x00004917
00004903	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00004910	incl	%edi
00004911	movl	0x00000118(%esi),%eax
00004917	cmpl	%edi,%eax
00004919	jle	0x00004938
0000491b	movl	0x0000010c(%esi),%eax
00004921	movl	(%eax,%edi,4),%eax
00004924	testl	%eax,%eax
00004926	je	0x00004938
00004928	movl	%eax,(%esp)
0000492b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esp)
00004933	calll	CFlexAnimationTrack::Resort(int)
00004938	cmpl	%edi,%ebx
0000493a	jne	0x00004910
0000493c	addl	$0x0c,%esp
0000493f	popl	%esi
00004940	popl	%edi
00004941	popl	%ebx
00004942	popl	%ebp
00004943	ret
00004944	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::OnEndTimeChanged():
00004950	pushl	%ebp
00004951	movl	%esp,%ebp
00004953	pushl	%ebx
00004954	pushl	%edi
00004955	pushl	%esi
00004956	subl	$0x0c,%esp
00004959	movl	0x08(%ebp),%esi
0000495c	movl	0x00000118(%esi),%edi
00004962	testl	%edi,%edi
00004964	jle	0x0000499a
00004966	xorl	%ebx,%ebx
00004968	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00004970	cmpl	%ebx,0x00000118(%esi)
00004976	jle	0x00004995
00004978	movl	0x0000010c(%esi),%eax
0000497e	movl	(%eax,%ebx,4),%eax
00004981	testl	%eax,%eax
00004983	je	0x00004995
00004985	movl	%eax,(%esp)
00004988	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esp)
00004990	calll	CFlexAnimationTrack::Resort(int)
00004995	incl	%ebx
00004996	cmpl	%ebx,%edi
00004998	jne	0x00004970
0000499a	addl	$0x0c,%esp
0000499d	popl	%esi
0000499e	popl	%edi
0000499f	popl	%ebx
000049a0	popl	%ebp
000049a1	ret
000049a2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetCompletion(float):
000049b0	pushl	%eax
000049b1	movl	0x08(%esp),%eax
000049b5	movss	0x48(%eax),%xmm2
000049ba	movss	0x4c(%eax),%xmm1
000049bf	movss	0x0c(%esp),%xmm0
000049c5	subss	%xmm2,%xmm0
000049c9	subss	%xmm2,%xmm1
000049cd	divss	%xmm1,%xmm0
000049d1	pxor	%xmm1,%xmm1
000049d5	ucomiss	%xmm0,%xmm1
000049d8	ja	0x000049ec
000049da	calll	0x000049df
000049df	popl	%eax
000049e0	movss	0x6e9cc-0x49df(%eax),%xmm1
000049e8	minss	%xmm0,%xmm1
000049ec	movss	%xmm1,(%esp)
000049f1	flds	(%esp)
000049f4	popl	%eax
000049f5	ret
000049f6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CurveHasEndTime():
00004a00	calll	0x00004a05
00004a05	popl	%eax
00004a06	movl	0x04(%esp),%ecx
00004a0a	movss	0x4c(%ecx),%xmm0
00004a0f	cmpss	$0x4,0x6e9d0-0x4a05(%eax),%xmm0
00004a18	movd	%xmm0,%eax
00004a1c	andl	$0x01,%eax
00004a1f	ret
CChoreoEvent::SetDefaultCurveType(int):
00004a20	movl	0x08(%esp),%eax
00004a24	movl	0x04(%esp),%ecx
00004a28	movl	%eax,0x0000016c(%ecx)
00004a2e	ret
00004a2f	nop
CChoreoEvent::GetDefaultCurveType():
00004a30	movl	0x04(%esp),%eax
00004a34	movl	0x0000016c(%eax),%eax
00004a3a	ret
00004a3b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetIntensity(ICurveDataAccessor*, float):
00004a40	pushl	%ebp
00004a41	movl	%esp,%ebp
00004a43	pushl	%ebx
00004a44	pushl	%edi
00004a45	pushl	%esi
00004a46	subl	$0x000000dc,%esp
00004a4c	calll	0x00004a51
00004a51	popl	%eax
00004a52	movl	%eax,0xffffff48(%ebp)
00004a58	movl	0x0c(%ebp),%ecx
00004a5b	movl	(%ecx),%eax
00004a5d	movl	%ecx,(%esp)
00004a60	call	*0x04(%eax)
00004a63	pxor	%xmm0,%xmm0
00004a67	testb	%al,%al
00004a69	je	0x00004ec1
00004a6f	movl	0x08(%ebp),%eax
00004a72	movl	0x0c(%eax),%eax
00004a75	testl	%eax,%eax
00004a77	jg	0x00004a8c
00004a79	movl	0xffffff48(%ebp),%eax
00004a7f	movss	0x6e9d4-0x4a51(%eax),%xmm0
00004a87	jmp	0x00004ec1
00004a8c	movl	$0x00000001,%edi
00004a91	cmpl	$0x04,%eax
00004a94	jl	0x00004a9f
00004a96	movl	%eax,%edi
00004a98	shrl	$0x1f,%edi
00004a9b	addl	%eax,%edi
00004a9d	sarl	%edi
00004a9f	leal	0x01(%eax),%ecx
00004aa2	movl	%ecx,0xffffff4c(%ebp)
00004aa8	movl	%eax,0xffffff44(%ebp)
00004aae	xorl	%eax,%eax
00004ab0	xorl	%ecx,%ecx
00004ab2	movl	%edi,%edx
00004ab4	jmp	0x00004ac2
00004ab6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00004ac0	addl	%edi,%edx
00004ac2	movl	%edi,0xffffff50(%ebp)
00004ac8	cmpl	$0xff,%edx
00004acb	jl	0x00004b6d
00004ad1	cmpl	0xffffff4c(%ebp),%edx
00004ad7	jge	0x00004b6d
00004add	leal	0xf3(%ebp),%eax
00004ae0	movl	%eax,0x0c(%esp)
00004ae4	movl	%edx,0x08(%esp)
00004ae8	movl	0x0c(%ebp),%edi
00004aeb	movl	%edi,0x04(%esp)
00004aef	movl	0x08(%ebp),%esi
00004af2	movl	%esi,(%esp)
00004af5	movl	%edx,%ebx
00004af7	movl	%ebx,0xffffff58(%ebp)
00004afd	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00004b02	movl	%eax,0xffffff54(%ebp)
00004b08	leal	0xf3(%ebp),%eax
00004b0b	movl	%eax,0x0c(%esp)
00004b0f	leal	0x01(%ebx),%eax
00004b12	movl	%eax,0x08(%esp)
00004b16	movl	%edi,0x04(%esp)
00004b1a	movl	%esi,(%esp)
00004b1d	movl	$0x00000001,%edi
00004b22	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00004b27	movl	0xffffff50(%ebp),%ebx
00004b2d	cmpl	$0x04,%ebx
00004b30	jl	0x00004b3b
00004b32	movl	%ebx,%edi
00004b34	shrl	$0x1f,%edi
00004b37	addl	%ebx,%edi
00004b39	sarl	%edi
00004b3b	movl	0xffffff54(%ebp),%ecx
00004b41	movss	0x04(%ecx),%xmm0
00004b46	movss	0x10(%ebp),%xmm1
00004b4b	ucomiss	%xmm1,%xmm0
00004b4e	jbe	0x00004b5d
00004b50	movl	0xffffff58(%ebp),%edx
00004b56	subl	%edi,%edx
00004b58	jmp	0x00004ac2
00004b5d	ucomiss	0x04(%eax),%xmm1
00004b61	movl	0xffffff58(%ebp),%edx
00004b67	ja	0x00004ac0
00004b6d	movl	%eax,0xffffff50(%ebp)
00004b73	testl	%ecx,%ecx
00004b75	je	0x00004a79
00004b7b	leal	0xf1(%ebp),%eax
00004b7e	movl	%eax,0x0c(%esp)
00004b82	movl	0x0c(%ebp),%esi
00004b85	movl	%esi,0x04(%esp)
00004b89	movl	0x08(%ebp),%edi
00004b8c	movl	%edi,(%esp)
00004b8f	leal	0xff(%edx),%eax
00004b92	cmpl	$0xff,%eax
00004b95	movl	%ecx,0xffffff54(%ebp)
00004b9b	movl	$0xffffffff,%ecx
00004ba0	cmovgel	%eax,%ecx
00004ba3	movl	%ecx,0x08(%esp)
00004ba7	movl	%edx,%ebx
00004ba9	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00004bae	movl	%eax,0xffffff4c(%ebp)
00004bb4	leal	0xf2(%ebp),%eax
00004bb7	movl	%eax,0x0c(%esp)
00004bbb	addl	$0x02,%ebx
00004bbe	movl	0xffffff44(%ebp),%eax
00004bc4	cmpl	%eax,%ebx
00004bc6	cmovgel	%eax,%ebx
00004bc9	movl	%ebx,0x08(%esp)
00004bcd	movl	%esi,0x04(%esp)
00004bd1	movl	%esi,%ebx
00004bd3	movl	%edi,(%esp)
00004bd6	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00004bdb	movl	0xffffff54(%ebp),%ecx
00004be1	movl	0xffffff50(%ebp),%edx
00004be7	movss	0x04(%edx),%xmm0
00004bec	subss	0x04(%ecx),%xmm0
00004bf1	movl	0xffffff4c(%ebp),%esi
00004bf7	movss	(%esi),%xmm1
00004bfb	movss	0x04(%esi),%xmm2
00004c00	movss	%xmm2,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00004c05	movss	%xmm1,0xe4(%ebp)
00004c0a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
00004c11	movss	(%ecx),%xmm1
00004c15	movss	0x04(%ecx),%xmm2
00004c1a	movss	%xmm2,0xd0(%ebp)
00004c1f	movss	%xmm1,0xd4(%ebp)
00004c24	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00004c2b	movss	(%edx),%xmm3
00004c2f	movss	0x04(%edx),%xmm1
00004c34	movss	%xmm1,0xc0(%ebp)
00004c39	movss	%xmm3,0xc4(%ebp)
00004c3e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
00004c45	movss	(%eax),%xmm3
00004c49	movss	0x04(%eax),%xmm4
00004c4e	movss	%xmm4,0xb0(%ebp)
00004c53	movss	%xmm3,0xb4(%ebp)
00004c58	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00004c5f	testb	$0x01,0xf1(%ebp)
00004c63	je	0x00004c6a
00004c65	movss	%xmm2,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00004c6a	testb	$0x01,0xf2(%ebp)
00004c6e	movss	0x10(%ebp),%xmm2
00004c73	je	0x00004c7a
00004c75	movss	%xmm1,0xb0(%ebp)
00004c7a	pxor	%xmm1,%xmm1
00004c7e	ucomiss	%xmm1,%xmm0
00004c81	jbe	0x00004c8f
00004c83	subss	0x04(%ecx),%xmm2
00004c88	divss	%xmm0,%xmm2
00004c8c	movaps	%xmm2,%xmm1
00004c8f	xorps	%xmm0,%xmm0
00004c92	maxss	%xmm0,%xmm1
00004c96	movl	0xffffff48(%ebp),%eax
00004c9c	minss	0x6e9d4-0x4a51(%eax),%xmm1
00004ca4	movaps	%xmm1,0xffffff58(%ebp)
00004cab	movzwl	0x08(%edx),%edi
00004caf	movzwl	0x08(%ecx),%esi
00004cb3	shrl	%esi
00004cb5	testw	%si,%si
00004cb8	jne	0x00004cc4
00004cba	movl	(%ebx),%eax
00004cbc	movl	%ebx,(%esp)
00004cbf	call	*0x08(%eax)
00004cc2	movl	%eax,%esi
00004cc4	shrl	%edi
00004cc6	testw	%di,%di
00004cc9	jne	0x00004cd5
00004ccb	movl	(%ebx),%eax
00004ccd	movl	%ebx,(%esp)
00004cd0	call	*0x08(%eax)
00004cd3	movl	%eax,%edi
00004cd5	leal	0x98(%ebp),%eax
00004cd8	movl	%eax,0x08(%esp)
00004cdc	leal	0x9c(%ebp),%ebx
00004cdf	movl	%ebx,0x04(%esp)
00004ce3	movl	%esi,(%esp)
00004ce6	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
00004ceb	movl	%ebx,0x08(%esp)
00004cef	leal	0x94(%ebp),%eax
00004cf2	movl	%eax,0x04(%esp)
00004cf6	movl	%edi,(%esp)
00004cf9	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
00004cfe	movl	0x98(%ebp),%eax
00004d01	cmpl	$0x0f,%eax
00004d04	jne	0x00004d52
00004d06	movss	0xd0(%ebp),%xmm1
00004d0b	movss	0xc0(%ebp),%xmm0
00004d10	subss	%xmm1,%xmm0
00004d14	movaps	0xffffff58(%ebp),%xmm3
00004d1b	mulss	%xmm3,%xmm0
00004d1f	addss	%xmm1,%xmm0
00004d23	movss	%xmm0,0xa0(%ebp)
00004d28	movss	0xd4(%ebp),%xmm0
00004d2d	movss	0xd8(%ebp),%xmm2
00004d32	movss	0xc8(%ebp),%xmm1
00004d37	subss	%xmm2,%xmm1
00004d3b	mulss	%xmm3,%xmm1
00004d3f	addss	%xmm2,%xmm1
00004d43	movss	%xmm1,0xa8(%ebp)
00004d48	movss	%xmm0,0xa4(%ebp)
00004d4d	jmp	0x00004eac
00004d52	movl	0x94(%ebp),%ecx
00004d55	cmpl	$0x0f,%ecx
00004d58	movaps	0xffffff58(%ebp),%xmm3
00004d5f	jne	0x00004da6
00004d61	movss	0xd0(%ebp),%xmm1
00004d66	movss	0xc0(%ebp),%xmm0
00004d6b	subss	%xmm1,%xmm0
00004d6f	mulss	%xmm3,%xmm0
00004d73	addss	%xmm1,%xmm0
00004d77	movss	%xmm0,0xa0(%ebp)
00004d7c	movss	0xd8(%ebp),%xmm1
00004d81	movss	0xc4(%ebp),%xmm0
00004d86	movss	0xc8(%ebp),%xmm2
00004d8b	subss	%xmm1,%xmm2
00004d8f	mulss	%xmm3,%xmm2
00004d93	addss	%xmm1,%xmm2
00004d97	movss	%xmm2,0xa8(%ebp)
00004d9c	movss	%xmm0,0xa4(%ebp)
00004da1	jmp	0x00004eac
00004da6	cmpl	%ecx,%eax
00004da8	jne	0x00004de5
00004daa	leal	0xa0(%ebp),%eax
00004dad	movl	%eax,0x18(%esp)
00004db1	movss	%xmm3,0x14(%esp)
00004db7	leal	0xb0(%ebp),%eax
00004dba	movl	%eax,0x10(%esp)
00004dbe	leal	0xc0(%ebp),%eax
00004dc1	movl	%eax,0x0c(%esp)
00004dc5	leal	0xd0(%ebp),%eax
00004dc8	movl	%eax,0x08(%esp)
00004dcc	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00004dcf	movl	%eax,0x04(%esp)
00004dd3	movl	%ecx,(%esp)
00004dd6	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00004ddb	movss	0xa4(%ebp),%xmm0
00004de0	jmp	0x00004eac
00004de5	leal	0x88(%ebp),%ecx
00004de8	movl	%ecx,0x18(%esp)
00004dec	movss	%xmm3,0x14(%esp)
00004df2	leal	0xb0(%ebp),%ecx
00004df5	movl	%ecx,0x10(%esp)
00004df9	leal	0xc0(%ebp),%ebx
00004dfc	movl	%ebx,0x0c(%esp)
00004e00	leal	0xd0(%ebp),%esi
00004e03	movl	%esi,0x08(%esp)
00004e07	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%edi
00004e0a	movl	%edi,0x04(%esp)
00004e0e	movl	%eax,(%esp)
00004e11	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00004e16	movl	0x94(%ebp),%eax
00004e19	leal	0xffffff78(%ebp),%ecx
00004e1f	movl	%ecx,0x18(%esp)
00004e23	movaps	0xffffff58(%ebp),%xmm0
00004e2a	movss	%xmm0,0x14(%esp)
00004e30	leal	0xb0(%ebp),%ecx
00004e33	movl	%ecx,0x10(%esp)
00004e37	movl	%ebx,0x0c(%esp)
00004e3b	movl	%esi,0x08(%esp)
00004e3f	movl	%edi,0x04(%esp)
00004e43	movl	%eax,(%esp)
00004e46	calll	Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00004e4b	movss	0x88(%ebp),%xmm1
00004e50	movss	0xffffff78(%ebp),%xmm0
00004e58	subss	%xmm1,%xmm0
00004e5c	movaps	0xffffff58(%ebp),%xmm2
00004e63	mulss	%xmm2,%xmm0
00004e67	addss	%xmm1,%xmm0
00004e6b	movss	%xmm0,0xa0(%ebp)
00004e70	movss	0x8c(%ebp),%xmm1
00004e75	movss	0xffffff7c(%ebp),%xmm0
00004e7d	subss	%xmm1,%xmm0
00004e81	mulss	%xmm2,%xmm0
00004e85	movaps	%xmm2,%xmm3
00004e88	addss	%xmm1,%xmm0
00004e8c	movss	%xmm0,0xa4(%ebp)
00004e91	movss	0x90(%ebp),%xmm2
00004e96	movss	0x80(%ebp),%xmm1
00004e9b	subss	%xmm2,%xmm1
00004e9f	mulss	%xmm3,%xmm1
00004ea3	addss	%xmm2,%xmm1
00004ea7	movss	%xmm1,0xa8(%ebp)
00004eac	xorps	%xmm1,%xmm1
00004eaf	maxss	%xmm1,%xmm0
00004eb3	movl	0xffffff48(%ebp),%eax
00004eb9	minss	0x6e9d4-0x4a51(%eax),%xmm0
00004ec1	movss	%xmm0,0xffffff74(%ebp)
00004ec9	flds	0xffffff74(%ebp)
00004ecf	addl	$0x000000dc,%esp
00004ed5	popl	%esi
00004ed6	popl	%edi
00004ed7	popl	%ebx
00004ed8	popl	%ebp
00004ed9	ret
00004eda	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetCount():
00004ee0	movl	0x04(%esp),%eax
00004ee4	movl	0x0c(%eax),%eax
00004ee7	ret
00004ee8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&):
00004ef0	pushl	%ebp
00004ef1	movl	%esp,%ebp
00004ef3	pushl	%ebx
00004ef4	pushl	%edi
00004ef5	pushl	%esi
00004ef6	subl	$0x0c,%esp
00004ef9	calll	0x00004efe
00004efe	popl	%esi
00004eff	movl	0x10(%ebp),%ecx
00004f02	movl	0x08(%ebp),%ebx
00004f05	testl	%ecx,%ecx
00004f07	jns	0x00004fa1
00004f0d	movb	guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe(%esi),%al
00004f13	testb	%al,%al
00004f15	jne	0x00004f4e
00004f17	leal	guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe(%esi),%edi
00004f1d	movl	%edi,(%esp)
00004f20	calll	___cxa_guard_acquire
00004f25	testl	%eax,%eax
00004f27	je	0x00004f4e
00004f29	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe(%esi)
00004f33	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe+0x00000004(%esi)
00004f3d	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe+0x00000008(%esi)
00004f46	movl	%edi,(%esp)
00004f49	calll	___cxa_guard_release
00004f4e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe+0x00000004(%esi)
00004f58	pxor	%xmm0,%xmm0
00004f5c	testb	$0x01,0x14(%ebx)
00004f60	je	0x00004f67
00004f62	movss	0x17(%ebx),%xmm0
00004f67	movss	%xmm0,CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe(%esi)
00004f6f	xorl	%eax,%eax
00004f71	testb	$0x01,0x14(%ebx)
00004f75	je	0x00004f7d
00004f77	movzwl	0x15(%ebx),%eax
00004f7b	addl	%eax,%eax
00004f7d	movzwl	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe+0x00000008(%esi),%ecx
00004f84	andl	$0x01,%ecx
00004f87	orl	%eax,%ecx
00004f89	movw	%cx,CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe+0x00000008(%esi)
00004f90	movl	0x14(%ebp),%eax
00004f93	movb	$0x01,(%eax)
00004f96	leal	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart-0x4efe(%esi),%eax
00004f9c	jmp	0x00005053
00004fa1	cmpl	%ecx,0x0c(%ebx)
00004fa4	jg	0x00005041
00004faa	movb	guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe(%esi),%al
00004fb0	testb	%al,%al
00004fb2	jne	0x00004feb
00004fb4	leal	guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe(%esi),%edi
00004fba	movl	%edi,(%esp)
00004fbd	calll	___cxa_guard_acquire
00004fc2	testl	%eax,%eax
00004fc4	je	0x00004feb
00004fc6	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe(%esi)
00004fd0	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe+0x00000004(%esi)
00004fda	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe+0x00000008(%esi)
00004fe3	movl	%edi,(%esp)
00004fe6	calll	___cxa_guard_release
00004feb	movl	0x0c(%ebp),%ecx
00004fee	movl	(%ecx),%eax
00004ff0	movl	%ecx,(%esp)
00004ff3	call	(%eax)
00004ff5	fstps	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe+0x00000004(%esi)
00004ffb	pxor	%xmm0,%xmm0
00004fff	testb	$0x01,0x1b(%ebx)
00005003	je	0x0000500a
00005005	movss	0x1e(%ebx),%xmm0
0000500a	movss	%xmm0,CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe(%esi)
00005012	xorl	%eax,%eax
00005014	testb	$0x01,0x1b(%ebx)
00005018	je	0x00005020
0000501a	movzwl	0x1c(%ebx),%eax
0000501e	addl	%eax,%eax
00005020	movzwl	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe+0x00000008(%esi),%ecx
00005027	andl	$0x01,%ecx
0000502a	orl	%eax,%ecx
0000502c	movw	%cx,CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe+0x00000008(%esi)
00005033	movl	0x14(%ebp),%eax
00005036	movb	$0x01,(%eax)
00005039	leal	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend-0x4efe(%esi),%eax
0000503f	jmp	0x00005053
00005041	movl	0x14(%ebp),%eax
00005044	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%eax)
00005047	xorl	%eax,%eax
00005049	cmpl	%ecx,0x0c(%ebx)
0000504c	jle	0x00005053
0000504e	imull	$0x0a,%ecx,%eax
00005051	addl	(%ebx),%eax
00005053	addl	$0x0c,%esp
00005056	popl	%esi
00005057	popl	%edi
00005058	popl	%ebx
00005059	popl	%ebp
0000505a	ret
0000505b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetIntensity(float):
00005060	pushl	%ebp
00005061	movl	%esp,%ebp
00005063	pushl	%esi
00005064	subl	$0x24,%esp
00005067	calll	0x0000506c
0000506c	popl	%ecx
0000506d	movl	0x08(%ebp),%esi
00005070	movl	0x00000128(%esi),%eax
00005076	movss	0x0c(%ebp),%xmm1
0000507b	testl	%eax,%eax
0000507d	jne	0x00005089
0000507f	movss	0x6e9d8-0x506c(%ecx),%xmm0
00005087	jmp	0x000050ad
00005089	movl	%eax,0x04(%esp)
0000508d	movss	%xmm1,0x08(%esp)
00005093	addl	$0x0000012c,%eax
00005098	movl	%eax,(%esp)
0000509b	calll	CCurveData::GetIntensity(ICurveDataAccessor*, float)
000050a0	movss	0x0c(%ebp),%xmm1
000050a5	fstps	0xf8(%ebp)
000050a8	movss	0xf8(%ebp),%xmm0
000050ad	movss	%xmm0,0xec(%ebp)
000050b2	movss	0x48(%esi),%xmm0
000050b7	movl	%esi,0x04(%esp)
000050bb	subss	%xmm0,%xmm1
000050bf	movss	%xmm1,0x08(%esp)
000050c5	addl	$0x5c,%esi
000050c8	movl	%esi,(%esp)
000050cb	calll	CCurveData::GetIntensity(ICurveDataAccessor*, float)
000050d0	fstps	0xf4(%ebp)
000050d3	movss	0xec(%ebp),%xmm0
000050d8	mulss	0xf4(%ebp),%xmm0
000050dd	movss	%xmm0,0xf0(%ebp)
000050e2	flds	0xf0(%ebp)
000050e5	addl	$0x24,%esp
000050e8	popl	%esi
000050e9	popl	%ebp
000050ea	ret
000050eb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::_GetIntensity(float):
000050f0	pushl	%ebp
000050f1	movl	%esp,%ebp
000050f3	subl	$0x18,%esp
000050f6	movl	0x08(%ebp),%eax
000050f9	movss	0x48(%eax),%xmm0
000050fe	movl	%eax,0x04(%esp)
00005102	movss	0x0c(%ebp),%xmm1
00005107	subss	%xmm0,%xmm1
0000510b	movss	%xmm1,0x08(%esp)
00005111	addl	$0x5c,%eax
00005114	movl	%eax,(%esp)
00005117	calll	CCurveData::GetIntensity(ICurveDataAccessor*, float)
0000511c	addl	$0x18,%esp
0000511f	popl	%ebp
00005120	ret
00005121	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetIntensityArea(float):
00005130	pushl	%ebp
00005131	movl	%esp,%ebp
00005133	subl	$0x18,%esp
00005136	movl	0x08(%ebp),%eax
00005139	movss	0x48(%eax),%xmm0
0000513e	movl	%eax,0x04(%esp)
00005142	movss	0x0c(%ebp),%xmm1
00005147	subss	%xmm0,%xmm1
0000514b	movss	%xmm1,0x08(%esp)
00005151	addl	$0x5c,%eax
00005154	movl	%eax,(%esp)
00005157	calll	CCurveData::GetIntensityArea(ICurveDataAccessor*, float)
0000515c	addl	$0x18,%esp
0000515f	popl	%ebp
00005160	ret
00005161	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetIntensityArea(ICurveDataAccessor*, float):
00005170	pushl	%ebp
00005171	movl	%esp,%ebp
00005173	pushl	%ebx
00005174	pushl	%edi
00005175	pushl	%esi
00005176	subl	$0x000000bc,%esp
0000517c	calll	0x00005181
00005181	popl	%eax
00005182	movl	%eax,0xffffff64(%ebp)
00005188	movl	0x0c(%ebp),%ecx
0000518b	movl	(%ecx),%eax
0000518d	movl	%ecx,(%esp)
00005190	call	*0x04(%eax)
00005193	pxor	%xmm0,%xmm0
00005197	testb	%al,%al
00005199	je	0x0000547f
0000519f	movl	0x08(%ebp),%eax
000051a2	movl	0x0c(%eax),%eax
000051a5	testl	%eax,%eax
000051a7	jg	0x000051bc
000051a9	movl	0xffffff64(%ebp),%eax
000051af	movss	0x6e9dc-0x5181(%eax),%xmm0
000051b7	jmp	0x0000547f
000051bc	movl	$0x00000001,%ebx
000051c1	cmpl	$0x04,%eax
000051c4	jl	0x000051cf
000051c6	movl	%eax,%ebx
000051c8	shrl	$0x1f,%ebx
000051cb	addl	%eax,%ebx
000051cd	sarl	%ebx
000051cf	movl	%ebx,0x8c(%ebp)
000051d2	leal	0x01(%eax),%ecx
000051d5	movl	%ecx,0xffffff68(%ebp)
000051db	movl	%eax,0xffffff60(%ebp)
000051e1	xorl	%eax,%eax
000051e3	xorl	%ecx,%ecx
000051e5	jmp	0x0000526a
000051ea	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000051f0	leal	0xf3(%ebp),%eax
000051f3	movl	%eax,0x0c(%esp)
000051f7	movl	%ebx,0x08(%esp)
000051fb	movl	0x0c(%ebp),%esi
000051fe	movl	%esi,0x04(%esp)
00005202	movl	0x08(%ebp),%edi
00005205	movl	%edi,(%esp)
00005208	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
0000520d	movl	%eax,0x88(%ebp)
00005210	leal	0xf3(%ebp),%eax
00005213	movl	%eax,0x0c(%esp)
00005217	leal	0x01(%ebx),%eax
0000521a	movl	%eax,0x84(%ebp)
0000521d	movl	%eax,0x08(%esp)
00005221	movl	%esi,0x04(%esp)
00005225	movl	%edi,(%esp)
00005228	movl	$0x00000001,%esi
0000522d	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00005232	movl	0x8c(%ebp),%ecx
00005235	cmpl	$0x04,%ecx
00005238	jl	0x00005243
0000523a	movl	%ecx,%esi
0000523c	shrl	$0x1f,%esi
0000523f	addl	%ecx,%esi
00005241	sarl	%esi
00005243	movl	0x88(%ebp),%ecx
00005246	movss	0x04(%ecx),%xmm0
0000524b	movss	0x10(%ebp),%xmm1
00005250	ucomiss	%xmm1,%xmm0
00005253	movaps	%xmm1,%xmm0
00005256	jbe	0x0000525f
00005258	subl	%esi,%ebx
0000525a	movl	%esi,0x8c(%ebp)
0000525d	jmp	0x0000526a
0000525f	ucomiss	0x04(%eax),%xmm0
00005263	jbe	0x00005289
00005265	addl	%esi,%ebx
00005267	movl	%esi,0x8c(%ebp)
0000526a	cmpl	$0xff,%ebx
0000526d	jl	0x0000527b
0000526f	cmpl	0xffffff68(%ebp),%ebx
00005275	jl	0x000051f0
0000527b	movl	%eax,0x8c(%ebp)
0000527e	movl	%ecx,0x88(%ebp)
00005281	leal	0x01(%ebx),%eax
00005284	movl	%eax,0x84(%ebp)
00005287	jmp	0x0000528c
00005289	movl	%eax,0x8c(%ebp)
0000528c	movl	0x0c(%ebp),%esi
0000528f	movl	%esi,0x04(%esp)
00005293	movl	0x08(%ebp),%edi
00005296	movl	%edi,(%esp)
00005299	calll	CCurveData::UpdateIntensityArea(ICurveDataAccessor*)
0000529e	movl	0x24(%edi),%eax
000052a1	movl	0x84(%ebp),%ecx
000052a4	movss	(%eax,%ecx,4),%xmm0
000052a9	movss	%xmm0,0x84(%ebp)
000052ae	leal	0xf1(%ebp),%eax
000052b1	movl	%eax,0x0c(%esp)
000052b5	leal	0xff(%ebx),%eax
000052b8	cmpl	$0xff,%eax
000052bb	movl	$0xffffffff,%ecx
000052c0	cmovgel	%eax,%ecx
000052c3	movl	%ecx,0x08(%esp)
000052c7	movl	%esi,0x04(%esp)
000052cb	movl	%edi,(%esp)
000052ce	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
000052d3	movl	%eax,0xffffff68(%ebp)
000052d9	leal	0xf2(%ebp),%eax
000052dc	movl	%eax,0x0c(%esp)
000052e0	addl	$0x02,%ebx
000052e3	movl	0xffffff60(%ebp),%eax
000052e9	cmpl	%eax,%ebx
000052eb	cmovgel	%eax,%ebx
000052ee	movl	%ebx,0x08(%esp)
000052f2	movl	%esi,0x04(%esp)
000052f6	movl	%esi,%ebx
000052f8	movl	%edi,(%esp)
000052fb	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00005300	movl	0x8c(%ebp),%edx
00005303	movss	0x04(%edx),%xmm0
00005308	movl	0x88(%ebp),%ecx
0000530b	subss	0x04(%ecx),%xmm0
00005310	movl	0xffffff68(%ebp),%esi
00005316	movss	(%esi),%xmm1
0000531a	movss	0x04(%esi),%xmm2
0000531f	movss	%xmm2,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005324	movss	%xmm1,0xe4(%ebp)
00005329	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
00005330	movss	(%ecx),%xmm1
00005334	movss	0x04(%ecx),%xmm2
00005339	movss	%xmm2,0xd0(%ebp)
0000533e	movss	%xmm1,0xd4(%ebp)
00005343	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
0000534a	movss	(%edx),%xmm3
0000534e	movss	0x04(%edx),%xmm1
00005353	movss	%xmm1,0xc0(%ebp)
00005358	movss	%xmm3,0xc4(%ebp)
0000535d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
00005364	movss	(%eax),%xmm3
00005368	movss	0x04(%eax),%xmm4
0000536d	movss	%xmm4,0xb0(%ebp)
00005372	movss	%xmm3,0xb4(%ebp)
00005377	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
0000537e	testb	$0x01,0xf1(%ebp)
00005382	je	0x00005389
00005384	movss	%xmm2,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005389	testb	$0x01,0xf2(%ebp)
0000538d	je	0x00005394
0000538f	movss	%xmm1,0xb0(%ebp)
00005394	pxor	%xmm1,%xmm1
00005398	ucomiss	%xmm1,%xmm0
0000539b	jbe	0x000053ab
0000539d	movss	0x10(%ebp),%xmm1
000053a2	subss	0x04(%ecx),%xmm1
000053a7	divss	%xmm0,%xmm1
000053ab	xorps	%xmm0,%xmm0
000053ae	maxss	%xmm0,%xmm1
000053b2	movl	0xffffff64(%ebp),%eax
000053b8	minss	0x6e9dc-0x5181(%eax),%xmm1
000053c0	movaps	%xmm1,0xffffff68(%ebp)
000053c7	movzwl	0x08(%edx),%edi
000053cb	movzwl	0x08(%ecx),%esi
000053cf	shrl	%esi
000053d1	testw	%si,%si
000053d4	jne	0x000053e0
000053d6	movl	(%ebx),%eax
000053d8	movl	%ebx,(%esp)
000053db	call	*0x08(%eax)
000053de	movl	%eax,%esi
000053e0	shrl	%edi
000053e2	testw	%di,%di
000053e5	jne	0x000053f1
000053e7	movl	(%ebx),%eax
000053e9	movl	%ebx,(%esp)
000053ec	call	*0x08(%eax)
000053ef	movl	%eax,%edi
000053f1	leal	0x98(%ebp),%eax
000053f4	movl	%eax,0x08(%esp)
000053f8	leal	0x9c(%ebp),%ebx
000053fb	movl	%ebx,0x04(%esp)
000053ff	movl	%esi,(%esp)
00005402	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
00005407	movl	%ebx,0x08(%esp)
0000540b	leal	0x94(%ebp),%eax
0000540e	movl	%eax,0x04(%esp)
00005412	movl	%edi,(%esp)
00005415	calll	Interpolator_CurveInterpolatorsForType(int, int&, int&)
0000541a	leal	0xa0(%ebp),%eax
0000541d	movl	%eax,0x14(%esp)
00005421	movaps	0xffffff68(%ebp),%xmm0
00005428	movss	%xmm0,0x10(%esp)
0000542e	leal	0xb0(%ebp),%eax
00005431	movl	%eax,0x0c(%esp)
00005435	leal	0xc0(%ebp),%eax
00005438	movl	%eax,0x08(%esp)
0000543c	leal	0xd0(%ebp),%eax
0000543f	movl	%eax,0x04(%esp)
00005443	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00005446	movl	%eax,(%esp)
00005449	calll	Catmull_Rom_Spline_Integral_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
0000544e	movss	0xa4(%ebp),%xmm0
00005453	xorps	%xmm1,%xmm1
00005456	maxss	%xmm1,%xmm0
0000545a	movl	0xffffff64(%ebp),%eax
00005460	minss	0x6e9dc-0x5181(%eax),%xmm0
00005468	movss	0xc0(%ebp),%xmm1
0000546d	subss	0xd0(%ebp),%xmm1
00005472	mulss	%xmm0,%xmm1
00005476	movss	0x84(%ebp),%xmm0
0000547b	addss	%xmm1,%xmm0
0000547f	movss	%xmm0,0x90(%ebp)
00005484	flds	0x90(%ebp)
00005487	addl	$0x000000bc,%esp
0000548d	popl	%esi
0000548e	popl	%edi
0000548f	popl	%ebx
00005490	popl	%ebp
00005491	ret
00005492	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::UpdateIntensityArea(ICurveDataAccessor*):
000054a0	pushl	%ebp
000054a1	movl	%esp,%ebp
000054a3	pushl	%ebx
000054a4	pushl	%edi
000054a5	pushl	%esi
000054a6	subl	$0x7c,%esp
000054a9	calll	0x000054ae
000054ae	popl	%eax
000054af	movl	0x08(%ebp),%esi
000054b2	movl	0x0c(%esi),%ecx
000054b5	testl	%ecx,%ecx
000054b7	jle	0x000056f6
000054bd	leal	0x02(%ecx),%edi
000054c0	cmpl	%edi,0x30(%esi)
000054c3	je	0x000056f6
000054c9	movl	%ecx,0x94(%ebp)
000054cc	movl	%eax,0x9c(%ebp)
000054cf	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%esi)
000054d6	testl	%edi,%edi
000054d8	je	0x00005523
000054da	movl	0x28(%esi),%ecx
000054dd	xorl	%eax,%eax
000054df	cmpl	%edi,%ecx
000054e1	jge	0x000054f9
000054e3	leal	0x24(%esi),%eax
000054e6	movl	%edi,%edx
000054e8	subl	%ecx,%edx
000054ea	movl	%edx,0x04(%esp)
000054ee	movl	%eax,(%esp)
000054f1	calll	CUtlMemory<float, int>::Grow(int)
000054f6	movl	0x30(%esi),%eax
000054f9	leal	(%eax,%edi),%ecx
000054fc	movl	%ecx,0x30(%esi)
000054ff	movl	0x24(%esi),%ecx
00005502	movl	%ecx,0x34(%esi)
00005505	testl	%eax,%eax
00005507	jle	0x00005523
00005509	testl	%edi,%edi
0000550b	jle	0x00005523
0000550d	shll	$0x02,%eax
00005510	movl	%eax,0x08(%esp)
00005514	movl	%ecx,0x04(%esp)
00005518	leal	(%ecx,%edi,4),%eax
0000551b	movl	%eax,(%esp)
0000551e	calll	_memmove
00005523	movl	0x0c(%ebp),%edi
00005526	leal	0xf3(%ebp),%ebx
00005529	movl	%ebx,0x0c(%esp)
0000552d	movl	%edi,0x04(%esp)
00005531	movl	%esi,(%esp)
00005534	movl	$0xfffffffe,0x08(%esp)
0000553c	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00005541	movl	%eax,0x98(%ebp)
00005544	movl	%ebx,0x0c(%esp)
00005548	movl	%edi,0x04(%esp)
0000554c	movl	%esi,(%esp)
0000554f	movl	$0xffffffff,0x08(%esp)
00005557	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
0000555c	movl	%eax,0x90(%ebp)
0000555f	movl	%ebx,0x0c(%esp)
00005563	movl	%esi,%ecx
00005565	xorl	%ebx,%ebx
00005567	movl	0x94(%ebp),%esi
0000556a	testl	%esi,%esi
0000556c	movl	%esi,%eax
0000556e	cmovgl	%ebx,%eax
00005571	movl	%eax,0x08(%esp)
00005575	movl	%edi,0x04(%esp)
00005579	movl	%ecx,(%esp)
0000557c	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00005581	movl	%esi,%ecx
00005583	movl	0x08(%ebp),%edx
00005586	testl	%ecx,%ecx
00005588	movl	0x98(%ebp),%esi
0000558b	movss	(%esi),%xmm0
0000558f	movss	0x04(%esi),%xmm1
00005594	movss	%xmm1,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005599	movss	%xmm0,0xe4(%ebp)
0000559e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
000055a5	movl	0x90(%ebp),%esi
000055a8	movss	(%esi),%xmm0
000055ac	movss	0x04(%esi),%xmm1
000055b1	movss	%xmm1,0xd0(%ebp)
000055b6	movss	%xmm0,0xd4(%ebp)
000055bb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
000055c2	movss	(%eax),%xmm0
000055c6	movss	0x04(%eax),%xmm1
000055cb	movss	%xmm1,0xc0(%ebp)
000055d0	movss	%xmm0,0xc4(%ebp)
000055d5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
000055dc	js	0x000056f6
000055e2	leal	0x01(%ecx),%eax
000055e5	movl	%eax,0x98(%ebp)
000055e8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000055f0	leal	0xf3(%ebp),%eax
000055f3	movl	%eax,0x0c(%esp)
000055f7	movl	%edi,0x04(%esp)
000055fb	movl	%edx,(%esp)
000055fe	leal	0x01(%ebx),%edi
00005601	cmpl	%ecx,%edi
00005603	movl	%ecx,%eax
00005605	cmovll	%edi,%eax
00005608	movl	%eax,0x08(%esp)
0000560c	movl	%ecx,%esi
0000560e	calll	CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
00005613	movss	(%eax),%xmm0
00005617	movss	0x04(%eax),%xmm1
0000561c	movss	%xmm1,0xa0(%ebp)
00005621	movss	%xmm0,0xa4(%ebp)
00005626	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xa8(%ebp)
0000562d	leal	0xb0(%ebp),%eax
00005630	movl	%eax,0x14(%esp)
00005634	leal	0xa0(%ebp),%eax
00005637	movl	%eax,0x0c(%esp)
0000563b	leal	0xc0(%ebp),%eax
0000563e	movl	%eax,0x08(%esp)
00005642	leal	0xd0(%ebp),%eax
00005645	movl	%eax,0x04(%esp)
00005649	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
0000564c	movl	%eax,(%esp)
0000564f	movl	$0x3f800000,0x10(%esp)
00005657	calll	Catmull_Rom_Spline_Integral_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
0000565c	movl	%esi,%ecx
0000565e	movl	0x9c(%ebp),%eax
00005661	movl	0x08(%ebp),%edx
00005664	movss	0xb4(%ebp),%xmm0
00005669	xorps	%xmm1,%xmm1
0000566c	maxss	%xmm1,%xmm0
00005670	minss	0x6e9e0-0x54ae(%eax),%xmm0
00005678	movss	0xc0(%ebp),%xmm1
0000567d	subss	0xd0(%ebp),%xmm1
00005682	mulss	%xmm0,%xmm1
00005686	movl	0x24(%edx),%eax
00005689	movss	%xmm1,(%eax,%ebx,4)
0000568e	movss	0xd0(%ebp),%xmm0
00005693	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005698	movss	0xd4(%ebp),%xmm0
0000569d	movss	%xmm0,0xe4(%ebp)
000056a2	movss	0xd8(%ebp),%xmm0
000056a7	movss	%xmm0,0xe8(%ebp)
000056ac	movss	0xc0(%ebp),%xmm0
000056b1	movss	%xmm0,0xd0(%ebp)
000056b6	movss	0xc4(%ebp),%xmm0
000056bb	movss	%xmm0,0xd4(%ebp)
000056c0	movss	0xc8(%ebp),%xmm0
000056c5	movss	%xmm0,0xd8(%ebp)
000056ca	movss	0xa0(%ebp),%xmm0
000056cf	movss	%xmm0,0xc0(%ebp)
000056d4	movss	0xa4(%ebp),%xmm0
000056d9	movss	%xmm0,0xc4(%ebp)
000056de	movss	0xa8(%ebp),%xmm0
000056e3	movss	%xmm0,0xc8(%ebp)
000056e8	cmpl	%edi,0x98(%ebp)
000056eb	movl	%edi,%ebx
000056ed	movl	0x0c(%ebp),%edi
000056f0	jne	0x000055f0
000056f6	addl	$0x7c,%esp
000056f9	popl	%esi
000056fa	popl	%edi
000056fb	popl	%ebx
000056fc	popl	%ebp
000056fd	ret
000056fe	nop
CChoreoEvent::OffsetStartTime(float):
00005700	calll	0x00005705
00005705	popl	%ecx
00005706	movl	0x04(%esp),%eax
0000570a	movss	0x48(%eax),%xmm0
0000570f	addss	0x08(%esp),%xmm0
00005715	movss	%xmm0,0x48(%eax)
0000571a	movss	0x4c(%eax),%xmm1
0000571f	ucomiss	0x6e9e4-0x5705(%ecx),%xmm1
00005726	jne	0x0000572a
00005728	jnp	0x00005734
0000572a	ucomiss	%xmm1,%xmm0
0000572d	jbe	0x00005734
0000572f	movss	%xmm0,0x4c(%eax)
00005734	ret
00005735	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::OffsetEndTime(float):
00005740	pushl	%ebp
00005741	movl	%esp,%ebp
00005743	pushl	%ebx
00005744	pushl	%edi
00005745	pushl	%esi
00005746	subl	$0x0c,%esp
00005749	calll	0x0000574e
0000574e	popl	%eax
0000574f	movl	0x08(%ebp),%esi
00005752	movss	0x4c(%esi),%xmm0
00005757	ucomiss	0x6e9e8-0x574e(%eax),%xmm0
0000575e	jne	0x00005762
00005760	jnp	0x000057dc
00005762	movss	0x0c(%ebp),%xmm1
00005767	addss	%xmm0,%xmm1
0000576b	movss	%xmm1,0x4c(%esi)
00005770	ucomiss	0x6e9e8-0x574e(%eax),%xmm1
00005777	jne	0x0000577b
00005779	jnp	0x000057dc
0000577b	movss	0x48(%esi),%xmm2
00005780	ucomiss	%xmm1,%xmm2
00005783	jbe	0x0000578a
00005785	movss	%xmm2,0x4c(%esi)
0000578a	ucomiss	%xmm1,%xmm0
0000578d	jne	0x00005791
0000578f	jnp	0x000057dc
00005791	movl	0x00000118(%esi),%eax
00005797	testl	%eax,%eax
00005799	jle	0x000057dc
0000579b	xorl	%edi,%edi
0000579d	leal	0xff(%eax),%ebx
000057a0	jmp	0x000057b7
000057a2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000057b0	incl	%edi
000057b1	movl	0x00000118(%esi),%eax
000057b7	cmpl	%edi,%eax
000057b9	jle	0x000057d8
000057bb	movl	0x0000010c(%esi),%eax
000057c1	movl	(%eax,%edi,4),%eax
000057c4	testl	%eax,%eax
000057c6	je	0x000057d8
000057c8	movl	%eax,(%esp)
000057cb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esp)
000057d3	calll	CFlexAnimationTrack::Resort(int)
000057d8	cmpl	%edi,%ebx
000057da	jne	0x000057b0
000057dc	addl	$0x0c,%esp
000057df	popl	%esi
000057e0	popl	%edi
000057e1	popl	%ebx
000057e2	popl	%ebp
000057e3	ret
000057e4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::OffsetTime(float):
000057f0	calll	0x000057f5
000057f5	popl	%ecx
000057f6	movl	0x04(%esp),%eax
000057fa	movss	0x4c(%eax),%xmm1
000057ff	movss	0x08(%esp),%xmm0
00005805	ucomiss	0x6e9ec-0x57f5(%ecx),%xmm1
0000580c	jne	0x00005810
0000580e	jnp	0x00005819
00005810	addss	%xmm0,%xmm1
00005814	movss	%xmm1,0x4c(%eax)
00005819	addss	0x48(%eax),%xmm0
0000581e	movss	%xmm0,0x48(%eax)
00005823	ret
00005824	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetActor(CChoreoActor*):
00005830	movl	0x08(%esp),%eax
00005834	movl	0x04(%esp),%ecx
00005838	movl	%eax,0x000000b4(%ecx)
0000583e	ret
0000583f	nop
CChoreoEvent::SetChannel(CChoreoChannel*):
00005840	movl	0x08(%esp),%eax
00005844	movl	0x04(%esp),%ecx
00005848	movl	%eax,0x000000b8(%ecx)
0000584e	ret
0000584f	nop
CChoreoEvent::GetChannel():
00005850	movl	0x04(%esp),%eax
00005854	movl	0x000000b8(%eax),%eax
0000585a	ret
0000585b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetSubScene(CChoreoScene*):
00005860	movl	0x08(%esp),%eax
00005864	movl	0x04(%esp),%ecx
00005868	movl	%eax,0x00000120(%ecx)
0000586e	ret
0000586f	nop
CChoreoEvent::GetSubScene():
00005870	movl	0x04(%esp),%eax
00005874	movl	0x00000120(%eax),%eax
0000587a	ret
0000587b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::TypeForName(char const*):
00005880	pushl	%ebp
00005881	movl	%esp,%ebp
00005883	pushl	%ebx
00005884	pushl	%edi
00005885	pushl	%esi
00005886	subl	$0x0c,%esp
00005889	calll	0x0000588e
0000588e	popl	%eax
0000588f	leal	g_NameMap-0x588e+0x00000004(%eax),%edi
00005895	movl	0x08(%ebp),%ebx
00005898	xorl	%esi,%esi
0000589a	jmp	0x000058b6
0000589c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
000058a0	movl	(%edi),%eax
000058a2	movl	%eax,0x04(%esp)
000058a6	movl	%ebx,(%esp)
000058a9	calll	V_stricmp(char const*, char const*)
000058ae	testl	%eax,%eax
000058b0	je	0x000058bf
000058b2	addl	$0x08,%edi
000058b5	incl	%esi
000058b6	cmpl	$0x10,%esi
000058b9	jle	0x000058a0
000058bb	xorl	%eax,%eax
000058bd	jmp	0x000058c2
000058bf	movl	0xfc(%edi),%eax
000058c2	addl	$0x0c,%esp
000058c5	popl	%esi
000058c6	popl	%edi
000058c7	popl	%ebx
000058c8	popl	%ebp
000058c9	ret
000058ca	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::CCTypeForName(char const*):
000058d0	pushl	%ebp
000058d1	movl	%esp,%ebp
000058d3	pushl	%ebx
000058d4	pushl	%edi
000058d5	pushl	%esi
000058d6	subl	$0x0c,%esp
000058d9	calll	0x000058de
000058de	popl	%eax
000058df	leal	g_CCNameMap-0x58de+0x00000004(%eax),%edi
000058e5	movl	0x08(%ebp),%ebx
000058e8	xorl	%esi,%esi
000058ea	jmp	0x00005906
000058ec	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
000058f0	movl	(%edi),%eax
000058f2	movl	%eax,0x04(%esp)
000058f6	movl	%ebx,(%esp)
000058f9	calll	V_stricmp(char const*, char const*)
000058fe	testl	%eax,%eax
00005900	je	0x0000590f
00005902	addl	$0x08,%edi
00005905	incl	%esi
00005906	cmpl	$0x02,%esi
00005909	jle	0x000058f0
0000590b	xorl	%eax,%eax
0000590d	jmp	0x00005912
0000590f	movl	0xfc(%edi),%eax
00005912	addl	$0x0c,%esp
00005915	popl	%esi
00005916	popl	%edi
00005917	popl	%ebx
00005918	popl	%ebp
00005919	ret
0000591a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::NameForCCType(CChoreoEvent::CLOSECAPTION):
00005920	calll	0x00005925
00005925	popl	%eax
00005926	movl	0x04(%esp),%ecx
0000592a	cmpl	$0x02,%ecx
0000592d	jbe	0x00005936
0000592f	leal	0x6f5e3-0x5925(%eax),%eax
00005935	ret
00005936	movl	g_CCNameMap-0x5925+0x00000004(%eax,%ecx,8),%eax
0000593d	ret
0000593e	nop
CChoreoEvent::IsFixedLength():
00005940	movl	0x04(%esp),%eax
00005944	movzbl	0x00000178(%eax),%eax
0000594b	andl	$0x01,%eax
0000594e	ret
0000594f	nop
CChoreoEvent::SetFixedLength(bool):
00005950	movl	0x04(%esp),%eax
00005954	movb	0x00000178(%eax),%cl
0000595a	andb	$0xfe,%cl
0000595d	movb	0x08(%esp),%dl
00005961	orb	%cl,%dl
00005963	movb	%dl,0x00000178(%eax)
00005969	ret
0000596a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetResumeCondition(bool):
00005970	movb	0x08(%esp),%al
00005974	addb	%al,%al
00005976	movl	0x04(%esp),%ecx
0000597a	movb	0x00000178(%ecx),%dl
00005980	andb	$0xfd,%dl
00005983	orb	%al,%dl
00005985	movb	%dl,0x00000178(%ecx)
0000598b	ret
0000598c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::IsResumeCondition():
00005990	movl	0x04(%esp),%eax
00005994	movb	0x00000178(%eax),%al
0000599a	andb	$0x02,%al
0000599c	shrb	%al
0000599e	movzbl	%al,%eax
000059a1	ret
000059a2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetLockBodyFacing(bool):
000059b0	movb	0x08(%esp),%al
000059b4	shlb	$0x05,%al
000059b7	movl	0x04(%esp),%ecx
000059bb	movb	0x00000178(%ecx),%dl
000059c1	andb	$0xdf,%dl
000059c4	orb	%al,%dl
000059c6	movb	%dl,0x00000178(%ecx)
000059cc	ret
000059cd	nopl	(%eax)
CChoreoEvent::IsLockBodyFacing():
000059d0	movl	0x04(%esp),%eax
000059d4	movb	0x00000178(%eax),%al
000059da	andb	$0x20,%al
000059dc	shrb	$0x05,%al
000059df	movzbl	%al,%eax
000059e2	ret
000059e3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetDistanceToTarget(float):
000059f0	movss	0x08(%esp),%xmm0
000059f6	movl	0x04(%esp),%eax
000059fa	movss	%xmm0,0x00000134(%eax)
00005a02	ret
00005a03	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetDistanceToTarget():
00005a10	movl	0x04(%esp),%eax
00005a14	flds	0x00000134(%eax)
00005a1a	ret
00005a1b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetForceShortMovement(bool):
00005a20	movb	0x08(%esp),%al
00005a24	shlb	$0x03,%al
00005a27	movl	0x04(%esp),%ecx
00005a2b	movb	0x00000179(%ecx),%dl
00005a31	andb	$0xf7,%dl
00005a34	orb	%al,%dl
00005a36	movb	%dl,0x00000179(%ecx)
00005a3c	ret
00005a3d	nopl	(%eax)
CChoreoEvent::GetForceShortMovement():
00005a40	movl	0x04(%esp),%eax
00005a44	movb	0x00000179(%eax),%al
00005a4a	andb	$0x08,%al
00005a4c	shrb	$0x03,%al
00005a4f	movzbl	%al,%eax
00005a52	ret
00005a53	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetSyncToFollowingGesture(bool):
00005a60	movb	0x08(%esp),%al
00005a64	shlb	$0x04,%al
00005a67	movl	0x04(%esp),%ecx
00005a6b	movb	0x00000179(%ecx),%dl
00005a71	andb	$0xef,%dl
00005a74	orb	%al,%dl
00005a76	movb	%dl,0x00000179(%ecx)
00005a7c	ret
00005a7d	nopl	(%eax)
CChoreoEvent::GetSyncToFollowingGesture():
00005a80	movl	0x04(%esp),%eax
00005a84	movb	0x00000179(%eax),%al
00005a8a	andb	$0x10,%al
00005a8c	shrb	$0x04,%al
00005a8f	movzbl	%al,%eax
00005a92	ret
00005a93	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetPlayOverScript(bool):
00005aa0	movb	0x08(%esp),%al
00005aa4	shlb	$0x06,%al
00005aa7	movl	0x04(%esp),%ecx
00005aab	movb	0x00000179(%ecx),%dl
00005ab1	andb	$0xbf,%dl
00005ab4	orb	%al,%dl
00005ab6	movb	%dl,0x00000179(%ecx)
00005abc	ret
00005abd	nopl	(%eax)
CChoreoEvent::GetPlayOverScript():
00005ac0	movl	0x04(%esp),%eax
00005ac4	movb	0x00000179(%eax),%al
00005aca	andb	$0x40,%al
00005acc	shrb	$0x06,%al
00005acf	movzbl	%al,%eax
00005ad2	ret
00005ad3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetDuration():
00005ae0	pushl	%eax
00005ae1	calll	0x00005ae6
00005ae6	popl	%ecx
00005ae7	movl	0x08(%esp),%eax
00005aeb	movss	0x4c(%eax),%xmm0
00005af0	pxor	%xmm1,%xmm1
00005af4	ucomiss	0x6e9f0-0x5ae6(%ecx),%xmm0
00005afb	jne	0x00005aff
00005afd	jnp	0x00005b07
00005aff	subss	0x48(%eax),%xmm0
00005b04	movaps	%xmm0,%xmm1
00005b07	movss	%xmm1,(%esp)
00005b0c	flds	(%esp)
00005b0f	popl	%eax
00005b10	ret
00005b11	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetNumRelativeTags():
00005b20	movl	0x04(%esp),%eax
00005b24	movl	0x000000c8(%eax),%eax
00005b2a	ret
00005b2b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetRelativeTag(int):
00005b30	movl	0x04(%esp),%ecx
00005b34	imull	$0x18,0x08(%esp),%eax
00005b39	addl	0x000000bc(%ecx),%eax
00005b3f	ret
CChoreoEvent::AddRelativeTag(char const*, float):
00005b40	pushl	%ebp
00005b41	movl	%esp,%ebp
00005b43	pushl	%esi
00005b44	subl	$0x34,%esp
00005b47	leal	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%esi
00005b4a	movl	%esi,(%esp)
00005b4d	calll	CUtlString::CUtlString()
00005b52	movl	0x0c(%ebp),%eax
00005b55	movl	%eax,0x04(%esp)
00005b59	movl	%esi,(%esp)
00005b5c	calll	CUtlString::operator=(char const*)
00005b61	movss	0x10(%ebp),%xmm0
00005b66	movl	0x08(%ebp),%eax
00005b69	movss	%xmm0,0xf0(%ebp)
00005b6e	movl	%eax,0xf4(%ebp)
00005b71	movl	0x000000c8(%eax),%ecx
00005b77	movl	%esi,0x08(%esp)
00005b7b	movl	%ecx,0x04(%esp)
00005b7f	addl	$0x000000bc,%eax
00005b84	movl	%eax,(%esp)
00005b87	calll	CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::InsertBefore(int, CEventRelativeTag const&)
00005b8c	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
00005b90	js	0x00005baf
00005b92	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00005b95	testl	%eax,%eax
00005b97	je	0x00005ba8
00005b99	movl	%eax,(%esp)
00005b9c	calll	_free
00005ba1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005ba8	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe4(%ebp)
00005baf	addl	$0x34,%esp
00005bb2	popl	%esi
00005bb3	popl	%ebp
00005bb4	ret
00005bb5	jmp	0x00005bb7
00005bb7	movl	%eax,%esi
00005bb9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
00005bbd	js	0x00005bdc
00005bbf	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00005bc2	testl	%eax,%eax
00005bc4	je	0x00005bd5
00005bc6	movl	%eax,(%esp)
00005bc9	calll	_free
00005bce	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005bd5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe4(%ebp)
00005bdc	movl	%esi,(%esp)
00005bdf	calll	__Unwind_Resume
00005be4	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RemoveRelativeTag(char const*):
00005bf0	pushl	%ebp
00005bf1	movl	%esp,%ebp
00005bf3	pushl	%ebx
00005bf4	pushl	%edi
00005bf5	pushl	%esi
00005bf6	subl	$0x0c,%esp
00005bf9	xorl	%ebx,%ebx
00005bfb	movl	$0x00000018,%edi
00005c00	movl	0x08(%ebp),%esi
00005c03	jmp	0x00005c14
00005c05	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00005c10	addl	$0x18,%edi
00005c13	incl	%ebx
00005c14	cmpl	0x000000c8(%esi),%ebx
00005c1a	jge	0x00005cba
00005c20	movl	0x000000bc(%esi),%eax
00005c26	leal	(%eax,%edi),%ecx
00005c29	cmpl	$0x18,%ecx
00005c2c	je	0x00005c10
00005c2e	leal	0xe8(%eax,%edi),%eax
00005c32	movl	%eax,(%esp)
00005c35	calll	CUtlString::Get()
00005c3a	movl	0x0c(%ebp),%ecx
00005c3d	movl	%ecx,0x04(%esp)
00005c41	movl	%eax,(%esp)
00005c44	calll	_strcasecmp
00005c49	testl	%eax,%eax
00005c4b	jne	0x00005c10
00005c4d	movl	0x000000bc(%esi),%esi
00005c53	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf0(%esi,%edi)
00005c58	js	0x00005c7a
00005c5a	movl	0xe8(%esi,%edi),%eax
00005c5e	testl	%eax,%eax
00005c60	je	0x00005c72
00005c62	movl	%eax,(%esp)
00005c65	calll	_free
00005c6a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%esi,%edi)
00005c72	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xec(%esi,%edi)
00005c7a	movl	0x08(%ebp),%esi
00005c7d	movl	0x000000c8(%esi),%eax
00005c83	movl	%eax,%ecx
00005c85	subl	%ebx,%ecx
00005c87	decl	%ecx
00005c88	testl	%ecx,%ecx
00005c8a	jle	0x00005cb3
00005c8c	imull	$0x18,%eax,%ecx
00005c8f	subl	%edi,%ecx
00005c91	movl	0x000000bc(%esi),%eax
00005c97	movl	%ecx,0x08(%esp)
00005c9b	leal	0xe8(%eax,%edi),%ecx
00005c9f	addl	%edi,%eax
00005ca1	movl	%eax,0x04(%esp)
00005ca5	movl	%ecx,(%esp)
00005ca8	calll	_memmove
00005cad	movl	0x000000c8(%esi),%eax
00005cb3	decl	%eax
00005cb4	movl	%eax,0x000000c8(%esi)
00005cba	addl	$0x0c,%esp
00005cbd	popl	%esi
00005cbe	popl	%edi
00005cbf	popl	%ebx
00005cc0	popl	%ebp
00005cc1	ret
00005cc2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindRelativeTag(char const*):
00005cd0	pushl	%ebp
00005cd1	movl	%esp,%ebp
00005cd3	pushl	%ebx
00005cd4	pushl	%edi
00005cd5	pushl	%esi
00005cd6	subl	$0x0c,%esp
00005cd9	xorl	%ecx,%ecx
00005cdb	movl	$0xffffffff,%ebx
00005ce0	movl	0x08(%ebp),%eax
00005ce3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00005cf0	incl	%ebx
00005cf1	cmpl	0x000000c8(%eax),%ebx
00005cf7	jge	0x00005d32
00005cf9	movl	0x000000bc(%eax),%esi
00005cff	addl	%ecx,%esi
00005d01	leal	0x18(%ecx),%ecx
00005d04	je	0x00005cf0
00005d06	movl	%esi,(%esp)
00005d09	movl	%ecx,%edi
00005d0b	calll	CUtlString::Get()
00005d10	movl	0x0c(%ebp),%ecx
00005d13	movl	%ecx,0x04(%esp)
00005d17	movl	%eax,(%esp)
00005d1a	calll	_strcasecmp
00005d1f	movl	%edi,%ecx
00005d21	testl	%eax,%eax
00005d23	movl	0x08(%ebp),%eax
00005d26	jne	0x00005cf0
00005d28	movl	%esi,%eax
00005d2a	addl	$0x0c,%esp
00005d2d	popl	%esi
00005d2e	popl	%edi
00005d2f	popl	%ebx
00005d30	popl	%ebp
00005d31	ret
00005d32	xorl	%esi,%esi
00005d34	jmp	0x00005d28
00005d36	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::IsUsingRelativeTag():
00005d40	movl	0x04(%esp),%eax
00005d44	movb	0x00000178(%eax),%al
00005d4a	andb	$0x04,%al
00005d4c	shrb	$0x02,%al
00005d4f	movzbl	%al,%eax
00005d52	ret
00005d53	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetRelativeTagName():
00005d60	pushl	%ebp
00005d61	movl	%esp,%ebp
00005d63	subl	$0x08,%esp
00005d66	movl	$0x00000094,%eax
00005d6b	addl	0x08(%ebp),%eax
00005d6e	movl	%eax,(%esp)
00005d71	calll	CUtlString::Get()
00005d76	addl	$0x08,%esp
00005d79	popl	%ebp
00005d7a	ret
00005d7b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetRelativeWavName():
00005d80	pushl	%ebp
00005d81	movl	%esp,%ebp
00005d83	subl	$0x08,%esp
00005d86	movl	$0x000000a4,%eax
00005d8b	addl	0x08(%ebp),%eax
00005d8e	movl	%eax,(%esp)
00005d91	calll	CUtlString::Get()
00005d96	addl	$0x08,%esp
00005d99	popl	%ebp
00005d9a	ret
00005d9b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetNumTimingTags():
00005da0	movl	0x04(%esp),%eax
00005da4	movl	0x000000dc(%eax),%eax
00005daa	ret
00005dab	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetTimingTag(int):
00005db0	movl	0x04(%esp),%ecx
00005db4	imull	$0x1c,0x08(%esp),%eax
00005db9	addl	0x000000d0(%ecx),%eax
00005dbf	ret
CChoreoEvent::AddTimingTag(char const*, float, bool):
00005dc0	pushl	%ebp
00005dc1	movl	%esp,%ebp
00005dc3	pushl	%ebx
00005dc4	pushl	%edi
00005dc5	pushl	%esi
00005dc6	subl	$0x6c,%esp
00005dc9	calll	0x00005dce
00005dce	popl	%esi
00005dcf	leal	0xd8(%ebp),%edi
00005dd2	movl	%edi,(%esp)
00005dd5	calll	CUtlString::CUtlString()
00005dda	movl	0x0c(%ebp),%eax
00005ddd	movl	%eax,0x04(%esp)
00005de1	movl	%edi,(%esp)
00005de4	calll	CUtlString::operator=(char const*)
00005de9	movb	0x14(%ebp),%al
00005dec	movss	0x10(%ebp),%xmm0
00005df1	movl	0x08(%ebp),%ecx
00005df4	movss	%xmm0,0xe8(%ebp)
00005df9	movl	%ecx,0xec(%ebp)
00005dfc	movb	%al,0xf0(%ebp)
00005dff	movl	0x000000dc(%ecx),%eax
00005e05	leal	0x000000d0(%ecx),%ecx
00005e0b	movl	%ecx,0x9c(%ebp)
00005e0e	movl	%edi,0x08(%esp)
00005e12	movl	%eax,0x04(%esp)
00005e16	movl	%ecx,(%esp)
00005e19	calll	CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::InsertBefore(int, CFlexTimingTag const&)
00005e1e	leal	0xb8(%ebp),%edi
00005e21	movl	%edi,(%esp)
00005e24	calll	CUtlString::CUtlString()
00005e29	leal	0x6f540-0x5dce(%esi),%eax
00005e2f	movl	%eax,0x04(%esp)
00005e33	movl	%edi,(%esp)
00005e36	calll	CUtlString::operator=(char const*)
00005e3b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
00005e42	movl	$0x00000001,0xcc(%ebp)
00005e49	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd0(%ebp)
00005e4d	movl	0x08(%ebp),%eax
00005e50	movl	0x000000dc(%eax),%eax
00005e56	xorl	%edx,%edx
00005e58	movl	$0x0000001c,%ecx
00005e5d	jmp	0x00005ea9
00005e5f	movl	%eax,%esi
00005e61	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005e65	js	0x00005e84
00005e67	movl	0xd8(%ebp),%eax
00005e6a	testl	%eax,%eax
00005e6c	je	0x00005e7d
00005e6e	movl	%eax,(%esp)
00005e71	calll	_free
00005e76	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00005e7d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00005e84	movl	%esi,(%esp)
00005e87	calll	__Unwind_Resume
00005e8c	jmp	0x00005faa
00005e91	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00005ea0	movl	0x98(%ebp),%ecx
00005ea3	addl	$0x1c,%ecx
00005ea6	movl	0x94(%ebp),%edx
00005ea9	movl	%edx,0xa0(%ebp)
00005eac	cmpl	%eax,%edx
00005eae	jge	0x00005fd8
00005eb4	leal	0x01(%edx),%esi
00005eb7	movl	%esi,0x94(%ebp)
00005eba	movl	%edx,0xb4(%ebp)
00005ebd	movl	%ecx,%esi
00005ebf	movl	%esi,0xb0(%ebp)
00005ec2	movl	%ecx,0x98(%ebp)
00005ec5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00005ed0	movl	0xb0(%ebp),%ebx
00005ed3	movl	0xb4(%ebp),%ecx
00005ed6	incl	%ecx
00005ed7	movl	%ecx,0xb4(%ebp)
00005eda	cmpl	%eax,%ecx
00005edc	jge	0x00005ea0
00005ede	leal	0x1c(%ebx),%ecx
00005ee1	movl	%ecx,0xb0(%ebp)
00005ee4	imull	$0x1c,%edx,%esi
00005ee7	movl	0x9c(%ebp),%ecx
00005eea	movl	(%ecx),%edi
00005eec	movss	0x10(%edi,%esi),%xmm0
00005ef2	ucomiss	0x10(%edi,%ebx),%xmm0
00005ef7	jbe	0x00005ed0
00005ef9	leal	(%edi,%esi),%eax
00005efc	movl	%eax,0xa8(%ebp)
00005eff	movl	%eax,0x04(%esp)
00005f03	leal	0xb8(%ebp),%eax
00005f06	movl	%eax,(%esp)
00005f09	calll	CUtlString::operator=(CUtlString const&)
00005f0e	leal	0x10(%edi,%esi),%eax
00005f12	movl	%eax,0xa4(%ebp)
00005f15	movss	(%eax),%xmm0
00005f19	movss	%xmm0,0xc8(%ebp)
00005f1e	movl	0x14(%edi,%esi),%eax
00005f22	movl	%eax,0xcc(%ebp)
00005f25	movb	0x18(%edi,%esi),%al
00005f29	andb	$0x01,%al
00005f2b	movb	%al,0xd0(%ebp)
00005f2e	leal	(%edi,%ebx),%eax
00005f31	movl	%eax,0xac(%ebp)
00005f34	movl	%eax,0x04(%esp)
00005f38	movl	0xa8(%ebp),%eax
00005f3b	movl	%eax,(%esp)
00005f3e	calll	CUtlString::operator=(CUtlString const&)
00005f43	leal	0x14(%edi,%esi),%ecx
00005f47	leal	0x18(%edi,%esi),%eax
00005f4b	movss	0x10(%edi,%ebx),%xmm0
00005f51	movl	0xa4(%ebp),%edx
00005f54	movss	%xmm0,(%edx)
00005f58	movl	0x14(%edi,%ebx),%edx
00005f5c	movl	%edx,(%ecx)
00005f5e	movb	0x18(%edi,%ebx),%cl
00005f62	andb	$0x01,%cl
00005f65	movb	%cl,(%eax)
00005f67	leal	0xb8(%ebp),%eax
00005f6a	movl	%eax,0x04(%esp)
00005f6e	movl	0xac(%ebp),%eax
00005f71	movl	%eax,(%esp)
00005f74	calll	CUtlString::operator=(CUtlString const&)
00005f79	movss	0xc8(%ebp),%xmm0
00005f7e	movss	%xmm0,0x10(%edi,%ebx)
00005f84	movl	0xcc(%ebp),%eax
00005f87	movl	%eax,0x14(%edi,%ebx)
00005f8b	movb	0xd0(%ebp),%al
00005f8e	andb	$0x01,%al
00005f90	movb	%al,0x18(%edi,%ebx)
00005f94	movl	0x08(%ebp),%eax
00005f97	movl	0x000000dc(%eax),%eax
00005f9d	movl	0xa0(%ebp),%edx
00005fa0	jmp	0x00005ed0
00005fa5	jmp	0x00005e5f
00005faa	movl	%eax,%esi
00005fac	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00005fb0	js	0x00005e61
00005fb6	movl	0xb8(%ebp),%eax
00005fb9	testl	%eax,%eax
00005fbb	je	0x00005fcc
00005fbd	movl	%eax,(%esp)
00005fc0	calll	_free
00005fc5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00005fcc	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00005fd3	jmp	0x00005e61
00005fd8	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00005fdc	js	0x00005ffb
00005fde	movl	0xb8(%ebp),%eax
00005fe1	testl	%eax,%eax
00005fe3	je	0x00005ff4
00005fe5	movl	%eax,(%esp)
00005fe8	calll	_free
00005fed	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00005ff4	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00005ffb	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00005fff	js	0x0000601e
00006001	movl	0xd8(%ebp),%eax
00006004	testl	%eax,%eax
00006006	je	0x00006017
00006008	movl	%eax,(%esp)
0000600b	calll	_free
00006010	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00006017	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
0000601e	addl	$0x6c,%esp
00006021	popl	%esi
00006022	popl	%edi
00006023	popl	%ebx
00006024	popl	%ebp
00006025	ret
00006026	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RemoveTimingTag(char const*):
00006030	pushl	%ebp
00006031	movl	%esp,%ebp
00006033	pushl	%ebx
00006034	pushl	%edi
00006035	pushl	%esi
00006036	subl	$0x0c,%esp
00006039	xorl	%ebx,%ebx
0000603b	movl	$0x0000001c,%edi
00006040	movl	0x08(%ebp),%esi
00006043	jmp	0x00006054
00006045	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00006050	addl	$0x1c,%edi
00006053	incl	%ebx
00006054	cmpl	0x000000dc(%esi),%ebx
0000605a	jge	0x000060fa
00006060	movl	0x000000d0(%esi),%eax
00006066	leal	(%eax,%edi),%ecx
00006069	cmpl	$0x1c,%ecx
0000606c	je	0x00006050
0000606e	leal	0xe4(%eax,%edi),%eax
00006072	movl	%eax,(%esp)
00006075	calll	CUtlString::Get()
0000607a	movl	0x0c(%ebp),%ecx
0000607d	movl	%ecx,0x04(%esp)
00006081	movl	%eax,(%esp)
00006084	calll	_strcasecmp
00006089	testl	%eax,%eax
0000608b	jne	0x00006050
0000608d	movl	0x000000d0(%esi),%esi
00006093	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xec(%esi,%edi)
00006098	js	0x000060ba
0000609a	movl	0xe4(%esi,%edi),%eax
0000609e	testl	%eax,%eax
000060a0	je	0x000060b2
000060a2	movl	%eax,(%esp)
000060a5	calll	_free
000060aa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe4(%esi,%edi)
000060b2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%esi,%edi)
000060ba	movl	0x08(%ebp),%esi
000060bd	movl	0x000000dc(%esi),%eax
000060c3	movl	%eax,%ecx
000060c5	subl	%ebx,%ecx
000060c7	decl	%ecx
000060c8	testl	%ecx,%ecx
000060ca	jle	0x000060f3
000060cc	imull	$0x1c,%eax,%ecx
000060cf	subl	%edi,%ecx
000060d1	movl	0x000000d0(%esi),%eax
000060d7	movl	%ecx,0x08(%esp)
000060db	leal	0xe4(%eax,%edi),%ecx
000060df	addl	%edi,%eax
000060e1	movl	%eax,0x04(%esp)
000060e5	movl	%ecx,(%esp)
000060e8	calll	_memmove
000060ed	movl	0x000000dc(%esi),%eax
000060f3	decl	%eax
000060f4	movl	%eax,0x000000dc(%esi)
000060fa	addl	$0x0c,%esp
000060fd	popl	%esi
000060fe	popl	%edi
000060ff	popl	%ebx
00006100	popl	%ebp
00006101	ret
00006102	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindTimingTag(char const*):
00006110	pushl	%ebp
00006111	movl	%esp,%ebp
00006113	pushl	%ebx
00006114	pushl	%edi
00006115	pushl	%esi
00006116	subl	$0x0c,%esp
00006119	xorl	%ecx,%ecx
0000611b	movl	$0xffffffff,%ebx
00006120	movl	0x08(%ebp),%eax
00006123	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00006130	incl	%ebx
00006131	cmpl	0x000000dc(%eax),%ebx
00006137	jge	0x00006172
00006139	movl	0x000000d0(%eax),%esi
0000613f	addl	%ecx,%esi
00006141	leal	0x1c(%ecx),%ecx
00006144	je	0x00006130
00006146	movl	%esi,(%esp)
00006149	movl	%ecx,%edi
0000614b	calll	CUtlString::Get()
00006150	movl	0x0c(%ebp),%ecx
00006153	movl	%ecx,0x04(%esp)
00006157	movl	%eax,(%esp)
0000615a	calll	_strcasecmp
0000615f	movl	%edi,%ecx
00006161	testl	%eax,%eax
00006163	movl	0x08(%ebp),%eax
00006166	jne	0x00006130
00006168	movl	%esi,%eax
0000616a	addl	$0x0c,%esp
0000616d	popl	%esi
0000616e	popl	%edi
0000616f	popl	%ebx
00006170	popl	%ebp
00006171	ret
00006172	xorl	%esi,%esi
00006174	jmp	0x00006168
00006176	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetNumFlexAnimationTracks():
00006180	movl	0x04(%esp),%eax
00006184	movl	0x00000118(%eax),%eax
0000618a	ret
0000618b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetFlexAnimationTrack(int):
00006190	xorl	%eax,%eax
00006192	movl	0x08(%esp),%ecx
00006196	testl	%ecx,%ecx
00006198	js	0x000061b1
0000619a	movl	0x04(%esp),%edx
0000619e	xorl	%eax,%eax
000061a0	cmpl	%ecx,0x00000118(%edx)
000061a6	jle	0x000061b1
000061a8	movl	0x0000010c(%edx),%eax
000061ae	movl	(%eax,%ecx,4),%eax
000061b1	ret
000061b2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::AddTrack(char const*):
000061c0	pushl	%ebp
000061c1	movl	%esp,%ebp
000061c3	pushl	%ebx
000061c4	pushl	%edi
000061c5	pushl	%esi
000061c6	subl	$0x1c,%esp
000061c9	calll	0x000061ce
000061ce	popl	%edi
000061cf	movl	$0x00000060,(%esp)
000061d6	calll	operator new(unsigned long)
000061db	movl	%eax,%esi
000061dd	leal	vtable for CFlexAnimationTrack-0x61ce+0x00000008(%edi),%eax
000061e3	movl	%eax,(%esi)
000061e5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x14(%esi)
000061ec	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x10(%esi)
000061f3	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x1c(%esi)
000061fa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x18(%esi)
00006201	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x24(%esi)
00006208	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x20(%esi)
0000620f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x2c(%esi)
00006216	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x28(%esi)
0000621d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x34(%esi)
00006224	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x30(%esi)
0000622b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4c(%esi)
00006232	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x48(%esi)
00006239	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x54(%esi)
0000623f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x50(%esi)
00006246	movl	0x08(%ebp),%ebx
00006249	movl	%ebx,0x58(%esi)
0000624c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esi)
00006253	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x5c(%esi)
00006257	movl	$0xffffffff,0x44(%esi)
0000625e	movl	$0xffffffff,0x40(%esi)
00006265	movl	$0xffffffff,0x3c(%esi)
0000626c	movl	$0xffffffff,0x38(%esi)
00006273	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%esi)
0000627a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%esi)
00006281	movl	0x0c(%ebp),%eax
00006284	movl	%eax,(%esp)
00006287	calll	_strlen
0000628c	movl	%eax,%edi
0000628e	incl	%edi
0000628f	testl	%edi,%edi
00006291	movl	$0xffffffff,%eax
00006296	cmovnsl	%edi,%eax
00006299	movl	%eax,(%esp)
0000629c	calll	operator new[](unsigned long)
000062a1	movl	%eax,0x04(%esi)
000062a4	movl	%edi,0x08(%esp)
000062a8	movl	0x0c(%ebp),%ecx
000062ab	movl	%ecx,0x04(%esp)
000062af	movl	%eax,(%esp)
000062b2	calll	V_strncpy(char*, char const*, int)
000062b7	movl	0x00000110(%ebx),%eax
000062bd	movl	0x00000118(%ebx),%edi
000062c3	leal	0x0000010c(%ebx),%ebx
000062c9	leal	0x01(%edi),%edx
000062cc	cmpl	%eax,%edx
000062ce	movl	%edi,%ecx
000062d0	jle	0x000062f5
000062d2	movl	%edx,%ecx
000062d4	subl	%eax,%ecx
000062d6	movl	%ecx,0x04(%esp)
000062da	movl	%ebx,(%esp)
000062dd	movl	%ebx,0xf0(%ebp)
000062e0	movl	%edx,%ebx
000062e2	calll	CUtlMemory<CFlexAnimationTrack*, int>::Grow(int)
000062e7	movl	%ebx,%edx
000062e9	movl	0xf0(%ebp),%ebx
000062ec	movl	0x08(%ebp),%eax
000062ef	movl	0x00000118(%eax),%ecx
000062f5	movl	%ebx,0xf0(%ebp)
000062f8	incl	%ecx
000062f9	movl	0x08(%ebp),%ebx
000062fc	movl	%ecx,0x00000118(%ebx)
00006302	movl	0x0000010c(%ebx),%eax
00006308	movl	%eax,0x0000011c(%ebx)
0000630e	subl	%edi,%ecx
00006310	decl	%ecx
00006311	testl	%ecx,%ecx
00006313	jle	0x00006333
00006315	shll	$0x02,%ecx
00006318	movl	%ecx,0x08(%esp)
0000631c	leal	(%eax,%edi,4),%ecx
0000631f	movl	%ecx,0x04(%esp)
00006323	leal	(%eax,%edx,4),%eax
00006326	movl	%eax,(%esp)
00006329	calll	_memmove
0000632e	movl	0xf0(%ebp),%eax
00006331	movl	(%eax),%eax
00006333	shll	$0x02,%edi
00006336	addl	%eax,%edi
00006338	je	0x0000633c
0000633a	movl	%esi,(%edi)
0000633c	movl	%esi,%eax
0000633e	addl	$0x1c,%esp
00006341	popl	%esi
00006342	popl	%edi
00006343	popl	%ebx
00006344	popl	%ebp
00006345	ret
00006346	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RemoveTrack(int):
00006350	pushl	%ebp
00006351	movl	%esp,%ebp
00006353	pushl	%ebx
00006354	pushl	%edi
00006355	pushl	%esi
00006356	subl	$0x0c,%esp
00006359	movl	0x0c(%ebp),%eax
0000635c	testl	%eax,%eax
0000635e	js	0x000063b2
00006360	movl	0x08(%ebp),%esi
00006363	movl	0x00000118(%esi),%ecx
00006369	cmpl	%eax,%ecx
0000636b	jle	0x000063b2
0000636d	movl	0x0000010c(%esi),%edx
00006373	movl	(%edx,%eax,4),%edi
00006376	testl	%edi,%edi
00006378	je	0x000063b2
0000637a	movl	%ecx,%ebx
0000637c	subl	%eax,%ebx
0000637e	decl	%ebx
0000637f	testl	%ebx,%ebx
00006381	jle	0x000063a3
00006383	leal	(%edx,%eax,4),%ecx
00006386	shll	$0x02,%ebx
00006389	movl	%ebx,0x08(%esp)
0000638d	leal	0x04(%edx,%eax,4),%eax
00006391	movl	%eax,0x04(%esp)
00006395	movl	%ecx,(%esp)
00006398	calll	_memmove
0000639d	movl	0x00000118(%esi),%ecx
000063a3	decl	%ecx
000063a4	movl	%ecx,0x00000118(%esi)
000063aa	movl	(%edi),%eax
000063ac	movl	%edi,(%esp)
000063af	call	*0x04(%eax)
000063b2	addl	$0x0c,%esp
000063b5	popl	%esi
000063b6	popl	%edi
000063b7	popl	%ebx
000063b8	popl	%ebp
000063b9	ret
000063ba	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindTrack(char const*):
000063c0	pushl	%ebp
000063c1	movl	%esp,%ebp
000063c3	pushl	%ebx
000063c4	pushl	%edi
000063c5	pushl	%esi
000063c6	subl	$0x0c,%esp
000063c9	calll	0x000063ce
000063ce	popl	%eax
000063cf	movl	0x08(%ebp),%ecx
000063d2	movl	0x00000118(%ecx),%ebx
000063d8	xorl	%edi,%edi
000063da	leal	0x6f540-0x63ce(%eax),%eax
000063e0	movl	%eax,0xf0(%ebp)
000063e3	jmp	0x00006421
000063e5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000063f0	cmpl	%edi,%ebx
000063f2	jle	0x00006420
000063f4	movl	0x08(%ebp),%eax
000063f7	movl	0x0000010c(%eax),%eax
000063fd	movl	(%eax,%edi,4),%esi
00006400	testl	%esi,%esi
00006402	je	0x00006420
00006404	movl	0x04(%esi),%eax
00006407	movl	0x0c(%ebp),%ecx
0000640a	movl	%ecx,0x04(%esp)
0000640e	testl	%eax,%eax
00006410	cmovel	0xf0(%ebp),%eax
00006414	movl	%eax,(%esp)
00006417	calll	_strcasecmp
0000641c	testl	%eax,%eax
0000641e	je	0x00006427
00006420	incl	%edi
00006421	cmpl	%ebx,%edi
00006423	jl	0x000063f0
00006425	xorl	%esi,%esi
00006427	movl	%esi,%eax
00006429	addl	$0x0c,%esp
0000642c	popl	%esi
0000642d	popl	%edi
0000642e	popl	%ebx
0000642f	popl	%ebp
00006430	ret
00006431	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetTrackLookupSet():
00006440	movl	0x04(%esp),%eax
00006444	movb	0x00000178(%eax),%al
0000644a	andb	$0x08,%al
0000644c	shrb	$0x03,%al
0000644f	movzbl	%al,%eax
00006452	ret
00006453	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetTrackLookupSet(bool):
00006460	movb	0x08(%esp),%al
00006464	shlb	$0x03,%al
00006467	movl	0x04(%esp),%ecx
0000646b	movb	0x00000178(%ecx),%dl
00006471	andb	$0xf7,%dl
00006474	orb	%al,%dl
00006476	movb	%dl,0x00000178(%ecx)
0000647c	ret
0000647d	nopl	(%eax)
CChoreoEvent::IsProcessing() const:
00006480	movl	0x04(%esp),%eax
00006484	movb	0x00000178(%eax),%al
0000648a	andb	$0x10,%al
0000648c	shrb	$0x04,%al
0000648f	movzbl	%al,%eax
00006492	ret
00006493	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float):
000064a0	pushl	%ebp
000064a1	movl	%esp,%ebp
000064a3	pushl	%esi
000064a4	subl	$0x14,%esp
000064a7	movl	0x08(%ebp),%ecx
000064aa	orb	$0x10,0x00000178(%ecx)
000064b1	movl	0x0c(%ebp),%eax
000064b4	testl	%eax,%eax
000064b6	je	0x000064d5
000064b8	movss	0x14(%ebp),%xmm0
000064bd	movl	0x10(%ebp),%esi
000064c0	movl	(%eax),%edx
000064c2	movl	%ecx,0x0c(%esp)
000064c6	movl	%esi,0x08(%esp)
000064ca	movss	%xmm0,0x04(%esp)
000064d0	movl	%eax,(%esp)
000064d3	call	(%edx)
000064d5	addl	$0x14,%esp
000064d8	popl	%esi
000064d9	popl	%ebp
000064da	ret
000064db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float):
000064e0	pushl	%ebp
000064e1	movl	%esp,%ebp
000064e3	pushl	%esi
000064e4	subl	$0x14,%esp
000064e7	movl	0x0c(%ebp),%eax
000064ea	testl	%eax,%eax
000064ec	je	0x0000650f
000064ee	movss	0x14(%ebp),%xmm0
000064f3	movl	0x10(%ebp),%edx
000064f6	movl	0x08(%ebp),%esi
000064f9	movl	(%eax),%ecx
000064fb	movl	%esi,0x0c(%esp)
000064ff	movl	%edx,0x08(%esp)
00006503	movss	%xmm0,0x04(%esp)
00006509	movl	%eax,(%esp)
0000650c	call	*0x08(%ecx)
0000650f	addl	$0x14,%esp
00006512	popl	%esi
00006513	popl	%ebp
00006514	ret
00006515	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float):
00006520	pushl	%ebp
00006521	movl	%esp,%ebp
00006523	pushl	%esi
00006524	subl	$0x14,%esp
00006527	movl	0x0c(%ebp),%eax
0000652a	movl	0x08(%ebp),%esi
0000652d	testl	%eax,%eax
0000652f	je	0x0000654f
00006531	movss	0x14(%ebp),%xmm0
00006536	movl	0x10(%ebp),%edx
00006539	movl	(%eax),%ecx
0000653b	movl	%esi,0x0c(%esp)
0000653f	movl	%edx,0x08(%esp)
00006543	movss	%xmm0,0x04(%esp)
00006549	movl	%eax,(%esp)
0000654c	call	*0x04(%ecx)
0000654f	andb	$0xef,0x00000178(%esi)
00006556	addl	$0x14,%esp
00006559	popl	%esi
0000655a	popl	%ebp
0000655b	ret
0000655c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float):
00006560	pushl	%ebp
00006561	movl	%esp,%ebp
00006563	pushl	%esi
00006564	subl	$0x14,%esp
00006567	movb	$0x01,%al
00006569	movl	0x0c(%ebp),%ecx
0000656c	testl	%ecx,%ecx
0000656e	je	0x00006591
00006570	movss	0x14(%ebp),%xmm0
00006575	movl	0x10(%ebp),%edx
00006578	movl	0x08(%ebp),%esi
0000657b	movl	(%ecx),%eax
0000657d	movl	%esi,0x0c(%esp)
00006581	movl	%edx,0x08(%esp)
00006585	movss	%xmm0,0x04(%esp)
0000658b	movl	%ecx,(%esp)
0000658e	call	*0x0c(%eax)
00006591	movzbl	%al,%eax
00006594	addl	$0x14,%esp
00006597	popl	%esi
00006598	popl	%ebp
00006599	ret
0000659a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::ResetProcessing():
000065a0	movl	0x04(%esp),%eax
000065a4	cmpb	$0x0c,0x04(%eax)
000065a8	jne	0x000065b0
000065aa	movl	0x54(%eax),%ecx
000065ad	movl	%ecx,0x58(%eax)
000065b0	andb	$0xef,0x00000178(%eax)
000065b7	ret
000065b8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetMixer(CAudioMixer*):
000065c0	movl	0x08(%esp),%eax
000065c4	movl	0x04(%esp),%ecx
000065c8	movl	%eax,0x00000124(%ecx)
000065ce	ret
000065cf	nop
CChoreoEvent::GetMixer() const:
000065d0	movl	0x04(%esp),%eax
000065d4	movl	0x00000124(%eax),%eax
000065da	ret
000065db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SnapTimes():
000065e0	pushl	%ebp
000065e1	movl	%esp,%ebp
000065e3	pushl	%esi
000065e4	subl	$0x14,%esp
000065e7	calll	0x000065ec
000065ec	popl	%eax
000065ed	movl	0x08(%ebp),%esi
000065f0	movss	0x4c(%esi),%xmm0
000065f5	ucomiss	0x6e9f4-0x65ec(%eax),%xmm0
000065fc	jne	0x00006600
000065fe	jnp	0x0000662e
00006600	testb	$0x01,0x00000178(%esi)
00006607	jne	0x0000662e
00006609	movl	0x00000128(%esi),%eax
0000660f	testl	%eax,%eax
00006611	je	0x00006629
00006613	movss	%xmm0,0x04(%esp)
00006619	movl	%eax,(%esp)
0000661c	calll	CChoreoScene::SnapTime(float)
00006621	fstps	0xf8(%ebp)
00006624	movss	0xf8(%ebp),%xmm0
00006629	movss	%xmm0,0x4c(%esi)
0000662e	movss	0x48(%esi),%xmm1
00006633	movl	0x00000128(%esi),%eax
00006639	testl	%eax,%eax
0000663b	movaps	%xmm1,%xmm0
0000663e	je	0x00006660
00006640	movss	%xmm1,0x04(%esp)
00006646	movl	%eax,(%esp)
00006649	movss	%xmm1,0xf0(%ebp)
0000664e	calll	CChoreoScene::SnapTime(float)
00006653	movss	0xf0(%ebp),%xmm1
00006658	fstps	0xf4(%ebp)
0000665b	movss	0xf4(%ebp),%xmm0
00006660	movss	%xmm0,0x48(%esi)
00006665	testb	$0x01,0x00000178(%esi)
0000666c	je	0x0000667c
0000666e	subss	%xmm1,%xmm0
00006672	addss	0x4c(%esi),%xmm0
00006677	movss	%xmm0,0x4c(%esi)
0000667c	addl	$0x14,%esp
0000667f	popl	%esi
00006680	popl	%ebp
00006681	ret
00006682	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SnapTime(float):
00006690	pushl	%ebp
00006691	movl	%esp,%ebp
00006693	subl	$0x18,%esp
00006696	movl	0x08(%ebp),%eax
00006699	movl	0x00000128(%eax),%eax
0000669f	movss	0x0c(%ebp),%xmm0
000066a4	testl	%eax,%eax
000066a6	je	0x000066b8
000066a8	movss	%xmm0,0x04(%esp)
000066ae	movl	%eax,(%esp)
000066b1	calll	CChoreoScene::SnapTime(float)
000066b6	jmp	0x000066c0
000066b8	movss	%xmm0,0xfc(%ebp)
000066bd	flds	0xfc(%ebp)
000066c0	addl	$0x18,%esp
000066c3	popl	%ebp
000066c4	ret
000066c5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetScene():
000066d0	movl	0x04(%esp),%eax
000066d4	movl	0x00000128(%eax),%eax
000066da	ret
000066db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetScene(CChoreoScene*):
000066e0	movl	0x08(%esp),%eax
000066e4	movl	0x04(%esp),%ecx
000066e8	movl	%eax,0x00000128(%ecx)
000066ee	ret
000066ef	nop
CChoreoEvent::NameForAbsoluteTagType(CChoreoEvent::AbsTagType):
000066f0	calll	0x000066f5
000066f5	popl	%eax
000066f6	movl	0x04(%esp),%ecx
000066fa	testl	%ecx,%ecx
000066fc	jne	0x00006705
000066fe	leal	0x6f569-0x66f5(%eax),%eax
00006704	ret
00006705	cmpl	$0x01,%ecx
00006708	jne	0x00006711
0000670a	leal	0x6f577-0x66f5(%eax),%eax
00006710	ret
00006711	leal	0x6f584-0x66f5(%eax),%eax
00006717	ret
00006718	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::TypeForAbsoluteTagName(char const*):
00006720	pushl	%ebp
00006721	movl	%esp,%ebp
00006723	pushl	%edi
00006724	pushl	%esi
00006725	subl	$0x10,%esp
00006728	calll	0x0000672d
0000672d	popl	%esi
0000672e	leal	0x6f569-0x672d(%esi),%eax
00006734	movl	%eax,0x04(%esp)
00006738	movl	0x08(%ebp),%edi
0000673b	movl	%edi,(%esp)
0000673e	calll	V_stricmp(char const*, char const*)
00006743	movl	%eax,%ecx
00006745	xorl	%eax,%eax
00006747	testl	%ecx,%ecx
00006749	je	0x00006767
0000674b	leal	0x6f577-0x672d(%esi),%eax
00006751	movl	%eax,0x04(%esp)
00006755	movl	%edi,(%esp)
00006758	calll	V_stricmp(char const*, char const*)
0000675d	cmpl	$0x01,%eax
00006760	sbbl	%eax,%eax
00006762	notl	%eax
00006764	orl	$0x01,%eax
00006767	addl	$0x10,%esp
0000676a	popl	%esi
0000676b	popl	%edi
0000676c	popl	%ebp
0000676d	ret
0000676e	nop
CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType):
00006770	imull	$0x14,0x08(%esp),%eax
00006775	movl	0x04(%esp),%ecx
00006779	movl	0x000000f0(%ecx,%eax),%eax
00006780	ret
00006781	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetAbsoluteTag(CChoreoEvent::AbsTagType, int):
00006790	imull	$0x14,0x08(%esp),%ecx
00006795	movl	0x04(%esp),%edx
00006799	imull	$0x1c,0x0c(%esp),%eax
0000679e	addl	0x000000e4(%edx,%ecx),%eax
000067a5	ret
000067a6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindAbsoluteTag(CChoreoEvent::AbsTagType, char const*):
000067b0	pushl	%ebp
000067b1	movl	%esp,%ebp
000067b3	pushl	%ebx
000067b4	pushl	%edi
000067b5	pushl	%esi
000067b6	subl	$0x1c,%esp
000067b9	imull	$0x14,0x0c(%ebp),%eax
000067bd	movl	0x08(%ebp),%ecx
000067c0	leal	0x000000e4(%ecx,%eax),%edx
000067c7	movl	%edx,0xf0(%ebp)
000067ca	leal	0x000000f0(%ecx,%eax),%eax
000067d1	movl	%eax,0xec(%ebp)
000067d4	xorl	%edi,%edi
000067d6	movl	$0xffffffff,%ebx
000067db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000067e0	incl	%ebx
000067e1	movl	0xec(%ebp),%eax
000067e4	cmpl	(%eax),%ebx
000067e6	jge	0x00006819
000067e8	movl	0xf0(%ebp),%eax
000067eb	movl	(%eax),%esi
000067ed	addl	%edi,%esi
000067ef	leal	0x1c(%edi),%edi
000067f2	je	0x000067e0
000067f4	movl	%esi,(%esp)
000067f7	calll	CUtlString::Get()
000067fc	movl	0x10(%ebp),%ecx
000067ff	movl	%ecx,0x04(%esp)
00006803	movl	%eax,(%esp)
00006806	calll	_strcasecmp
0000680b	testl	%eax,%eax
0000680d	jne	0x000067e0
0000680f	movl	%esi,%eax
00006811	addl	$0x1c,%esp
00006814	popl	%esi
00006815	popl	%edi
00006816	popl	%ebx
00006817	popl	%ebp
00006818	ret
00006819	xorl	%esi,%esi
0000681b	jmp	0x0000680f
0000681d	nopl	(%eax)
CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float):
00006820	pushl	%ebp
00006821	movl	%esp,%ebp
00006823	pushl	%ebx
00006824	pushl	%edi
00006825	pushl	%esi
00006826	subl	$0x7c,%esp
00006829	calll	0x0000682e
0000682e	popl	%eax
0000682f	movl	%eax,0xb4(%ebp)
00006832	leal	0xd8(%ebp),%esi
00006835	movl	%esi,(%esp)
00006838	calll	CUtlString::CUtlString()
0000683d	movl	0x10(%ebp),%eax
00006840	movl	%eax,0x04(%esp)
00006844	movl	%esi,(%esp)
00006847	calll	CUtlString::operator=(char const*)
0000684c	movss	0x14(%ebp),%xmm0
00006851	movl	0x0c(%ebp),%eax
00006854	movl	0x08(%ebp),%ecx
00006857	movss	%xmm0,0xe8(%ebp)
0000685c	imull	$0x14,%eax,%edi
0000685f	movl	%ecx,0xf0(%ebp)
00006862	leal	0x000000f0(%ecx,%edi),%ebx
00006869	leal	0x000000e4(%ecx,%edi),%esi
00006870	andb	$0xf0,0xec(%ebp)
00006874	movl	0x000000e8(%ecx,%edi),%eax
0000687b	movl	0x000000f0(%ecx,%edi),%ecx
00006882	movl	%ecx,0xb0(%ebp)
00006885	leal	0x01(%ecx),%edx
00006888	cmpl	%eax,%edx
0000688a	jle	0x000068a4
0000688c	movl	%edx,%ecx
0000688e	subl	%eax,%ecx
00006890	movl	%ecx,0x04(%esp)
00006894	movl	%esi,(%esp)
00006897	movl	%edx,0xac(%ebp)
0000689a	calll	CUtlMemory<CEventAbsoluteTag, int>::Grow(int)
0000689f	movl	0xac(%ebp),%edx
000068a2	movl	(%ebx),%ecx
000068a4	incl	%ecx
000068a5	movl	%ecx,(%ebx)
000068a7	movl	%ebx,0x9c(%ebp)
000068aa	movl	(%esi),%eax
000068ac	movl	0x08(%ebp),%ebx
000068af	movl	%eax,0x000000f4(%ebx,%edi)
000068b6	movl	0xb0(%ebp),%edi
000068b9	subl	%edi,%ecx
000068bb	decl	%ecx
000068bc	testl	%ecx,%ecx
000068be	jle	0x000068df
000068c0	imull	$0x1c,%ecx,%ecx
000068c3	movl	%ecx,0x08(%esp)
000068c7	imull	$0x1c,%edi,%ecx
000068ca	addl	%eax,%ecx
000068cc	movl	%ecx,0x04(%esp)
000068d0	imull	$0x1c,%edx,%ecx
000068d3	addl	%eax,%ecx
000068d5	movl	%ecx,(%esp)
000068d8	calll	_memmove
000068dd	movl	(%esi),%eax
000068df	imull	$0x1c,%edi,%ecx
000068e2	addl	%eax,%ecx
000068e4	je	0x000068f5
000068e6	leal	0xd8(%ebp),%eax
000068e9	movl	%eax,0x04(%esp)
000068ed	movl	%ecx,(%esp)
000068f0	calll	CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
000068f5	leal	0xb8(%ebp),%edi
000068f8	movl	%edi,(%esp)
000068fb	calll	CUtlString::CUtlString()
00006900	movl	0xb4(%ebp),%eax
00006903	leal	0x6f540-0x682e(%eax),%eax
00006909	movl	%eax,0x04(%esp)
0000690d	movl	%edi,(%esp)
00006910	calll	CUtlString::operator=(char const*)
00006915	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc8(%ebp)
0000691c	movl	$0x00000001,0xd0(%ebp)
00006923	andb	$0xf0,0xcc(%ebp)
00006927	movl	0x9c(%ebp),%eax
0000692a	movl	(%eax),%eax
0000692c	movl	$0x0000001c,%edx
00006931	movl	%esi,%ecx
00006933	xorl	%esi,%esi
00006935	movl	%ecx,0x98(%ebp)
00006938	jmp	0x00006979
0000693a	movl	%eax,%esi
0000693c	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00006940	js	0x0000695f
00006942	movl	0xd8(%ebp),%eax
00006945	testl	%eax,%eax
00006947	je	0x00006958
00006949	movl	%eax,(%esp)
0000694c	calll	_free
00006951	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00006958	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
0000695f	movl	%esi,(%esp)
00006962	calll	__Unwind_Resume
00006967	jmp	0x00006b0a
0000696c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00006970	movl	0x94(%ebp),%edx
00006973	addl	$0x1c,%edx
00006976	movl	0x90(%ebp),%esi
00006979	cmpl	%eax,%esi
0000697b	jge	0x00006b38
00006981	leal	0x01(%esi),%edi
00006984	movl	%edi,0x90(%ebp)
00006987	movl	%esi,0xb4(%ebp)
0000698a	movl	%esi,0xa0(%ebp)
0000698d	movl	%edx,%esi
0000698f	movl	%esi,0xb0(%ebp)
00006992	movl	%edx,0x94(%ebp)
00006995	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000069a0	movl	0xb0(%ebp),%ebx
000069a3	movl	0xb4(%ebp),%edx
000069a6	incl	%edx
000069a7	movl	%edx,0xb4(%ebp)
000069aa	cmpl	%eax,%edx
000069ac	jge	0x00006970
000069ae	leal	0x1c(%ebx),%edx
000069b1	movl	%edx,0xb0(%ebp)
000069b4	imull	$0x1c,0xa0(%ebp),%esi
000069b8	movl	(%ecx),%edi
000069ba	movss	0x10(%edi,%esi),%xmm0
000069c0	ucomiss	0x10(%edi,%ebx),%xmm0
000069c5	jbe	0x000069a0
000069c7	leal	(%edi,%esi),%eax
000069ca	movl	%eax,0xa8(%ebp)
000069cd	movl	%eax,0x04(%esp)
000069d1	leal	0xb8(%ebp),%eax
000069d4	movl	%eax,(%esp)
000069d7	calll	CUtlString::operator=(CUtlString const&)
000069dc	leal	0x10(%edi,%esi),%eax
000069e0	movl	%eax,0xa4(%ebp)
000069e3	movss	(%eax),%xmm0
000069e7	movss	%xmm0,0xc8(%ebp)
000069ec	movb	0x14(%edi,%esi),%cl
000069f0	andb	$0x01,%cl
000069f3	movb	0xcc(%ebp),%al
000069f6	andb	$0xfe,%al
000069f8	orb	%cl,%al
000069fa	movb	%al,0xcc(%ebp)
000069fd	andb	$0xfd,%al
000069ff	movb	0x14(%edi,%esi),%cl
00006a03	andb	$0x02,%cl
00006a06	orb	%al,%cl
00006a08	movb	%cl,0xcc(%ebp)
00006a0b	andb	$0xfb,%cl
00006a0e	movb	0x14(%edi,%esi),%al
00006a12	andb	$0x04,%al
00006a14	orb	%cl,%al
00006a16	movb	%al,0xcc(%ebp)
00006a19	andb	$0xf7,%al
00006a1b	movb	0x14(%edi,%esi),%cl
00006a1f	andb	$0x08,%cl
00006a22	orb	%al,%cl
00006a24	movb	%cl,0xcc(%ebp)
00006a27	movl	0x18(%edi,%esi),%eax
00006a2b	movl	%eax,0xd0(%ebp)
00006a2e	leal	(%edi,%ebx),%eax
00006a31	movl	%eax,0xac(%ebp)
00006a34	movl	%eax,0x04(%esp)
00006a38	movl	0xa8(%ebp),%eax
00006a3b	movl	%eax,(%esp)
00006a3e	calll	CUtlString::operator=(CUtlString const&)
00006a43	leal	0x14(%edi,%esi),%ecx
00006a47	leal	0x18(%edi,%esi),%eax
00006a4b	movss	0x10(%edi,%ebx),%xmm0
00006a51	movl	0xa4(%ebp),%edx
00006a54	movss	%xmm0,(%edx)
00006a58	movb	0x14(%edi,%ebx),%dh
00006a5c	andb	$0x01,%dh
00006a5f	movb	(%ecx),%dl
00006a61	andb	$0xfe,%dl
00006a64	orb	%dh,%dl
00006a66	movb	%dl,(%ecx)
00006a68	andb	$0xfd,%dl
00006a6b	movb	0x14(%edi,%ebx),%dh
00006a6f	andb	$0x02,%dh
00006a72	orb	%dl,%dh
00006a74	movb	%dh,(%ecx)
00006a76	andb	$0xfb,%dh
00006a79	movb	0x14(%edi,%ebx),%dl
00006a7d	andb	$0x04,%dl
00006a80	orb	%dh,%dl
00006a82	movb	%dl,(%ecx)
00006a84	andb	$0xf7,%dl
00006a87	movb	0x14(%edi,%ebx),%dh
00006a8b	andb	$0x08,%dh
00006a8e	orb	%dl,%dh
00006a90	movb	%dh,(%ecx)
00006a92	movl	0x18(%edi,%ebx),%ecx
00006a96	movl	%ecx,(%eax)
00006a98	leal	0xb8(%ebp),%eax
00006a9b	movl	%eax,0x04(%esp)
00006a9f	movl	0xac(%ebp),%eax
00006aa2	movl	%eax,(%esp)
00006aa5	calll	CUtlString::operator=(CUtlString const&)
00006aaa	movss	0xc8(%ebp),%xmm0
00006aaf	movss	%xmm0,0x10(%edi,%ebx)
00006ab5	movb	0x14(%edi,%ebx),%cl
00006ab9	andb	$0xfe,%cl
00006abc	movb	0xcc(%ebp),%al
00006abf	andb	$0x01,%al
00006ac1	orb	%cl,%al
00006ac3	movb	%al,0x14(%edi,%ebx)
00006ac7	andb	$0xfd,%al
00006ac9	movb	0xcc(%ebp),%cl
00006acc	andb	$0x02,%cl
00006acf	orb	%al,%cl
00006ad1	movb	%cl,0x14(%edi,%ebx)
00006ad5	andb	$0xfb,%cl
00006ad8	movb	0xcc(%ebp),%al
00006adb	andb	$0x04,%al
00006add	orb	%cl,%al
00006adf	movb	%al,0x14(%edi,%ebx)
00006ae3	andb	$0xf7,%al
00006ae5	movb	0xcc(%ebp),%cl
00006ae8	andb	$0x08,%cl
00006aeb	orb	%al,%cl
00006aed	movb	%cl,0x14(%edi,%ebx)
00006af1	movl	0xd0(%ebp),%eax
00006af4	movl	%eax,0x18(%edi,%ebx)
00006af8	movl	0x9c(%ebp),%eax
00006afb	movl	(%eax),%eax
00006afd	movl	0x98(%ebp),%ecx
00006b00	jmp	0x000069a0
00006b05	jmp	0x0000693a
00006b0a	movl	%eax,%esi
00006b0c	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00006b10	js	0x0000693c
00006b16	movl	0xb8(%ebp),%eax
00006b19	testl	%eax,%eax
00006b1b	je	0x00006b2c
00006b1d	movl	%eax,(%esp)
00006b20	calll	_free
00006b25	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00006b2c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00006b33	jmp	0x0000693c
00006b38	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00006b3c	js	0x00006b5b
00006b3e	movl	0xb8(%ebp),%eax
00006b41	testl	%eax,%eax
00006b43	je	0x00006b54
00006b45	movl	%eax,(%esp)
00006b48	calll	_free
00006b4d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xb8(%ebp)
00006b54	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xbc(%ebp)
00006b5b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00006b5f	js	0x00006b7e
00006b61	movl	0xd8(%ebp),%eax
00006b64	testl	%eax,%eax
00006b66	je	0x00006b77
00006b68	movl	%eax,(%esp)
00006b6b	calll	_free
00006b70	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00006b77	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00006b7e	addl	$0x7c,%esp
00006b81	popl	%esi
00006b82	popl	%edi
00006b83	popl	%ebx
00006b84	popl	%ebp
00006b85	ret
00006b86	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RemoveAbsoluteTag(CChoreoEvent::AbsTagType, char const*):
00006b90	pushl	%ebp
00006b91	movl	%esp,%ebp
00006b93	pushl	%ebx
00006b94	pushl	%edi
00006b95	pushl	%esi
00006b96	subl	$0x1c,%esp
00006b99	imull	$0x14,0x0c(%ebp),%eax
00006b9d	movl	0x08(%ebp),%ecx
00006ba0	leal	0x000000e4(%ecx,%eax),%edx
00006ba7	movl	%edx,0xf0(%ebp)
00006baa	leal	0x000000f0(%ecx,%eax),%ebx
00006bb1	xorl	%esi,%esi
00006bb3	movl	$0x0000001c,%edi
00006bb8	jmp	0x00006bc4
00006bba	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00006bc0	addl	$0x1c,%edi
00006bc3	incl	%esi
00006bc4	cmpl	(%ebx),%esi
00006bc6	jge	0x00006c5a
00006bcc	movl	0xf0(%ebp),%eax
00006bcf	movl	(%eax),%eax
00006bd1	leal	(%eax,%edi),%ecx
00006bd4	cmpl	$0x1c,%ecx
00006bd7	je	0x00006bc0
00006bd9	leal	0xe4(%eax,%edi),%eax
00006bdd	movl	%eax,(%esp)
00006be0	calll	CUtlString::Get()
00006be5	movl	0x10(%ebp),%ecx
00006be8	movl	%ecx,0x04(%esp)
00006bec	movl	%eax,(%esp)
00006bef	calll	_strcasecmp
00006bf4	testl	%eax,%eax
00006bf6	jne	0x00006bc0
00006bf8	movl	0xf0(%ebp),%eax
00006bfb	movl	(%eax),%ecx
00006bfd	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xec(%ecx,%edi)
00006c02	js	0x00006c2a
00006c04	movl	0xe4(%ecx,%edi),%eax
00006c08	testl	%eax,%eax
00006c0a	je	0x00006c22
00006c0c	movl	%eax,(%esp)
00006c0f	movl	%ecx,0xec(%ebp)
00006c12	calll	_free
00006c17	movl	0xec(%ebp),%ecx
00006c1a	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe4(%ecx,%edi)
00006c22	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ecx,%edi)
00006c2a	movl	(%ebx),%eax
00006c2c	movl	%eax,%ecx
00006c2e	subl	%esi,%ecx
00006c30	decl	%ecx
00006c31	testl	%ecx,%ecx
00006c33	jle	0x00006c57
00006c35	imull	$0x1c,%eax,%ecx
00006c38	subl	%edi,%ecx
00006c3a	movl	0xf0(%ebp),%eax
00006c3d	movl	(%eax),%eax
00006c3f	movl	%ecx,0x08(%esp)
00006c43	leal	0xe4(%eax,%edi),%ecx
00006c47	addl	%edi,%eax
00006c49	movl	%eax,0x04(%esp)
00006c4d	movl	%ecx,(%esp)
00006c50	calll	_memmove
00006c55	movl	(%ebx),%eax
00006c57	decl	%eax
00006c58	movl	%eax,(%ebx)
00006c5a	addl	$0x1c,%esp
00006c5d	popl	%esi
00006c5e	popl	%edi
00006c5f	popl	%ebx
00006c60	popl	%ebp
00006c61	ret
00006c62	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::VerifyTagOrder():
00006c70	pushl	%ebp
00006c71	movl	%esp,%ebp
00006c73	pushl	%ebx
00006c74	pushl	%edi
00006c75	pushl	%esi
00006c76	subl	$0x4c,%esp
00006c79	calll	0x00006c7e
00006c7e	popl	%esi
00006c7f	leal	0xd8(%ebp),%edi
00006c82	movl	%edi,(%esp)
00006c85	calll	CUtlString::CUtlString()
00006c8a	leal	0x6f540-0x6c7e(%esi),%eax
00006c90	movl	%eax,0x04(%esp)
00006c94	movl	%edi,(%esp)
00006c97	calll	CUtlString::operator=(char const*)
00006c9c	movl	0x08(%ebp),%eax
00006c9f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xe8(%ebp)
00006ca6	movl	$0x00000001,0xf0(%ebp)
00006cad	andb	$0xf0,0xec(%ebp)
00006cb1	xorl	%ecx,%ecx
00006cb3	movb	$0x01,0xd0(%ebp)
00006cb7	movl	$0x0000001c,0xb8(%ebp)
00006cbe	jmp	0x00006ccb
00006cc0	movb	%cl,0xd0(%ebp)
00006cc3	addl	$0x1c,0xb8(%ebp)
00006cc7	movl	0xc4(%ebp),%ecx
00006cca	incl	%ecx
00006ccb	cmpl	0x00000104(%eax),%ecx
00006cd1	jge	0x00006f0b
00006cd7	imull	$0x1c,%ecx,%edx
00006cda	movl	%edx,0xc0(%ebp)
00006cdd	movl	%ecx,0xc4(%ebp)
00006ce0	movl	0x000000f8(%eax),%ecx
00006ce6	addl	%edx,%ecx
00006ce8	jne	0x00006d20
00006cea	movb	0xd0(%ebp),%cl
00006ced	jmp	0x00006cc0
00006cef	movl	%eax,%esi
00006cf1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00006cf5	js	0x00006d14
00006cf7	movl	0xd8(%ebp),%eax
00006cfa	testl	%eax,%eax
00006cfc	je	0x00006d0d
00006cfe	movl	%eax,(%esp)
00006d01	calll	_free
00006d06	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00006d0d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00006d14	movl	%esi,(%esp)
00006d17	calll	__Unwind_Resume
00006d1c	jmp	0x00006cef
00006d1e	jmp	0x00006cef
00006d20	movl	0x000000e4(%eax),%ebx
00006d26	movl	%ecx,(%esp)
00006d29	movl	%ecx,0xc8(%ebp)
00006d2c	calll	CUtlString::Get()
00006d31	movl	%eax,%esi
00006d33	movl	0xc0(%ebp),%eax
00006d36	leal	(%ebx,%eax),%edi
00006d39	movl	%edi,(%esp)
00006d3c	calll	CUtlString::Get()
00006d41	movl	%edi,0xbc(%ebp)
00006d44	movl	%ebx,0xb4(%ebp)
00006d47	movl	%eax,0x04(%esp)
00006d4b	movl	%esi,(%esp)
00006d4e	calll	_strcasecmp
00006d53	testl	%eax,%eax
00006d55	movl	0xb8(%ebp),%eax
00006d58	movl	%eax,0xd4(%ebp)
00006d5b	movl	0xc4(%ebp),%ebx
00006d5e	movl	0x08(%ebp),%eax
00006d61	movb	0xd0(%ebp),%cl
00006d64	je	0x00006cc0
00006d6a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00006d70	incl	%ebx
00006d71	xorb	%cl,%cl
00006d73	cmpl	0x000000f0(%eax),%ebx
00006d79	jge	0x00006cc0
00006d7f	movl	0x000000e4(%eax),%esi
00006d85	movl	0xc8(%ebp),%eax
00006d88	movl	%eax,(%esp)
00006d8b	calll	CUtlString::Get()
00006d90	movl	%eax,0xd0(%ebp)
00006d93	movl	0xd4(%ebp),%edi
00006d96	leal	(%esi,%edi),%eax
00006d99	movl	%eax,(%esp)
00006d9c	calll	CUtlString::Get()
00006da1	movl	%esi,0xcc(%ebp)
00006da4	addl	$0x1c,%edi
00006da7	movl	%edi,0xd4(%ebp)
00006daa	movl	%eax,0x04(%esp)
00006dae	movl	0xd0(%ebp),%eax
00006db1	movl	%eax,(%esp)
00006db4	calll	_strcasecmp
00006db9	testl	%eax,%eax
00006dbb	movl	0x08(%ebp),%eax
00006dbe	jne	0x00006d70
00006dc0	movl	0xbc(%ebp),%eax
00006dc3	movl	%eax,0x04(%esp)
00006dc7	leal	0xd8(%ebp),%eax
00006dca	movl	%eax,(%esp)
00006dcd	calll	CUtlString::operator=(CUtlString const&)
00006dd2	movl	0xcc(%ebp),%ebx
00006dd5	movl	0xb4(%ebp),%edi
00006dd8	movl	0xd4(%ebp),%eax
00006ddb	leal	0xe4(%ebx,%eax),%eax
00006ddf	movl	%eax,0xd0(%ebp)
00006de2	movl	0xc0(%ebp),%edx
00006de5	movss	0x10(%edi,%edx),%xmm0
00006deb	movss	%xmm0,0xe8(%ebp)
00006df0	movb	0x14(%edi,%edx),%cl
00006df4	andb	$0x01,%cl
00006df7	movb	0xec(%ebp),%al
00006dfa	andb	$0xfe,%al
00006dfc	orb	%cl,%al
00006dfe	movb	%al,0xec(%ebp)
00006e01	andb	$0xfd,%al
00006e03	movb	0x14(%edi,%edx),%cl
00006e07	andb	$0x02,%cl
00006e0a	orb	%al,%cl
00006e0c	movb	%cl,0xec(%ebp)
00006e0f	andb	$0xfb,%cl
00006e12	movb	0x14(%edi,%edx),%al
00006e16	andb	$0x04,%al
00006e18	orb	%cl,%al
00006e1a	movb	%al,0xec(%ebp)
00006e1d	andb	$0xf7,%al
00006e1f	movb	0x14(%edi,%edx),%cl
00006e23	andb	$0x08,%cl
00006e26	orb	%al,%cl
00006e28	movb	%cl,0xec(%ebp)
00006e2b	movl	0x18(%edi,%edx),%eax
00006e2f	movl	%edx,%esi
00006e31	movl	%eax,0xf0(%ebp)
00006e34	movl	0xd0(%ebp),%eax
00006e37	movl	%eax,0x04(%esp)
00006e3b	movl	0xbc(%ebp),%eax
00006e3e	movl	%eax,(%esp)
00006e41	calll	CUtlString::operator=(CUtlString const&)
00006e46	leal	0x18(%edi,%esi),%eax
00006e4a	leal	0x14(%edi,%esi),%ecx
00006e4e	leal	0x10(%edi,%esi),%edx
00006e52	movl	0xd4(%ebp),%esi
00006e55	movss	0xf4(%ebx,%esi),%xmm0
00006e5b	movss	%xmm0,(%edx)
00006e5f	movb	0xf8(%ebx,%esi),%dh
00006e63	andb	$0x01,%dh
00006e66	movb	(%ecx),%dl
00006e68	andb	$0xfe,%dl
00006e6b	orb	%dh,%dl
00006e6d	movb	%dl,(%ecx)
00006e6f	andb	$0xfd,%dl
00006e72	movb	0xf8(%ebx,%esi),%dh
00006e76	andb	$0x02,%dh
00006e79	orb	%dl,%dh
00006e7b	movb	%dh,(%ecx)
00006e7d	andb	$0xfb,%dh
00006e80	movb	0xf8(%ebx,%esi),%dl
00006e84	andb	$0x04,%dl
00006e87	orb	%dh,%dl
00006e89	movb	%dl,(%ecx)
00006e8b	andb	$0xf7,%dl
00006e8e	movb	0xf8(%ebx,%esi),%dh
00006e92	andb	$0x08,%dh
00006e95	orb	%dl,%dh
00006e97	movb	%dh,(%ecx)
00006e99	movl	0xfc(%ebx,%esi),%ecx
00006e9d	movl	%ecx,(%eax)
00006e9f	leal	0xd8(%ebp),%eax
00006ea2	movl	%eax,0x04(%esp)
00006ea6	movl	0xd0(%ebp),%eax
00006ea9	movl	%eax,(%esp)
00006eac	calll	CUtlString::operator=(CUtlString const&)
00006eb1	movss	0xe8(%ebp),%xmm0
00006eb6	movl	%esi,%edx
00006eb8	movss	%xmm0,0xf4(%ebx,%edx)
00006ebe	movb	0xf8(%ebx,%edx),%cl
00006ec2	andb	$0xfe,%cl
00006ec5	movb	0xec(%ebp),%al
00006ec8	andb	$0x01,%al
00006eca	orb	%cl,%al
00006ecc	movb	%al,0xf8(%ebx,%edx)
00006ed0	andb	$0xfd,%al
00006ed2	movb	0xec(%ebp),%cl
00006ed5	andb	$0x02,%cl
00006ed8	orb	%al,%cl
00006eda	movb	%cl,0xf8(%ebx,%edx)
00006ede	andb	$0xfb,%cl
00006ee1	movb	0xec(%ebp),%al
00006ee4	andb	$0x04,%al
00006ee6	orb	%cl,%al
00006ee8	movb	%al,0xf8(%ebx,%edx)
00006eec	andb	$0xf7,%al
00006eee	movb	0xec(%ebp),%cl
00006ef1	andb	$0x08,%cl
00006ef4	orb	%al,%cl
00006ef6	movb	%cl,0xf8(%ebx,%edx)
00006efa	movl	0xf0(%ebp),%eax
00006efd	movl	%eax,0xfc(%ebx,%edx)
00006f01	xorb	%cl,%cl
00006f03	movl	0x08(%ebp),%eax
00006f06	jmp	0x00006cc0
00006f0b	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00006f0f	js	0x00006f2e
00006f11	movl	0xd8(%ebp),%eax
00006f14	testl	%eax,%eax
00006f16	je	0x00006f27
00006f18	movl	%eax,(%esp)
00006f1b	calll	_free
00006f20	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd8(%ebp)
00006f27	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
00006f2e	movb	0xd0(%ebp),%al
00006f31	andb	$0x01,%al
00006f33	testb	%al,%al
00006f35	setne	%al
00006f38	movzbl	%al,%eax
00006f3b	addl	$0x4c,%esp
00006f3e	popl	%esi
00006f3f	popl	%edi
00006f40	popl	%ebx
00006f41	popl	%ebp
00006f42	ret
00006f43	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetBoundedAbsoluteTagPercentage(CChoreoEvent::AbsTagType, int):
00006f50	pushl	%eax
00006f51	pxor	%xmm0,%xmm0
00006f55	movl	0x10(%esp),%eax
00006f59	testl	%eax,%eax
00006f5b	js	0x00006f91
00006f5d	movl	0x0c(%esp),%edx
00006f61	movl	0x08(%esp),%ecx
00006f65	imull	$0x14,%edx,%edx
00006f68	cmpl	%eax,0x000000f0(%ecx,%edx)
00006f6f	jg	0x00006f81
00006f71	calll	0x00006f76
00006f76	popl	%eax
00006f77	movss	0x6e9f8-0x6f76(%eax),%xmm0
00006f7f	jmp	0x00006f91
00006f81	movl	0x000000e4(%ecx,%edx),%ecx
00006f88	imull	$0x1c,%eax,%eax
00006f8b	movss	0x10(%ecx,%eax),%xmm0
00006f91	movss	%xmm0,(%esp)
00006f96	flds	(%esp)
00006f99	popl	%eax
00006f9a	ret
00006f9b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetOriginalPercentageFromPlaybackPercentage(float):
00006fa0	pushl	%ebp
00006fa1	movl	%esp,%ebp
00006fa3	pushl	%ebx
00006fa4	pushl	%edi
00006fa5	pushl	%esi
00006fa6	subl	$0x0000009c,%esp
00006fac	calll	0x00006fb1
00006fb1	popl	%eax
00006fb2	movl	%eax,0x9c(%ebp)
00006fb5	movss	0x0c(%ebp),%xmm0
00006fba	movl	0x08(%ebp),%ebx
00006fbd	cmpb	$0x06,0x04(%ebx)
00006fc1	je	0x00006fcb
00006fc3	movaps	%xmm0,%xmm1
00006fc6	jmp	0x000073f3
00006fcb	movl	0x000000f0(%ebx),%esi
00006fd1	movl	0x00000104(%ebx),%eax
00006fd7	cmpl	%eax,%esi
00006fd9	je	0x00006fe3
00006fdb	movaps	%xmm0,%xmm1
00006fde	jmp	0x000073f3
00006fe3	testl	%esi,%esi
00006fe5	jg	0x00006fef
00006fe7	movaps	%xmm0,%xmm1
00006fea	jmp	0x000073f3
00006fef	pxor	%xmm1,%xmm1
00006ff3	ucomiss	%xmm0,%xmm1
00006ff6	jae	0x000073f3
00006ffc	movl	%eax,0x8c(%ebp)
00006fff	pxor	%xmm2,%xmm2
00007003	xorl	%edi,%edi
00007005	xorl	%ecx,%ecx
00007007	pxor	%xmm1,%xmm1
0000700b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007010	movl	%edi,%edx
00007012	movl	%ecx,%eax
00007014	movl	%eax,0xa0(%ebp)
00007017	leal	0xff(%eax),%eax
0000701a	movl	%esi,%edi
0000701c	cmpl	%edi,%eax
0000701e	jge	0x0000707b
00007020	pxor	%xmm1,%xmm1
00007024	testl	%eax,%eax
00007026	js	0x00007045
00007028	cmpl	%eax,%edi
0000702a	jg	0x00007039
0000702c	movl	0x9c(%ebp),%ecx
0000702f	movss	0x6e9fc-0x6fb1(%ecx),%xmm1
00007037	jmp	0x00007045
00007039	movl	0x000000e4(%ebx),%ecx
0000703f	movss	0xf4(%ecx,%edx),%xmm1
00007045	cmpl	0xa0(%ebp),%edi
00007048	movl	%edi,%esi
0000704a	jg	0x00007059
0000704c	movl	0x9c(%ebp),%ecx
0000704f	movss	0x6e9fc-0x6fb1(%ecx),%xmm2
00007057	jmp	0x00007065
00007059	movl	0x000000e4(%ebx),%ecx
0000705f	movss	0x10(%ecx,%edx),%xmm2
00007065	leal	0x1c(%edx),%edi
00007068	movl	0xa0(%ebp),%ecx
0000706b	leal	0x01(%ecx),%ecx
0000706e	ucomiss	%xmm1,%xmm0
00007071	jb	0x00007010
00007073	ucomiss	%xmm0,%xmm2
00007076	jb	0x00007010
00007078	decl	%ecx
00007079	movl	%esi,%edi
0000707b	movl	%ecx,0x88(%ebp)
0000707e	cmpl	$0xff,%eax
00007081	movl	$0xffffffff,%esi
00007086	cmovgel	%eax,%esi
00007089	cmpl	%edi,%ecx
0000708b	movl	%edi,%eax
0000708d	cmovll	%ecx,%eax
00007090	movl	%eax,0x90(%ebp)
00007093	leal	0x01(%edi),%ecx
00007096	movl	0xa0(%ebp),%eax
00007099	leal	0x01(%eax),%eax
0000709c	cmpl	%ecx,%eax
0000709e	cmovll	%eax,%ecx
000070a1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
000070a8	testl	%esi,%esi
000070aa	jns	0x000070b1
000070ac	movl	%esi,0x94(%ebp)
000070af	jmp	0x000070c5
000070b1	cmpl	%edi,%esi
000070b3	movl	%esi,0x94(%ebp)
000070b6	jge	0x000070c5
000070b8	imull	$0x1c,0x94(%ebp),%eax
000070bc	addl	0x000000e4(%ebx),%eax
000070c2	movl	%eax,0x98(%ebp)
000070c5	movl	%ecx,0xffffff7c(%ebp)
000070cb	addl	$0xfe,0xa0(%ebp)
000070cf	cmpl	%edi,0x88(%ebp)
000070d2	movl	%edi,0xffffff78(%ebp)
000070d8	setge	%al
000070db	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x90(%ebp)
000070df	js	0x000070e9
000070e1	cmpb	$0x01,%al
000070e3	jne	0x0000733d
000070e9	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
000070ed	setne	0x82(%ebp)
000070f1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x84(%ebp)
000070f8	movb	$0x01,0x83(%ebp)
000070fc	pxor	%xmm5,%xmm5
00007100	movl	0xa0(%ebp),%edi
00007103	testl	%edi,%edi
00007105	pxor	%xmm4,%xmm4
00007109	pxor	%xmm3,%xmm3
0000710d	movl	0xffffff78(%ebp),%esi
00007113	js	0x00007144
00007115	movl	0x9c(%ebp),%eax
00007118	movss	0x6e9fc-0x6fb1(%eax),%xmm3
00007120	cmpl	%edi,%esi
00007122	movaps	%xmm3,%xmm4
00007125	jle	0x00007133
00007127	movl	0x000000e4(%ebx),%eax
0000712d	movss	0xd8(%eax,%edx),%xmm4
00007133	cmpl	%edi,0x8c(%ebp)
00007136	jle	0x00007144
00007138	movl	0x000000f8(%ebx),%eax
0000713e	movss	0xd8(%eax,%edx),%xmm3
00007144	movss	%xmm4,0xe8(%ebp)
00007149	movss	%xmm3,0xec(%ebp)
0000714e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf0(%ebp)
00007155	movl	0x94(%ebp),%ecx
00007158	testl	%ecx,%ecx
0000715a	pxor	%xmm4,%xmm4
0000715e	movl	0x8c(%ebp),%edx
00007161	js	0x0000719b
00007163	movl	0x9c(%ebp),%eax
00007166	movss	0x6e9fc-0x6fb1(%eax),%xmm4
0000716e	cmpl	%ecx,%esi
00007170	movaps	%xmm4,%xmm5
00007173	jle	0x00007188
00007175	imull	$0x1c,%ecx,%eax
00007178	movl	%ecx,%edi
0000717a	movl	0x000000e4(%ebx),%ecx
00007180	movss	0x10(%ecx,%eax),%xmm5
00007186	movl	%edi,%ecx
00007188	cmpl	%ecx,%edx
0000718a	jle	0x0000719b
0000718c	imull	$0x1c,%ecx,%eax
0000718f	movl	0x000000f8(%ebx),%ecx
00007195	movss	0x10(%ecx,%eax),%xmm4
0000719b	movss	%xmm5,0xa0(%ebp)
000071a0	movss	%xmm5,0xd8(%ebp)
000071a5	movss	%xmm4,0xdc(%ebp)
000071aa	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
000071b1	pxor	%xmm3,%xmm3
000071b5	movl	0x90(%ebp),%ecx
000071b8	testl	%ecx,%ecx
000071ba	pxor	%xmm6,%xmm6
000071be	pxor	%xmm5,%xmm5
000071c2	movl	0x88(%ebp),%edi
000071c5	js	0x000071ff
000071c7	movl	0x9c(%ebp),%eax
000071ca	movss	0x6e9fc-0x6fb1(%eax),%xmm5
000071d2	cmpl	%esi,%edi
000071d4	movaps	%xmm5,%xmm6
000071d7	jge	0x000071ec
000071d9	imull	$0x1c,%ecx,%eax
000071dc	movl	%ecx,%edi
000071de	movl	0x000000e4(%ebx),%ecx
000071e4	movss	0x10(%ecx,%eax),%xmm6
000071ea	movl	%edi,%ecx
000071ec	cmpl	%ecx,%edx
000071ee	jle	0x000071ff
000071f0	imull	$0x1c,%ecx,%eax
000071f3	movl	0x000000f8(%ebx),%ecx
000071f9	movss	0x10(%ecx,%eax),%xmm5
000071ff	movss	%xmm6,0xc8(%ebp)
00007204	movss	%xmm5,0xcc(%ebp)
00007209	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd0(%ebp)
00007210	movl	0xffffff7c(%ebp),%ecx
00007216	testl	%ecx,%ecx
00007218	pxor	%xmm7,%xmm7
0000721c	js	0x00007256
0000721e	movl	0x9c(%ebp),%eax
00007221	movss	0x6e9fc-0x6fb1(%eax),%xmm7
00007229	cmpl	%ecx,%esi
0000722b	movaps	%xmm7,%xmm3
0000722e	jle	0x00007243
00007230	imull	$0x1c,%ecx,%eax
00007233	movl	%ecx,%esi
00007235	movl	0x000000e4(%ebx),%ecx
0000723b	movss	0x10(%ecx,%eax),%xmm3
00007241	movl	%esi,%ecx
00007243	cmpl	%ecx,%edx
00007245	jle	0x00007256
00007247	imull	$0x1c,%ecx,%eax
0000724a	movl	0x000000f8(%ebx),%ecx
00007250	movss	0x10(%ecx,%eax),%xmm7
00007256	movss	%xmm3,0xb8(%ebp)
0000725b	movss	%xmm7,0xbc(%ebp)
00007260	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
00007267	cmpb	$0x01,0x82(%ebp)
0000726b	jne	0x000072a5
0000726d	movl	0x98(%ebp),%eax
00007270	testb	$0x02,0x14(%eax)
00007274	je	0x000072a5
00007276	movaps	%xmm6,%xmm3
00007279	movss	0xa0(%ebp),%xmm7
0000727e	subss	%xmm7,%xmm3
00007282	subss	%xmm3,%xmm7
00007286	movss	%xmm7,0xe8(%ebp)
0000728b	movaps	%xmm5,%xmm3
0000728e	subss	%xmm4,%xmm3
00007292	movaps	%xmm4,%xmm7
00007295	subss	%xmm3,%xmm7
00007299	movss	%xmm7,0xec(%ebp)
0000729e	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf0(%ebp)
000072a5	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x83(%ebp)
000072a9	jne	0x000072dc
000072ab	movl	0x84(%ebp),%eax
000072ae	testb	$0x02,0x14(%eax)
000072b2	je	0x000072dc
000072b4	movaps	%xmm6,%xmm3
000072b7	subss	0xa0(%ebp),%xmm3
000072bc	addss	%xmm6,%xmm3
000072c0	movss	%xmm3,0xb8(%ebp)
000072c5	movaps	%xmm5,%xmm3
000072c8	subss	%xmm4,%xmm3
000072cc	addss	%xmm5,%xmm3
000072d0	movss	%xmm3,0xbc(%ebp)
000072d5	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
000072dc	subss	%xmm1,%xmm2
000072e0	pxor	%xmm3,%xmm3
000072e4	ucomiss	%xmm3,%xmm2
000072e7	jbe	0x000072f4
000072e9	subss	%xmm1,%xmm0
000072ed	divss	%xmm2,%xmm0
000072f1	movaps	%xmm0,%xmm3
000072f4	leal	0xa8(%ebp),%eax
000072f7	movl	%eax,0x14(%esp)
000072fb	leal	0xb8(%ebp),%eax
000072fe	movl	%eax,0x0c(%esp)
00007302	leal	0xc8(%ebp),%eax
00007305	movl	%eax,0x08(%esp)
00007309	leal	0xd8(%ebp),%eax
0000730c	movl	%eax,0x04(%esp)
00007310	leal	0xe8(%ebp),%eax
00007313	movl	%eax,(%esp)
00007316	xorps	%xmm0,%xmm0
00007319	maxss	%xmm0,%xmm3
0000731d	movl	0x9c(%ebp),%eax
00007320	minss	0x6e9fc-0x6fb1(%eax),%xmm3
00007328	movss	%xmm3,0x10(%esp)
0000732e	calll	Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00007333	movss	0xac(%ebp),%xmm1
00007338	jmp	0x000073f3
0000733d	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
00007341	sete	%cl
00007344	setne	0x82(%ebp)
00007348	imull	$0x1c,0x90(%ebp),%esi
0000734c	movl	0x000000e4(%ebx),%edi
00007352	movl	%edi,%eax
00007354	addl	%esi,%eax
00007356	movl	%eax,0x84(%ebp)
00007359	sete	0x83(%ebp)
0000735d	je	0x000070fc
00007363	testb	%cl,%cl
00007365	jne	0x000070fc
0000736b	movl	0x98(%ebp),%eax
0000736e	testb	$0x02,0x14(%eax)
00007372	je	0x000070fc
00007378	testb	$0x02,0x14(%edi,%esi)
0000737d	je	0x000070fc
00007383	movl	%edi,0xffffff70(%ebp)
00007389	movl	0x000000f8(%ebx),%eax
0000738f	imull	$0x1c,0x94(%ebp),%edi
00007393	movl	%edi,0xffffff74(%ebp)
00007399	movl	%eax,%ecx
0000739b	addl	%edi,%ecx
0000739d	je	0x000070fc
000073a3	leal	(%eax,%esi),%ecx
000073a6	testl	%ecx,%ecx
000073a8	movl	0xffffff70(%ebp),%edi
000073ae	je	0x000070fc
000073b4	movl	0x98(%ebp),%ecx
000073b7	movss	0x10(%ecx),%xmm1
000073bc	subss	%xmm1,%xmm0
000073c0	movss	0x10(%edi,%esi),%xmm2
000073c6	subss	%xmm1,%xmm2
000073ca	divss	%xmm2,%xmm0
000073ce	movl	0x9c(%ebp),%ecx
000073d1	movss	0x6e9fc-0x6fb1(%ecx),%xmm1
000073d9	subss	%xmm0,%xmm1
000073dd	mulss	0x10(%eax,%esi),%xmm0
000073e3	movl	0xffffff74(%ebp),%ecx
000073e9	mulss	0x10(%eax,%ecx),%xmm1
000073ef	addss	%xmm0,%xmm1
000073f3	movss	%xmm1,0xa4(%ebp)
000073f8	flds	0xa4(%ebp)
000073fb	addl	$0x0000009c,%esp
00007401	popl	%esi
00007402	popl	%edi
00007403	popl	%ebx
00007404	popl	%ebp
00007405	ret
00007406	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetPlaybackPercentageFromOriginalPercentage(float):
00007410	pushl	%ebp
00007411	movl	%esp,%ebp
00007413	pushl	%ebx
00007414	pushl	%edi
00007415	pushl	%esi
00007416	subl	$0x0000009c,%esp
0000741c	calll	0x00007421
00007421	popl	%eax
00007422	movl	%eax,0x9c(%ebp)
00007425	movss	0x0c(%ebp),%xmm0
0000742a	movl	0x08(%ebp),%esi
0000742d	cmpb	$0x06,0x04(%esi)
00007431	je	0x0000743b
00007433	movaps	%xmm0,%xmm1
00007436	jmp	0x00007879
0000743b	movl	0x000000f0(%esi),%edx
00007441	movl	0x00000104(%esi),%eax
00007447	cmpl	%eax,%edx
00007449	je	0x00007453
0000744b	movaps	%xmm0,%xmm1
0000744e	jmp	0x00007879
00007453	testl	%edx,%edx
00007455	jg	0x0000745f
00007457	movaps	%xmm0,%xmm1
0000745a	jmp	0x00007879
0000745f	movl	%eax,0x8c(%ebp)
00007462	pxor	%xmm1,%xmm1
00007466	ucomiss	%xmm0,%xmm1
00007469	jae	0x00007879
0000746f	pxor	%xmm2,%xmm2
00007473	xorl	%edi,%edi
00007475	xorl	%ecx,%ecx
00007477	pxor	%xmm1,%xmm1
0000747b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007480	movl	%edi,%ebx
00007482	movl	%ecx,%eax
00007484	movl	%eax,0xa0(%ebp)
00007487	leal	0xff(%eax),%eax
0000748a	movl	%edx,%edi
0000748c	cmpl	%edi,%eax
0000748e	jge	0x000074f0
00007490	pxor	%xmm1,%xmm1
00007494	testl	%eax,%eax
00007496	movl	0xa0(%ebp),%edx
00007499	js	0x000074b8
0000749b	cmpl	%eax,%edi
0000749d	jg	0x000074ac
0000749f	movl	0x9c(%ebp),%ecx
000074a2	movss	0x6ea00-0x7421(%ecx),%xmm1
000074aa	jmp	0x000074b8
000074ac	movl	0x000000e4(%esi),%ecx
000074b2	movss	0xf4(%ecx,%ebx),%xmm1
000074b8	cmpl	%edx,%edi
000074ba	movl	%edx,0xa0(%ebp)
000074bd	movl	%edi,%edx
000074bf	jg	0x000074ce
000074c1	movl	0x9c(%ebp),%ecx
000074c4	movss	0x6ea00-0x7421(%ecx),%xmm2
000074cc	jmp	0x000074da
000074ce	movl	0x000000e4(%esi),%ecx
000074d4	movss	0x10(%ecx,%ebx),%xmm2
000074da	leal	0x1c(%ebx),%edi
000074dd	movl	0xa0(%ebp),%ecx
000074e0	leal	0x01(%ecx),%ecx
000074e3	ucomiss	%xmm1,%xmm0
000074e6	jb	0x00007480
000074e8	ucomiss	%xmm0,%xmm2
000074eb	jb	0x00007480
000074ed	decl	%ecx
000074ee	movl	%edx,%edi
000074f0	cmpl	$0xff,%eax
000074f3	movl	$0xffffffff,%edx
000074f8	cmovgel	%eax,%edx
000074fb	movl	%edx,0x90(%ebp)
000074fe	cmpl	%edi,%ecx
00007500	movl	%edi,%eax
00007502	cmovll	%ecx,%eax
00007505	movl	%eax,0x94(%ebp)
00007508	leal	0x01(%edi),%edx
0000750b	movl	0xa0(%ebp),%eax
0000750e	leal	0x01(%eax),%eax
00007511	cmpl	%edx,%eax
00007513	cmovll	%eax,%edx
00007516	movl	%edx,0xffffff78(%ebp)
0000751c	movl	0x90(%ebp),%eax
0000751f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
00007526	testl	%eax,%eax
00007528	js	0x0000753a
0000752a	cmpl	%edi,%eax
0000752c	jge	0x0000753a
0000752e	imull	$0x1c,%eax,%eax
00007531	addl	0x000000f8(%esi),%eax
00007537	movl	%eax,0x98(%ebp)
0000753a	addl	$0xfe,0xa0(%ebp)
0000753e	cmpl	%edi,%ecx
00007540	setge	%al
00007543	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x94(%ebp)
00007547	js	0x00007551
00007549	cmpb	$0x01,%al
0000754b	jne	0x0000779e
00007551	movl	%ecx,0x88(%ebp)
00007554	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
00007558	setne	0x82(%ebp)
0000755c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x84(%ebp)
00007563	movb	$0x01,0x83(%ebp)
00007567	pxor	%xmm5,%xmm5
0000756b	movl	0xa0(%ebp),%ecx
0000756e	testl	%ecx,%ecx
00007570	pxor	%xmm4,%xmm4
00007574	pxor	%xmm3,%xmm3
00007578	movl	0x90(%ebp),%edx
0000757b	js	0x000075ac
0000757d	movl	0x9c(%ebp),%eax
00007580	movss	0x6ea00-0x7421(%eax),%xmm3
00007588	cmpl	%ecx,0x8c(%ebp)
0000758b	movaps	%xmm3,%xmm4
0000758e	jle	0x0000759c
00007590	movl	0x000000f8(%esi),%eax
00007596	movss	0xd8(%eax,%ebx),%xmm4
0000759c	cmpl	%ecx,%edi
0000759e	jle	0x000075ac
000075a0	movl	0x000000e4(%esi),%eax
000075a6	movss	0xd8(%eax,%ebx),%xmm3
000075ac	movl	%edi,0xa0(%ebp)
000075af	movss	%xmm4,0xe8(%ebp)
000075b4	movss	%xmm3,0xec(%ebp)
000075b9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf0(%ebp)
000075c0	testl	%edx,%edx
000075c2	pxor	%xmm4,%xmm4
000075c6	movl	0x8c(%ebp),%edi
000075c9	movl	0xffffff78(%ebp),%ebx
000075cf	js	0x00007606
000075d1	movl	0x9c(%ebp),%eax
000075d4	movss	0x6ea00-0x7421(%eax),%xmm4
000075dc	cmpl	%edx,%edi
000075de	movaps	%xmm4,%xmm5
000075e1	jle	0x000075f2
000075e3	imull	$0x1c,%edx,%eax
000075e6	movl	0x000000f8(%esi),%ecx
000075ec	movss	0x10(%ecx,%eax),%xmm5
000075f2	cmpl	%edx,0xa0(%ebp)
000075f5	jle	0x00007606
000075f7	imull	$0x1c,%edx,%eax
000075fa	movl	0x000000e4(%esi),%ecx
00007600	movss	0x10(%ecx,%eax),%xmm4
00007606	movss	%xmm5,0x90(%ebp)
0000760b	movss	%xmm5,0xd8(%ebp)
00007610	movss	%xmm4,0xdc(%ebp)
00007615	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
0000761c	pxor	%xmm3,%xmm3
00007620	movl	0x94(%ebp),%ecx
00007623	testl	%ecx,%ecx
00007625	pxor	%xmm6,%xmm6
00007629	pxor	%xmm5,%xmm5
0000762d	js	0x00007669
0000762f	movl	0x9c(%ebp),%eax
00007632	movss	0x6ea00-0x7421(%eax),%xmm5
0000763a	cmpl	%ecx,%edi
0000763c	movaps	%xmm5,%xmm6
0000763f	movl	%ecx,%eax
00007641	jle	0x00007652
00007643	imull	$0x1c,%eax,%edx
00007646	movl	0x000000f8(%esi),%ecx
0000764c	movss	0x10(%ecx,%edx),%xmm6
00007652	movl	0xa0(%ebp),%ecx
00007655	cmpl	%ecx,0x88(%ebp)
00007658	jge	0x00007669
0000765a	imull	$0x1c,%eax,%eax
0000765d	movl	0x000000e4(%esi),%ecx
00007663	movss	0x10(%ecx,%eax),%xmm5
00007669	movss	%xmm6,0xc8(%ebp)
0000766e	movss	%xmm5,0xcc(%ebp)
00007673	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xd0(%ebp)
0000767a	testl	%ebx,%ebx
0000767c	pxor	%xmm7,%xmm7
00007680	js	0x000076b7
00007682	movl	0x9c(%ebp),%eax
00007685	movss	0x6ea00-0x7421(%eax),%xmm7
0000768d	cmpl	%ebx,%edi
0000768f	movaps	%xmm7,%xmm3
00007692	jle	0x000076a3
00007694	imull	$0x1c,%ebx,%eax
00007697	movl	0x000000f8(%esi),%ecx
0000769d	movss	0x10(%ecx,%eax),%xmm3
000076a3	cmpl	%ebx,0xa0(%ebp)
000076a6	jle	0x000076b7
000076a8	imull	$0x1c,%ebx,%eax
000076ab	movl	0x000000e4(%esi),%ecx
000076b1	movss	0x10(%ecx,%eax),%xmm7
000076b7	movss	%xmm3,0xb8(%ebp)
000076bc	movss	%xmm7,0xbc(%ebp)
000076c1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
000076c8	cmpb	$0x01,0x82(%ebp)
000076cc	jne	0x00007706
000076ce	movl	0x98(%ebp),%eax
000076d1	testb	$0x02,0x14(%eax)
000076d5	je	0x00007706
000076d7	movaps	%xmm6,%xmm3
000076da	movss	0x90(%ebp),%xmm7
000076df	subss	%xmm7,%xmm3
000076e3	subss	%xmm3,%xmm7
000076e7	movss	%xmm7,0xe8(%ebp)
000076ec	movaps	%xmm5,%xmm3
000076ef	subss	%xmm4,%xmm3
000076f3	movaps	%xmm4,%xmm7
000076f6	subss	%xmm3,%xmm7
000076fa	movss	%xmm7,0xec(%ebp)
000076ff	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf0(%ebp)
00007706	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x83(%ebp)
0000770a	movl	0x84(%ebp),%eax
0000770d	jne	0x0000773d
0000770f	testb	$0x02,0x14(%eax)
00007713	je	0x0000773d
00007715	movaps	%xmm6,%xmm3
00007718	subss	0x90(%ebp),%xmm3
0000771d	addss	%xmm6,%xmm3
00007721	movss	%xmm3,0xb8(%ebp)
00007726	movaps	%xmm5,%xmm3
00007729	subss	%xmm4,%xmm3
0000772d	addss	%xmm5,%xmm3
00007731	movss	%xmm3,0xbc(%ebp)
00007736	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xc0(%ebp)
0000773d	subss	%xmm1,%xmm2
00007741	pxor	%xmm3,%xmm3
00007745	ucomiss	%xmm3,%xmm2
00007748	jbe	0x00007755
0000774a	subss	%xmm1,%xmm0
0000774e	divss	%xmm2,%xmm0
00007752	movaps	%xmm0,%xmm3
00007755	leal	0xa8(%ebp),%eax
00007758	movl	%eax,0x14(%esp)
0000775c	leal	0xb8(%ebp),%eax
0000775f	movl	%eax,0x0c(%esp)
00007763	leal	0xc8(%ebp),%eax
00007766	movl	%eax,0x08(%esp)
0000776a	leal	0xd8(%ebp),%eax
0000776d	movl	%eax,0x04(%esp)
00007771	leal	0xe8(%ebp),%eax
00007774	movl	%eax,(%esp)
00007777	xorps	%xmm0,%xmm0
0000777a	maxss	%xmm0,%xmm3
0000777e	movl	0x9c(%ebp),%eax
00007781	minss	0x6ea00-0x7421(%eax),%xmm3
00007789	movss	%xmm3,0x10(%esp)
0000778f	calll	Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
00007794	movss	0xac(%ebp),%xmm1
00007799	jmp	0x00007879
0000779e	movl	%ecx,0x88(%ebp)
000077a1	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x98(%ebp)
000077a5	sete	0xffffff74(%ebp)
000077ac	setne	0x82(%ebp)
000077b0	movl	0x94(%ebp),%eax
000077b3	imull	$0x1c,%eax,%edx
000077b6	movl	0x000000f8(%esi),%ecx
000077bc	movl	%ecx,0xffffff7c(%ebp)
000077c2	addl	%edx,%ecx
000077c4	movl	%ecx,0x84(%ebp)
000077c7	sete	0x83(%ebp)
000077cb	jne	0x000077d5
000077cd	movl	%eax,0x94(%ebp)
000077d0	jmp	0x00007567
000077d5	movl	%eax,0x94(%ebp)
000077d8	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffff74(%ebp)
000077df	jne	0x00007567
000077e5	movl	0x98(%ebp),%eax
000077e8	testb	$0x02,0x14(%eax)
000077ec	je	0x00007567
000077f2	movl	0xffffff7c(%ebp),%eax
000077f8	testb	$0x02,0x14(%eax,%edx)
000077fd	je	0x00007567
00007803	movl	%edx,0xffffff70(%ebp)
00007809	movl	0x000000e4(%esi),%edx
0000780f	imull	$0x1c,0x90(%ebp),%eax
00007813	movl	%eax,0xffffff74(%ebp)
00007819	movl	%edx,%ecx
0000781b	addl	%eax,%ecx
0000781d	je	0x00007567
00007823	movl	0xffffff70(%ebp),%eax
00007829	leal	(%edx,%eax),%ecx
0000782c	testl	%ecx,%ecx
0000782e	je	0x00007567
00007834	movl	0x98(%ebp),%ecx
00007837	movss	0x10(%ecx),%xmm1
0000783c	subss	%xmm1,%xmm0
00007840	movl	0xffffff7c(%ebp),%ecx
00007846	movss	0x10(%ecx,%eax),%xmm2
0000784c	subss	%xmm1,%xmm2
00007850	divss	%xmm2,%xmm0
00007854	movl	0x9c(%ebp),%ecx
00007857	movss	0x6ea00-0x7421(%ecx),%xmm1
0000785f	subss	%xmm0,%xmm1
00007863	mulss	0x10(%edx,%eax),%xmm0
00007869	movl	0xffffff74(%ebp),%eax
0000786f	mulss	0x10(%edx,%eax),%xmm1
00007875	addss	%xmm0,%xmm1
00007879	movss	%xmm1,0xa4(%ebp)
0000787e	flds	0xa4(%ebp)
00007881	addl	$0x0000009c,%esp
00007887	popl	%esi
00007888	popl	%edi
00007889	popl	%ebx
0000788a	popl	%ebp
0000788b	ret
0000788c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::SetGestureSequenceDuration(float):
00007890	movss	0x08(%esp),%xmm0
00007896	movl	0x04(%esp),%eax
0000789a	movss	%xmm0,0x50(%eax)
0000789f	ret
CChoreoEvent::GetGestureSequenceDuration(float&):
000078a0	pushl	%ebp
000078a1	movl	%esp,%ebp
000078a3	subl	$0x18,%esp
000078a6	movl	0x08(%ebp),%eax
000078a9	movss	0x50(%eax),%xmm0
000078ae	movss	%xmm0,0xf8(%ebp)
000078b3	pxor	%xmm1,%xmm1
000078b7	ucomiss	%xmm0,%xmm1
000078ba	jne	0x000078cd
000078bc	jp	0x000078cd
000078be	movl	(%eax),%ecx
000078c0	movl	%eax,(%esp)
000078c3	call	(%ecx)
000078c5	fstps	0xfc(%ebp)
000078c8	movss	0xfc(%ebp),%xmm0
000078cd	movl	0x0c(%ebp),%eax
000078d0	movss	%xmm0,(%eax)
000078d4	movss	0xf8(%ebp),%xmm0
000078d9	pxor	%xmm1,%xmm1
000078dd	cmpss	$0x4,%xmm1,%xmm0
000078e2	movd	%xmm0,%eax
000078e6	andl	$0x01,%eax
000078e9	addl	$0x18,%esp
000078ec	popl	%ebp
000078ed	ret
000078ee	nop
CChoreoEvent::GetPitch() const:
000078f0	movl	0x04(%esp),%eax
000078f4	movl	0x0000012c(%eax),%eax
000078fa	ret
000078fb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetPitch(int):
00007900	movl	0x08(%esp),%eax
00007904	movl	0x04(%esp),%ecx
00007908	movl	%eax,0x0000012c(%ecx)
0000790e	ret
0000790f	nop
CChoreoEvent::GetYaw() const:
00007910	movl	0x04(%esp),%eax
00007914	movl	0x00000130(%eax),%eax
0000791a	ret
0000791b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetYaw(int):
00007920	movl	0x08(%esp),%eax
00007924	movl	0x04(%esp),%ecx
00007928	movl	%eax,0x00000130(%ecx)
0000792e	ret
0000792f	nop
CChoreoEvent::SetLoopCount(int):
00007930	movl	0x08(%esp),%ecx
00007934	testl	%ecx,%ecx
00007936	movl	$0xffffffff,%eax
0000793b	cmovnsl	%ecx,%eax
0000793e	movl	0x04(%esp),%ecx
00007942	movl	%eax,0x54(%ecx)
00007945	ret
00007946	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetNumLoopsRemaining():
00007950	movl	0x04(%esp),%eax
00007954	movl	0x58(%eax),%eax
00007957	ret
00007958	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetNumLoopsRemaining(int):
00007960	movl	0x08(%esp),%eax
00007964	movl	0x04(%esp),%ecx
00007968	movl	%eax,0x58(%ecx)
0000796b	ret
0000796c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::GetLoopCount():
00007970	movl	0x04(%esp),%eax
00007974	movl	0x54(%eax),%eax
00007977	ret
00007978	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetEdgeInfo(int):
00007980	imull	$0x07,0x08(%esp),%eax
00007985	movl	0x04(%esp),%ecx
00007989	leal	0x14(%ecx,%eax),%eax
0000798d	ret
0000798e	nop
CCurveData::Get(int):
00007990	xorl	%eax,%eax
00007992	movl	0x08(%esp),%ecx
00007996	testl	%ecx,%ecx
00007998	js	0x000079aa
0000799a	movl	0x04(%esp),%edx
0000799e	xorl	%eax,%eax
000079a0	cmpl	%ecx,0x0c(%edx)
000079a3	jle	0x000079aa
000079a5	imull	$0x0a,%ecx,%eax
000079a8	addl	(%edx),%eax
000079aa	ret
000079ab	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::Add(float, float, bool):
000079b0	pushl	%ebp
000079b1	movl	%esp,%ebp
000079b3	pushl	%ebx
000079b4	pushl	%edi
000079b5	pushl	%esi
000079b6	subl	$0x0c,%esp
000079b9	movl	0x08(%ebp),%esi
000079bc	movl	0x04(%esi),%eax
000079bf	movl	0x0c(%esi),%edi
000079c2	leal	0x01(%edi),%ebx
000079c5	cmpl	%eax,%ebx
000079c7	movl	%edi,%ecx
000079c9	jle	0x000079de
000079cb	movl	%ebx,%ecx
000079cd	subl	%eax,%ecx
000079cf	movl	%ecx,0x04(%esp)
000079d3	movl	%esi,(%esp)
000079d6	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
000079db	movl	0x0c(%esi),%ecx
000079de	incl	%ecx
000079df	movl	%ecx,0x0c(%esi)
000079e2	movl	(%esi),%eax
000079e4	movl	%eax,0x10(%esi)
000079e7	subl	%edi,%ecx
000079e9	decl	%ecx
000079ea	testl	%ecx,%ecx
000079ec	jle	0x00007a0d
000079ee	imull	$0x0a,%ecx,%ecx
000079f1	movl	%ecx,0x08(%esp)
000079f5	imull	$0x0a,%edi,%ecx
000079f8	addl	%eax,%ecx
000079fa	movl	%ecx,0x04(%esp)
000079fe	imull	$0x0a,%ebx,%ecx
00007a01	addl	%eax,%ecx
00007a03	movl	%ecx,(%esp)
00007a06	calll	_memmove
00007a0b	movl	(%esi),%eax
00007a0d	imull	$0x0a,%edi,%ecx
00007a10	movl	%eax,%edx
00007a12	addl	%ecx,%edx
00007a14	je	0x00007a2d
00007a16	movb	0x14(%ebp),%al
00007a19	movzbl	%al,%eax
00007a1c	movl	0x0c(%ebp),%edi
00007a1f	movl	0x10(%ebp),%ebx
00007a22	movl	%ebx,(%edx)
00007a24	movl	%edi,0x04(%edx)
00007a27	movw	%ax,0x08(%edx)
00007a2b	movl	(%esi),%eax
00007a2d	addl	%ecx,%eax
00007a2f	addl	$0x0c,%esp
00007a32	popl	%esi
00007a33	popl	%edi
00007a34	popl	%ebx
00007a35	popl	%ebp
00007a36	ret
00007a37	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::Delete(int):
00007a40	pushl	%ebp
00007a41	movl	%esp,%ebp
00007a43	pushl	%esi
00007a44	subl	$0x14,%esp
00007a47	movl	0x0c(%ebp),%eax
00007a4a	testl	%eax,%eax
00007a4c	js	0x00007a86
00007a4e	movl	0x08(%ebp),%esi
00007a51	movl	0x0c(%esi),%ecx
00007a54	cmpl	%eax,%ecx
00007a56	jle	0x00007a86
00007a58	movl	%ecx,%edx
00007a5a	subl	%eax,%edx
00007a5c	decl	%edx
00007a5d	testl	%edx,%edx
00007a5f	jle	0x00007a82
00007a61	movl	(%esi),%ecx
00007a63	imull	$0x0a,%edx,%edx
00007a66	movl	%edx,0x08(%esp)
00007a6a	imull	$0x0a,%eax,%eax
00007a6d	leal	0x0a(%ecx,%eax),%edx
00007a71	movl	%edx,0x04(%esp)
00007a75	addl	%eax,%ecx
00007a77	movl	%ecx,(%esp)
00007a7a	calll	_memmove
00007a7f	movl	0x0c(%esi),%ecx
00007a82	decl	%ecx
00007a83	movl	%ecx,0x0c(%esi)
00007a86	addl	$0x14,%esp
00007a89	popl	%esi
00007a8a	popl	%ebp
00007a8b	ret
00007a8c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CCurveData::Clear():
00007a90	movl	0x04(%esp),%eax
00007a94	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%eax)
00007a9b	ret
00007a9c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CCurveData::Resort(ICurveDataAccessor*):
00007aa0	pushl	%ebp
00007aa1	movl	%esp,%ebp
00007aa3	pushl	%ebx
00007aa4	pushl	%edi
00007aa5	pushl	%esi
00007aa6	subl	$0x3c,%esp
00007aa9	calll	0x00007aae
00007aae	popl	%eax
00007aaf	movl	%eax,0xc8(%ebp)
00007ab2	movl	0x08(%ebp),%edi
00007ab5	movl	0x0c(%edi),%edx
00007ab8	testl	%edx,%edx
00007aba	jle	0x00007b86
00007ac0	xorl	%eax,%eax
00007ac2	movl	$0x00000013,%ecx
00007ac7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007ad0	movl	%ecx,0xcc(%ebp)
00007ad3	movl	%eax,0xd4(%ebp)
00007ad6	leal	0x01(%eax),%eax
00007ad9	movl	%eax,0xd0(%ebp)
00007adc	cmpl	%edx,%eax
00007ade	movl	%ecx,%ebx
00007ae0	jge	0x00007b75
00007ae6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007af0	imull	$0x0a,0xd4(%ebp),%ecx
00007af4	movl	(%edi),%esi
00007af6	movss	0x04(%esi,%ecx),%xmm0
00007afc	movss	0xfb(%esi,%ebx),%xmm1
00007b02	ucomiss	%xmm1,%xmm0
00007b05	jbe	0x00007b69
00007b07	leal	0x04(%esi,%ecx),%edx
00007b0b	movl	%edx,0xec(%ebp)
00007b0e	leal	0x08(%esi,%ecx),%edi
00007b12	leal	0x09(%esi,%ecx),%edx
00007b16	movl	%edx,0xd8(%ebp)
00007b19	addl	%esi,%ecx
00007b1b	movb	(%esi,%ebx),%dl
00007b1e	movb	%dl,0xdf(%ebp)
00007b21	movb	0xff(%esi,%ebx),%dh
00007b25	movss	0xf7(%esi,%ebx),%xmm3
00007b2b	movl	0xd8(%ebp),%esi
00007b2e	movb	(%esi),%dl
00007b30	movb	%dl,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00007b33	movb	(%edi),%dl
00007b35	movss	(%ecx),%xmm2
00007b39	movss	%xmm3,(%ecx)
00007b3d	movl	0xec(%ebp),%ecx
00007b40	movss	%xmm1,(%ecx)
00007b44	movb	%dh,(%edi)
00007b46	movl	0x08(%ebp),%edi
00007b49	movb	0xdf(%ebp),%cl
00007b4c	movb	%cl,(%esi)
00007b4e	movl	(%edi),%ecx
00007b50	movss	%xmm2,0xf7(%ecx,%ebx)
00007b56	movss	%xmm0,0xfb(%ecx,%ebx)
00007b5c	movb	%dl,0xff(%ecx,%ebx)
00007b60	movb	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%dl
00007b63	movb	%dl,(%ecx,%ebx)
00007b66	movl	0x0c(%edi),%edx
00007b69	addl	$0x0a,%ebx
00007b6c	incl	%eax
00007b6d	cmpl	%edx,%eax
00007b6f	jl	0x00007af0
00007b75	movl	0xcc(%ebp),%ecx
00007b78	addl	$0x0a,%ecx
00007b7b	movl	0xd0(%ebp),%eax
00007b7e	cmpl	%edx,%eax
00007b80	jl	0x00007ad0
00007b86	movl	0x0c(%ebp),%ecx
00007b89	movl	(%ecx),%eax
00007b8b	movl	%ecx,(%esp)
00007b8e	call	(%eax)
00007b90	fstps	0xf0(%ebp)
00007b93	movl	0x0c(%edi),%eax
00007b96	movl	%edi,%esi
00007b98	testl	%eax,%eax
00007b9a	jle	0x00007c26
00007ba0	movss	0xf0(%ebp),%xmm0
00007ba5	imull	$0x0a,%eax,%ebx
00007ba8	movl	%eax,%edi
00007baa	negl	%edi
00007bac	addl	$0xf6,%ebx
00007baf	cvtss2sd	%xmm0,%xmm0
00007bb3	movl	0xc8(%ebp),%ecx
00007bb6	addsd	0x6f3d0-0x7aae(%ecx),%xmm0
00007bbe	movsd	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00007bc3	movl	%eax,%edx
00007bc5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007bd0	movl	(%esi),%ecx
00007bd2	movss	0x04(%ecx,%ebx),%xmm0
00007bd8	decl	%edx
00007bd9	pxor	%xmm1,%xmm1
00007bdd	ucomiss	%xmm0,%xmm1
00007be0	ja	0x00007bf7
00007be2	cvtss2sd	%xmm0,%xmm0
00007be6	ucomisd	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
00007beb	ja	0x00007bf7
00007bed	incl	%edi
00007bee	addl	$0xf6,%ebx
00007bf1	testl	%edx,%edx
00007bf3	jg	0x00007bd0
00007bf5	jmp	0x00007c26
00007bf7	movl	%edx,0xec(%ebp)
00007bfa	leal	(%eax,%edi),%edx
00007bfd	testl	%edx,%edx
00007bff	jle	0x00007c1d
00007c01	imull	$0x0a,%edx,%eax
00007c04	movl	%eax,0x08(%esp)
00007c08	leal	0x0a(%ecx,%ebx),%eax
00007c0c	movl	%eax,0x04(%esp)
00007c10	addl	%ebx,%ecx
00007c12	movl	%ecx,(%esp)
00007c15	calll	_memmove
00007c1a	movl	0x0c(%esi),%eax
00007c1d	decl	%eax
00007c1e	movl	%eax,0x0c(%esi)
00007c21	movl	0xec(%ebp),%edx
00007c24	jmp	0x00007bed
00007c26	addl	$0x3c,%esp
00007c29	popl	%esi
00007c2a	popl	%edi
00007c2b	popl	%ebx
00007c2c	popl	%ebp
00007c2d	ret
00007c2e	nop
CCurveData::RemoveOutOfRangeSamples(ICurveDataAccessor*):
00007c30	pushl	%ebp
00007c31	movl	%esp,%ebp
00007c33	pushl	%ebx
00007c34	pushl	%edi
00007c35	pushl	%esi
00007c36	subl	$0x2c,%esp
00007c39	calll	0x00007c3e
00007c3e	popl	%esi
00007c3f	movl	0x0c(%ebp),%ecx
00007c42	movl	(%ecx),%eax
00007c44	movl	%ecx,(%esp)
00007c47	call	(%eax)
00007c49	fstps	0xf0(%ebp)
00007c4c	movl	0x08(%ebp),%edx
00007c4f	movl	0x0c(%edx),%eax
00007c52	testl	%eax,%eax
00007c54	jle	0x00007cda
00007c5a	movss	0xf0(%ebp),%xmm0
00007c5f	imull	$0x0a,%eax,%edi
00007c62	movl	%eax,%ebx
00007c64	negl	%ebx
00007c66	cvtss2sd	%xmm0,%xmm0
00007c6a	addsd	0x6f3d8-0x7c3e(%esi),%xmm0
00007c72	movsd	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00007c77	movl	%eax,%esi
00007c79	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00007c80	movl	(%edx),%ecx
00007c82	movss	0xfa(%ecx,%edi),%xmm0
00007c88	decl	%esi
00007c89	pxor	%xmm1,%xmm1
00007c8d	ucomiss	%xmm0,%xmm1
00007c90	ja	0x00007ca7
00007c92	cvtss2sd	%xmm0,%xmm0
00007c96	ucomisd	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
00007c9b	ja	0x00007ca7
00007c9d	incl	%ebx
00007c9e	addl	$0xf6,%edi
00007ca1	testl	%esi,%esi
00007ca3	jg	0x00007c80
00007ca5	jmp	0x00007cda
00007ca7	movl	%esi,0xec(%ebp)
00007caa	movl	%edx,%esi
00007cac	leal	(%eax,%ebx),%edx
00007caf	testl	%edx,%edx
00007cb1	jle	0x00007ccf
00007cb3	imull	$0x0a,%edx,%eax
00007cb6	movl	%eax,0x08(%esp)
00007cba	leal	0xf6(%ecx,%edi),%eax
00007cbe	addl	%edi,%ecx
00007cc0	movl	%ecx,0x04(%esp)
00007cc4	movl	%eax,(%esp)
00007cc7	calll	_memmove
00007ccc	movl	0x0c(%esi),%eax
00007ccf	decl	%eax
00007cd0	movl	%eax,0x0c(%esi)
00007cd3	movl	%esi,%edx
00007cd5	movl	0xec(%ebp),%esi
00007cd8	jmp	0x00007c9d
00007cda	addl	$0x2c,%esp
00007cdd	popl	%esi
00007cde	popl	%edi
00007cdf	popl	%ebx
00007ce0	popl	%ebp
00007ce1	ret
00007ce2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetEdgeZeroValue(bool) const:
00007cf0	pushl	%eax
00007cf1	movb	0x0c(%esp),%al
00007cf5	movzbl	%al,%eax
00007cf8	xorl	$0x01,%eax
00007cfb	imull	$0x07,%eax,%eax
00007cfe	pxor	%xmm0,%xmm0
00007d02	movl	0x08(%esp),%ecx
00007d06	testb	$0x01,0x14(%ecx,%eax)
00007d0b	je	0x00007d13
00007d0d	movss	0x17(%ecx,%eax),%xmm0
00007d13	movss	%xmm0,(%esp)
00007d18	flds	(%esp)
00007d1b	popl	%eax
00007d1c	ret
00007d1d	nopl	(%eax)
CCurveData::GetEdgeCurveType(bool) const:
00007d20	movb	0x08(%esp),%al
00007d24	movzbl	%al,%eax
00007d27	xorl	$0x01,%eax
00007d2a	imull	$0x07,%eax,%eax
00007d2d	movl	0x04(%esp),%ecx
00007d31	testb	$0x01,0x14(%ecx,%eax)
00007d36	jne	0x00007d3b
00007d38	xorl	%eax,%eax
00007d3a	ret
00007d3b	movzwl	0x15(%ecx,%eax),%eax
00007d40	ret
00007d41	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RescaleGestureTimes(float, float, bool):
00007d50	pushl	%ebp
00007d51	movl	%esp,%ebp
00007d53	pushl	%ebx
00007d54	pushl	%edi
00007d55	pushl	%esi
00007d56	subl	$0x2c,%esp
00007d59	calll	0x00007d5e
00007d5e	popl	%eax
00007d5f	movl	0x08(%ebp),%ecx
00007d62	cmpb	$0x06,0x04(%ecx)
00007d66	jne	0x00007e3b
00007d6c	movss	0x10(%ebp),%xmm3
00007d71	movss	0x0c(%ebp),%xmm0
00007d76	movss	0x48(%ecx),%xmm1
00007d7b	ucomiss	%xmm1,%xmm0
00007d7e	jne	0x00007d8e
00007d80	jp	0x00007d8e
00007d82	ucomiss	0x4c(%ecx),%xmm3
00007d86	jne	0x00007d8e
00007d88	jnp	0x00007e3b
00007d8e	movl	%ecx,%edx
00007d90	movl	%eax,%ecx
00007d92	pxor	%xmm4,%xmm4
00007d96	ucomiss	%xmm0,%xmm1
00007d99	jne	0x00007d9d
00007d9b	jnp	0x00007dac
00007d9d	movaps	%xmm0,%xmm2
00007da0	subss	%xmm1,%xmm2
00007da4	pxor	%xmm4,%xmm4
00007da8	subss	%xmm2,%xmm4
00007dac	movss	%xmm4,0xcc(%ebp)
00007db1	movb	0x14(%ebp),%al
00007db4	cmpb	$0x01,%al
00007db6	movl	%ecx,%eax
00007db8	movl	%eax,0xd4(%ebp)
00007dbb	movaps	%xmm3,%xmm1
00007dbe	jne	0x00007e3b
00007dc0	movl	0x000000f0(%edx),%ebx
00007dc6	testl	%ebx,%ebx
00007dc8	jle	0x00007e3b
00007dca	subss	%xmm0,%xmm1
00007dce	movss	%xmm1,0xd0(%ebp)
00007dd3	movl	$0x00000010,%esi
00007dd8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007de0	movl	(%edx),%eax
00007de2	movl	0x000000e4(%edx),%ecx
00007de8	movl	%ecx,0xec(%ebp)
00007deb	movss	(%ecx,%esi),%xmm0
00007df0	movaps	%xmm0,0xd8(%ebp)
00007df4	movl	%edx,(%esp)
00007df7	movl	%edx,%edi
00007df9	call	(%eax)
00007dfb	movss	0xcc(%ebp),%xmm1
00007e00	movss	0xd0(%ebp),%xmm0
00007e05	movl	%edi,%edx
00007e07	movl	0xd4(%ebp),%eax
00007e0a	fstps	0xf0(%ebp)
00007e0d	movaps	0xd8(%ebp),%xmm2
00007e11	mulss	0xf0(%ebp),%xmm2
00007e16	addss	%xmm1,%xmm2
00007e1a	divss	%xmm0,%xmm2
00007e1e	xorps	%xmm0,%xmm0
00007e21	maxss	%xmm0,%xmm2
00007e25	minss	0x6ea04-0x7d5e(%eax),%xmm2
00007e2d	movl	0xec(%ebp),%eax
00007e30	movss	%xmm2,(%eax,%esi)
00007e35	addl	$0x1c,%esi
00007e38	decl	%ebx
00007e39	jne	0x00007de0
00007e3b	addl	$0x2c,%esp
00007e3e	popl	%esi
00007e3f	popl	%edi
00007e40	popl	%ebx
00007e41	popl	%ebp
00007e42	ret
00007e43	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::PreventTagOverlap():
00007e50	pushl	%ebx
00007e51	pushl	%edi
00007e52	pushl	%esi
00007e53	movl	0x10(%esp),%eax
00007e57	movl	0x000000f0(%eax),%ecx
00007e5d	xorb	%bl,%bl
00007e5f	testl	%ecx,%ecx
00007e61	jle	0x00007ede
00007e63	calll	0x00007e68
00007e68	popl	%edx
00007e69	imull	$0x1c,%ecx,%esi
00007e6c	addl	$0xf4,%esi
00007e6f	movss	0x6ea08-0x7e68(%edx),%xmm2
00007e77	movss	0x6ea0c-0x7e68(%edx),%xmm1
00007e7f	xorb	%bl,%bl
00007e81	pxor	%xmm0,%xmm0
00007e85	jmp	0x00007e9e
00007e87	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007e90	subss	%xmm1,%xmm3
00007e94	maxss	%xmm0,%xmm3
00007e98	addl	$0xe4,%esi
00007e9b	movaps	%xmm3,%xmm2
00007e9e	movl	0x000000e4(%eax),%edi
00007ea4	movss	(%edi,%esi),%xmm3
00007ea9	ucomiss	%xmm2,%xmm3
00007eac	jbe	0x00007ed9
00007eae	movss	%xmm2,(%edi,%esi)
00007eb3	cvtsi2ss	%ecx,%xmm3
00007eb7	movaps	%xmm2,%xmm1
00007eba	divss	%xmm3,%xmm1
00007ebe	cvtss2sd	%xmm1,%xmm3
00007ec2	ucomisd	0x6f3e0-0x7e68(%edx),%xmm3
00007eca	jbe	0x00007ed4
00007ecc	movss	0x6ea0c-0x7e68(%edx),%xmm1
00007ed4	movb	$0x01,%bl
00007ed6	movaps	%xmm2,%xmm3
00007ed9	decl	%ecx
00007eda	testl	%ecx,%ecx
00007edc	jg	0x00007e90
00007ede	andb	$0x01,%bl
00007ee1	movzbl	%bl,%eax
00007ee4	popl	%esi
00007ee5	popl	%edi
00007ee6	popl	%ebx
00007ee7	ret
00007ee8	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindEntryTag(CChoreoEvent::AbsTagType):
00007ef0	pushl	%ebp
00007ef1	pushl	%ebx
00007ef2	pushl	%edi
00007ef3	pushl	%esi
00007ef4	imull	$0x14,0x18(%esp),%eax
00007ef9	movl	0x14(%esp),%edx
00007efd	leal	0x000000e4(%edx,%eax),%ecx
00007f04	movl	0x000000f0(%edx,%eax),%edx
00007f0b	xorl	%edi,%edi
00007f0d	movl	$0xffffffff,%esi
00007f12	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007f20	movl	%edi,%ebx
00007f22	incl	%esi
00007f23	cmpl	%edx,%esi
00007f25	jge	0x00007f3e
00007f27	leal	0x1c(%ebx),%edi
00007f2a	movl	(%ecx),%ebp
00007f2c	movl	%ebp,%eax
00007f2e	addl	%ebx,%eax
00007f30	je	0x00007f20
00007f32	testb	$0x04,0x14(%ebp,%ebx)
00007f37	je	0x00007f20
00007f39	popl	%esi
00007f3a	popl	%edi
00007f3b	popl	%ebx
00007f3c	popl	%ebp
00007f3d	ret
00007f3e	xorl	%eax,%eax
00007f40	jmp	0x00007f39
00007f42	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::FindExitTag(CChoreoEvent::AbsTagType):
00007f50	pushl	%ebp
00007f51	pushl	%ebx
00007f52	pushl	%edi
00007f53	pushl	%esi
00007f54	imull	$0x14,0x18(%esp),%eax
00007f59	movl	0x14(%esp),%edx
00007f5d	leal	0x000000e4(%edx,%eax),%ecx
00007f64	movl	0x000000f0(%edx,%eax),%edx
00007f6b	xorl	%edi,%edi
00007f6d	movl	$0xffffffff,%esi
00007f72	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007f80	movl	%edi,%ebx
00007f82	incl	%esi
00007f83	cmpl	%edx,%esi
00007f85	jge	0x00007f9e
00007f87	leal	0x1c(%ebx),%edi
00007f8a	movl	(%ecx),%ebp
00007f8c	movl	%ebp,%eax
00007f8e	addl	%ebx,%eax
00007f90	je	0x00007f80
00007f92	testb	$0x08,0x14(%ebp,%ebx)
00007f97	je	0x00007f80
00007f99	popl	%esi
00007f9a	popl	%edi
00007f9b	popl	%ebx
00007f9c	popl	%ebp
00007f9d	ret
00007f9e	xorl	%eax,%eax
00007fa0	jmp	0x00007f99
00007fa2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetMovementStyle(char*, int):
00007fb0	pushl	%ebp
00007fb1	movl	%esp,%ebp
00007fb3	pushl	%ebx
00007fb4	pushl	%edi
00007fb5	pushl	%esi
00007fb6	subl	$0x0c,%esp
00007fb9	movl	0x0c(%ebp),%esi
00007fbc	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
00007fbf	movl	0x08(%ebp),%eax
00007fc2	addl	$0x28,%eax
00007fc5	movl	%eax,(%esp)
00007fc8	movl	0x10(%ebp),%edi
00007fcb	decl	%edi
00007fcc	calll	CUtlString::Get()
00007fd1	movl	%esi,%ecx
00007fd3	jmp	0x00007fe4
00007fd5	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00007fe0	movb	%dl,(%ecx)
00007fe2	incl	%ecx
00007fe3	incl	%eax
00007fe4	movb	(%eax),%dl
00007fe6	movb	%dl,%dh
00007fe8	orb	$0x20,%dh
00007feb	cmpb	$0x20,%dh
00007fee	je	0x00007ff8
00007ff0	movl	%ecx,%ebx
00007ff2	subl	%esi,%ebx
00007ff4	cmpl	%edi,%ebx
00007ff6	jl	0x00007fe0
00007ff8	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%ecx)
00007ffb	addl	$0x0c,%esp
00007ffe	popl	%esi
00007fff	popl	%edi
00008000	popl	%ebx
00008001	popl	%ebp
00008002	ret
00008003	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetDistanceStyle(char*, int):
00008010	pushl	%ebp
00008011	movl	%esp,%ebp
00008013	pushl	%ebx
00008014	pushl	%edi
00008015	pushl	%esi
00008016	subl	$0x0c,%esp
00008019	movl	0x0c(%ebp),%esi
0000801c	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
0000801f	movl	0x08(%ebp),%eax
00008022	addl	$0x28,%eax
00008025	movl	%eax,(%esp)
00008028	calll	CUtlString::Get()
0000802d	movl	%eax,(%esp)
00008030	movl	$0x00000020,0x04(%esp)
00008038	calll	_strchr
0000803d	testl	%eax,%eax
0000803f	je	0x00008065
00008041	movl	0x10(%ebp),%ecx
00008044	incl	%eax
00008045	decl	%ecx
00008046	movl	%esi,%edx
00008048	jmp	0x00008054
0000804a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00008050	movb	%bl,(%edx)
00008052	incl	%eax
00008053	incl	%edx
00008054	movb	(%eax),%bl
00008056	testb	%bl,%bl
00008058	je	0x00008062
0000805a	movl	%edx,%edi
0000805c	subl	%esi,%edi
0000805e	cmpl	%ecx,%edi
00008060	jl	0x00008050
00008062	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edx)
00008065	addl	$0x0c,%esp
00008068	popl	%esi
00008069	popl	%edi
0000806a	popl	%ebx
0000806b	popl	%ebp
0000806c	ret
0000806d	nopl	(%eax)
CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION):
00008070	movb	0x08(%esp),%al
00008074	movl	0x04(%esp),%ecx
00008078	movb	%al,0x05(%ecx)
0000807b	ret
0000807c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::GetCloseCaptionType() const:
00008080	movl	0x04(%esp),%eax
00008084	movzbl	0x05(%eax),%eax
00008088	ret
00008089	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::SetCloseCaptionToken(char const*):
00008090	pushl	%ebp
00008091	movl	%esp,%ebp
00008093	subl	$0x08,%esp
00008096	movl	0x0c(%ebp),%eax
00008099	movl	%eax,0x04(%esp)
0000809d	movl	$0x0000013c,%eax
000080a2	addl	0x08(%ebp),%eax
000080a5	movl	%eax,(%esp)
000080a8	calll	CUtlString::operator=(char const*)
000080ad	addl	$0x08,%esp
000080b0	popl	%ebp
000080b1	ret
000080b2	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetCloseCaptionToken() const:
000080c0	pushl	%ebp
000080c1	movl	%esp,%ebp
000080c3	subl	$0x08,%esp
000080c6	movl	$0x0000013c,%eax
000080cb	addl	0x08(%ebp),%eax
000080ce	movl	%eax,(%esp)
000080d1	calll	CUtlString::Get() const
000080d6	addl	$0x08,%esp
000080d9	popl	%ebp
000080da	ret
000080db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int):
000080e0	pushl	%ebp
000080e1	movl	%esp,%ebp
000080e3	pushl	%ebx
000080e4	pushl	%edi
000080e5	pushl	%esi
000080e6	subl	$0x0c,%esp
000080e9	movl	0x0c(%ebp),%esi
000080ec	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%esi)
000080ef	movl	0x08(%ebp),%ebx
000080f2	movzbl	0x05(%ebx),%ecx
000080f6	testl	%ecx,%ecx
000080f8	je	0x0000810c
000080fa	xorb	%al,%al
000080fc	cmpl	$0x01,%ecx
000080ff	jne	0x00008144
00008101	xorb	%al,%al
00008103	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000178(%ebx)
0000810a	js	0x00008144
0000810c	leal	0x0000013c(%ebx),%edi
00008112	movl	%edi,(%esp)
00008115	calll	CUtlString::operator char const*() const
0000811a	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%eax)
0000811d	je	0x00008124
0000811f	movl	%edi,(%esp)
00008122	jmp	0x0000812a
00008124	addl	$0x18,%ebx
00008127	movl	%ebx,(%esp)
0000812a	calll	CUtlString::Get()
0000812f	movl	0x10(%ebp),%ecx
00008132	movl	%ecx,0x08(%esp)
00008136	movl	%eax,0x04(%esp)
0000813a	movl	%esi,(%esp)
0000813d	calll	V_strncpy(char*, char const*, int)
00008142	movb	$0x01,%al
00008144	movzbl	%al,%eax
00008147	addl	$0x0c,%esp
0000814a	popl	%esi
0000814b	popl	%edi
0000814c	popl	%ebx
0000814d	popl	%ebp
0000814e	ret
0000814f	nop
CChoreoEvent::IsUsingCombinedFile() const:
00008150	movl	0x04(%esp),%eax
00008154	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000178(%eax)
0000815b	sets	%al
0000815e	movzbl	%al,%eax
00008161	ret
00008162	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetUsingCombinedFile(bool):
00008170	movb	0x08(%esp),%al
00008174	shlb	$0x07,%al
00008177	movl	0x04(%esp),%ecx
0000817b	movb	0x00000178(%ecx),%dl
00008181	andb	$0x7f,%dl
00008184	orb	%al,%dl
00008186	movb	%dl,0x00000178(%ecx)
0000818c	ret
0000818d	nopl	(%eax)
CChoreoEvent::SetRequiredCombinedChecksum(unsigned int):
00008190	movl	0x08(%esp),%eax
00008194	movl	0x04(%esp),%ecx
00008198	movl	%eax,0x0000014c(%ecx)
0000819e	ret
0000819f	nop
CChoreoEvent::GetRequiredCombinedChecksum():
000081a0	movl	0x04(%esp),%eax
000081a4	movl	0x0000014c(%eax),%eax
000081aa	ret
000081ab	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetNumSlaves(int):
000081b0	movl	0x08(%esp),%eax
000081b4	movl	0x04(%esp),%ecx
000081b8	movl	%eax,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ecx)
000081be	ret
000081bf	nop
CChoreoEvent::GetNumSlaves() const:
000081c0	movl	0x04(%esp),%eax
000081c4	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%eax),%eax
000081ca	ret
000081cb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetLastSlaveEndTime(float):
000081d0	movss	0x08(%esp),%xmm0
000081d6	movl	0x04(%esp),%eax
000081da	movss	%xmm0,0x00000154(%eax)
000081e2	ret
000081e3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetLastSlaveEndTime() const:
000081f0	movl	0x04(%esp),%eax
000081f4	flds	0x00000154(%eax)
000081fa	ret
000081fb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetCloseCaptionTokenValid(bool):
00008200	movl	0x04(%esp),%eax
00008204	movb	0x00000179(%eax),%cl
0000820a	andb	$0xfe,%cl
0000820d	movb	0x08(%esp),%dl
00008211	orb	%cl,%dl
00008213	movb	%dl,0x00000179(%eax)
00008219	ret
0000821a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetCloseCaptionTokenValid() const:
00008220	movl	0x04(%esp),%eax
00008224	movzbl	0x00000179(%eax),%eax
0000822b	andl	$0x01,%eax
0000822e	ret
0000822f	nop
CChoreoEvent::ComputeCombinedBaseFileName(char*, int, bool):
00008230	pushl	%ebp
00008231	movl	%esp,%ebp
00008233	pushl	%ebx
00008234	pushl	%edi
00008235	pushl	%esi
00008236	subl	$0x0000026c,%esp
0000823c	calll	0x00008241
00008241	popl	%eax
00008242	movl	%eax,0xfffffdac(%ebp)
00008248	movl	0x80d3a-0x8241(%eax),%eax
0000824e	movl	%eax,0xfffffda8(%ebp)
00008254	movl	(%eax),%eax
00008256	movl	%eax,0xf0(%ebp)
00008259	xorb	%bl,%bl
0000825b	movl	0x08(%ebp),%eax
0000825e	cmpb	$0x05,0x04(%eax)
00008262	jne	0x000083f2
00008268	xorb	%bl,%bl
0000826a	cmpb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x05(%eax)
0000826e	jne	0x000083f2
00008274	xorb	%bl,%bl
00008276	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%eax)
0000827d	je	0x000083f2
00008283	xorb	%bl,%bl
00008285	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x00000128(%eax)
0000828c	je	0x000083f2
00008292	movb	0x14(%ebp),%bh
00008295	leal	0x0000013c(%eax),%eax
0000829b	movl	%eax,(%esp)
0000829e	calll	CUtlString::Get()
000082a3	movl	%eax,%esi
000082a5	leal	0xfffffdb0(%ebp),%edi
000082ab	jmp	0x000082ce
000082ad	nopl	(%eax)
000082b0	movl	%ecx,(%esp)
000082b3	movl	$0x00000500,0x04(%esp)
000082bb	calll	___maskrune
000082c0	movb	(%esi),%cl
000082c2	movb	$0x5f,%dl
000082c4	testl	%eax,%eax
000082c6	je	0x000082ca
000082c8	movb	%cl,%dl
000082ca	movb	%dl,(%edi)
000082cc	incl	%esi
000082cd	incl	%edi
000082ce	movzbl	(%esi),%ecx
000082d1	testl	%ecx,%ecx
000082d3	je	0x00008301
000082d5	leal	0xfffffdb0(%ebp),%edx
000082db	movl	%edi,%eax
000082dd	subl	%edx,%eax
000082df	cmpl	$0x3f,%eax
000082e2	jg	0x00008301
000082e4	testb	%cl,%cl
000082e6	js	0x000082b0
000082e8	movl	0xfffffdac(%ebp),%eax
000082ee	movl	0x80d32-0x8241(%eax),%eax
000082f4	movl	0x34(%eax,%ecx,4),%eax
000082f8	movl	$0x00000500,%edx
000082fd	andl	%edx,%eax
000082ff	jmp	0x000082c2
00008301	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),(%edi)
00008304	leal	0xfffffdb0(%ebp),%esi
0000830a	movl	%esi,(%esp)
0000830d	xorb	%bl,%bl
0000830f	calll	_strlen
00008314	testl	%eax,%eax
00008316	movl	0x08(%ebp),%eax
00008319	jle	0x000083f2
0000831f	movl	0x00000128(%eax),%eax
00008325	movl	%eax,(%esp)
00008328	calll	CChoreoScene::GetFilename() const
0000832d	movl	%eax,0x04(%esp)
00008331	leal	0xfffffdf0(%ebp),%edi
00008337	movl	%edi,(%esp)
0000833a	movl	CEventRelativeTag::SetOwner(CChoreoEvent*),0x08(%esp)
00008342	calll	V_strncpy(char*, char const*, int)
00008347	movl	%edi,(%esp)
0000834a	calll	V_StripFilename(char*)
0000834f	movl	%edi,(%esp)
00008352	movl	$0x0000002f,0x04(%esp)
0000835a	calll	V_FixSlashes(char*, char)
0000835f	movl	0xfffffdac(%ebp),%eax
00008365	leal	0x6f598-0x8241(%eax),%eax
0000836b	movl	%eax,0x04(%esp)
0000836f	movl	%edi,(%esp)
00008372	calll	_strstr
00008377	testl	%eax,%eax
00008379	je	0x0000838b
0000837b	cmpb	$0x2f,0x06(%eax)
0000837f	je	0x00008386
00008381	addl	$0x06,%eax
00008384	jmp	0x00008389
00008386	addl	$0x07,%eax
00008389	movl	%eax,%edi
0000838b	movl	%edi,(%esp)
0000838e	calll	_strlen
00008393	testl	%eax,%eax
00008395	jle	0x000083ab
00008397	leal	0x01(%eax),%ecx
0000839a	cmpl	$0x000001fe,%ecx
000083a0	ja	0x000083ab
000083a2	movb	$0x2f,(%edi,%eax)
000083a6	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x01(%edi,%eax)
000083ab	cmpb	$0x01,%bh
000083ae	movl	0x0c(%ebp),%ecx
000083b1	movl	0x10(%ebp),%edx
000083b4	jne	0x000083cc
000083b6	movl	%esi,0x10(%esp)
000083ba	movl	%edi,0x0c(%esp)
000083be	movl	0xfffffdac(%ebp),%eax
000083c4	leal	0x6f59f-0x8241(%eax),%eax
000083ca	jmp	0x000083e0
000083cc	movl	%esi,0x10(%esp)
000083d0	movl	%edi,0x0c(%esp)
000083d4	movl	0xfffffdac(%ebp),%eax
000083da	leal	0x6f5bf-0x8241(%eax),%eax
000083e0	movl	%eax,0x08(%esp)
000083e4	movl	%edx,0x04(%esp)
000083e8	movl	%ecx,(%esp)
000083eb	calll	V_snprintf(char*, int, char const*, ...)
000083f0	movb	$0x01,%bl
000083f2	movl	0xfffffda8(%ebp),%eax
000083f8	movl	(%eax),%eax
000083fa	cmpl	0xf0(%ebp),%eax
000083fd	jne	0x0000840d
000083ff	movzbl	%bl,%eax
00008402	addl	$0x0000026c,%esp
00008408	popl	%esi
00008409	popl	%edi
0000840a	popl	%ebx
0000840b	popl	%ebp
0000840c	ret
0000840d	calll	___stack_chk_fail
00008412	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::IsCombinedUsingGenderToken() const:
00008420	movl	0x04(%esp),%eax
00008424	movb	0x00000179(%eax),%al
0000842a	andb	$0x02,%al
0000842c	shrb	%al
0000842e	movzbl	%al,%eax
00008431	ret
00008432	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetCombinedUsingGenderToken(bool):
00008440	movb	0x08(%esp),%al
00008444	addb	%al,%al
00008446	movl	0x04(%esp),%ecx
0000844a	movb	0x00000179(%ecx),%dl
00008450	andb	$0xfd,%dl
00008453	orb	%al,%dl
00008455	movb	%dl,0x00000179(%ecx)
0000845b	ret
0000845c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
CChoreoEvent::ValidateCombinedFile():
00008460	xorl	%eax,%eax
00008462	ret
00008463	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::IsSuppressingCaptionAttenuation() const:
00008470	movl	0x04(%esp),%eax
00008474	movb	0x00000179(%eax),%al
0000847a	andb	$0x04,%al
0000847c	shrb	$0x02,%al
0000847f	movzbl	%al,%eax
00008482	ret
00008483	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetSuppressingCaptionAttenuation(bool):
00008490	movb	0x08(%esp),%al
00008494	shlb	$0x02,%al
00008497	movl	0x04(%esp),%ecx
0000849b	movb	0x00000179(%ecx),%dl
000084a1	andb	$0xfb,%dl
000084a4	orb	%al,%dl
000084a6	movb	%dl,0x00000179(%ecx)
000084ac	ret
000084ad	nopl	(%eax)
CChoreoEvent::AddEventDependency(CChoreoEvent*):
000084b0	pushl	%ebp
000084b1	movl	%esp,%ebp
000084b3	pushl	%ebx
000084b4	pushl	%edi
000084b5	pushl	%esi
000084b6	subl	$0x1c,%esp
000084b9	movl	0x08(%ebp),%edi
000084bc	movl	0x00000164(%edi),%esi
000084c2	leal	0x00000158(%edi),%ebx
000084c8	xorl	%eax,%eax
000084ca	movl	0x0c(%ebp),%edx
000084cd	jmp	0x000084d1
000084cf	nop
000084d0	incl	%eax
000084d1	cmpl	%esi,%eax
000084d3	jge	0x000084e1
000084d5	movl	(%ebx),%ecx
000084d7	cmpl	%edx,(%ecx,%eax,4)
000084da	jne	0x000084d0
000084dc	cmpl	$0xff,%eax
000084df	jne	0x00008553
000084e1	movl	%edi,%edx
000084e3	movl	0x0000015c(%edx),%eax
000084e9	leal	0x01(%esi),%edi
000084ec	cmpl	%eax,%edi
000084ee	movl	%esi,%ecx
000084f0	jle	0x00008512
000084f2	movl	%edi,%ecx
000084f4	subl	%eax,%ecx
000084f6	movl	%ecx,0x04(%esp)
000084fa	movl	%ebx,(%esp)
000084fd	movl	%edi,0xf0(%ebp)
00008500	movl	%edx,%edi
00008502	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
00008507	movl	%edi,%edx
00008509	movl	0xf0(%ebp),%edi
0000850c	movl	0x00000164(%edx),%ecx
00008512	incl	%ecx
00008513	movl	%ecx,0x00000164(%edx)
00008519	movl	0x00000158(%edx),%eax
0000851f	movl	%eax,0x00000168(%edx)
00008525	subl	%esi,%ecx
00008527	decl	%ecx
00008528	testl	%ecx,%ecx
0000852a	jle	0x00008547
0000852c	shll	$0x02,%ecx
0000852f	movl	%ecx,0x08(%esp)
00008533	leal	(%eax,%esi,4),%ecx
00008536	movl	%ecx,0x04(%esp)
0000853a	leal	(%eax,%edi,4),%eax
0000853d	movl	%eax,(%esp)
00008540	calll	_memmove
00008545	movl	(%ebx),%eax
00008547	shll	$0x02,%esi
0000854a	addl	%eax,%esi
0000854c	movl	0x0c(%ebp),%eax
0000854f	je	0x00008553
00008551	movl	%eax,(%esi)
00008553	addl	$0x1c,%esp
00008556	popl	%esi
00008557	popl	%edi
00008558	popl	%ebx
00008559	popl	%ebp
0000855a	ret
0000855b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&):
00008560	pushl	%ebp
00008561	movl	%esp,%ebp
00008563	pushl	%ebx
00008564	pushl	%edi
00008565	pushl	%esi
00008566	subl	$0x1c,%esp
00008569	movl	0x08(%ebp),%eax
0000856c	movl	0x00000164(%eax),%eax
00008572	movl	%eax,0xe8(%ebp)
00008575	testl	%eax,%eax
00008577	jle	0x0000860c
0000857d	movl	0x0c(%ebp),%edx
00008580	xorl	%esi,%esi
00008582	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00008590	movl	0x08(%ebp),%eax
00008593	movl	0x00000158(%eax),%eax
00008599	movl	%eax,0xf0(%ebp)
0000859c	movl	0x04(%edx),%eax
0000859f	movl	0x0c(%edx),%edi
000085a2	leal	0x01(%edi),%ebx
000085a5	cmpl	%eax,%ebx
000085a7	movl	%edi,%ecx
000085a9	jle	0x000085c8
000085ab	movl	%ebx,%ecx
000085ad	subl	%eax,%ecx
000085af	movl	%ecx,0x04(%esp)
000085b3	movl	%edx,(%esp)
000085b6	movl	%ebx,0xec(%ebp)
000085b9	movl	%edx,%ebx
000085bb	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
000085c0	movl	%ebx,%edx
000085c2	movl	0xec(%ebp),%ebx
000085c5	movl	0x0c(%edx),%ecx
000085c8	incl	%ecx
000085c9	movl	%ecx,0x0c(%edx)
000085cc	movl	(%edx),%eax
000085ce	movl	%eax,0x10(%edx)
000085d1	subl	%edi,%ecx
000085d3	decl	%ecx
000085d4	testl	%ecx,%ecx
000085d6	jle	0x000085f7
000085d8	shll	$0x02,%ecx
000085db	movl	%ecx,0x08(%esp)
000085df	leal	(%eax,%edi,4),%ecx
000085e2	movl	%ecx,0x04(%esp)
000085e6	leal	(%eax,%ebx,4),%eax
000085e9	movl	%eax,(%esp)
000085ec	movl	%edx,%ebx
000085ee	calll	_memmove
000085f3	movl	%ebx,%edx
000085f5	movl	(%edx),%eax
000085f7	shll	$0x02,%edi
000085fa	addl	%eax,%edi
000085fc	je	0x00008606
000085fe	movl	0xf0(%ebp),%eax
00008601	movl	(%eax,%esi,4),%eax
00008604	movl	%eax,(%edi)
00008606	incl	%esi
00008607	cmpl	%esi,0xe8(%ebp)
0000860a	jne	0x00008590
0000860c	addl	$0x1c,%esp
0000860f	popl	%esi
00008610	popl	%edi
00008611	popl	%ebx
00008612	popl	%ebp
00008613	ret
00008614	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::SetEdgeInfo(bool, int, float):
00008620	movb	0x08(%esp),%al
00008624	movzbl	%al,%eax
00008627	xorl	$0x01,%eax
0000862a	imull	$0x07,%eax,%eax
0000862d	movw	0x0c(%esp),%dx
00008632	movl	0x04(%esp),%ecx
00008636	movw	%dx,0x15(%ecx,%eax)
0000863b	movss	0x10(%esp),%xmm0
00008641	movss	%xmm0,0x17(%ecx,%eax)
00008647	ret
00008648	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::GetEdgeInfo(bool, int&, float&) const:
00008650	pushl	%esi
00008651	movb	0x0c(%esp),%al
00008655	movzbl	%al,%eax
00008658	xorl	$0x01,%eax
0000865b	imull	$0x07,%eax,%eax
0000865e	movl	0x08(%esp),%ecx
00008662	movzwl	0x15(%ecx,%eax),%edx
00008667	movl	0x10(%esp),%esi
0000866b	movl	%edx,(%esi)
0000866d	movss	0x17(%ecx,%eax),%xmm0
00008673	movl	0x14(%esp),%eax
00008677	movss	%xmm0,(%eax)
0000867b	popl	%esi
0000867c	ret
0000867d	nopl	(%eax)
CCurveData::SetEdgeActive(bool, bool):
00008680	movb	0x08(%esp),%al
00008684	movzbl	%al,%eax
00008687	xorl	$0x01,%eax
0000868a	imull	$0x07,%eax,%eax
0000868d	movb	0x0c(%esp),%cl
00008691	movl	0x04(%esp),%edx
00008695	movb	%cl,0x14(%edx,%eax)
00008699	ret
0000869a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::IsEdgeActive(bool) const:
000086a0	movb	0x08(%esp),%al
000086a4	movzbl	%al,%eax
000086a7	xorl	$0x01,%eax
000086aa	imull	$0x07,%eax,%eax
000086ad	movl	0x04(%esp),%ecx
000086b1	movzbl	0x14(%ecx,%eax),%eax
000086b6	andl	$0x01,%eax
000086b9	ret
000086ba	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*):
000086c0	pushl	%ebp
000086c1	movl	%esp,%ebp
000086c3	pushl	%ebx
000086c4	pushl	%edi
000086c5	pushl	%esi
000086c6	subl	$0x3c,%esp
000086c9	calll	0x000086ce
000086ce	popl	%ebx
000086cf	movl	0x08(%ebp),%edi
000086d2	movsbl	0x04(%edi),%eax
000086d6	movl	%eax,0x04(%esp)
000086da	movl	0x0c(%ebp),%eax
000086dd	movl	%eax,(%esp)
000086e0	calll	CUtlBuffer::PutChar(char)
000086e5	movl	0x14(%ebp),%esi
000086e8	movl	(%esi),%eax
000086ea	movl	(%eax),%eax
000086ec	movl	%eax,0xf0(%ebp)
000086ef	leal	0x08(%edi),%eax
000086f2	movl	%eax,(%esp)
000086f5	calll	CUtlString::Get()
000086fa	movl	%eax,0x04(%esp)
000086fe	movl	%esi,(%esp)
00008701	call	*0xf0(%ebp)
00008704	movl	0x0c(%ebp),%edi
00008707	movw	%ax,%si
0000870a	testb	$0x01,0x15(%edi)
0000870e	jne	0x0000874b
00008710	movl	%edi,(%esp)
00008713	movl	$0x00000002,0x04(%esp)
0000871b	calll	CUtlBuffer::CheckPut(int)
00008720	cmpb	$0x01,%al
00008722	jne	0x00008764
00008724	movl	0x10(%edi),%eax
00008727	subl	0x20(%edi),%eax
0000872a	addl	(%edi),%eax
0000872c	testb	$0x01,0x34(%edi)
00008730	je	0x0000873a
00008732	testl	%eax,%eax
00008734	je	0x0000873d
00008736	rolw	$0x08,%si
0000873a	movw	%si,(%eax)
0000873d	addl	$0x02,0x10(%edi)
00008741	movl	%edi,(%esp)
00008744	calll	CUtlBuffer::AddNullTermination()
00008749	jmp	0x00008764
0000874b	movswl	%si,%eax
0000874e	movl	%eax,0x08(%esp)
00008752	leal	0x6f5dd-0x86ce(%ebx),%eax
00008758	movl	%eax,0x04(%esp)
0000875c	movl	%edi,(%esp)
0000875f	calll	CUtlBuffer::Printf(char const*, ...)
00008764	movl	0x08(%ebp),%eax
00008767	movss	0x48(%eax),%xmm0
0000876c	testb	$0x01,0x15(%edi)
00008770	movl	%edi,%esi
00008772	jne	0x000087c0
00008774	movl	%esi,(%esp)
00008777	movl	$0x00000004,0x04(%esp)
0000877f	movss	%xmm0,0xf0(%ebp)
00008784	calll	CUtlBuffer::CheckPut(int)
00008789	movss	0xf0(%ebp),%xmm0
0000878e	testb	%al,%al
00008790	je	0x000087dc
00008792	movl	0x10(%esi),%eax
00008795	subl	0x20(%esi),%eax
00008798	addl	(%esi),%eax
0000879a	testb	$0x01,0x34(%esi)
0000879e	je	0x000087ae
000087a0	testl	%eax,%eax
000087a2	je	0x000087b2
000087a4	movd	%xmm0,%ecx
000087a8	bswap	%ecx
000087aa	movd	%ecx,%xmm0
000087ae	movss	%xmm0,(%eax)
000087b2	addl	$0x04,0x10(%esi)
000087b6	movl	%esi,(%esp)
000087b9	calll	CUtlBuffer::AddNullTermination()
000087be	jmp	0x000087dc
000087c0	cvtss2sd	%xmm0,%xmm0
000087c4	movsd	%xmm0,0x08(%esp)
000087ca	leal	0x6f5da-0x86ce(%ebx),%eax
000087d0	movl	%eax,0x04(%esp)
000087d4	movl	%esi,(%esp)
000087d7	calll	CUtlBuffer::Printf(char const*, ...)
000087dc	movl	0x08(%ebp),%eax
000087df	movss	0x4c(%eax),%xmm0
000087e4	testb	$0x01,0x15(%esi)
000087e8	movl	%esi,%edi
000087ea	jne	0x00008838
000087ec	movl	%edi,(%esp)
000087ef	movl	$0x00000004,0x04(%esp)
000087f7	movss	%xmm0,0xf0(%ebp)
000087fc	calll	CUtlBuffer::CheckPut(int)
00008801	movss	0xf0(%ebp),%xmm0
00008806	testb	%al,%al
00008808	je	0x00008854
0000880a	movl	0x10(%edi),%eax
0000880d	subl	0x20(%edi),%eax
00008810	addl	(%edi),%eax
00008812	testb	$0x01,0x34(%edi)
00008816	je	0x00008826
00008818	testl	%eax,%eax
0000881a	je	0x0000882a
0000881c	movd	%xmm0,%ecx
00008820	bswap	%ecx
00008822	movd	%ecx,%xmm0
00008826	movss	%xmm0,(%eax)
0000882a	addl	$0x04,0x10(%edi)
0000882e	movl	%edi,(%esp)
00008831	calll	CUtlBuffer::AddNullTermination()
00008836	jmp	0x00008854
00008838	cvtss2sd	%xmm0,%xmm0
0000883c	movsd	%xmm0,0x08(%esp)
00008842	leal	0x6f5da-0x86ce(%ebx),%eax
00008848	movl	%eax,0x04(%esp)
0000884c	movl	%edi,(%esp)
0000884f	calll	CUtlBuffer::Printf(char const*, ...)
00008854	movl	%ebx,0xec(%ebp)
00008857	movl	0x14(%ebp),%ebx
0000885a	movl	(%ebx),%eax
0000885c	movl	(%eax),%esi
0000885e	movl	0x08(%ebp),%eax
00008861	leal	0x18(%eax),%eax
00008864	movl	%eax,(%esp)
00008867	calll	CUtlString::Get()
0000886c	movl	%eax,0x04(%esp)
00008870	movl	%ebx,(%esp)
00008873	call	*%esi
00008875	movw	%ax,%si
00008878	testb	$0x01,0x15(%edi)
0000887c	jne	0x000088b9
0000887e	movl	%edi,(%esp)
00008881	movl	$0x00000002,0x04(%esp)
00008889	calll	CUtlBuffer::CheckPut(int)
0000888e	cmpb	$0x01,%al
00008890	jne	0x000088d5
00008892	movl	0x10(%edi),%eax
00008895	subl	0x20(%edi),%eax
00008898	addl	(%edi),%eax
0000889a	testb	$0x01,0x34(%edi)
0000889e	je	0x000088a8
000088a0	testl	%eax,%eax
000088a2	je	0x000088ab
000088a4	rolw	$0x08,%si
000088a8	movw	%si,(%eax)
000088ab	addl	$0x02,0x10(%edi)
000088af	movl	%edi,(%esp)
000088b2	calll	CUtlBuffer::AddNullTermination()
000088b7	jmp	0x000088d5
000088b9	movswl	%si,%eax
000088bc	movl	%eax,0x08(%esp)
000088c0	movl	0xec(%ebp),%eax
000088c3	leal	0x6f5dd-0x86ce(%eax),%eax
000088c9	movl	%eax,0x04(%esp)
000088cd	movl	%edi,(%esp)
000088d0	calll	CUtlBuffer::Printf(char const*, ...)
000088d5	movl	(%ebx),%eax
000088d7	movl	(%eax),%esi
000088d9	movl	0x08(%ebp),%eax
000088dc	leal	0x28(%eax),%eax
000088df	movl	%eax,(%esp)
000088e2	calll	CUtlString::Get()
000088e7	movl	%eax,0x04(%esp)
000088eb	movl	%ebx,(%esp)
000088ee	call	*%esi
000088f0	movw	%ax,%si
000088f3	testb	$0x01,0x15(%edi)
000088f7	jne	0x00008934
000088f9	movl	%edi,(%esp)
000088fc	movl	$0x00000002,0x04(%esp)
00008904	calll	CUtlBuffer::CheckPut(int)
00008909	cmpb	$0x01,%al
0000890b	jne	0x00008950
0000890d	movl	0x10(%edi),%eax
00008910	subl	0x20(%edi),%eax
00008913	addl	(%edi),%eax
00008915	testb	$0x01,0x34(%edi)
00008919	je	0x00008923
0000891b	testl	%eax,%eax
0000891d	je	0x00008926
0000891f	rolw	$0x08,%si
00008923	movw	%si,(%eax)
00008926	addl	$0x02,0x10(%edi)
0000892a	movl	%edi,(%esp)
0000892d	calll	CUtlBuffer::AddNullTermination()
00008932	jmp	0x00008950
00008934	movswl	%si,%eax
00008937	movl	%eax,0x08(%esp)
0000893b	movl	0xec(%ebp),%eax
0000893e	leal	0x6f5dd-0x86ce(%eax),%eax
00008944	movl	%eax,0x04(%esp)
00008948	movl	%edi,(%esp)
0000894b	calll	CUtlBuffer::Printf(char const*, ...)
00008950	movl	(%ebx),%eax
00008952	movl	(%eax),%esi
00008954	movl	0x08(%ebp),%eax
00008957	leal	0x38(%eax),%eax
0000895a	movl	%eax,(%esp)
0000895d	calll	CUtlString::Get()
00008962	movl	%eax,0x04(%esp)
00008966	movl	%ebx,(%esp)
00008969	call	*%esi
0000896b	movw	%ax,%si
0000896e	testb	$0x01,0x15(%edi)
00008972	jne	0x000089af
00008974	movl	%edi,(%esp)
00008977	movl	$0x00000002,0x04(%esp)
0000897f	calll	CUtlBuffer::CheckPut(int)
00008984	cmpb	$0x01,%al
00008986	jne	0x000089cb
00008988	movl	0x10(%edi),%eax
0000898b	subl	0x20(%edi),%eax
0000898e	addl	(%edi),%eax
00008990	testb	$0x01,0x34(%edi)
00008994	je	0x0000899e
00008996	testl	%eax,%eax
00008998	je	0x000089a1
0000899a	rolw	$0x08,%si
0000899e	movw	%si,(%eax)
000089a1	addl	$0x02,0x10(%edi)
000089a5	movl	%edi,(%esp)
000089a8	calll	CUtlBuffer::AddNullTermination()
000089ad	jmp	0x000089cb
000089af	movswl	%si,%eax
000089b2	movl	%eax,0x08(%esp)
000089b6	movl	0xec(%ebp),%eax
000089b9	leal	0x6f5dd-0x86ce(%eax),%eax
000089bf	movl	%eax,0x04(%esp)
000089c3	movl	%edi,(%esp)
000089c6	calll	CUtlBuffer::Printf(char const*, ...)
000089cb	movl	%edi,0x04(%esp)
000089cf	movl	0x08(%ebp),%esi
000089d2	leal	0x5c(%esi),%eax
000089d5	movl	%eax,(%esp)
000089d8	calll	CCurveData::SaveToBuffer(CUtlBuffer&, IChoreoStringPool*)
000089dd	movzwl	0x00000178(%esi),%eax
000089e4	movb	%al,%cl
000089e6	shrb	%cl
000089e8	andb	$0x01,%cl
000089eb	movb	%al,%dl
000089ed	shlb	$0x02,%dl
000089f0	andb	$0x04,%dl
000089f3	orb	%cl,%dl
000089f5	movb	%al,%cl
000089f7	shrb	$0x04,%cl
000089fa	andb	$0x02,%cl
000089fd	orb	%dl,%cl
000089ff	movl	%eax,%edx
00008a01	shrl	$0x09,%edx
00008a04	andb	$0x20,%dl
00008a07	orb	%cl,%dl
00008a09	movl	%eax,%ecx
00008a0b	shrl	$0x0a,%ecx
00008a0e	andb	$0x08,%cl
00008a11	orb	%dl,%cl
00008a13	shrl	$0x07,%eax
00008a16	andb	$0x10,%al
00008a18	movb	%al,%bl
00008a1a	orb	%cl,%bl
00008a1c	testb	$0x01,0x15(%edi)
00008a20	movl	%edi,%esi
00008a22	jne	0x00008a50
00008a24	movl	%esi,(%esp)
00008a27	movl	$0x00000001,0x04(%esp)
00008a2f	calll	CUtlBuffer::CheckPut(int)
00008a34	cmpb	$0x01,%al
00008a36	jne	0x00008a6c
00008a38	movl	(%esi),%eax
00008a3a	movl	0x10(%esi),%ecx
00008a3d	subl	0x20(%esi),%ecx
00008a40	movb	%bl,(%eax,%ecx)
00008a43	incl	0x10(%esi)
00008a46	movl	%esi,(%esp)
00008a49	calll	CUtlBuffer::AddNullTermination()
00008a4e	jmp	0x00008a6c
00008a50	movzbl	%bl,%eax
00008a53	movl	%eax,0x08(%esp)
00008a57	movl	0xec(%ebp),%eax
00008a5a	leal	0x6f5d7-0x86ce(%eax),%eax
00008a60	movl	%eax,0x04(%esp)
00008a64	movl	%esi,(%esp)
00008a67	calll	CUtlBuffer::Printf(char const*, ...)
00008a6c	movl	0x08(%ebp),%edi
00008a6f	movss	0x00000134(%edi),%xmm0
00008a77	testb	$0x01,0x15(%esi)
00008a7b	jne	0x00008ac9
00008a7d	movl	%esi,(%esp)
00008a80	movl	$0x00000004,0x04(%esp)
00008a88	movss	%xmm0,0xf0(%ebp)
00008a8d	calll	CUtlBuffer::CheckPut(int)
00008a92	movss	0xf0(%ebp),%xmm0
00008a97	testb	%al,%al
00008a99	je	0x00008ae8
00008a9b	movl	0x10(%esi),%eax
00008a9e	subl	0x20(%esi),%eax
00008aa1	addl	(%esi),%eax
00008aa3	testb	$0x01,0x34(%esi)
00008aa7	je	0x00008ab7
00008aa9	testl	%eax,%eax
00008aab	je	0x00008abb
00008aad	movd	%xmm0,%ecx
00008ab1	bswap	%ecx
00008ab3	movd	%ecx,%xmm0
00008ab7	movss	%xmm0,(%eax)
00008abb	addl	$0x04,0x10(%esi)
00008abf	movl	%esi,(%esp)
00008ac2	calll	CUtlBuffer::AddNullTermination()
00008ac7	jmp	0x00008ae8
00008ac9	cvtss2sd	%xmm0,%xmm0
00008acd	movsd	%xmm0,0x08(%esp)
00008ad3	movl	0xec(%ebp),%eax
00008ad6	leal	0x6f5da-0x86ce(%eax),%eax
00008adc	movl	%eax,0x04(%esp)
00008ae0	movl	%esi,(%esp)
00008ae3	calll	CUtlBuffer::Printf(char const*, ...)
00008ae8	movl	0x000000c8(%edi),%ebx
00008aee	testb	$0x01,0x15(%esi)
00008af2	jne	0x00008b20
00008af4	movl	%esi,(%esp)
00008af7	movl	$0x00000001,0x04(%esp)
00008aff	calll	CUtlBuffer::CheckPut(int)
00008b04	cmpb	$0x01,%al
00008b06	jne	0x00008b3c
00008b08	movl	(%esi),%eax
00008b0a	movl	0x10(%esi),%ecx
00008b0d	subl	0x20(%esi),%ecx
00008b10	movb	%bl,(%eax,%ecx)
00008b13	incl	0x10(%esi)
00008b16	movl	%esi,(%esp)
00008b19	calll	CUtlBuffer::AddNullTermination()
00008b1e	jmp	0x00008b3c
00008b20	movl	0xec(%ebp),%eax
00008b23	leal	0x6f5d7-0x86ce(%eax),%eax
00008b29	movl	%eax,0x04(%esp)
00008b2d	movl	%esi,(%esp)
00008b30	movzbl	%bl,%eax
00008b33	movl	%eax,0x08(%esp)
00008b37	calll	CUtlBuffer::Printf(char const*, ...)
00008b3c	movl	%ebx,%edx
00008b3e	movl	%esi,%ebx
00008b40	testl	%edx,%edx
00008b42	jle	0x00008c68
00008b48	xorl	%ecx,%ecx
00008b4a	movl	0xec(%ebp),%eax
00008b4d	movss	0x6ea10-0x86ce(%eax),%xmm0
00008b55	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00008b5a	movl	%edx,%eax
00008b5c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
00008b60	movl	%eax,0xe8(%ebp)
00008b63	movl	%ecx,0xf0(%ebp)
00008b66	movl	0x08(%ebp),%eax
00008b69	movl	0x000000bc(%eax),%eax
00008b6f	movl	%eax,0xe4(%ebp)
00008b72	leal	(%eax,%ecx),%eax
00008b75	movl	0x14(%ebp),%edi
00008b78	movl	(%edi),%ecx
00008b7a	movl	(%ecx),%esi
00008b7c	movl	%eax,(%esp)
00008b7f	calll	CUtlString::Get()
00008b84	movl	%eax,0x04(%esp)
00008b88	movl	%edi,(%esp)
00008b8b	call	*%esi
00008b8d	movw	%ax,%si
00008b90	movl	%ebx,%edi
00008b92	testb	$0x01,0x15(%edi)
00008b96	jne	0x00008bd3
00008b98	movl	%edi,(%esp)
00008b9b	movl	$0x00000002,0x04(%esp)
00008ba3	calll	CUtlBuffer::CheckPut(int)
00008ba8	cmpb	$0x01,%al
00008baa	jne	0x00008bef
00008bac	movl	0x10(%edi),%eax
00008baf	subl	0x20(%edi),%eax
00008bb2	addl	(%edi),%eax
00008bb4	testb	$0x01,0x34(%edi)
00008bb8	je	0x00008bc2
00008bba	testl	%eax,%eax
00008bbc	je	0x00008bc5
00008bbe	rolw	$0x08,%si
00008bc2	movw	%si,(%eax)
00008bc5	addl	$0x02,0x10(%edi)
00008bc9	movl	%edi,(%esp)
00008bcc	calll	CUtlBuffer::AddNullTermination()
00008bd1	jmp	0x00008bef
00008bd3	movswl	%si,%eax
00008bd6	movl	%eax,0x08(%esp)
00008bda	movl	0xec(%ebp),%eax
00008bdd	leal	0x6f5dd-0x86ce(%eax),%eax
00008be3	movl	%eax,0x04(%esp)
00008be7	movl	%edi,(%esp)
00008bea	calll	CUtlBuffer::Printf(char const*, ...)
00008bef	movl	0xf0(%ebp),%eax
00008bf2	movl	0xe4(%ebp),%ecx
00008bf5	movss	0x10(%ecx,%eax),%xmm0
00008bfb	mulss	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
00008c00	cvttss2si	%xmm0,%eax
00008c04	movb	%al,%bl
00008c06	testb	$0x01,0x15(%edi)
00008c0a	movl	%edi,%esi
00008c0c	jne	0x00008c3a
00008c0e	movl	%esi,(%esp)
00008c11	movl	$0x00000001,0x04(%esp)
00008c19	calll	CUtlBuffer::CheckPut(int)
00008c1e	cmpb	$0x01,%al
00008c20	jne	0x00008c56
00008c22	movl	(%esi),%eax
00008c24	movl	0x10(%esi),%ecx
00008c27	subl	0x20(%esi),%ecx
00008c2a	movb	%bl,(%eax,%ecx)
00008c2d	incl	0x10(%esi)
00008c30	movl	%esi,(%esp)
00008c33	calll	CUtlBuffer::AddNullTermination()
00008c38	jmp	0x00008c56
00008c3a	movzbl	%bl,%eax
00008c3d	movl	%eax,0x08(%esp)
00008c41	movl	0xec(%ebp),%eax
00008c44	leal	0x6f5d7-0x86ce(%eax),%eax
00008c4a	movl	%eax,0x04(%esp)
00008c4e	movl	%esi,(%esp)
00008c51	calll	CUtlBuffer::Printf(char const*, ...)
00008c56	movl	%esi,%ebx
00008c58	movl	0xf0(%ebp),%ecx
00008c5b	addl	$0x18,%ecx
00008c5e	movl	0xe8(%ebp),%eax
00008c61	decl	%eax
00008c62	jne	0x00008b60
00008c68	movl	0x08(%ebp),%eax
00008c6b	movl	0x000000dc(%eax),%edi
00008c71	movl	%ebx,%esi
00008c73	testb	$0x01,0x15(%esi)
00008c77	jne	0x00008ca7
00008c79	movl	%esi,(%esp)
00008c7c	movl	$0x00000001,0x04(%esp)
00008c84	calll	CUtlBuffer::CheckPut(int)
00008c89	cmpb	$0x01,%al
00008c8b	movl	%edi,%ebx
00008c8d	jne	0x00008cc5
00008c8f	movl	(%esi),%eax
00008c91	movl	0x10(%esi),%ecx
00008c94	subl	0x20(%esi),%ecx
00008c97	movb	%bl,(%eax,%ecx)
00008c9a	incl	0x10(%esi)
00008c9d	movl	%esi,(%esp)
00008ca0	calll	CUtlBuffer::AddNullTermination()
00008ca5	jmp	0x00008cc5
00008ca7	movl	0xec(%ebp),%eax
00008caa	leal	0x6f5d7-0x86ce(%eax),%eax
00008cb0	movl	%eax,0x04(%esp)
00008cb4	movl	%esi,(%esp)
00008cb7	movl	%edi,%ebx
00008cb9	movzbl	%bl,%eax
00008cbc	movl	%eax,0x08(%esp)
00008cc0	calll	CUtlBuffer::Printf(char const*, ...)
00008cc5	movl	%esi,%edi
00008cc7	testl	%ebx,%ebx
00008cc9	jle	0x00008df6
00008ccf	xorl	%ecx,%ecx
00008cd1	movl	0xec(%ebp),%eax
00008cd4	movss	0x6ea10-0x86ce(%eax),%xmm0
00008cdc	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00008ce1	movl	%ebx,%eax
00008ce3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00008cf0	movl	%eax,0xe8(%ebp)
00008cf3	movl	%ecx,0xf0(%ebp)
00008cf6	movl	0x08(%ebp),%eax
00008cf9	movl	0x000000d0(%eax),%eax
00008cff	movl	%eax,0xe4(%ebp)
00008d02	leal	(%eax,%ecx),%eax
00008d05	movl	0x14(%ebp),%ebx
00008d08	movl	(%ebx),%ecx
00008d0a	movl	(%ecx),%esi
00008d0c	movl	%eax,(%esp)
00008d0f	calll	CUtlString::Get()
00008d14	movl	%eax,0x04(%esp)
00008d18	movl	%ebx,(%esp)
00008d1b	call	*%esi
00008d1d	movw	%ax,%si
00008d20	testb	$0x01,0x15(%edi)
00008d24	jne	0x00008d61
00008d26	movl	%edi,(%esp)
00008d29	movl	$0x00000002,0x04(%esp)
00008d31	calll	CUtlBuffer::CheckPut(int)
00008d36	cmpb	$0x01,%al
00008d38	jne	0x00008d7d
00008d3a	movl	0x10(%edi),%eax
00008d3d	subl	0x20(%edi),%eax
00008d40	addl	(%edi),%eax
00008d42	testb	$0x01,0x34(%edi)
00008d46	je	0x00008d50
00008d48	testl	%eax,%eax
00008d4a	je	0x00008d53
00008d4c	rolw	$0x08,%si
00008d50	movw	%si,(%eax)
00008d53	addl	$0x02,0x10(%edi)
00008d57	movl	%edi,(%esp)
00008d5a	calll	CUtlBuffer::AddNullTermination()
00008d5f	jmp	0x00008d7d
00008d61	movswl	%si,%eax
00008d64	movl	%eax,0x08(%esp)
00008d68	movl	0xec(%ebp),%eax
00008d6b	leal	0x6f5dd-0x86ce(%eax),%eax
00008d71	movl	%eax,0x04(%esp)
00008d75	movl	%edi,(%esp)
00008d78	calll	CUtlBuffer::Printf(char const*, ...)
00008d7d	movl	0xf0(%ebp),%eax
00008d80	movl	0xe4(%ebp),%ecx
00008d83	movss	0x10(%ecx,%eax),%xmm0
00008d89	mulss	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
00008d8e	cvttss2si	%xmm0,%eax
00008d92	movb	%al,%bl
00008d94	testb	$0x01,0x15(%edi)
00008d98	movl	%edi,%esi
00008d9a	jne	0x00008dc8
00008d9c	movl	%esi,(%esp)
00008d9f	movl	$0x00000001,0x04(%esp)
00008da7	calll	CUtlBuffer::CheckPut(int)
00008dac	cmpb	$0x01,%al
00008dae	jne	0x00008de4
00008db0	movl	(%esi),%eax
00008db2	movl	0x10(%esi),%ecx
00008db5	subl	0x20(%esi),%ecx
00008db8	movb	%bl,(%eax,%ecx)
00008dbb	incl	0x10(%esi)
00008dbe	movl	%esi,(%esp)
00008dc1	calll	CUtlBuffer::AddNullTermination()
00008dc6	jmp	0x00008de4
00008dc8	movzbl	%bl,%eax
00008dcb	movl	%eax,0x08(%esp)
00008dcf	movl	0xec(%ebp),%eax
00008dd2	leal	0x6f5d7-0x86ce(%eax),%eax
00008dd8	movl	%eax,0x04(%esp)
00008ddc	movl	%esi,(%esp)
00008ddf	calll	CUtlBuffer::Printf(char const*, ...)
00008de4	movl	%esi,%edi
00008de6	movl	0xf0(%ebp),%ecx
00008de9	addl	$0x1c,%ecx
00008dec	movl	0xe8(%ebp),%eax
00008def	decl	%eax
00008df0	jne	0x00008cf0
00008df6	xorl	%ecx,%ecx
00008df8	movl	0xec(%ebp),%eax
00008dfb	movss	0x6ea14-0x86ce(%eax),%xmm0
00008e03	movss	%xmm0,0xdc(%ebp)
00008e08	movl	0x08(%ebp),%ebx
00008e0b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00008e10	movl	%ecx,0xd8(%ebp)
00008e13	imull	$0x14,%ecx,%esi
00008e16	movl	0x000000f0(%ebx,%esi),%ebx
00008e1d	testb	$0x01,0x15(%edi)
00008e21	jne	0x00008e4f
00008e23	movl	%edi,(%esp)
00008e26	movl	$0x00000001,0x04(%esp)
00008e2e	calll	CUtlBuffer::CheckPut(int)
00008e33	cmpb	$0x01,%al
00008e35	jne	0x00008e6b
00008e37	movl	(%edi),%eax
00008e39	movl	0x10(%edi),%ecx
00008e3c	subl	0x20(%edi),%ecx
00008e3f	movb	%bl,(%eax,%ecx)
00008e42	incl	0x10(%edi)
00008e45	movl	%edi,(%esp)
00008e48	calll	CUtlBuffer::AddNullTermination()
00008e4d	jmp	0x00008e6b
00008e4f	movl	0xec(%ebp),%eax
00008e52	leal	0x6f5d7-0x86ce(%eax),%eax
00008e58	movl	%eax,0x04(%esp)
00008e5c	movl	%edi,(%esp)
00008e5f	movzbl	%bl,%eax
00008e62	movl	%eax,0x08(%esp)
00008e66	calll	CUtlBuffer::Printf(char const*, ...)
00008e6b	testl	%ebx,%ebx
00008e6d	jle	0x00008f9b
00008e73	movl	0x08(%ebp),%eax
00008e76	leal	0x000000e4(%eax,%esi),%eax
00008e7d	movl	%eax,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00008e80	xorl	%ecx,%ecx
00008e82	movl	%ebx,%eax
00008e84	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00008e90	movl	%eax,0xe8(%ebp)
00008e93	movl	%ecx,0xf0(%ebp)
00008e96	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00008e99	movl	(%eax),%eax
00008e9b	movl	%eax,0xe4(%ebp)
00008e9e	leal	(%eax,%ecx),%eax
00008ea1	movl	0x14(%ebp),%ebx
00008ea4	movl	(%ebx),%ecx
00008ea6	movl	(%ecx),%esi
00008ea8	movl	%eax,(%esp)
00008eab	calll	CUtlString::Get()
00008eb0	movl	%eax,0x04(%esp)
00008eb4	movl	%ebx,(%esp)
00008eb7	call	*%esi
00008eb9	movw	%ax,%si
00008ebc	testb	$0x01,0x15(%edi)
00008ec0	jne	0x00008efd
00008ec2	movl	%edi,(%esp)
00008ec5	movl	$0x00000002,0x04(%esp)
00008ecd	calll	CUtlBuffer::CheckPut(int)
00008ed2	cmpb	$0x01,%al
00008ed4	jne	0x00008f19
00008ed6	movl	0x10(%edi),%eax
00008ed9	subl	0x20(%edi),%eax
00008edc	addl	(%edi),%eax
00008ede	testb	$0x01,0x34(%edi)
00008ee2	je	0x00008eec
00008ee4	testl	%eax,%eax
00008ee6	je	0x00008eef
00008ee8	rolw	$0x08,%si
00008eec	movw	%si,(%eax)
00008eef	addl	$0x02,0x10(%edi)
00008ef3	movl	%edi,(%esp)
00008ef6	calll	CUtlBuffer::AddNullTermination()
00008efb	jmp	0x00008f19
00008efd	movswl	%si,%eax
00008f00	movl	%eax,0x08(%esp)
00008f04	movl	0xec(%ebp),%eax
00008f07	leal	0x6f5dd-0x86ce(%eax),%eax
00008f0d	movl	%eax,0x04(%esp)
00008f11	movl	%edi,(%esp)
00008f14	calll	CUtlBuffer::Printf(char const*, ...)
00008f19	movl	0xf0(%ebp),%eax
00008f1c	movl	0xe4(%ebp),%ecx
00008f1f	movss	0x10(%ecx,%eax),%xmm0
00008f25	mulss	0xdc(%ebp),%xmm0
00008f2a	cvttss2si	%xmm0,%esi
00008f2e	testb	$0x01,0x15(%edi)
00008f32	jne	0x00008f6f
00008f34	movl	%edi,(%esp)
00008f37	movl	$0x00000002,0x04(%esp)
00008f3f	calll	CUtlBuffer::CheckPut(int)
00008f44	cmpb	$0x01,%al
00008f46	jne	0x00008f8b
00008f48	movl	0x10(%edi),%eax
00008f4b	subl	0x20(%edi),%eax
00008f4e	addl	(%edi),%eax
00008f50	testb	$0x01,0x34(%edi)
00008f54	je	0x00008f5e
00008f56	testl	%eax,%eax
00008f58	je	0x00008f61
00008f5a	rolw	$0x08,%si
00008f5e	movw	%si,(%eax)
00008f61	addl	$0x02,0x10(%edi)
00008f65	movl	%edi,(%esp)
00008f68	calll	CUtlBuffer::AddNullTermination()
00008f6d	jmp	0x00008f8b
00008f6f	movzwl	%si,%eax
00008f72	movl	%eax,0x08(%esp)
00008f76	movl	0xec(%ebp),%eax
00008f79	leal	0x6f5d7-0x86ce(%eax),%eax
00008f7f	movl	%eax,0x04(%esp)
00008f83	movl	%edi,(%esp)
00008f86	calll	CUtlBuffer::Printf(char const*, ...)
00008f8b	movl	0xf0(%ebp),%ecx
00008f8e	addl	$0x1c,%ecx
00008f91	movl	0xe8(%ebp),%eax
00008f94	decl	%eax
00008f95	jne	0x00008e90
00008f9b	movl	0xd8(%ebp),%ecx
00008f9e	incl	%ecx
00008f9f	cmpl	$0x02,%ecx
00008fa2	movl	0x08(%ebp),%ebx
00008fa5	jne	0x00008e10
00008fab	cmpb	$0x06,0x04(%ebx)
00008faf	movl	0xec(%ebp),%esi
00008fb2	jne	0x000090a1
00008fb8	movss	0x50(%ebx),%xmm1
00008fbd	pxor	%xmm0,%xmm0
00008fc1	ucomiss	%xmm1,%xmm0
00008fc4	jne	0x00008fc8
00008fc6	jnp	0x0000903a
00008fc8	testb	$0x01,0x15(%edi)
00008fcc	jne	0x00009021
00008fce	movl	%edi,(%esp)
00008fd1	movl	$0x00000004,0x04(%esp)
00008fd9	movss	%xmm1,0xf0(%ebp)
00008fde	calll	CUtlBuffer::CheckPut(int)
00008fe3	movss	0xf0(%ebp),%xmm0
00008fe8	testb	%al,%al
00008fea	je	0x000090a1
00008ff0	movl	0x10(%edi),%eax
00008ff3	subl	0x20(%edi),%eax
00008ff6	addl	(%edi),%eax
00008ff8	testb	$0x01,0x34(%edi)
00008ffc	je	0x0000900c
00008ffe	testl	%eax,%eax
00009000	je	0x00009010
00009002	movd	%xmm0,%ecx
00009006	bswap	%ecx
00009008	movd	%ecx,%xmm0
0000900c	movss	%xmm0,(%eax)
00009010	addl	$0x04,0x10(%edi)
00009014	movl	%edi,(%esp)
00009017	calll	CUtlBuffer::AddNullTermination()
0000901c	jmp	0x000090a1
00009021	cvtss2sd	%xmm1,%xmm0
00009025	movsd	%xmm0,0x08(%esp)
0000902b	leal	0x6f5da-0x86ce(%esi),%eax
00009031	movl	%eax,0x04(%esp)
00009035	movl	%edi,(%esp)
00009038	jmp	0x0000909c
0000903a	movl	(%ebx),%eax
0000903c	movl	%ebx,(%esp)
0000903f	call	(%eax)
00009041	fstp	%st(0)
00009043	testb	$0x01,0x15(%edi)
00009047	jne	0x0000907f
00009049	movl	%edi,(%esp)
0000904c	movl	$0x00000004,0x04(%esp)
00009054	calll	CUtlBuffer::CheckPut(int)
00009059	cmpb	$0x01,%al
0000905b	jne	0x000090a1
0000905d	movl	0x10(%edi),%eax
00009060	subl	0x20(%edi),%eax
00009063	addl	(%edi),%eax
00009065	testb	$0x01,0x34(%edi)
00009069	jne	0x00009073
0000906b	movl	$0xbf800000,(%eax)
00009071	jmp	0x00009010
00009073	testl	%eax,%eax
00009075	je	0x00009010
00009077	movl	$0x000080bf,(%eax)
0000907d	jmp	0x00009010
0000907f	leal	0x6f5da-0x86ce(%esi),%eax
00009085	movl	%eax,0x04(%esp)
00009089	movl	%edi,(%esp)
0000908c	movl	$0xbff00000,0x0c(%esp)
00009094	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x08(%esp)
0000909c	calll	CUtlBuffer::Printf(char const*, ...)
000090a1	movb	0x00000178(%ebx),%al
000090a7	movl	%edi,(%esp)
000090aa	shrb	$0x02,%al
000090ad	andb	$0x01,%al
000090af	movzbl	%al,%eax
000090b2	movl	%eax,0x04(%esp)
000090b6	calll	CUtlBuffer::PutChar(char)
000090bb	testb	$0x04,0x00000178(%ebx)
000090c2	je	0x000091cc
000090c8	movl	0x14(%ebp),%esi
000090cb	movl	(%esi),%eax
000090cd	movl	(%eax),%eax
000090cf	movl	%eax,0xf0(%ebp)
000090d2	leal	0x00000094(%ebx),%eax
000090d8	movl	%eax,(%esp)
000090db	calll	CUtlString::Get()
000090e0	movl	%eax,0x04(%esp)
000090e4	movl	%esi,(%esp)
000090e7	call	*0xf0(%ebp)
000090ea	movw	%ax,%si
000090ed	testb	$0x01,0x15(%edi)
000090f1	jne	0x0000912e
000090f3	movl	%edi,(%esp)
000090f6	movl	$0x00000002,0x04(%esp)
000090fe	calll	CUtlBuffer::CheckPut(int)
00009103	cmpb	$0x01,%al
00009105	jne	0x0000914a
00009107	movl	0x10(%edi),%eax
0000910a	subl	0x20(%edi),%eax
0000910d	addl	(%edi),%eax
0000910f	testb	$0x01,0x34(%edi)
00009113	je	0x0000911d
00009115	testl	%eax,%eax
00009117	je	0x00009120
00009119	rolw	$0x08,%si
0000911d	movw	%si,(%eax)
00009120	addl	$0x02,0x10(%edi)
00009124	movl	%edi,(%esp)
00009127	calll	CUtlBuffer::AddNullTermination()
0000912c	jmp	0x0000914a
0000912e	movswl	%si,%eax
00009131	movl	%eax,0x08(%esp)
00009135	movl	0xec(%ebp),%eax
00009138	leal	0x6f5dd-0x86ce(%eax),%eax
0000913e	movl	%eax,0x04(%esp)
00009142	movl	%edi,(%esp)
00009145	calll	CUtlBuffer::Printf(char const*, ...)
0000914a	movl	0x14(%ebp),%esi
0000914d	movl	(%esi),%eax
0000914f	movl	(%eax),%eax
00009151	movl	%eax,0xf0(%ebp)
00009154	leal	0x000000a4(%ebx),%eax
0000915a	movl	%eax,(%esp)
0000915d	calll	CUtlString::Get()
00009162	movl	%eax,0x04(%esp)
00009166	movl	%esi,(%esp)
00009169	call	*0xf0(%ebp)
0000916c	movw	%ax,%si
0000916f	testb	$0x01,0x15(%edi)
00009173	jne	0x000091b0
00009175	movl	%edi,(%esp)
00009178	movl	$0x00000002,0x04(%esp)
00009180	calll	CUtlBuffer::CheckPut(int)
00009185	cmpb	$0x01,%al
00009187	jne	0x000091cc
00009189	movl	0x10(%edi),%eax
0000918c	subl	0x20(%edi),%eax
0000918f	addl	(%edi),%eax
00009191	testb	$0x01,0x34(%edi)
00009195	je	0x0000919f
00009197	testl	%eax,%eax
00009199	je	0x000091a2
0000919b	rolw	$0x08,%si
0000919f	movw	%si,(%eax)
000091a2	addl	$0x02,0x10(%edi)
000091a6	movl	%edi,(%esp)
000091a9	calll	CUtlBuffer::AddNullTermination()
000091ae	jmp	0x000091cc
000091b0	movswl	%si,%eax
000091b3	movl	%eax,0x08(%esp)
000091b7	movl	0xec(%ebp),%eax
000091ba	leal	0x6f5dd-0x86ce(%eax),%eax
000091c0	movl	%eax,0x04(%esp)
000091c4	movl	%edi,(%esp)
000091c7	calll	CUtlBuffer::Printf(char const*, ...)
000091cc	movl	0x14(%ebp),%eax
000091cf	movl	%eax,0x08(%esp)
000091d3	movl	%edi,0x04(%esp)
000091d7	movl	%ebx,(%esp)
000091da	calll	CChoreoEvent::SaveFlexAnimationsToBuffer(CUtlBuffer&, IChoreoStringPool*)
000091df	movb	0x04(%ebx),%al
000091e2	cmpb	$0x0c,%al
000091e4	jne	0x000091f9
000091e6	movsbl	0x54(%ebx),%eax
000091ea	movl	%eax,0x04(%esp)
000091ee	movl	%edi,(%esp)
000091f1	calll	CUtlBuffer::PutChar(char)
000091f6	movb	0x04(%ebx),%al
000091f9	cmpb	$0x05,%al
000091fb	jne	0x000092e3
00009201	movsbl	0x05(%ebx),%eax
00009205	movl	%eax,0x04(%esp)
00009209	movl	%edi,(%esp)
0000920c	calll	CUtlBuffer::PutChar(char)
00009211	movl	0x14(%ebp),%esi
00009214	movl	(%esi),%eax
00009216	movl	(%eax),%eax
00009218	movl	%eax,0xf0(%ebp)
0000921b	leal	0x0000013c(%ebx),%eax
00009221	movl	%eax,(%esp)
00009224	calll	CUtlString::Get() const
00009229	movl	%eax,0x04(%esp)
0000922d	movl	%esi,(%esp)
00009230	call	*0xf0(%ebp)
00009233	movw	%ax,%si
00009236	testb	$0x01,0x15(%edi)
0000923a	jne	0x00009277
0000923c	movl	%edi,(%esp)
0000923f	movl	$0x00000002,0x04(%esp)
00009247	calll	CUtlBuffer::CheckPut(int)
0000924c	cmpb	$0x01,%al
0000924e	jne	0x00009293
00009250	movl	0x10(%edi),%eax
00009253	subl	0x20(%edi),%eax
00009256	addl	(%edi),%eax
00009258	testb	$0x01,0x34(%edi)
0000925c	je	0x00009266
0000925e	testl	%eax,%eax
00009260	je	0x00009269
00009262	rolw	$0x08,%si
00009266	movw	%si,(%eax)
00009269	addl	$0x02,0x10(%edi)
0000926d	movl	%edi,(%esp)
00009270	calll	CUtlBuffer::AddNullTermination()
00009275	jmp	0x00009293
00009277	movswl	%si,%eax
0000927a	movl	%eax,0x08(%esp)
0000927e	movl	0xec(%ebp),%eax
00009281	leal	0x6f5dd-0x86ce(%eax),%eax
00009287	movl	%eax,0x04(%esp)
0000928b	movl	%edi,(%esp)
0000928e	calll	CUtlBuffer::Printf(char const*, ...)
00009293	movl	%edi,%edx
00009295	cmpb	$0x02,0x05(%ebx)
00009299	jne	0x000092a5
0000929b	movb	0x00000179(%ebx),%al
000092a1	xorl	%ecx,%ecx
000092a3	jmp	0x000092b9
000092a5	movzwl	0x00000178(%ebx),%eax
000092ac	xorl	%ecx,%ecx
000092ae	testb	%al,%al
000092b0	jns	0x000092b7
000092b2	movl	$0x00000001,%ecx
000092b7	movb	%ah,%al
000092b9	movl	%edx,(%esp)
000092bc	leal	0x02(%ecx),%edx
000092bf	movb	%al,%ah
000092c1	andb	$0x02,%ah
000092c4	shrb	%ah
000092c6	testb	%ah,%ah
000092c8	cmovel	%ecx,%edx
000092cb	movl	%edx,%ecx
000092cd	orl	$0x04,%ecx
000092d0	andb	$0x04,%al
000092d2	shrb	$0x02,%al
000092d5	testb	%al,%al
000092d7	cmovel	%edx,%ecx
000092da	movl	%ecx,0x04(%esp)
000092de	calll	CUtlBuffer::PutChar(char)
000092e3	addl	$0x3c,%esp
000092e6	popl	%esi
000092e7	popl	%edi
000092e8	popl	%ebx
000092e9	popl	%ebp
000092ea	ret
000092eb	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CCurveData::SaveToBuffer(CUtlBuffer&, IChoreoStringPool*):
000092f0	pushl	%ebp
000092f1	movl	%esp,%ebp
000092f3	pushl	%ebx
000092f4	pushl	%edi
000092f5	pushl	%esi
000092f6	subl	$0x2c,%esp
000092f9	calll	0x000092fe
000092fe	popl	%eax
000092ff	movl	0x08(%ebp),%ebx
00009302	movl	0x0c(%ebx),%ecx
00009305	movl	0x0c(%ebp),%edi
00009308	testb	$0x01,0x15(%edi)
0000930c	jne	0x00009343
0000930e	movl	%eax,0xf0(%ebp)
00009311	movl	%edi,(%esp)
00009314	movl	$0x00000001,0x04(%esp)
0000931c	movl	%ecx,%esi
0000931e	calll	CUtlBuffer::CheckPut(int)
00009323	cmpb	$0x01,%al
00009325	jne	0x00009361
00009327	movl	(%edi),%eax
00009329	movl	0x10(%edi),%ecx
0000932c	subl	0x20(%edi),%ecx
0000932f	movl	%esi,%edx
00009331	movb	%dl,(%eax,%ecx)
00009334	movl	%edx,%esi
00009336	incl	0x10(%edi)
00009339	movl	%edi,(%esp)
0000933c	calll	CUtlBuffer::AddNullTermination()
00009341	jmp	0x00009361
00009343	movl	%eax,0xf0(%ebp)
00009346	leal	0x6f5d7-0x92fe(%eax),%eax
0000934c	movl	%eax,0x04(%esp)
00009350	movl	%edi,(%esp)
00009353	movzbl	%cl,%eax
00009356	movl	%eax,0x08(%esp)
0000935a	movl	%ecx,%esi
0000935c	calll	CUtlBuffer::Printf(char const*, ...)
00009361	movl	%edi,%ecx
00009363	movl	%esi,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
00009366	testl	%esi,%esi
00009368	jle	0x00009493
0000936e	xorl	%edx,%edx
00009370	movl	0xf0(%ebp),%eax
00009373	movss	0x6ea18-0x92fe(%eax),%xmm0
0000937b	movss	%xmm0,0xdc(%ebp)
00009380	xorl	%esi,%esi
00009382	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00009390	movl	%esi,0xe8(%ebp)
00009393	cmpl	%esi,0x0c(%ebx)
00009396	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),%edi
0000939b	jle	0x000093a1
0000939d	movl	(%ebx),%edi
0000939f	addl	%edx,%edi
000093a1	movl	%edx,0xec(%ebp)
000093a4	movss	0x04(%edi),%xmm0
000093a9	movl	%ecx,%esi
000093ab	testb	$0x01,0x15(%esi)
000093af	jne	0x000093fd
000093b1	movl	%esi,(%esp)
000093b4	movl	$0x00000004,0x04(%esp)
000093bc	movss	%xmm0,0xe4(%ebp)
000093c1	calll	CUtlBuffer::CheckPut(int)
000093c6	movss	0xe4(%ebp),%xmm0
000093cb	testb	%al,%al
000093cd	je	0x0000941c
000093cf	movl	0x10(%esi),%eax
000093d2	subl	0x20(%esi),%eax
000093d5	addl	(%esi),%eax
000093d7	testb	$0x01,0x34(%esi)
000093db	je	0x000093eb
000093dd	testl	%eax,%eax
000093df	je	0x000093ef
000093e1	movd	%xmm0,%ecx
000093e5	bswap	%ecx
000093e7	movd	%ecx,%xmm0
000093eb	movss	%xmm0,(%eax)
000093ef	addl	$0x04,0x10(%esi)
000093f3	movl	%esi,(%esp)
000093f6	calll	CUtlBuffer::AddNullTermination()
000093fb	jmp	0x0000941c
000093fd	cvtss2sd	%xmm0,%xmm0
00009401	movsd	%xmm0,0x08(%esp)
00009407	movl	0xf0(%ebp),%eax
0000940a	leal	0x6f5da-0x92fe(%eax),%eax
00009410	movl	%eax,0x04(%esp)
00009414	movl	%esi,(%esp)
00009417	calll	CUtlBuffer::Printf(char const*, ...)
0000941c	movss	(%edi),%xmm0
00009420	mulss	0xdc(%ebp),%xmm0
00009425	cvttss2si	%xmm0,%eax
00009429	movb	%al,%bl
0000942b	testb	$0x01,0x15(%esi)
0000942f	jne	0x0000945d
00009431	movl	%esi,(%esp)
00009434	movl	$0x00000001,0x04(%esp)
0000943c	calll	CUtlBuffer::CheckPut(int)
00009441	cmpb	$0x01,%al
00009443	jne	0x00009479
00009445	movl	(%esi),%eax
00009447	movl	0x10(%esi),%ecx
0000944a	subl	0x20(%esi),%ecx
0000944d	movb	%bl,(%eax,%ecx)
00009450	incl	0x10(%esi)
00009453	movl	%esi,(%esp)
00009456	calll	CUtlBuffer::AddNullTermination()
0000945b	jmp	0x00009479
0000945d	movzbl	%bl,%eax
00009460	movl	%eax,0x08(%esp)
00009464	movl	0xf0(%ebp),%eax
00009467	leal	0x6f5d7-0x92fe(%eax),%eax
0000946d	movl	%eax,0x04(%esp)
00009471	movl	%esi,(%esp)
00009474	calll	CUtlBuffer::Printf(char const*, ...)
00009479	movl	%esi,%ecx
0000947b	movl	0xec(%ebp),%edx
0000947e	addl	$0x0a,%edx
00009481	movl	0xe8(%ebp),%esi
00009484	incl	%esi
00009485	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
00009488	cmpl	%esi,%eax
0000948a	movl	0x08(%ebp),%ebx
0000948d	jne	0x00009390
00009493	addl	$0x2c,%esp
00009496	popl	%esi
00009497	popl	%edi
00009498	popl	%ebx
00009499	popl	%ebp
0000949a	ret
0000949b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::GetActive() const:
000094a0	movl	0x04(%esp),%eax
000094a4	movb	0x00000179(%eax),%al
000094aa	andb	$0x20,%al
000094ac	shrb	$0x05,%al
000094af	movzbl	%al,%eax
000094b2	ret
000094b3	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SaveFlexAnimationsToBuffer(CUtlBuffer&, IChoreoStringPool*):
000094c0	pushl	%ebp
000094c1	movl	%esp,%ebp
000094c3	pushl	%ebx
000094c4	pushl	%edi
000094c5	pushl	%esi
000094c6	subl	$0x3c,%esp
000094c9	calll	0x000094ce
000094ce	popl	%ecx
000094cf	movl	0x08(%ebp),%esi
000094d2	movl	0x00000118(%esi),%ebx
000094d8	movl	0x0c(%ebp),%edi
000094db	testb	$0x01,0x15(%edi)
000094df	jne	0x00009510
000094e1	movl	%ecx,0xf0(%ebp)
000094e4	movl	%edi,(%esp)
000094e7	movl	$0x00000001,0x04(%esp)
000094ef	calll	CUtlBuffer::CheckPut(int)
000094f4	cmpb	$0x01,%al
000094f6	jne	0x0000952c
000094f8	movl	(%edi),%eax
000094fa	movl	0x10(%edi),%ecx
000094fd	subl	0x20(%edi),%ecx
00009500	movb	%bl,(%eax,%ecx)
00009503	incl	0x10(%edi)
00009506	movl	%edi,(%esp)
00009509	calll	CUtlBuffer::AddNullTermination()
0000950e	jmp	0x0000952c
00009510	leal	0x6f5d7-0x94ce(%ecx),%eax
00009516	movl	%ecx,0xf0(%ebp)
00009519	movl	%eax,0x04(%esp)
0000951d	movl	%edi,(%esp)
00009520	movzbl	%bl,%eax
00009523	movl	%eax,0x08(%esp)
00009527	calll	CUtlBuffer::Printf(char const*, ...)
0000952c	movl	%ebx,0xd4(%ebp)
0000952f	testl	%ebx,%ebx
00009531	jle	0x00009b3e
00009537	xorl	%ecx,%ecx
00009539	movl	0xf0(%ebp),%eax
0000953c	leal	0x6f540-0x94ce(%eax),%eax
00009542	movl	%eax,0xd0(%ebp)
00009545	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00009550	cmpl	%ecx,0x00000118(%esi)
00009556	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),%ebx
0000955b	jle	0x00009566
0000955d	movl	0x0000010c(%esi),%eax
00009563	movl	(%eax,%ecx,4),%ebx
00009566	movl	%ecx,0xd8(%ebp)
00009569	movl	0x04(%ebx),%eax
0000956c	testl	%eax,%eax
0000956e	cmovel	0xd0(%ebp),%eax
00009572	movl	0x10(%ebp),%edx
00009575	movl	(%edx),%ecx
00009577	movl	%eax,0x04(%esp)
0000957b	movl	%edx,(%esp)
0000957e	call	(%ecx)
00009580	movw	%ax,%si
00009583	testb	$0x01,0x15(%edi)
00009587	jne	0x000095c4
00009589	movl	%edi,(%esp)
0000958c	movl	$0x00000002,0x04(%esp)
00009594	calll	CUtlBuffer::CheckPut(int)
00009599	cmpb	$0x01,%al
0000959b	jne	0x000095e0
0000959d	movl	0x10(%edi),%eax
000095a0	subl	0x20(%edi),%eax
000095a3	addl	(%edi),%eax
000095a5	testb	$0x01,0x34(%edi)
000095a9	je	0x000095b3
000095ab	testl	%eax,%eax
000095ad	je	0x000095b6
000095af	rolw	$0x08,%si
000095b3	movw	%si,(%eax)
000095b6	addl	$0x02,0x10(%edi)
000095ba	movl	%edi,(%esp)
000095bd	calll	CUtlBuffer::AddNullTermination()
000095c2	jmp	0x000095e0
000095c4	movswl	%si,%eax
000095c7	movl	%eax,0x08(%esp)
000095cb	movl	0xf0(%ebp),%eax
000095ce	leal	0x6f5dd-0x94ce(%eax),%eax
000095d4	movl	%eax,0x04(%esp)
000095d8	movl	%edi,(%esp)
000095db	calll	CUtlBuffer::Printf(char const*, ...)
000095e0	movl	%ebx,0xec(%ebp)
000095e3	movb	0x5c(%ebx),%bl
000095e6	andb	$0x03,%bl
000095e9	testb	$0x01,0x15(%edi)
000095ed	movl	%edi,%esi
000095ef	jne	0x0000961d
000095f1	movl	%esi,(%esp)
000095f4	movl	$0x00000001,0x04(%esp)
000095fc	calll	CUtlBuffer::CheckPut(int)
00009601	cmpb	$0x01,%al
00009603	jne	0x00009639
00009605	movl	(%esi),%eax
00009607	movl	0x10(%esi),%ecx
0000960a	subl	0x20(%esi),%ecx
0000960d	movb	%bl,(%eax,%ecx)
00009610	incl	0x10(%esi)
00009613	movl	%esi,(%esp)
00009616	calll	CUtlBuffer::AddNullTermination()
0000961b	jmp	0x00009639
0000961d	movzbl	%bl,%eax
00009620	movl	%eax,0x08(%esp)
00009624	movl	0xf0(%ebp),%eax
00009627	leal	0x6f5d7-0x94ce(%eax),%eax
0000962d	movl	%eax,0x04(%esp)
00009631	movl	%esi,(%esp)
00009634	calll	CUtlBuffer::Printf(char const*, ...)
00009639	movl	0xec(%ebp),%ebx
0000963c	movss	0x08(%ebx),%xmm0
00009641	testb	$0x01,0x15(%esi)
00009645	jne	0x00009693
00009647	movl	%esi,(%esp)
0000964a	movl	$0x00000004,0x04(%esp)
00009652	movss	%xmm0,0xe8(%ebp)
00009657	calll	CUtlBuffer::CheckPut(int)
0000965c	movss	0xe8(%ebp),%xmm0
00009661	testb	%al,%al
00009663	je	0x000096b2
00009665	movl	0x10(%esi),%eax
00009668	subl	0x20(%esi),%eax
0000966b	addl	(%esi),%eax
0000966d	testb	$0x01,0x34(%esi)
00009671	je	0x00009681
00009673	testl	%eax,%eax
00009675	je	0x00009685
00009677	movd	%xmm0,%ecx
0000967b	bswap	%ecx
0000967d	movd	%ecx,%xmm0
00009681	movss	%xmm0,(%eax)
00009685	addl	$0x04,0x10(%esi)
00009689	movl	%esi,(%esp)
0000968c	calll	CUtlBuffer::AddNullTermination()
00009691	jmp	0x000096b2
00009693	cvtss2sd	%xmm0,%xmm0
00009697	movsd	%xmm0,0x08(%esp)
0000969d	movl	0xf0(%ebp),%eax
000096a0	leal	0x6f5da-0x94ce(%eax),%eax
000096a6	movl	%eax,0x04(%esp)
000096aa	movl	%esi,(%esp)
000096ad	calll	CUtlBuffer::Printf(char const*, ...)
000096b2	movss	0x0c(%ebx),%xmm0
000096b7	testb	$0x01,0x15(%esi)
000096bb	movl	%esi,%edi
000096bd	jne	0x0000970b
000096bf	movl	%edi,(%esp)
000096c2	movl	$0x00000004,0x04(%esp)
000096ca	movss	%xmm0,0xe8(%ebp)
000096cf	calll	CUtlBuffer::CheckPut(int)
000096d4	movss	0xe8(%ebp),%xmm0
000096d9	testb	%al,%al
000096db	je	0x0000972a
000096dd	movl	0x10(%edi),%eax
000096e0	subl	0x20(%edi),%eax
000096e3	addl	(%edi),%eax
000096e5	testb	$0x01,0x34(%edi)
000096e9	je	0x000096f9
000096eb	testl	%eax,%eax
000096ed	je	0x000096fd
000096ef	movd	%xmm0,%ecx
000096f3	bswap	%ecx
000096f5	movd	%ecx,%xmm0
000096f9	movss	%xmm0,(%eax)
000096fd	addl	$0x04,0x10(%edi)
00009701	movl	%edi,(%esp)
00009704	calll	CUtlBuffer::AddNullTermination()
00009709	jmp	0x0000972a
0000970b	cvtss2sd	%xmm0,%xmm0
0000970f	movsd	%xmm0,0x08(%esp)
00009715	movl	0xf0(%ebp),%eax
00009718	leal	0x6f5da-0x94ce(%eax),%eax
0000971e	movl	%eax,0x04(%esp)
00009722	movl	%edi,(%esp)
00009725	calll	CUtlBuffer::Printf(char const*, ...)
0000972a	movzwl	0x1c(%ebx),%esi
0000972e	testb	$0x01,0x15(%edi)
00009732	jne	0x0000976f
00009734	movl	%edi,(%esp)
00009737	movl	$0x00000002,0x04(%esp)
0000973f	calll	CUtlBuffer::CheckPut(int)
00009744	cmpb	$0x01,%al
00009746	jne	0x0000978b
00009748	movl	0x10(%edi),%eax
0000974b	subl	0x20(%edi),%eax
0000974e	addl	(%edi),%eax
00009750	testb	$0x01,0x34(%edi)
00009754	je	0x0000975e
00009756	testl	%eax,%eax
00009758	je	0x00009761
0000975a	rolw	$0x08,%si
0000975e	movw	%si,(%eax)
00009761	addl	$0x02,0x10(%edi)
00009765	movl	%edi,(%esp)
00009768	calll	CUtlBuffer::AddNullTermination()
0000976d	jmp	0x0000978b
0000976f	movswl	%si,%eax
00009772	movl	%eax,0x08(%esp)
00009776	movl	0xf0(%ebp),%eax
00009779	leal	0x6f5dd-0x94ce(%eax),%eax
0000977f	movl	%eax,0x04(%esp)
00009783	movl	%edi,(%esp)
00009786	calll	CUtlBuffer::Printf(char const*, ...)
0000978b	movl	0x1c(%ebx),%eax
0000978e	testl	%eax,%eax
00009790	jle	0x0000991b
00009796	xorl	%esi,%esi
00009798	xorl	%ecx,%ecx
0000979a	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000097a0	movl	%ecx,0xe4(%ebp)
000097a3	cmpl	%ecx,%eax
000097a5	jle	0x00009906
000097ab	movl	0xec(%ebp),%eax
000097ae	movl	0x10(%eax),%ecx
000097b1	movl	%ecx,%eax
000097b3	addl	%esi,%eax
000097b5	je	0x00009906
000097bb	movss	0x04(%ecx,%esi),%xmm0
000097c1	movl	%ecx,0xe8(%ebp)
000097c4	testb	$0x01,0x15(%edi)
000097c8	jne	0x00009816
000097ca	movl	%edi,(%esp)
000097cd	movl	$0x00000004,0x04(%esp)
000097d5	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
000097da	calll	CUtlBuffer::CheckPut(int)
000097df	movss	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
000097e4	testb	%al,%al
000097e6	je	0x00009835
000097e8	movl	0x10(%edi),%eax
000097eb	subl	0x20(%edi),%eax
000097ee	addl	(%edi),%eax
000097f0	testb	$0x01,0x34(%edi)
000097f4	je	0x00009804
000097f6	testl	%eax,%eax
000097f8	je	0x00009808
000097fa	movd	%xmm0,%ecx
000097fe	bswap	%ecx
00009800	movd	%ecx,%xmm0
00009804	movss	%xmm0,(%eax)
00009808	addl	$0x04,0x10(%edi)
0000980c	movl	%edi,(%esp)
0000980f	calll	CUtlBuffer::AddNullTermination()
00009814	jmp	0x00009835
00009816	cvtss2sd	%xmm0,%xmm0
0000981a	movsd	%xmm0,0x08(%esp)
00009820	movl	0xf0(%ebp),%eax
00009823	leal	0x6f5da-0x94ce(%eax),%eax
00009829	movl	%eax,0x04(%esp)
0000982d	movl	%edi,(%esp)
00009830	calll	CUtlBuffer::Printf(char const*, ...)
00009835	movl	0xe8(%ebp),%eax
00009838	movss	(%eax,%esi),%xmm0
0000983d	movl	0xf0(%ebp),%ecx
00009840	mulss	0x6ea1c-0x94ce(%ecx),%xmm0
00009848	cvttss2si	%xmm0,%eax
0000984c	movb	%al,%bl
0000984e	testb	$0x01,0x15(%edi)
00009852	jne	0x00009883
00009854	movl	%ecx,0xf0(%ebp)
00009857	movl	%edi,(%esp)
0000985a	movl	$0x00000001,0x04(%esp)
00009862	calll	CUtlBuffer::CheckPut(int)
00009867	cmpb	$0x01,%al
00009869	jne	0x0000989f
0000986b	movl	(%edi),%eax
0000986d	movl	0x10(%edi),%ecx
00009870	subl	0x20(%edi),%ecx
00009873	movb	%bl,(%eax,%ecx)
00009876	incl	0x10(%edi)
00009879	movl	%edi,(%esp)
0000987c	calll	CUtlBuffer::AddNullTermination()
00009881	jmp	0x0000989f
00009883	movzbl	%bl,%eax
00009886	movl	%eax,0x08(%esp)
0000988a	leal	0x6f5d7-0x94ce(%ecx),%eax
00009890	movl	%ecx,0xf0(%ebp)
00009893	movl	%eax,0x04(%esp)
00009897	movl	%edi,(%esp)
0000989a	calll	CUtlBuffer::Printf(char const*, ...)
0000989f	movl	0xe8(%ebp),%eax
000098a2	movzwl	0x08(%eax,%esi),%ebx
000098a7	shrl	%ebx
000098a9	testb	$0x01,0x15(%edi)
000098ad	jne	0x000098ea
000098af	movl	%edi,(%esp)
000098b2	movl	$0x00000002,0x04(%esp)
000098ba	calll	CUtlBuffer::CheckPut(int)
000098bf	cmpb	$0x01,%al
000098c1	jne	0x00009906
000098c3	movl	0x10(%edi),%eax
000098c6	subl	0x20(%edi),%eax
000098c9	addl	(%edi),%eax
000098cb	testb	$0x01,0x34(%edi)
000098cf	je	0x000098d9
000098d1	testl	%eax,%eax
000098d3	je	0x000098dc
000098d5	rolw	$0x08,%bx
000098d9	movw	%bx,(%eax)
000098dc	addl	$0x02,0x10(%edi)
000098e0	movl	%edi,(%esp)
000098e3	calll	CUtlBuffer::AddNullTermination()
000098e8	jmp	0x00009906
000098ea	movzwl	%bx,%eax
000098ed	movl	%eax,0x08(%esp)
000098f1	movl	0xf0(%ebp),%eax
000098f4	leal	0x6f5d7-0x94ce(%eax),%eax
000098fa	movl	%eax,0x04(%esp)
000098fe	movl	%edi,(%esp)
00009901	calll	CUtlBuffer::Printf(char const*, ...)
00009906	addl	$0x0a,%esi
00009909	movl	0xec(%ebp),%ebx
0000990c	movl	0x1c(%ebx),%eax
0000990f	movl	0xe4(%ebp),%ecx
00009912	incl	%ecx
00009913	cmpl	%eax,%ecx
00009915	jl	0x000097a0
0000991b	testb	$0x02,0x5c(%ebx)
0000991f	je	0x00009b2c
00009925	movl	0x30(%ebx),%ecx
00009928	movl	%edi,%esi
0000992a	testb	$0x01,0x15(%esi)
0000992e	jne	0x0000997c
00009930	movl	%ecx,0xdc(%ebp)
00009933	movl	%esi,(%esp)
00009936	movl	$0x00000002,0x04(%esp)
0000993e	calll	CUtlBuffer::CheckPut(int)
00009943	cmpb	$0x01,%al
00009945	jne	0x0000999b
00009947	movl	0x10(%esi),%eax
0000994a	subl	0x20(%esi),%eax
0000994d	addl	(%esi),%eax
0000994f	testb	$0x01,0x34(%esi)
00009953	movl	0xdc(%ebp),%edx
00009956	jne	0x0000995d
00009958	movw	%dx,(%eax)
0000995b	jmp	0x0000996b
0000995d	testl	%eax,%eax
0000995f	je	0x0000996b
00009961	movw	%dx,%cx
00009964	rolw	$0x08,%cx
00009968	movw	%cx,(%eax)
0000996b	movl	%edx,0xdc(%ebp)
0000996e	addl	$0x02,0x10(%esi)
00009972	movl	%esi,(%esp)
00009975	calll	CUtlBuffer::AddNullTermination()
0000997a	jmp	0x0000999b
0000997c	movl	0xf0(%ebp),%eax
0000997f	leal	0x6f5d7-0x94ce(%eax),%eax
00009985	movl	%eax,0x04(%esp)
00009989	movl	%esi,(%esp)
0000998c	movzwl	%cx,%eax
0000998f	movl	%ecx,0xdc(%ebp)
00009992	movl	%eax,0x08(%esp)
00009996	calll	CUtlBuffer::Printf(char const*, ...)
0000999b	movl	%esi,%edi
0000999d	cmpl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xdc(%ebp)
000099a1	jle	0x00009b2c
000099a7	xorl	%esi,%esi
000099a9	xorl	%ecx,%ecx
000099ab	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
000099b0	movl	%ecx,0xe4(%ebp)
000099b3	cmpl	%ecx,0x30(%ebx)
000099b6	jle	0x00009b17
000099bc	movl	0xec(%ebp),%eax
000099bf	movl	0x24(%eax),%ecx
000099c2	movl	%ecx,%eax
000099c4	addl	%esi,%eax
000099c6	je	0x00009b17
000099cc	movss	0x04(%ecx,%esi),%xmm0
000099d2	movl	%ecx,0xe8(%ebp)
000099d5	testb	$0x01,0x15(%edi)
000099d9	jne	0x00009a27
000099db	movl	%edi,(%esp)
000099de	movl	$0x00000004,0x04(%esp)
000099e6	movss	%xmm0,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
000099eb	calll	CUtlBuffer::CheckPut(int)
000099f0	movss	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%xmm0
000099f5	testb	%al,%al
000099f7	je	0x00009a46
000099f9	movl	0x10(%edi),%eax
000099fc	subl	0x20(%edi),%eax
000099ff	addl	(%edi),%eax
00009a01	testb	$0x01,0x34(%edi)
00009a05	je	0x00009a15
00009a07	testl	%eax,%eax
00009a09	je	0x00009a19
00009a0b	movd	%xmm0,%ecx
00009a0f	bswap	%ecx
00009a11	movd	%ecx,%xmm0
00009a15	movss	%xmm0,(%eax)
00009a19	addl	$0x04,0x10(%edi)
00009a1d	movl	%edi,(%esp)
00009a20	calll	CUtlBuffer::AddNullTermination()
00009a25	jmp	0x00009a46
00009a27	cvtss2sd	%xmm0,%xmm0
00009a2b	movsd	%xmm0,0x08(%esp)
00009a31	movl	0xf0(%ebp),%eax
00009a34	leal	0x6f5da-0x94ce(%eax),%eax
00009a3a	movl	%eax,0x04(%esp)
00009a3e	movl	%edi,(%esp)
00009a41	calll	CUtlBuffer::Printf(char const*, ...)
00009a46	movl	0xe8(%ebp),%eax
00009a49	movss	(%eax,%esi),%xmm0
00009a4e	movl	0xf0(%ebp),%ecx
00009a51	mulss	0x6ea1c-0x94ce(%ecx),%xmm0
00009a59	cvttss2si	%xmm0,%eax
00009a5d	movb	%al,%bl
00009a5f	testb	$0x01,0x15(%edi)
00009a63	jne	0x00009a94
00009a65	movl	%ecx,0xf0(%ebp)
00009a68	movl	%edi,(%esp)
00009a6b	movl	$0x00000001,0x04(%esp)
00009a73	calll	CUtlBuffer::CheckPut(int)
00009a78	cmpb	$0x01,%al
00009a7a	jne	0x00009ab0
00009a7c	movl	(%edi),%eax
00009a7e	movl	0x10(%edi),%ecx
00009a81	subl	0x20(%edi),%ecx
00009a84	movb	%bl,(%eax,%ecx)
00009a87	incl	0x10(%edi)
00009a8a	movl	%edi,(%esp)
00009a8d	calll	CUtlBuffer::AddNullTermination()
00009a92	jmp	0x00009ab0
00009a94	movzbl	%bl,%eax
00009a97	movl	%eax,0x08(%esp)
00009a9b	leal	0x6f5d7-0x94ce(%ecx),%eax
00009aa1	movl	%ecx,0xf0(%ebp)
00009aa4	movl	%eax,0x04(%esp)
00009aa8	movl	%edi,(%esp)
00009aab	calll	CUtlBuffer::Printf(char const*, ...)
00009ab0	movl	0xe8(%ebp),%eax
00009ab3	movzwl	0x08(%eax,%esi),%ebx
00009ab8	shrl	%ebx
00009aba	testb	$0x01,0x15(%edi)
00009abe	jne	0x00009afb
00009ac0	movl	%edi,(%esp)
00009ac3	movl	$0x00000002,0x04(%esp)
00009acb	calll	CUtlBuffer::CheckPut(int)
00009ad0	cmpb	$0x01,%al
00009ad2	jne	0x00009b17
00009ad4	movl	0x10(%edi),%eax
00009ad7	subl	0x20(%edi),%eax
00009ada	addl	(%edi),%eax
00009adc	testb	$0x01,0x34(%edi)
00009ae0	je	0x00009aea
00009ae2	testl	%eax,%eax
00009ae4	je	0x00009aed
00009ae6	rolw	$0x08,%bx
00009aea	movw	%bx,(%eax)
00009aed	addl	$0x02,0x10(%edi)
00009af1	movl	%edi,(%esp)
00009af4	calll	CUtlBuffer::AddNullTermination()
00009af9	jmp	0x00009b17
00009afb	movzwl	%bx,%eax
00009afe	movl	%eax,0x08(%esp)
00009b02	movl	0xf0(%ebp),%eax
00009b05	leal	0x6f5d7-0x94ce(%eax),%eax
00009b0b	movl	%eax,0x04(%esp)
00009b0f	movl	%edi,(%esp)
00009b12	calll	CUtlBuffer::Printf(char const*, ...)
00009b17	addl	$0x0a,%esi
00009b1a	movl	0xe4(%ebp),%ecx
00009b1d	incl	%ecx
00009b1e	movl	0xdc(%ebp),%eax
00009b21	cmpl	%ecx,%eax
00009b23	movl	0xec(%ebp),%ebx
00009b26	jne	0x000099b0
00009b2c	movl	0xd8(%ebp),%ecx
00009b2f	incl	%ecx
00009b30	movl	0xd4(%ebp),%eax
00009b33	cmpl	%eax,%ecx
00009b35	movl	0x08(%ebp),%esi
00009b38	jne	0x00009550
00009b3e	addl	$0x3c,%esp
00009b41	popl	%esi
00009b42	popl	%edi
00009b43	popl	%ebx
00009b44	popl	%ebp
00009b45	ret
00009b46	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*):
00009b50	pushl	%ebp
00009b51	movl	%esp,%ebp
00009b53	pushl	%ebx
00009b54	pushl	%edi
00009b55	pushl	%esi
00009b56	subl	$0x0000136c,%esp
00009b5c	calll	0x00009b61
00009b61	popl	%edi
00009b62	movl	0x80d3a-0x9b61(%edi),%eax
00009b68	movl	%eax,0xffffec9c(%ebp)
00009b6e	movl	(%eax),%eax
00009b70	movl	%eax,0xf0(%ebp)
00009b73	movl	0x0c(%ebp),%esi
00009b76	movl	0x08(%ebp),%ebx
00009b79	testb	$0x01,0x15(%esi)
00009b7d	jne	0x00009bb7
00009b7f	movl	%esi,(%esp)
00009b82	movl	$0x00000001,0x04(%esp)
00009b8a	calll	CUtlBuffer::CheckGet(int)
00009b8f	cmpb	$0x01,%al
00009b91	jne	0x00009bac
00009b93	movl	(%esi),%eax
00009b95	movl	0x0c(%esi),%ecx
00009b98	movl	%ecx,%edx
00009b9a	subl	0x20(%esi),%edx
00009b9d	movb	(%eax,%edx),%al
00009ba0	movb	%al,0xffffecb9(%ebp)
00009ba6	incl	%ecx
00009ba7	movl	%ecx,0x0c(%esi)
00009baa	jmp	0x00009be0
00009bac	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecb9(%ebp)
00009bb3	xorb	%al,%al
00009bb5	jmp	0x00009be0
00009bb7	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecb9(%ebp)
00009bbe	leal	0xffffecb9(%ebp),%eax
00009bc4	movl	%eax,0x08(%esp)
00009bc8	leal	0x6f5e0-0x9b61(%edi),%eax
00009bce	movl	%eax,0x04(%esp)
00009bd2	movl	%esi,(%esp)
00009bd5	calll	CUtlBuffer::Scanf(char const*, ...)
00009bda	movb	0xffffecb9(%ebp),%al
00009be0	movb	%al,0x04(%ebx)
00009be3	cmpb	$0x05,%al
00009be5	je	0x00009bef
00009be7	movzbl	%al,%eax
00009bea	cmpl	$0x0b,%eax
00009bed	jne	0x00009bf8
00009bef	orb	$0x01,0x00000178(%ebx)
00009bf6	jmp	0x00009bff
00009bf8	andb	$0xfe,0x00000178(%ebx)
00009bff	movl	0x14(%ebp),%eax
00009c02	movl	(%eax),%eax
00009c04	movl	0x04(%eax),%eax
00009c07	movl	%eax,0xffffecb0(%ebp)
00009c0d	testb	$0x01,0x15(%esi)
00009c11	jne	0x00009c7b
00009c13	movl	%esi,(%esp)
00009c16	movl	$0x00000002,0x04(%esp)
00009c1e	calll	CUtlBuffer::CheckGet(int)
00009c23	cmpb	$0x01,%al
00009c25	jne	0x00009c68
00009c27	movl	%edi,0xffffecb4(%ebp)
00009c2d	movl	0x0c(%esi),%eax
00009c30	movl	%eax,%ecx
00009c32	subl	0x20(%esi),%ecx
00009c35	addl	(%esi),%ecx
00009c37	testb	$0x01,0x34(%esi)
00009c3b	jne	0x00009c42
00009c3d	movzwl	(%ecx),%ecx
00009c40	jmp	0x00009c59
00009c42	leal	0xffffecba(%ebp),%edi
00009c48	testl	%ecx,%ecx
00009c4a	cmovnel	%ecx,%edi
00009c4d	movzbl	0x01(%edi),%edx
00009c51	movzbl	(%edi),%ecx
00009c54	shll	$0x08,%ecx
00009c57	orl	%edx,%ecx
00009c59	movw	%cx,0xffffecba(%ebp)
00009c60	addl	$0x02,%eax
00009c63	movl	%eax,0x0c(%esi)
00009c66	jmp	0x00009cad
00009c68	movl	%edi,0xffffecb4(%ebp)
00009c6e	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecba(%ebp)
00009c77	xorl	%ecx,%ecx
00009c79	jmp	0x00009cad
00009c7b	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecba(%ebp)
00009c84	leal	0xffffecba(%ebp),%eax
00009c8a	movl	%eax,0x08(%esp)
00009c8e	leal	0x6f5dd-0x9b61(%edi),%eax
00009c94	movl	%edi,0xffffecb4(%ebp)
00009c9a	movl	%eax,0x04(%esp)
00009c9e	movl	%esi,(%esp)
00009ca1	calll	CUtlBuffer::Scanf(char const*, ...)
00009ca6	movzwl	0xffffecba(%ebp),%ecx
00009cad	leal	0xfffffaf0(%ebp),%edi
00009cb3	movl	%edi,0x08(%esp)
00009cb7	movswl	%cx,%eax
00009cba	movl	%eax,0x04(%esp)
00009cbe	movl	0x14(%ebp),%eax
00009cc1	movl	%eax,(%esp)
00009cc4	movl	$0x00000100,0x0c(%esp)
00009ccc	call	*0xffffecb0(%ebp)
00009cd2	movl	%edi,0x04(%esp)
00009cd6	leal	0x08(%ebx),%eax
00009cd9	movl	%eax,(%esp)
00009cdc	calll	CUtlString::operator=(char const*)
00009ce1	testb	$0x01,0x15(%esi)
00009ce5	jne	0x00009d4c
00009ce7	movl	%esi,(%esp)
00009cea	movl	$0x00000004,0x04(%esp)
00009cf2	calll	CUtlBuffer::CheckGet(int)
00009cf7	cmpb	$0x01,%al
00009cf9	jne	0x00009d36
00009cfb	movl	(%esi),%ecx
00009cfd	movl	0x0c(%esi),%eax
00009d00	movl	%eax,%edx
00009d02	subl	0x20(%esi),%edx
00009d05	movss	(%ecx,%edx),%xmm0
00009d0a	movss	%xmm0,0xffffecbc(%ebp)
00009d12	testb	$0x01,0x34(%esi)
00009d16	je	0x00009d28
00009d18	movd	%xmm0,%ecx
00009d1c	bswap	%ecx
00009d1e	movl	%ecx,0xffffecbc(%ebp)
00009d24	movd	%ecx,%xmm0
00009d28	movl	0xffffecb4(%ebp),%edi
00009d2e	addl	$0x04,%eax
00009d31	movl	%eax,0x0c(%esi)
00009d34	jmp	0x00009d80
00009d36	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecbc(%ebp)
00009d40	pxor	%xmm0,%xmm0
00009d44	movl	0xffffecb4(%ebp),%edi
00009d4a	jmp	0x00009d80
00009d4c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecbc(%ebp)
00009d56	leal	0xffffecbc(%ebp),%eax
00009d5c	movl	%eax,0x08(%esp)
00009d60	movl	0xffffecb4(%ebp),%edi
00009d66	leal	0x6f5da-0x9b61(%edi),%eax
00009d6c	movl	%eax,0x04(%esp)
00009d70	movl	%esi,(%esp)
00009d73	calll	CUtlBuffer::Scanf(char const*, ...)
00009d78	movss	0xffffecbc(%ebp),%xmm0
00009d80	movss	%xmm0,0x48(%ebx)
00009d85	movss	0x4c(%ebx),%xmm1
00009d8a	ucomiss	0x6ea20-0x9b61(%edi),%xmm1
00009d91	jne	0x00009d95
00009d93	jnp	0x00009d9f
00009d95	ucomiss	%xmm1,%xmm0
00009d98	jbe	0x00009d9f
00009d9a	movss	%xmm0,0x4c(%ebx)
00009d9f	testb	$0x01,0x15(%esi)
00009da3	jne	0x00009e1f
00009da5	movl	%esi,(%esp)
00009da8	movl	$0x00000004,0x04(%esp)
00009db0	calll	CUtlBuffer::CheckGet(int)
00009db5	cmpb	$0x01,%al
00009db7	jne	0x00009df1
00009db9	movl	(%esi),%ecx
00009dbb	movl	0x0c(%esi),%eax
00009dbe	movl	%eax,%edx
00009dc0	subl	0x20(%esi),%edx
00009dc3	movss	(%ecx,%edx),%xmm0
00009dc8	movss	%xmm0,0xffffecc0(%ebp)
00009dd0	testb	$0x01,0x34(%esi)
00009dd4	je	0x00009de6
00009dd6	movd	%xmm0,%ecx
00009dda	bswap	%ecx
00009ddc	movl	%ecx,0xffffecc0(%ebp)
00009de2	movd	%ecx,%xmm0
00009de6	addl	$0x04,%eax
00009de9	movl	0x0c(%ebp),%ecx
00009dec	movl	%eax,0x0c(%ecx)
00009def	jmp	0x00009e4d
00009df1	movl	%edi,0xffffecb4(%ebp)
00009df7	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc0(%ebp)
00009e01	pxor	%xmm0,%xmm0
00009e05	pxor	%xmm1,%xmm1
00009e09	cmpss	$0x4,0x4c(%ebx),%xmm1
00009e0f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x4c(%ebx)
00009e16	movd	%xmm1,%eax
00009e1a	andl	$0x01,%eax
00009e1d	jmp	0x00009e74
00009e1f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc0(%ebp)
00009e29	leal	0xffffecc0(%ebp),%eax
00009e2f	movl	%eax,0x08(%esp)
00009e33	leal	0x6f5da-0x9b61(%edi),%eax
00009e39	movl	%eax,0x04(%esp)
00009e3d	movl	%esi,(%esp)
00009e40	calll	CUtlBuffer::Scanf(char const*, ...)
00009e45	movss	0xffffecc0(%ebp),%xmm0
00009e4d	movapd	%xmm0,%xmm1
00009e51	cmpss	$0x4,0x4c(%ebx),%xmm1
00009e57	movss	%xmm0,0x4c(%ebx)
00009e5c	movd	%xmm1,%eax
00009e60	andl	$0x01,%eax
00009e63	ucomiss	0x6ea20-0x9b61(%edi),%xmm0
00009e6a	movl	%edi,0xffffecb4(%ebp)
00009e70	jne	0x00009e74
00009e72	jnp	0x00009ecc
00009e74	movss	0x48(%ebx),%xmm1
00009e79	ucomiss	%xmm0,%xmm1
00009e7c	jbe	0x00009e83
00009e7e	movss	%xmm1,0x4c(%ebx)
00009e83	cmpb	$0x01,%al
00009e85	jne	0x00009ecc
00009e87	movl	0x00000118(%ebx),%eax
00009e8d	testl	%eax,%eax
00009e8f	jle	0x00009ecc
00009e91	xorl	%esi,%esi
00009e93	leal	0xff(%eax),%edi
00009e96	jmp	0x00009ea7
00009e98	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
00009ea0	incl	%esi
00009ea1	movl	0x00000118(%ebx),%eax
00009ea7	cmpl	%esi,%eax
00009ea9	jle	0x00009ec8
00009eab	movl	0x0000010c(%ebx),%eax
00009eb1	movl	(%eax,%esi,4),%eax
00009eb4	testl	%eax,%eax
00009eb6	je	0x00009ec8
00009eb8	movl	%eax,(%esp)
00009ebb	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x04(%esp)
00009ec3	calll	CFlexAnimationTrack::Resort(int)
00009ec8	cmpl	%esi,%edi
00009eca	jne	0x00009ea0
00009ecc	movl	0x14(%ebp),%eax
00009ecf	movl	(%eax),%eax
00009ed1	movl	0x04(%eax),%eax
00009ed4	movl	%eax,0xffffecb0(%ebp)
00009eda	movl	0x0c(%ebp),%edi
00009edd	testb	$0x01,0x15(%edi)
00009ee1	jne	0x00009f43
00009ee3	movl	%edi,(%esp)
00009ee6	movl	$0x00000002,0x04(%esp)
00009eee	calll	CUtlBuffer::CheckGet(int)
00009ef3	cmpb	$0x01,%al
00009ef5	jne	0x00009f36
00009ef7	movl	0x0c(%edi),%eax
00009efa	movl	%eax,%ecx
00009efc	subl	0x20(%edi),%ecx
00009eff	addl	(%edi),%ecx
00009f01	testb	$0x01,0x34(%edi)
00009f05	movl	%edi,%esi
00009f07	jne	0x00009f0e
00009f09	movzwl	(%ecx),%ecx
00009f0c	jmp	0x00009f25
00009f0e	leal	0xffffecc4(%ebp),%edi
00009f14	testl	%ecx,%ecx
00009f16	cmovnel	%ecx,%edi
00009f19	movzbl	0x01(%edi),%edx
00009f1d	movzbl	(%edi),%ecx
00009f20	shll	$0x08,%ecx
00009f23	orl	%edx,%ecx
00009f25	movw	%cx,0xffffecc4(%ebp)
00009f2c	addl	$0x02,%eax
00009f2f	movl	%esi,%edi
00009f31	movl	%eax,0x0c(%edi)
00009f34	jmp	0x00009f75
00009f36	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc4(%ebp)
00009f3f	xorl	%ecx,%ecx
00009f41	jmp	0x00009f75
00009f43	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc4(%ebp)
00009f4c	leal	0xffffecc4(%ebp),%eax
00009f52	movl	%eax,0x08(%esp)
00009f56	movl	0xffffecb4(%ebp),%eax
00009f5c	leal	0x6f5dd-0x9b61(%eax),%eax
00009f62	movl	%eax,0x04(%esp)
00009f66	movl	%edi,(%esp)
00009f69	calll	CUtlBuffer::Scanf(char const*, ...)
00009f6e	movzwl	0xffffecc4(%ebp),%ecx
00009f75	leal	0xfffff2f0(%ebp),%eax
00009f7b	movl	%eax,0x08(%esp)
00009f7f	movswl	%cx,%eax
00009f82	movl	%eax,0x04(%esp)
00009f86	movl	0x14(%ebp),%esi
00009f89	movl	%esi,(%esp)
00009f8c	movl	$0x00000800,0x0c(%esp)
00009f94	call	*0xffffecb0(%ebp)
00009f9a	leal	0xfffff2f0(%ebp),%eax
00009fa0	movl	%eax,0x04(%esp)
00009fa4	leal	0x18(%ebx),%eax
00009fa7	movl	%eax,(%esp)
00009faa	calll	CUtlString::operator=(char const*)
00009faf	movl	(%esi),%eax
00009fb1	movl	0x04(%eax),%esi
00009fb4	testb	$0x01,0x15(%edi)
00009fb8	jne	0x0000a019
00009fba	movl	%edi,(%esp)
00009fbd	movl	$0x00000002,0x04(%esp)
00009fc5	calll	CUtlBuffer::CheckGet(int)
00009fca	cmpb	$0x01,%al
00009fcc	jne	0x0000a00c
00009fce	movl	0x0c(%edi),%eax
00009fd1	movl	%eax,%ecx
00009fd3	subl	0x20(%edi),%ecx
00009fd6	addl	(%edi),%ecx
00009fd8	testb	$0x01,0x34(%edi)
00009fdc	jne	0x00009fe3
00009fde	movzwl	(%ecx),%ecx
00009fe1	jmp	0x00009ffa
00009fe3	leal	0xffffecc6(%ebp),%edi
00009fe9	testl	%ecx,%ecx
00009feb	cmovnel	%ecx,%edi
00009fee	movzbl	0x01(%edi),%edx
00009ff2	movzbl	(%edi),%ecx
00009ff5	shll	$0x08,%ecx
00009ff8	orl	%edx,%ecx
00009ffa	movw	%cx,0xffffecc6(%ebp)
0000a001	addl	$0x02,%eax
0000a004	movl	0x0c(%ebp),%edx
0000a007	movl	%eax,0x0c(%edx)
0000a00a	jmp	0x0000a04b
0000a00c	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc6(%ebp)
0000a015	xorl	%ecx,%ecx
0000a017	jmp	0x0000a04b
0000a019	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc6(%ebp)
0000a022	leal	0xffffecc6(%ebp),%eax
0000a028	movl	%eax,0x08(%esp)
0000a02c	movl	0xffffecb4(%ebp),%eax
0000a032	leal	0x6f5dd-0x9b61(%eax),%eax
0000a038	movl	%eax,0x04(%esp)
0000a03c	movl	%edi,(%esp)
0000a03f	calll	CUtlBuffer::Scanf(char const*, ...)
0000a044	movzwl	0xffffecc6(%ebp),%ecx
0000a04b	leal	0xfffff2f0(%ebp),%edi
0000a051	movl	%edi,0x08(%esp)
0000a055	movswl	%cx,%eax
0000a058	movl	%eax,0x04(%esp)
0000a05c	movl	0x14(%ebp),%eax
0000a05f	movl	%eax,(%esp)
0000a062	movl	$0x00000800,0x0c(%esp)
0000a06a	call	*%esi
0000a06c	movl	%edi,(%esp)
0000a06f	calll	_strlen
0000a074	movl	%eax,%esi
0000a076	movl	%edi,0x04(%esp)
0000a07a	leal	0x28(%ebx),%eax
0000a07d	movl	%eax,0xffffecb0(%ebp)
0000a083	movl	%eax,(%esp)
0000a086	calll	CUtlString::operator=(char const*)
0000a08b	movl	%edi,%eax
0000a08d	testl	%esi,%esi
0000a08f	jle	0x0000a0d2
0000a091	cmpb	$0x20,0xff(%esi,%eax)
0000a096	jne	0x0000a0d2
0000a098	movl	%eax,0x04(%esp)
0000a09c	leal	0xfffffbf0(%ebp),%edi
0000a0a2	movl	%edi,(%esp)
0000a0a5	movl	$0x00000400,0x08(%esp)
0000a0ad	calll	V_strncpy(char*, char const*, int)
0000a0b2	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffbef(%ebp,%esi)
0000a0ba	movl	%edi,0x04(%esp)
0000a0be	movl	0xffffecb0(%ebp),%eax
0000a0c4	movl	%eax,(%esp)
0000a0c7	calll	CUtlString::Set(char const*)
0000a0cc	leal	0xfffff2f0(%ebp),%eax
0000a0d2	movl	%eax,%esi
0000a0d4	movl	0x14(%ebp),%eax
0000a0d7	movl	(%eax),%eax
0000a0d9	movl	0x04(%eax),%eax
0000a0dc	movl	%eax,0xffffecb0(%ebp)
0000a0e2	movl	0x0c(%ebp),%edi
0000a0e5	testb	$0x01,0x15(%edi)
0000a0e9	jne	0x0000a14a
0000a0eb	movl	%edi,(%esp)
0000a0ee	movl	$0x00000002,0x04(%esp)
0000a0f6	calll	CUtlBuffer::CheckGet(int)
0000a0fb	cmpb	$0x01,%al
0000a0fd	jne	0x0000a13d
0000a0ff	movl	0x0c(%edi),%eax
0000a102	movl	%eax,%ecx
0000a104	subl	0x20(%edi),%ecx
0000a107	addl	(%edi),%ecx
0000a109	testb	$0x01,0x34(%edi)
0000a10d	jne	0x0000a114
0000a10f	movzwl	(%ecx),%ecx
0000a112	jmp	0x0000a12b
0000a114	leal	0xffffecc8(%ebp),%edi
0000a11a	testl	%ecx,%ecx
0000a11c	cmovnel	%ecx,%edi
0000a11f	movzbl	0x01(%edi),%edx
0000a123	movzbl	(%edi),%ecx
0000a126	shll	$0x08,%ecx
0000a129	orl	%edx,%ecx
0000a12b	movw	%cx,0xffffecc8(%ebp)
0000a132	addl	$0x02,%eax
0000a135	movl	0x0c(%ebp),%edx
0000a138	movl	%eax,0x0c(%edx)
0000a13b	jmp	0x0000a17c
0000a13d	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc8(%ebp)
0000a146	xorl	%ecx,%ecx
0000a148	jmp	0x0000a17c
0000a14a	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecc8(%ebp)
0000a153	leal	0xffffecc8(%ebp),%eax
0000a159	movl	%eax,0x08(%esp)
0000a15d	movl	0xffffecb4(%ebp),%eax
0000a163	leal	0x6f5dd-0x9b61(%eax),%eax
0000a169	movl	%eax,0x04(%esp)
0000a16d	movl	%edi,(%esp)
0000a170	calll	CUtlBuffer::Scanf(char const*, ...)
0000a175	movzwl	0xffffecc8(%ebp),%ecx
0000a17c	movl	%esi,0x08(%esp)
0000a180	movswl	%cx,%eax
0000a183	movl	%eax,0x04(%esp)
0000a187	movl	0x14(%ebp),%eax
0000a18a	movl	%eax,(%esp)
0000a18d	movl	$0x00000800,0x0c(%esp)
0000a195	call	*0xffffecb0(%ebp)
0000a19b	movl	%esi,(%esp)
0000a19e	calll	_strlen
0000a1a3	movl	%eax,%edi
0000a1a5	movl	%esi,0x04(%esp)
0000a1a9	leal	0x38(%ebx),%eax
0000a1ac	movl	%eax,0xffffecb0(%ebp)
0000a1b2	movl	%eax,(%esp)
0000a1b5	calll	CUtlString::operator=(char const*)
0000a1ba	testl	%edi,%edi
0000a1bc	jle	0x0000a1f9
0000a1be	cmpb	$0x20,0xff(%edi,%esi)
0000a1c3	jne	0x0000a1f9
0000a1c5	movl	%esi,0x04(%esp)
0000a1c9	leal	0xfffffbf0(%ebp),%esi
0000a1cf	movl	%esi,(%esp)
0000a1d2	movl	$0x00000400,0x08(%esp)
0000a1da	calll	V_strncpy(char*, char const*, int)
0000a1df	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffbef(%ebp,%edi)
0000a1e7	movl	%esi,0x04(%esp)
0000a1eb	movl	0xffffecb0(%ebp),%eax
0000a1f1	movl	%eax,(%esp)
0000a1f4	calll	CUtlString::Set(char const*)
0000a1f9	movl	0x0c(%ebp),%eax
0000a1fc	movl	%eax,0x04(%esp)
0000a200	movl	%ebx,%esi
0000a202	movl	%eax,%ebx
0000a204	leal	0x5c(%esi),%eax
0000a207	movl	%eax,(%esp)
0000a20a	calll	CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*)
0000a20f	testb	$0x01,0x15(%ebx)
0000a213	jne	0x0000a253
0000a215	movl	%ebx,(%esp)
0000a218	movl	$0x00000001,0x04(%esp)
0000a220	calll	CUtlBuffer::CheckGet(int)
0000a225	cmpb	$0x01,%al
0000a227	movl	0xffffecb4(%ebp),%edi
0000a22d	jne	0x0000a248
0000a22f	movl	(%ebx),%eax
0000a231	movl	0x0c(%ebx),%ecx
0000a234	movl	%ecx,%edx
0000a236	subl	0x20(%ebx),%edx
0000a239	movb	(%eax,%edx),%al
0000a23c	movb	%al,0xffffeccb(%ebp)
0000a242	incl	%ecx
0000a243	movl	%ecx,0x0c(%ebx)
0000a246	jmp	0x0000a282
0000a248	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeccb(%ebp)
0000a24f	xorb	%al,%al
0000a251	jmp	0x0000a282
0000a253	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeccb(%ebp)
0000a25a	leal	0xffffeccb(%ebp),%eax
0000a260	movl	%eax,0x08(%esp)
0000a264	movl	0xffffecb4(%ebp),%edi
0000a26a	leal	0x6f5d7-0x9b61(%edi),%eax
0000a270	movl	%eax,0x04(%esp)
0000a274	movl	%ebx,(%esp)
0000a277	calll	CUtlBuffer::Scanf(char const*, ...)
0000a27c	movb	0xffffeccb(%ebp),%al
0000a282	movb	%al,%cl
0000a284	addb	%cl,%cl
0000a286	movb	%al,%ah
0000a288	shrb	$0x02,%ah
0000a28b	andb	$0x01,%ah
0000a28e	movb	%al,%dl
0000a290	shlb	$0x04,%dl
0000a293	andb	$0x20,%dl
0000a296	orb	%ah,%dl
0000a298	movb	%cl,%ah
0000a29a	andb	$0x02,%ah
0000a29d	orb	%dl,%ah
0000a29f	movzwl	0x00000178(%esi),%edx
0000a2a6	movb	%dl,%ch
0000a2a8	andb	$0xdc,%ch
0000a2ab	orb	%ah,%ch
0000a2ad	movb	%ch,0x00000178(%esi)
0000a2b3	andb	$0x40,%cl
0000a2b6	movb	%al,%ah
0000a2b8	shrb	%ah
0000a2ba	andb	$0x08,%ah
0000a2bd	orb	%cl,%ah
0000a2bf	shlb	$0x02,%al
0000a2c2	andb	$0x20,%al
0000a2c4	orb	%ah,%al
0000a2c6	andb	$0x97,%dh
0000a2c9	orb	%al,%dh
0000a2cb	movb	%dh,0x00000179(%esi)
0000a2d1	testb	$0x01,0x15(%ebx)
0000a2d5	jne	0x0000a330
0000a2d7	movl	%ebx,(%esp)
0000a2da	movl	$0x00000004,0x04(%esp)
0000a2e2	calll	CUtlBuffer::CheckGet(int)
0000a2e7	cmpb	$0x01,%al
0000a2e9	jne	0x0000a320
0000a2eb	movl	(%ebx),%ecx
0000a2ed	movl	0x0c(%ebx),%eax
0000a2f0	movl	%eax,%edx
0000a2f2	subl	0x20(%ebx),%edx
0000a2f5	movss	(%ecx,%edx),%xmm0
0000a2fa	movss	%xmm0,0xffffeccc(%ebp)
0000a302	testb	$0x01,0x34(%ebx)
0000a306	je	0x0000a318
0000a308	movd	%xmm0,%ecx
0000a30c	bswap	%ecx
0000a30e	movl	%ecx,0xffffeccc(%ebp)
0000a314	movd	%ecx,%xmm0
0000a318	addl	$0x04,%eax
0000a31b	movl	%eax,0x0c(%ebx)
0000a31e	jmp	0x0000a35e
0000a320	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeccc(%ebp)
0000a32a	pxor	%xmm0,%xmm0
0000a32e	jmp	0x0000a35e
0000a330	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeccc(%ebp)
0000a33a	leal	0xffffeccc(%ebp),%eax
0000a340	movl	%eax,0x08(%esp)
0000a344	leal	0x6f5da-0x9b61(%edi),%eax
0000a34a	movl	%eax,0x04(%esp)
0000a34e	movl	%ebx,(%esp)
0000a351	calll	CUtlBuffer::Scanf(char const*, ...)
0000a356	movss	0xffffeccc(%ebp),%xmm0
0000a35e	movss	%xmm0,0x00000134(%esi)
0000a366	testb	$0x01,0x15(%ebx)
0000a36a	jne	0x0000a3a5
0000a36c	movl	%ebx,(%esp)
0000a36f	movl	$0x00000001,0x04(%esp)
0000a377	calll	CUtlBuffer::CheckGet(int)
0000a37c	cmpb	$0x01,%al
0000a37e	jne	0x0000a399
0000a380	movl	(%ebx),%eax
0000a382	movl	0x0c(%ebx),%ecx
0000a385	movl	%ecx,%edx
0000a387	subl	0x20(%ebx),%edx
0000a38a	movb	(%eax,%edx),%al
0000a38d	movb	%al,0xffffecd3(%ebp)
0000a393	incl	%ecx
0000a394	movl	%ecx,0x0c(%ebx)
0000a397	jmp	0x0000a3ce
0000a399	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd3(%ebp)
0000a3a0	jmp	0x0000a576
0000a3a5	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd3(%ebp)
0000a3ac	leal	0xffffecd3(%ebp),%eax
0000a3b2	movl	%eax,0x08(%esp)
0000a3b6	leal	0x6f5d7-0x9b61(%edi),%eax
0000a3bc	movl	%eax,0x04(%esp)
0000a3c0	movl	%ebx,(%esp)
0000a3c3	calll	CUtlBuffer::Scanf(char const*, ...)
0000a3c8	movb	0xffffecd3(%ebp),%al
0000a3ce	testb	%al,%al
0000a3d0	je	0x0000a576
0000a3d6	movzbl	%al,%eax
0000a3d9	movl	%eax,0xffffeca8(%ebp)
0000a3df	xorl	%eax,%eax
0000a3e1	movss	0x6ea24-0x9b61(%edi),%xmm0
0000a3e9	movss	%xmm0,0xffffeca4(%ebp)
0000a3f1	nopl	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
0000a400	movl	%eax,0xffffecb0(%ebp)
0000a406	movl	0x14(%ebp),%eax
0000a409	movl	(%eax),%eax
0000a40b	movl	0x04(%eax),%eax
0000a40e	movl	%eax,0xffffecac(%ebp)
0000a414	testb	$0x01,0x15(%ebx)
0000a418	jne	0x0000a484
0000a41a	movl	%ebx,(%esp)
0000a41d	movl	$0x00000002,0x04(%esp)
0000a425	calll	CUtlBuffer::CheckGet(int)
0000a42a	cmpb	$0x01,%al
0000a42c	jne	0x0000a477
0000a42e	movl	0x0c(%ebx),%eax
0000a431	movl	%eax,%ecx
0000a433	subl	0x20(%ebx),%ecx
0000a436	addl	(%ebx),%ecx
0000a438	testb	$0x01,0x34(%ebx)
0000a43c	jne	0x0000a443
0000a43e	movzwl	(%ecx),%ecx
0000a441	jmp	0x0000a468
0000a443	movl	%ebx,%edi
0000a445	movl	%esi,%ebx
0000a447	leal	0xffffecd4(%ebp),%esi
0000a44d	testl	%ecx,%ecx
0000a44f	cmovnel	%ecx,%esi
0000a452	movzbl	0x01(%esi),%edx
0000a456	movzbl	(%esi),%ecx
0000a459	movl	%ebx,%esi
0000a45b	movl	%edi,%ebx
0000a45d	movl	0xffffecb4(%ebp),%edi
0000a463	shll	$0x08,%ecx
0000a466	orl	%edx,%ecx
0000a468	movw	%cx,0xffffecd4(%ebp)
0000a46f	addl	$0x02,%eax
0000a472	movl	%eax,0x0c(%ebx)
0000a475	jmp	0x0000a4b0
0000a477	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd4(%ebp)
0000a480	xorl	%ecx,%ecx
0000a482	jmp	0x0000a4b0
0000a484	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd4(%ebp)
0000a48d	leal	0xffffecd4(%ebp),%eax
0000a493	movl	%eax,0x08(%esp)
0000a497	leal	0x6f5dd-0x9b61(%edi),%eax
0000a49d	movl	%eax,0x04(%esp)
0000a4a1	movl	%ebx,(%esp)
0000a4a4	calll	CUtlBuffer::Scanf(char const*, ...)
0000a4a9	movzwl	0xffffecd4(%ebp),%ecx
0000a4b0	leal	0xfffff1f0(%ebp),%eax
0000a4b6	movl	%eax,0x08(%esp)
0000a4ba	movswl	%cx,%eax
0000a4bd	movl	%eax,0x04(%esp)
0000a4c1	movl	0x14(%ebp),%eax
0000a4c4	movl	%eax,(%esp)
0000a4c7	movl	$0x00000100,0x0c(%esp)
0000a4cf	call	*0xffffecac(%ebp)
0000a4d5	testb	$0x01,0x15(%ebx)
0000a4d9	jne	0x0000a513
0000a4db	movl	%ebx,(%esp)
0000a4de	movl	$0x00000001,0x04(%esp)
0000a4e6	calll	CUtlBuffer::CheckGet(int)
0000a4eb	cmpb	$0x01,%al
0000a4ed	jne	0x0000a508
0000a4ef	movl	(%ebx),%eax
0000a4f1	movl	0x0c(%ebx),%ecx
0000a4f4	movl	%ecx,%edx
0000a4f6	subl	0x20(%ebx),%edx
0000a4f9	movb	(%eax,%edx),%al
0000a4fc	movb	%al,0xffffecd6(%ebp)
0000a502	incl	%ecx
0000a503	movl	%ecx,0x0c(%ebx)
0000a506	jmp	0x0000a53c
0000a508	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd6(%ebp)
0000a50f	xorb	%al,%al
0000a511	jmp	0x0000a53c
0000a513	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd6(%ebp)
0000a51a	leal	0xffffecd6(%ebp),%eax
0000a520	movl	%eax,0x08(%esp)
0000a524	leal	0x6f5d7-0x9b61(%edi),%eax
0000a52a	movl	%eax,0x04(%esp)
0000a52e	movl	%ebx,(%esp)
0000a531	calll	CUtlBuffer::Scanf(char const*, ...)
0000a536	movb	0xffffecd6(%ebp),%al
0000a53c	leal	0xfffff1f0(%ebp),%ecx
0000a542	movl	%ecx,0x04(%esp)
0000a546	movl	%esi,(%esp)
0000a549	movzbl	%al,%eax
0000a54c	cvtsi2ss	%eax,%xmm0
0000a550	divss	0xffffeca4(%ebp),%xmm0
0000a558	movss	%xmm0,0x08(%esp)
0000a55e	calll	CChoreoEvent::AddRelativeTag(char const*, float)
0000a563	movl	0xffffecb0(%ebp),%eax
0000a569	incl	%eax
0000a56a	cmpl	0xffffeca8(%ebp),%eax
0000a570	jl	0x0000a400
0000a576	testb	$0x01,0x15(%ebx)
0000a57a	jne	0x0000a5b2
0000a57c	movl	%ebx,(%esp)
0000a57f	movl	$0x00000001,0x04(%esp)
0000a587	calll	CUtlBuffer::CheckGet(int)
0000a58c	cmpb	$0x01,%al
0000a58e	jne	0x0000a5a9
0000a590	movl	(%ebx),%eax
0000a592	movl	0x0c(%ebx),%ecx
0000a595	movl	%ecx,%edx
0000a597	subl	0x20(%ebx),%edx
0000a59a	movb	(%eax,%edx),%al
0000a59d	movb	%al,0xffffecd7(%ebp)
0000a5a3	incl	%ecx
0000a5a4	movl	%ecx,0x0c(%ebx)
0000a5a7	jmp	0x0000a5db
0000a5a9	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd7(%ebp)
0000a5b0	jmp	0x0000a5e3
0000a5b2	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd7(%ebp)
0000a5b9	leal	0xffffecd7(%ebp),%eax
0000a5bf	movl	%eax,0x08(%esp)
0000a5c3	leal	0x6f5d7-0x9b61(%edi),%eax
0000a5c9	movl	%eax,0x04(%esp)
0000a5cd	movl	%ebx,(%esp)
0000a5d0	calll	CUtlBuffer::Scanf(char const*, ...)
0000a5d5	movb	0xffffecd7(%ebp),%al
0000a5db	testb	%al,%al
0000a5dd	jne	0x0000a8d6
0000a5e3	leal	0x0c(%ebx),%eax
0000a5e6	movl	%eax,0xffffecb0(%ebp)
0000a5ec	movl	%edi,0xffffecb4(%ebp)
0000a5f2	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeca8(%ebp)
0000a5fc	movss	0x6ea28-0x9b61(%edi),%xmm0
0000a604	movss	%xmm0,0xffffeca0(%ebp)
0000a60c	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
0000a610	testb	$0x01,0x15(%ebx)
0000a614	movl	0xffffecb4(%ebp),%ecx
0000a61a	jne	0x0000a659
0000a61c	movl	%ebx,(%esp)
0000a61f	movl	$0x00000001,0x04(%esp)
0000a627	calll	CUtlBuffer::CheckGet(int)
0000a62c	cmpb	$0x01,%al
0000a62e	jne	0x0000a64b
0000a630	movl	(%ebx),%eax
0000a632	movl	0x0c(%ebx),%ecx
0000a635	movl	%ecx,%edx
0000a637	subl	0x20(%ebx),%edx
0000a63a	movb	(%eax,%edx),%al
0000a63d	movb	%al,0xffffecdb(%ebp)
0000a643	incl	%ecx
0000a644	movl	%ecx,0x0c(%ebx)
0000a647	movl	%ebx,%edi
0000a649	jmp	0x0000a684
0000a64b	movl	%ebx,%edi
0000a64d	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecdb(%ebp)
0000a654	jmp	0x0000a84a
0000a659	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecdb(%ebp)
0000a660	leal	0xffffecdb(%ebp),%eax
0000a666	movl	%eax,0x08(%esp)
0000a66a	leal	0x6f5d7-0x9b61(%ecx),%eax
0000a670	movl	%eax,0x04(%esp)
0000a674	movl	%ebx,(%esp)
0000a677	movl	%ebx,%edi
0000a679	calll	CUtlBuffer::Scanf(char const*, ...)
0000a67e	movb	0xffffecdb(%ebp),%al
0000a684	testb	%al,%al
0000a686	je	0x0000a84a
0000a68c	xorl	%esi,%esi
0000a68e	movzbl	%al,%eax
0000a691	movl	%eax,0xffffeca4(%ebp)
0000a697	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
0000a6a0	movl	0x14(%ebp),%eax
0000a6a3	movl	(%eax),%eax
0000a6a5	movl	0x04(%eax),%eax
0000a6a8	movl	%eax,0xffffecac(%ebp)
0000a6ae	movl	%edi,%ebx
0000a6b0	testb	$0x01,0x15(%ebx)
0000a6b4	jne	0x0000a717
0000a6b6	movl	%ebx,(%esp)
0000a6b9	movl	$0x00000002,0x04(%esp)
0000a6c1	calll	CUtlBuffer::CheckGet(int)
0000a6c6	cmpb	$0x01,%al
0000a6c8	jne	0x0000a70a
0000a6ca	movl	0x0c(%ebx),%eax
0000a6cd	movl	%eax,%ecx
0000a6cf	subl	0x20(%ebx),%ecx
0000a6d2	addl	(%ebx),%ecx
0000a6d4	testb	$0x01,0x34(%ebx)
0000a6d8	jne	0x0000a6df
0000a6da	movzwl	(%ecx),%ecx
0000a6dd	jmp	0x0000a6f6
0000a6df	leal	0xffffecdc(%ebp),%edi
0000a6e5	testl	%ecx,%ecx
0000a6e7	cmovnel	%ecx,%edi
0000a6ea	movzbl	0x01(%edi),%edx
0000a6ee	movzbl	(%edi),%ecx
0000a6f1	shll	$0x08,%ecx
0000a6f4	orl	%edx,%ecx
0000a6f6	movw	%cx,0xffffecdc(%ebp)
0000a6fd	addl	$0x02,%eax
0000a700	movl	0xffffecb0(%ebp),%edx
0000a706	movl	%eax,(%edx)
0000a708	jmp	0x0000a749
0000a70a	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecdc(%ebp)
0000a713	xorl	%ecx,%ecx
0000a715	jmp	0x0000a749
0000a717	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecdc(%ebp)
0000a720	leal	0xffffecdc(%ebp),%eax
0000a726	movl	%eax,0x08(%esp)
0000a72a	movl	0xffffecb4(%ebp),%eax
0000a730	leal	0x6f5dd-0x9b61(%eax),%eax
0000a736	movl	%eax,0x04(%esp)
0000a73a	movl	%ebx,(%esp)
0000a73d	calll	CUtlBuffer::Scanf(char const*, ...)
0000a742	movzwl	0xffffecdc(%ebp),%ecx
0000a749	leal	0xffffeff0(%ebp),%eax
0000a74f	movl	%eax,0x08(%esp)
0000a753	movswl	%cx,%eax
0000a756	movl	%eax,0x04(%esp)
0000a75a	movl	0x14(%ebp),%eax
0000a75d	movl	%eax,(%esp)
0000a760	movl	$0x00000100,0x0c(%esp)
0000a768	call	*0xffffecac(%ebp)
0000a76e	movl	%ebx,%edi
0000a770	testb	$0x01,0x15(%edi)
0000a774	jne	0x0000a7d7
0000a776	movl	%edi,(%esp)
0000a779	movl	$0x00000002,0x04(%esp)
0000a781	calll	CUtlBuffer::CheckGet(int)
0000a786	cmpb	$0x01,%al
0000a788	jne	0x0000a7ca
0000a78a	movl	0x0c(%edi),%ecx
0000a78d	movl	%ecx,%eax
0000a78f	subl	0x20(%edi),%eax
0000a792	addl	(%edi),%eax
0000a794	testb	$0x01,0x34(%edi)
0000a798	jne	0x0000a79f
0000a79a	movzwl	(%eax),%eax
0000a79d	jmp	0x0000a7b6
0000a79f	leal	0xffffecde(%ebp),%ebx
0000a7a5	testl	%eax,%eax
0000a7a7	cmovnel	%eax,%ebx
0000a7aa	movzbl	0x01(%ebx),%edx
0000a7ae	movzbl	(%ebx),%eax
0000a7b1	shll	$0x08,%eax
0000a7b4	orl	%edx,%eax
0000a7b6	movw	%ax,0xffffecde(%ebp)
0000a7bd	addl	$0x02,%ecx
0000a7c0	movl	0xffffecb0(%ebp),%edx
0000a7c6	movl	%ecx,(%edx)
0000a7c8	jmp	0x0000a809
0000a7ca	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecde(%ebp)
0000a7d3	xorl	%eax,%eax
0000a7d5	jmp	0x0000a809
0000a7d7	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecde(%ebp)
0000a7e0	leal	0xffffecde(%ebp),%eax
0000a7e6	movl	%eax,0x08(%esp)
0000a7ea	movl	0xffffecb4(%ebp),%eax
0000a7f0	leal	0x6f5d7-0x9b61(%eax),%eax
0000a7f6	movl	%eax,0x04(%esp)
0000a7fa	movl	%edi,(%esp)
0000a7fd	calll	CUtlBuffer::Scanf(char const*, ...)
0000a802	movzwl	0xffffecde(%ebp),%eax
0000a809	leal	0xffffeff0(%ebp),%ecx
0000a80f	movl	%ecx,0x08(%esp)
0000a813	movl	0xffffeca8(%ebp),%ecx
0000a819	movl	%ecx,0x04(%esp)
0000a81d	movl	0x08(%ebp),%ecx
0000a820	movl	%ecx,(%esp)
0000a823	movzwl	%ax,%eax
0000a826	cvtsi2ss	%eax,%xmm0
0000a82a	mulss	0xffffeca0(%ebp),%xmm0
0000a832	movss	%xmm0,0x0c(%esp)
0000a838	calll	CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
0000a83d	incl	%esi
0000a83e	cmpl	0xffffeca4(%ebp),%esi
0000a844	jl	0x0000a6a0
0000a84a	movl	0xffffeca8(%ebp),%eax
0000a850	incl	%eax
0000a851	movl	%eax,0xffffeca8(%ebp)
0000a857	cmpl	$0x02,%eax
0000a85a	movl	%edi,%ebx
0000a85c	jne	0x0000a610
0000a862	movl	0x08(%ebp),%esi
0000a865	movl	%esi,%edi
0000a867	cmpb	$0x06,0x04(%edi)
0000a86b	jne	0x0000aae7
0000a871	testb	$0x01,0x15(%ebx)
0000a875	jne	0x0000aa9d
0000a87b	movl	%ebx,(%esp)
0000a87e	movl	$0x00000004,0x04(%esp)
0000a886	calll	CUtlBuffer::CheckGet(int)
0000a88b	cmpb	$0x01,%al
0000a88d	jne	0x0000aa8d
0000a893	movl	(%ebx),%ecx
0000a895	movl	0x0c(%ebx),%eax
0000a898	movl	%eax,%edx
0000a89a	subl	0x20(%ebx),%edx
0000a89d	movss	(%ecx,%edx),%xmm0
0000a8a2	movss	%xmm0,0xffffece0(%ebp)
0000a8aa	testb	$0x01,0x34(%ebx)
0000a8ae	je	0x0000a8c0
0000a8b0	movd	%xmm0,%ecx
0000a8b4	bswap	%ecx
0000a8b6	movl	%ecx,0xffffece0(%ebp)
0000a8bc	movd	%ecx,%xmm0
0000a8c0	addl	$0x04,%eax
0000a8c3	movl	0xffffecb0(%ebp),%ecx
0000a8c9	movl	%eax,(%ecx)
0000a8cb	movl	0xffffecb4(%ebp),%esi
0000a8d1	jmp	0x0000aad1
0000a8d6	movzbl	%al,%eax
0000a8d9	movl	%eax,0xffffeca4(%ebp)
0000a8df	leal	0x0c(%ebx),%eax
0000a8e2	movl	%eax,0xffffecb0(%ebp)
0000a8e8	xorl	%eax,%eax
0000a8ea	movss	0x6ea24-0x9b61(%edi),%xmm0
0000a8f2	movss	%xmm0,0xffffeca0(%ebp)
0000a8fa	jmp	0x0000a96b
0000a8fc	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax)
0000a900	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecda(%ebp)
0000a907	leal	0xffffecda(%ebp),%eax
0000a90d	movl	%eax,0x08(%esp)
0000a911	leal	0x6f5d7-0x9b61(%edi),%eax
0000a917	movl	%eax,0x04(%esp)
0000a91b	movl	%ebx,(%esp)
0000a91e	calll	CUtlBuffer::Scanf(char const*, ...)
0000a923	movb	0xffffecda(%ebp),%al
0000a929	leal	0xfffff0f0(%ebp),%ecx
0000a92f	movl	%ecx,0x04(%esp)
0000a933	movl	%esi,(%esp)
0000a936	movzbl	%al,%eax
0000a939	cvtsi2ss	%eax,%xmm0
0000a93d	divss	0xffffeca0(%ebp),%xmm0
0000a945	movss	%xmm0,0x08(%esp)
0000a94b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0x0c(%esp)
0000a953	calll	CChoreoEvent::AddTimingTag(char const*, float, bool)
0000a958	movl	0xffffecac(%ebp),%eax
0000a95e	incl	%eax
0000a95f	cmpl	0xffffeca4(%ebp),%eax
0000a965	jge	0x0000a5ec
0000a96b	movl	%eax,0xffffecac(%ebp)
0000a971	movl	0x14(%ebp),%eax
0000a974	movl	(%eax),%eax
0000a976	movl	0x04(%eax),%eax
0000a979	movl	%eax,0xffffeca8(%ebp)
0000a97f	testb	$0x01,0x15(%ebx)
0000a983	jne	0x0000a9f4
0000a985	movl	%ebx,(%esp)
0000a988	movl	$0x00000002,0x04(%esp)
0000a990	calll	CUtlBuffer::CheckGet(int)
0000a995	cmpb	$0x01,%al
0000a997	jne	0x0000a9e7
0000a999	movl	0x0c(%ebx),%eax
0000a99c	movl	%eax,%ecx
0000a99e	subl	0x20(%ebx),%ecx
0000a9a1	addl	(%ebx),%ecx
0000a9a3	testb	$0x01,0x34(%ebx)
0000a9a7	jne	0x0000a9ae
0000a9a9	movzwl	(%ecx),%ecx
0000a9ac	jmp	0x0000a9d3
0000a9ae	movl	%ebx,%edi
0000a9b0	movl	%esi,%ebx
0000a9b2	leal	0xffffecd8(%ebp),%esi
0000a9b8	testl	%ecx,%ecx
0000a9ba	cmovnel	%ecx,%esi
0000a9bd	movzbl	0x01(%esi),%edx
0000a9c1	movzbl	(%esi),%ecx
0000a9c4	movl	%ebx,%esi
0000a9c6	movl	%edi,%ebx
0000a9c8	movl	0xffffecb4(%ebp),%edi
0000a9ce	shll	$0x08,%ecx
0000a9d1	orl	%edx,%ecx
0000a9d3	movw	%cx,0xffffecd8(%ebp)
0000a9da	addl	$0x02,%eax
0000a9dd	movl	0xffffecb0(%ebp),%edx
0000a9e3	movl	%eax,(%edx)
0000a9e5	jmp	0x0000aa20
0000a9e7	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd8(%ebp)
0000a9f0	xorl	%ecx,%ecx
0000a9f2	jmp	0x0000aa20
0000a9f4	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecd8(%ebp)
0000a9fd	leal	0xffffecd8(%ebp),%eax
0000aa03	movl	%eax,0x08(%esp)
0000aa07	leal	0x6f5dd-0x9b61(%edi),%eax
0000aa0d	movl	%eax,0x04(%esp)
0000aa11	movl	%ebx,(%esp)
0000aa14	calll	CUtlBuffer::Scanf(char const*, ...)
0000aa19	movzwl	0xffffecd8(%ebp),%ecx
0000aa20	leal	0xfffff0f0(%ebp),%eax
0000aa26	movl	%eax,0x08(%esp)
0000aa2a	movswl	%cx,%eax
0000aa2d	movl	%eax,0x04(%esp)
0000aa31	movl	0x14(%ebp),%eax
0000aa34	movl	%eax,(%esp)
0000aa37	movl	$0x00000100,0x0c(%esp)
0000aa3f	call	*0xffffeca8(%ebp)
0000aa45	testb	$0x01,0x15(%ebx)
0000aa49	jne	0x0000a900
0000aa4f	movl	%ebx,(%esp)
0000aa52	movl	$0x00000001,0x04(%esp)
0000aa5a	calll	CUtlBuffer::CheckGet(int)
0000aa5f	cmpb	$0x01,%al
0000aa61	jne	0x0000aa7f
0000aa63	movl	(%ebx),%eax
0000aa65	movl	0x0c(%ebx),%ecx
0000aa68	movl	%ecx,%edx
0000aa6a	subl	0x20(%ebx),%edx
0000aa6d	movb	(%eax,%edx),%al
0000aa70	movb	%al,0xffffecda(%ebp)
0000aa76	incl	%ecx
0000aa77	movl	%ecx,0x0c(%ebx)
0000aa7a	jmp	0x0000a929
0000aa7f	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecda(%ebp)
0000aa86	xorb	%al,%al
0000aa88	jmp	0x0000a929
0000aa8d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece0(%ebp)
0000aa97	pxor	%xmm0,%xmm0
0000aa9b	jmp	0x0000aae2
0000aa9d	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece0(%ebp)
0000aaa7	leal	0xffffece0(%ebp),%eax
0000aaad	movl	%eax,0x08(%esp)
0000aab1	movl	0xffffecb4(%ebp),%esi
0000aab7	leal	0x6f5da-0x9b61(%esi),%eax
0000aabd	movl	%eax,0x04(%esp)
0000aac1	movl	%ebx,(%esp)
0000aac4	calll	CUtlBuffer::Scanf(char const*, ...)
0000aac9	movss	0xffffece0(%ebp),%xmm0
0000aad1	movl	%esi,0xffffecb4(%ebp)
0000aad7	ucomiss	0x6ea20-0x9b61(%esi),%xmm0
0000aade	jne	0x0000aae2
0000aae0	jnp	0x0000aae7
0000aae2	movss	%xmm0,0x50(%edi)
0000aae7	testb	$0x01,0x15(%ebx)
0000aaeb	jne	0x0000ab26
0000aaed	movl	%ebx,(%esp)
0000aaf0	movl	$0x00000001,0x04(%esp)
0000aaf8	calll	CUtlBuffer::CheckGet(int)
0000aafd	cmpb	$0x01,%al
0000aaff	jne	0x0000ab1a
0000ab01	movl	(%ebx),%eax
0000ab03	movl	0x0c(%ebx),%ecx
0000ab06	movl	%ecx,%edx
0000ab08	subl	0x20(%ebx),%edx
0000ab0b	movb	(%eax,%edx),%al
0000ab0e	movb	%al,0xffffece5(%ebp)
0000ab14	incl	%ecx
0000ab15	movl	%ecx,0x0c(%ebx)
0000ab18	jmp	0x0000ab55
0000ab1a	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece5(%ebp)
0000ab21	jmp	0x0000ad1c
0000ab26	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece5(%ebp)
0000ab2d	leal	0xffffece5(%ebp),%eax
0000ab33	movl	%eax,0x08(%esp)
0000ab37	movl	0xffffecb4(%ebp),%eax
0000ab3d	leal	0x6f5e0-0x9b61(%eax),%eax
0000ab43	movl	%eax,0x04(%esp)
0000ab47	movl	%ebx,(%esp)
0000ab4a	calll	CUtlBuffer::Scanf(char const*, ...)
0000ab4f	movb	0xffffece5(%ebp),%al
0000ab55	cmpb	$0x01,%al
0000ab57	jne	0x0000ad1c
0000ab5d	movl	0x14(%ebp),%eax
0000ab60	movl	(%eax),%eax
0000ab62	movl	0x04(%eax),%eax
0000ab65	movl	%eax,0xffffecac(%ebp)
0000ab6b	testb	$0x01,0x15(%ebx)
0000ab6f	jne	0x0000abd2
0000ab71	movl	%ebx,(%esp)
0000ab74	movl	$0x00000002,0x04(%esp)
0000ab7c	calll	CUtlBuffer::CheckGet(int)
0000ab81	cmpb	$0x01,%al
0000ab83	jne	0x0000abc5
0000ab85	movl	0x0c(%ebx),%eax
0000ab88	movl	%eax,%ecx
0000ab8a	subl	0x20(%ebx),%ecx
0000ab8d	addl	(%ebx),%ecx
0000ab8f	testb	$0x01,0x34(%ebx)
0000ab93	jne	0x0000ab9a
0000ab95	movzwl	(%ecx),%ecx
0000ab98	jmp	0x0000abb1
0000ab9a	leal	0xffffece6(%ebp),%esi
0000aba0	testl	%ecx,%ecx
0000aba2	cmovnel	%ecx,%esi
0000aba5	movzbl	0x01(%esi),%edx
0000aba9	movzbl	(%esi),%ecx
0000abac	shll	$0x08,%ecx
0000abaf	orl	%edx,%ecx
0000abb1	movw	%cx,0xffffece6(%ebp)
0000abb8	addl	$0x02,%eax
0000abbb	movl	0xffffecb0(%ebp),%edx
0000abc1	movl	%eax,(%edx)
0000abc3	jmp	0x0000ac04
0000abc5	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece6(%ebp)
0000abce	xorl	%ecx,%ecx
0000abd0	jmp	0x0000ac04
0000abd2	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece6(%ebp)
0000abdb	leal	0xffffece6(%ebp),%eax
0000abe1	movl	%eax,0x08(%esp)
0000abe5	movl	0xffffecb4(%ebp),%eax
0000abeb	leal	0x6f5dd-0x9b61(%eax),%eax
0000abf1	movl	%eax,0x04(%esp)
0000abf5	movl	%ebx,(%esp)
0000abf8	calll	CUtlBuffer::Scanf(char const*, ...)
0000abfd	movzwl	0xffffece6(%ebp),%ecx
0000ac04	leal	0xffffeef0(%ebp),%eax
0000ac0a	movl	%eax,0x08(%esp)
0000ac0e	movswl	%cx,%eax
0000ac11	movl	%eax,0x04(%esp)
0000ac15	movl	0x14(%ebp),%esi
0000ac18	movl	%esi,(%esp)
0000ac1b	movl	$0x00000100,0x0c(%esp)
0000ac23	call	*0xffffecac(%ebp)
0000ac29	movl	(%esi),%eax
0000ac2b	movl	0x04(%eax),%esi
0000ac2e	testb	$0x01,0x15(%ebx)
0000ac32	jne	0x0000ac95
0000ac34	movl	%ebx,(%esp)
0000ac37	movl	$0x00000002,0x04(%esp)
0000ac3f	calll	CUtlBuffer::CheckGet(int)
0000ac44	cmpb	$0x01,%al
0000ac46	jne	0x0000ac88
0000ac48	movl	0x0c(%ebx),%eax
0000ac4b	movl	%eax,%ecx
0000ac4d	subl	0x20(%ebx),%ecx
0000ac50	addl	(%ebx),%ecx
0000ac52	testb	$0x01,0x34(%ebx)
0000ac56	jne	0x0000ac5d
0000ac58	movzwl	(%ecx),%ecx
0000ac5b	jmp	0x0000ac74
0000ac5d	leal	0xffffece8(%ebp),%ebx
0000ac63	testl	%ecx,%ecx
0000ac65	cmovnel	%ecx,%ebx
0000ac68	movzbl	0x01(%ebx),%edx
0000ac6c	movzbl	(%ebx),%ecx
0000ac6f	shll	$0x08,%ecx
0000ac72	orl	%edx,%ecx
0000ac74	movw	%cx,0xffffece8(%ebp)
0000ac7b	addl	$0x02,%eax
0000ac7e	movl	0xffffecb0(%ebp),%edx
0000ac84	movl	%eax,(%edx)
0000ac86	jmp	0x0000acc7
0000ac88	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece8(%ebp)
0000ac91	xorl	%ecx,%ecx
0000ac93	jmp	0x0000acc7
0000ac95	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffece8(%ebp)
0000ac9e	leal	0xffffece8(%ebp),%eax
0000aca4	movl	%eax,0x08(%esp)
0000aca8	movl	0xffffecb4(%ebp),%eax
0000acae	leal	0x6f5dd-0x9b61(%eax),%eax
0000acb4	movl	%eax,0x04(%esp)
0000acb8	movl	%ebx,(%esp)
0000acbb	calll	CUtlBuffer::Scanf(char const*, ...)
0000acc0	movzwl	0xffffece8(%ebp),%ecx
0000acc7	leal	0xffffedf0(%ebp),%ebx
0000accd	movl	%ebx,0x08(%esp)
0000acd1	movswl	%cx,%eax
0000acd4	movl	%eax,0x04(%esp)
0000acd8	movl	0x14(%ebp),%eax
0000acdb	movl	%eax,(%esp)
0000acde	movl	$0x00000100,0x0c(%esp)
0000ace6	call	*%esi
0000ace8	orb	$0x04,0x00000178(%edi)
0000acef	leal	0xffffeef0(%ebp),%eax
0000acf5	movl	%eax,0x04(%esp)
0000acf9	leal	0x00000094(%edi),%eax
0000acff	movl	%eax,(%esp)
0000ad02	calll	CUtlString::operator=(char const*)
0000ad07	movl	%ebx,0x04(%esp)
0000ad0b	leal	0x000000a4(%edi),%eax
0000ad11	movl	%eax,(%esp)
0000ad14	calll	CUtlString::operator=(char const*)
0000ad19	movl	0x0c(%ebp),%ebx
0000ad1c	movl	0x14(%ebp),%eax
0000ad1f	movl	%eax,0x08(%esp)
0000ad23	movl	%ebx,0x04(%esp)
0000ad27	movl	%edi,(%esp)
0000ad2a	calll	CChoreoEvent::RestoreFlexAnimationsFromBuffer(CUtlBuffer&, IChoreoStringPool*)
0000ad2f	movb	0x04(%edi),%al
0000ad32	cmpb	$0x0c,%al
0000ad34	jne	0x0000adba
0000ad3a	testb	$0x01,0x15(%ebx)
0000ad3e	jne	0x0000ad78
0000ad40	movl	%ebx,(%esp)
0000ad43	movl	$0x00000001,0x04(%esp)
0000ad4b	calll	CUtlBuffer::CheckGet(int)
0000ad50	cmpb	$0x01,%al
0000ad52	jne	0x0000ad6d
0000ad54	movl	(%ebx),%eax
0000ad56	movl	0x0c(%ebx),%ecx
0000ad59	movl	%ecx,%edx
0000ad5b	subl	0x20(%ebx),%edx
0000ad5e	movb	(%eax,%edx),%al
0000ad61	movb	%al,0xffffecea(%ebp)
0000ad67	incl	%ecx
0000ad68	movl	%ecx,0x0c(%ebx)
0000ad6b	jmp	0x0000ada7
0000ad6d	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecea(%ebp)
0000ad74	xorb	%al,%al
0000ad76	jmp	0x0000ada7
0000ad78	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecea(%ebp)
0000ad7f	leal	0xffffecea(%ebp),%eax
0000ad85	movl	%eax,0x08(%esp)
0000ad89	movl	0xffffecb4(%ebp),%eax
0000ad8f	leal	0x6f5e0-0x9b61(%eax),%eax
0000ad95	movl	%eax,0x04(%esp)
0000ad99	movl	%ebx,(%esp)
0000ad9c	calll	CUtlBuffer::Scanf(char const*, ...)
0000ada1	movb	0xffffecea(%ebp),%al
0000ada7	movsbl	%al,%eax
0000adaa	testl	%eax,%eax
0000adac	movl	$0xffffffff,%ecx
0000adb1	cmovnsl	%eax,%ecx
0000adb4	movl	%ecx,0x54(%edi)
0000adb7	movb	0x04(%edi),%al
0000adba	cmpb	$0x05,%al
0000adbc	jne	0x0000af9c
0000adc2	testb	$0x01,0x15(%ebx)
0000adc6	jne	0x0000ae00
0000adc8	movl	%ebx,(%esp)
0000adcb	movl	$0x00000001,0x04(%esp)
0000add3	calll	CUtlBuffer::CheckGet(int)
0000add8	cmpb	$0x01,%al
0000adda	jne	0x0000adf5
0000addc	movl	(%ebx),%eax
0000adde	movl	0x0c(%ebx),%ecx
0000ade1	movl	%ecx,%edx
0000ade3	subl	0x20(%ebx),%edx
0000ade6	movb	(%eax,%edx),%al
0000ade9	movb	%al,0xffffeceb(%ebp)
0000adef	incl	%ecx
0000adf0	movl	%ecx,0x0c(%ebx)
0000adf3	jmp	0x0000ae2f
0000adf5	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeceb(%ebp)
0000adfc	xorb	%al,%al
0000adfe	jmp	0x0000ae2f
0000ae00	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffeceb(%ebp)
0000ae07	leal	0xffffeceb(%ebp),%eax
0000ae0d	movl	%eax,0x08(%esp)
0000ae11	movl	0xffffecb4(%ebp),%eax
0000ae17	leal	0x6f5e0-0x9b61(%eax),%eax
0000ae1d	movl	%eax,0x04(%esp)
0000ae21	movl	%ebx,(%esp)
0000ae24	calll	CUtlBuffer::Scanf(char const*, ...)
0000ae29	movb	0xffffeceb(%ebp),%al
0000ae2f	movl	%ebx,%esi
0000ae31	movb	%al,0x05(%edi)
0000ae34	movl	0x14(%ebp),%eax
0000ae37	movl	(%eax),%eax
0000ae39	movl	0x04(%eax),%ebx
0000ae3c	testb	$0x01,0x15(%esi)
0000ae40	jne	0x0000aea3
0000ae42	movl	%esi,(%esp)
0000ae45	movl	$0x00000002,0x04(%esp)
0000ae4d	calll	CUtlBuffer::CheckGet(int)
0000ae52	cmpb	$0x01,%al
0000ae54	jne	0x0000ae96
0000ae56	movl	0x0c(%esi),%eax
0000ae59	movl	%eax,%ecx
0000ae5b	subl	0x20(%esi),%ecx
0000ae5e	addl	(%esi),%ecx
0000ae60	testb	$0x01,0x34(%esi)
0000ae64	jne	0x0000ae6b
0000ae66	movzwl	(%ecx),%ecx
0000ae69	jmp	0x0000ae82
0000ae6b	leal	0xffffecec(%ebp),%edi
0000ae71	testl	%ecx,%ecx
0000ae73	cmovnel	%ecx,%edi
0000ae76	movzbl	0x01(%edi),%edx
0000ae7a	movzbl	(%edi),%ecx
0000ae7d	shll	$0x08,%ecx
0000ae80	orl	%edx,%ecx
0000ae82	movw	%cx,0xffffecec(%ebp)
0000ae89	addl	$0x02,%eax
0000ae8c	movl	0xffffecb0(%ebp),%edx
0000ae92	movl	%eax,(%edx)
0000ae94	jmp	0x0000aed5
0000ae96	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecec(%ebp)
0000ae9f	xorl	%ecx,%ecx
0000aea1	jmp	0x0000aed5
0000aea3	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecec(%ebp)
0000aeac	leal	0xffffecec(%ebp),%eax
0000aeb2	movl	%eax,0x08(%esp)
0000aeb6	movl	0xffffecb4(%ebp),%eax
0000aebc	leal	0x6f5dd-0x9b61(%eax),%eax
0000aec2	movl	%eax,0x04(%esp)
0000aec6	movl	%esi,(%esp)
0000aec9	calll	CUtlBuffer::Scanf(char const*, ...)
0000aece	movzwl	0xffffecec(%ebp),%ecx
0000aed5	leal	0xffffecf0(%ebp),%edi
0000aedb	movl	%edi,0x08(%esp)
0000aedf	movswl	%cx,%eax
0000aee2	movl	%eax,0x04(%esp)
0000aee6	movl	0x14(%ebp),%eax
0000aee9	movl	%eax,(%esp)
0000aeec	movl	$0x00000100,0x0c(%esp)
0000aef4	call	*%ebx
0000aef6	movl	%edi,0x04(%esp)
0000aefa	movl	0x08(%ebp),%ebx
0000aefd	leal	0x0000013c(%ebx),%eax
0000af03	movl	%eax,(%esp)
0000af06	calll	CUtlString::operator=(char const*)
0000af0b	testb	$0x01,0x15(%esi)
0000af0f	jne	0x0000af49
0000af11	movl	%esi,(%esp)
0000af14	movl	$0x00000001,0x04(%esp)
0000af1c	calll	CUtlBuffer::CheckGet(int)
0000af21	cmpb	$0x01,%al
0000af23	jne	0x0000af3e
0000af25	movl	(%esi),%eax
0000af27	movl	0x0c(%esi),%ecx
0000af2a	movl	%ecx,%edx
0000af2c	subl	0x20(%esi),%edx
0000af2f	movb	(%eax,%edx),%al
0000af32	movb	%al,0xffffecef(%ebp)
0000af38	incl	%ecx
0000af39	movl	%ecx,0x0c(%esi)
0000af3c	jmp	0x0000af78
0000af3e	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecef(%ebp)
0000af45	xorb	%al,%al
0000af47	jmp	0x0000af78
0000af49	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xffffecef(%ebp)
0000af50	leal	0xffffecef(%ebp),%eax
0000af56	movl	%eax,0x08(%esp)
0000af5a	movl	0xffffecb4(%ebp),%eax
0000af60	leal	0x6f5e0-0x9b61(%eax),%eax
0000af66	movl	%eax,0x04(%esp)
0000af6a	movl	%esi,(%esp)
0000af6d	calll	CUtlBuffer::Scanf(char const*, ...)
0000af72	movb	0xffffecef(%ebp),%al
0000af78	movsbl	%al,%eax
0000af7b	testb	$0x01,%al
0000af7d	je	0x0000af86
0000af7f	orb	$0x80,0x00000178(%ebx)
0000af86	testb	$0x02,%al
0000af88	je	0x0000af91
0000af8a	orb	$0x02,0x00000179(%ebx)
0000af91	testb	$0x04,%al
0000af93	je	0x0000af9c
0000af95	orb	$0x04,0x00000179(%ebx)
0000af9c	movl	0xffffec9c(%ebp),%eax
0000afa2	movl	(%eax),%eax
0000afa4	cmpl	0xf0(%ebp),%eax
0000afa7	jne	0x0000afb9
0000afa9	movl	$0x00000001,%eax
0000afae	addl	$0x0000136c,%esp
0000afb4	popl	%esi
0000afb5	popl	%edi
0000afb6	popl	%ebx
0000afb7	popl	%ebp
0000afb8	ret
0000afb9	calll	___stack_chk_fail
0000afbe	nop
CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*):
0000afc0	pushl	%ebp
0000afc1	movl	%esp,%ebp
0000afc3	pushl	%ebx
0000afc4	pushl	%edi
0000afc5	pushl	%esi
0000afc6	subl	$0x3c,%esp
0000afc9	calll	0x0000afce
0000afce	popl	%esi
0000afcf	movl	%esi,0xdc(%ebp)
0000afd2	movl	0x0c(%ebp),%edi
0000afd5	testb	$0x01,0x15(%edi)
0000afd9	jne	0x0000b00e
0000afdb	movl	%edi,(%esp)
0000afde	movl	$0x00000001,0x04(%esp)
0000afe6	calll	CUtlBuffer::CheckGet(int)
0000afeb	cmpb	$0x01,%al
0000afed	jne	0x0000b005
0000afef	movl	(%edi),%eax
0000aff1	movl	0x0c(%edi),%ecx
0000aff4	movl	%ecx,%edx
0000aff6	subl	0x20(%edi),%edx
0000aff9	movb	(%eax,%edx),%al
0000affc	movb	%al,0xeb(%ebp)
0000afff	incl	%ecx
0000b000	movl	%ecx,0x0c(%edi)
0000b003	jmp	0x0000b02e
0000b005	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xeb(%ebp)
0000b009	jmp	0x0000b1ce
0000b00e	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xeb(%ebp)
0000b012	leal	0xeb(%ebp),%eax
0000b015	movl	%eax,0x08(%esp)
0000b019	leal	0x6f5d7-0xafce(%esi),%eax
0000b01f	movl	%eax,0x04(%esp)
0000b023	movl	%edi,(%esp)
0000b026	calll	CUtlBuffer::Scanf(char const*, ...)
0000b02b	movb	0xeb(%ebp),%al
0000b02e	testb	%al,%al
0000b030	je	0x0000b1ce
0000b036	movzbl	%al,%eax
0000b039	movl	%eax,0xd8(%ebp)
0000b03c	movss	0x6ea2c-0xafce(%esi),%xmm0
0000b044	movss	%xmm0,0xd4(%ebp)
0000b049	xorl	%eax,%eax
0000b04b	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
0000b050	movl	%eax,CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp)
0000b053	testb	$0x01,0x15(%edi)
0000b057	jne	0x0000b0a9
0000b059	movl	%edi,(%esp)
0000b05c	movl	$0x00000004,0x04(%esp)
0000b064	calll	CUtlBuffer::CheckGet(int)
0000b069	cmpb	$0x01,%al
0000b06b	jne	0x0000b09c
0000b06d	movl	(%edi),%ecx
0000b06f	movl	0x0c(%edi),%eax
0000b072	movl	%eax,%edx
0000b074	subl	0x20(%edi),%edx
0000b077	movss	(%ecx,%edx),%xmm0
0000b07c	movss	%xmm0,0xec(%ebp)
0000b081	testb	$0x01,0x34(%edi)
0000b085	je	0x0000b094
0000b087	movd	%xmm0,%ecx
0000b08b	bswap	%ecx
0000b08d	movl	%ecx,0xec(%ebp)
0000b090	movd	%ecx,%xmm0
0000b094	addl	$0x04,%eax
0000b097	movl	%eax,0x0c(%edi)
0000b09a	jmp	0x0000b0ce
0000b09c	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xec(%ebp)
0000b0a3	pxor	%xmm0,%xmm0
0000b0a7	jmp	0x0000b0ce
0000b0a9	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xec(%ebp)
0000b0b0	leal	0xec(%ebp),%eax
0000b0b3	movl	%eax,0x08(%esp)
0000b0b7	leal	0x6f5da-0xafce(%esi),%eax
0000b0bd	movl	%eax,0x04(%esp)
0000b0c1	movl	%edi,(%esp)
0000b0c4	calll	CUtlBuffer::Scanf(char const*, ...)
0000b0c9	movss	0xec(%ebp),%xmm0
0000b0ce	movss	%xmm0,0xe4(%ebp)
0000b0d3	testb	$0x01,0x15(%edi)
0000b0d7	jne	0x0000b110
0000b0d9	movl	%edi,(%esp)
0000b0dc	movl	$0x00000001,0x04(%esp)
0000b0e4	calll	CUtlBuffer::CheckGet(int)
0000b0e9	cmpb	$0x01,%al
0000b0eb	jne	0x0000b106
0000b0ed	movl	(%edi),%ecx
0000b0ef	movl	0x0c(%edi),%eax
0000b0f2	movl	%eax,%edx
0000b0f4	subl	0x20(%edi),%edx
0000b0f7	movb	(%ecx,%edx),%cl
0000b0fa	movb	%cl,0xea(%ebp)
0000b0fd	movb	%cl,0xf3(%ebp)
0000b100	incl	%eax
0000b101	movl	%eax,0x0c(%edi)
0000b104	jmp	0x0000b133
0000b106	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf3(%ebp)
0000b10a	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xea(%ebp)
0000b10e	jmp	0x0000b133
0000b110	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xf3(%ebp)
0000b114	leal	0xf3(%ebp),%eax
0000b117	movl	%eax,0x08(%esp)
0000b11b	leal	0x6f5d7-0xafce(%esi),%eax
0000b121	movl	%eax,0x04(%esp)
0000b125	movl	%edi,(%esp)
0000b128	calll	CUtlBuffer::Scanf(char const*, ...)
0000b12d	movb	0xf3(%ebp),%al
0000b130	movb	%al,0xea(%ebp)
0000b133	movl	0x08(%ebp),%edx
0000b136	movl	0x04(%edx),%eax
0000b139	movl	0x0c(%edx),%edi
0000b13c	leal	0x01(%edi),%esi
0000b13f	cmpl	%eax,%esi
0000b141	movl	%edi,%ecx
0000b143	jle	0x0000b15c
0000b145	movl	%esi,%ecx
0000b147	subl	%eax,%ecx
0000b149	movl	%ecx,0x04(%esp)
0000b14d	movl	%edx,(%esp)
0000b150	movl	%edx,%ebx
0000b152	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
0000b157	movl	%ebx,%edx
0000b159	movl	0x0c(%edx),%ecx
0000b15c	incl	%ecx
0000b15d	movl	%ecx,0x0c(%edx)
0000b160	movl	(%edx),%eax
0000b162	movl	%eax,0x10(%edx)
0000b165	subl	%edi,%ecx
0000b167	decl	%ecx
0000b168	testl	%ecx,%ecx
0000b16a	jle	0x0000b18f
0000b16c	imull	$0x0a,%ecx,%ecx
0000b16f	movl	%ecx,0x08(%esp)
0000b173	imull	$0x0a,%edi,%ecx
0000b176	addl	%eax,%ecx
0000b178	movl	%ecx,0x04(%esp)
0000b17c	imull	$0x0a,%esi,%ecx
0000b17f	addl	%eax,%ecx
0000b181	movl	%ecx,(%esp)
0000b184	movl	%edx,%esi
0000b186	calll	_memmove
0000b18b	movl	%esi,%eax
0000b18d	movl	(%eax),%eax
0000b18f	movss	0xe4(%ebp),%xmm0
0000b194	imull	$0x0a,%edi,%ecx
0000b197	addl	%eax,%ecx
0000b199	movl	0xdc(%ebp),%esi
0000b19c	je	0x0000b1be
0000b19e	movd	%xmm0,%eax
0000b1a2	movzbl	0xea(%ebp),%edx
0000b1a6	cvtsi2ss	%edx,%xmm0
0000b1aa	divss	0xd4(%ebp),%xmm0
0000b1af	movd	%xmm0,%edx
0000b1b3	movl	%edx,(%ecx)
0000b1b5	movl	%eax,0x04(%ecx)
0000b1b8	xorl	%eax,%eax
0000b1ba	movw	%ax,0x08(%ecx)
0000b1be	movl	CEventRelativeTag::CEventRelativeTag(CEventRelativeTag const&)(%ebp),%eax
0000b1c1	incl	%eax
0000b1c2	cmpl	0xd8(%ebp),%eax
0000b1c5	movl	0x0c(%ebp),%edi
0000b1c8	jl	0x0000b050
0000b1ce	movl	$0x00000001,%eax
0000b1d3	addl	$0x3c,%esp
0000b1d6	popl	%esi
0000b1d7	popl	%edi
0000b1d8	popl	%ebx
0000b1d9	popl	%ebp
0000b1da	ret
0000b1db	nopl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
CChoreoEvent::SetActive(bool):
0000b1e0	movb	0x08(%esp),%al
0000b1e4	shlb	$0x05,%al
0000b1e7	movl	0x04(%esp),%ecx
0000b1eb	movb	0x00000179(%ecx),%dl
0000b1f1	andb	$0xdf,%dl
0000b1f4	orb	%al,%dl
0000b1f6	movb	%dl,0x00000179(%ecx)
0000b1fc	ret
0000b1fd	nopl	(%eax)
CChoreoEvent::RestoreFlexAnimationsFromBuffer(CUtlBuffer&, IChoreoStringPool*):
0000b200	pushl	%ebp
0000b201	movl	%esp,%ebp
0000b203	pushl	%ebx
0000b204	pushl	%edi
0000b205	pushl	%esi
0000b206	subl	$0x0000016c,%esp
0000b20c	calll	0x0000b211
0000b211	popl	%ebx
0000b212	movl	%ebx,0xfffffeb4(%ebp)
0000b218	movl	0x80d3a-0xb211(%ebx),%eax
0000b21e	movl	%eax,0xfffffe9c(%ebp)
0000b224	movl	(%eax),%eax
0000b226	movl	%eax,0xf0(%ebp)
0000b229	movl	0x0c(%ebp),%edi
0000b22c	testb	$0x01,0x15(%edi)
0000b230	jne	0x0000b26b
0000b232	movl	%edi,(%esp)
0000b235	movl	$0x00000001,0x04(%esp)
0000b23d	calll	CUtlBuffer::CheckGet(int)
0000b242	cmpb	$0x01,%al
0000b244	jne	0x0000b25f
0000b246	movl	(%edi),%eax
0000b248	movl	0x0c(%edi),%ecx
0000b24b	movl	%ecx,%edx
0000b24d	subl	0x20(%edi),%edx
0000b250	movb	(%eax,%edx),%al
0000b253	movb	%al,0xfffffecb(%ebp)
0000b259	incl	%ecx
0000b25a	movl	%ecx,0x0c(%edi)
0000b25d	jmp	0x0000b294
0000b25f	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecb(%ebp)
0000b266	jmp	0x0000bbe5
0000b26b	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecb(%ebp)
0000b272	leal	0xfffffecb(%ebp),%eax
0000b278	movl	%eax,0x08(%esp)
0000b27c	leal	0x6f5d7-0xb211(%ebx),%eax
0000b282	movl	%eax,0x04(%esp)
0000b286	movl	%edi,(%esp)
0000b289	calll	CUtlBuffer::Scanf(char const*, ...)
0000b28e	movb	0xfffffecb(%ebp),%al
0000b294	testb	%al,%al
0000b296	je	0x0000bbe5
0000b29c	movzbl	%al,%eax
0000b29f	movl	%eax,0xfffffea0(%ebp)
0000b2a5	xorl	%eax,%eax
0000b2a7	nopw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
0000b2b0	movl	%eax,0xfffffea4(%ebp)
0000b2b6	movl	0x10(%ebp),%eax
0000b2b9	movl	(%eax),%eax
0000b2bb	movl	0x04(%eax),%eax
0000b2be	movl	%eax,0xfffffec4(%ebp)
0000b2c4	testb	$0x01,0x15(%edi)
0000b2c8	jne	0x0000b32a
0000b2ca	movl	%edi,(%esp)
0000b2cd	movl	$0x00000002,0x04(%esp)
0000b2d5	calll	CUtlBuffer::CheckGet(int)
0000b2da	cmpb	$0x01,%al
0000b2dc	jne	0x0000b31d
0000b2de	movl	0x0c(%edi),%eax
0000b2e1	movl	%eax,%ecx
0000b2e3	subl	0x20(%edi),%ecx
0000b2e6	addl	(%edi),%ecx
0000b2e8	testb	$0x01,0x34(%edi)
0000b2ec	jne	0x0000b2f3
0000b2ee	movzwl	(%ecx),%ecx
0000b2f1	jmp	0x0000b30e
0000b2f3	movl	%edi,%esi
0000b2f5	leal	0xfffffecc(%ebp),%edi
0000b2fb	testl	%ecx,%ecx
0000b2fd	cmovnel	%ecx,%edi
0000b300	movzbl	0x01(%edi),%edx
0000b304	movzbl	(%edi),%ecx
0000b307	movl	%esi,%edi
0000b309	shll	$0x08,%ecx
0000b30c	orl	%edx,%ecx
0000b30e	movw	%cx,0xfffffecc(%ebp)
0000b315	addl	$0x02,%eax
0000b318	movl	%eax,0x0c(%edi)
0000b31b	jmp	0x0000b356
0000b31d	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecc(%ebp)
0000b326	xorl	%ecx,%ecx
0000b328	jmp	0x0000b356
0000b32a	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecc(%ebp)
0000b333	leal	0xfffffecc(%ebp),%eax
0000b339	movl	%eax,0x08(%esp)
0000b33d	leal	0x6f5dd-0xb211(%ebx),%eax
0000b343	movl	%eax,0x04(%esp)
0000b347	movl	%edi,(%esp)
0000b34a	calll	CUtlBuffer::Scanf(char const*, ...)
0000b34f	movzwl	0xfffffecc(%ebp),%ecx
0000b356	leal	0xfffffef0(%ebp),%esi
0000b35c	movl	%esi,0x08(%esp)
0000b360	movswl	%cx,%eax
0000b363	movl	%eax,0x04(%esp)
0000b367	movl	0x10(%ebp),%eax
0000b36a	movl	%eax,(%esp)
0000b36d	movl	$0x00000100,0x0c(%esp)
0000b375	call	*0xfffffec4(%ebp)
0000b37b	movl	%esi,0x04(%esp)
0000b37f	movl	0x08(%ebp),%eax
0000b382	movl	%eax,(%esp)
0000b385	calll	CChoreoEvent::AddTrack(char const*)
0000b38a	movl	%eax,%esi
0000b38c	testb	$0x01,0x15(%edi)
0000b390	jne	0x0000b3ca
0000b392	movl	%edi,(%esp)
0000b395	movl	$0x00000001,0x04(%esp)
0000b39d	calll	CUtlBuffer::CheckGet(int)
0000b3a2	cmpb	$0x01,%al
0000b3a4	jne	0x0000b3bf
0000b3a6	movl	(%edi),%eax
0000b3a8	movl	0x0c(%edi),%ecx
0000b3ab	movl	%ecx,%edx
0000b3ad	subl	0x20(%edi),%edx
0000b3b0	movb	(%eax,%edx),%al
0000b3b3	movb	%al,0xfffffecf(%ebp)
0000b3b9	incl	%ecx
0000b3ba	movl	%ecx,0x0c(%edi)
0000b3bd	jmp	0x0000b3f3
0000b3bf	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecf(%ebp)
0000b3c6	xorb	%al,%al
0000b3c8	jmp	0x0000b3f3
0000b3ca	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffecf(%ebp)
0000b3d1	leal	0xfffffecf(%ebp),%eax
0000b3d7	movl	%eax,0x08(%esp)
0000b3db	leal	0x6f5d7-0xb211(%ebx),%eax
0000b3e1	movl	%eax,0x04(%esp)
0000b3e5	movl	%edi,(%esp)
0000b3e8	calll	CUtlBuffer::Scanf(char const*, ...)
0000b3ed	movb	0xfffffecf(%ebp),%al
0000b3f3	andb	$0x03,%al
0000b3f5	movb	0x5c(%esi),%cl
0000b3f8	andb	$0xfc,%cl
0000b3fb	orb	%al,%cl
0000b3fd	movb	%cl,0x5c(%esi)
0000b400	testb	$0x01,0x15(%edi)
0000b404	jne	0x0000b45f
0000b406	movl	%edi,(%esp)
0000b409	movl	$0x00000004,0x04(%esp)
0000b411	calll	CUtlBuffer::CheckGet(int)
0000b416	cmpb	$0x01,%al
0000b418	jne	0x0000b44f
0000b41a	movl	(%edi),%ecx
0000b41c	movl	0x0c(%edi),%eax
0000b41f	movl	%eax,%edx
0000b421	subl	0x20(%edi),%edx
0000b424	movss	(%ecx,%edx),%xmm0
0000b429	movss	%xmm0,0xfffffed0(%ebp)
0000b431	testb	$0x01,0x34(%edi)
0000b435	je	0x0000b447
0000b437	movd	%xmm0,%ecx
0000b43b	bswap	%ecx
0000b43d	movl	%ecx,0xfffffed0(%ebp)
0000b443	movd	%ecx,%xmm0
0000b447	addl	$0x04,%eax
0000b44a	movl	%eax,0x0c(%edi)
0000b44d	jmp	0x0000b48d
0000b44f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffed0(%ebp)
0000b459	pxor	%xmm0,%xmm0
0000b45d	jmp	0x0000b48d
0000b45f	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffed0(%ebp)
0000b469	leal	0xfffffed0(%ebp),%eax
0000b46f	movl	%eax,0x08(%esp)
0000b473	leal	0x6f5da-0xb211(%ebx),%eax
0000b479	movl	%eax,0x04(%esp)
0000b47d	movl	%edi,(%esp)
0000b480	calll	CUtlBuffer::Scanf(char const*, ...)
0000b485	movss	0xfffffed0(%ebp),%xmm0
0000b48d	movss	%xmm0,0x08(%esi)
0000b492	testb	$0x01,0x15(%edi)
0000b496	jne	0x0000b4f1
0000b498	movl	%edi,(%esp)
0000b49b	movl	$0x00000004,0x04(%esp)
0000b4a3	calll	CUtlBuffer::CheckGet(int)
0000b4a8	cmpb	$0x01,%al
0000b4aa	jne	0x0000b4e1
0000b4ac	movl	(%edi),%ecx
0000b4ae	movl	0x0c(%edi),%eax
0000b4b1	movl	%eax,%edx
0000b4b3	subl	0x20(%edi),%edx
0000b4b6	movss	(%ecx,%edx),%xmm0
0000b4bb	movss	%xmm0,0xfffffed4(%ebp)
0000b4c3	testb	$0x01,0x34(%edi)
0000b4c7	je	0x0000b4d9
0000b4c9	movd	%xmm0,%ecx
0000b4cd	bswap	%ecx
0000b4cf	movl	%ecx,0xfffffed4(%ebp)
0000b4d5	movd	%ecx,%xmm0
0000b4d9	addl	$0x04,%eax
0000b4dc	movl	%eax,0x0c(%edi)
0000b4df	jmp	0x0000b51f
0000b4e1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffed4(%ebp)
0000b4eb	pxor	%xmm0,%xmm0
0000b4ef	jmp	0x0000b51f
0000b4f1	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffed4(%ebp)
0000b4fb	leal	0xfffffed4(%ebp),%eax
0000b501	movl	%eax,0x08(%esp)
0000b505	leal	0x6f5da-0xb211(%ebx),%eax
0000b50b	movl	%eax,0x04(%esp)
0000b50f	movl	%edi,(%esp)
0000b512	calll	CUtlBuffer::Scanf(char const*, ...)
0000b517	movss	0xfffffed4(%ebp),%xmm0
0000b51f	movss	%xmm0,0x0c(%esi)
0000b524	testb	$0x01,0x15(%edi)
0000b528	jne	0x0000b599
0000b52a	movl	%edi,(%esp)
0000b52d	movl	$0x00000002,0x04(%esp)
0000b535	calll	CUtlBuffer::CheckGet(int)
0000b53a	cmpb	$0x01,%al
0000b53c	jne	0x0000b585
0000b53e	movl	0x0c(%edi),%eax
0000b541	movl	%eax,%ecx
0000b543	subl	0x20(%edi),%ecx
0000b546	addl	(%edi),%ecx
0000b548	testb	$0x01,0x34(%edi)
0000b54c	jne	0x0000b559
0000b54e	movl	%esi,0xfffffec4(%ebp)
0000b554	movzwl	(%ecx),%ecx
0000b557	jmp	0x0000b576
0000b559	movl	%esi,0xfffffec4(%ebp)
0000b55f	leal	0xfffffeda(%ebp),%esi
0000b565	testl	%ecx,%ecx
0000b567	cmovnel	%ecx,%esi
0000b56a	movzbl	0x01(%esi),%edx
0000b56e	movzbl	(%esi),%ecx
0000b571	shll	$0x08,%ecx
0000b574	orl	%edx,%ecx
0000b576	movw	%cx,0xfffffeda(%ebp)
0000b57d	addl	$0x02,%eax
0000b580	movl	%eax,0x0c(%edi)
0000b583	jmp	0x0000b5cb
0000b585	movl	%esi,0xfffffec4(%ebp)
0000b58b	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeda(%ebp)
0000b594	jmp	0x0000b87c
0000b599	movl	%esi,0xfffffec4(%ebp)
0000b59f	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeda(%ebp)
0000b5a8	leal	0xfffffeda(%ebp),%eax
0000b5ae	movl	%eax,0x08(%esp)
0000b5b2	leal	0x6f5dd-0xb211(%ebx),%eax
0000b5b8	movl	%eax,0x04(%esp)
0000b5bc	movl	%edi,(%esp)
0000b5bf	calll	CUtlBuffer::Scanf(char const*, ...)
0000b5c4	movzwl	0xfffffeda(%ebp),%ecx
0000b5cb	testw	%cx,%cx
0000b5ce	jle	0x0000b87c
0000b5d4	movswl	%cx,%ecx
0000b5d7	movl	0xfffffec4(%ebp),%eax
0000b5dd	leal	0x10(%eax),%eax
0000b5e0	movl	%eax,0xfffffebc(%ebp)
0000b5e6	nopw	%cs:CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float)(%eax,%eax)
0000b5f0	movl	%ecx,0xfffffeb0(%ebp)
0000b5f6	testb	$0x01,0x15(%edi)
0000b5fa	jne	0x0000b65b
0000b5fc	movl	%edi,(%esp)
0000b5ff	movl	$0x00000004,0x04(%esp)
0000b607	calll	CUtlBuffer::CheckGet(int)
0000b60c	cmpb	$0x01,%al
0000b60e	jne	0x0000b64b
0000b610	movl	(%edi),%ecx
0000b612	movl	0x0c(%edi),%eax
0000b615	movl	%eax,%edx
0000b617	subl	0x20(%edi),%edx
0000b61a	movss	(%ecx,%edx),%xmm0
0000b61f	movss	%xmm0,0xfffffedc(%ebp)
0000b627	testb	$0x01,0x34(%edi)
0000b62b	je	0x0000b63d
0000b62d	movd	%xmm0,%ecx
0000b631	bswap	%ecx
0000b633	movl	%ecx,0xfffffedc(%ebp)
0000b639	movd	%ecx,%xmm0
0000b63d	movl	0xfffffec4(%ebp),%esi
0000b643	addl	$0x04,%eax
0000b646	movl	%eax,0x0c(%edi)
0000b649	jmp	0x0000b68f
0000b64b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffedc(%ebp)
0000b655	pxor	%xmm0,%xmm0
0000b659	jmp	0x0000b689
0000b65b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffedc(%ebp)
0000b665	leal	0xfffffedc(%ebp),%eax
0000b66b	movl	%eax,0x08(%esp)
0000b66f	leal	0x6f5da-0xb211(%ebx),%eax
0000b675	movl	%eax,0x04(%esp)
0000b679	movl	%edi,(%esp)
0000b67c	calll	CUtlBuffer::Scanf(char const*, ...)
0000b681	movss	0xfffffedc(%ebp),%xmm0
0000b689	movl	0xfffffec4(%ebp),%esi
0000b68f	movss	%xmm0,0xfffffeb8(%ebp)
0000b697	testb	$0x01,0x15(%edi)
0000b69b	jne	0x0000b6e0
0000b69d	movl	%edi,(%esp)
0000b6a0	movl	$0x00000001,0x04(%esp)
0000b6a8	calll	CUtlBuffer::CheckGet(int)
0000b6ad	cmpb	$0x01,%al
0000b6af	jne	0x0000b6d0
0000b6b1	movl	(%edi),%ecx
0000b6b3	movl	0x0c(%edi),%eax
0000b6b6	movl	%eax,%edx
0000b6b8	subl	0x20(%edi),%edx
0000b6bb	movb	(%ecx,%edx),%cl
0000b6be	movb	%cl,0xfffffec0(%ebp)
0000b6c4	movb	%cl,0xfffffee3(%ebp)
0000b6ca	incl	%eax
0000b6cb	movl	%eax,0x0c(%edi)
0000b6ce	jmp	0x0000b70f
0000b6d0	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee3(%ebp)
0000b6d7	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffec0(%ebp)
0000b6de	jmp	0x0000b70f
0000b6e0	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee3(%ebp)
0000b6e7	leal	0xfffffee3(%ebp),%eax
0000b6ed	movl	%eax,0x08(%esp)
0000b6f1	leal	0x6f5d7-0xb211(%ebx),%eax
0000b6f7	movl	%eax,0x04(%esp)
0000b6fb	movl	%edi,(%esp)
0000b6fe	calll	CUtlBuffer::Scanf(char const*, ...)
0000b703	movb	0xfffffee3(%ebp),%al
0000b709	movb	%al,0xfffffec0(%ebp)
0000b70f	movl	0x14(%esi),%ecx
0000b712	movl	0x1c(%esi),%edi
0000b715	leal	0x01(%edi),%ebx
0000b718	cmpl	%ecx,%ebx
0000b71a	movl	%edi,%eax
0000b71c	jle	0x0000b737
0000b71e	movl	%ebx,%eax
0000b720	subl	%ecx,%eax
0000b722	movl	%eax,0x04(%esp)
0000b726	movl	0xfffffebc(%ebp),%eax
0000b72c	movl	%eax,(%esp)
0000b72f	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
0000b734	movl	0x1c(%esi),%eax
0000b737	incl	%eax
0000b738	movl	%eax,0x1c(%esi)
0000b73b	movl	%esi,%ecx
0000b73d	movl	%ecx,0xfffffec4(%ebp)
0000b743	movl	0x10(%ecx),%esi
0000b746	movl	%esi,0x20(%ecx)
0000b749	subl	%edi,%eax
0000b74b	decl	%eax
0000b74c	testl	%eax,%eax
0000b74e	jle	0x0000b775
0000b750	imull	$0x0a,%eax,%eax
0000b753	movl	%eax,0x08(%esp)
0000b757	imull	$0x0a,%edi,%eax
0000b75a	addl	%esi,%eax
0000b75c	movl	%eax,0x04(%esp)
0000b760	imull	$0x0a,%ebx,%eax
0000b763	addl	%esi,%eax
0000b765	movl	%eax,(%esp)
0000b768	calll	_memmove
0000b76d	movl	0xfffffebc(%ebp),%eax
0000b773	movl	(%eax),%esi
0000b775	movss	0xfffffeb8(%ebp),%xmm0
0000b77d	imull	$0x0a,%edi,%ecx
0000b780	movl	%ecx,0xfffffeac(%ebp)
0000b786	movl	%esi,%eax
0000b788	addl	%ecx,%eax
0000b78a	movl	0xfffffeb4(%ebp),%ebx
0000b790	je	0x0000b7c0
0000b792	movd	%xmm0,%ecx
0000b796	movzbl	0xfffffec0(%ebp),%edx
0000b79d	cvtsi2ss	%edx,%xmm0
0000b7a1	divss	0x6ea30-0xb211(%ebx),%xmm0
0000b7a9	movd	%xmm0,%edx
0000b7ad	movl	%edx,(%eax)
0000b7af	movl	%ecx,0x04(%eax)
0000b7b2	xorl	%ecx,%ecx
0000b7b4	movw	%cx,0x08(%eax)
0000b7b8	movl	0xfffffebc(%ebp),%eax
0000b7be	movl	(%eax),%esi
0000b7c0	movl	0x0c(%ebp),%edi
0000b7c3	testb	$0x01,0x15(%edi)
0000b7c7	jne	0x0000b82c
0000b7c9	movl	%edi,(%esp)
0000b7cc	movl	$0x00000002,0x04(%esp)
0000b7d4	calll	CUtlBuffer::CheckGet(int)
0000b7d9	cmpb	$0x01,%al
0000b7db	jne	0x0000b81f
0000b7dd	movl	0x0c(%edi),%ecx
0000b7e0	movl	%ecx,%eax
0000b7e2	subl	0x20(%edi),%eax
0000b7e5	addl	(%edi),%eax
0000b7e7	testb	$0x01,0x34(%edi)
0000b7eb	jne	0x0000b7f2
0000b7ed	movzwl	(%eax),%eax
0000b7f0	jmp	0x0000b810
0000b7f2	movl	%ebx,%edi
0000b7f4	leal	0xfffffee4(%ebp),%ebx
0000b7fa	testl	%eax,%eax
0000b7fc	cmovnel	%eax,%ebx
0000b7ff	movzbl	0x01(%ebx),%edx
0000b803	movzbl	(%ebx),%eax
0000b806	movl	%edi,%ebx
0000b808	movl	0x0c(%ebp),%edi
0000b80b	shll	$0x08,%eax
0000b80e	orl	%edx,%eax
0000b810	movw	%ax,0xfffffee4(%ebp)
0000b817	addl	$0x02,%ecx
0000b81a	movl	%ecx,0x0c(%edi)
0000b81d	jmp	0x0000b858
0000b81f	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee4(%ebp)
0000b828	xorl	%eax,%eax
0000b82a	jmp	0x0000b858
0000b82c	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee4(%ebp)
0000b835	leal	0xfffffee4(%ebp),%eax
0000b83b	movl	%eax,0x08(%esp)
0000b83f	leal	0x6f5d7-0xb211(%ebx),%eax
0000b845	movl	%eax,0x04(%esp)
0000b849	movl	%edi,(%esp)
0000b84c	calll	CUtlBuffer::Scanf(char const*, ...)
0000b851	movzwl	0xfffffee4(%ebp),%eax
0000b858	addl	%eax,%eax
0000b85a	movl	0xfffffeac(%ebp),%edx
0000b860	movzwl	0x08(%esi,%edx),%ecx
0000b865	andl	$0x01,%ecx
0000b868	orl	%eax,%ecx
0000b86a	movw	%cx,0x08(%esi,%edx)
0000b86f	movl	0xfffffeb0(%ebp),%ecx
0000b875	decl	%ecx
0000b876	jne	0x0000b5f0
0000b87c	movl	0xfffffec4(%ebp),%eax
0000b882	testb	$0x02,0x5c(%eax)
0000b886	je	0x0000bbd2
0000b88c	testb	$0x01,0x15(%edi)
0000b890	jne	0x0000b8ef
0000b892	movl	%edi,(%esp)
0000b895	movl	$0x00000002,0x04(%esp)
0000b89d	calll	CUtlBuffer::CheckGet(int)
0000b8a2	cmpb	$0x01,%al
0000b8a4	jne	0x0000b8e1
0000b8a6	movl	0x0c(%edi),%eax
0000b8a9	movl	%eax,%ecx
0000b8ab	subl	0x20(%edi),%ecx
0000b8ae	addl	(%edi),%ecx
0000b8b0	testb	$0x01,0x34(%edi)
0000b8b4	jne	0x0000b8bb
0000b8b6	movzwl	(%ecx),%ecx
0000b8b9	jmp	0x0000b8d2
0000b8bb	leal	0xfffffee6(%ebp),%esi
0000b8c1	testl	%ecx,%ecx
0000b8c3	cmovnel	%ecx,%esi
0000b8c6	movzbl	0x01(%esi),%edx
0000b8ca	movzbl	(%esi),%ecx
0000b8cd	shll	$0x08,%ecx
0000b8d0	orl	%edx,%ecx
0000b8d2	movw	%cx,0xfffffee6(%ebp)
0000b8d9	addl	$0x02,%eax
0000b8dc	movl	%eax,0x0c(%edi)
0000b8df	jmp	0x0000b91b
0000b8e1	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee6(%ebp)
0000b8ea	jmp	0x0000bbd2
0000b8ef	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee6(%ebp)
0000b8f8	leal	0xfffffee6(%ebp),%eax
0000b8fe	movl	%eax,0x08(%esp)
0000b902	leal	0x6f5d7-0xb211(%ebx),%eax
0000b908	movl	%eax,0x04(%esp)
0000b90c	movl	%edi,(%esp)
0000b90f	calll	CUtlBuffer::Scanf(char const*, ...)
0000b914	movzwl	0xfffffee6(%ebp),%ecx
0000b91b	testw	%cx,%cx
0000b91e	je	0x0000bbd2
0000b924	movzwl	%cx,%eax
0000b927	movl	%eax,0xfffffea8(%ebp)
0000b92d	movl	0xfffffec4(%ebp),%eax
0000b933	leal	0x24(%eax),%eax
0000b936	movl	%eax,0xfffffebc(%ebp)
0000b93c	xorl	%eax,%eax
0000b93e	nop
0000b940	movl	%eax,0xfffffeb0(%ebp)
0000b946	testb	$0x01,0x15(%edi)
0000b94a	jne	0x0000b9ab
0000b94c	movl	%edi,(%esp)
0000b94f	movl	$0x00000004,0x04(%esp)
0000b957	calll	CUtlBuffer::CheckGet(int)
0000b95c	cmpb	$0x01,%al
0000b95e	jne	0x0000b99b
0000b960	movl	(%edi),%ecx
0000b962	movl	0x0c(%edi),%eax
0000b965	movl	%eax,%edx
0000b967	subl	0x20(%edi),%edx
0000b96a	movss	(%ecx,%edx),%xmm0
0000b96f	movss	%xmm0,0xfffffee8(%ebp)
0000b977	testb	$0x01,0x34(%edi)
0000b97b	je	0x0000b98d
0000b97d	movd	%xmm0,%ecx
0000b981	bswap	%ecx
0000b983	movl	%ecx,0xfffffee8(%ebp)
0000b989	movd	%ecx,%xmm0
0000b98d	movl	0xfffffec4(%ebp),%esi
0000b993	addl	$0x04,%eax
0000b996	movl	%eax,0x0c(%edi)
0000b999	jmp	0x0000b9df
0000b99b	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee8(%ebp)
0000b9a5	pxor	%xmm0,%xmm0
0000b9a9	jmp	0x0000b9d9
0000b9ab	movl	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffee8(%ebp)
0000b9b5	leal	0xfffffee8(%ebp),%eax
0000b9bb	movl	%eax,0x08(%esp)
0000b9bf	leal	0x6f5da-0xb211(%ebx),%eax
0000b9c5	movl	%eax,0x04(%esp)
0000b9c9	movl	%edi,(%esp)
0000b9cc	calll	CUtlBuffer::Scanf(char const*, ...)
0000b9d1	movss	0xfffffee8(%ebp),%xmm0
0000b9d9	movl	0xfffffec4(%ebp),%esi
0000b9df	movss	%xmm0,0xfffffeb8(%ebp)
0000b9e7	testb	$0x01,0x15(%edi)
0000b9eb	jne	0x0000ba30
0000b9ed	movl	%edi,(%esp)
0000b9f0	movl	$0x00000001,0x04(%esp)
0000b9f8	calll	CUtlBuffer::CheckGet(int)
0000b9fd	cmpb	$0x01,%al
0000b9ff	jne	0x0000ba20
0000ba01	movl	(%edi),%ecx
0000ba03	movl	0x0c(%edi),%eax
0000ba06	movl	%eax,%edx
0000ba08	subl	0x20(%edi),%edx
0000ba0b	movb	(%ecx,%edx),%cl
0000ba0e	movb	%cl,0xfffffec0(%ebp)
0000ba14	movb	%cl,0xfffffeed(%ebp)
0000ba1a	incl	%eax
0000ba1b	movl	%eax,0x0c(%edi)
0000ba1e	jmp	0x0000ba5f
0000ba20	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeed(%ebp)
0000ba27	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffec0(%ebp)
0000ba2e	jmp	0x0000ba5f
0000ba30	movb	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeed(%ebp)
0000ba37	leal	0xfffffeed(%ebp),%eax
0000ba3d	movl	%eax,0x08(%esp)
0000ba41	leal	0x6f5d7-0xb211(%ebx),%eax
0000ba47	movl	%eax,0x04(%esp)
0000ba4b	movl	%edi,(%esp)
0000ba4e	calll	CUtlBuffer::Scanf(char const*, ...)
0000ba53	movb	0xfffffeed(%ebp),%al
0000ba59	movb	%al,0xfffffec0(%ebp)
0000ba5f	movl	0x28(%esi),%ecx
0000ba62	movl	0x30(%esi),%edi
0000ba65	leal	0x01(%edi),%ebx
0000ba68	cmpl	%ecx,%ebx
0000ba6a	movl	%edi,%eax
0000ba6c	jle	0x0000ba87
0000ba6e	movl	%ebx,%eax
0000ba70	subl	%ecx,%eax
0000ba72	movl	%eax,0x04(%esp)
0000ba76	movl	0xfffffebc(%ebp),%eax
0000ba7c	movl	%eax,(%esp)
0000ba7f	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
0000ba84	movl	0x30(%esi),%eax
0000ba87	incl	%eax
0000ba88	movl	%eax,0x30(%esi)
0000ba8b	movl	%esi,%ecx
0000ba8d	movl	%ecx,0xfffffec4(%ebp)
0000ba93	movl	0x24(%ecx),%esi
0000ba96	movl	%esi,0x34(%ecx)
0000ba99	subl	%edi,%eax
0000ba9b	decl	%eax
0000ba9c	testl	%eax,%eax
0000ba9e	jle	0x0000bac5
0000baa0	imull	$0x0a,%eax,%eax
0000baa3	movl	%eax,0x08(%esp)
0000baa7	imull	$0x0a,%edi,%eax
0000baaa	addl	%esi,%eax
0000baac	movl	%eax,0x04(%esp)
0000bab0	imull	$0x0a,%ebx,%eax
0000bab3	addl	%esi,%eax
0000bab5	movl	%eax,(%esp)
0000bab8	calll	_memmove
0000babd	movl	0xfffffebc(%ebp),%eax
0000bac3	movl	(%eax),%esi
0000bac5	movss	0xfffffeb8(%ebp),%xmm0
0000bacd	imull	$0x0a,%edi,%ecx
0000bad0	movl	%ecx,0xfffffeac(%ebp)
0000bad6	movl	%esi,%eax
0000bad8	addl	%ecx,%eax
0000bada	movl	0xfffffeb4(%ebp),%ebx
0000bae0	je	0x0000bb10
0000bae2	movd	%xmm0,%ecx
0000bae6	movzbl	0xfffffec0(%ebp),%edx
0000baed	cvtsi2ss	%edx,%xmm0
0000baf1	divss	0x6ea30-0xb211(%ebx),%xmm0
0000baf9	movd	%xmm0,%edx
0000bafd	movl	%edx,(%eax)
0000baff	movl	%ecx,0x04(%eax)
0000bb02	xorl	%ecx,%ecx
0000bb04	movw	%cx,0x08(%eax)
0000bb08	movl	0xfffffebc(%ebp),%eax
0000bb0e	movl	(%eax),%esi
0000bb10	movl	0x0c(%ebp),%edi
0000bb13	testb	$0x01,0x15(%edi)
0000bb17	jne	0x0000bb7c
0000bb19	movl	%edi,(%esp)
0000bb1c	movl	$0x00000002,0x04(%esp)
0000bb24	calll	CUtlBuffer::CheckGet(int)
0000bb29	cmpb	$0x01,%al
0000bb2b	jne	0x0000bb6f
0000bb2d	movl	0x0c(%edi),%ecx
0000bb30	movl	%ecx,%eax
0000bb32	subl	0x20(%edi),%eax
0000bb35	addl	(%edi),%eax
0000bb37	testb	$0x01,0x34(%edi)
0000bb3b	jne	0x0000bb42
0000bb3d	movzwl	(%eax),%eax
0000bb40	jmp	0x0000bb60
0000bb42	movl	%ebx,%edi
0000bb44	leal	0xfffffeee(%ebp),%ebx
0000bb4a	testl	%eax,%eax
0000bb4c	cmovnel	%eax,%ebx
0000bb4f	movzbl	0x01(%ebx),%edx
0000bb53	movzbl	(%ebx),%eax
0000bb56	movl	%edi,%ebx
0000bb58	movl	0x0c(%ebp),%edi
0000bb5b	shll	$0x08,%eax
0000bb5e	orl	%edx,%eax
0000bb60	movw	%ax,0xfffffeee(%ebp)
0000bb67	addl	$0x02,%ecx
0000bb6a	movl	%ecx,0x0c(%edi)
0000bb6d	jmp	0x0000bba8
0000bb6f	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeee(%ebp)
0000bb78	xorl	%eax,%eax
0000bb7a	jmp	0x0000bba8
0000bb7c	movw	CEventRelativeTag::CEventRelativeTag(CChoreoEvent*, char const*, float),0xfffffeee(%ebp)
0000bb85	leal	0xfffffeee(%ebp),%eax
0000bb8b	movl	%eax,0x08(%esp)
0000bb8f	leal	0x6f5d7-0xb211(%ebx),%eax
0000bb95	movl	%eax,0x04(%esp)
0000bb99	movl	%edi,(%esp)
0000bb9c	calll	CUtlBuffer::Scanf(char const*, ...)
0000bba1	movzwl	0xfffffeee(%ebp),%eax
0000bba8	addl	%eax,%eax
0000bbaa	movl	0xfffffeac(%ebp),%edx
0000bbb0	movzwl	0x08(%esi,%edx),%ecx
0000bbb5	andl	$0x01,%ecx
0000bbb8	orl	%eax,%ecx
0000bbba	movw	%cx,0x08(%esi,%edx)
0000bbbf	movl	0xfffffeb0(%ebp),%eax
0000bbc5	incl	%eax
0000bbc6	cmpl	0xfffffea8(%ebp),%eax
0000bbcc	jl	0x0000b940
0000bbd2	movl	0xfffffea4(%ebp),%eax
0000bbd8	incl	%eax
0000bbd9	cmpl	0xfffffea0(%ebp),%eax
0000bbdf	jl	0x0000b2b0
0000bbe5	movl	0xfffffe9c(%ebp),%eax
0000bbeb	movl	(%eax),%eax
0000bbed	cmpl	0xf0(%ebp),%eax
0000bbf0	jne	0x0000bc02
0000bbf2	movl	$0x00000001,%eax
0000bbf7	addl	$0x0000016c,%esp
0000bbfd	popl	%esi
0000bbfe	popl	%edi
0000bbff	popl	%ebx
0000bc00	popl	%ebp
0000bc01	ret
0000bc02	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(choreoscene.o):
(__TEXT,__text) section
ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	calll	0x0000000d
0000000d	popl	%edi
0000000e	movl	$0x00000218,(%esp)
00000015	calll	operator new(unsigned long)
0000001a	movl	%eax,%esi
0000001c	leal	vtable for CChoreoScene-0xd+0x00000008(%edi),%eax
00000022	movl	%eax,(%esi)
00000024	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%esi)
0000002e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000012c(%esi)
00000038	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%esi)
00000042	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%esi)
0000004c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000140(%esi)
00000056	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%esi)
00000060	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000148(%esi)
0000006a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000144(%esi)
00000074	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000014c(%esi)
0000007d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esi)
00000084	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esi)
0000008b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%esi)
00000092	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esi)
00000099	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x18(%esi)
000000a0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%esi)
000000a7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%esi)
000000ae	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%esi)
000000b5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%esi)
000000bc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%esi)
000000c3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%esi)
000000ca	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x2c(%esi)
000000d1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%esi)
000000d8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%esi)
000000df	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x40(%esi)
000000e6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%esi)
000000ed	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%esi)
000000f4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%esi)
000000fb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%esi)
00000102	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%esi)
00000109	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%esi)
00000110	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x54(%esi)
00000117	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%esi)
0000011e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%esi)
00000125	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x68(%esi)
0000012c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%esi)
00000133	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%esi)
0000013a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%esi)
00000141	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%esi)
00000148	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%esi)
0000014f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%esi)
00000159	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000150(%esi)
00000163	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000015c(%esi)
0000016d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%esi)
00000177	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000164(%esi)
00000181	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%esi)
0000018b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000016c(%esi)
00000195	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000168(%esi)
0000019f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000170(%esi)
000001a9	movl	$0xffffffff,0x00000174(%esi)
000001b3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000178(%esi)
000001bd	movl	$0xffffffff,0x0000017c(%esi)
000001c7	movl	$0xffffffff,0x00000180(%esi)
000001d1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000184(%esi)
000001db	leal	CaselessStringLessThan(char const* const&, char const* const&)-0xd(%edi),%eax
000001e1	movl	%eax,0x00000164(%esi)
000001e7	movl	%esi,%eax
000001e9	addl	$0x00000208,%eax
000001ee	je	0x000001f6
000001f0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
000001f6	movl	0x0c(%ebp),%ecx
000001f9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000214(%esi)
00000203	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a4(%esi)
0000020d	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%esi)
00000214	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000080(%esi)
0000021e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x7c(%esi)
00000225	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%esi)
0000022f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%esi)
00000239	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%esi)
00000243	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%esi)
0000024d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%esi)
00000257	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%esi)
00000261	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000009c(%esi)
0000026b	movl	%ecx,0x000000a0(%esi)
00000271	movl	$0x0000003c,0x00000128(%esi)
0000027b	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000188(%esi)
00000282	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000020c(%esi)
00000289	testl	%eax,%eax
0000028b	je	0x00000293
0000028d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00000293	movl	0x14(%ebp),%edi
00000296	movl	0x10(%ebp),%eax
00000299	movl	0x08(%ebp),%ecx
0000029c	movl	$0xffffffff,0x00000210(%esi)
000002a6	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000020c(%esi)
000002ad	movl	%eax,0x08(%esp)
000002b1	movl	%ecx,0x04(%esp)
000002b5	movl	%esi,(%esp)
000002b8	calll	CChoreoScene::ParseFromBuffer(char const*, ISceneTokenProcessor*)
000002bd	movl	%edi,0x0000009c(%esi)
000002c3	movl	%esi,%eax
000002c5	addl	$0x10,%esp
000002c8	popl	%esi
000002c9	popl	%edi
000002ca	popl	%ebp
000002cb	ret
000002cc	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::CChoreoScene(IChoreoEventCallback*):
000002d0	calll	0x000002d5
000002d5	popl	%ecx
000002d6	leal	vtable for CChoreoScene-0x2d5+0x00000008(%ecx),%edx
000002dc	movl	0x04(%esp),%eax
000002e0	movl	%edx,(%eax)
000002e2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%eax)
000002ec	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000012c(%eax)
000002f6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%eax)
00000300	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%eax)
0000030a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000140(%eax)
00000314	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%eax)
0000031e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000148(%eax)
00000328	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000144(%eax)
00000332	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000014c(%eax)
0000033b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%eax)
00000342	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%eax)
00000349	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%eax)
00000350	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%eax)
00000357	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x18(%eax)
0000035e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%eax)
00000365	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%eax)
0000036c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%eax)
00000373	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%eax)
0000037a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%eax)
00000381	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%eax)
00000388	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x2c(%eax)
0000038f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%eax)
00000396	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%eax)
0000039d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x40(%eax)
000003a4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%eax)
000003ab	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%eax)
000003b2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%eax)
000003b9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%eax)
000003c0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%eax)
000003c7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%eax)
000003ce	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x54(%eax)
000003d5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%eax)
000003dc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%eax)
000003e3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x68(%eax)
000003ea	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%eax)
000003f1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%eax)
000003f8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%eax)
000003ff	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%eax)
00000406	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%eax)
0000040d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%eax)
00000417	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000150(%eax)
00000421	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000015c(%eax)
0000042b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%eax)
00000435	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000164(%eax)
0000043f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%eax)
00000449	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000016c(%eax)
00000453	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000168(%eax)
0000045d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000170(%eax)
00000467	movl	$0xffffffff,0x00000174(%eax)
00000471	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000178(%eax)
0000047b	movl	$0xffffffff,0x0000017c(%eax)
00000485	movl	$0xffffffff,0x00000180(%eax)
0000048f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000184(%eax)
00000499	leal	CaselessStringLessThan(char const* const&, char const* const&)-0x2d5(%ecx),%ecx
0000049f	movl	%ecx,0x00000164(%eax)
000004a5	movl	%eax,%ecx
000004a7	addl	$0x00000208,%ecx
000004ad	je	0x000004b5
000004af	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%ecx)
000004b5	movl	0x08(%esp),%ecx
000004b9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000214(%eax)
000004c3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a4(%eax)
000004cd	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%eax)
000004d4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000080(%eax)
000004de	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x7c(%eax)
000004e5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%eax)
000004ef	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%eax)
000004f9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%eax)
00000503	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%eax)
0000050d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%eax)
00000517	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%eax)
00000521	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000009c(%eax)
0000052b	movl	%ecx,0x000000a0(%eax)
00000531	movb	0x0000020c(%eax),%cl
00000537	movl	$0x0000003c,0x00000128(%eax)
00000541	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000188(%eax)
00000548	movb	%cl,%dl
0000054a	andb	$0xf2,%dl
0000054d	movb	%dl,0x0000020c(%eax)
00000553	movl	%eax,%edx
00000555	addl	$0x00000208,%edx
0000055b	je	0x00000563
0000055d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%edx)
00000563	movl	$0xffffffff,0x00000210(%eax)
0000056d	andb	$0xf0,%cl
00000570	movb	%cl,0x0000020c(%eax)
00000576	ret
00000577	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseFromBuffer(char const*, ISceneTokenProcessor*):
00000580	pushl	%ebp
00000581	movl	%esp,%ebp
00000583	pushl	%ebx
00000584	pushl	%edi
00000585	pushl	%esi
00000586	subl	$0x2c,%esp
00000589	calll	0x0000058e
0000058e	popl	%edi
0000058f	movl	0x0c(%ebp),%eax
00000592	movl	%eax,0x04(%esp)
00000596	movl	0x08(%ebp),%esi
00000599	leal	0x00000188(%esi),%eax
0000059f	movl	%eax,0xe0(%ebp)
000005a2	movl	%eax,(%esp)
000005a5	movl	$0x00000080,0x08(%esp)
000005ad	calll	V_strncpy(char*, char const*, int)
000005b2	movl	0x10(%ebp),%eax
000005b5	movl	%eax,0x000000a4(%esi)
000005bb	leal	0x0000012c(%esi),%ecx
000005c1	movl	%ecx,0xe8(%ebp)
000005c4	leal	0x000000a8(%esi),%ecx
000005ca	movl	%ecx,0xe4(%ebp)
000005cd	jmp	0x000005e2
000005cf	nop
000005d0	movl	%esi,0x04(%esp)
000005d4	movl	%ebx,(%esp)
000005d7	calll	CChoreoScene::ParseScaleSettings(ISceneTokenProcessor*, CChoreoScene*)
000005dc	movl	0x000000a4(%esi),%eax
000005e2	movl	(%eax),%ecx
000005e4	movl	%eax,(%esp)
000005e7	movl	$0x00000001,0x04(%esp)
000005ef	call	*0x04(%ecx)
000005f2	cmpb	$0x01,%al
000005f4	jne	0x000008e0
000005fa	movl	0x000000a4(%esi),%ecx
00000600	movl	(%ecx),%eax
00000602	movl	%ecx,(%esp)
00000605	call	(%eax)
00000607	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
0000060a	je	0x000008e0
00000610	movl	0x000000a4(%esi),%ecx
00000616	movl	(%ecx),%eax
00000618	movl	%ecx,(%esp)
0000061b	call	(%eax)
0000061d	leal	0x68e14-0x58e(%edi),%ecx
00000623	movl	%ecx,0x04(%esp)
00000627	movl	%eax,(%esp)
0000062a	calll	V_stricmp(char const*, char const*)
0000062f	testl	%eax,%eax
00000631	jne	0x00000653
00000633	movl	%esi,(%esp)
00000636	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
0000063e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00000646	calll	CChoreoScene::ParseEvent(CChoreoActor*, CChoreoChannel*)
0000064b	movl	0x000000a4(%esi),%eax
00000651	jmp	0x000005e2
00000653	movl	0x000000a4(%esi),%ecx
00000659	movl	(%ecx),%eax
0000065b	movl	%ecx,(%esp)
0000065e	call	(%eax)
00000660	leal	0x68e32-0x58e(%edi),%ecx
00000666	movl	%ecx,0x04(%esp)
0000066a	movl	%eax,(%esp)
0000066d	calll	V_stricmp(char const*, char const*)
00000672	testl	%eax,%eax
00000674	jne	0x00000689
00000676	movl	%esi,(%esp)
00000679	calll	CChoreoScene::ParseActor()
0000067e	movl	0x000000a4(%esi),%eax
00000684	jmp	0x000005e2
00000689	movl	0x000000a4(%esi),%ecx
0000068f	movl	(%ecx),%eax
00000691	movl	%ecx,(%esp)
00000694	call	(%eax)
00000696	leal	0x68e38-0x58e(%edi),%ecx
0000069c	movl	%ecx,0x04(%esp)
000006a0	movl	%eax,(%esp)
000006a3	calll	V_stricmp(char const*, char const*)
000006a8	testl	%eax,%eax
000006aa	jne	0x000006f8
000006ac	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%esi)
000006b3	movl	0x000000a4(%esi),%ecx
000006b9	movl	(%ecx),%eax
000006bb	movl	%ecx,(%esp)
000006be	movl	$0x00000001,0x04(%esp)
000006c6	call	*0x04(%eax)
000006c9	movl	0x000000a4(%esi),%ecx
000006cf	movl	(%ecx),%eax
000006d1	movl	%ecx,(%esp)
000006d4	call	(%eax)
000006d6	movl	%eax,0x04(%esp)
000006da	movl	0xe4(%ebp),%eax
000006dd	movl	%eax,(%esp)
000006e0	movl	$0x00000080,0x08(%esp)
000006e8	calll	V_strncpy(char*, char const*, int)
000006ed	movl	0x000000a4(%esi),%eax
000006f3	jmp	0x000005e2
000006f8	movl	0x000000a4(%esi),%ecx
000006fe	movl	(%ecx),%eax
00000700	movl	%ecx,(%esp)
00000703	call	(%eax)
00000705	leal	0x68e40-0x58e(%edi),%ecx
0000070b	movl	%ecx,0x04(%esp)
0000070f	movl	%eax,(%esp)
00000712	calll	V_stricmp(char const*, char const*)
00000717	movl	0x000000a4(%esi),%ecx
0000071d	testl	%eax,%eax
0000071f	jne	0x00000776
00000721	movl	(%ecx),%eax
00000723	movl	%ecx,(%esp)
00000726	movl	$0x00000001,0x04(%esp)
0000072e	call	*0x04(%eax)
00000731	movl	0x000000a4(%esi),%ecx
00000737	movl	(%ecx),%eax
00000739	movl	%ecx,(%esp)
0000073c	call	(%eax)
0000073e	movl	%eax,(%esp)
00000741	calll	_atoi
00000746	movl	%eax,0x00000128(%esi)
0000074c	movl	$0x0000000a,%ecx
00000751	cmpl	$0x0a,%eax
00000754	jl	0x00000765
00000756	cmpl	$0x000000f0,%eax
0000075b	movl	$0x000000f0,%ecx
00000760	cmovgl	%ecx,%eax
00000763	movl	%eax,%ecx
00000765	movl	%ecx,0x00000128(%esi)
0000076b	movl	0x000000a4(%esi),%eax
00000771	jmp	0x000005e2
00000776	movl	(%ecx),%eax
00000778	movl	%ecx,(%esp)
0000077b	call	(%eax)
0000077d	leal	0x68e44-0x58e(%edi),%ecx
00000783	movl	%ecx,0x04(%esp)
00000787	movl	%eax,(%esp)
0000078a	calll	V_stricmp(char const*, char const*)
0000078f	movl	0x000000a4(%esi),%ecx
00000795	testl	%eax,%eax
00000797	jne	0x000007ec
00000799	movl	(%ecx),%eax
0000079b	movl	%ecx,(%esp)
0000079e	movl	$0x00000001,0x04(%esp)
000007a6	call	*0x04(%eax)
000007a9	movl	0x000000a4(%esi),%ecx
000007af	movl	(%ecx),%eax
000007b1	movl	%ecx,(%esp)
000007b4	call	(%eax)
000007b6	leal	0x68e11-0x58e(%edi),%ecx
000007bc	movl	%ecx,0x04(%esp)
000007c0	movl	%eax,(%esp)
000007c3	calll	V_stricmp(char const*, char const*)
000007c8	movb	0x0000020c(%esi),%cl
000007ce	andb	$0xf7,%cl
000007d1	testl	%eax,%eax
000007d3	sete	%al
000007d6	shlb	$0x03,%al
000007d9	orb	%cl,%al
000007db	movb	%al,0x0000020c(%esi)
000007e1	movl	0x000000a4(%esi),%eax
000007e7	jmp	0x000005e2
000007ec	movl	(%ecx),%eax
000007ee	movl	%ecx,(%esp)
000007f1	call	(%eax)
000007f3	leal	0x68e49-0x58e(%edi),%ecx
000007f9	movl	%ecx,0x04(%esp)
000007fd	movl	%eax,(%esp)
00000800	calll	V_stricmp(char const*, char const*)
00000805	movl	0x000000a4(%esi),%ecx
0000080b	testl	%eax,%eax
0000080d	jne	0x00000850
0000080f	movl	(%ecx),%eax
00000811	movl	%ecx,(%esp)
00000814	movl	$0x00000001,0x04(%esp)
0000081c	call	*0x04(%eax)
0000081f	movl	0x000000a4(%esi),%ecx
00000825	movl	(%ecx),%eax
00000827	movl	%ecx,(%esp)
0000082a	call	(%eax)
0000082c	leal	0x68e11-0x58e(%edi),%ecx
00000832	movl	%ecx,0x04(%esp)
00000836	movl	%eax,(%esp)
00000839	calll	V_stricmp(char const*, char const*)
0000083e	movb	0x0000020c(%esi),%cl
00000844	andb	$0xfd,%cl
00000847	testl	%eax,%eax
00000849	sete	%al
0000084c	addb	%al,%al
0000084e	jmp	0x000007d9
00000850	movl	(%ecx),%eax
00000852	movl	%ecx,(%esp)
00000855	call	(%eax)
00000857	leal	0x68e58-0x58e(%edi),%ecx
0000085d	movl	%ecx,0x04(%esp)
00000861	movl	%eax,(%esp)
00000864	calll	V_stricmp(char const*, char const*)
00000869	movl	0x000000a4(%esi),%ecx
0000086f	testl	%eax,%eax
00000871	jne	0x00000891
00000873	movl	%esi,0x08(%esp)
00000877	movl	%ecx,0x04(%esp)
0000087b	movl	0xe8(%ebp),%eax
0000087e	movl	%eax,(%esp)
00000881	calll	CCurveData::Parse(ISceneTokenProcessor*, ICurveDataAccessor*)
00000886	movl	0x000000a4(%esi),%eax
0000088c	jmp	0x000005e2
00000891	movl	(%ecx),%eax
00000893	movl	%ecx,(%esp)
00000896	call	(%eax)
00000898	leal	0x68e63-0x58e(%edi),%ecx
0000089e	movl	%ecx,0x04(%esp)
000008a2	movl	%eax,(%esp)
000008a5	calll	V_stricmp(char const*, char const*)
000008aa	movl	0x000000a4(%esi),%ebx
000008b0	testl	%eax,%eax
000008b2	je	0x000005d0
000008b8	movl	(%ebx),%eax
000008ba	movl	0x0c(%eax),%ecx
000008bd	movl	%ecx,0xe8(%ebp)
000008c0	movl	%ebx,(%esp)
000008c3	call	(%eax)
000008c5	movl	%eax,0x0c(%esp)
000008c9	movl	0xe0(%ebp),%eax
000008cc	movl	%eax,0x08(%esp)
000008d0	leal	0x68e71-0x58e(%edi),%eax
000008d6	movl	%eax,0x04(%esp)
000008da	movl	%ebx,(%esp)
000008dd	call	*0xe8(%ebp)
000008e0	movl	%esi,(%esp)
000008e3	calll	CChoreoScene::ReconcileTags()
000008e8	movl	%esi,(%esp)
000008eb	calll	CChoreoScene::ReconcileGestureTimes()
000008f0	movl	%esi,(%esp)
000008f3	calll	CChoreoScene::ReconcileCloseCaption()
000008f8	movl	%esi,(%esp)
000008fb	calll	CChoreoScene::InternalDetermineEventTypes()
00000900	testb	$0x01,CChoreoScene::s_bEditingDisabled-0x58e(%edi)
00000907	je	0x0000098f
0000090d	movss	0x00000214(%esi),%xmm0
00000915	pxor	%xmm1,%xmm1
00000919	ucomiss	%xmm0,%xmm1
0000091c	jne	0x00000987
0000091e	jp	0x00000987
00000920	movl	0x10(%esi),%eax
00000923	movl	%eax,0xe4(%ebp)
00000926	testl	%eax,%eax
00000928	pxor	%xmm0,%xmm0
0000092c	jle	0x00000987
0000092e	pxor	%xmm1,%xmm1
00000932	xorl	%ebx,%ebx
00000934	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00000940	movss	%xmm1,0xe8(%ebp)
00000945	movl	0x04(%esi),%eax
00000948	movl	(%eax,%ebx,4),%edi
0000094b	movl	%edi,(%esp)
0000094e	calll	CChoreoEvent::HasEndTime()
00000953	testb	%al,%al
00000955	je	0x00000969
00000957	movl	%edi,(%esp)
0000095a	calll	CChoreoEvent::GetEndTime()
0000095f	fstps	0xec(%ebp)
00000962	movss	0xec(%ebp),%xmm0
00000967	jmp	0x00000979
00000969	movl	%edi,(%esp)
0000096c	calll	CChoreoEvent::GetStartTime()
00000971	fstps	0xf0(%ebp)
00000974	movss	0xf0(%ebp),%xmm0
00000979	maxss	0xe8(%ebp),%xmm0
0000097e	incl	%ebx
0000097f	cmpl	%ebx,0xe4(%ebp)
00000982	movaps	%xmm0,%xmm1
00000985	jne	0x00000940
00000987	movss	%xmm0,0x00000214(%esi)
0000098f	movl	$0x00000001,%eax
00000994	addl	$0x2c,%esp
00000997	popl	%esi
00000998	popl	%edi
00000999	popl	%ebx
0000099a	popl	%ebp
0000099b	ret
0000099c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::SetPrintFunc(void (*)(char const*, ...)):
000009a0	movl	0x08(%esp),%eax
000009a4	movl	0x04(%esp),%ecx
000009a8	movl	%eax,0x0000009c(%ecx)
000009ae	ret
000009af	nop
IsBufferBinaryVCD(char*, int):
000009b0	cmpl	$0x05,0x08(%esp)
000009b5	jl	0x000009c5
000009b7	movl	0x04(%esp),%ecx
000009bb	movb	$0x01,%al
000009bd	cmpl	$0x64637662,(%ecx)
000009c3	je	0x000009c7
000009c5	xorb	%al,%al
000009c7	movzbl	%al,%eax
000009ca	ret
000009cb	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::choreoprintf(int, char const*, ...):
000009d0	pushl	%ebp
000009d1	movl	%esp,%ebp
000009d3	pushl	%ebx
000009d4	pushl	%edi
000009d5	pushl	%esi
000009d6	subl	$0x0000082c,%esp
000009dc	calll	0x000009e1
000009e1	popl	%edi
000009e2	movl	0x758ea-0x9e1(%edi),%eax
000009e8	movl	%eax,0xfffff7e4(%ebp)
000009ee	movl	(%eax),%eax
000009f0	movl	%eax,0xf0(%ebp)
000009f3	leal	0x14(%ebp),%eax
000009f6	movl	%eax,0xfffff7ec(%ebp)
000009fc	movl	%eax,0x0c(%esp)
00000a00	movl	0x10(%ebp),%eax
00000a03	movl	%eax,0x08(%esp)
00000a07	leal	0xfffff7f0(%ebp),%eax
00000a0d	movl	%eax,(%esp)
00000a10	movl	$0x00000800,0x04(%esp)
00000a18	calll	V_vsnprintf(char*, int, char const*, char*)
00000a1d	movl	0x08(%ebp),%ebx
00000a20	movl	0x0000009c(%ebx),%eax
00000a26	testl	%eax,%eax
00000a28	setne	%cl
00000a2b	movl	0x0c(%ebp),%esi
00000a2e	testl	%esi,%esi
00000a30	jg	0x00000a3a
00000a32	movl	%edi,0xfffff7e8(%ebp)
00000a38	jmp	0x00000a7c
00000a3a	movl	%edi,0xfffff7e8(%ebp)
00000a40	leal	0x68b33-0x9e1(%edi),%edi
00000a46	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00000a50	decl	%esi
00000a51	testb	$0x01,%cl
00000a54	je	0x00000a5d
00000a56	movl	%edi,(%esp)
00000a59	call	*%eax
00000a5b	jmp	0x00000a65
00000a5d	movl	%edi,(%esp)
00000a60	calll	_printf
00000a65	movl	%edi,(%esp)
00000a68	calll	_Msg
00000a6d	movl	0x0000009c(%ebx),%eax
00000a73	testl	%eax,%eax
00000a75	setne	%cl
00000a78	testl	%esi,%esi
00000a7a	jg	0x00000a50
00000a7c	cmpb	$0x01,%cl
00000a7f	leal	0xfffff7f0(%ebp),%edi
00000a85	jne	0x00000a94
00000a87	movl	%edi,(%esp)
00000a8a	call	*%eax
00000a8c	movl	0xfffff7e8(%ebp),%esi
00000a92	jmp	0x00000aac
00000a94	movl	%edi,0x04(%esp)
00000a98	movl	0xfffff7e8(%ebp),%esi
00000a9e	leal	0x68b36-0x9e1(%esi),%eax
00000aa4	movl	%eax,(%esp)
00000aa7	calll	_printf
00000aac	movl	%edi,0x04(%esp)
00000ab0	leal	0x68b36-0x9e1(%esi),%eax
00000ab6	movl	%eax,(%esp)
00000ab9	calll	_Msg
00000abe	movl	0xfffff7e4(%ebp),%eax
00000ac4	movl	(%eax),%eax
00000ac6	cmpl	0xf0(%ebp),%eax
00000ac9	jne	0x00000ad6
00000acb	addl	$0x0000082c,%esp
00000ad1	popl	%esi
00000ad2	popl	%edi
00000ad3	popl	%ebx
00000ad4	popl	%ebp
00000ad5	ret
00000ad6	calll	___stack_chk_fail
00000adb	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::CChoreoScene(IChoreoEventCallback*):
00000ae0	calll	0x00000ae5
00000ae5	popl	%ecx
00000ae6	leal	vtable for CChoreoScene-0xae5+0x00000008(%ecx),%edx
00000aec	movl	0x04(%esp),%eax
00000af0	movl	%edx,(%eax)
00000af2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%eax)
00000afc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000012c(%eax)
00000b06	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%eax)
00000b10	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%eax)
00000b1a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000140(%eax)
00000b24	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%eax)
00000b2e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000148(%eax)
00000b38	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000144(%eax)
00000b42	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000014c(%eax)
00000b4b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%eax)
00000b52	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%eax)
00000b59	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%eax)
00000b60	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%eax)
00000b67	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x18(%eax)
00000b6e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%eax)
00000b75	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%eax)
00000b7c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%eax)
00000b83	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%eax)
00000b8a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%eax)
00000b91	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%eax)
00000b98	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x2c(%eax)
00000b9f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%eax)
00000ba6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%eax)
00000bad	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x40(%eax)
00000bb4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%eax)
00000bbb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%eax)
00000bc2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%eax)
00000bc9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%eax)
00000bd0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%eax)
00000bd7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%eax)
00000bde	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x54(%eax)
00000be5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%eax)
00000bec	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%eax)
00000bf3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x68(%eax)
00000bfa	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%eax)
00000c01	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%eax)
00000c08	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%eax)
00000c0f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%eax)
00000c16	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%eax)
00000c1d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%eax)
00000c27	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000150(%eax)
00000c31	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000015c(%eax)
00000c3b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%eax)
00000c45	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000164(%eax)
00000c4f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%eax)
00000c59	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000016c(%eax)
00000c63	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000168(%eax)
00000c6d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000170(%eax)
00000c77	movl	$0xffffffff,0x00000174(%eax)
00000c81	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000178(%eax)
00000c8b	movl	$0xffffffff,0x0000017c(%eax)
00000c95	movl	$0xffffffff,0x00000180(%eax)
00000c9f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000184(%eax)
00000ca9	leal	CaselessStringLessThan(char const* const&, char const* const&)-0xae5(%ecx),%ecx
00000caf	movl	%ecx,0x00000164(%eax)
00000cb5	movl	%eax,%ecx
00000cb7	addl	$0x00000208,%ecx
00000cbd	je	0x00000cc5
00000cbf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%ecx)
00000cc5	movl	0x08(%esp),%ecx
00000cc9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000214(%eax)
00000cd3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a4(%eax)
00000cdd	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%eax)
00000ce4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000080(%eax)
00000cee	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x7c(%eax)
00000cf5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%eax)
00000cff	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%eax)
00000d09	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%eax)
00000d13	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%eax)
00000d1d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%eax)
00000d27	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%eax)
00000d31	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000009c(%eax)
00000d3b	movl	%ecx,0x000000a0(%eax)
00000d41	movb	0x0000020c(%eax),%cl
00000d47	movl	$0x0000003c,0x00000128(%eax)
00000d51	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000188(%eax)
00000d58	movb	%cl,%dl
00000d5a	andb	$0xf2,%dl
00000d5d	movb	%dl,0x0000020c(%eax)
00000d63	movl	%eax,%edx
00000d65	addl	$0x00000208,%edx
00000d6b	je	0x00000d73
00000d6d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%edx)
00000d73	movl	$0xffffffff,0x00000210(%eax)
00000d7d	andb	$0xf0,%cl
00000d80	movb	%cl,0x0000020c(%eax)
00000d86	ret
00000d87	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::Init(IChoreoEventCallback*):
00000d90	movl	0x04(%esp),%eax
00000d94	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000214(%eax)
00000d9e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a4(%eax)
00000da8	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%eax)
00000daf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000080(%eax)
00000db9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x7c(%eax)
00000dc0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%eax)
00000dca	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%eax)
00000dd4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%eax)
00000dde	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%eax)
00000de8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%eax)
00000df2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%eax)
00000dfc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000009c(%eax)
00000e06	movl	0x08(%esp),%ecx
00000e0a	movl	%ecx,0x000000a0(%eax)
00000e10	movb	0x0000020c(%eax),%cl
00000e16	movl	$0x0000003c,0x00000128(%eax)
00000e20	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000188(%eax)
00000e27	movb	%cl,%dl
00000e29	andb	$0xf2,%dl
00000e2c	movb	%dl,0x0000020c(%eax)
00000e32	movl	%eax,%edx
00000e34	addl	$0x00000208,%edx
00000e3a	je	0x00000e42
00000e3c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%edx)
00000e42	movl	$0xffffffff,0x00000210(%eax)
00000e4c	andb	$0xf0,%cl
00000e4f	movb	%cl,0x0000020c(%eax)
00000e55	ret
00000e56	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::operator=(CChoreoScene const&):
00000e60	pushl	%ebp
00000e61	movl	%esp,%ebp
00000e63	pushl	%ebx
00000e64	pushl	%edi
00000e65	pushl	%esi
00000e66	subl	$0x4c,%esp
00000e69	movl	0x0c(%ebp),%eax
00000e6c	movl	0x000000a0(%eax),%eax
00000e72	movl	0x08(%ebp),%edx
00000e75	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000214(%edx)
00000e7f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a4(%edx)
00000e89	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%edx)
00000e90	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000080(%edx)
00000e9a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x7c(%edx)
00000ea1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%edx)
00000eab	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%edx)
00000eb5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%edx)
00000ebf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%edx)
00000ec9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%edx)
00000ed3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%edx)
00000edd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000009c(%edx)
00000ee7	movl	%eax,0x000000a0(%edx)
00000eed	movb	0x0000020c(%edx),%al
00000ef3	movl	$0x0000003c,0x00000128(%edx)
00000efd	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000188(%edx)
00000f04	movb	%al,%cl
00000f06	andb	$0xf2,%cl
00000f09	movb	%cl,0x0000020c(%edx)
00000f0f	movl	%edx,%ecx
00000f11	addl	$0x00000208,%ecx
00000f17	je	0x00000f1f
00000f19	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%ecx)
00000f1f	movl	$0xffffffff,0x00000210(%edx)
00000f29	andb	$0xf0,%al
00000f2b	movb	%al,0x0000020c(%edx)
00000f31	movl	0x24(%edx),%eax
00000f34	movl	%edx,%ebx
00000f36	testl	%eax,%eax
00000f38	jle	0x00000f9d
00000f3a	xorl	%esi,%esi
00000f3c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00000f40	movl	0x18(%ebx),%ecx
00000f43	movl	(%ecx,%esi,4),%edi
00000f46	testl	%edi,%edi
00000f48	je	0x00000f98
00000f4a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000010c(%edi)
00000f54	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000108(%edi)
00000f5b	js	0x00000f8d
00000f5d	movl	0x00000100(%edi),%eax
00000f63	testl	%eax,%eax
00000f65	je	0x00000f8d
00000f67	movl	%eax,(%esp)
00000f6a	calll	_free
00000f6f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000100(%edi)
00000f79	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000104(%edi)
00000f83	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000110(%edi)
00000f8d	movl	%edi,(%esp)
00000f90	calll	operator delete(void*)
00000f95	movl	0x24(%ebx),%eax
00000f98	incl	%esi
00000f99	cmpl	%eax,%esi
00000f9b	jl	0x00000f40
00000f9d	leal	0x00000188(%ebx),%eax
00000fa3	movl	%eax,0xc4(%ebp)
00000fa6	leal	0x000000a8(%ebx),%eax
00000fac	movl	%eax,0xc0(%ebp)
00000faf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%ebx)
00000fb6	leal	0x04(%ebx),%eax
00000fb9	movl	%eax,0xe4(%ebp)
00000fbc	xorl	%esi,%esi
00000fbe	jmp	0x00000fc1
00000fc0	incl	%esi
00000fc1	cmpl	0x10(%ebx),%esi
00000fc4	jge	0x00000fe4
00000fc6	movl	0xe4(%ebp),%eax
00000fc9	movl	(%eax),%eax
00000fcb	movl	(%eax,%esi,4),%edi
00000fce	testl	%edi,%edi
00000fd0	je	0x00000fc0
00000fd2	movl	%edi,(%esp)
00000fd5	calll	CChoreoEvent::~CChoreoEvent()
00000fda	movl	%edi,(%esp)
00000fdd	calll	operator delete(void*)
00000fe2	jmp	0x00000fc0
00000fe4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%ebx)
00000feb	movl	0x38(%ebx),%eax
00000fee	leal	0x2c(%ebx),%ecx
00000ff1	movl	%ecx,0xd4(%ebp)
00000ff4	testl	%eax,%eax
00000ff6	jle	0x0000105f
00000ff8	xorl	%esi,%esi
00000ffa	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001000	movl	0xd4(%ebp),%ecx
00001003	movl	(%ecx),%ecx
00001005	movl	(%ecx,%esi,4),%edi
00001008	testl	%edi,%edi
0000100a	je	0x0000105a
0000100c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%edi)
00001016	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%edi)
0000101d	js	0x0000104f
0000101f	movl	0x00000084(%edi),%eax
00001025	testl	%eax,%eax
00001027	je	0x0000104f
00001029	movl	%eax,(%esp)
0000102c	calll	_free
00001031	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%edi)
0000103b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%edi)
00001045	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%edi)
0000104f	movl	%edi,(%esp)
00001052	calll	operator delete(void*)
00001057	movl	0x38(%ebx),%eax
0000105a	incl	%esi
0000105b	cmpl	%eax,%esi
0000105d	jl	0x00001000
0000105f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%ebx)
00001066	movl	0x0c(%ebp),%edi
00001069	movl	0x000000a4(%edi),%eax
0000106f	movl	%eax,0x000000a4(%ebx)
00001075	movss	0x7c(%edi),%xmm0
0000107a	movss	%xmm0,0x7c(%ebx)
0000107f	movss	0x00000080(%edi),%xmm0
00001087	movss	%xmm0,0x00000080(%ebx)
0000108f	movss	0x00000084(%edi),%xmm0
00001097	movss	%xmm0,0x00000084(%ebx)
0000109f	movss	0x00000094(%edi),%xmm0
000010a7	movss	%xmm0,0x00000094(%ebx)
000010af	movl	0x0000009c(%edi),%eax
000010b5	movl	%eax,0x0000009c(%ebx)
000010bb	movss	0x00000098(%edi),%xmm0
000010c3	movss	%xmm0,0x00000098(%ebx)
000010cb	movl	0x000000a4(%edi),%eax
000010d1	movl	%eax,0x000000a4(%ebx)
000010d7	movb	0x0000020c(%edi),%cl
000010dd	andb	$0x04,%cl
000010e0	movb	0x0000020c(%ebx),%al
000010e6	andb	$0xfb,%al
000010e8	orb	%cl,%al
000010ea	movb	%al,0x0000020c(%ebx)
000010f0	movl	0x00000128(%edi),%ecx
000010f6	movl	%ecx,0x00000128(%ebx)
000010fc	andb	$0xf7,%al
000010fe	movb	0x0000020c(%edi),%cl
00001104	andb	$0x08,%cl
00001107	orb	%al,%cl
00001109	movb	%cl,0x0000020c(%ebx)
0000110f	andb	$0xfd,%cl
00001112	movb	0x0000020c(%edi),%al
00001118	andb	$0x02,%al
0000111a	orb	%cl,%al
0000111c	movb	%al,0x0000020c(%ebx)
00001122	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%edi)
00001126	jle	0x00001163
00001128	xorl	%esi,%esi
0000112a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001130	movl	0x04(%edi),%eax
00001133	movl	%edi,%ebx
00001135	movl	(%eax,%esi,4),%edi
00001138	movl	%edi,(%esp)
0000113b	calll	CChoreoEvent::GetActor()
00001140	testl	%eax,%eax
00001142	jne	0x0000115b
00001144	movl	0x08(%ebp),%eax
00001147	movl	%eax,(%esp)
0000114a	calll	CChoreoScene::AllocEvent()
0000114f	movl	%edi,0x04(%esp)
00001153	movl	%eax,(%esp)
00001156	calll	CChoreoEvent::operator=(CChoreoEvent const&)
0000115b	incl	%esi
0000115c	movl	%ebx,%edi
0000115e	cmpl	0x10(%edi),%esi
00001161	jl	0x00001130
00001163	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%edi)
00001167	movl	0x08(%ebp),%ebx
0000116a	jle	0x00001313
00001170	xorl	%ecx,%ecx
00001172	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001180	movl	%ecx,0xc8(%ebp)
00001183	movl	0x18(%edi),%eax
00001186	movl	(%eax,%ecx,4),%esi
00001189	movl	%ebx,(%esp)
0000118c	calll	CChoreoScene::AllocActor()
00001191	movl	%eax,%edi
00001193	movl	%edi,0xcc(%ebp)
00001196	movl	%esi,0x04(%esp)
0000119a	movl	%edi,(%esp)
0000119d	calll	CChoreoActor::operator=(CChoreoActor const&)
000011a2	movl	%edi,(%esp)
000011a5	calll	CChoreoActor::GetNumChannels()
000011aa	testl	%eax,%eax
000011ac	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),%esi
000011b1	jle	0x00001303
000011b7	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000011c0	movl	%esi,0xd0(%ebp)
000011c3	movl	%esi,0x04(%esp)
000011c7	movl	%edi,(%esp)
000011ca	calll	CChoreoActor::GetChannel(int)
000011cf	movl	%eax,0xd8(%ebp)
000011d2	movl	0x30(%ebx),%eax
000011d5	movl	0x38(%ebx),%esi
000011d8	leal	0x01(%esi),%edi
000011db	cmpl	%eax,%edi
000011dd	movl	%esi,%ecx
000011df	jle	0x000011f7
000011e1	movl	%edi,%ecx
000011e3	subl	%eax,%ecx
000011e5	movl	%ecx,0x04(%esp)
000011e9	movl	0xd4(%ebp),%eax
000011ec	movl	%eax,(%esp)
000011ef	calll	CUtlMemory<CChoreoChannel*, int>::Grow(int)
000011f4	movl	0x38(%ebx),%ecx
000011f7	incl	%ecx
000011f8	movl	%ecx,0x38(%ebx)
000011fb	movl	0x2c(%ebx),%eax
000011fe	movl	%eax,0x3c(%ebx)
00001201	subl	%esi,%ecx
00001203	decl	%ecx
00001204	testl	%ecx,%ecx
00001206	jle	0x00001226
00001208	shll	$0x02,%ecx
0000120b	movl	%ecx,0x08(%esp)
0000120f	leal	(%eax,%esi,4),%ecx
00001212	movl	%ecx,0x04(%esp)
00001216	leal	(%eax,%edi,4),%eax
00001219	movl	%eax,(%esp)
0000121c	calll	_memmove
00001221	movl	0xd4(%ebp),%eax
00001224	movl	(%eax),%eax
00001226	movl	0xd8(%ebp),%edi
00001229	shll	$0x02,%esi
0000122c	addl	%eax,%esi
0000122e	je	0x00001232
00001230	movl	%edi,(%esi)
00001232	movl	%edi,(%esp)
00001235	calll	CChoreoChannel::GetNumEvents()
0000123a	xorl	%esi,%esi
0000123c	testl	%eax,%eax
0000123e	jle	0x000012ec
00001244	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001250	movl	%esi,0xdc(%ebp)
00001253	movl	%esi,0x04(%esp)
00001257	movl	%edi,(%esp)
0000125a	calll	CChoreoChannel::GetEvent(int)
0000125f	movl	%eax,0xe0(%ebp)
00001262	movl	0x08(%ebx),%eax
00001265	movl	0x10(%ebx),%edi
00001268	leal	0x01(%edi),%edx
0000126b	cmpl	%eax,%edx
0000126d	movl	%edi,%ecx
0000126f	jle	0x0000128b
00001271	movl	%edx,%ecx
00001273	subl	%eax,%ecx
00001275	movl	%ecx,0x04(%esp)
00001279	movl	0xe4(%ebp),%eax
0000127c	movl	%eax,(%esp)
0000127f	movl	%edx,%esi
00001281	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
00001286	movl	%esi,%edx
00001288	movl	0x10(%ebx),%ecx
0000128b	incl	%ecx
0000128c	movl	%ecx,0x10(%ebx)
0000128f	movl	0x04(%ebx),%eax
00001292	movl	%eax,0x14(%ebx)
00001295	subl	%edi,%ecx
00001297	decl	%ecx
00001298	testl	%ecx,%ecx
0000129a	jle	0x000012ba
0000129c	shll	$0x02,%ecx
0000129f	movl	%ecx,0x08(%esp)
000012a3	leal	(%eax,%edi,4),%ecx
000012a6	movl	%ecx,0x04(%esp)
000012aa	leal	(%eax,%edx,4),%eax
000012ad	movl	%eax,(%esp)
000012b0	calll	_memmove
000012b5	movl	0xe4(%ebp),%eax
000012b8	movl	(%eax),%eax
000012ba	shll	$0x02,%edi
000012bd	addl	%eax,%edi
000012bf	movl	0xe0(%ebp),%eax
000012c2	movl	0xdc(%ebp),%esi
000012c5	je	0x000012c9
000012c7	movl	%eax,(%edi)
000012c9	movl	0x08(%ebp),%ebx
000012cc	movl	%ebx,0x04(%esp)
000012d0	movl	%eax,(%esp)
000012d3	calll	CChoreoEvent::SetScene(CChoreoScene*)
000012d8	movl	0xd8(%ebp),%edi
000012db	movl	%edi,(%esp)
000012de	incl	%esi
000012df	calll	CChoreoChannel::GetNumEvents()
000012e4	cmpl	%eax,%esi
000012e6	jl	0x00001250
000012ec	movl	0xcc(%ebp),%edi
000012ef	movl	%edi,(%esp)
000012f2	movl	0xd0(%ebp),%esi
000012f5	incl	%esi
000012f6	calll	CChoreoActor::GetNumChannels()
000012fb	cmpl	%eax,%esi
000012fd	jl	0x000011c0
00001303	movl	0xc8(%ebp),%ecx
00001306	incl	%ecx
00001307	movl	0x0c(%ebp),%edi
0000130a	cmpl	0x24(%edi),%ecx
0000130d	jl	0x00001180
00001313	leal	0x000000a8(%edi),%eax
00001319	movl	%eax,0x04(%esp)
0000131d	movl	0xc0(%ebp),%eax
00001320	movl	%eax,(%esp)
00001323	movl	$0x00000080,0x08(%esp)
0000132b	calll	V_strncpy(char*, char const*, int)
00001330	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%ebx)
0000133a	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%edi)
00001341	movl	%edi,%ecx
00001343	jle	0x000013b0
00001345	movl	0x08(%ebp),%eax
00001348	leal	0x0000012c(%eax),%eax
0000134e	movl	%eax,0xe4(%ebp)
00001351	xorl	%edi,%edi
00001353	xorl	%ebx,%ebx
00001355	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001360	movl	0x0000012c(%ecx),%edx
00001366	movl	(%edx,%edi),%ecx
00001369	movl	0x04(%edx,%edi),%eax
0000136d	movzwl	0x08(%edx,%edi),%esi
00001372	movl	%esi,%edx
00001374	andl	$0x01,%edx
00001377	movl	%edx,0x0c(%esp)
0000137b	movl	%ecx,0x08(%esp)
0000137f	movl	%eax,0x04(%esp)
00001383	movl	0xe4(%ebp),%eax
00001386	movl	%eax,(%esp)
00001389	andl	$0x0000fffe,%esi
0000138f	calll	CCurveData::Add(float, float, bool)
00001394	movzwl	0x08(%eax),%ecx
00001398	andl	$0x01,%ecx
0000139b	orl	%esi,%ecx
0000139d	movw	%cx,0x08(%eax)
000013a1	movl	0x0c(%ebp),%ecx
000013a4	addl	$0x0a,%edi
000013a7	incl	%ebx
000013a8	cmpl	0x00000138(%ecx),%ebx
000013ae	jl	0x00001360
000013b0	movb	0x00000146(%ecx),%al
000013b6	movl	0x08(%ebp),%ebx
000013b9	movb	%al,0x00000146(%ebx)
000013bf	movw	0x00000144(%ecx),%ax
000013c6	movw	%ax,0x00000144(%ebx)
000013cd	movl	0x00000140(%ecx),%eax
000013d3	movl	%eax,0x00000140(%ebx)
000013d9	movb	0x0000014d(%ecx),%al
000013df	movb	%al,0x0000014d(%ebx)
000013e5	movw	0x0000014b(%ecx),%ax
000013ec	movw	%ax,0x0000014b(%ebx)
000013f3	movl	0x00000147(%ecx),%eax
000013f9	movl	%ecx,%esi
000013fb	movl	%eax,0x00000147(%ebx)
00001401	leal	0x00000164(%ebx),%eax
00001407	movl	%eax,0xe4(%ebp)
0000140a	movl	%eax,(%esp)
0000140d	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FirstInorder() const
00001412	jmp	0x00001444
00001414	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001420	imull	$0x18,%edi,%eax
00001423	movl	0x00000168(%ebx),%ecx
00001429	movl	0x10(%ecx,%eax),%eax
0000142d	movl	%eax,(%esp)
00001430	calll	_free
00001435	movl	%edi,0x04(%esp)
00001439	movl	0xe4(%ebp),%eax
0000143c	movl	%eax,(%esp)
0000143f	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NextInorder(int) const
00001444	movl	%eax,%edi
00001446	cmpl	$0xff,%edi
00001449	jne	0x00001420
0000144b	movl	0xe4(%ebp),%eax
0000144e	movl	%eax,(%esp)
00001451	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RemoveAll()
00001456	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000178(%esi)
0000145d	jle	0x000014af
0000145f	xorl	%edi,%edi
00001461	movl	$0x00000014,%ebx
00001466	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001470	movl	0x0c(%ebp),%eax
00001473	movl	0x00000168(%eax),%esi
00001479	movl	0xfc(%esi,%ebx),%eax
0000147d	movl	%eax,(%esp)
00001480	calll	_strdup
00001485	movl	%eax,0xe8(%ebp)
00001488	movl	(%esi,%ebx),%eax
0000148b	movl	0x0c(%ebp),%esi
0000148e	movl	%eax,0xec(%ebp)
00001491	leal	0xe8(%ebp),%eax
00001494	movl	%eax,0x04(%esp)
00001498	movl	0xe4(%ebp),%eax
0000149b	movl	%eax,(%esp)
0000149e	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
000014a3	addl	$0x18,%ebx
000014a6	incl	%edi
000014a7	cmpl	0x00000178(%esi),%edi
000014ad	jl	0x00001470
000014af	leal	0x00000188(%esi),%eax
000014b5	movl	%eax,0x04(%esp)
000014b9	movl	0xc4(%ebp),%eax
000014bc	movl	%eax,(%esp)
000014bf	movl	$0x00000080,0x08(%esp)
000014c7	calll	V_strncpy(char*, char const*, int)
000014cc	movl	0x00000210(%esi),%ecx
000014d2	movl	0x08(%ebp),%eax
000014d5	movl	%ecx,0x00000210(%eax)
000014db	movss	0x00000214(%esi),%xmm0
000014e3	movss	%xmm0,0x00000214(%eax)
000014eb	movl	0x00000208(%esi),%ecx
000014f1	movl	%ecx,0x00000208(%eax)
000014f7	addl	$0x4c,%esp
000014fa	popl	%esi
000014fb	popl	%edi
000014fc	popl	%ebx
000014fd	popl	%ebp
000014fe	ret
000014ff	movl	%eax,%esi
00001501	movl	%edi,(%esp)
00001504	calll	operator delete(void*)
00001509	movl	%esi,(%esp)
0000150c	calll	__Unwind_Resume
00001511	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::AllocEvent():
00001520	pushl	%ebp
00001521	movl	%esp,%ebp
00001523	pushl	%ebx
00001524	pushl	%edi
00001525	pushl	%esi
00001526	subl	$0x1c,%esp
00001529	movl	$0x0000017c,(%esp)
00001530	calll	operator new(unsigned long)
00001535	movl	%eax,%esi
00001537	movl	0x08(%ebp),%ebx
0000153a	movl	%ebx,0x04(%esp)
0000153e	movl	%esi,(%esp)
00001541	calll	CChoreoEvent::CChoreoEvent(CChoreoScene*)
00001546	movl	%esi,0xf0(%ebp)
00001549	movl	0x08(%ebx),%eax
0000154c	movl	0x10(%ebx),%edi
0000154f	leal	0x04(%ebx),%esi
00001552	leal	0x01(%edi),%edx
00001555	cmpl	%eax,%edx
00001557	movl	%edi,%ecx
00001559	jle	0x00001579
0000155b	movl	%edx,%ecx
0000155d	subl	%eax,%ecx
0000155f	movl	%ecx,0x04(%esp)
00001563	movl	%esi,(%esp)
00001566	movl	%esi,%ebx
00001568	movl	%edx,%esi
0000156a	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
0000156f	movl	%esi,%edx
00001571	movl	%ebx,%esi
00001573	movl	0x08(%ebp),%ebx
00001576	movl	0x10(%ebx),%ecx
00001579	movl	%esi,0xec(%ebp)
0000157c	incl	%ecx
0000157d	movl	%ecx,0x10(%ebx)
00001580	movl	0x04(%ebx),%eax
00001583	movl	%eax,0x14(%ebx)
00001586	subl	%edi,%ecx
00001588	decl	%ecx
00001589	testl	%ecx,%ecx
0000158b	jle	0x000015ab
0000158d	shll	$0x02,%ecx
00001590	movl	%ecx,0x08(%esp)
00001594	leal	(%eax,%edi,4),%ecx
00001597	movl	%ecx,0x04(%esp)
0000159b	leal	(%eax,%edx,4),%eax
0000159e	movl	%eax,(%esp)
000015a1	calll	_memmove
000015a6	movl	0xec(%ebp),%eax
000015a9	movl	(%eax),%eax
000015ab	shll	$0x02,%edi
000015ae	addl	%eax,%edi
000015b0	movl	0xf0(%ebp),%eax
000015b3	je	0x000015b7
000015b5	movl	%eax,(%edi)
000015b7	addl	$0x1c,%esp
000015ba	popl	%esi
000015bb	popl	%edi
000015bc	popl	%ebx
000015bd	popl	%ebp
000015be	ret
000015bf	movl	%eax,%edi
000015c1	movl	%esi,(%esp)
000015c4	calll	operator delete(void*)
000015c9	movl	%edi,(%esp)
000015cc	calll	__Unwind_Resume
000015d1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::AllocActor():
000015e0	pushl	%ebp
000015e1	movl	%esp,%ebp
000015e3	pushl	%ebx
000015e4	pushl	%edi
000015e5	pushl	%esi
000015e6	subl	$0x1c,%esp
000015e9	movl	$0x00000118,(%esp)
000015f0	calll	operator new(unsigned long)
000015f5	movl	%eax,%esi
000015f7	movl	%esi,(%esp)
000015fa	calll	CChoreoActor::CChoreoActor()
000015ff	movl	%esi,0xec(%ebp)
00001602	movl	0x08(%ebp),%esi
00001605	movl	0x1c(%esi),%eax
00001608	movl	0x24(%esi),%edi
0000160b	leal	0x18(%esi),%ebx
0000160e	leal	0x01(%edi),%edx
00001611	cmpl	%eax,%edx
00001613	movl	%edi,%ecx
00001615	jle	0x00001634
00001617	movl	%edx,%ecx
00001619	subl	%eax,%ecx
0000161b	movl	%ecx,0x04(%esp)
0000161f	movl	%ebx,(%esp)
00001622	movl	%ebx,0xf0(%ebp)
00001625	movl	%edx,%ebx
00001627	calll	CUtlMemory<CChoreoActor*, int>::Grow(int)
0000162c	movl	%ebx,%edx
0000162e	movl	0xf0(%ebp),%ebx
00001631	movl	0x24(%esi),%ecx
00001634	movl	%ebx,0xf0(%ebp)
00001637	incl	%ecx
00001638	movl	%ecx,0x24(%esi)
0000163b	movl	0x18(%esi),%eax
0000163e	movl	%eax,0x28(%esi)
00001641	subl	%edi,%ecx
00001643	decl	%ecx
00001644	testl	%ecx,%ecx
00001646	jle	0x00001666
00001648	shll	$0x02,%ecx
0000164b	movl	%ecx,0x08(%esp)
0000164f	leal	(%eax,%edi,4),%ecx
00001652	movl	%ecx,0x04(%esp)
00001656	leal	(%eax,%edx,4),%eax
00001659	movl	%eax,(%esp)
0000165c	calll	_memmove
00001661	movl	0xf0(%ebp),%eax
00001664	movl	(%eax),%eax
00001666	shll	$0x02,%edi
00001669	addl	%eax,%edi
0000166b	movl	0xec(%ebp),%eax
0000166e	je	0x00001672
00001670	movl	%eax,(%edi)
00001672	addl	$0x1c,%esp
00001675	popl	%esi
00001676	popl	%edi
00001677	popl	%ebx
00001678	popl	%ebp
00001679	ret
0000167a	movl	%eax,%edi
0000167c	movl	%esi,(%esp)
0000167f	calll	operator delete(void*)
00001684	movl	%edi,(%esp)
00001687	calll	__Unwind_Resume
0000168c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::~CChoreoScene():
00001690	jmp	CChoreoScene::~CChoreoScene()
00001695	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::~CChoreoScene():
000016a0	pushl	%ebp
000016a1	movl	%esp,%ebp
000016a3	pushl	%ebx
000016a4	pushl	%edi
000016a5	pushl	%esi
000016a6	subl	$0x0c,%esp
000016a9	calll	0x000016ae
000016ae	popl	%eax
000016af	leal	vtable for CChoreoScene-0x16ae+0x00000008(%eax),%eax
000016b5	movl	0x08(%ebp),%edi
000016b8	movl	%eax,(%edi)
000016ba	movl	0x24(%edi),%eax
000016bd	testl	%eax,%eax
000016bf	jle	0x0000172d
000016c1	xorl	%esi,%esi
000016c3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000016d0	movl	0x18(%edi),%ecx
000016d3	movl	(%ecx,%esi,4),%ebx
000016d6	testl	%ebx,%ebx
000016d8	je	0x00001728
000016da	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000010c(%ebx)
000016e4	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000108(%ebx)
000016eb	js	0x0000171d
000016ed	movl	0x00000100(%ebx),%eax
000016f3	testl	%eax,%eax
000016f5	je	0x0000171d
000016f7	movl	%eax,(%esp)
000016fa	calll	_free
000016ff	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000100(%ebx)
00001709	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000104(%ebx)
00001713	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000110(%ebx)
0000171d	movl	%ebx,(%esp)
00001720	calll	operator delete(void*)
00001725	movl	0x24(%edi),%eax
00001728	incl	%esi
00001729	cmpl	%eax,%esi
0000172b	jl	0x000016d0
0000172d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%edi)
00001734	xorl	%esi,%esi
00001736	jmp	0x00001741
00001738	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001740	incl	%esi
00001741	cmpl	0x10(%edi),%esi
00001744	jge	0x00001762
00001746	movl	0x04(%edi),%eax
00001749	movl	(%eax,%esi,4),%ebx
0000174c	testl	%ebx,%ebx
0000174e	je	0x00001740
00001750	movl	%ebx,(%esp)
00001753	calll	CChoreoEvent::~CChoreoEvent()
00001758	movl	%ebx,(%esp)
0000175b	calll	operator delete(void*)
00001760	jmp	0x00001740
00001762	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%edi)
00001769	movl	0x38(%edi),%eax
0000176c	testl	%eax,%eax
0000176e	jle	0x000017dd
00001770	xorl	%esi,%esi
00001772	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00001780	movl	0x2c(%edi),%ecx
00001783	movl	(%ecx,%esi,4),%ebx
00001786	testl	%ebx,%ebx
00001788	je	0x000017d8
0000178a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%ebx)
00001794	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%ebx)
0000179b	js	0x000017cd
0000179d	movl	0x00000084(%ebx),%eax
000017a3	testl	%eax,%eax
000017a5	je	0x000017cd
000017a7	movl	%eax,(%esp)
000017aa	calll	_free
000017af	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%ebx)
000017b9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%ebx)
000017c3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%ebx)
000017cd	movl	%ebx,(%esp)
000017d0	calll	operator delete(void*)
000017d5	movl	0x38(%edi),%eax
000017d8	incl	%esi
000017d9	cmpl	%eax,%esi
000017db	jl	0x00001780
000017dd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%edi)
000017e4	leal	0x00000164(%edi),%eax
000017ea	movl	%eax,(%esp)
000017ed	calll	CUtlDict<int, int>::~CUtlDict()
000017f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000015c(%edi)
000017fc	movl	0x00000150(%edi),%eax
00001802	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%edi)
00001809	jns	0x00001813
0000180b	movl	%eax,0x00000160(%edi)
00001811	jmp	0x00001866
00001813	testl	%eax,%eax
00001815	jne	0x0000182d
00001817	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001821	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%edi)
0000182b	jmp	0x0000185c
0000182d	movl	%eax,(%esp)
00001830	calll	_free
00001835	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000150(%edi)
0000183f	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%edi)
00001846	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001850	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%edi)
0000185a	js	0x00001866
0000185c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001866	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%edi)
00001870	movl	0x0000012c(%edi),%eax
00001876	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%edi)
0000187d	jns	0x00001887
0000187f	movl	%eax,0x0000013c(%edi)
00001885	jmp	0x000018da
00001887	testl	%eax,%eax
00001889	jne	0x000018a1
0000188b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
00001895	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%edi)
0000189f	jmp	0x000018d0
000018a1	movl	%eax,(%esp)
000018a4	calll	_free
000018a9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000012c(%edi)
000018b3	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%edi)
000018ba	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
000018c4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%edi)
000018ce	js	0x000018da
000018d0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
000018da	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%edi)
000018e1	movl	0x68(%edi),%eax
000018e4	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%edi)
000018e8	jns	0x000018ef
000018ea	movl	%eax,0x78(%edi)
000018ed	jmp	0x0000192d
000018ef	testl	%eax,%eax
000018f1	jne	0x00001903
000018f3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
000018fa	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%edi)
00001901	jmp	0x00001926
00001903	movl	%eax,(%esp)
00001906	calll	_free
0000190b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x68(%edi)
00001912	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%edi)
00001916	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
0000191d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%edi)
00001924	js	0x0000192d
00001926	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
0000192d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%edi)
00001934	movl	0x54(%edi),%eax
00001937	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%edi)
0000193b	jns	0x00001942
0000193d	movl	%eax,0x64(%edi)
00001940	jmp	0x00001980
00001942	testl	%eax,%eax
00001944	jne	0x00001956
00001946	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
0000194d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%edi)
00001954	jmp	0x00001979
00001956	movl	%eax,(%esp)
00001959	calll	_free
0000195e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x54(%edi)
00001965	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%edi)
00001969	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
00001970	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%edi)
00001977	js	0x00001980
00001979	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
00001980	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%edi)
00001987	movl	0x40(%edi),%eax
0000198a	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%edi)
0000198e	jns	0x00001995
00001990	movl	%eax,0x50(%edi)
00001993	jmp	0x000019d3
00001995	testl	%eax,%eax
00001997	jne	0x000019a9
00001999	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
000019a0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%edi)
000019a7	jmp	0x000019cc
000019a9	movl	%eax,(%esp)
000019ac	calll	_free
000019b1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x40(%edi)
000019b8	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%edi)
000019bc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
000019c3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%edi)
000019ca	js	0x000019d3
000019cc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
000019d3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%edi)
000019da	movl	0x2c(%edi),%eax
000019dd	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%edi)
000019e1	jns	0x000019e8
000019e3	movl	%eax,0x3c(%edi)
000019e6	jmp	0x00001a26
000019e8	testl	%eax,%eax
000019ea	jne	0x000019fc
000019ec	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
000019f3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%edi)
000019fa	jmp	0x00001a1f
000019fc	movl	%eax,(%esp)
000019ff	calll	_free
00001a04	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x2c(%edi)
00001a0b	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%edi)
00001a0f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
00001a16	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%edi)
00001a1d	js	0x00001a26
00001a1f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
00001a26	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%edi)
00001a2d	movl	0x18(%edi),%eax
00001a30	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%edi)
00001a34	jns	0x00001a3b
00001a36	movl	%eax,0x28(%edi)
00001a39	jmp	0x00001a79
00001a3b	testl	%eax,%eax
00001a3d	jne	0x00001a4f
00001a3f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001a46	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%edi)
00001a4d	jmp	0x00001a72
00001a4f	movl	%eax,(%esp)
00001a52	calll	_free
00001a57	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x18(%edi)
00001a5e	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%edi)
00001a62	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001a69	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%edi)
00001a70	js	0x00001a79
00001a72	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001a79	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%edi)
00001a80	movl	0x04(%edi),%eax
00001a83	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%edi)
00001a87	jns	0x00001a8e
00001a89	movl	%eax,0x14(%edi)
00001a8c	jmp	0x00001acc
00001a8e	testl	%eax,%eax
00001a90	jne	0x00001aa2
00001a92	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001a99	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%edi)
00001aa0	jmp	0x00001ac5
00001aa2	movl	%eax,(%esp)
00001aa5	calll	_free
00001aaa	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%edi)
00001ab1	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%edi)
00001ab5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001abc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%edi)
00001ac3	js	0x00001acc
00001ac5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001acc	addl	$0x0c,%esp
00001acf	popl	%esi
00001ad0	popl	%edi
00001ad1	popl	%ebx
00001ad2	popl	%ebp
00001ad3	ret
00001ad4	movl	%eax,%esi
00001ad6	jmp	0x00001af0
00001ad8	movl	%eax,%esi
00001ada	movl	%ebx,(%esp)
00001add	calll	operator delete(void*)
00001ae2	leal	0x00000164(%edi),%eax
00001ae8	movl	%eax,(%esp)
00001aeb	calll	CUtlDict<int, int>::~CUtlDict()
00001af0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000015c(%edi)
00001afa	movl	0x00000150(%edi),%eax
00001b00	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%edi)
00001b07	jns	0x00001b11
00001b09	movl	%eax,0x00000160(%edi)
00001b0f	jmp	0x00001b64
00001b11	testl	%eax,%eax
00001b13	jne	0x00001b2b
00001b15	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001b1f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%edi)
00001b29	jmp	0x00001b5a
00001b2b	movl	%eax,(%esp)
00001b2e	calll	_free
00001b33	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000150(%edi)
00001b3d	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000158(%edi)
00001b44	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001b4e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000160(%edi)
00001b58	js	0x00001b64
00001b5a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000154(%edi)
00001b64	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000138(%edi)
00001b6e	movl	0x0000012c(%edi),%eax
00001b74	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%edi)
00001b7b	jns	0x00001b85
00001b7d	movl	%eax,0x0000013c(%edi)
00001b83	jmp	0x00001bd8
00001b85	testl	%eax,%eax
00001b87	jne	0x00001b9f
00001b89	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
00001b93	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%edi)
00001b9d	jmp	0x00001bce
00001b9f	movl	%eax,(%esp)
00001ba2	calll	_free
00001ba7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000012c(%edi)
00001bb1	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000134(%edi)
00001bb8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
00001bc2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000013c(%edi)
00001bcc	js	0x00001bd8
00001bce	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000130(%edi)
00001bd8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%edi)
00001bdf	movl	0x68(%edi),%eax
00001be2	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%edi)
00001be6	jns	0x00001bed
00001be8	movl	%eax,0x78(%edi)
00001beb	jmp	0x00001c2b
00001bed	testl	%eax,%eax
00001bef	jne	0x00001c01
00001bf1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
00001bf8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%edi)
00001bff	jmp	0x00001c24
00001c01	movl	%eax,(%esp)
00001c04	calll	_free
00001c09	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x68(%edi)
00001c10	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x70(%edi)
00001c14	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
00001c1b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x78(%edi)
00001c22	js	0x00001c2b
00001c24	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x6c(%edi)
00001c2b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%edi)
00001c32	movl	0x54(%edi),%eax
00001c35	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%edi)
00001c39	jns	0x00001c40
00001c3b	movl	%eax,0x64(%edi)
00001c3e	jmp	0x00001c7e
00001c40	testl	%eax,%eax
00001c42	jne	0x00001c54
00001c44	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
00001c4b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%edi)
00001c52	jmp	0x00001c77
00001c54	movl	%eax,(%esp)
00001c57	calll	_free
00001c5c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x54(%edi)
00001c63	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x5c(%edi)
00001c67	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
00001c6e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x64(%edi)
00001c75	js	0x00001c7e
00001c77	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x58(%edi)
00001c7e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%edi)
00001c85	movl	0x40(%edi),%eax
00001c88	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%edi)
00001c8c	jns	0x00001c93
00001c8e	movl	%eax,0x50(%edi)
00001c91	jmp	0x00001cd1
00001c93	testl	%eax,%eax
00001c95	jne	0x00001ca7
00001c97	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
00001c9e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%edi)
00001ca5	jmp	0x00001cca
00001ca7	movl	%eax,(%esp)
00001caa	calll	_free
00001caf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x40(%edi)
00001cb6	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x48(%edi)
00001cba	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
00001cc1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x50(%edi)
00001cc8	js	0x00001cd1
00001cca	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x44(%edi)
00001cd1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x38(%edi)
00001cd8	movl	0x2c(%edi),%eax
00001cdb	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%edi)
00001cdf	jns	0x00001ce6
00001ce1	movl	%eax,0x3c(%edi)
00001ce4	jmp	0x00001d24
00001ce6	testl	%eax,%eax
00001ce8	jne	0x00001cfa
00001cea	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
00001cf1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%edi)
00001cf8	jmp	0x00001d1d
00001cfa	movl	%eax,(%esp)
00001cfd	calll	_free
00001d02	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x2c(%edi)
00001d09	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x34(%edi)
00001d0d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
00001d14	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x3c(%edi)
00001d1b	js	0x00001d24
00001d1d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x30(%edi)
00001d24	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%edi)
00001d2b	movl	0x18(%edi),%eax
00001d2e	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%edi)
00001d32	jns	0x00001d39
00001d34	movl	%eax,0x28(%edi)
00001d37	jmp	0x00001d77
00001d39	testl	%eax,%eax
00001d3b	jne	0x00001d4d
00001d3d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001d44	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%edi)
00001d4b	jmp	0x00001d70
00001d4d	movl	%eax,(%esp)
00001d50	calll	_free
00001d55	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x18(%edi)
00001d5c	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x20(%edi)
00001d60	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001d67	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x28(%edi)
00001d6e	js	0x00001d77
00001d70	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x1c(%edi)
00001d77	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%edi)
00001d7e	movl	0x04(%edi),%eax
00001d81	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%edi)
00001d85	jns	0x00001d92
00001d87	movl	%eax,0x14(%edi)
00001d8a	movl	%esi,(%esp)
00001d8d	calll	__Unwind_Resume
00001d92	testl	%eax,%eax
00001d94	jne	0x00001da6
00001d96	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001d9d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%edi)
00001da4	jmp	0x00001dc9
00001da6	movl	%eax,(%esp)
00001da9	calll	_free
00001dae	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%edi)
00001db5	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%edi)
00001db9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001dc0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x14(%edi)
00001dc7	js	0x00001dd0
00001dc9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi)
00001dd0	movl	%esi,(%esp)
00001dd3	calll	__Unwind_Resume
00001dd8	calll	std::terminate()
00001ddd	nopl	(%eax)
CChoreoScene::IgnorePhonemes(bool):
00001de0	movb	0x08(%esp),%al
00001de4	addb	%al,%al
00001de6	movl	0x04(%esp),%ecx
00001dea	movb	0x0000020c(%ecx),%dl
00001df0	andb	$0xfd,%dl
00001df3	orb	%al,%dl
00001df5	movb	%dl,0x0000020c(%ecx)
00001dfb	ret
00001dfc	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::ShouldIgnorePhonemes() const:
00001e00	movl	0x04(%esp),%eax
00001e04	movb	0x0000020c(%eax),%al
00001e0a	andb	$0x02,%al
00001e0c	shrb	%al
00001e0e	movzbl	%al,%eax
00001e11	ret
00001e12	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetEventCallbackInterface(IChoreoEventCallback*):
00001e20	movl	0x08(%esp),%eax
00001e24	movl	0x04(%esp),%ecx
00001e28	movl	%eax,0x000000a0(%ecx)
00001e2e	ret
00001e2f	nop
CChoreoScene::PrintEvent(int, CChoreoEvent*):
00001e30	pushl	%ebp
00001e31	movl	%esp,%ebp
00001e33	pushl	%ebx
00001e34	pushl	%edi
00001e35	pushl	%esi
00001e36	subl	$0x2c,%esp
00001e39	calll	0x00001e3e
00001e3e	popl	%edi
00001e3f	movl	%edi,0xe4(%ebp)
00001e42	movl	0x10(%ebp),%eax
00001e45	movl	%eax,(%esp)
00001e48	movl	%eax,%esi
00001e4a	calll	CChoreoEvent::GetType()
00001e4f	movl	%eax,(%esp)
00001e52	calll	CChoreoEvent::NameForType(CChoreoEvent::EVENTTYPE)
00001e57	movl	%eax,%ebx
00001e59	movl	%esi,(%esp)
00001e5c	calll	CChoreoEvent::GetName()
00001e61	movl	%eax,0x10(%esp)
00001e65	movl	%ebx,0x0c(%esp)
00001e69	leal	0x68b39-0x1e3e(%edi),%eax
00001e6f	movl	%eax,0x08(%esp)
00001e73	movl	0x0c(%ebp),%eax
00001e76	movl	%eax,0x04(%esp)
00001e7a	movl	%eax,%esi
00001e7c	movl	0x08(%ebp),%ebx
00001e7f	movl	%ebx,(%esp)
00001e82	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001e87	leal	0x68b48-0x1e3e(%edi),%eax
00001e8d	movl	%eax,0x08(%esp)
00001e91	movl	%esi,0x04(%esp)
00001e95	movl	%ebx,(%esp)
00001e98	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001e9d	movl	0x10(%ebp),%edi
00001ea0	movl	%edi,(%esp)
00001ea3	calll	CChoreoEvent::GetStartTime()
00001ea8	fstpt	0xe8(%ebp)
00001eab	movl	%edi,(%esp)
00001eae	movl	%edi,%esi
00001eb0	calll	CChoreoEvent::GetEndTime()
00001eb5	fstpl	0x14(%esp)
00001eb9	fldt	0xe8(%ebp)
00001ebc	fstpl	0x0c(%esp)
00001ec0	movl	0xe4(%ebp),%edi
00001ec3	leal	0x68b4b-0x1e3e(%edi),%eax
00001ec9	movl	%eax,0x08(%esp)
00001ecd	movl	0x0c(%ebp),%eax
00001ed0	leal	0x01(%eax),%ebx
00001ed3	movl	%ebx,0xe8(%ebp)
00001ed6	movl	%ebx,0x04(%esp)
00001eda	movl	0x08(%ebp),%eax
00001edd	movl	%eax,(%esp)
00001ee0	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001ee5	movl	%esi,(%esp)
00001ee8	calll	CChoreoEvent::GetParameters()
00001eed	movl	%eax,0x0c(%esp)
00001ef1	movl	%edi,%ecx
00001ef3	leal	0x68b57-0x1e3e(%ecx),%eax
00001ef9	movl	%eax,0x08(%esp)
00001efd	movl	%ebx,0x04(%esp)
00001f01	movl	0x08(%ebp),%eax
00001f04	movl	%eax,(%esp)
00001f07	movl	%ecx,%ebx
00001f09	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001f0e	movl	%esi,%eax
00001f10	movl	%eax,(%esp)
00001f13	movl	%eax,%edi
00001f15	calll	CChoreoEvent::GetParameters2()
00001f1a	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00001f1d	je	0x00001f47
00001f1f	movl	%edi,(%esp)
00001f22	calll	CChoreoEvent::GetParameters2()
00001f27	movl	%eax,0x0c(%esp)
00001f2b	leal	0x68b63-0x1e3e(%ebx),%eax
00001f31	movl	%eax,0x08(%esp)
00001f35	movl	0xe8(%ebp),%eax
00001f38	movl	%eax,0x04(%esp)
00001f3c	movl	0x08(%ebp),%eax
00001f3f	movl	%eax,(%esp)
00001f42	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001f47	movl	%edi,(%esp)
00001f4a	calll	CChoreoEvent::GetParameters3()
00001f4f	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00001f52	je	0x00001f7c
00001f54	movl	%edi,(%esp)
00001f57	calll	CChoreoEvent::GetParameters3()
00001f5c	movl	%eax,0x0c(%esp)
00001f60	leal	0x68b70-0x1e3e(%ebx),%eax
00001f66	movl	%eax,0x08(%esp)
00001f6a	movl	0xe8(%ebp),%eax
00001f6d	movl	%eax,0x04(%esp)
00001f71	movl	0x08(%ebp),%eax
00001f74	movl	%eax,(%esp)
00001f77	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001f7c	leal	0x68b7d-0x1e3e(%ebx),%eax
00001f82	movl	%eax,0x08(%esp)
00001f86	movl	0x0c(%ebp),%eax
00001f89	movl	%eax,0x04(%esp)
00001f8d	movl	0x08(%ebp),%eax
00001f90	movl	%eax,(%esp)
00001f93	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001f98	addl	$0x2c,%esp
00001f9b	popl	%esi
00001f9c	popl	%edi
00001f9d	popl	%ebx
00001f9e	popl	%ebp
00001f9f	ret
CChoreoScene::PrintChannel(int, CChoreoChannel*):
00001fa0	pushl	%ebp
00001fa1	movl	%esp,%ebp
00001fa3	pushl	%ebx
00001fa4	pushl	%edi
00001fa5	pushl	%esi
00001fa6	subl	$0x1c,%esp
00001fa9	calll	0x00001fae
00001fae	popl	%edi
00001faf	movl	%edi,0xf0(%ebp)
00001fb2	movl	0x10(%ebp),%esi
00001fb5	movl	%esi,(%esp)
00001fb8	calll	CChoreoChannel::GetName()
00001fbd	movl	%eax,0x0c(%esp)
00001fc1	leal	0x68b80-0x1fae(%edi),%eax
00001fc7	movl	%eax,0x08(%esp)
00001fcb	movl	0x0c(%ebp),%eax
00001fce	movl	%eax,0x04(%esp)
00001fd2	movl	0x08(%ebp),%ebx
00001fd5	movl	%ebx,(%esp)
00001fd8	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001fdd	leal	0x68b48-0x1fae(%edi),%eax
00001fe3	movl	%eax,0x08(%esp)
00001fe7	movl	0x0c(%ebp),%eax
00001fea	movl	%eax,0x04(%esp)
00001fee	movl	%ebx,(%esp)
00001ff1	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00001ff6	movl	%esi,(%esp)
00001ff9	calll	CChoreoChannel::GetNumEvents()
00001ffe	testl	%eax,%eax
00002000	jle	0x00002040
00002002	movl	0x0c(%ebp),%eax
00002005	leal	0x01(%eax),%edi
00002008	xorl	%ebx,%ebx
0000200a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00002010	movl	%ebx,0x04(%esp)
00002014	movl	%esi,(%esp)
00002017	calll	CChoreoChannel::GetEvent(int)
0000201c	testl	%eax,%eax
0000201e	je	0x00002033
00002020	movl	%eax,0x08(%esp)
00002024	movl	%edi,0x04(%esp)
00002028	movl	0x08(%ebp),%eax
0000202b	movl	%eax,(%esp)
0000202e	calll	CChoreoScene::PrintEvent(int, CChoreoEvent*)
00002033	movl	%esi,(%esp)
00002036	incl	%ebx
00002037	calll	CChoreoChannel::GetNumEvents()
0000203c	cmpl	%eax,%ebx
0000203e	jl	0x00002010
00002040	movl	0xf0(%ebp),%eax
00002043	leal	0x68b7d-0x1fae(%eax),%eax
00002049	movl	%eax,0x08(%esp)
0000204d	movl	0x0c(%ebp),%eax
00002050	movl	%eax,0x04(%esp)
00002054	movl	0x08(%ebp),%eax
00002057	movl	%eax,(%esp)
0000205a	calll	CChoreoScene::choreoprintf(int, char const*, ...)
0000205f	addl	$0x1c,%esp
00002062	popl	%esi
00002063	popl	%edi
00002064	popl	%ebx
00002065	popl	%ebp
00002066	ret
00002067	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::PrintActor(int, CChoreoActor*):
00002070	pushl	%ebp
00002071	movl	%esp,%ebp
00002073	pushl	%ebx
00002074	pushl	%edi
00002075	pushl	%esi
00002076	subl	$0x1c,%esp
00002079	calll	0x0000207e
0000207e	popl	%edi
0000207f	movl	%edi,0xf0(%ebp)
00002082	movl	0x10(%ebp),%esi
00002085	movl	%esi,(%esp)
00002088	calll	CChoreoActor::GetName()
0000208d	movl	%eax,0x0c(%esp)
00002091	leal	0x68b8e-0x207e(%edi),%eax
00002097	movl	%eax,0x08(%esp)
0000209b	movl	0x0c(%ebp),%eax
0000209e	movl	%eax,0x04(%esp)
000020a2	movl	0x08(%ebp),%ebx
000020a5	movl	%ebx,(%esp)
000020a8	calll	CChoreoScene::choreoprintf(int, char const*, ...)
000020ad	leal	0x68b48-0x207e(%edi),%eax
000020b3	movl	%eax,0x08(%esp)
000020b7	movl	0x0c(%ebp),%eax
000020ba	movl	%eax,0x04(%esp)
000020be	movl	%ebx,(%esp)
000020c1	calll	CChoreoScene::choreoprintf(int, char const*, ...)
000020c6	movl	%esi,(%esp)
000020c9	calll	CChoreoActor::GetNumChannels()
000020ce	testl	%eax,%eax
000020d0	jle	0x00002110
000020d2	movl	0x0c(%ebp),%eax
000020d5	leal	0x01(%eax),%edi
000020d8	xorl	%ebx,%ebx
000020da	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000020e0	movl	%ebx,0x04(%esp)
000020e4	movl	%esi,(%esp)
000020e7	calll	CChoreoActor::GetChannel(int)
000020ec	testl	%eax,%eax
000020ee	je	0x00002103
000020f0	movl	%eax,0x08(%esp)
000020f4	movl	%edi,0x04(%esp)
000020f8	movl	0x08(%ebp),%eax
000020fb	movl	%eax,(%esp)
000020fe	calll	CChoreoScene::PrintChannel(int, CChoreoChannel*)
00002103	movl	%esi,(%esp)
00002106	incl	%ebx
00002107	calll	CChoreoActor::GetNumChannels()
0000210c	cmpl	%eax,%ebx
0000210e	jl	0x000020e0
00002110	movl	0xf0(%ebp),%eax
00002113	leal	0x68b9a-0x207e(%eax),%eax
00002119	movl	%eax,0x08(%esp)
0000211d	movl	0x0c(%ebp),%eax
00002120	movl	%eax,0x04(%esp)
00002124	movl	0x08(%ebp),%eax
00002127	movl	%eax,(%esp)
0000212a	calll	CChoreoScene::choreoprintf(int, char const*, ...)
0000212f	addl	$0x1c,%esp
00002132	popl	%esi
00002133	popl	%edi
00002134	popl	%ebx
00002135	popl	%ebp
00002136	ret
00002137	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::Print():
00002140	pushl	%ebp
00002141	movl	%esp,%ebp
00002143	pushl	%ebx
00002144	pushl	%edi
00002145	pushl	%esi
00002146	subl	$0x0c,%esp
00002149	movl	0x08(%ebp),%esi
0000214c	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%esi)
00002150	jle	0x0000218c
00002152	xorl	%edi,%edi
00002154	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00002160	movl	0x04(%esi),%eax
00002163	movl	(%eax,%edi,4),%ebx
00002166	movl	%ebx,(%esp)
00002169	calll	CChoreoEvent::GetActor()
0000216e	testl	%eax,%eax
00002170	jne	0x00002186
00002172	movl	%ebx,0x08(%esp)
00002176	movl	%esi,(%esp)
00002179	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002181	calll	CChoreoScene::PrintEvent(int, CChoreoEvent*)
00002186	incl	%edi
00002187	cmpl	0x10(%esi),%edi
0000218a	jl	0x00002160
0000218c	movl	0x24(%esi),%eax
0000218f	testl	%eax,%eax
00002191	jle	0x000021c6
00002193	xorl	%edi,%edi
00002195	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000021a0	movl	0x18(%esi),%ecx
000021a3	movl	(%ecx,%edi,4),%ecx
000021a6	testl	%ecx,%ecx
000021a8	je	0x000021c1
000021aa	movl	%ecx,0x08(%esp)
000021ae	movl	%esi,(%esp)
000021b1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000021b9	calll	CChoreoScene::PrintActor(int, CChoreoActor*)
000021be	movl	0x24(%esi),%eax
000021c1	incl	%edi
000021c2	cmpl	%eax,%edi
000021c4	jl	0x000021a0
000021c6	addl	$0x0c,%esp
000021c9	popl	%esi
000021ca	popl	%edi
000021cb	popl	%ebx
000021cc	popl	%ebp
000021cd	ret
000021ce	nop
CChoreoScene::SceneMsg(char const*, ...):
000021d0	pushl	%ebp
000021d1	movl	%esp,%ebp
000021d3	pushl	%ebx
000021d4	pushl	%edi
000021d5	pushl	%esi
000021d6	subl	$0x0000081c,%esp
000021dc	calll	0x000021e1
000021e1	popl	%edi
000021e2	movl	0x758ea-0x21e1(%edi),%esi
000021e8	movl	(%esi),%eax
000021ea	movl	%eax,0xf0(%ebp)
000021ed	leal	0x10(%ebp),%eax
000021f0	movl	%eax,0xfffff7ec(%ebp)
000021f6	movl	%eax,0x0c(%esp)
000021fa	movl	0x0c(%ebp),%eax
000021fd	movl	%eax,0x08(%esp)
00002201	leal	0xfffff7f0(%ebp),%ebx
00002207	movl	%ebx,(%esp)
0000220a	movl	$0x00000800,0x04(%esp)
00002212	calll	V_vsnprintf(char*, int, char const*, char*)
00002217	movl	0x08(%ebp),%eax
0000221a	movl	0x0000009c(%eax),%eax
00002220	testl	%eax,%eax
00002222	je	0x0000222b
00002224	movl	%ebx,(%esp)
00002227	call	*%eax
00002229	jmp	0x0000223d
0000222b	movl	%ebx,0x04(%esp)
0000222f	leal	0x68b36-0x21e1(%edi),%eax
00002235	movl	%eax,(%esp)
00002238	calll	_Msg
0000223d	movl	(%esi),%eax
0000223f	cmpl	0xf0(%ebp),%eax
00002242	jne	0x0000224f
00002244	addl	$0x0000081c,%esp
0000224a	popl	%esi
0000224b	popl	%edi
0000224c	popl	%ebx
0000224d	popl	%ebp
0000224e	ret
0000224f	calll	___stack_chk_fail
00002254	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::AllocChannel():
00002260	pushl	%ebp
00002261	movl	%esp,%ebp
00002263	pushl	%ebx
00002264	pushl	%edi
00002265	pushl	%esi
00002266	subl	$0x1c,%esp
00002269	movl	$0x0000009c,(%esp)
00002270	calll	operator new(unsigned long)
00002275	movl	%eax,%esi
00002277	movl	%esi,(%esp)
0000227a	calll	CChoreoChannel::CChoreoChannel()
0000227f	movl	%esi,0xec(%ebp)
00002282	movl	0x08(%ebp),%esi
00002285	movl	0x30(%esi),%eax
00002288	movl	0x38(%esi),%edi
0000228b	leal	0x2c(%esi),%ebx
0000228e	leal	0x01(%edi),%edx
00002291	cmpl	%eax,%edx
00002293	movl	%edi,%ecx
00002295	jle	0x000022b4
00002297	movl	%edx,%ecx
00002299	subl	%eax,%ecx
0000229b	movl	%ecx,0x04(%esp)
0000229f	movl	%ebx,(%esp)
000022a2	movl	%ebx,0xf0(%ebp)
000022a5	movl	%edx,%ebx
000022a7	calll	CUtlMemory<CChoreoChannel*, int>::Grow(int)
000022ac	movl	%ebx,%edx
000022ae	movl	0xf0(%ebp),%ebx
000022b1	movl	0x38(%esi),%ecx
000022b4	movl	%ebx,0xf0(%ebp)
000022b7	incl	%ecx
000022b8	movl	%ecx,0x38(%esi)
000022bb	movl	0x2c(%esi),%eax
000022be	movl	%eax,0x3c(%esi)
000022c1	subl	%edi,%ecx
000022c3	decl	%ecx
000022c4	testl	%ecx,%ecx
000022c6	jle	0x000022e6
000022c8	shll	$0x02,%ecx
000022cb	movl	%ecx,0x08(%esp)
000022cf	leal	(%eax,%edi,4),%ecx
000022d2	movl	%ecx,0x04(%esp)
000022d6	leal	(%eax,%edx,4),%eax
000022d9	movl	%eax,(%esp)
000022dc	calll	_memmove
000022e1	movl	0xf0(%ebp),%eax
000022e4	movl	(%eax),%eax
000022e6	shll	$0x02,%edi
000022e9	addl	%eax,%edi
000022eb	movl	0xec(%ebp),%eax
000022ee	je	0x000022f2
000022f0	movl	%eax,(%edi)
000022f2	addl	$0x1c,%esp
000022f5	popl	%esi
000022f6	popl	%edi
000022f7	popl	%ebx
000022f8	popl	%ebp
000022f9	ret
000022fa	movl	%eax,%edi
000022fc	movl	%esi,(%esp)
000022ff	calll	operator delete(void*)
00002304	movl	%edi,(%esp)
00002307	calll	__Unwind_Resume
0000230c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::FindActor(char const*):
00002310	pushl	%ebp
00002311	movl	%esp,%ebp
00002313	pushl	%ebx
00002314	pushl	%edi
00002315	pushl	%esi
00002316	subl	$0x0c,%esp
00002319	xorl	%edi,%edi
0000231b	movl	0x08(%ebp),%ebx
0000231e	jmp	0x00002346
00002320	movl	0x18(%ebx),%eax
00002323	movl	(%eax,%edi,4),%esi
00002326	testl	%esi,%esi
00002328	je	0x00002345
0000232a	movl	%esi,(%esp)
0000232d	calll	CChoreoActor::GetName()
00002332	movl	0x0c(%ebp),%ecx
00002335	movl	%ecx,0x04(%esp)
00002339	movl	%eax,(%esp)
0000233c	calll	V_stricmp(char const*, char const*)
00002341	testl	%eax,%eax
00002343	je	0x0000234d
00002345	incl	%edi
00002346	cmpl	0x24(%ebx),%edi
00002349	jl	0x00002320
0000234b	xorl	%esi,%esi
0000234d	movl	%esi,%eax
0000234f	addl	$0x0c,%esp
00002352	popl	%esi
00002353	popl	%edi
00002354	popl	%ebx
00002355	popl	%ebp
00002356	ret
00002357	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetNumEvents():
00002360	movl	0x04(%esp),%eax
00002364	movl	0x10(%eax),%eax
00002367	ret
00002368	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetEvent(int):
00002370	xorl	%eax,%eax
00002372	movl	0x08(%esp),%ecx
00002376	testl	%ecx,%ecx
00002378	js	0x0000238b
0000237a	movl	0x04(%esp),%edx
0000237e	xorl	%eax,%eax
00002380	cmpl	%ecx,0x10(%edx)
00002383	jle	0x0000238b
00002385	movl	0x04(%edx),%eax
00002388	movl	(%eax,%ecx,4),%eax
0000238b	ret
0000238c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::GetNumActors():
00002390	movl	0x04(%esp),%eax
00002394	movl	0x24(%eax),%eax
00002397	ret
00002398	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetActor(int):
000023a0	xorl	%eax,%eax
000023a2	movl	0x08(%esp),%ecx
000023a6	testl	%ecx,%ecx
000023a8	js	0x000023bb
000023aa	movl	0x04(%esp),%edx
000023ae	xorl	%eax,%eax
000023b0	cmpl	%ecx,0x24(%edx)
000023b3	jle	0x000023bb
000023b5	movl	0x18(%edx),%eax
000023b8	movl	(%eax,%ecx,4),%eax
000023bb	ret
000023bc	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::GetNumChannels():
000023c0	movl	0x04(%esp),%eax
000023c4	movl	0x38(%eax),%eax
000023c7	ret
000023c8	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetChannel(int):
000023d0	xorl	%eax,%eax
000023d2	movl	0x08(%esp),%ecx
000023d6	testl	%ecx,%ecx
000023d8	js	0x000023eb
000023da	movl	0x04(%esp),%edx
000023de	xorl	%eax,%eax
000023e0	cmpl	%ecx,0x38(%edx)
000023e3	jle	0x000023eb
000023e5	movl	0x2c(%edx),%eax
000023e8	movl	(%eax,%ecx,4),%eax
000023eb	ret
000023ec	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::ParseRamp(ISceneTokenProcessor*, CChoreoEvent*):
000023f0	pushl	%ebp
000023f1	movl	%esp,%ebp
000023f3	subl	$0x18,%esp
000023f6	movl	0x0c(%ebp),%eax
000023f9	movl	%eax,0x08(%esp)
000023fd	movl	0x08(%ebp),%ecx
00002400	movl	%ecx,0x04(%esp)
00002404	addl	$0x5c,%eax
00002407	movl	%eax,(%esp)
0000240a	calll	CCurveData::Parse(ISceneTokenProcessor*, ICurveDataAccessor*)
0000240f	addl	$0x18,%esp
00002412	popl	%ebp
00002413	ret
00002414	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CCurveData::Parse(ISceneTokenProcessor*, ICurveDataAccessor*):
00002420	pushl	%ebp
00002421	movl	%esp,%ebp
00002423	pushl	%ebx
00002424	pushl	%edi
00002425	pushl	%esi
00002426	subl	$0x4c,%esp
00002429	calll	0x0000242e
0000242e	popl	%edi
0000242f	movl	%edi,0xc8(%ebp)
00002432	movl	0x08(%ebp),%esi
00002435	movl	%esi,(%esp)
00002438	calll	CCurveData::Clear()
0000243d	movl	0x0c(%ebp),%ebx
00002440	movl	(%ebx),%eax
00002442	movl	%ebx,(%esp)
00002445	movl	$0x00000001,0x04(%esp)
0000244d	call	*0x04(%eax)
00002450	movl	(%ebx),%eax
00002452	movl	%ebx,(%esp)
00002455	call	(%eax)
00002457	leal	0x68b9e-0x242e(%edi),%ecx
0000245d	movl	%ecx,0x04(%esp)
00002461	movl	%eax,(%esp)
00002464	calll	V_stricmp(char const*, char const*)
00002469	testl	%eax,%eax
0000246b	jne	0x000024c6
0000246d	movl	(%ebx),%eax
0000246f	movl	%ebx,(%esp)
00002472	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000247a	call	*0x04(%eax)
0000247d	movb	$0x01,0x14(%esi)
00002481	movl	(%ebx),%eax
00002483	movl	%ebx,(%esp)
00002486	call	(%eax)
00002488	movl	%eax,(%esp)
0000248b	calll	Interpolator_CurveTypeForName(char const*)
00002490	movw	%ax,0x15(%esi)
00002494	movl	(%ebx),%eax
00002496	movl	%ebx,(%esp)
00002499	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000024a1	call	*0x04(%eax)
000024a4	movl	(%ebx),%eax
000024a6	movl	%ebx,(%esp)
000024a9	call	(%eax)
000024ab	movl	%eax,(%esp)
000024ae	calll	_atof
000024b3	fstps	0x17(%esi)
000024b6	movl	(%ebx),%eax
000024b8	movl	%ebx,(%esp)
000024bb	movl	$0x00000001,0x04(%esp)
000024c3	call	*0x04(%eax)
000024c6	movl	(%ebx),%eax
000024c8	movl	%ebx,(%esp)
000024cb	call	(%eax)
000024cd	leal	0x68ba7-0x242e(%edi),%ecx
000024d3	movl	%ecx,0x04(%esp)
000024d7	movl	%eax,(%esp)
000024da	calll	V_stricmp(char const*, char const*)
000024df	testl	%eax,%eax
000024e1	jne	0x0000253c
000024e3	movl	(%ebx),%eax
000024e5	movl	%ebx,(%esp)
000024e8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000024f0	call	*0x04(%eax)
000024f3	movb	$0x01,0x1b(%esi)
000024f7	movl	(%ebx),%eax
000024f9	movl	%ebx,(%esp)
000024fc	call	(%eax)
000024fe	movl	%eax,(%esp)
00002501	calll	Interpolator_CurveTypeForName(char const*)
00002506	movw	%ax,0x1c(%esi)
0000250a	movl	(%ebx),%eax
0000250c	movl	%ebx,(%esp)
0000250f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002517	call	*0x04(%eax)
0000251a	movl	(%ebx),%eax
0000251c	movl	%ebx,(%esp)
0000251f	call	(%eax)
00002521	movl	%eax,(%esp)
00002524	calll	_atof
00002529	fstps	0x1e(%esi)
0000252c	movl	(%ebx),%eax
0000252e	movl	%ebx,(%esp)
00002531	movl	$0x00000001,0x04(%esp)
00002539	call	*0x04(%eax)
0000253c	movl	(%ebx),%eax
0000253e	movl	%ebx,(%esp)
00002541	call	(%eax)
00002543	leal	0x68bb1-0x242e(%edi),%ecx
00002549	movl	%ecx,0x04(%esp)
0000254d	movl	%eax,(%esp)
00002550	calll	_strcasecmp
00002555	testl	%eax,%eax
00002557	je	0x0000256b
00002559	movl	(%ebx),%eax
0000255b	leal	0x68bb3-0x242e(%edi),%ecx
00002561	movl	%ecx,0x04(%esp)
00002565	movl	%ebx,(%esp)
00002568	call	*0x0c(%eax)
0000256b	leal	0x68bd5-0x242e(%edi),%eax
00002571	movl	%eax,0xbc(%ebp)
00002574	jmp	0x00002608
00002579	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00002580	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
00002587	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
0000258b	movl	0x0c(%ebp),%ebx
0000258e	movl	0xc4(%ebp),%eax
00002591	jns	0x0000259e
00002593	movl	%eax,0xe8(%ebp)
00002596	movl	0x08(%ebp),%esi
00002599	movl	0xc8(%ebp),%edi
0000259c	jmp	0x00002608
0000259e	testl	%eax,%eax
000025a0	movl	0xc8(%ebp),%edi
000025a3	jne	0x000025db
000025a5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000025ac	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
000025b3	movl	0x08(%ebp),%esi
000025b6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000025bd	jmp	0x00002608
000025bf	movl	(%ebx),%eax
000025c1	movl	%ebx,(%esp)
000025c4	call	(%eax)
000025c6	movl	0xbc(%ebp),%ecx
000025c9	movl	%ecx,0x04(%esp)
000025cd	movl	%eax,(%esp)
000025d0	calll	V_stricmp(char const*, char const*)
000025d5	testl	%eax,%eax
000025d7	je	0x00002636
000025d9	jmp	0x0000264d
000025db	movl	%eax,(%esp)
000025de	calll	_free
000025e3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
000025ea	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
000025ee	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000025f5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
000025fc	movl	0x08(%ebp),%esi
000025ff	js	0x00002608
00002601	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00002608	movl	(%ebx),%eax
0000260a	movl	%ebx,(%esp)
0000260d	movl	$0x00000001,0x04(%esp)
00002615	call	*0x04(%eax)
00002618	movl	(%ebx),%eax
0000261a	movl	%ebx,(%esp)
0000261d	call	(%eax)
0000261f	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00002622	jne	0x000025bf
00002624	movl	(%ebx),%eax
00002626	leal	0x68bc0-0x242e(%edi),%ecx
0000262c	movl	%ecx,0x04(%esp)
00002630	movl	%ebx,(%esp)
00002633	call	*0x0c(%eax)
00002636	movl	0x10(%ebp),%eax
00002639	movl	%eax,0x04(%esp)
0000263d	movl	%esi,(%esp)
00002640	calll	CCurveData::Resort(ICurveDataAccessor*)
00002645	addl	$0x4c,%esp
00002648	popl	%esi
00002649	popl	%edi
0000264a	popl	%ebx
0000264b	popl	%ebp
0000264c	ret
0000264d	xorps	%xmm0,%xmm0
00002650	movaps	%xmm0,0xd8(%ebp)
00002654	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
0000265b	movl	(%ebx),%eax
0000265d	movl	(%eax),%eax
0000265f	xorl	%esi,%esi
00002661	movl	%ebx,(%esp)
00002664	call	*%eax
00002666	movl	%eax,(%esp)
00002669	calll	_atof
0000266e	fstps	0xd4(%ebp)
00002671	movl	(%ebx),%eax
00002673	movl	0x04(%eax),%eax
00002676	xorl	%esi,%esi
00002678	movss	0xd4(%ebp),%xmm0
0000267d	movss	%xmm0,0xc4(%ebp)
00002682	movl	%ebx,(%esp)
00002685	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000268d	call	*%eax
0000268f	movl	(%ebx),%eax
00002691	movl	(%eax),%eax
00002693	xorl	%esi,%esi
00002695	movl	%ebx,(%esp)
00002698	call	*%eax
0000269a	movl	%eax,(%esp)
0000269d	calll	_atof
000026a2	leal	0xd8(%ebp),%eax
000026a5	movl	%eax,(%esp)
000026a8	fstps	0xd0(%ebp)
000026ab	movl	$0x00000001,0x04(%esp)
000026b3	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
000026b8	movl	0xd8(%ebp),%esi
000026bb	movl	0xe4(%ebp),%eax
000026be	leal	0x01(%eax),%ecx
000026c1	movl	%ecx,0xcc(%ebp)
000026c4	movl	%ecx,0xe4(%ebp)
000026c7	movl	%esi,0xe8(%ebp)
000026ca	movss	0xd0(%ebp),%xmm0
000026cf	movss	%xmm0,0xc0(%ebp)
000026d4	testl	%eax,%eax
000026d6	jle	0x000026ee
000026d8	movl	%esi,0x04(%esp)
000026dc	imull	$0x0a,%eax,%eax
000026df	movl	%eax,0x08(%esp)
000026e3	leal	0x0a(%esi),%eax
000026e6	movl	%eax,(%esp)
000026e9	calll	_memmove
000026ee	testl	%esi,%esi
000026f0	je	0x00002705
000026f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%esi)
000026f8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esi)
000026ff	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esi)
00002705	leal	0x04(%esi),%eax
00002708	movl	%esi,%ecx
0000270a	movss	0xc4(%ebp),%xmm0
0000270f	movss	%xmm0,(%eax)
00002713	movss	0xc0(%ebp),%xmm0
00002718	movss	%xmm0,(%ecx)
0000271c	movl	(%ebx),%eax
0000271e	movl	0x08(%eax),%eax
00002721	movl	%ebx,(%esp)
00002724	call	*%eax
00002726	cmpb	$0x01,%al
00002728	jne	0x0000275c
0000272a	movl	(%ebx),%eax
0000272c	movl	0x04(%eax),%eax
0000272f	movl	%ebx,(%esp)
00002732	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000273a	call	*%eax
0000273c	movl	(%ebx),%eax
0000273e	movl	(%eax),%eax
00002740	movl	%ebx,(%esp)
00002743	call	*%eax
00002745	movl	%eax,(%esp)
00002748	calll	Interpolator_CurveTypeForName(char const*)
0000274d	addl	%eax,%eax
0000274f	movzwl	0x08(%esi),%ecx
00002753	andl	$0x01,%ecx
00002756	orl	%eax,%ecx
00002758	movw	%cx,0x08(%esi)
0000275c	movl	$0xffffffff,%ebx
00002761	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xcc(%ebp)
00002765	movl	%esi,%edi
00002767	movl	%esi,0xc4(%ebp)
0000276a	jle	0x00002580
00002770	incl	%ebx
00002771	cmpl	0xcc(%ebp),%ebx
00002774	jge	0x00002580
0000277a	movzwl	0x08(%edi),%esi
0000277e	movl	(%edi),%ecx
00002780	movl	0x04(%edi),%eax
00002783	movl	%ecx,0x08(%esp)
00002787	movl	%eax,0x04(%esp)
0000278b	movl	0x08(%ebp),%eax
0000278e	movl	%eax,(%esp)
00002791	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
00002799	calll	CCurveData::Add(float, float, bool)
0000279e	addl	$0x0a,%edi
000027a1	movzwl	0x08(%eax),%ecx
000027a5	andl	$0x01,%ecx
000027a8	andl	$0x0000fffe,%esi
000027ae	orl	%ecx,%esi
000027b0	movw	%si,0x08(%eax)
000027b4	jmp	0x00002770
000027b6	movl	%eax,%edi
000027b8	movl	0xc4(%ebp),%esi
000027bb	jmp	0x000027bf
000027bd	movl	%eax,%edi
000027bf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
000027c6	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
000027ca	jns	0x000027d7
000027cc	movl	%esi,0xe8(%ebp)
000027cf	movl	%edi,(%esp)
000027d2	calll	__Unwind_Resume
000027d7	testl	%esi,%esi
000027d9	jne	0x000027eb
000027db	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000027e2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
000027e9	jmp	0x0000280e
000027eb	movl	%esi,(%esp)
000027ee	calll	_free
000027f3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
000027fa	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
000027fe	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00002805	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
0000280c	js	0x000027cf
0000280e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00002815	movl	%edi,(%esp)
00002818	calll	__Unwind_Resume
0000281d	nopl	(%eax)
CChoreoScene::ParseSceneRamp(ISceneTokenProcessor*, CChoreoScene*):
00002820	pushl	%ebp
00002821	movl	%esp,%ebp
00002823	subl	$0x18,%esp
00002826	movl	0x0c(%ebp),%eax
00002829	movl	%eax,0x08(%esp)
0000282d	movl	0x08(%ebp),%ecx
00002830	movl	%ecx,0x04(%esp)
00002834	addl	$0x0000012c,%eax
00002839	movl	%eax,(%esp)
0000283c	calll	CCurveData::Parse(ISceneTokenProcessor*, ICurveDataAccessor*)
00002841	addl	$0x18,%esp
00002844	popl	%ebp
00002845	ret
00002846	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseEdgeInfo(ISceneTokenProcessor*, EdgeInfo_t*):
00002850	pushl	%ebp
00002851	movl	%esp,%ebp
00002853	pushl	%edi
00002854	pushl	%esi
00002855	subl	$0x10,%esp
00002858	movl	0x08(%ebp),%esi
0000285b	movl	(%esi),%eax
0000285d	movl	%esi,(%esp)
00002860	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002868	call	*0x04(%eax)
0000286b	movl	0x0c(%ebp),%edi
0000286e	movb	$0x01,(%edi)
00002871	movl	(%esi),%eax
00002873	movl	%esi,(%esp)
00002876	call	(%eax)
00002878	movl	%eax,(%esp)
0000287b	calll	Interpolator_CurveTypeForName(char const*)
00002880	movw	%ax,0x01(%edi)
00002884	movl	(%esi),%eax
00002886	movl	%esi,(%esp)
00002889	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002891	call	*0x04(%eax)
00002894	movl	(%esi),%eax
00002896	movl	%esi,(%esp)
00002899	call	(%eax)
0000289b	movl	%eax,(%esp)
0000289e	calll	_atof
000028a3	fstps	0x03(%edi)
000028a6	movl	(%esi),%eax
000028a8	movl	%esi,(%esp)
000028ab	movl	$0x00000001,0x04(%esp)
000028b3	call	*0x04(%eax)
000028b6	addl	$0x10,%esp
000028b9	popl	%esi
000028ba	popl	%edi
000028bb	popl	%ebp
000028bc	ret
000028bd	nopl	(%eax)
CChoreoScene::ParseFlexAnimations(ISceneTokenProcessor*, CChoreoEvent*, bool):
000028c0	pushl	%ebp
000028c1	movl	%esp,%ebp
000028c3	pushl	%ebx
000028c4	pushl	%edi
000028c5	pushl	%esi
000028c6	subl	$0x0000014c,%esp
000028cc	calll	0x000028d1
000028d1	popl	%edi
000028d2	movl	%edi,0xfffffee0(%ebp)
000028d8	movl	0x758ea-0x28d1(%edi),%eax
000028de	movl	%eax,0xfffffebc(%ebp)
000028e4	movl	(%eax),%eax
000028e6	movl	%eax,0xf0(%ebp)
000028e9	movl	0x0c(%ebp),%ebx
000028ec	movb	0x10(%ebp),%al
000028ef	testb	%al,%al
000028f1	je	0x0000290b
000028f3	movl	%ebx,(%esp)
000028f6	calll	CChoreoEvent::RemoveAllTracks()
000028fb	movl	%ebx,(%esp)
000028fe	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002906	calll	CChoreoEvent::SetTrackLookupSet(bool)
0000290b	movl	0x08(%ebp),%esi
0000290e	movl	(%esi),%eax
00002910	movl	%esi,(%esp)
00002913	movl	$0x00000001,0x04(%esp)
0000291b	call	*0x04(%eax)
0000291e	movl	%ebx,(%esp)
00002921	calll	CChoreoEvent::GetEndTime()
00002926	fstpt	0xffffff14(%ebp)
0000292c	movl	%ebx,(%esp)
0000292f	calll	CChoreoEvent::GetStartTime()
00002934	fstpt	0xffffff08(%ebp)
0000293a	movl	(%esi),%eax
0000293c	movl	%esi,(%esp)
0000293f	call	(%eax)
00002941	leal	0x68bd7-0x28d1(%edi),%ecx
00002947	movl	%ecx,0x04(%esp)
0000294b	movl	%eax,(%esp)
0000294e	fldt	0xffffff14(%ebp)
00002954	fstps	0xffffff34(%ebp)
0000295a	fldt	0xffffff08(%ebp)
00002960	fstps	0xffffff30(%ebp)
00002966	movss	0xffffff34(%ebp),%xmm0
0000296e	subss	0xffffff30(%ebp),%xmm0
00002976	movss	%xmm0,0xfffffee8(%ebp)
0000297e	calll	V_stricmp(char const*, char const*)
00002983	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffef3(%ebp)
0000298a	testl	%eax,%eax
0000298c	jne	0x000029a5
0000298e	movl	(%esi),%eax
00002990	movl	%esi,(%esp)
00002993	movl	$0x00000001,0x04(%esp)
0000299b	call	*0x04(%eax)
0000299e	movb	$0x01,0xfffffef3(%ebp)
000029a5	movl	(%esi),%eax
000029a7	movl	%esi,(%esp)
000029aa	call	(%eax)
000029ac	leal	0x68be8-0x28d1(%edi),%ecx
000029b2	movl	%ecx,0x04(%esp)
000029b6	movl	%eax,(%esp)
000029b9	movl	$0x00000010,0x08(%esp)
000029c1	calll	V_strnicmp(char const*, char const*, int)
000029c6	xorl	%ecx,%ecx
000029c8	movl	%ecx,0xfffffeec(%ebp)
000029ce	testl	%eax,%eax
000029d0	jne	0x00002a73
000029d6	movl	(%esi),%eax
000029d8	movl	%esi,(%esp)
000029db	call	(%eax)
000029dd	movl	%esi,%ebx
000029df	movl	%eax,%esi
000029e1	movb	0x10(%esi),%al
000029e4	testb	%al,%al
000029e6	je	0x000029ed
000029e8	addl	$0x10,%esi
000029eb	jmp	0x00002a08
000029ed	movl	(%ebx),%eax
000029ef	movl	%ebx,(%esp)
000029f2	movl	$0x00000001,0x04(%esp)
000029fa	call	*0x04(%eax)
000029fd	movl	(%ebx),%eax
000029ff	movl	%ebx,(%esp)
00002a02	call	(%eax)
00002a04	movl	%eax,%esi
00002a06	movb	(%esi),%al
00002a08	cmpb	$0x3d,%al
00002a0a	je	0x00002a1e
00002a0c	movl	(%ebx),%eax
00002a0e	leal	0x68bf9-0x28d1(%edi),%ecx
00002a14	movl	%ecx,0x04(%esp)
00002a18	movl	%ebx,(%esp)
00002a1b	call	*0x0c(%eax)
00002a1e	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x01(%esi)
00002a22	je	0x00002a27
00002a24	incl	%esi
00002a25	jmp	0x00002a40
00002a27	movl	(%ebx),%eax
00002a29	movl	%ebx,(%esp)
00002a2c	movl	$0x00000001,0x04(%esp)
00002a34	call	*0x04(%eax)
00002a37	movl	(%ebx),%eax
00002a39	movl	%ebx,(%esp)
00002a3c	call	(%eax)
00002a3e	movl	%eax,%esi
00002a40	movl	%esi,(%esp)
00002a43	calll	Interpolator_CurveTypeForName(char const*)
00002a48	movl	%eax,%esi
00002a4a	movl	(%ebx),%eax
00002a4c	movl	%ebx,(%esp)
00002a4f	movl	$0x00000001,0x04(%esp)
00002a57	call	*0x04(%eax)
00002a5a	movl	%esi,0x04(%esp)
00002a5e	movl	0x0c(%ebp),%eax
00002a61	movl	%eax,(%esp)
00002a64	calll	CChoreoEvent::SetDefaultCurveType(int)
00002a69	addl	%esi,%esi
00002a6b	movl	%esi,0xfffffeec(%ebp)
00002a71	movl	%ebx,%esi
00002a73	movl	(%esi),%eax
00002a75	movl	%esi,(%esp)
00002a78	call	(%eax)
00002a7a	leal	0x68bb1-0x28d1(%edi),%ecx
00002a80	movl	%ecx,0xfffffed4(%ebp)
00002a86	movl	%ecx,0x04(%esp)
00002a8a	movl	%eax,(%esp)
00002a8d	calll	_strcasecmp
00002a92	testl	%eax,%eax
00002a94	je	0x00002aa8
00002a96	movl	(%esi),%eax
00002a98	leal	0x68bb3-0x28d1(%edi),%ecx
00002a9e	movl	%ecx,0x04(%esp)
00002aa2	movl	%esi,(%esp)
00002aa5	call	*0x0c(%eax)
00002aa8	leal	0x68bd5-0x28d1(%edi),%eax
00002aae	movl	%eax,0xfffffef4(%ebp)
00002ab4	movss	0x655f8-0x28d1(%edi),%xmm0
00002abc	movss	%xmm0,0xfffffec0(%ebp)
00002ac4	jmp	0x00002b16
00002ac6	testl	%eax,%eax
00002ac8	je	0x00002adc
00002aca	movl	%eax,(%esp)
00002acd	calll	_free
00002ad2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff38(%ebp)
00002adc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff3c(%ebp)
00002ae6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff48(%ebp)
00002af0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff3c(%ebp)
00002afa	movl	%esi,(%esp)
00002afd	calll	__Unwind_Resume
00002b02	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00002b10	movl	%eax,0xffffff48(%ebp)
00002b16	movl	(%esi),%eax
00002b18	movl	%esi,(%esp)
00002b1b	movl	$0x00000001,0x04(%esp)
00002b23	call	*0x04(%eax)
00002b26	movl	(%esi),%eax
00002b28	movl	%esi,(%esp)
00002b2b	call	(%eax)
00002b2d	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00002b30	je	0x00002e4e
00002b36	movl	(%esi),%eax
00002b38	movl	%esi,(%esp)
00002b3b	call	(%eax)
00002b3d	movl	0xfffffef4(%ebp),%ecx
00002b43	movl	%ecx,0x04(%esp)
00002b47	movl	%eax,(%esp)
00002b4a	calll	V_stricmp(char const*, char const*)
00002b4f	testl	%eax,%eax
00002b51	je	0x00002e60
00002b57	movl	(%esi),%eax
00002b59	movl	%esi,(%esp)
00002b5c	call	(%eax)
00002b5e	movl	%eax,0x04(%esp)
00002b62	leal	0xffffff70(%ebp),%eax
00002b68	movl	%eax,(%esp)
00002b6b	movl	$0x00000080,0x08(%esp)
00002b73	calll	V_strncpy(char*, char const*, int)
00002b78	movl	(%esi),%eax
00002b7a	movl	%esi,(%esp)
00002b7d	movl	$0x00000001,0x04(%esp)
00002b85	call	*0x04(%eax)
00002b88	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff64(%ebp)
00002b92	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff60(%ebp)
00002b9c	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff68(%ebp)
00002ba5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff6a(%ebp)
00002baf	movl	(%esi),%eax
00002bb1	movl	%esi,(%esp)
00002bb4	call	(%eax)
00002bb6	leal	0x68c25-0x28d1(%edi),%ecx
00002bbc	movl	%ecx,0x04(%esp)
00002bc0	movl	%eax,(%esp)
00002bc3	calll	V_stricmp(char const*, char const*)
00002bc8	movb	$0x01,0xfffffed3(%ebp)
00002bcf	testl	%eax,%eax
00002bd1	jne	0x00002bea
00002bd3	movl	(%esi),%eax
00002bd5	movl	%esi,(%esp)
00002bd8	movl	$0x00000001,0x04(%esp)
00002be0	call	*0x04(%eax)
00002be3	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffed3(%ebp)
00002bea	movl	(%esi),%eax
00002bec	movl	%esi,(%esp)
00002bef	call	(%eax)
00002bf1	leal	0x68c2e-0x28d1(%edi),%ecx
00002bf7	movl	%ecx,0x04(%esp)
00002bfb	movl	%eax,(%esp)
00002bfe	calll	V_stricmp(char const*, char const*)
00002c03	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffedb(%ebp)
00002c0a	testl	%eax,%eax
00002c0c	jne	0x00002c25
00002c0e	movl	(%esi),%eax
00002c10	movl	%esi,(%esp)
00002c13	movl	$0x00000001,0x04(%esp)
00002c1b	call	*0x04(%eax)
00002c1e	movb	$0x01,0xfffffedb(%ebp)
00002c25	movl	(%esi),%eax
00002c27	movl	%esi,(%esp)
00002c2a	call	(%eax)
00002c2c	leal	0x68c34-0x28d1(%edi),%ecx
00002c32	movl	%ecx,0x04(%esp)
00002c36	movl	%eax,(%esp)
00002c39	calll	V_stricmp(char const*, char const*)
00002c3e	pxor	%xmm1,%xmm1
00002c42	testl	%eax,%eax
00002c44	movss	0xfffffec0(%ebp),%xmm0
00002c4c	jne	0x00002cd4
00002c52	movl	(%esi),%eax
00002c54	movl	%esi,(%esp)
00002c57	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002c5f	call	*0x04(%eax)
00002c62	movl	(%esi),%eax
00002c64	movl	%esi,(%esp)
00002c67	call	(%eax)
00002c69	movl	%eax,(%esp)
00002c6c	calll	_atof
00002c71	fstpt	0xffffff14(%ebp)
00002c77	movl	(%esi),%eax
00002c79	movl	%esi,(%esp)
00002c7c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002c84	call	*0x04(%eax)
00002c87	movl	(%esi),%eax
00002c89	movl	%esi,(%esp)
00002c8c	call	(%eax)
00002c8e	movl	%eax,(%esp)
00002c91	calll	_atof
00002c96	fstpt	0xffffff08(%ebp)
00002c9c	movl	(%esi),%eax
00002c9e	movl	%esi,(%esp)
00002ca1	movl	$0x00000001,0x04(%esp)
00002ca9	call	*0x04(%eax)
00002cac	fldt	0xffffff14(%ebp)
00002cb2	fstps	0xffffff2c(%ebp)
00002cb8	fldt	0xffffff08(%ebp)
00002cbe	fstps	0xffffff28(%ebp)
00002cc4	movss	0xffffff2c(%ebp),%xmm1
00002ccc	movss	0xffffff28(%ebp),%xmm0
00002cd4	movss	%xmm1,0xfffffec8(%ebp)
00002cdc	movss	%xmm0,0xfffffecc(%ebp)
00002ce4	movl	(%esi),%eax
00002ce6	movl	%esi,(%esp)
00002ce9	call	(%eax)
00002ceb	leal	0x68b9e-0x28d1(%edi),%ecx
00002cf1	movl	%ecx,0x04(%esp)
00002cf5	movl	%eax,(%esp)
00002cf8	calll	V_stricmp(char const*, char const*)
00002cfd	testl	%eax,%eax
00002cff	jne	0x00002d63
00002d01	movl	(%esi),%eax
00002d03	movl	%esi,(%esp)
00002d06	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002d0e	call	*0x04(%eax)
00002d11	movb	$0x01,0xffffff60(%ebp)
00002d18	movl	(%esi),%eax
00002d1a	movl	%esi,(%esp)
00002d1d	call	(%eax)
00002d1f	movl	%eax,(%esp)
00002d22	calll	Interpolator_CurveTypeForName(char const*)
00002d27	movw	%ax,0xffffff61(%ebp)
00002d2e	movl	(%esi),%eax
00002d30	movl	%esi,(%esp)
00002d33	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002d3b	call	*0x04(%eax)
00002d3e	movl	(%esi),%eax
00002d40	movl	%esi,(%esp)
00002d43	call	(%eax)
00002d45	movl	%eax,(%esp)
00002d48	calll	_atof
00002d4d	fstps	0xffffff63(%ebp)
00002d53	movl	(%esi),%eax
00002d55	movl	%esi,(%esp)
00002d58	movl	$0x00000001,0x04(%esp)
00002d60	call	*0x04(%eax)
00002d63	movl	(%esi),%eax
00002d65	movl	%esi,(%esp)
00002d68	call	(%eax)
00002d6a	leal	0x68ba7-0x28d1(%edi),%ecx
00002d70	movl	%ecx,0x04(%esp)
00002d74	movl	%eax,(%esp)
00002d77	calll	V_stricmp(char const*, char const*)
00002d7c	testl	%eax,%eax
00002d7e	jne	0x00002de2
00002d80	movl	(%esi),%eax
00002d82	movl	%esi,(%esp)
00002d85	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002d8d	call	*0x04(%eax)
00002d90	movb	$0x01,0xffffff67(%ebp)
00002d97	movl	(%esi),%eax
00002d99	movl	%esi,(%esp)
00002d9c	call	(%eax)
00002d9e	movl	%eax,(%esp)
00002da1	calll	Interpolator_CurveTypeForName(char const*)
00002da6	movw	%ax,0xffffff68(%ebp)
00002dad	movl	(%esi),%eax
00002daf	movl	%esi,(%esp)
00002db2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00002dba	call	*0x04(%eax)
00002dbd	movl	(%esi),%eax
00002dbf	movl	%esi,(%esp)
00002dc2	call	(%eax)
00002dc4	movl	%eax,(%esp)
00002dc7	calll	_atof
00002dcc	fstps	0xffffff6a(%ebp)
00002dd2	movl	(%esi),%eax
00002dd4	movl	%esi,(%esp)
00002dd7	movl	$0x00000001,0x04(%esp)
00002ddf	call	*0x04(%eax)
00002de2	xorps	%xmm0,%xmm0
00002de5	movaps	%xmm0,0xffffff38(%ebp)
00002dec	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff4c(%ebp)
00002df6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff48(%ebp)
00002e00	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff5c(%ebp)
00002e0a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff58(%ebp)
00002e14	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff54(%ebp)
00002e1e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff50(%ebp)
00002e28	movzbl	0xfffffedb(%ebp),%eax
00002e2f	movl	%eax,0xfffffec4(%ebp)
00002e35	leal	0x01(%eax),%eax
00002e38	movl	%eax,0xfffffedc(%ebp)
00002e3e	xorl	%eax,%eax
00002e40	cmpl	0xfffffedc(%ebp),%eax
00002e46	jge	0x00003154
00002e4c	jmp	0x00002e7c
00002e4e	movl	(%esi),%eax
00002e50	leal	0x68c06-0x28d1(%edi),%ecx
00002e56	movl	%ecx,0x04(%esp)
00002e5a	movl	%esi,(%esp)
00002e5d	call	*0x0c(%eax)
00002e60	movl	0xfffffebc(%ebp),%eax
00002e66	movl	(%eax),%eax
00002e68	cmpl	0xf0(%ebp),%eax
00002e6b	jne	0x00003473
00002e71	addl	$0x0000014c,%esp
00002e77	popl	%esi
00002e78	popl	%edi
00002e79	popl	%ebx
00002e7a	popl	%ebp
00002e7b	ret
00002e7c	movl	%eax,0xfffffee4(%ebp)
00002e82	movl	(%esi),%eax
00002e84	movl	(%eax),%eax
00002e86	movl	%esi,(%esp)
00002e89	call	*%eax
00002e8b	movl	0xfffffed4(%ebp),%ecx
00002e91	movl	%ecx,0x04(%esp)
00002e95	movl	%eax,(%esp)
00002e98	calll	_strcasecmp
00002e9d	testl	%eax,%eax
00002e9f	jne	0x00002f73
00002ea5	imull	$0x14,0xfffffee4(%ebp),%eax
00002eac	leal	0xffffff48(%ebp,%eax),%ecx
00002eb3	movl	%ecx,0xffffff00(%ebp)
00002eb9	leal	0xffffff3c(%ebp,%eax),%ecx
00002ec0	movl	%ecx,0xfffffefc(%ebp)
00002ec6	leal	0xffffff44(%ebp,%eax),%ecx
00002ecd	movl	%ecx,0xfffffef8(%ebp)
00002ed3	leal	0xffffff38(%ebp,%eax),%eax
00002eda	movl	%eax,0xffffff14(%ebp)
00002ee0	jmp	0x00002f03
00002ee2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00002ef0	movzwl	0x08(%edi,%ebx),%eax
00002ef5	andl	$0x01,%eax
00002ef8	orl	0xfffffeec(%ebp),%eax
00002efe	movw	%ax,0x08(%edi,%ebx)
00002f03	movl	(%esi),%eax
00002f05	movl	0x04(%eax),%eax
00002f08	movl	%esi,(%esp)
00002f0b	movl	$0x00000001,0x04(%esp)
00002f13	call	*%eax
00002f15	movl	(%esi),%eax
00002f17	movl	(%eax),%eax
00002f19	movl	%esi,(%esp)
00002f1c	call	*%eax
00002f1e	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00002f21	jne	0x00002fc2
00002f27	movl	(%esi),%eax
00002f29	movl	0x0c(%eax),%eax
00002f2c	movl	0xfffffee0(%ebp),%ecx
00002f32	leal	0x68c06-0x28d1(%ecx),%ecx
00002f38	movl	%ecx,0x04(%esp)
00002f3c	movl	%esi,(%esp)
00002f3f	call	*%eax
00002f41	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffee4(%ebp)
00002f48	sete	%al
00002f4b	andb	0xfffffedb(%ebp),%al
00002f51	cmpb	$0x01,%al
00002f53	jne	0x00002f67
00002f55	movl	(%esi),%eax
00002f57	movl	0x04(%eax),%eax
00002f5a	movl	%esi,(%esp)
00002f5d	movl	$0x00000001,0x04(%esp)
00002f65	call	*%eax
00002f67	movl	0xfffffee4(%ebp),%eax
00002f6d	incl	%eax
00002f6e	jmp	0x00002e40
00002f73	movl	(%esi),%eax
00002f75	movl	0x0c(%eax),%eax
00002f78	movl	0xfffffee0(%ebp),%ecx
00002f7e	leal	0x68bb3-0x28d1(%ecx),%ecx
00002f84	movl	%ecx,0x04(%esp)
00002f88	movl	%esi,(%esp)
00002f8b	call	*%eax
00002f8d	jmp	0x00002ea5
00002f92	jmp	0x00002f98
00002f94	jmp	0x00002f98
00002f96	jmp	0x00002f98
00002f98	movl	%eax,%esi
00002f9a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff58(%ebp)
00002fa4	movl	0xffffff4c(%ebp),%eax
00002faa	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff54(%ebp)
00002fb1	jns	0x00003414
00002fb7	movl	%eax,0xffffff5c(%ebp)
00002fbd	jmp	0x00003448
00002fc2	movl	(%esi),%eax
00002fc4	movl	(%eax),%eax
00002fc6	movl	%esi,(%esp)
00002fc9	call	*%eax
00002fcb	movl	0xfffffef4(%ebp),%ecx
00002fd1	movl	%ecx,0x04(%esp)
00002fd5	movl	%eax,(%esp)
00002fd8	calll	V_stricmp(char const*, char const*)
00002fdd	testl	%eax,%eax
00002fdf	je	0x00002f41
00002fe5	movl	(%esi),%eax
00002fe7	movl	(%eax),%eax
00002fe9	movl	%esi,(%esp)
00002fec	call	*%eax
00002fee	movl	%eax,(%esp)
00002ff1	calll	_atof
00002ff6	fstps	0xffffff24(%ebp)
00002ffc	movl	(%esi),%eax
00002ffe	movl	0x04(%eax),%eax
00003001	movss	0xffffff24(%ebp),%xmm0
00003009	movss	%xmm0,0xffffff08(%ebp)
00003011	movl	%esi,(%esp)
00003014	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000301c	call	*%eax
0000301e	movl	(%esi),%eax
00003020	movl	(%eax),%eax
00003022	movl	%esi,(%esp)
00003025	call	*%eax
00003027	movl	%eax,(%esp)
0000302a	calll	_atof
0000302f	fstps	0xffffff20(%ebp)
00003035	movl	0xfffffefc(%ebp),%eax
0000303b	movl	(%eax),%ecx
0000303d	movl	0xfffffef8(%ebp),%esi
00003043	movl	(%esi),%ebx
00003045	leal	0x01(%ebx),%edx
00003048	movss	0xffffff20(%ebp),%xmm0
00003050	movss	%xmm0,0xffffff04(%ebp)
00003058	cmpl	%ecx,%edx
0000305a	movl	%ebx,%eax
0000305c	movl	0xffffff14(%ebp),%edi
00003062	jle	0x00003080
00003064	movl	%edx,%eax
00003066	subl	%ecx,%eax
00003068	movl	%eax,0x04(%esp)
0000306c	movl	%edi,(%esp)
0000306f	movl	%edx,%edi
00003071	calll	CUtlMemory<CExpressionSample, int>::Grow(int)
00003076	movl	%edi,%edx
00003078	movl	0xffffff14(%ebp),%edi
0000307e	movl	(%esi),%eax
00003080	incl	%eax
00003081	movl	%eax,(%esi)
00003083	movl	(%edi),%edi
00003085	movl	0xffffff00(%ebp),%ecx
0000308b	movl	%edi,(%ecx)
0000308d	subl	%ebx,%eax
0000308f	decl	%eax
00003090	testl	%eax,%eax
00003092	jg	0x0000309b
00003094	imull	$0x0a,%ebx,%esi
00003097	addl	%edi,%esi
00003099	jmp	0x000030b8
0000309b	imull	$0x0a,%eax,%eax
0000309e	movl	%eax,0x08(%esp)
000030a2	imull	$0x0a,%ebx,%esi
000030a5	addl	%edi,%esi
000030a7	movl	%esi,0x04(%esp)
000030ab	imull	$0x0a,%edx,%eax
000030ae	addl	%edi,%eax
000030b0	movl	%eax,(%esp)
000030b3	calll	_memmove
000030b8	testl	%esi,%esi
000030ba	movss	0xffffff08(%ebp),%xmm0
000030c2	je	0x000030dc
000030c4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%esi)
000030ca	imull	$0x0a,%ebx,%eax
000030cd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%edi,%eax)
000030d5	movw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%edi,%eax)
000030dc	cmpb	$0x01,0xfffffef3(%ebp)
000030e3	je	0x000030ed
000030e5	mulss	0xfffffee8(%ebp),%xmm0
000030ed	imull	$0x0a,%ebx,%eax
000030f0	movss	%xmm0,0x04(%edi,%eax)
000030f6	movl	0x08(%ebp),%esi
000030f9	imull	$0x0a,%ebx,%ebx
000030fc	movss	0xffffff04(%ebp),%xmm0
00003104	movss	%xmm0,(%edi,%ebx)
00003109	movl	(%esi),%eax
0000310b	movl	0x08(%eax),%eax
0000310e	movl	%esi,(%esp)
00003111	call	*%eax
00003113	cmpb	$0x01,%al
00003115	jne	0x00002ef0
0000311b	movl	(%esi),%eax
0000311d	movl	0x04(%eax),%eax
00003120	movl	%esi,(%esp)
00003123	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000312b	call	*%eax
0000312d	movl	(%esi),%eax
0000312f	movl	(%eax),%eax
00003131	movl	%esi,(%esp)
00003134	call	*%eax
00003136	movl	%eax,(%esp)
00003139	calll	Interpolator_CurveTypeForName(char const*)
0000313e	movzwl	0x08(%edi,%ebx),%ecx
00003143	andl	$0x01,%ecx
00003146	addl	%eax,%eax
00003148	orl	%ecx,%eax
0000314a	movw	%ax,0x08(%edi,%ebx)
0000314f	jmp	0x00002f03
00003154	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffed3(%ebp)
0000315b	jne	0x0000316a
0000315d	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff44(%ebp)
00003164	jle	0x0000335d
0000316a	leal	0xffffff70(%ebp),%eax
00003170	movl	%eax,0x04(%esp)
00003174	movl	0x0c(%ebp),%eax
00003177	movl	%eax,(%esp)
0000317a	calll	CChoreoEvent::AddTrack(char const*)
0000317f	movl	%eax,0xffffff08(%ebp)
00003185	movzbl	0xfffffed3(%ebp),%eax
0000318c	movl	%eax,0x04(%esp)
00003190	movl	0xffffff08(%ebp),%eax
00003196	movl	%eax,(%esp)
00003199	calll	CFlexAnimationTrack::SetTrackActive(bool)
0000319e	movl	0xfffffec4(%ebp),%eax
000031a4	movl	%eax,0x04(%esp)
000031a8	movl	0xffffff08(%ebp),%eax
000031ae	movl	%eax,(%esp)
000031b1	calll	CFlexAnimationTrack::SetComboType(bool)
000031b6	movss	0xfffffec8(%ebp),%xmm0
000031be	movss	%xmm0,0x04(%esp)
000031c4	movl	0xffffff08(%ebp),%eax
000031ca	movl	%eax,(%esp)
000031cd	calll	CFlexAnimationTrack::SetMin(float)
000031d2	xorl	%edi,%edi
000031d4	movss	0xfffffecc(%ebp),%xmm0
000031dc	movss	%xmm0,0x04(%esp)
000031e2	movl	0xffffff08(%ebp),%eax
000031e8	movl	%eax,(%esp)
000031eb	calll	CFlexAnimationTrack::SetMax(float)
000031f0	xorl	%ecx,%ecx
000031f2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003200	movl	%ecx,0xfffffefc(%ebp)
00003206	cmpl	0xfffffedc(%ebp),%ecx
0000320c	jge	0x0000324f
0000320e	imull	$0x14,%ecx,%eax
00003211	movl	0xffffff44(%ebp,%eax),%edx
00003218	movl	%edx,0xffffff04(%ebp)
0000321e	leal	0xffffff38(%ebp,%eax),%eax
00003225	movl	%eax,0xffffff00(%ebp)
0000322b	movl	$0x00000008,0xffffff14(%ebp)
00003235	movl	$0xffffffff,%edi
0000323a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003240	incl	%edi
00003241	cmpl	0xffffff04(%ebp),%edi
00003247	jge	0x00003326
0000324d	jmp	0x000032c3
0000324f	leal	0xffffff60(%ebp),%ebx
00003255	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003260	cmpl	$0x01,%edi
00003263	jg	0x00003331
00003269	testb	$0x01,(%ebx)
0000326c	je	0x000032bd
0000326e	movl	0xffffff08(%ebp),%eax
00003274	movl	%eax,(%esp)
00003277	testl	%edi,%edi
00003279	sete	%al
0000327c	movzbl	%al,%eax
0000327f	movl	%eax,0x04(%esp)
00003283	movl	$0x00000001,0x08(%esp)
0000328b	calll	CFlexAnimationTrack::SetEdgeActive(bool, bool)
00003290	movzwl	0x01(%ebx),%eax
00003294	movss	0x03(%ebx),%xmm0
00003299	movss	%xmm0,0x0c(%esp)
0000329f	movl	%eax,0x08(%esp)
000032a3	testl	%edi,%edi
000032a5	sete	%al
000032a8	movzbl	%al,%eax
000032ab	movl	%eax,0x04(%esp)
000032af	movl	0xffffff08(%ebp),%eax
000032b5	movl	%eax,(%esp)
000032b8	calll	CFlexAnimationTrack::SetEdgeInfo(bool, int, float)
000032bd	addl	$0x07,%ebx
000032c0	incl	%edi
000032c1	jmp	0x00003260
000032c3	movl	0xffffff00(%ebp),%eax
000032c9	movl	(%eax),%ebx
000032cb	movl	0xffffff14(%ebp),%esi
000032d1	movss	0xf8(%ebx,%esi),%xmm1
000032d7	movss	0xfc(%ebx,%esi),%xmm0
000032dd	movl	%ecx,0x0c(%esp)
000032e1	movss	%xmm1,0x08(%esp)
000032e7	movss	%xmm0,0x04(%esp)
000032ed	movl	0xffffff08(%ebp),%eax
000032f3	movl	%eax,(%esp)
000032f6	calll	CFlexAnimationTrack::AddSample(float, float, int)
000032fb	movzwl	(%ebx,%esi),%ecx
000032ff	leal	0x0a(%esi),%esi
00003302	movl	%esi,0xffffff14(%ebp)
00003308	andl	$0x0000fffe,%ecx
0000330e	movzwl	0x08(%eax),%edx
00003312	andl	$0x01,%edx
00003315	orl	%ecx,%edx
00003317	movw	%dx,0x08(%eax)
0000331b	movl	0xfffffefc(%ebp),%ecx
00003321	jmp	0x00003240
00003326	incl	%ecx
00003327	movl	0x08(%ebp),%esi
0000332a	xorl	%edi,%edi
0000332c	jmp	0x00003200
00003331	movl	0xffffff08(%ebp),%eax
00003337	movl	%eax,(%esp)
0000333a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003342	calll	CFlexAnimationTrack::Resort(int)
00003347	movl	0xffffff08(%ebp),%eax
0000334d	movl	%eax,(%esp)
00003350	movl	$0x00000001,0x04(%esp)
00003358	calll	CFlexAnimationTrack::Resort(int)
0000335d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff58(%ebp)
00003367	movl	0xffffff4c(%ebp),%eax
0000336d	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff54(%ebp)
00003374	jns	0x00003384
00003376	movl	%eax,0xffffff5c(%ebp)
0000337c	movl	0xfffffee0(%ebp),%edi
00003382	jmp	0x000033be
00003384	testl	%eax,%eax
00003386	je	0x0000339a
00003388	movl	%eax,(%esp)
0000338b	calll	_free
00003390	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff4c(%ebp)
0000339a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff50(%ebp)
000033a4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff5c(%ebp)
000033ae	movl	0xfffffee0(%ebp),%edi
000033b4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff50(%ebp)
000033be	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff44(%ebp)
000033c8	movl	0xffffff38(%ebp),%eax
000033ce	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff40(%ebp)
000033d5	js	0x00002b10
000033db	testl	%eax,%eax
000033dd	je	0x000033f1
000033df	movl	%eax,(%esp)
000033e2	calll	_free
000033e7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff38(%ebp)
000033f1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff3c(%ebp)
000033fb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff48(%ebp)
00003405	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff3c(%ebp)
0000340f	jmp	0x00002b16
00003414	testl	%eax,%eax
00003416	je	0x0000342a
00003418	movl	%eax,(%esp)
0000341b	calll	_free
00003420	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff4c(%ebp)
0000342a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff50(%ebp)
00003434	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff5c(%ebp)
0000343e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff50(%ebp)
00003448	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff44(%ebp)
00003452	movl	0xffffff38(%ebp),%eax
00003458	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xffffff40(%ebp)
0000345f	jns	0x00002ac6
00003465	movl	%eax,0xffffff48(%ebp)
0000346b	movl	%esi,(%esp)
0000346e	calll	__Unwind_Resume
00003473	calll	___stack_chk_fail
00003478	jmp	0x00002f98
0000347d	nopl	(%eax)
CChoreoScene::ParseEvent(CChoreoActor*, CChoreoChannel*):
00003480	pushl	%ebp
00003481	movl	%esp,%ebp
00003483	pushl	%ebx
00003484	pushl	%edi
00003485	pushl	%esi
00003486	subl	$0x000002fc,%esp
0000348c	calll	0x00003491
00003491	popl	%esi
00003492	movl	0x758ea-0x3491(%esi),%eax
00003498	movl	%eax,0xfffffd14(%ebp)
0000349e	movl	(%eax),%eax
000034a0	movl	%eax,0xf0(%ebp)
000034a3	movl	0x08(%ebp),%edi
000034a6	movl	%edi,(%esp)
000034a9	calll	CChoreoScene::AllocEvent()
000034ae	movl	%eax,%ebx
000034b0	movl	0x000000a4(%edi),%ecx
000034b6	movl	(%ecx),%eax
000034b8	movl	%ecx,(%esp)
000034bb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000034c3	call	*0x04(%eax)
000034c6	movl	0x000000a4(%edi),%ecx
000034cc	movl	(%ecx),%eax
000034ce	movl	%ecx,(%esp)
000034d1	call	(%eax)
000034d3	movl	%eax,(%esp)
000034d6	calll	CChoreoEvent::TypeForName(char const*)
000034db	movl	%eax,0x04(%esp)
000034df	movl	%ebx,(%esp)
000034e2	calll	CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE)
000034e7	movl	0x000000a4(%edi),%ecx
000034ed	movl	(%ecx),%eax
000034ef	movl	%ecx,(%esp)
000034f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000034fa	call	*0x04(%eax)
000034fd	movl	0x000000a4(%edi),%ecx
00003503	movl	(%ecx),%eax
00003505	movl	%ecx,(%esp)
00003508	call	(%eax)
0000350a	movl	%eax,0x04(%esp)
0000350e	movl	%ebx,(%esp)
00003511	calll	CChoreoEvent::SetName(char const*)
00003516	movl	0x000000a4(%edi),%ecx
0000351c	movl	(%ecx),%eax
0000351e	movl	%ecx,(%esp)
00003521	movl	$0x00000001,0x04(%esp)
00003529	call	*0x04(%eax)
0000352c	movl	0x000000a4(%edi),%ecx
00003532	movl	(%ecx),%eax
00003534	movl	%ecx,(%esp)
00003537	call	(%eax)
00003539	leal	0x68bb1-0x3491(%esi),%ecx
0000353f	movl	%ecx,0xfffffd34(%ebp)
00003545	movl	%ecx,0x04(%esp)
00003549	movl	%eax,(%esp)
0000354c	calll	_strcasecmp
00003551	testl	%eax,%eax
00003553	je	0x0000356d
00003555	movl	0x000000a4(%edi),%ecx
0000355b	movl	(%ecx),%eax
0000355d	leal	0x68bb3-0x3491(%esi),%edx
00003563	movl	%edx,0x04(%esp)
00003567	movl	%ecx,(%esp)
0000356a	call	*0x0c(%eax)
0000356d	leal	0x5c(%ebx),%eax
00003570	movl	%eax,0xfffffd20(%ebp)
00003576	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffd33(%ebp)
0000357d	movl	%esi,0xfffffd50(%ebp)
00003583	movss	0x655fc-0x3491(%esi),%xmm0
0000358b	movss	%xmm0,0xfffffd18(%ebp)
00003593	leal	0x68bd5-0x3491(%esi),%eax
00003599	movl	%eax,0xfffffd44(%ebp)
0000359f	movss	%xmm0,0xfffffd1c(%ebp)
000035a7	movss	%xmm0,0xfffffd28(%ebp)
000035af	jmp	0x000036d8
000035b4	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000035c0	movl	(%ecx),%eax
000035c2	movl	%ecx,(%esp)
000035c5	call	(%eax)
000035c7	movl	0xfffffd50(%ebp),%ecx
000035cd	leal	0x68c56-0x3491(%ecx),%ecx
000035d3	movl	%ecx,0x04(%esp)
000035d7	movl	%eax,(%esp)
000035da	calll	V_stricmp(char const*, char const*)
000035df	movl	0x000000a4(%edi),%ecx
000035e5	testl	%eax,%eax
000035e7	jne	0x000036f0
000035ed	movl	(%ecx),%eax
000035ef	movl	%ecx,(%esp)
000035f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000035fa	call	*0x04(%eax)
000035fd	movl	0x000000a4(%edi),%ecx
00003603	movl	(%ecx),%eax
00003605	movl	%ecx,(%esp)
00003608	call	(%eax)
0000360a	movl	%eax,(%esp)
0000360d	calll	_atof
00003612	movl	0x000000a4(%edi),%ecx
00003618	movl	(%ecx),%eax
0000361a	movl	%ecx,(%esp)
0000361d	fstps	0xfffffd6c(%ebp)
00003623	call	*0x08(%eax)
00003626	movss	0xfffffd6c(%ebp),%xmm0
0000362e	movss	%xmm0,0xfffffd1c(%ebp)
00003636	testb	%al,%al
00003638	je	0x0000367b
0000363a	movl	0x000000a4(%edi),%ecx
00003640	movl	(%ecx),%eax
00003642	movl	%ecx,(%esp)
00003645	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000364d	call	*0x04(%eax)
00003650	movl	0x000000a4(%edi),%ecx
00003656	movl	(%ecx),%eax
00003658	movl	%ecx,(%esp)
0000365b	call	(%eax)
0000365d	movl	%eax,(%esp)
00003660	calll	_atof
00003665	fstps	0xfffffd68(%ebp)
0000366b	movss	0xfffffd68(%ebp),%xmm0
00003673	movss	%xmm0,0xfffffd28(%ebp)
0000367b	movl	0x000000a4(%edi),%ecx
00003681	movl	(%ecx),%eax
00003683	movl	%ecx,(%esp)
00003686	call	*0x08(%eax)
00003689	movb	$0x01,0xfffffd33(%ebp)
00003690	testb	%al,%al
00003692	je	0x000042ec
00003698	movl	0x000000a4(%edi),%ecx
0000369e	movl	(%ecx),%eax
000036a0	movl	%ecx,(%esp)
000036a3	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000036ab	call	*0x04(%eax)
000036ae	movl	0x000000a4(%edi),%ecx
000036b4	movl	(%ecx),%eax
000036b6	movl	%ecx,(%esp)
000036b9	call	(%eax)
000036bb	movl	%eax,(%esp)
000036be	calll	_atof
000036c3	fstps	0xfffffd64(%ebp)
000036c9	movb	$0x01,0xfffffd33(%ebp)
000036d0	movss	0xfffffd64(%ebp),%xmm0
000036d8	movss	%xmm0,0xfffffd24(%ebp)
000036e0	jmp	0x000042ec
000036e5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000036f0	movl	(%ecx),%eax
000036f2	movl	%ecx,(%esp)
000036f5	call	(%eax)
000036f7	movl	0xfffffd50(%ebp),%ecx
000036fd	leal	0x68c5b-0x3491(%ecx),%ecx
00003703	movl	%ecx,0x04(%esp)
00003707	movl	%eax,(%esp)
0000370a	calll	V_stricmp(char const*, char const*)
0000370f	movl	0x000000a4(%edi),%ecx
00003715	testl	%eax,%eax
00003717	jne	0x00003747
00003719	movl	(%ecx),%eax
0000371b	movl	%ecx,(%esp)
0000371e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003726	call	*0x04(%eax)
00003729	movl	0x000000a4(%edi),%ecx
0000372f	movl	(%ecx),%eax
00003731	movl	%ecx,(%esp)
00003734	call	(%eax)
00003736	movl	%eax,0x04(%esp)
0000373a	movl	%ebx,(%esp)
0000373d	calll	CChoreoEvent::SetParameters(char const*)
00003742	jmp	0x000042ec
00003747	movl	(%ecx),%eax
00003749	movl	%ecx,(%esp)
0000374c	call	(%eax)
0000374e	movl	0xfffffd50(%ebp),%ecx
00003754	leal	0x68c61-0x3491(%ecx),%ecx
0000375a	movl	%ecx,0x04(%esp)
0000375e	movl	%eax,(%esp)
00003761	calll	V_stricmp(char const*, char const*)
00003766	movl	0x000000a4(%edi),%ecx
0000376c	testl	%eax,%eax
0000376e	jne	0x0000379e
00003770	movl	(%ecx),%eax
00003772	movl	%ecx,(%esp)
00003775	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000377d	call	*0x04(%eax)
00003780	movl	0x000000a4(%edi),%ecx
00003786	movl	(%ecx),%eax
00003788	movl	%ecx,(%esp)
0000378b	call	(%eax)
0000378d	movl	%eax,0x04(%esp)
00003791	movl	%ebx,(%esp)
00003794	calll	CChoreoEvent::SetParameters2(char const*)
00003799	jmp	0x000042ec
0000379e	movl	(%ecx),%eax
000037a0	movl	%ecx,(%esp)
000037a3	call	(%eax)
000037a5	movl	0xfffffd50(%ebp),%ecx
000037ab	leal	0x68c68-0x3491(%ecx),%ecx
000037b1	movl	%ecx,0x04(%esp)
000037b5	movl	%eax,(%esp)
000037b8	calll	V_stricmp(char const*, char const*)
000037bd	movl	0x000000a4(%edi),%ecx
000037c3	testl	%eax,%eax
000037c5	jne	0x000037f5
000037c7	movl	(%ecx),%eax
000037c9	movl	%ecx,(%esp)
000037cc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000037d4	call	*0x04(%eax)
000037d7	movl	0x000000a4(%edi),%ecx
000037dd	movl	(%ecx),%eax
000037df	movl	%ecx,(%esp)
000037e2	call	(%eax)
000037e4	movl	%eax,0x04(%esp)
000037e8	movl	%ebx,(%esp)
000037eb	calll	CChoreoEvent::SetParameters3(char const*)
000037f0	jmp	0x000042ec
000037f5	movl	(%ecx),%eax
000037f7	movl	%ecx,(%esp)
000037fa	call	(%eax)
000037fc	movl	0xfffffd50(%ebp),%ecx
00003802	leal	0x68c6f-0x3491(%ecx),%ecx
00003808	movl	%ecx,0x04(%esp)
0000380c	movl	%eax,(%esp)
0000380f	calll	V_stricmp(char const*, char const*)
00003814	movl	0x000000a4(%edi),%ecx
0000381a	testl	%eax,%eax
0000381c	jne	0x00003854
0000381e	movl	(%ecx),%eax
00003820	movl	%ecx,(%esp)
00003823	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000382b	call	*0x04(%eax)
0000382e	movl	0x000000a4(%edi),%ecx
00003834	movl	(%ecx),%eax
00003836	movl	%ecx,(%esp)
00003839	call	(%eax)
0000383b	movl	%eax,(%esp)
0000383e	calll	_atoi
00003843	movl	%eax,0x04(%esp)
00003847	movl	%ebx,(%esp)
0000384a	calll	CChoreoEvent::SetPitch(int)
0000384f	jmp	0x000042ec
00003854	movl	(%ecx),%eax
00003856	movl	%ecx,(%esp)
00003859	call	(%eax)
0000385b	movl	0xfffffd50(%ebp),%ecx
00003861	leal	0x68c75-0x3491(%ecx),%ecx
00003867	movl	%ecx,0x04(%esp)
0000386b	movl	%eax,(%esp)
0000386e	calll	V_stricmp(char const*, char const*)
00003873	movl	0x000000a4(%edi),%ecx
00003879	testl	%eax,%eax
0000387b	jne	0x000038b3
0000387d	movl	(%ecx),%eax
0000387f	movl	%ecx,(%esp)
00003882	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000388a	call	*0x04(%eax)
0000388d	movl	0x000000a4(%edi),%ecx
00003893	movl	(%ecx),%eax
00003895	movl	%ecx,(%esp)
00003898	call	(%eax)
0000389a	movl	%eax,(%esp)
0000389d	calll	_atoi
000038a2	movl	%eax,0x04(%esp)
000038a6	movl	%ebx,(%esp)
000038a9	calll	CChoreoEvent::SetYaw(int)
000038ae	jmp	0x000042ec
000038b3	movl	(%ecx),%eax
000038b5	movl	%ecx,(%esp)
000038b8	call	(%eax)
000038ba	movl	0xfffffd50(%ebp),%ecx
000038c0	leal	0x68c79-0x3491(%ecx),%ecx
000038c6	movl	%ecx,0x04(%esp)
000038ca	movl	%eax,(%esp)
000038cd	calll	V_stricmp(char const*, char const*)
000038d2	movl	0x000000a4(%edi),%ecx
000038d8	testl	%eax,%eax
000038da	jne	0x00003912
000038dc	movl	(%ecx),%eax
000038de	movl	%ecx,(%esp)
000038e1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000038e9	call	*0x04(%eax)
000038ec	movl	0x000000a4(%edi),%ecx
000038f2	movl	(%ecx),%eax
000038f4	movl	%ecx,(%esp)
000038f7	call	(%eax)
000038f9	movl	%eax,(%esp)
000038fc	calll	_atoi
00003901	movl	%eax,0x04(%esp)
00003905	movl	%ebx,(%esp)
00003908	calll	CChoreoEvent::SetLoopCount(int)
0000390d	jmp	0x000042ec
00003912	movl	(%ecx),%eax
00003914	movl	%ecx,(%esp)
00003917	call	(%eax)
00003919	movl	0xfffffd50(%ebp),%ecx
0000391f	leal	0x68c83-0x3491(%ecx),%ecx
00003925	movl	%ecx,0x04(%esp)
00003929	movl	%eax,(%esp)
0000392c	calll	V_stricmp(char const*, char const*)
00003931	testl	%eax,%eax
00003933	jne	0x0000394a
00003935	movl	%ebx,(%esp)
00003938	movl	$0x00000001,0x04(%esp)
00003940	calll	CChoreoEvent::SetResumeCondition(bool)
00003945	jmp	0x000042ec
0000394a	movl	0x000000a4(%edi),%ecx
00003950	movl	(%ecx),%eax
00003952	movl	%ecx,(%esp)
00003955	call	(%eax)
00003957	movl	0xfffffd50(%ebp),%ecx
0000395d	leal	0x68c93-0x3491(%ecx),%ecx
00003963	movl	%ecx,0x04(%esp)
00003967	movl	%eax,(%esp)
0000396a	calll	V_stricmp(char const*, char const*)
0000396f	testl	%eax,%eax
00003971	jne	0x00003988
00003973	movl	%ebx,(%esp)
00003976	movl	$0x00000001,0x04(%esp)
0000397e	calll	CChoreoEvent::SetFixedLength(bool)
00003983	jmp	0x000042ec
00003988	movl	0x000000a4(%edi),%ecx
0000398e	movl	(%ecx),%eax
00003990	movl	%ecx,(%esp)
00003993	call	(%eax)
00003995	movl	0xfffffd50(%ebp),%ecx
0000399b	leal	0x68c9f-0x3491(%ecx),%ecx
000039a1	movl	%ecx,0x04(%esp)
000039a5	movl	%eax,(%esp)
000039a8	calll	V_stricmp(char const*, char const*)
000039ad	testl	%eax,%eax
000039af	jne	0x000039c6
000039b1	movl	%ebx,(%esp)
000039b4	movl	$0x00000001,0x04(%esp)
000039bc	calll	CChoreoEvent::SetLockBodyFacing(bool)
000039c1	jmp	0x000042ec
000039c6	movl	0x000000a4(%edi),%ecx
000039cc	movl	(%ecx),%eax
000039ce	movl	%ecx,(%esp)
000039d1	call	(%eax)
000039d3	movl	0xfffffd50(%ebp),%ecx
000039d9	leal	0x68cae-0x3491(%ecx),%ecx
000039df	movl	%ecx,0x04(%esp)
000039e3	movl	%eax,(%esp)
000039e6	calll	V_stricmp(char const*, char const*)
000039eb	movl	0x000000a4(%edi),%ecx
000039f1	testl	%eax,%eax
000039f3	jne	0x00003a2b
000039f5	movl	(%ecx),%eax
000039f7	movl	%ecx,(%esp)
000039fa	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003a02	call	*0x04(%eax)
00003a05	movl	0x000000a4(%edi),%ecx
00003a0b	movl	(%ecx),%eax
00003a0d	movl	%ecx,(%esp)
00003a10	call	(%eax)
00003a12	movl	%eax,(%esp)
00003a15	calll	_atof
00003a1a	fstps	0x04(%esp)
00003a1e	movl	%ebx,(%esp)
00003a21	calll	CChoreoEvent::SetDistanceToTarget(float)
00003a26	jmp	0x000042ec
00003a2b	movl	(%ecx),%eax
00003a2d	movl	%ecx,(%esp)
00003a30	call	(%eax)
00003a32	movl	0xfffffd50(%ebp),%ecx
00003a38	leal	0x68cbf-0x3491(%ecx),%ecx
00003a3e	movl	%ecx,0x04(%esp)
00003a42	movl	%eax,(%esp)
00003a45	calll	V_stricmp(char const*, char const*)
00003a4a	testl	%eax,%eax
00003a4c	jne	0x00003a63
00003a4e	movl	%ebx,(%esp)
00003a51	movl	$0x00000001,0x04(%esp)
00003a59	calll	CChoreoEvent::SetForceShortMovement(bool)
00003a5e	jmp	0x000042ec
00003a63	movl	0x000000a4(%edi),%ecx
00003a69	movl	(%ecx),%eax
00003a6b	movl	%ecx,(%esp)
00003a6e	call	(%eax)
00003a70	movl	0xfffffd50(%ebp),%ecx
00003a76	leal	0x68cd2-0x3491(%ecx),%ecx
00003a7c	movl	%ecx,0x04(%esp)
00003a80	movl	%eax,(%esp)
00003a83	calll	V_stricmp(char const*, char const*)
00003a88	testl	%eax,%eax
00003a8a	jne	0x00003aa1
00003a8c	movl	%ebx,(%esp)
00003a8f	movl	$0x00000001,0x04(%esp)
00003a97	calll	CChoreoEvent::SetSyncToFollowingGesture(bool)
00003a9c	jmp	0x000042ec
00003aa1	movl	0x000000a4(%edi),%ecx
00003aa7	movl	(%ecx),%eax
00003aa9	movl	%ecx,(%esp)
00003aac	call	(%eax)
00003aae	movl	0xfffffd50(%ebp),%ecx
00003ab4	leal	0x68ce9-0x3491(%ecx),%ecx
00003aba	movl	%ecx,0x04(%esp)
00003abe	movl	%eax,(%esp)
00003ac1	calll	V_stricmp(char const*, char const*)
00003ac6	movl	0x000000a4(%edi),%ecx
00003acc	testl	%eax,%eax
00003ace	jne	0x00003b0e
00003ad0	movl	(%ecx),%eax
00003ad2	movl	%ecx,(%esp)
00003ad5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003add	call	*0x04(%eax)
00003ae0	movl	0x000000a4(%edi),%ecx
00003ae6	movl	(%ecx),%eax
00003ae8	movl	%ecx,(%esp)
00003aeb	call	(%eax)
00003aed	movl	%eax,(%esp)
00003af0	calll	_atoi
00003af5	movl	%ebx,(%esp)
00003af8	testl	%eax,%eax
00003afa	setne	%al
00003afd	movzbl	%al,%eax
00003b00	movl	%eax,0x04(%esp)
00003b04	calll	CChoreoEvent::SetActive(bool)
00003b09	jmp	0x000042ec
00003b0e	movl	(%ecx),%eax
00003b10	movl	%ecx,(%esp)
00003b13	call	(%eax)
00003b15	movl	0xfffffd50(%ebp),%ecx
00003b1b	leal	0x68cf0-0x3491(%ecx),%ecx
00003b21	movl	%ecx,0x04(%esp)
00003b25	movl	%eax,(%esp)
00003b28	calll	V_stricmp(char const*, char const*)
00003b2d	testl	%eax,%eax
00003b2f	jne	0x00003b46
00003b31	movl	%ebx,(%esp)
00003b34	movl	$0x00000001,0x04(%esp)
00003b3c	calll	CChoreoEvent::SetPlayOverScript(bool)
00003b41	jmp	0x000042ec
00003b46	movl	0x000000a4(%edi),%ecx
00003b4c	movl	(%ecx),%eax
00003b4e	movl	%ecx,(%esp)
00003b51	call	(%eax)
00003b53	movl	0xfffffd50(%ebp),%ecx
00003b59	leal	0x68cff-0x3491(%ecx),%ecx
00003b5f	movl	%ecx,0x04(%esp)
00003b63	movl	%eax,(%esp)
00003b66	calll	V_stricmp(char const*, char const*)
00003b6b	movl	0x000000a4(%edi),%ecx
00003b71	testl	%eax,%eax
00003b73	jne	0x00003cb6
00003b79	movl	(%ecx),%eax
00003b7b	movl	%ecx,(%esp)
00003b7e	movl	$0x00000001,0x04(%esp)
00003b86	call	*0x04(%eax)
00003b89	movl	0x000000a4(%edi),%ecx
00003b8f	movl	(%ecx),%eax
00003b91	movl	%ecx,(%esp)
00003b94	call	(%eax)
00003b96	movl	0xfffffd34(%ebp),%ecx
00003b9c	movl	%ecx,0x04(%esp)
00003ba0	movl	%eax,(%esp)
00003ba3	calll	_strcasecmp
00003ba8	testl	%eax,%eax
00003baa	je	0x00003c67
00003bb0	movl	0x000000a4(%edi),%ecx
00003bb6	movl	(%ecx),%eax
00003bb8	movl	0xfffffd50(%ebp),%edx
00003bbe	leal	0x68bb3-0x3491(%edx),%edx
00003bc4	movl	%edx,0x04(%esp)
00003bc8	movl	%ecx,(%esp)
00003bcb	call	*0x0c(%eax)
00003bce	jmp	0x00003c67
00003bd3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003be0	movl	(%ecx),%eax
00003be2	movl	%ecx,(%esp)
00003be5	call	(%eax)
00003be7	movl	0xfffffd44(%ebp),%ecx
00003bed	movl	%ecx,0x04(%esp)
00003bf1	movl	%eax,(%esp)
00003bf4	calll	V_stricmp(char const*, char const*)
00003bf9	testl	%eax,%eax
00003bfb	je	0x000042ec
00003c01	movl	0x000000a4(%edi),%ecx
00003c07	movl	(%ecx),%eax
00003c09	movl	%ecx,(%esp)
00003c0c	call	(%eax)
00003c0e	movl	%eax,0x04(%esp)
00003c12	movl	%edi,%esi
00003c14	leal	0xffffff70(%ebp),%edi
00003c1a	movl	%edi,(%esp)
00003c1d	movl	$0x00000080,0x08(%esp)
00003c25	calll	V_strncpy(char*, char const*, int)
00003c2a	movl	0x000000a4(%esi),%ecx
00003c30	movl	(%ecx),%eax
00003c32	movl	%ecx,(%esp)
00003c35	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003c3d	call	*0x04(%eax)
00003c40	movl	0x000000a4(%esi),%ecx
00003c46	movl	(%ecx),%eax
00003c48	movl	%ecx,(%esp)
00003c4b	call	(%eax)
00003c4d	movl	%eax,(%esp)
00003c50	calll	_atof
00003c55	fstps	0x08(%esp)
00003c59	movl	%edi,0x04(%esp)
00003c5d	movl	%esi,%edi
00003c5f	movl	%ebx,(%esp)
00003c62	calll	CChoreoEvent::AddRelativeTag(char const*, float)
00003c67	movl	0x000000a4(%edi),%ecx
00003c6d	movl	(%ecx),%eax
00003c6f	movl	%ecx,(%esp)
00003c72	movl	$0x00000001,0x04(%esp)
00003c7a	call	*0x04(%eax)
00003c7d	movl	0x000000a4(%edi),%ecx
00003c83	movl	(%ecx),%eax
00003c85	movl	%ecx,(%esp)
00003c88	call	(%eax)
00003c8a	movl	0x000000a4(%edi),%ecx
00003c90	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00003c93	jne	0x00003be0
00003c99	movl	(%ecx),%eax
00003c9b	movl	0xfffffd50(%ebp),%edx
00003ca1	leal	0x68d04-0x3491(%edx),%edx
00003ca7	movl	%edx,0x04(%esp)
00003cab	movl	%ecx,(%esp)
00003cae	call	*0x0c(%eax)
00003cb1	jmp	0x000042ec
00003cb6	movl	(%ecx),%eax
00003cb8	movl	%ecx,(%esp)
00003cbb	call	(%eax)
00003cbd	movl	0xfffffd50(%ebp),%ecx
00003cc3	leal	0x68d1c-0x3491(%ecx),%ecx
00003cc9	movl	%ecx,0x04(%esp)
00003ccd	movl	%eax,(%esp)
00003cd0	calll	V_stricmp(char const*, char const*)
00003cd5	movl	0x000000a4(%edi),%ecx
00003cdb	testl	%eax,%eax
00003cdd	jne	0x00003d15
00003cdf	movl	(%ecx),%eax
00003ce1	movl	%ecx,(%esp)
00003ce4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003cec	call	*0x04(%eax)
00003cef	movl	0x000000a4(%edi),%ecx
00003cf5	movl	(%ecx),%eax
00003cf7	movl	%ecx,(%esp)
00003cfa	call	(%eax)
00003cfc	movl	%eax,(%esp)
00003cff	calll	_atof
00003d04	fstps	0x04(%esp)
00003d08	movl	%ebx,(%esp)
00003d0b	calll	CChoreoEvent::SetGestureSequenceDuration(float)
00003d10	jmp	0x000042ec
00003d15	movl	(%ecx),%eax
00003d17	movl	%ecx,(%esp)
00003d1a	call	(%eax)
00003d1c	movl	0xfffffd50(%ebp),%ecx
00003d22	leal	0x68d2d-0x3491(%ecx),%ecx
00003d28	movl	%ecx,0x04(%esp)
00003d2c	movl	%eax,(%esp)
00003d2f	calll	V_stricmp(char const*, char const*)
00003d34	movl	0x000000a4(%edi),%ecx
00003d3a	testl	%eax,%eax
00003d3c	jne	0x00003ebc
00003d42	movl	(%ecx),%eax
00003d44	movl	%ecx,(%esp)
00003d47	movl	$0x00000001,0x04(%esp)
00003d4f	call	*0x04(%eax)
00003d52	movl	0x000000a4(%edi),%ecx
00003d58	movl	(%ecx),%eax
00003d5a	movl	%ecx,(%esp)
00003d5d	call	(%eax)
00003d5f	movl	%eax,(%esp)
00003d62	calll	CChoreoEvent::TypeForAbsoluteTagName(char const*)
00003d67	movl	%eax,0xfffffd38(%ebp)
00003d6d	cmpl	$0xff,%eax
00003d70	jne	0x00003d90
00003d72	movl	0x000000a4(%edi),%ecx
00003d78	movl	(%ecx),%eax
00003d7a	movl	0xfffffd50(%ebp),%edx
00003d80	leal	0x68d3a-0x3491(%edx),%edx
00003d86	movl	%edx,0x04(%esp)
00003d8a	movl	%ecx,(%esp)
00003d8d	call	*0x0c(%eax)
00003d90	movl	0x000000a4(%edi),%ecx
00003d96	movl	(%ecx),%eax
00003d98	movl	%ecx,(%esp)
00003d9b	movl	$0x00000001,0x04(%esp)
00003da3	call	*0x04(%eax)
00003da6	movl	0x000000a4(%edi),%ecx
00003dac	movl	(%ecx),%eax
00003dae	movl	%ecx,(%esp)
00003db1	call	(%eax)
00003db3	movl	0xfffffd34(%ebp),%ecx
00003db9	movl	%ecx,0x04(%esp)
00003dbd	movl	%eax,(%esp)
00003dc0	calll	_strcasecmp
00003dc5	testl	%eax,%eax
00003dc7	je	0x00003df0
00003dc9	movl	0x000000a4(%edi),%ecx
00003dcf	movl	(%ecx),%eax
00003dd1	movl	0xfffffd50(%ebp),%edx
00003dd7	leal	0x68bb3-0x3491(%edx),%edx
00003ddd	movl	%edx,0x04(%esp)
00003de1	movl	%ecx,(%esp)
00003de4	call	*0x0c(%eax)
00003de7	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003df0	movl	0x000000a4(%edi),%ecx
00003df6	movl	(%ecx),%eax
00003df8	movl	%ecx,(%esp)
00003dfb	movl	$0x00000001,0x04(%esp)
00003e03	call	*0x04(%eax)
00003e06	movl	0x000000a4(%edi),%ecx
00003e0c	movl	(%ecx),%eax
00003e0e	movl	%ecx,(%esp)
00003e11	call	(%eax)
00003e13	movl	0x000000a4(%edi),%ecx
00003e19	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00003e1c	je	0x00003c99
00003e22	movl	(%ecx),%eax
00003e24	movl	%ecx,(%esp)
00003e27	call	(%eax)
00003e29	movl	0xfffffd44(%ebp),%ecx
00003e2f	movl	%ecx,0x04(%esp)
00003e33	movl	%eax,(%esp)
00003e36	calll	V_stricmp(char const*, char const*)
00003e3b	testl	%eax,%eax
00003e3d	je	0x000042ec
00003e43	movl	0x000000a4(%edi),%ecx
00003e49	movl	(%ecx),%eax
00003e4b	movl	%ecx,(%esp)
00003e4e	call	(%eax)
00003e50	movl	%eax,0x04(%esp)
00003e54	movl	%ebx,%esi
00003e56	movl	%edi,%ebx
00003e58	leal	0xfffffef0(%ebp),%edi
00003e5e	movl	%edi,(%esp)
00003e61	movl	$0x00000080,0x08(%esp)
00003e69	calll	V_strncpy(char*, char const*, int)
00003e6e	movl	0x000000a4(%ebx),%ecx
00003e74	movl	(%ecx),%eax
00003e76	movl	%ecx,(%esp)
00003e79	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003e81	call	*0x04(%eax)
00003e84	movl	0x000000a4(%ebx),%ecx
00003e8a	movl	(%ecx),%eax
00003e8c	movl	%ecx,(%esp)
00003e8f	call	(%eax)
00003e91	movl	%eax,(%esp)
00003e94	calll	_atof
00003e99	fstps	0x0c(%esp)
00003e9d	movl	%edi,0x08(%esp)
00003ea1	movl	%ebx,%edi
00003ea3	movl	%esi,%ebx
00003ea5	movl	0xfffffd38(%ebp),%eax
00003eab	movl	%eax,0x04(%esp)
00003eaf	movl	%ebx,(%esp)
00003eb2	calll	CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
00003eb7	jmp	0x00003df0
00003ebc	movl	(%ecx),%eax
00003ebe	movl	%ecx,(%esp)
00003ec1	call	(%eax)
00003ec3	movl	0xfffffd50(%ebp),%ecx
00003ec9	leal	0x68d56-0x3491(%ecx),%ecx
00003ecf	movl	%ecx,0x04(%esp)
00003ed3	movl	%eax,(%esp)
00003ed6	calll	V_stricmp(char const*, char const*)
00003edb	movl	0x000000a4(%edi),%ecx
00003ee1	testl	%eax,%eax
00003ee3	jne	0x0000403d
00003ee9	movl	(%ecx),%eax
00003eeb	movl	%ecx,(%esp)
00003eee	movl	$0x00000001,0x04(%esp)
00003ef6	call	*0x04(%eax)
00003ef9	movl	0x000000a4(%edi),%ecx
00003eff	movl	(%ecx),%eax
00003f01	movl	%ecx,(%esp)
00003f04	call	(%eax)
00003f06	movl	0xfffffd34(%ebp),%ecx
00003f0c	movl	%ecx,0x04(%esp)
00003f10	movl	%eax,(%esp)
00003f13	calll	_strcasecmp
00003f18	testl	%eax,%eax
00003f1a	je	0x00003f40
00003f1c	movl	0x000000a4(%edi),%ecx
00003f22	movl	(%ecx),%eax
00003f24	movl	0xfffffd50(%ebp),%edx
00003f2a	leal	0x68bb3-0x3491(%edx),%edx
00003f30	movl	%edx,0x04(%esp)
00003f34	movl	%ecx,(%esp)
00003f37	call	*0x0c(%eax)
00003f3a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00003f40	movl	0x000000a4(%edi),%ecx
00003f46	movl	(%ecx),%eax
00003f48	movl	%ecx,(%esp)
00003f4b	movl	$0x00000001,0x04(%esp)
00003f53	call	*0x04(%eax)
00003f56	movl	0x000000a4(%edi),%ecx
00003f5c	movl	(%ecx),%eax
00003f5e	movl	%ecx,(%esp)
00003f61	call	(%eax)
00003f63	movl	0x000000a4(%edi),%ecx
00003f69	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00003f6c	je	0x00003c99
00003f72	movl	(%ecx),%eax
00003f74	movl	%ecx,(%esp)
00003f77	call	(%eax)
00003f79	movl	0xfffffd44(%ebp),%ecx
00003f7f	movl	%ecx,0x04(%esp)
00003f83	movl	%eax,(%esp)
00003f86	calll	V_stricmp(char const*, char const*)
00003f8b	testl	%eax,%eax
00003f8d	je	0x000042ec
00003f93	movl	0x000000a4(%edi),%ecx
00003f99	movl	(%ecx),%eax
00003f9b	movl	%ecx,(%esp)
00003f9e	call	(%eax)
00003fa0	movl	%eax,0x04(%esp)
00003fa4	leal	0xfffffe70(%ebp),%esi
00003faa	movl	%esi,(%esp)
00003fad	movl	$0x00000080,0x08(%esp)
00003fb5	calll	V_strncpy(char*, char const*, int)
00003fba	movl	0x000000a4(%edi),%ecx
00003fc0	movl	(%ecx),%eax
00003fc2	movl	%ecx,(%esp)
00003fc5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003fcd	call	*0x04(%eax)
00003fd0	movl	0x000000a4(%edi),%ecx
00003fd6	movl	(%ecx),%eax
00003fd8	movl	%ecx,(%esp)
00003fdb	call	(%eax)
00003fdd	movl	%eax,(%esp)
00003fe0	calll	_atof
00003fe5	fstpt	0xfffffd38(%ebp)
00003feb	movl	0x000000a4(%edi),%ecx
00003ff1	movl	(%ecx),%eax
00003ff3	movl	%ecx,(%esp)
00003ff6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00003ffe	call	*0x04(%eax)
00004001	movl	0x000000a4(%edi),%ecx
00004007	movl	(%ecx),%eax
00004009	movl	%ecx,(%esp)
0000400c	call	(%eax)
0000400e	movl	%eax,(%esp)
00004011	calll	_atoi
00004016	fldt	0xfffffd38(%ebp)
0000401c	fstps	0x08(%esp)
00004020	movl	%esi,0x04(%esp)
00004024	movl	%ebx,(%esp)
00004027	testl	%eax,%eax
00004029	setne	%al
0000402c	movzbl	%al,%eax
0000402f	movl	%eax,0x0c(%esp)
00004033	calll	CChoreoEvent::AddTimingTag(char const*, float, bool)
00004038	jmp	0x00003f40
0000403d	movl	(%ecx),%eax
0000403f	movl	%ecx,(%esp)
00004042	call	(%eax)
00004044	movl	0xfffffd50(%ebp),%ecx
0000404a	leal	0x68d65-0x3491(%ecx),%ecx
00004050	movl	%ecx,0x04(%esp)
00004054	movl	%eax,(%esp)
00004057	calll	V_stricmp(char const*, char const*)
0000405c	movl	0x000000a4(%edi),%ecx
00004062	testl	%eax,%eax
00004064	jne	0x00004101
0000406a	movl	(%ecx),%eax
0000406c	movl	%ecx,(%esp)
0000406f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004077	call	*0x04(%eax)
0000407a	movl	0x000000a4(%edi),%ecx
00004080	movl	(%ecx),%eax
00004082	movl	%ecx,(%esp)
00004085	call	(%eax)
00004087	movl	%eax,0x04(%esp)
0000408b	leal	0xfffffdf0(%ebp),%eax
00004091	movl	%eax,(%esp)
00004094	movl	$0x00000080,0x08(%esp)
0000409c	calll	V_strncpy(char*, char const*, int)
000040a1	movl	0x000000a4(%edi),%ecx
000040a7	movl	(%ecx),%eax
000040a9	movl	%ecx,(%esp)
000040ac	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000040b4	call	*0x04(%eax)
000040b7	movl	0x000000a4(%edi),%ecx
000040bd	movl	(%ecx),%eax
000040bf	movl	%ecx,(%esp)
000040c2	call	(%eax)
000040c4	movl	%eax,0x04(%esp)
000040c8	leal	0xfffffd70(%ebp),%esi
000040ce	movl	%esi,(%esp)
000040d1	movl	$0x00000080,0x08(%esp)
000040d9	calll	V_strncpy(char*, char const*, int)
000040de	movl	%esi,0x0c(%esp)
000040e2	leal	0xfffffdf0(%ebp),%eax
000040e8	movl	%eax,0x08(%esp)
000040ec	movl	%ebx,(%esp)
000040ef	movl	$0x00000001,0x04(%esp)
000040f7	calll	CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
000040fc	jmp	0x000042ec
00004101	movl	%ebx,%esi
00004103	movl	(%ecx),%eax
00004105	movl	%ecx,(%esp)
00004108	call	(%eax)
0000410a	movl	0xfffffd50(%ebp),%ecx
00004110	leal	0x68d71-0x3491(%ecx),%ecx
00004116	movl	%ecx,0x04(%esp)
0000411a	movl	%eax,(%esp)
0000411d	calll	V_stricmp(char const*, char const*)
00004122	movl	0x000000a4(%edi),%ecx
00004128	testl	%eax,%eax
0000412a	jne	0x00004147
0000412c	movl	%esi,%ebx
0000412e	movl	%ebx,0x04(%esp)
00004132	movl	%ecx,(%esp)
00004135	movl	$0x00000001,0x08(%esp)
0000413d	calll	CChoreoScene::ParseFlexAnimations(ISceneTokenProcessor*, CChoreoEvent*, bool)
00004142	jmp	0x000042ec
00004147	movl	(%ecx),%eax
00004149	movl	%ecx,(%esp)
0000414c	call	(%eax)
0000414e	movl	0xfffffd50(%ebp),%ecx
00004154	leal	0x68d80-0x3491(%ecx),%ecx
0000415a	movl	%ecx,0x04(%esp)
0000415e	movl	%eax,(%esp)
00004161	calll	V_stricmp(char const*, char const*)
00004166	movl	0x000000a4(%edi),%ecx
0000416c	testl	%eax,%eax
0000416e	movl	%esi,%ebx
00004170	jne	0x0000418d
00004172	movl	%ebx,0x08(%esp)
00004176	movl	%ecx,0x04(%esp)
0000417a	movl	0xfffffd20(%ebp),%eax
00004180	movl	%eax,(%esp)
00004183	calll	CCurveData::Parse(ISceneTokenProcessor*, ICurveDataAccessor*)
00004188	jmp	0x000042ec
0000418d	movl	(%ecx),%eax
0000418f	movl	%ecx,(%esp)
00004192	call	(%eax)
00004194	movl	0xfffffd50(%ebp),%ecx
0000419a	leal	0x68d8b-0x3491(%ecx),%ecx
000041a0	movl	%ecx,0x04(%esp)
000041a4	movl	%eax,(%esp)
000041a7	calll	V_stricmp(char const*, char const*)
000041ac	movl	0x000000a4(%edi),%ecx
000041b2	testl	%eax,%eax
000041b4	jne	0x000041ec
000041b6	movl	(%ecx),%eax
000041b8	movl	%ecx,(%esp)
000041bb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000041c3	call	*0x04(%eax)
000041c6	movl	0x000000a4(%edi),%ecx
000041cc	movl	(%ecx),%eax
000041ce	movl	%ecx,(%esp)
000041d1	call	(%eax)
000041d3	movl	%eax,(%esp)
000041d6	calll	CChoreoEvent::CCTypeForName(char const*)
000041db	movl	%eax,0x04(%esp)
000041df	movl	%ebx,(%esp)
000041e2	calll	CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
000041e7	jmp	0x000042ec
000041ec	movl	(%ecx),%eax
000041ee	movl	%ecx,(%esp)
000041f1	call	(%eax)
000041f3	movl	0xfffffd50(%ebp),%ecx
000041f9	leal	0x68d92-0x3491(%ecx),%ecx
000041ff	movl	%ecx,0x04(%esp)
00004203	movl	%eax,(%esp)
00004206	calll	V_stricmp(char const*, char const*)
0000420b	movl	0x000000a4(%edi),%ecx
00004211	testl	%eax,%eax
00004213	jne	0x00004243
00004215	movl	(%ecx),%eax
00004217	movl	%ecx,(%esp)
0000421a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004222	call	*0x04(%eax)
00004225	movl	0x000000a4(%edi),%ecx
0000422b	movl	(%ecx),%eax
0000422d	movl	%ecx,(%esp)
00004230	call	(%eax)
00004232	movl	%eax,0x04(%esp)
00004236	movl	%ebx,(%esp)
00004239	calll	CChoreoEvent::SetCloseCaptionToken(char const*)
0000423e	jmp	0x000042ec
00004243	movl	(%ecx),%eax
00004245	movl	%ecx,(%esp)
00004248	call	(%eax)
0000424a	movl	0xfffffd50(%ebp),%ecx
00004250	leal	0x68d9a-0x3491(%ecx),%ecx
00004256	movl	%ecx,0x04(%esp)
0000425a	movl	%eax,(%esp)
0000425d	calll	V_stricmp(char const*, char const*)
00004262	testl	%eax,%eax
00004264	jne	0x00004278
00004266	movl	%ebx,(%esp)
00004269	movl	$0x00000001,0x04(%esp)
00004271	calll	CChoreoEvent::SetUsingCombinedFile(bool)
00004276	jmp	0x000042ec
00004278	movl	0x000000a4(%edi),%ecx
0000427e	movl	(%ecx),%eax
00004280	movl	%ecx,(%esp)
00004283	call	(%eax)
00004285	movl	0xfffffd50(%ebp),%ecx
0000428b	leal	0x68daf-0x3491(%ecx),%ecx
00004291	movl	%ecx,0x04(%esp)
00004295	movl	%eax,(%esp)
00004298	calll	V_stricmp(char const*, char const*)
0000429d	testl	%eax,%eax
0000429f	jne	0x000042b3
000042a1	movl	%ebx,(%esp)
000042a4	movl	$0x00000001,0x04(%esp)
000042ac	calll	CChoreoEvent::SetCombinedUsingGenderToken(bool)
000042b1	jmp	0x000042ec
000042b3	movl	0x000000a4(%edi),%ecx
000042b9	movl	(%ecx),%eax
000042bb	movl	%ecx,(%esp)
000042be	call	(%eax)
000042c0	movl	0xfffffd50(%ebp),%ecx
000042c6	leal	0x68dc5-0x3491(%ecx),%ecx
000042cc	movl	%ecx,0x04(%esp)
000042d0	movl	%eax,(%esp)
000042d3	calll	V_stricmp(char const*, char const*)
000042d8	testl	%eax,%eax
000042da	jne	0x000042ec
000042dc	movl	%ebx,(%esp)
000042df	movl	$0x00000001,0x04(%esp)
000042e7	calll	CChoreoEvent::SetSuppressingCaptionAttenuation(bool)
000042ec	movl	0x000000a4(%edi),%ecx
000042f2	movl	(%ecx),%eax
000042f4	movl	%ecx,(%esp)
000042f7	movl	$0x00000001,0x04(%esp)
000042ff	call	*0x04(%eax)
00004302	movl	0x000000a4(%edi),%ecx
00004308	movl	(%ecx),%eax
0000430a	movl	%ecx,(%esp)
0000430d	call	(%eax)
0000430f	movl	0xfffffd44(%ebp),%ecx
00004315	movl	%ecx,0x04(%esp)
00004319	movl	%eax,(%esp)
0000431c	calll	V_stricmp(char const*, char const*)
00004321	testl	%eax,%eax
00004323	je	0x0000435d
00004325	movl	%ebx,%esi
00004327	movl	0x000000a4(%edi),%ecx
0000432d	movl	(%ecx),%eax
0000432f	movl	%ecx,(%esp)
00004332	call	(%eax)
00004334	movl	0x000000a4(%edi),%ecx
0000433a	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
0000433d	jne	0x00004416
00004343	movl	(%ecx),%eax
00004345	movl	0xfffffd50(%ebp),%edx
0000434b	leal	0x68c3a-0x3491(%edx),%edx
00004351	movl	%edx,0x04(%esp)
00004355	movl	%ecx,(%esp)
00004358	call	*0x0c(%eax)
0000435b	movl	%esi,%ebx
0000435d	movl	0x10(%ebp),%esi
00004360	testl	%esi,%esi
00004362	je	0x00004370
00004364	movl	%ebx,0x04(%esp)
00004368	movl	%esi,(%esp)
0000436b	calll	CChoreoChannel::AddEvent(CChoreoEvent*)
00004370	movl	0x0c(%ebp),%eax
00004373	movl	%eax,0x04(%esp)
00004377	movl	%ebx,(%esp)
0000437a	calll	CChoreoEvent::SetActor(CChoreoActor*)
0000437f	movl	%esi,0x04(%esp)
00004383	movl	%ebx,(%esp)
00004386	calll	CChoreoEvent::SetChannel(CChoreoChannel*)
0000438b	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffffd33(%ebp)
00004392	je	0x00004616
00004398	movl	0xfffffd20(%ebp),%eax
0000439e	movl	%eax,(%esp)
000043a1	calll	CCurveData::GetCount()
000043a6	testl	%eax,%eax
000043a8	jne	0x00004616
000043ae	movl	0xfffffd50(%ebp),%eax
000043b4	movss	0xfffffd1c(%ebp),%xmm0
000043bc	ucomiss	0x655fc-0x3491(%eax),%xmm0
000043c3	jne	0x0000450c
000043c9	jp	0x0000450c
000043cf	movl	0xfffffd50(%ebp),%eax
000043d5	movss	0xfffffd28(%ebp),%xmm0
000043dd	ucomiss	0x655fc-0x3491(%eax),%xmm0
000043e4	jne	0x0000450c
000043ea	jp	0x0000450c
000043f0	movl	0xfffffd50(%ebp),%eax
000043f6	movss	0xfffffd24(%ebp),%xmm0
000043fe	ucomiss	0x655fc-0x3491(%eax),%xmm0
00004405	jne	0x0000450c
0000440b	jnp	0x00004616
00004411	jmp	0x0000450c
00004416	movl	(%ecx),%eax
00004418	movl	%ecx,(%esp)
0000441b	call	(%eax)
0000441d	movl	0xfffffd50(%ebp),%ecx
00004423	leal	0x68c51-0x3491(%ecx),%ecx
00004429	movl	%ecx,0x04(%esp)
0000442d	movl	%eax,(%esp)
00004430	calll	V_stricmp(char const*, char const*)
00004435	movl	0x000000a4(%edi),%ecx
0000443b	testl	%eax,%eax
0000443d	movl	%esi,%ebx
0000443f	jne	0x000035c0
00004445	movl	(%ecx),%eax
00004447	movl	%ecx,(%esp)
0000444a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004452	call	*0x04(%eax)
00004455	movl	0x000000a4(%edi),%ecx
0000445b	movl	(%ecx),%eax
0000445d	movl	%ecx,(%esp)
00004460	call	(%eax)
00004462	movl	%eax,(%esp)
00004465	calll	_atof
0000446a	movl	0x000000a4(%edi),%ecx
00004470	movl	(%ecx),%eax
00004472	movl	%ecx,(%esp)
00004475	fstps	0xfffffd60(%ebp)
0000447b	call	*0x08(%eax)
0000447e	movss	0xfffffd60(%ebp),%xmm0
00004486	movss	%xmm0,0xfffffd38(%ebp)
0000448e	testb	%al,%al
00004490	movss	0xfffffd18(%ebp),%xmm0
00004498	je	0x000044d3
0000449a	movl	0x000000a4(%edi),%ecx
000044a0	movl	(%ecx),%eax
000044a2	movl	%ecx,(%esp)
000044a5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000044ad	call	*0x04(%eax)
000044b0	movl	0x000000a4(%edi),%ecx
000044b6	movl	(%ecx),%eax
000044b8	movl	%ecx,(%esp)
000044bb	call	(%eax)
000044bd	movl	%eax,(%esp)
000044c0	calll	_atof
000044c5	fstps	0xfffffd5c(%ebp)
000044cb	movss	0xfffffd5c(%ebp),%xmm0
000044d3	movss	%xmm0,0xfffffd2c(%ebp)
000044db	movss	0xfffffd38(%ebp),%xmm0
000044e3	movss	%xmm0,0x04(%esp)
000044e9	movl	%ebx,(%esp)
000044ec	calll	CChoreoEvent::SetStartTime(float)
000044f1	movss	0xfffffd2c(%ebp),%xmm0
000044f9	movss	%xmm0,0x04(%esp)
000044ff	movl	%ebx,(%esp)
00004502	calll	CChoreoEvent::SetEndTime(float)
00004507	jmp	0x000042ec
0000450c	movl	(%ebx),%eax
0000450e	movl	%ebx,(%esp)
00004511	call	(%eax)
00004513	fstpt	0xfffffd38(%ebp)
00004519	movl	(%ebx),%eax
0000451b	movl	%ebx,(%esp)
0000451e	call	(%eax)
00004520	fstpt	0xfffffd44(%ebp)
00004526	movss	0xfffffd28(%ebp),%xmm0
0000452e	movss	%xmm0,0x08(%esp)
00004534	fldt	0xfffffd38(%ebp)
0000453a	fstps	0xfffffd58(%ebp)
00004540	movl	0xfffffd50(%ebp),%esi
00004546	movss	0x655fc-0x3491(%esi),%xmm0
0000454e	subss	0xfffffd1c(%ebp),%xmm0
00004556	mulss	0xfffffd58(%ebp),%xmm0
0000455e	movss	%xmm0,0xfffffd38(%ebp)
00004566	movss	%xmm0,0x04(%esp)
0000456c	movl	0xfffffd20(%ebp),%edi
00004572	movl	%edi,(%esp)
00004575	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
0000457d	calll	CCurveData::Add(float, float, bool)
00004582	movss	0xfffffd28(%ebp),%xmm0
0000458a	movss	%xmm0,0x08(%esp)
00004590	fldt	0xfffffd44(%ebp)
00004596	fstps	0xfffffd54(%ebp)
0000459c	movss	0xfffffd24(%ebp),%xmm1
000045a4	mulss	0xfffffd54(%ebp),%xmm1
000045ac	movss	%xmm1,0xfffffd24(%ebp)
000045b4	movss	0xfffffd38(%ebp),%xmm0
000045bc	addss	%xmm1,%xmm0
000045c0	mulss	0x65600-0x3491(%esi),%xmm0
000045c8	movss	%xmm0,0x04(%esp)
000045ce	movl	%edi,(%esp)
000045d1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
000045d9	calll	CCurveData::Add(float, float, bool)
000045de	movss	0xfffffd28(%ebp),%xmm0
000045e6	movss	%xmm0,0x08(%esp)
000045ec	movss	0xfffffd24(%ebp),%xmm0
000045f4	movss	%xmm0,0x04(%esp)
000045fa	movl	%edi,(%esp)
000045fd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
00004605	calll	CCurveData::Add(float, float, bool)
0000460a	movl	%ebx,0x04(%esp)
0000460e	movl	%edi,(%esp)
00004611	calll	CCurveData::Resort(ICurveDataAccessor*)
00004616	movl	0xfffffd14(%ebp),%eax
0000461c	movl	(%eax),%eax
0000461e	cmpl	0xf0(%ebp),%eax
00004621	jne	0x00004630
00004623	movl	%ebx,%eax
00004625	addl	$0x000002fc,%esp
0000462b	popl	%esi
0000462c	popl	%edi
0000462d	popl	%ebx
0000462e	popl	%ebp
0000462f	ret
00004630	calll	___stack_chk_fail
00004635	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseActor():
00004640	pushl	%ebp
00004641	movl	%esp,%ebp
00004643	pushl	%ebx
00004644	pushl	%edi
00004645	pushl	%esi
00004646	subl	$0x1c,%esp
00004649	calll	0x0000464e
0000464e	popl	%esi
0000464f	movl	0x08(%ebp),%edi
00004652	movl	%edi,(%esp)
00004655	calll	CChoreoScene::AllocActor()
0000465a	movl	%eax,%ebx
0000465c	movl	%ebx,0xf0(%ebp)
0000465f	movl	0x000000a4(%edi),%ecx
00004665	movl	(%ecx),%eax
00004667	movl	%ecx,(%esp)
0000466a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004672	call	*0x04(%eax)
00004675	movl	0x000000a4(%edi),%ecx
0000467b	movl	(%ecx),%eax
0000467d	movl	%ecx,(%esp)
00004680	call	(%eax)
00004682	movl	%eax,0x04(%esp)
00004686	movl	%ebx,(%esp)
00004689	calll	CChoreoActor::SetName(char const*)
0000468e	movl	0x000000a4(%edi),%ecx
00004694	movl	(%ecx),%eax
00004696	movl	%ecx,(%esp)
00004699	movl	$0x00000001,0x04(%esp)
000046a1	call	*0x04(%eax)
000046a4	movl	0x000000a4(%edi),%ecx
000046aa	movl	(%ecx),%eax
000046ac	movl	%ecx,(%esp)
000046af	call	(%eax)
000046b1	leal	0x68bb1-0x464e(%esi),%ecx
000046b7	movl	%ecx,0x04(%esp)
000046bb	movl	%eax,(%esp)
000046be	calll	_strcasecmp
000046c3	testl	%eax,%eax
000046c5	je	0x000046df
000046c7	movl	0x000000a4(%edi),%ecx
000046cd	movl	(%ecx),%eax
000046cf	leal	0x68dd4-0x464e(%esi),%edx
000046d5	movl	%edx,0x04(%esp)
000046d9	movl	%ecx,(%esp)
000046dc	call	*0x0c(%eax)
000046df	movl	0x000000a4(%edi),%ecx
000046e5	movl	(%ecx),%eax
000046e7	movl	%ecx,(%esp)
000046ea	movl	$0x00000001,0x04(%esp)
000046f2	call	*0x04(%eax)
000046f5	movl	0x000000a4(%edi),%ecx
000046fb	movl	(%ecx),%eax
000046fd	movl	%ecx,(%esp)
00004700	call	(%eax)
00004702	leal	0x68bd5-0x464e(%esi),%ecx
00004708	movl	%ecx,0xec(%ebp)
0000470b	movl	%ecx,0x04(%esp)
0000470f	movl	%eax,(%esp)
00004712	calll	V_stricmp(char const*, char const*)
00004717	testl	%eax,%eax
00004719	je	0x00004884
0000471f	leal	0x68de0-0x464e(%esi),%eax
00004725	movl	%eax,0xe8(%ebp)
00004728	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00004730	movl	0x000000a4(%edi),%ecx
00004736	movl	(%ecx),%eax
00004738	movl	%ecx,(%esp)
0000473b	call	(%eax)
0000473d	movl	0xe8(%ebp),%ecx
00004740	movl	%ecx,0x04(%esp)
00004744	movl	%eax,(%esp)
00004747	calll	V_stricmp(char const*, char const*)
0000474c	testl	%eax,%eax
0000474e	jne	0x00004761
00004750	movl	0xf0(%ebp),%eax
00004753	movl	%eax,0x04(%esp)
00004757	movl	%edi,(%esp)
0000475a	calll	CChoreoScene::ParseChannel(CChoreoActor*)
0000475f	jmp	0x000047b6
00004761	movl	0x000000a4(%edi),%ecx
00004767	movl	(%ecx),%eax
00004769	movl	%ecx,(%esp)
0000476c	call	(%eax)
0000476e	leal	0x68de8-0x464e(%esi),%ecx
00004774	movl	%ecx,0x04(%esp)
00004778	movl	%eax,(%esp)
0000477b	calll	V_stricmp(char const*, char const*)
00004780	movl	0x000000a4(%edi),%ecx
00004786	testl	%eax,%eax
00004788	jne	0x000047f5
0000478a	movl	(%ecx),%eax
0000478c	movl	%ecx,(%esp)
0000478f	movl	$0x00000001,0x04(%esp)
00004797	call	*0x04(%eax)
0000479a	movl	0x000000a4(%edi),%ecx
000047a0	movl	(%ecx),%eax
000047a2	movl	%ecx,(%esp)
000047a5	call	(%eax)
000047a7	movl	%eax,0x04(%esp)
000047ab	movl	0xf0(%ebp),%eax
000047ae	movl	%eax,(%esp)
000047b1	calll	CChoreoActor::SetFacePoserModelName(char const*)
000047b6	movl	0x000000a4(%edi),%ecx
000047bc	movl	(%ecx),%eax
000047be	movl	%ecx,(%esp)
000047c1	movl	$0x00000001,0x04(%esp)
000047c9	call	*0x04(%eax)
000047cc	movl	0x000000a4(%edi),%ecx
000047d2	movl	(%ecx),%eax
000047d4	movl	%ecx,(%esp)
000047d7	call	(%eax)
000047d9	movl	0xec(%ebp),%ecx
000047dc	movl	%ecx,0x04(%esp)
000047e0	movl	%eax,(%esp)
000047e3	calll	V_stricmp(char const*, char const*)
000047e8	testl	%eax,%eax
000047ea	jne	0x00004730
000047f0	jmp	0x00004884
000047f5	movl	(%ecx),%eax
000047f7	movl	%ecx,(%esp)
000047fa	call	(%eax)
000047fc	leal	0x68ce9-0x464e(%esi),%ecx
00004802	movl	%ecx,0x04(%esp)
00004806	movl	%eax,(%esp)
00004809	calll	V_stricmp(char const*, char const*)
0000480e	movl	%esi,%ebx
00004810	movl	0x000000a4(%edi),%esi
00004816	testl	%eax,%eax
00004818	jne	0x0000485d
0000481a	movl	(%esi),%eax
0000481c	movl	%esi,(%esp)
0000481f	movl	$0x00000001,0x04(%esp)
00004827	call	*0x04(%eax)
0000482a	movl	0x000000a4(%edi),%ecx
00004830	movl	(%ecx),%eax
00004832	movl	%ecx,(%esp)
00004835	call	(%eax)
00004837	movl	%eax,(%esp)
0000483a	calll	_atoi
0000483f	movl	0xf0(%ebp),%ecx
00004842	movl	%ecx,(%esp)
00004845	testl	%eax,%eax
00004847	setne	%al
0000484a	movzbl	%al,%eax
0000484d	movl	%eax,0x04(%esp)
00004851	calll	CChoreoActor::SetActive(bool)
00004856	movl	%ebx,%esi
00004858	jmp	0x000047b6
0000485d	movl	(%esi),%eax
0000485f	movl	0x0c(%eax),%edi
00004862	movl	%esi,(%esp)
00004865	call	(%eax)
00004867	movl	%eax,0x08(%esp)
0000486b	leal	0x68df7-0x464e(%ebx),%eax
00004871	movl	%eax,0x04(%esp)
00004875	movl	%esi,(%esp)
00004878	call	*%edi
0000487a	movl	0x08(%ebp),%edi
0000487d	movl	%ebx,%esi
0000487f	jmp	0x000047b6
00004884	movl	0xf0(%ebp),%eax
00004887	addl	$0x1c,%esp
0000488a	popl	%esi
0000488b	popl	%edi
0000488c	popl	%ebx
0000488d	popl	%ebp
0000488e	ret
0000488f	nop
CChoreoScene::ParseChannel(CChoreoActor*):
00004890	pushl	%ebp
00004891	movl	%esp,%ebp
00004893	pushl	%ebx
00004894	pushl	%edi
00004895	pushl	%esi
00004896	subl	$0x2c,%esp
00004899	calll	0x0000489e
0000489e	popl	%esi
0000489f	movl	%esi,0xe8(%ebp)
000048a2	movl	0x08(%ebp),%ebx
000048a5	movl	%ebx,(%esp)
000048a8	calll	CChoreoScene::AllocChannel()
000048ad	movl	%eax,%edi
000048af	movl	%edi,0xf0(%ebp)
000048b2	movl	0x000000a4(%ebx),%ecx
000048b8	movl	(%ecx),%eax
000048ba	movl	%ecx,(%esp)
000048bd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000048c5	call	*0x04(%eax)
000048c8	movl	0x000000a4(%ebx),%ecx
000048ce	movl	(%ecx),%eax
000048d0	movl	%ecx,(%esp)
000048d3	call	(%eax)
000048d5	movl	%eax,0x04(%esp)
000048d9	movl	%edi,(%esp)
000048dc	calll	CChoreoChannel::SetName(char const*)
000048e1	movl	0x000000a4(%ebx),%ecx
000048e7	movl	(%ecx),%eax
000048e9	movl	%ecx,(%esp)
000048ec	movl	$0x00000001,0x04(%esp)
000048f4	call	*0x04(%eax)
000048f7	movl	0x000000a4(%ebx),%ecx
000048fd	movl	(%ecx),%eax
000048ff	movl	%ecx,(%esp)
00004902	call	(%eax)
00004904	leal	0x68bb1-0x489e(%esi),%ecx
0000490a	movl	%ecx,0x04(%esp)
0000490e	movl	%eax,(%esp)
00004911	calll	_strcasecmp
00004916	testl	%eax,%eax
00004918	je	0x00004932
0000491a	movl	0x000000a4(%ebx),%ecx
00004920	movl	(%ecx),%eax
00004922	leal	0x68dd4-0x489e(%esi),%edx
00004928	movl	%edx,0x04(%esp)
0000492c	movl	%ecx,(%esp)
0000492f	call	*0x0c(%eax)
00004932	movl	0x000000a4(%ebx),%ecx
00004938	movl	(%ecx),%eax
0000493a	movl	%ecx,(%esp)
0000493d	movl	$0x00000001,0x04(%esp)
00004945	call	*0x04(%eax)
00004948	movl	0x000000a4(%ebx),%ecx
0000494e	movl	(%ecx),%eax
00004950	movl	%ecx,(%esp)
00004953	call	(%eax)
00004955	leal	0x68bd5-0x489e(%esi),%ecx
0000495b	movl	%ecx,0xe4(%ebp)
0000495e	movl	%ecx,0x04(%esp)
00004962	movl	%eax,(%esp)
00004965	calll	V_stricmp(char const*, char const*)
0000496a	testl	%eax,%eax
0000496c	je	0x00004a85
00004972	leal	0x68e14-0x489e(%esi),%eax
00004978	movl	%eax,0xe0(%ebp)
0000497b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00004980	movl	0x000000a4(%ebx),%ecx
00004986	movl	(%ecx),%eax
00004988	movl	%ecx,(%esp)
0000498b	call	(%eax)
0000498d	movl	0xe0(%ebp),%ecx
00004990	movl	%ecx,0x04(%esp)
00004994	movl	%eax,(%esp)
00004997	calll	V_stricmp(char const*, char const*)
0000499c	testl	%eax,%eax
0000499e	jne	0x000049b8
000049a0	movl	0xf0(%ebp),%eax
000049a3	movl	%eax,0x08(%esp)
000049a7	movl	0x0c(%ebp),%eax
000049aa	movl	%eax,0x04(%esp)
000049ae	movl	%ebx,(%esp)
000049b1	calll	CChoreoScene::ParseEvent(CChoreoActor*, CChoreoChannel*)
000049b6	jmp	0x00004a23
000049b8	movl	0x000000a4(%ebx),%ecx
000049be	movl	(%ecx),%eax
000049c0	movl	%ecx,(%esp)
000049c3	call	(%eax)
000049c5	leal	0x68ce9-0x489e(%esi),%ecx
000049cb	movl	%ecx,0x04(%esp)
000049cf	movl	%eax,(%esp)
000049d2	calll	V_stricmp(char const*, char const*)
000049d7	movl	%ebx,%edi
000049d9	movl	%esi,%ebx
000049db	movl	0x000000a4(%edi),%esi
000049e1	testl	%eax,%eax
000049e3	jne	0x00004a62
000049e5	movl	(%esi),%eax
000049e7	movl	%esi,(%esp)
000049ea	movl	$0x00000001,0x04(%esp)
000049f2	call	*0x04(%eax)
000049f5	movl	0x000000a4(%edi),%ecx
000049fb	movl	(%ecx),%eax
000049fd	movl	%ecx,(%esp)
00004a00	call	(%eax)
00004a02	movl	%eax,(%esp)
00004a05	calll	_atoi
00004a0a	movl	0xf0(%ebp),%ecx
00004a0d	movl	%ecx,(%esp)
00004a10	testl	%eax,%eax
00004a12	setne	%al
00004a15	movzbl	%al,%eax
00004a18	movl	%eax,0x04(%esp)
00004a1c	calll	CChoreoChannel::SetActive(bool)
00004a21	movl	%edi,%ebx
00004a23	movl	0x000000a4(%ebx),%ecx
00004a29	movl	(%ecx),%eax
00004a2b	movl	%ecx,(%esp)
00004a2e	movl	$0x00000001,0x04(%esp)
00004a36	call	*0x04(%eax)
00004a39	movl	0x000000a4(%ebx),%ecx
00004a3f	movl	(%ecx),%eax
00004a41	movl	%ecx,(%esp)
00004a44	call	(%eax)
00004a46	movl	0xe4(%ebp),%ecx
00004a49	movl	%ecx,0x04(%esp)
00004a4d	movl	%eax,(%esp)
00004a50	calll	V_stricmp(char const*, char const*)
00004a55	testl	%eax,%eax
00004a57	movl	0xe8(%ebp),%esi
00004a5a	jne	0x00004980
00004a60	jmp	0x00004a85
00004a62	movl	(%esi),%eax
00004a64	movl	0x0c(%eax),%ecx
00004a67	movl	%ecx,0xec(%ebp)
00004a6a	movl	%esi,(%esp)
00004a6d	call	(%eax)
00004a6f	movl	%eax,0x08(%esp)
00004a73	leal	0x68e1a-0x489e(%ebx),%eax
00004a79	movl	%eax,0x04(%esp)
00004a7d	movl	%esi,(%esp)
00004a80	call	*0xec(%ebp)
00004a83	jmp	0x00004a21
00004a85	movl	0x0c(%ebp),%edi
00004a88	testl	%edi,%edi
00004a8a	je	0x00004aaa
00004a8c	movl	0xf0(%ebp),%esi
00004a8f	movl	%esi,0xf0(%ebp)
00004a92	movl	%esi,0x04(%esp)
00004a96	movl	%edi,(%esp)
00004a99	calll	CChoreoActor::AddChannel(CChoreoChannel*)
00004a9e	movl	%edi,0x04(%esp)
00004aa2	movl	%esi,(%esp)
00004aa5	calll	CChoreoChannel::SetActor(CChoreoActor*)
00004aaa	movl	0xf0(%ebp),%eax
00004aad	addl	$0x2c,%esp
00004ab0	popl	%esi
00004ab1	popl	%edi
00004ab2	popl	%ebx
00004ab3	popl	%ebp
00004ab4	ret
00004ab5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseFacePoserModel(CChoreoActor*):
00004ac0	pushl	%ebp
00004ac1	movl	%esp,%ebp
00004ac3	pushl	%esi
00004ac4	subl	$0x14,%esp
00004ac7	movl	0x08(%ebp),%esi
00004aca	movl	0x000000a4(%esi),%ecx
00004ad0	movl	(%ecx),%eax
00004ad2	movl	%ecx,(%esp)
00004ad5	movl	$0x00000001,0x04(%esp)
00004add	call	*0x04(%eax)
00004ae0	movl	0x000000a4(%esi),%ecx
00004ae6	movl	(%ecx),%eax
00004ae8	movl	%ecx,(%esp)
00004aeb	call	(%eax)
00004aed	movl	%eax,0x04(%esp)
00004af1	movl	0x0c(%ebp),%eax
00004af4	movl	%eax,(%esp)
00004af7	calll	CChoreoActor::SetFacePoserModelName(char const*)
00004afc	addl	$0x14,%esp
00004aff	popl	%esi
00004b00	popl	%ebp
00004b01	ret
00004b02	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetMapname():
00004b10	movl	$0x000000a8,%eax
00004b15	addl	0x04(%esp),%eax
00004b19	ret
00004b1a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetMapname(char const*):
00004b20	pushl	%ebp
00004b21	movl	%esp,%ebp
00004b23	subl	$0x18,%esp
00004b26	movl	0x0c(%ebp),%eax
00004b29	movl	%eax,0x04(%esp)
00004b2d	movl	$0x000000a8,%eax
00004b32	addl	0x08(%ebp),%eax
00004b35	movl	%eax,(%esp)
00004b38	movl	$0x00000080,0x08(%esp)
00004b40	calll	V_strncpy(char*, char const*, int)
00004b45	addl	$0x18,%esp
00004b48	popl	%ebp
00004b49	ret
00004b4a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseMapname():
00004b50	pushl	%ebp
00004b51	movl	%esp,%ebp
00004b53	pushl	%esi
00004b54	subl	$0x14,%esp
00004b57	movl	0x08(%ebp),%esi
00004b5a	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%esi)
00004b61	movl	0x000000a4(%esi),%ecx
00004b67	movl	(%ecx),%eax
00004b69	movl	%ecx,(%esp)
00004b6c	movl	$0x00000001,0x04(%esp)
00004b74	call	*0x04(%eax)
00004b77	movl	0x000000a4(%esi),%ecx
00004b7d	movl	(%ecx),%eax
00004b7f	movl	%ecx,(%esp)
00004b82	call	(%eax)
00004b84	movl	%eax,0x04(%esp)
00004b88	addl	$0x000000a8,%esi
00004b8e	movl	%esi,(%esp)
00004b91	movl	$0x00000080,0x08(%esp)
00004b99	calll	V_strncpy(char*, char const*, int)
00004b9e	addl	$0x14,%esp
00004ba1	popl	%esi
00004ba2	popl	%ebp
00004ba3	ret
00004ba4	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseFPS():
00004bb0	pushl	%ebp
00004bb1	movl	%esp,%ebp
00004bb3	pushl	%esi
00004bb4	subl	$0x14,%esp
00004bb7	movl	0x08(%ebp),%esi
00004bba	movl	0x000000a4(%esi),%ecx
00004bc0	movl	(%ecx),%eax
00004bc2	movl	%ecx,(%esp)
00004bc5	movl	$0x00000001,0x04(%esp)
00004bcd	call	*0x04(%eax)
00004bd0	movl	0x000000a4(%esi),%ecx
00004bd6	movl	(%ecx),%eax
00004bd8	movl	%ecx,(%esp)
00004bdb	call	(%eax)
00004bdd	movl	%eax,(%esp)
00004be0	calll	_atoi
00004be5	movl	%eax,0x00000128(%esi)
00004beb	movl	$0x0000000a,%ecx
00004bf0	cmpl	$0x0a,%eax
00004bf3	jl	0x00004c02
00004bf5	cmpl	$0x000000f0,%eax
00004bfa	movl	$0x000000f0,%ecx
00004bff	cmovlel	%eax,%ecx
00004c02	movl	%ecx,0x00000128(%esi)
00004c08	addl	$0x14,%esp
00004c0b	popl	%esi
00004c0c	popl	%ebp
00004c0d	ret
00004c0e	nop
CChoreoScene::ParseSnap():
00004c10	pushl	%ebp
00004c11	movl	%esp,%ebp
00004c13	pushl	%edi
00004c14	pushl	%esi
00004c15	subl	$0x10,%esp
00004c18	calll	0x00004c1d
00004c1d	popl	%edi
00004c1e	movl	0x08(%ebp),%esi
00004c21	movl	0x000000a4(%esi),%ecx
00004c27	movl	(%ecx),%eax
00004c29	movl	%ecx,(%esp)
00004c2c	movl	$0x00000001,0x04(%esp)
00004c34	call	*0x04(%eax)
00004c37	movl	0x000000a4(%esi),%ecx
00004c3d	movl	(%ecx),%eax
00004c3f	movl	%ecx,(%esp)
00004c42	call	(%eax)
00004c44	leal	0x68e11-0x4c1d(%edi),%ecx
00004c4a	movl	%ecx,0x04(%esp)
00004c4e	movl	%eax,(%esp)
00004c51	calll	V_stricmp(char const*, char const*)
00004c56	movb	0x0000020c(%esi),%cl
00004c5c	andb	$0xf7,%cl
00004c5f	testl	%eax,%eax
00004c61	sete	%al
00004c64	shlb	$0x03,%al
00004c67	orb	%cl,%al
00004c69	movb	%al,0x0000020c(%esi)
00004c6f	addl	$0x10,%esp
00004c72	popl	%esi
00004c73	popl	%edi
00004c74	popl	%ebp
00004c75	ret
00004c76	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseIgnorePhonemes():
00004c80	pushl	%ebp
00004c81	movl	%esp,%ebp
00004c83	pushl	%edi
00004c84	pushl	%esi
00004c85	subl	$0x10,%esp
00004c88	calll	0x00004c8d
00004c8d	popl	%edi
00004c8e	movl	0x08(%ebp),%esi
00004c91	movl	0x000000a4(%esi),%ecx
00004c97	movl	(%ecx),%eax
00004c99	movl	%ecx,(%esp)
00004c9c	movl	$0x00000001,0x04(%esp)
00004ca4	call	*0x04(%eax)
00004ca7	movl	0x000000a4(%esi),%ecx
00004cad	movl	(%ecx),%eax
00004caf	movl	%ecx,(%esp)
00004cb2	call	(%eax)
00004cb4	leal	0x68e11-0x4c8d(%edi),%ecx
00004cba	movl	%ecx,0x04(%esp)
00004cbe	movl	%eax,(%esp)
00004cc1	calll	V_stricmp(char const*, char const*)
00004cc6	movb	0x0000020c(%esi),%cl
00004ccc	andb	$0xfd,%cl
00004ccf	testl	%eax,%eax
00004cd1	sete	%al
00004cd4	addb	%al,%al
00004cd6	orb	%cl,%al
00004cd8	movb	%al,0x0000020c(%esi)
00004cde	addl	$0x10,%esp
00004ce1	popl	%esi
00004ce2	popl	%edi
00004ce3	popl	%ebp
00004ce4	ret
00004ce5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ParseScaleSettings(ISceneTokenProcessor*, CChoreoScene*):
00004cf0	pushl	%ebp
00004cf1	movl	%esp,%ebp
00004cf3	pushl	%ebx
00004cf4	pushl	%edi
00004cf5	pushl	%esi
00004cf6	subl	$0x0000012c,%esp
00004cfc	calll	0x00004d01
00004d01	popl	%edi
00004d02	movl	%edi,0xfffffed8(%ebp)
00004d08	movl	0x758ea-0x4d01(%edi),%eax
00004d0e	movl	%eax,0xfffffed4(%ebp)
00004d14	movl	(%eax),%eax
00004d16	movl	%eax,0xf0(%ebp)
00004d19	movl	0x08(%ebp),%esi
00004d1c	movl	(%esi),%eax
00004d1e	movl	%esi,(%esp)
00004d21	movl	$0x00000001,0x04(%esp)
00004d29	call	*0x04(%eax)
00004d2c	movl	(%esi),%eax
00004d2e	movl	%esi,(%esp)
00004d31	call	(%eax)
00004d33	leal	0x68bb1-0x4d01(%edi),%ecx
00004d39	movl	%ecx,0x04(%esp)
00004d3d	movl	%eax,(%esp)
00004d40	calll	_strcasecmp
00004d45	testl	%eax,%eax
00004d47	je	0x00004d5b
00004d49	movl	(%esi),%eax
00004d4b	leal	0x68bb3-0x4d01(%edi),%ecx
00004d51	movl	%ecx,0x04(%esp)
00004d55	movl	%esi,(%esp)
00004d58	call	*0x0c(%eax)
00004d5b	movl	0x0c(%ebp),%eax
00004d5e	leal	0x00000164(%eax),%eax
00004d64	movl	%eax,0xfffffedc(%ebp)
00004d6a	jmp	0x00004e45
00004d6f	nop
00004d70	movl	(%esi),%eax
00004d72	movl	%esi,(%esp)
00004d75	call	(%eax)
00004d77	leal	0x68bd5-0x4d01(%edi),%ecx
00004d7d	movl	%ecx,0x04(%esp)
00004d81	movl	%eax,(%esp)
00004d84	calll	V_stricmp(char const*, char const*)
00004d89	testl	%eax,%eax
00004d8b	je	0x00004e77
00004d91	movl	(%esi),%eax
00004d93	movl	%esi,(%esp)
00004d96	call	(%eax)
00004d98	movl	%eax,0x04(%esp)
00004d9c	leal	0xfffffef0(%ebp),%edi
00004da2	movl	%edi,(%esp)
00004da5	movl	$0x00000100,0x08(%esp)
00004dad	calll	V_strncpy(char*, char const*, int)
00004db2	movl	(%esi),%eax
00004db4	movl	%esi,(%esp)
00004db7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004dbf	call	*0x04(%eax)
00004dc2	movl	(%esi),%eax
00004dc4	movl	%esi,(%esp)
00004dc7	call	(%eax)
00004dc9	movl	%eax,(%esp)
00004dcc	calll	V_atoi(char const*)
00004dd1	movl	%eax,%esi
00004dd3	movl	%edi,0xfffffee0(%ebp)
00004dd9	movl	%edi,%ebx
00004ddb	leal	0xfffffee0(%ebp),%eax
00004de1	movl	%eax,0x04(%esp)
00004de5	movl	0xfffffedc(%ebp),%edi
00004deb	movl	%edi,(%esp)
00004dee	testl	%esi,%esi
00004df0	movl	$0x00000064,%eax
00004df5	cmovlel	%eax,%esi
00004df8	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
00004dfd	cmpl	$0xff,%eax
00004e00	jne	0x00004e2c
00004e02	movl	%ebx,(%esp)
00004e05	calll	_strdup
00004e0a	movl	%eax,0xfffffee8(%ebp)
00004e10	movl	$0x00000064,0xfffffeec(%ebp)
00004e1a	leal	0xfffffee8(%ebp),%eax
00004e20	movl	%eax,0x04(%esp)
00004e24	movl	%edi,(%esp)
00004e27	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
00004e2c	movl	0x0c(%ebp),%ecx
00004e2f	movl	0x00000168(%ecx),%ecx
00004e35	imull	$0x18,%eax,%eax
00004e38	movl	%esi,0x14(%ecx,%eax)
00004e3c	movl	0xfffffed8(%ebp),%edi
00004e42	movl	0x08(%ebp),%esi
00004e45	movl	(%esi),%eax
00004e47	movl	%esi,(%esp)
00004e4a	movl	$0x00000001,0x04(%esp)
00004e52	call	*0x04(%eax)
00004e55	movl	(%esi),%eax
00004e57	movl	%esi,(%esp)
00004e5a	call	(%eax)
00004e5c	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00004e5f	jne	0x00004d70
00004e65	movl	(%esi),%eax
00004e67	leal	0x691d5-0x4d01(%edi),%ecx
00004e6d	movl	%ecx,0x04(%esp)
00004e71	movl	%esi,(%esp)
00004e74	call	*0x0c(%eax)
00004e77	movl	0xfffffed4(%ebp),%eax
00004e7d	movl	(%eax),%eax
00004e7f	cmpl	0xf0(%ebp),%eax
00004e82	jne	0x00004e8f
00004e84	addl	$0x0000012c,%esp
00004e8a	popl	%esi
00004e8b	popl	%edi
00004e8c	popl	%ebx
00004e8d	popl	%ebp
00004e8e	ret
00004e8f	calll	___stack_chk_fail
00004e94	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ReconcileTags():
00004ea0	pushl	%ebp
00004ea1	movl	%esp,%ebp
00004ea3	pushl	%ebx
00004ea4	pushl	%edi
00004ea5	pushl	%esi
00004ea6	subl	$0x3c,%esp
00004ea9	calll	0x00004eae
00004eae	popl	%eax
00004eaf	movl	%eax,0xdc(%ebp)
00004eb2	movl	0x08(%ebp),%ecx
00004eb5	movl	0x24(%ecx),%eax
00004eb8	testl	%eax,%eax
00004eba	jle	0x0000505c
00004ec0	xorl	%edx,%edx
00004ec2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00004ed0	movl	0x18(%ecx),%ecx
00004ed3	movl	(%ecx,%edx,4),%esi
00004ed6	movl	%esi,0xd4(%ebp)
00004ed9	testl	%esi,%esi
00004edb	je	0x00005050
00004ee1	movl	%edx,0xd0(%ebp)
00004ee4	movl	%esi,(%esp)
00004ee7	calll	CChoreoActor::GetNumChannels()
00004eec	xorl	%edi,%edi
00004eee	testl	%eax,%eax
00004ef0	jle	0x00005047
00004ef6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00004f00	movl	%edi,0xd8(%ebp)
00004f03	movl	%edi,0x04(%esp)
00004f07	movl	%esi,(%esp)
00004f0a	calll	CChoreoActor::GetChannel(int)
00004f0f	movl	%eax,%esi
00004f11	movl	%esi,0xe0(%ebp)
00004f14	testl	%esi,%esi
00004f16	je	0x00005030
00004f1c	movl	%esi,(%esp)
00004f1f	calll	CChoreoChannel::GetNumEvents()
00004f24	xorl	%edi,%edi
00004f26	testl	%eax,%eax
00004f28	jle	0x00005030
00004f2e	nop
00004f30	movl	%edi,0xe8(%ebp)
00004f33	movl	%edi,0x04(%esp)
00004f37	movl	%esi,(%esp)
00004f3a	calll	CChoreoChannel::GetEvent(int)
00004f3f	movl	%eax,%edi
00004f41	testl	%edi,%edi
00004f43	je	0x00005019
00004f49	movl	%edi,(%esp)
00004f4c	calll	CChoreoEvent::IsUsingRelativeTag()
00004f51	cmpb	$0x01,%al
00004f53	jne	0x00005019
00004f59	movl	%edi,(%esp)
00004f5c	calll	CChoreoEvent::GetRelativeWavName()
00004f61	movl	%eax,%esi
00004f63	movl	%edi,(%esp)
00004f66	calll	CChoreoEvent::GetRelativeTagName()
00004f6b	movl	%eax,0x08(%esp)
00004f6f	movl	%esi,0x04(%esp)
00004f73	movl	0x08(%ebp),%ebx
00004f76	movl	%ebx,(%esp)
00004f79	calll	CChoreoScene::FindTagByName(char const*, char const*)
00004f7e	testl	%eax,%eax
00004f80	je	0x00004fb2
00004f82	movl	%eax,(%esp)
00004f85	calll	CEventRelativeTag::GetStartTime()
00004f8a	movl	%edi,(%esp)
00004f8d	fstps	0xf0(%ebp)
00004f90	calll	CChoreoEvent::GetStartTime()
00004f95	fstps	0xec(%ebp)
00004f98	movss	0xf0(%ebp),%xmm0
00004f9d	subss	0xec(%ebp),%xmm0
00004fa2	movss	%xmm0,0x04(%esp)
00004fa8	movl	%edi,(%esp)
00004fab	calll	CChoreoEvent::OffsetTime(float)
00004fb0	jmp	0x00005019
00004fb2	movl	%edi,(%esp)
00004fb5	calll	CChoreoEvent::GetName()
00004fba	movl	%eax,0xe4(%ebp)
00004fbd	movl	%edi,(%esp)
00004fc0	calll	CChoreoEvent::GetRelativeWavName()
00004fc5	movl	%eax,%esi
00004fc7	movl	%edi,(%esp)
00004fca	calll	CChoreoEvent::GetRelativeTagName()
00004fcf	movl	%eax,0x14(%esp)
00004fd3	movl	%esi,0x10(%esp)
00004fd7	movl	0xe4(%ebp),%eax
00004fda	movl	%eax,0x0c(%esp)
00004fde	movl	0xdc(%ebp),%esi
00004fe1	leal	0x6916b-0x4eae(%esi),%eax
00004fe7	movl	%eax,0x08(%esp)
00004feb	movl	%ebx,(%esp)
00004fee	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00004ff6	calll	CChoreoScene::choreoprintf(int, char const*, ...)
00004ffb	leal	0x69193-0x4eae(%esi),%eax
00005001	movl	%eax,0x0c(%esp)
00005005	movl	%eax,0x08(%esp)
00005009	movl	%edi,(%esp)
0000500c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005014	calll	CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
00005019	movl	0xe0(%ebp),%esi
0000501c	movl	%esi,(%esp)
0000501f	movl	0xe8(%ebp),%edi
00005022	incl	%edi
00005023	calll	CChoreoChannel::GetNumEvents()
00005028	cmpl	%eax,%edi
0000502a	jl	0x00004f30
00005030	movl	0xd4(%ebp),%esi
00005033	movl	%esi,(%esp)
00005036	movl	0xd8(%ebp),%edi
00005039	incl	%edi
0000503a	calll	CChoreoActor::GetNumChannels()
0000503f	cmpl	%eax,%edi
00005041	jl	0x00004f00
00005047	movl	0x08(%ebp),%eax
0000504a	movl	0x24(%eax),%eax
0000504d	movl	0xd0(%ebp),%edx
00005050	incl	%edx
00005051	cmpl	%eax,%edx
00005053	movl	0x08(%ebp),%ecx
00005056	jl	0x00004ed0
0000505c	addl	$0x3c,%esp
0000505f	popl	%esi
00005060	popl	%edi
00005061	popl	%ebx
00005062	popl	%ebp
00005063	ret
00005064	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ReconcileGestureTimes():
00005070	pushl	%ebp
00005071	movl	%esp,%ebp
00005073	pushl	%ebx
00005074	pushl	%edi
00005075	pushl	%esi
00005076	subl	$0x0c,%esp
00005079	movl	0x08(%ebp),%edx
0000507c	movl	0x24(%edx),%eax
0000507f	testl	%eax,%eax
00005081	jle	0x000050e0
00005083	xorl	%edi,%edi
00005085	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005090	movl	0x18(%edx),%ecx
00005093	movl	(%ecx,%edi,4),%ebx
00005096	testl	%ebx,%ebx
00005098	je	0x000050db
0000509a	movl	%ebx,(%esp)
0000509d	calll	CChoreoActor::GetNumChannels()
000050a2	xorl	%esi,%esi
000050a4	testl	%eax,%eax
000050a6	jle	0x000050d5
000050a8	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000050b0	movl	%esi,0x04(%esp)
000050b4	movl	%ebx,(%esp)
000050b7	calll	CChoreoActor::GetChannel(int)
000050bc	testl	%eax,%eax
000050be	je	0x000050c8
000050c0	movl	%eax,(%esp)
000050c3	calll	CChoreoChannel::ReconcileGestureTimes()
000050c8	movl	%ebx,(%esp)
000050cb	incl	%esi
000050cc	calll	CChoreoActor::GetNumChannels()
000050d1	cmpl	%eax,%esi
000050d3	jl	0x000050b0
000050d5	movl	0x08(%ebp),%edx
000050d8	movl	0x24(%edx),%eax
000050db	incl	%edi
000050dc	cmpl	%eax,%edi
000050de	jl	0x00005090
000050e0	addl	$0x0c,%esp
000050e3	popl	%esi
000050e4	popl	%edi
000050e5	popl	%ebx
000050e6	popl	%ebp
000050e7	ret
000050e8	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ReconcileCloseCaption():
000050f0	pushl	%ebp
000050f1	movl	%esp,%ebp
000050f3	pushl	%ebx
000050f4	pushl	%edi
000050f5	pushl	%esi
000050f6	subl	$0x0c,%esp
000050f9	movl	0x08(%ebp),%edx
000050fc	movl	0x24(%edx),%eax
000050ff	testl	%eax,%eax
00005101	jle	0x00005160
00005103	xorl	%edi,%edi
00005105	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005110	movl	0x18(%edx),%ecx
00005113	movl	(%ecx,%edi,4),%ebx
00005116	testl	%ebx,%ebx
00005118	je	0x0000515b
0000511a	movl	%ebx,(%esp)
0000511d	calll	CChoreoActor::GetNumChannels()
00005122	xorl	%esi,%esi
00005124	testl	%eax,%eax
00005126	jle	0x00005155
00005128	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005130	movl	%esi,0x04(%esp)
00005134	movl	%ebx,(%esp)
00005137	calll	CChoreoActor::GetChannel(int)
0000513c	testl	%eax,%eax
0000513e	je	0x00005148
00005140	movl	%eax,(%esp)
00005143	calll	CChoreoChannel::ReconcileCloseCaption()
00005148	movl	%ebx,(%esp)
0000514b	incl	%esi
0000514c	calll	CChoreoActor::GetNumChannels()
00005151	cmpl	%eax,%esi
00005153	jl	0x00005130
00005155	movl	0x08(%ebp),%edx
00005158	movl	0x24(%edx),%eax
0000515b	incl	%edi
0000515c	cmpl	%eax,%edi
0000515e	jl	0x00005110
00005160	addl	$0x0c,%esp
00005163	popl	%esi
00005164	popl	%edi
00005165	popl	%ebx
00005166	popl	%ebp
00005167	ret
00005168	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::InternalDetermineEventTypes():
00005170	pushl	%ebp
00005171	movl	%esp,%ebp
00005173	pushl	%ebx
00005174	pushl	%edi
00005175	pushl	%esi
00005176	subl	$0x1c,%esp
00005179	movl	0x08(%ebp),%eax
0000517c	addl	$0x00000208,%eax
00005181	je	0x00005189
00005183	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00005189	movl	0x08(%ebp),%eax
0000518c	movl	0x24(%eax),%eax
0000518f	testl	%eax,%eax
00005191	jle	0x0000524d
00005197	xorl	%edx,%edx
00005199	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
000051a0	movl	0x08(%ebp),%ecx
000051a3	movl	0x18(%ecx),%ecx
000051a6	movl	(%ecx,%edx,4),%esi
000051a9	movl	%esi,0xf0(%ebp)
000051ac	testl	%esi,%esi
000051ae	je	0x00005244
000051b4	movl	%edx,0xec(%ebp)
000051b7	movl	%esi,(%esp)
000051ba	calll	CChoreoActor::GetNumChannels()
000051bf	xorl	%ebx,%ebx
000051c1	testl	%eax,%eax
000051c3	jle	0x0000523b
000051c5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000051d0	movl	%ebx,0x04(%esp)
000051d4	movl	%esi,(%esp)
000051d7	calll	CChoreoActor::GetChannel(int)
000051dc	movl	%eax,%esi
000051de	testl	%esi,%esi
000051e0	je	0x0000522b
000051e2	movl	%esi,(%esp)
000051e5	calll	CChoreoChannel::GetNumEvents()
000051ea	xorl	%edi,%edi
000051ec	testl	%eax,%eax
000051ee	jle	0x0000522b
000051f0	movl	%edi,0x04(%esp)
000051f4	movl	%esi,(%esp)
000051f7	calll	CChoreoChannel::GetEvent(int)
000051fc	testl	%eax,%eax
000051fe	je	0x0000521e
00005200	movl	%eax,(%esp)
00005203	calll	CChoreoEvent::GetType()
00005208	movb	%al,%cl
0000520a	movl	$0x00000001,%edx
0000520f	shll	%cl,%edx
00005211	sarl	$0x05,%eax
00005214	movl	0x08(%ebp),%ecx
00005217	orl	%edx,0x00000208(%ecx,%eax,4)
0000521e	movl	%esi,(%esp)
00005221	incl	%edi
00005222	calll	CChoreoChannel::GetNumEvents()
00005227	cmpl	%eax,%edi
00005229	jl	0x000051f0
0000522b	movl	0xf0(%ebp),%esi
0000522e	movl	%esi,(%esp)
00005231	incl	%ebx
00005232	calll	CChoreoActor::GetNumChannels()
00005237	cmpl	%eax,%ebx
00005239	jl	0x000051d0
0000523b	movl	0x08(%ebp),%eax
0000523e	movl	0x24(%eax),%eax
00005241	movl	0xec(%ebp),%edx
00005244	incl	%edx
00005245	cmpl	%eax,%edx
00005247	jl	0x000051a0
0000524d	addl	$0x1c,%esp
00005250	popl	%esi
00005251	popl	%edi
00005252	popl	%ebx
00005253	popl	%ebp
00005254	ret
00005255	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FindStopTime():
00005260	pushl	%ebp
00005261	movl	%esp,%ebp
00005263	pushl	%ebx
00005264	pushl	%edi
00005265	pushl	%esi
00005266	subl	$0x1c,%esp
00005269	movl	0x08(%ebp),%eax
0000526c	movss	0x00000214(%eax),%xmm0
00005274	pxor	%xmm1,%xmm1
00005278	ucomiss	%xmm0,%xmm1
0000527b	jne	0x000052e9
0000527d	jp	0x000052e9
0000527f	movl	0x08(%ebp),%eax
00005282	movl	0x10(%eax),%edi
00005285	testl	%edi,%edi
00005287	pxor	%xmm0,%xmm0
0000528b	jle	0x000052e9
0000528d	pxor	%xmm1,%xmm1
00005291	xorl	%ebx,%ebx
00005293	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000052a0	movss	%xmm1,0xe4(%ebp)
000052a5	movl	0x08(%ebp),%eax
000052a8	movl	0x04(%eax),%eax
000052ab	movl	(%eax,%ebx,4),%esi
000052ae	movl	%esi,(%esp)
000052b1	calll	CChoreoEvent::HasEndTime()
000052b6	testb	%al,%al
000052b8	je	0x000052cc
000052ba	movl	%esi,(%esp)
000052bd	calll	CChoreoEvent::GetEndTime()
000052c2	fstps	0xec(%ebp)
000052c5	movss	0xec(%ebp),%xmm0
000052ca	jmp	0x000052dc
000052cc	movl	%esi,(%esp)
000052cf	calll	CChoreoEvent::GetStartTime()
000052d4	fstps	0xf0(%ebp)
000052d7	movss	0xf0(%ebp),%xmm0
000052dc	maxss	0xe4(%ebp),%xmm0
000052e1	incl	%ebx
000052e2	cmpl	%ebx,%edi
000052e4	movaps	%xmm0,%xmm1
000052e7	jne	0x000052a0
000052e9	movss	%xmm0,0xe8(%ebp)
000052ee	flds	0xe8(%ebp)
000052f1	addl	$0x1c,%esp
000052f4	popl	%esi
000052f5	popl	%edi
000052f6	popl	%ebx
000052f7	popl	%ebp
000052f8	ret
000052f9	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::RemoveEventsExceptTypes(int*, int):
00005300	pushl	%ebp
00005301	movl	%esp,%ebp
00005303	pushl	%ebx
00005304	pushl	%edi
00005305	pushl	%esi
00005306	subl	$0x2c,%esp
00005309	movl	0x08(%ebp),%edi
0000530c	movl	0x24(%edi),%eax
0000530f	testl	%eax,%eax
00005311	jle	0x0000544a
00005317	xorl	%edx,%edx
00005319	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00005320	movl	0x18(%edi),%ecx
00005323	movl	(%ecx,%edx,4),%esi
00005326	movl	%esi,0xe4(%ebp)
00005329	testl	%esi,%esi
0000532b	je	0x00005441
00005331	movl	%edx,0xe0(%ebp)
00005334	movl	%esi,(%esp)
00005337	calll	CChoreoActor::GetNumChannels()
0000533c	xorl	%ebx,%ebx
0000533e	testl	%eax,%eax
00005340	jle	0x0000543b
00005346	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005350	movl	%ebx,0xe8(%ebp)
00005353	movl	%ebx,0x04(%esp)
00005357	movl	%esi,(%esp)
0000535a	calll	CChoreoActor::GetChannel(int)
0000535f	movl	%eax,0xf0(%ebp)
00005362	testl	%eax,%eax
00005364	je	0x00005424
0000536a	movl	0xf0(%ebp),%eax
0000536d	movl	%eax,(%esp)
00005370	calll	CChoreoChannel::GetNumEvents()
00005375	jmp	0x000053cf
00005377	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005380	addl	$0xfc,%ecx
00005383	incl	%edx
00005384	cmpl	%eax,%edx
00005386	jge	0x000053c0
00005388	movl	0x68(%edi),%esi
0000538b	cmpl	%ebx,(%esi,%edx,4)
0000538e	jne	0x00005380
00005390	cmpl	$0xff,%edx
00005393	je	0x000053c0
00005395	leal	0xff(%eax),%edi
00005398	subl	%edx,%edi
0000539a	testl	%edi,%edi
0000539c	movl	0x08(%ebp),%edi
0000539f	jle	0x000053bc
000053a1	subl	%ecx,%esi
000053a3	movl	%esi,0x04(%esp)
000053a7	leal	(%ecx,%eax,4),%eax
000053aa	movl	%eax,0x08(%esp)
000053ae	addl	$0xfc,%esi
000053b1	movl	%esi,(%esp)
000053b4	calll	_memmove
000053b9	movl	0x74(%edi),%eax
000053bc	decl	%eax
000053bd	movl	%eax,0x74(%edi)
000053c0	movl	%ebx,0x04(%esp)
000053c4	movl	%edi,(%esp)
000053c7	calll	CChoreoScene::DestroyEvent(CChoreoEvent*)
000053cc	movl	0xec(%ebp),%eax
000053cf	testl	%eax,%eax
000053d1	jle	0x00005424
000053d3	decl	%eax
000053d4	movl	%eax,0xec(%ebp)
000053d7	movl	%eax,0x04(%esp)
000053db	movl	0xf0(%ebp),%eax
000053de	movl	%eax,(%esp)
000053e1	calll	CChoreoChannel::GetEvent(int)
000053e6	movl	%eax,%ebx
000053e8	testl	%ebx,%ebx
000053ea	je	0x000053cc
000053ec	xorl	%esi,%esi
000053ee	jmp	0x00005401
000053f0	movl	%ebx,(%esp)
000053f3	calll	CChoreoEvent::GetType()
000053f8	movl	0x0c(%ebp),%ecx
000053fb	cmpl	(%ecx,%esi,4),%eax
000053fe	je	0x000053cc
00005400	incl	%esi
00005401	cmpl	0x10(%ebp),%esi
00005404	jl	0x000053f0
00005406	movl	%ebx,0x04(%esp)
0000540a	movl	0xf0(%ebp),%eax
0000540d	movl	%eax,(%esp)
00005410	calll	CChoreoChannel::RemoveEvent(CChoreoEvent*)
00005415	movl	0x74(%edi),%eax
00005418	xorl	%edx,%edx
0000541a	movl	$0xfffffffc,%ecx
0000541f	jmp	0x00005384
00005424	movl	0xe4(%ebp),%esi
00005427	movl	%esi,(%esp)
0000542a	movl	0xe8(%ebp),%ebx
0000542d	incl	%ebx
0000542e	calll	CChoreoActor::GetNumChannels()
00005433	cmpl	%eax,%ebx
00005435	jl	0x00005350
0000543b	movl	0x24(%edi),%eax
0000543e	movl	0xe0(%ebp),%edx
00005441	incl	%edx
00005442	cmpl	%eax,%edx
00005444	jl	0x00005320
0000544a	movl	0x10(%edi),%ecx
0000544d	jmp	0x00005506
00005452	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005460	movl	0xf0(%ebp),%eax
00005463	movl	%eax,(%esp)
00005466	calll	CChoreoEvent::GetType()
0000546b	movl	0x0c(%ebp),%ecx
0000546e	cmpl	(%ecx,%esi,4),%eax
00005471	je	0x00005502
00005477	incl	%esi
00005478	cmpl	0x10(%ebp),%esi
0000547b	jl	0x00005460
0000547d	movl	0x74(%edi),%eax
00005480	movl	%edi,%ebx
00005482	xorl	%edx,%edx
00005484	movl	$0xfffffffc,%ecx
00005489	jmp	0x00005494
0000548b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005490	addl	$0xfc,%ecx
00005493	incl	%edx
00005494	cmpl	%eax,%edx
00005496	jge	0x000054d0
00005498	movl	0x68(%ebx),%edi
0000549b	movl	0xf0(%ebp),%esi
0000549e	cmpl	%esi,(%edi,%edx,4)
000054a1	jne	0x00005490
000054a3	cmpl	$0xff,%edx
000054a6	je	0x000054d0
000054a8	leal	0xff(%eax),%esi
000054ab	subl	%edx,%esi
000054ad	testl	%esi,%esi
000054af	jle	0x000054cc
000054b1	subl	%ecx,%edi
000054b3	movl	%edi,0x04(%esp)
000054b7	leal	(%ecx,%eax,4),%eax
000054ba	movl	%eax,0x08(%esp)
000054be	addl	$0xfc,%edi
000054c1	movl	%edi,(%esp)
000054c4	calll	_memmove
000054c9	movl	0x74(%ebx),%eax
000054cc	decl	%eax
000054cd	movl	%eax,0x74(%ebx)
000054d0	movl	0xf0(%ebp),%eax
000054d3	movl	%eax,0x04(%esp)
000054d7	movl	%ebx,%edi
000054d9	movl	%edi,(%esp)
000054dc	calll	CChoreoScene::DestroyEvent(CChoreoEvent*)
000054e1	jmp	0x00005502
000054e3	movl	%ecx,0xec(%ebp)
000054e6	movl	0x04(%edi),%eax
000054e9	movl	0xfc(%eax,%ecx,4),%eax
000054ed	movl	%eax,0xf0(%ebp)
000054f0	movl	%eax,(%esp)
000054f3	calll	CChoreoEvent::GetActor()
000054f8	xorl	%esi,%esi
000054fa	testl	%eax,%eax
000054fc	je	0x00005478
00005502	movl	0xec(%ebp),%ecx
00005505	decl	%ecx
00005506	testl	%ecx,%ecx
00005508	jg	0x000054e3
0000550a	addl	$0x2c,%esp
0000550d	popl	%esi
0000550e	popl	%edi
0000550f	popl	%ebx
00005510	popl	%ebp
00005511	ret
00005512	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::DeleteReferencedObjects(CChoreoEvent*):
00005520	pushl	%ebp
00005521	movl	%esp,%ebp
00005523	pushl	%ebx
00005524	pushl	%edi
00005525	pushl	%esi
00005526	subl	$0x0c,%esp
00005529	movl	0x08(%ebp),%esi
0000552c	movl	0x74(%esi),%eax
0000552f	xorl	%edx,%edx
00005531	movl	$0xfffffffc,%ecx
00005536	movl	0x0c(%ebp),%ebx
00005539	jmp	0x00005544
0000553b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005540	addl	$0xfc,%ecx
00005543	incl	%edx
00005544	cmpl	%eax,%edx
00005546	jge	0x0000557d
00005548	movl	0x68(%esi),%edi
0000554b	cmpl	%ebx,(%edi,%edx,4)
0000554e	jne	0x00005540
00005550	cmpl	$0xff,%edx
00005553	je	0x0000557d
00005555	leal	0xff(%eax),%ebx
00005558	subl	%edx,%ebx
0000555a	testl	%ebx,%ebx
0000555c	jle	0x00005579
0000555e	subl	%ecx,%edi
00005560	movl	%edi,0x04(%esp)
00005564	leal	(%ecx,%eax,4),%eax
00005567	movl	%eax,0x08(%esp)
0000556b	addl	$0xfc,%edi
0000556e	movl	%edi,(%esp)
00005571	calll	_memmove
00005576	movl	0x74(%esi),%eax
00005579	decl	%eax
0000557a	movl	%eax,0x74(%esi)
0000557d	addl	$0x0c,%esp
00005580	popl	%esi
00005581	popl	%edi
00005582	popl	%ebx
00005583	popl	%ebp
00005584	jmp	CChoreoScene::DestroyEvent(CChoreoEvent*)
00005589	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...):
00005590	pushl	%ebp
00005591	movl	%esp,%ebp
00005593	pushl	%ebx
00005594	pushl	%edi
00005595	pushl	%esi
00005596	subl	$0x1c,%esp
00005599	calll	0x0000559e
0000559e	popl	%eax
0000559f	leal	0x14(%ebp),%ecx
000055a2	movl	%ecx,0xf0(%ebp)
000055a5	movl	0x0c(%ebp),%edi
000055a8	movl	0x08(%ebp),%esi
000055ab	testl	%edi,%edi
000055ad	jle	0x000055d1
000055af	leal	0x68b33-0x559e(%eax),%ebx
000055b5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000055c0	movl	%ebx,0x04(%esp)
000055c4	movl	%esi,(%esp)
000055c7	decl	%edi
000055c8	calll	CUtlBuffer::Printf(char const*, ...)
000055cd	testl	%edi,%edi
000055cf	jg	0x000055c0
000055d1	movl	0x10(%ebp),%eax
000055d4	movl	0xf0(%ebp),%ecx
000055d7	movl	%ecx,0x08(%esp)
000055db	movl	%eax,0x04(%esp)
000055df	movl	%esi,(%esp)
000055e2	calll	CUtlBuffer::VaPrintf(char const*, char*)
000055e7	addl	$0x1c,%esp
000055ea	popl	%esi
000055eb	popl	%edi
000055ec	popl	%ebx
000055ed	popl	%ebp
000055ee	ret
000055ef	nop
CChoreoScene::FileSaveHeader(CUtlBuffer&):
000055f0	pushl	%ebp
000055f1	movl	%esp,%ebp
000055f3	subl	$0x18,%esp
000055f6	calll	0x000055fb
000055fb	popl	%eax
000055fc	leal	0x68e8a-0x55fb(%eax),%eax
00005602	movl	%eax,0x08(%esp)
00005606	movl	0x0c(%ebp),%eax
00005609	movl	%eax,(%esp)
0000560c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005614	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005619	addl	$0x18,%esp
0000561c	popl	%ebp
0000561d	ret
0000561e	nop
CChoreoScene::MarkForSaveAll(bool):
00005620	pushl	%ebp
00005621	movl	%esp,%ebp
00005623	pushl	%ebx
00005624	pushl	%edi
00005625	pushl	%esi
00005626	subl	$0x0c,%esp
00005629	movl	0x08(%ebp),%esi
0000562c	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%esi)
00005630	jle	0x0000566d
00005632	movb	0x0c(%ebp),%al
00005635	shlb	$0x06,%al
00005638	movb	%al,0xf3(%ebp)
0000563b	xorl	%edi,%edi
0000563d	nopl	(%eax)
00005640	movl	0x04(%esi),%eax
00005643	movl	%esi,%ebx
00005645	movl	(%eax,%edi,4),%esi
00005648	movl	%esi,(%esp)
0000564b	calll	CChoreoEvent::GetActor()
00005650	testl	%eax,%eax
00005652	jne	0x00005665
00005654	movb	0x00000178(%esi),%al
0000565a	andb	$0xbf,%al
0000565c	orb	0xf3(%ebp),%al
0000565f	movb	%al,0x00000178(%esi)
00005665	incl	%edi
00005666	movl	%ebx,%esi
00005668	cmpl	0x10(%esi),%edi
0000566b	jl	0x00005640
0000566d	movl	0x24(%esi),%eax
00005670	testl	%eax,%eax
00005672	movb	0x0c(%ebp),%bl
00005675	jle	0x000056a1
00005677	xorl	%edi,%edi
00005679	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00005680	movl	0x18(%esi),%ecx
00005683	movl	(%ecx,%edi,4),%ecx
00005686	testl	%ecx,%ecx
00005688	je	0x0000569c
0000568a	movzbl	%bl,%eax
0000568d	movl	%eax,0x04(%esp)
00005691	movl	%ecx,(%esp)
00005694	calll	CChoreoActor::MarkForSaveAll(bool)
00005699	movl	0x24(%esi),%eax
0000569c	incl	%edi
0000569d	cmpl	%eax,%edi
0000569f	jl	0x00005680
000056a1	addl	$0x0c,%esp
000056a4	popl	%esi
000056a5	popl	%edi
000056a6	popl	%ebx
000056a7	popl	%ebp
000056a8	ret
000056a9	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::ExportMarkedToFile(char const*):
000056b0	pushl	%ebp
000056b1	movl	%esp,%ebp
000056b3	pushl	%ebx
000056b4	pushl	%edi
000056b5	pushl	%esi
000056b6	subl	$0x5c,%esp
000056b9	calll	0x000056be
000056be	popl	%esi
000056bf	movl	%esi,0xb4(%ebp)
000056c2	leal	0xb8(%ebp),%edi
000056c5	movl	%edi,(%esp)
000056c8	movl	$0x00000001,0x0c(%esp)
000056d0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
000056d8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000056e0	calll	CUtlBuffer::CUtlBuffer(int, int, int)
000056e5	leal	0x68e8a-0x56be(%esi),%eax
000056eb	movl	%eax,0x08(%esp)
000056ef	movl	%edi,(%esp)
000056f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000056fa	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000056ff	movl	0x08(%ebp),%ebx
00005702	xorl	%esi,%esi
00005704	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005710	cmpl	0x10(%ebx),%esi
00005713	jl	0x00005751
00005715	xorl	%esi,%esi
00005717	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005720	cmpl	0x24(%ebx),%esi
00005723	jge	0x000057af
00005729	movl	0x18(%ebx),%eax
0000572c	movl	(%eax,%esi,4),%eax
0000572f	testl	%eax,%eax
00005731	je	0x0000574e
00005733	movl	%eax,0x0c(%esp)
00005737	leal	0xb8(%ebp),%eax
0000573a	movl	%eax,0x04(%esp)
0000573e	movl	%ebx,(%esp)
00005741	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00005749	calll	CChoreoScene::FileSaveActor(CUtlBuffer&, int, CChoreoActor*)
0000574e	incl	%esi
0000574f	jmp	0x00005720
00005751	movl	0x04(%ebx),%eax
00005754	movl	(%eax,%esi,4),%edi
00005757	movl	%edi,(%esp)
0000575a	calll	CChoreoEvent::GetActor()
0000575f	testl	%eax,%eax
00005761	jne	0x0000577b
00005763	movl	%edi,0x0c(%esp)
00005767	leal	0xb8(%ebp),%eax
0000576a	movl	%eax,0x04(%esp)
0000576e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00005776	calll	CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*)
0000577b	incl	%esi
0000577c	jmp	0x00005710
0000577e	jmp	0x00005782
00005780	jmp	0x00005782
00005782	movl	%eax,%esi
00005784	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00005788	js	0x000057a7
0000578a	movl	0xb8(%ebp),%eax
0000578d	testl	%eax,%eax
0000578f	je	0x000057a0
00005791	movl	%eax,(%esp)
00005794	calll	_free
00005799	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
000057a0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
000057a7	movl	%esi,(%esp)
000057aa	calll	__Unwind_Resume
000057af	movl	0xb4(%ebp),%edx
000057b2	movl	0x758ee-0x56be(%edx),%edi
000057b8	movl	(%edi),%eax
000057ba	movl	0x04(%eax),%ecx
000057bd	movl	0x08(%ecx),%ecx
000057c0	leal	0x68e9f-0x56be(%edx),%edx
000057c6	movl	%edx,0x08(%esp)
000057ca	movl	0x0c(%ebp),%edx
000057cd	movl	%edx,0x04(%esp)
000057d1	addl	$0x04,%eax
000057d4	movl	%eax,(%esp)
000057d7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
000057df	call	*%ecx
000057e1	movl	%eax,%esi
000057e3	xorb	%bl,%bl
000057e5	testl	%esi,%esi
000057e7	je	0x00005821
000057e9	movl	(%edi),%eax
000057eb	movl	0x04(%eax),%ecx
000057ee	movl	0x04(%ecx),%ecx
000057f1	movl	0xb8(%ebp),%edx
000057f4	movl	0xc8(%ebp),%ebx
000057f7	movl	%esi,0x0c(%esp)
000057fb	movl	%ebx,0x08(%esp)
000057ff	movl	%edx,0x04(%esp)
00005803	addl	$0x04,%eax
00005806	movl	%eax,(%esp)
00005809	call	*%ecx
0000580b	movl	(%edi),%eax
0000580d	movl	0x04(%eax),%ecx
00005810	movl	0x0c(%ecx),%ecx
00005813	movb	$0x01,%bl
00005815	movl	%esi,0x04(%esp)
00005819	addl	$0x04,%eax
0000581c	movl	%eax,(%esp)
0000581f	call	*%ecx
00005821	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00005825	js	0x00005844
00005827	movl	0xb8(%ebp),%eax
0000582a	testl	%eax,%eax
0000582c	je	0x0000583d
0000582e	movl	%eax,(%esp)
00005831	calll	_free
00005836	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
0000583d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00005844	movzbl	%bl,%eax
00005847	addl	$0x5c,%esp
0000584a	popl	%esi
0000584b	popl	%edi
0000584c	popl	%ebx
0000584d	popl	%ebp
0000584e	ret
0000584f	nop
CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*):
00005850	pushl	%ebp
00005851	movl	%esp,%ebp
00005853	pushl	%ebx
00005854	pushl	%edi
00005855	pushl	%esi
00005856	subl	$0x5c,%esp
00005859	calll	0x0000585e
0000585e	popl	%edi
0000585f	movl	0x14(%ebp),%ebx
00005862	testb	$0x40,0x00000178(%ebx)
00005869	je	0x00006128
0000586f	movl	%ebx,(%esp)
00005872	calll	CChoreoEvent::GetType()
00005877	movl	%eax,(%esp)
0000587a	calll	CChoreoEvent::NameForType(CChoreoEvent::EVENTTYPE)
0000587f	movl	%eax,%esi
00005881	movl	%ebx,(%esp)
00005884	calll	CChoreoEvent::GetName()
00005889	movl	%eax,0x10(%esp)
0000588d	movl	%esi,0x0c(%esp)
00005891	movl	0x0c(%ebp),%ecx
00005894	movl	%edi,0xcc(%ebp)
00005897	leal	0x68b39-0x585e(%edi),%eax
0000589d	movl	%eax,0x08(%esp)
000058a1	movl	0x10(%ebp),%ebx
000058a4	movl	%ebx,0x04(%esp)
000058a8	movl	%ecx,(%esp)
000058ab	movl	%ecx,%esi
000058ad	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000058b2	leal	0x68b48-0x585e(%edi),%eax
000058b8	movl	%eax,0xc0(%ebp)
000058bb	movl	%eax,0x08(%esp)
000058bf	movl	%ebx,0x04(%esp)
000058c3	movl	%esi,(%esp)
000058c6	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000058cb	movl	0x14(%ebp),%esi
000058ce	movl	%esi,(%esp)
000058d1	calll	CChoreoEvent::GetStartTime()
000058d6	fstpt	0xe0(%ebp)
000058d9	movl	%esi,(%esp)
000058dc	calll	CChoreoEvent::GetEndTime()
000058e1	fstpl	0x14(%esp)
000058e5	fldt	0xe0(%ebp)
000058e8	fstpl	0x0c(%esp)
000058ec	leal	0x68b4b-0x585e(%edi),%eax
000058f2	movl	%eax,0x08(%esp)
000058f6	movl	%edi,%esi
000058f8	leal	0x01(%ebx),%ebx
000058fb	movl	%ebx,0xe0(%ebp)
000058fe	movl	%ebx,0x04(%esp)
00005902	movl	0x0c(%ebp),%edi
00005905	movl	%edi,(%esp)
00005908	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000590d	movl	0x14(%ebp),%eax
00005910	movl	%eax,(%esp)
00005913	calll	CChoreoEvent::GetParameters()
00005918	movl	%eax,0x0c(%esp)
0000591c	leal	0x68b57-0x585e(%esi),%eax
00005922	movl	%eax,0x08(%esp)
00005926	movl	%ebx,0x04(%esp)
0000592a	movl	%edi,(%esp)
0000592d	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005932	movl	0x14(%ebp),%esi
00005935	movl	%esi,(%esp)
00005938	calll	CChoreoEvent::GetParameters2()
0000593d	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00005940	movl	%esi,%ebx
00005942	movl	%edi,%esi
00005944	movl	0xcc(%ebp),%edi
00005947	je	0x0000596e
00005949	movl	%ebx,(%esp)
0000594c	calll	CChoreoEvent::GetParameters2()
00005951	movl	%eax,0x0c(%esp)
00005955	leal	0x68b63-0x585e(%edi),%eax
0000595b	movl	%eax,0x08(%esp)
0000595f	movl	0xe0(%ebp),%eax
00005962	movl	%eax,0x04(%esp)
00005966	movl	%esi,(%esp)
00005969	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000596e	movl	%ebx,(%esp)
00005971	calll	CChoreoEvent::GetParameters3()
00005976	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00005979	je	0x000059a0
0000597b	movl	%ebx,(%esp)
0000597e	calll	CChoreoEvent::GetParameters3()
00005983	movl	%eax,0x0c(%esp)
00005987	leal	0x68b70-0x585e(%edi),%eax
0000598d	movl	%eax,0x08(%esp)
00005991	movl	0xe0(%ebp),%eax
00005994	movl	%eax,0x04(%esp)
00005998	movl	%esi,(%esp)
0000599b	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000059a0	leal	0x5c(%ebx),%esi
000059a3	movl	%esi,(%esp)
000059a6	calll	CCurveData::GetCount()
000059ab	testl	%eax,%eax
000059ad	jle	0x000059cf
000059af	leal	0x68d80-0x585e(%edi),%eax
000059b5	movl	%eax,0x0c(%esp)
000059b9	movl	0xe0(%ebp),%eax
000059bc	movl	%eax,0x08(%esp)
000059c0	movl	0x0c(%ebp),%eax
000059c3	movl	%eax,0x04(%esp)
000059c7	movl	%esi,(%esp)
000059ca	calll	CCurveData::FileSave(CUtlBuffer&, int, char const*)
000059cf	movl	0x14(%ebp),%ebx
000059d2	movl	%ebx,(%esp)
000059d5	calll	CChoreoEvent::GetPitch() const
000059da	testl	%eax,%eax
000059dc	movl	0x0c(%ebp),%esi
000059df	je	0x00005a06
000059e1	movl	%ebx,(%esp)
000059e4	calll	CChoreoEvent::GetPitch() const
000059e9	movl	%eax,0x0c(%esp)
000059ed	leal	0x68fd9-0x585e(%edi),%eax
000059f3	movl	%eax,0x08(%esp)
000059f7	movl	0xe0(%ebp),%eax
000059fa	movl	%eax,0x04(%esp)
000059fe	movl	%esi,(%esp)
00005a01	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005a06	movl	%ebx,(%esp)
00005a09	calll	CChoreoEvent::GetYaw() const
00005a0e	testl	%eax,%eax
00005a10	je	0x00005a37
00005a12	movl	%ebx,(%esp)
00005a15	calll	CChoreoEvent::GetYaw() const
00005a1a	movl	%eax,0x0c(%esp)
00005a1e	leal	0x68fe5-0x585e(%edi),%eax
00005a24	movl	%eax,0x08(%esp)
00005a28	movl	0xe0(%ebp),%eax
00005a2b	movl	%eax,0x04(%esp)
00005a2f	movl	%esi,(%esp)
00005a32	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005a37	movl	%ebx,(%esp)
00005a3a	calll	CChoreoEvent::IsResumeCondition()
00005a3f	cmpb	$0x01,%al
00005a41	jne	0x00005a5c
00005a43	leal	0x68fef-0x585e(%edi),%eax
00005a49	movl	%eax,0x08(%esp)
00005a4d	movl	0xe0(%ebp),%eax
00005a50	movl	%eax,0x04(%esp)
00005a54	movl	%esi,(%esp)
00005a57	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005a5c	movl	%ebx,(%esp)
00005a5f	calll	CChoreoEvent::IsLockBodyFacing()
00005a64	cmpb	$0x01,%al
00005a66	jne	0x00005a81
00005a68	leal	0x69000-0x585e(%edi),%eax
00005a6e	movl	%eax,0x08(%esp)
00005a72	movl	0xe0(%ebp),%eax
00005a75	movl	%eax,0x04(%esp)
00005a79	movl	%esi,(%esp)
00005a7c	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005a81	movl	%ebx,(%esp)
00005a84	calll	CChoreoEvent::GetDistanceToTarget()
00005a89	fstps	0xec(%ebp)
00005a8c	pxor	%xmm0,%xmm0
00005a90	movss	0xec(%ebp),%xmm1
00005a95	ucomiss	%xmm0,%xmm1
00005a98	jbe	0x00005abf
00005a9a	movl	%ebx,(%esp)
00005a9d	calll	CChoreoEvent::GetDistanceToTarget()
00005aa2	fstpl	0x0c(%esp)
00005aa6	leal	0x69010-0x585e(%edi),%eax
00005aac	movl	%eax,0x08(%esp)
00005ab0	movl	0xe0(%ebp),%eax
00005ab3	movl	%eax,0x04(%esp)
00005ab7	movl	%esi,(%esp)
00005aba	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005abf	movl	%ebx,(%esp)
00005ac2	calll	CChoreoEvent::GetForceShortMovement()
00005ac7	cmpb	$0x01,%al
00005ac9	jne	0x00005ae4
00005acb	leal	0x69027-0x585e(%edi),%eax
00005ad1	movl	%eax,0x08(%esp)
00005ad5	movl	0xe0(%ebp),%eax
00005ad8	movl	%eax,0x04(%esp)
00005adc	movl	%esi,(%esp)
00005adf	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005ae4	movl	%ebx,(%esp)
00005ae7	calll	CChoreoEvent::GetSyncToFollowingGesture()
00005aec	cmpb	$0x01,%al
00005aee	jne	0x00005b09
00005af0	leal	0x6903b-0x585e(%edi),%eax
00005af6	movl	%eax,0x08(%esp)
00005afa	movl	0xe0(%ebp),%eax
00005afd	movl	%eax,0x04(%esp)
00005b01	movl	%esi,(%esp)
00005b04	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005b09	movl	%ebx,(%esp)
00005b0c	calll	CChoreoEvent::GetActive() const
00005b11	testb	%al,%al
00005b13	jne	0x00005b2e
00005b15	leal	0x69053-0x585e(%edi),%eax
00005b1b	movl	%eax,0x08(%esp)
00005b1f	movl	0xe0(%ebp),%eax
00005b22	movl	%eax,0x04(%esp)
00005b26	movl	%esi,(%esp)
00005b29	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005b2e	movl	%ebx,(%esp)
00005b31	calll	CChoreoEvent::GetPlayOverScript()
00005b36	cmpb	$0x01,%al
00005b38	jne	0x00005b53
00005b3a	leal	0x6905d-0x585e(%edi),%eax
00005b40	movl	%eax,0x08(%esp)
00005b44	movl	0xe0(%ebp),%eax
00005b47	movl	%eax,0x04(%esp)
00005b4b	movl	%esi,(%esp)
00005b4e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005b53	movl	%ebx,(%esp)
00005b56	calll	CChoreoEvent::IsFixedLength()
00005b5b	cmpb	$0x01,%al
00005b5d	jne	0x00005b78
00005b5f	leal	0x6906d-0x585e(%edi),%eax
00005b65	movl	%eax,0x08(%esp)
00005b69	movl	0xe0(%ebp),%eax
00005b6c	movl	%eax,0x04(%esp)
00005b70	movl	%esi,(%esp)
00005b73	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005b78	movl	%ebx,(%esp)
00005b7b	calll	CChoreoEvent::GetNumRelativeTags()
00005b80	testl	%eax,%eax
00005b82	jle	0x00005c4f
00005b88	leal	0x6907a-0x585e(%edi),%eax
00005b8e	movl	%eax,0x08(%esp)
00005b92	movl	0xe0(%ebp),%edi
00005b95	movl	%edi,0x04(%esp)
00005b99	movl	%esi,(%esp)
00005b9c	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005ba1	movl	0xc0(%ebp),%eax
00005ba4	movl	%eax,0x08(%esp)
00005ba8	movl	%edi,0x04(%esp)
00005bac	movl	%esi,(%esp)
00005baf	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005bb4	movl	%ebx,(%esp)
00005bb7	calll	CChoreoEvent::GetNumRelativeTags()
00005bbc	testl	%eax,%eax
00005bbe	movl	%ebx,%edi
00005bc0	jle	0x00005c31
00005bc2	movl	0x10(%ebp),%eax
00005bc5	leal	0x02(%eax),%eax
00005bc8	movl	%eax,0xdc(%ebp)
00005bcb	xorl	%ebx,%ebx
00005bcd	movl	0xcc(%ebp),%eax
00005bd0	leal	0x69080-0x585e(%eax),%eax
00005bd6	movl	%eax,0xd0(%ebp)
00005bd9	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00005be0	movl	%ebx,0x04(%esp)
00005be4	movl	%edi,(%esp)
00005be7	calll	CChoreoEvent::GetRelativeTag(int)
00005bec	movl	%eax,%edi
00005bee	movl	%edi,(%esp)
00005bf1	calll	CEventRelativeTag::GetName()
00005bf6	movl	%eax,%esi
00005bf8	movl	%edi,(%esp)
00005bfb	movl	0x14(%ebp),%edi
00005bfe	calll	CEventRelativeTag::GetPercentage()
00005c03	fstpl	0x10(%esp)
00005c07	movl	%esi,0x0c(%esp)
00005c0b	movl	0x0c(%ebp),%esi
00005c0e	movl	0xd0(%ebp),%eax
00005c11	movl	%eax,0x08(%esp)
00005c15	movl	0xdc(%ebp),%eax
00005c18	movl	%eax,0x04(%esp)
00005c1c	movl	%esi,(%esp)
00005c1f	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005c24	movl	%edi,(%esp)
00005c27	incl	%ebx
00005c28	calll	CChoreoEvent::GetNumRelativeTags()
00005c2d	cmpl	%eax,%ebx
00005c2f	jl	0x00005be0
00005c31	movl	%edi,%ebx
00005c33	movl	0xcc(%ebp),%edi
00005c36	leal	0x68b7d-0x585e(%edi),%eax
00005c3c	movl	%eax,0x08(%esp)
00005c40	movl	0xe0(%ebp),%eax
00005c43	movl	%eax,0x04(%esp)
00005c47	movl	%esi,(%esp)
00005c4a	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005c4f	movl	%ebx,(%esp)
00005c52	calll	CChoreoEvent::GetNumTimingTags()
00005c57	testl	%eax,%eax
00005c59	jle	0x00005d49
00005c5f	leal	0x69089-0x585e(%edi),%eax
00005c65	movl	%edi,0xcc(%ebp)
00005c68	movl	%eax,0x08(%esp)
00005c6c	movl	0xe0(%ebp),%edi
00005c6f	movl	%edi,0x04(%esp)
00005c73	movl	%esi,(%esp)
00005c76	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005c7b	movl	0xc0(%ebp),%eax
00005c7e	movl	%eax,0x08(%esp)
00005c82	movl	%edi,0x04(%esp)
00005c86	movl	%esi,(%esp)
00005c89	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005c8e	movl	%ebx,(%esp)
00005c91	calll	CChoreoEvent::GetNumTimingTags()
00005c96	testl	%eax,%eax
00005c98	movl	%ebx,%edi
00005c9a	jle	0x00005d2b
00005ca0	movl	0x10(%ebp),%eax
00005ca3	leal	0x02(%eax),%eax
00005ca6	movl	%eax,0xc8(%ebp)
00005ca9	xorl	%ebx,%ebx
00005cab	movl	0xcc(%ebp),%eax
00005cae	leal	0x69099-0x585e(%eax),%eax
00005cb4	movl	%eax,0xc4(%ebp)
00005cb7	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005cc0	movl	%ebx,0x04(%esp)
00005cc4	movl	%edi,(%esp)
00005cc7	calll	CChoreoEvent::GetTimingTag(int)
00005ccc	movl	%edi,%esi
00005cce	movl	%eax,%edi
00005cd0	movl	%edi,(%esp)
00005cd3	calll	CEventRelativeTag::GetName()
00005cd8	movl	%eax,0xdc(%ebp)
00005cdb	movl	%edi,(%esp)
00005cde	calll	CEventRelativeTag::GetPercentage()
00005ce3	fstpt	0xd0(%ebp)
00005ce6	movl	%edi,(%esp)
00005ce9	movl	%esi,%edi
00005ceb	calll	CFlexTimingTag::GetLocked()
00005cf0	movzbl	%al,%eax
00005cf3	movl	%eax,0x18(%esp)
00005cf7	fldt	0xd0(%ebp)
00005cfa	fstpl	0x10(%esp)
00005cfe	movl	0xdc(%ebp),%eax
00005d01	movl	%eax,0x0c(%esp)
00005d05	movl	0x0c(%ebp),%esi
00005d08	movl	0xc4(%ebp),%eax
00005d0b	movl	%eax,0x08(%esp)
00005d0f	movl	0xc8(%ebp),%eax
00005d12	movl	%eax,0x04(%esp)
00005d16	movl	%esi,(%esp)
00005d19	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005d1e	movl	%edi,(%esp)
00005d21	incl	%ebx
00005d22	calll	CChoreoEvent::GetNumTimingTags()
00005d27	cmpl	%eax,%ebx
00005d29	jl	0x00005cc0
00005d2b	movl	%edi,%ebx
00005d2d	movl	0xcc(%ebp),%edi
00005d30	leal	0x68b7d-0x585e(%edi),%eax
00005d36	movl	%eax,0x08(%esp)
00005d3a	movl	0xe0(%ebp),%eax
00005d3d	movl	%eax,0x04(%esp)
00005d41	movl	%esi,(%esp)
00005d44	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005d49	movl	%ebx,(%esp)
00005d4c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005d54	movl	0x10(%ebp),%eax
00005d57	leal	0x02(%eax),%eax
00005d5a	movl	%eax,0xdc(%ebp)
00005d5d	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005d62	testl	%eax,%eax
00005d64	jle	0x00005e4f
00005d6a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%esp)
00005d71	calll	CChoreoEvent::NameForAbsoluteTagType(CChoreoEvent::AbsTagType)
00005d76	movl	%eax,0x0c(%esp)
00005d7a	leal	0x690a5-0x585e(%edi),%eax
00005d80	movl	%edi,0xcc(%ebp)
00005d83	movl	%eax,0x08(%esp)
00005d87	movl	0xe0(%ebp),%edi
00005d8a	movl	%edi,0x04(%esp)
00005d8e	movl	%esi,(%esp)
00005d91	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005d96	movl	0xc0(%ebp),%eax
00005d99	movl	%eax,0x08(%esp)
00005d9d	movl	%edi,0x04(%esp)
00005da1	movl	%esi,(%esp)
00005da4	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005da9	movl	%ebx,(%esp)
00005dac	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005db4	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005db9	testl	%eax,%eax
00005dbb	movl	%ebx,%edi
00005dbd	jle	0x00005e31
00005dbf	xorl	%ebx,%ebx
00005dc1	movl	0xcc(%ebp),%eax
00005dc4	leal	0x69080-0x585e(%eax),%eax
00005dca	movl	%eax,0xd0(%ebp)
00005dcd	nopl	(%eax)
00005dd0	movl	%ebx,0x08(%esp)
00005dd4	movl	%edi,(%esp)
00005dd7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005ddf	calll	CChoreoEvent::GetAbsoluteTag(CChoreoEvent::AbsTagType, int)
00005de4	movl	%eax,%edi
00005de6	movl	%edi,(%esp)
00005de9	calll	CEventAbsoluteTag::GetName()
00005dee	movl	%eax,%esi
00005df0	movl	%edi,(%esp)
00005df3	movl	0x14(%ebp),%edi
00005df6	calll	CEventAbsoluteTag::GetPercentage()
00005dfb	fstpl	0x10(%esp)
00005dff	movl	%esi,0x0c(%esp)
00005e03	movl	0x0c(%ebp),%esi
00005e06	movl	0xd0(%ebp),%eax
00005e09	movl	%eax,0x08(%esp)
00005e0d	movl	0xdc(%ebp),%eax
00005e10	movl	%eax,0x04(%esp)
00005e14	movl	%esi,(%esp)
00005e17	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005e1c	movl	%edi,(%esp)
00005e1f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00005e27	incl	%ebx
00005e28	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005e2d	cmpl	%eax,%ebx
00005e2f	jl	0x00005dd0
00005e31	movl	%edi,%ebx
00005e33	movl	0xcc(%ebp),%edi
00005e36	leal	0x68b7d-0x585e(%edi),%eax
00005e3c	movl	%eax,0x08(%esp)
00005e40	movl	0xe0(%ebp),%eax
00005e43	movl	%eax,0x04(%esp)
00005e47	movl	%esi,(%esp)
00005e4a	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005e4f	movl	%ebx,(%esp)
00005e52	movl	$0x00000001,0x04(%esp)
00005e5a	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005e5f	testl	%eax,%eax
00005e61	jle	0x00005f4f
00005e67	movl	$0x00000001,(%esp)
00005e6e	calll	CChoreoEvent::NameForAbsoluteTagType(CChoreoEvent::AbsTagType)
00005e73	movl	%eax,0x0c(%esp)
00005e77	leal	0x690a5-0x585e(%edi),%eax
00005e7d	movl	%edi,0xcc(%ebp)
00005e80	movl	%eax,0x08(%esp)
00005e84	movl	0xe0(%ebp),%edi
00005e87	movl	%edi,0x04(%esp)
00005e8b	movl	%esi,(%esp)
00005e8e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005e93	movl	0xc0(%ebp),%eax
00005e96	movl	%eax,0x08(%esp)
00005e9a	movl	%edi,0x04(%esp)
00005e9e	movl	%esi,(%esp)
00005ea1	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005ea6	movl	%ebx,(%esp)
00005ea9	movl	$0x00000001,0x04(%esp)
00005eb1	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005eb6	testl	%eax,%eax
00005eb8	movl	%ebx,%edi
00005eba	jle	0x00005f31
00005ebc	xorl	%ebx,%ebx
00005ebe	movl	0xcc(%ebp),%eax
00005ec1	leal	0x69080-0x585e(%eax),%eax
00005ec7	movl	%eax,0xd0(%ebp)
00005eca	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00005ed0	movl	%ebx,0x08(%esp)
00005ed4	movl	%edi,(%esp)
00005ed7	movl	$0x00000001,0x04(%esp)
00005edf	calll	CChoreoEvent::GetAbsoluteTag(CChoreoEvent::AbsTagType, int)
00005ee4	movl	%eax,%edi
00005ee6	movl	%edi,(%esp)
00005ee9	calll	CEventAbsoluteTag::GetName()
00005eee	movl	%eax,%esi
00005ef0	movl	%edi,(%esp)
00005ef3	movl	0x14(%ebp),%edi
00005ef6	calll	CEventAbsoluteTag::GetPercentage()
00005efb	fstpl	0x10(%esp)
00005eff	movl	%esi,0x0c(%esp)
00005f03	movl	0x0c(%ebp),%esi
00005f06	movl	0xd0(%ebp),%eax
00005f09	movl	%eax,0x08(%esp)
00005f0d	movl	0xdc(%ebp),%eax
00005f10	movl	%eax,0x04(%esp)
00005f14	movl	%esi,(%esp)
00005f17	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005f1c	movl	%edi,(%esp)
00005f1f	movl	$0x00000001,0x04(%esp)
00005f27	incl	%ebx
00005f28	calll	CChoreoEvent::GetNumAbsoluteTags(CChoreoEvent::AbsTagType)
00005f2d	cmpl	%eax,%ebx
00005f2f	jl	0x00005ed0
00005f31	movl	%edi,%ebx
00005f33	movl	0xcc(%ebp),%edi
00005f36	leal	0x68b7d-0x585e(%edi),%eax
00005f3c	movl	%eax,0x08(%esp)
00005f40	movl	0xe0(%ebp),%eax
00005f43	movl	%eax,0x04(%esp)
00005f47	movl	%esi,(%esp)
00005f4a	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005f4f	movl	%ebx,(%esp)
00005f52	calll	CChoreoEvent::GetType()
00005f57	cmpl	$0x06,%eax
00005f5a	jne	0x00005f97
00005f5c	leal	0xf0(%ebp),%eax
00005f5f	movl	%eax,0x04(%esp)
00005f63	movl	%ebx,(%esp)
00005f66	calll	CChoreoEvent::GetGestureSequenceDuration(float&)
00005f6b	cmpb	$0x01,%al
00005f6d	jne	0x00005f97
00005f6f	movss	0xf0(%ebp),%xmm0
00005f74	cvtss2sd	%xmm0,%xmm0
00005f78	movsd	%xmm0,0x0c(%esp)
00005f7e	leal	0x690b6-0x585e(%edi),%eax
00005f84	movl	%eax,0x08(%esp)
00005f88	movl	0xe0(%ebp),%eax
00005f8b	movl	%eax,0x04(%esp)
00005f8f	movl	%esi,(%esp)
00005f92	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005f97	movl	%ebx,(%esp)
00005f9a	calll	CChoreoEvent::IsUsingRelativeTag()
00005f9f	cmpb	$0x01,%al
00005fa1	jne	0x00005fd9
00005fa3	movl	%ebx,(%esp)
00005fa6	calll	CChoreoEvent::GetRelativeTagName()
00005fab	movl	%eax,%esi
00005fad	movl	%ebx,(%esp)
00005fb0	calll	CChoreoEvent::GetRelativeWavName()
00005fb5	movl	%eax,0x10(%esp)
00005fb9	movl	%esi,0x0c(%esp)
00005fbd	movl	0x0c(%ebp),%esi
00005fc0	leal	0x690cb-0x585e(%edi),%eax
00005fc6	movl	%eax,0x08(%esp)
00005fca	movl	0xe0(%ebp),%eax
00005fcd	movl	%eax,0x04(%esp)
00005fd1	movl	%esi,(%esp)
00005fd4	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00005fd9	movl	%ebx,(%esp)
00005fdc	calll	CChoreoEvent::GetNumFlexAnimationTracks()
00005fe1	testl	%eax,%eax
00005fe3	jle	0x00005ff8
00005fe5	movl	%ebx,0x08(%esp)
00005fe9	movl	0x10(%ebp),%eax
00005fec	movl	%eax,0x04(%esp)
00005ff0	movl	%esi,(%esp)
00005ff3	calll	CChoreoScene::FileSaveFlexAnimations(CUtlBuffer&, int, CChoreoEvent*)
00005ff8	movl	%ebx,(%esp)
00005ffb	calll	CChoreoEvent::GetType()
00006000	cmpl	$0x0c,%eax
00006003	jne	0x0000602a
00006005	movl	%ebx,(%esp)
00006008	calll	CChoreoEvent::GetLoopCount()
0000600d	movl	%eax,0x0c(%esp)
00006011	leal	0x690e2-0x585e(%edi),%eax
00006017	movl	%eax,0x08(%esp)
0000601b	movl	0xe0(%ebp),%eax
0000601e	movl	%eax,0x04(%esp)
00006022	movl	%esi,(%esp)
00006025	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000602a	movl	%ebx,(%esp)
0000602d	calll	CChoreoEvent::GetType()
00006032	cmpl	$0x05,%eax
00006035	jne	0x0000610f
0000603b	movl	%ebx,(%esp)
0000603e	calll	CChoreoEvent::GetCloseCaptionType() const
00006043	movl	%eax,(%esp)
00006046	calll	CChoreoEvent::NameForCCType(CChoreoEvent::CLOSECAPTION)
0000604b	movl	%eax,0x0c(%esp)
0000604f	leal	0x690f2-0x585e(%edi),%eax
00006055	movl	%eax,0x08(%esp)
00006059	movl	%edi,0xcc(%ebp)
0000605c	movl	0xe0(%ebp),%edi
0000605f	movl	%edi,0x04(%esp)
00006063	movl	%esi,(%esp)
00006066	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000606b	movl	%ebx,(%esp)
0000606e	calll	CChoreoEvent::GetCloseCaptionToken() const
00006073	movl	%eax,0x0c(%esp)
00006077	movl	0xcc(%ebp),%eax
0000607a	leal	0x690ff-0x585e(%eax),%eax
00006080	movl	%eax,0x08(%esp)
00006084	movl	%edi,0x04(%esp)
00006088	movl	0xcc(%ebp),%edi
0000608b	movl	%esi,(%esp)
0000608e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006093	movl	%ebx,(%esp)
00006096	calll	CChoreoEvent::GetCloseCaptionType() const
0000609b	cmpl	$0x02,%eax
0000609e	je	0x000060c5
000060a0	movl	%ebx,(%esp)
000060a3	calll	CChoreoEvent::IsUsingCombinedFile() const
000060a8	cmpb	$0x01,%al
000060aa	jne	0x000060c5
000060ac	leal	0x6910d-0x585e(%edi),%eax
000060b2	movl	%eax,0x08(%esp)
000060b6	movl	0xe0(%ebp),%eax
000060b9	movl	%eax,0x04(%esp)
000060bd	movl	%esi,(%esp)
000060c0	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000060c5	movl	%ebx,(%esp)
000060c8	calll	CChoreoEvent::IsCombinedUsingGenderToken() const
000060cd	cmpb	$0x01,%al
000060cf	jne	0x000060ea
000060d1	leal	0x69123-0x585e(%edi),%eax
000060d7	movl	%eax,0x08(%esp)
000060db	movl	0xe0(%ebp),%eax
000060de	movl	%eax,0x04(%esp)
000060e2	movl	%esi,(%esp)
000060e5	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000060ea	movl	%ebx,(%esp)
000060ed	calll	CChoreoEvent::IsSuppressingCaptionAttenuation() const
000060f2	cmpb	$0x01,%al
000060f4	jne	0x0000610f
000060f6	leal	0x6913a-0x585e(%edi),%eax
000060fc	movl	%eax,0x08(%esp)
00006100	movl	0xe0(%ebp),%eax
00006103	movl	%eax,0x04(%esp)
00006107	movl	%esi,(%esp)
0000610a	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000610f	leal	0x68b7d-0x585e(%edi),%eax
00006115	movl	%eax,0x08(%esp)
00006119	movl	0x10(%ebp),%eax
0000611c	movl	%eax,0x04(%esp)
00006120	movl	%esi,(%esp)
00006123	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006128	addl	$0x5c,%esp
0000612b	popl	%esi
0000612c	popl	%edi
0000612d	popl	%ebx
0000612e	popl	%ebp
0000612f	ret
CChoreoScene::FileSaveActor(CUtlBuffer&, int, CChoreoActor*):
00006130	pushl	%ebp
00006131	movl	%esp,%ebp
00006133	pushl	%ebx
00006134	pushl	%edi
00006135	pushl	%esi
00006136	subl	$0x1c,%esp
00006139	calll	0x0000613e
0000613e	popl	%edi
0000613f	movl	0x14(%ebp),%esi
00006142	testb	$0x01,0x00000115(%esi)
00006149	je	0x00006265
0000614f	movl	0x10(%ebp),%ebx
00006152	movl	%esi,(%esp)
00006155	calll	CChoreoActor::GetName()
0000615a	movl	%eax,0x0c(%esp)
0000615e	leal	0x68b8e-0x613e(%edi),%eax
00006164	movl	%eax,0x08(%esp)
00006168	movl	%ebx,0x04(%esp)
0000616c	movl	0x0c(%ebp),%eax
0000616f	movl	%eax,(%esp)
00006172	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006177	leal	0x68b48-0x613e(%edi),%eax
0000617d	movl	%edi,0xf0(%ebp)
00006180	movl	%eax,0x08(%esp)
00006184	movl	%ebx,0x04(%esp)
00006188	movl	0x0c(%ebp),%eax
0000618b	movl	%eax,(%esp)
0000618e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006193	movl	%esi,(%esp)
00006196	calll	CChoreoActor::GetNumChannels()
0000619b	testl	%eax,%eax
0000619d	jle	0x000061e1
0000619f	movl	0x10(%ebp),%eax
000061a2	leal	0x01(%eax),%edi
000061a5	xorl	%ebx,%ebx
000061a7	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000061b0	movl	%ebx,0x04(%esp)
000061b4	movl	%esi,(%esp)
000061b7	calll	CChoreoActor::GetChannel(int)
000061bc	testl	%eax,%eax
000061be	je	0x000061d4
000061c0	movl	%eax,0x0c(%esp)
000061c4	movl	%edi,0x08(%esp)
000061c8	movl	0x0c(%ebp),%eax
000061cb	movl	%eax,0x04(%esp)
000061cf	calll	CChoreoScene::FileSaveChannel(CUtlBuffer&, int, CChoreoChannel*)
000061d4	movl	%esi,(%esp)
000061d7	incl	%ebx
000061d8	calll	CChoreoActor::GetNumChannels()
000061dd	cmpl	%eax,%ebx
000061df	jl	0x000061b0
000061e1	movl	%esi,(%esp)
000061e4	calll	CChoreoActor::GetFacePoserModelName() const
000061e9	movl	%eax,(%esp)
000061ec	calll	_strlen
000061f1	testl	%eax,%eax
000061f3	movl	0xf0(%ebp),%edi
000061f6	movl	0x10(%ebp),%ebx
000061f9	jle	0x00006223
000061fb	movl	%esi,(%esp)
000061fe	calll	CChoreoActor::GetFacePoserModelName() const
00006203	movl	%eax,0x0c(%esp)
00006207	leal	0x69156-0x613e(%edi),%eax
0000620d	movl	%eax,0x08(%esp)
00006211	leal	0x01(%ebx),%eax
00006214	movl	%eax,0x04(%esp)
00006218	movl	0x0c(%ebp),%eax
0000621b	movl	%eax,(%esp)
0000621e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006223	movl	%esi,(%esp)
00006226	calll	CChoreoActor::GetActive() const
0000622b	testb	%al,%al
0000622d	movl	%edi,%eax
0000622f	movl	0x0c(%ebp),%edi
00006232	movl	%eax,%esi
00006234	jne	0x0000624f
00006236	leal	0x6914a-0x613e(%esi),%eax
0000623c	movl	%eax,0x08(%esp)
00006240	leal	0x01(%ebx),%eax
00006243	movl	%eax,0x04(%esp)
00006247	movl	%edi,(%esp)
0000624a	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000624f	leal	0x68b9a-0x613e(%esi),%eax
00006255	movl	%eax,0x08(%esp)
00006259	movl	%ebx,0x04(%esp)
0000625d	movl	%edi,(%esp)
00006260	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006265	addl	$0x1c,%esp
00006268	popl	%esi
00006269	popl	%edi
0000626a	popl	%ebx
0000626b	popl	%ebp
0000626c	ret
0000626d	nopl	(%eax)
CChoreoScene::SaveToFile(char const*):
00006270	pushl	%ebp
00006271	movl	%esp,%ebp
00006273	pushl	%ebx
00006274	pushl	%edi
00006275	pushl	%esi
00006276	subl	$0x5c,%esp
00006279	calll	0x0000627e
0000627e	popl	%esi
0000627f	movl	%esi,0xb4(%ebp)
00006282	leal	0xb8(%ebp),%edi
00006285	movl	%edi,(%esp)
00006288	movl	$0x00000001,0x0c(%esp)
00006290	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00006298	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000062a0	calll	CUtlBuffer::CUtlBuffer(int, int, int)
000062a5	leal	0x68e8a-0x627e(%esi),%eax
000062ab	movl	%eax,0x08(%esp)
000062af	movl	%edi,(%esp)
000062b2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000062ba	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000062bf	movl	0x08(%ebp),%esi
000062c2	movl	%esi,(%esp)
000062c5	movl	$0x00000001,0x04(%esp)
000062cd	calll	CChoreoScene::MarkForSaveAll(bool)
000062d2	xorl	%ebx,%ebx
000062d4	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000062e0	movl	%esi,%edi
000062e2	cmpl	0x10(%edi),%ebx
000062e5	jl	0x00006321
000062e7	xorl	%esi,%esi
000062e9	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
000062f0	cmpl	0x24(%edi),%esi
000062f3	leal	0xb8(%ebp),%ecx
000062f6	jge	0x00006381
000062fc	movl	0x18(%edi),%eax
000062ff	movl	(%eax,%esi,4),%eax
00006302	testl	%eax,%eax
00006304	je	0x0000631e
00006306	movl	%eax,0x0c(%esp)
0000630a	movl	%ecx,0x04(%esp)
0000630e	movl	%edi,(%esp)
00006311	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00006319	calll	CChoreoScene::FileSaveActor(CUtlBuffer&, int, CChoreoActor*)
0000631e	incl	%esi
0000631f	jmp	0x000062f0
00006321	movl	0x04(%edi),%eax
00006324	movl	%edi,%esi
00006326	movl	(%eax,%ebx,4),%edi
00006329	movl	%edi,(%esp)
0000632c	calll	CChoreoEvent::GetActor()
00006331	testl	%eax,%eax
00006333	jne	0x0000634d
00006335	movl	%edi,0x0c(%esp)
00006339	leal	0xb8(%ebp),%eax
0000633c	movl	%eax,0x04(%esp)
00006340	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00006348	calll	CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*)
0000634d	incl	%ebx
0000634e	jmp	0x000062e0
00006350	jmp	0x00006354
00006352	jmp	0x00006354
00006354	movl	%eax,%esi
00006356	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
0000635a	js	0x00006379
0000635c	movl	0xb8(%ebp),%eax
0000635f	testl	%eax,%eax
00006361	je	0x00006372
00006363	movl	%eax,(%esp)
00006366	calll	_free
0000636b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
00006372	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00006379	movl	%esi,(%esp)
0000637c	calll	__Unwind_Resume
00006381	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x000000a8(%edi)
00006388	movl	%ecx,%ebx
0000638a	je	0x000063b3
0000638c	leal	0x000000a8(%edi),%eax
00006392	movl	%eax,0x0c(%esp)
00006396	movl	0xb4(%ebp),%eax
00006399	leal	0x68ea2-0x627e(%eax),%eax
0000639f	movl	%eax,0x08(%esp)
000063a3	movl	%ebx,(%esp)
000063a6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000063ae	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000063b3	movl	0xb4(%ebp),%eax
000063b6	leal	0x68e58-0x627e(%eax),%eax
000063bc	movl	%eax,0x0c(%esp)
000063c0	movl	%ebx,0x04(%esp)
000063c4	leal	0x0000012c(%edi),%eax
000063ca	movl	%eax,(%esp)
000063cd	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
000063d5	calll	CCurveData::FileSave(CUtlBuffer&, int, char const*)
000063da	movl	%edi,0x08(%esp)
000063de	movl	%ebx,(%esp)
000063e1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000063e9	calll	CChoreoScene::FileSaveScaleSettings(CUtlBuffer&, int, CChoreoScene*)
000063ee	movl	0x00000128(%edi),%eax
000063f4	movl	%eax,0x0c(%esp)
000063f8	movl	0xb4(%ebp),%eax
000063fb	leal	0x68eb0-0x627e(%eax),%eax
00006401	movl	%eax,0x08(%esp)
00006405	movl	%ebx,(%esp)
00006408	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006410	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006415	movb	0x0000020c(%edi),%al
0000641b	movl	0xb4(%ebp),%edx
0000641e	leal	0x68eb8-0x627e(%edx),%ecx
00006424	movl	%ecx,0x08(%esp)
00006428	movl	%ebx,(%esp)
0000642b	andb	$0x08,%al
0000642d	shrb	$0x03,%al
00006430	leal	0x68e11-0x627e(%edx),%ecx
00006436	movl	%ecx,0xb0(%ebp)
00006439	leal	0x68ec1-0x627e(%edx),%esi
0000643f	testb	%al,%al
00006441	movl	%esi,%eax
00006443	cmovnel	%ecx,%eax
00006446	movl	%eax,0x0c(%esp)
0000644a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006452	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006457	movb	0x0000020c(%edi),%al
0000645d	movl	0xb4(%ebp),%ecx
00006460	leal	0x68ec5-0x627e(%ecx),%ecx
00006466	movl	%ecx,0x08(%esp)
0000646a	movl	%ebx,(%esp)
0000646d	andb	$0x02,%al
0000646f	shrb	%al
00006471	testb	%al,%al
00006473	cmovnel	0xb0(%ebp),%esi
00006477	movl	%esi,0x0c(%esp)
0000647b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006483	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006488	movl	0xb4(%ebp),%edx
0000648b	movl	0x758ee-0x627e(%edx),%edi
00006491	movl	(%edi),%eax
00006493	movl	0x04(%eax),%ecx
00006496	movl	0x08(%ecx),%ecx
00006499	leal	0x68e9f-0x627e(%edx),%edx
0000649f	movl	%edx,0x08(%esp)
000064a3	movl	0x0c(%ebp),%edx
000064a6	movl	%edx,0x04(%esp)
000064aa	addl	$0x04,%eax
000064ad	movl	%eax,(%esp)
000064b0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
000064b8	call	*%ecx
000064ba	movl	%eax,%esi
000064bc	xorb	%bl,%bl
000064be	testl	%esi,%esi
000064c0	je	0x000064fa
000064c2	movl	(%edi),%eax
000064c4	movl	0x04(%eax),%ecx
000064c7	movl	0x04(%ecx),%ecx
000064ca	movl	0xb8(%ebp),%edx
000064cd	movl	0xc8(%ebp),%ebx
000064d0	movl	%esi,0x0c(%esp)
000064d4	movl	%ebx,0x08(%esp)
000064d8	movl	%edx,0x04(%esp)
000064dc	addl	$0x04,%eax
000064df	movl	%eax,(%esp)
000064e2	call	*%ecx
000064e4	movl	(%edi),%eax
000064e6	movl	0x04(%eax),%ecx
000064e9	movl	0x0c(%ecx),%ecx
000064ec	movb	$0x01,%bl
000064ee	movl	%esi,0x04(%esp)
000064f2	addl	$0x04,%eax
000064f5	movl	%eax,(%esp)
000064f8	call	*%ecx
000064fa	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
000064fe	js	0x0000651d
00006500	movl	0xb8(%ebp),%eax
00006503	testl	%eax,%eax
00006505	je	0x00006516
00006507	movl	%eax,(%esp)
0000650a	calll	_free
0000650f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
00006516	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
0000651d	movzbl	%bl,%eax
00006520	addl	$0x5c,%esp
00006523	popl	%esi
00006524	popl	%edi
00006525	popl	%ebx
00006526	popl	%ebp
00006527	ret
00006528	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FileSaveSceneRamp(CUtlBuffer&, int):
00006530	pushl	%ebp
00006531	movl	%esp,%ebp
00006533	subl	$0x18,%esp
00006536	calll	0x0000653b
0000653b	popl	%eax
0000653c	leal	0x68e58-0x653b(%eax),%eax
00006542	movl	%eax,0x0c(%esp)
00006546	movl	0x10(%ebp),%eax
00006549	movl	%eax,0x08(%esp)
0000654d	movl	0x0c(%ebp),%eax
00006550	movl	%eax,0x04(%esp)
00006554	movl	$0x0000012c,%eax
00006559	addl	0x08(%ebp),%eax
0000655c	movl	%eax,(%esp)
0000655f	calll	CCurveData::FileSave(CUtlBuffer&, int, char const*)
00006564	addl	$0x18,%esp
00006567	popl	%ebp
00006568	ret
00006569	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::FileSaveScaleSettings(CUtlBuffer&, int, CChoreoScene*):
00006570	pushl	%ebp
00006571	movl	%esp,%ebp
00006573	pushl	%ebx
00006574	pushl	%edi
00006575	pushl	%esi
00006576	subl	$0x1c,%esp
00006579	calll	0x0000657e
0000657e	popl	%ebx
0000657f	movl	0x10(%ebp),%eax
00006582	movl	0x00000178(%eax),%esi
00006588	testl	%esi,%esi
0000658a	jle	0x00006633
00006590	movl	0x0c(%ebp),%edi
00006593	movl	0x08(%ebp),%ecx
00006596	leal	0x68f1c-0x657e(%ebx),%eax
0000659c	movl	%eax,0x08(%esp)
000065a0	movl	%edi,0x04(%esp)
000065a4	movl	%ecx,(%esp)
000065a7	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000065ac	leal	0x68b48-0x657e(%ebx),%eax
000065b2	movl	%eax,0x08(%esp)
000065b6	movl	%edi,0x04(%esp)
000065ba	movl	0x08(%ebp),%eax
000065bd	movl	%eax,(%esp)
000065c0	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000065c5	movl	%ebx,%eax
000065c7	movl	%eax,0xec(%ebp)
000065ca	leal	0x01(%edi),%edi
000065cd	movl	$0x00000014,%ebx
000065d2	leal	0x68f2b-0x657e(%eax),%eax
000065d8	movl	%eax,0xf0(%ebp)
000065db	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000065e0	movl	0x10(%ebp),%eax
000065e3	movl	0x00000168(%eax),%ecx
000065e9	movl	0xfc(%ecx,%ebx),%eax
000065ed	movl	(%ecx,%ebx),%ecx
000065f0	movl	%ecx,0x10(%esp)
000065f4	movl	%eax,0x0c(%esp)
000065f8	movl	0xf0(%ebp),%eax
000065fb	movl	%eax,0x08(%esp)
000065ff	movl	%edi,0x04(%esp)
00006603	movl	0x08(%ebp),%eax
00006606	movl	%eax,(%esp)
00006609	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000660e	addl	$0x18,%ebx
00006611	decl	%esi
00006612	jne	0x000065e0
00006614	movl	0xec(%ebp),%eax
00006617	leal	0x68b7d-0x657e(%eax),%eax
0000661d	movl	%eax,0x08(%esp)
00006621	movl	0x0c(%ebp),%eax
00006624	movl	%eax,0x04(%esp)
00006628	movl	0x08(%ebp),%eax
0000662b	movl	%eax,(%esp)
0000662e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006633	addl	$0x1c,%esp
00006636	popl	%esi
00006637	popl	%edi
00006638	popl	%ebx
00006639	popl	%ebp
0000663a	ret
0000663b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FileSaveRamp(CUtlBuffer&, int, CChoreoEvent*):
00006640	pushl	%ebp
00006641	movl	%esp,%ebp
00006643	subl	$0x18,%esp
00006646	calll	0x0000664b
0000664b	popl	%eax
0000664c	leal	0x68d80-0x664b(%eax),%eax
00006652	movl	%eax,0x0c(%esp)
00006656	movl	0x0c(%ebp),%eax
00006659	movl	%eax,0x08(%esp)
0000665d	movl	0x08(%ebp),%eax
00006660	movl	%eax,0x04(%esp)
00006664	movl	0x10(%ebp),%eax
00006667	addl	$0x5c,%eax
0000666a	movl	%eax,(%esp)
0000666d	calll	CCurveData::FileSave(CUtlBuffer&, int, char const*)
00006672	addl	$0x18,%esp
00006675	popl	%ebp
00006676	ret
00006677	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CCurveData::FileSave(CUtlBuffer&, int, char const*):
00006680	pushl	%ebp
00006681	movl	%esp,%ebp
00006683	pushl	%ebx
00006684	pushl	%edi
00006685	pushl	%esi
00006686	subl	$0x0000064c,%esp
0000668c	calll	0x00006691
00006691	popl	%eax
00006692	movl	%eax,0xfffff9d8(%ebp)
00006698	movl	0x758ea-0x6691(%eax),%eax
0000669e	movl	%eax,0xfffff9d4(%ebp)
000066a4	movl	(%eax),%eax
000066a6	movl	%eax,0xf0(%ebp)
000066a9	movl	0x08(%ebp),%esi
000066ac	movl	%esi,(%esp)
000066af	calll	CCurveData::GetCount()
000066b4	movl	%eax,0xfffff9dc(%ebp)
000066ba	testl	%eax,%eax
000066bc	jg	0x000066ea
000066be	movl	%esi,(%esp)
000066c1	movl	$0x00000001,0x04(%esp)
000066c9	calll	CCurveData::IsEdgeActive(bool) const
000066ce	testb	%al,%al
000066d0	jne	0x000066ea
000066d2	movl	%esi,(%esp)
000066d5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000066dd	calll	CCurveData::IsEdgeActive(bool) const
000066e2	cmpb	$0x01,%al
000066e4	jne	0x00006984
000066ea	movl	0x14(%ebp),%eax
000066ed	movl	%eax,0x04(%esp)
000066f1	leal	0xfffffbf0(%ebp),%ebx
000066f7	movl	%ebx,(%esp)
000066fa	movl	$0x00000400,0x08(%esp)
00006702	calll	V_strncpy(char*, char const*, int)
00006707	movl	%esi,(%esp)
0000670a	movl	$0x00000001,0x04(%esp)
00006712	calll	CCurveData::IsEdgeActive(bool) const
00006717	testb	%al,%al
00006719	jne	0x00006733
0000671b	movl	%esi,(%esp)
0000671e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006726	calll	CCurveData::IsEdgeActive(bool) const
0000672b	cmpb	$0x01,%al
0000672d	jne	0x0000685b
00006733	movl	%esi,(%esp)
00006736	movl	$0x00000001,0x04(%esp)
0000673e	calll	CCurveData::IsEdgeActive(bool) const
00006743	cmpb	$0x01,%al
00006745	jne	0x000067cb
0000674b	movl	%esi,(%esp)
0000674e	movl	$0x00000001,0x04(%esp)
00006756	calll	CCurveData::GetEdgeCurveType(bool) const
0000675b	movl	%eax,(%esp)
0000675e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006766	calll	Interpolator_NameForCurveType(int, bool)
0000676b	movl	%eax,%edi
0000676d	movl	%esi,(%esp)
00006770	movl	$0x00000001,0x04(%esp)
00006778	calll	CCurveData::GetEdgeZeroValue(bool) const
0000677d	fstpl	0x10(%esp)
00006781	movl	%edi,0x0c(%esp)
00006785	movl	0xfffff9d8(%ebp),%eax
0000678b	leal	0x68ed8-0x6691(%eax),%eax
00006791	movl	%eax,0x08(%esp)
00006795	movl	%esi,%edi
00006797	leal	0xfffffaf0(%ebp),%esi
0000679d	movl	%esi,(%esp)
000067a0	movl	$0x00000100,0x04(%esp)
000067a8	calll	V_snprintf(char*, int, char const*, ...)
000067ad	movl	%esi,0x04(%esp)
000067b1	movl	%edi,%esi
000067b3	movl	%ebx,(%esp)
000067b6	movl	$0xffffffff,0x0c(%esp)
000067be	movl	$0x00000400,0x08(%esp)
000067c6	calll	V_strncat(char*, char const*, unsigned long, int)
000067cb	movl	%esi,(%esp)
000067ce	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000067d6	calll	CCurveData::IsEdgeActive(bool) const
000067db	cmpb	$0x01,%al
000067dd	jne	0x0000685b
000067df	movl	%esi,(%esp)
000067e2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000067ea	calll	CCurveData::GetEdgeCurveType(bool) const
000067ef	movl	%eax,(%esp)
000067f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000067fa	calll	Interpolator_NameForCurveType(int, bool)
000067ff	movl	%eax,%edi
00006801	movl	%esi,(%esp)
00006804	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000680c	calll	CCurveData::GetEdgeZeroValue(bool) const
00006811	fstpl	0x10(%esp)
00006815	movl	%edi,0x0c(%esp)
00006819	movl	0xfffff9d8(%ebp),%eax
0000681f	leal	0x68eea-0x6691(%eax),%eax
00006825	movl	%eax,0x08(%esp)
00006829	leal	0xfffff9f0(%ebp),%esi
0000682f	movl	%esi,(%esp)
00006832	movl	$0x00000100,0x04(%esp)
0000683a	calll	V_snprintf(char*, int, char const*, ...)
0000683f	movl	%esi,0x04(%esp)
00006843	movl	%ebx,(%esp)
00006846	movl	$0xffffffff,0x0c(%esp)
0000684e	movl	$0x00000400,0x08(%esp)
00006856	calll	V_strncat(char*, char const*, unsigned long, int)
0000685b	movl	%ebx,0x0c(%esp)
0000685f	movl	0xfffff9d8(%ebp),%esi
00006865	leal	0x68efd-0x6691(%esi),%eax
0000686b	movl	%eax,0x08(%esp)
0000686f	movl	0x10(%ebp),%edi
00006872	movl	%edi,0x04(%esp)
00006876	movl	0x0c(%ebp),%eax
00006879	movl	%eax,(%esp)
0000687c	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006881	leal	0x68b48-0x6691(%esi),%eax
00006887	movl	%esi,%ebx
00006889	movl	%eax,0x08(%esp)
0000688d	movl	%edi,0x04(%esp)
00006891	movl	0x0c(%ebp),%eax
00006894	movl	%eax,(%esp)
00006897	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000689c	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffff9dc(%ebp)
000068a3	jle	0x00006968
000068a9	movl	0x10(%ebp),%eax
000068ac	leal	0x01(%eax),%edi
000068af	xorl	%esi,%esi
000068b1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000068c0	movl	%esi,0x04(%esp)
000068c4	movl	0x08(%ebp),%eax
000068c7	movl	%eax,(%esp)
000068ca	calll	CCurveData::Get(int)
000068cf	movss	(%eax),%xmm1
000068d3	movss	0x04(%eax),%xmm0
000068d8	cvtss2sd	%xmm1,%xmm1
000068dc	cvtss2sd	%xmm0,%xmm0
000068e0	movzwl	0x08(%eax),%eax
000068e4	shrl	%eax
000068e6	testw	%ax,%ax
000068e9	je	0x00006936
000068eb	movzwl	%ax,%eax
000068ee	movl	%eax,(%esp)
000068f1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000068f9	movsd	%xmm0,0xfffff9e8(%ebp)
00006901	movsd	%xmm1,0xfffff9e0(%ebp)
00006909	calll	Interpolator_NameForCurveType(int, bool)
0000690e	movl	%eax,0x1c(%esp)
00006912	movsd	0xfffff9e0(%ebp),%xmm0
0000691a	movsd	%xmm0,0x14(%esp)
00006920	movsd	0xfffff9e8(%ebp),%xmm0
00006928	movsd	%xmm0,0x0c(%esp)
0000692e	leal	0x68f01-0x6691(%ebx),%eax
00006934	jmp	0x00006948
00006936	movsd	%xmm1,0x14(%esp)
0000693c	movsd	%xmm0,0x0c(%esp)
00006942	leal	0x68f11-0x6691(%ebx),%eax
00006948	movl	%eax,0x08(%esp)
0000694c	movl	%edi,0x04(%esp)
00006950	movl	0x0c(%ebp),%eax
00006953	movl	%eax,(%esp)
00006956	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
0000695b	incl	%esi
0000695c	cmpl	%esi,0xfffff9dc(%ebp)
00006962	jne	0x000068c0
00006968	leal	0x68b7d-0x6691(%ebx),%eax
0000696e	movl	%eax,0x08(%esp)
00006972	movl	0x10(%ebp),%eax
00006975	movl	%eax,0x04(%esp)
00006979	movl	0x0c(%ebp),%eax
0000697c	movl	%eax,(%esp)
0000697f	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006984	movl	0xfffff9d4(%ebp),%eax
0000698a	movl	(%eax),%eax
0000698c	cmpl	0xf0(%ebp),%eax
0000698f	jne	0x0000699c
00006991	addl	$0x0000064c,%esp
00006997	popl	%esi
00006998	popl	%edi
00006999	popl	%ebx
0000699a	popl	%ebp
0000699b	ret
0000699c	calll	___stack_chk_fail
000069a1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FileSaveFlexAnimationTrack(CUtlBuffer&, int, CFlexAnimationTrack*, int):
000069b0	pushl	%ebp
000069b1	movl	%esp,%ebp
000069b3	pushl	%ebx
000069b4	pushl	%edi
000069b5	pushl	%esi
000069b6	subl	$0x00000b5c,%esp
000069bc	calll	0x000069c1
000069c1	popl	%esi
000069c2	movl	0x758ea-0x69c1(%esi),%eax
000069c8	movl	%eax,0xfffff4c0(%ebp)
000069ce	movl	(%eax),%eax
000069d0	movl	%eax,0xf0(%ebp)
000069d3	movl	0x10(%ebp),%edi
000069d6	testl	%edi,%edi
000069d8	je	0x00006fce
000069de	movl	%edi,(%esp)
000069e1	calll	CFlexAnimationTrack::IsTrackActive()
000069e6	testb	%al,%al
000069e8	jne	0x00006a02
000069ea	movl	%edi,(%esp)
000069ed	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000069f5	calll	CFlexAnimationTrack::GetNumSamples(int)
000069fa	testl	%eax,%eax
000069fc	jle	0x00006fce
00006a02	movl	%edi,(%esp)
00006a05	calll	CFlexAnimationTrack::GetFlexControllerName()
00006a0a	movl	%eax,0x0c(%esp)
00006a0e	movl	%esi,%ebx
00006a10	leal	0x68f36-0x69c1(%ebx),%eax
00006a16	movl	%eax,0x08(%esp)
00006a1a	leal	0xfffffbf0(%ebp),%esi
00006a20	movl	%esi,(%esp)
00006a23	movl	$0x00000400,0x04(%esp)
00006a2b	calll	V_snprintf(char*, int, char const*, ...)
00006a30	movl	%edi,(%esp)
00006a33	calll	CFlexAnimationTrack::IsTrackActive()
00006a38	testb	%al,%al
00006a3a	jne	0x00006a78
00006a3c	leal	0x68f3c-0x69c1(%ebx),%eax
00006a42	movl	%eax,0x08(%esp)
00006a46	leal	0xfffffaf0(%ebp),%edi
00006a4c	movl	%edi,(%esp)
00006a4f	movl	$0x00000100,0x04(%esp)
00006a57	calll	V_snprintf(char*, int, char const*, ...)
00006a5c	movl	%edi,0x04(%esp)
00006a60	movl	%esi,(%esp)
00006a63	movl	$0xffffffff,0x0c(%esp)
00006a6b	movl	$0x00000400,0x08(%esp)
00006a73	calll	V_strncat(char*, char const*, unsigned long, int)
00006a78	movl	0x10(%ebp),%eax
00006a7b	movl	%eax,(%esp)
00006a7e	calll	CFlexAnimationTrack::IsComboType()
00006a83	cmpb	$0x01,%al
00006a85	jne	0x00006ac3
00006a87	leal	0x68f46-0x69c1(%ebx),%eax
00006a8d	movl	%eax,0x08(%esp)
00006a91	leal	0xfffff9f0(%ebp),%edi
00006a97	movl	%edi,(%esp)
00006a9a	movl	$0x00000100,0x04(%esp)
00006aa2	calll	V_snprintf(char*, int, char const*, ...)
00006aa7	movl	%edi,0x04(%esp)
00006aab	movl	%esi,(%esp)
00006aae	movl	$0xffffffff,0x0c(%esp)
00006ab6	movl	$0x00000400,0x08(%esp)
00006abe	calll	V_strncat(char*, char const*, unsigned long, int)
00006ac3	movl	0x0c(%ebp),%eax
00006ac6	movl	%eax,0xfffff4d8(%ebp)
00006acc	movl	0x10(%ebp),%edi
00006acf	movl	%edi,(%esp)
00006ad2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006ada	calll	CFlexAnimationTrack::GetMin(int)
00006adf	fstps	0xfffff4ec(%ebp)
00006ae5	pxor	%xmm0,%xmm0
00006ae9	movss	0xfffff4ec(%ebp),%xmm1
00006af1	ucomiss	%xmm0,%xmm1
00006af4	jne	0x00006b21
00006af6	jp	0x00006b21
00006af8	movl	%edi,(%esp)
00006afb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006b03	calll	CFlexAnimationTrack::GetMax(int)
00006b08	fstps	0xfffff4e8(%ebp)
00006b0e	movss	0xfffff4e8(%ebp),%xmm0
00006b16	ucomiss	0x65604-0x69c1(%ebx),%xmm0
00006b1d	jne	0x00006b21
00006b1f	jnp	0x00006b9f
00006b21	movl	%edi,(%esp)
00006b24	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006b2c	calll	CFlexAnimationTrack::GetMin(int)
00006b31	fstpt	0xfffff4dc(%ebp)
00006b37	movl	%edi,(%esp)
00006b3a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006b42	calll	CFlexAnimationTrack::GetMax(int)
00006b47	fstpl	0x14(%esp)
00006b4b	fldt	0xfffff4dc(%ebp)
00006b51	fstpl	0x0c(%esp)
00006b55	leal	0x68f4d-0x69c1(%ebx),%eax
00006b5b	movl	%eax,0x08(%esp)
00006b5f	movl	%ebx,%esi
00006b61	movl	%edi,%ebx
00006b63	leal	0xfffff8f0(%ebp),%edi
00006b69	movl	%edi,(%esp)
00006b6c	movl	$0x00000100,0x04(%esp)
00006b74	calll	V_snprintf(char*, int, char const*, ...)
00006b79	movl	%edi,0x04(%esp)
00006b7d	movl	%ebx,%edi
00006b7f	movl	%esi,%ebx
00006b81	leal	0xfffffbf0(%ebp),%esi
00006b87	movl	%esi,(%esp)
00006b8a	movl	$0xffffffff,0x0c(%esp)
00006b92	movl	$0x00000400,0x08(%esp)
00006b9a	calll	V_strncat(char*, char const*, unsigned long, int)
00006b9f	movl	%edi,(%esp)
00006ba2	movl	$0x00000001,0x04(%esp)
00006baa	calll	CFlexAnimationTrack::IsEdgeActive(bool) const
00006baf	testb	%al,%al
00006bb1	jne	0x00006bcb
00006bb3	movl	%edi,(%esp)
00006bb6	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006bbe	calll	CFlexAnimationTrack::IsEdgeActive(bool) const
00006bc3	cmpb	$0x01,%al
00006bc5	jne	0x00006d1a
00006bcb	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xfffff6f0(%ebp)
00006bd2	movl	%edi,(%esp)
00006bd5	movl	$0x00000001,0x04(%esp)
00006bdd	calll	CFlexAnimationTrack::IsEdgeActive(bool) const
00006be2	cmpb	$0x01,%al
00006be4	jne	0x00006c62
00006be6	movl	%edi,(%esp)
00006be9	movl	$0x00000001,0x04(%esp)
00006bf1	calll	CFlexAnimationTrack::GetEdgeCurveType(bool) const
00006bf6	movl	%eax,(%esp)
00006bf9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006c01	calll	Interpolator_NameForCurveType(int, bool)
00006c06	movl	%eax,%esi
00006c08	movl	%edi,(%esp)
00006c0b	movl	$0x00000001,0x04(%esp)
00006c13	calll	CFlexAnimationTrack::GetEdgeZeroValue(bool) const
00006c18	fstpl	0x10(%esp)
00006c1c	movl	%esi,0x0c(%esp)
00006c20	leal	0x68f5e-0x69c1(%ebx),%eax
00006c26	movl	%eax,0x08(%esp)
00006c2a	leal	0xfffff5f0(%ebp),%esi
00006c30	movl	%esi,(%esp)
00006c33	movl	$0x00000100,0x04(%esp)
00006c3b	calll	V_snprintf(char*, int, char const*, ...)
00006c40	movl	%esi,0x04(%esp)
00006c44	leal	0xfffff6f0(%ebp),%eax
00006c4a	movl	%eax,(%esp)
00006c4d	movl	$0xffffffff,0x0c(%esp)
00006c55	movl	$0x00000200,0x08(%esp)
00006c5d	calll	V_strncat(char*, char const*, unsigned long, int)
00006c62	movl	%edi,(%esp)
00006c65	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006c6d	calll	CFlexAnimationTrack::IsEdgeActive(bool) const
00006c72	cmpb	$0x01,%al
00006c74	jne	0x00006cf2
00006c76	movl	%edi,(%esp)
00006c79	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006c81	calll	CFlexAnimationTrack::GetEdgeCurveType(bool) const
00006c86	movl	%eax,(%esp)
00006c89	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006c91	calll	Interpolator_NameForCurveType(int, bool)
00006c96	movl	%eax,%esi
00006c98	movl	%edi,(%esp)
00006c9b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006ca3	calll	CFlexAnimationTrack::GetEdgeZeroValue(bool) const
00006ca8	fstpl	0x10(%esp)
00006cac	movl	%esi,0x0c(%esp)
00006cb0	leal	0x68f70-0x69c1(%ebx),%eax
00006cb6	movl	%eax,0x08(%esp)
00006cba	leal	0xfffff4f0(%ebp),%esi
00006cc0	movl	%esi,(%esp)
00006cc3	movl	$0x00000100,0x04(%esp)
00006ccb	calll	V_snprintf(char*, int, char const*, ...)
00006cd0	movl	%esi,0x04(%esp)
00006cd4	leal	0xfffff6f0(%ebp),%eax
00006cda	movl	%eax,(%esp)
00006cdd	movl	$0xffffffff,0x0c(%esp)
00006ce5	movl	$0x00000200,0x08(%esp)
00006ced	calll	V_strncat(char*, char const*, unsigned long, int)
00006cf2	leal	0xfffff6f0(%ebp),%eax
00006cf8	movl	%eax,0x04(%esp)
00006cfc	leal	0xfffffbf0(%ebp),%esi
00006d02	movl	%esi,(%esp)
00006d05	movl	$0xffffffff,0x0c(%esp)
00006d0d	movl	$0x00000400,0x08(%esp)
00006d15	calll	V_strncat(char*, char const*, unsigned long, int)
00006d1a	movl	%esi,0x0c(%esp)
00006d1e	leal	0x68efd-0x69c1(%ebx),%eax
00006d24	movl	%eax,0x08(%esp)
00006d28	movl	0x0c(%ebp),%eax
00006d2b	movl	%ebx,%edi
00006d2d	leal	0x02(%eax),%ebx
00006d30	movl	%ebx,0xfffff4c4(%ebp)
00006d36	movl	%ebx,0x04(%esp)
00006d3a	movl	0x08(%ebp),%esi
00006d3d	movl	%esi,(%esp)
00006d40	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006d45	leal	0x68b48-0x69c1(%edi),%eax
00006d4b	movl	%eax,0xfffff4b8(%ebp)
00006d51	movl	%edi,0xfffff4dc(%ebp)
00006d57	movl	%eax,0x08(%esp)
00006d5b	movl	%ebx,0x04(%esp)
00006d5f	movl	%esi,(%esp)
00006d62	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006d67	movl	0x10(%ebp),%esi
00006d6a	movl	%esi,(%esp)
00006d6d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006d75	calll	CFlexAnimationTrack::GetNumSamples(int)
00006d7a	testl	%eax,%eax
00006d7c	movl	%esi,%ebx
00006d7e	jle	0x00006e5f
00006d84	movl	0x0c(%ebp),%eax
00006d87	leal	0x03(%eax),%esi
00006d8a	xorl	%edi,%edi
00006d8c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00006d90	movl	%edi,0x04(%esp)
00006d94	movl	%ebx,(%esp)
00006d97	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00006d9f	calll	CFlexAnimationTrack::GetSample(int, int)
00006da4	testl	%eax,%eax
00006da6	je	0x00006e46
00006dac	movss	(%eax),%xmm1
00006db0	movss	0x04(%eax),%xmm0
00006db5	cvtss2sd	%xmm1,%xmm1
00006db9	cvtss2sd	%xmm0,%xmm0
00006dbd	movzwl	0x08(%eax),%eax
00006dc1	shrl	%eax
00006dc3	cmpl	0x14(%ebp),%eax
00006dc6	je	0x00006e1b
00006dc8	testw	%ax,%ax
00006dcb	je	0x00006e1b
00006dcd	movl	%eax,(%esp)
00006dd0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006dd8	movsd	%xmm0,0xfffff4d0(%ebp)
00006de0	movsd	%xmm1,0xfffff4c8(%ebp)
00006de8	calll	Interpolator_NameForCurveType(int, bool)
00006ded	movl	%eax,0x1c(%esp)
00006df1	movsd	0xfffff4c8(%ebp),%xmm0
00006df9	movsd	%xmm0,0x14(%esp)
00006dff	movsd	0xfffff4d0(%ebp),%xmm0
00006e07	movsd	%xmm0,0x0c(%esp)
00006e0d	movl	0xfffff4dc(%ebp),%eax
00006e13	leal	0x68f01-0x69c1(%eax),%eax
00006e19	jmp	0x00006e33
00006e1b	movsd	%xmm1,0x14(%esp)
00006e21	movsd	%xmm0,0x0c(%esp)
00006e27	movl	0xfffff4dc(%ebp),%eax
00006e2d	leal	0x68f11-0x69c1(%eax),%eax
00006e33	movl	%eax,0x08(%esp)
00006e37	movl	%esi,0x04(%esp)
00006e3b	movl	0x08(%ebp),%eax
00006e3e	movl	%eax,(%esp)
00006e41	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006e46	movl	%ebx,(%esp)
00006e49	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006e51	incl	%edi
00006e52	calll	CFlexAnimationTrack::GetNumSamples(int)
00006e57	cmpl	%eax,%edi
00006e59	jl	0x00006d90
00006e5f	movl	0xfffff4dc(%ebp),%eax
00006e65	leal	0x68b7d-0x69c1(%eax),%eax
00006e6b	movl	%eax,0xfffff4bc(%ebp)
00006e71	movl	%eax,0x08(%esp)
00006e75	movl	0xfffff4c4(%ebp),%eax
00006e7b	movl	%eax,0x04(%esp)
00006e7f	movl	0x08(%ebp),%esi
00006e82	movl	%esi,(%esp)
00006e85	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006e8a	movl	%ebx,(%esp)
00006e8d	calll	CFlexAnimationTrack::IsComboType()
00006e92	cmpb	$0x01,%al
00006e94	movl	%ebx,%edi
00006e96	jne	0x00006fce
00006e9c	movl	0xfffff4b8(%ebp),%eax
00006ea2	movl	%eax,0x08(%esp)
00006ea6	movl	0xfffff4c4(%ebp),%eax
00006eac	movl	%eax,0x04(%esp)
00006eb0	movl	%esi,(%esp)
00006eb3	movl	%esi,%ebx
00006eb5	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006eba	movl	%edi,(%esp)
00006ebd	movl	$0x00000001,0x04(%esp)
00006ec5	calll	CFlexAnimationTrack::GetNumSamples(int)
00006eca	testl	%eax,%eax
00006ecc	jle	0x00006fb2
00006ed2	addl	$0x03,0xfffff4d8(%ebp)
00006ed9	xorl	%esi,%esi
00006edb	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00006ee0	movl	%esi,0x04(%esp)
00006ee4	movl	%edi,(%esp)
00006ee7	movl	$0x00000001,0x08(%esp)
00006eef	calll	CFlexAnimationTrack::GetSample(int, int)
00006ef4	testl	%eax,%eax
00006ef6	je	0x00006f99
00006efc	movss	(%eax),%xmm1
00006f00	movss	0x04(%eax),%xmm0
00006f05	cvtss2sd	%xmm1,%xmm1
00006f09	cvtss2sd	%xmm0,%xmm0
00006f0d	movzwl	0x08(%eax),%eax
00006f11	shrl	%eax
00006f13	cmpl	0x14(%ebp),%eax
00006f16	je	0x00006f6b
00006f18	testw	%ax,%ax
00006f1b	je	0x00006f6b
00006f1d	movl	%eax,(%esp)
00006f20	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00006f28	movsd	%xmm0,0xfffff4d0(%ebp)
00006f30	movsd	%xmm1,0xfffff4c8(%ebp)
00006f38	calll	Interpolator_NameForCurveType(int, bool)
00006f3d	movl	%eax,0x1c(%esp)
00006f41	movsd	0xfffff4c8(%ebp),%xmm0
00006f49	movsd	%xmm0,0x14(%esp)
00006f4f	movsd	0xfffff4d0(%ebp),%xmm0
00006f57	movsd	%xmm0,0x0c(%esp)
00006f5d	movl	0xfffff4dc(%ebp),%eax
00006f63	leal	0x68f01-0x69c1(%eax),%eax
00006f69	jmp	0x00006f83
00006f6b	movsd	%xmm1,0x14(%esp)
00006f71	movsd	%xmm0,0x0c(%esp)
00006f77	movl	0xfffff4dc(%ebp),%eax
00006f7d	leal	0x68f11-0x69c1(%eax),%eax
00006f83	movl	%eax,0x08(%esp)
00006f87	movl	0xfffff4d8(%ebp),%eax
00006f8d	movl	%eax,0x04(%esp)
00006f91	movl	%ebx,(%esp)
00006f94	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006f99	movl	%edi,(%esp)
00006f9c	movl	$0x00000001,0x04(%esp)
00006fa4	incl	%esi
00006fa5	calll	CFlexAnimationTrack::GetNumSamples(int)
00006faa	cmpl	%eax,%esi
00006fac	jl	0x00006ee0
00006fb2	movl	0xfffff4bc(%ebp),%eax
00006fb8	movl	%eax,0x08(%esp)
00006fbc	movl	0xfffff4c4(%ebp),%eax
00006fc2	movl	%eax,0x04(%esp)
00006fc6	movl	%ebx,(%esp)
00006fc9	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00006fce	movl	0xfffff4c0(%ebp),%eax
00006fd4	movl	(%eax),%eax
00006fd6	cmpl	0xf0(%ebp),%eax
00006fd9	jne	0x00006fe6
00006fdb	addl	$0x00000b5c,%esp
00006fe1	popl	%esi
00006fe2	popl	%edi
00006fe3	popl	%ebx
00006fe4	popl	%ebp
00006fe5	ret
00006fe6	calll	___stack_chk_fail
00006feb	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FileSaveFlexAnimations(CUtlBuffer&, int, CChoreoEvent*):
00006ff0	pushl	%ebp
00006ff1	movl	%esp,%ebp
00006ff3	pushl	%ebx
00006ff4	pushl	%edi
00006ff5	pushl	%esi
00006ff6	subl	$0x1c,%esp
00006ff9	calll	0x00006ffe
00006ffe	popl	%esi
00006fff	movl	0x10(%ebp),%edi
00007002	movl	%edi,(%esp)
00007005	calll	CChoreoEvent::GetNumFlexAnimationTracks()
0000700a	testl	%eax,%eax
0000700c	jle	0x000070fc
00007012	movl	0x0c(%ebp),%ebx
00007015	movl	(%edi),%eax
00007017	movl	%edi,(%esp)
0000701a	call	*0x08(%eax)
0000701d	leal	0x01(%ebx),%ebx
00007020	testl	%eax,%eax
00007022	je	0x00007048
00007024	movl	(%edi),%eax
00007026	movl	%edi,(%esp)
00007029	call	*0x08(%eax)
0000702c	movl	%eax,(%esp)
0000702f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00007037	calll	Interpolator_NameForCurveType(int, bool)
0000703c	movl	%eax,0x0c(%esp)
00007040	leal	0x68f83-0x6ffe(%esi),%eax
00007046	jmp	0x0000704e
00007048	leal	0x68fb8-0x6ffe(%esi),%eax
0000704e	movl	%eax,0x08(%esp)
00007052	movl	%ebx,0x04(%esp)
00007056	movl	0x08(%ebp),%eax
00007059	movl	%eax,(%esp)
0000705c	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00007061	leal	0x68b48-0x6ffe(%esi),%eax
00007067	movl	%esi,0xf0(%ebp)
0000706a	movl	%eax,0x08(%esp)
0000706e	movl	%ebx,0x04(%esp)
00007072	movl	%ebx,0xec(%ebp)
00007075	movl	0x08(%ebp),%esi
00007078	movl	%esi,%eax
0000707a	movl	%eax,(%esp)
0000707d	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00007082	movl	%edi,(%esp)
00007085	calll	CChoreoEvent::GetNumFlexAnimationTracks()
0000708a	testl	%eax,%eax
0000708c	movl	%edi,%esi
0000708e	jle	0x000070dd
00007090	xorl	%edi,%edi
00007092	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000070a0	movl	%edi,0x04(%esp)
000070a4	movl	%esi,(%esp)
000070a7	calll	CChoreoEvent::GetFlexAnimationTrack(int)
000070ac	movl	%eax,%ebx
000070ae	movl	(%esi),%eax
000070b0	movl	%esi,(%esp)
000070b3	call	*0x08(%eax)
000070b6	movl	%eax,0x0c(%esp)
000070ba	movl	%ebx,0x08(%esp)
000070be	movl	0x0c(%ebp),%eax
000070c1	movl	%eax,0x04(%esp)
000070c5	movl	0x08(%ebp),%eax
000070c8	movl	%eax,(%esp)
000070cb	calll	CChoreoScene::FileSaveFlexAnimationTrack(CUtlBuffer&, int, CFlexAnimationTrack*, int)
000070d0	movl	%esi,(%esp)
000070d3	incl	%edi
000070d4	calll	CChoreoEvent::GetNumFlexAnimationTracks()
000070d9	cmpl	%eax,%edi
000070db	jl	0x000070a0
000070dd	movl	0xf0(%ebp),%eax
000070e0	leal	0x68b7d-0x6ffe(%eax),%eax
000070e6	movl	%eax,0x08(%esp)
000070ea	movl	0xec(%ebp),%eax
000070ed	movl	%eax,0x04(%esp)
000070f1	movl	0x08(%ebp),%eax
000070f4	movl	%eax,(%esp)
000070f7	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000070fc	addl	$0x1c,%esp
000070ff	popl	%esi
00007100	popl	%edi
00007101	popl	%ebx
00007102	popl	%ebp
00007103	ret
00007104	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FileSaveChannel(CUtlBuffer&, int, CChoreoChannel*):
00007110	pushl	%ebp
00007111	movl	%esp,%ebp
00007113	pushl	%ebx
00007114	pushl	%edi
00007115	pushl	%esi
00007116	subl	$0x1c,%esp
00007119	calll	0x0000711e
0000711e	popl	%esi
0000711f	movl	0x14(%ebp),%edi
00007122	testb	$0x01,0x00000099(%edi)
00007129	je	0x00007205
0000712f	movl	0x10(%ebp),%ebx
00007132	movl	%edi,(%esp)
00007135	calll	CChoreoChannel::GetName()
0000713a	movl	%eax,0x0c(%esp)
0000713e	leal	0x68b80-0x711e(%esi),%eax
00007144	movl	%eax,0x08(%esp)
00007148	movl	%ebx,0x04(%esp)
0000714c	movl	0x0c(%ebp),%eax
0000714f	movl	%eax,(%esp)
00007152	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00007157	leal	0x68b48-0x711e(%esi),%eax
0000715d	movl	%esi,0xf0(%ebp)
00007160	movl	%eax,0x08(%esp)
00007164	movl	%ebx,0x04(%esp)
00007168	movl	0x0c(%ebp),%eax
0000716b	movl	%eax,(%esp)
0000716e	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00007173	movl	%edi,(%esp)
00007176	calll	CChoreoChannel::GetNumEvents()
0000717b	testl	%eax,%eax
0000717d	jle	0x000071c1
0000717f	movl	0x10(%ebp),%eax
00007182	leal	0x01(%eax),%esi
00007185	xorl	%ebx,%ebx
00007187	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007190	movl	%ebx,0x04(%esp)
00007194	movl	%edi,(%esp)
00007197	calll	CChoreoChannel::GetEvent(int)
0000719c	testl	%eax,%eax
0000719e	je	0x000071b4
000071a0	movl	%eax,0x0c(%esp)
000071a4	movl	%esi,0x08(%esp)
000071a8	movl	0x0c(%ebp),%eax
000071ab	movl	%eax,0x04(%esp)
000071af	calll	CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*)
000071b4	movl	%edi,(%esp)
000071b7	incl	%ebx
000071b8	calll	CChoreoChannel::GetNumEvents()
000071bd	cmpl	%eax,%ebx
000071bf	jl	0x00007190
000071c1	movl	%edi,(%esp)
000071c4	calll	CChoreoChannel::GetActive() const
000071c9	testb	%al,%al
000071cb	movl	0xf0(%ebp),%esi
000071ce	movl	0x10(%ebp),%edi
000071d1	movl	0x0c(%ebp),%ebx
000071d4	jne	0x000071ef
000071d6	leal	0x6914a-0x711e(%esi),%eax
000071dc	movl	%eax,0x08(%esp)
000071e0	leal	0x01(%edi),%eax
000071e3	movl	%eax,0x04(%esp)
000071e7	movl	%ebx,(%esp)
000071ea	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
000071ef	leal	0x68b7d-0x711e(%esi),%eax
000071f5	movl	%eax,0x08(%esp)
000071f9	movl	%edi,0x04(%esp)
000071fd	movl	%ebx,(%esp)
00007200	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00007205	addl	$0x1c,%esp
00007208	popl	%esi
00007209	popl	%edi
0000720a	popl	%ebx
0000720b	popl	%ebp
0000720c	ret
0000720d	nopl	(%eax)
CChoreoScene::FindAdjustedStartTime():
00007210	pushl	%ebp
00007211	movl	%esp,%ebp
00007213	pushl	%ebx
00007214	pushl	%edi
00007215	pushl	%esi
00007216	subl	$0x1c,%esp
00007219	pxor	%xmm0,%xmm0
0000721d	movl	0x08(%ebp),%esi
00007220	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%esi)
00007224	jle	0x0000727b
00007226	xorl	%edi,%edi
00007228	pxor	%xmm0,%xmm0
0000722c	movss	%xmm0,0xe8(%ebp)
00007231	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007240	movl	0x04(%esi),%eax
00007243	movl	(%eax,%edi,4),%ebx
00007246	movl	%ebx,(%esp)
00007249	calll	CChoreoEvent::GetStartTime()
0000724e	movl	%ebx,(%esp)
00007251	fstps	0xf0(%ebp)
00007254	calll	CChoreoEvent::GetType()
00007259	movss	0xf0(%ebp),%xmm0
0000725e	cmpl	$0x05,%eax
00007261	jne	0x0000726b
00007263	subss	0x00000094(%esi),%xmm0
0000726b	minss	0xe8(%ebp),%xmm0
00007270	incl	%edi
00007271	cmpl	0x10(%esi),%edi
00007274	movss	%xmm0,0xe8(%ebp)
00007279	jl	0x00007240
0000727b	movss	%xmm0,0xec(%ebp)
00007280	flds	0xec(%ebp)
00007283	addl	$0x1c,%esp
00007286	popl	%esi
00007287	popl	%edi
00007288	popl	%ebx
00007289	popl	%ebp
0000728a	ret
0000728b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FindAdjustedEndTime():
00007290	pushl	%ebp
00007291	movl	%esp,%ebp
00007293	pushl	%ebx
00007294	pushl	%edi
00007295	pushl	%esi
00007296	subl	$0x1c,%esp
00007299	pxor	%xmm0,%xmm0
0000729d	movl	0x08(%ebp),%esi
000072a0	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%esi)
000072a4	jle	0x0000732a
000072aa	xorl	%edi,%edi
000072ac	pxor	%xmm0,%xmm0
000072b0	movss	%xmm0,0xe0(%ebp)
000072b5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000072c0	movl	0x04(%esi),%eax
000072c3	movl	(%eax,%edi,4),%ebx
000072c6	movl	%ebx,(%esp)
000072c9	calll	CChoreoEvent::GetStartTime()
000072ce	movl	%ebx,(%esp)
000072d1	fstps	0xf0(%ebp)
000072d4	calll	CChoreoEvent::HasEndTime()
000072d9	testb	%al,%al
000072db	jne	0x000072e4
000072dd	movss	0xf0(%ebp),%xmm0
000072e2	jmp	0x000072f4
000072e4	movl	%ebx,(%esp)
000072e7	calll	CChoreoEvent::GetEndTime()
000072ec	fstps	0xec(%ebp)
000072ef	movss	0xec(%ebp),%xmm0
000072f4	movss	%xmm0,0xe4(%ebp)
000072f9	movl	%ebx,(%esp)
000072fc	calll	CChoreoEvent::GetType()
00007301	cmpl	$0x05,%eax
00007304	je	0x0000730d
00007306	movss	0xe4(%ebp),%xmm0
0000730b	jmp	0x0000731a
0000730d	movss	0xe4(%ebp),%xmm0
00007312	addss	0x00000094(%esi),%xmm0
0000731a	maxss	0xe0(%ebp),%xmm0
0000731f	incl	%edi
00007320	cmpl	0x10(%esi),%edi
00007323	movss	%xmm0,0xe0(%ebp)
00007328	jl	0x000072c0
0000732a	movss	%xmm0,0xe8(%ebp)
0000732f	flds	0xe8(%ebp)
00007332	addl	$0x1c,%esp
00007335	popl	%esi
00007336	popl	%edi
00007337	popl	%ebx
00007338	popl	%ebp
00007339	ret
0000733a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ResetSimulation(bool, float, float):
00007340	pushl	%ebp
00007341	movl	%esp,%ebp
00007343	pushl	%ebx
00007344	pushl	%edi
00007345	pushl	%esi
00007346	subl	$0x2c,%esp
00007349	movl	0x08(%ebp),%ebx
0000734c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%ebx)
00007353	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x4c(%ebx)
0000735a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x74(%ebx)
00007361	pxor	%xmm0,%xmm0
00007365	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%ebx)
00007369	jle	0x000074cb
0000736f	leal	0x68(%ebx),%eax
00007372	movl	%eax,0xe4(%ebp)
00007375	leal	0x40(%ebx),%eax
00007378	movl	%eax,0xe0(%ebp)
0000737b	xorl	%ecx,%ecx
0000737d	nopl	(%eax)
00007380	movl	%ecx,0xdc(%ebp)
00007383	movl	0x04(%ebx),%eax
00007386	movl	(%eax,%ecx,4),%esi
00007389	movl	%esi,(%esp)
0000738c	calll	CChoreoEvent::ResetProcessing()
00007391	movl	%esi,(%esp)
00007394	calll	CChoreoEvent::GetType()
00007399	cmpl	$0x01,%eax
0000739c	jne	0x000073fb
0000739e	movl	%esi,0xe8(%ebp)
000073a1	movl	0x6c(%ebx),%eax
000073a4	movl	0x74(%ebx),%esi
000073a7	movl	%ebx,%edi
000073a9	leal	0x01(%esi),%ebx
000073ac	cmpl	%eax,%ebx
000073ae	movl	%esi,%ecx
000073b0	jle	0x000073c8
000073b2	movl	%ebx,%ecx
000073b4	subl	%eax,%ecx
000073b6	movl	%ecx,0x04(%esp)
000073ba	movl	0xe4(%ebp),%eax
000073bd	movl	%eax,(%esp)
000073c0	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
000073c5	movl	0x74(%edi),%ecx
000073c8	incl	%ecx
000073c9	movl	%ecx,0x74(%edi)
000073cc	movl	0x68(%edi),%eax
000073cf	movl	%eax,0x78(%edi)
000073d2	subl	%esi,%ecx
000073d4	decl	%ecx
000073d5	testl	%ecx,%ecx
000073d7	jle	0x0000745e
000073dd	shll	$0x02,%ecx
000073e0	movl	%ecx,0x08(%esp)
000073e4	leal	(%eax,%esi,4),%ecx
000073e7	movl	%ecx,0x04(%esp)
000073eb	leal	(%eax,%ebx,4),%eax
000073ee	movl	%eax,(%esp)
000073f1	calll	_memmove
000073f6	movl	0xe4(%ebp),%eax
000073f9	jmp	0x0000745c
000073fb	movl	%esi,(%esp)
000073fe	movl	%esi,0xe8(%ebp)
00007401	calll	CChoreoEvent::IsResumeCondition()
00007406	cmpb	$0x01,%al
00007408	jne	0x0000746d
0000740a	movl	0x44(%ebx),%eax
0000740d	movl	0x4c(%ebx),%esi
00007410	leal	0x01(%esi),%edi
00007413	cmpl	%eax,%edi
00007415	movl	%esi,%ecx
00007417	jle	0x0000742f
00007419	movl	%edi,%ecx
0000741b	subl	%eax,%ecx
0000741d	movl	%ecx,0x04(%esp)
00007421	movl	0xe0(%ebp),%eax
00007424	movl	%eax,(%esp)
00007427	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
0000742c	movl	0x4c(%ebx),%ecx
0000742f	incl	%ecx
00007430	movl	%ecx,0x4c(%ebx)
00007433	movl	0x40(%ebx),%eax
00007436	movl	%eax,0x50(%ebx)
00007439	subl	%esi,%ecx
0000743b	decl	%ecx
0000743c	testl	%ecx,%ecx
0000743e	jle	0x0000745e
00007440	shll	$0x02,%ecx
00007443	movl	%ecx,0x08(%esp)
00007447	leal	(%eax,%esi,4),%ecx
0000744a	movl	%ecx,0x04(%esp)
0000744e	leal	(%eax,%edi,4),%eax
00007451	movl	%eax,(%esp)
00007454	calll	_memmove
00007459	movl	0xe0(%ebp),%eax
0000745c	movl	(%eax),%eax
0000745e	shll	$0x02,%esi
00007461	addl	%eax,%esi
00007463	movl	0x08(%ebp),%ebx
00007466	je	0x0000746d
00007468	movl	0xe8(%ebp),%eax
0000746b	movl	%eax,(%esi)
0000746d	movl	0x10(%ebx),%eax
00007470	movl	0xdc(%ebp),%ecx
00007473	incl	%ecx
00007474	cmpl	%eax,%ecx
00007476	jl	0x00007380
0000747c	pxor	%xmm0,%xmm0
00007480	testl	%eax,%eax
00007482	jle	0x000074cb
00007484	xorl	%esi,%esi
00007486	pxor	%xmm0,%xmm0
0000748a	movss	%xmm0,0xe8(%ebp)
0000748f	nop
00007490	movl	0x04(%ebx),%eax
00007493	movl	(%eax,%esi,4),%edi
00007496	movl	%edi,(%esp)
00007499	calll	CChoreoEvent::GetStartTime()
0000749e	movl	%edi,(%esp)
000074a1	fstps	0xf0(%ebp)
000074a4	calll	CChoreoEvent::GetType()
000074a9	movss	0xf0(%ebp),%xmm0
000074ae	cmpl	$0x05,%eax
000074b1	jne	0x000074bb
000074b3	subss	0x00000094(%ebx),%xmm0
000074bb	minss	0xe8(%ebp),%xmm0
000074c0	incl	%esi
000074c1	cmpl	0x10(%ebx),%esi
000074c4	movss	%xmm0,0xe8(%ebp)
000074c9	jl	0x00007490
000074cb	movl	%ebx,%esi
000074cd	movb	0x0c(%ebp),%bl
000074d0	movss	%xmm0,0x00000088(%esi)
000074d8	movl	%esi,(%esp)
000074db	calll	CChoreoScene::FindAdjustedEndTime()
000074e0	fstps	0xec(%ebp)
000074e3	movss	0xec(%ebp),%xmm0
000074e8	movss	%xmm0,0x0000008c(%esi)
000074f0	cmpb	$0x01,%bl
000074f3	movl	%esi,%ecx
000074f5	jne	0x000074ff
000074f7	movss	0x00000088(%ecx),%xmm0
000074ff	movss	0x14(%ebp),%xmm1
00007504	movss	0x10(%ebp),%xmm2
00007509	movss	%xmm0,0x7c(%ecx)
0000750e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000098(%ecx)
00007518	movl	0x10(%ecx),%eax
0000751b	movl	%eax,0x00000090(%ecx)
00007521	movss	%xmm2,0x00000080(%ecx)
00007529	movss	%xmm1,0x00000084(%ecx)
00007531	addl	$0x2c,%esp
00007534	popl	%esi
00007535	popl	%edi
00007536	popl	%ebx
00007537	popl	%ebp
00007538	ret
00007539	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::CheckEventCompletion():
00007540	pushl	%ebp
00007541	movl	%esp,%ebp
00007543	pushl	%edi
00007544	pushl	%esi
00007545	subl	$0x10,%esp
00007548	movl	0x08(%ebp),%esi
0000754b	movl	0x60(%esi),%ecx
0000754e	movb	$0x01,%al
00007550	testl	%ecx,%ecx
00007552	jle	0x00007598
00007554	movb	$0x01,%dl
00007556	xorl	%edi,%edi
00007558	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007560	xorb	%al,%al
00007562	testb	$0x01,%dl
00007565	je	0x00007591
00007567	movl	0x54(%esi),%eax
0000756a	movl	(%eax,%edi,4),%eax
0000756d	movl	0x000000a0(%esi),%ecx
00007573	movss	0x7c(%esi),%xmm0
00007578	movss	%xmm0,0x0c(%esp)
0000757e	movl	%esi,0x08(%esp)
00007582	movl	%ecx,0x04(%esp)
00007586	movl	%eax,(%esp)
00007589	calll	CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float)
0000758e	movl	0x60(%esi),%ecx
00007591	incl	%edi
00007592	cmpl	%ecx,%edi
00007594	movb	%al,%dl
00007596	jl	0x00007560
00007598	movzbl	%al,%eax
0000759b	addl	$0x10,%esp
0000759e	popl	%esi
0000759f	popl	%edi
000075a0	popl	%ebp
000075a1	ret
000075a2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SimulationFinished():
000075b0	movl	0x04(%esp),%eax
000075b4	movss	0x7c(%eax),%xmm0
000075b9	ucomiss	0x0000008c(%eax),%xmm0
000075c0	jbe	0x000075d0
000075c2	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%eax)
000075c9	sete	%al
000075cc	movzbl	%al,%eax
000075cf	ret
000075d0	movss	0x00000088(%eax),%xmm1
000075d8	ucomiss	%xmm0,%xmm1
000075db	seta	%al
000075de	movzbl	%al,%eax
000075e1	ret
000075e2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FindPauseBetweenTimes(float, float):
000075f0	pushl	%ebp
000075f1	movl	%esp,%ebp
000075f3	pushl	%ebx
000075f4	pushl	%edi
000075f5	pushl	%esi
000075f6	subl	$0x0c,%esp
000075f9	xorl	%edi,%edi
000075fb	movl	0x08(%ebp),%ebx
000075fe	jmp	0x0000762b
00007600	movl	0x68(%ebx),%eax
00007603	movl	(%eax,%edi,4),%esi
00007606	testl	%esi,%esi
00007608	je	0x0000762a
0000760a	movl	%esi,(%esp)
0000760d	calll	CChoreoEvent::GetStartTime()
00007612	fstps	0xf0(%ebp)
00007615	movss	0xf0(%ebp),%xmm0
0000761a	ucomiss	0x10(%ebp),%xmm0
0000761e	ja	0x0000762a
00007620	movss	0x0c(%ebp),%xmm1
00007625	ucomiss	%xmm0,%xmm1
00007628	jbe	0x00007632
0000762a	incl	%edi
0000762b	cmpl	0x74(%ebx),%edi
0000762e	jl	0x00007600
00007630	xorl	%esi,%esi
00007632	movl	%esi,%eax
00007634	addl	$0x0c,%esp
00007637	popl	%esi
00007638	popl	%edi
00007639	popl	%ebx
0000763a	popl	%ebp
0000763b	ret
0000763c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::IsTimeInRange(float, float, float):
00007640	movl	$0x00000002,%eax
00007645	movss	0x08(%esp),%xmm0
0000764b	ucomiss	0x10(%esp),%xmm0
00007650	ja	0x00007661
00007652	movss	0x0c(%esp),%xmm1
00007658	ucomiss	%xmm0,%xmm1
0000765b	seta	%al
0000765e	movzbl	%al,%eax
00007661	ret
00007662	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&):
00007670	pushl	%ebp
00007671	movl	%esp,%ebp
00007673	pushl	%ebx
00007674	pushl	%edi
00007675	pushl	%esi
00007676	subl	$0x3c,%esp
00007679	movl	0x1c(%ebp),%eax
0000767c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
00007682	movl	0x0c(%ebp),%edi
00007685	movl	%edi,(%esp)
00007688	calll	CChoreoEvent::HasEndTime()
0000768d	movb	%al,%bl
0000768f	movb	%bl,0xcf(%ebp)
00007692	movl	%edi,(%esp)
00007695	calll	CChoreoEvent::GetStartTime()
0000769a	fstps	0xf0(%ebp)
0000769d	movb	0x18(%ebp),%bh
000076a0	movss	0x14(%ebp),%xmm0
000076a5	movss	%xmm0,0xd4(%ebp)
000076aa	movl	0x08(%ebp),%esi
000076ad	movss	0xf0(%ebp),%xmm0
000076b2	movss	%xmm0,0xdc(%ebp)
000076b7	testb	%bl,%bl
000076b9	je	0x000076cd
000076bb	movl	%edi,(%esp)
000076be	calll	CChoreoEvent::GetEndTime()
000076c3	fstps	0xe8(%ebp)
000076c6	movss	0xe8(%ebp),%xmm0
000076cb	jmp	0x000076dd
000076cd	movl	%edi,(%esp)
000076d0	calll	CChoreoEvent::GetStartTime()
000076d5	fstps	0xec(%ebp)
000076d8	movss	0xec(%ebp),%xmm0
000076dd	movss	%xmm0,0xc8(%ebp)
000076e2	movl	%edi,(%esp)
000076e5	testb	%bh,%bh
000076e7	movss	0x10(%ebp),%xmm1
000076ec	movaps	%xmm1,%xmm0
000076ef	jne	0x000076f6
000076f1	movss	0x14(%ebp),%xmm0
000076f6	movss	%xmm0,0xd0(%ebp)
000076fb	jne	0x00007702
000076fd	movss	%xmm1,0xd4(%ebp)
00007702	calll	CChoreoEvent::GetType()
00007707	cmpl	$0x0b,%eax
0000770a	je	0x000077d1
00007710	cmpl	$0x05,%eax
00007713	jne	0x00007773
00007715	cmpb	$0x01,%bh
00007718	jne	0x00007773
0000771a	movss	0x00000094(%esi),%xmm1
00007722	movss	0xdc(%ebp),%xmm0
00007727	subss	%xmm1,%xmm0
0000772b	movss	%xmm0,0xdc(%ebp)
00007730	addss	%xmm0,%xmm1
00007734	movss	%xmm1,0xd8(%ebp)
00007739	xorl	%edi,%edi
0000773b	jmp	0x0000776b
0000773d	nopl	(%eax)
00007740	movl	0x68(%esi),%eax
00007743	movl	(%eax,%edi,4),%ebx
00007746	testl	%ebx,%ebx
00007748	je	0x0000776a
0000774a	movl	%ebx,(%esp)
0000774d	calll	CChoreoEvent::GetStartTime()
00007752	fstps	0xe4(%ebp)
00007755	movss	0xe4(%ebp),%xmm0
0000775a	ucomiss	0xd8(%ebp),%xmm0
0000775e	ja	0x0000776a
00007760	movss	0xdc(%ebp),%xmm1
00007765	ucomiss	%xmm0,%xmm1
00007768	jbe	0x000077aa
0000776a	incl	%edi
0000776b	cmpl	0x74(%esi),%edi
0000776e	jl	0x00007740
00007770	movl	0x0c(%ebp),%edi
00007773	movl	%edi,(%esp)
00007776	calll	CChoreoEvent::IsProcessing() const
0000777b	xorb	%cl,%cl
0000777d	movss	0xd0(%ebp),%xmm1
00007782	ucomiss	0xc8(%ebp),%xmm1
00007786	movl	0x1c(%ebp),%esi
00007789	movss	0xdc(%ebp),%xmm0
0000778e	ja	0x00007796
00007790	ucomiss	%xmm1,%xmm0
00007793	setbe	%cl
00007796	cmpb	$0x01,%al
00007798	jne	0x00007801
0000779a	cmpb	$0x01,%cl
0000779d	jne	0x000077f7
0000779f	movl	$0x00000003,(%esi)
000077a5	jmp	0x0000782f
000077aa	movl	%ebx,(%esp)
000077ad	calll	CChoreoEvent::GetStartTime()
000077b2	fstps	0xe0(%ebp)
000077b5	movss	0xe0(%ebp),%xmm0
000077ba	ucomiss	0xd0(%ebp),%xmm0
000077be	movl	0x0c(%ebp),%edi
000077c1	jb	0x00007773
000077c3	movl	%edi,0x04(%esp)
000077c7	movl	%ebx,(%esp)
000077ca	calll	CChoreoEvent::AddEventDependency(CChoreoEvent*)
000077cf	jmp	0x000077da
000077d1	testb	$0x04,0x0000020c(%esi)
000077d8	je	0x00007773
000077da	movl	%edi,(%esp)
000077dd	calll	CChoreoEvent::IsProcessing() const
000077e2	movb	%al,%cl
000077e4	xorl	%eax,%eax
000077e6	testb	%cl,%cl
000077e8	movl	0x1c(%ebp),%ecx
000077eb	je	0x00007834
000077ed	movl	$0x00000004,(%ecx)
000077f3	xorl	%eax,%eax
000077f5	jmp	0x00007834
000077f7	movl	$0x00000004,(%esi)
000077fd	xorl	%eax,%eax
000077ff	jmp	0x00007834
00007801	cmpb	$0x01,%cl
00007804	jne	0x00007816
00007806	movl	%edi,(%esp)
00007809	calll	CChoreoEvent::IsResumeCondition()
0000780e	movzbl	%al,%eax
00007811	incl	%eax
00007812	movl	%eax,(%esi)
00007814	jmp	0x0000782f
00007816	ucomiss	0xd4(%ebp),%xmm0
0000781a	seta	%cl
0000781d	xorl	%eax,%eax
0000781f	orb	0xcf(%ebp),%cl
00007822	jne	0x00007834
00007824	ucomiss	%xmm0,%xmm1
00007827	ja	0x00007834
00007829	movl	$0x00000001,(%esi)
0000782f	movl	$0x00000001,%eax
00007834	addl	$0x3c,%esp
00007837	popl	%esi
00007838	popl	%edi
00007839	popl	%ebx
0000783a	popl	%ebp
0000783b	ret
0000783c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::IsSubScene() const:
00007840	movl	0x04(%esp),%eax
00007844	movb	0x0000020c(%eax),%al
0000784a	andb	$0x04,%al
0000784c	shrb	$0x02,%al
0000784f	movzbl	%al,%eax
00007852	ret
00007853	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&):
00007860	pushl	%ebp
00007861	movl	%esp,%ebp
00007863	pushl	%ebx
00007864	pushl	%edi
00007865	pushl	%esi
00007866	subl	$0x3c,%esp
00007869	movl	0x0c(%ebp),%eax
0000786c	movl	0x04(%eax),%ebx
0000786f	movl	0x08(%ebp),%eax
00007872	movl	0x04(%eax),%esi
00007875	movl	%esi,(%esp)
00007878	calll	CChoreoEvent::GetStartTime()
0000787d	movl	%ebx,(%esp)
00007880	fstps	0xf0(%ebp)
00007883	calll	CChoreoEvent::GetStartTime()
00007888	fstps	0xec(%ebp)
0000788b	movb	$0x01,%al
0000788d	movss	0xec(%ebp),%xmm0
00007892	ucomiss	0xf0(%ebp),%xmm0
00007896	ja	0x000079cd
0000789c	movl	%esi,(%esp)
0000789f	calll	CChoreoEvent::GetStartTime()
000078a4	movl	%ebx,(%esp)
000078a7	fstps	0xe8(%ebp)
000078aa	calll	CChoreoEvent::GetStartTime()
000078af	fstps	0xe4(%ebp)
000078b2	xorb	%al,%al
000078b4	movss	0xe8(%ebp),%xmm0
000078b9	ucomiss	0xe4(%ebp),%xmm0
000078bd	ja	0x000079cd
000078c3	movl	%esi,(%esp)
000078c6	calll	CChoreoEvent::HasEndTime()
000078cb	cmpb	$0x01,%al
000078cd	jne	0x00007929
000078cf	movl	%ebx,(%esp)
000078d2	calll	CChoreoEvent::HasEndTime()
000078d7	cmpb	$0x01,%al
000078d9	jne	0x00007929
000078db	movl	%esi,(%esp)
000078de	calll	CChoreoEvent::GetEndTime()
000078e3	movl	%ebx,(%esp)
000078e6	fstps	0xe0(%ebp)
000078e9	calll	CChoreoEvent::GetEndTime()
000078ee	fstps	0xdc(%ebp)
000078f1	movb	$0x01,%al
000078f3	movss	0xe0(%ebp),%xmm0
000078f8	ucomiss	0xdc(%ebp),%xmm0
000078fc	ja	0x000079cd
00007902	movl	%esi,(%esp)
00007905	calll	CChoreoEvent::GetEndTime()
0000790a	movl	%ebx,(%esp)
0000790d	fstps	0xd8(%ebp)
00007910	calll	CChoreoEvent::GetEndTime()
00007915	fstps	0xd4(%ebp)
00007918	xorb	%al,%al
0000791a	movss	0xd4(%ebp),%xmm0
0000791f	ucomiss	0xd8(%ebp),%xmm0
00007923	ja	0x000079cd
00007929	movl	%esi,(%esp)
0000792c	calll	CChoreoEvent::GetActor()
00007931	movl	%eax,%edi
00007933	movl	%ebx,(%esp)
00007936	calll	CChoreoEvent::GetActor()
0000793b	testl	%eax,%eax
0000793d	je	0x00007947
0000793f	testl	%edi,%edi
00007941	je	0x00007947
00007943	cmpl	%eax,%edi
00007945	je	0x0000796d
00007947	movl	%esi,(%esp)
0000794a	calll	CChoreoEvent::GetName()
0000794f	movl	%eax,%esi
00007951	movl	%ebx,(%esp)
00007954	calll	CChoreoEvent::GetName()
00007959	movl	%eax,0x04(%esp)
0000795d	movl	%esi,(%esp)
00007960	calll	_strcmp
00007965	cmpl	$0xff,%eax
00007968	sete	%al
0000796b	jmp	0x000079cd
0000796d	movl	%eax,0xc8(%ebp)
00007970	movl	%esi,(%esp)
00007973	movl	%esi,0xcc(%ebp)
00007976	calll	CChoreoEvent::GetChannel()
0000797b	movl	%eax,%esi
0000797d	movl	%ebx,(%esp)
00007980	movl	%ebx,0xd0(%ebp)
00007983	calll	CChoreoEvent::GetChannel()
00007988	movl	%eax,%ebx
0000798a	testl	%ebx,%ebx
0000798c	je	0x00007996
0000798e	testl	%esi,%esi
00007990	je	0x00007996
00007992	cmpl	%ebx,%esi
00007994	je	0x000079ab
00007996	movl	0xcc(%ebp),%eax
00007999	movl	%eax,(%esp)
0000799c	calll	CChoreoEvent::GetName()
000079a1	movl	%eax,%esi
000079a3	movl	0xd0(%ebp),%eax
000079a6	movl	%eax,(%esp)
000079a9	jmp	0x00007954
000079ab	movl	%esi,0x04(%esp)
000079af	movl	%edi,(%esp)
000079b2	calll	CChoreoActor::FindChannelIndex(CChoreoChannel*)
000079b7	movl	%eax,%esi
000079b9	movl	%ebx,0x04(%esp)
000079bd	movl	0xc8(%ebp),%eax
000079c0	movl	%eax,(%esp)
000079c3	calll	CChoreoActor::FindChannelIndex(CChoreoChannel*)
000079c8	cmpl	%eax,%esi
000079ca	setl	%al
000079cd	movzbl	%al,%eax
000079d0	addl	$0x3c,%esp
000079d3	popl	%esi
000079d4	popl	%edi
000079d5	popl	%ebx
000079d6	popl	%ebp
000079d7	ret
000079d8	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ClearPauseEventDependencies():
000079e0	pushl	%ebp
000079e1	movl	%esp,%ebp
000079e3	pushl	%ebx
000079e4	pushl	%edi
000079e5	pushl	%esi
000079e6	subl	$0x0c,%esp
000079e9	movl	0x08(%ebp),%esi
000079ec	movl	0x74(%esi),%edi
000079ef	testl	%edi,%edi
000079f1	jle	0x00007a13
000079f3	xorl	%ebx,%ebx
000079f5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007a00	movl	0x68(%esi),%eax
00007a03	movl	(%eax,%ebx,4),%eax
00007a06	movl	%eax,(%esp)
00007a09	calll	CChoreoEvent::ClearEventDependencies()
00007a0e	incl	%ebx
00007a0f	cmpl	%ebx,%edi
00007a11	jne	0x00007a00
00007a13	addl	$0x0c,%esp
00007a16	popl	%esi
00007a17	popl	%edi
00007a18	popl	%ebx
00007a19	popl	%ebp
00007a1a	ret
00007a1b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::AddPauseEventDependency(CChoreoEvent*, CChoreoEvent*):
00007a20	pushl	%ebp
00007a21	movl	%esp,%ebp
00007a23	subl	$0x08,%esp
00007a26	movl	0x10(%ebp),%eax
00007a29	movl	%eax,0x04(%esp)
00007a2d	movl	0x0c(%ebp),%eax
00007a30	movl	%eax,(%esp)
00007a33	calll	CChoreoEvent::AddEventDependency(CChoreoEvent*)
00007a38	addl	$0x08,%esp
00007a3b	popl	%ebp
00007a3c	ret
00007a3d	nopl	(%eax)
CChoreoScene::Think(float):
00007a40	pushl	%ebp
00007a41	movl	%esp,%ebp
00007a43	pushl	%ebx
00007a44	pushl	%edi
00007a45	pushl	%esi
00007a46	subl	$0x5c,%esp
00007a49	calll	0x00007a4e
00007a4e	popl	%eax
00007a4f	movl	%eax,0xbc(%ebp)
00007a52	movl	0x08(%ebp),%edi
00007a55	movss	0x7c(%edi),%xmm0
00007a5a	movss	%xmm0,0xb8(%ebp)
00007a5f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%edi)
00007a69	movl	0x74(%edi),%ebx
00007a6c	testl	%ebx,%ebx
00007a6e	jle	0x00007a93
00007a70	xorl	%esi,%esi
00007a72	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007a80	movl	0x68(%edi),%eax
00007a83	movl	(%eax,%esi,4),%eax
00007a86	movl	%eax,(%esp)
00007a89	calll	CChoreoEvent::ClearEventDependencies()
00007a8e	incl	%esi
00007a8f	cmpl	%esi,%ebx
00007a91	jne	0x00007a80
00007a93	movss	0x0c(%ebp),%xmm0
00007a98	movl	0xbc(%ebp),%eax
00007a9b	leal	CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&)-0x7a4e(%eax),%eax
00007aa1	movl	%eax,0xd0(%ebp)
00007aa4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd4(%ebp)
00007aab	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
00007ab2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00007ab9	movl	$0xffffffff,0xe0(%ebp)
00007ac0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
00007ac7	movl	$0xffffffff,0xe8(%ebp)
00007ace	movl	$0xffffffff,0xec(%ebp)
00007ad5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf0(%ebp)
00007adc	movss	%xmm0,0x04(%esp)
00007ae2	movl	%edi,(%esp)
00007ae5	calll	CChoreoScene::LoopThink(float)
00007aea	fstp	%st(0)
00007aec	movss	0x7c(%edi),%xmm0
00007af1	movss	%xmm0,0xb4(%ebp)
00007af6	movss	0xb8(%ebp),%xmm1
00007afb	ucomiss	%xmm0,%xmm1
00007afe	setp	%al
00007b01	setne	%cl
00007b04	orb	%al,%cl
00007b06	jne	0x00007b0d
00007b08	movss	0x0c(%ebp),%xmm0
00007b0d	movss	%xmm0,0xbc(%ebp)
00007b12	subss	%xmm1,%xmm0
00007b16	movss	%xmm0,0xb8(%ebp)
00007b1b	xorl	%esi,%esi
00007b1d	nopl	(%eax)
00007b20	cmpl	0x10(%edi),%esi
00007b23	jge	0x00007bb3
00007b29	movl	0x04(%edi),%eax
00007b2c	movl	(%eax,%esi,4),%ebx
00007b2f	testl	%ebx,%ebx
00007b31	je	0x00007b97
00007b33	movss	0x7c(%edi),%xmm0
00007b38	leal	0xcc(%ebp),%eax
00007b3b	movl	%eax,0x14(%esp)
00007b3f	movss	0xb8(%ebp),%xmm1
00007b44	pxor	%xmm2,%xmm2
00007b48	ucomiss	%xmm2,%xmm1
00007b4b	setae	%al
00007b4e	movzbl	%al,%eax
00007b51	movl	%eax,0x10(%esp)
00007b55	movss	0xbc(%ebp),%xmm1
00007b5a	movss	%xmm1,0x0c(%esp)
00007b60	movss	%xmm0,0x08(%esp)
00007b66	movl	%ebx,0x04(%esp)
00007b6a	movl	%edi,(%esp)
00007b6d	calll	CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
00007b72	addl	%eax,0x00000090(%edi)
00007b78	movl	0xcc(%ebp),%eax
00007b7b	testl	%eax,%eax
00007b7d	je	0x00007b97
00007b7f	movl	%ebx,0xc4(%ebp)
00007b82	movl	%eax,0xc0(%ebp)
00007b85	leal	0xc0(%ebp),%eax
00007b88	movl	%eax,0x04(%esp)
00007b8c	leal	0xd0(%ebp),%eax
00007b8f	movl	%eax,(%esp)
00007b92	calll	CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Insert(CChoreoScene::ActiveList const&)
00007b97	incl	%esi
00007b98	jmp	0x00007b20
00007b9a	jmp	0x00007b9e
00007b9c	jmp	0x00007b9e
00007b9e	movl	%eax,%esi
00007ba0	leal	0xd0(%ebp),%eax
00007ba3	movl	%eax,(%esp)
00007ba6	calll	CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::~CUtlRBTree()
00007bab	movl	%esi,(%esp)
00007bae	calll	__Unwind_Resume
00007bb3	leal	0xd0(%ebp),%ebx
00007bb6	movl	%ebx,(%esp)
00007bb9	calll	CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FirstInorder() const
00007bbe	movl	%eax,%esi
00007bc0	cmpl	$0xff,%esi
00007bc3	je	0x00007beb
00007bc5	imull	$0x18,%esi,%eax
00007bc8	movl	0xd4(%ebp),%ecx
00007bcb	leal	0x10(%ecx,%eax),%eax
00007bcf	movl	%eax,0x04(%esp)
00007bd3	movl	%edi,(%esp)
00007bd6	calll	CChoreoScene::ProcessActiveListEntry(CChoreoScene::ActiveList*)
00007bdb	movl	%esi,0x04(%esp)
00007bdf	movl	%ebx,(%esp)
00007be2	calll	CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NextInorder(int) const
00007be7	movl	%eax,%esi
00007be9	jmp	0x00007bc0
00007beb	movss	0x7c(%edi),%xmm0
00007bf0	movss	0xb4(%ebp),%xmm1
00007bf5	ucomiss	%xmm0,%xmm1
00007bf8	jne	0x00007c06
00007bfa	jp	0x00007c06
00007bfc	movss	0xbc(%ebp),%xmm0
00007c01	movss	%xmm0,0x7c(%edi)
00007c06	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%edi)
00007c0d	je	0x00007c17
00007c0f	movss	%xmm0,0x00000098(%edi)
00007c17	movl	%ebx,(%esp)
00007c1a	calll	CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::~CUtlRBTree()
00007c1f	addl	$0x5c,%esp
00007c22	popl	%esi
00007c23	popl	%edi
00007c24	popl	%ebx
00007c25	popl	%ebp
00007c26	ret
00007c27	calll	std::terminate()
00007c2c	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::LoopThink(float):
00007c30	pushl	%ebp
00007c31	movl	%esp,%ebp
00007c33	pushl	%ebx
00007c34	pushl	%edi
00007c35	pushl	%esi
00007c36	subl	$0x3c,%esp
00007c39	movl	0x08(%ebp),%esi
00007c3c	movss	0x0c(%ebp),%xmm0
00007c41	subss	0x7c(%esi),%xmm0
00007c46	movss	%xmm0,0xdc(%ebp)
00007c4b	xorl	%edi,%edi
00007c4d	jmp	0x00007cb4
00007c4f	nop
00007c50	movl	0x04(%esi),%eax
00007c53	movl	(%eax,%edi,4),%ebx
00007c56	testl	%ebx,%ebx
00007c58	je	0x00007cb3
00007c5a	movl	%ebx,(%esp)
00007c5d	calll	CChoreoEvent::GetType()
00007c62	cmpl	$0x0c,%eax
00007c65	jne	0x00007cb3
00007c67	movss	0x7c(%esi),%xmm0
00007c6c	leal	0xf0(%ebp),%eax
00007c6f	movl	%eax,0x14(%esp)
00007c73	pxor	%xmm1,%xmm1
00007c77	movss	0xdc(%ebp),%xmm2
00007c7c	ucomiss	%xmm1,%xmm2
00007c7f	setae	%al
00007c82	movzbl	%al,%eax
00007c85	movl	%eax,0x10(%esp)
00007c89	movss	0x0c(%ebp),%xmm1
00007c8e	movss	%xmm1,0x0c(%esp)
00007c94	movss	%xmm0,0x08(%esp)
00007c9a	movl	%ebx,0x04(%esp)
00007c9e	movl	%esi,(%esp)
00007ca1	calll	CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
00007ca6	addl	%eax,0x00000090(%esi)
00007cac	movl	0xf0(%ebp),%eax
00007caf	testl	%eax,%eax
00007cb1	jne	0x00007cbf
00007cb3	incl	%edi
00007cb4	cmpl	0x10(%esi),%edi
00007cb7	jl	0x00007c50
00007cb9	pxor	%xmm0,%xmm0
00007cbd	jmp	0x00007ce4
00007cbf	movl	%ebx,0xec(%ebp)
00007cc2	movl	%eax,0xe8(%ebp)
00007cc5	movl	%ebx,(%esp)
00007cc8	calll	CChoreoEvent::GetStartTime()
00007ccd	leal	0xe8(%ebp),%eax
00007cd0	movl	%eax,0x04(%esp)
00007cd4	movl	%esi,(%esp)
00007cd7	fstps	0xe4(%ebp)
00007cda	calll	CChoreoScene::ProcessActiveListEntry(CChoreoScene::ActiveList*)
00007cdf	movss	0xe4(%ebp),%xmm0
00007ce4	movss	%xmm0,0xe0(%ebp)
00007ce9	flds	0xe0(%ebp)
00007cec	addl	$0x3c,%esp
00007cef	popl	%esi
00007cf0	popl	%edi
00007cf1	popl	%ebx
00007cf2	popl	%ebp
00007cf3	ret
00007cf4	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ProcessActiveListEntry(CChoreoScene::ActiveList*):
00007d00	pushl	%ebp
00007d01	movl	%esp,%ebp
00007d03	pushl	%ebx
00007d04	pushl	%edi
00007d05	pushl	%esi
00007d06	subl	$0x1c,%esp
00007d09	movl	0x0c(%ebp),%edi
00007d0c	movl	(%edi),%eax
00007d0e	movl	0x08(%ebp),%esi
00007d11	cmpl	$0x04,%eax
00007d14	je	0x00007e25
00007d1a	cmpl	$0x03,%eax
00007d1d	je	0x00007dff
00007d23	decl	%eax
00007d24	cmpl	$0x01,%eax
00007d27	ja	0x00007e49
00007d2d	movl	0x04(%edi),%eax
00007d30	movl	0x000000a0(%esi),%ecx
00007d36	movss	0x7c(%esi),%xmm0
00007d3b	movss	%xmm0,0x0c(%esp)
00007d41	movl	%esi,0x08(%esp)
00007d45	movl	%ecx,0x04(%esp)
00007d49	movl	%eax,(%esp)
00007d4c	calll	CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
00007d51	cmpl	$0x02,(%edi)
00007d54	jne	0x00007dc6
00007d56	movl	0x58(%esi),%eax
00007d59	movl	0x60(%esi),%ebx
00007d5c	leal	0x54(%esi),%edi
00007d5f	leal	0x01(%ebx),%edx
00007d62	cmpl	%eax,%edx
00007d64	movl	%ebx,%ecx
00007d66	jle	0x00007d85
00007d68	movl	%edx,%ecx
00007d6a	subl	%eax,%ecx
00007d6c	movl	%ecx,0x04(%esp)
00007d70	movl	%edi,(%esp)
00007d73	movl	%edi,0xf0(%ebp)
00007d76	movl	%edx,%edi
00007d78	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
00007d7d	movl	%edi,%edx
00007d7f	movl	0xf0(%ebp),%edi
00007d82	movl	0x60(%esi),%ecx
00007d85	movl	%edi,0xf0(%ebp)
00007d88	incl	%ecx
00007d89	movl	%ecx,0x60(%esi)
00007d8c	movl	0x54(%esi),%eax
00007d8f	movl	%eax,0x64(%esi)
00007d92	subl	%ebx,%ecx
00007d94	decl	%ecx
00007d95	testl	%ecx,%ecx
00007d97	jle	0x00007db7
00007d99	shll	$0x02,%ecx
00007d9c	movl	%ecx,0x08(%esp)
00007da0	leal	(%eax,%ebx,4),%ecx
00007da3	movl	%ecx,0x04(%esp)
00007da7	leal	(%eax,%edx,4),%eax
00007daa	movl	%eax,(%esp)
00007dad	calll	_memmove
00007db2	movl	0xf0(%ebp),%eax
00007db5	movl	(%eax),%eax
00007db7	movl	0x0c(%ebp),%edi
00007dba	shll	$0x02,%ebx
00007dbd	addl	%eax,%ebx
00007dbf	je	0x00007dc6
00007dc1	movl	0x04(%edi),%eax
00007dc4	movl	%eax,(%ebx)
00007dc6	movl	0x04(%edi),%eax
00007dc9	movl	%eax,(%esp)
00007dcc	calll	CChoreoEvent::GetType()
00007dd1	cmpl	$0x01,%eax
00007dd4	jne	0x00007e49
00007dd6	movl	0x74(%esi),%ecx
00007dd9	xorl	%eax,%eax
00007ddb	jmp	0x00007de1
00007ddd	nopl	(%eax)
00007de0	incl	%eax
00007de1	movl	$0xffffffff,%edx
00007de6	cmpl	%ecx,%eax
00007de8	jge	0x00007df7
00007dea	movl	0x68(%esi),%edx
00007ded	movl	(%edx,%eax,4),%edx
00007df0	cmpl	0x04(%edi),%edx
00007df3	jne	0x00007de0
00007df5	movl	%eax,%edx
00007df7	movl	%edx,0x00000210(%esi)
00007dfd	jmp	0x00007e49
00007dff	movl	0x04(%edi),%eax
00007e02	movl	0x000000a0(%esi),%ecx
00007e08	movss	0x7c(%esi),%xmm0
00007e0d	movss	%xmm0,0x0c(%esp)
00007e13	movl	%esi,0x08(%esp)
00007e17	movl	%ecx,0x04(%esp)
00007e1b	movl	%eax,(%esp)
00007e1e	calll	CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float)
00007e23	jmp	0x00007e49
00007e25	movl	0x04(%edi),%eax
00007e28	movl	0x000000a0(%esi),%ecx
00007e2e	movss	0x7c(%esi),%xmm0
00007e33	movss	%xmm0,0x0c(%esp)
00007e39	movl	%esi,0x08(%esp)
00007e3d	movl	%ecx,0x04(%esp)
00007e41	movl	%eax,(%esp)
00007e44	calll	CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float)
00007e49	addl	$0x1c,%esp
00007e4c	popl	%esi
00007e4d	popl	%edi
00007e4e	popl	%ebx
00007e4f	popl	%ebp
00007e50	ret
00007e51	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetTime():
00007e60	movl	0x04(%esp),%eax
00007e64	flds	0x7c(%eax)
00007e67	ret
00007e68	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetTime(float):
00007e70	movss	0x08(%esp),%xmm0
00007e76	movl	0x04(%esp),%eax
00007e7a	movss	%xmm0,0x7c(%eax)
00007e7f	ret
CChoreoScene::LoopToTime(float):
00007e80	movss	0x08(%esp),%xmm0
00007e86	movl	0x04(%esp),%eax
00007e8a	movss	%xmm0,0x7c(%eax)
00007e8f	ret
CChoreoScene::RemoveActor(CChoreoActor*):
00007e90	pushl	%ebp
00007e91	movl	%esp,%ebp
00007e93	pushl	%ebx
00007e94	pushl	%edi
00007e95	pushl	%esi
00007e96	subl	$0x0c,%esp
00007e99	movl	0x08(%ebp),%esi
00007e9c	movl	0x24(%esi),%eax
00007e9f	xorl	%edx,%edx
00007ea1	movl	$0xfffffffc,%ecx
00007ea6	movl	0x0c(%ebp),%ebx
00007ea9	jmp	0x00007eb4
00007eab	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007eb0	addl	$0xfc,%ecx
00007eb3	incl	%edx
00007eb4	cmpl	%eax,%edx
00007eb6	jge	0x00007eed
00007eb8	movl	0x18(%esi),%edi
00007ebb	cmpl	%ebx,(%edi,%edx,4)
00007ebe	jne	0x00007eb0
00007ec0	cmpl	$0xff,%edx
00007ec3	je	0x00007eed
00007ec5	leal	0xff(%eax),%ebx
00007ec8	subl	%edx,%ebx
00007eca	testl	%ebx,%ebx
00007ecc	jle	0x00007ee9
00007ece	subl	%ecx,%edi
00007ed0	movl	%edi,0x04(%esp)
00007ed4	leal	(%ecx,%eax,4),%eax
00007ed7	movl	%eax,0x08(%esp)
00007edb	addl	$0xfc,%edi
00007ede	movl	%edi,(%esp)
00007ee1	calll	_memmove
00007ee6	movl	0x24(%esi),%eax
00007ee9	decl	%eax
00007eea	movl	%eax,0x24(%esi)
00007eed	addl	$0x0c,%esp
00007ef0	popl	%esi
00007ef1	popl	%edi
00007ef2	popl	%ebx
00007ef3	popl	%ebp
00007ef4	ret
00007ef5	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FindActorIndex(CChoreoActor*):
00007f00	pushl	%edi
00007f01	pushl	%esi
00007f02	movl	0x0c(%esp),%ecx
00007f06	movl	0x24(%ecx),%esi
00007f09	xorl	%edx,%edx
00007f0b	movl	0x10(%esp),%edi
00007f0f	jmp	0x00007f21
00007f11	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007f20	incl	%edx
00007f21	movl	$0xffffffff,%eax
00007f26	cmpl	%esi,%edx
00007f28	jge	0x00007f34
00007f2a	movl	0x18(%ecx),%eax
00007f2d	cmpl	%edi,(%eax,%edx,4)
00007f30	jne	0x00007f20
00007f32	movl	%edx,%eax
00007f34	popl	%esi
00007f35	popl	%edi
00007f36	ret
00007f37	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SwapActors(int, int):
00007f40	pushl	%ebx
00007f41	pushl	%edi
00007f42	pushl	%esi
00007f43	movl	0x10(%esp),%eax
00007f47	movl	0x18(%eax),%edx
00007f4a	movl	0x14(%esp),%edi
00007f4e	movl	(%edx,%edi,4),%ecx
00007f51	movl	0x18(%esp),%esi
00007f55	movl	(%edx,%esi,4),%ebx
00007f58	movl	%ebx,(%edx,%edi,4)
00007f5b	movl	0x18(%eax),%eax
00007f5e	movl	%ecx,(%eax,%esi,4)
00007f61	popl	%esi
00007f62	popl	%edi
00007f63	popl	%ebx
00007f64	ret
00007f65	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::DeleteReferencedObjects(CChoreoActor*):
00007f70	pushl	%ebp
00007f71	movl	%esp,%ebp
00007f73	pushl	%ebx
00007f74	pushl	%edi
00007f75	pushl	%esi
00007f76	subl	$0x0c,%esp
00007f79	movl	0x0c(%ebp),%edi
00007f7c	movl	%edi,(%esp)
00007f7f	calll	CChoreoActor::GetNumChannels()
00007f84	testl	%eax,%eax
00007f86	jle	0x00007fc6
00007f88	xorl	%ebx,%ebx
00007f8a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00007f90	movl	%ebx,0x04(%esp)
00007f94	movl	%edi,(%esp)
00007f97	calll	CChoreoActor::GetChannel(int)
00007f9c	movl	%eax,%esi
00007f9e	movl	%esi,0x04(%esp)
00007fa2	movl	%edi,(%esp)
00007fa5	calll	CChoreoActor::RemoveChannel(CChoreoChannel*)
00007faa	movl	%esi,0x04(%esp)
00007fae	movl	0x08(%ebp),%eax
00007fb1	movl	%eax,(%esp)
00007fb4	calll	CChoreoScene::DeleteReferencedObjects(CChoreoChannel*)
00007fb9	movl	%edi,(%esp)
00007fbc	incl	%ebx
00007fbd	calll	CChoreoActor::GetNumChannels()
00007fc2	cmpl	%eax,%ebx
00007fc4	jl	0x00007f90
00007fc6	addl	$0x0c,%esp
00007fc9	popl	%esi
00007fca	popl	%edi
00007fcb	popl	%ebx
00007fcc	popl	%ebp
00007fcd	jmp	CChoreoScene::DestroyActor(CChoreoActor*)
00007fd2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::DeleteReferencedObjects(CChoreoChannel*):
00007fe0	pushl	%ebp
00007fe1	movl	%esp,%ebp
00007fe3	pushl	%ebx
00007fe4	pushl	%edi
00007fe5	pushl	%esi
00007fe6	subl	$0x1c,%esp
00007fe9	movl	0x0c(%ebp),%edi
00007fec	movl	%edi,(%esp)
00007fef	calll	CChoreoChannel::GetNumEvents()
00007ff4	testl	%eax,%eax
00007ff6	jle	0x000080b5
00007ffc	movl	0x08(%ebp),%esi
00007fff	xorl	%ebx,%ebx
00008001	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008010	movl	%ebx,0xec(%ebp)
00008013	movl	%ebx,0x04(%esp)
00008017	movl	%edi,(%esp)
0000801a	calll	CChoreoChannel::GetEvent(int)
0000801f	movl	%eax,0xf0(%ebp)
00008022	movl	%eax,0x04(%esp)
00008026	movl	%edi,(%esp)
00008029	calll	CChoreoChannel::RemoveEvent(CChoreoEvent*)
0000802e	movl	0x74(%esi),%esi
00008031	movl	$0xfffffffc,%ecx
00008036	xorl	%edx,%edx
00008038	jmp	0x00008046
0000803a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008040	addl	$0xfc,%ecx
00008043	incl	%edx
00008044	movl	%eax,%edi
00008046	cmpl	%esi,%edx
00008048	jge	0x0000808f
0000804a	movl	%edi,%eax
0000804c	movl	0x08(%ebp),%edi
0000804f	movl	0x68(%edi),%ebx
00008052	movl	0xf0(%ebp),%edi
00008055	cmpl	%edi,(%ebx,%edx,4)
00008058	jne	0x00008040
0000805a	cmpl	$0xff,%edx
0000805d	movl	%eax,%edi
0000805f	je	0x0000808f
00008061	leal	0xff(%esi),%edi
00008064	subl	%edx,%edi
00008066	testl	%edi,%edi
00008068	movl	0x08(%ebp),%edi
0000806b	jle	0x00008088
0000806d	subl	%ecx,%ebx
0000806f	movl	%ebx,0x04(%esp)
00008073	leal	(%ecx,%esi,4),%eax
00008076	movl	%eax,0x08(%esp)
0000807a	addl	$0xfc,%ebx
0000807d	movl	%ebx,(%esp)
00008080	calll	_memmove
00008085	movl	0x74(%edi),%esi
00008088	decl	%esi
00008089	movl	%esi,0x74(%edi)
0000808c	movl	0x0c(%ebp),%edi
0000808f	movl	0xf0(%ebp),%eax
00008092	movl	%eax,0x04(%esp)
00008096	movl	0x08(%ebp),%esi
00008099	movl	%esi,(%esp)
0000809c	calll	CChoreoScene::DestroyEvent(CChoreoEvent*)
000080a1	movl	%edi,(%esp)
000080a4	movl	0xec(%ebp),%ebx
000080a7	incl	%ebx
000080a8	calll	CChoreoChannel::GetNumEvents()
000080ad	cmpl	%eax,%ebx
000080af	jl	0x00008010
000080b5	addl	$0x1c,%esp
000080b8	popl	%esi
000080b9	popl	%edi
000080ba	popl	%ebx
000080bb	popl	%ebp
000080bc	jmp	CChoreoScene::DestroyChannel(CChoreoChannel*)
000080c1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::DestroyActor(CChoreoActor*):
000080d0	pushl	%ebp
000080d1	movl	%esp,%ebp
000080d3	pushl	%ebx
000080d4	pushl	%edi
000080d5	pushl	%esi
000080d6	subl	$0x1c,%esp
000080d9	movl	0x08(%ebp),%ecx
000080dc	movl	0x24(%ecx),%eax
000080df	movl	0x0c(%ebp),%esi
000080e2	testl	%eax,%eax
000080e4	jle	0x00008158
000080e6	leal	0xfffffffc(,%eax,4),%ebx
000080ed	movl	%eax,%edx
000080ef	negl	%edx
000080f1	movl	%edx,0xf0(%ebp)
000080f4	movl	%eax,%edi
000080f6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008100	movl	%eax,%edx
00008102	movl	%ecx,%eax
00008104	movl	0x18(%eax),%ecx
00008107	cmpl	%esi,(%ecx,%ebx)
0000810a	je	0x0000811d
0000810c	movl	%eax,%ecx
0000810e	movl	%edx,%eax
00008110	decl	%edi
00008111	incl	0xf0(%ebp)
00008114	addl	$0xfc,%ebx
00008117	testl	%edi,%edi
00008119	jg	0x00008100
0000811b	jmp	0x00008158
0000811d	movl	%edx,%esi
0000811f	movl	0xf0(%ebp),%edx
00008122	leal	(%esi,%edx),%edx
00008125	testl	%edx,%edx
00008127	movl	%esi,%eax
00008129	jle	0x0000814a
0000812b	shll	$0x02,%edx
0000812e	movl	%edx,0x08(%esp)
00008132	leal	0x04(%ecx,%ebx),%eax
00008136	movl	%eax,0x04(%esp)
0000813a	addl	%ebx,%ecx
0000813c	movl	%ecx,(%esp)
0000813f	calll	_memmove
00008144	movl	0x08(%ebp),%eax
00008147	movl	0x24(%eax),%eax
0000814a	decl	%eax
0000814b	movl	0x08(%ebp),%ecx
0000814e	movl	%eax,0x24(%ecx)
00008151	movl	0x0c(%ebp),%edx
00008154	movl	%edx,%esi
00008156	jmp	0x00008110
00008158	testl	%esi,%esi
0000815a	je	0x000081a7
0000815c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000010c(%esi)
00008166	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000108(%esi)
0000816d	js	0x0000819f
0000816f	movl	0x00000100(%esi),%eax
00008175	testl	%eax,%eax
00008177	je	0x0000819f
00008179	movl	%eax,(%esp)
0000817c	calll	_free
00008181	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000100(%esi)
0000818b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000104(%esi)
00008195	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000110(%esi)
0000819f	movl	%esi,(%esp)
000081a2	calll	operator delete(void*)
000081a7	addl	$0x1c,%esp
000081aa	popl	%esi
000081ab	popl	%edi
000081ac	popl	%ebx
000081ad	popl	%ebp
000081ae	ret
000081af	nop
CChoreoScene::DestroyChannel(CChoreoChannel*):
000081b0	pushl	%ebp
000081b1	movl	%esp,%ebp
000081b3	pushl	%ebx
000081b4	pushl	%edi
000081b5	pushl	%esi
000081b6	subl	$0x1c,%esp
000081b9	movl	0x08(%ebp),%ecx
000081bc	movl	0x38(%ecx),%eax
000081bf	movl	0x0c(%ebp),%esi
000081c2	testl	%eax,%eax
000081c4	jle	0x00008238
000081c6	leal	0xfffffffc(,%eax,4),%ebx
000081cd	movl	%eax,%edx
000081cf	negl	%edx
000081d1	movl	%edx,0xf0(%ebp)
000081d4	movl	%eax,%edi
000081d6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000081e0	movl	%eax,%edx
000081e2	movl	%ecx,%eax
000081e4	movl	0x2c(%eax),%ecx
000081e7	cmpl	%esi,(%ecx,%ebx)
000081ea	je	0x000081fd
000081ec	movl	%eax,%ecx
000081ee	movl	%edx,%eax
000081f0	decl	%edi
000081f1	incl	0xf0(%ebp)
000081f4	addl	$0xfc,%ebx
000081f7	testl	%edi,%edi
000081f9	jg	0x000081e0
000081fb	jmp	0x00008238
000081fd	movl	%edx,%esi
000081ff	movl	0xf0(%ebp),%edx
00008202	leal	(%esi,%edx),%edx
00008205	testl	%edx,%edx
00008207	movl	%esi,%eax
00008209	jle	0x0000822a
0000820b	shll	$0x02,%edx
0000820e	movl	%edx,0x08(%esp)
00008212	leal	0x04(%ecx,%ebx),%eax
00008216	movl	%eax,0x04(%esp)
0000821a	addl	%ebx,%ecx
0000821c	movl	%ecx,(%esp)
0000821f	calll	_memmove
00008224	movl	0x08(%ebp),%eax
00008227	movl	0x38(%eax),%eax
0000822a	decl	%eax
0000822b	movl	0x08(%ebp),%ecx
0000822e	movl	%eax,0x38(%ecx)
00008231	movl	0x0c(%ebp),%edx
00008234	movl	%edx,%esi
00008236	jmp	0x000081f0
00008238	testl	%esi,%esi
0000823a	je	0x00008287
0000823c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000090(%esi)
00008246	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0000008c(%esi)
0000824d	js	0x0000827f
0000824f	movl	0x00000084(%esi),%eax
00008255	testl	%eax,%eax
00008257	je	0x0000827f
00008259	movl	%eax,(%esp)
0000825c	calll	_free
00008261	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000084(%esi)
0000826b	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000088(%esi)
00008275	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x00000094(%esi)
0000827f	movl	%esi,(%esp)
00008282	calll	operator delete(void*)
00008287	addl	$0x1c,%esp
0000828a	popl	%esi
0000828b	popl	%edi
0000828c	popl	%ebx
0000828d	popl	%ebp
0000828e	ret
0000828f	nop
CChoreoScene::DestroyEvent(CChoreoEvent*):
00008290	pushl	%ebp
00008291	movl	%esp,%ebp
00008293	pushl	%ebx
00008294	pushl	%edi
00008295	pushl	%esi
00008296	subl	$0x1c,%esp
00008299	movl	0x08(%ebp),%ecx
0000829c	movl	0x10(%ecx),%eax
0000829f	testl	%eax,%eax
000082a1	jle	0x00008318
000082a3	leal	0xfffffffc(,%eax,4),%ebx
000082aa	movl	%eax,%edx
000082ac	negl	%edx
000082ae	movl	%edx,0xec(%ebp)
000082b1	movl	%eax,%esi
000082b3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000082c0	movl	%eax,0xf0(%ebp)
000082c3	movl	%ecx,%eax
000082c5	movl	0x04(%eax),%ecx
000082c8	movl	0x0c(%ebp),%edx
000082cb	cmpl	%edx,(%ecx,%ebx)
000082ce	je	0x000082e2
000082d0	movl	%eax,%ecx
000082d2	movl	0xf0(%ebp),%eax
000082d5	decl	%esi
000082d6	incl	0xec(%ebp)
000082d9	addl	$0xfc,%ebx
000082dc	testl	%esi,%esi
000082de	jg	0x000082c0
000082e0	jmp	0x00008318
000082e2	movl	0xf0(%ebp),%edi
000082e5	movl	0xec(%ebp),%edx
000082e8	leal	(%edi,%edx),%edx
000082eb	testl	%edx,%edx
000082ed	movl	%edi,%eax
000082ef	movl	0x08(%ebp),%edi
000082f2	jle	0x00008310
000082f4	shll	$0x02,%edx
000082f7	movl	%edx,0x08(%esp)
000082fb	leal	0x04(%ecx,%ebx),%eax
000082ff	movl	%eax,0x04(%esp)
00008303	addl	%ebx,%ecx
00008305	movl	%ecx,(%esp)
00008308	calll	_memmove
0000830d	movl	0x10(%edi),%eax
00008310	decl	%eax
00008311	movl	%eax,0x10(%edi)
00008314	movl	%edi,%ecx
00008316	jmp	0x000082d5
00008318	movl	0x0c(%ebp),%edi
0000831b	testl	%edi,%edi
0000831d	je	0x0000832f
0000831f	movl	%edi,(%esp)
00008322	calll	CChoreoEvent::~CChoreoEvent()
00008327	movl	%edi,(%esp)
0000832a	calll	operator delete(void*)
0000832f	addl	$0x1c,%esp
00008332	popl	%esi
00008333	popl	%edi
00008334	popl	%ebx
00008335	popl	%ebp
00008336	ret
00008337	movl	%eax,%esi
00008339	movl	%edi,(%esp)
0000833c	calll	operator delete(void*)
00008341	movl	%esi,(%esp)
00008344	calll	__Unwind_Resume
00008349	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::ResumeSimulation():
00008350	pushl	%ebp
00008351	movl	%esp,%ebp
00008353	pushl	%edi
00008354	pushl	%esi
00008355	subl	$0x40,%esp
00008358	movl	0x08(%ebp),%esi
0000835b	movl	0x00000210(%esi),%eax
00008361	testl	%eax,%eax
00008363	js	0x000084bb
00008369	cmpl	0x74(%esi),%eax
0000836c	jge	0x000084bb
00008372	xorps	%xmm0,%xmm0
00008375	movaps	%xmm0,0xd8(%ebp)
00008379	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
00008380	movl	0x68(%esi),%ecx
00008383	movl	(%ecx,%eax,4),%edi
00008386	movss	0x7c(%esi),%xmm0
0000838b	movss	%xmm0,0xd0(%ebp)
00008390	movl	%edi,(%esp)
00008393	calll	CChoreoEvent::GetStartTime()
00008398	fstps	0xd4(%ebp)
0000839b	movss	0xd4(%ebp),%xmm0
000083a0	movss	0xd0(%ebp),%xmm1
000083a5	subss	%xmm0,%xmm1
000083a9	cvtss2sd	%xmm1,%xmm0
000083ad	movsd	%xmm0,(%esp)
000083b2	calll	_fabs
000083b7	fstp	%st(0)
000083b9	leal	0xd8(%ebp),%eax
000083bc	movl	%eax,0x04(%esp)
000083c0	movl	%edi,(%esp)
000083c3	calll	CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&)
000083c8	xorl	%edi,%edi
000083ca	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000083d0	cmpl	0xe4(%ebp),%edi
000083d3	jge	0x00008468
000083d9	movl	0xd8(%ebp),%eax
000083dc	movl	(%eax,%edi,4),%eax
000083df	movl	0x000000a0(%esi),%ecx
000083e5	movss	0x7c(%esi),%xmm0
000083ea	movss	%xmm0,0x0c(%esp)
000083f0	movl	%esi,0x08(%esp)
000083f4	movl	%ecx,0x04(%esp)
000083f8	movl	%eax,(%esp)
000083fb	calll	CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
00008400	incl	%edi
00008401	jmp	0x000083d0
00008403	jmp	0x00008405
00008405	movl	%eax,%esi
00008407	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
0000840e	movl	0xd8(%ebp),%eax
00008411	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
00008415	jns	0x00008422
00008417	movl	%eax,0xe8(%ebp)
0000841a	movl	%esi,(%esp)
0000841d	calll	__Unwind_Resume
00008422	testl	%eax,%eax
00008424	jne	0x00008436
00008426	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
0000842d	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
00008434	jmp	0x00008459
00008436	movl	%eax,(%esp)
00008439	calll	_free
0000843e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
00008445	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
00008449	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00008450	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
00008457	js	0x0000841a
00008459	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00008460	movl	%esi,(%esp)
00008463	calll	__Unwind_Resume
00008468	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
0000846f	movl	0xd8(%ebp),%eax
00008472	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
00008476	jns	0x0000847d
00008478	movl	%eax,0xe8(%ebp)
0000847b	jmp	0x000084bb
0000847d	testl	%eax,%eax
0000847f	jne	0x00008491
00008481	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00008488	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
0000848f	jmp	0x000084b4
00008491	movl	%eax,(%esp)
00008494	calll	_free
00008499	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
000084a0	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
000084a4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000084ab	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
000084b2	js	0x000084bb
000084b4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000084bb	movl	$0xffffffff,0x00000210(%esi)
000084c5	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x60(%esi)
000084cc	addl	$0x40,%esp
000084cf	popl	%esi
000084d0	popl	%edi
000084d1	popl	%ebp
000084d2	ret
000084d3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetSoundFileStartupLatency(float):
000084e0	movss	0x08(%esp),%xmm0
000084e6	movl	0x04(%esp),%eax
000084ea	movss	%xmm0,0x00000094(%eax)
000084f2	ret
000084f3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetSceneTimes(float&, float&):
00008500	movl	0x04(%esp),%eax
00008504	movss	0x00000080(%eax),%xmm0
0000850c	movl	0x08(%esp),%ecx
00008510	movss	%xmm0,(%ecx)
00008514	movss	0x00000084(%eax),%xmm0
0000851c	movl	0x0c(%esp),%eax
00008520	movss	%xmm0,(%eax)
00008524	ret
00008525	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::FindTagByName(char const*, char const*):
00008530	pushl	%ebp
00008531	movl	%esp,%ebp
00008533	pushl	%ebx
00008534	pushl	%edi
00008535	pushl	%esi
00008536	subl	$0x1c,%esp
00008539	xorl	%ecx,%ecx
0000853b	jmp	0x000085dc
00008540	movl	%ebx,0x04(%esp)
00008544	movl	%esi,(%esp)
00008547	calll	CChoreoChannel::GetEvent(int)
0000854c	movl	%eax,%edi
0000854e	testl	%edi,%edi
00008550	je	0x0000858d
00008552	movl	%edi,(%esp)
00008555	calll	CChoreoEvent::GetType()
0000855a	cmpl	$0x05,%eax
0000855d	jne	0x0000858d
0000855f	movl	%edi,(%esp)
00008562	calll	CChoreoEvent::GetParameters()
00008567	movl	0x0c(%ebp),%ecx
0000856a	movl	%ecx,0x04(%esp)
0000856e	movl	%eax,(%esp)
00008571	calll	_strstr
00008576	testl	%eax,%eax
00008578	je	0x0000858d
0000857a	movl	0x10(%ebp),%eax
0000857d	movl	%eax,0x04(%esp)
00008581	movl	%edi,(%esp)
00008584	calll	CChoreoEvent::FindRelativeTag(char const*)
00008589	testl	%eax,%eax
0000858b	jne	0x000085e6
0000858d	incl	%ebx
0000858e	movl	%esi,(%esp)
00008591	calll	CChoreoChannel::GetNumEvents()
00008596	cmpl	%eax,%ebx
00008598	jl	0x00008540
0000859a	movl	0xf0(%ebp),%edi
0000859d	incl	%edi
0000859e	movl	0xec(%ebp),%esi
000085a1	movl	%esi,(%esp)
000085a4	calll	CChoreoActor::GetNumChannels()
000085a9	cmpl	%eax,%edi
000085ab	jge	0x000085d8
000085ad	movl	%edi,0x04(%esp)
000085b1	movl	%edi,0xf0(%ebp)
000085b4	movl	%esi,(%esp)
000085b7	calll	CChoreoActor::GetChannel(int)
000085bc	movl	%eax,%esi
000085be	testl	%esi,%esi
000085c0	je	0x0000859a
000085c2	xorl	%ebx,%ebx
000085c4	jmp	0x0000858e
000085c6	movl	0x18(%eax),%eax
000085c9	movl	(%eax,%ecx,4),%esi
000085cc	movl	%esi,0xec(%ebp)
000085cf	movl	%ecx,0xe8(%ebp)
000085d2	xorl	%edi,%edi
000085d4	testl	%esi,%esi
000085d6	jne	0x000085a1
000085d8	movl	0xe8(%ebp),%ecx
000085db	incl	%ecx
000085dc	movl	0x08(%ebp),%eax
000085df	cmpl	0x24(%eax),%ecx
000085e2	jl	0x000085c6
000085e4	xorl	%eax,%eax
000085e6	addl	$0x1c,%esp
000085e9	popl	%esi
000085ea	popl	%edi
000085eb	popl	%ebx
000085ec	popl	%ebp
000085ed	ret
000085ee	nop
CChoreoScene::FindTargetingEvent(char const*, char const*):
000085f0	pushl	%ebp
000085f1	movl	%esp,%ebp
000085f3	pushl	%ebx
000085f4	pushl	%edi
000085f5	pushl	%esi
000085f6	subl	$0x1c,%esp
000085f9	xorl	%ecx,%ecx
000085fb	jmp	0x000086a3
00008600	movl	%ebx,0x04(%esp)
00008604	movl	%esi,(%esp)
00008607	calll	CChoreoChannel::GetEvent(int)
0000860c	movl	%eax,%edi
0000860e	testl	%edi,%edi
00008610	je	0x00008654
00008612	movl	%edi,(%esp)
00008615	calll	CChoreoEvent::IsUsingRelativeTag()
0000861a	cmpb	$0x01,%al
0000861c	jne	0x00008654
0000861e	movl	%edi,(%esp)
00008621	calll	CChoreoEvent::GetRelativeWavName()
00008626	movl	%eax,0x04(%esp)
0000862a	movl	0x0c(%ebp),%eax
0000862d	movl	%eax,(%esp)
00008630	calll	_strcasecmp
00008635	testl	%eax,%eax
00008637	jne	0x00008654
00008639	movl	%edi,(%esp)
0000863c	calll	CChoreoEvent::GetRelativeTagName()
00008641	movl	%eax,0x04(%esp)
00008645	movl	0x10(%ebp),%eax
00008648	movl	%eax,(%esp)
0000864b	calll	_strcasecmp
00008650	testl	%eax,%eax
00008652	je	0x000086ad
00008654	incl	%ebx
00008655	movl	%esi,(%esp)
00008658	calll	CChoreoChannel::GetNumEvents()
0000865d	cmpl	%eax,%ebx
0000865f	jl	0x00008600
00008661	movl	0xf0(%ebp),%edi
00008664	incl	%edi
00008665	movl	0xec(%ebp),%esi
00008668	movl	%esi,(%esp)
0000866b	calll	CChoreoActor::GetNumChannels()
00008670	cmpl	%eax,%edi
00008672	jge	0x0000869f
00008674	movl	%edi,0x04(%esp)
00008678	movl	%edi,0xf0(%ebp)
0000867b	movl	%esi,(%esp)
0000867e	calll	CChoreoActor::GetChannel(int)
00008683	movl	%eax,%esi
00008685	testl	%esi,%esi
00008687	je	0x00008661
00008689	xorl	%ebx,%ebx
0000868b	jmp	0x00008655
0000868d	movl	0x18(%eax),%eax
00008690	movl	(%eax,%ecx,4),%esi
00008693	movl	%esi,0xec(%ebp)
00008696	movl	%ecx,0xe8(%ebp)
00008699	xorl	%edi,%edi
0000869b	testl	%esi,%esi
0000869d	jne	0x00008668
0000869f	movl	0xe8(%ebp),%ecx
000086a2	incl	%ecx
000086a3	movl	0x08(%ebp),%eax
000086a6	cmpl	0x24(%eax),%ecx
000086a9	jl	0x0000868d
000086ab	xorl	%edi,%edi
000086ad	movl	%edi,%eax
000086af	addl	$0x1c,%esp
000086b2	popl	%esi
000086b3	popl	%edi
000086b4	popl	%ebx
000086b5	popl	%ebp
000086b6	ret
000086b7	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::ExportEvents(char const*, CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&):
000086c0	pushl	%ebp
000086c1	movl	%esp,%ebp
000086c3	pushl	%ebx
000086c4	pushl	%edi
000086c5	pushl	%esi
000086c6	subl	$0x5c,%esp
000086c9	calll	0x000086ce
000086ce	popl	%esi
000086cf	movl	0x10(%ebp),%ebx
000086d2	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%ebx)
000086d6	jle	0x00008825
000086dc	leal	0xb8(%ebp),%edi
000086df	movl	%edi,(%esp)
000086e2	movl	$0x00000001,0x0c(%esp)
000086ea	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
000086f2	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000086fa	calll	CUtlBuffer::CUtlBuffer(int, int, int)
000086ff	movl	0x0c(%ebx),%eax
00008702	movl	%eax,0x0c(%esp)
00008706	leal	0x69194-0x86ce(%esi),%eax
0000870c	movl	%eax,0x08(%esp)
00008710	movl	%edi,(%esp)
00008713	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
0000871b	calll	CChoreoScene::FilePrintf(CUtlBuffer&, int, char const*, ...)
00008720	movl	%esi,0xb4(%ebp)
00008723	xorl	%edi,%edi
00008725	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008730	cmpl	0x0c(%ebx),%edi
00008733	jge	0x00008794
00008735	movl	(%ebx),%eax
00008737	movl	%ebx,%esi
00008739	movl	(%eax,%edi,4),%ebx
0000873c	movl	%ebx,(%esp)
0000873f	calll	CChoreoEvent::GetActor()
00008744	testl	%eax,%eax
00008746	je	0x00008760
00008748	movl	%ebx,0x0c(%esp)
0000874c	leal	0xb8(%ebp),%eax
0000874f	movl	%eax,0x04(%esp)
00008753	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
0000875b	calll	CChoreoScene::FileSaveEvent(CUtlBuffer&, int, CChoreoEvent*)
00008760	incl	%edi
00008761	movl	%esi,%ebx
00008763	jmp	0x00008730
00008765	jmp	0x00008767
00008767	movl	%eax,%esi
00008769	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
0000876d	js	0x0000878c
0000876f	movl	0xb8(%ebp),%eax
00008772	testl	%eax,%eax
00008774	je	0x00008785
00008776	movl	%eax,(%esp)
00008779	calll	_free
0000877e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
00008785	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
0000878c	movl	%esi,(%esp)
0000878f	calll	__Unwind_Resume
00008794	movl	0xb4(%ebp),%edx
00008797	movl	0x758ee-0x86ce(%edx),%edi
0000879d	movl	(%edi),%eax
0000879f	movl	0x04(%eax),%ecx
000087a2	movl	0x08(%ecx),%ecx
000087a5	leal	0x68e9f-0x86ce(%edx),%edx
000087ab	movl	%edx,0x08(%esp)
000087af	movl	0x0c(%ebp),%edx
000087b2	movl	%edx,0x04(%esp)
000087b6	addl	$0x04,%eax
000087b9	movl	%eax,(%esp)
000087bc	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
000087c4	call	*%ecx
000087c6	movl	%eax,%esi
000087c8	testl	%esi,%esi
000087ca	je	0x00008802
000087cc	movl	(%edi),%eax
000087ce	movl	0x04(%eax),%ecx
000087d1	movl	0x04(%ecx),%ecx
000087d4	movl	0xb8(%ebp),%edx
000087d7	movl	0xc8(%ebp),%ebx
000087da	movl	%esi,0x0c(%esp)
000087de	movl	%ebx,0x08(%esp)
000087e2	movl	%edx,0x04(%esp)
000087e6	addl	$0x04,%eax
000087e9	movl	%eax,(%esp)
000087ec	call	*%ecx
000087ee	movl	(%edi),%eax
000087f0	movl	0x04(%eax),%ecx
000087f3	movl	0x0c(%ecx),%ecx
000087f6	movl	%esi,0x04(%esp)
000087fa	addl	$0x04,%eax
000087fd	movl	%eax,(%esp)
00008800	call	*%ecx
00008802	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00008806	js	0x00008825
00008808	movl	0xb8(%ebp),%eax
0000880b	testl	%eax,%eax
0000880d	je	0x0000881e
0000880f	movl	%eax,(%esp)
00008812	calll	_free
00008817	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
0000881e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00008825	addl	$0x5c,%esp
00008828	popl	%esi
00008829	popl	%edi
0000882a	popl	%ebx
0000882b	popl	%ebp
0000882c	ret
0000882d	nopl	(%eax)
CChoreoScene::ImportEvents(ISceneTokenProcessor*, CChoreoActor*, CChoreoChannel*):
00008830	pushl	%ebp
00008831	movl	%esp,%ebp
00008833	pushl	%ebx
00008834	pushl	%edi
00008835	pushl	%esi
00008836	subl	$0x0c,%esp
00008839	calll	0x0000883e
0000883e	popl	%esi
0000883f	movl	0x0c(%ebp),%eax
00008842	movl	0x08(%ebp),%edi
00008845	movl	%eax,0x000000a4(%edi)
0000884b	movl	0x10(%ebp),%ebx
0000884e	jmp	0x00008869
00008850	movl	0x14(%ebp),%eax
00008853	movl	%eax,0x08(%esp)
00008857	movl	%ebx,0x04(%esp)
0000885b	movl	%edi,(%esp)
0000885e	calll	CChoreoScene::ParseEvent(CChoreoActor*, CChoreoChannel*)
00008863	movl	0x000000a4(%edi),%eax
00008869	movl	(%eax),%ecx
0000886b	movl	%eax,(%esp)
0000886e	movl	$0x00000001,0x04(%esp)
00008876	call	*0x04(%ecx)
00008879	cmpb	$0x01,%al
0000887b	jne	0x000088d5
0000887d	movl	0x000000a4(%edi),%ecx
00008883	movl	(%ecx),%eax
00008885	movl	%ecx,(%esp)
00008888	call	(%eax)
0000888a	cmpb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),(%eax)
0000888d	je	0x000088d5
0000888f	movl	0x000000a4(%edi),%ecx
00008895	movl	(%ecx),%eax
00008897	movl	%ecx,(%esp)
0000889a	call	(%eax)
0000889c	leal	0x68e14-0x883e(%esi),%ecx
000088a2	movl	%ecx,0x04(%esp)
000088a6	movl	%eax,(%esp)
000088a9	calll	V_stricmp(char const*, char const*)
000088ae	testl	%eax,%eax
000088b0	je	0x00008850
000088b2	movl	0x000000a4(%edi),%edi
000088b8	movl	(%edi),%eax
000088ba	movl	0x0c(%eax),%ebx
000088bd	movl	%edi,(%esp)
000088c0	call	(%eax)
000088c2	movl	%eax,0x08(%esp)
000088c6	leal	0x691c0-0x883e(%esi),%eax
000088cc	movl	%eax,0x04(%esp)
000088d0	movl	%edi,(%esp)
000088d3	call	*%ebx
000088d5	addl	$0x0c,%esp
000088d8	popl	%esi
000088d9	popl	%edi
000088da	popl	%ebx
000088db	popl	%ebp
000088dc	jmp	CChoreoScene::ReconcileTags()
000088e1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetSubScene(bool):
000088f0	movb	0x08(%esp),%al
000088f4	shlb	$0x02,%al
000088f7	movl	0x04(%esp),%ecx
000088fb	movb	0x0000020c(%ecx),%dl
00008901	andb	$0xfb,%dl
00008904	orb	%al,%dl
00008906	movb	%dl,0x0000020c(%ecx)
0000890c	ret
0000890d	nopl	(%eax)
CChoreoScene::GetSceneFPS() const:
00008910	movl	0x04(%esp),%eax
00008914	movl	0x00000128(%eax),%eax
0000891a	ret
0000891b	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetSceneFPS(int):
00008920	movl	0x08(%esp),%eax
00008924	movl	0x04(%esp),%ecx
00008928	movl	%eax,0x00000128(%ecx)
0000892e	ret
0000892f	nop
CChoreoScene::IsUsingFrameSnap() const:
00008930	movl	0x04(%esp),%eax
00008934	movb	0x0000020c(%eax),%al
0000893a	andb	$0x08,%al
0000893c	shrb	$0x03,%al
0000893f	movzbl	%al,%eax
00008942	ret
00008943	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetUsingFrameSnap(bool):
00008950	movb	0x08(%esp),%al
00008954	shlb	$0x03,%al
00008957	movl	0x04(%esp),%ecx
0000895b	movb	0x0000020c(%ecx),%dl
00008961	andb	$0xf7,%dl
00008964	orb	%al,%dl
00008966	movb	%dl,0x0000020c(%ecx)
0000896c	ret
0000896d	nopl	(%eax)
CChoreoScene::SnapTime(float):
00008970	pushl	%eax
00008971	movss	0x0c(%esp),%xmm0
00008977	movl	0x08(%esp),%ecx
0000897b	testb	$0x08,0x0000020c(%ecx)
00008982	je	0x000089aa
00008984	calll	0x00008989
00008989	popl	%eax
0000898a	cvtsi2ss	0x00000128(%ecx),%xmm1
00008992	mulss	%xmm1,%xmm0
00008996	addss	0x65608-0x8989(%eax),%xmm0
0000899e	cvttss2si	%xmm0,%eax
000089a2	cvtsi2ss	%eax,%xmm0
000089a6	divss	%xmm1,%xmm0
000089aa	movss	%xmm0,(%esp)
000089af	flds	(%esp)
000089b2	popl	%eax
000089b3	ret
000089b4	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::TimeZoomFirst():
000089c0	pushl	%ebp
000089c1	movl	%esp,%ebp
000089c3	subl	$0x08,%esp
000089c6	movl	$0x00000164,%eax
000089cb	addl	0x08(%ebp),%eax
000089ce	movl	%eax,(%esp)
000089d1	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FirstInorder() const
000089d6	addl	$0x08,%esp
000089d9	popl	%ebp
000089da	ret
000089db	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::TimeZoomNext(int):
000089e0	pushl	%ebp
000089e1	movl	%esp,%ebp
000089e3	subl	$0x08,%esp
000089e6	movl	0x0c(%ebp),%eax
000089e9	movl	%eax,0x04(%esp)
000089ed	movl	$0x00000164,%eax
000089f2	addl	0x08(%ebp),%eax
000089f5	movl	%eax,(%esp)
000089f8	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NextInorder(int) const
000089fd	addl	$0x08,%esp
00008a00	popl	%ebp
00008a01	ret
00008a02	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::TimeZoomInvalid() const:
00008a10	movl	$0xffffffff,%eax
00008a15	ret
00008a16	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::TimeZoomName(int):
00008a20	movl	0x04(%esp),%eax
00008a24	movl	0x00000168(%eax),%eax
00008a2a	imull	$0x18,0x08(%esp),%ecx
00008a2f	movl	0x10(%eax,%ecx),%eax
00008a33	ret
00008a34	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetTimeZoom(char const*):
00008a40	pushl	%ebp
00008a41	movl	%esp,%ebp
00008a43	pushl	%ebx
00008a44	pushl	%edi
00008a45	pushl	%esi
00008a46	subl	$0x1c,%esp
00008a49	movl	0x08(%ebp),%esi
00008a4c	leal	0x00000164(%esi),%edi
00008a52	movl	0x0c(%ebp),%ebx
00008a55	testl	%ebx,%ebx
00008a57	je	0x00008a70
00008a59	movl	%ebx,0xe0(%ebp)
00008a5c	leal	0xe0(%ebp),%eax
00008a5f	movl	%eax,0x04(%esp)
00008a63	movl	%edi,(%esp)
00008a66	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
00008a6b	cmpl	$0xff,%eax
00008a6e	jne	0x00008a91
00008a70	movl	%ebx,(%esp)
00008a73	calll	_strdup
00008a78	movl	%eax,0xe8(%ebp)
00008a7b	movl	$0x00000064,0xec(%ebp)
00008a82	leal	0xe8(%ebp),%eax
00008a85	movl	%eax,0x04(%esp)
00008a89	movl	%edi,(%esp)
00008a8c	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
00008a91	imull	$0x18,%eax,%eax
00008a94	movl	0x00000168(%esi),%ecx
00008a9a	movl	0x14(%ecx,%eax),%eax
00008a9e	addl	$0x1c,%esp
00008aa1	popl	%esi
00008aa2	popl	%edi
00008aa3	popl	%ebx
00008aa4	popl	%ebp
00008aa5	ret
00008aa6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetTimeZoom(char const*, int):
00008ab0	pushl	%ebp
00008ab1	movl	%esp,%ebp
00008ab3	pushl	%ebx
00008ab4	pushl	%edi
00008ab5	pushl	%esi
00008ab6	subl	$0x1c,%esp
00008ab9	movl	0x08(%ebp),%edi
00008abc	leal	0x00000164(%edi),%ebx
00008ac2	movl	0x0c(%ebp),%esi
00008ac5	testl	%esi,%esi
00008ac7	je	0x00008ae0
00008ac9	movl	%esi,0xe0(%ebp)
00008acc	leal	0xe0(%ebp),%eax
00008acf	movl	%eax,0x04(%esp)
00008ad3	movl	%ebx,(%esp)
00008ad6	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
00008adb	cmpl	$0xff,%eax
00008ade	jne	0x00008b01
00008ae0	movl	%esi,(%esp)
00008ae3	calll	_strdup
00008ae8	movl	%eax,0xe8(%ebp)
00008aeb	movl	$0x00000064,0xec(%ebp)
00008af2	leal	0xe8(%ebp),%eax
00008af5	movl	%eax,0x04(%esp)
00008af9	movl	%ebx,(%esp)
00008afc	calll	CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
00008b01	movl	0x00000168(%edi),%ecx
00008b07	imull	$0x18,%eax,%eax
00008b0a	movl	0x10(%ebp),%edx
00008b0d	movl	%edx,0x14(%ecx,%eax)
00008b11	addl	$0x1c,%esp
00008b14	popl	%esi
00008b15	popl	%edi
00008b16	popl	%ebx
00008b17	popl	%ebp
00008b18	ret
00008b19	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::Merge(CChoreoScene*):
00008b20	pushl	%ebp
00008b21	movl	%esp,%ebp
00008b23	pushl	%ebx
00008b24	pushl	%edi
00008b25	pushl	%esi
00008b26	subl	$0x3c,%esp
00008b29	calll	0x00008b2e
00008b2e	popl	%eax
00008b2f	movl	%eax,0xc8(%ebp)
00008b32	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xcc(%ebp)
00008b39	movl	0x0c(%ebp),%eax
00008b3c	movl	0x08(%ebp),%esi
00008b3f	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x10(%eax)
00008b43	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
00008b4a	jle	0x00008ba0
00008b4c	xorl	%edi,%edi
00008b4e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
00008b55	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008b60	movl	0x04(%eax),%eax
00008b63	movl	(%eax,%edi,4),%ebx
00008b66	movl	%ebx,(%esp)
00008b69	calll	CChoreoEvent::GetActor()
00008b6e	testl	%eax,%eax
00008b70	jne	0x00008b97
00008b72	movl	%esi,(%esp)
00008b75	calll	CChoreoScene::AllocEvent()
00008b7a	movl	%ebx,0x04(%esp)
00008b7e	movl	%eax,(%esp)
00008b81	movl	%eax,%ebx
00008b83	calll	CChoreoEvent::operator=(CChoreoEvent const&)
00008b88	movl	%esi,0x04(%esp)
00008b8c	movl	%ebx,(%esp)
00008b8f	calll	CChoreoEvent::SetScene(CChoreoScene*)
00008b94	incl	0xd8(%ebp)
00008b97	incl	%edi
00008b98	movl	0x0c(%ebp),%eax
00008b9b	cmpl	0x10(%eax),%edi
00008b9e	jl	0x00008b60
00008ba0	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%eax)
00008ba4	jg	0x00008bb0
00008ba6	xorl	%eax,%eax
00008ba8	movl	%eax,0xd4(%ebp)
00008bab	jmp	0x00008da2
00008bb0	movl	%esi,%ebx
00008bb2	xorl	%ecx,%ecx
00008bb4	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xcc(%ebp)
00008bbb	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd4(%ebp)
00008bc2	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008bd0	movl	%ecx,0xd0(%ebp)
00008bd3	movl	0x18(%eax),%eax
00008bd6	movl	(%eax,%ecx,4),%eax
00008bd9	movl	%eax,0xe0(%ebp)
00008bdc	movl	%eax,(%esp)
00008bdf	calll	CChoreoActor::GetName()
00008be4	movl	%eax,%edi
00008be6	xorl	%esi,%esi
00008be8	jmp	0x00008bf4
00008bea	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008bf0	incl	%esi
00008bf1	movl	0x08(%ebp),%ebx
00008bf4	cmpl	0x24(%ebx),%esi
00008bf7	jge	0x00008c26
00008bf9	movl	0x18(%ebx),%eax
00008bfc	movl	(%eax,%esi,4),%ebx
00008bff	testl	%ebx,%ebx
00008c01	je	0x00008bf0
00008c03	movl	%ebx,(%esp)
00008c06	calll	CChoreoActor::GetName()
00008c0b	movl	%edi,0x04(%esp)
00008c0f	movl	%eax,(%esp)
00008c12	calll	V_stricmp(char const*, char const*)
00008c17	testl	%eax,%eax
00008c19	jne	0x00008bf0
00008c1b	movl	%ebx,0xe8(%ebp)
00008c1e	movl	0xe0(%ebp),%edi
00008c21	movl	0x08(%ebp),%ebx
00008c24	jmp	0x00008c4d
00008c26	movl	%ebx,(%esp)
00008c29	calll	CChoreoScene::AllocActor()
00008c2e	movl	%eax,%esi
00008c30	movl	%esi,0xe8(%ebp)
00008c33	movl	0xe0(%ebp),%edi
00008c36	movl	%edi,0x04(%esp)
00008c3a	movl	%esi,(%esp)
00008c3d	calll	CChoreoActor::operator=(CChoreoActor const&)
00008c42	movl	%esi,(%esp)
00008c45	calll	CChoreoActor::RemoveAllChannels()
00008c4a	incl	0xcc(%ebp)
00008c4d	movl	%edi,(%esp)
00008c50	calll	CChoreoActor::GetNumChannels()
00008c55	xorl	%ecx,%ecx
00008c57	testl	%eax,%eax
00008c59	movl	%ebx,%esi
00008c5b	jle	0x00008d90
00008c61	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00008c70	movl	%ecx,0xdc(%ebp)
00008c73	movl	%ecx,0x04(%esp)
00008c77	movl	%edi,(%esp)
00008c7a	calll	CChoreoActor::GetChannel(int)
00008c7f	movl	%eax,%esi
00008c81	movl	%esi,(%esp)
00008c84	calll	CChoreoChannel::GetName()
00008c89	movl	%eax,0x04(%esp)
00008c8d	movl	0xe8(%ebp),%ebx
00008c90	movl	%ebx,(%esp)
00008c93	calll	CChoreoActor::FindChannel(char const*)
00008c98	testl	%eax,%eax
00008c9a	je	0x00008ca4
00008c9c	movl	%eax,0xec(%ebp)
00008c9f	movl	%edi,0xe0(%ebp)
00008ca2	jmp	0x00008ce6
00008ca4	movl	%edi,0xe0(%ebp)
00008ca7	movl	0x08(%ebp),%eax
00008caa	movl	%eax,(%esp)
00008cad	calll	CChoreoScene::AllocChannel()
00008cb2	movl	%eax,%edi
00008cb4	movl	%edi,0xec(%ebp)
00008cb7	movl	%esi,0x04(%esp)
00008cbb	movl	%edi,(%esp)
00008cbe	calll	CChoreoChannel::operator=(CChoreoChannel const&)
00008cc3	movl	%edi,(%esp)
00008cc6	calll	CChoreoChannel::RemoveAllEvents()
00008ccb	movl	%edi,0x04(%esp)
00008ccf	movl	%ebx,(%esp)
00008cd2	calll	CChoreoActor::AddChannel(CChoreoChannel*)
00008cd7	movl	%ebx,0x04(%esp)
00008cdb	movl	%edi,(%esp)
00008cde	incl	0xd4(%ebp)
00008ce1	calll	CChoreoChannel::SetActor(CChoreoActor*)
00008ce6	movl	%esi,0xe4(%ebp)
00008ce9	movl	%esi,(%esp)
00008cec	calll	CChoreoChannel::GetNumEvents()
00008cf1	xorl	%ecx,%ecx
00008cf3	testl	%eax,%eax
00008cf5	movl	0x08(%ebp),%eax
00008cf8	movl	%eax,%edi
00008cfa	jg	0x00008d00
00008cfc	movl	%edi,%esi
00008cfe	jmp	0x00008d77
00008d00	movl	%ecx,0xf0(%ebp)
00008d03	movl	%ecx,0x04(%esp)
00008d07	movl	%esi,(%esp)
00008d0a	calll	CChoreoChannel::GetEvent(int)
00008d0f	movl	%eax,%ebx
00008d11	movl	%edi,(%esp)
00008d14	calll	CChoreoScene::AllocEvent()
00008d19	movl	%eax,%esi
00008d1b	movl	%ebx,0x04(%esp)
00008d1f	movl	%esi,(%esp)
00008d22	calll	CChoreoEvent::operator=(CChoreoEvent const&)
00008d27	movl	%edi,0x04(%esp)
00008d2b	movl	%esi,(%esp)
00008d2e	calll	CChoreoEvent::SetScene(CChoreoScene*)
00008d33	movl	%esi,0x04(%esp)
00008d37	movl	0xec(%ebp),%ebx
00008d3a	movl	%ebx,(%esp)
00008d3d	calll	CChoreoChannel::AddEvent(CChoreoEvent*)
00008d42	movl	%ebx,0x04(%esp)
00008d46	movl	%esi,(%esp)
00008d49	calll	CChoreoEvent::SetChannel(CChoreoChannel*)
00008d4e	movl	0xe8(%ebp),%eax
00008d51	movl	%eax,0x04(%esp)
00008d55	movl	%esi,(%esp)
00008d58	movl	0xe4(%ebp),%esi
00008d5b	calll	CChoreoEvent::SetActor(CChoreoActor*)
00008d60	movl	%esi,(%esp)
00008d63	incl	0xf0(%ebp)
00008d66	calll	CChoreoChannel::GetNumEvents()
00008d6b	movl	0xf0(%ebp),%ecx
00008d6e	cmpl	%eax,%ecx
00008d70	jl	0x00008d00
00008d72	movl	%edi,%esi
00008d74	addl	%ecx,0xd8(%ebp)
00008d77	movl	0xe0(%ebp),%edi
00008d7a	movl	%edi,(%esp)
00008d7d	movl	0xdc(%ebp),%ebx
00008d80	incl	%ebx
00008d81	calll	CChoreoActor::GetNumChannels()
00008d86	cmpl	%eax,%ebx
00008d88	movl	%ebx,%ecx
00008d8a	jl	0x00008c70
00008d90	movl	%esi,%ebx
00008d92	movl	0xd0(%ebp),%ecx
00008d95	incl	%ecx
00008d96	movl	0x0c(%ebp),%eax
00008d99	cmpl	0x24(%eax),%ecx
00008d9c	jl	0x00008bd0
00008da2	movl	0xd4(%ebp),%esi
00008da5	movl	%esi,0x08(%esp)
00008da9	movl	0xd8(%ebp),%edx
00008dac	movl	%edx,0x0c(%esp)
00008db0	movl	0xcc(%ebp),%ecx
00008db3	movl	%ecx,0x04(%esp)
00008db7	movl	0xc8(%ebp),%eax
00008dba	leal	0x691f3-0x8b2e(%eax),%eax
00008dc0	movl	%eax,(%esp)
00008dc3	orl	%edx,%ecx
00008dc5	orl	%esi,%ecx
00008dc7	setne	%al
00008dca	movzbl	%al,%esi
00008dcd	calll	_Msg
00008dd2	movl	%esi,%eax
00008dd4	addl	$0x3c,%esp
00008dd7	popl	%esi
00008dd8	popl	%edi
00008dd9	popl	%ebx
00008dda	popl	%ebp
00008ddb	ret
00008ddc	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
CChoreoScene::GetFilename() const:
00008de0	movl	$0x00000188,%eax
00008de5	addl	0x04(%esp),%eax
00008de9	ret
00008dea	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetFileName(char const*):
00008df0	pushl	%ebp
00008df1	movl	%esp,%ebp
00008df3	subl	$0x18,%esp
00008df6	movl	0x0c(%ebp),%eax
00008df9	movl	%eax,0x04(%esp)
00008dfd	movl	$0x00000188,%eax
00008e02	addl	0x08(%ebp),%eax
00008e05	movl	%eax,(%esp)
00008e08	movl	$0x00000080,0x08(%esp)
00008e10	calll	V_strncpy(char*, char const*, int)
00008e15	addl	$0x18,%esp
00008e18	popl	%ebp
00008e19	ret
00008e1a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetPlayingSoundName(char*, int):
00008e20	pushl	%ebp
00008e21	movl	%esp,%ebp
00008e23	pushl	%ebx
00008e24	pushl	%edi
00008e25	pushl	%esi
00008e26	subl	$0x0c,%esp
00008e29	xorl	%ebx,%ebx
00008e2b	movl	0x08(%ebp),%esi
00008e2e	jmp	0x00008e31
00008e30	incl	%ebx
00008e31	xorb	%al,%al
00008e33	cmpl	0x10(%esi),%ebx
00008e36	jge	0x00008e77
00008e38	movl	0x04(%esi),%eax
00008e3b	movl	(%eax,%ebx,4),%edi
00008e3e	movl	%edi,(%esp)
00008e41	calll	CChoreoEvent::GetType()
00008e46	cmpl	$0x05,%eax
00008e49	jne	0x00008e30
00008e4b	movl	%edi,(%esp)
00008e4e	calll	CChoreoEvent::IsProcessing() const
00008e53	cmpb	$0x01,%al
00008e55	jne	0x00008e30
00008e57	movl	%edi,(%esp)
00008e5a	calll	CChoreoEvent::GetParameters()
00008e5f	movl	0x10(%ebp),%ecx
00008e62	movl	%ecx,0x08(%esp)
00008e66	movl	%eax,0x04(%esp)
00008e6a	movl	0x0c(%ebp),%eax
00008e6d	movl	%eax,(%esp)
00008e70	calll	V_strncpy(char*, char const*, int)
00008e75	movb	$0x01,%al
00008e77	movzbl	%al,%eax
00008e7a	addl	$0x0c,%esp
00008e7d	popl	%esi
00008e7e	popl	%edi
00008e7f	popl	%ebx
00008e80	popl	%ebp
00008e81	ret
00008e82	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::HasUnplayedSpeech():
00008e90	pushl	%ebp
00008e91	movl	%esp,%ebp
00008e93	pushl	%ebx
00008e94	pushl	%edi
00008e95	pushl	%esi
00008e96	subl	$0x0c,%esp
00008e99	xorl	%esi,%esi
00008e9b	movl	0x08(%ebp),%edi
00008e9e	jmp	0x00008ea1
00008ea0	incl	%esi
00008ea1	xorb	%al,%al
00008ea3	cmpl	0x10(%edi),%esi
00008ea6	jge	0x00008edd
00008ea8	movl	0x04(%edi),%eax
00008eab	movl	(%eax,%esi,4),%ebx
00008eae	movl	%ebx,(%esp)
00008eb1	calll	CChoreoEvent::GetType()
00008eb6	cmpl	$0x05,%eax
00008eb9	jne	0x00008ea0
00008ebb	movss	0x7c(%edi),%xmm0
00008ec0	movss	%xmm0,0xec(%ebp)
00008ec5	movl	%ebx,(%esp)
00008ec8	calll	CChoreoEvent::GetStartTime()
00008ecd	fstps	0xf0(%ebp)
00008ed0	movb	$0x01,%al
00008ed2	movss	0xf0(%ebp),%xmm0
00008ed7	ucomiss	0xec(%ebp),%xmm0
00008edb	jbe	0x00008ea0
00008edd	movzbl	%al,%eax
00008ee0	addl	$0x0c,%esp
00008ee3	popl	%esi
00008ee4	popl	%edi
00008ee5	popl	%ebx
00008ee6	popl	%ebp
00008ee7	ret
00008ee8	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::HasFlexAnimation():
00008ef0	pushl	%ebp
00008ef1	movl	%esp,%ebp
00008ef3	pushl	%ebx
00008ef4	pushl	%edi
00008ef5	pushl	%esi
00008ef6	subl	$0x1c,%esp
00008ef9	xorl	%esi,%esi
00008efb	movl	0x08(%ebp),%edi
00008efe	jmp	0x00008f01
00008f00	incl	%esi
00008f01	xorb	%al,%al
00008f03	cmpl	0x10(%edi),%esi
00008f06	jge	0x00008f5d
00008f08	movl	0x04(%edi),%eax
00008f0b	movl	(%eax,%esi,4),%ebx
00008f0e	movl	%ebx,(%esp)
00008f11	calll	CChoreoEvent::GetType()
00008f16	cmpl	$0x0a,%eax
00008f19	jne	0x00008f00
00008f1b	movss	0x7c(%edi),%xmm0
00008f20	movss	%xmm0,0xe8(%ebp)
00008f25	movl	%ebx,(%esp)
00008f28	calll	CChoreoEvent::GetStartTime()
00008f2d	fstps	0xf0(%ebp)
00008f30	movss	0xe8(%ebp),%xmm0
00008f35	ucomiss	0xf0(%ebp),%xmm0
00008f39	jb	0x00008f00
00008f3b	movss	0x7c(%edi),%xmm0
00008f40	movss	%xmm0,0xe8(%ebp)
00008f45	movl	%ebx,(%esp)
00008f48	calll	CChoreoEvent::GetEndTime()
00008f4d	fstps	0xec(%ebp)
00008f50	movb	$0x01,%al
00008f52	movss	0xec(%ebp),%xmm0
00008f57	ucomiss	0xe8(%ebp),%xmm0
00008f5b	jb	0x00008f00
00008f5d	movzbl	%al,%eax
00008f60	addl	$0x1c,%esp
00008f63	popl	%esi
00008f64	popl	%edi
00008f65	popl	%ebx
00008f66	popl	%ebp
00008f67	ret
00008f68	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SetBackground(bool):
00008f70	movl	0x04(%esp),%eax
00008f74	movb	0x0000020c(%eax),%cl
00008f7a	andb	$0xfe,%cl
00008f7d	movb	0x08(%esp),%dl
00008f81	orb	%cl,%dl
00008f83	movb	%dl,0x0000020c(%eax)
00008f89	ret
00008f8a	nopw	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::IsBackground():
00008f90	movl	0x04(%esp),%eax
00008f94	movzbl	0x0000020c(%eax),%eax
00008f9b	andl	$0x01,%eax
00008f9e	ret
00008f9f	nop
CChoreoScene::HasEventsOfType(CChoreoEvent::EVENTTYPE) const:
00008fa0	movl	0x08(%esp),%eax
00008fa4	movl	%eax,%ecx
00008fa6	sarl	$0x05,%ecx
00008fa9	movl	0x04(%esp),%edx
00008fad	movl	0x00000208(%edx,%ecx,4),%ecx
00008fb4	btl	%eax,%ecx
00008fb7	sbbl	%eax,%eax
00008fb9	andl	$0x01,%eax
00008fbc	ret
00008fbd	nopl	(%eax)
CChoreoScene::CurveHasEndTime():
00008fc0	movl	$0x00000001,%eax
00008fc5	ret
00008fc6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetDefaultCurveType():
00008fd0	movl	$0x00000101,%eax
00008fd5	ret
00008fd6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SaveBinary(char const*, char const*, unsigned int, IChoreoStringPool*):
00008fe0	pushl	%ebp
00008fe1	movl	%esp,%ebp
00008fe3	pushl	%ebx
00008fe4	pushl	%edi
00008fe5	pushl	%esi
00008fe6	subl	$0x5c,%esp
00008fe9	calll	0x00008fee
00008fee	popl	%eax
00008fef	movl	%eax,0xb4(%ebp)
00008ff2	leal	0xb8(%ebp),%esi
00008ff5	movl	%esi,(%esp)
00008ff8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x0c(%esp)
00009000	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x08(%esp)
00009008	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
00009010	calll	CUtlBuffer::CUtlBuffer(int, int, int)
00009015	movl	0x18(%ebp),%eax
00009018	movl	%eax,0x0c(%esp)
0000901c	movl	0x14(%ebp),%eax
0000901f	movl	%eax,0x08(%esp)
00009023	movl	%esi,0x04(%esp)
00009027	movl	0x08(%ebp),%eax
0000902a	movl	%eax,(%esp)
0000902d	calll	CChoreoScene::SaveToBinaryBuffer(CUtlBuffer&, unsigned int, IChoreoStringPool*)
00009032	movl	0x10(%ebp),%esi
00009035	movl	0x0c(%ebp),%edi
00009038	movl	0xb4(%ebp),%eax
0000903b	movl	0x758ee-0x8fee(%eax),%ebx
00009041	movl	(%ebx),%eax
00009043	movl	0x04(%eax),%ecx
00009046	movl	0x28(%ecx),%ecx
00009049	movl	%esi,0x08(%esp)
0000904d	movl	%edi,0x04(%esp)
00009051	addl	$0x04,%eax
00009054	movl	%eax,(%esp)
00009057	call	*%ecx
00009059	cmpb	$0x01,%al
0000905b	jne	0x000090ae
0000905d	movl	(%ebx),%eax
0000905f	movl	0x04(%eax),%ecx
00009062	movl	0x2c(%ecx),%ecx
00009065	movl	%esi,0x08(%esp)
00009069	movl	%edi,0x04(%esp)
0000906d	addl	$0x04,%eax
00009070	movl	%eax,(%esp)
00009073	call	*%ecx
00009075	testb	%al,%al
00009077	jne	0x000090ae
00009079	movl	%edi,0x04(%esp)
0000907d	movl	0xb4(%ebp),%eax
00009080	leal	0x6922a-0x8fee(%eax),%eax
00009086	movl	%eax,(%esp)
00009089	calll	_Warning
0000908e	movl	(%ebx),%eax
00009090	movl	0x04(%eax),%ecx
00009093	movl	0x30(%ecx),%ecx
00009096	movl	%esi,0x0c(%esp)
0000909a	movl	%edi,0x04(%esp)
0000909e	addl	$0x04,%eax
000090a1	movl	%eax,(%esp)
000090a4	movl	$0x00000001,0x08(%esp)
000090ac	call	*%ecx
000090ae	movl	(%ebx),%eax
000090b0	movl	0x04(%eax),%ecx
000090b3	movl	0x08(%ecx),%ecx
000090b6	movl	%esi,0x0c(%esp)
000090ba	movl	0xb4(%ebp),%edx
000090bd	leal	0x6924a-0x8fee(%edx),%edx
000090c3	movl	%edx,0x08(%esp)
000090c7	movl	%edi,0x04(%esp)
000090cb	addl	$0x04,%eax
000090ce	movl	%eax,(%esp)
000090d1	call	*%ecx
000090d3	movl	%eax,%esi
000090d5	testl	%esi,%esi
000090d7	je	0x00009140
000090d9	movl	(%ebx),%eax
000090db	movl	0x04(%eax),%ecx
000090de	movl	0x04(%ecx),%ecx
000090e1	movl	0xb8(%ebp),%edx
000090e4	movl	0xc8(%ebp),%edi
000090e7	movl	%esi,0x0c(%esp)
000090eb	movl	%edi,0x08(%esp)
000090ef	movl	%edx,0x04(%esp)
000090f3	addl	$0x04,%eax
000090f6	movl	%eax,(%esp)
000090f9	call	*%ecx
000090fb	movl	(%ebx),%eax
000090fd	movl	0x04(%eax),%ecx
00009100	movl	0x0c(%ecx),%ecx
00009103	movb	$0x01,%bl
00009105	movl	%esi,0x04(%esp)
00009109	addl	$0x04,%eax
0000910c	movl	%eax,(%esp)
0000910f	call	*%ecx
00009111	jmp	0x00009157
00009113	movl	%eax,%esi
00009115	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00009119	js	0x00009138
0000911b	movl	0xb8(%ebp),%eax
0000911e	testl	%eax,%eax
00009120	je	0x00009131
00009122	movl	%eax,(%esp)
00009125	calll	_free
0000912a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
00009131	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00009138	movl	%esi,(%esp)
0000913b	calll	__Unwind_Resume
00009140	xorb	%bl,%bl
00009142	movl	%edi,0x04(%esp)
00009146	movl	0xb4(%ebp),%eax
00009149	leal	0x6924d-0x8fee(%eax),%eax
0000914f	movl	%eax,(%esp)
00009152	calll	_Warning
00009157	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
0000915b	js	0x0000917a
0000915d	movl	0xb8(%ebp),%eax
00009160	testl	%eax,%eax
00009162	je	0x00009173
00009164	movl	%eax,(%esp)
00009167	calll	_free
0000916c	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
00009173	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
0000917a	movzbl	%bl,%eax
0000917d	addl	$0x5c,%esp
00009180	popl	%esi
00009181	popl	%edi
00009182	popl	%ebx
00009183	popl	%ebp
00009184	ret
00009185	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::SaveToBinaryBuffer(CUtlBuffer&, unsigned int, IChoreoStringPool*):
00009190	pushl	%ebp
00009191	movl	%esp,%ebp
00009193	pushl	%ebx
00009194	pushl	%edi
00009195	pushl	%esi
00009196	subl	$0x5c,%esp
00009199	calll	0x0000919e
0000919e	popl	%eax
0000919f	movl	0x10(%ebp),%esi
000091a2	movl	0x0c(%ebp),%edi
000091a5	movl	0x08(%ebp),%ebx
000091a8	testb	$0x01,0x15(%edi)
000091ac	jne	0x000091f3
000091ae	movl	%eax,0xa8(%ebp)
000091b1	movl	%edi,(%esp)
000091b4	movl	$0x00000004,0x04(%esp)
000091bc	calll	CUtlBuffer::CheckPut(int)
000091c1	cmpb	$0x01,%al
000091c3	jne	0x00009210
000091c5	movl	0x10(%edi),%eax
000091c8	subl	0x20(%edi),%eax
000091cb	addl	(%edi),%eax
000091cd	testb	$0x01,0x34(%edi)
000091d1	jne	0x000091db
000091d3	movl	$0x64637662,(%eax)
000091d9	jmp	0x000091e5
000091db	testl	%eax,%eax
000091dd	je	0x000091e5
000091df	movl	$0x62766364,(%eax)
000091e5	addl	$0x04,0x10(%edi)
000091e9	movl	%edi,(%esp)
000091ec	calll	CUtlBuffer::AddNullTermination()
000091f1	jmp	0x00009210
000091f3	movl	%eax,0xa8(%ebp)
000091f6	leal	0x6928d-0x919e(%eax),%eax
000091fc	movl	%eax,0x04(%esp)
00009200	movl	%edi,(%esp)
00009203	movl	$0x64637662,0x08(%esp)
0000920b	calll	CUtlBuffer::Printf(char const*, ...)
00009210	movl	%edi,(%esp)
00009213	movl	$0x00000004,0x04(%esp)
0000921b	calll	CUtlBuffer::PutChar(char)
00009220	testb	$0x01,0x15(%edi)
00009224	jne	0x0000925e
00009226	movl	%edi,(%esp)
00009229	movl	$0x00000004,0x04(%esp)
00009231	calll	CUtlBuffer::CheckPut(int)
00009236	cmpb	$0x01,%al
00009238	jne	0x00009277
0000923a	movl	0x10(%edi),%eax
0000923d	subl	0x20(%edi),%eax
00009240	addl	(%edi),%eax
00009242	testb	$0x01,0x34(%edi)
00009246	je	0x0000924e
00009248	testl	%eax,%eax
0000924a	je	0x00009250
0000924c	bswap	%esi
0000924e	movl	%esi,(%eax)
00009250	addl	$0x04,0x10(%edi)
00009254	movl	%edi,(%esp)
00009257	calll	CUtlBuffer::AddNullTermination()
0000925c	jmp	0x00009277
0000925e	movl	%esi,0x08(%esp)
00009262	movl	0xa8(%ebp),%eax
00009265	leal	0x6928d-0x919e(%eax),%eax
0000926b	movl	%eax,0x04(%esp)
0000926f	movl	%edi,(%esp)
00009272	calll	CUtlBuffer::Printf(char const*, ...)
00009277	xorps	%xmm0,%xmm0
0000927a	movaps	%xmm0,0xd8(%ebp)
0000927e	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
00009285	xorl	%edx,%edx
00009287	movl	%edx,%ecx
00009289	movl	%edx,%edi
0000928b	jmp	0x000092fd
0000928d	nopl	(%eax)
00009290	movl	%ecx,0xb4(%ebp)
00009293	leal	0x01(%ecx),%esi
00009296	movl	0xdc(%ebp),%eax
00009299	cmpl	%eax,%esi
0000929b	movl	%ecx,%ebx
0000929d	jle	0x000092b8
0000929f	movl	%esi,%ecx
000092a1	subl	%eax,%ecx
000092a3	movl	%ecx,0x04(%esp)
000092a7	leal	0xd8(%ebp),%eax
000092aa	movl	%eax,(%esp)
000092ad	calll	CUtlMemory<CChoreoEvent*, int>::Grow(int)
000092b2	movl	0xd8(%ebp),%edx
000092b5	movl	0xe4(%ebp),%ebx
000092b8	incl	%ebx
000092b9	movl	%ebx,0xe4(%ebp)
000092bc	movl	%edx,0xe8(%ebp)
000092bf	movl	%ebx,%eax
000092c1	movl	0xb4(%ebp),%ecx
000092c4	subl	%ecx,%eax
000092c6	decl	%eax
000092c7	testl	%eax,%eax
000092c9	jle	0x000092eb
000092cb	shll	$0x02,%eax
000092ce	movl	%eax,0x08(%esp)
000092d2	leal	(%edx,%ecx,4),%eax
000092d5	movl	%eax,0x04(%esp)
000092d9	leal	(%edx,%esi,4),%eax
000092dc	movl	%eax,(%esp)
000092df	movl	%ecx,%esi
000092e1	calll	_memmove
000092e6	movl	%esi,%ecx
000092e8	movl	0xd8(%ebp),%edx
000092eb	shll	$0x02,%ecx
000092ee	addl	%edx,%ecx
000092f0	je	0x000092f7
000092f2	movl	0xb0(%ebp),%eax
000092f5	movl	%eax,(%ecx)
000092f7	movl	%ebx,%ecx
000092f9	movl	0x08(%ebp),%ebx
000092fc	incl	%edi
000092fd	cmpl	0x10(%ebx),%edi
00009300	jge	0x0000933c
00009302	movl	%ebx,%eax
00009304	movl	%edx,%ebx
00009306	movl	%ecx,%esi
00009308	movl	0x04(%eax),%eax
0000930b	movl	(%eax,%edi,4),%eax
0000930e	movl	%eax,0xb0(%ebp)
00009311	movl	%eax,(%esp)
00009314	calll	CChoreoEvent::GetActor()
00009319	testl	%eax,%eax
0000931b	movl	%ebx,%edx
0000931d	movl	%esi,%ecx
0000931f	jne	0x000092f9
00009321	jmp	0x00009290
00009326	movl	%eax,%esi
00009328	movl	0xac(%ebp),%edi
0000932b	jmp	0x0000952a
00009330	jmp	0x00009332
00009332	movl	%eax,%esi
00009334	movl	0xd8(%ebp),%edi
00009337	jmp	0x0000952a
0000933c	movl	0x0c(%ebp),%edi
0000933f	movl	%edi,%esi
00009341	testb	$0x01,0x15(%esi)
00009345	jne	0x00009379
00009347	movl	%ecx,0xb4(%ebp)
0000934a	movl	%esi,(%esp)
0000934d	movl	$0x00000001,0x04(%esp)
00009355	calll	CUtlBuffer::CheckPut(int)
0000935a	cmpb	$0x01,%al
0000935c	jne	0x00009398
0000935e	movl	(%esi),%eax
00009360	movl	0x10(%esi),%ecx
00009363	subl	0x20(%esi),%ecx
00009366	movl	0xb4(%ebp),%edx
00009369	movb	%dl,(%eax,%ecx)
0000936c	incl	0x10(%esi)
0000936f	movl	%esi,(%esp)
00009372	calll	CUtlBuffer::AddNullTermination()
00009377	jmp	0x00009398
00009379	movl	0xa8(%ebp),%eax
0000937c	leal	0x69287-0x919e(%eax),%eax
00009382	movl	%eax,0x04(%esp)
00009386	movl	%esi,(%esp)
00009389	movzbl	%cl,%eax
0000938c	movl	%ecx,0xb4(%ebp)
0000938f	movl	%eax,0x08(%esp)
00009393	calll	CUtlBuffer::Printf(char const*, ...)
00009398	xorl	%esi,%esi
0000939a	movl	0xd8(%ebp),%eax
0000939d	movl	%eax,0xac(%ebp)
000093a0	movl	0xb4(%ebp),%edi
000093a3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
000093b0	cmpl	%edi,%esi
000093b2	jge	0x000093d7
000093b4	movl	0xac(%ebp),%eax
000093b7	movl	(%eax,%esi,4),%eax
000093ba	movl	0x14(%ebp),%ecx
000093bd	movl	%ecx,0x0c(%esp)
000093c1	movl	%ebx,0x08(%esp)
000093c5	movl	0x0c(%ebp),%ecx
000093c8	movl	%ecx,0x04(%esp)
000093cc	movl	%eax,(%esp)
000093cf	calll	CChoreoEvent::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
000093d4	incl	%esi
000093d5	jmp	0x000093b0
000093d7	xorps	%xmm0,%xmm0
000093da	movaps	%xmm0,0xb8(%ebp)
000093de	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc8(%ebp)
000093e5	xorl	%ecx,%ecx
000093e7	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x24(%ebx)
000093eb	movl	%ecx,%edx
000093ed	movl	0x0c(%ebp),%edi
000093f0	jle	0x00009486
000093f6	xorl	%ecx,%ecx
000093f8	movl	%ecx,%edx
000093fa	movl	%ecx,%esi
000093fc	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax)
00009400	movl	0x18(%ebx),%eax
00009403	movl	(%eax,%esi,4),%eax
00009406	movl	%eax,0xb0(%ebp)
00009409	testl	%eax,%eax
0000940b	je	0x0000947c
0000940d	leal	0x01(%edx),%edi
00009410	movl	0xbc(%ebp),%eax
00009413	cmpl	%eax,%edi
00009415	movl	%edx,%ebx
00009417	movl	%edx,0xb4(%ebp)
0000941a	jle	0x00009435
0000941c	movl	%edi,%ecx
0000941e	subl	%eax,%ecx
00009420	movl	%ecx,0x04(%esp)
00009424	leal	0xb8(%ebp),%eax
00009427	movl	%eax,(%esp)
0000942a	calll	CUtlMemory<CChoreoActor*, int>::Grow(int)
0000942f	movl	0xb8(%ebp),%ecx
00009432	movl	0xc4(%ebp),%ebx
00009435	incl	%ebx
00009436	movl	%ebx,0xc4(%ebp)
00009439	movl	%ecx,0xc8(%ebp)
0000943c	movl	%ebx,%eax
0000943e	movl	0xb4(%ebp),%edx
00009441	subl	%edx,%eax
00009443	decl	%eax
00009444	testl	%eax,%eax
00009446	jle	0x00009468
00009448	shll	$0x02,%eax
0000944b	movl	%eax,0x08(%esp)
0000944f	leal	(%ecx,%edx,4),%eax
00009452	movl	%eax,0x04(%esp)
00009456	leal	(%ecx,%edi,4),%eax
00009459	movl	%eax,(%esp)
0000945c	movl	%edx,%edi
0000945e	calll	_memmove
00009463	movl	%edi,%edx
00009465	movl	0xb8(%ebp),%ecx
00009468	shll	$0x02,%edx
0000946b	addl	%ecx,%edx
0000946d	je	0x00009474
0000946f	movl	0xb0(%ebp),%eax
00009472	movl	%eax,(%edx)
00009474	movl	%ebx,%edx
00009476	movl	0x0c(%ebp),%edi
00009479	movl	0x08(%ebp),%ebx
0000947c	incl	%esi
0000947d	cmpl	0x24(%ebx),%esi
00009480	jl	0x00009400
00009486	movl	%ecx,0xb4(%ebp)
00009489	testb	$0x01,0x15(%edi)
0000948d	jne	0x00009546
00009493	movl	%edi,(%esp)
00009496	movl	$0x00000001,0x04(%esp)
0000949e	movl	%edx,%esi
000094a0	calll	CUtlBuffer::CheckPut(int)
000094a5	movl	%esi,%edx
000094a7	xorl	%esi,%esi
000094a9	cmpb	$0x01,%al
000094ab	jne	0x00009570
000094b1	movl	(%edi),%eax
000094b3	movl	0x10(%edi),%ecx
000094b6	subl	0x20(%edi),%ecx
000094b9	movb	%dl,(%eax,%ecx)
000094bc	incl	0x10(%edi)
000094bf	xorl	%esi,%esi
000094c1	movl	%edi,(%esp)
000094c4	movl	%edx,%ebx
000094c6	calll	CUtlBuffer::AddNullTermination()
000094cb	movl	%ebx,%edx
000094cd	jmp	0x00009570
000094d2	movl	%eax,%esi
000094d4	movl	0xac(%ebp),%edi
000094d7	movl	0xb4(%ebp),%eax
000094da	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc4(%ebp)
000094e1	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
000094e5	jns	0x000094ec
000094e7	movl	%eax,0xc8(%ebp)
000094ea	jmp	0x0000952a
000094ec	testl	%eax,%eax
000094ee	jne	0x00009500
000094f0	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
000094f7	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc8(%ebp)
000094fe	jmp	0x00009523
00009500	movl	%eax,(%esp)
00009503	calll	_free
00009508	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
0000950f	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00009513	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
0000951a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc8(%ebp)
00009521	js	0x0000952a
00009523	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
0000952a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
00009531	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
00009535	jns	0x000096ae
0000953b	movl	%edi,0xe8(%ebp)
0000953e	movl	%esi,(%esp)
00009541	calll	__Unwind_Resume
00009546	xorl	%esi,%esi
00009548	movzbl	%dl,%eax
0000954b	movl	%eax,0x08(%esp)
0000954f	movl	0xa8(%ebp),%eax
00009552	leal	0x69287-0x919e(%eax),%eax
00009558	movl	%eax,0x04(%esp)
0000955c	movl	%edi,(%esp)
0000955f	movl	%edx,%ebx
00009561	calll	CUtlBuffer::Printf(char const*, ...)
00009566	movl	%ebx,%edx
00009568	nopl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00009570	cmpl	%edx,%esi
00009572	movl	0xb4(%ebp),%eax
00009575	jge	0x0000959b
00009577	movl	%edx,%ebx
00009579	movl	(%eax,%esi,4),%eax
0000957c	movl	0x14(%ebp),%ecx
0000957f	movl	%ecx,0x0c(%esp)
00009583	movl	0x08(%ebp),%ecx
00009586	movl	%ecx,0x08(%esp)
0000958a	movl	%edi,0x04(%esp)
0000958e	movl	%eax,(%esp)
00009591	calll	CChoreoActor::SaveToBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00009596	incl	%esi
00009597	movl	%ebx,%edx
00009599	jmp	0x00009570
0000959b	movl	%eax,0xb4(%ebp)
0000959e	movl	0x14(%ebp),%eax
000095a1	movl	%eax,0x08(%esp)
000095a5	movl	%edi,0x04(%esp)
000095a9	movl	0x08(%ebp),%eax
000095ac	leal	0x0000012c(%eax),%eax
000095b2	movl	%eax,(%esp)
000095b5	calll	CCurveData::SaveToBuffer(CUtlBuffer&, IChoreoStringPool*)
000095ba	movl	0x08(%ebp),%eax
000095bd	movb	0x0000020c(%eax),%bl
000095c3	shrb	%bl
000095c5	andb	$0x01,%bl
000095c8	testb	$0x01,0x15(%edi)
000095cc	jne	0x000095fa
000095ce	movl	%edi,(%esp)
000095d1	movl	$0x00000001,0x04(%esp)
000095d9	calll	CUtlBuffer::CheckPut(int)
000095de	cmpb	$0x01,%al
000095e0	jne	0x00009616
000095e2	movl	(%edi),%eax
000095e4	movl	0x10(%edi),%ecx
000095e7	subl	0x20(%edi),%ecx
000095ea	movb	%bl,(%eax,%ecx)
000095ed	incl	0x10(%edi)
000095f0	movl	%edi,(%esp)
000095f3	calll	CUtlBuffer::AddNullTermination()
000095f8	jmp	0x00009616
000095fa	movzbl	%bl,%eax
000095fd	movl	%eax,0x08(%esp)
00009601	movl	0xa8(%ebp),%eax
00009604	leal	0x69287-0x919e(%eax),%eax
0000960a	movl	%eax,0x04(%esp)
0000960e	movl	%edi,(%esp)
00009611	calll	CUtlBuffer::Printf(char const*, ...)
00009616	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc4(%ebp)
0000961d	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00009621	movl	0xb4(%ebp),%eax
00009624	jns	0x0000962b
00009626	movl	%eax,0xc8(%ebp)
00009629	jmp	0x00009669
0000962b	testl	%eax,%eax
0000962d	jne	0x0000963f
0000962f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00009636	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc8(%ebp)
0000963d	jmp	0x00009662
0000963f	movl	%eax,(%esp)
00009642	calll	_free
00009647	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xb8(%ebp)
0000964e	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc0(%ebp)
00009652	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00009659	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xc8(%ebp)
00009660	js	0x00009669
00009662	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xbc(%ebp)
00009669	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
00009670	movl	0xd8(%ebp),%eax
00009673	cmpl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe0(%ebp)
00009677	jns	0x0000967e
00009679	movl	%eax,0xe8(%ebp)
0000967c	jmp	0x000096a6
0000967e	testl	%eax,%eax
00009680	je	0x00009691
00009682	movl	%eax,(%esp)
00009685	calll	_free
0000968a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
00009691	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
00009698	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
0000969f	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000096a6	addl	$0x5c,%esp
000096a9	popl	%esi
000096aa	popl	%edi
000096ab	popl	%ebx
000096ac	popl	%ebp
000096ad	ret
000096ae	testl	%edi,%edi
000096b0	je	0x000096c1
000096b2	movl	%edi,(%esp)
000096b5	calll	_free
000096ba	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xd8(%ebp)
000096c1	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000096c8	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
000096cf	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xdc(%ebp)
000096d6	movl	%esi,(%esp)
000096d9	calll	__Unwind_Resume
000096de	jmp	0x000094d2
000096e3	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::GetCRCFromBinaryBuffer(CUtlBuffer&, unsigned int&):
000096f0	pushl	%ebp
000096f1	movl	%esp,%ebp
000096f3	pushl	%ebx
000096f4	pushl	%edi
000096f5	pushl	%esi
000096f6	subl	$0x1c,%esp
000096f9	calll	0x000096fe
000096fe	popl	%edi
000096ff	movl	0x08(%ebp),%esi
00009702	movl	0x0c(%esi),%eax
00009705	movl	%eax,0xe4(%ebp)
00009708	testb	$0x01,0x15(%esi)
0000970c	jne	0x00009775
0000970e	movl	%esi,(%esp)
00009711	movl	$0x00000004,0x04(%esp)
00009719	calll	CUtlBuffer::CheckGet(int)
0000971e	cmpb	$0x01,%al
00009720	jne	0x00009767
00009722	movl	0x0c(%esi),%eax
00009725	movl	%eax,%edx
00009727	subl	0x20(%esi),%edx
0000972a	addl	(%esi),%edx
0000972c	testb	$0x01,0x34(%esi)
00009730	jne	0x00009736
00009732	movl	(%edx),%ecx
00009734	jmp	0x0000975c
00009736	leal	0xec(%ebp),%ecx
00009739	testl	%edx,%edx
0000973b	cmovnel	%edx,%ecx
0000973e	movzbl	0x03(%ecx),%edx
00009742	movzbl	0x02(%ecx),%ebx
00009746	shll	$0x08,%ebx
00009749	orl	%edx,%ebx
0000974b	movzbl	0x01(%ecx),%edx
0000974f	shll	$0x10,%edx
00009752	orl	%ebx,%edx
00009754	movzbl	(%ecx),%ecx
00009757	shll	$0x18,%ecx
0000975a	orl	%edx,%ecx
0000975c	movl	%ecx,0xec(%ebp)
0000975f	addl	$0x04,%eax
00009762	movl	%eax,0x0c(%esi)
00009765	jmp	0x00009798
00009767	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xec(%ebp)
0000976e	xorb	%bl,%bl
00009770	jmp	0x0000989f
00009775	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xec(%ebp)
0000977c	leal	0xec(%ebp),%eax
0000977f	movl	%eax,0x08(%esp)
00009783	leal	0x6928d-0x96fe(%edi),%eax
00009789	movl	%eax,0x04(%esp)
0000978d	movl	%esi,(%esp)
00009790	calll	CUtlBuffer::Scanf(char const*, ...)
00009795	movl	0xec(%ebp),%ecx
00009798	xorb	%bl,%bl
0000979a	cmpl	$0x64637662,%ecx
000097a0	jne	0x0000989f
000097a6	testb	$0x01,0x15(%esi)
000097aa	jne	0x000097e1
000097ac	movl	%esi,(%esp)
000097af	movl	$0x00000001,0x04(%esp)
000097b7	calll	CUtlBuffer::CheckGet(int)
000097bc	cmpb	$0x01,%al
000097be	jne	0x000097d6
000097c0	movl	(%esi),%eax
000097c2	movl	0x0c(%esi),%ecx
000097c5	movl	%ecx,%edx
000097c7	subl	0x20(%esi),%edx
000097ca	movb	(%eax,%edx),%al
000097cd	movb	%al,0xf3(%ebp)
000097d0	incl	%ecx
000097d1	movl	%ecx,0x0c(%esi)
000097d4	jmp	0x00009801
000097d6	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf3(%ebp)
000097da	xorb	%bl,%bl
000097dc	jmp	0x0000989f
000097e1	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf3(%ebp)
000097e5	leal	0xf3(%ebp),%eax
000097e8	movl	%eax,0x08(%esp)
000097ec	leal	0x6928a-0x96fe(%edi),%eax
000097f2	movl	%eax,0x04(%esp)
000097f6	movl	%esi,(%esp)
000097f9	calll	CUtlBuffer::Scanf(char const*, ...)
000097fe	movb	0xf3(%ebp),%al
00009801	xorb	%bl,%bl
00009803	cmpb	$0x04,%al
00009805	jne	0x0000989f
0000980b	testb	$0x01,0x15(%esi)
0000980f	jne	0x00009875
00009811	movl	%esi,(%esp)
00009814	movl	$0x00000004,0x04(%esp)
0000981c	calll	CUtlBuffer::CheckGet(int)
00009821	cmpb	$0x01,%al
00009823	jne	0x0000986a
00009825	movl	0x0c(%esi),%eax
00009828	movl	%eax,%edx
0000982a	subl	0x20(%esi),%edx
0000982d	addl	(%esi),%edx
0000982f	testb	$0x01,0x34(%esi)
00009833	jne	0x00009839
00009835	movl	(%edx),%ecx
00009837	jmp	0x0000985f
00009839	leal	0xe8(%ebp),%ecx
0000983c	testl	%edx,%edx
0000983e	cmovnel	%edx,%ecx
00009841	movzbl	0x03(%ecx),%edx
00009845	movzbl	0x02(%ecx),%edi
00009849	shll	$0x08,%edi
0000984c	orl	%edx,%edi
0000984e	movzbl	0x01(%ecx),%edx
00009852	shll	$0x10,%edx
00009855	orl	%edi,%edx
00009857	movzbl	(%ecx),%ecx
0000985a	shll	$0x18,%ecx
0000985d	orl	%edx,%ecx
0000985f	movl	%ecx,0xe8(%ebp)
00009862	addl	$0x04,%eax
00009865	movl	%eax,0x0c(%esi)
00009868	jmp	0x00009898
0000986a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
00009871	xorl	%ecx,%ecx
00009873	jmp	0x00009898
00009875	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe8(%ebp)
0000987c	leal	0xe8(%ebp),%eax
0000987f	movl	%eax,0x08(%esp)
00009883	leal	0x6928d-0x96fe(%edi),%eax
00009889	movl	%eax,0x04(%esp)
0000988d	movl	%esi,(%esp)
00009890	calll	CUtlBuffer::Scanf(char const*, ...)
00009895	movl	0xe8(%ebp),%ecx
00009898	movl	0x0c(%ebp),%eax
0000989b	movl	%ecx,(%eax)
0000989d	movb	$0x01,%bl
0000989f	movl	0xe4(%ebp),%eax
000098a2	movl	%eax,0x08(%esp)
000098a6	movl	%esi,(%esp)
000098a9	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0x04(%esp)
000098b1	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
000098b6	movzbl	%bl,%eax
000098b9	addl	$0x1c,%esp
000098bc	popl	%esi
000098bd	popl	%edi
000098be	popl	%ebx
000098bf	popl	%ebp
000098c0	ret
000098c1	nopl	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
CChoreoScene::RestoreFromBinaryBuffer(CUtlBuffer&, char const*, IChoreoStringPool*):
000098d0	pushl	%ebp
000098d1	movl	%esp,%ebp
000098d3	pushl	%ebx
000098d4	pushl	%edi
000098d5	pushl	%esi
000098d6	subl	$0x3c,%esp
000098d9	calll	0x000098de
000098de	popl	%edi
000098df	movl	0x10(%ebp),%eax
000098e2	movl	%eax,0x04(%esp)
000098e6	movl	0x08(%ebp),%ebx
000098e9	leal	0x00000188(%ebx),%eax
000098ef	movl	%eax,(%esp)
000098f2	movl	$0x00000080,0x08(%esp)
000098fa	calll	V_strncpy(char*, char const*, int)
000098ff	movl	0x0c(%ebp),%esi
00009902	testb	$0x01,0x15(%esi)
00009906	jne	0x00009972
00009908	movl	%esi,(%esp)
0000990b	movl	$0x00000004,0x04(%esp)
00009913	calll	CUtlBuffer::CheckGet(int)
00009918	cmpb	$0x01,%al
0000991a	jne	0x00009964
0000991c	movl	0x0c(%esi),%eax
0000991f	movl	%eax,%edx
00009921	subl	0x20(%esi),%edx
00009924	addl	(%esi),%edx
00009926	testb	$0x01,0x34(%esi)
0000992a	jne	0x00009930
0000992c	movl	(%edx),%edx
0000992e	jmp	0x00009959
00009930	leal	0xe4(%ebp),%ecx
00009933	testl	%edx,%edx
00009935	cmovnel	%edx,%ecx
00009938	movzbl	0x03(%ecx),%esi
0000993c	movzbl	0x02(%ecx),%edx
00009940	shll	$0x08,%edx
00009943	orl	%esi,%edx
00009945	movzbl	0x01(%ecx),%esi
00009949	shll	$0x10,%esi
0000994c	orl	%edx,%esi
0000994e	movzbl	(%ecx),%edx
00009951	shll	$0x18,%edx
00009954	orl	%esi,%edx
00009956	movl	0x0c(%ebp),%esi
00009959	movl	%edx,0xe4(%ebp)
0000995c	addl	$0x04,%eax
0000995f	movl	%eax,0x0c(%esi)
00009962	jmp	0x00009995
00009964	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
0000996b	xorb	%cl,%cl
0000996d	jmp	0x00009d26
00009972	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xe4(%ebp)
00009979	leal	0xe4(%ebp),%eax
0000997c	movl	%eax,0x08(%esp)
00009980	leal	0x6928d-0x98de(%edi),%eax
00009986	movl	%eax,0x04(%esp)
0000998a	movl	%esi,(%esp)
0000998d	calll	CUtlBuffer::Scanf(char const*, ...)
00009992	movl	0xe4(%ebp),%edx
00009995	xorb	%cl,%cl
00009997	cmpl	$0x64637662,%edx
0000999d	jne	0x00009d26
000099a3	testb	$0x01,0x15(%esi)
000099a7	jne	0x000099de
000099a9	movl	%esi,(%esp)
000099ac	movl	$0x00000001,0x04(%esp)
000099b4	calll	CUtlBuffer::CheckGet(int)
000099b9	cmpb	$0x01,%al
000099bb	jne	0x000099d3
000099bd	movl	(%esi),%eax
000099bf	movl	0x0c(%esi),%ecx
000099c2	movl	%ecx,%edx
000099c4	subl	0x20(%esi),%edx
000099c7	movb	(%eax,%edx),%al
000099ca	movb	%al,0xeb(%ebp)
000099cd	incl	%ecx
000099ce	movl	%ecx,0x0c(%esi)
000099d1	jmp	0x000099fe
000099d3	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xeb(%ebp)
000099d7	xorb	%cl,%cl
000099d9	jmp	0x00009d26
000099de	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xeb(%ebp)
000099e2	leal	0xeb(%ebp),%eax
000099e5	movl	%eax,0x08(%esp)
000099e9	leal	0x6928a-0x98de(%edi),%eax
000099ef	movl	%eax,0x04(%esp)
000099f3	movl	%esi,(%esp)
000099f6	calll	CUtlBuffer::Scanf(char const*, ...)
000099fb	movb	0xeb(%ebp),%al
000099fe	xorb	%cl,%cl
00009a00	cmpb	$0x04,%al
00009a02	jne	0x00009d26
00009a08	testb	$0x01,0x15(%esi)
00009a0c	jne	0x00009a73
00009a0e	movl	%esi,(%esp)
00009a11	movl	$0x00000004,0x04(%esp)
00009a19	calll	CUtlBuffer::CheckGet(int)
00009a1e	cmpb	$0x01,%al
00009a20	jne	0x00009a6a
00009a22	movl	0x0c(%esi),%eax
00009a25	movl	%eax,%edx
00009a27	subl	0x20(%esi),%edx
00009a2a	addl	(%esi),%edx
00009a2c	testb	$0x01,0x34(%esi)
00009a30	jne	0x00009a36
00009a32	movl	(%edx),%ecx
00009a34	jmp	0x00009a5f
00009a36	leal	0xec(%ebp),%ecx
00009a39	testl	%edx,%edx
00009a3b	cmovnel	%edx,%ecx
00009a3e	movzbl	0x03(%ecx),%edx
00009a42	movzbl	0x02(%ecx),%esi
00009a46	shll	$0x08,%esi
00009a49	orl	%edx,%esi
00009a4b	movzbl	0x01(%ecx),%edx
00009a4f	shll	$0x10,%edx
00009a52	orl	%esi,%edx
00009a54	movl	0x0c(%ebp),%esi
00009a57	movzbl	(%ecx),%ecx
00009a5a	shll	$0x18,%ecx
00009a5d	orl	%edx,%ecx
00009a5f	movl	%ecx,0xec(%ebp)
00009a62	addl	$0x04,%eax
00009a65	movl	%eax,0x0c(%esi)
00009a68	jmp	0x00009a93
00009a6a	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xec(%ebp)
00009a71	jmp	0x00009a93
00009a73	movl	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xec(%ebp)
00009a7a	leal	0xec(%ebp),%eax
00009a7d	movl	%eax,0x08(%esp)
00009a81	leal	0x6928d-0x98de(%edi),%eax
00009a87	movl	%eax,0x04(%esp)
00009a8b	movl	%esi,(%esp)
00009a8e	calll	CUtlBuffer::Scanf(char const*, ...)
00009a93	testb	$0x01,0x15(%esi)
00009a97	jne	0x00009ad2
00009a99	movl	%edi,0xd4(%ebp)
00009a9c	movl	%esi,(%esp)
00009a9f	movl	$0x00000001,0x04(%esp)
00009aa7	calll	CUtlBuffer::CheckGet(int)
00009aac	cmpb	$0x01,%al
00009aae	jne	0x00009ac8
00009ab0	movl	(%esi),%eax
00009ab2	movl	0x0c(%esi),%ecx
00009ab5	movl	%ecx,%edx
00009ab7	subl	0x20(%esi),%edx
00009aba	movb	(%eax,%edx),%al
00009abd	movb	%al,0xf1(%ebp)
00009ac0	incl	%ecx
00009ac1	movl	%ecx,0x0c(%esi)
00009ac4	movl	%esi,%edi
00009ac6	jmp	0x00009af7
00009ac8	movl	%esi,%edi
00009aca	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf1(%ebp)
00009ace	xorb	%al,%al
00009ad0	jmp	0x00009af7
00009ad2	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf1(%ebp)
00009ad6	leal	0xf1(%ebp),%eax
00009ad9	movl	%eax,0x08(%esp)
00009add	leal	0x69287-0x98de(%edi),%eax
00009ae3	movl	%edi,0xd4(%ebp)
00009ae6	movl	%eax,0x04(%esp)
00009aea	movl	%esi,(%esp)
00009aed	movl	%esi,%edi
00009aef	calll	CUtlBuffer::Scanf(char const*, ...)
00009af4	movb	0xf1(%ebp),%al
00009af7	movzbl	%al,%eax
00009afa	movl	%eax,0xd8(%ebp)
00009afd	movl	$0xffffffff,%esi
00009b02	jmp	0x00009b39
00009b04	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00009b10	movl	%ebx,(%esp)
00009b13	calll	CChoreoScene::AllocEvent()
00009b18	movl	0x14(%ebp),%ecx
00009b1b	movl	%ecx,0x0c(%esp)
00009b1f	movl	%ebx,0x08(%esp)
00009b23	movl	%edi,0x04(%esp)
00009b27	movl	%eax,(%esp)
00009b2a	calll	CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00009b2f	xorb	%cl,%cl
00009b31	testb	%al,%al
00009b33	je	0x00009d26
00009b39	incl	%esi
00009b3a	cmpl	0xd8(%ebp),%esi
00009b3d	jl	0x00009b10
00009b3f	movl	%edi,%esi
00009b41	testb	$0x01,0x15(%esi)
00009b45	jne	0x00009b79
00009b47	movl	%esi,(%esp)
00009b4a	movl	$0x00000001,0x04(%esp)
00009b52	calll	CUtlBuffer::CheckGet(int)
00009b57	cmpb	$0x01,%al
00009b59	jne	0x00009b71
00009b5b	movl	(%esi),%eax
00009b5d	movl	0x0c(%esi),%ecx
00009b60	movl	%ecx,%edx
00009b62	subl	0x20(%esi),%edx
00009b65	movb	(%eax,%edx),%al
00009b68	movb	%al,0xf2(%ebp)
00009b6b	incl	%ecx
00009b6c	movl	%ecx,0x0c(%esi)
00009b6f	jmp	0x00009b9c
00009b71	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf2(%ebp)
00009b75	xorb	%al,%al
00009b77	jmp	0x00009b9c
00009b79	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf2(%ebp)
00009b7d	leal	0xf2(%ebp),%eax
00009b80	movl	%eax,0x08(%esp)
00009b84	movl	0xd4(%ebp),%eax
00009b87	leal	0x69287-0x98de(%eax),%eax
00009b8d	movl	%eax,0x04(%esp)
00009b91	movl	%esi,(%esp)
00009b94	calll	CUtlBuffer::Scanf(char const*, ...)
00009b99	movb	0xf2(%ebp),%al
00009b9c	movzbl	%al,%edi
00009b9f	movl	$0xffffffff,%esi
00009ba4	jmp	0x00009bdc
00009ba6	nopw	%cs:ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))(%eax,%eax)
00009bb0	movl	%ebx,(%esp)
00009bb3	calll	CChoreoScene::AllocActor()
00009bb8	movl	0x14(%ebp),%ecx
00009bbb	movl	%ecx,0x0c(%esp)
00009bbf	movl	%ebx,0x08(%esp)
00009bc3	movl	0x0c(%ebp),%ecx
00009bc6	movl	%ecx,0x04(%esp)
00009bca	movl	%eax,(%esp)
00009bcd	calll	CChoreoActor::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
00009bd2	xorb	%cl,%cl
00009bd4	testb	%al,%al
00009bd6	je	0x00009d26
00009bdc	incl	%esi
00009bdd	cmpl	%edi,%esi
00009bdf	jl	0x00009bb0
00009be1	movl	0x14(%ebp),%eax
00009be4	movl	%eax,0x08(%esp)
00009be8	movl	0x0c(%ebp),%eax
00009beb	movl	%eax,0x04(%esp)
00009bef	leal	0x0000012c(%ebx),%eax
00009bf5	movl	%eax,(%esp)
00009bf8	calll	CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*)
00009bfd	xorb	%cl,%cl
00009bff	testb	%al,%al
00009c01	je	0x00009d26
00009c07	movl	0x0c(%ebp),%esi
00009c0a	testb	$0x01,0x15(%esi)
00009c0e	jne	0x00009c47
00009c10	movl	%esi,(%esp)
00009c13	movl	$0x00000001,0x04(%esp)
00009c1b	calll	CUtlBuffer::CheckGet(int)
00009c20	cmpb	$0x01,%al
00009c22	movl	%esi,%edi
00009c24	movl	0xd4(%ebp),%esi
00009c27	jne	0x00009c3f
00009c29	movl	(%edi),%eax
00009c2b	movl	0x0c(%edi),%ecx
00009c2e	movl	%ecx,%edx
00009c30	subl	0x20(%edi),%edx
00009c33	movb	(%eax,%edx),%al
00009c36	movb	%al,0xf3(%ebp)
00009c39	incl	%ecx
00009c3a	movl	%ecx,0x0c(%edi)
00009c3d	jmp	0x00009c6c
00009c3f	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf3(%ebp)
00009c43	xorb	%al,%al
00009c45	jmp	0x00009c6c
00009c47	movb	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...)),0xf3(%ebp)
00009c4b	leal	0xf3(%ebp),%eax
00009c4e	movl	%eax,0x08(%esp)
00009c52	movl	%esi,%ecx
00009c54	movl	0xd4(%ebp),%esi
00009c57	leal	0x69287-0x98de(%esi),%eax
00009c5d	movl	%eax,0x04(%esp)
00009c61	movl	%ecx,(%esp)
00009c64	calll	CUtlBuffer::Scanf(char const*, ...)
00009c69	movb	0xf3(%ebp),%al
00009c6c	movb	0x0000020c(%ebx),%cl
00009c72	andb	$0xfd,%cl
00009c75	testb	%al,%al
00009c77	setne	%al
00009c7a	addb	%al,%al
00009c7c	orb	%cl,%al
00009c7e	movb	%al,0x0000020c(%ebx)
00009c84	movl	%ebx,(%esp)
00009c87	calll	CChoreoScene::ReconcileCloseCaption()
00009c8c	movl	%ebx,(%esp)
00009c8f	calll	CChoreoScene::InternalDetermineEventTypes()
00009c94	movb	$0x01,%cl
00009c96	testb	$0x01,CChoreoScene::s_bEditingDisabled-0x98de(%esi)
00009c9d	je	0x00009d26
00009ca3	movl	0x08(%ebp),%eax
00009ca6	movss	0x00000214(%eax),%xmm0
00009cae	pxor	%xmm1,%xmm1
00009cb2	ucomiss	%xmm0,%xmm1
00009cb5	jne	0x00009d19
00009cb7	jp	0x00009d19
00009cb9	movl	0x08(%ebp),%eax
00009cbc	movl	0x10(%eax),%edi
00009cbf	testl	%edi,%edi
00009cc1	pxor	%xmm0,%xmm0
00009cc5	jle	0x00009d19
00009cc7	pxor	%xmm1,%xmm1
00009ccb	xorl	%ebx,%ebx
00009ccd	nopl	(%eax)
00009cd0	movss	%xmm1,0xd8(%ebp)
00009cd5	movl	0x08(%ebp),%eax
00009cd8	movl	0x04(%eax),%eax
00009cdb	movl	(%eax,%ebx,4),%esi
00009cde	movl	%esi,(%esp)
00009ce1	calll	CChoreoEvent::HasEndTime()
00009ce6	testb	%al,%al
00009ce8	je	0x00009cfc
00009cea	movl	%esi,(%esp)
00009ced	calll	CChoreoEvent::GetEndTime()
00009cf2	fstps	0xdc(%ebp)
00009cf5	movss	0xdc(%ebp),%xmm0
00009cfa	jmp	0x00009d0c
00009cfc	movl	%esi,(%esp)
00009cff	calll	CChoreoEvent::GetStartTime()
00009d04	fstps	0xe0(%ebp)
00009d07	movss	0xe0(%ebp),%xmm0
00009d0c	maxss	0xd8(%ebp),%xmm0
00009d11	incl	%ebx
00009d12	cmpl	%ebx,%edi
00009d14	movaps	%xmm0,%xmm1
00009d17	jne	0x00009cd0
00009d19	movl	0x08(%ebp),%eax
00009d1c	movss	%xmm0,0x00000214(%eax)
00009d24	movb	$0x01,%cl
00009d26	movzbl	%cl,%eax
00009d29	addl	$0x3c,%esp
00009d2c	popl	%esi
00009d2d	popl	%edi
00009d2e	popl	%ebx
00009d2f	popl	%ebp
00009d30	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(sceneimage.o):
(__TEXT,__text) section
FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x5c,%esp
00000009	calll	0x0000000e
0000000e	popl	%esi
0000000f	movl	0x57415-0xe(%esi),%eax
00000015	movl	%eax,0xac(%ebp)
00000018	movl	(%eax),%eax
0000001a	movl	%eax,0xf0(%ebp)
0000001d	movl	0x08(%ebp),%edi
00000020	testl	%edi,%edi
00000022	je	0x0000019a
00000028	movl	%edi,(%esp)
0000002b	calll	CChoreoEvent::GetType()
00000030	cmpl	$0x05,%eax
00000033	jne	0x0000019a
00000039	movl	0x0c(%ebp),%ebx
0000003c	movl	%edi,(%esp)
0000003f	calll	CChoreoEvent::GetParameters()
00000044	movl	%eax,0x04(%esp)
00000048	leal	_g_ChoreoStringPool-0xe(%esi),%eax
0000004e	movl	%eax,0xa8(%ebp)
00000051	movl	%eax,(%esp)
00000054	calll	CChoreoStringPool::FindOrAddString(char const*)
00000059	movw	%ax,%si
0000005c	movl	0x0c(%ebx),%edi
0000005f	xorl	%eax,%eax
00000061	jmp	0x00000071
00000063	nopl	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000070	incl	%eax
00000071	cmpl	%edi,%eax
00000073	jge	0x00000082
00000075	movl	(%ebx),%ecx
00000077	cmpw	%si,(%ecx,%eax,2)
0000007b	jne	0x00000070
0000007d	cmpl	$0xff,%eax
00000080	jne	0x000000da
00000082	movl	0x04(%ebx),%eax
00000085	leal	0x01(%edi),%edx
00000088	cmpl	%eax,%edx
0000008a	movl	%edi,%ecx
0000008c	jle	0x000000a7
0000008e	movl	%edx,%ecx
00000090	subl	%eax,%ecx
00000092	movl	%ecx,0x04(%esp)
00000096	movl	%ebx,(%esp)
00000099	movl	%edx,0xa4(%ebp)
0000009c	calll	CUtlMemory<short, int>::Grow(int)
000000a1	movl	0xa4(%ebp),%edx
000000a4	movl	0x0c(%ebx),%ecx
000000a7	incl	%ecx
000000a8	movl	%ecx,0x0c(%ebx)
000000ab	movl	(%ebx),%eax
000000ad	movl	%eax,0x10(%ebx)
000000b0	subl	%edi,%ecx
000000b2	decl	%ecx
000000b3	testl	%ecx,%ecx
000000b5	jle	0x000000d1
000000b7	addl	%ecx,%ecx
000000b9	movl	%ecx,0x08(%esp)
000000bd	leal	(%eax,%edi,2),%ecx
000000c0	movl	%ecx,0x04(%esp)
000000c4	leal	(%eax,%edx,2),%eax
000000c7	movl	%eax,(%esp)
000000ca	calll	_memmove
000000cf	movl	(%ebx),%eax
000000d1	addl	%edi,%edi
000000d3	addl	%eax,%edi
000000d5	je	0x000000da
000000d7	movw	%si,(%edi)
000000da	movl	0x08(%ebp),%edi
000000dd	movl	%edi,(%esp)
000000e0	calll	CChoreoEvent::GetCloseCaptionType() const
000000e5	testl	%eax,%eax
000000e7	jne	0x0000019a
000000ed	leal	0xb0(%ebp),%esi
000000f0	movl	%esi,0x04(%esp)
000000f4	movl	%edi,(%esp)
000000f7	movl	$0x00000040,0x08(%esp)
000000ff	calll	CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int)
00000104	cmpb	$0x01,%al
00000106	jne	0x0000019a
0000010c	movl	%esi,0x04(%esp)
00000110	movl	0xa8(%ebp),%eax
00000113	movl	%eax,(%esp)
00000116	calll	CChoreoStringPool::FindOrAddString(char const*)
0000011b	movw	%ax,%si
0000011e	movl	0x0c(%ebx),%edi
00000121	xorl	%eax,%eax
00000123	jmp	0x00000131
00000125	nopl	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000130	incl	%eax
00000131	cmpl	%edi,%eax
00000133	jge	0x00000142
00000135	movl	(%ebx),%ecx
00000137	cmpw	%si,(%ecx,%eax,2)
0000013b	jne	0x00000130
0000013d	cmpl	$0xff,%eax
00000140	jne	0x0000019a
00000142	movl	0x04(%ebx),%eax
00000145	leal	0x01(%edi),%edx
00000148	cmpl	%eax,%edx
0000014a	movl	%edi,%ecx
0000014c	jle	0x00000167
0000014e	movl	%edx,%ecx
00000150	subl	%eax,%ecx
00000152	movl	%ecx,0x04(%esp)
00000156	movl	%ebx,(%esp)
00000159	movl	%edx,0xa8(%ebp)
0000015c	calll	CUtlMemory<short, int>::Grow(int)
00000161	movl	0xa8(%ebp),%edx
00000164	movl	0x0c(%ebx),%ecx
00000167	incl	%ecx
00000168	movl	%ecx,0x0c(%ebx)
0000016b	movl	(%ebx),%eax
0000016d	movl	%eax,0x10(%ebx)
00000170	subl	%edi,%ecx
00000172	decl	%ecx
00000173	testl	%ecx,%ecx
00000175	jle	0x00000191
00000177	addl	%ecx,%ecx
00000179	movl	%ecx,0x08(%esp)
0000017d	leal	(%eax,%edi,2),%ecx
00000180	movl	%ecx,0x04(%esp)
00000184	leal	(%eax,%edx,2),%eax
00000187	movl	%eax,(%esp)
0000018a	calll	_memmove
0000018f	movl	(%ebx),%eax
00000191	addl	%edi,%edi
00000193	addl	%eax,%edi
00000195	je	0x0000019a
00000197	movw	%si,(%edi)
0000019a	movl	0xac(%ebp),%eax
0000019d	movl	(%eax),%eax
0000019f	cmpl	0xf0(%ebp),%eax
000001a2	jne	0x000001ac
000001a4	addl	$0x5c,%esp
000001a7	popl	%esi
000001a8	popl	%edi
000001a9	popl	%ebx
000001aa	popl	%ebp
000001ab	ret
000001ac	calll	___stack_chk_fail
000001b1	nopl	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
CreateTargetFile_VCD(char const*, char const*, bool, bool):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%ebx
000001c4	pushl	%edi
000001c5	pushl	%esi
000001c6	subl	$0x7c,%esp
000001c9	calll	0x000001ce
000001ce	popl	%edi
000001cf	leal	0xb8(%ebp),%esi
000001d2	movl	%esi,(%esp)
000001d5	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x0c(%esp)
000001dd	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x08(%esp)
000001e5	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x04(%esp)
000001ed	calll	CUtlBuffer::CUtlBuffer(int, int, int)
000001f2	movl	0x5741d-0x1ce(%edi),%eax
000001f8	movl	(%eax),%ecx
000001fa	movl	(%ecx),%eax
000001fc	movl	(%eax),%eax
000001fe	movl	0x08(%ebp),%edx
00000201	movl	%esi,0x08(%esp)
00000205	movl	%edx,0x04(%esp)
00000209	movl	%ecx,(%esp)
0000020c	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x10(%esp)
00000214	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x0c(%esp)
0000021c	call	*%eax
0000021e	xorb	%bl,%bl
00000220	testb	%al,%al
00000222	je	0x0000047d
00000228	leal	0xb4(%ebp),%esi
0000022b	movl	%esi,(%esp)
0000022e	calll	CRC32_Init(unsigned int*)
00000233	movl	0xb8(%ebp),%eax
00000236	movl	0xd4(%ebp),%ecx
00000239	movl	%ecx,0x08(%esp)
0000023d	movl	%eax,0x04(%esp)
00000241	movl	%esi,(%esp)
00000244	calll	CRC32_ProcessBuffer(unsigned int*, void const*, int)
00000249	movl	%esi,(%esp)
0000024c	calll	CRC32_Final(unsigned int*)
00000251	movl	0xb8(%ebp),%eax
00000254	movl	0xd4(%ebp),%ecx
00000257	movl	%ecx,0x04(%esp)
0000025b	movl	%eax,(%esp)
0000025e	calll	ParseFromMemory(char*, int)
00000263	movl	0x57409-0x1ce(%edi),%eax
00000269	movl	%eax,0x0c(%esp)
0000026d	leal	g_SceneTokenProcessor-0x1ce(%edi),%eax
00000273	movl	%edi,%esi
00000275	movl	%eax,0x08(%esp)
00000279	movl	0x08(%ebp),%eax
0000027c	movl	%eax,(%esp)
0000027f	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x04(%esp)
00000287	calll	ChoreoLoadScene(char const*, IChoreoEventCallback*, ISceneTokenProcessor*, void (*)(char const*, ...))
0000028c	movl	%eax,0x94(%ebp)
0000028f	xorb	%bl,%bl
00000291	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x94(%ebp)
00000295	je	0x0000047d
0000029b	movl	_g_SceneFiles-0x1ce+0x0000000c(%esi),%eax
000002a1	movl	%eax,0x04(%esp)
000002a5	leal	_g_SceneFiles-0x1ce(%esi),%eax
000002ab	movl	%eax,(%esp)
000002ae	calll	CUtlVector<SceneFile_t, CUtlMemory<SceneFile_t, int> >::InsertBefore(int)
000002b3	imull	$0x60,%eax,%edi
000002b6	movl	_g_SceneFiles-0x1ce(%esi),%eax
000002bc	addl	%edi,%eax
000002be	movl	0x08(%ebp),%ecx
000002c1	movl	%ecx,0x04(%esp)
000002c5	movl	%eax,(%esp)
000002c8	calll	CUtlString::Set(char const*)
000002cd	xorl	%ebx,%ebx
000002cf	nop
000002d0	movl	0x94(%ebp),%eax
000002d3	movl	%eax,(%esp)
000002d6	calll	CChoreoScene::GetNumEvents()
000002db	cmpl	%eax,%ebx
000002dd	jge	0x00000315
000002df	movl	%ebx,0x04(%esp)
000002e3	movl	0x94(%ebp),%eax
000002e6	movl	%eax,(%esp)
000002e9	calll	CChoreoScene::GetEvent(int)
000002ee	movl	_g_SceneFiles-0x1ce(%esi),%ecx
000002f4	leal	0x4c(%ecx,%edi),%ecx
000002f8	movl	%ecx,0x04(%esp)
000002fc	movl	%eax,(%esp)
000002ff	calll	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)
00000304	incl	%ebx
00000305	jmp	0x000002d0
00000307	movl	%eax,%edi
00000309	jmp	0x000004b5
0000030e	movl	%eax,%edi
00000310	jmp	0x000004b5
00000315	movl	0x94(%ebp),%eax
00000318	movl	%eax,(%esp)
0000031b	calll	CChoreoScene::FindStopTime()
00000320	fstps	0xac(%ebp)
00000323	movss	0xac(%ebp),%xmm0
00000328	mulss	0x518b4-0x1ce(%esi),%xmm0
00000330	addss	0x518b8-0x1ce(%esi),%xmm0
00000338	movss	%xmm0,0xa0(%ebp)
0000033d	flds	0xa0(%ebp)
00000340	fisttpll	0x98(%ebp)
00000343	movl	_g_SceneFiles-0x1ce(%esi),%eax
00000349	movl	0x98(%ebp),%ecx
0000034c	movl	%ecx,0x48(%eax,%edi)
00000350	movl	_g_SceneFiles-0x1ce(%esi),%eax
00000356	movb	0x14(%ebp),%cl
00000359	xorb	$0x01,%cl
0000035c	movzbl	%cl,%ecx
0000035f	movl	%ecx,0x04(%esp)
00000363	leal	0x10(%eax,%edi),%eax
00000367	movl	%eax,(%esp)
0000036a	calll	CUtlBuffer::SetBigEndian(bool)
0000036f	movl	_g_SceneFiles-0x1ce(%esi),%eax
00000375	movl	0xb4(%ebp),%ecx
00000378	leal	_g_ChoreoStringPool-0x1ce(%esi),%edx
0000037e	movl	%edx,0x0c(%esp)
00000382	movl	%ecx,0x08(%esp)
00000386	leal	0x10(%eax,%edi),%eax
0000038a	movl	%eax,0x04(%esp)
0000038e	movl	0x94(%ebp),%eax
00000391	movl	%eax,(%esp)
00000394	calll	CChoreoScene::SaveToBinaryBuffer(CUtlBuffer&, unsigned int, IChoreoStringPool*)
00000399	movl	_g_SceneFiles-0x1ce(%esi),%ecx
0000039f	movl	0x10(%ecx,%edi),%eax
000003a3	movl	0x2c(%ecx,%edi),%ecx
000003a7	leal	0xb0(%ebp),%edx
000003aa	movl	%edx,0x08(%esp)
000003ae	movl	%ecx,0x04(%esp)
000003b2	movl	%eax,(%esp)
000003b5	movl	$0x00000012,0x0c(%esp)
000003bd	calll	LZMA_Compress(unsigned char*, unsigned int, unsigned int*, unsigned int)
000003c2	testl	%eax,%eax
000003c4	movl	%eax,0x90(%ebp)
000003c7	je	0x00000468
000003cd	movl	_g_SceneFiles-0x1ce(%esi),%ebx
000003d3	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x1c(%ebx,%edi)
000003db	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x20(%ebx,%edi)
000003e3	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x30(%ebx,%edi)
000003eb	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x2c(%ebx,%edi)
000003f3	movb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x24(%ebx,%edi)
000003f8	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x18(%ebx,%edi)
000003fd	js	0x00000427
000003ff	movl	0x10(%ebx,%edi),%eax
00000403	testl	%eax,%eax
00000405	je	0x0000041f
00000407	leal	0x10(%ebx,%edi),%ecx
0000040b	movl	%ecx,0x8c(%ebp)
0000040e	movl	%eax,(%esp)
00000411	calll	_free
00000416	movl	0x8c(%ebp),%eax
00000419	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),(%eax)
0000041f	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebx,%edi)
00000427	movl	_g_SceneFiles-0x1ce(%esi),%eax
0000042d	movl	0xb0(%ebp),%ecx
00000430	movl	%ecx,0x04(%esp)
00000434	leal	0x10(%eax,%edi),%eax
00000438	movl	%eax,(%esp)
0000043b	calll	CUtlBuffer::EnsureCapacity(int)
00000440	movl	0x90(%ebp),%ebx
00000443	movl	_g_SceneFiles-0x1ce(%esi),%eax
00000449	movl	0xb0(%ebp),%ecx
0000044c	movl	%ecx,0x08(%esp)
00000450	movl	%ebx,0x04(%esp)
00000454	leal	0x10(%eax,%edi),%eax
00000458	movl	%eax,(%esp)
0000045b	calll	CUtlBuffer::Put(void const*, int)
00000460	movl	%ebx,(%esp)
00000463	calll	_free
00000468	movl	0x94(%ebp),%esi
0000046b	movl	%esi,(%esp)
0000046e	calll	CChoreoScene::~CChoreoScene()
00000473	movl	%esi,(%esp)
00000476	calll	operator delete(void*)
0000047b	movb	$0x01,%bl
0000047d	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xc0(%ebp)
00000481	js	0x000004a0
00000483	movl	0xb8(%ebp),%eax
00000486	testl	%eax,%eax
00000488	je	0x00000499
0000048a	movl	%eax,(%esp)
0000048d	calll	_free
00000492	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xb8(%ebp)
00000499	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xbc(%ebp)
000004a0	movzbl	%bl,%eax
000004a3	addl	$0x7c,%esp
000004a6	popl	%esi
000004a7	popl	%edi
000004a8	popl	%ebx
000004a9	popl	%ebp
000004aa	ret
000004ab	movl	%eax,%edi
000004ad	movl	%esi,(%esp)
000004b0	calll	operator delete(void*)
000004b5	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xc0(%ebp)
000004b9	js	0x000004d8
000004bb	movl	0xb8(%ebp),%eax
000004be	testl	%eax,%eax
000004c0	je	0x000004d1
000004c2	movl	%eax,(%esp)
000004c5	calll	_free
000004ca	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xb8(%ebp)
000004d1	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xbc(%ebp)
000004d8	movl	%edi,(%esp)
000004db	calll	__Unwind_Resume
CSceneImage::CreateSceneImageFile(CUtlBuffer&, char const*, bool, bool, ISceneCompileStatus*):
000004e0	pushl	%ebp
000004e1	movl	%esp,%ebp
000004e3	pushl	%ebx
000004e4	pushl	%edi
000004e5	pushl	%esi
000004e6	subl	$0x0000056c,%esp
000004ec	calll	0x000004f1
000004f1	popl	%ebx
000004f2	movl	0x57415-0x4f1(%ebx),%eax
000004f8	movl	%eax,0xfffffaa0(%ebp)
000004fe	movl	(%eax),%eax
00000500	movl	%eax,0xf0(%ebp)
00000503	xorps	%xmm0,%xmm0
00000506	movaps	%xmm0,0xfffffbc8(%ebp)
0000050d	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd8(%ebp)
00000517	leal	0xfffffb90(%ebp),%eax
0000051d	movl	%eax,(%esp)
00000520	movl	$0x00000001,0x0c(%esp)
00000528	movl	$0x00000020,0x08(%esp)
00000530	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x04(%esp)
00000538	calll	CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
0000053d	leal	0x51a7d-0x4f1(%ebx),%eax
00000543	movl	%eax,(%esp)
00000546	calll	_Msg
0000054b	movl	0x57419-0x4f1(%ebx),%eax
00000551	movl	(%eax),%ecx
00000553	movl	(%ecx),%eax
00000555	movl	0x34(%eax),%eax
00000558	leal	0xfffffdf0(%ebp),%esi
0000055e	movl	%esi,0x0c(%esp)
00000562	leal	0x51a7f-0x4f1(%ebx),%edx
00000568	movl	%edx,0x04(%esp)
0000056c	movl	%ecx,(%esp)
0000056f	movl	$0x00000200,0x10(%esp)
00000577	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x08(%esp)
0000057f	call	*%eax
00000581	leal	0x51a84-0x4f1(%ebx),%eax
00000587	movl	%eax,0xfffffac4(%ebp)
0000058d	movl	%ebx,%edi
0000058f	movl	%eax,0x04(%esp)
00000593	movl	%esi,(%esp)
00000596	nopw	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
000005a0	calll	_strtok
000005a5	movl	0xfffffbd4(%ebp),%ebx
000005ab	testl	%eax,%eax
000005ad	je	0x0000064f
000005b3	leal	0xfffffcec(%ebp),%esi
000005b9	movl	%esi,0x08(%esp)
000005bd	leal	0x51a86-0x4f1(%edi),%ecx
000005c3	movl	%ecx,0x04(%esp)
000005c7	movl	%eax,(%esp)
000005ca	movl	$0x00000104,0x0c(%esp)
000005d2	calll	V_ComposeFileName(char const*, char const*, char*, int)
000005d7	movl	0x5741d-0x4f1(%edi),%eax
000005dd	movl	(%eax),%ecx
000005df	movl	(%ecx),%eax
000005e1	movl	0x08(%eax),%eax
000005e4	leal	0xfffffbc8(%ebp),%edx
000005ea	movl	%edx,0x0c(%esp)
000005ee	movl	%esi,0x04(%esp)
000005f2	movl	%ecx,(%esp)
000005f5	movl	$0x00000001,0x08(%esp)
000005fd	call	*%eax
000005ff	movl	0xfffffbd4(%ebp),%eax
00000605	subl	%ebx,%eax
00000607	movl	%eax,0x08(%esp)
0000060b	movl	%esi,0x04(%esp)
0000060f	leal	0x51a93-0x4f1(%edi),%eax
00000615	movl	%eax,(%esp)
00000618	calll	_Msg
0000061d	movl	0xfffffac4(%ebp),%eax
00000623	movl	%eax,0x04(%esp)
00000627	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),(%esp)
0000062e	jmp	0x000005a0
00000633	movl	%eax,%ebx
00000635	jmp	0x00001438
0000063a	movl	%eax,%ebx
0000063c	jmp	0x0000142a
00000641	movl	%eax,%ebx
00000643	jmp	0x0000142a
00000648	movl	%eax,%ebx
0000064a	jmp	0x0000142a
0000064f	testl	%ebx,%ebx
00000651	movl	%edi,%ecx
00000653	jne	0x0000066a
00000655	xorb	%bl,%bl
00000657	leal	0x51abe-0x4f1(%ecx),%eax
0000065d	movl	%eax,(%esp)
00000660	calll	_Msg
00000665	jmp	0x00001364
0000066a	leal	0x51add-0x4f1(%ecx),%eax
00000670	movl	%eax,0x04(%esp)
00000674	movl	0x10(%ebp),%eax
00000677	movl	%eax,(%esp)
0000067a	movl	%ecx,%esi
0000067c	calll	V_stristr(char const*, char const*)
00000681	movl	%esi,0xfffffac0(%ebp)
00000687	testl	%eax,%eax
00000689	sete	%al
0000068c	orb	0x14(%ebp),%al
0000068f	movb	%al,0xfffffabc(%ebp)
00000695	xorl	%ebx,%ebx
00000697	xorl	%eax,%eax
00000699	nopl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax)
000006a0	cmpl	0xfffffbd4(%ebp),%eax
000006a6	jge	0x000007c6
000006ac	movl	%eax,0xfffffac4(%ebp)
000006b2	movl	0xfffffbc8(%ebp),%eax
000006b8	addl	%ebx,%eax
000006ba	movl	%eax,(%esp)
000006bd	calll	CUtlString::Get() const
000006c2	movl	%eax,%esi
000006c4	movl	0xfffffac0(%ebp),%eax
000006ca	leal	0x51ae1-0x4f1(%eax),%eax
000006d0	movl	%eax,0x04(%esp)
000006d4	movl	%esi,(%esp)
000006d7	calll	V_stristr(char const*, char const*)
000006dc	movl	%eax,%edi
000006de	testl	%edi,%edi
000006e0	je	0x000007b7
000006e6	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffabc(%ebp)
000006ed	jne	0x0000070f
000006ef	movl	0xfffffac0(%ebp),%eax
000006f5	leal	0x51ae9-0x4f1(%eax),%eax
000006fb	movl	%eax,0x04(%esp)
000006ff	movl	%edi,(%esp)
00000702	calll	V_stristr(char const*, char const*)
00000707	testl	%eax,%eax
00000709	jne	0x000007b7
0000070f	movl	%edi,0x08(%esp)
00000713	leal	0xfffffb90(%ebp),%eax
00000719	movl	%eax,0x04(%esp)
0000071d	leal	0xfffffb88(%ebp),%eax
00000723	movl	%eax,(%esp)
00000726	calll	CUtlSymbolTable::Find(char const*) const
0000072b	subl	$0x04,%esp
0000072e	cmpw	$0xff,0xfffffb88(%ebp)
00000736	jne	0x000007b7
00000738	movl	%edi,0x08(%esp)
0000073c	leal	0xfffffb90(%ebp),%eax
00000742	movl	%eax,0x04(%esp)
00000746	leal	0xfffffb80(%ebp),%eax
0000074c	movl	%eax,(%esp)
0000074f	calll	CUtlSymbolTable::AddString(char const*)
00000754	subl	$0x04,%esp
00000757	movl	0x1c(%ebp),%edx
0000075a	movl	(%edx),%eax
0000075c	movl	(%eax),%eax
0000075e	movl	0xfffffbd4(%ebp),%ecx
00000764	movl	%ecx,0x10(%esp)
00000768	movl	0xfffffac4(%ebp),%ecx
0000076e	movl	%ecx,0x0c(%esp)
00000772	movzbl	0x18(%ebp),%ecx
00000776	movl	%ecx,0x08(%esp)
0000077a	movl	%esi,0x04(%esp)
0000077e	movl	%edx,(%esp)
00000781	call	*%eax
00000783	movzbl	0x14(%ebp),%eax
00000787	movl	%eax,0x0c(%esp)
0000078b	movl	%esi,(%esp)
0000078e	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x08(%esp)
00000796	calll	CreateTargetFile_VCD(char const*, char const*, bool, bool)
0000079b	testb	%al,%al
0000079d	jne	0x000007b7
0000079f	movl	%esi,0x04(%esp)
000007a3	movl	0xfffffac0(%ebp),%eax
000007a9	leal	0x51af0-0x4f1(%eax),%eax
000007af	movl	%eax,(%esp)
000007b2	calll	_Error
000007b7	addl	$0x14,%ebx
000007ba	movl	0xfffffac4(%ebp),%eax
000007c0	incl	%eax
000007c1	jmp	0x000006a0
000007c6	movb	$0x01,%bl
000007c8	movl	0xfffffac0(%ebp),%ecx
000007ce	movl	_g_SceneFiles-0x4f1+0x0000000c(%ecx),%eax
000007d4	testl	%eax,%eax
000007d6	je	0x00001364
000007dc	movl	%eax,0x04(%esp)
000007e0	leal	0x51b22-0x4f1(%ecx),%eax
000007e6	movl	%eax,(%esp)
000007e9	calll	_Msg
000007ee	xorps	%xmm0,%xmm0
000007f1	movaps	%xmm0,0xfffffb68(%ebp)
000007f8	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb78(%ebp)
00000802	leal	0xfffffb30(%ebp),%esi
00000808	movl	%esi,(%esp)
0000080b	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x0c(%esp)
00000813	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x08(%esp)
0000081b	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x04(%esp)
00000823	calll	CUtlBuffer::CUtlBuffer(int, int, int)
00000828	movl	%esi,0x08(%esp)
0000082c	leal	0xfffffb68(%ebp),%eax
00000832	movl	%eax,0x04(%esp)
00000836	movl	0xfffffac0(%ebp),%eax
0000083c	leal	_g_ChoreoStringPool-0x4f1(%eax),%eax
00000842	movl	%eax,(%esp)
00000845	calll	CChoreoStringPool::GetTableAndPool(CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >&, CUtlBuffer&)
0000084a	movl	0xfffffb74(%ebp),%ebx
00000850	cmpb	$0x01,0x18(%ebp)
00000854	je	0x00000893
00000856	leal	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(,%ebx,4),%eax
0000085d	movl	%eax,0x04(%esp)
00000861	movl	0xfffffac0(%ebp),%eax
00000867	leal	0x51b48-0x4f1(%eax),%eax
0000086d	movl	%eax,(%esp)
00000870	calll	_Msg
00000875	movl	0xfffffb4c(%ebp),%eax
0000087b	movl	%eax,0x04(%esp)
0000087f	movl	0xfffffac0(%ebp),%eax
00000885	leal	0x51b68-0x4f1(%eax),%eax
0000088b	movl	%eax,(%esp)
0000088e	calll	_Msg
00000893	leal	0x00000014(,%ebx,4),%eax
0000089a	movl	%eax,0xfffffabc(%ebp)
000008a0	movl	0xfffffb4c(%ebp),%ecx
000008a6	addl	%eax,%ecx
000008a8	movl	0xfffffac0(%ebp),%eax
000008ae	movl	_g_SceneFiles-0x4f1+0x0000000c(%eax),%esi
000008b4	xorps	%xmm0,%xmm0
000008b7	movaps	%xmm0,0xfffffb18(%ebp)
000008be	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb28(%ebp)
000008c8	movl	$0x46495356,0xfffffb18(%ebp)
000008d2	movl	$0x00000002,0xfffffb1c(%ebp)
000008dc	movl	%esi,0xfffffb20(%ebp)
000008e2	movl	%ebx,0xfffffb24(%ebp)
000008e8	movl	%ecx,0xfffffb28(%ebp)
000008ee	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebp)
000008f2	jne	0x00000926
000008f4	movl	$0x56534946,0xfffffb18(%ebp)
000008fe	movl	$0x02000000,0xfffffb1c(%ebp)
00000908	movl	%esi,%eax
0000090a	bswap	%eax
0000090c	movl	%eax,0xfffffb20(%ebp)
00000912	movl	%ebx,%eax
00000914	bswap	%eax
00000916	movl	%eax,0xfffffb24(%ebp)
0000091c	movl	%ecx,%eax
0000091e	bswap	%eax
00000920	movl	%eax,0xfffffb28(%ebp)
00000926	movl	%ecx,%edi
00000928	leal	0xfffffb18(%ebp),%eax
0000092e	movl	%eax,0x04(%esp)
00000932	movl	0x0c(%ebp),%eax
00000935	movl	%eax,(%esp)
00000938	movl	$0x00000014,0x08(%esp)
00000940	calll	CUtlBuffer::Put(void const*, int)
00000945	movl	%ebx,0xfffffac4(%ebp)
0000094b	shll	$0x04,%esi
0000094e	addl	%esi,%edi
00000950	xorl	%ebx,%ebx
00000952	movl	0xfffffb68(%ebp),%eax
00000958	movl	%eax,0xfffffab8(%ebp)
0000095e	nop
00000960	cmpl	0xfffffac4(%ebp),%ebx
00000966	jge	0x00000a21
0000096c	movl	0xfffffab8(%ebp),%eax
00000972	movl	(%eax,%ebx,4),%esi
00000975	addl	0xfffffabc(%ebp),%esi
0000097b	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebp)
0000097f	jne	0x00000983
00000981	bswap	%esi
00000983	movl	0x0c(%ebp),%ecx
00000986	testb	$0x01,0x15(%ecx)
0000098a	jne	0x000009ff
0000098c	movl	%ecx,(%esp)
0000098f	movl	$0x00000004,0x04(%esp)
00000997	calll	CUtlBuffer::CheckPut(int)
0000099c	cmpb	$0x01,%al
0000099e	jne	0x00000a1b
000009a0	movl	0x0c(%ebp),%ecx
000009a3	movl	0x10(%ecx),%eax
000009a6	subl	0x20(%ecx),%eax
000009a9	addl	(%ecx),%eax
000009ab	testb	$0x01,0x34(%ecx)
000009af	je	0x000009b7
000009b1	testl	%eax,%eax
000009b3	je	0x000009b9
000009b5	bswap	%esi
000009b7	movl	%esi,(%eax)
000009b9	addl	$0x04,0x10(%ecx)
000009bd	movl	%ecx,(%esp)
000009c0	calll	CUtlBuffer::AddNullTermination()
000009c5	jmp	0x00000a1b
000009c7	movl	%eax,%ebx
000009c9	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb74(%ebp)
000009d3	movl	0xfffffb68(%ebp),%eax
000009d9	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb70(%ebp)
000009e0	jns	0x000013f6
000009e6	movl	%eax,0xfffffb78(%ebp)
000009ec	jmp	0x0000142a
000009f1	movl	%eax,%ebx
000009f3	jmp	0x000012f6
000009f8	movl	%eax,%ebx
000009fa	jmp	0x000012f6
000009ff	movl	%esi,0x08(%esp)
00000a03	movl	0xfffffac0(%ebp),%eax
00000a09	leal	0x51c86-0x4f1(%eax),%eax
00000a0f	movl	%eax,0x04(%esp)
00000a13	movl	%ecx,(%esp)
00000a16	calll	CUtlBuffer::Printf(char const*, ...)
00000a1b	incl	%ebx
00000a1c	jmp	0x00000960
00000a21	movl	%edi,0xfffffaa4(%ebp)
00000a27	movl	0xfffffb30(%ebp),%eax
00000a2d	movl	0xfffffb4c(%ebp),%ecx
00000a33	movl	%ecx,0x08(%esp)
00000a37	movl	%eax,0x04(%esp)
00000a3b	movl	0x0c(%ebp),%eax
00000a3e	movl	%eax,(%esp)
00000a41	calll	CUtlBuffer::Put(void const*, int)
00000a46	xorps	%xmm0,%xmm0
00000a49	movaps	%xmm0,0xfffffaf8(%ebp)
00000a50	movb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb10(%ebp)
00000a57	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb0c(%ebp)
00000a61	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb08(%ebp)
00000a6b	xorl	%edi,%edi
00000a6d	movl	0xfffffac0(%ebp),%eax
00000a73	movl	_g_SceneFiles-0x4f1+0x0000000c(%eax),%ecx
00000a79	testl	%ecx,%ecx
00000a7b	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),%eax
00000a80	jle	0x00000a99
00000a82	movl	%ecx,0xfffffafc(%ebp)
00000a88	shll	$0x04,%ecx
00000a8b	movl	%ecx,(%esp)
00000a8e	calll	_malloc
00000a93	movl	%eax,0xfffffaf8(%ebp)
00000a99	movl	%eax,0xfffffb08(%ebp)
00000a9f	xorl	%ecx,%ecx
00000aa1	nopl	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000ab0	movl	0xfffffac0(%ebp),%eax
00000ab6	movl	_g_SceneFiles-0x4f1+0x0000000c(%eax),%esi
00000abc	cmpl	%esi,%ecx
00000abe	jge	0x00000c06
00000ac4	movl	%ecx,0xfffffabc(%ebp)
00000aca	xorps	%xmm0,%xmm0
00000acd	movaps	%xmm0,0xfffffae8(%ebp)
00000ad4	movl	_g_SceneFiles-0x4f1(%eax),%eax
00000ada	addl	%edi,%eax
00000adc	movl	%edi,0xfffffac4(%ebp)
00000ae2	movl	%eax,(%esp)
00000ae5	calll	CUtlString::Get() const
00000aea	movl	%eax,0x04(%esp)
00000aee	leal	0xfffffbe8(%ebp),%esi
00000af4	movl	%esi,(%esp)
00000af7	movl	$0x00000104,0x08(%esp)
00000aff	calll	V_strncpy(char*, char const*, int)
00000b04	movl	%esi,(%esp)
00000b07	calll	V_strlower(char*)
00000b0c	movl	%esi,(%esp)
00000b0f	movl	$0x0000002f,0x04(%esp)
00000b17	calll	V_FixSlashes(char*, char)
00000b1c	movl	0xfffffac0(%ebp),%eax
00000b22	leal	0x51ae1-0x4f1(%eax),%eax
00000b28	movl	%eax,0x04(%esp)
00000b2c	movl	%esi,(%esp)
00000b2f	calll	V_stristr(char*, char const*)
00000b34	movl	%eax,%esi
00000b36	testl	%esi,%esi
00000b38	jne	0x00000b6c
00000b3a	movl	0xfffffac0(%ebp),%eax
00000b40	movl	_g_SceneFiles-0x4f1(%eax),%eax
00000b46	addl	0xfffffac4(%ebp),%eax
00000b4c	movl	%eax,(%esp)
00000b4f	calll	CUtlString::Get() const
00000b54	movl	%eax,0x04(%esp)
00000b58	movl	0xfffffac0(%ebp),%eax
00000b5e	leal	0x51b87-0x4f1(%eax),%eax
00000b64	movl	%eax,(%esp)
00000b67	calll	_Error
00000b6c	movl	%esi,(%esp)
00000b6f	calll	_strlen
00000b74	movl	%eax,%edi
00000b76	leal	0xfffffbe4(%ebp),%ebx
00000b7c	movl	%ebx,(%esp)
00000b7f	calll	CRC32_Init(unsigned int*)
00000b84	movl	%edi,0x08(%esp)
00000b88	movl	%esi,0x04(%esp)
00000b8c	movl	%ebx,(%esp)
00000b8f	calll	CRC32_ProcessBuffer(unsigned int*, void const*, int)
00000b94	movl	%ebx,(%esp)
00000b97	calll	CRC32_Final(unsigned int*)
00000b9c	movl	0xfffffbe4(%ebp),%eax
00000ba2	movl	%eax,0xfffffae8(%ebp)
00000ba8	movl	0xfffffabc(%ebp),%eax
00000bae	movl	%eax,0xfffffaec(%ebp)
00000bb4	leal	0xfffffae8(%ebp),%esi
00000bba	movl	%esi,0x04(%esp)
00000bbe	leal	0xfffffaf8(%ebp),%edi
00000bc4	movl	%edi,(%esp)
00000bc7	calll	CUtlSortVector<SceneImageEntry_t, CSceneImageEntryLessFunc, CUtlVector<SceneImageEntry_t, CUtlMemory<SceneImageEntry_t, int> > >::Find(SceneImageEntry_t const&) const
00000bcc	cmpl	$0xff,%eax
00000bcf	je	0x00000be5
00000bd1	movl	0xfffffac0(%ebp),%eax
00000bd7	leal	0x51bc5-0x4f1(%eax),%eax
00000bdd	movl	%eax,(%esp)
00000be0	calll	_Error
00000be5	movl	%esi,0x04(%esp)
00000be9	movl	%edi,(%esp)
00000bec	calll	CUtlSortVector<SceneImageEntry_t, CSceneImageEntryLessFunc, CUtlVector<SceneImageEntry_t, CUtlMemory<SceneImageEntry_t, int> > >::Insert(SceneImageEntry_t const&)
00000bf1	movl	0xfffffac4(%ebp),%edi
00000bf7	addl	$0x60,%edi
00000bfa	movl	0xfffffabc(%ebp),%ecx
00000c00	incl	%ecx
00000c01	jmp	0x00000ab0
00000c06	xorps	%xmm0,%xmm0
00000c09	movaps	%xmm0,0xfffffac8(%ebp)
00000c10	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad8(%ebp)
00000c1a	xorl	%edx,%edx
00000c1c	testl	%esi,%esi
00000c1e	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),%eax
00000c23	jle	0x00000c42
00000c25	movl	%esi,0xfffffacc(%ebp)
00000c2b	leal	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(,%esi,4),%eax
00000c32	movl	%eax,(%esp)
00000c35	calll	_malloc
00000c3a	movl	%eax,0xfffffac8(%ebp)
00000c40	movl	%esi,%edx
00000c42	movl	%eax,0xfffffab8(%ebp)
00000c48	movl	%eax,0xfffffad8(%ebp)
00000c4e	movl	0xfffffaf8(%ebp),%ecx
00000c54	movl	0xfffffb04(%ebp),%eax
00000c5a	movl	%eax,0xfffffab4(%ebp)
00000c60	testl	%eax,%eax
00000c62	jg	0x00000dad
00000c68	movl	0xfffffaa4(%ebp),%eax
00000c6e	movl	%eax,0xfffffac4(%ebp)
00000c74	movl	0xfffffac0(%ebp),%edx
00000c7a	movl	%ecx,0xfffffaa8(%ebp)
00000c80	xorl	%eax,%eax
00000c82	movl	%ecx,%esi
00000c84	movl	%eax,%edi
00000c86	movl	0xfffffab8(%ebp),%eax
00000c8c	movl	0xfffffaa4(%ebp),%ecx
00000c92	nopw	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000ca0	cmpl	0xfffffab4(%ebp),%edi
00000ca6	jge	0x00000cf7
00000ca8	movl	(%eax,%edi,4),%eax
00000cab	movl	%edi,0xfffffabc(%ebp)
00000cb1	movl	0xfffffac4(%ebp),%edi
00000cb7	movl	%edi,0x04(%esi)
00000cba	imull	$0x60,%eax,%ebx
00000cbd	movl	_g_SceneFiles-0x4f1(%edx),%eax
00000cc3	movl	0x2c(%eax,%ebx),%eax
00000cc7	movl	%eax,0x08(%esi)
00000cca	movl	%ecx,0x0c(%esi)
00000ccd	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebp)
00000cd1	movl	%ecx,%edx
00000cd3	jne	0x00000f52
00000cd9	movl	(%esi),%ecx
00000cdb	bswap	%ecx
00000cdd	movl	%ecx,(%esi)
00000cdf	movl	%edi,%ecx
00000ce1	bswap	%ecx
00000ce3	movl	%ecx,0x04(%esi)
00000ce6	bswap	%eax
00000ce8	movl	%eax,0x08(%esi)
00000ceb	movl	%edx,%eax
00000ced	bswap	%eax
00000cef	movl	%eax,0x0c(%esi)
00000cf2	jmp	0x00000f52
00000cf7	movl	%eax,0xfffffab8(%ebp)
00000cfd	movl	0x0c(%ebp),%ecx
00000d00	xorl	%esi,%esi
00000d02	jmp	0x00000d5e
00000d04	nopw	%cs:FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000d10	movl	0xfffffab8(%ebp),%eax
00000d16	movl	(%eax,%esi,4),%eax
00000d19	imull	$0x60,%eax,%edi
00000d1c	movl	%edi,0xfffffabc(%ebp)
00000d22	movl	_g_SceneFiles-0x4f1(%edx),%eax
00000d28	movl	0x48(%eax,%edi),%ebx
00000d2c	movl	0x58(%eax,%edi),%eax
00000d30	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebp)
00000d34	jne	0x00000d3a
00000d36	bswap	%eax
00000d38	bswap	%ebx
00000d3a	movl	%eax,0xfffffac4(%ebp)
00000d40	movl	%esi,0xfffffab0(%ebp)
00000d46	testb	$0x01,0x15(%ecx)
00000d4a	jne	0x00000fe6
00000d50	jmp	0x00000fa6
00000d55	movl	0xfffffab0(%ebp),%esi
00000d5b	incl	%esi
00000d5c	movl	%ebx,%ecx
00000d5e	cmpl	0xfffffab4(%ebp),%esi
00000d64	jl	0x00000d10
00000d66	movl	%ecx,%ebx
00000d68	xorl	%esi,%esi
00000d6a	nopw	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00000d70	cmpl	0xfffffab4(%ebp),%esi
00000d76	movl	0xfffffab8(%ebp),%eax
00000d7c	jge	0x00001102
00000d82	imull	$0x60,(%eax,%esi,4),%ecx
00000d86	movl	%edx,%eax
00000d88	movl	_g_SceneFiles-0x4f1(%eax),%edx
00000d8e	movl	%eax,%edi
00000d90	movl	0x10(%edx,%ecx),%eax
00000d94	movl	0x2c(%edx,%ecx),%ecx
00000d98	movl	%ecx,0x08(%esp)
00000d9c	movl	%eax,0x04(%esp)
00000da0	movl	%ebx,(%esp)
00000da3	calll	CUtlBuffer::Put(void const*, int)
00000da8	incl	%esi
00000da9	movl	%edi,%edx
00000dab	jmp	0x00000d70
00000dad	leal	0x04(%ecx),%eax
00000db0	movl	%ecx,0xfffffaa8(%ebp)
00000db6	xorl	%esi,%esi
00000db8	movl	%esi,0xfffffabc(%ebp)
00000dbe	movl	0xfffffaa4(%ebp),%ecx
00000dc4	movl	%ecx,0xfffffac4(%ebp)
00000dca	jmp	0x00000de1
00000dcc	nopl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax)
00000dd0	movl	0xfffffab0(%ebp),%eax
00000dd6	addl	$0x10,%eax
00000dd9	movl	0xfffffacc(%ebp),%edx
00000ddf	movl	%ebx,%esi
00000de1	movl	%eax,0xfffffab0(%ebp)
00000de7	movl	(%eax),%eax
00000de9	movl	%eax,0xfffffaac(%ebp)
00000def	leal	0x01(%esi),%edi
00000df2	cmpl	%edx,%edi
00000df4	movl	%esi,%ebx
00000df6	movl	0xfffffab8(%ebp),%ecx
00000dfc	jle	0x00000e20
00000dfe	movl	%edi,%ecx
00000e00	subl	%edx,%ecx
00000e02	movl	%ecx,0x04(%esp)
00000e06	leal	0xfffffac8(%ebp),%eax
00000e0c	movl	%eax,(%esp)
00000e0f	calll	CUtlMemory<int, int>::Grow(int)
00000e14	movl	0xfffffac8(%ebp),%ecx
00000e1a	movl	0xfffffad4(%ebp),%ebx
00000e20	incl	%ebx
00000e21	movl	%ebx,0xfffffad4(%ebp)
00000e27	movl	%ecx,0xfffffad8(%ebp)
00000e2d	movl	%ebx,%eax
00000e2f	subl	%esi,%eax
00000e31	decl	%eax
00000e32	testl	%eax,%eax
00000e34	jle	0x00000e55
00000e36	shll	$0x02,%eax
00000e39	movl	%eax,0x08(%esp)
00000e3d	leal	(%ecx,%esi,4),%eax
00000e40	movl	%eax,0x04(%esp)
00000e44	leal	(%ecx,%edi,4),%eax
00000e47	movl	%eax,(%esp)
00000e4a	calll	_memmove
00000e4f	movl	0xfffffac8(%ebp),%ecx
00000e55	movl	0xfffffac0(%ebp),%edx
00000e5b	movl	%ecx,0xfffffab8(%ebp)
00000e61	shll	$0x02,%esi
00000e64	addl	%ecx,%esi
00000e66	movl	0xfffffaac(%ebp),%eax
00000e6c	je	0x00000e70
00000e6e	movl	%eax,(%esi)
00000e70	imull	$0x60,%eax,%eax
00000e73	movl	_g_SceneFiles-0x4f1(%edx),%ecx
00000e79	movl	0x58(%ecx,%eax),%eax
00000e7d	movl	0xfffffac4(%ebp),%ecx
00000e83	leal	0x08(%ecx,%eax,4),%ecx
00000e87	movl	%ecx,0xfffffac4(%ebp)
00000e8d	movl	0xfffffabc(%ebp),%eax
00000e93	incl	%eax
00000e94	movl	%eax,0xfffffabc(%ebp)
00000e9a	cmpl	0xfffffab4(%ebp),%eax
00000ea0	jl	0x00000dd0
00000ea6	movl	0xfffffaa8(%ebp),%ecx
00000eac	jmp	0x00000c7a
00000eb1	movl	%eax,%ebx
00000eb3	movl	0xfffffab8(%ebp),%eax
00000eb9	jmp	0x00000ec5
00000ebb	jmp	0x00000eb1
00000ebd	jmp	0x00000eb1
00000ebf	jmp	0x00000eb1
00000ec1	movl	%eax,%ebx
00000ec3	movl	%edi,%eax
00000ec5	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad4(%ebp)
00000ecf	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad0(%ebp)
00000ed6	movl	0xfffffaa8(%ebp),%esi
00000edc	jns	0x00000ee9
00000ede	movl	%eax,0xfffffad8(%ebp)
00000ee4	jmp	0x000012a7
00000ee9	testl	%eax,%eax
00000eeb	jne	0x00000f10
00000eed	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
00000ef7	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad8(%ebp)
00000f01	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
00000f0b	jmp	0x000012a7
00000f10	movl	%eax,(%esp)
00000f13	calll	_free
00000f18	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffac8(%ebp)
00000f22	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad0(%ebp)
00000f29	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
00000f33	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad8(%ebp)
00000f3d	js	0x000012a7
00000f43	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
00000f4d	jmp	0x000012a7
00000f52	movl	%edx,%edi
00000f54	movl	%esi,0x04(%esp)
00000f58	movl	0x0c(%ebp),%eax
00000f5b	movl	%eax,(%esp)
00000f5e	movl	$0x00000010,0x08(%esp)
00000f66	calll	CUtlBuffer::Put(void const*, int)
00000f6b	movl	0xfffffac0(%ebp),%edx
00000f71	movl	_g_SceneFiles-0x4f1(%edx),%eax
00000f77	movl	0xfffffac4(%ebp),%ecx
00000f7d	addl	0x2c(%eax,%ebx),%ecx
00000f81	movl	%ecx,0xfffffac4(%ebp)
00000f87	movl	0x58(%eax,%ebx),%eax
00000f8b	movl	%edi,%ecx
00000f8d	leal	0x08(%ecx,%eax,4),%ecx
00000f91	addl	$0x10,%esi
00000f94	movl	0xfffffabc(%ebp),%edi
00000f9a	incl	%edi
00000f9b	movl	0xfffffab8(%ebp),%eax
00000fa1	jmp	0x00000ca0
00000fa6	movl	%edx,%edi
00000fa8	movl	%ecx,(%esp)
00000fab	movl	%ecx,%esi
00000fad	movl	$0x00000004,0x04(%esp)
00000fb5	calll	CUtlBuffer::CheckPut(int)
00000fba	cmpb	$0x01,%al
00000fbc	jne	0x00001000
00000fbe	movl	%esi,%ecx
00000fc0	movl	0x10(%ecx),%eax
00000fc3	subl	0x20(%ecx),%eax
00000fc6	addl	(%ecx),%eax
00000fc8	testb	$0x01,0x34(%ecx)
00000fcc	je	0x00000fd4
00000fce	testl	%eax,%eax
00000fd0	je	0x00000fd6
00000fd2	bswap	%ebx
00000fd4	movl	%ebx,(%eax)
00000fd6	addl	$0x04,0x10(%ecx)
00000fda	movl	%ecx,(%esp)
00000fdd	movl	%ecx,%esi
00000fdf	calll	CUtlBuffer::AddNullTermination()
00000fe4	jmp	0x00001000
00000fe6	movl	%ebx,0x08(%esp)
00000fea	leal	0x51c86-0x4f1(%edx),%eax
00000ff0	movl	%edx,%edi
00000ff2	movl	%eax,0x04(%esp)
00000ff6	movl	%ecx,(%esp)
00000ff9	movl	%ecx,%esi
00000ffb	calll	CUtlBuffer::Printf(char const*, ...)
00001000	movl	%esi,%ebx
00001002	testb	$0x01,0x15(%ebx)
00001006	jne	0x00001052
00001008	movl	%ebx,(%esp)
0000100b	movl	$0x00000004,0x04(%esp)
00001013	calll	CUtlBuffer::CheckPut(int)
00001018	xorl	%esi,%esi
0000101a	cmpb	$0x01,%al
0000101c	jne	0x00001070
0000101e	movl	0x10(%ebx),%eax
00001021	subl	0x20(%ebx),%eax
00001024	addl	(%ebx),%eax
00001026	testb	$0x01,0x34(%ebx)
0000102a	jne	0x00001034
0000102c	movl	0xfffffac4(%ebp),%ecx
00001032	jmp	0x00001040
00001034	testl	%eax,%eax
00001036	je	0x00001042
00001038	movl	0xfffffac4(%ebp),%ecx
0000103e	bswap	%ecx
00001040	movl	%ecx,(%eax)
00001042	addl	$0x04,0x10(%ebx)
00001046	xorl	%esi,%esi
00001048	movl	%ebx,(%esp)
0000104b	calll	CUtlBuffer::AddNullTermination()
00001050	jmp	0x00001070
00001052	xorl	%esi,%esi
00001054	movl	0xfffffac4(%ebp),%eax
0000105a	movl	%eax,0x08(%esp)
0000105e	leal	0x51c86-0x4f1(%edi),%eax
00001064	movl	%eax,0x04(%esp)
00001068	movl	%ebx,(%esp)
0000106b	calll	CUtlBuffer::Printf(char const*, ...)
00001070	movl	%edi,%edx
00001072	movl	_g_SceneFiles-0x4f1(%edx),%eax
00001078	movl	0xfffffabc(%ebp),%ecx
0000107e	cmpl	0x58(%eax,%ecx),%esi
00001082	jge	0x00000d55
00001088	movl	0x4c(%eax,%ecx),%eax
0000108c	movl	%esi,0xfffffac4(%ebp)
00001092	movswl	(%eax,%esi,2),%esi
00001096	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x14(%ebp)
0000109a	jne	0x0000109e
0000109c	bswap	%esi
0000109e	testb	$0x01,0x15(%ebx)
000010a2	jne	0x000010de
000010a4	movl	%edx,%edi
000010a6	movl	%ebx,(%esp)
000010a9	movl	$0x00000004,0x04(%esp)
000010b1	calll	CUtlBuffer::CheckPut(int)
000010b6	cmpb	$0x01,%al
000010b8	jne	0x000010f6
000010ba	movl	0x10(%ebx),%eax
000010bd	subl	0x20(%ebx),%eax
000010c0	addl	(%ebx),%eax
000010c2	testb	$0x01,0x34(%ebx)
000010c6	je	0x000010ce
000010c8	testl	%eax,%eax
000010ca	je	0x000010d0
000010cc	bswap	%esi
000010ce	movl	%esi,(%eax)
000010d0	addl	$0x04,0x10(%ebx)
000010d4	movl	%ebx,(%esp)
000010d7	calll	CUtlBuffer::AddNullTermination()
000010dc	jmp	0x000010f6
000010de	movl	%esi,0x08(%esp)
000010e2	leal	0x51c86-0x4f1(%edx),%eax
000010e8	movl	%edx,%edi
000010ea	movl	%eax,0x04(%esp)
000010ee	movl	%ebx,(%esp)
000010f1	calll	CUtlBuffer::Printf(char const*, ...)
000010f6	movl	0xfffffac4(%ebp),%esi
000010fc	incl	%esi
000010fd	jmp	0x00001070
00001102	movl	%eax,%edi
00001104	cmpb	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0x18(%ebp)
00001108	jne	0x00001135
0000110a	movl	0x1c(%ebx),%eax
0000110d	cvtsi2ss	%eax,%xmm0
00001111	mulss	0x518bc-0x4f1(%edx),%xmm0
00001119	cvtss2sd	%xmm0,%xmm0
0000111d	movsd	%xmm0,0x04(%esp)
00001123	leal	0x51c04-0x4f1(%edx),%eax
00001129	movl	%eax,(%esp)
0000112c	movl	%edx,%esi
0000112e	calll	_Msg
00001133	movl	%esi,%edx
00001135	leal	_g_SceneFiles-0x4f1(%edx),%eax
0000113b	movl	%eax,(%esp)
0000113e	movl	%edx,%esi
00001140	calll	CUtlVector<SceneFile_t, CUtlMemory<SceneFile_t, int> >::RemoveAll()
00001145	movl	%esi,%ecx
00001147	movl	_g_SceneFiles-0x4f1(%ecx),%eax
0000114d	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),_g_SceneFiles-0x4f1+0x00000008(%ecx)
00001157	js	0x0000117f
00001159	testl	%eax,%eax
0000115b	je	0x00001173
0000115d	movl	%eax,(%esp)
00001160	movl	%ecx,%esi
00001162	calll	_free
00001167	movl	%esi,%ecx
00001169	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),_g_SceneFiles-0x4f1(%ecx)
00001173	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),_g_SceneFiles-0x4f1+0x00000004(%ecx)
0000117d	xorl	%eax,%eax
0000117f	movl	%eax,_g_SceneFiles-0x4f1+0x00000010(%ecx)
00001185	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad4(%ebp)
0000118f	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad0(%ebp)
00001196	jns	0x000011a0
00001198	movl	%edi,0xfffffad8(%ebp)
0000119e	jmp	0x000011f3
000011a0	testl	%edi,%edi
000011a2	jne	0x000011ba
000011a4	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
000011ae	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad8(%ebp)
000011b8	jmp	0x000011e9
000011ba	movl	%edi,(%esp)
000011bd	calll	_free
000011c2	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffac8(%ebp)
000011cc	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad0(%ebp)
000011d3	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
000011dd	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffad8(%ebp)
000011e7	js	0x000011f3
000011e9	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffacc(%ebp)
000011f3	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb04(%ebp)
000011fd	movl	0xfffffaf8(%ebp),%eax
00001203	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb00(%ebp)
0000120a	jns	0x00001214
0000120c	movl	%eax,0xfffffb08(%ebp)
00001212	jmp	0x00001248
00001214	testl	%eax,%eax
00001216	je	0x0000122a
00001218	movl	%eax,(%esp)
0000121b	calll	_free
00001220	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffaf8(%ebp)
0000122a	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffafc(%ebp)
00001234	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb08(%ebp)
0000123e	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffafc(%ebp)
00001248	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb38(%ebp)
0000124f	js	0x00001277
00001251	movl	0xfffffb30(%ebp),%eax
00001257	testl	%eax,%eax
00001259	je	0x0000126d
0000125b	movl	%eax,(%esp)
0000125e	calll	_free
00001263	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb30(%ebp)
0000126d	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb34(%ebp)
00001277	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb74(%ebp)
00001281	movl	0xfffffb68(%ebp),%eax
00001287	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb70(%ebp)
0000128e	jns	0x0000132e
00001294	movl	%eax,0xfffffb78(%ebp)
0000129a	jmp	0x00001362
0000129f	movl	%eax,%ebx
000012a1	movl	0xfffffaf8(%ebp),%esi
000012a7	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb04(%ebp)
000012b1	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb00(%ebp)
000012b8	jns	0x000012c2
000012ba	movl	%esi,0xfffffb08(%ebp)
000012c0	jmp	0x000012f6
000012c2	testl	%esi,%esi
000012c4	je	0x000012d8
000012c6	movl	%esi,(%esp)
000012c9	calll	_free
000012ce	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffaf8(%ebp)
000012d8	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffafc(%ebp)
000012e2	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb08(%ebp)
000012ec	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffafc(%ebp)
000012f6	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb38(%ebp)
000012fd	js	0x000009c9
00001303	movl	0xfffffb30(%ebp),%eax
00001309	testl	%eax,%eax
0000130b	je	0x0000131f
0000130d	movl	%eax,(%esp)
00001310	calll	_free
00001315	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb30(%ebp)
0000131f	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb34(%ebp)
00001329	jmp	0x000009c9
0000132e	testl	%eax,%eax
00001330	je	0x00001344
00001332	movl	%eax,(%esp)
00001335	calll	_free
0000133a	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb68(%ebp)
00001344	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb6c(%ebp)
0000134e	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb78(%ebp)
00001358	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb6c(%ebp)
00001362	movb	$0x01,%bl
00001364	leal	0xfffffb90(%ebp),%eax
0000136a	movl	%eax,(%esp)
0000136d	calll	CUtlSymbolTable::~CUtlSymbolTable()
00001372	movb	%bl,0xfffffac4(%ebp)
00001378	movl	0xfffffbd4(%ebp),%esi
0000137e	testl	%esi,%esi
00001380	jle	0x000013c8
00001382	imull	$0x14,%esi,%edi
00001385	addl	$0xf4,%edi
00001388	nopl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&)(%eax,%eax)
00001390	movl	0xfffffbc8(%ebp),%ebx
00001396	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),(%ebx,%edi)
0000139a	jns	0x000013a6
0000139c	decl	%esi
0000139d	addl	$0xec,%edi
000013a0	testl	%esi,%esi
000013a2	jg	0x00001390
000013a4	jmp	0x000013c8
000013a6	movl	0xf8(%ebx,%edi),%eax
000013aa	testl	%eax,%eax
000013ac	je	0x000013be
000013ae	movl	%eax,(%esp)
000013b1	calll	_free
000013b6	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xf8(%ebx,%edi)
000013be	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfc(%ebx,%edi)
000013c6	jmp	0x0000139c
000013c8	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd4(%ebp)
000013d2	movl	0xfffffbc8(%ebp),%eax
000013d8	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd0(%ebp)
000013df	movb	0xfffffac4(%ebp),%bl
000013e5	jns	0x000014b9
000013eb	movl	%eax,0xfffffbd8(%ebp)
000013f1	jmp	0x0000150c
000013f6	testl	%eax,%eax
000013f8	je	0x0000140c
000013fa	movl	%eax,(%esp)
000013fd	calll	_free
00001402	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb68(%ebp)
0000140c	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb6c(%ebp)
00001416	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb78(%ebp)
00001420	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffb6c(%ebp)
0000142a	leal	0xfffffb90(%ebp),%eax
00001430	movl	%eax,(%esp)
00001433	calll	CUtlSymbolTable::~CUtlSymbolTable()
00001438	movl	%ebx,0xfffffac4(%ebp)
0000143e	movl	0xfffffbd4(%ebp),%esi
00001444	testl	%esi,%esi
00001446	jle	0x00001488
00001448	imull	$0x14,%esi,%ebx
0000144b	addl	$0xf4,%ebx
0000144e	nop
00001450	movl	0xfffffbc8(%ebp),%edi
00001456	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),(%edi,%ebx)
0000145a	jns	0x00001466
0000145c	decl	%esi
0000145d	addl	$0xec,%ebx
00001460	testl	%esi,%esi
00001462	jg	0x00001450
00001464	jmp	0x00001488
00001466	movl	0xf8(%edi,%ebx),%eax
0000146a	testl	%eax,%eax
0000146c	je	0x0000147e
0000146e	movl	%eax,(%esp)
00001471	calll	_free
00001476	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xf8(%edi,%ebx)
0000147e	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfc(%edi,%ebx)
00001486	jmp	0x0000145c
00001488	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd4(%ebp)
00001492	movl	0xfffffbc8(%ebp),%eax
00001498	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd0(%ebp)
0000149f	jns	0x00001527
000014a5	movl	%eax,0xfffffbd8(%ebp)
000014ab	movl	0xfffffac4(%ebp),%eax
000014b1	movl	%eax,(%esp)
000014b4	calll	__Unwind_Resume
000014b9	testl	%eax,%eax
000014bb	jne	0x000014d3
000014bd	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
000014c7	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd8(%ebp)
000014d1	jmp	0x00001502
000014d3	movl	%eax,(%esp)
000014d6	calll	_free
000014db	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbc8(%ebp)
000014e5	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd0(%ebp)
000014ec	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
000014f6	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd8(%ebp)
00001500	js	0x0000150c
00001502	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
0000150c	movl	0xfffffaa0(%ebp),%eax
00001512	movl	(%eax),%eax
00001514	cmpl	0xf0(%ebp),%eax
00001517	jne	0x0000158e
00001519	movzbl	%bl,%eax
0000151c	addl	$0x0000056c,%esp
00001522	popl	%esi
00001523	popl	%edi
00001524	popl	%ebx
00001525	popl	%ebp
00001526	ret
00001527	testl	%eax,%eax
00001529	jne	0x00001547
0000152b	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
00001535	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd8(%ebp)
0000153f	movl	0xfffffac4(%ebp),%eax
00001545	jmp	0x0000157c
00001547	movl	%eax,(%esp)
0000154a	calll	_free
0000154f	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbc8(%ebp)
00001559	cmpl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd0(%ebp)
00001560	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
0000156a	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbd8(%ebp)
00001574	movl	0xfffffac4(%ebp),%eax
0000157a	js	0x00001586
0000157c	movl	FindSoundsInEvent(CChoreoEvent*, CUtlVector<short, CUtlMemory<short, int> >&),0xfffffbcc(%ebp)
00001586	movl	%eax,(%esp)
00001589	calll	__Unwind_Resume
0000158e	calll	___stack_chk_fail
00001593	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(bitbuf.o):
(__TEXT,__text) section
InternalBitBufErrorHandler(BitBufErrorType, char const*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	g_BitBufErrorHandler-0x5(%eax),%eax
0000000c	testl	%eax,%eax
0000000e	jne	0x00000011
00000010	ret
00000011	jmp	*%eax
00000013	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movl	0x04(%esp),%ecx
0000002a	movl	%ecx,g_BitBufErrorHandler-0x25(%eax)
00000030	ret
00000031	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::bf_write():
00000040	movl	0x04(%esp),%eax
00000044	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
0000004a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00000051	movl	$0xffffffff,0x08(%eax)
00000058	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000005f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000063	movb	$0x01,0x11(%eax)
00000067	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000006e	ret
0000006f	nop
bf_write::bf_write():
00000070	movl	0x04(%esp),%eax
00000074	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
0000007a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00000081	movl	$0xffffffff,0x08(%eax)
00000088	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000008f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000093	movb	$0x01,0x11(%eax)
00000097	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000009e	ret
0000009f	nop
bf_write::bf_write(char const*, void*, int, int):
000000a0	movl	0x04(%esp),%eax
000000a4	movb	$0x01,0x11(%eax)
000000a8	movl	0x08(%esp),%ecx
000000ac	movl	%ecx,0x14(%eax)
000000af	movl	0x0c(%esp),%ecx
000000b3	movl	%ecx,(%eax)
000000b5	movl	0x10(%esp),%ecx
000000b9	andl	$0xfc,%ecx
000000bc	movl	%ecx,0x04(%eax)
000000bf	movl	0x14(%esp),%edx
000000c3	cmpl	$0xff,%edx
000000c6	jne	0x000000d0
000000c8	shll	$0x03,%ecx
000000cb	movl	%ecx,0x08(%eax)
000000ce	jmp	0x000000d3
000000d0	movl	%edx,0x08(%eax)
000000d3	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000000da	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000000de	ret
000000df	nop
bf_write::bf_write(char const*, void*, int, int):
000000e0	movl	0x04(%esp),%eax
000000e4	movb	$0x01,0x11(%eax)
000000e8	movl	0x08(%esp),%ecx
000000ec	movl	%ecx,0x14(%eax)
000000ef	movl	0x0c(%esp),%ecx
000000f3	movl	%ecx,(%eax)
000000f5	movl	0x10(%esp),%ecx
000000f9	andl	$0xfc,%ecx
000000fc	movl	%ecx,0x04(%eax)
000000ff	movl	0x14(%esp),%edx
00000103	cmpl	$0xff,%edx
00000106	jne	0x00000110
00000108	shll	$0x03,%ecx
0000010b	movl	%ecx,0x08(%eax)
0000010e	jmp	0x00000113
00000110	movl	%edx,0x08(%eax)
00000113	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000011a	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
0000011e	ret
0000011f	nop
bf_write::StartWriting(void*, int, int, int):
00000120	pushl	%esi
00000121	movl	0x0c(%esp),%ecx
00000125	movl	0x08(%esp),%eax
00000129	movl	%ecx,(%eax)
0000012b	movl	0x10(%esp),%ecx
0000012f	andl	$0xfc,%ecx
00000132	movl	%ecx,0x04(%eax)
00000135	movl	0x18(%esp),%esi
00000139	movl	0x14(%esp),%edx
0000013d	cmpl	$0xff,%esi
00000140	jne	0x0000014a
00000142	shll	$0x03,%ecx
00000145	movl	%ecx,0x08(%eax)
00000148	jmp	0x0000014d
0000014a	movl	%esi,0x08(%eax)
0000014d	movl	%edx,0x0c(%eax)
00000150	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000154	popl	%esi
00000155	ret
00000156	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::bf_write(void*, int, int):
00000160	movl	0x04(%esp),%eax
00000164	movb	$0x01,0x11(%eax)
00000168	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000016f	movl	0x08(%esp),%ecx
00000173	movl	%ecx,(%eax)
00000175	movl	0x0c(%esp),%ecx
00000179	andl	$0xfc,%ecx
0000017c	movl	%ecx,0x04(%eax)
0000017f	movl	0x10(%esp),%edx
00000183	cmpl	$0xff,%edx
00000186	jne	0x00000190
00000188	shll	$0x03,%ecx
0000018b	movl	%ecx,0x08(%eax)
0000018e	jmp	0x00000193
00000190	movl	%edx,0x08(%eax)
00000193	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000019a	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
0000019e	ret
0000019f	nop
bf_write::bf_write(void*, int, int):
000001a0	movl	0x04(%esp),%eax
000001a4	movb	$0x01,0x11(%eax)
000001a8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
000001af	movl	0x08(%esp),%ecx
000001b3	movl	%ecx,(%eax)
000001b5	movl	0x0c(%esp),%ecx
000001b9	andl	$0xfc,%ecx
000001bc	movl	%ecx,0x04(%eax)
000001bf	movl	0x10(%esp),%edx
000001c3	cmpl	$0xff,%edx
000001c6	jne	0x000001d0
000001c8	shll	$0x03,%ecx
000001cb	movl	%ecx,0x08(%eax)
000001ce	jmp	0x000001d3
000001d0	movl	%edx,0x08(%eax)
000001d3	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000001da	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000001de	ret
000001df	nop
bf_write::Reset():
000001e0	movl	0x04(%esp),%eax
000001e4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000001eb	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000001ef	ret
bf_write::SetAssertOnOverflow(bool):
000001f0	movb	0x08(%esp),%al
000001f4	movl	0x04(%esp),%ecx
000001f8	movb	%al,0x11(%ecx)
000001fb	ret
000001fc	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::GetDebugName():
00000200	movl	0x04(%esp),%eax
00000204	movl	0x14(%eax),%eax
00000207	ret
00000208	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::SetDebugName(char const*):
00000210	movl	0x08(%esp),%eax
00000214	movl	0x04(%esp),%ecx
00000218	movl	%eax,0x14(%ecx)
0000021b	ret
0000021c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::SeekToBit(int):
00000220	movl	0x08(%esp),%eax
00000224	movl	0x04(%esp),%ecx
00000228	movl	%eax,0x0c(%ecx)
0000022b	ret
0000022c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteSBitLong(int, int):
00000230	pushl	%ebp
00000231	pushl	%ebx
00000232	pushl	%edi
00000233	pushl	%esi
00000234	subl	$0x0c,%esp
00000237	movl	0x28(%esp),%ebx
0000023b	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%ecx
00000240	subl	%ebx,%ecx
00000242	movl	$0x7fffffff,%eax
00000247	shrl	%cl,%eax
00000249	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
0000024d	movl	0x08(%edi),%ecx
00000250	movl	0x0c(%edi),%edx
00000253	movl	%ecx,%esi
00000255	subl	%edx,%esi
00000257	cmpl	%ebx,%esi
00000259	jge	0x00000264
0000025b	movl	%ecx,0x0c(%edi)
0000025e	movb	$0x01,0x10(%edi)
00000262	jmp	0x000002e0
00000264	movl	0x24(%esp),%esi
00000268	movl	%eax,%ecx
0000026a	andl	%esi,%ecx
0000026c	notl	%eax
0000026e	sarl	$0x1f,%esi
00000271	andl	%eax,%esi
00000273	orl	%ecx,%esi
00000275	leal	(%edx,%ebx),%eax
00000278	movl	%eax,0x0c(%edi)
0000027b	movl	%edx,%ebp
0000027d	andl	$0x1f,%ebp
00000280	movl	$0x0000001f,%eax
00000285	subl	%ebp,%eax
00000287	decl	%ebx
00000288	movl	%ebx,%ecx
0000028a	movl	$0x00000001,%ebx
0000028f	shll	%cl,%ebx
00000291	movl	%ebx,0x08(%esp)
00000295	leal	0xff(%ebx),%ebx
00000298	movb	%al,%cl
0000029a	shrl	%cl,%ebx
0000029c	movl	%ebx,%eax
0000029e	andl	$0x01,%eax
000002a1	sarl	$0x05,%edx
000002a4	movl	%edx,(%esp)
000002a7	addl	%edx,%eax
000002a9	movl	(%edi),%edi
000002ab	movl	(%edi,%eax,4),%edx
000002ae	movl	%ebp,%ecx
000002b0	movl	%ecx,0x04(%esp)
000002b4	roll	%cl,%esi
000002b6	movl	%edx,%ebp
000002b8	movl	%ebp,%ecx
000002ba	xorl	%esi,%ecx
000002bc	andl	%ebx,%ecx
000002be	xorl	%ebp,%ecx
000002c0	movl	(%esp),%edx
000002c3	movl	(%edi,%edx,4),%ebx
000002c6	movl	%ecx,(%edi,%eax,4)
000002c9	xorl	%ebx,%esi
000002cb	movl	0x08(%esp),%eax
000002cf	leal	0xff(%eax,%eax),%eax
000002d3	movl	0x04(%esp),%ecx
000002d7	shll	%cl,%eax
000002d9	andl	%esi,%eax
000002db	xorl	%ebx,%eax
000002dd	movl	%eax,(%edi,%edx,4)
000002e0	addl	$0x0c,%esp
000002e3	popl	%esi
000002e4	popl	%edi
000002e5	popl	%ebx
000002e6	popl	%ebp
000002e7	ret
000002e8	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteVarInt32(unsigned int):
000002f0	pushl	%ebp
000002f1	pushl	%ebx
000002f2	pushl	%edi
000002f3	pushl	%esi
000002f4	subl	$0x08,%esp
000002f7	movl	0x1c(%esp),%esi
000002fb	movl	0x0c(%esi),%ebx
000002fe	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edx
00000302	testb	$0x07,%bl
00000305	jne	0x00000313
00000307	leal	0x28(%ebx),%eax
0000030a	cmpl	0x08(%esi),%eax
0000030d	jle	0x000003ec
00000313	movl	%edx,%edi
00000315	andl	$0x7f,%edi
00000318	cmpl	$0x00000080,%edx
0000031e	jb	0x000003d0
00000324	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000330	movl	0x08(%esi),%eax
00000333	movl	%eax,%ecx
00000335	subl	%ebx,%ecx
00000337	cmpl	$0x07,%ecx
0000033a	jg	0x00000345
0000033c	movl	%eax,0x0c(%esi)
0000033f	movb	$0x01,0x10(%esi)
00000343	jmp	0x000003b5
00000345	orl	$0x00000080,%edi
0000034b	leal	0x08(%ebx),%eax
0000034e	movl	%eax,0x0c(%esi)
00000351	movl	%edx,0x04(%esp)
00000355	movl	%ebx,%edx
00000357	andl	$0x1f,%edx
0000035a	movb	%dl,%cl
0000035c	movb	%cl,0x03(%esp)
00000360	roll	%cl,%edi
00000362	movl	$0x0000001f,%ecx
00000367	subl	%edx,%ecx
00000369	movl	$0x0000007f,%esi
0000036e	shrl	%cl,%esi
00000370	movl	%esi,%ecx
00000372	andl	$0x01,%ecx
00000375	sarl	$0x05,%ebx
00000378	addl	%ebx,%ecx
0000037a	movl	0x1c(%esp),%edx
0000037e	movl	(%edx),%ebp
00000380	movl	%ebx,%eax
00000382	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebx
00000386	movl	%ebx,%edx
00000388	xorl	%edi,%edx
0000038a	andl	%esi,%edx
0000038c	xorl	%ebx,%edx
0000038e	movl	%eax,%ebx
00000390	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ebx,4),%esi
00000394	movl	%edx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00000398	movl	0x04(%esp),%edx
0000039c	xorl	%esi,%edi
0000039e	movb	0x03(%esp),%cl
000003a2	movl	$0x000000ff,%eax
000003a7	shll	%cl,%eax
000003a9	andl	%edi,%eax
000003ab	xorl	%esi,%eax
000003ad	movl	%eax,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ebx,4)
000003b1	movl	0x1c(%esp),%esi
000003b5	movl	0x0c(%esi),%ebx
000003b8	movl	%edx,%eax
000003ba	shrl	$0x07,%eax
000003bd	movl	%eax,%edi
000003bf	andl	$0x7f,%edi
000003c2	cmpl	$0x00003fff,%edx
000003c8	movl	%eax,%edx
000003ca	ja	0x00000330
000003d0	movl	0x08(%esi),%eax
000003d3	movl	%eax,%ecx
000003d5	subl	%ebx,%ecx
000003d7	cmpl	$0x07,%ecx
000003da	jg	0x000004a2
000003e0	movl	%eax,0x0c(%esi)
000003e3	movb	$0x01,0x10(%esi)
000003e7	jmp	0x000004f4
000003ec	movl	(%esi),%eax
000003ee	sarl	$0x03,%ebx
000003f1	movl	%edx,%ecx
000003f3	orl	$0x00000080,%ecx
000003f9	movb	%cl,(%eax,%ebx)
000003fc	cmpl	$0x00000080,%edx
00000402	jb	0x00000496
00000408	movl	%edx,%ecx
0000040a	shrl	$0x07,%ecx
0000040d	movl	%edx,%edi
0000040f	movl	%ecx,%edx
00000411	orl	$0x00000080,%edx
00000417	movb	%dl,0x01(%ebx,%eax)
0000041b	movl	%edi,%edx
0000041d	cmpl	$0x00004000,%edx
00000423	jb	0x00000489
00000425	movl	%edx,%ecx
00000427	shrl	$0x0e,%ecx
0000042a	movl	%edx,%edi
0000042c	movl	%ecx,%edx
0000042e	orl	$0x00000080,%edx
00000434	movb	%dl,0x02(%ebx,%eax)
00000438	movl	%edi,%edx
0000043a	cmpl	$0x00200000,%edx
00000440	jb	0x0000047c
00000442	movl	%edx,%ecx
00000444	shrl	$0x15,%ecx
00000447	movl	%edx,%edi
00000449	movl	%ecx,%edx
0000044b	orl	$0x00000080,%edx
00000451	movb	%dl,0x03(%ebx,%eax)
00000455	movl	%edi,%edx
00000457	cmpl	$0x10000000,%edx
0000045d	jb	0x0000046f
0000045f	shrl	$0x1c,%edx
00000462	movb	%dl,0x04(%ebx,%eax)
00000466	addl	$0x28,0x0c(%esi)
0000046a	jmp	0x000004f4
0000046f	andb	$0x7f,%cl
00000472	movb	%cl,0x03(%eax,%ebx)
00000476	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x0c(%esi)
0000047a	jmp	0x000004f4
0000047c	andb	$0x7f,%cl
0000047f	movb	%cl,0x02(%eax,%ebx)
00000483	addl	$0x18,0x0c(%esi)
00000487	jmp	0x000004f4
00000489	andb	$0x7f,%cl
0000048c	movb	%cl,0x01(%eax,%ebx)
00000490	addl	$0x10,0x0c(%esi)
00000494	jmp	0x000004f4
00000496	andb	$0x7f,%dl
00000499	movb	%dl,(%eax,%ebx)
0000049c	addl	$0x08,0x0c(%esi)
000004a0	jmp	0x000004f4
000004a2	leal	0x08(%ebx),%eax
000004a5	movl	%eax,0x0c(%esi)
000004a8	movl	%ebx,%edx
000004aa	andl	$0x1f,%edx
000004ad	movb	%dl,%cl
000004af	movb	%cl,0x04(%esp)
000004b3	roll	%cl,%edi
000004b5	movl	$0x0000001f,%ecx
000004ba	subl	%edx,%ecx
000004bc	movl	$0x0000007f,%edx
000004c1	shrl	%cl,%edx
000004c3	movl	%edx,%ecx
000004c5	andl	$0x01,%ecx
000004c8	sarl	$0x05,%ebx
000004cb	addl	%ebx,%ecx
000004cd	movl	(%esi),%esi
000004cf	movl	(%esi,%ecx,4),%eax
000004d2	movl	%eax,%ebp
000004d4	xorl	%edi,%ebp
000004d6	andl	%edx,%ebp
000004d8	xorl	%eax,%ebp
000004da	movl	(%esi,%ebx,4),%edx
000004dd	movl	%ebp,(%esi,%ecx,4)
000004e0	xorl	%edx,%edi
000004e2	movb	0x04(%esp),%cl
000004e6	movl	$0x000000ff,%eax
000004eb	shll	%cl,%eax
000004ed	andl	%edi,%eax
000004ef	xorl	%edx,%eax
000004f1	movl	%eax,(%esi,%ebx,4)
000004f4	addl	$0x08,%esp
000004f7	popl	%esi
000004f8	popl	%edi
000004f9	popl	%ebx
000004fa	popl	%ebp
000004fb	ret
000004fc	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteVarInt64(unsigned long long):
00000500	pushl	%ebp
00000501	pushl	%ebx
00000502	pushl	%edi
00000503	pushl	%esi
00000504	subl	$0x10,%esp
00000507	movl	0x24(%esp),%edi
0000050b	movl	0x0c(%edi),%ebx
0000050e	movl	0x2c(%esp),%eax
00000512	movl	0x28(%esp),%edx
00000516	testb	$0x07,%bl
00000519	jne	0x00000523
0000051b	leal	0x50(%ebx),%ecx
0000051e	cmpl	0x08(%edi),%ecx
00000521	jle	0x0000054b
00000523	cmpl	$0x7f,%edx
00000526	movl	%edx,%esi
00000528	seta	%cl
0000052b	testl	%eax,%eax
0000052d	setne	%dl
00000530	je	0x00000534
00000532	movb	%dl,%cl
00000534	movl	%esi,%edx
00000536	movl	%edx,%esi
00000538	andl	$0x7f,%esi
0000053b	testb	%cl,%cl
0000053d	jne	0x0000068b
00000543	leal	0x08(%edi),%ecx
00000546	jmp	0x00000752
0000054b	movl	%eax,%ecx
0000054d	shldl	$0x04,%edx,%ecx
00000551	sarl	$0x03,%ebx
00000554	movl	(%edi),%esi
00000556	movl	%eax,%edx
00000558	shrl	$0x18,%edx
0000055b	testl	%edx,%edx
0000055d	jne	0x000005d9
0000055f	testl	%ecx,%ecx
00000561	jne	0x000005a7
00000563	movl	0x28(%esp),%edx
00000567	cmpl	$0x00003fff,%edx
0000056d	ja	0x0000058a
0000056f	movl	$0x00000002,%eax
00000574	movl	$0x00000001,%ecx
00000579	cmpl	$0x00000080,%edx
0000057f	jae	0x0000065f
00000585	jmp	0x00000670
0000058a	movl	%edi,%ebp
0000058c	movl	$0x00000004,%edi
00000591	movl	$0x00000003,%eax
00000596	cmpl	$0x00200000,%edx
0000059c	jae	0x0000063e
000005a2	jmp	0x0000064e
000005a7	movl	%edi,%ebp
000005a9	cmpl	$0x00003fff,%ecx
000005af	ja	0x000005c5
000005b1	movl	$0x00000006,%edx
000005b6	movl	$0x00000005,%edi
000005bb	cmpl	$0x00000080,%ecx
000005c1	jae	0x00000625
000005c3	jmp	0x00000630
000005c5	movl	$0x00000008,%edi
000005ca	movl	$0x00000007,%edx
000005cf	cmpl	$0x00200000,%ecx
000005d5	jae	0x00000607
000005d7	jmp	0x00000615
000005d9	movl	%edi,%ebp
000005db	movl	$0x00000009,%edi
000005e0	cmpl	$0x00000080,%edx
000005e6	jb	0x000005fd
000005e8	movl	%ebx,%edi
000005ea	movl	%eax,%ebx
000005ec	shrl	$0x1f,%ebx
000005ef	orb	$0x80,%bl
000005f2	movb	%bl,0x09(%edi,%esi)
000005f6	movl	%edi,%ebx
000005f8	movl	$0x0000000a,%edi
000005fd	orl	$0x00000080,%edx
00000603	movb	%dl,0x08(%ebx,%esi)
00000607	movl	%eax,%edx
00000609	shrl	$0x11,%edx
0000060c	orb	$0x80,%dl
0000060f	movb	%dl,0x07(%ebx,%esi)
00000613	movl	%edi,%edx
00000615	movl	%ebx,%edi
00000617	movl	%eax,%ebx
00000619	shrl	$0x0a,%ebx
0000061c	orb	$0x80,%bl
0000061f	movb	%bl,0x06(%edi,%esi)
00000623	movl	%edi,%ebx
00000625	shrl	$0x03,%eax
00000628	orb	$0x80,%al
0000062a	movb	%al,0x05(%ebx,%esi)
0000062e	movl	%edx,%edi
00000630	orl	$0x00000080,%ecx
00000636	movb	%cl,0x04(%ebx,%esi)
0000063a	movl	0x28(%esp),%edx
0000063e	movl	%edx,%eax
00000640	shrl	$0x15,%eax
00000643	orl	$0x00000080,%eax
00000648	movb	%al,0x03(%ebx,%esi)
0000064c	movl	%edi,%eax
0000064e	movl	%edx,%ecx
00000650	shrl	$0x0e,%ecx
00000653	orl	$0x00000080,%ecx
00000659	movb	%cl,0x02(%ebx,%esi)
0000065d	movl	%ebp,%edi
0000065f	movl	%edx,%ecx
00000661	shrl	$0x07,%ecx
00000664	orl	$0x00000080,%ecx
0000066a	movb	%cl,0x01(%ebx,%esi)
0000066e	movl	%eax,%ecx
00000670	orl	$0x00000080,%edx
00000676	movb	%dl,(%esi,%ebx)
00000679	addl	%ecx,%ebx
0000067b	andb	$0x7f,0xff(%esi,%ebx)
00000680	shll	$0x03,%ecx
00000683	addl	%ecx,0x0c(%edi)
00000686	jmp	0x000007be
0000068b	leal	0x08(%edi),%ecx
0000068e	movl	%ecx,(%esp)
00000691	movl	%eax,%ebp
00000693	jmp	0x000006a6
00000695	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000006a0	shrl	$0x07,%ebp
000006a3	movl	0x0c(%edi),%ebx
000006a6	movl	(%ecx),%eax
000006a8	movl	%eax,%ecx
000006aa	subl	%ebx,%ecx
000006ac	cmpl	$0x07,%ecx
000006af	jg	0x000006ba
000006b1	movl	%eax,0x0c(%edi)
000006b4	movb	$0x01,0x10(%edi)
000006b8	jmp	0x0000072c
000006ba	orl	$0x00000080,%esi
000006c0	leal	0x08(%ebx),%eax
000006c3	movl	%eax,0x0c(%edi)
000006c6	movl	%ebp,0x08(%esp)
000006ca	movl	%ebx,%ebp
000006cc	movl	%ebp,%ebx
000006ce	andl	$0x1f,%ebx
000006d1	movb	%bl,%cl
000006d3	movb	%cl,0x07(%esp)
000006d7	roll	%cl,%esi
000006d9	movl	$0x0000001f,%ecx
000006de	subl	%ebx,%ecx
000006e0	movl	$0x0000007f,%ebx
000006e5	shrl	%cl,%ebx
000006e7	movl	%ebx,%ecx
000006e9	andl	$0x01,%ecx
000006ec	sarl	$0x05,%ebp
000006ef	addl	%ebp,%ecx
000006f1	movl	0x24(%esp),%eax
000006f5	movl	(%eax),%edi
000006f7	movl	(%edi,%ecx,4),%eax
000006fa	movl	%edx,0x0c(%esp)
000006fe	movl	%eax,%edx
00000700	xorl	%esi,%edx
00000702	andl	%ebx,%edx
00000704	xorl	%eax,%edx
00000706	movl	(%edi,%ebp,4),%ebx
00000709	movl	%edx,(%edi,%ecx,4)
0000070c	movl	0x0c(%esp),%edx
00000710	xorl	%ebx,%esi
00000712	movb	0x07(%esp),%cl
00000716	movl	$0x000000ff,%eax
0000071b	shll	%cl,%eax
0000071d	andl	%esi,%eax
0000071f	xorl	%ebx,%eax
00000721	movl	%eax,(%edi,%ebp,4)
00000724	movl	0x08(%esp),%ebp
00000728	movl	0x24(%esp),%edi
0000072c	cmpl	$0x00004000,%edx
00000732	setb	%al
00000735	testl	%ebp,%ebp
00000737	je	0x0000073b
00000739	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%al
0000073b	shrdl	$0x07,%ebp,%edx
0000073f	movl	%edx,%esi
00000741	andl	$0x7f,%esi
00000744	testb	%al,%al
00000746	movl	(%esp),%ecx
00000749	je	0x000006a0
0000074f	movl	0x0c(%edi),%ebx
00000752	movl	(%ecx),%eax
00000754	movl	%eax,%ecx
00000756	subl	%ebx,%ecx
00000758	cmpl	$0x07,%ecx
0000075b	jg	0x00000766
0000075d	movl	%eax,0x0c(%edi)
00000760	movb	$0x01,0x10(%edi)
00000764	jmp	0x000007be
00000766	leal	0x08(%ebx),%eax
00000769	movl	%eax,0x0c(%edi)
0000076c	movl	%ebx,%edx
0000076e	andl	$0x1f,%edx
00000771	movb	%dl,%cl
00000773	movb	%cl,0x0c(%esp)
00000777	roll	%cl,%esi
00000779	movl	$0x0000001f,%ecx
0000077e	subl	%edx,%ecx
00000780	movl	%edi,%edx
00000782	movl	$0x0000007f,%edi
00000787	shrl	%cl,%edi
00000789	movl	%edi,%ecx
0000078b	andl	$0x01,%ecx
0000078e	sarl	$0x05,%ebx
00000791	addl	%ebx,%ecx
00000793	movl	(%edx),%edx
00000795	movl	(%edx,%ecx,4),%ebp
00000798	movl	%ebx,%eax
0000079a	movl	%ebp,%ebx
0000079c	xorl	%esi,%ebx
0000079e	andl	%edi,%ebx
000007a0	xorl	%ebp,%ebx
000007a2	movl	%eax,%ebp
000007a4	movl	(%edx,%ebp,4),%edi
000007a7	movl	%ebx,(%edx,%ecx,4)
000007aa	xorl	%edi,%esi
000007ac	movb	0x0c(%esp),%cl
000007b0	movl	$0x000000ff,%eax
000007b5	shll	%cl,%eax
000007b7	andl	%esi,%eax
000007b9	xorl	%edi,%eax
000007bb	movl	%eax,(%edx,%ebp,4)
000007be	addl	$0x10,%esp
000007c1	popl	%esi
000007c2	popl	%edi
000007c3	popl	%ebx
000007c4	popl	%ebp
000007c5	ret
000007c6	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteSignedVarInt32(int):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	subl	$0x08,%esp
000007d6	movl	0x08(%ebp),%eax
000007d9	movl	%eax,(%esp)
000007dc	movl	0x0c(%ebp),%ecx
000007df	movl	%ecx,%eax
000007e1	sarl	$0x1f,%eax
000007e4	leal	(%ecx,%ecx),%ecx
000007e7	xorl	%eax,%ecx
000007e9	movl	%ecx,0x04(%esp)
000007ed	calll	bf_write::WriteVarInt32(unsigned int)
000007f2	addl	$0x08,%esp
000007f5	popl	%ebp
000007f6	ret
000007f7	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteSignedVarInt64(long long):
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	subl	$0x18,%esp
00000806	movl	0x08(%ebp),%eax
00000809	movl	%eax,(%esp)
0000080c	movl	0x0c(%ebp),%ecx
0000080f	movl	0x10(%ebp),%eax
00000812	addl	%ecx,%ecx
00000814	movl	%eax,%edx
00000816	adcl	%edx,%edx
00000818	sarl	$0x1f,%eax
0000081b	xorl	%eax,%edx
0000081d	movl	%edx,0x08(%esp)
00000821	xorl	%ecx,%eax
00000823	movl	%eax,0x04(%esp)
00000827	calll	bf_write::WriteVarInt64(unsigned long long)
0000082c	addl	$0x18,%esp
0000082f	popl	%ebp
00000830	ret
00000831	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeVarInt32(unsigned int):
00000840	movl	$0x00000001,%eax
00000845	movl	0x08(%esp),%ecx
00000849	cmpl	$0x00000080,%ecx
0000084f	jb	0x00000870
00000851	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000860	movl	%ecx,%edx
00000862	shrl	$0x07,%edx
00000865	incl	%eax
00000866	cmpl	$0x00003fff,%ecx
0000086c	movl	%edx,%ecx
0000086e	ja	0x00000860
00000870	ret
00000871	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeVarInt64(unsigned long long):
00000880	pushl	%ebx
00000881	movl	0x0c(%esp),%ecx
00000885	cmpl	$0x00000080,%ecx
0000088b	setb	%bl
0000088e	movl	0x10(%esp),%edx
00000892	testl	%edx,%edx
00000894	je	0x00000898
00000896	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%bl
00000898	movl	$0x00000001,%eax
0000089d	testb	%bl,%bl
0000089f	jne	0x000008ce
000008a1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000008b0	cmpl	$0x00003fff,%ecx
000008b6	seta	%bl
000008b9	testl	%edx,%edx
000008bb	setne	%bh
000008be	je	0x000008c2
000008c0	movb	%bh,%bl
000008c2	shrdl	$0x07,%edx,%ecx
000008c6	incl	%eax
000008c7	shrl	$0x07,%edx
000008ca	testb	%bl,%bl
000008cc	jne	0x000008b0
000008ce	popl	%ebx
000008cf	ret
bf_write::ByteSizeSignedVarInt32(int):
000008d0	movl	0x08(%esp),%ecx
000008d4	movl	%ecx,%eax
000008d6	sarl	$0x1f,%eax
000008d9	leal	(%ecx,%ecx),%ecx
000008dc	xorl	%eax,%ecx
000008de	movl	$0x00000001,%eax
000008e3	cmpl	$0x00000080,%ecx
000008e9	jb	0x00000900
000008eb	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000008f0	movl	%ecx,%edx
000008f2	shrl	$0x07,%edx
000008f5	incl	%eax
000008f6	cmpl	$0x00003fff,%ecx
000008fc	movl	%edx,%ecx
000008fe	ja	0x000008f0
00000900	ret
00000901	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeSignedVarInt64(long long):
00000910	pushl	%ebx
00000911	movl	0x0c(%esp),%ecx
00000915	movl	0x10(%esp),%edx
00000919	addl	%ecx,%ecx
0000091b	movl	%edx,%eax
0000091d	adcl	%eax,%eax
0000091f	sarl	$0x1f,%edx
00000922	xorl	%edx,%ecx
00000924	cmpl	$0x00000080,%ecx
0000092a	setb	%bl
0000092d	xorl	%eax,%edx
0000092f	je	0x00000933
00000931	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%bl
00000933	movl	$0x00000001,%eax
00000938	testb	%bl,%bl
0000093a	jne	0x0000095e
0000093c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
00000940	cmpl	$0x00003fff,%ecx
00000946	seta	%bl
00000949	testl	%edx,%edx
0000094b	setne	%bh
0000094e	je	0x00000952
00000950	movb	%bh,%bl
00000952	shrdl	$0x07,%edx,%ecx
00000956	incl	%eax
00000957	shrl	$0x07,%edx
0000095a	testb	%bl,%bl
0000095c	jne	0x00000940
0000095e	popl	%ebx
0000095f	ret
bf_write::WriteBitLong(unsigned int, int, bool):
00000960	pushl	%ebp
00000961	pushl	%ebx
00000962	pushl	%edi
00000963	pushl	%esi
00000964	subl	$0x0c,%esp
00000967	movl	0x28(%esp),%eax
0000096b	movl	0x24(%esp),%esi
0000096f	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00000973	movb	0x2c(%esp),%cl
00000977	cmpb	$0x01,%cl
0000097a	jne	0x00000a24
00000980	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%ecx
00000985	subl	%eax,%ecx
00000987	movl	$0x7fffffff,%edx
0000098c	shrl	%cl,%edx
0000098e	movl	0x08(%ebp),%ecx
00000991	movl	0x0c(%ebp),%edi
00000994	movl	%ecx,%ebx
00000996	subl	%edi,%ebx
00000998	cmpl	%eax,%ebx
0000099a	jge	0x000009a8
0000099c	movl	%ecx,0x0c(%ebp)
0000099f	movb	$0x01,0x10(%ebp)
000009a3	jmp	0x00000aa3
000009a8	movl	%edx,%ecx
000009aa	andl	%esi,%ecx
000009ac	notl	%edx
000009ae	sarl	$0x1f,%esi
000009b1	andl	%edx,%esi
000009b3	orl	%ecx,%esi
000009b5	leal	(%edi,%eax),%ecx
000009b8	movl	%ecx,0x0c(%ebp)
000009bb	movl	%edi,%ebx
000009bd	andl	$0x1f,%ebx
000009c0	movl	$0x0000001f,%edx
000009c5	subl	%ebx,%edx
000009c7	decl	%eax
000009c8	movb	%al,%cl
000009ca	movl	$0x00000001,%eax
000009cf	shll	%cl,%eax
000009d1	movl	%eax,0x08(%esp)
000009d5	leal	0xff(%eax),%ebp
000009d8	movb	%dl,%cl
000009da	shrl	%cl,%ebp
000009dc	movl	%ebp,%eax
000009de	andl	$0x01,%eax
000009e1	sarl	$0x05,%edi
000009e4	addl	%edi,%eax
000009e6	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
000009ea	movl	(%ecx),%edx
000009ec	movl	(%edx,%eax,4),%ecx
000009ef	movl	%ecx,(%esp)
000009f2	movl	%ebx,%ecx
000009f4	movl	%ecx,0x04(%esp)
000009f8	roll	%cl,%esi
000009fa	movl	(%esp),%ebx
000009fd	movl	%ebx,%ecx
000009ff	xorl	%esi,%ecx
00000a01	andl	%ebp,%ecx
00000a03	xorl	%ebx,%ecx
00000a05	movl	(%edx,%edi,4),%ebp
00000a08	movl	%ecx,(%edx,%eax,4)
00000a0b	xorl	%ebp,%esi
00000a0d	movl	0x08(%esp),%eax
00000a11	leal	0xff(%eax,%eax),%eax
00000a15	movl	0x04(%esp),%ecx
00000a19	shll	%cl,%eax
00000a1b	andl	%esi,%eax
00000a1d	xorl	%ebp,%eax
00000a1f	movl	%eax,(%edx,%edi,4)
00000a22	jmp	0x00000aa3
00000a24	movl	0x08(%ebp),%ecx
00000a27	movl	0x0c(%ebp),%ebx
00000a2a	movl	%ecx,%edx
00000a2c	subl	%ebx,%edx
00000a2e	cmpl	%eax,%edx
00000a30	jl	0x0000099c
00000a36	leal	(%ebx,%eax),%ecx
00000a39	movl	%ecx,0x0c(%ebp)
00000a3c	movl	%ebx,%edi
00000a3e	andl	$0x1f,%edi
00000a41	movl	$0x0000001f,%edx
00000a46	subl	%edi,%edx
00000a48	decl	%eax
00000a49	movb	%al,%cl
00000a4b	movl	$0x00000001,%eax
00000a50	shll	%cl,%eax
00000a52	movl	%eax,0x08(%esp)
00000a56	leal	0xff(%eax),%ebp
00000a59	movb	%dl,%cl
00000a5b	shrl	%cl,%ebp
00000a5d	movl	%ebp,%eax
00000a5f	andl	$0x01,%eax
00000a62	sarl	$0x05,%ebx
00000a65	addl	%ebx,%eax
00000a67	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00000a6b	movl	(%ecx),%edx
00000a6d	movl	(%edx,%eax,4),%ecx
00000a70	movl	%ecx,(%esp)
00000a73	movl	%edi,%ecx
00000a75	movl	%ecx,0x04(%esp)
00000a79	roll	%cl,%esi
00000a7b	movl	(%esp),%edi
00000a7e	movl	%edi,%ecx
00000a80	xorl	%esi,%ecx
00000a82	andl	%ebp,%ecx
00000a84	xorl	%edi,%ecx
00000a86	movl	(%edx,%ebx,4),%edi
00000a89	movl	%ecx,(%edx,%eax,4)
00000a8c	xorl	%edi,%esi
00000a8e	movl	0x08(%esp),%eax
00000a92	leal	0xff(%eax,%eax),%eax
00000a96	movl	0x04(%esp),%ecx
00000a9a	shll	%cl,%eax
00000a9c	andl	%esi,%eax
00000a9e	xorl	%edi,%eax
00000aa0	movl	%eax,(%edx,%ebx,4)
00000aa3	addl	$0x0c,%esp
00000aa6	popl	%esi
00000aa7	popl	%edi
00000aa8	popl	%ebx
00000aa9	popl	%ebp
00000aaa	ret
00000aab	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBits(void const*, int):
00000ab0	pushl	%ebp
00000ab1	movl	%esp,%ebp
00000ab3	pushl	%ebx
00000ab4	pushl	%edi
00000ab5	pushl	%esi
00000ab6	subl	$0x2c,%esp
00000ab9	calll	0x00000abe
00000abe	popl	%eax
00000abf	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000ac2	movl	0x08(%ebp),%ebx
00000ac5	movl	0x08(%ebx),%eax
00000ac8	movl	0x0c(%ebx),%esi
00000acb	movl	0x10(%ebp),%edi
00000ace	leal	(%esi,%edi),%ecx
00000ad1	cmpl	%eax,%ecx
00000ad3	jg	0x00000dec
00000ad9	movl	0x0c(%ebp),%edx
00000adc	testb	$0x03,%dl
00000adf	je	0x00000b96
00000ae5	cmpl	$0x08,%edi
00000ae8	jl	0x00000b96
00000aee	incl	%edx
00000aef	addl	$0xf8,%edi
00000af2	jmp	0x00000b0a
00000af4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000b00	incl	%edx
00000b01	addl	$0xf8,%edi
00000b04	movl	0x08(%ebx),%eax
00000b07	movl	0x0c(%ebx),%esi
00000b0a	movl	%eax,%ecx
00000b0c	subl	%esi,%ecx
00000b0e	cmpl	$0x07,%ecx
00000b11	jg	0x00000b1c
00000b13	movl	%eax,0x0c(%ebx)
00000b16	movb	$0x01,0x10(%ebx)
00000b1a	jmp	0x00000b85
00000b1c	movl	%ebx,%ecx
00000b1e	movzbl	0xff(%edx),%ebx
00000b22	leal	0x08(%esi),%eax
00000b25	movl	%eax,0x0c(%ecx)
00000b28	movl	%ecx,%eax
00000b2a	movl	%edx,0xe8(%ebp)
00000b2d	movl	%esi,%edx
00000b2f	andl	$0x1f,%edx
00000b32	movb	%dl,%cl
00000b34	movb	%cl,0xe4(%ebp)
00000b37	roll	%cl,%ebx
00000b39	movl	$0x0000001f,%ecx
00000b3e	subl	%edx,%ecx
00000b40	movl	$0x0000007f,%edx
00000b45	shrl	%cl,%edx
00000b47	movl	%edx,%ecx
00000b49	andl	$0x01,%ecx
00000b4c	sarl	$0x05,%esi
00000b4f	addl	%esi,%ecx
00000b51	movl	%edi,0xf0(%ebp)
00000b54	movl	(%eax),%edi
00000b56	movl	(%edi,%ecx,4),%eax
00000b59	movl	%eax,0xec(%ebp)
00000b5c	movl	0xec(%ebp),%eax
00000b5f	xorl	%ebx,%eax
00000b61	andl	%edx,%eax
00000b63	xorl	0xec(%ebp),%eax
00000b66	movl	(%edi,%esi,4),%edx
00000b69	movl	%eax,(%edi,%ecx,4)
00000b6c	xorl	%edx,%ebx
00000b6e	movb	0xe4(%ebp),%cl
00000b71	movl	$0x000000ff,%eax
00000b76	shll	%cl,%eax
00000b78	andl	%ebx,%eax
00000b7a	xorl	%edx,%eax
00000b7c	movl	0xe8(%ebp),%edx
00000b7f	movl	%eax,(%edi,%esi,4)
00000b82	movl	0xf0(%ebp),%edi
00000b85	testb	$0x03,%dl
00000b88	movl	0x08(%ebp),%ebx
00000b8b	je	0x00000b96
00000b8d	cmpl	$0x08,%edi
00000b90	jge	0x00000b00
00000b96	cmpl	$0x1f,%edi
00000b99	jle	0x00000c90
00000b9f	movl	0x0c(%ebx),%ecx
00000ba2	testb	$0x07,%cl
00000ba5	jne	0x00000be7
00000ba7	movl	(%ebx),%eax
00000ba9	movl	%edi,%esi
00000bab	sarl	$0x03,%esi
00000bae	movl	%esi,0xdc(%ebp)
00000bb1	movl	%esi,0x08(%esp)
00000bb5	movl	%edx,0x04(%esp)
00000bb9	sarl	$0x03,%ecx
00000bbc	addl	%eax,%ecx
00000bbe	movl	%ecx,(%esp)
00000bc1	movl	%edi,%esi
00000bc3	andl	$0xf8,%esi
00000bc6	subl	%esi,%edi
00000bc8	movl	%edx,0xf0(%ebp)
00000bcb	calll	_memcpy
00000bd0	movl	%esi,%ecx
00000bd2	movl	0xdc(%ebp),%edx
00000bd5	addl	0x0c(%ebx),%ecx
00000bd8	movl	%ecx,0x0c(%ebx)
00000bdb	addl	0xf0(%ebp),%edx
00000bde	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edi
00000be1	jl	0x00000c90
00000be7	movl	%edx,0xdc(%ebp)
00000bea	movl	%ecx,%eax
00000bec	sarl	$0x05,%eax
00000bef	movl	%ecx,%esi
00000bf1	movl	(%ebx),%ecx
00000bf3	movl	%edx,%ebx
00000bf5	leal	0x04(%ecx,%eax,4),%edx
00000bf9	andl	$0x1f,%esi
00000bfc	movl	%esi,0xec(%ebp)
00000bff	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%eax
00000c04	subl	%esi,%eax
00000c06	movl	%eax,0xe8(%ebp)
00000c09	movl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%ecx
00000c0c	movl	_g_BitWriteMasks-0xabe(%ecx,%esi,4),%eax
00000c13	movl	%eax,0xe4(%ebp)
00000c16	imull	$0x00000084,%esi,%eax
00000c1c	movl	_g_BitWriteMasks-0xabe+0x00000080(%ecx,%eax),%eax
00000c23	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000c26	leal	bf_write::bf_write(char const*, void*, int, int)(%edi),%eax
00000c29	movl	%eax,0xd8(%ebp)
00000c2c	shrl	$0x03,%eax
00000c2f	andl	$0x1ffffffc,%eax
00000c34	addl	$0x04,%eax
00000c37	movl	%eax,0xd4(%ebp)
00000c3a	movl	%ebx,%esi
00000c3c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
00000c40	movl	%edi,0xf0(%ebp)
00000c43	movl	0xfc(%edx),%edi
00000c46	andl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%edi
00000c49	movl	(%esi),%eax
00000c4b	movl	0xec(%ebp),%ecx
00000c4e	movl	%eax,%ebx
00000c50	shll	%cl,%ebx
00000c52	orl	%edi,%ebx
00000c54	movl	%ebx,0xfc(%edx)
00000c57	movl	0xe8(%ebp),%ecx
00000c5a	cmpl	$0x1f,%ecx
00000c5d	ja	0x00000c6a
00000c5f	movl	(%edx),%edi
00000c61	andl	0xe4(%ebp),%edi
00000c64	shrl	%cl,%eax
00000c66	orl	%edi,%eax
00000c68	movl	%eax,(%edx)
00000c6a	addl	$0x04,%esi
00000c6d	movl	0x08(%ebp),%ebx
00000c70	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x0c(%ebx)
00000c74	addl	$0x04,%edx
00000c77	movl	0xf0(%ebp),%edi
00000c7a	addl	bf_write::bf_write(char const*, void*, int, int),%edi
00000c7d	cmpl	$0x1f,%edi
00000c80	jg	0x00000c40
00000c82	movl	0xdc(%ebp),%edx
00000c85	addl	0xd4(%ebp),%edx
00000c88	movl	0xd8(%ebp),%eax
00000c8b	andl	$0x1f,%eax
00000c8e	movl	%eax,%edi
00000c90	cmpl	$0x08,%edi
00000c93	jge	0x00000c9c
00000c95	movl	%edi,%eax
00000c97	jmp	0x00000d4b
00000c9c	leal	0xf8(%edi),%eax
00000c9f	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000ca2	shrl	$0x03,%eax
00000ca5	incl	%eax
00000ca6	movl	%eax,0xd8(%ebp)
00000ca9	movl	%edx,%esi
00000cab	movl	%edx,0xdc(%ebp)
00000cae	nop
00000cb0	movl	0x08(%ebx),%ecx
00000cb3	movl	0x0c(%ebx),%eax
00000cb6	movl	%ecx,%edx
00000cb8	subl	%eax,%edx
00000cba	cmpl	$0x07,%edx
00000cbd	jg	0x00000cc8
00000cbf	movl	%ecx,0x0c(%ebx)
00000cc2	movb	$0x01,0x10(%ebx)
00000cc6	jmp	0x00000d32
00000cc8	movl	%esi,0xec(%ebp)
00000ccb	movl	0xec(%ebp),%ecx
00000cce	movzbl	(%ecx),%esi
00000cd1	leal	0x08(%eax),%ecx
00000cd4	movl	%ecx,0x0c(%ebx)
00000cd7	movl	%eax,%edx
00000cd9	andl	$0x1f,%edx
00000cdc	movb	%dl,%cl
00000cde	movb	%cl,0xe4(%ebp)
00000ce1	roll	%cl,%esi
00000ce3	movl	$0x0000001f,%ecx
00000ce8	subl	%edx,%ecx
00000cea	movl	$0x0000007f,%edx
00000cef	shrl	%cl,%edx
00000cf1	movl	%edx,%ecx
00000cf3	andl	$0x01,%ecx
00000cf6	sarl	$0x05,%eax
00000cf9	addl	%eax,%ecx
00000cfb	movl	%edi,0xf0(%ebp)
00000cfe	movl	(%ebx),%edi
00000d00	movl	(%edi,%ecx,4),%ebx
00000d03	movl	%ebx,0xe8(%ebp)
00000d06	movl	0xe8(%ebp),%ebx
00000d09	xorl	%esi,%ebx
00000d0b	andl	%edx,%ebx
00000d0d	xorl	0xe8(%ebp),%ebx
00000d10	movl	(%edi,%eax,4),%edx
00000d13	movl	%ebx,(%edi,%ecx,4)
00000d16	xorl	%edx,%esi
00000d18	movb	0xe4(%ebp),%cl
00000d1b	movl	$0x000000ff,%ebx
00000d20	shll	%cl,%ebx
00000d22	andl	%esi,%ebx
00000d24	movl	0xec(%ebp),%esi
00000d27	xorl	%edx,%ebx
00000d29	movl	%ebx,(%edi,%eax,4)
00000d2c	movl	0xf0(%ebp),%edi
00000d2f	movl	0x08(%ebp),%ebx
00000d32	incl	%esi
00000d33	addl	$0xf8,%edi
00000d36	cmpl	$0x07,%edi
00000d39	jg	0x00000cb0
00000d3f	movl	0xdc(%ebp),%edx
00000d42	addl	0xd8(%ebp),%edx
00000d45	movl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%eax
00000d48	andl	$0x07,%eax
00000d4b	testl	%eax,%eax
00000d4d	movl	%eax,%esi
00000d4f	je	0x00000dda
00000d55	movl	0x08(%ebx),%eax
00000d58	movl	0x0c(%ebx),%edi
00000d5b	movl	%eax,%ecx
00000d5d	subl	%edi,%ecx
00000d5f	cmpl	%esi,%ecx
00000d61	jge	0x00000d6c
00000d63	movl	%eax,0x0c(%ebx)
00000d66	movb	$0x01,0x10(%ebx)
00000d6a	jmp	0x00000dda
00000d6c	movzbl	(%edx),%eax
00000d6f	movl	%esi,%ecx
00000d71	leal	(%edi,%ecx),%edx
00000d74	movl	%edx,0x0c(%ebx)
00000d77	movl	%edi,%edx
00000d79	andl	$0x1f,%edx
00000d7c	movl	%edx,0xf0(%ebp)
00000d7f	movl	$0x0000001f,%ebx
00000d84	subl	%edx,%ebx
00000d86	decl	%ecx
00000d87	movl	$0x00000001,%edx
00000d8c	shll	%cl,%edx
00000d8e	movl	%edx,0xe8(%ebp)
00000d91	leal	0xff(%edx),%esi
00000d94	movb	%bl,%cl
00000d96	shrl	%cl,%esi
00000d98	movl	%esi,%edx
00000d9a	andl	$0x01,%edx
00000d9d	sarl	$0x05,%edi
00000da0	addl	%edi,%edx
00000da2	movl	0x08(%ebp),%ecx
00000da5	movl	(%ecx),%ebx
00000da7	movl	(%ebx,%edx,4),%ecx
00000daa	movl	%ecx,0xec(%ebp)
00000dad	movl	0xf0(%ebp),%ecx
00000db0	roll	%cl,%eax
00000db2	movl	0xec(%ebp),%ecx
00000db5	xorl	%eax,%ecx
00000db7	andl	%esi,%ecx
00000db9	xorl	0xec(%ebp),%ecx
00000dbc	movl	(%ebx,%edi,4),%esi
00000dbf	movl	%ecx,(%ebx,%edx,4)
00000dc2	xorl	%esi,%eax
00000dc4	movl	0xe8(%ebp),%ecx
00000dc7	leal	0xff(%ecx,%ecx),%edx
00000dcb	movl	0xf0(%ebp),%ecx
00000dce	shll	%cl,%edx
00000dd0	andl	%eax,%edx
00000dd2	xorl	%esi,%edx
00000dd4	movl	%edx,(%ebx,%edi,4)
00000dd7	movl	0x08(%ebp),%ebx
00000dda	testb	$0x01,0x10(%ebx)
00000dde	sete	%al
00000de1	movzbl	%al,%eax
00000de4	addl	$0x2c,%esp
00000de7	popl	%esi
00000de8	popl	%edi
00000de9	popl	%ebx
00000dea	popl	%ebp
00000deb	ret
00000dec	movb	$0x01,0x10(%ebx)
00000df0	xorb	%al,%al
00000df2	jmp	0x00000de1
00000df4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitsFromBuffer(bf_read*, int):
00000e00	pushl	%ebp
00000e01	pushl	%ebx
00000e02	pushl	%edi
00000e03	pushl	%esi
00000e04	subl	$0x10,%esp
00000e07	movl	0x28(%esp),%edi
00000e0b	movl	0x08(%edi),%edx
00000e0e	movl	0x0c(%edi),%ecx
00000e11	movl	%edx,%ebx
00000e13	subl	%ecx,%ebx
00000e15	movl	0x2c(%esp),%eax
00000e19	cmpl	$0x21,%eax
00000e1c	jl	0x00000efc
00000e22	leal	0xdf(%eax),%esi
00000e25	andl	bf_write::bf_write(char const*, void*, int, int),%esi
00000e28	movl	%esi,0x04(%esp)
00000e2c	movl	%eax,0x0c(%esp)
00000e30	cmpl	$0x1f,%ebx
00000e33	jg	0x00000e40
00000e35	movl	%edx,0x0c(%edi)
00000e38	movb	$0x01,0x10(%edi)
00000e3c	xorl	%ebx,%ebx
00000e3e	jmp	0x00000e5f
00000e40	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ecx),%eax
00000e43	movl	%eax,0x0c(%edi)
00000e46	leal	0x1f(%ecx),%eax
00000e49	sarl	$0x05,%eax
00000e4c	movl	(%edi),%edx
00000e4e	movl	(%edx,%eax,4),%eax
00000e51	movl	%ecx,%esi
00000e53	sarl	$0x05,%esi
00000e56	movl	(%edx,%esi,4),%ebx
00000e59	andl	$0x1f,%ecx
00000e5c	shrdl	%cl,%eax,%ebx
00000e5f	movl	0x24(%esp),%edx
00000e63	movl	0x08(%edx),%eax
00000e66	movl	0x0c(%edx),%ebp
00000e69	movl	%eax,%ecx
00000e6b	subl	%ebp,%ecx
00000e6d	cmpl	$0x1f,%ecx
00000e70	jg	0x00000e7b
00000e72	movl	%eax,0x0c(%edx)
00000e75	movb	$0x01,0x10(%edx)
00000e79	jmp	0x00000ed3
00000e7b	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ebp),%eax
00000e7e	movl	%eax,0x0c(%edx)
00000e81	movl	%edx,%eax
00000e83	movl	%ebp,%edx
00000e85	andl	$0x1f,%edx
00000e88	movb	%dl,%cl
00000e8a	movb	%cl,0x08(%esp)
00000e8e	roll	%cl,%ebx
00000e90	movl	$0x0000001f,%ecx
00000e95	subl	%edx,%ecx
00000e97	movl	$0x7fffffff,%edi
00000e9c	shrl	%cl,%edi
00000e9e	movl	%edi,%ecx
00000ea0	andl	$0x01,%ecx
00000ea3	sarl	$0x05,%ebp
00000ea6	addl	%ebp,%ecx
00000ea8	movl	(%eax),%esi
00000eaa	movl	(%esi,%ecx,4),%eax
00000ead	movl	%eax,%edx
00000eaf	xorl	%ebx,%edx
00000eb1	andl	%edi,%edx
00000eb3	xorl	%eax,%edx
00000eb5	movl	(%esi,%ebp,4),%edi
00000eb8	movl	%edx,(%esi,%ecx,4)
00000ebb	xorl	%edi,%ebx
00000ebd	movb	0x08(%esp),%cl
00000ec1	movl	$0xffffffff,%eax
00000ec6	shll	%cl,%eax
00000ec8	andl	%ebx,%eax
00000eca	xorl	%edi,%eax
00000ecc	movl	0x28(%esp),%edi
00000ed0	movl	%eax,(%esi,%ebp,4)
00000ed3	movl	0x08(%edi),%edx
00000ed6	movl	0x0c(%edi),%ecx
00000ed9	movl	%edx,%ebx
00000edb	subl	%ecx,%ebx
00000edd	movl	0x0c(%esp),%eax
00000ee1	addl	bf_write::bf_write(char const*, void*, int, int),%eax
00000ee4	movl	%eax,0x0c(%esp)
00000ee8	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%eax
00000eeb	movl	0x2c(%esp),%eax
00000eef	jg	0x00000e30
00000ef5	addl	bf_write::bf_write(char const*, void*, int, int),%eax
00000ef8	subl	0x04(%esp),%eax
00000efc	cmpl	%eax,%ebx
00000efe	jge	0x00000f0b
00000f00	movl	%edx,0x0c(%edi)
00000f03	movb	$0x01,0x10(%edi)
00000f07	xorl	%ebx,%ebx
00000f09	jmp	0x00000f38
00000f0b	leal	0xff(%ecx,%eax),%edx
00000f0f	leal	(%ecx,%eax),%esi
00000f12	movl	%esi,0x0c(%edi)
00000f15	sarl	$0x05,%edx
00000f18	movl	(%edi),%edi
00000f1a	movl	(%edi,%edx,4),%esi
00000f1d	movl	%ecx,%edx
00000f1f	sarl	$0x05,%edx
00000f22	movl	(%edi,%edx,4),%edx
00000f25	andl	$0x1f,%ecx
00000f28	shrdl	%cl,%esi,%edx
00000f2b	leal	0xff(%eax),%ecx
00000f2e	movl	$0x00000002,%ebx
00000f33	shll	%cl,%ebx
00000f35	decl	%ebx
00000f36	andl	%edx,%ebx
00000f38	movl	0x24(%esp),%esi
00000f3c	movl	0x08(%esi),%ecx
00000f3f	movl	0x0c(%esi),%ebp
00000f42	movl	%ecx,%edx
00000f44	subl	%ebp,%edx
00000f46	cmpl	%eax,%edx
00000f48	jge	0x00000f58
00000f4a	movl	%ecx,0x0c(%esi)
00000f4d	movb	$0x01,0x10(%esi)
00000f51	xorb	%al,%al
00000f53	jmp	0x00000fe7
00000f58	leal	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax),%ecx
00000f5c	movl	%ecx,0x0c(%esi)
00000f5f	movl	%ebp,%ecx
00000f61	andl	$0x1f,%ecx
00000f64	movl	%ecx,0x0c(%esp)
00000f68	movl	$0x0000001f,%edx
00000f6d	subl	%ecx,%edx
00000f6f	movl	%edx,0x04(%esp)
00000f73	decl	%eax
00000f74	movb	%al,%cl
00000f76	movl	$0x00000001,%eax
00000f7b	shll	%cl,%eax
00000f7d	movl	%eax,0x08(%esp)
00000f81	leal	0xff(%eax),%edx
00000f84	movl	0x04(%esp),%ecx
00000f88	shrl	%cl,%edx
00000f8a	movl	%edx,%eax
00000f8c	andl	$0x01,%eax
00000f8f	sarl	$0x05,%ebp
00000f92	addl	%ebp,%eax
00000f94	movl	(%esi),%ecx
00000f96	movl	%ecx,0x04(%esp)
00000f9a	movl	(%ecx,%eax,4),%edi
00000f9d	movl	0x0c(%esp),%ecx
00000fa1	movl	%ecx,0x0c(%esp)
00000fa5	movl	0x0c(%esp),%ecx
00000fa9	roll	%cl,%ebx
00000fab	movl	%edi,%ecx
00000fad	xorl	%ebx,%ecx
00000faf	andl	%edx,%ecx
00000fb1	xorl	%edi,%ecx
00000fb3	movl	0x04(%esp),%edi
00000fb7	movl	(%edi,%ebp,4),%edx
00000fba	movl	%ecx,(%edi,%eax,4)
00000fbd	xorl	%edx,%ebx
00000fbf	movl	0x08(%esp),%eax
00000fc3	leal	0xff(%eax,%eax),%eax
00000fc7	movl	0x0c(%esp),%ecx
00000fcb	shll	%cl,%eax
00000fcd	andl	%ebx,%eax
00000fcf	xorl	%edx,%eax
00000fd1	movl	%eax,(%edi,%ebp,4)
00000fd4	xorb	%al,%al
00000fd6	testb	$0x01,0x10(%esi)
00000fda	jne	0x00000fe7
00000fdc	movl	0x28(%esp),%eax
00000fe0	testb	$0x01,0x10(%eax)
00000fe4	sete	%al
00000fe7	movzbl	%al,%eax
00000fea	addl	$0x10,%esp
00000fed	popl	%esi
00000fee	popl	%edi
00000fef	popl	%ebx
00000ff0	popl	%ebp
00000ff1	ret
00000ff2	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitAngle(float, int):
00001000	pushl	%ebp
00001001	pushl	%ebx
00001002	pushl	%edi
00001003	pushl	%esi
00001004	subl	$0x0c,%esp
00001007	calll	0x0000100c
0000100c	popl	%eax
0000100d	movsd	0x1a980-0x100c(%eax),%xmm0
00001015	movl	0x28(%esp),%ecx
00001019	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
0000101d	movl	0x08(%edi),%edx
00001020	movl	0x0c(%edi),%ebx
00001023	movl	%edx,%esi
00001025	subl	%ebx,%esi
00001027	cmpl	%ecx,%esi
00001029	jge	0x00001037
0000102b	movl	%edx,0x0c(%edi)
0000102e	movb	$0x01,0x10(%edi)
00001032	jmp	0x000010d5
00001037	movl	%ecx,%edx
00001039	andl	$0x1f,%edx
0000103c	movl	GetBitForBitnum(int)::bitsForBitnum-0x100c(%eax,%edx,4),%esi
00001043	movd	%esi,%xmm1
00001047	orpd	%xmm0,%xmm1
0000104b	subsd	%xmm0,%xmm1
0000104f	movss	0x24(%esp),%xmm0
00001055	cvtss2sd	%xmm0,%xmm0
00001059	divsd	0x1a988-0x100c(%eax),%xmm0
00001061	mulsd	%xmm1,%xmm0
00001065	cvttsd2si	%xmm0,%eax
00001069	decl	%esi
0000106a	andl	%eax,%esi
0000106c	leal	(%ebx,%ecx),%eax
0000106f	movl	%eax,0x0c(%edi)
00001072	movl	%ebx,%ebp
00001074	andl	$0x1f,%ebp
00001077	movl	$0x0000001f,%eax
0000107c	subl	%ebp,%eax
0000107e	decl	%ecx
0000107f	movl	$0x00000001,%edx
00001084	shll	%cl,%edx
00001086	movl	%edx,0x08(%esp)
0000108a	leal	0xff(%edx),%edx
0000108d	movb	%al,%cl
0000108f	shrl	%cl,%edx
00001091	movl	%edx,%eax
00001093	andl	$0x01,%eax
00001096	sarl	$0x05,%ebx
00001099	movl	%ebx,(%esp)
0000109c	addl	%ebx,%eax
0000109e	movl	(%edi),%edi
000010a0	movl	(%edi,%eax,4),%ebx
000010a3	movl	%ebp,%ecx
000010a5	movl	%ecx,0x04(%esp)
000010a9	roll	%cl,%esi
000010ab	movl	%ebx,%ebp
000010ad	movl	%ebp,%ecx
000010af	xorl	%esi,%ecx
000010b1	andl	%edx,%ecx
000010b3	xorl	%ebp,%ecx
000010b5	movl	(%esp),%ebx
000010b8	movl	(%edi,%ebx,4),%edx
000010bb	movl	%ecx,(%edi,%eax,4)
000010be	xorl	%edx,%esi
000010c0	movl	0x08(%esp),%eax
000010c4	leal	0xff(%eax,%eax),%eax
000010c8	movl	0x04(%esp),%ecx
000010cc	shll	%cl,%eax
000010ce	andl	%esi,%eax
000010d0	xorl	%edx,%eax
000010d2	movl	%eax,(%edi,%ebx,4)
000010d5	addl	$0x0c,%esp
000010d8	popl	%esi
000010d9	popl	%edi
000010da	popl	%ebx
000010db	popl	%ebp
000010dc	ret
000010dd	nopl	(%eax)
bf_write::WriteBitCoordMP(float, bool, bool):
000010e0	pushl	%ebp
000010e1	pushl	%ebx
000010e2	pushl	%edi
000010e3	pushl	%esi
000010e4	subl	$0x0c,%esp
000010e7	calll	0x000010ec
000010ec	popl	%edi
000010ed	movb	0x2c(%esp),%al
000010f1	testb	%al,%al
000010f3	je	0x000010ff
000010f5	movsd	0x1a990-0x10ec(%edi),%xmm1
000010fd	jmp	0x00001107
000010ff	movsd	0x1a998-0x10ec(%edi),%xmm1
00001107	xorpd	0x1a9f0-0x10ec(%edi),%xmm1
0000110f	movss	0x24(%esp),%xmm0
00001115	cvtss2sd	%xmm0,%xmm2
00001119	ucomisd	%xmm2,%xmm1
0000111d	setae	%dl
00001120	cvttss2si	%xmm0,%ecx
00001124	movl	%ecx,%esi
00001126	sarl	$0x1f,%esi
00001129	addl	%esi,%ecx
0000112b	xorl	%esi,%ecx
0000112d	testb	%al,%al
0000112f	movzbl	%dl,%edx
00001132	movb	0x28(%esp),%ah
00001136	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%esi
0000113a	je	0x00001156
0000113c	mulss	0x1aa34-0x10ec(%edi),%xmm0
00001144	cvttss2si	%xmm0,%edi
00001148	movl	%edi,%ebx
0000114a	sarl	$0x1f,%ebx
0000114d	addl	%ebx,%edi
0000114f	xorl	%ebx,%edi
00001151	andl	$0x07,%edi
00001154	jmp	0x0000116e
00001156	mulss	0x1aa30-0x10ec(%edi),%xmm0
0000115e	cvttss2si	%xmm0,%edi
00001162	movl	%edi,%ebx
00001164	sarl	$0x1f,%ebx
00001167	addl	%ebx,%edi
00001169	xorl	%ebx,%edi
0000116b	andl	$0x1f,%edi
0000116e	cmpb	$0x01,%ah
00001171	jne	0x000011b9
00001173	testl	%ecx,%ecx
00001175	je	0x000011a6
00001177	leal	0xfffffff8(,%ecx,8),%edi
0000117e	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
00001184	setl	%al
00001187	movzbl	%al,%eax
0000118a	orl	%edi,%eax
0000118c	shll	$0x02,%edx
0000118f	orl	%eax,%edx
00001191	orl	$0x02,%edx
00001194	cmpl	$0x000007ff,%ecx
0000119a	setg	%al
0000119d	movzbl	%al,%eax
000011a0	leal	0x0e(%eax,%eax,2),%ecx
000011a4	jmp	0x00001224
000011a6	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
000011ac	setl	%al
000011af	movzbl	%al,%edx
000011b2	movl	$0x00000002,%ecx
000011b7	jmp	0x00001224
000011b9	testl	%ecx,%ecx
000011bb	je	0x000011fe
000011bd	leal	0xfffffff8(,%ecx,8),%ebp
000011c4	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
000011ca	setl	%ah
000011cd	movzbl	%ah,%ebx
000011d0	orl	%ebp,%ebx
000011d2	shll	$0x02,%edx
000011d5	orl	%ebx,%edx
000011d7	cmpl	$0x000007ff,%ecx
000011dd	setg	%cl
000011e0	movzbl	%cl,%ebx
000011e3	leal	0x0e(%ebx,%ebx,2),%ecx
000011e7	shll	%cl,%edi
000011e9	leal	0x02(%edi,%edx),%edx
000011ed	testb	%al,%al
000011ef	sete	%al
000011f2	movzbl	%al,%eax
000011f5	leal	(%ebx,%ebx,2),%ecx
000011f8	leal	0x11(%ecx,%eax,2),%ecx
000011fc	jmp	0x00001224
000011fe	shll	$0x02,%edx
00001201	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
00001207	setl	%cl
0000120a	movzbl	%cl,%ecx
0000120d	orl	%edx,%ecx
0000120f	shll	$0x03,%edi
00001212	orl	%ecx,%edi
00001214	testb	%al,%al
00001216	sete	%al
00001219	movzbl	%al,%eax
0000121c	imull	$0x02,%eax,%ecx
0000121f	addl	$0x06,%ecx
00001222	movl	%edi,%edx
00001224	movl	0x08(%esi),%eax
00001227	movl	0x0c(%esi),%edi
0000122a	movl	%eax,%ebx
0000122c	subl	%edi,%ebx
0000122e	cmpl	%ecx,%ebx
00001230	jge	0x0000123b
00001232	movl	%eax,0x0c(%esi)
00001235	movb	$0x01,0x10(%esi)
00001239	jmp	0x000012a8
0000123b	leal	(%edi,%ecx),%eax
0000123e	movl	%eax,0x0c(%esi)
00001241	movl	%edi,%ebp
00001243	andl	$0x1f,%ebp
00001246	movl	$0x0000001f,%eax
0000124b	subl	%ebp,%eax
0000124d	decl	%ecx
0000124e	movl	$0x00000001,%esi
00001253	shll	%cl,%esi
00001255	movl	%esi,0x04(%esp)
00001259	leal	0xff(%esi),%ebx
0000125c	movb	%al,%cl
0000125e	shrl	%cl,%ebx
00001260	movl	%ebx,%eax
00001262	andl	$0x01,%eax
00001265	sarl	$0x05,%edi
00001268	addl	%edi,%eax
0000126a	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
0000126e	movl	(%ecx),%esi
00001270	movl	(%esi,%eax,4),%ecx
00001273	movl	%ecx,(%esp)
00001276	movl	%ebp,0x08(%esp)
0000127a	movl	0x08(%esp),%ecx
0000127e	roll	%cl,%edx
00001280	movl	(%esp),%ebp
00001283	movl	%ebp,%ecx
00001285	xorl	%edx,%ecx
00001287	andl	%ebx,%ecx
00001289	xorl	%ebp,%ecx
0000128b	movl	(%esi,%edi,4),%ebx
0000128e	movl	%ecx,(%esi,%eax,4)
00001291	xorl	%ebx,%edx
00001293	movl	0x04(%esp),%eax
00001297	leal	0xff(%eax,%eax),%eax
0000129b	movl	0x08(%esp),%ecx
0000129f	shll	%cl,%eax
000012a1	andl	%edx,%eax
000012a3	xorl	%ebx,%eax
000012a5	movl	%eax,(%esi,%edi,4)
000012a8	addl	$0x0c,%esp
000012ab	popl	%esi
000012ac	popl	%edi
000012ad	popl	%ebx
000012ae	popl	%ebp
000012af	ret
bf_write::WriteBitCoord(float):
000012b0	pushl	%ebp
000012b1	pushl	%ebx
000012b2	pushl	%edi
000012b3	pushl	%esi
000012b4	subl	$0x08,%esp
000012b7	calll	0x000012bc
000012bc	popl	%esi
000012bd	movss	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%xmm0
000012c3	cvttss2si	%xmm0,%ebx
000012c7	movl	%ebx,%eax
000012c9	sarl	$0x1f,%eax
000012cc	addl	%eax,%ebx
000012ce	xorl	%eax,%ebx
000012d0	movss	0x1aa38-0x12bc(%esi),%xmm1
000012d8	mulss	%xmm0,%xmm1
000012dc	cvttss2si	%xmm1,%ecx
000012e0	movl	%ecx,%eax
000012e2	sarl	$0x1f,%eax
000012e5	addl	%eax,%ecx
000012e7	xorl	%eax,%ecx
000012e9	andl	$0x1f,%ecx
000012ec	movl	%ecx,0x04(%esp)
000012f0	movl	0x1c(%esp),%edi
000012f4	movl	0x08(%edi),%ecx
000012f7	movl	0x0c(%edi),%eax
000012fa	cmpl	%ecx,%eax
000012fc	jl	0x00001304
000012fe	movb	$0x01,0x10(%edi)
00001302	jmp	0x0000132f
00001304	movb	%al,%cl
00001306	movl	$0x00000001,%edx
0000130b	shll	%cl,%edx
0000130d	testl	%ebx,%ebx
0000130f	je	0x0000131b
00001311	movl	(%edi),%ecx
00001313	sarl	$0x05,%eax
00001316	orl	%edx,(%ecx,%eax,4)
00001319	jmp	0x00001325
0000131b	movl	(%edi),%ecx
0000131d	notl	%edx
0000131f	sarl	$0x05,%eax
00001322	andl	%edx,(%ecx,%eax,4)
00001325	movl	0x0c(%edi),%eax
00001328	incl	%eax
00001329	movl	%eax,0x0c(%edi)
0000132c	movl	0x08(%edi),%ecx
0000132f	cmpl	%ecx,%eax
00001331	jl	0x00001341
00001333	movb	$0x01,0x10(%edi)
00001337	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%esp)
0000133c	sete	%dl
0000133f	jmp	0x0000136f
00001341	movb	%al,%cl
00001343	movl	$0x00000001,%ebp
00001348	shll	%cl,%ebp
0000134a	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%esp)
0000134f	sete	%dl
00001352	je	0x0000135e
00001354	movl	(%edi),%ecx
00001356	sarl	$0x05,%eax
00001359	orl	%ebp,(%ecx,%eax,4)
0000135c	jmp	0x00001368
0000135e	movl	(%edi),%ecx
00001360	notl	%ebp
00001362	sarl	$0x05,%eax
00001365	andl	%ebp,(%ecx,%eax,4)
00001368	movl	0x0c(%edi),%eax
0000136b	incl	%eax
0000136c	movl	%eax,0x0c(%edi)
0000136f	testl	%ebx,%ebx
00001371	sete	%cl
00001374	cmpb	$0x01,%dl
00001377	jne	0x00001381
00001379	testb	%cl,%cl
0000137b	jne	0x000014ae
00001381	cmpl	0x08(%edi),%eax
00001384	jl	0x00001390
00001386	movb	%dl,0x03(%esp)
0000138a	movb	$0x01,0x10(%edi)
0000138e	jmp	0x000013c5
00001390	movb	%dl,0x03(%esp)
00001394	movb	%al,%cl
00001396	movl	$0x00000001,%ebp
0000139b	shll	%cl,%ebp
0000139d	movss	0x1aa3c-0x12bc(%esi),%xmm1
000013a5	ucomiss	%xmm0,%xmm1
000013a8	jb	0x000013b4
000013aa	movl	(%edi),%ecx
000013ac	sarl	$0x05,%eax
000013af	orl	%ebp,(%ecx,%eax,4)
000013b2	jmp	0x000013be
000013b4	movl	(%edi),%ecx
000013b6	notl	%ebp
000013b8	sarl	$0x05,%eax
000013bb	andl	%ebp,(%ecx,%eax,4)
000013be	movl	0x0c(%edi),%eax
000013c1	incl	%eax
000013c2	movl	%eax,0x0c(%edi)
000013c5	testl	%ebx,%ebx
000013c7	je	0x00001439
000013c9	movl	0x08(%edi),%ecx
000013cc	movl	%ecx,%edx
000013ce	subl	%eax,%edx
000013d0	cmpl	$0x0d,%edx
000013d3	jg	0x000013de
000013d5	movl	%ecx,0x0c(%edi)
000013d8	movb	$0x01,0x10(%edi)
000013dc	jmp	0x00001439
000013de	decl	%ebx
000013df	leal	0x0e(%eax),%ecx
000013e2	movl	%ecx,0x0c(%edi)
000013e5	movl	%eax,%edx
000013e7	andl	$0x1f,%edx
000013ea	movb	%dl,%cl
000013ec	movb	%cl,0x02(%esp)
000013f0	roll	%cl,%ebx
000013f2	movl	$0x0000001f,%ecx
000013f7	subl	%edx,%ecx
000013f9	movl	$0x00001fff,%edx
000013fe	shrl	%cl,%edx
00001400	movl	%edx,%ecx
00001402	andl	$0x01,%ecx
00001405	sarl	$0x05,%eax
00001408	addl	%eax,%ecx
0000140a	movl	(%edi),%ebp
0000140c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%edi
00001410	movl	%edi,%esi
00001412	xorl	%ebx,%esi
00001414	andl	%edx,%esi
00001416	xorl	%edi,%esi
00001418	movl	0x1c(%esp),%edi
0000141c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4),%edx
00001420	movl	%esi,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00001424	xorl	%edx,%ebx
00001426	movb	0x02(%esp),%cl
0000142a	movl	$0x00003fff,%esi
0000142f	shll	%cl,%esi
00001431	andl	%ebx,%esi
00001433	xorl	%edx,%esi
00001435	movl	%esi,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4)
00001439	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x03(%esp)
0000143e	jne	0x000014ae
00001440	movl	0x08(%edi),%eax
00001443	movl	0x0c(%edi),%edx
00001446	movl	%eax,%ecx
00001448	subl	%edx,%ecx
0000144a	cmpl	$0x04,%ecx
0000144d	jg	0x00001458
0000144f	movl	%eax,0x0c(%edi)
00001452	movb	$0x01,0x10(%edi)
00001456	jmp	0x000014ae
00001458	leal	0x05(%edx),%eax
0000145b	movl	%eax,0x0c(%edi)
0000145e	movl	%edx,%ebx
00001460	andl	$0x1f,%ebx
00001463	movb	%bl,%cl
00001465	movb	%cl,0x03(%esp)
00001469	movl	0x04(%esp),%esi
0000146d	roll	%cl,%esi
0000146f	movl	$0x0000001f,%ecx
00001474	subl	%ebx,%ecx
00001476	movl	$0x0000000f,%ebx
0000147b	shrl	%cl,%ebx
0000147d	movl	%ebx,%ecx
0000147f	andl	$0x01,%ecx
00001482	sarl	$0x05,%edx
00001485	addl	%edx,%ecx
00001487	movl	(%edi),%edi
00001489	movl	(%edi,%ecx,4),%eax
0000148c	movl	%eax,%ebp
0000148e	xorl	%esi,%ebp
00001490	andl	%ebx,%ebp
00001492	xorl	%eax,%ebp
00001494	movl	(%edi,%edx,4),%ebx
00001497	movl	%ebp,(%edi,%ecx,4)
0000149a	xorl	%ebx,%esi
0000149c	movb	0x03(%esp),%cl
000014a0	movl	$0x0000001f,%eax
000014a5	shll	%cl,%eax
000014a7	andl	%esi,%eax
000014a9	xorl	%ebx,%eax
000014ab	movl	%eax,(%edi,%edx,4)
000014ae	addl	$0x08,%esp
000014b1	popl	%esi
000014b2	popl	%edi
000014b3	popl	%ebx
000014b4	popl	%ebp
000014b5	ret
000014b6	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitVec3Coord(Vector const&):
000014c0	pushl	%ebp
000014c1	movl	%esp,%ebp
000014c3	pushl	%ebx
000014c4	pushl	%edi
000014c5	pushl	%esi
000014c6	subl	$0x0c,%esp
000014c9	calll	0x000014ce
000014ce	popl	%eax
000014cf	movl	0x0c(%ebp),%esi
000014d2	movss	(%esi),%xmm0
000014d6	movb	$0x01,%dh
000014d8	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
000014df	movb	$0x01,%dl
000014e1	jae	0x000014f1
000014e3	movss	0x1aa44-0x14ce(%eax),%xmm1
000014eb	ucomiss	%xmm0,%xmm1
000014ee	setae	%dl
000014f1	movss	0x04(%esi),%xmm0
000014f6	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
000014fd	jae	0x0000150d
000014ff	movss	0x1aa44-0x14ce(%eax),%xmm1
00001507	ucomiss	%xmm0,%xmm1
0000150a	setae	%dh
0000150d	movss	0x08(%esi),%xmm0
00001512	movb	$0x01,0xf3(%ebp)
00001516	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
0000151d	jae	0x0000152e
0000151f	movss	0x1aa44-0x14ce(%eax),%xmm1
00001527	ucomiss	%xmm0,%xmm1
0000152a	setae	0xf3(%ebp)
0000152e	movl	0x08(%ebp),%edi
00001531	movl	0x08(%edi),%ecx
00001534	movl	0x0c(%edi),%eax
00001537	cmpl	%ecx,%eax
00001539	jl	0x00001541
0000153b	movb	$0x01,0x10(%edi)
0000153f	jmp	0x00001571
00001541	movl	%esi,%ebx
00001543	movb	%al,%cl
00001545	movl	$0x00000001,%esi
0000154a	shll	%cl,%esi
0000154c	cmpb	$0x01,%dl
0000154f	jne	0x0000155b
00001551	movl	(%edi),%ecx
00001553	sarl	$0x05,%eax
00001556	orl	%esi,(%ecx,%eax,4)
00001559	jmp	0x00001565
0000155b	movl	(%edi),%ecx
0000155d	notl	%esi
0000155f	sarl	$0x05,%eax
00001562	andl	%esi,(%ecx,%eax,4)
00001565	movl	0x0c(%edi),%eax
00001568	incl	%eax
00001569	movl	%eax,0x0c(%edi)
0000156c	movl	0x08(%edi),%ecx
0000156f	movl	%ebx,%esi
00001571	movl	%esi,%ebx
00001573	cmpl	%ecx,%eax
00001575	jl	0x0000157d
00001577	movb	$0x01,0x10(%edi)
0000157b	jmp	0x000015a9
0000157d	movb	%al,%cl
0000157f	movl	$0x00000001,%esi
00001584	shll	%cl,%esi
00001586	cmpb	$0x01,%dh
00001589	jne	0x00001595
0000158b	movl	(%edi),%ecx
0000158d	sarl	$0x05,%eax
00001590	orl	%esi,(%ecx,%eax,4)
00001593	jmp	0x0000159f
00001595	movl	(%edi),%ecx
00001597	notl	%esi
00001599	sarl	$0x05,%eax
0000159c	andl	%esi,(%ecx,%eax,4)
0000159f	movl	0x0c(%edi),%eax
000015a2	incl	%eax
000015a3	movl	%eax,0x0c(%edi)
000015a6	movl	0x08(%edi),%ecx
000015a9	cmpl	%ecx,%eax
000015ab	jl	0x000015b6
000015ad	movb	%dh,0xf2(%ebp)
000015b0	movb	$0x01,0x10(%edi)
000015b4	jmp	0x000015df
000015b6	movb	%dh,0xf2(%ebp)
000015b9	movb	%al,%cl
000015bb	movl	$0x00000001,%esi
000015c0	shll	%cl,%esi
000015c2	cmpb	$0x01,0xf3(%ebp)
000015c6	jne	0x000015d2
000015c8	movl	(%edi),%ecx
000015ca	sarl	$0x05,%eax
000015cd	orl	%esi,(%ecx,%eax,4)
000015d0	jmp	0x000015dc
000015d2	movl	(%edi),%ecx
000015d4	notl	%esi
000015d6	sarl	$0x05,%eax
000015d9	andl	%esi,(%ecx,%eax,4)
000015dc	incl	0x0c(%edi)
000015df	cmpb	$0x01,%dl
000015e2	jne	0x000015f6
000015e4	movss	(%ebx),%xmm0
000015e8	movss	%xmm0,0x04(%esp)
000015ee	movl	%edi,(%esp)
000015f1	calll	bf_write::WriteBitCoord(float)
000015f6	cmpb	$0x01,0xf2(%ebp)
000015fa	jne	0x0000160f
000015fc	movss	0x04(%ebx),%xmm0
00001601	movss	%xmm0,0x04(%esp)
00001607	movl	%edi,(%esp)
0000160a	calll	bf_write::WriteBitCoord(float)
0000160f	cmpb	$0x01,0xf3(%ebp)
00001613	jne	0x00001628
00001615	movss	0x08(%ebx),%xmm0
0000161a	movss	%xmm0,0x04(%esp)
00001620	movl	%edi,(%esp)
00001623	calll	bf_write::WriteBitCoord(float)
00001628	addl	$0x0c,%esp
0000162b	popl	%esi
0000162c	popl	%edi
0000162d	popl	%ebx
0000162e	popl	%ebp
0000162f	ret
bf_write::WriteBitNormal(float):
00001630	pushl	%ebp
00001631	pushl	%ebx
00001632	pushl	%edi
00001633	pushl	%esi
00001634	pushl	%eax
00001635	calll	0x0000163a
0000163a	popl	%edx
0000163b	movss	0x1c(%esp),%xmm0
00001641	movss	0x1aa48-0x163a(%edx),%xmm1
00001649	mulss	%xmm0,%xmm1
0000164d	cvttss2si	%xmm1,%eax
00001651	movl	%eax,%ecx
00001653	sarl	$0x1f,%ecx
00001656	addl	%ecx,%eax
00001658	xorl	%ecx,%eax
0000165a	cmpl	$0x000007ff,%eax
0000165f	movl	$0x000007ff,%esi
00001664	cmovbel	%eax,%esi
00001667	movl	0x18(%esp),%edi
0000166b	movl	0x08(%edi),%ecx
0000166e	movl	0x0c(%edi),%eax
00001671	cmpl	%ecx,%eax
00001673	jl	0x0000167b
00001675	movb	$0x01,0x10(%edi)
00001679	jmp	0x000016b4
0000167b	movb	%al,%cl
0000167d	movl	$0x00000001,%ebx
00001682	shll	%cl,%ebx
00001684	cvtss2sd	%xmm0,%xmm0
00001688	movsd	0x1a9a0-0x163a(%edx),%xmm1
00001690	ucomisd	%xmm0,%xmm1
00001694	jb	0x000016a0
00001696	movl	(%edi),%ecx
00001698	sarl	$0x05,%eax
0000169b	orl	%ebx,(%ecx,%eax,4)
0000169e	jmp	0x000016aa
000016a0	movl	(%edi),%ecx
000016a2	notl	%ebx
000016a4	sarl	$0x05,%eax
000016a7	andl	%ebx,(%ecx,%eax,4)
000016aa	movl	0x0c(%edi),%eax
000016ad	incl	%eax
000016ae	movl	%eax,0x0c(%edi)
000016b1	movl	0x08(%edi),%ecx
000016b4	movl	%ecx,%edx
000016b6	subl	%eax,%edx
000016b8	cmpl	$0x0a,%edx
000016bb	jg	0x000016c6
000016bd	movl	%ecx,0x0c(%edi)
000016c0	movb	$0x01,0x10(%edi)
000016c4	jmp	0x00001718
000016c6	leal	0x0b(%eax),%ecx
000016c9	movl	%ecx,0x0c(%edi)
000016cc	movl	%eax,%ebx
000016ce	andl	$0x1f,%ebx
000016d1	movb	%bl,%cl
000016d3	movb	%cl,0x03(%esp)
000016d7	roll	%cl,%esi
000016d9	movl	$0x0000001f,%ecx
000016de	subl	%ebx,%ecx
000016e0	movl	$0x000003ff,%ebx
000016e5	shrl	%cl,%ebx
000016e7	movl	%ebx,%ecx
000016e9	andl	$0x01,%ecx
000016ec	sarl	$0x05,%eax
000016ef	addl	%eax,%ecx
000016f1	movl	(%edi),%edi
000016f3	movl	(%edi,%ecx,4),%edx
000016f6	movl	%edx,%ebp
000016f8	xorl	%esi,%ebp
000016fa	andl	%ebx,%ebp
000016fc	xorl	%edx,%ebp
000016fe	movl	(%edi,%eax,4),%ebx
00001701	movl	%ebp,(%edi,%ecx,4)
00001704	xorl	%ebx,%esi
00001706	movb	0x03(%esp),%cl
0000170a	movl	$0x000007ff,%edx
0000170f	shll	%cl,%edx
00001711	andl	%esi,%edx
00001713	xorl	%ebx,%edx
00001715	movl	%edx,(%edi,%eax,4)
00001718	addl	$0x04,%esp
0000171b	popl	%esi
0000171c	popl	%edi
0000171d	popl	%ebx
0000171e	popl	%ebp
0000171f	ret
bf_write::WriteBitVec3Normal(Vector const&):
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	pushl	%ebx
00001724	pushl	%edi
00001725	pushl	%esi
00001726	subl	$0x0c,%esp
00001729	calll	0x0000172e
0000172e	popl	%esi
0000172f	movl	0x0c(%ebp),%edx
00001732	movss	(%edx),%xmm0
00001736	cvtss2sd	%xmm0,%xmm0
0000173a	movb	$0x01,0xf3(%ebp)
0000173e	ucomisd	0x1a9a8-0x172e(%esi),%xmm0
00001746	movb	$0x01,0xf2(%ebp)
0000174a	jae	0x0000175c
0000174c	movsd	0x1a9b0-0x172e(%esi),%xmm1
00001754	ucomisd	%xmm0,%xmm1
00001758	setae	0xf2(%ebp)
0000175c	movss	0x04(%edx),%xmm0
00001761	cvtss2sd	%xmm0,%xmm0
00001765	ucomisd	0x1a9a8-0x172e(%esi),%xmm0
0000176d	jae	0x0000177f
0000176f	movsd	0x1a9b0-0x172e(%esi),%xmm1
00001777	ucomisd	%xmm0,%xmm1
0000177b	setae	0xf3(%ebp)
0000177f	movl	0x08(%ebp),%ebx
00001782	movl	0x08(%ebx),%ecx
00001785	movl	0x0c(%ebx),%eax
00001788	cmpl	%ecx,%eax
0000178a	jl	0x00001792
0000178c	movb	$0x01,0x10(%ebx)
00001790	jmp	0x000017bf
00001792	movb	%al,%cl
00001794	movl	$0x00000001,%edi
00001799	shll	%cl,%edi
0000179b	cmpb	$0x01,0xf2(%ebp)
0000179f	jne	0x000017ab
000017a1	movl	(%ebx),%ecx
000017a3	sarl	$0x05,%eax
000017a6	orl	%edi,(%ecx,%eax,4)
000017a9	jmp	0x000017b5
000017ab	movl	(%ebx),%ecx
000017ad	notl	%edi
000017af	sarl	$0x05,%eax
000017b2	andl	%edi,(%ecx,%eax,4)
000017b5	movl	0x0c(%ebx),%eax
000017b8	incl	%eax
000017b9	movl	%eax,0x0c(%ebx)
000017bc	movl	0x08(%ebx),%ecx
000017bf	cmpl	%ecx,%eax
000017c1	jl	0x000017c9
000017c3	movb	$0x01,0x10(%ebx)
000017c7	jmp	0x000017ef
000017c9	movb	%al,%cl
000017cb	movl	$0x00000001,%edi
000017d0	shll	%cl,%edi
000017d2	cmpb	$0x01,0xf3(%ebp)
000017d6	jne	0x000017e2
000017d8	movl	(%ebx),%ecx
000017da	sarl	$0x05,%eax
000017dd	orl	%edi,(%ecx,%eax,4)
000017e0	jmp	0x000017ec
000017e2	movl	(%ebx),%ecx
000017e4	notl	%edi
000017e6	sarl	$0x05,%eax
000017e9	andl	%edi,(%ecx,%eax,4)
000017ec	incl	0x0c(%ebx)
000017ef	movl	%edx,%edi
000017f1	cmpb	$0x01,0xf2(%ebp)
000017f5	jne	0x00001809
000017f7	movss	(%edi),%xmm0
000017fb	movss	%xmm0,0x04(%esp)
00001801	movl	%ebx,(%esp)
00001804	calll	bf_write::WriteBitNormal(float)
00001809	cmpb	$0x01,0xf3(%ebp)
0000180d	jne	0x00001822
0000180f	movss	0x04(%edi),%xmm0
00001814	movss	%xmm0,0x04(%esp)
0000181a	movl	%ebx,(%esp)
0000181d	calll	bf_write::WriteBitNormal(float)
00001822	movl	0x0c(%ebx),%eax
00001825	cmpl	0x08(%ebx),%eax
00001828	jl	0x00001830
0000182a	movb	$0x01,0x10(%ebx)
0000182e	jmp	0x00001867
00001830	movb	%al,%cl
00001832	movl	$0x00000001,%edx
00001837	shll	%cl,%edx
00001839	movss	0x08(%edi),%xmm0
0000183e	cvtss2sd	%xmm0,%xmm0
00001842	movsd	0x1a9b0-0x172e(%esi),%xmm1
0000184a	ucomisd	%xmm0,%xmm1
0000184e	jb	0x0000185a
00001850	movl	(%ebx),%ecx
00001852	sarl	$0x05,%eax
00001855	orl	%edx,(%ecx,%eax,4)
00001858	jmp	0x00001864
0000185a	movl	(%ebx),%ecx
0000185c	notl	%edx
0000185e	sarl	$0x05,%eax
00001861	andl	%edx,(%ecx,%eax,4)
00001864	incl	0x0c(%ebx)
00001867	addl	$0x0c,%esp
0000186a	popl	%esi
0000186b	popl	%edi
0000186c	popl	%ebx
0000186d	popl	%ebp
0000186e	ret
0000186f	nop
bf_write::WriteBitAngles(QAngle const&):
00001870	pushl	%ebp
00001871	movl	%esp,%ebp
00001873	subl	$0x18,%esp
00001876	movl	0x0c(%ebp),%eax
00001879	movss	0x08(%eax),%xmm0
0000187e	movss	(%eax),%xmm2
00001882	movss	0x04(%eax),%xmm1
00001887	movss	%xmm2,0xf0(%ebp)
0000188c	movss	%xmm1,0xf4(%ebp)
00001891	movss	%xmm0,0xf8(%ebp)
00001896	leal	0xf0(%ebp),%eax
00001899	movl	%eax,0x04(%esp)
0000189d	movl	0x08(%ebp),%eax
000018a0	movl	%eax,(%esp)
000018a3	calll	bf_write::WriteBitVec3Coord(Vector const&)
000018a8	addl	$0x18,%esp
000018ab	popl	%ebp
000018ac	ret
000018ad	nopl	(%eax)
bf_write::WriteChar(int):
000018b0	pushl	%ebp
000018b1	pushl	%ebx
000018b2	pushl	%edi
000018b3	pushl	%esi
000018b4	pushl	%eax
000018b5	movl	0x18(%esp),%edi
000018b9	movl	0x08(%edi),%eax
000018bc	movl	0x0c(%edi),%edx
000018bf	movl	%eax,%ecx
000018c1	subl	%edx,%ecx
000018c3	cmpl	$0x07,%ecx
000018c6	jg	0x000018d1
000018c8	movl	%eax,0x0c(%edi)
000018cb	movb	$0x01,0x10(%edi)
000018cf	jmp	0x00001934
000018d1	movl	0x1c(%esp),%esi
000018d5	movl	%esi,%eax
000018d7	andl	$0x7f,%eax
000018da	sarl	$0x1f,%esi
000018dd	andl	$0x80,%esi
000018e0	orl	%eax,%esi
000018e2	leal	0x08(%edx),%eax
000018e5	movl	%eax,0x0c(%edi)
000018e8	movl	%edx,%ebx
000018ea	andl	$0x1f,%ebx
000018ed	movb	%bl,%cl
000018ef	movb	%cl,0x03(%esp)
000018f3	roll	%cl,%esi
000018f5	movl	$0x0000001f,%ecx
000018fa	subl	%ebx,%ecx
000018fc	movl	$0x0000007f,%ebx
00001901	shrl	%cl,%ebx
00001903	movl	%ebx,%ecx
00001905	andl	$0x01,%ecx
00001908	sarl	$0x05,%edx
0000190b	addl	%edx,%ecx
0000190d	movl	(%edi),%edi
0000190f	movl	(%edi,%ecx,4),%eax
00001912	movl	%eax,%ebp
00001914	xorl	%esi,%ebp
00001916	andl	%ebx,%ebp
00001918	xorl	%eax,%ebp
0000191a	movl	(%edi,%edx,4),%ebx
0000191d	movl	%ebp,(%edi,%ecx,4)
00001920	xorl	%ebx,%esi
00001922	movb	0x03(%esp),%cl
00001926	movl	$0x000000ff,%eax
0000192b	shll	%cl,%eax
0000192d	andl	%esi,%eax
0000192f	xorl	%ebx,%eax
00001931	movl	%eax,(%edi,%edx,4)
00001934	addl	$0x04,%esp
00001937	popl	%esi
00001938	popl	%edi
00001939	popl	%ebx
0000193a	popl	%ebp
0000193b	ret
0000193c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteByte(int):
00001940	pushl	%ebp
00001941	pushl	%ebx
00001942	pushl	%edi
00001943	pushl	%esi
00001944	pushl	%eax
00001945	movl	0x18(%esp),%edi
00001949	movl	0x08(%edi),%eax
0000194c	movl	0x0c(%edi),%edx
0000194f	movl	%eax,%ecx
00001951	subl	%edx,%ecx
00001953	cmpl	$0x07,%ecx
00001956	jg	0x00001961
00001958	movl	%eax,0x0c(%edi)
0000195b	movb	$0x01,0x10(%edi)
0000195f	jmp	0x000019b7
00001961	movl	0x1c(%esp),%esi
00001965	leal	0x08(%edx),%eax
00001968	movl	%eax,0x0c(%edi)
0000196b	movl	%edx,%ebx
0000196d	andl	$0x1f,%ebx
00001970	movb	%bl,%cl
00001972	movb	%cl,0x03(%esp)
00001976	roll	%cl,%esi
00001978	movl	$0x0000001f,%ecx
0000197d	subl	%ebx,%ecx
0000197f	movl	$0x0000007f,%ebx
00001984	shrl	%cl,%ebx
00001986	movl	%ebx,%ecx
00001988	andl	$0x01,%ecx
0000198b	sarl	$0x05,%edx
0000198e	addl	%edx,%ecx
00001990	movl	(%edi),%edi
00001992	movl	(%edi,%ecx,4),%eax
00001995	movl	%eax,%ebp
00001997	xorl	%esi,%ebp
00001999	andl	%ebx,%ebp
0000199b	xorl	%eax,%ebp
0000199d	movl	(%edi,%edx,4),%ebx
000019a0	movl	%ebp,(%edi,%ecx,4)
000019a3	xorl	%ebx,%esi
000019a5	movb	0x03(%esp),%cl
000019a9	movl	$0x000000ff,%eax
000019ae	shll	%cl,%eax
000019b0	andl	%esi,%eax
000019b2	xorl	%ebx,%eax
000019b4	movl	%eax,(%edi,%edx,4)
000019b7	addl	$0x04,%esp
000019ba	popl	%esi
000019bb	popl	%edi
000019bc	popl	%ebx
000019bd	popl	%ebp
000019be	ret
000019bf	nop
bf_write::WriteShort(int):
000019c0	pushl	%ebp
000019c1	pushl	%ebx
000019c2	pushl	%edi
000019c3	pushl	%esi
000019c4	pushl	%eax
000019c5	movl	0x18(%esp),%edi
000019c9	movl	0x08(%edi),%eax
000019cc	movl	0x0c(%edi),%edx
000019cf	movl	%eax,%ecx
000019d1	subl	%edx,%ecx
000019d3	cmpl	$0x0f,%ecx
000019d6	jg	0x000019e1
000019d8	movl	%eax,0x0c(%edi)
000019db	movb	$0x01,0x10(%edi)
000019df	jmp	0x00001a49
000019e1	movl	0x1c(%esp),%esi
000019e5	movl	%esi,%eax
000019e7	andl	$0x00007fff,%eax
000019ec	sarl	$0x1f,%esi
000019ef	andl	$0xffff8000,%esi
000019f5	orl	%eax,%esi
000019f7	leal	0x10(%edx),%eax
000019fa	movl	%eax,0x0c(%edi)
000019fd	movl	%edx,%ebx
000019ff	andl	$0x1f,%ebx
00001a02	movb	%bl,%cl
00001a04	movb	%cl,0x03(%esp)
00001a08	roll	%cl,%esi
00001a0a	movl	$0x0000001f,%ecx
00001a0f	subl	%ebx,%ecx
00001a11	movl	$0x00007fff,%ebx
00001a16	shrl	%cl,%ebx
00001a18	movl	%ebx,%ecx
00001a1a	andl	$0x01,%ecx
00001a1d	sarl	$0x05,%edx
00001a20	addl	%edx,%ecx
00001a22	movl	(%edi),%edi
00001a24	movl	(%edi,%ecx,4),%eax
00001a27	movl	%eax,%ebp
00001a29	xorl	%esi,%ebp
00001a2b	andl	%ebx,%ebp
00001a2d	xorl	%eax,%ebp
00001a2f	movl	(%edi,%edx,4),%ebx
00001a32	movl	%ebp,(%edi,%ecx,4)
00001a35	xorl	%ebx,%esi
00001a37	movb	0x03(%esp),%cl
00001a3b	movl	$0x0000ffff,%eax
00001a40	shll	%cl,%eax
00001a42	andl	%esi,%eax
00001a44	xorl	%ebx,%eax
00001a46	movl	%eax,(%edi,%edx,4)
00001a49	addl	$0x04,%esp
00001a4c	popl	%esi
00001a4d	popl	%edi
00001a4e	popl	%ebx
00001a4f	popl	%ebp
00001a50	ret
00001a51	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteWord(int):
00001a60	pushl	%ebp
00001a61	pushl	%ebx
00001a62	pushl	%edi
00001a63	pushl	%esi
00001a64	pushl	%eax
00001a65	movl	0x18(%esp),%edi
00001a69	movl	0x08(%edi),%eax
00001a6c	movl	0x0c(%edi),%edx
00001a6f	movl	%eax,%ecx
00001a71	subl	%edx,%ecx
00001a73	cmpl	$0x0f,%ecx
00001a76	jg	0x00001a81
00001a78	movl	%eax,0x0c(%edi)
00001a7b	movb	$0x01,0x10(%edi)
00001a7f	jmp	0x00001ad7
00001a81	movl	0x1c(%esp),%esi
00001a85	leal	0x10(%edx),%eax
00001a88	movl	%eax,0x0c(%edi)
00001a8b	movl	%edx,%ebx
00001a8d	andl	$0x1f,%ebx
00001a90	movb	%bl,%cl
00001a92	movb	%cl,0x03(%esp)
00001a96	roll	%cl,%esi
00001a98	movl	$0x0000001f,%ecx
00001a9d	subl	%ebx,%ecx
00001a9f	movl	$0x00007fff,%ebx
00001aa4	shrl	%cl,%ebx
00001aa6	movl	%ebx,%ecx
00001aa8	andl	$0x01,%ecx
00001aab	sarl	$0x05,%edx
00001aae	addl	%edx,%ecx
00001ab0	movl	(%edi),%edi
00001ab2	movl	(%edi,%ecx,4),%eax
00001ab5	movl	%eax,%ebp
00001ab7	xorl	%esi,%ebp
00001ab9	andl	%ebx,%ebp
00001abb	xorl	%eax,%ebp
00001abd	movl	(%edi,%edx,4),%ebx
00001ac0	movl	%ebp,(%edi,%ecx,4)
00001ac3	xorl	%ebx,%esi
00001ac5	movb	0x03(%esp),%cl
00001ac9	movl	$0x0000ffff,%eax
00001ace	shll	%cl,%eax
00001ad0	andl	%esi,%eax
00001ad2	xorl	%ebx,%eax
00001ad4	movl	%eax,(%edi,%edx,4)
00001ad7	addl	$0x04,%esp
00001ada	popl	%esi
00001adb	popl	%edi
00001adc	popl	%ebx
00001add	popl	%ebp
00001ade	ret
00001adf	nop
bf_write::WriteLong(long):
00001ae0	pushl	%ebp
00001ae1	pushl	%ebx
00001ae2	pushl	%edi
00001ae3	pushl	%esi
00001ae4	pushl	%eax
00001ae5	movl	0x18(%esp),%edi
00001ae9	movl	0x08(%edi),%eax
00001aec	movl	0x0c(%edi),%edx
00001aef	movl	%eax,%ecx
00001af1	subl	%edx,%ecx
00001af3	cmpl	$0x1f,%ecx
00001af6	jg	0x00001b01
00001af8	movl	%eax,0x0c(%edi)
00001afb	movb	$0x01,0x10(%edi)
00001aff	jmp	0x00001b57
00001b01	movl	0x1c(%esp),%esi
00001b05	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edx),%eax
00001b08	movl	%eax,0x0c(%edi)
00001b0b	movl	%edx,%ebx
00001b0d	andl	$0x1f,%ebx
00001b10	movb	%bl,%cl
00001b12	movb	%cl,0x03(%esp)
00001b16	roll	%cl,%esi
00001b18	movl	$0x0000001f,%ecx
00001b1d	subl	%ebx,%ecx
00001b1f	movl	$0x7fffffff,%ebx
00001b24	shrl	%cl,%ebx
00001b26	movl	%ebx,%ecx
00001b28	andl	$0x01,%ecx
00001b2b	sarl	$0x05,%edx
00001b2e	addl	%edx,%ecx
00001b30	movl	(%edi),%edi
00001b32	movl	(%edi,%ecx,4),%eax
00001b35	movl	%eax,%ebp
00001b37	xorl	%esi,%ebp
00001b39	andl	%ebx,%ebp
00001b3b	xorl	%eax,%ebp
00001b3d	movl	(%edi,%edx,4),%ebx
00001b40	movl	%ebp,(%edi,%ecx,4)
00001b43	xorl	%ebx,%esi
00001b45	movb	0x03(%esp),%cl
00001b49	movl	$0xffffffff,%eax
00001b4e	shll	%cl,%eax
00001b50	andl	%esi,%eax
00001b52	xorl	%ebx,%eax
00001b54	movl	%eax,(%edi,%edx,4)
00001b57	addl	$0x04,%esp
00001b5a	popl	%esi
00001b5b	popl	%edi
00001b5c	popl	%ebx
00001b5d	popl	%ebp
00001b5e	ret
00001b5f	nop
bf_write::WriteLongLong(long long):
00001b60	pushl	%ebp
00001b61	pushl	%ebx
00001b62	pushl	%edi
00001b63	pushl	%esi
00001b64	pushl	%eax
00001b65	movl	0x18(%esp),%esi
00001b69	movl	0x08(%esi),%edi
00001b6c	movl	0x0c(%esi),%edx
00001b6f	movl	%edi,%eax
00001b71	subl	%edx,%eax
00001b73	cmpl	$0x1f,%eax
00001b76	jg	0x00001b83
00001b78	movl	%edi,0x0c(%esi)
00001b7b	movb	$0x01,0x10(%esi)
00001b7f	movl	%edi,%eax
00001b81	jmp	0x00001beb
00001b83	movl	0x1c(%esp),%edi
00001b87	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edx),%eax
00001b8a	movl	%eax,0x0c(%esi)
00001b8d	movl	%edx,%ebx
00001b8f	andl	$0x1f,%ebx
00001b92	movb	%bl,%cl
00001b94	movb	%cl,0x03(%esp)
00001b98	roll	%cl,%edi
00001b9a	movl	$0x0000001f,%ecx
00001b9f	subl	%ebx,%ecx
00001ba1	movl	$0x7fffffff,%esi
00001ba6	shrl	%cl,%esi
00001ba8	movl	%esi,%ecx
00001baa	andl	$0x01,%ecx
00001bad	sarl	$0x05,%edx
00001bb0	addl	%edx,%ecx
00001bb2	movl	0x18(%esp),%eax
00001bb6	movl	(%eax),%ebp
00001bb8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%eax
00001bbc	movl	%eax,%ebx
00001bbe	xorl	%edi,%ebx
00001bc0	andl	%esi,%ebx
00001bc2	xorl	%eax,%ebx
00001bc4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4),%esi
00001bc8	movl	%ebx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00001bcc	xorl	%esi,%edi
00001bce	movb	0x03(%esp),%cl
00001bd2	movl	$0xffffffff,%eax
00001bd7	shll	%cl,%eax
00001bd9	andl	%edi,%eax
00001bdb	xorl	%esi,%eax
00001bdd	movl	0x18(%esp),%esi
00001be1	movl	%eax,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4)
00001be5	movl	0x08(%esi),%eax
00001be8	movl	0x0c(%esi),%edi
00001beb	movl	%eax,%ecx
00001bed	subl	%edi,%ecx
00001bef	cmpl	$0x1f,%ecx
00001bf2	jg	0x00001bfd
00001bf4	movl	%eax,0x0c(%esi)
00001bf7	movb	$0x01,0x10(%esi)
00001bfb	jmp	0x00001c53
00001bfd	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edi),%eax
00001c00	movl	%eax,0x0c(%esi)
00001c03	movl	%edi,%ebx
00001c05	andl	$0x1f,%ebx
00001c08	movb	%bl,%cl
00001c0a	movb	%cl,0x03(%esp)
00001c0e	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00001c12	roll	%cl,%ebp
00001c14	movl	$0x0000001f,%ecx
00001c19	subl	%ebx,%ecx
00001c1b	movl	$0x7fffffff,%ebx
00001c20	shrl	%cl,%ebx
00001c22	movl	%ebx,%ecx
00001c24	andl	$0x01,%ecx
00001c27	sarl	$0x05,%edi
00001c2a	addl	%edi,%ecx
00001c2c	movl	(%esi),%esi
00001c2e	movl	(%esi,%ecx,4),%eax
00001c31	movl	%eax,%edx
00001c33	xorl	%ebp,%edx
00001c35	andl	%ebx,%edx
00001c37	xorl	%eax,%edx
00001c39	movl	(%esi,%edi,4),%ebx
00001c3c	movl	%edx,(%esi,%ecx,4)
00001c3f	xorl	%ebx,%ebp
00001c41	movb	0x03(%esp),%cl
00001c45	movl	$0xffffffff,%eax
00001c4a	shll	%cl,%eax
00001c4c	andl	%ebp,%eax
00001c4e	xorl	%ebx,%eax
00001c50	movl	%eax,(%esi,%edi,4)
00001c53	addl	$0x04,%esp
00001c56	popl	%esi
00001c57	popl	%edi
00001c58	popl	%ebx
00001c59	popl	%ebp
00001c5a	ret
00001c5b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteFloat(float):
00001c60	pushl	%ebp
00001c61	movl	%esp,%ebp
00001c63	subl	$0x18,%esp
00001c66	movss	0x0c(%ebp),%xmm0
00001c6b	movss	%xmm0,0xfc(%ebp)
00001c70	leal	0xfc(%ebp),%eax
00001c73	movl	%eax,0x04(%esp)
00001c77	movl	0x08(%ebp),%eax
00001c7a	movl	%eax,(%esp)
00001c7d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x08(%esp)
00001c85	calll	bf_write::WriteBits(void const*, int)
00001c8a	addl	$0x18,%esp
00001c8d	popl	%ebp
00001c8e	ret
00001c8f	nop
bf_write::WriteBytes(void const*, int):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	subl	$0x18,%esp
00001c96	movl	0x10(%ebp),%eax
00001c99	shll	$0x03,%eax
00001c9c	movl	%eax,0x08(%esp)
00001ca0	movl	0x0c(%ebp),%eax
00001ca3	movl	%eax,0x04(%esp)
00001ca7	movl	0x08(%ebp),%eax
00001caa	movl	%eax,(%esp)
00001cad	calll	bf_write::WriteBits(void const*, int)
00001cb2	movzbl	%al,%eax
00001cb5	addl	$0x18,%esp
00001cb8	popl	%ebp
00001cb9	ret
00001cba	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteString(char const*):
00001cc0	pushl	%ebp
00001cc1	pushl	%ebx
00001cc2	pushl	%edi
00001cc3	pushl	%esi
00001cc4	subl	$0x0c,%esp
00001cc7	movl	0x24(%esp),%esi
00001ccb	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00001ccf	testl	%esi,%esi
00001cd1	je	0x00001d75
00001cd7	leal	0x10(%edi),%eax
00001cda	movl	%eax,(%esp)
00001cdd	jmp	0x00001ce1
00001cdf	nop
00001ce0	incl	%esi
00001ce1	movl	0x08(%edi),%eax
00001ce4	movl	0x0c(%edi),%edx
00001ce7	movl	%eax,%ecx
00001ce9	subl	%edx,%ecx
00001ceb	cmpl	$0x07,%ecx
00001cee	jg	0x00001cf9
00001cf0	movl	%eax,0x0c(%edi)
00001cf3	movb	$0x01,0x10(%edi)
00001cf7	jmp	0x00001d63
00001cf9	movsbl	(%esi),%ebp
00001cfc	movl	%ebp,%eax
00001cfe	andl	$0x7f,%eax
00001d01	sarl	$0x1f,%ebp
00001d04	andl	$0x80,%ebp
00001d07	orl	%eax,%ebp
00001d09	leal	0x08(%edx),%eax
00001d0c	movl	%eax,0x0c(%edi)
00001d0f	movl	%edx,%ebx
00001d11	andl	$0x1f,%ebx
00001d14	movb	%bl,%cl
00001d16	movb	%cl,0x07(%esp)
00001d1a	roll	%cl,%ebp
00001d1c	movl	$0x0000001f,%ecx
00001d21	subl	%ebx,%ecx
00001d23	movl	%esi,0x08(%esp)
00001d27	movl	$0x0000007f,%esi
00001d2c	shrl	%cl,%esi
00001d2e	movl	%esi,%ecx
00001d30	andl	$0x01,%ecx
00001d33	sarl	$0x05,%edx
00001d36	addl	%edx,%ecx
00001d38	movl	(%edi),%edi
00001d3a	movl	(%edi,%ecx,4),%eax
00001d3d	movl	%eax,%ebx
00001d3f	xorl	%ebp,%ebx
00001d41	andl	%esi,%ebx
00001d43	xorl	%eax,%ebx
00001d45	movl	(%edi,%edx,4),%esi
00001d48	movl	%ebx,(%edi,%ecx,4)
00001d4b	xorl	%esi,%ebp
00001d4d	movb	0x07(%esp),%cl
00001d51	movl	$0x000000ff,%eax
00001d56	shll	%cl,%eax
00001d58	andl	%ebp,%eax
00001d5a	xorl	%esi,%eax
00001d5c	movl	0x08(%esp),%esi
00001d60	movl	%eax,(%edi,%edx,4)
00001d63	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esi)
00001d66	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00001d6a	jne	0x00001ce0
00001d70	movl	(%esp),%edi
00001d73	jmp	0x00001dcf
00001d75	movl	0x08(%edi),%eax
00001d78	movl	0x0c(%edi),%esi
00001d7b	movl	%eax,%ecx
00001d7d	subl	%esi,%ecx
00001d7f	cmpl	$0x07,%ecx
00001d82	jg	0x00001d8d
00001d84	movl	%eax,0x0c(%edi)
00001d87	movb	$0x01,0x10(%edi)
00001d8b	jmp	0x00001dcc
00001d8d	leal	0x08(%esi),%eax
00001d90	movl	%eax,0x0c(%edi)
00001d93	movl	%esi,%eax
00001d95	andl	$0x1f,%eax
00001d98	movb	%al,%cl
00001d9a	movl	%edi,%edx
00001d9c	movl	$0x000000ff,%edi
00001da1	shll	%cl,%edi
00001da3	notl	%edi
00001da5	sarl	$0x05,%esi
00001da8	movl	(%edx),%ebx
00001daa	andl	(%ebx,%esi,4),%edi
00001dad	movl	$0x0000001f,%ecx
00001db2	subl	%eax,%ecx
00001db4	movl	$0x0000007f,%eax
00001db9	shrl	%cl,%eax
00001dbb	movl	%eax,%ecx
00001dbd	andl	$0x01,%ecx
00001dc0	addl	%esi,%ecx
00001dc2	notl	%eax
00001dc4	andl	%eax,(%ebx,%ecx,4)
00001dc7	movl	%edi,(%ebx,%esi,4)
00001dca	movl	%edx,%edi
00001dcc	addl	$0x10,%edi
00001dcf	testb	$0x01,(%edi)
00001dd2	sete	%al
00001dd5	movzbl	%al,%eax
00001dd8	addl	$0x0c,%esp
00001ddb	popl	%esi
00001ddc	popl	%edi
00001ddd	popl	%ebx
00001dde	popl	%ebp
00001ddf	ret
bf_read::bf_read():
00001de0	movl	0x04(%esp),%eax
00001de4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00001dea	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00001df1	movl	$0xffffffff,0x08(%eax)
00001df8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001dff	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e03	movb	$0x01,0x11(%eax)
00001e07	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
00001e0e	ret
00001e0f	nop
bf_read::bf_read():
00001e10	movl	0x04(%esp),%eax
00001e14	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00001e1a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00001e21	movl	$0xffffffff,0x08(%eax)
00001e28	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001e2f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e33	movb	$0x01,0x11(%eax)
00001e37	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
00001e3e	ret
00001e3f	nop
bf_read::bf_read(void const*, int, int):
00001e40	movl	0x04(%esp),%eax
00001e44	movb	$0x01,0x11(%eax)
00001e48	movl	0x08(%esp),%ecx
00001e4c	movl	%ecx,(%eax)
00001e4e	movl	0x0c(%esp),%ecx
00001e52	movl	%ecx,0x04(%eax)
00001e55	movl	0x10(%esp),%edx
00001e59	cmpl	$0xff,%edx
00001e5c	jne	0x00001e66
00001e5e	shll	$0x03,%ecx
00001e61	movl	%ecx,0x08(%eax)
00001e64	jmp	0x00001e69
00001e66	movl	%edx,0x08(%eax)
00001e69	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001e70	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e74	ret
00001e75	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::bf_read(void const*, int, int):
00001e80	movl	0x04(%esp),%eax
00001e84	movb	$0x01,0x11(%eax)
00001e88	movl	0x08(%esp),%ecx
00001e8c	movl	%ecx,(%eax)
00001e8e	movl	0x0c(%esp),%ecx
00001e92	movl	%ecx,0x04(%eax)
00001e95	movl	0x10(%esp),%edx
00001e99	cmpl	$0xff,%edx
00001e9c	jne	0x00001ea6
00001e9e	shll	$0x03,%ecx
00001ea1	movl	%ecx,0x08(%eax)
00001ea4	jmp	0x00001ea9
00001ea6	movl	%edx,0x08(%eax)
00001ea9	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001eb0	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001eb4	ret
00001eb5	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::StartReading(void const*, int, int, int):
00001ec0	pushl	%esi
00001ec1	movl	0x0c(%esp),%ecx
00001ec5	movl	0x08(%esp),%eax
00001ec9	movl	%ecx,(%eax)
00001ecb	movl	0x10(%esp),%edx
00001ecf	movl	%edx,0x04(%eax)
00001ed2	movl	0x18(%esp),%esi
00001ed6	movl	0x14(%esp),%ecx
00001eda	cmpl	$0xff,%esi
00001edd	jne	0x00001ee7
00001edf	shll	$0x03,%edx
00001ee2	movl	%edx,0x08(%eax)
00001ee5	jmp	0x00001eea
00001ee7	movl	%esi,0x08(%eax)
00001eea	movl	%ecx,0x0c(%eax)
00001eed	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001ef1	popl	%esi
00001ef2	ret
00001ef3	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::bf_read(char const*, void const*, int, int):
00001f00	movl	0x04(%esp),%eax
00001f04	movb	$0x01,0x11(%eax)
00001f08	movl	0x08(%esp),%ecx
00001f0c	movl	%ecx,0x14(%eax)
00001f0f	movl	0x0c(%esp),%ecx
00001f13	movl	%ecx,(%eax)
00001f15	movl	0x10(%esp),%ecx
00001f19	movl	%ecx,0x04(%eax)
00001f1c	movl	0x14(%esp),%edx
00001f20	cmpl	$0xff,%edx
00001f23	jne	0x00001f2d
00001f25	shll	$0x03,%ecx
00001f28	movl	%ecx,0x08(%eax)
00001f2b	jmp	0x00001f30
00001f2d	movl	%edx,0x08(%eax)
00001f30	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f37	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f3b	ret
00001f3c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::bf_read(char const*, void const*, int, int):
00001f40	movl	0x04(%esp),%eax
00001f44	movb	$0x01,0x11(%eax)
00001f48	movl	0x08(%esp),%ecx
00001f4c	movl	%ecx,0x14(%eax)
00001f4f	movl	0x0c(%esp),%ecx
00001f53	movl	%ecx,(%eax)
00001f55	movl	0x10(%esp),%ecx
00001f59	movl	%ecx,0x04(%eax)
00001f5c	movl	0x14(%esp),%edx
00001f60	cmpl	$0xff,%edx
00001f63	jne	0x00001f6d
00001f65	shll	$0x03,%ecx
00001f68	movl	%ecx,0x08(%eax)
00001f6b	jmp	0x00001f70
00001f6d	movl	%edx,0x08(%eax)
00001f70	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f77	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f7b	ret
00001f7c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::Reset():
00001f80	movl	0x04(%esp),%eax
00001f84	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f8b	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f8f	ret
bf_read::SetAssertOnOverflow(bool):
00001f90	movb	0x08(%esp),%al
00001f94	movl	0x04(%esp),%ecx
00001f98	movb	%al,0x11(%ecx)
00001f9b	ret
00001f9c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::SetDebugName(char const*):
00001fa0	movl	0x08(%esp),%eax
00001fa4	movl	0x04(%esp),%ecx
00001fa8	movl	%eax,0x14(%ecx)
00001fab	ret
00001fac	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::SetOverflowFlag():
00001fb0	movl	0x04(%esp),%eax
00001fb4	movb	$0x01,0x10(%eax)
00001fb8	ret
00001fb9	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::CheckReadUBitLong(int):
00001fc0	pushl	%ebp
00001fc1	pushl	%ebx
00001fc2	pushl	%edi
00001fc3	pushl	%esi
00001fc4	subl	$0x08,%esp
00001fc7	movl	0x1c(%esp),%edi
00001fcb	movl	0x0c(%edi),%edx
00001fce	xorl	%eax,%eax
00001fd0	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00001fd4	testl	%ecx,%ecx
00001fd6	jle	0x00002022
00001fd8	leal	(%edx,%ecx),%eax
00001fdb	movl	%eax,(%esp)
00001fde	movl	(%edi),%eax
00001fe0	movl	%eax,0x04(%esp)
00001fe4	xorl	%eax,%eax
00001fe6	movl	%eax,%ebx
00001fe8	movl	%edx,%esi
00001fea	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00001ff0	leal	(%esi,%ebx),%ecx
00001ff3	movl	%ecx,%edx
00001ff5	sarl	$0x05,%edx
00001ff8	movl	0x04(%esp),%ebp
00001ffc	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4),%edx
00002000	movl	%edi,%ebp
00002002	leal	0x01(%esi,%ebx),%edi
00002006	movl	%edi,0x0c(%ebp)
00002009	movl	%ebp,%edi
0000200b	shrl	%cl,%edx
0000200d	andl	$0x01,%edx
00002010	movl	%ebx,%ecx
00002012	shll	%cl,%edx
00002014	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00002018	orl	%edx,%eax
0000201a	incl	%ebx
0000201b	cmpl	%ebx,%ecx
0000201d	jne	0x00001ff0
0000201f	movl	(%esp),%edx
00002022	subl	%ecx,%edx
00002024	movl	%edx,0x0c(%edi)
00002027	addl	$0x08,%esp
0000202a	popl	%esi
0000202b	popl	%edi
0000202c	popl	%ebx
0000202d	popl	%ebp
0000202e	ret
0000202f	nop
bf_read::ReadBits(void*, int):
00002030	pushl	%ebp
00002031	pushl	%ebx
00002032	pushl	%edi
00002033	pushl	%esi
00002034	subl	$0x10,%esp
00002037	movl	0x28(%esp),%ebx
0000203b	movl	0x2c(%esp),%esi
0000203f	testb	$0x03,%bl
00002042	je	0x00002049
00002044	cmpl	$0x08,%esi
00002047	jge	0x00002090
00002049	movl	%ebx,%ebp
0000204b	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%esi
0000204e	jge	0x000020cd
00002050	movl	%esi,%edi
00002052	jmp	0x000020bd
00002054	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002060	leal	0x08(%ecx),%eax
00002063	movl	%eax,0x0c(%ebp)
00002066	leal	0x07(%ecx),%edi
00002069	sarl	$0x05,%edi
0000206c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp),%edx
0000206f	movl	(%edx,%edi,4),%edi
00002072	movl	%ecx,%eax
00002074	sarl	$0x05,%eax
00002077	movl	(%edx,%eax,4),%edx
0000207a	andl	$0x1f,%ecx
0000207d	shrdl	%cl,%edi,%edx
00002080	movb	%dl,(%ebx)
00002082	addl	$0xf8,%esi
00002085	incl	%ebx
00002086	testb	$0x03,%bl
00002089	je	0x00002049
0000208b	cmpl	$0x07,%esi
0000208e	jle	0x00002049
00002090	movl	0x24(%esp),%ebp
00002094	movl	0x08(%ebp),%edx
00002097	movl	0x0c(%ebp),%ecx
0000209a	movl	%edx,%eax
0000209c	subl	%ecx,%eax
0000209e	cmpl	$0x07,%eax
000020a1	jg	0x00002060
000020a3	movl	%edx,0x0c(%ebp)
000020a6	movb	$0x01,0x10(%ebp)
000020aa	xorb	%dl,%dl
000020ac	jmp	0x00002080
000020ae	movl	0x0c(%esp),%ebp
000020b2	addl	0x04(%esp),%ebp
000020b6	movl	0x08(%esp),%edi
000020ba	andl	$0x1f,%edi
000020bd	cmpl	$0x08,%edi
000020c0	movl	0x24(%esp),%esi
000020c4	jge	0x0000213d
000020c6	movl	%edi,%eax
000020c8	jmp	0x000021b6
000020cd	leal	bf_write::bf_write(char const*, void*, int, int)(%esi),%eax
000020d0	movl	%eax,0x08(%esp)
000020d4	shrl	$0x03,%eax
000020d7	andl	$0x1ffffffc,%eax
000020dc	addl	$0x04,%eax
000020df	movl	%eax,0x04(%esp)
000020e3	movl	%ebp,%ebx
000020e5	movl	%ebx,0x0c(%esp)
000020e9	movl	%ebx,%ebp
000020eb	jmp	0x0000211f
000020ed	nopl	(%eax)
000020f0	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%eax),%ecx
000020f3	movl	%ecx,0x0c(%edi)
000020f6	leal	0x1f(%eax),%ebx
000020f9	sarl	$0x05,%ebx
000020fc	movl	(%edi),%edx
000020fe	movl	(%edx,%ebx,4),%ebx
00002101	movl	%eax,%ecx
00002103	sarl	$0x05,%ecx
00002106	movl	(%edx,%ecx,4),%edx
00002109	andl	$0x1f,%eax
0000210c	movb	%al,%cl
0000210e	shrdl	%cl,%ebx,%edx
00002111	movl	%edx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
00002114	addl	$0x04,%ebp
00002117	addl	bf_write::bf_write(char const*, void*, int, int),%esi
0000211a	cmpl	$0x1f,%esi
0000211d	jle	0x000020ae
0000211f	movl	0x24(%esp),%edi
00002123	movl	0x08(%edi),%edx
00002126	movl	0x0c(%edi),%eax
00002129	movl	%edx,%ecx
0000212b	subl	%eax,%ecx
0000212d	cmpl	$0x1f,%ecx
00002130	jg	0x000020f0
00002132	movl	%edx,0x0c(%edi)
00002135	movb	$0x01,0x10(%edi)
00002139	xorl	%edx,%edx
0000213b	jmp	0x00002111
0000213d	leal	0xf8(%edi),%eax
00002140	movl	%eax,0x08(%esp)
00002144	shrl	$0x03,%eax
00002147	incl	%eax
00002148	movl	%eax,0x04(%esp)
0000214c	movl	%ebp,%ebx
0000214e	movl	%ebx,0x0c(%esp)
00002152	movl	%ebx,%ebp
00002154	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002160	movl	0x08(%esi),%edx
00002163	movl	0x0c(%esi),%eax
00002166	movl	%edx,%ecx
00002168	subl	%eax,%ecx
0000216a	cmpl	$0x07,%ecx
0000216d	jg	0x0000217a
0000216f	movl	%edx,0x0c(%esi)
00002172	movb	$0x01,0x10(%esi)
00002176	xorb	%bl,%bl
00002178	jmp	0x0000219b
0000217a	leal	0x08(%eax),%ecx
0000217d	movl	%ecx,0x0c(%esi)
00002180	leal	0x07(%eax),%edx
00002183	sarl	$0x05,%edx
00002186	movl	(%esi),%ebx
00002188	movl	(%ebx,%edx,4),%edx
0000218b	movl	%eax,%ecx
0000218d	sarl	$0x05,%ecx
00002190	movl	(%ebx,%ecx,4),%ebx
00002193	andl	$0x1f,%eax
00002196	movb	%al,%cl
00002198	shrdl	%cl,%edx,%ebx
0000219b	movb	%bl,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
0000219e	incl	%ebp
0000219f	addl	$0xf8,%edi
000021a2	cmpl	$0x07,%edi
000021a5	jg	0x00002160
000021a7	movl	0x0c(%esp),%ebp
000021ab	addl	0x04(%esp),%ebp
000021af	movl	0x08(%esp),%eax
000021b3	andl	$0x07,%eax
000021b6	testl	%eax,%eax
000021b8	je	0x00002209
000021ba	movl	0x08(%esi),%edx
000021bd	movl	0x0c(%esi),%ecx
000021c0	movl	%edx,%edi
000021c2	subl	%ecx,%edi
000021c4	cmpl	%eax,%edi
000021c6	jge	0x000021d3
000021c8	movl	%edx,0x0c(%esi)
000021cb	movb	$0x01,0x10(%esi)
000021cf	xorb	%al,%al
000021d1	jmp	0x00002206
000021d3	leal	0xff(%ecx,%eax),%edx
000021d7	movl	%eax,%ebx
000021d9	leal	(%ecx,%ebx),%eax
000021dc	movl	%eax,0x0c(%esi)
000021df	sarl	$0x05,%edx
000021e2	movl	(%esi),%edi
000021e4	movl	(%edi,%edx,4),%esi
000021e7	movl	%ecx,%edx
000021e9	sarl	$0x05,%edx
000021ec	movl	(%edi,%edx,4),%edx
000021ef	andl	$0x1f,%ecx
000021f2	shrdl	%cl,%esi,%edx
000021f5	decl	%ebx
000021f6	movb	%bl,%cl
000021f8	movl	$0x00000002,%eax
000021fd	shll	%cl,%eax
000021ff	addl	$0x000000ff,%eax
00002204	andl	%edx,%eax
00002206	movb	%al,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
00002209	addl	$0x10,%esp
0000220c	popl	%esi
0000220d	popl	%edi
0000220e	popl	%ebx
0000220f	popl	%ebp
00002210	ret
00002211	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitsClamped_ptr(void*, unsigned long, unsigned long):
00002220	pushl	%ebp
00002221	movl	%esp,%ebp
00002223	pushl	%ebx
00002224	pushl	%edi
00002225	pushl	%esi
00002226	subl	$0x0c,%esp
00002229	movl	0x0c(%ebp),%eax
0000222c	movl	%eax,0x04(%esp)
00002230	movl	0x08(%ebp),%edi
00002233	movl	%edi,(%esp)
00002236	movl	0x10(%ebp),%esi
00002239	shll	$0x03,%esi
0000223c	movl	0x14(%ebp),%ecx
0000223f	movl	%ecx,%eax
00002241	subl	%esi,%eax
00002243	cmpl	%ecx,%esi
00002245	cmovael	%ecx,%esi
00002248	movl	%esi,0x08(%esp)
0000224c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ebx
00002251	cmovbl	%eax,%ebx
00002254	calll	bf_read::ReadBits(void*, int)
00002259	movl	0x08(%edi),%eax
0000225c	addl	0x0c(%edi),%ebx
0000225f	js	0x00002265
00002261	cmpl	%ebx,%eax
00002263	jge	0x0000226b
00002265	movb	$0x01,0x10(%edi)
00002269	movl	%eax,%ebx
0000226b	movl	%ebx,0x0c(%edi)
0000226e	movl	%esi,%eax
00002270	addl	$0x0c,%esp
00002273	popl	%esi
00002274	popl	%edi
00002275	popl	%ebx
00002276	popl	%ebp
00002277	ret
00002278	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitAngle(int):
00002280	pushl	%ebx
00002281	pushl	%edi
00002282	pushl	%esi
00002283	pushl	%eax
00002284	calll	0x00002289
00002289	popl	%edx
0000228a	movl	0x18(%esp),%eax
0000228e	movl	%eax,%ecx
00002290	andl	$0x1f,%ecx
00002293	cvtsi2ss	GetBitForBitnum(int)::bitsForBitnum-0x2289(%edx,%ecx,4),%xmm0
0000229c	movl	0x14(%esp),%esi
000022a0	movl	0x08(%esi),%edi
000022a3	movl	0x0c(%esi),%ecx
000022a6	movl	%edi,%ebx
000022a8	subl	%ecx,%ebx
000022aa	cmpl	%eax,%ebx
000022ac	jge	0x000022bb
000022ae	movl	%edi,0x0c(%esi)
000022b1	movb	$0x01,0x10(%esi)
000022b5	pxor	%xmm1,%xmm1
000022b9	jmp	0x000022f0
000022bb	leal	0xff(%ecx,%eax),%edi
000022bf	leal	(%ecx,%eax),%ebx
000022c2	movl	%ebx,0x0c(%esi)
000022c5	sarl	$0x05,%edi
000022c8	movl	(%esi),%esi
000022ca	movl	(%esi,%edi,4),%edi
000022cd	movl	%ecx,%ebx
000022cf	sarl	$0x05,%ebx
000022d2	movl	(%esi,%ebx,4),%esi
000022d5	andl	$0x1f,%ecx
000022d8	shrdl	%cl,%edi,%esi
000022db	decl	%eax
000022dc	movb	%al,%cl
000022de	movl	$0x00000002,%eax
000022e3	shll	%cl,%eax
000022e5	decl	%eax
000022e6	andl	%esi,%eax
000022e8	cvtsi2ss	%eax,%xmm1
000022ec	cvtss2sd	%xmm1,%xmm1
000022f0	cvtss2sd	%xmm0,%xmm2
000022f4	movsd	0x1a9b8-0x2289(%edx),%xmm0
000022fc	divsd	%xmm2,%xmm0
00002300	mulsd	%xmm1,%xmm0
00002304	cvtsd2ss	%xmm0,%xmm0
00002308	movss	%xmm0,(%esp)
0000230d	flds	(%esp)
00002310	addl	$0x04,%esp
00002313	popl	%esi
00002314	popl	%edi
00002315	popl	%ebx
00002316	ret
00002317	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::PeekUBitLong(int):
00002320	pushl	%ebp
00002321	pushl	%ebx
00002322	pushl	%edi
00002323	pushl	%esi
00002324	subl	$0x1c,%esp
00002327	movl	0x30(%esp),%ecx
0000232b	movl	0x14(%ecx),%eax
0000232e	movl	%eax,0x10(%esp)
00002332	movl	0x10(%ecx),%eax
00002335	movl	%eax,0x0c(%esp)
00002339	movl	0x0c(%ecx),%eax
0000233c	movl	%eax,0x08(%esp)
00002340	movl	0x08(%ecx),%eax
00002343	movl	%eax,0x04(%esp)
00002347	movl	(%ecx),%eax
00002349	movl	%eax,0x18(%esp)
0000234d	movl	0x04(%ecx),%eax
00002350	movl	%eax,(%esp)
00002353	xorl	%eax,%eax
00002355	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x34(%esp)
0000235a	jle	0x000023ae
0000235c	calll	0x00002361
00002361	popl	%eax
00002362	movl	%eax,0x14(%esp)
00002366	movl	0x08(%ecx),%ebx
00002369	movl	0x0c(%ecx),%ebp
0000236c	xorl	%edx,%edx
0000236e	xorl	%eax,%eax
00002370	movl	%ebx,%esi
00002372	subl	%ebp,%esi
00002374	testl	%esi,%esi
00002376	jg	0x0000237e
00002378	movb	$0x01,0x10(%ecx)
0000237c	jmp	0x000023a7
0000237e	movl	%ebp,%esi
00002380	sarl	$0x05,%esi
00002383	movl	0x18(%esp),%edi
00002387	movl	(%edi,%esi,4),%edi
0000238a	leal	0x01(%ebp),%esi
0000238d	movl	%esi,0x0c(%ecx)
00002390	btl	%ebp,%edi
00002393	jae	0x000023a5
00002395	movl	%edx,%ebp
00002397	andl	$0x1f,%ebp
0000239a	movl	0x14(%esp),%edi
0000239e	orl	GetBitForBitnum(int)::bitsForBitnum-0x2361(%edi,%ebp,4),%eax
000023a5	movl	%esi,%ebp
000023a7	incl	%edx
000023a8	cmpl	%edx,0x34(%esp)
000023ac	jne	0x00002370
000023ae	movl	0x18(%esp),%edx
000023b2	movl	%edx,(%ecx)
000023b4	movl	(%esp),%edx
000023b7	movl	%edx,0x04(%ecx)
000023ba	movl	0x04(%esp),%edx
000023be	movl	%edx,0x08(%ecx)
000023c1	movl	0x08(%esp),%edx
000023c5	movl	%edx,0x0c(%ecx)
000023c8	movl	0x0c(%esp),%edx
000023cc	movl	%edx,0x10(%ecx)
000023cf	movl	0x10(%esp),%edx
000023d3	movl	%edx,0x14(%ecx)
000023d6	addl	$0x1c,%esp
000023d9	popl	%esi
000023da	popl	%edi
000023db	popl	%ebx
000023dc	popl	%ebp
000023dd	ret
000023de	nop
bf_read::ReadUBitLongNoInline(int):
000023e0	pushl	%edi
000023e1	pushl	%esi
000023e2	movl	0x0c(%esp),%edx
000023e6	movl	0x08(%edx),%esi
000023e9	movl	0x0c(%edx),%ecx
000023ec	movl	%esi,%edi
000023ee	subl	%ecx,%edi
000023f0	movl	0x10(%esp),%eax
000023f4	cmpl	%eax,%edi
000023f6	jge	0x00002403
000023f8	movl	%esi,0x0c(%edx)
000023fb	movb	$0x01,0x10(%edx)
000023ff	xorl	%eax,%eax
00002401	jmp	0x00002430
00002403	leal	0xff(%ecx,%eax),%esi
00002407	leal	(%ecx,%eax),%edi
0000240a	movl	%edi,0x0c(%edx)
0000240d	sarl	$0x05,%esi
00002410	movl	(%edx),%edx
00002412	movl	(%edx,%esi,4),%esi
00002415	movl	%ecx,%edi
00002417	sarl	$0x05,%edi
0000241a	movl	(%edx,%edi,4),%edx
0000241d	andl	$0x1f,%ecx
00002420	shrdl	%cl,%esi,%edx
00002423	decl	%eax
00002424	movl	%eax,%ecx
00002426	movl	$0x00000002,%eax
0000242b	shll	%cl,%eax
0000242d	decl	%eax
0000242e	andl	%edx,%eax
00002430	popl	%esi
00002431	popl	%edi
00002432	ret
00002433	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadUBitVarInternal(int):
00002440	pushl	%ebx
00002441	pushl	%edi
00002442	pushl	%esi
00002443	movl	0x10(%esp),%edx
00002447	movl	0x0c(%edx),%ecx
0000244a	addl	$0xfc,%ecx
0000244d	movl	%ecx,0x0c(%edx)
00002450	movl	0x14(%esp),%esi
00002454	movl	$0x00000002,%eax
00002459	movl	$0x00000002,%edi
0000245e	subl	%esi,%edi
00002460	sarl	$0x1f,%edi
00002463	andl	$0x10,%edi
00002466	leal	0x04(%edi,%esi,4),%esi
0000246a	movl	0x08(%edx),%edi
0000246d	movl	%edi,%ebx
0000246f	subl	%ecx,%ebx
00002471	cmpl	%esi,%ebx
00002473	jge	0x00002480
00002475	movl	%edi,0x0c(%edx)
00002478	movb	$0x01,0x10(%edx)
0000247c	xorl	%eax,%eax
0000247e	jmp	0x000024a8
00002480	leal	0xff(%ecx,%esi),%edi
00002484	leal	(%ecx,%esi),%ebx
00002487	movl	%ebx,0x0c(%edx)
0000248a	sarl	$0x05,%edi
0000248d	movl	(%edx),%edx
0000248f	movl	(%edx,%edi,4),%edi
00002492	movl	%ecx,%ebx
00002494	sarl	$0x05,%ebx
00002497	movl	(%edx,%ebx,4),%edx
0000249a	andl	$0x1f,%ecx
0000249d	shrdl	%cl,%edi,%edx
000024a0	decl	%esi
000024a1	movl	%esi,%ecx
000024a3	shll	%cl,%eax
000024a5	decl	%eax
000024a6	andl	%edx,%eax
000024a8	popl	%esi
000024a9	popl	%edi
000024aa	popl	%ebx
000024ab	ret
000024ac	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::ReadSBitLong(int):
000024b0	pushl	%edi
000024b1	pushl	%esi
000024b2	movl	0x0c(%esp),%eax
000024b6	movl	0x08(%eax),%esi
000024b9	movl	0x0c(%eax),%ecx
000024bc	movl	%esi,%edi
000024be	subl	%ecx,%edi
000024c0	movl	0x10(%esp),%edx
000024c4	cmpl	%edx,%edi
000024c6	jge	0x000024d3
000024c8	movl	%esi,0x0c(%eax)
000024cb	movb	$0x01,0x10(%eax)
000024cf	xorl	%eax,%eax
000024d1	jmp	0x00002518
000024d3	leal	0xff(%ecx,%edx),%esi
000024d7	leal	(%ecx,%edx),%edi
000024da	movl	%edi,0x0c(%eax)
000024dd	sarl	$0x05,%esi
000024e0	movl	(%eax),%edi
000024e2	movl	(%edi,%esi,4),%eax
000024e5	movl	%ecx,%esi
000024e7	sarl	$0x05,%esi
000024ea	movl	(%edi,%esi,4),%esi
000024ed	andl	$0x1f,%ecx
000024f0	shrdl	%cl,%eax,%esi
000024f3	decl	%edx
000024f4	movb	%dl,%cl
000024f6	movl	$0x00000002,%eax
000024fb	shll	%cl,%eax
000024fd	decl	%eax
000024fe	andl	%esi,%eax
00002500	movb	%dl,%cl
00002502	movl	$0x00000001,%esi
00002507	shll	%cl,%esi
00002509	cmpl	%esi,%eax
0000250b	jb	0x00002518
0000250d	movb	%dl,%cl
0000250f	movl	$0xfffffffe,%edx
00002514	shll	%cl,%edx
00002516	addl	%edx,%eax
00002518	popl	%esi
00002519	popl	%edi
0000251a	ret
0000251b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadVarInt32():
00002520	pushl	%ebp
00002521	pushl	%ebx
00002522	pushl	%edi
00002523	pushl	%esi
00002524	pushl	%eax
00002525	xorl	%esi,%esi
00002527	movl	0x18(%esp),%ebp
0000252b	xorl	%eax,%eax
0000252d	nopl	(%eax)
00002530	leal	0x07(%esi),%edi
00002533	cmpl	$0x2a,%edi
00002536	je	0x0000258e
00002538	movl	0x08(%ebp),%ebx
0000253b	movl	0x0c(%ebp),%edx
0000253e	movl	%ebx,%ecx
00002540	subl	%edx,%ecx
00002542	cmpl	$0x07,%ecx
00002545	jg	0x00002552
00002547	movl	%ebx,0x0c(%ebp)
0000254a	movb	$0x01,0x10(%ebp)
0000254e	xorl	%ebx,%ebx
00002550	jmp	0x00002578
00002552	leal	0x08(%edx),%ecx
00002555	movl	%ecx,0x0c(%ebp)
00002558	movl	%ebp,%ecx
0000255a	leal	0x07(%edx),%ebp
0000255d	sarl	$0x05,%ebp
00002560	movl	(%ecx),%ebx
00002562	movl	(%ebx,%ebp,4),%ebp
00002565	movl	%edx,%ecx
00002567	sarl	$0x05,%ecx
0000256a	movl	(%ebx,%ecx,4),%ebx
0000256d	andl	$0x1f,%edx
00002570	movb	%dl,%cl
00002572	shrdl	%cl,%ebp,%ebx
00002575	movzbl	%bl,%ebx
00002578	movl	%ebx,%ebp
0000257a	andl	$0x7f,%ebp
0000257d	movl	%esi,%ecx
0000257f	shll	%cl,%ebp
00002581	orl	%ebp,%eax
00002583	testb	$0x80,%bl
00002586	movl	%edi,%esi
00002588	movl	0x18(%esp),%ebp
0000258c	jne	0x00002530
0000258e	addl	$0x04,%esp
00002591	popl	%esi
00002592	popl	%edi
00002593	popl	%ebx
00002594	popl	%ebp
00002595	ret
00002596	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadVarInt64():
000025a0	pushl	%ebp
000025a1	pushl	%ebx
000025a2	pushl	%edi
000025a3	pushl	%esi
000025a4	subl	$0x08,%esp
000025a7	movl	0x1c(%esp),%ebx
000025ab	xorl	%ebp,%ebp
000025ad	xorl	%eax,%eax
000025af	xorl	%edx,%edx
000025b1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000025c0	leal	0x07(%ebp),%ecx
000025c3	movl	%ecx,0x04(%esp)
000025c7	cmpl	$0x4d,%ecx
000025ca	je	0x0000263b
000025cc	movl	0x08(%ebx),%esi
000025cf	movl	0x0c(%ebx),%ecx
000025d2	movl	%esi,%edi
000025d4	subl	%ecx,%edi
000025d6	cmpl	$0x07,%edi
000025d9	jg	0x000025e6
000025db	movl	%esi,0x0c(%ebx)
000025de	movb	$0x01,0x10(%ebx)
000025e2	xorl	%edi,%edi
000025e4	jmp	0x00002608
000025e6	leal	0x08(%ecx),%esi
000025e9	movl	%esi,0x0c(%ebx)
000025ec	leal	0x07(%ecx),%esi
000025ef	sarl	$0x05,%esi
000025f2	movl	(%ebx),%edi
000025f4	movl	(%edi,%esi,4),%esi
000025f7	movl	%ecx,%ebx
000025f9	sarl	$0x05,%ebx
000025fc	movl	(%edi,%ebx,4),%ebx
000025ff	andl	$0x1f,%ecx
00002602	shrdl	%cl,%esi,%ebx
00002605	movzbl	%bl,%edi
00002608	movl	%edi,%esi
0000260a	andl	$0x7f,%esi
0000260d	movl	%ebp,%ebx
0000260f	movb	%bl,%cl
00002611	xorl	%ebp,%ebp
00002613	shldl	%cl,%esi,%ebp
00002616	movb	%bl,%cl
00002618	shll	%cl,%esi
0000261a	testb	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%bl
0000261d	cmovnel	%esi,%ebp
00002620	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ecx
00002625	cmovnel	%ecx,%esi
00002628	orl	%ebp,%edx
0000262a	orl	%esi,%eax
0000262c	movl	%edi,%ecx
0000262e	testb	$0x80,%cl
00002631	movl	0x04(%esp),%ebp
00002635	movl	0x1c(%esp),%ebx
00002639	jne	0x000025c0
0000263b	addl	$0x08,%esp
0000263e	popl	%esi
0000263f	popl	%edi
00002640	popl	%ebx
00002641	popl	%ebp
00002642	ret
00002643	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadSignedVarInt32():
00002650	pushl	%ebp
00002651	pushl	%ebx
00002652	pushl	%edi
00002653	pushl	%esi
00002654	pushl	%eax
00002655	xorl	%esi,%esi
00002657	movl	0x18(%esp),%ebp
0000265b	xorl	%eax,%eax
0000265d	nopl	(%eax)
00002660	leal	0x07(%esi),%edi
00002663	cmpl	$0x2a,%edi
00002666	je	0x000026be
00002668	movl	0x08(%ebp),%ebx
0000266b	movl	0x0c(%ebp),%edx
0000266e	movl	%ebx,%ecx
00002670	subl	%edx,%ecx
00002672	cmpl	$0x07,%ecx
00002675	jg	0x00002682
00002677	movl	%ebx,0x0c(%ebp)
0000267a	movb	$0x01,0x10(%ebp)
0000267e	xorl	%ebx,%ebx
00002680	jmp	0x000026a8
00002682	leal	0x08(%edx),%ecx
00002685	movl	%ecx,0x0c(%ebp)
00002688	movl	%ebp,%ecx
0000268a	leal	0x07(%edx),%ebp
0000268d	sarl	$0x05,%ebp
00002690	movl	(%ecx),%ebx
00002692	movl	(%ebx,%ebp,4),%ebp
00002695	movl	%edx,%ecx
00002697	sarl	$0x05,%ecx
0000269a	movl	(%ebx,%ecx,4),%ebx
0000269d	andl	$0x1f,%edx
000026a0	movb	%dl,%cl
000026a2	shrdl	%cl,%ebp,%ebx
000026a5	movzbl	%bl,%ebx
000026a8	movl	%ebx,%ebp
000026aa	andl	$0x7f,%ebp
000026ad	movl	%esi,%ecx
000026af	shll	%cl,%ebp
000026b1	orl	%ebp,%eax
000026b3	testb	$0x80,%bl
000026b6	movl	%edi,%esi
000026b8	movl	0x18(%esp),%ebp
000026bc	jne	0x00002660
000026be	movl	%eax,%ecx
000026c0	shrl	%ecx
000026c2	andl	$0x01,%eax
000026c5	negl	%eax
000026c7	xorl	%ecx,%eax
000026c9	addl	$0x04,%esp
000026cc	popl	%esi
000026cd	popl	%edi
000026ce	popl	%ebx
000026cf	popl	%ebp
000026d0	ret
000026d1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadSignedVarInt64():
000026e0	pushl	%ebp
000026e1	pushl	%ebx
000026e2	pushl	%edi
000026e3	pushl	%esi
000026e4	subl	$0x0c,%esp
000026e7	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
000026eb	xorl	%edx,%edx
000026ed	xorl	%eax,%eax
000026ef	xorl	%ebp,%ebp
000026f1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002700	movl	%ebp,0x08(%esp)
00002704	leal	0x07(%edx),%ecx
00002707	movl	%ecx,0x04(%esp)
0000270b	cmpl	$0x4d,%ecx
0000270e	je	0x00002787
00002710	movl	0x08(%ebx),%esi
00002713	movl	0x0c(%ebx),%ecx
00002716	movl	%esi,%edi
00002718	subl	%ecx,%edi
0000271a	cmpl	$0x07,%edi
0000271d	jg	0x0000272a
0000271f	movl	%esi,0x0c(%ebx)
00002722	movb	$0x01,0x10(%ebx)
00002726	xorl	%edi,%edi
00002728	jmp	0x0000274c
0000272a	leal	0x08(%ecx),%esi
0000272d	movl	%esi,0x0c(%ebx)
00002730	leal	0x07(%ecx),%esi
00002733	sarl	$0x05,%esi
00002736	movl	(%ebx),%edi
00002738	movl	(%edi,%esi,4),%esi
0000273b	movl	%ecx,%ebx
0000273d	sarl	$0x05,%ebx
00002740	movl	(%edi,%ebx,4),%ebx
00002743	andl	$0x1f,%ecx
00002746	shrdl	%cl,%esi,%ebx
00002749	movzbl	%bl,%edi
0000274c	movl	%edi,%esi
0000274e	andl	$0x7f,%esi
00002751	movb	%dl,%cl
00002753	xorl	%ebp,%ebp
00002755	shldl	%cl,%esi,%ebp
00002758	movb	%dl,%cl
0000275a	shll	%cl,%esi
0000275c	testb	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%dl
0000275f	cmovnel	%esi,%ebp
00002762	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ecx
00002767	cmovnel	%ecx,%esi
0000276a	movl	0x08(%esp),%ecx
0000276e	orl	%ebp,%ecx
00002770	movl	%ecx,%ebp
00002772	orl	%esi,%eax
00002774	movl	%edi,%ecx
00002776	testb	$0x80,%cl
00002779	movl	0x04(%esp),%edx
0000277d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
00002781	jne	0x00002700
00002787	movl	%eax,%ecx
00002789	andl	$0x01,%ecx
0000278c	xorl	%esi,%esi
0000278e	subl	%ecx,%esi
00002790	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%edx
00002795	sbbl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%edx
00002798	shrl	%eax
0000279a	xorl	%esi,%eax
0000279c	addl	$0x0c,%esp
0000279f	popl	%esi
000027a0	popl	%edi
000027a1	popl	%ebx
000027a2	popl	%ebp
000027a3	ret
000027a4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitLong(int, bool):
000027b0	pushl	%ebx
000027b1	pushl	%edi
000027b2	pushl	%esi
000027b3	movl	0x10(%esp),%eax
000027b7	movl	0x08(%eax),%esi
000027ba	movl	0x0c(%eax),%ecx
000027bd	movl	%esi,%edi
000027bf	subl	%ecx,%edi
000027c1	movl	0x14(%esp),%edx
000027c5	movb	0x18(%esp),%bl
000027c9	cmpb	$0x01,%bl
000027cc	jne	0x00002824
000027ce	cmpl	%edx,%edi
000027d0	jge	0x000027dd
000027d2	movl	%esi,0x0c(%eax)
000027d5	movb	$0x01,0x10(%eax)
000027d9	xorl	%eax,%eax
000027db	jmp	0x00002855
000027dd	leal	0xff(%ecx,%edx),%esi
000027e1	leal	(%ecx,%edx),%edi
000027e4	movl	%edi,0x0c(%eax)
000027e7	sarl	$0x05,%esi
000027ea	movl	(%eax),%edi
000027ec	movl	(%edi,%esi,4),%eax
000027ef	movl	%ecx,%esi
000027f1	sarl	$0x05,%esi
000027f4	movl	(%edi,%esi,4),%esi
000027f7	andl	$0x1f,%ecx
000027fa	shrdl	%cl,%eax,%esi
000027fd	decl	%edx
000027fe	movb	%dl,%cl
00002800	movl	$0x00000002,%eax
00002805	shll	%cl,%eax
00002807	decl	%eax
00002808	andl	%esi,%eax
0000280a	movb	%dl,%cl
0000280c	movl	$0x00000001,%esi
00002811	shll	%cl,%esi
00002813	cmpl	%esi,%eax
00002815	jb	0x00002855
00002817	movb	%dl,%cl
00002819	movl	$0xfffffffe,%edx
0000281e	shll	%cl,%edx
00002820	addl	%edx,%eax
00002822	jmp	0x00002855
00002824	cmpl	%edx,%edi
00002826	jl	0x000027d2
00002828	leal	0xff(%ecx,%edx),%esi
0000282c	leal	(%ecx,%edx),%edi
0000282f	movl	%edi,0x0c(%eax)
00002832	sarl	$0x05,%esi
00002835	movl	(%eax),%edi
00002837	movl	(%edi,%esi,4),%eax
0000283a	movl	%ecx,%esi
0000283c	sarl	$0x05,%esi
0000283f	movl	(%edi,%esi,4),%esi
00002842	andl	$0x1f,%ecx
00002845	shrdl	%cl,%eax,%esi
00002848	decl	%edx
00002849	movb	%dl,%cl
0000284b	movl	$0x00000002,%eax
00002850	shll	%cl,%eax
00002852	decl	%eax
00002853	andl	%esi,%eax
00002855	popl	%esi
00002856	popl	%edi
00002857	popl	%ebx
00002858	ret
00002859	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::ReadBitCoord():
00002860	pushl	%ebp
00002861	pushl	%ebx
00002862	pushl	%edi
00002863	pushl	%esi
00002864	subl	$0x10,%esp
00002867	calll	0x0000286c
0000286c	popl	%eax
0000286d	movl	%eax,0x08(%esp)
00002871	movl	0x24(%esp),%ebx
00002875	movl	0x08(%ebx),%esi
00002878	movl	0x0c(%ebx),%edx
0000287b	movl	%esi,%eax
0000287d	subl	%edx,%eax
0000287f	testl	%eax,%eax
00002881	jg	0x0000288b
00002883	movb	$0x01,0x10(%ebx)
00002887	xorl	%ebp,%ebp
00002889	jmp	0x000028a4
0000288b	movl	%edx,%eax
0000288d	sarl	$0x05,%eax
00002890	movl	(%ebx),%ecx
00002892	movl	(%ecx,%eax,4),%ebp
00002895	leal	0x01(%edx),%eax
00002898	movl	%eax,0x0c(%ebx)
0000289b	movb	%dl,%cl
0000289d	shrl	%cl,%ebp
0000289f	andl	$0x01,%ebp
000028a2	movl	%eax,%edx
000028a4	movl	%esi,%eax
000028a6	subl	%edx,%eax
000028a8	testl	%eax,%eax
000028aa	jg	0x000028b4
000028ac	movb	$0x01,0x10(%ebx)
000028b0	movb	$0x01,%cl
000028b2	jmp	0x000028cc
000028b4	movl	%edx,%eax
000028b6	sarl	$0x05,%eax
000028b9	movl	(%ebx),%ecx
000028bb	movl	(%ecx,%eax,4),%edi
000028be	leal	0x01(%edx),%eax
000028c1	movl	%eax,0x0c(%ebx)
000028c4	btl	%edx,%edi
000028c7	setae	%cl
000028ca	movl	%eax,%edx
000028cc	testl	%ebp,%ebp
000028ce	sete	%al
000028d1	testb	%cl,%cl
000028d3	je	0x000028e1
000028d5	pxor	%xmm0,%xmm0
000028d9	testb	%al,%al
000028db	jne	0x000029f4
000028e1	movl	%esi,%eax
000028e3	subl	%edx,%eax
000028e5	testl	%eax,%eax
000028e7	jg	0x000028fa
000028e9	movb	%cl,0x07(%esp)
000028ed	movb	$0x01,0x10(%ebx)
000028f1	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esp)
000028f8	jmp	0x0000291a
000028fa	movb	%cl,0x07(%esp)
000028fe	movl	%edx,%eax
00002900	sarl	$0x05,%eax
00002903	movl	(%ebx),%ecx
00002905	movl	(%ecx,%eax,4),%edi
00002908	leal	0x01(%edx),%eax
0000290b	movl	%eax,0x0c(%ebx)
0000290e	movb	%dl,%cl
00002910	shrl	%cl,%edi
00002912	andl	$0x01,%edi
00002915	movl	%edi,(%esp)
00002918	movl	%eax,%edx
0000291a	movl	%esi,%edi
0000291c	pxor	%xmm0,%xmm0
00002920	testl	%ebp,%ebp
00002922	movb	0x07(%esp),%cl
00002926	jne	0x00002930
00002928	movl	%ebx,%esi
0000292a	pxor	%xmm1,%xmm1
0000292e	jmp	0x00002987
00002930	movl	%edi,%eax
00002932	subl	%edx,%eax
00002934	cmpl	$0x0d,%eax
00002937	jg	0x00002952
00002939	movl	%edi,0x0c(%ebx)
0000293c	movb	$0x01,0x10(%ebx)
00002940	movl	%ebx,%esi
00002942	movl	0x08(%esp),%eax
00002946	movsd	0x1a9c0-0x286c(%eax),%xmm1
0000294e	movl	%edi,%edx
00002950	jmp	0x00002987
00002952	leal	0x0e(%edx),%ebp
00002955	movl	%ebp,0x0c(%ebx)
00002958	movl	%ebx,%ecx
0000295a	leal	0x0d(%edx),%ebx
0000295d	sarl	$0x05,%ebx
00002960	movl	(%ecx),%eax
00002962	movl	%ecx,%esi
00002964	movl	(%eax,%ebx,4),%ebx
00002967	movl	%edx,%ecx
00002969	sarl	$0x05,%ecx
0000296c	movl	(%eax,%ecx,4),%eax
0000296f	andl	$0x1f,%edx
00002972	movb	%dl,%cl
00002974	shrdl	%cl,%ebx,%eax
00002977	movb	0x07(%esp),%cl
0000297b	andl	$0x00003fff,%eax
00002980	incl	%eax
00002981	cvtsi2sd	%eax,%xmm1
00002985	movl	%ebp,%edx
00002987	testb	%cl,%cl
00002989	movl	%esi,%ecx
0000298b	jne	0x000029db
0000298d	movl	%edi,%eax
0000298f	subl	%edx,%eax
00002991	cmpl	$0x04,%eax
00002994	jg	0x000029a3
00002996	movl	%edi,0x0c(%ecx)
00002999	movb	$0x01,0x10(%ecx)
0000299d	pxor	%xmm0,%xmm0
000029a1	jmp	0x000029db
000029a3	leal	0x05(%edx),%eax
000029a6	movl	%eax,0x0c(%ecx)
000029a9	leal	0x04(%edx),%esi
000029ac	sarl	$0x05,%esi
000029af	movl	(%ecx),%eax
000029b1	movl	(%eax,%esi,4),%ebx
000029b4	movl	%edx,%esi
000029b6	sarl	$0x05,%esi
000029b9	movl	(%eax,%esi,4),%eax
000029bc	andl	$0x1f,%edx
000029bf	movb	%dl,%cl
000029c1	shrdl	%cl,%ebx,%eax
000029c4	andl	$0x1f,%eax
000029c7	cvtsi2ss	%eax,%xmm0
000029cb	cvtss2sd	%xmm0,%xmm0
000029cf	movl	0x08(%esp),%eax
000029d3	mulsd	0x1a9c8-0x286c(%eax),%xmm0
000029db	addsd	%xmm0,%xmm1
000029df	cvtsd2ss	%xmm1,%xmm0
000029e3	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esp)
000029e7	je	0x000029f4
000029e9	movl	0x08(%esp),%eax
000029ed	xorps	0x1aa00-0x286c(%eax),%xmm0
000029f4	movss	%xmm0,0x0c(%esp)
000029fa	flds	0x0c(%esp)
000029fe	addl	$0x10,%esp
00002a01	popl	%esi
00002a02	popl	%edi
00002a03	popl	%ebx
00002a04	popl	%ebp
00002a05	ret
00002a06	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordMP(bool, bool):
00002a10	pushl	%ebp
00002a11	pushl	%ebx
00002a12	pushl	%edi
00002a13	pushl	%esi
00002a14	subl	$0x0c,%esp
00002a17	calll	0x00002a1c
00002a1c	popl	%eax
00002a1d	movl	%eax,0x04(%esp)
00002a21	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%esi
00002a25	movl	0x08(%esi),%ebp
00002a28	movl	0x0c(%esi),%ebx
00002a2b	movl	%ebp,%eax
00002a2d	subl	%ebx,%eax
00002a2f	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x24(%esp)
00002a34	sete	%cl
00002a37	movzbl	%cl,%edx
00002a3a	orl	$0x02,%edx
00002a3d	cmpl	%edx,%eax
00002a3f	jge	0x00002a4e
00002a41	movl	%ebp,0x0c(%esi)
00002a44	movb	$0x01,0x10(%esi)
00002a48	xorl	%edx,%edx
00002a4a	movl	%ebp,%eax
00002a4c	jmp	0x00002a83
00002a4e	leal	0xff(%ebx,%edx),%ecx
00002a52	leal	(%ebx,%edx),%eax
00002a55	movl	%eax,0x0c(%esi)
00002a58	sarl	$0x05,%ecx
00002a5b	movl	%ebp,%edi
00002a5d	movl	(%esi),%ebp
00002a5f	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%esi
00002a63	movl	%ebx,%ecx
00002a65	sarl	$0x05,%ecx
00002a68	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebp
00002a6c	andl	$0x1f,%ebx
00002a6f	movb	%bl,%cl
00002a71	shrdl	%cl,%esi,%ebp
00002a74	decl	%edx
00002a75	movb	%dl,%cl
00002a77	movl	$0x00000002,%edx
00002a7c	shll	%cl,%edx
00002a7e	decl	%edx
00002a7f	andl	%ebp,%edx
00002a81	movl	%edi,%ebp
00002a83	cmpb	$0x01,0x24(%esp)
00002a88	jne	0x00002b01
00002a8a	pxor	%xmm1,%xmm1
00002a8e	testb	$0x02,%dl
00002a91	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
00002a95	je	0x00002bd0
00002a9b	movl	%ebp,%ecx
00002a9d	subl	%eax,%ecx
00002a9f	testb	$0x01,%dl
00002aa2	sete	%dl
00002aa5	movzbl	%dl,%edx
00002aa8	leal	0x0c(%edx,%edx,2),%edx
00002aac	cmpl	%edx,%ecx
00002aae	jge	0x00002abb
00002ab0	movl	%ebp,0x0c(%ebx)
00002ab3	movb	$0x01,0x10(%ebx)
00002ab7	xorl	%eax,%eax
00002ab9	jmp	0x00002aea
00002abb	leal	0xff(%eax,%edx),%ecx
00002abf	leal	(%eax,%edx),%esi
00002ac2	movl	%esi,0x0c(%ebx)
00002ac5	sarl	$0x05,%ecx
00002ac8	movl	(%ebx),%esi
00002aca	movl	(%esi,%ecx,4),%edi
00002acd	movl	%eax,%ecx
00002acf	sarl	$0x05,%ecx
00002ad2	movl	(%esi,%ecx,4),%esi
00002ad5	andl	$0x1f,%eax
00002ad8	movb	%al,%cl
00002ada	shrdl	%cl,%edi,%esi
00002add	decl	%edx
00002ade	movl	%edx,%ecx
00002ae0	movl	$0x00000002,%eax
00002ae5	shll	%cl,%eax
00002ae7	decl	%eax
00002ae8	andl	%esi,%eax
00002aea	movl	%eax,%ecx
00002aec	shrl	%ecx
00002aee	movl	%ecx,%edx
00002af0	notl	%edx
00002af2	incl	%ecx
00002af3	testb	$0x01,%al
00002af5	cmovnel	%edx,%ecx
00002af8	cvtsi2ss	%ecx,%xmm1
00002afc	jmp	0x00002bd0
00002b01	movl	%edx,%ebx
00002b03	andl	$0x04,%ebx
00002b06	movzbl	0x28(%esp),%ecx
00002b0b	movl	0x04(%esp),%edi
00002b0f	leal	bf_read::ReadBitCoordMP(bool, bool)::mul_table-0x2a1c(%edi,%ecx,8),%esi
00002b16	movss	(%ebx,%esi),%xmm0
00002b1b	movl	%ebp,%ebx
00002b1d	subl	%eax,%ebx
00002b1f	movl	%ebp,%esi
00002b21	movl	%edx,%ebp
00002b23	andl	$0x03,%ebp
00002b26	shll	$0x02,%ecx
00002b29	orl	%ebp,%ecx
00002b2b	movzbl	bf_read::ReadBitCoordMP(bool, bool)::numbits_table-0x2a1c(%edi,%ecx),%ebp
00002b33	cmpl	%ebp,%ebx
00002b35	jge	0x00002b46
00002b37	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00002b3b	movl	%esi,0x0c(%eax)
00002b3e	movb	$0x01,0x10(%eax)
00002b42	xorl	%eax,%eax
00002b44	jmp	0x00002b79
00002b46	leal	0xff(%eax,%ebp),%ecx
00002b4a	leal	(%eax,%ebp),%esi
00002b4d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00002b51	movl	%esi,0x0c(%edi)
00002b54	sarl	$0x05,%ecx
00002b57	movl	(%edi),%esi
00002b59	movl	(%esi,%ecx,4),%edi
00002b5c	movl	%eax,%ecx
00002b5e	sarl	$0x05,%ecx
00002b61	movl	(%esi,%ecx,4),%esi
00002b64	andl	$0x1f,%eax
00002b67	movb	%al,%cl
00002b69	shrdl	%cl,%edi,%esi
00002b6c	decl	%ebp
00002b6d	movl	%ebp,%ecx
00002b6f	movl	$0x00000002,%eax
00002b74	shll	%cl,%eax
00002b76	decl	%eax
00002b77	andl	%esi,%eax
00002b79	testb	$0x02,%dl
00002b7c	je	0x00002bc8
00002b7e	andl	$0x01,%edx
00002b81	movl	%edx,%ecx
00002b83	decl	%ecx
00002b84	movl	%ecx,%edx
00002b86	andl	$0x00003800,%edx
00002b8c	orl	$0x000007ff,%edx
00002b92	andl	%eax,%edx
00002b94	leal	0x00000008(,%edx,8),%edi
00002b9b	leal	0x01(%edx),%esi
00002b9e	shll	$0x05,%esi
00002ba1	subl	%edi,%esi
00002ba3	movb	0x28(%esp),%bl
00002ba7	notb	%bl
00002ba9	movzbl	%bl,%edi
00002bac	shll	$0x1f,%edi
00002baf	sarl	$0x1f,%edi
00002bb2	andl	%esi,%edi
00002bb4	leal	0x08(%edi,%edx,8),%edx
00002bb8	movl	%eax,%esi
00002bba	shrl	$0x0b,%esi
00002bbd	shrl	$0x0e,%eax
00002bc0	subl	%esi,%eax
00002bc2	andl	%ecx,%eax
00002bc4	addl	%esi,%eax
00002bc6	orl	%edx,%eax
00002bc8	cvtsi2ss	%eax,%xmm1
00002bcc	mulss	%xmm0,%xmm1
00002bd0	movss	%xmm1,0x08(%esp)
00002bd6	flds	0x08(%esp)
00002bda	addl	$0x0c,%esp
00002bdd	popl	%esi
00002bde	popl	%edi
00002bdf	popl	%ebx
00002be0	popl	%ebp
00002be1	ret
00002be2	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordBits():
00002bf0	pushl	%ebp
00002bf1	pushl	%ebx
00002bf2	pushl	%edi
00002bf3	pushl	%esi
00002bf4	movl	0x14(%esp),%edi
00002bf8	movl	0x08(%edi),%ebx
00002bfb	movl	0x0c(%edi),%ecx
00002bfe	movl	%ebx,%eax
00002c00	subl	%ecx,%eax
00002c02	cmpl	$0x01,%eax
00002c05	jg	0x00002c15
00002c07	movl	%ebx,0x0c(%edi)
00002c0a	movb	$0x01,0x10(%edi)
00002c0e	xorl	%eax,%eax
00002c10	jmp	0x00002c95
00002c15	leal	0x02(%ecx),%edx
00002c18	movl	%edx,0x0c(%edi)
00002c1b	leal	0x01(%ecx),%eax
00002c1e	sarl	$0x05,%eax
00002c21	movl	(%edi),%ebp
00002c23	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4),%eax
00002c27	movl	%ecx,%esi
00002c29	sarl	$0x05,%esi
00002c2c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%esi,4),%esi
00002c30	andl	$0x1f,%ecx
00002c33	shrdl	%cl,%eax,%esi
00002c36	xorl	%eax,%eax
00002c38	andl	$0x03,%esi
00002c3b	je	0x00002c95
00002c3d	calll	0x00002c42
00002c42	popl	%eax
00002c43	movl	%ebx,%ecx
00002c45	subl	%edx,%ecx
00002c47	movl	bf_read::ReadBitCoordBits()::numbits_table-0x2c42+0xfffffffc(%eax,%esi,4),%eax
00002c4e	cmpl	%eax,%ecx
00002c50	jge	0x00002c5d
00002c52	movl	%ebx,0x0c(%edi)
00002c55	movb	$0x01,0x10(%edi)
00002c59	xorl	%eax,%eax
00002c5b	jmp	0x00002c93
00002c5d	leal	0xff(%edx,%eax),%ecx
00002c61	leal	(%edx,%eax),%ebx
00002c64	movl	%ebx,0x0c(%edi)
00002c67	sarl	$0x05,%ecx
00002c6a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebx
00002c6e	movl	%edx,%ecx
00002c70	sarl	$0x05,%ecx
00002c73	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%edi
00002c77	andl	$0x1f,%edx
00002c7a	movb	%dl,%cl
00002c7c	shrdl	%cl,%ebx,%edi
00002c7f	decl	%eax
00002c80	movl	%eax,%ecx
00002c82	movl	$0x00000002,%eax
00002c87	shll	%cl,%eax
00002c89	addl	$0x3fffffff,%eax
00002c8e	andl	%edi,%eax
00002c90	shll	$0x02,%eax
00002c93	orl	%esi,%eax
00002c95	popl	%esi
00002c96	popl	%edi
00002c97	popl	%ebx
00002c98	popl	%ebp
00002c99	ret
00002c9a	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordMPBits(bool, bool):
00002ca0	pushl	%ebp
00002ca1	pushl	%ebx
00002ca2	pushl	%edi
00002ca3	pushl	%esi
00002ca4	pushl	%eax
00002ca5	calll	0x00002caa
00002caa	popl	%eax
00002cab	movl	%eax,(%esp)
00002cae	movl	0x18(%esp),%esi
00002cb2	movl	0x08(%esi),%edi
00002cb5	movl	0x0c(%esi),%ebx
00002cb8	movl	%edi,%eax
00002cba	subl	%ebx,%eax
00002cbc	cmpl	$0x01,%eax
00002cbf	jg	0x00002cce
00002cc1	movl	%edi,0x0c(%esi)
00002cc4	movb	$0x01,0x10(%esi)
00002cc8	xorl	%eax,%eax
00002cca	movl	%edi,%edx
00002ccc	jmp	0x00002cf2
00002cce	leal	0x02(%ebx),%edx
00002cd1	movl	%edx,0x0c(%esi)
00002cd4	leal	0x01(%ebx),%ebp
00002cd7	sarl	$0x05,%ebp
00002cda	movl	(%esi),%eax
00002cdc	movl	(%eax,%ebp,4),%ebp
00002cdf	movl	%ebx,%ecx
00002ce1	sarl	$0x05,%ecx
00002ce4	movl	(%eax,%ecx,4),%eax
00002ce7	andl	$0x1f,%ebx
00002cea	movb	%bl,%cl
00002cec	shrdl	%cl,%ebp,%eax
00002cef	andl	$0x03,%eax
00002cf2	cmpb	$0x01,0x1c(%esp)
00002cf7	jne	0x00002d0b
00002cf9	testb	$0x02,%al
00002cfb	je	0x00002d6c
00002cfd	testb	$0x01,%al
00002cff	sete	%cl
00002d02	movzbl	%cl,%ecx
00002d05	leal	0x0c(%ecx,%ecx,2),%ebx
00002d09	jmp	0x00002d20
00002d0b	movzbl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00002d10	shll	$0x02,%ecx
00002d13	orl	%eax,%ecx
00002d15	movl	(%esp),%ebx
00002d18	movzbl	bf_read::ReadBitCoordMPBits(bool, bool)::numbits_table-0x2caa(%ebx,%ecx),%ebx
00002d20	movl	%edi,%ecx
00002d22	subl	%edx,%ecx
00002d24	cmpl	%ebx,%ecx
00002d26	jge	0x00002d33
00002d28	movl	%edi,0x0c(%esi)
00002d2b	movb	$0x01,0x10(%esi)
00002d2f	xorl	%edx,%edx
00002d31	jmp	0x00002d6a
00002d33	leal	0xff(%edx,%ebx),%ecx
00002d37	leal	(%edx,%ebx),%edi
00002d3a	movl	%edi,0x0c(%esi)
00002d3d	sarl	$0x05,%ecx
00002d40	movl	(%esi),%esi
00002d42	movl	(%esi,%ecx,4),%edi
00002d45	movl	%edx,%ecx
00002d47	sarl	$0x05,%ecx
00002d4a	movl	(%esi,%ecx,4),%esi
00002d4d	andl	$0x1f,%edx
00002d50	movb	%dl,%cl
00002d52	shrdl	%cl,%edi,%esi
00002d55	decl	%ebx
00002d56	movb	%bl,%cl
00002d58	movl	$0x00000002,%edx
00002d5d	shll	%cl,%edx
00002d5f	addl	$0x3fffffff,%edx
00002d65	andl	%esi,%edx
00002d67	shll	$0x02,%edx
00002d6a	orl	%edx,%eax
00002d6c	addl	$0x04,%esp
00002d6f	popl	%esi
00002d70	popl	%edi
00002d71	popl	%ebx
00002d72	popl	%ebp
00002d73	ret
00002d74	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitVec3Coord(Vector&):
00002d80	pushl	%ebp
00002d81	movl	%esp,%ebp
00002d83	pushl	%ebx
00002d84	pushl	%edi
00002d85	pushl	%esi
00002d86	subl	$0x0c,%esp
00002d89	movl	0x0c(%ebp),%eax
00002d8c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00002d92	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00002d99	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x08(%eax)
00002da0	movl	0x08(%ebp),%edi
00002da3	movl	0x08(%edi),%edx
00002da6	movl	0x0c(%edi),%ecx
00002da9	movl	%edx,%eax
00002dab	subl	%ecx,%eax
00002dad	testl	%eax,%eax
00002daf	jg	0x00002db9
00002db1	movb	$0x01,0x10(%edi)
00002db5	xorl	%eax,%eax
00002db7	jmp	0x00002dd0
00002db9	movl	%ecx,%eax
00002dbb	sarl	$0x05,%eax
00002dbe	movl	(%edi),%esi
00002dc0	movl	(%esi,%eax,4),%eax
00002dc3	leal	0x01(%ecx),%esi
00002dc6	movl	%esi,0x0c(%edi)
00002dc9	shrl	%cl,%eax
00002dcb	andl	$0x01,%eax
00002dce	movl	%esi,%ecx
00002dd0	movl	%edx,%esi
00002dd2	subl	%ecx,%esi
00002dd4	testl	%esi,%esi
00002dd6	jg	0x00002de0
00002dd8	movb	$0x01,0x10(%edi)
00002ddc	xorl	%ebx,%ebx
00002dde	jmp	0x00002df7
00002de0	movl	%ecx,%esi
00002de2	sarl	$0x05,%esi
00002de5	movl	(%edi),%ebx
00002de7	movl	(%ebx,%esi,4),%ebx
00002dea	leal	0x01(%ecx),%esi
00002ded	movl	%esi,0x0c(%edi)
00002df0	shrl	%cl,%ebx
00002df2	andl	$0x01,%ebx
00002df5	movl	%esi,%ecx
00002df7	subl	%ecx,%edx
00002df9	testl	%edx,%edx
00002dfb	jg	0x00002e05
00002dfd	movb	$0x01,0x10(%edi)
00002e01	xorl	%esi,%esi
00002e03	jmp	0x00002e1a
00002e05	movl	%ecx,%edx
00002e07	sarl	$0x05,%edx
00002e0a	movl	(%edi),%esi
00002e0c	movl	(%esi,%edx,4),%esi
00002e0f	leal	0x01(%ecx),%edx
00002e12	movl	%edx,0x0c(%edi)
00002e15	shrl	%cl,%esi
00002e17	andl	$0x01,%esi
00002e1a	testl	%eax,%eax
00002e1c	je	0x00002e2b
00002e1e	movl	%edi,(%esp)
00002e21	calll	bf_read::ReadBitCoord()
00002e26	movl	0x0c(%ebp),%eax
00002e29	fstps	(%eax)
00002e2b	testl	%ebx,%ebx
00002e2d	je	0x00002e3d
00002e2f	movl	%edi,(%esp)
00002e32	calll	bf_read::ReadBitCoord()
00002e37	movl	0x0c(%ebp),%eax
00002e3a	fstps	0x04(%eax)
00002e3d	testl	%esi,%esi
00002e3f	je	0x00002e4f
00002e41	movl	%edi,(%esp)
00002e44	calll	bf_read::ReadBitCoord()
00002e49	movl	0x0c(%ebp),%eax
00002e4c	fstps	0x08(%eax)
00002e4f	addl	$0x0c,%esp
00002e52	popl	%esi
00002e53	popl	%edi
00002e54	popl	%ebx
00002e55	popl	%ebp
00002e56	ret
00002e57	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitNormal():
00002e60	pushl	%ebx
00002e61	pushl	%edi
00002e62	pushl	%esi
00002e63	pushl	%eax
00002e64	calll	0x00002e69
00002e69	popl	%eax
00002e6a	movl	0x14(%esp),%esi
00002e6e	movl	0x08(%esi),%edi
00002e71	movl	0x0c(%esi),%ecx
00002e74	movl	%edi,%edx
00002e76	subl	%ecx,%edx
00002e78	testl	%edx,%edx
00002e7a	jg	0x00002e84
00002e7c	movb	$0x01,0x10(%esi)
00002e80	xorl	%edx,%edx
00002e82	jmp	0x00002e9b
00002e84	movl	%ecx,%edx
00002e86	sarl	$0x05,%edx
00002e89	movl	(%esi),%ebx
00002e8b	movl	(%ebx,%edx,4),%edx
00002e8e	leal	0x01(%ecx),%ebx
00002e91	movl	%ebx,0x0c(%esi)
00002e94	shrl	%cl,%edx
00002e96	andl	$0x01,%edx
00002e99	movl	%ebx,%ecx
00002e9b	movl	%edi,%ebx
00002e9d	subl	%ecx,%ebx
00002e9f	cmpl	$0x0a,%ebx
00002ea2	jg	0x00002eb1
00002ea4	movl	%edi,0x0c(%esi)
00002ea7	movb	$0x01,0x10(%esi)
00002eab	pxor	%xmm0,%xmm0
00002eaf	jmp	0x00002eea
00002eb1	leal	0x0b(%ecx),%edi
00002eb4	movl	%edi,0x0c(%esi)
00002eb7	leal	0x0a(%ecx),%edi
00002eba	sarl	$0x05,%edi
00002ebd	movl	(%esi),%esi
00002ebf	movl	(%esi,%edi,4),%edi
00002ec2	movl	%ecx,%ebx
00002ec4	sarl	$0x05,%ebx
00002ec7	movl	(%esi,%ebx,4),%esi
00002eca	andl	$0x1f,%ecx
00002ecd	shrdl	%cl,%edi,%esi
00002ed0	andl	$0x000007ff,%esi
00002ed6	cvtsi2ss	%esi,%xmm0
00002eda	cvtss2sd	%xmm0,%xmm0
00002ede	mulsd	0x1a9d0-0x2e69(%eax),%xmm0
00002ee6	cvtsd2ss	%xmm0,%xmm0
00002eea	testl	%edx,%edx
00002eec	je	0x00002ef5
00002eee	xorps	0x1aa10-0x2e69(%eax),%xmm0
00002ef5	movss	%xmm0,(%esp)
00002efa	flds	(%esp)
00002efd	addl	$0x04,%esp
00002f00	popl	%esi
00002f01	popl	%edi
00002f02	popl	%ebx
00002f03	ret
00002f04	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitVec3Normal(Vector&):
00002f10	pushl	%ebp
00002f11	movl	%esp,%ebp
00002f13	pushl	%ebx
00002f14	pushl	%edi
00002f15	pushl	%esi
00002f16	subl	$0x0c,%esp
00002f19	calll	0x00002f1e
00002f1e	popl	%eax
00002f1f	movl	%eax,0xf0(%ebp)
00002f22	movl	0x08(%ebp),%ebx
00002f25	movl	0x08(%ebx),%edx
00002f28	movl	0x0c(%ebx),%ecx
00002f2b	movl	%edx,%eax
00002f2d	subl	%ecx,%eax
00002f2f	movl	0x0c(%ebp),%edi
00002f32	testl	%eax,%eax
00002f34	jg	0x00002f3e
00002f36	movb	$0x01,0x10(%ebx)
00002f3a	xorl	%eax,%eax
00002f3c	jmp	0x00002f55
00002f3e	movl	%ecx,%eax
00002f40	sarl	$0x05,%eax
00002f43	movl	(%ebx),%esi
00002f45	movl	(%esi,%eax,4),%eax
00002f48	leal	0x01(%ecx),%esi
00002f4b	movl	%esi,0x0c(%ebx)
00002f4e	shrl	%cl,%eax
00002f50	andl	$0x01,%eax
00002f53	movl	%esi,%ecx
00002f55	subl	%ecx,%edx
00002f57	testl	%edx,%edx
00002f59	jg	0x00002f63
00002f5b	movb	$0x01,0x10(%ebx)
00002f5f	xorl	%esi,%esi
00002f61	jmp	0x00002f78
00002f63	movl	%ecx,%edx
00002f65	sarl	$0x05,%edx
00002f68	movl	(%ebx),%esi
00002f6a	movl	(%esi,%edx,4),%esi
00002f6d	leal	0x01(%ecx),%edx
00002f70	movl	%edx,0x0c(%ebx)
00002f73	shrl	%cl,%esi
00002f75	andl	$0x01,%esi
00002f78	testl	%eax,%eax
00002f7a	je	0x00002f88
00002f7c	movl	%ebx,(%esp)
00002f7f	calll	bf_read::ReadBitNormal()
00002f84	fstps	(%edi)
00002f86	jmp	0x00002f8e
00002f88	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%edi)
00002f8e	testl	%esi,%esi
00002f90	je	0x00002f9f
00002f92	movl	%ebx,(%esp)
00002f95	calll	bf_read::ReadBitNormal()
00002f9a	fstps	0x04(%edi)
00002f9d	jmp	0x00002fa6
00002f9f	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%edi)
00002fa6	movl	0x08(%ebx),%eax
00002fa9	movl	0x0c(%ebx),%ecx
00002fac	subl	%ecx,%eax
00002fae	testl	%eax,%eax
00002fb0	jg	0x00002fba
00002fb2	movb	$0x01,0x10(%ebx)
00002fb6	xorl	%eax,%eax
00002fb8	jmp	0x00002fcf
00002fba	movl	%ecx,%eax
00002fbc	sarl	$0x05,%eax
00002fbf	movl	(%ebx),%edx
00002fc1	movl	(%edx,%eax,4),%eax
00002fc4	leal	0x01(%ecx),%edx
00002fc7	movl	%edx,0x0c(%ebx)
00002fca	shrl	%cl,%eax
00002fcc	andl	$0x01,%eax
00002fcf	movss	(%edi),%xmm0
00002fd3	movss	0x04(%edi),%xmm1
00002fd8	mulss	%xmm1,%xmm1
00002fdc	mulss	%xmm0,%xmm0
00002fe0	addss	%xmm1,%xmm0
00002fe4	movl	0xf0(%ebp),%ecx
00002fe7	movss	0x1aa4c-0x2f1e(%ecx),%xmm1
00002fef	ucomiss	%xmm0,%xmm1
00002ff2	jbe	0x00003003
00002ff4	subss	%xmm0,%xmm1
00002ff8	sqrtss	%xmm1,%xmm0
00002ffc	movss	%xmm0,0x08(%edi)
00003001	jmp	0x0000300e
00003003	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x08(%edi)
0000300a	pxor	%xmm0,%xmm0
0000300e	testl	%eax,%eax
00003010	je	0x0000301e
00003012	xorps	0x1aa20-0x2f1e(%ecx),%xmm0
00003019	movss	%xmm0,0x08(%edi)
0000301e	addl	$0x0c,%esp
00003021	popl	%esi
00003022	popl	%edi
00003023	popl	%ebx
00003024	popl	%ebp
00003025	ret
00003026	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitAngles(QAngle&):
00003030	pushl	%ebp
00003031	movl	%esp,%ebp
00003033	subl	$0x18,%esp
00003036	leal	0xf0(%ebp),%eax
00003039	movl	%eax,0x04(%esp)
0000303d	movl	0x08(%ebp),%eax
00003040	movl	%eax,(%esp)
00003043	calll	bf_read::ReadBitVec3Coord(Vector&)
00003048	movss	0xf8(%ebp),%xmm0
0000304d	movl	0x0c(%ebp),%eax
00003050	movss	0xf0(%ebp),%xmm2
00003055	movss	0xf4(%ebp),%xmm1
0000305a	movss	%xmm2,(%eax)
0000305e	movss	%xmm1,0x04(%eax)
00003063	movss	%xmm0,0x08(%eax)
00003068	addl	$0x18,%esp
0000306b	popl	%ebp
0000306c	ret
0000306d	nopl	(%eax)
bf_read::ReadLongLong():
00003070	pushl	%ebp
00003071	pushl	%ebx
00003072	pushl	%edi
00003073	pushl	%esi
00003074	movl	0x14(%esp),%edx
00003078	movl	0x08(%edx),%ebx
0000307b	movl	0x0c(%edx),%ecx
0000307e	movl	%ebx,%eax
00003080	subl	%ecx,%eax
00003082	cmpl	$0x1f,%eax
00003085	jg	0x00003094
00003087	movl	%ebx,0x0c(%edx)
0000308a	movb	$0x01,0x10(%edx)
0000308e	xorl	%esi,%esi
00003090	movl	%ebx,%eax
00003092	jmp	0x000030b3
00003094	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ecx),%eax
00003097	movl	%eax,0x0c(%edx)
0000309a	leal	0x1f(%ecx),%edi
0000309d	sarl	$0x05,%edi
000030a0	movl	(%edx),%esi
000030a2	movl	(%esi,%edi,4),%edi
000030a5	movl	%ecx,%ebp
000030a7	sarl	$0x05,%ebp
000030aa	movl	(%esi,%ebp,4),%esi
000030ad	andl	$0x1f,%ecx
000030b0	shrdl	%cl,%edi,%esi
000030b3	xorl	%edi,%edi
000030b5	movl	%ebx,%ecx
000030b7	subl	%eax,%ecx
000030b9	cmpl	$0x1f,%ecx
000030bc	jg	0x000030cb
000030be	movl	%ebx,0x0c(%edx)
000030c1	movb	$0x01,0x10(%edx)
000030c5	xorl	%eax,%eax
000030c7	xorl	%edx,%edx
000030c9	jmp	0x000030ee
000030cb	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%eax),%ecx
000030ce	movl	%ecx,0x0c(%edx)
000030d1	leal	0x1f(%eax),%ebx
000030d4	sarl	$0x05,%ebx
000030d7	movl	(%edx),%ecx
000030d9	movl	(%ecx,%ebx,4),%ebx
000030dc	movl	%eax,%edx
000030de	sarl	$0x05,%edx
000030e1	movl	(%ecx,%edx,4),%edx
000030e4	andl	$0x1f,%eax
000030e7	movb	%al,%cl
000030e9	shrdl	%cl,%ebx,%edx
000030ec	xorl	%eax,%eax
000030ee	orl	%esi,%eax
000030f0	orl	%edi,%edx
000030f2	popl	%esi
000030f3	popl	%edi
000030f4	popl	%ebx
000030f5	popl	%ebp
000030f6	ret
000030f7	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadFloat():
00003100	pushl	%ebp
00003101	movl	%esp,%ebp
00003103	subl	$0x18,%esp
00003106	leal	0xfc(%ebp),%eax
00003109	movl	%eax,0x04(%esp)
0000310d	movl	0x08(%ebp),%eax
00003110	movl	%eax,(%esp)
00003113	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x08(%esp)
0000311b	calll	bf_read::ReadBits(void*, int)
00003120	flds	0xfc(%ebp)
00003123	addl	$0x18,%esp
00003126	popl	%ebp
00003127	ret
00003128	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBytes(void*, int):
00003130	pushl	%ebp
00003131	movl	%esp,%ebp
00003133	pushl	%esi
00003134	subl	$0x14,%esp
00003137	movl	0x10(%ebp),%eax
0000313a	shll	$0x03,%eax
0000313d	movl	%eax,0x08(%esp)
00003141	movl	0x0c(%ebp),%eax
00003144	movl	%eax,0x04(%esp)
00003148	movl	0x08(%ebp),%esi
0000314b	movl	%esi,(%esp)
0000314e	calll	bf_read::ReadBits(void*, int)
00003153	testb	$0x01,0x10(%esi)
00003157	sete	%al
0000315a	movzbl	%al,%eax
0000315d	addl	$0x14,%esp
00003160	popl	%esi
00003161	popl	%ebp
00003162	ret
00003163	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadString(char*, int, bool, int*):
00003170	pushl	%ebp
00003171	pushl	%ebx
00003172	pushl	%edi
00003173	pushl	%esi
00003174	pushl	%eax
00003175	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00003179	decl	%ebp
0000317a	xorl	%edx,%edx
0000317c	xorb	%al,%al
0000317e	movl	0x18(%esp),%edi
00003182	jmp	0x00003192
00003184	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003190	movb	$0x01,%al
00003192	movb	%al,0x03(%esp)
00003196	jmp	0x000031de
00003198	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000031a0	leal	0x08(%ebx),%eax
000031a3	movl	%eax,0x0c(%edi)
000031a6	leal	0x07(%ebx),%esi
000031a9	sarl	$0x05,%esi
000031ac	movl	(%edi),%eax
000031ae	movl	(%eax,%esi,4),%esi
000031b1	movl	%ebx,%ecx
000031b3	sarl	$0x05,%ecx
000031b6	movl	(%eax,%ecx,4),%eax
000031b9	andl	$0x1f,%ebx
000031bc	movb	%bl,%cl
000031be	shrdl	%cl,%esi,%eax
000031c1	cmpb	$0x0a,%al
000031c3	sete	%cl
000031c6	testb	%al,%al
000031c8	je	0x000031f4
000031ca	andb	0x24(%esp),%cl
000031ce	testb	%cl,%cl
000031d0	jne	0x000031f4
000031d2	cmpl	%ebp,%edx
000031d4	jge	0x00003190
000031d6	movl	0x1c(%esp),%ecx
000031da	movb	%al,(%ecx,%edx)
000031dd	incl	%edx
000031de	movl	0x08(%edi),%eax
000031e1	movl	0x0c(%edi),%ebx
000031e4	movl	%eax,%ecx
000031e6	subl	%ebx,%ecx
000031e8	cmpl	$0x07,%ecx
000031eb	jg	0x000031a0
000031ed	movl	%eax,0x0c(%edi)
000031f0	movb	$0x01,0x10(%edi)
000031f4	movl	0x1c(%esp),%eax
000031f8	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax,%edx)
000031fc	movl	0x28(%esp),%eax
00003200	testl	%eax,%eax
00003202	je	0x00003206
00003204	movl	%edx,(%eax)
00003206	movb	0x10(%edi),%al
00003209	andb	$0x01,%al
0000320b	orb	0x03(%esp),%al
0000320f	sete	%al
00003212	movzbl	%al,%eax
00003215	addl	$0x04,%esp
00003218	popl	%esi
00003219	popl	%edi
0000321a	popl	%ebx
0000321b	popl	%ebp
0000321c	ret
0000321d	nopl	(%eax)
bf_read::ReadAndAllocateString(bool*):
00003220	pushl	%ebp
00003221	movl	%esp,%ebp
00003223	pushl	%ebx
00003224	pushl	%edi
00003225	pushl	%esi
00003226	subl	$0x0000082c,%esp
0000322c	calll	0x00003231
00003231	popl	%eax
00003232	movl	0x1e477-0x3231(%eax),%eax
00003238	movl	%eax,0xfffff7e0(%ebp)
0000323e	movl	(%eax),%eax
00003240	movl	%eax,0xf0(%ebp)
00003243	movl	0x08(%ebp),%eax
00003246	movl	0x08(%eax),%ecx
00003249	movl	%ecx,0xfffff7e8(%ebp)
0000324f	movl	0x0c(%eax),%eax
00003252	xorl	%ecx,%ecx
00003254	xorb	%dl,%dl
00003256	jmp	0x00003265
00003258	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003260	addl	$0x08,%eax
00003263	movb	$0x01,%dl
00003265	movb	%dl,0xfffff7e7(%ebp)
0000326b	movl	0xfffff7e8(%ebp),%esi
00003271	subl	%eax,%esi
00003273	jmp	0x000032c9
00003275	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003280	leal	0x08(%eax),%edi
00003283	movl	0x08(%ebp),%ebx
00003286	movl	%edi,0x0c(%ebx)
00003289	leal	0x07(%eax),%edx
0000328c	sarl	$0x05,%edx
0000328f	movl	%ecx,0xfffff7ec(%ebp)
00003295	movl	(%ebx),%ecx
00003297	movl	(%ecx,%edx,4),%ebx
0000329a	movl	%eax,%edx
0000329c	sarl	$0x05,%edx
0000329f	movl	(%ecx,%edx,4),%edx
000032a2	movl	%eax,%ecx
000032a4	andl	$0x1f,%ecx
000032a7	shrdl	%cl,%ebx,%edx
000032aa	movl	0xfffff7ec(%ebp),%ecx
000032b0	testb	%dl,%dl
000032b2	je	0x000032de
000032b4	cmpl	$0x000007fe,%ecx
000032ba	jg	0x00003260
000032bc	movb	%dl,0xfffff7f0(%ebp,%ecx)
000032c3	addl	$0xf8,%esi
000032c6	incl	%ecx
000032c7	movl	%edi,%eax
000032c9	cmpl	$0x07,%esi
000032cc	jg	0x00003280
000032ce	movl	0x08(%ebp),%eax
000032d1	movl	0xfffff7e8(%ebp),%edx
000032d7	movl	%edx,0x0c(%eax)
000032da	movb	$0x01,0x10(%eax)
000032de	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0xfffff7f0(%ebp,%ecx)
000032e6	movl	0x0c(%ebp),%edx
000032e9	testl	%edx,%edx
000032eb	je	0x000032fd
000032ed	movl	0x08(%ebp),%eax
000032f0	movb	0x10(%eax),%al
000032f3	andb	$0x01,%al
000032f5	orb	0xfffff7e7(%ebp),%al
000032fb	movb	%al,(%edx)
000032fd	leal	0x01(%ecx),%edi
00003300	testl	%edi,%edi
00003302	movl	$0xffffffff,%eax
00003307	cmovnsl	%edi,%eax
0000330a	movl	%eax,(%esp)
0000330d	movl	%ecx,%esi
0000330f	calll	operator new[](unsigned long)
00003314	movl	%esi,%ecx
00003316	movl	%eax,%esi
00003318	testl	%ecx,%ecx
0000331a	js	0x0000333c
0000331c	leal	0xfffff7f0(%ebp),%eax
00003322	movl	%eax,0x04(%esp)
00003326	movl	%esi,(%esp)
00003329	testl	%ecx,%ecx
0000332b	movl	$0x00000001,%eax
00003330	cmovgl	%edi,%eax
00003333	movl	%eax,0x08(%esp)
00003337	calll	_memcpy
0000333c	movl	0xfffff7e0(%ebp),%eax
00003342	movl	(%eax),%eax
00003344	cmpl	0xf0(%ebp),%eax
00003347	jne	0x00003356
00003349	movl	%esi,%eax
0000334b	addl	$0x0000082c,%esp
00003351	popl	%esi
00003352	popl	%edi
00003353	popl	%ebx
00003354	popl	%ebp
00003355	ret
00003356	calll	___stack_chk_fail
0000335b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ExciseBits(int, int):
00003360	pushl	%ebp
00003361	pushl	%ebx
00003362	pushl	%edi
00003363	pushl	%esi
00003364	subl	$0x08,%esp
00003367	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
0000336b	movl	0x24(%esp),%esi
0000336f	leal	(%esi,%ebp),%edx
00003372	movl	0x1c(%esp),%edi
00003376	movl	(%edi),%eax
00003378	movl	%eax,0x04(%esp)
0000337c	movl	0x08(%edi),%ebx
0000337f	movl	%ebx,%eax
00003381	subl	%edx,%eax
00003383	movl	%ebx,%ecx
00003385	shll	$0x06,%ecx
00003388	movl	%ecx,(%esp)
0000338b	testl	%edx,%edx
0000338d	js	0x00003393
0000338f	cmpl	%edx,%ebx
00003391	jge	0x0000339e
00003393	movb	$0x01,0x10(%edi)
00003397	movl	%ebx,0x0c(%edi)
0000339a	movl	%ebx,%edx
0000339c	jmp	0x000033a1
0000339e	movl	%edx,0x0c(%edi)
000033a1	testl	%eax,%eax
000033a3	jle	0x00003416
000033a5	leal	(%esi,%ebp),%eax
000033a8	movl	%ebx,%esi
000033aa	subl	%eax,%esi
000033ac	movl	%ebp,%eax
000033ae	jmp	0x000033b3
000033b0	movl	0x0c(%edi),%edx
000033b3	subl	%edx,%ebx
000033b5	testl	%ebx,%ebx
000033b7	jg	0x000033c1
000033b9	movb	$0x01,0x10(%edi)
000033bd	xorl	%ebp,%ebp
000033bf	jmp	0x000033d9
000033c1	movl	%edx,%ecx
000033c3	sarl	$0x05,%ecx
000033c6	movl	(%edi),%ebp
000033c8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebp
000033cc	leal	0x01(%edx),%ecx
000033cf	movl	%ecx,0x0c(%edi)
000033d2	movb	%dl,%cl
000033d4	shrl	%cl,%ebp
000033d6	andl	$0x01,%ebp
000033d9	cmpl	(%esp),%eax
000033dc	jge	0x00003408
000033de	movb	%al,%cl
000033e0	movl	$0x00000001,%ebx
000033e5	shll	%cl,%ebx
000033e7	testl	%ebp,%ebp
000033e9	je	0x000033f9
000033eb	movl	%eax,%ecx
000033ed	sarl	$0x05,%ecx
000033f0	movl	0x04(%esp),%edx
000033f4	orl	%ebx,(%edx,%ecx,4)
000033f7	jmp	0x00003407
000033f9	notl	%ebx
000033fb	movl	%eax,%ecx
000033fd	sarl	$0x05,%ecx
00003400	movl	0x04(%esp),%edx
00003404	andl	%ebx,(%edx,%ecx,4)
00003407	incl	%eax
00003408	movl	0x08(%edi),%ebx
0000340b	decl	%esi
0000340c	jne	0x000033b0
0000340e	movl	0x24(%esp),%esi
00003412	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00003416	testl	%ebp,%ebp
00003418	js	0x0000341e
0000341a	cmpl	%ebp,%ebx
0000341c	jge	0x00003427
0000341e	movb	$0x01,0x10(%edi)
00003422	movl	%ebx,0x0c(%edi)
00003425	jmp	0x0000342a
00003427	movl	%ebp,0x0c(%edi)
0000342a	subl	%esi,%ebx
0000342c	movl	%ebx,0x08(%edi)
0000342f	sarl	$0x03,%ebx
00003432	movl	%ebx,0x04(%edi)
00003435	addl	$0x08,%esp
00003438	popl	%esi
00003439	popl	%edi
0000343a	popl	%ebx
0000343b	popl	%ebp
0000343c	ret
0000343d	nopl	(%eax)
bf_read::CompareBitsAt(int, bf_read*, int, int):
00003440	pushl	%ebp
00003441	pushl	%ebx
00003442	pushl	%edi
00003443	pushl	%esi
00003444	subl	$0x30,%esp
00003447	xorl	%eax,%eax
00003449	movl	0x54(%esp),%edi
0000344d	testl	%edi,%edi
0000344f	je	0x000035b3
00003455	movl	0x50(%esp),%esi
00003459	movl	0x4c(%esp),%ecx
0000345d	movl	0x48(%esp),%edx
00003461	movl	0x44(%esp),%eax
00003465	leal	(%edi,%edx),%ebx
00003468	cmpl	0x08(%eax),%ebx
0000346b	setg	%ah
0000346e	leal	(%edi,%esi),%edi
00003471	cmpl	0x08(%ecx),%edi
00003474	setg	%al
00003477	orb	%ah,%al
00003479	je	0x00003483
0000347b	movzbl	%al,%eax
0000347e	jmp	0x000035b3
00003483	calll	0x00003488
00003488	popl	%eax
00003489	movl	%eax,0x28(%esp)
0000348d	movl	%ebx,%eax
0000348f	movl	%esi,%ebx
00003491	sarl	$0x05,%ebx
00003494	movl	%ebx,0x0c(%esp)
00003498	movl	(%ecx),%ecx
0000349a	movl	%ecx,0x04(%esp)
0000349e	leal	0x04(%ecx,%ebx,4),%ecx
000034a2	movl	%ecx,0x24(%esp)
000034a6	movl	%edx,%ecx
000034a8	movl	%ecx,%edx
000034aa	sarl	$0x05,%edx
000034ad	movl	%edx,SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp)
000034b1	movl	%edx,%ebp
000034b3	movl	0x44(%esp),%edx
000034b7	movl	(%edx),%edx
000034b9	movl	%edx,(%esp)
000034bc	leal	0x04(%edx,%ebp,4),%ebx
000034c0	movl	%ebx,0x2c(%esp)
000034c4	movl	(%edx,%ebp,4),%ebx
000034c7	andl	$0x1f,%esi
000034ca	movl	%esi,0x1c(%esp)
000034ce	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edx
000034d3	subl	%esi,%edx
000034d5	movl	%ebx,%esi
000034d7	movl	%edx,0x18(%esp)
000034db	andl	$0x1f,%ecx
000034de	movl	%ecx,0x10(%esp)
000034e2	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edx
000034e7	subl	%ecx,%edx
000034e9	movl	%edx,0x14(%esp)
000034ed	decl	%edi
000034ee	sarl	$0x05,%edi
000034f1	addl	0x0c(%esp),%edi
000034f5	movl	%edi,0x0c(%esp)
000034f9	movl	0x24(%esp),%ebp
000034fd	decl	%eax
000034fe	sarl	$0x05,%eax
00003501	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00003505	movl	%eax,0x08(%esp)
00003509	movl	0x54(%esp),%eax
0000350d	movl	0x28(%esp),%edx
00003511	leal	_g_ExtraMasks-0x3488(%edx,%eax,4),%edi
00003518	movl	%eax,%ebx
0000351a	movl	%ecx,%eax
0000351c	jmp	0x0000353e
0000351e	nop
00003520	addl	$0x04,%ebp
00003523	addl	$0x04,%esi
00003526	movl	%esi,0x2c(%esp)
0000352a	movl	0x28(%esp),%edi
0000352e	addl	$0x80,%edi
00003531	movl	0x24(%esp),%ebx
00003535	addl	bf_write::bf_write(char const*, void*, int, int),%ebx
00003538	movl	%edx,%esi
0000353a	movl	0x10(%esp),%eax
0000353e	movl	%eax,%ecx
00003540	shrl	%cl,%esi
00003542	cmpl	$0x21,%ebx
00003545	jl	0x00003581
00003547	movl	%edi,0x28(%esp)
0000354b	movl	%ebx,0x24(%esp)
0000354f	movl	0xfc(%ebp),%ebx
00003552	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp),%edi
00003555	movl	0x1c(%esp),%ecx
00003559	shrl	%cl,%ebx
0000355b	movl	%esi,SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp)
0000355f	movl	0x2c(%esp),%esi
00003563	movl	(%esi),%edx
00003565	movl	0x14(%esp),%ecx
00003569	movl	%edx,%eax
0000356b	shll	%cl,%eax
0000356d	xorl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00003571	xorl	%ebx,%eax
00003573	movl	0x18(%esp),%ecx
00003577	shll	%cl,%edi
00003579	cmpl	%edi,%eax
0000357b	je	0x00003520
0000357d	xorl	%edi,%eax
0000357f	jmp	0x000035b3
00003581	movl	0xfc(%ebp),%eax
00003584	movl	0x1c(%esp),%ecx
00003588	shrl	%cl,%eax
0000358a	movl	0x08(%esp),%ecx
0000358e	movl	(%esp),%edx
00003591	movl	(%edx,%ecx,4),%edx
00003594	movl	0x14(%esp),%ecx
00003598	shll	%cl,%edx
0000359a	xorl	%esi,%edx
0000359c	xorl	%eax,%edx
0000359e	movl	0x0c(%esp),%eax
000035a2	movl	0x04(%esp),%ecx
000035a6	movl	(%ecx,%eax,4),%eax
000035a9	movl	0x18(%esp),%ecx
000035ad	shll	%cl,%eax
000035af	xorl	%edx,%eax
000035b1	andl	(%edi),%eax
000035b3	addl	$0x30,%esp
000035b6	popl	%esi
000035b7	popl	%edi
000035b8	popl	%ebx
000035b9	popl	%ebp
000035ba	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(byteswap.o):
(__TEXT,__text) section
CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	movl	0x14(%ebp),%edx
00000012	movl	(%edx),%ecx
00000014	movl	0x10(%ebp),%edi
00000017	movl	0x0c(%ebp),%esi
0000001a	cmpl	$0x1b,%ecx
0000001d	jg	0x000001ee
00000023	decl	%ecx
00000024	cmpl	$0x09,%ecx
00000027	ja	0x000002a9
0000002d	addl	0x000002fe(%eax,%ecx,4),%eax
00000034	jmp	*%eax
00000036	movzwl	0x10(%edx),%eax
0000003a	testl	%eax,%eax
0000003c	je	0x000002a9
00000042	testl	%esi,%esi
00000044	je	0x000002a9
0000004a	testl	%edi,%edi
0000004c	cmovel	%esi,%edi
0000004f	testl	%edi,%edi
00000051	je	0x000002a9
00000057	movl	%eax,0x08(%esp)
0000005b	movl	%edi,0x04(%esp)
0000005f	movl	%esi,(%esp)
00000062	calll	_memcpy
00000067	jmp	0x000002a9
0000006c	movzwl	0x10(%edx),%eax
00000070	testl	%eax,%eax
00000072	je	0x000002a9
00000078	testl	%esi,%esi
0000007a	je	0x000002a9
00000080	testl	%edi,%edi
00000082	cmovel	%esi,%edi
00000085	movl	0x08(%ebp),%ecx
00000088	testb	$0x01,(%ecx)
0000008b	je	0x000000ad
0000008d	incl	%edi
0000008e	nop
00000090	movzbl	(%edi),%edx
00000093	movzbl	0xff(%edi),%ecx
00000097	shll	$0x08,%ecx
0000009a	orl	%edx,%ecx
0000009c	movw	%cx,(%esi)
0000009f	addl	$0x02,%edi
000000a2	addl	$0x02,%esi
000000a5	decl	%eax
000000a6	jne	0x00000090
000000a8	jmp	0x000002a9
000000ad	testl	%edi,%edi
000000af	je	0x000002a9
000000b5	addl	%eax,%eax
000000b7	jmp	0x00000057
000000b9	movzwl	0x10(%edx),%eax
000000bd	testl	%eax,%eax
000000bf	je	0x000002a9
000000c5	testl	%esi,%esi
000000c7	je	0x000002a9
000000cd	testl	%edi,%edi
000000cf	cmovel	%esi,%edi
000000d2	movl	0x08(%ebp),%ecx
000000d5	testb	$0x01,(%ecx)
000000d8	je	0x0000010e
000000da	addl	$0x03,%edi
000000dd	nopl	(%eax)
000000e0	movzbl	(%edi),%ecx
000000e3	movzbl	0xff(%edi),%edx
000000e7	shll	$0x08,%edx
000000ea	orl	%ecx,%edx
000000ec	movzbl	0xfe(%edi),%ecx
000000f0	shll	$0x10,%ecx
000000f3	orl	%edx,%ecx
000000f5	movzbl	0xfd(%edi),%edx
000000f9	shll	$0x18,%edx
000000fc	orl	%ecx,%edx
000000fe	movl	%edx,(%esi)
00000100	addl	$0x04,%edi
00000103	addl	$0x04,%esi
00000106	decl	%eax
00000107	jne	0x000000e0
00000109	jmp	0x000002a9
0000010e	testl	%edi,%edi
00000110	je	0x000002a9
00000116	shll	$0x02,%eax
00000119	jmp	0x00000057
0000011e	movzwl	0x10(%edx),%eax
00000122	testl	%eax,%eax
00000124	je	0x000002a9
0000012a	testl	%esi,%esi
0000012c	je	0x000002a9
00000132	testl	%edi,%edi
00000134	cmovel	%esi,%edi
00000137	movl	0x08(%ebp),%ecx
0000013a	testb	$0x01,(%ecx)
0000013d	je	0x0000010e
0000013f	addl	$0x03,%edi
00000142	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
00000150	movzbl	(%edi),%ecx
00000153	movzbl	0xff(%edi),%edx
00000157	shll	$0x08,%edx
0000015a	orl	%ecx,%edx
0000015c	movzbl	0xfe(%edi),%ecx
00000160	shll	$0x10,%ecx
00000163	orl	%edx,%ecx
00000165	movzbl	0xfd(%edi),%edx
00000169	shll	$0x18,%edx
0000016c	orl	%ecx,%edx
0000016e	movl	%edx,(%esi)
00000170	addl	$0x04,%edi
00000173	addl	$0x04,%esi
00000176	decl	%eax
00000177	jne	0x00000150
00000179	jmp	0x000002a9
0000017e	movzwl	0x10(%edx),%ecx
00000182	leal	(%ecx,%ecx,2),%eax
00000185	testl	%eax,%eax
00000187	je	0x000002a9
0000018d	testl	%esi,%esi
0000018f	je	0x000002a9
00000195	testl	%edi,%edi
00000197	cmovel	%esi,%edi
0000019a	movl	0x08(%ebp),%edx
0000019d	testb	$0x01,(%edx)
000001a0	je	0x000001de
000001a2	addl	$0x03,%edi
000001a5	nopl	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
000001b0	movzbl	(%edi),%ecx
000001b3	movzbl	0xff(%edi),%edx
000001b7	shll	$0x08,%edx
000001ba	orl	%ecx,%edx
000001bc	movzbl	0xfe(%edi),%ecx
000001c0	shll	$0x10,%ecx
000001c3	orl	%edx,%ecx
000001c5	movzbl	0xfd(%edi),%edx
000001c9	shll	$0x18,%edx
000001cc	orl	%ecx,%edx
000001ce	movl	%edx,(%esi)
000001d0	addl	$0x04,%edi
000001d3	addl	$0x04,%esi
000001d6	decl	%eax
000001d7	jne	0x000001b0
000001d9	jmp	0x000002a9
000001de	testl	%edi,%edi
000001e0	je	0x000002a9
000001e6	imull	$0x0c,%ecx,%eax
000001e9	jmp	0x00000057
000001ee	cmpl	$0x1c,%ecx
000001f1	jne	0x000002a9
000001f7	movzwl	0x10(%edx),%eax
000001fb	testl	%eax,%eax
000001fd	je	0x000002a9
00000203	testl	%esi,%esi
00000205	je	0x000002a9
0000020b	testl	%edi,%edi
0000020d	cmovel	%esi,%edi
00000210	movl	0x08(%ebp),%ecx
00000213	testb	$0x01,(%ecx)
00000216	je	0x0000024b
00000218	addl	$0x03,%edi
0000021b	addl	%eax,%eax
0000021d	nopl	(%eax)
00000220	movzbl	(%edi),%ecx
00000223	movzbl	0xff(%edi),%edx
00000227	shll	$0x08,%edx
0000022a	orl	%ecx,%edx
0000022c	movzbl	0xfe(%edi),%ecx
00000230	shll	$0x10,%ecx
00000233	orl	%edx,%ecx
00000235	movzbl	0xfd(%edi),%edx
00000239	shll	$0x18,%edx
0000023c	orl	%ecx,%edx
0000023e	movl	%edx,(%esi)
00000240	addl	$0x04,%edi
00000243	addl	$0x04,%esi
00000246	decl	%eax
00000247	jne	0x00000220
00000249	jmp	0x000002a9
0000024b	testl	%edi,%edi
0000024d	je	0x000002a9
0000024f	shll	$0x03,%eax
00000252	jmp	0x00000057
00000257	movzwl	0x10(%edx),%eax
0000025b	testl	%eax,%eax
0000025d	je	0x000002a9
0000025f	testl	%esi,%esi
00000261	je	0x000002a9
00000263	testl	%edi,%edi
00000265	cmovel	%esi,%edi
00000268	movl	0x08(%ebp),%ecx
0000026b	testb	$0x01,(%ecx)
0000026e	je	0x000002b1
00000270	addl	$0x03,%edi
00000273	shll	$0x02,%eax
00000276	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
00000280	movzbl	(%edi),%ecx
00000283	movzbl	0xff(%edi),%edx
00000287	shll	$0x08,%edx
0000028a	orl	%ecx,%edx
0000028c	movzbl	0xfe(%edi),%ecx
00000290	shll	$0x10,%ecx
00000293	orl	%edx,%ecx
00000295	movzbl	0xfd(%edi),%edx
00000299	shll	$0x18,%edx
0000029c	orl	%ecx,%edx
0000029e	movl	%edx,(%esi)
000002a0	addl	$0x04,%edi
000002a3	addl	$0x04,%esi
000002a6	decl	%eax
000002a7	jne	0x00000280
000002a9	addl	$0x1c,%esp
000002ac	popl	%esi
000002ad	popl	%edi
000002ae	popl	%ebx
000002af	popl	%ebp
000002b0	ret
000002b1	testl	%edi,%edi
000002b3	je	0x000002a9
000002b5	shll	$0x04,%eax
000002b8	jmp	0x00000057
000002bd	cmpw	CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*),0x10(%edx)
000002c2	je	0x000002a9
000002c4	movl	0x24(%edx),%eax
000002c7	movl	(%eax),%ecx
000002c9	movl	%ecx,0xf0(%ebp)
000002cc	xorl	%ebx,%ebx
000002ce	nop
000002d0	movl	0xf0(%ebp),%ecx
000002d3	movl	0x08(%ecx),%ecx
000002d6	movl	%eax,0x0c(%esp)
000002da	leal	(%edi,%ecx),%eax
000002dd	movl	%eax,0x08(%esp)
000002e1	addl	%esi,%ecx
000002e3	movl	%ecx,0x04(%esp)
000002e7	movl	0x08(%ebp),%eax
000002ea	movl	%eax,(%esp)
000002ed	calll	CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
000002f2	incl	%ebx
000002f3	movl	0x14(%ebp),%ecx
000002f6	movzwl	0x10(%ecx),%eax
000002fa	cmpl	%eax,%ebx
000002fc	jge	0x000002a9
000002fe	movl	0x28(%ecx),%eax
00000301	addl	%eax,%esi
00000303	addl	%eax,%edi
00000305	movl	0x24(%ecx),%eax
00000308	jmp	0x000002d0
0000030a	nop
0000030c	stosl	%eax,(%edi)
0000030d	addb	%al,(%eax)
0000030f	addb	%bl,0x70000002(%ebx)
00000315	addl	%eax,(%eax)
00000317	addb	%cl,0x02(%ecx)
0000031a	addb	%al,(%eax)
0000031c	adcb	%al,(%ecx)
0000031e	addb	%al,(%eax)
00000320	subb	%al,(%eax)
00000322	addb	%al,(%eax)
00000324	popl	%esi
00000325	addb	%al,(%eax)
00000327	addb	%ch,(%eax)
00000329	addb	%al,(%eax)
0000032b	addb	%bl,0xaf000002(%ebx)
00000331	addb	(%eax),%al
00000333	addb	%ah,0x66(%esi)
00000336	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*):
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%edi
00000345	pushl	%esi
00000346	subl	$0x1c,%esp
00000349	movl	0x14(%ebp),%edi
0000034c	movl	0x0c(%edi),%eax
0000034f	movl	0x10(%ebp),%ebx
00000352	movl	0x0c(%ebp),%esi
00000355	movl	0x08(%ebp),%ecx
00000358	testl	%eax,%eax
0000035a	je	0x00000370
0000035c	movl	%eax,0x0c(%esp)
00000360	movl	%ebx,0x08(%esp)
00000364	movl	%esi,0x04(%esp)
00000368	movl	%ecx,(%esp)
0000036b	calll	CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
00000370	movl	%ebx,%edx
00000372	movl	%esi,%ebx
00000374	movl	0x04(%edi),%esi
00000377	testl	%esi,%esi
00000379	jle	0x000003ac
0000037b	movl	(%edi),%edi
0000037d	nopl	(%eax)
00000380	movl	0x08(%edi),%eax
00000383	movl	%edi,0x0c(%esp)
00000387	leal	(%edx,%eax),%ecx
0000038a	movl	%ecx,0x08(%esp)
0000038e	addl	%ebx,%eax
00000390	movl	%eax,0x04(%esp)
00000394	movl	0x08(%ebp),%eax
00000397	movl	%eax,(%esp)
0000039a	movl	%edx,%ebx
0000039c	calll	CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)
000003a1	movl	%ebx,%edx
000003a3	movl	0x0c(%ebp),%ebx
000003a6	addl	$0x38,%edi
000003a9	decl	%esi
000003aa	jne	0x00000380
000003ac	addl	$0x1c,%esp
000003af	popl	%esi
000003b0	popl	%edi
000003b1	popl	%ebx
000003b2	popl	%ebp
000003b3	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(characterset.o):
(__TEXT,__text) section
CharacterSetBuild(characterset_t*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%esi
0000000b	testl	%esi,%esi
0000000d	je	0x0000004e
0000000f	movl	0x0c(%ebp),%edi
00000012	testl	%edi,%edi
00000014	je	0x0000004e
00000016	movl	%esi,(%esp)
00000019	movl	$0x00000100,0x08(%esp)
00000021	movl	CharacterSetBuild(characterset_t*, char const*),0x04(%esp)
00000029	calll	_memset
0000002e	movb	(%edi),%al
00000030	testb	%al,%al
00000032	je	0x0000004e
00000034	incl	%edi
00000035	nopl	%cs:CharacterSetBuild(characterset_t*, char const*)(%eax,%eax)
00000040	movsbl	%al,%eax
00000043	movb	$0x01,(%esi,%eax)
00000047	movb	(%edi),%al
00000049	incl	%edi
0000004a	testb	%al,%al
0000004c	jne	0x00000040
0000004e	addl	$0x10,%esp
00000051	popl	%esi
00000052	popl	%edi
00000053	popl	%ebp
00000054	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(checksum_crc.o):
(__TEXT,__text) section
CRC32_Init(unsigned int*):
00000000	movl	0x04(%esp),%eax
00000004	movl	$0xffffffff,(%eax)
0000000a	ret
0000000b	nopl	CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_Final(unsigned int*):
00000010	movl	0x04(%esp),%eax
00000014	notl	(%eax)
00000016	ret
00000017	nopw	CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_GetTableEntry(unsigned int):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movzbl	0x04(%esp),%ecx
0000002b	movl	pulCRCTable-0x25(%eax,%ecx,4),%eax
00000032	ret
00000033	nopl	%cs:CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_ProcessBuffer(unsigned int*, void const*, int):
00000040	pushl	%ebp
00000041	pushl	%ebx
00000042	pushl	%edi
00000043	pushl	%esi
00000044	subl	$0x08,%esp
00000047	calll	0x0000004c
0000004c	popl	%ecx
0000004d	movl	0x1c(%esp),%eax
00000051	movl	(%eax),%ebx
00000053	movl	0x24(%esp),%esi
00000057	movl	CRC32_GetTableEntry(unsigned int)(%esp),%edx
0000005b	jmp	0x0000017d
00000060	movl	%edx,%eax
00000062	andl	$0x03,%eax
00000065	subl	%eax,%esi
00000067	cmpl	$0x01,%eax
0000006a	jne	0x00000070
0000006c	movl	%esi,%edi
0000006e	jmp	0x000000aa
00000070	cmpl	$0x02,%eax
00000073	jne	0x00000079
00000075	movl	%esi,%edi
00000077	jmp	0x00000097
00000079	cmpl	$0x03,%eax
0000007c	je	0x00000082
0000007e	movl	%ebx,%eax
00000080	jmp	0x000000c1
00000082	movl	%esi,%edi
00000084	movzbl	(%edx),%esi
00000087	movzbl	%bl,%eax
0000008a	xorl	%esi,%eax
0000008c	shrl	$0x08,%ebx
0000008f	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000096	incl	%edx
00000097	movzbl	(%edx),%esi
0000009a	movzbl	%bl,%eax
0000009d	xorl	%esi,%eax
0000009f	shrl	$0x08,%ebx
000000a2	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000000a9	incl	%edx
000000aa	movzbl	(%edx),%esi
000000ad	movzbl	%bl,%eax
000000b0	xorl	%esi,%eax
000000b2	shrl	$0x08,%ebx
000000b5	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000000bc	incl	%edx
000000bd	movl	%ebx,%eax
000000bf	movl	%edi,%esi
000000c1	movl	%esi,%edi
000000c3	sarl	$0x03,%edi
000000c6	testl	%edi,%edi
000000c8	je	0x00000178
000000ce	leal	0x04(%edx),%ebp
000000d1	movl	%esi,%ebx
000000d3	movl	%esi,0x04(%esp)
000000d7	andl	$0xf8,%ebx
000000da	movl	%ebx,(%esp)
000000dd	movl	%eax,%ebx
000000df	nop
000000e0	xorl	0xfc(%ebp),%ebx
000000e3	movl	%ebx,%eax
000000e5	shrl	$0x08,%eax
000000e8	movzbl	%bl,%esi
000000eb	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
000000f2	movl	%eax,%ebx
000000f4	shrl	$0x08,%ebx
000000f7	movzbl	%al,%eax
000000fa	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000101	movl	%ebx,%eax
00000103	shrl	$0x08,%eax
00000106	movzbl	%bl,%esi
00000109	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
00000110	movzbl	%al,%esi
00000113	movl	CRC32_Init(unsigned int*)(%ebp),%ebx
00000116	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%ebx
0000011d	shrl	$0x08,%eax
00000120	xorl	%ebx,%eax
00000122	movl	%eax,%ebx
00000124	shrl	$0x08,%ebx
00000127	movzbl	%al,%eax
0000012a	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000131	movl	%ebx,%eax
00000133	shrl	$0x08,%eax
00000136	movzbl	%bl,%esi
00000139	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
00000140	movl	%eax,%ebx
00000142	shrl	$0x08,%ebx
00000145	movzbl	%al,%eax
00000148	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
0000014f	movl	%ebx,%eax
00000151	shrl	$0x08,%eax
00000154	movzbl	%bl,%esi
00000157	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
0000015e	addl	$0x08,%ebp
00000161	decl	%edi
00000162	movl	%eax,%ebx
00000164	jne	0x000000e0
0000016a	addl	(%esp),%edx
0000016d	movl	%eax,%ebx
0000016f	movl	0x04(%esp),%esi
00000173	andl	$0x07,%esi
00000176	jmp	0x0000017d
00000178	movl	%eax,%ebx
0000017a	andl	$0x07,%esi
0000017d	cmpl	$0x07,%esi
00000180	ja	0x00000060
00000186	movl	0x00000200(%ecx,%esi,4),%eax
0000018d	addl	%ecx,%eax
0000018f	jmp	*%eax
00000191	movzbl	(%edx),%esi
00000194	movzbl	%bl,%eax
00000197	xorl	%esi,%eax
00000199	shrl	$0x08,%ebx
0000019c	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001a3	incl	%edx
000001a4	movzbl	(%edx),%esi
000001a7	movzbl	%bl,%eax
000001aa	xorl	%esi,%eax
000001ac	shrl	$0x08,%ebx
000001af	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001b6	incl	%edx
000001b7	movzbl	(%edx),%esi
000001ba	movzbl	%bl,%eax
000001bd	xorl	%esi,%eax
000001bf	shrl	$0x08,%ebx
000001c2	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001c9	incl	%edx
000001ca	xorl	(%edx),%ebx
000001cc	movl	%ebx,%eax
000001ce	shrl	$0x08,%eax
000001d1	movzbl	%bl,%edx
000001d4	xorl	pulCRCTable-0x4c(%ecx,%edx,4),%eax
000001db	movl	%eax,%edx
000001dd	shrl	$0x08,%edx
000001e0	movzbl	%al,%eax
000001e3	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%edx
000001ea	movl	%edx,%eax
000001ec	shrl	$0x08,%eax
000001ef	movzbl	%dl,%edx
000001f2	xorl	pulCRCTable-0x4c(%ecx,%edx,4),%eax
000001f9	movl	%eax,%ebx
000001fb	shrl	$0x08,%ebx
000001fe	movzbl	%al,%eax
00000201	jmp	0x00000234
00000203	movzbl	(%edx),%esi
00000206	movzbl	%bl,%eax
00000209	xorl	%esi,%eax
0000020b	shrl	$0x08,%ebx
0000020e	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000215	incl	%edx
00000216	movzbl	(%edx),%esi
00000219	movzbl	%bl,%eax
0000021c	xorl	%esi,%eax
0000021e	shrl	$0x08,%ebx
00000221	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000228	incl	%edx
00000229	movzbl	(%edx),%edx
0000022c	movzbl	%bl,%eax
0000022f	xorl	%edx,%eax
00000231	shrl	$0x08,%ebx
00000234	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
0000023b	movl	0x1c(%esp),%eax
0000023f	movl	%ebx,(%eax)
00000241	addl	$0x08,%esp
00000244	popl	%esi
00000245	popl	%edi
00000246	popl	%ebx
00000247	popl	%ebp
00000248	ret
00000249	nopl	(%eax)
0000024c	outl	%eax,%dx
0000024d	addl	%eax,(%eax)
0000024f	addb	%bl,%ch
00000251	addl	%eax,(%eax)
00000253	addb	%cl,%dl
00000255	addl	%eax,(%eax)
00000257	addb	%dh,0x7e000001(%edi)
0000025d	addl	%eax,(%eax)
0000025f	addb	%ch,0x01(%ebx)
00000262	addb	%al,(%eax)
00000264	popl	%eax
00000265	addl	%eax,(%eax)
00000267	addb	%al,0x01(%ebp)
0000026a	addb	%al,(%eax)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(checksum_md5.o):
(__TEXT,__text) section
MD5Init(MD5Context_t*):
00000000	movl	0x04(%esp),%eax
00000004	movl	$0x67452301,(%eax)
0000000a	movl	$0xefcdab89,0x04(%eax)
00000011	movl	$0x98badcfe,0x08(%eax)
00000018	movl	$0x10325476,0x0c(%eax)
0000001f	movl	MD5Init(MD5Context_t*),0x10(%eax)
00000026	movl	MD5Init(MD5Context_t*),0x14(%eax)
0000002d	ret
0000002e	nop
MD5Update(MD5Context_t*, unsigned char const*, unsigned int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%ebx
00000034	pushl	%edi
00000035	pushl	%esi
00000036	subl	$0x1c,%esp
00000039	movl	0x10(%ebp),%ebx
0000003c	leal	MD5Init(MD5Context_t*)(,%ebx,8),%ecx
00000043	movl	0x08(%ebp),%edi
00000046	movl	0x10(%edi),%eax
00000049	addl	%eax,%ecx
0000004b	movl	%ecx,0x10(%edi)
0000004e	movl	0x14(%edi),%ecx
00000051	jae	0x00000057
00000053	incl	%ecx
00000054	movl	%ecx,0x14(%edi)
00000057	movl	0x0c(%ebp),%esi
0000005a	movl	%ebx,%edx
0000005c	shrl	$0x1d,%edx
0000005f	addl	%ecx,%edx
00000061	movl	%edx,0x14(%edi)
00000064	shrl	$0x03,%eax
00000067	andl	$0x3f,%eax
0000006a	jne	0x00000071
0000006c	leal	0x18(%edi),%edi
0000006f	jmp	0x000000be
00000071	leal	0x18(%edi,%eax),%ecx
00000075	movl	$0x00000040,%edx
0000007a	subl	%eax,%edx
0000007c	cmpl	%ebx,%edx
0000007e	jbe	0x00000098
00000080	movl	%ebx,0x08(%esp)
00000084	movl	%esi,0x04(%esp)
00000088	movl	%ecx,(%esp)
0000008b	calll	_memcpy
00000090	addl	$0x1c,%esp
00000093	popl	%esi
00000094	popl	%edi
00000095	popl	%ebx
00000096	popl	%ebp
00000097	ret
00000098	movl	%edx,0x08(%esp)
0000009c	movl	%esi,0x04(%esp)
000000a0	movl	%ecx,(%esp)
000000a3	movl	%edx,0xf0(%ebp)
000000a6	calll	_memcpy
000000ab	movl	%edi,%ecx
000000ad	leal	0x18(%ecx),%edi
000000b0	movl	%edi,%edx
000000b2	calll	MD5Transform(unsigned int*, unsigned int const*)
000000b7	movl	0xf0(%ebp),%eax
000000ba	subl	%eax,%ebx
000000bc	addl	%eax,%esi
000000be	cmpl	$0x40,%ebx
000000c1	jb	0x00000133
000000c3	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
000000d0	movsd	0x38(%esi),%xmm0
000000d5	movsd	%xmm0,0x38(%edi)
000000da	movsd	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi),%xmm0
000000df	movsd	%xmm0,MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edi)
000000e4	movsd	0x28(%esi),%xmm0
000000e9	movsd	%xmm0,0x28(%edi)
000000ee	movsd	0x20(%esi),%xmm0
000000f3	movsd	%xmm0,0x20(%edi)
000000f8	movsd	0x18(%esi),%xmm0
000000fd	movsd	%xmm0,0x18(%edi)
00000102	movsd	0x10(%esi),%xmm0
00000107	movsd	%xmm0,0x10(%edi)
0000010c	movsd	(%esi),%xmm0
00000110	movsd	0x08(%esi),%xmm1
00000115	movsd	%xmm1,0x08(%edi)
0000011a	movsd	%xmm0,(%edi)
0000011e	movl	0x08(%ebp),%ecx
00000121	movl	%edi,%edx
00000123	calll	MD5Transform(unsigned int*, unsigned int const*)
00000128	addl	$0x40,%esi
0000012b	addl	$0xc0,%ebx
0000012e	cmpl	$0x3f,%ebx
00000131	ja	0x000000d0
00000133	movl	%ebx,0x08(%esp)
00000137	movl	%esi,0x04(%esp)
0000013b	movl	%edi,(%esp)
0000013e	jmp	0x0000008b
00000143	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5Transform(unsigned int*, unsigned int const*):
00000150	pushl	%ebp
00000151	pushl	%ebx
00000152	pushl	%edi
00000153	pushl	%esi
00000154	subl	$0x48,%esp
00000157	movl	%ecx,0x04(%esp)
0000015b	movl	0x08(%ecx),%esi
0000015e	movl	%esi,0x40(%esp)
00000162	movl	0x0c(%ecx),%eax
00000165	movl	%eax,%ebx
00000167	xorl	%esi,%ebx
00000169	movl	(%ecx),%ebp
0000016b	movl	%ebp,(%esp)
0000016e	movl	0x04(%ecx),%esi
00000171	andl	%esi,%ebx
00000173	movl	(%edx),%ecx
00000175	movl	%ecx,0x10(%esp)
00000179	movl	0x04(%edx),%edi
0000017c	movl	%edi,0x44(%esp)
00000180	leal	MD5Init(MD5Context_t*)(%ebp,%ecx),%ebp
00000184	xorl	%eax,%ebx
00000186	leal	0xd76aa478(%ebx,%ebp),%ebx
0000018d	roll	$0x07,%ebx
00000190	addl	%esi,%ebx
00000192	movl	0x40(%esp),%ecx
00000196	movl	%ecx,%ebp
00000198	xorl	%esi,%ebp
0000019a	andl	%ebx,%ebp
0000019c	xorl	%ecx,%ebp
0000019e	movl	%ecx,%edi
000001a0	addl	0x44(%esp),%eax
000001a4	leal	0xe8c7b756(%ebp,%eax),%eax
000001ab	roll	$0x0c,%eax
000001ae	addl	%ebx,%eax
000001b0	movl	%ebx,%ebp
000001b2	xorl	%esi,%ebp
000001b4	andl	%eax,%ebp
000001b6	xorl	%esi,%ebp
000001b8	movl	0x08(%edx),%ecx
000001bb	movl	%ecx,0x18(%esp)
000001bf	addl	%ecx,%edi
000001c1	leal	0x242070db(%ebp,%edi),%edi
000001c8	roll	$0x11,%edi
000001cb	addl	%eax,%edi
000001cd	movl	%eax,%ebp
000001cf	xorl	%ebx,%ebp
000001d1	andl	%edi,%ebp
000001d3	xorl	%ebx,%ebp
000001d5	movl	0x0c(%edx),%ecx
000001d8	movl	%ecx,0x28(%esp)
000001dc	addl	%ecx,%esi
000001de	leal	0xc1bdceee(%ebp,%esi),%esi
000001e5	roll	$0x16,%esi
000001e8	addl	%edi,%esi
000001ea	movl	%edi,%ebp
000001ec	xorl	%eax,%ebp
000001ee	andl	%esi,%ebp
000001f0	xorl	%eax,%ebp
000001f2	movl	0x10(%edx),%ecx
000001f5	movl	%ecx,0x14(%esp)
000001f9	addl	%ecx,%ebx
000001fb	leal	0xf57c0faf(%ebp,%ebx),%ebx
00000202	roll	$0x07,%ebx
00000205	addl	%esi,%ebx
00000207	movl	%esi,%ebp
00000209	xorl	%edi,%ebp
0000020b	andl	%ebx,%ebp
0000020d	xorl	%edi,%ebp
0000020f	movl	0x14(%edx),%ecx
00000212	movl	%ecx,0x3c(%esp)
00000216	addl	%ecx,%eax
00000218	leal	0x4787c62a(%ebp,%eax),%eax
0000021f	roll	$0x0c,%eax
00000222	addl	%ebx,%eax
00000224	movl	%ebx,%ebp
00000226	xorl	%esi,%ebp
00000228	andl	%eax,%ebp
0000022a	xorl	%esi,%ebp
0000022c	movl	0x18(%edx),%ecx
0000022f	movl	%ecx,0x20(%esp)
00000233	addl	%ecx,%edi
00000235	leal	0xa8304613(%ebp,%edi),%edi
0000023c	roll	$0x11,%edi
0000023f	addl	%eax,%edi
00000241	movl	%eax,%ebp
00000243	xorl	%ebx,%ebp
00000245	andl	%edi,%ebp
00000247	xorl	%ebx,%ebp
00000249	movl	0x1c(%edx),%ecx
0000024c	movl	%ecx,0x2c(%esp)
00000250	addl	%ecx,%esi
00000252	leal	0xfd469501(%ebp,%esi),%esi
00000259	roll	$0x16,%esi
0000025c	addl	%edi,%esi
0000025e	movl	%edi,%ebp
00000260	xorl	%eax,%ebp
00000262	andl	%esi,%ebp
00000264	xorl	%eax,%ebp
00000266	movl	0x20(%edx),%ecx
00000269	movl	%ecx,0x08(%esp)
0000026d	addl	%ecx,%ebx
0000026f	leal	0x698098d8(%ebp,%ebx),%ebx
00000276	roll	$0x07,%ebx
00000279	addl	%esi,%ebx
0000027b	movl	%esi,%ebp
0000027d	xorl	%edi,%ebp
0000027f	andl	%ebx,%ebp
00000281	xorl	%edi,%ebp
00000283	movl	0x24(%edx),%ecx
00000286	movl	%ecx,0x40(%esp)
0000028a	addl	%ecx,%eax
0000028c	leal	0x8b44f7af(%ebp,%eax),%eax
00000293	roll	$0x0c,%eax
00000296	addl	%ebx,%eax
00000298	movl	%ebx,%ebp
0000029a	xorl	%esi,%ebp
0000029c	andl	%eax,%ebp
0000029e	xorl	%esi,%ebp
000002a0	movl	0x28(%edx),%ecx
000002a3	movl	%ecx,0x34(%esp)
000002a7	addl	%ecx,%edi
000002a9	leal	0xffff5bb1(%ebp,%edi),%edi
000002b0	roll	$0x11,%edi
000002b3	addl	%eax,%edi
000002b5	movl	%eax,%ebp
000002b7	xorl	%ebx,%ebp
000002b9	andl	%edi,%ebp
000002bb	xorl	%ebx,%ebp
000002bd	movl	0x2c(%edx),%ecx
000002c0	movl	%ecx,MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp)
000002c4	addl	%ecx,%esi
000002c6	leal	0x895cd7be(%ebp,%esi),%esi
000002cd	roll	$0x16,%esi
000002d0	addl	%edi,%esi
000002d2	movl	%edi,%ebp
000002d4	xorl	%eax,%ebp
000002d6	andl	%esi,%ebp
000002d8	xorl	%eax,%ebp
000002da	movl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edx),%ecx
000002dd	movl	%ecx,0x24(%esp)
000002e1	addl	%ecx,%ebx
000002e3	leal	0x6b901122(%ebp,%ebx),%ebx
000002ea	roll	$0x07,%ebx
000002ed	addl	%esi,%ebx
000002ef	movl	%esi,%ebp
000002f1	xorl	%edi,%ebp
000002f3	andl	%ebx,%ebp
000002f5	xorl	%edi,%ebp
000002f7	movl	0x34(%edx),%ecx
000002fa	movl	%ecx,0x38(%esp)
000002fe	addl	%ecx,%eax
00000300	leal	0xfd987193(%ebp,%eax),%ebp
00000307	roll	$0x0c,%ebp
0000030a	addl	%ebx,%ebp
0000030c	movl	%ebx,%eax
0000030e	xorl	%esi,%eax
00000310	andl	%ebp,%eax
00000312	xorl	%esi,%eax
00000314	movl	0x38(%edx),%ecx
00000317	movl	%ecx,0x1c(%esp)
0000031b	addl	%ecx,%edi
0000031d	leal	0xa679438e(%eax,%edi),%edi
00000324	roll	$0x11,%edi
00000327	addl	%ebp,%edi
00000329	movl	%ebp,%eax
0000032b	xorl	%ebx,%eax
0000032d	andl	%edi,%eax
0000032f	xorl	%ebx,%eax
00000331	movl	0x3c(%edx),%ecx
00000334	movl	%ecx,0x0c(%esp)
00000338	addl	%ecx,%esi
0000033a	leal	0x49b40821(%eax,%esi),%esi
00000341	roll	$0x16,%esi
00000344	addl	%edi,%esi
00000346	movl	%esi,%eax
00000348	xorl	%edi,%eax
0000034a	andl	%ebp,%eax
0000034c	xorl	%edi,%eax
0000034e	addl	0x44(%esp),%ebx
00000352	leal	0xf61e2562(%eax,%ebx),%edx
00000359	roll	$0x05,%edx
0000035c	addl	%esi,%edx
0000035e	movl	%edx,%eax
00000360	xorl	%esi,%eax
00000362	andl	%edi,%eax
00000364	xorl	%esi,%eax
00000366	addl	0x20(%esp),%ebp
0000036a	leal	0xc040b340(%eax,%ebp),%ebx
00000371	roll	$0x09,%ebx
00000374	addl	%edx,%ebx
00000376	movl	%ebx,%eax
00000378	xorl	%edx,%eax
0000037a	andl	%esi,%eax
0000037c	xorl	%edx,%eax
0000037e	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%edi
00000382	leal	0x265e5a51(%eax,%edi),%edi
00000389	roll	$0x0e,%edi
0000038c	addl	%ebx,%edi
0000038e	movl	%edi,%eax
00000390	xorl	%ebx,%eax
00000392	andl	%edx,%eax
00000394	xorl	%ebx,%eax
00000396	addl	0x10(%esp),%esi
0000039a	leal	0xe9b6c7aa(%eax,%esi),%esi
000003a1	roll	$0x14,%esi
000003a4	addl	%edi,%esi
000003a6	movl	%esi,%eax
000003a8	xorl	%edi,%eax
000003aa	andl	%ebx,%eax
000003ac	xorl	%edi,%eax
000003ae	addl	0x3c(%esp),%edx
000003b2	leal	0xd62f105d(%eax,%edx),%ebp
000003b9	roll	$0x05,%ebp
000003bc	addl	%esi,%ebp
000003be	movl	%ebp,%eax
000003c0	xorl	%esi,%eax
000003c2	andl	%edi,%eax
000003c4	xorl	%esi,%eax
000003c6	addl	0x34(%esp),%ebx
000003ca	leal	0x02441453(%eax,%ebx),%ebx
000003d1	roll	$0x09,%ebx
000003d4	addl	%ebp,%ebx
000003d6	movl	%ebx,%eax
000003d8	xorl	%ebp,%eax
000003da	andl	%esi,%eax
000003dc	xorl	%ebp,%eax
000003de	addl	%ecx,%edi
000003e0	leal	0xd8a1e681(%eax,%edi),%edi
000003e7	roll	$0x0e,%edi
000003ea	addl	%ebx,%edi
000003ec	movl	%edi,%eax
000003ee	xorl	%ebx,%eax
000003f0	andl	%ebp,%eax
000003f2	xorl	%ebx,%eax
000003f4	addl	0x14(%esp),%esi
000003f8	leal	0xe7d3fbc8(%eax,%esi),%esi
000003ff	roll	$0x14,%esi
00000402	addl	%edi,%esi
00000404	movl	%esi,%eax
00000406	xorl	%edi,%eax
00000408	andl	%ebx,%eax
0000040a	xorl	%edi,%eax
0000040c	addl	0x40(%esp),%ebp
00000410	leal	0x21e1cde6(%eax,%ebp),%ebp
00000417	roll	$0x05,%ebp
0000041a	addl	%esi,%ebp
0000041c	movl	%ebp,%eax
0000041e	xorl	%esi,%eax
00000420	andl	%edi,%eax
00000422	xorl	%esi,%eax
00000424	addl	0x1c(%esp),%ebx
00000428	leal	0xc33707d6(%eax,%ebx),%ebx
0000042f	roll	$0x09,%ebx
00000432	addl	%ebp,%ebx
00000434	movl	%ebx,%eax
00000436	xorl	%ebp,%eax
00000438	andl	%esi,%eax
0000043a	xorl	%ebp,%eax
0000043c	addl	0x28(%esp),%edi
00000440	leal	0xf4d50d87(%eax,%edi),%edi
00000447	roll	$0x0e,%edi
0000044a	addl	%ebx,%edi
0000044c	movl	%edi,%eax
0000044e	xorl	%ebx,%eax
00000450	andl	%ebp,%eax
00000452	xorl	%ebx,%eax
00000454	movl	0x08(%esp),%ecx
00000458	addl	%ecx,%esi
0000045a	leal	0x455a14ed(%eax,%esi),%esi
00000461	roll	$0x14,%esi
00000464	addl	%edi,%esi
00000466	movl	%esi,%eax
00000468	xorl	%edi,%eax
0000046a	andl	%ebx,%eax
0000046c	xorl	%edi,%eax
0000046e	addl	0x38(%esp),%ebp
00000472	leal	0xa9e3e905(%eax,%ebp),%edx
00000479	roll	$0x05,%edx
0000047c	addl	%esi,%edx
0000047e	movl	%edx,%eax
00000480	xorl	%esi,%eax
00000482	andl	%edi,%eax
00000484	xorl	%esi,%eax
00000486	addl	0x18(%esp),%ebx
0000048a	leal	0xfcefa3f8(%eax,%ebx),%ebx
00000491	roll	$0x09,%ebx
00000494	addl	%edx,%ebx
00000496	movl	%ebx,%eax
00000498	xorl	%edx,%eax
0000049a	andl	%esi,%eax
0000049c	xorl	%edx,%eax
0000049e	addl	0x2c(%esp),%edi
000004a2	leal	0x676f02d9(%eax,%edi),%ebp
000004a9	roll	$0x0e,%ebp
000004ac	addl	%ebx,%ebp
000004ae	movl	%ebp,%edi
000004b0	xorl	%ebx,%edi
000004b2	movl	%edi,%eax
000004b4	andl	%edx,%eax
000004b6	xorl	%ebx,%eax
000004b8	addl	0x24(%esp),%esi
000004bc	leal	0x8d2a4c8a(%eax,%esi),%eax
000004c3	roll	$0x14,%eax
000004c6	addl	%ebp,%eax
000004c8	xorl	%eax,%edi
000004ca	addl	0x3c(%esp),%edx
000004ce	leal	0xfffa3942(%edi,%edx),%edi
000004d5	roll	$0x04,%edi
000004d8	addl	%eax,%edi
000004da	movl	%eax,%edx
000004dc	xorl	%ebp,%edx
000004de	xorl	%edi,%edx
000004e0	addl	%ecx,%ebx
000004e2	leal	0x8771f681(%edx,%ebx),%esi
000004e9	roll	$0x0b,%esi
000004ec	addl	%edi,%esi
000004ee	movl	%edi,%edx
000004f0	xorl	%eax,%edx
000004f2	xorl	%esi,%edx
000004f4	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%ebp
000004f8	leal	0x6d9d6122(%edx,%ebp),%edx
000004ff	roll	$0x10,%edx
00000502	addl	%esi,%edx
00000504	movl	%esi,%ebx
00000506	xorl	%edi,%ebx
00000508	xorl	%edx,%ebx
0000050a	addl	0x1c(%esp),%eax
0000050e	leal	0xfde5380c(%ebx,%eax),%ebx
00000515	roll	$0x17,%ebx
00000518	addl	%edx,%ebx
0000051a	movl	%edx,%eax
0000051c	xorl	%esi,%eax
0000051e	xorl	%ebx,%eax
00000520	addl	0x44(%esp),%edi
00000524	leal	0xa4beea44(%eax,%edi),%edi
0000052b	roll	$0x04,%edi
0000052e	addl	%ebx,%edi
00000530	movl	%ebx,%eax
00000532	xorl	%edx,%eax
00000534	xorl	%edi,%eax
00000536	addl	0x14(%esp),%esi
0000053a	leal	0x4bdecfa9(%eax,%esi),%esi
00000541	roll	$0x0b,%esi
00000544	addl	%edi,%esi
00000546	movl	%edi,%eax
00000548	xorl	%ebx,%eax
0000054a	xorl	%esi,%eax
0000054c	addl	0x2c(%esp),%edx
00000550	leal	0xf6bb4b60(%eax,%edx),%edx
00000557	roll	$0x10,%edx
0000055a	addl	%esi,%edx
0000055c	movl	%esi,%eax
0000055e	xorl	%edi,%eax
00000560	xorl	%edx,%eax
00000562	addl	0x34(%esp),%ebx
00000566	leal	0xbebfbc70(%eax,%ebx),%ebx
0000056d	roll	$0x17,%ebx
00000570	addl	%edx,%ebx
00000572	movl	%edx,%eax
00000574	xorl	%esi,%eax
00000576	xorl	%ebx,%eax
00000578	addl	0x38(%esp),%edi
0000057c	leal	0x289b7ec6(%eax,%edi),%edi
00000583	roll	$0x04,%edi
00000586	addl	%ebx,%edi
00000588	movl	%ebx,%eax
0000058a	xorl	%edx,%eax
0000058c	xorl	%edi,%eax
0000058e	movl	0x10(%esp),%ecx
00000592	addl	%ecx,%esi
00000594	leal	0xeaa127fa(%eax,%esi),%esi
0000059b	roll	$0x0b,%esi
0000059e	addl	%edi,%esi
000005a0	movl	%edi,%eax
000005a2	xorl	%ebx,%eax
000005a4	xorl	%esi,%eax
000005a6	addl	0x28(%esp),%edx
000005aa	leal	0xd4ef3085(%eax,%edx),%edx
000005b1	roll	$0x10,%edx
000005b4	addl	%esi,%edx
000005b6	movl	%esi,%eax
000005b8	xorl	%edi,%eax
000005ba	xorl	%edx,%eax
000005bc	addl	0x20(%esp),%ebx
000005c0	leal	0x04881d05(%eax,%ebx),%ebx
000005c7	roll	$0x17,%ebx
000005ca	addl	%edx,%ebx
000005cc	movl	%edx,%eax
000005ce	xorl	%esi,%eax
000005d0	xorl	%ebx,%eax
000005d2	addl	0x40(%esp),%edi
000005d6	leal	0xd9d4d039(%eax,%edi),%edi
000005dd	roll	$0x04,%edi
000005e0	addl	%ebx,%edi
000005e2	movl	%ebx,%eax
000005e4	xorl	%edx,%eax
000005e6	xorl	%edi,%eax
000005e8	addl	0x24(%esp),%esi
000005ec	leal	0xe6db99e5(%eax,%esi),%esi
000005f3	roll	$0x0b,%esi
000005f6	addl	%edi,%esi
000005f8	movl	%edi,%eax
000005fa	xorl	%ebx,%eax
000005fc	xorl	%esi,%eax
000005fe	addl	0x0c(%esp),%edx
00000602	leal	0x1fa27cf8(%eax,%edx),%edx
00000609	roll	$0x10,%edx
0000060c	addl	%esi,%edx
0000060e	movl	%esi,%eax
00000610	xorl	%edi,%eax
00000612	xorl	%edx,%eax
00000614	addl	0x18(%esp),%ebx
00000618	leal	0xc4ac5665(%eax,%ebx),%ebp
0000061f	roll	$0x17,%ebp
00000622	addl	%edx,%ebp
00000624	movl	%esi,%eax
00000626	notl	%eax
00000628	orl	%ebp,%eax
0000062a	xorl	%edx,%eax
0000062c	addl	%ecx,%edi
0000062e	leal	0xf4292244(%eax,%edi),%edi
00000635	roll	$0x06,%edi
00000638	addl	%ebp,%edi
0000063a	movl	%edx,%eax
0000063c	notl	%eax
0000063e	orl	%edi,%eax
00000640	xorl	%ebp,%eax
00000642	addl	0x2c(%esp),%esi
00000646	leal	0x432aff97(%eax,%esi),%esi
0000064d	roll	$0x0a,%esi
00000650	addl	%edi,%esi
00000652	movl	%ebp,%eax
00000654	notl	%eax
00000656	orl	%esi,%eax
00000658	xorl	%edi,%eax
0000065a	addl	0x1c(%esp),%edx
0000065e	leal	0xab9423a7(%eax,%edx),%ebx
00000665	roll	$0x0f,%ebx
00000668	addl	%esi,%ebx
0000066a	movl	%edi,%eax
0000066c	notl	%eax
0000066e	orl	%ebx,%eax
00000670	xorl	%esi,%eax
00000672	addl	0x3c(%esp),%ebp
00000676	leal	0xfc93a039(%eax,%ebp),%eax
0000067d	roll	$0x15,%eax
00000680	addl	%ebx,%eax
00000682	movl	%esi,%edx
00000684	notl	%edx
00000686	orl	%eax,%edx
00000688	xorl	%ebx,%edx
0000068a	addl	0x24(%esp),%edi
0000068e	leal	0x655b59c3(%edx,%edi),%edi
00000695	roll	$0x06,%edi
00000698	addl	%eax,%edi
0000069a	movl	%ebx,%edx
0000069c	notl	%edx
0000069e	orl	%edi,%edx
000006a0	xorl	%eax,%edx
000006a2	addl	0x28(%esp),%esi
000006a6	leal	0x8f0ccc92(%edx,%esi),%esi
000006ad	roll	$0x0a,%esi
000006b0	addl	%edi,%esi
000006b2	movl	%eax,%edx
000006b4	notl	%edx
000006b6	orl	%esi,%edx
000006b8	xorl	%edi,%edx
000006ba	addl	0x34(%esp),%ebx
000006be	leal	0xffeff47d(%edx,%ebx),%ebx
000006c5	roll	$0x0f,%ebx
000006c8	addl	%esi,%ebx
000006ca	movl	%edi,%edx
000006cc	notl	%edx
000006ce	orl	%ebx,%edx
000006d0	xorl	%esi,%edx
000006d2	addl	0x44(%esp),%eax
000006d6	leal	0x85845dd1(%edx,%eax),%eax
000006dd	roll	$0x15,%eax
000006e0	addl	%ebx,%eax
000006e2	movl	%esi,%edx
000006e4	notl	%edx
000006e6	orl	%eax,%edx
000006e8	xorl	%ebx,%edx
000006ea	addl	0x08(%esp),%edi
000006ee	leal	0x6fa87e4f(%edx,%edi),%edi
000006f5	roll	$0x06,%edi
000006f8	addl	%eax,%edi
000006fa	movl	%ebx,%edx
000006fc	notl	%edx
000006fe	orl	%edi,%edx
00000700	xorl	%eax,%edx
00000702	addl	0x0c(%esp),%esi
00000706	leal	0xfe2ce6e0(%edx,%esi),%esi
0000070d	roll	$0x0a,%esi
00000710	addl	%edi,%esi
00000712	movl	%eax,%edx
00000714	notl	%edx
00000716	orl	%esi,%edx
00000718	xorl	%edi,%edx
0000071a	addl	0x20(%esp),%ebx
0000071e	leal	0xa3014314(%edx,%ebx),%edx
00000725	roll	$0x0f,%edx
00000728	addl	%esi,%edx
0000072a	movl	%edi,%ebx
0000072c	notl	%ebx
0000072e	orl	%edx,%ebx
00000730	xorl	%esi,%ebx
00000732	addl	0x38(%esp),%eax
00000736	leal	0x4e0811a1(%ebx,%eax),%eax
0000073d	roll	$0x15,%eax
00000740	addl	%edx,%eax
00000742	movl	%esi,%ebx
00000744	notl	%ebx
00000746	orl	%eax,%ebx
00000748	xorl	%edx,%ebx
0000074a	addl	0x14(%esp),%edi
0000074e	leal	0xf7537e82(%ebx,%edi),%edi
00000755	roll	$0x06,%edi
00000758	addl	%eax,%edi
0000075a	movl	%edx,%ebx
0000075c	notl	%ebx
0000075e	orl	%edi,%ebx
00000760	xorl	%eax,%ebx
00000762	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%esi
00000766	leal	0xbd3af235(%ebx,%esi),%esi
0000076d	roll	$0x0a,%esi
00000770	addl	%edi,%esi
00000772	movl	%eax,%ebx
00000774	notl	%ebx
00000776	orl	%esi,%ebx
00000778	xorl	%edi,%ebx
0000077a	movl	(%esp),%ebp
0000077d	addl	%edi,%ebp
0000077f	movl	0x04(%esp),%ecx
00000783	movl	%ebp,(%ecx)
00000785	addl	0x18(%esp),%edx
00000789	leal	0x2ad7d2bb(%ebx,%edx),%edx
00000790	roll	$0x0f,%edx
00000793	addl	%esi,%edx
00000795	notl	%edi
00000797	orl	%edx,%edi
00000799	movl	0x04(%ecx),%ebx
0000079c	addl	%edx,%ebx
0000079e	xorl	%esi,%edi
000007a0	addl	0x40(%esp),%eax
000007a4	leal	0xeb86d391(%edi,%eax),%eax
000007ab	roll	$0x15,%eax
000007ae	addl	%ebx,%eax
000007b0	movl	%eax,0x04(%ecx)
000007b3	addl	%edx,0x08(%ecx)
000007b6	addl	%esi,0x0c(%ecx)
000007b9	addl	$0x48,%esp
000007bc	popl	%esi
000007bd	popl	%edi
000007be	popl	%ebx
000007bf	popl	%ebp
000007c0	ret
000007c1	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5Final(unsigned char*, MD5Context_t*):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x0c,%esp
000007d9	movl	0x0c(%ebp),%esi
000007dc	movl	0x10(%esi),%edx
000007df	shrl	$0x03,%edx
000007e2	andl	$0x3f,%edx
000007e5	movb	$0x80,0x18(%esi,%edx)
000007ea	leal	0x19(%esi,%edx),%eax
000007ee	movl	$0x0000003f,%ecx
000007f3	subl	%edx,%ecx
000007f5	leal	0x18(%esi),%edi
000007f8	movl	0x08(%ebp),%ebx
000007fb	cmpl	$0x07,%ecx
000007fe	ja	0x00000884
00000804	movl	%ecx,0x08(%esp)
00000808	movl	%eax,(%esp)
0000080b	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000813	calll	_memset
00000818	movl	%esi,%ecx
0000081a	movl	%edi,%edx
0000081c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000821	movl	MD5Init(MD5Context_t*),0x04(%edi)
00000828	movl	MD5Init(MD5Context_t*),(%edi)
0000082e	movl	MD5Init(MD5Context_t*),0x0c(%edi)
00000835	movl	MD5Init(MD5Context_t*),0x08(%edi)
0000083c	movl	MD5Init(MD5Context_t*),0x14(%edi)
00000843	movl	MD5Init(MD5Context_t*),0x10(%edi)
0000084a	movl	MD5Init(MD5Context_t*),0x1c(%edi)
00000851	movl	MD5Init(MD5Context_t*),0x18(%edi)
00000858	movl	MD5Init(MD5Context_t*),0x24(%edi)
0000085f	movl	MD5Init(MD5Context_t*),0x20(%edi)
00000866	movl	MD5Init(MD5Context_t*),0x2c(%edi)
0000086d	movl	MD5Init(MD5Context_t*),0x28(%edi)
00000874	movl	MD5Init(MD5Context_t*),0x34(%edi)
0000087b	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edi)
00000882	jmp	0x0000089b
00000884	addl	$0xf8,%ecx
00000887	movl	%ecx,0x08(%esp)
0000088b	movl	%eax,(%esp)
0000088e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000896	calll	_memset
0000089b	movl	%esi,%ecx
0000089d	movl	0x10(%esi),%eax
000008a0	movl	%eax,0x50(%esi)
000008a3	movl	0x14(%esi),%eax
000008a6	movl	%eax,0x54(%esi)
000008a9	movl	%edi,%edx
000008ab	calll	MD5Transform(unsigned int*, unsigned int const*)
000008b0	movsd	(%esi),%xmm0
000008b4	movsd	0x08(%esi),%xmm1
000008b9	movsd	%xmm1,0x08(%ebx)
000008be	movsd	%xmm0,(%ebx)
000008c2	movl	MD5Init(MD5Context_t*),0x04(%esi)
000008c9	movl	MD5Init(MD5Context_t*),(%esi)
000008cf	movl	MD5Init(MD5Context_t*),0x0c(%esi)
000008d6	movl	MD5Init(MD5Context_t*),0x08(%esi)
000008dd	movl	MD5Init(MD5Context_t*),0x14(%esi)
000008e4	movl	MD5Init(MD5Context_t*),0x10(%esi)
000008eb	movl	MD5Init(MD5Context_t*),0x1c(%esi)
000008f2	movl	MD5Init(MD5Context_t*),0x18(%esi)
000008f9	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000900	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000907	movl	MD5Init(MD5Context_t*),0x2c(%esi)
0000090e	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000915	movl	MD5Init(MD5Context_t*),0x34(%esi)
0000091c	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000923	movl	MD5Init(MD5Context_t*),0x3c(%esi)
0000092a	movl	MD5Init(MD5Context_t*),0x38(%esi)
00000931	movl	MD5Init(MD5Context_t*),0x44(%esi)
00000938	movl	MD5Init(MD5Context_t*),0x40(%esi)
0000093f	movl	MD5Init(MD5Context_t*),0x4c(%esi)
00000946	movl	MD5Init(MD5Context_t*),0x48(%esi)
0000094d	movl	MD5Init(MD5Context_t*),0x54(%esi)
00000954	movl	MD5Init(MD5Context_t*),0x50(%esi)
0000095b	addl	$0x0c,%esp
0000095e	popl	%esi
0000095f	popl	%edi
00000960	popl	%ebx
00000961	popl	%ebp
00000962	ret
00000963	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5_Print(unsigned char*, int):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%esi
00000974	subl	$0x14,%esp
00000977	calll	0x0000097c
0000097c	popl	%eax
0000097d	leal	MD5_Print(unsigned char*, int)::szReturn-0x97c(%eax),%esi
00000983	movl	%esi,0x08(%esp)
00000987	movl	0x0c(%ebp),%eax
0000098a	movl	%eax,0x04(%esp)
0000098e	movl	0x08(%ebp),%eax
00000991	movl	%eax,(%esp)
00000994	movl	$0x00000040,0x0c(%esp)
0000099c	calll	V_binarytohex(unsigned char const*, int, char*, int)
000009a1	movl	%esi,%eax
000009a3	addl	$0x14,%esp
000009a6	popl	%esi
000009a7	popl	%ebp
000009a8	ret
000009a9	nopl	MD5Init(MD5Context_t*)(%eax)
MD5_PseudoRandom(unsigned int):
000009b0	pushl	%ebp
000009b1	movl	%esp,%ebp
000009b3	pushl	%esi
000009b4	subl	$0x74,%esp
000009b7	movl	0x08(%ebp),%eax
000009ba	movl	%eax,0xf8(%ebp)
000009bd	xorps	%xmm0,%xmm0
000009c0	movaps	%xmm0,0xd8(%ebp)
000009c4	movaps	%xmm0,0xc8(%ebp)
000009c8	movaps	%xmm0,0xb8(%ebp)
000009cc	movaps	%xmm0,0xa8(%ebp)
000009d0	movaps	%xmm0,0x98(%ebp)
000009d4	movl	MD5Init(MD5Context_t*),0xec(%ebp)
000009db	movl	MD5Init(MD5Context_t*),0xe8(%ebp)
000009e2	movl	$0x67452301,0x98(%ebp)
000009e9	movl	$0xefcdab89,0x9c(%ebp)
000009f0	movl	$0x98badcfe,0xa0(%ebp)
000009f7	movl	$0x10325476,0xa4(%ebp)
000009fe	movl	$0x00000020,0xa8(%ebp)
00000a05	movl	MD5Init(MD5Context_t*),0xac(%ebp)
00000a0c	movl	0xf8(%ebp),%eax
00000a0f	movl	%eax,0xb0(%ebp)
00000a12	movl	0xa8(%ebp),%ecx
00000a15	shrl	$0x03,%ecx
00000a18	andl	$0x3f,%ecx
00000a1b	movb	$0x80,0xb0(%ebp,%ecx)
00000a20	movl	$0x0000003f,%eax
00000a25	subl	%ecx,%eax
00000a27	leal	0xb1(%ebp,%ecx),%ecx
00000a2b	leal	0xb0(%ebp),%esi
00000a2e	cmpl	$0x07,%eax
00000a31	ja	0x00000ab8
00000a37	movl	%eax,0x08(%esp)
00000a3b	movl	%ecx,(%esp)
00000a3e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000a46	calll	_memset
00000a4b	leal	0x98(%ebp),%ecx
00000a4e	movl	%esi,%edx
00000a50	calll	MD5Transform(unsigned int*, unsigned int const*)
00000a55	movl	MD5Init(MD5Context_t*),0x04(%esi)
00000a5c	movl	MD5Init(MD5Context_t*),(%esi)
00000a62	movl	MD5Init(MD5Context_t*),0x0c(%esi)
00000a69	movl	MD5Init(MD5Context_t*),0x08(%esi)
00000a70	movl	MD5Init(MD5Context_t*),0x14(%esi)
00000a77	movl	MD5Init(MD5Context_t*),0x10(%esi)
00000a7e	movl	MD5Init(MD5Context_t*),0x1c(%esi)
00000a85	movl	MD5Init(MD5Context_t*),0x18(%esi)
00000a8c	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000a93	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000a9a	movl	MD5Init(MD5Context_t*),0x2c(%esi)
00000aa1	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000aa8	movl	MD5Init(MD5Context_t*),0x34(%esi)
00000aaf	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000ab6	jmp	0x00000acf
00000ab8	addl	$0xf8,%eax
00000abb	movl	%eax,0x08(%esp)
00000abf	movl	%ecx,(%esp)
00000ac2	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000aca	calll	_memset
00000acf	movl	0xa8(%ebp),%eax
00000ad2	movl	%eax,0xe8(%ebp)
00000ad5	movl	0xac(%ebp),%eax
00000ad8	movl	%eax,0xec(%ebp)
00000adb	leal	0x98(%ebp),%ecx
00000ade	movl	%esi,%edx
00000ae0	calll	MD5Transform(unsigned int*, unsigned int const*)
00000ae5	movl	0xa0(%ebp),%ecx
00000ae8	shll	$0x10,%ecx
00000aeb	movzwl	0x9e(%ebp),%eax
00000aef	orl	%ecx,%eax
00000af1	addl	$0x74,%esp
00000af4	popl	%esi
00000af5	popl	%ebp
00000af6	ret
00000af7	nopw	MD5Init(MD5Context_t*)(%eax,%eax)
MD5_Compare(MD5Value_t const&, MD5Value_t const&):
00000b00	pushl	%ebp
00000b01	movl	%esp,%ebp
00000b03	subl	$0x18,%esp
00000b06	movl	0x0c(%ebp),%eax
00000b09	movl	%eax,0x04(%esp)
00000b0d	movl	0x08(%ebp),%eax
00000b10	movl	%eax,(%esp)
00000b13	movl	$0x00000010,0x08(%esp)
00000b1b	calll	_memcmp
00000b20	testl	%eax,%eax
00000b22	sete	%al
00000b25	movzbl	%al,%eax
00000b28	addl	$0x18,%esp
00000b2b	popl	%ebp
00000b2c	ret
00000b2d	nopl	(%eax)
MD5Value_t::Zero():
00000b30	movl	0x04(%esp),%eax
00000b34	movl	MD5Init(MD5Context_t*),0x04(%eax)
00000b3b	movl	MD5Init(MD5Context_t*),(%eax)
00000b41	movl	MD5Init(MD5Context_t*),0x0c(%eax)
00000b48	movl	MD5Init(MD5Context_t*),0x08(%eax)
00000b4f	ret
MD5Value_t::IsZero() const:
00000b50	xorl	%eax,%eax
00000b52	movl	0x04(%esp),%ecx
00000b56	jmp	0x00000b61
00000b58	nopl	MD5Init(MD5Context_t*)(%eax,%eax)
00000b60	incl	%eax
00000b61	movb	$0x01,%dl
00000b63	cmpl	$0x0f,%eax
00000b66	ja	0x00000b70
00000b68	xorb	%dl,%dl
00000b6a	cmpb	MD5Init(MD5Context_t*),(%ecx,%eax)
00000b6e	je	0x00000b60
00000b70	movzbl	%dl,%eax
00000b73	ret
00000b74	nopw	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5_ProcessSingleBuffer(void const*, int, MD5Value_t&):
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%edi
00000b84	pushl	%esi
00000b85	subl	$0x70,%esp
00000b88	movl	$0x67452301,0xa0(%ebp)
00000b8f	movl	$0xefcdab89,0xa4(%ebp)
00000b96	movl	$0x98badcfe,0xa8(%ebp)
00000b9d	movl	$0x10325476,0xac(%ebp)
00000ba4	movl	MD5Init(MD5Context_t*),0xb0(%ebp)
00000bab	movl	MD5Init(MD5Context_t*),0xb4(%ebp)
00000bb2	movl	0x0c(%ebp),%eax
00000bb5	movl	%eax,0x08(%esp)
00000bb9	movl	0x08(%ebp),%eax
00000bbc	movl	%eax,0x04(%esp)
00000bc0	leal	0xa0(%ebp),%eax
00000bc3	movl	%eax,(%esp)
00000bc6	calll	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
00000bcb	movl	0xb0(%ebp),%ecx
00000bce	shrl	$0x03,%ecx
00000bd1	andl	$0x3f,%ecx
00000bd4	movb	$0x80,0xb8(%ebp,%ecx)
00000bd9	movl	$0x0000003f,%eax
00000bde	subl	%ecx,%eax
00000be0	leal	0xb9(%ebp,%ecx),%ecx
00000be4	leal	0xb8(%ebp),%esi
00000be7	movl	0x10(%ebp),%edi
00000bea	cmpl	$0x07,%eax
00000bed	ja	0x00000c74
00000bf3	movl	%eax,0x08(%esp)
00000bf7	movl	%ecx,(%esp)
00000bfa	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000c02	calll	_memset
00000c07	leal	0xa0(%ebp),%ecx
00000c0a	movl	%esi,%edx
00000c0c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000c11	movl	MD5Init(MD5Context_t*),0x04(%esi)
00000c18	movl	MD5Init(MD5Context_t*),(%esi)
00000c1e	movl	MD5Init(MD5Context_t*),0x0c(%esi)
00000c25	movl	MD5Init(MD5Context_t*),0x08(%esi)
00000c2c	movl	MD5Init(MD5Context_t*),0x14(%esi)
00000c33	movl	MD5Init(MD5Context_t*),0x10(%esi)
00000c3a	movl	MD5Init(MD5Context_t*),0x1c(%esi)
00000c41	movl	MD5Init(MD5Context_t*),0x18(%esi)
00000c48	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000c4f	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000c56	movl	MD5Init(MD5Context_t*),0x2c(%esi)
00000c5d	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000c64	movl	MD5Init(MD5Context_t*),0x34(%esi)
00000c6b	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000c72	jmp	0x00000c8b
00000c74	addl	$0xf8,%eax
00000c77	movl	%eax,0x08(%esp)
00000c7b	movl	%ecx,(%esp)
00000c7e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000c86	calll	_memset
00000c8b	movl	0xb0(%ebp),%eax
00000c8e	movl	%eax,0xf0(%ebp)
00000c91	movl	0xb4(%ebp),%eax
00000c94	movl	%eax,0xf4(%ebp)
00000c97	leal	0xa0(%ebp),%ecx
00000c9a	movl	%esi,%edx
00000c9c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000ca1	movsd	0xa0(%ebp),%xmm0
00000ca6	movsd	0xa8(%ebp),%xmm1
00000cab	movsd	%xmm1,0x08(%edi)
00000cb0	movsd	%xmm0,(%edi)
00000cb4	addl	$0x70,%esp
00000cb7	popl	%esi
00000cb8	popl	%edi
00000cb9	popl	%ebp
00000cba	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(checksum_sha1.o):
(__TEXT,__text) section
CSHA1::CSHA1():
00000000	calll	0x00000005
00000005	popl	%eax
00000006	leal	vtable for CSHA1-0x5+0x00000008(%eax),%ecx
0000000c	movl	0x04(%esp),%eax
00000010	movl	%ecx,(%eax)
00000012	leal	0x74(%eax),%ecx
00000015	movl	%ecx,0x000000b4(%eax)
0000001b	movl	$0x67452301,0x04(%eax)
00000022	movl	$0xefcdab89,0x08(%eax)
00000029	movl	$0x98badcfe,0x0c(%eax)
00000030	movl	$0x10325476,0x10(%eax)
00000037	movl	$0xc3d2e1f0,0x14(%eax)
0000003e	movl	CSHA1::CSHA1(),0x18(%eax)
00000045	movl	CSHA1::CSHA1(),0x1c(%eax)
0000004c	ret
0000004d	nopl	(%eax)
CSHA1::CSHA1():
00000050	calll	0x00000055
00000055	popl	%eax
00000056	leal	vtable for CSHA1-0x55+0x00000008(%eax),%ecx
0000005c	movl	0x04(%esp),%eax
00000060	movl	%ecx,(%eax)
00000062	leal	0x74(%eax),%ecx
00000065	movl	%ecx,0x000000b4(%eax)
0000006b	movl	$0x67452301,0x04(%eax)
00000072	movl	$0xefcdab89,0x08(%eax)
00000079	movl	$0x98badcfe,0x0c(%eax)
00000080	movl	$0x10325476,0x10(%eax)
00000087	movl	$0xc3d2e1f0,0x14(%eax)
0000008e	movl	CSHA1::CSHA1(),0x18(%eax)
00000095	movl	CSHA1::CSHA1(),0x1c(%eax)
0000009c	ret
0000009d	nopl	(%eax)
CSHA1::Reset():
000000a0	movl	0x04(%esp),%eax
000000a4	movl	$0x67452301,0x04(%eax)
000000ab	movl	$0xefcdab89,0x08(%eax)
000000b2	movl	$0x98badcfe,0x0c(%eax)
000000b9	movl	$0x10325476,0x10(%eax)
000000c0	movl	$0xc3d2e1f0,0x14(%eax)
000000c7	movl	CSHA1::CSHA1(),0x18(%eax)
000000ce	movl	CSHA1::CSHA1(),0x1c(%eax)
000000d5	ret
000000d6	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
000000e0	jmp	operator delete(void*)
000000e5	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
000000f0	ret
000000f1	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
00000100	ret
00000101	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::Transform(unsigned long*, unsigned char*):
00000110	pushl	%ebp
00000111	pushl	%ebx
00000112	pushl	%edi
00000113	pushl	%esi
00000114	subl	$0x0000014c,%esp
0000011a	movl	0x00000160(%esp),%edx
00000121	movl	0x000000b4(%edx),%eax
00000127	movl	0x00000168(%esp),%ecx
0000012e	movsd	0x38(%ecx),%xmm0
00000133	movsd	%xmm0,0x38(%eax)
00000138	movsd	0x30(%ecx),%xmm0
0000013d	movsd	%xmm0,0x30(%eax)
00000142	movsd	0x28(%ecx),%xmm0
00000147	movsd	%xmm0,0x28(%eax)
0000014c	movsd	0x20(%ecx),%xmm0
00000151	movsd	%xmm0,0x20(%eax)
00000156	movsd	0x18(%ecx),%xmm0
0000015b	movsd	%xmm0,0x18(%eax)
00000160	movsd	0x10(%ecx),%xmm0
00000165	movsd	%xmm0,0x10(%eax)
0000016a	movsd	(%ecx),%xmm0
0000016e	movsd	0x08(%ecx),%xmm1
00000173	movsd	%xmm1,0x08(%eax)
00000178	movsd	%xmm0,(%eax)
0000017c	movl	0x00000164(%esp),%eax
00000183	movl	(%eax),%ebx
00000185	movl	0x04(%eax),%edi
00000188	movl	%ebx,%ecx
0000018a	roll	$0x05,%ecx
0000018d	addl	0x10(%eax),%ecx
00000190	movl	%ecx,0x0c(%esp)
00000194	movl	0x0c(%eax),%ebp
00000197	movl	%ebp,0x04(%esp)
0000019b	movl	0x08(%eax),%esi
0000019e	movl	0x000000b4(%edx),%eax
000001a4	movl	(%eax),%ecx
000001a6	bswap	%ecx
000001a8	movl	%ecx,0x08(%esp)
000001ac	movl	%ecx,(%eax)
000001ae	movl	0x000000b4(%edx),%eax
000001b4	movl	0x04(%eax),%ecx
000001b7	bswap	%ecx
000001b9	movl	%ecx,0x00000140(%esp)
000001c0	movl	%ecx,0x04(%eax)
000001c3	movl	0x000000b4(%edx),%eax
000001c9	movl	0x08(%eax),%ecx
000001cc	bswap	%ecx
000001ce	movl	%ecx,0x10(%esp)
000001d2	movl	%ecx,0x08(%eax)
000001d5	movl	0x000000b4(%edx),%eax
000001db	movl	0x0c(%eax),%ecx
000001de	bswap	%ecx
000001e0	movl	%ecx,0x14(%esp)
000001e4	movl	%ecx,0x0c(%eax)
000001e7	movl	0x000000b4(%edx),%eax
000001ed	movl	0x10(%eax),%ecx
000001f0	bswap	%ecx
000001f2	movl	%ecx,0x00000148(%esp)
000001f9	movl	%ecx,0x10(%eax)
000001fc	movl	0x000000b4(%edx),%eax
00000202	movl	0x14(%eax),%ecx
00000205	bswap	%ecx
00000207	movl	%ecx,0x00000144(%esp)
0000020e	movl	%ecx,0x14(%eax)
00000211	movl	0x000000b4(%edx),%eax
00000217	movl	0x18(%eax),%ecx
0000021a	bswap	%ecx
0000021c	movl	%ecx,0x18(%esp)
00000220	movl	%ecx,0x18(%eax)
00000223	movl	0x000000b4(%edx),%eax
00000229	movl	0x1c(%eax),%ecx
0000022c	bswap	%ecx
0000022e	movl	%ecx,0x1c(%esp)
00000232	movl	%ecx,0x1c(%eax)
00000235	movl	0x000000b4(%edx),%eax
0000023b	movl	0x20(%eax),%ecx
0000023e	bswap	%ecx
00000240	movl	%ecx,0x20(%esp)
00000244	movl	%ecx,0x20(%eax)
00000247	movl	0x000000b4(%edx),%eax
0000024d	movl	0x24(%eax),%ecx
00000250	bswap	%ecx
00000252	movl	%ecx,0x24(%esp)
00000256	movl	%ecx,0x24(%eax)
00000259	movl	0x000000b4(%edx),%eax
0000025f	movl	0x28(%eax),%ecx
00000262	bswap	%ecx
00000264	movl	%ecx,0x28(%esp)
00000268	movl	%ecx,0x28(%eax)
0000026b	movl	0x000000b4(%edx),%eax
00000271	movl	0x2c(%eax),%ecx
00000274	bswap	%ecx
00000276	movl	%ecx,0x2c(%esp)
0000027a	movl	%ecx,0x2c(%eax)
0000027d	movl	0x000000b4(%edx),%eax
00000283	movl	0x30(%eax),%ecx
00000286	bswap	%ecx
00000288	movl	%ecx,0x30(%esp)
0000028c	movl	%ecx,0x30(%eax)
0000028f	movl	0x000000b4(%edx),%eax
00000295	movl	0x34(%eax),%ecx
00000298	bswap	%ecx
0000029a	movl	%ecx,0x34(%esp)
0000029e	movl	%ecx,0x34(%eax)
000002a1	movl	0x000000b4(%edx),%eax
000002a7	movl	0x38(%eax),%ecx
000002aa	bswap	%ecx
000002ac	movl	%ecx,0x38(%esp)
000002b0	movl	%ecx,0x38(%eax)
000002b3	movl	0x000000b4(%edx),%eax
000002b9	movl	0x3c(%eax),%ecx
000002bc	bswap	%ecx
000002be	movl	%ecx,0x3c(%esp)
000002c2	movl	%ecx,0x3c(%eax)
000002c5	movl	0x000000b4(%edx),%eax
000002cb	movl	0x20(%eax),%ecx
000002ce	xorl	0x34(%eax),%ecx
000002d1	xorl	0x08(%eax),%ecx
000002d4	xorl	(%eax),%ecx
000002d6	roll	%ecx
000002d8	movl	%ecx,0x40(%esp)
000002dc	movl	%ecx,(%eax)
000002de	movl	0x000000b4(%edx),%eax
000002e4	movl	0x24(%eax),%ecx
000002e7	xorl	0x38(%eax),%ecx
000002ea	xorl	0x0c(%eax),%ecx
000002ed	xorl	0x04(%eax),%ecx
000002f0	roll	%ecx
000002f2	movl	%ecx,0x48(%esp)
000002f6	movl	%ecx,0x04(%eax)
000002f9	movl	0x000000b4(%edx),%eax
000002ff	movl	0x28(%eax),%ecx
00000302	xorl	0x3c(%eax),%ecx
00000305	xorl	0x10(%eax),%ecx
00000308	xorl	0x08(%eax),%ecx
0000030b	roll	%ecx
0000030d	movl	%ecx,0x4c(%esp)
00000311	movl	%ecx,0x08(%eax)
00000314	movl	0x000000b4(%edx),%eax
0000031a	movl	0x2c(%eax),%ecx
0000031d	xorl	(%eax),%ecx
0000031f	xorl	0x14(%eax),%ecx
00000322	xorl	0x0c(%eax),%ecx
00000325	roll	%ecx
00000327	movl	%ecx,CSHA1::CSHA1()(%esp)
0000032b	movl	%ecx,0x0c(%eax)
0000032e	movl	0x000000b4(%edx),%eax
00000334	movl	0x30(%eax),%ecx
00000337	xorl	0x04(%eax),%ecx
0000033a	xorl	0x18(%eax),%ecx
0000033d	xorl	0x10(%eax),%ecx
00000340	roll	%ecx
00000342	movl	%ecx,0x44(%esp)
00000346	movl	%ecx,0x10(%eax)
00000349	movl	0x000000b4(%edx),%eax
0000034f	movl	0x34(%eax),%ecx
00000352	xorl	0x08(%eax),%ecx
00000355	xorl	0x1c(%eax),%ecx
00000358	xorl	0x14(%eax),%ecx
0000035b	roll	%ecx
0000035d	movl	%ecx,0x58(%esp)
00000361	movl	%ecx,0x14(%eax)
00000364	movl	0x000000b4(%edx),%eax
0000036a	movl	0x38(%eax),%ecx
0000036d	xorl	0x0c(%eax),%ecx
00000370	xorl	0x20(%eax),%ecx
00000373	xorl	0x18(%eax),%ecx
00000376	roll	%ecx
00000378	movl	%ecx,0x60(%esp)
0000037c	movl	%ecx,0x18(%eax)
0000037f	movl	0x000000b4(%edx),%eax
00000385	movl	0x3c(%eax),%ecx
00000388	xorl	0x10(%eax),%ecx
0000038b	xorl	0x24(%eax),%ecx
0000038e	xorl	0x1c(%eax),%ecx
00000391	roll	%ecx
00000393	movl	%ecx,0x5c(%esp)
00000397	movl	%ecx,0x1c(%eax)
0000039a	movl	0x000000b4(%edx),%eax
000003a0	movl	(%eax),%ecx
000003a2	xorl	0x14(%eax),%ecx
000003a5	xorl	0x28(%eax),%ecx
000003a8	xorl	0x20(%eax),%ecx
000003ab	roll	%ecx
000003ad	movl	%ecx,0x54(%esp)
000003b1	movl	%ecx,0x20(%eax)
000003b4	movl	0x000000b4(%edx),%eax
000003ba	movl	0x04(%eax),%ecx
000003bd	xorl	0x18(%eax),%ecx
000003c0	xorl	0x2c(%eax),%ecx
000003c3	xorl	0x24(%eax),%ecx
000003c6	roll	%ecx
000003c8	movl	%ecx,0x68(%esp)
000003cc	movl	%ecx,0x24(%eax)
000003cf	movl	0x000000b4(%edx),%eax
000003d5	movl	0x08(%eax),%ecx
000003d8	xorl	0x1c(%eax),%ecx
000003db	xorl	0x30(%eax),%ecx
000003de	xorl	0x28(%eax),%ecx
000003e1	roll	%ecx
000003e3	movl	%ecx,0x70(%esp)
000003e7	movl	%ecx,0x28(%eax)
000003ea	movl	0x000000b4(%edx),%eax
000003f0	movl	0x0c(%eax),%ecx
000003f3	xorl	0x20(%eax),%ecx
000003f6	xorl	0x34(%eax),%ecx
000003f9	xorl	0x2c(%eax),%ecx
000003fc	roll	%ecx
000003fe	movl	%ecx,0x6c(%esp)
00000402	movl	%ecx,0x2c(%eax)
00000405	movl	0x000000b4(%edx),%eax
0000040b	movl	0x10(%eax),%ecx
0000040e	xorl	0x24(%eax),%ecx
00000411	xorl	0x38(%eax),%ecx
00000414	xorl	0x30(%eax),%ecx
00000417	roll	%ecx
00000419	movl	%ecx,0x64(%esp)
0000041d	movl	%ecx,0x30(%eax)
00000420	movl	0x000000b4(%edx),%eax
00000426	movl	0x14(%eax),%ecx
00000429	xorl	0x28(%eax),%ecx
0000042c	xorl	0x3c(%eax),%ecx
0000042f	xorl	0x34(%eax),%ecx
00000432	roll	%ecx
00000434	movl	%ecx,0x78(%esp)
00000438	movl	%ecx,0x34(%eax)
0000043b	movl	0x000000b4(%edx),%eax
00000441	movl	0x18(%eax),%ecx
00000444	xorl	0x2c(%eax),%ecx
00000447	xorl	(%eax),%ecx
00000449	xorl	0x38(%eax),%ecx
0000044c	roll	%ecx
0000044e	movl	%ecx,0x00000080(%esp)
00000455	movl	%ecx,0x38(%eax)
00000458	movl	0x000000b4(%edx),%eax
0000045e	movl	0x1c(%eax),%ecx
00000461	xorl	0x30(%eax),%ecx
00000464	xorl	0x04(%eax),%ecx
00000467	xorl	0x3c(%eax),%ecx
0000046a	roll	%ecx
0000046c	movl	%ecx,0x7c(%esp)
00000470	movl	%ecx,0x3c(%eax)
00000473	movl	0x000000b4(%edx),%eax
00000479	movl	0x20(%eax),%ecx
0000047c	xorl	0x34(%eax),%ecx
0000047f	xorl	0x08(%eax),%ecx
00000482	xorl	(%eax),%ecx
00000484	roll	%ecx
00000486	movl	%ecx,0x74(%esp)
0000048a	movl	%ecx,(%eax)
0000048c	movl	0x000000b4(%edx),%eax
00000492	movl	0x24(%eax),%ecx
00000495	xorl	0x38(%eax),%ecx
00000498	xorl	0x0c(%eax),%ecx
0000049b	xorl	0x04(%eax),%ecx
0000049e	roll	%ecx
000004a0	movl	%ecx,0x00000088(%esp)
000004a7	movl	%ecx,0x04(%eax)
000004aa	movl	0x000000b4(%edx),%eax
000004b0	movl	0x28(%eax),%ecx
000004b3	xorl	0x3c(%eax),%ecx
000004b6	xorl	0x10(%eax),%ecx
000004b9	xorl	0x08(%eax),%ecx
000004bc	roll	%ecx
000004be	movl	%ecx,0x00000090(%esp)
000004c5	movl	%ecx,0x08(%eax)
000004c8	movl	0x000000b4(%edx),%eax
000004ce	movl	0x2c(%eax),%ecx
000004d1	xorl	(%eax),%ecx
000004d3	xorl	0x14(%eax),%ecx
000004d6	xorl	0x0c(%eax),%ecx
000004d9	roll	%ecx
000004db	movl	%ecx,0x0000008c(%esp)
000004e2	movl	%ecx,0x0c(%eax)
000004e5	movl	0x000000b4(%edx),%eax
000004eb	movl	0x30(%eax),%ecx
000004ee	xorl	0x04(%eax),%ecx
000004f1	xorl	0x18(%eax),%ecx
000004f4	xorl	0x10(%eax),%ecx
000004f7	roll	%ecx
000004f9	movl	%ecx,0x00000084(%esp)
00000500	movl	%ecx,0x10(%eax)
00000503	movl	0x000000b4(%edx),%eax
00000509	movl	0x34(%eax),%ecx
0000050c	xorl	0x08(%eax),%ecx
0000050f	xorl	0x1c(%eax),%ecx
00000512	xorl	0x14(%eax),%ecx
00000515	roll	%ecx
00000517	movl	%ecx,0x0000009c(%esp)
0000051e	movl	%ecx,0x14(%eax)
00000521	movl	0x000000b4(%edx),%eax
00000527	movl	0x38(%eax),%ecx
0000052a	xorl	0x0c(%eax),%ecx
0000052d	xorl	0x20(%eax),%ecx
00000530	xorl	0x18(%eax),%ecx
00000533	roll	%ecx
00000535	movl	%ecx,0x00000094(%esp)
0000053c	movl	%ecx,0x18(%eax)
0000053f	movl	0x000000b4(%edx),%eax
00000545	movl	0x3c(%eax),%ecx
00000548	xorl	0x10(%eax),%ecx
0000054b	xorl	0x24(%eax),%ecx
0000054e	xorl	0x1c(%eax),%ecx
00000551	roll	%ecx
00000553	movl	%ecx,0x00000098(%esp)
0000055a	movl	%ecx,0x1c(%eax)
0000055d	movl	0x000000b4(%edx),%eax
00000563	movl	(%eax),%ecx
00000565	xorl	0x14(%eax),%ecx
00000568	xorl	0x28(%eax),%ecx
0000056b	xorl	0x20(%eax),%ecx
0000056e	roll	%ecx
00000570	movl	%ecx,CSHA1::Reset()(%esp)
00000577	movl	%ecx,0x20(%eax)
0000057a	movl	0x000000b4(%edx),%eax
00000580	movl	0x04(%eax),%ecx
00000583	xorl	0x18(%eax),%ecx
00000586	xorl	0x2c(%eax),%ecx
00000589	xorl	0x24(%eax),%ecx
0000058c	roll	%ecx
0000058e	movl	%ecx,0x000000a4(%esp)
00000595	movl	%ecx,0x24(%eax)
00000598	movl	0x000000b4(%edx),%eax
0000059e	movl	0x08(%eax),%ecx
000005a1	xorl	0x1c(%eax),%ecx
000005a4	xorl	0x30(%eax),%ecx
000005a7	xorl	0x28(%eax),%ecx
000005aa	roll	%ecx
000005ac	movl	%ecx,0x000000a8(%esp)
000005b3	movl	%ecx,0x28(%eax)
000005b6	movl	0x000000b4(%edx),%eax
000005bc	movl	0x0c(%eax),%ecx
000005bf	xorl	0x20(%eax),%ecx
000005c2	xorl	0x34(%eax),%ecx
000005c5	xorl	0x2c(%eax),%ecx
000005c8	roll	%ecx
000005ca	movl	%ecx,0x000000ac(%esp)
000005d1	movl	%ecx,0x2c(%eax)
000005d4	movl	0x000000b4(%edx),%eax
000005da	movl	0x10(%eax),%ecx
000005dd	xorl	0x24(%eax),%ecx
000005e0	xorl	0x38(%eax),%ecx
000005e3	xorl	0x30(%eax),%ecx
000005e6	roll	%ecx
000005e8	movl	%ecx,0x000000b0(%esp)
000005ef	movl	%ecx,0x30(%eax)
000005f2	movl	0x000000b4(%edx),%eax
000005f8	movl	0x14(%eax),%ecx
000005fb	xorl	0x28(%eax),%ecx
000005fe	xorl	0x3c(%eax),%ecx
00000601	xorl	0x34(%eax),%ecx
00000604	roll	%ecx
00000606	movl	%ecx,0x000000b4(%esp)
0000060d	movl	%ecx,0x34(%eax)
00000610	movl	0x000000b4(%edx),%eax
00000616	movl	0x18(%eax),%ecx
00000619	xorl	0x2c(%eax),%ecx
0000061c	xorl	(%eax),%ecx
0000061e	xorl	0x38(%eax),%ecx
00000621	roll	%ecx
00000623	movl	%ecx,0x000000b8(%esp)
0000062a	movl	%ecx,0x38(%eax)
0000062d	movl	0x000000b4(%edx),%eax
00000633	movl	0x1c(%eax),%ecx
00000636	xorl	0x30(%eax),%ecx
00000639	xorl	0x04(%eax),%ecx
0000063c	xorl	0x3c(%eax),%ecx
0000063f	roll	%ecx
00000641	movl	%ecx,0x000000bc(%esp)
00000648	movl	%ecx,0x3c(%eax)
0000064b	movl	0x000000b4(%edx),%eax
00000651	movl	0x20(%eax),%ecx
00000654	xorl	0x34(%eax),%ecx
00000657	xorl	0x08(%eax),%ecx
0000065a	xorl	(%eax),%ecx
0000065c	roll	%ecx
0000065e	movl	%ecx,0x000000c0(%esp)
00000665	movl	%ecx,(%eax)
00000667	movl	0x000000b4(%edx),%eax
0000066d	movl	0x24(%eax),%ecx
00000670	xorl	0x38(%eax),%ecx
00000673	xorl	0x0c(%eax),%ecx
00000676	xorl	0x04(%eax),%ecx
00000679	roll	%ecx
0000067b	movl	%ecx,0x000000c4(%esp)
00000682	movl	%ecx,0x04(%eax)
00000685	movl	0x000000b4(%edx),%eax
0000068b	movl	0x28(%eax),%ecx
0000068e	xorl	0x3c(%eax),%ecx
00000691	xorl	0x10(%eax),%ecx
00000694	xorl	0x08(%eax),%ecx
00000697	roll	%ecx
00000699	movl	%ecx,0x000000c8(%esp)
000006a0	movl	%ecx,0x08(%eax)
000006a3	movl	0x000000b4(%edx),%eax
000006a9	movl	0x2c(%eax),%ecx
000006ac	xorl	(%eax),%ecx
000006ae	xorl	0x14(%eax),%ecx
000006b1	xorl	0x0c(%eax),%ecx
000006b4	roll	%ecx
000006b6	movl	%ecx,0x000000cc(%esp)
000006bd	movl	%ecx,0x0c(%eax)
000006c0	movl	0x000000b4(%edx),%eax
000006c6	movl	0x30(%eax),%ecx
000006c9	xorl	0x04(%eax),%ecx
000006cc	xorl	0x18(%eax),%ecx
000006cf	xorl	0x10(%eax),%ecx
000006d2	roll	%ecx
000006d4	movl	%ecx,0x000000d0(%esp)
000006db	movl	%ecx,0x10(%eax)
000006de	movl	0x000000b4(%edx),%eax
000006e4	movl	0x34(%eax),%ecx
000006e7	xorl	0x08(%eax),%ecx
000006ea	xorl	0x1c(%eax),%ecx
000006ed	xorl	0x14(%eax),%ecx
000006f0	roll	%ecx
000006f2	movl	%ecx,0x000000d4(%esp)
000006f9	movl	%ecx,0x14(%eax)
000006fc	movl	0x000000b4(%edx),%eax
00000702	movl	0x38(%eax),%ecx
00000705	xorl	0x0c(%eax),%ecx
00000708	xorl	0x20(%eax),%ecx
0000070b	xorl	0x18(%eax),%ecx
0000070e	roll	%ecx
00000710	movl	%ecx,0x000000d8(%esp)
00000717	movl	%ecx,0x18(%eax)
0000071a	movl	0x000000b4(%edx),%eax
00000720	movl	0x3c(%eax),%ecx
00000723	xorl	0x10(%eax),%ecx
00000726	xorl	0x24(%eax),%ecx
00000729	xorl	0x1c(%eax),%ecx
0000072c	roll	%ecx
0000072e	movl	%ecx,0x000000dc(%esp)
00000735	movl	%ecx,0x1c(%eax)
00000738	movl	0x000000b4(%edx),%eax
0000073e	movl	(%eax),%ecx
00000740	xorl	0x14(%eax),%ecx
00000743	xorl	0x28(%eax),%ecx
00000746	xorl	0x20(%eax),%ecx
00000749	roll	%ecx
0000074b	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000752	movl	%ecx,0x20(%eax)
00000755	movl	0x000000b4(%edx),%eax
0000075b	movl	0x04(%eax),%ecx
0000075e	xorl	0x18(%eax),%ecx
00000761	xorl	0x2c(%eax),%ecx
00000764	xorl	0x24(%eax),%ecx
00000767	roll	%ecx
00000769	movl	%ecx,0x000000e4(%esp)
00000770	movl	%ecx,0x24(%eax)
00000773	movl	0x000000b4(%edx),%eax
00000779	movl	0x08(%eax),%ecx
0000077c	xorl	0x1c(%eax),%ecx
0000077f	xorl	0x30(%eax),%ecx
00000782	xorl	0x28(%eax),%ecx
00000785	roll	%ecx
00000787	movl	%ecx,0x000000ec(%esp)
0000078e	movl	%ecx,0x28(%eax)
00000791	movl	0x000000b4(%edx),%eax
00000797	movl	0x0c(%eax),%ecx
0000079a	xorl	0x20(%eax),%ecx
0000079d	xorl	0x34(%eax),%ecx
000007a0	xorl	0x2c(%eax),%ecx
000007a3	roll	%ecx
000007a5	movl	%ecx,0x000000e8(%esp)
000007ac	movl	%ecx,0x2c(%eax)
000007af	movl	0x000000b4(%edx),%eax
000007b5	movl	0x10(%eax),%ecx
000007b8	xorl	0x24(%eax),%ecx
000007bb	xorl	0x38(%eax),%ecx
000007be	xorl	0x30(%eax),%ecx
000007c1	roll	%ecx
000007c3	movl	%ecx,0x000000f4(%esp)
000007ca	movl	%ecx,0x30(%eax)
000007cd	movl	0x000000b4(%edx),%eax
000007d3	movl	0x14(%eax),%ecx
000007d6	xorl	0x28(%eax),%ecx
000007d9	xorl	0x3c(%eax),%ecx
000007dc	xorl	0x34(%eax),%ecx
000007df	roll	%ecx
000007e1	movl	%ecx,0x000000fc(%esp)
000007e8	movl	%ecx,0x34(%eax)
000007eb	movl	0x000000b4(%edx),%eax
000007f1	movl	0x18(%eax),%ecx
000007f4	xorl	0x2c(%eax),%ecx
000007f7	xorl	(%eax),%ecx
000007f9	xorl	0x38(%eax),%ecx
000007fc	roll	%ecx
000007fe	movl	%ecx,0x000000f8(%esp)
00000805	movl	%ecx,0x38(%eax)
00000808	movl	0x000000b4(%edx),%eax
0000080e	movl	0x1c(%eax),%ecx
00000811	xorl	0x30(%eax),%ecx
00000814	xorl	0x04(%eax),%ecx
00000817	xorl	0x3c(%eax),%ecx
0000081a	roll	%ecx
0000081c	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000823	movl	%ecx,0x3c(%eax)
00000826	movl	0x000000b4(%edx),%eax
0000082c	movl	0x20(%eax),%ecx
0000082f	xorl	0x34(%eax),%ecx
00000832	xorl	0x08(%eax),%ecx
00000835	xorl	(%eax),%ecx
00000837	roll	%ecx
00000839	movl	%ecx,0x00000104(%esp)
00000840	movl	%ecx,(%eax)
00000842	movl	0x000000b4(%edx),%eax
00000848	movl	0x24(%eax),%ecx
0000084b	xorl	0x38(%eax),%ecx
0000084e	xorl	0x0c(%eax),%ecx
00000851	xorl	0x04(%eax),%ecx
00000854	roll	%ecx
00000856	movl	%ecx,0x0000010c(%esp)
0000085d	movl	%ecx,0x04(%eax)
00000860	movl	0x000000b4(%edx),%eax
00000866	movl	0x28(%eax),%ecx
00000869	xorl	0x3c(%eax),%ecx
0000086c	xorl	0x10(%eax),%ecx
0000086f	xorl	0x08(%eax),%ecx
00000872	roll	%ecx
00000874	movl	%ecx,0x00000108(%esp)
0000087b	movl	%ecx,0x08(%eax)
0000087e	movl	0x000000b4(%edx),%eax
00000884	movl	0x2c(%eax),%ecx
00000887	xorl	(%eax),%ecx
00000889	xorl	0x14(%eax),%ecx
0000088c	xorl	0x0c(%eax),%ecx
0000088f	roll	%ecx
00000891	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000898	movl	%ecx,0x0c(%eax)
0000089b	movl	0x000000b4(%edx),%eax
000008a1	movl	0x30(%eax),%ecx
000008a4	xorl	0x04(%eax),%ecx
000008a7	xorl	0x18(%eax),%ecx
000008aa	xorl	0x10(%eax),%ecx
000008ad	roll	%ecx
000008af	movl	%ecx,0x00000114(%esp)
000008b6	movl	%ecx,0x10(%eax)
000008b9	movl	0x000000b4(%edx),%eax
000008bf	movl	0x34(%eax),%ecx
000008c2	xorl	0x08(%eax),%ecx
000008c5	xorl	0x1c(%eax),%ecx
000008c8	xorl	0x14(%eax),%ecx
000008cb	roll	%ecx
000008cd	movl	%ecx,0x0000011c(%esp)
000008d4	movl	%ecx,0x14(%eax)
000008d7	movl	0x000000b4(%edx),%eax
000008dd	movl	0x38(%eax),%ecx
000008e0	xorl	0x0c(%eax),%ecx
000008e3	xorl	0x20(%eax),%ecx
000008e6	xorl	0x18(%eax),%ecx
000008e9	roll	%ecx
000008eb	movl	%ecx,0x00000118(%esp)
000008f2	movl	%ecx,0x18(%eax)
000008f5	movl	0x000000b4(%edx),%eax
000008fb	movl	0x3c(%eax),%ecx
000008fe	xorl	0x10(%eax),%ecx
00000901	xorl	0x24(%eax),%ecx
00000904	xorl	0x1c(%eax),%ecx
00000907	roll	%ecx
00000909	movl	%ecx,CSHA1::Transform(unsigned long*, unsigned char*)(%esp)
00000910	movl	%ecx,0x1c(%eax)
00000913	movl	0x000000b4(%edx),%eax
00000919	movl	(%eax),%ecx
0000091b	xorl	0x14(%eax),%ecx
0000091e	xorl	0x28(%eax),%ecx
00000921	xorl	0x20(%eax),%ecx
00000924	roll	%ecx
00000926	movl	%ecx,0x00000124(%esp)
0000092d	movl	%ecx,0x20(%eax)
00000930	movl	0x000000b4(%edx),%eax
00000936	movl	0x04(%eax),%ecx
00000939	xorl	0x18(%eax),%ecx
0000093c	xorl	0x2c(%eax),%ecx
0000093f	xorl	0x24(%eax),%ecx
00000942	roll	%ecx
00000944	movl	%ecx,0x0000012c(%esp)
0000094b	movl	%ecx,0x24(%eax)
0000094e	movl	0x000000b4(%edx),%eax
00000954	movl	0x08(%eax),%ecx
00000957	xorl	0x1c(%eax),%ecx
0000095a	xorl	0x30(%eax),%ecx
0000095d	xorl	0x28(%eax),%ecx
00000960	roll	%ecx
00000962	movl	%ecx,0x00000128(%esp)
00000969	movl	%ecx,0x28(%eax)
0000096c	movl	0x000000b4(%edx),%eax
00000972	movl	0x0c(%eax),%ecx
00000975	xorl	0x20(%eax),%ecx
00000978	xorl	0x34(%eax),%ecx
0000097b	xorl	0x2c(%eax),%ecx
0000097e	roll	%ecx
00000980	movl	%ecx,0x00000120(%esp)
00000987	movl	%ecx,0x2c(%eax)
0000098a	movl	0x000000b4(%edx),%eax
00000990	movl	0x10(%eax),%ecx
00000993	xorl	0x24(%eax),%ecx
00000996	xorl	0x38(%eax),%ecx
00000999	xorl	0x30(%eax),%ecx
0000099c	roll	%ecx
0000099e	movl	%ecx,0x00000134(%esp)
000009a5	movl	%ecx,0x30(%eax)
000009a8	movl	0x000000b4(%edx),%eax
000009ae	movl	0x14(%eax),%ecx
000009b1	xorl	0x28(%eax),%ecx
000009b4	xorl	0x3c(%eax),%ecx
000009b7	xorl	0x34(%eax),%ecx
000009ba	roll	%ecx
000009bc	movl	%ecx,0x00000138(%esp)
000009c3	movl	%ecx,0x34(%eax)
000009c6	movl	0x000000b4(%edx),%eax
000009cc	movl	0x18(%eax),%ecx
000009cf	xorl	0x2c(%eax),%ecx
000009d2	xorl	(%eax),%ecx
000009d4	xorl	0x38(%eax),%ecx
000009d7	roll	%ecx
000009d9	movl	%ecx,0x0000013c(%esp)
000009e0	movl	%ecx,0x38(%eax)
000009e3	movl	0x000000b4(%edx),%eax
000009e9	movl	0x1c(%eax),%ecx
000009ec	xorl	0x30(%eax),%ecx
000009ef	xorl	0x04(%eax),%ecx
000009f2	xorl	0x3c(%eax),%ecx
000009f5	roll	%ecx
000009f7	movl	%ecx,0x00000130(%esp)
000009fe	movl	%ecx,0x3c(%eax)
00000a01	movl	%ebp,%eax
00000a03	xorl	%esi,%eax
00000a05	andl	%edi,%eax
00000a07	xorl	%ebp,%eax
00000a09	addl	0x0c(%esp),%eax
00000a0d	movl	0x08(%esp),%ecx
00000a11	leal	0x5a827999(%ecx,%eax),%eax
00000a18	roll	$0x1e,%edi
00000a1b	movl	%edi,0x08(%esp)
00000a1f	movl	%edi,%ecx
00000a21	xorl	%esi,%ecx
00000a23	movl	%esi,%ebp
00000a25	andl	%ebx,%ecx
00000a27	roll	$0x1e,%ebx
00000a2a	movl	%ebx,0x0c(%esp)
00000a2e	movl	%edi,%esi
00000a30	xorl	%ebx,%esi
00000a32	andl	%eax,%esi
00000a34	movl	%eax,%edx
00000a36	roll	$0x1e,%edx
00000a39	movl	%edx,(%esp)
00000a3c	xorl	%ebx,%edx
00000a3e	roll	$0x05,%eax
00000a41	xorl	%ebp,%ecx
00000a43	movl	%ebp,%ebx
00000a45	addl	0x04(%esp),%ecx
00000a49	addl	0x00000140(%esp),%ecx
00000a50	leal	0x5a827999(%eax,%ecx),%edi
00000a57	andl	%edi,%edx
00000a59	movl	%edi,%eax
00000a5b	roll	$0x1e,%eax
00000a5e	movl	%eax,0x00000140(%esp)
00000a65	movl	%eax,%ecx
00000a67	movl	(%esp),%eax
00000a6a	xorl	%eax,%ecx
00000a6c	movl	0x08(%esp),%ebp
00000a70	xorl	%ebp,%esi
00000a72	addl	%ebx,%esi
00000a74	addl	0x10(%esp),%esi
00000a78	roll	$0x05,%edi
00000a7b	leal	0x5a827999(%edi,%esi),%esi
00000a82	andl	%esi,%ecx
00000a84	movl	0x0c(%esp),%ebx
00000a88	xorl	%ebx,%edx
00000a8a	addl	%ebp,%edx
00000a8c	addl	0x14(%esp),%edx
00000a90	movl	%esi,%edi
00000a92	roll	$0x05,%edi
00000a95	leal	0x5a827999(%edi,%edx),%edx
00000a9c	roll	$0x1e,%esi
00000a9f	movl	%esi,%edi
00000aa1	xorl	0x00000140(%esp),%edi
00000aa8	andl	%edx,%edi
00000aaa	xorl	%eax,%ecx
00000aac	addl	%ebx,%ecx
00000aae	addl	0x00000148(%esp),%ecx
00000ab5	movl	%edx,%ebx
00000ab7	roll	$0x05,%ebx
00000aba	leal	0x5a827999(%ebx,%ecx),%ecx
00000ac1	roll	$0x1e,%edx
00000ac4	movl	%edx,%ebp
00000ac6	xorl	%esi,%ebp
00000ac8	andl	%ecx,%ebp
00000aca	movl	%ecx,%ebx
00000acc	roll	$0x1e,%ebx
00000acf	movl	%ebx,0x00000148(%esp)
00000ad6	xorl	%edx,%ebx
00000ad8	roll	$0x05,%ecx
00000adb	xorl	0x00000140(%esp),%edi
00000ae2	addl	%eax,%edi
00000ae4	addl	0x00000144(%esp),%edi
00000aeb	leal	0x5a827999(%ecx,%edi),%edi
00000af2	andl	%edi,%ebx
00000af4	movl	%edi,%eax
00000af6	roll	$0x1e,%eax
00000af9	movl	%eax,0x00000144(%esp)
00000b00	movl	%eax,%ecx
00000b02	xorl	0x00000148(%esp),%ecx
00000b09	xorl	%esi,%ebp
00000b0b	addl	0x00000140(%esp),%ebp
00000b12	addl	0x18(%esp),%ebp
00000b16	roll	$0x05,%edi
00000b19	leal	0x5a827999(%edi,%ebp),%ebp
00000b20	andl	%ebp,%ecx
00000b22	xorl	%edx,%ebx
00000b24	addl	%esi,%ebx
00000b26	addl	0x1c(%esp),%ebx
00000b2a	movl	%ebp,%eax
00000b2c	roll	$0x05,%eax
00000b2f	leal	0x5a827999(%eax,%ebx),%esi
00000b36	roll	$0x1e,%ebp
00000b39	movl	%ebp,%edi
00000b3b	xorl	0x00000144(%esp),%edi
00000b42	andl	%esi,%edi
00000b44	xorl	0x00000148(%esp),%ecx
00000b4b	addl	%edx,%ecx
00000b4d	addl	0x20(%esp),%ecx
00000b51	movl	%esi,%eax
00000b53	roll	$0x05,%eax
00000b56	leal	0x5a827999(%eax,%ecx),%ecx
00000b5d	roll	$0x1e,%esi
00000b60	movl	%esi,%eax
00000b62	xorl	%ebp,%eax
00000b64	andl	%ecx,%eax
00000b66	movl	%ecx,%edx
00000b68	roll	$0x1e,%edx
00000b6b	movl	%edx,0x00000140(%esp)
00000b72	xorl	%esi,%edx
00000b74	roll	$0x05,%ecx
00000b77	xorl	0x00000144(%esp),%edi
00000b7e	addl	0x00000148(%esp),%edi
00000b85	addl	0x24(%esp),%edi
00000b89	leal	0x5a827999(%ecx,%edi),%ecx
00000b90	andl	%ecx,%edx
00000b92	movl	%ecx,%edi
00000b94	roll	$0x1e,%edi
00000b97	movl	%edi,0x00000148(%esp)
00000b9e	movl	%edi,%ebx
00000ba0	movl	0x00000140(%esp),%edi
00000ba7	xorl	%edi,%ebx
00000ba9	xorl	%ebp,%eax
00000bab	addl	0x00000144(%esp),%eax
00000bb2	addl	0x28(%esp),%eax
00000bb6	roll	$0x05,%ecx
00000bb9	leal	0x5a827999(%ecx,%eax),%eax
00000bc0	andl	%eax,%ebx
00000bc2	xorl	%esi,%edx
00000bc4	addl	%ebp,%edx
00000bc6	addl	0x2c(%esp),%edx
00000bca	movl	%eax,%ecx
00000bcc	roll	$0x05,%ecx
00000bcf	leal	0x5a827999(%ecx,%edx),%ebp
00000bd6	roll	$0x1e,%eax
00000bd9	movl	%eax,%ecx
00000bdb	xorl	0x00000148(%esp),%ecx
00000be2	andl	%ebp,%ecx
00000be4	xorl	%edi,%ebx
00000be6	addl	%esi,%ebx
00000be8	addl	0x30(%esp),%ebx
00000bec	movl	%ebp,%edx
00000bee	roll	$0x05,%edx
00000bf1	leal	0x5a827999(%edx,%ebx),%esi
00000bf8	movl	%ebp,%ebx
00000bfa	roll	$0x1e,%ebx
00000bfd	movl	%ebx,0x30(%esp)
00000c01	movl	%ebx,%edx
00000c03	xorl	%eax,%edx
00000c05	andl	%esi,%edx
00000c07	movl	%esi,%ebp
00000c09	roll	$0x1e,%ebp
00000c0c	movl	%ebp,0x00000144(%esp)
00000c13	movl	%ebp,%edi
00000c15	movl	%edi,%ebp
00000c17	xorl	%ebx,%ebp
00000c19	roll	$0x05,%esi
00000c1c	xorl	0x00000148(%esp),%ecx
00000c23	addl	0x00000140(%esp),%ecx
00000c2a	addl	0x34(%esp),%ecx
00000c2e	leal	0x5a827999(%esi,%ecx),%ecx
00000c35	andl	%ecx,%ebp
00000c37	movl	%ecx,%esi
00000c39	roll	$0x1e,%esi
00000c3c	movl	%esi,0x00000140(%esp)
00000c43	movl	%esi,%ebx
00000c45	xorl	%edi,%ebx
00000c47	xorl	%eax,%edx
00000c49	addl	0x00000148(%esp),%edx
00000c50	addl	0x38(%esp),%edx
00000c54	roll	$0x05,%ecx
00000c57	leal	0x5a827999(%ecx,%edx),%edi
00000c5e	andl	%edi,%ebx
00000c60	movl	0x30(%esp),%edx
00000c64	xorl	%edx,%ebp
00000c66	addl	%eax,%ebp
00000c68	addl	0x3c(%esp),%ebp
00000c6c	movl	%edi,%eax
00000c6e	roll	$0x05,%eax
00000c71	leal	0x5a827999(%eax,%ebp),%ebp
00000c78	roll	$0x1e,%edi
00000c7b	movl	%edi,%ecx
00000c7d	xorl	%esi,%ecx
00000c7f	andl	%ebp,%ecx
00000c81	xorl	0x00000144(%esp),%ebx
00000c88	addl	%edx,%ebx
00000c8a	movl	%ebp,%eax
00000c8c	roll	$0x05,%eax
00000c8f	addl	%ebx,%eax
00000c91	movl	0x40(%esp),%edx
00000c95	leal	0x5a827999(%edx,%eax),%ebx
00000c9c	roll	$0x1e,%ebp
00000c9f	movl	%ebp,%edx
00000ca1	xorl	%edi,%edx
00000ca3	andl	%ebx,%edx
00000ca5	movl	%ebx,%eax
00000ca7	roll	$0x1e,%eax
00000caa	movl	%eax,0x00000148(%esp)
00000cb1	xorl	%ebp,%eax
00000cb3	roll	$0x05,%ebx
00000cb6	movl	0x00000140(%esp),%esi
00000cbd	xorl	%esi,%ecx
00000cbf	addl	0x00000144(%esp),%ecx
00000cc6	addl	%ebx,%ecx
00000cc8	movl	0x48(%esp),%ebx
00000ccc	leal	0x5a827999(%ebx,%ecx),%ebx
00000cd3	andl	%ebx,%eax
00000cd5	movl	%ebx,%ecx
00000cd7	roll	$0x1e,%ecx
00000cda	movl	%ecx,0x00000144(%esp)
00000ce1	xorl	0x00000148(%esp),%ecx
00000ce8	xorl	%edi,%edx
00000cea	addl	%esi,%edx
00000cec	roll	$0x05,%ebx
00000cef	addl	%edx,%ebx
00000cf1	movl	0x4c(%esp),%edx
00000cf5	leal	0x5a827999(%edx,%ebx),%edx
00000cfc	xorl	%edx,%ecx
00000cfe	xorl	%ebp,%eax
00000d00	addl	%ebp,%ecx
00000d02	addl	%edi,%eax
00000d04	movl	%edx,%esi
00000d06	roll	$0x05,%esi
00000d09	addl	%eax,%esi
00000d0b	movl	CSHA1::CSHA1()(%esp),%eax
00000d0f	leal	0x5a827999(%eax,%esi),%ebx
00000d16	movl	%ebx,%eax
00000d18	roll	$0x05,%eax
00000d1b	addl	%ecx,%eax
00000d1d	movl	0x44(%esp),%ecx
00000d21	leal	0x6ed9eba1(%ecx,%eax),%edi
00000d28	roll	$0x1e,%edx
00000d2b	movl	%edx,%esi
00000d2d	xorl	0x00000144(%esp),%esi
00000d34	xorl	%ebx,%esi
00000d36	roll	$0x1e,%ebx
00000d39	movl	%ebx,%ecx
00000d3b	xorl	%edx,%ecx
00000d3d	xorl	%edi,%ecx
00000d3f	movl	%edi,%eax
00000d41	roll	$0x1e,%eax
00000d44	movl	%eax,0x00000140(%esp)
00000d4b	xorl	%ebx,%eax
00000d4d	roll	$0x05,%edi
00000d50	addl	0x00000148(%esp),%esi
00000d57	addl	%edi,%esi
00000d59	movl	0x58(%esp),%edi
00000d5d	leal	0x6ed9eba1(%edi,%esi),%edi
00000d64	xorl	%edi,%eax
00000d66	movl	%edi,%esi
00000d68	roll	$0x1e,%esi
00000d6b	movl	%esi,%ebp
00000d6d	xorl	0x00000140(%esp),%ebp
00000d74	addl	0x00000144(%esp),%ecx
00000d7b	roll	$0x05,%edi
00000d7e	addl	%ecx,%edi
00000d80	movl	0x60(%esp),%ecx
00000d84	leal	0x6ed9eba1(%ecx,%edi),%edi
00000d8b	xorl	%edi,%ebp
00000d8d	addl	%ebx,%ebp
00000d8f	addl	%edx,%eax
00000d91	movl	%edi,%ecx
00000d93	roll	$0x05,%ecx
00000d96	addl	%eax,%ecx
00000d98	movl	0x5c(%esp),%eax
00000d9c	leal	0x6ed9eba1(%eax,%ecx),%ebx
00000da3	movl	%ebx,%eax
00000da5	roll	$0x05,%eax
00000da8	addl	%ebp,%eax
00000daa	movl	0x54(%esp),%ecx
00000dae	leal	0x6ed9eba1(%ecx,%eax),%edx
00000db5	roll	$0x1e,%edi
00000db8	movl	%edi,%ecx
00000dba	xorl	%esi,%ecx
00000dbc	xorl	%ebx,%ecx
00000dbe	roll	$0x1e,%ebx
00000dc1	movl	%ebx,%eax
00000dc3	xorl	%edi,%eax
00000dc5	xorl	%edx,%eax
00000dc7	movl	%edx,%ebp
00000dc9	roll	$0x1e,%ebp
00000dcc	movl	%ebp,0x00000148(%esp)
00000dd3	xorl	%ebx,%ebp
00000dd5	roll	$0x05,%edx
00000dd8	addl	0x00000140(%esp),%ecx
00000ddf	addl	%edx,%ecx
00000de1	movl	0x68(%esp),%edx
00000de5	leal	0x6ed9eba1(%edx,%ecx),%ecx
00000dec	xorl	%ecx,%ebp
00000dee	movl	%ecx,%edx
00000df0	roll	$0x1e,%edx
00000df3	movl	%edx,0x00000140(%esp)
00000dfa	xorl	0x00000148(%esp),%edx
00000e01	addl	%esi,%eax
00000e03	roll	$0x05,%ecx
00000e06	addl	%eax,%ecx
00000e08	movl	0x70(%esp),%eax
00000e0c	leal	0x6ed9eba1(%eax,%ecx),%esi
00000e13	xorl	%esi,%edx
00000e15	addl	%ebx,%edx
00000e17	addl	%edi,%ebp
00000e19	movl	%esi,%eax
00000e1b	roll	$0x05,%eax
00000e1e	addl	%ebp,%eax
00000e20	movl	0x6c(%esp),%ecx
00000e24	leal	0x6ed9eba1(%ecx,%eax),%eax
00000e2b	movl	%eax,%ecx
00000e2d	roll	$0x05,%ecx
00000e30	addl	%edx,%ecx
00000e32	movl	0x64(%esp),%edx
00000e36	leal	0x6ed9eba1(%edx,%ecx),%ecx
00000e3d	roll	$0x1e,%esi
00000e40	movl	%esi,%edx
00000e42	xorl	0x00000140(%esp),%edx
00000e49	xorl	%eax,%edx
00000e4b	roll	$0x1e,%eax
00000e4e	movl	%eax,%ebx
00000e50	xorl	%esi,%ebx
00000e52	xorl	%ecx,%ebx
00000e54	movl	%ecx,%edi
00000e56	roll	$0x1e,%edi
00000e59	movl	%edi,0x00000144(%esp)
00000e60	movl	%edi,%ebp
00000e62	xorl	%eax,%ebp
00000e64	roll	$0x05,%ecx
00000e67	addl	0x00000148(%esp),%edx
00000e6e	addl	%ecx,%edx
00000e70	movl	0x78(%esp),%ecx
00000e74	leal	0x6ed9eba1(%ecx,%edx),%edx
00000e7b	xorl	%edx,%ebp
00000e7d	movl	%edx,%ecx
00000e7f	roll	$0x1e,%ecx
00000e82	movl	%ecx,0x00000148(%esp)
00000e89	movl	%ecx,%edi
00000e8b	xorl	0x00000144(%esp),%edi
00000e92	addl	0x00000140(%esp),%ebx
00000e99	roll	$0x05,%edx
00000e9c	addl	%ebx,%edx
00000e9e	movl	0x00000080(%esp),%ebx
00000ea5	leal	0x6ed9eba1(%ebx,%edx),%edx
00000eac	xorl	%edx,%edi
00000eae	addl	%eax,%edi
00000eb0	addl	%esi,%ebp
00000eb2	movl	%edx,%eax
00000eb4	roll	$0x05,%eax
00000eb7	addl	%ebp,%eax
00000eb9	movl	0x7c(%esp),%esi
00000ebd	leal	0x6ed9eba1(%esi,%eax),%eax
00000ec4	movl	%eax,%esi
00000ec6	roll	$0x05,%esi
00000ec9	addl	%edi,%esi
00000ecb	movl	0x74(%esp),%edi
00000ecf	leal	0x6ed9eba1(%edi,%esi),%edi
00000ed6	roll	$0x1e,%edx
00000ed9	movl	%edx,%ebx
00000edb	xorl	%ecx,%ebx
00000edd	xorl	%eax,%ebx
00000edf	roll	$0x1e,%eax
00000ee2	movl	%eax,%esi
00000ee4	xorl	%edx,%esi
00000ee6	xorl	%edi,%esi
00000ee8	movl	%edi,%ebp
00000eea	roll	$0x1e,%ebp
00000eed	movl	%ebp,0x00000140(%esp)
00000ef4	movl	%ebp,%ecx
00000ef6	movl	%ecx,%ebp
00000ef8	xorl	%eax,%ebp
00000efa	roll	$0x05,%edi
00000efd	addl	0x00000144(%esp),%ebx
00000f04	addl	%edi,%ebx
00000f06	movl	0x00000088(%esp),%edi
00000f0d	leal	0x6ed9eba1(%edi,%ebx),%edi
00000f14	xorl	%edi,%ebp
00000f16	movl	%edi,%ebx
00000f18	roll	$0x1e,%ebx
00000f1b	movl	%ebx,0x00000144(%esp)
00000f22	xorl	%ecx,%ebx
00000f24	addl	0x00000148(%esp),%esi
00000f2b	roll	$0x05,%edi
00000f2e	addl	%esi,%edi
00000f30	movl	0x00000090(%esp),%ecx
00000f37	leal	0x6ed9eba1(%ecx,%edi),%edi
00000f3e	xorl	%edi,%ebx
00000f40	addl	%eax,%ebx
00000f42	addl	%edx,%ebp
00000f44	movl	%edi,%eax
00000f46	roll	$0x05,%eax
00000f49	addl	%ebp,%eax
00000f4b	movl	0x0000008c(%esp),%ecx
00000f52	leal	0x6ed9eba1(%ecx,%eax),%ecx
00000f59	movl	%ecx,%eax
00000f5b	roll	$0x05,%eax
00000f5e	addl	%ebx,%eax
00000f60	movl	0x00000084(%esp),%edx
00000f67	leal	0x6ed9eba1(%edx,%eax),%eax
00000f6e	roll	$0x1e,%edi
00000f71	movl	%edi,%edx
00000f73	xorl	0x00000144(%esp),%edx
00000f7a	xorl	%ecx,%edx
00000f7c	roll	$0x1e,%ecx
00000f7f	movl	%ecx,%esi
00000f81	xorl	%edi,%esi
00000f83	xorl	%eax,%esi
00000f85	movl	%eax,%ebx
00000f87	roll	$0x1e,%ebx
00000f8a	movl	%ebx,0x00000148(%esp)
00000f91	movl	%ebx,%ebp
00000f93	xorl	%ecx,%ebp
00000f95	roll	$0x05,%eax
00000f98	addl	0x00000140(%esp),%edx
00000f9f	addl	%eax,%edx
00000fa1	movl	0x0000009c(%esp),%eax
00000fa8	leal	0x6ed9eba1(%eax,%edx),%edx
00000faf	xorl	%edx,%ebp
00000fb1	addl	0x00000144(%esp),%esi
00000fb8	movl	%edx,%eax
00000fba	roll	$0x05,%eax
00000fbd	addl	%esi,%eax
00000fbf	movl	0x00000094(%esp),%esi
00000fc6	leal	0x6ed9eba1(%esi,%eax),%eax
00000fcd	roll	$0x1e,%edx
00000fd0	movl	%eax,%esi
00000fd2	andl	%edx,%esi
00000fd4	movl	%eax,%ebx
00000fd6	orl	%edx,%ebx
00000fd8	addl	%edi,%ebp
00000fda	movl	%eax,%edi
00000fdc	roll	$0x05,%edi
00000fdf	addl	%ebp,%edi
00000fe1	movl	0x00000098(%esp),%ebp
00000fe8	leal	0x6ed9eba1(%ebp,%edi),%edi
00000fef	roll	$0x1e,%eax
00000ff2	movl	%edi,%ebp
00000ff4	andl	%eax,%ebp
00000ff6	movl	%ebp,0x00000144(%esp)
00000ffd	movl	%edi,%ebp
00000fff	orl	%eax,%ebp
00001001	andl	0x00000148(%esp),%ebx
00001008	orl	%esi,%ebx
0000100a	addl	%ecx,%ebx
0000100c	movl	%edi,%ecx
0000100e	roll	$0x05,%ecx
00001011	addl	%ebx,%ecx
00001013	movl	CSHA1::Reset()(%esp),%esi
0000101a	leal	0x8f1bbcdc(%esi,%ecx),%ecx
00001021	roll	$0x1e,%edi
00001024	movl	%ecx,%esi
00001026	andl	%edi,%esi
00001028	movl	%esi,0x00000140(%esp)
0000102f	movl	%ecx,%ebx
00001031	orl	%edi,%ebx
00001033	andl	%edx,%ebp
00001035	orl	0x00000144(%esp),%ebp
0000103c	addl	0x00000148(%esp),%ebp
00001043	movl	%ecx,%esi
00001045	roll	$0x05,%esi
00001048	addl	%ebp,%esi
0000104a	movl	0x000000a4(%esp),%ebp
00001051	leal	0x8f1bbcdc(%ebp,%esi),%esi
00001058	roll	$0x1e,%ecx
0000105b	movl	%esi,%ebp
0000105d	andl	%ecx,%ebp
0000105f	movl	%ebp,0x00000148(%esp)
00001066	movl	%esi,%ebp
00001068	orl	%ecx,%ebp
0000106a	andl	%eax,%ebx
0000106c	orl	0x00000140(%esp),%ebx
00001073	addl	%edx,%ebx
00001075	movl	%esi,%edx
00001077	roll	$0x05,%edx
0000107a	addl	%ebx,%edx
0000107c	movl	0x000000a8(%esp),%ebx
00001083	leal	0x8f1bbcdc(%ebx,%edx),%edx
0000108a	roll	$0x1e,%esi
0000108d	movl	%edx,%ebx
0000108f	andl	%esi,%ebx
00001091	movl	%ebx,0x00000144(%esp)
00001098	movl	%edx,%ebx
0000109a	orl	%esi,%ebx
0000109c	andl	%edi,%ebp
0000109e	orl	0x00000148(%esp),%ebp
000010a5	addl	%eax,%ebp
000010a7	movl	%edx,%eax
000010a9	roll	$0x05,%eax
000010ac	addl	%ebp,%eax
000010ae	movl	0x000000ac(%esp),%ebp
000010b5	leal	0x8f1bbcdc(%ebp,%eax),%eax
000010bc	roll	$0x1e,%edx
000010bf	movl	%eax,%ebp
000010c1	andl	%edx,%ebp
000010c3	movl	%ebp,0x00000148(%esp)
000010ca	movl	%eax,%ebp
000010cc	orl	%edx,%ebp
000010ce	andl	%ecx,%ebx
000010d0	orl	0x00000144(%esp),%ebx
000010d7	addl	%edi,%ebx
000010d9	movl	%eax,%edi
000010db	roll	$0x05,%edi
000010de	addl	%ebx,%edi
000010e0	movl	0x000000b0(%esp),%ebx
000010e7	leal	0x8f1bbcdc(%ebx,%edi),%edi
000010ee	roll	$0x1e,%eax
000010f1	movl	%edi,%ebx
000010f3	andl	%eax,%ebx
000010f5	movl	%ebx,0x00000144(%esp)
000010fc	movl	%edi,%ebx
000010fe	orl	%eax,%ebx
00001100	andl	%esi,%ebp
00001102	orl	0x00000148(%esp),%ebp
00001109	addl	%ecx,%ebp
0000110b	movl	%edi,%ecx
0000110d	roll	$0x05,%ecx
00001110	addl	%ebp,%ecx
00001112	movl	0x000000b4(%esp),%ebp
00001119	leal	0x8f1bbcdc(%ebp,%ecx),%ecx
00001120	roll	$0x1e,%edi
00001123	movl	%ecx,%ebp
00001125	andl	%edi,%ebp
00001127	movl	%ebp,0x00000148(%esp)
0000112e	movl	%ecx,%ebp
00001130	orl	%edi,%ebp
00001132	andl	%edx,%ebx
00001134	orl	0x00000144(%esp),%ebx
0000113b	addl	%esi,%ebx
0000113d	movl	%ecx,%esi
0000113f	roll	$0x05,%esi
00001142	addl	%ebx,%esi
00001144	movl	0x000000b8(%esp),%ebx
0000114b	leal	0x8f1bbcdc(%ebx,%esi),%esi
00001152	roll	$0x1e,%ecx
00001155	movl	%esi,%ebx
00001157	andl	%ecx,%ebx
00001159	movl	%ebx,0x00000144(%esp)
00001160	movl	%esi,%ebx
00001162	orl	%ecx,%ebx
00001164	andl	%eax,%ebp
00001166	orl	0x00000148(%esp),%ebp
0000116d	addl	%edx,%ebp
0000116f	movl	%esi,%edx
00001171	roll	$0x05,%edx
00001174	addl	%ebp,%edx
00001176	movl	0x000000bc(%esp),%ebp
0000117d	leal	0x8f1bbcdc(%ebp,%edx),%edx
00001184	roll	$0x1e,%esi
00001187	movl	%edx,%ebp
00001189	andl	%esi,%ebp
0000118b	movl	%ebp,0x00000148(%esp)
00001192	movl	%edx,%ebp
00001194	orl	%esi,%ebp
00001196	andl	%edi,%ebx
00001198	orl	0x00000144(%esp),%ebx
0000119f	addl	%eax,%ebx
000011a1	movl	%edx,%eax
000011a3	roll	$0x05,%eax
000011a6	addl	%ebx,%eax
000011a8	movl	0x000000c0(%esp),%ebx
000011af	leal	0x8f1bbcdc(%ebx,%eax),%eax
000011b6	roll	$0x1e,%edx
000011b9	movl	%eax,%ebx
000011bb	andl	%edx,%ebx
000011bd	movl	%ebx,0x00000144(%esp)
000011c4	movl	%eax,%ebx
000011c6	orl	%edx,%ebx
000011c8	andl	%ecx,%ebp
000011ca	orl	0x00000148(%esp),%ebp
000011d1	addl	%edi,%ebp
000011d3	movl	%eax,%edi
000011d5	roll	$0x05,%edi
000011d8	addl	%ebp,%edi
000011da	movl	0x000000c4(%esp),%ebp
000011e1	leal	0x8f1bbcdc(%ebp,%edi),%edi
000011e8	roll	$0x1e,%eax
000011eb	movl	%edi,%ebp
000011ed	andl	%eax,%ebp
000011ef	movl	%ebp,0x00000148(%esp)
000011f6	movl	%edi,%ebp
000011f8	orl	%eax,%ebp
000011fa	andl	%esi,%ebx
000011fc	orl	0x00000144(%esp),%ebx
00001203	addl	%ecx,%ebx
00001205	movl	%edi,%ecx
00001207	roll	$0x05,%ecx
0000120a	addl	%ebx,%ecx
0000120c	movl	0x000000c8(%esp),%ebx
00001213	leal	0x8f1bbcdc(%ebx,%ecx),%ecx
0000121a	roll	$0x1e,%edi
0000121d	movl	%ecx,%ebx
0000121f	andl	%edi,%ebx
00001221	movl	%ebx,0x00000144(%esp)
00001228	movl	%ecx,%ebx
0000122a	orl	%edi,%ebx
0000122c	andl	%edx,%ebp
0000122e	orl	0x00000148(%esp),%ebp
00001235	addl	%esi,%ebp
00001237	movl	%ecx,%esi
00001239	roll	$0x05,%esi
0000123c	addl	%ebp,%esi
0000123e	movl	0x000000cc(%esp),%ebp
00001245	leal	0x8f1bbcdc(%ebp,%esi),%esi
0000124c	roll	$0x1e,%ecx
0000124f	movl	%esi,%ebp
00001251	andl	%ecx,%ebp
00001253	movl	%ebp,0x00000148(%esp)
0000125a	movl	%esi,%ebp
0000125c	orl	%ecx,%ebp
0000125e	andl	%eax,%ebx
00001260	orl	0x00000144(%esp),%ebx
00001267	addl	%edx,%ebx
00001269	movl	%esi,%edx
0000126b	roll	$0x05,%edx
0000126e	addl	%ebx,%edx
00001270	movl	0x000000d0(%esp),%ebx
00001277	leal	0x8f1bbcdc(%ebx,%edx),%edx
0000127e	roll	$0x1e,%esi
00001281	movl	%edx,%ebx
00001283	andl	%esi,%ebx
00001285	movl	%ebx,0x00000144(%esp)
0000128c	movl	%edx,%ebx
0000128e	orl	%esi,%ebx
00001290	andl	%edi,%ebp
00001292	orl	0x00000148(%esp),%ebp
00001299	addl	%eax,%ebp
0000129b	movl	%edx,%eax
0000129d	roll	$0x05,%eax
000012a0	addl	%ebp,%eax
000012a2	movl	0x000000d4(%esp),%ebp
000012a9	leal	0x8f1bbcdc(%ebp,%eax),%eax
000012b0	roll	$0x1e,%edx
000012b3	movl	%eax,%ebp
000012b5	andl	%edx,%ebp
000012b7	movl	%ebp,0x00000148(%esp)
000012be	movl	%eax,%ebp
000012c0	orl	%edx,%ebp
000012c2	andl	%ecx,%ebx
000012c4	orl	0x00000144(%esp),%ebx
000012cb	addl	%edi,%ebx
000012cd	movl	%eax,%edi
000012cf	roll	$0x05,%edi
000012d2	addl	%ebx,%edi
000012d4	movl	0x000000d8(%esp),%ebx
000012db	leal	0x8f1bbcdc(%ebx,%edi),%edi
000012e2	roll	$0x1e,%eax
000012e5	movl	%edi,%ebx
000012e7	andl	%eax,%ebx
000012e9	movl	%ebx,0x00000144(%esp)
000012f0	movl	%edi,%ebx
000012f2	orl	%eax,%ebx
000012f4	andl	%esi,%ebp
000012f6	orl	0x00000148(%esp),%ebp
000012fd	addl	%ecx,%ebp
000012ff	movl	%edi,%ecx
00001301	roll	$0x05,%ecx
00001304	addl	%ebp,%ecx
00001306	movl	0x000000dc(%esp),%ebp
0000130d	leal	0x8f1bbcdc(%ebp,%ecx),%ebp
00001314	roll	$0x1e,%edi
00001317	movl	%ebp,%ecx
00001319	andl	%edi,%ecx
0000131b	movl	%ecx,0x00000140(%esp)
00001322	movl	%ebp,%ecx
00001324	orl	%edi,%ecx
00001326	andl	%edx,%ebx
00001328	orl	0x00000144(%esp),%ebx
0000132f	addl	%esi,%ebx
00001331	movl	%ebp,%esi
00001333	roll	$0x05,%esi
00001336	addl	%ebx,%esi
00001338	movl	CSHA1::~CSHA1()(%esp),%ebx
0000133f	leal	0x8f1bbcdc(%ebx,%esi),%esi
00001346	roll	$0x1e,%ebp
00001349	movl	%ebp,0x00000148(%esp)
00001350	movl	%esi,%ebx
00001352	andl	%ebp,%ebx
00001354	movl	%ebx,0x00000144(%esp)
0000135b	movl	%esi,%ebx
0000135d	orl	%ebp,%ebx
0000135f	andl	%eax,%ecx
00001361	orl	0x00000140(%esp),%ecx
00001368	addl	%edx,%ecx
0000136a	movl	%esi,%edx
0000136c	roll	$0x05,%edx
0000136f	addl	%ecx,%edx
00001371	movl	0x000000e4(%esp),%ecx
00001378	leal	0x8f1bbcdc(%ecx,%edx),%edx
0000137f	roll	$0x1e,%esi
00001382	movl	%edx,%ebp
00001384	andl	%esi,%ebp
00001386	movl	%edx,%ecx
00001388	orl	%esi,%ecx
0000138a	andl	0x00000148(%esp),%ecx
00001391	orl	%ebp,%ecx
00001393	andl	%edi,%ebx
00001395	addl	%edi,%ecx
00001397	orl	0x00000144(%esp),%ebx
0000139e	addl	%eax,%ebx
000013a0	movl	%edx,%eax
000013a2	roll	$0x05,%eax
000013a5	addl	%ebx,%eax
000013a7	movl	0x000000ec(%esp),%edi
000013ae	leal	0x8f1bbcdc(%edi,%eax),%ebp
000013b5	movl	%ebp,%eax
000013b7	roll	$0x05,%eax
000013ba	addl	%ecx,%eax
000013bc	movl	0x000000e8(%esp),%ecx
000013c3	leal	0x8f1bbcdc(%ecx,%eax),%edi
000013ca	roll	$0x1e,%edx
000013cd	movl	%edx,0x000000ec(%esp)
000013d4	movl	%edx,%ebx
000013d6	xorl	%esi,%ebx
000013d8	xorl	%ebp,%ebx
000013da	roll	$0x1e,%ebp
000013dd	movl	%ebp,%ecx
000013df	xorl	%edx,%ecx
000013e1	xorl	%edi,%ecx
000013e3	movl	%edi,%eax
000013e5	roll	$0x1e,%eax
000013e8	movl	%eax,0x00000144(%esp)
000013ef	xorl	%ebp,%eax
000013f1	roll	$0x05,%edi
000013f4	addl	0x00000148(%esp),%ebx
000013fb	addl	%edi,%ebx
000013fd	movl	0x000000f4(%esp),%edi
00001404	leal	0xca62c1d6(%edi,%ebx),%edi
0000140b	xorl	%edi,%eax
0000140d	movl	%edi,%edx
0000140f	roll	$0x1e,%edx
00001412	movl	%edx,0x00000140(%esp)
00001419	movl	%edx,%ebx
0000141b	xorl	0x00000144(%esp),%ebx
00001422	addl	%esi,%ecx
00001424	roll	$0x05,%edi
00001427	addl	%ecx,%edi
00001429	movl	0x000000fc(%esp),%ecx
00001430	leal	0xca62c1d6(%ecx,%edi),%edi
00001437	xorl	%edi,%ebx
00001439	addl	%ebp,%ebx
0000143b	addl	0x000000ec(%esp),%eax
00001442	movl	%edi,%ecx
00001444	roll	$0x05,%ecx
00001447	addl	%eax,%ecx
00001449	movl	0x000000f8(%esp),%eax
00001450	leal	0xca62c1d6(%eax,%ecx),%ebp
00001457	movl	%ebp,%eax
00001459	roll	$0x05,%eax
0000145c	addl	%ebx,%eax
0000145e	movl	CSHA1::~CSHA1()(%esp),%ecx
00001465	leal	0xca62c1d6(%ecx,%eax),%edx
0000146c	roll	$0x1e,%edi
0000146f	movl	%edi,%esi
00001471	xorl	0x00000140(%esp),%esi
00001478	xorl	%ebp,%esi
0000147a	roll	$0x1e,%ebp
0000147d	movl	%ebp,%eax
0000147f	xorl	%edi,%eax
00001481	xorl	%edx,%eax
00001483	movl	%edx,%ecx
00001485	roll	$0x1e,%ecx
00001488	movl	%ecx,0x00000148(%esp)
0000148f	xorl	%ebp,%ecx
00001491	roll	$0x05,%edx
00001494	addl	0x00000144(%esp),%esi
0000149b	addl	%edx,%esi
0000149d	movl	0x00000104(%esp),%edx
000014a4	leal	0xca62c1d6(%edx,%esi),%esi
000014ab	xorl	%esi,%ecx
000014ad	movl	%esi,%edx
000014af	roll	$0x1e,%edx
000014b2	movl	%edx,0x00000144(%esp)
000014b9	xorl	0x00000148(%esp),%edx
000014c0	addl	0x00000140(%esp),%eax
000014c7	roll	$0x05,%esi
000014ca	addl	%eax,%esi
000014cc	movl	0x0000010c(%esp),%eax
000014d3	leal	0xca62c1d6(%eax,%esi),%esi
000014da	xorl	%esi,%edx
000014dc	addl	%ebp,%edx
000014de	addl	%edi,%ecx
000014e0	movl	%esi,%eax
000014e2	roll	$0x05,%eax
000014e5	addl	%ecx,%eax
000014e7	movl	0x00000108(%esp),%ecx
000014ee	leal	0xca62c1d6(%ecx,%eax),%ebx
000014f5	movl	%ebx,%eax
000014f7	roll	$0x05,%eax
000014fa	addl	%edx,%eax
000014fc	movl	CSHA1::~CSHA1()(%esp),%ecx
00001503	leal	0xca62c1d6(%ecx,%eax),%eax
0000150a	roll	$0x1e,%esi
0000150d	movl	%esi,%edx
0000150f	xorl	0x00000144(%esp),%edx
00001516	xorl	%ebx,%edx
00001518	roll	$0x1e,%ebx
0000151b	movl	%ebx,%ecx
0000151d	xorl	%esi,%ecx
0000151f	xorl	%eax,%ecx
00001521	movl	%eax,%edi
00001523	roll	$0x1e,%edi
00001526	movl	%edi,0x00000140(%esp)
0000152d	movl	%edi,%ebp
0000152f	xorl	%ebx,%ebp
00001531	roll	$0x05,%eax
00001534	addl	0x00000148(%esp),%edx
0000153b	addl	%eax,%edx
0000153d	movl	0x00000114(%esp),%eax
00001544	leal	0xca62c1d6(%eax,%edx),%edx
0000154b	xorl	%edx,%ebp
0000154d	movl	%edx,%eax
0000154f	roll	$0x1e,%eax
00001552	movl	%eax,0x00000114(%esp)
00001559	movl	%eax,%edi
0000155b	xorl	0x00000140(%esp),%edi
00001562	addl	0x00000144(%esp),%ecx
00001569	roll	$0x05,%edx
0000156c	addl	%ecx,%edx
0000156e	movl	0x0000011c(%esp),%ecx
00001575	leal	0xca62c1d6(%ecx,%edx),%edx
0000157c	xorl	%edx,%edi
0000157e	addl	%ebx,%edi
00001580	addl	%esi,%ebp
00001582	movl	%edx,%ecx
00001584	roll	$0x05,%ecx
00001587	addl	%ebp,%ecx
00001589	movl	0x00000118(%esp),%esi
00001590	leal	0xca62c1d6(%esi,%ecx),%ecx
00001597	movl	%ecx,%esi
00001599	roll	$0x05,%esi
0000159c	addl	%edi,%esi
0000159e	movl	CSHA1::Transform(unsigned long*, unsigned char*)(%esp),%edi
000015a5	leal	0xca62c1d6(%edi,%esi),%esi
000015ac	roll	$0x1e,%edx
000015af	movl	%edx,%edi
000015b1	xorl	%eax,%edi
000015b3	xorl	%ecx,%edi
000015b5	roll	$0x1e,%ecx
000015b8	movl	%ecx,%ebx
000015ba	xorl	%edx,%ebx
000015bc	xorl	%esi,%ebx
000015be	movl	%esi,%ebp
000015c0	roll	$0x1e,%ebp
000015c3	movl	%ebp,0x00000148(%esp)
000015ca	xorl	%ecx,%ebp
000015cc	roll	$0x05,%esi
000015cf	addl	0x00000140(%esp),%edi
000015d6	addl	%esi,%edi
000015d8	movl	0x00000124(%esp),%esi
000015df	leal	0xca62c1d6(%esi,%edi),%edi
000015e6	xorl	%edi,%ebp
000015e8	movl	%edi,%eax
000015ea	roll	$0x1e,%eax
000015ed	movl	%eax,0x00000144(%esp)
000015f4	movl	%eax,%esi
000015f6	xorl	0x00000148(%esp),%esi
000015fd	addl	0x00000114(%esp),%ebx
00001604	roll	$0x05,%edi
00001607	addl	%ebx,%edi
00001609	movl	0x0000012c(%esp),%eax
00001610	leal	0xca62c1d6(%eax,%edi),%eax
00001617	xorl	%eax,%esi
00001619	addl	%ecx,%esi
0000161b	addl	%edx,%ebp
0000161d	movl	%eax,%ecx
0000161f	roll	$0x05,%ecx
00001622	addl	%ebp,%ecx
00001624	movl	0x00000128(%esp),%edx
0000162b	leal	0xca62c1d6(%edx,%ecx),%edi
00001632	movl	%edi,%ecx
00001634	roll	$0x05,%ecx
00001637	addl	%esi,%ecx
00001639	movl	0x00000120(%esp),%edx
00001640	leal	0xca62c1d6(%edx,%ecx),%ecx
00001647	roll	$0x1e,%eax
0000164a	movl	%eax,%esi
0000164c	xorl	0x00000144(%esp),%esi
00001653	xorl	%edi,%esi
00001655	roll	$0x1e,%edi
00001658	movl	%edi,%ebp
0000165a	xorl	%eax,%ebp
0000165c	xorl	%ecx,%ebp
0000165e	movl	%ecx,%edx
00001660	roll	$0x1e,%edx
00001663	movl	%edx,0x00000140(%esp)
0000166a	movl	%edx,%ebx
0000166c	xorl	%edi,%ebx
0000166e	roll	$0x05,%ecx
00001671	addl	0x00000148(%esp),%esi
00001678	addl	%ecx,%esi
0000167a	movl	0x00000134(%esp),%ecx
00001681	leal	0xca62c1d6(%ecx,%esi),%esi
00001688	xorl	%esi,%ebx
0000168a	movl	%esi,%edx
0000168c	roll	$0x1e,%edx
0000168f	movl	%edx,%ecx
00001691	xorl	0x00000140(%esp),%ecx
00001698	addl	0x00000144(%esp),%ebp
0000169f	roll	$0x05,%esi
000016a2	addl	%ebp,%esi
000016a4	movl	0x00000138(%esp),%ebp
000016ab	leal	0xca62c1d6(%ebp,%esi),%ebp
000016b2	xorl	%ebp,%ecx
000016b4	addl	%edi,%ecx
000016b6	movl	0x00000164(%esp),%edi
000016bd	addl	(%edi),%ecx
000016bf	addl	%eax,%ebx
000016c1	movl	%ebp,%eax
000016c3	roll	$0x05,%eax
000016c6	addl	%ebx,%eax
000016c8	movl	0x0000013c(%esp),%esi
000016cf	leal	0xca62c1d6(%esi,%eax),%eax
000016d6	movl	%eax,%esi
000016d8	roll	$0x05,%esi
000016db	addl	%ecx,%esi
000016dd	movl	0x00000130(%esp),%ecx
000016e4	leal	0xca62c1d6(%ecx,%esi),%ecx
000016eb	movl	%edi,%esi
000016ed	movl	%ecx,(%esi)
000016ef	addl	%eax,0x04(%esi)
000016f2	roll	$0x1e,%ebp
000016f5	addl	%ebp,0x08(%esi)
000016f8	addl	%edx,0x0c(%esi)
000016fb	movl	0x00000140(%esp),%eax
00001702	addl	%eax,0x10(%esi)
00001705	addl	$0x0000014c,%esp
0000170b	popl	%esi
0000170c	popl	%edi
0000170d	popl	%ebx
0000170e	popl	%ebp
0000170f	ret
CSHA1::Update(unsigned char*, unsigned int):
00001710	pushl	%ebp
00001711	movl	%esp,%ebp
00001713	pushl	%ebx
00001714	pushl	%edi
00001715	pushl	%esi
00001716	subl	$0x1c,%esp
00001719	movl	0x08(%ebp),%ebx
0000171c	movl	0x18(%ebx),%edi
0000171f	movl	0x10(%ebp),%edx
00001722	leal	CSHA1::CSHA1()(,%edx,8),%eax
00001729	addl	%edi,%eax
0000172b	movl	%eax,0x18(%ebx)
0000172e	movl	0x1c(%ebx),%eax
00001731	jae	0x00001737
00001733	incl	%eax
00001734	movl	%eax,0x1c(%ebx)
00001737	shrl	$0x03,%edi
0000173a	andl	$0x3f,%edi
0000173d	leal	(%edi,%edx),%ecx
00001740	shrl	$0x1d,%edx
00001743	addl	%eax,%edx
00001745	movl	%edx,0x1c(%ebx)
00001748	xorl	%esi,%esi
0000174a	cmpl	$0x40,%ecx
0000174d	jae	0x00001757
0000174f	movl	0x10(%ebp),%ebx
00001752	jmp	0x000017d6
00001757	movl	$0x00000040,%esi
0000175c	subl	%edi,%esi
0000175e	movl	%esi,0x08(%esp)
00001762	movl	0x0c(%ebp),%eax
00001765	movl	%eax,0x04(%esp)
00001769	leal	0x20(%ebx,%edi),%eax
0000176d	movl	%eax,(%esp)
00001770	calll	_memcpy
00001775	movl	%ebx,(%esp)
00001778	leal	0x20(%ebx),%eax
0000177b	movl	%eax,0x08(%esp)
0000177f	leal	0x04(%ebx),%ebx
00001782	movl	%ebx,0x04(%esp)
00001786	movl	$0x0000007f,%eax
0000178b	subl	%edi,%eax
0000178d	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001790	calll	CSHA1::Transform(unsigned long*, unsigned char*)
00001795	xorl	%edi,%edi
00001797	movl	0x10(%ebp),%eax
0000179a	cmpl	%eax,CSHA1::~CSHA1()(%ebp)
0000179d	jb	0x000017a3
0000179f	movl	%eax,%ebx
000017a1	jmp	0x000017d6
000017a3	movl	%ebx,CSHA1::~CSHA1()(%ebp)
000017a6	movl	%eax,%ebx
000017a8	xorl	%edi,%edi
000017aa	nopw	CSHA1::CSHA1()(%eax,%eax)
000017b0	movl	0x0c(%ebp),%eax
000017b3	leal	(%eax,%esi),%eax
000017b6	movl	%eax,0x08(%esp)
000017ba	movl	CSHA1::~CSHA1()(%ebp),%eax
000017bd	movl	%eax,0x04(%esp)
000017c1	movl	0x08(%ebp),%eax
000017c4	movl	%eax,(%esp)
000017c7	calll	CSHA1::Transform(unsigned long*, unsigned char*)
000017cc	leal	0x7f(%esi),%eax
000017cf	leal	0x40(%esi),%esi
000017d2	cmpl	%ebx,%eax
000017d4	jb	0x000017b0
000017d6	subl	%esi,%ebx
000017d8	movl	%ebx,0x08(%esp)
000017dc	movl	0x0c(%ebp),%eax
000017df	addl	%esi,%eax
000017e1	movl	%eax,0x04(%esp)
000017e5	movl	0x08(%ebp),%eax
000017e8	leal	0x20(%eax,%edi),%eax
000017ec	movl	%eax,(%esp)
000017ef	calll	_memcpy
000017f4	addl	$0x1c,%esp
000017f7	popl	%esi
000017f8	popl	%edi
000017f9	popl	%ebx
000017fa	popl	%ebp
000017fb	ret
000017fc	nopl	CSHA1::CSHA1()(%eax)
CSHA1::HashFile(char*):
00001800	pushl	%ebp
00001801	movl	%esp,%ebp
00001803	pushl	%ebx
00001804	pushl	%edi
00001805	pushl	%esi
00001806	subl	$0x00001f6c,%esp
0000180c	calll	0x00001811
00001811	popl	%ecx
00001812	movl	0x439f-0x1811(%ecx),%eax
00001818	movl	%eax,0xffffe0a8(%ebp)
0000181e	movl	(%eax),%eax
00001820	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001823	xorb	%al,%al
00001825	movl	0x0c(%ebp),%edx
00001828	testl	%edx,%edx
0000182a	je	0x00001953
00001830	leal	0x3e20-0x1811(%ecx),%eax
00001836	movl	%eax,0x04(%esp)
0000183a	movl	%edx,(%esp)
0000183d	calll	_fopen
00001842	movl	%eax,%esi
00001844	xorb	%al,%al
00001846	testl	%esi,%esi
00001848	je	0x00001953
0000184e	movl	%esi,(%esp)
00001851	movl	$0x00000002,0x08(%esp)
00001859	movl	CSHA1::CSHA1(),0x04(%esp)
00001861	calll	_fseek
00001866	movl	%esi,(%esp)
00001869	calll	_ftell
0000186e	movl	%eax,%edi
00001870	movl	%edi,0xffffe0a4(%ebp)
00001876	movl	%esi,(%esp)
00001879	movl	CSHA1::CSHA1(),0x08(%esp)
00001881	movl	CSHA1::CSHA1(),0x04(%esp)
00001889	movl	$0x10624dd3,%ecx
0000188e	movl	%edi,%eax
00001890	mull	%ecx
00001892	shrl	$0x09,%edx
00001895	movl	%edx,0xffffe0ac(%ebp)
0000189b	calll	_fseek
000018a0	cmpl	$0x00001f40,%edi
000018a6	movl	%esi,%ecx
000018a8	jb	0x00001900
000018aa	xorl	%edi,%edi
000018ac	leal	0xffffe0b0(%ebp),%ebx
000018b2	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
000018c0	movl	%ecx,0x0c(%esp)
000018c4	movl	%ebx,(%esp)
000018c7	movl	$0x00001f40,0x08(%esp)
000018cf	movl	$0x00000001,0x04(%esp)
000018d7	movl	%ecx,%esi
000018d9	calll	_fread
000018de	movl	%ebx,0x04(%esp)
000018e2	movl	0x08(%ebp),%eax
000018e5	movl	%eax,(%esp)
000018e8	movl	$0x00001f40,0x08(%esp)
000018f0	calll	CSHA1::Update(unsigned char*, unsigned int)
000018f5	movl	%esi,%ecx
000018f7	incl	%edi
000018f8	cmpl	0xffffe0ac(%ebp),%edi
000018fe	jb	0x000018c0
00001900	imull	$0x00001f40,0xffffe0ac(%ebp),%eax
0000190a	movl	0xffffe0a4(%ebp),%ebx
00001910	subl	%eax,%ebx
00001912	testl	%ebx,%ebx
00001914	movl	%ecx,%edi
00001916	je	0x00001949
00001918	movl	%edi,0x0c(%esp)
0000191c	movl	%ebx,0x08(%esp)
00001920	leal	0xffffe0b0(%ebp),%esi
00001926	movl	%esi,(%esp)
00001929	movl	$0x00000001,0x04(%esp)
00001931	calll	_fread
00001936	movl	%ebx,0x08(%esp)
0000193a	movl	%esi,0x04(%esp)
0000193e	movl	0x08(%ebp),%eax
00001941	movl	%eax,(%esp)
00001944	calll	CSHA1::Update(unsigned char*, unsigned int)
00001949	movl	%edi,(%esp)
0000194c	calll	_fclose
00001951	movb	$0x01,%al
00001953	movl	0xffffe0a8(%ebp),%ecx
00001959	movl	(%ecx),%ecx
0000195b	cmpl	CSHA1::~CSHA1()(%ebp),%ecx
0000195e	jne	0x0000196e
00001960	movzbl	%al,%eax
00001963	addl	$0x00001f6c,%esp
00001969	popl	%esi
0000196a	popl	%edi
0000196b	popl	%ebx
0000196c	popl	%ebp
0000196d	ret
0000196e	calll	___stack_chk_fail
00001973	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::Final():
00001980	pushl	%ebp
00001981	movl	%esp,%ebp
00001983	pushl	%ebx
00001984	pushl	%edi
00001985	pushl	%esi
00001986	subl	$0x1c,%esp
00001989	calll	0x0000198e
0000198e	popl	%edi
0000198f	movl	CSHA1::CSHA1(),0xec(%ebp)
00001996	movl	CSHA1::CSHA1(),0xe8(%ebp)
0000199d	movl	0x08(%ebp),%esi
000019a0	movl	0x1c(%esi),%eax
000019a3	movl	%eax,%ecx
000019a5	shrl	$0x18,%ecx
000019a8	movb	%cl,0xe8(%ebp)
000019ab	movl	%eax,%ecx
000019ad	shrl	$0x10,%ecx
000019b0	movb	%cl,0xe9(%ebp)
000019b3	movb	%ah,0xea(%ebp)
000019b6	movb	%al,0xeb(%ebp)
000019b9	movl	0x18(%esi),%eax
000019bc	movl	%eax,%ecx
000019be	shrl	$0x18,%ecx
000019c1	movb	%cl,0xec(%ebp)
000019c4	movl	%eax,%ecx
000019c6	shrl	$0x10,%ecx
000019c9	movb	%cl,0xed(%ebp)
000019cc	movb	%ah,0xee(%ebp)
000019cf	movb	%al,0xef(%ebp)
000019d2	leal	0x3e23-0x198e(%edi),%eax
000019d8	movl	%eax,0x04(%esp)
000019dc	movl	%esi,(%esp)
000019df	movl	$0x00000001,0x08(%esp)
000019e7	calll	CSHA1::Update(unsigned char*, unsigned int)
000019ec	movl	$0x000001f8,%ebx
000019f1	movl	0x18(%esi),%eax
000019f4	andl	%ebx,%eax
000019f6	cmpl	$0x000001c0,%eax
000019fb	je	0x00001a30
000019fd	leal	0x3e53-0x198e(%edi),%edi
00001a03	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
00001a10	movl	%edi,0x04(%esp)
00001a14	movl	%esi,(%esp)
00001a17	movl	$0x00000001,0x08(%esp)
00001a1f	calll	CSHA1::Update(unsigned char*, unsigned int)
00001a24	movl	0x18(%esi),%eax
00001a27	andl	%ebx,%eax
00001a29	cmpl	$0x000001c0,%eax
00001a2e	jne	0x00001a10
00001a30	leal	0xe8(%ebp),%eax
00001a33	movl	%eax,0x04(%esp)
00001a37	movl	%esi,(%esp)
00001a3a	movl	$0x00000008,0x08(%esp)
00001a42	calll	CSHA1::Update(unsigned char*, unsigned int)
00001a47	xorl	%eax,%eax
00001a49	nopl	CSHA1::CSHA1()(%eax)
00001a50	movl	%eax,%ecx
00001a52	andl	$0xfc,%ecx
00001a55	movl	0x04(%esi,%ecx),%edx
00001a59	leal	CSHA1::CSHA1()(,%eax,8),%ecx
00001a60	andl	$0x18,%ecx
00001a63	xorl	$0x18,%ecx
00001a66	shrl	%cl,%edx
00001a68	movb	%dl,0x60(%esi,%eax)
00001a6c	incl	%eax
00001a6d	cmpl	$0x14,%eax
00001a70	jne	0x00001a50
00001a72	movl	CSHA1::CSHA1(),0x08(%esi)
00001a79	movl	CSHA1::CSHA1(),0x04(%esi)
00001a80	movl	CSHA1::CSHA1(),0x10(%esi)
00001a87	movl	CSHA1::CSHA1(),0x0c(%esi)
00001a8e	movl	CSHA1::CSHA1(),0x18(%esi)
00001a95	movl	CSHA1::CSHA1(),0x14(%esi)
00001a9c	movl	CSHA1::CSHA1(),0x20(%esi)
00001aa3	movl	CSHA1::CSHA1(),0x1c(%esi)
00001aaa	movl	CSHA1::CSHA1(),0x28(%esi)
00001ab1	movl	CSHA1::CSHA1(),0x24(%esi)
00001ab8	movl	CSHA1::CSHA1(),0x30(%esi)
00001abf	movl	CSHA1::CSHA1(),0x2c(%esi)
00001ac6	movl	CSHA1::CSHA1(),0x38(%esi)
00001acd	movl	CSHA1::CSHA1(),0x34(%esi)
00001ad4	movl	CSHA1::CSHA1(),0x40(%esi)
00001adb	movl	CSHA1::CSHA1(),0x3c(%esi)
00001ae2	movl	CSHA1::CSHA1(),0x48(%esi)
00001ae9	movl	CSHA1::CSHA1(),0x44(%esi)
00001af0	movl	CSHA1::CSHA1(),CSHA1::CSHA1()(%esi)
00001af7	movl	CSHA1::CSHA1(),0x4c(%esi)
00001afe	movl	CSHA1::CSHA1(),0x58(%esi)
00001b05	movl	CSHA1::CSHA1(),0x54(%esi)
00001b0c	movl	CSHA1::CSHA1(),0x5c(%esi)
00001b13	movl	%esi,(%esp)
00001b16	leal	0x20(%esi),%eax
00001b19	movl	%eax,0x08(%esp)
00001b1d	addl	$0x04,%esi
00001b20	movl	%esi,0x04(%esp)
00001b24	calll	CSHA1::Transform(unsigned long*, unsigned char*)
00001b29	addl	$0x1c,%esp
00001b2c	popl	%esi
00001b2d	popl	%edi
00001b2e	popl	%ebx
00001b2f	popl	%ebp
00001b30	ret
00001b31	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::ReportHash(char*, unsigned char):
00001b40	pushl	%ebp
00001b41	movl	%esp,%ebp
00001b43	pushl	%ebx
00001b44	pushl	%edi
00001b45	pushl	%esi
00001b46	subl	$0x2c,%esp
00001b49	calll	0x00001b4e
00001b4e	popl	%edx
00001b4f	movl	0x439f-0x1b4e(%edx),%eax
00001b55	movl	%eax,0xdc(%ebp)
00001b58	movl	(%eax),%eax
00001b5a	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001b5d	movl	0x0c(%ebp),%esi
00001b60	testl	%esi,%esi
00001b62	je	0x00001c8f
00001b68	movb	0x10(%ebp),%al
00001b6b	movl	0x08(%ebp),%ecx
00001b6e	cmpb	$0x01,%al
00001b70	je	0x00001bf2
00001b76	testb	%al,%al
00001b78	movl	%esi,%edi
00001b7a	jne	0x00001c5f
00001b80	movzbl	0x60(%ecx),%eax
00001b84	movl	%eax,0x08(%esp)
00001b88	leal	0x3e25-0x1b4e(%edx),%eax
00001b8e	movl	%eax,0x04(%esp)
00001b92	leal	0xe4(%ebp),%esi
00001b95	movl	%esi,(%esp)
00001b98	movl	%edx,CSHA1::~CSHA1()(%ebp)
00001b9b	calll	_sprintf
00001ba0	movl	%esi,0x04(%esp)
00001ba4	movl	%edi,(%esp)
00001ba7	calll	_strcat
00001bac	xorl	%ebx,%ebx
00001bae	movl	CSHA1::~CSHA1()(%ebp),%eax
00001bb1	leal	0x3e2a-0x1b4e(%eax),%eax
00001bb7	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001bba	nopw	CSHA1::CSHA1()(%eax,%eax)
00001bc0	movl	0x08(%ebp),%eax
00001bc3	movzbl	0x61(%eax,%ebx),%eax
00001bc8	movl	%eax,0x08(%esp)
00001bcc	movl	CSHA1::~CSHA1()(%ebp),%eax
00001bcf	movl	%eax,0x04(%esp)
00001bd3	movl	%esi,(%esp)
00001bd6	calll	_sprintf
00001bdb	movl	%esi,0x04(%esp)
00001bdf	movl	%edi,(%esp)
00001be2	calll	_strcat
00001be7	incl	%ebx
00001be8	cmpb	$0x13,%bl
00001beb	jne	0x00001bc0
00001bed	jmp	0x00001c8f
00001bf2	movzbl	0x60(%ecx),%eax
00001bf6	movl	%eax,0x08(%esp)
00001bfa	leal	0x3e30-0x1b4e(%edx),%eax
00001c00	movl	%eax,0x04(%esp)
00001c04	leal	0xe4(%ebp),%edi
00001c07	movl	%edi,(%esp)
00001c0a	movl	%edx,CSHA1::~CSHA1()(%ebp)
00001c0d	calll	_sprintf
00001c12	movl	%edi,0x04(%esp)
00001c16	movl	%esi,(%esp)
00001c19	calll	_strcat
00001c1e	xorl	%ebx,%ebx
00001c20	movl	CSHA1::~CSHA1()(%ebp),%eax
00001c23	leal	0x3e33-0x1b4e(%eax),%eax
00001c29	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001c2c	nopl	CSHA1::CSHA1()(%eax)
00001c30	movl	0x08(%ebp),%eax
00001c33	movzbl	0x61(%eax,%ebx),%eax
00001c38	movl	%eax,0x08(%esp)
00001c3c	movl	CSHA1::~CSHA1()(%ebp),%eax
00001c3f	movl	%eax,0x04(%esp)
00001c43	movl	%edi,(%esp)
00001c46	calll	_sprintf
00001c4b	movl	%edi,0x04(%esp)
00001c4f	movl	%esi,(%esp)
00001c52	calll	_strcat
00001c57	incl	%ebx
00001c58	cmpb	$0x13,%bl
00001c5b	jne	0x00001c30
00001c5d	jmp	0x00001c8f
00001c5f	movl	$0x00216570,0x18(%edi)
00001c66	movl	$0x79742074,0x14(%edi)
00001c6d	movl	$0x726f7065,0x10(%edi)
00001c74	movl	$0x72206e77,0x0c(%edi)
00001c7b	movl	$0x6f6e6b6e,0x08(%edi)
00001c82	movl	$0x55203a72,0x04(%edi)
00001c89	movl	$0x6f727245,(%edi)
00001c8f	movl	0xdc(%ebp),%eax
00001c92	movl	(%eax),%eax
00001c94	cmpl	CSHA1::~CSHA1()(%ebp),%eax
00001c97	jne	0x00001ca1
00001c99	addl	$0x2c,%esp
00001c9c	popl	%esi
00001c9d	popl	%edi
00001c9e	popl	%ebx
00001c9f	popl	%ebp
00001ca0	ret
00001ca1	calll	___stack_chk_fail
00001ca6	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::GetHash(unsigned char*):
00001cb0	movl	0x04(%esp),%ecx
00001cb4	movl	0x70(%ecx),%edx
00001cb7	movl	0x08(%esp),%eax
00001cbb	movl	%edx,0x10(%eax)
00001cbe	movsd	0x60(%ecx),%xmm0
00001cc3	movsd	0x68(%ecx),%xmm1
00001cc8	movsd	%xmm1,0x08(%eax)
00001ccd	movsd	%xmm0,(%eax)
00001cd1	ret
00001cd2	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
HashLessFunc(unsigned char const (&) [20], unsigned char const (&) [20]):
00001ce0	pushl	%ebp
00001ce1	movl	%esp,%ebp
00001ce3	subl	$0x18,%esp
00001ce6	movl	0x0c(%ebp),%eax
00001ce9	movl	%eax,0x04(%esp)
00001ced	movl	0x08(%ebp),%eax
00001cf0	movl	%eax,(%esp)
00001cf3	movl	$0x00000014,0x08(%esp)
00001cfb	calll	_memcmp
00001d00	shrl	$0x1f,%eax
00001d03	addl	$0x18,%esp
00001d06	popl	%ebp
00001d07	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(commandbuffer.o):
(__TEXT,__text) section
CCommandBuffer::CCommandBuffer():
00000000	jmp	CCommandBuffer::CCommandBuffer()
00000005	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::CCommandBuffer():
00000010	pushl	%ebp
00000011	movl	%esp,%ebp
00000013	pushl	%ebx
00000014	pushl	%edi
00000015	pushl	%esi
00000016	subl	$0x0c,%esp
00000019	calll	0x0000001e
0000001e	popl	%eax
0000001f	movl	%eax,0xf0(%ebp)
00000022	movl	0x08(%ebp),%edi
00000025	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%edi)
0000002f	movl	$0x00000020,0x00002010(%edi)
00000039	movl	$0x00000020,0x0000200c(%edi)
00000043	movl	$0x00000288,(%esp)
0000004a	leal	0x00002008(%edi),%ebx
00000050	calll	_malloc
00000055	movl	%eax,%esi
00000057	testl	%esi,%esi
00000059	je	0x0000006c
0000005b	movl	CCommandBuffer::CCommandBuffer(),(%esi)
00000061	movl	$0x00000020,0x04(%esi)
00000068	movl	%esi,(%ebx)
0000006a	jmp	0x000000aa
0000006c	movl	0xf0(%ebp),%eax
0000006f	leal	0xe0d4-0x1e(%eax),%eax
00000075	movl	%eax,(%esp)
00000078	calll	_Error
0000007d	movl	(%ebx),%eax
0000007f	movl	CCommandBuffer::CCommandBuffer(),(%esi)
00000085	movl	$0x00000020,0x04(%esi)
0000008c	testl	%eax,%eax
0000008e	jne	0x000000a0
00000090	movl	%esi,(%ebx)
00000092	jmp	0x000000aa
00000094	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
000000a0	movl	%eax,%ecx
000000a2	movl	(%ecx),%eax
000000a4	testl	%eax,%eax
000000a6	jne	0x000000a0
000000a8	movl	%esi,(%ecx)
000000aa	movl	CCommandBuffer::CCommandBuffer(),0x00002018(%edi)
000000b4	movl	CCommandBuffer::CCommandBuffer(),0x00002014(%edi)
000000be	movl	CCommandBuffer::CCommandBuffer(),0x00002020(%edi)
000000c8	movl	CCommandBuffer::CCommandBuffer(),0x0000201c(%edi)
000000d2	movl	CCommandBuffer::CCommandBuffer(),0x00002030(%edi)
000000dc	movl	CCommandBuffer::CCommandBuffer(),0x0000202c(%edi)
000000e6	movl	CCommandBuffer::CCommandBuffer(),0x00002028(%edi)
000000f0	movl	CCommandBuffer::CCommandBuffer(),0x00002024(%edi)
000000fa	leal	0x0000204c(%edi),%eax
00000100	movl	%eax,(%esp)
00000103	calll	CCommand::CCommand()
00000108	movl	CCommandBuffer::CCommandBuffer(),0x00002040(%edi)
00000112	movl	$0x00000001,0x0000203c(%edi)
0000011c	movl	CCommandBuffer::CCommandBuffer(),0x00002034(%edi)
00000126	movl	$0xffffffff,0x00002038(%edi)
00000130	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
0000013a	movb	CCommandBuffer::CCommandBuffer(),0x00002048(%edi)
00000141	movl	$0x00002000,0x00002044(%edi)
0000014b	addl	$0x0c,%esp
0000014e	popl	%esi
0000014f	popl	%edi
00000150	popl	%ebx
00000151	popl	%ebp
00000152	ret
00000153	movl	%eax,%esi
00000155	movl	%ebx,(%esp)
00000158	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
0000015d	movl	(%ebx),%eax
0000015f	testl	%eax,%eax
00000161	je	0x00000194
00000163	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000170	movl	(%eax),%ebx
00000172	movl	%eax,(%esp)
00000175	calll	_free
0000017a	testl	%ebx,%ebx
0000017c	movl	%ebx,%eax
0000017e	jne	0x00000170
00000180	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%edi)
0000018a	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%edi)
00000194	movl	%esi,(%esp)
00000197	calll	__Unwind_Resume
0000019c	nopl	CCommandBuffer::CCommandBuffer()(%eax)
CCommandBuffer::~CCommandBuffer():
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	pushl	%edi
000001a4	pushl	%esi
000001a5	subl	CCommandBuffer::CCommandBuffer(),%esp
000001a8	movl	0x08(%ebp),%esi
000001ab	leal	0x00002008(%esi),%eax
000001b1	movl	%eax,(%esp)
000001b4	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
000001b9	movl	0x00002008(%esi),%eax
000001bf	testl	%eax,%eax
000001c1	je	0x000001f4
000001c3	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
000001d0	movl	(%eax),%edi
000001d2	movl	%eax,(%esp)
000001d5	calll	_free
000001da	testl	%edi,%edi
000001dc	movl	%edi,%eax
000001de	jne	0x000001d0
000001e0	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%esi)
000001ea	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%esi)
000001f4	addl	CCommandBuffer::CCommandBuffer(),%esp
000001f7	popl	%esi
000001f8	popl	%edi
000001f9	popl	%ebp
000001fa	ret
000001fb	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::~CCommandBuffer():
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	pushl	%edi
00000204	pushl	%esi
00000205	subl	CCommandBuffer::CCommandBuffer(),%esp
00000208	movl	0x08(%ebp),%esi
0000020b	leal	0x00002008(%esi),%eax
00000211	movl	%eax,(%esp)
00000214	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
00000219	movl	0x00002008(%esi),%eax
0000021f	testl	%eax,%eax
00000221	je	0x00000254
00000223	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000230	movl	(%eax),%edi
00000232	movl	%eax,(%esp)
00000235	calll	_free
0000023a	testl	%edi,%edi
0000023c	movl	%edi,%eax
0000023e	jne	0x00000230
00000240	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%esi)
0000024a	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%esi)
00000254	addl	CCommandBuffer::CCommandBuffer(),%esp
00000257	popl	%esi
00000258	popl	%edi
00000259	popl	%ebp
0000025a	ret
0000025b	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::SetWaitDelayTime(int):
00000260	movl	0x08(%esp),%eax
00000264	movl	0x04(%esp),%ecx
00000268	movl	%eax,0x0000203c(%ecx)
0000026e	ret
0000026f	nop
CCommandBuffer::LimitArgumentBufferSize(int):
00000270	movl	$0x00002000,%ecx
00000275	movl	0x08(%esp),%eax
00000279	cmpl	$0x00002000,%eax
0000027e	cmovgl	%ecx,%eax
00000281	testl	%eax,%eax
00000283	cmovel	%ecx,%eax
00000286	movl	0x04(%esp),%ecx
0000028a	movl	%eax,0x00002044(%ecx)
00000290	ret
00000291	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::ParseArgV0(CUtlBuffer&, char*, int, char const**):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	pushl	%ebx
000002a4	pushl	%edi
000002a5	pushl	%esi
000002a6	subl	$0x1c,%esp
000002a9	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
000002ac	movb	CCommandBuffer::CCommandBuffer(),(%esi)
000002af	movl	0x18(%ebp),%eax
000002b2	movl	CCommandBuffer::CCommandBuffer(),(%eax)
000002b8	xorb	%cl,%cl
000002ba	movl	0x0c(%ebp),%edi
000002bd	cmpb	CCommandBuffer::CCommandBuffer(),0x14(%edi)
000002c1	jne	0x0000030d
000002c3	movl	0x14(%ebp),%ebx
000002c6	calll	CCommand::DefaultBreakSet()
000002cb	movl	%ebx,0x0c(%esp)
000002cf	movl	%esi,0x08(%esp)
000002d3	movl	%eax,0x04(%esp)
000002d7	movl	%edi,(%esp)
000002da	movl	$0x00000001,CCommandBuffer::CCommandBuffer()(%esp)
000002e2	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
000002e7	xorb	%cl,%cl
000002e9	testl	%eax,%eax
000002eb	jle	0x0000030d
000002ed	cmpl	%ebx,%eax
000002ef	je	0x0000030d
000002f1	movl	0x0c(%edi),%eax
000002f4	movl	0x1c(%edi),%edx
000002f7	subl	%eax,%edx
000002f9	xorl	%ecx,%ecx
000002fb	testl	%edx,%edx
000002fd	jle	0x00000306
000002ff	subl	0x20(%edi),%eax
00000302	addl	(%edi),%eax
00000304	movl	%eax,%ecx
00000306	movl	0x18(%ebp),%eax
00000309	movl	%ecx,(%eax)
0000030b	movb	$0x01,%cl
0000030d	movzbl	%cl,%eax
00000310	addl	$0x1c,%esp
00000313	popl	%esi
00000314	popl	%edi
00000315	popl	%ebx
00000316	popl	%ebp
00000317	ret
00000318	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertCommandAtAppropriateTime(int):
00000320	pushl	%ebp
00000321	movl	%esp,%ebp
00000323	pushl	%ebx
00000324	pushl	%edi
00000325	pushl	%esi
00000326	subl	$0x0c,%esp
00000329	movl	0x08(%ebp),%esi
0000032c	leal	0x00002014(%esi),%edi
00000332	movl	%edi,0xf0(%ebp)
00000335	leal	0x00002008(%esi),%eax
0000033b	movl	0x0c(%ebp),%ebx
0000033e	jmp	0x00000349
00000340	movl	(%edi),%ecx
00000342	cmpl	(%ebx),%ecx
00000344	jg	0x00000373
00000346	addl	CCommandBuffer::CCommandBuffer(),%edi
00000349	movl	(%edi),%edi
0000034b	testl	%edi,%edi
0000034d	jne	0x00000340
0000034f	movl	%ebx,0x04(%esp)
00000353	movl	%eax,(%esp)
00000356	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
0000035b	movl	CCommandBuffer::CCommandBuffer(),CCommandBuffer::CCommandBuffer()(%ebx)
00000362	movl	0x00002018(%esi),%eax
00000368	movl	%eax,0x0c(%ebx)
0000036b	movl	%ebx,0x00002018(%esi)
00000371	jmp	0x0000038b
00000373	movl	%ebx,0x04(%esp)
00000377	movl	%eax,(%esp)
0000037a	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
0000037f	movl	%edi,CCommandBuffer::CCommandBuffer()(%ebx)
00000382	movl	0x0c(%edi),%eax
00000385	movl	%eax,0x0c(%ebx)
00000388	movl	%ebx,0x0c(%edi)
0000038b	testl	%eax,%eax
0000038d	jne	0x00000396
0000038f	movl	0xf0(%ebp),%eax
00000392	movl	%ebx,(%eax)
00000394	jmp	0x00000399
00000396	movl	%ebx,CCommandBuffer::CCommandBuffer()(%eax)
00000399	incl	0x00002020(%esi)
0000039f	addl	$0x0c,%esp
000003a2	popl	%esi
000003a3	popl	%edi
000003a4	popl	%ebx
000003a5	popl	%ebp
000003a6	ret
000003a7	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertImmediateCommand(int):
000003b0	pushl	%ebp
000003b1	movl	%esp,%ebp
000003b3	pushl	%ebx
000003b4	pushl	%edi
000003b5	pushl	%esi
000003b6	subl	$0x0c,%esp
000003b9	movl	0x08(%ebp),%esi
000003bc	movl	0x00002040(%esi),%ebx
000003c2	movl	0x0c(%ebp),%edi
000003c5	movl	%edi,0x04(%esp)
000003c9	leal	0x00002008(%esi),%eax
000003cf	movl	%eax,(%esp)
000003d2	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000003d7	movl	%ebx,CCommandBuffer::CCommandBuffer()(%edi)
000003da	testl	%ebx,%ebx
000003dc	jne	0x000003ef
000003de	movl	0x00002018(%esi),%eax
000003e4	movl	%eax,0x0c(%edi)
000003e7	movl	%edi,0x00002018(%esi)
000003ed	jmp	0x000003f8
000003ef	movl	0x0c(%ebx),%eax
000003f2	movl	%eax,0x0c(%edi)
000003f5	movl	%edi,0x0c(%ebx)
000003f8	testl	%eax,%eax
000003fa	jne	0x00000404
000003fc	movl	%edi,0x00002014(%esi)
00000402	jmp	0x00000407
00000404	movl	%edi,CCommandBuffer::CCommandBuffer()(%eax)
00000407	incl	0x00002020(%esi)
0000040d	addl	$0x0c,%esp
00000410	popl	%esi
00000411	popl	%edi
00000412	popl	%ebx
00000413	popl	%ebp
00000414	ret
00000415	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertCommand(char const*, int, int):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x0000201c,%esp
0000042c	calll	0x00000431
00000431	popl	%eax
00000432	movl	0xff93-0x431(%eax),%ecx
00000438	movl	%ecx,0xffffdfe8(%ebp)
0000043e	movl	(%ecx),%ecx
00000440	movl	%ecx,0xf0(%ebp)
00000443	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
00000446	movl	0x0c(%ebp),%ecx
00000449	cmpl	$0x000001ff,%esi
0000044f	jl	0x0000046a
00000451	movl	%ecx,0x04(%esp)
00000455	leal	0xe01d-0x431(%eax),%eax
0000045b	movl	%eax,(%esp)
0000045e	calll	_Warning
00000463	xorb	%cl,%cl
00000465	jmp	0x00000639
0000046a	movl	0x08(%ebp),%ebx
0000046d	movl	0x00002004(%ebx),%eax
00000473	leal	0x01(%esi,%eax),%ecx
00000477	leal	0x01(%esi),%edi
0000047a	cmpl	0x00002044(%ebx),%ecx
00000480	jle	0x0000050e
00000486	movl	%edi,0xffffdfec(%ebp)
0000048c	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%ebx)
00000496	movl	0x00002014(%ebx),%esi
0000049c	xorl	%edi,%edi
0000049e	jmp	0x000004d4
000004a0	movl	0x04(%esi),%eax
000004a3	addl	%ebx,%eax
000004a5	movl	0x08(%esi),%ecx
000004a8	movl	%ecx,0x08(%esp)
000004ac	movl	%eax,0x04(%esp)
000004b0	leal	0xffffdff0(%ebp,%edi),%eax
000004b7	movl	%eax,(%esp)
000004ba	calll	_memcpy
000004bf	movl	%edi,0x04(%esi)
000004c2	movl	0x00002004(%ebx),%edi
000004c8	addl	0x08(%esi),%edi
000004cb	movl	%edi,0x00002004(%ebx)
000004d1	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
000004d4	testl	%esi,%esi
000004d6	jne	0x000004a0
000004d8	movl	%edi,0x08(%esp)
000004dc	leal	0xffffdff0(%ebp),%eax
000004e2	movl	%eax,0x04(%esp)
000004e6	movl	%ebx,(%esp)
000004e9	calll	_memcpy
000004ee	movl	0x00002004(%ebx),%eax
000004f4	movl	0xffffdfec(%ebp),%edi
000004fa	leal	(%edi,%eax),%edx
000004fd	xorb	%cl,%cl
000004ff	cmpl	0x00002044(%ebx),%edx
00000505	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
00000508	jg	0x00000639
0000050e	movl	%esi,0x08(%esp)
00000512	movl	0x0c(%ebp),%ecx
00000515	movl	%ecx,0x04(%esp)
00000519	addl	%ebx,%eax
0000051b	movl	%eax,(%esp)
0000051e	calll	_memcpy
00000523	addl	0x00002004(%ebx),%esi
00000529	movb	CCommandBuffer::CCommandBuffer(),(%ebx,%esi)
0000052d	leal	0x00002008(%ebx),%eax
00000533	movl	%eax,0xffffdfec(%ebp)
00000539	movl	%eax,(%esp)
0000053c	movl	CCommandBuffer::CCommandBuffer(),0x04(%esp)
00000544	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::AllocInternal(bool)
00000549	movl	0x14(%ebp),%ecx
0000054c	movl	%eax,%esi
0000054e	movl	%ecx,(%esi)
00000550	movl	0x00002004(%ebx),%eax
00000556	movl	%eax,0x04(%esi)
00000559	movl	%edi,0x08(%esi)
0000055c	addl	%edi,0x00002004(%ebx)
00000562	testb	$0x01,0x00002048(%ebx)
00000569	je	0x00000573
0000056b	cmpl	%ecx,0x00002034(%ebx)
00000571	jge	0x000005e9
00000573	leal	0x00002014(%ebx),%edi
00000579	movl	%edi,0xffffdfe4(%ebp)
0000057f	movl	0xffffdfec(%ebp),%ecx
00000585	jmp	0x00000599
00000587	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000590	movl	(%edi),%eax
00000592	cmpl	(%esi),%eax
00000594	jg	0x000005c3
00000596	addl	CCommandBuffer::CCommandBuffer(),%edi
00000599	movl	(%edi),%edi
0000059b	testl	%edi,%edi
0000059d	jne	0x00000590
0000059f	movl	%esi,0x04(%esp)
000005a3	movl	%ecx,(%esp)
000005a6	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000005ab	movl	CCommandBuffer::CCommandBuffer(),CCommandBuffer::CCommandBuffer()(%esi)
000005b2	movl	0x00002018(%ebx),%eax
000005b8	movl	%eax,0x0c(%esi)
000005bb	movl	%esi,0x00002018(%ebx)
000005c1	jmp	0x000005db
000005c3	movl	%esi,0x04(%esp)
000005c7	movl	%ecx,(%esp)
000005ca	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000005cf	movl	%edi,CCommandBuffer::CCommandBuffer()(%esi)
000005d2	movl	0x0c(%edi),%eax
000005d5	movl	%eax,0x0c(%esi)
000005d8	movl	%esi,0x0c(%edi)
000005db	testl	%eax,%eax
000005dd	jne	0x0000062e
000005df	movl	0xffffdfe4(%ebp),%eax
000005e5	movl	%esi,(%eax)
000005e7	jmp	0x00000631
000005e9	movl	0x00002040(%ebx),%edi
000005ef	movl	%esi,0x04(%esp)
000005f3	movl	0xffffdfec(%ebp),%eax
000005f9	movl	%eax,(%esp)
000005fc	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000601	movl	%edi,CCommandBuffer::CCommandBuffer()(%esi)
00000604	testl	%edi,%edi
00000606	jne	0x00000619
00000608	movl	0x00002018(%ebx),%eax
0000060e	movl	%eax,0x0c(%esi)
00000611	movl	%esi,0x00002018(%ebx)
00000617	jmp	0x00000622
00000619	movl	0x0c(%edi),%eax
0000061c	movl	%eax,0x0c(%esi)
0000061f	movl	%esi,0x0c(%edi)
00000622	testl	%eax,%eax
00000624	jne	0x0000062e
00000626	movl	%esi,0x00002014(%ebx)
0000062c	jmp	0x00000631
0000062e	movl	%esi,CCommandBuffer::CCommandBuffer()(%eax)
00000631	incl	0x00002020(%ebx)
00000637	movb	$0x01,%cl
00000639	movl	0xffffdfe8(%ebp),%eax
0000063f	movl	(%eax),%eax
00000641	cmpl	0xf0(%ebp),%eax
00000644	jne	0x00000654
00000646	movzbl	%cl,%eax
00000649	addl	$0x0000201c,%esp
0000064f	popl	%esi
00000650	popl	%edi
00000651	popl	%ebx
00000652	popl	%ebp
00000653	ret
00000654	calll	___stack_chk_fail
00000659	nopl	CCommandBuffer::CCommandBuffer()(%eax)
CCommandBuffer::Compact():
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x0000201c,%esp
0000066c	calll	0x00000671
00000671	popl	%eax
00000672	movl	0xff93-0x671(%eax),%eax
00000678	movl	%eax,0xffffdfec(%ebp)
0000067e	movl	(%eax),%eax
00000680	movl	%eax,0xf0(%ebp)
00000683	movl	0x08(%ebp),%edi
00000686	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000690	movl	0x00002014(%edi),%esi
00000696	xorl	%ebx,%ebx
00000698	jmp	0x000006d4
0000069a	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
000006a0	movl	0x04(%esi),%eax
000006a3	addl	%edi,%eax
000006a5	movl	0x08(%esi),%ecx
000006a8	movl	%ecx,0x08(%esp)
000006ac	movl	%eax,0x04(%esp)
000006b0	leal	0xffffdff0(%ebp,%ebx),%eax
000006b7	movl	%eax,(%esp)
000006ba	calll	_memcpy
000006bf	movl	%ebx,0x04(%esi)
000006c2	movl	0x00002004(%edi),%ebx
000006c8	addl	0x08(%esi),%ebx
000006cb	movl	%ebx,0x00002004(%edi)
000006d1	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
000006d4	testl	%esi,%esi
000006d6	jne	0x000006a0
000006d8	movl	%ebx,0x08(%esp)
000006dc	leal	0xffffdff0(%ebp),%eax
000006e2	movl	%eax,0x04(%esp)
000006e6	movl	%edi,(%esp)
000006e9	calll	_memcpy
000006ee	movl	0xffffdfec(%ebp),%eax
000006f4	movl	(%eax),%eax
000006f6	cmpl	0xf0(%ebp),%eax
000006f9	jne	0x00000706
000006fb	addl	$0x0000201c,%esp
00000701	popl	%esi
00000702	popl	%edi
00000703	popl	%ebx
00000704	popl	%ebp
00000705	ret
00000706	calll	___stack_chk_fail
0000070b	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::GetNextCommandLength(char const*, int, int*, int*):
00000710	pushl	%ebp
00000711	pushl	%ebx
00000712	pushl	%edi
00000713	pushl	%esi
00000714	movl	0x1c(%esp),%esi
00000718	leal	0xff(%esi),%edi
0000071b	xorb	%al,%al
0000071d	xorl	%edx,%edx
0000071f	movl	0x18(%esp),%ebp
00000723	movl	%edx,%ebx
00000725	xorb	%ah,%ah
00000727	jmp	0x00000743
00000729	nopl	CCommandBuffer::CCommandBuffer()(%eax)
00000730	xorb	$0x01,%ch
00000733	movb	%ch,%al
00000735	movb	%ah,%cl
00000737	andb	$0x01,%cl
0000073a	xorb	$0x01,%cl
0000073d	movzbl	%cl,%ecx
00000740	addl	%ecx,%edx
00000742	incl	%ebx
00000743	cmpl	%esi,%ebx
00000745	jge	0x00000784
00000747	movb	CCommandBuffer::CCommandBuffer()(%ebp,%ebx),%cl
0000074b	testb	$0x01,%ah
0000074e	jne	0x0000077f
00000750	movb	%al,%ch
00000752	andb	$0x01,%ch
00000755	cmpb	$0x22,%cl
00000758	je	0x00000730
0000075a	testb	%ch,%ch
0000075c	jne	0x00000776
0000075e	cmpb	$0x2f,%cl
00000761	jne	0x00000776
00000763	xorb	%ah,%ah
00000765	cmpl	%edi,%ebx
00000767	jge	0x00000776
00000769	cmpb	$0x2f,0x01(%ebp,%ebx)
0000076e	sete	%ah
00000771	jne	0x00000776
00000773	incl	%ebx
00000774	jmp	0x00000735
00000776	testb	%ch,%ch
00000778	jne	0x0000077f
0000077a	cmpb	$0x3b,%cl
0000077d	je	0x00000784
0000077f	cmpb	$0x0a,%cl
00000782	jne	0x00000735
00000784	movl	0x20(%esp),%eax
00000788	movl	%edx,(%eax)
0000078a	movl	0x24(%esp),%eax
0000078e	movl	%ebx,(%eax)
00000790	popl	%esi
00000791	popl	%edi
00000792	popl	%ebx
00000793	popl	%ebp
00000794	ret
00000795	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::AddText(char const*, int):
000007a0	pushl	%ebp
000007a1	movl	%esp,%ebp
000007a3	pushl	%ebx
000007a4	pushl	%edi
000007a5	pushl	%esi
000007a6	subl	$0x5c,%esp
000007a9	calll	0x000007ae
000007ae	popl	%eax
000007af	movl	%eax,0xa0(%ebp)
000007b2	movl	0xff93-0x7ae(%eax),%eax
000007b8	movl	%eax,0x9c(%ebp)
000007bb	movl	(%eax),%eax
000007bd	movl	%eax,0xf0(%ebp)
000007c0	subl	CCommandBuffer::CCommandBuffer(),%esp
000007c3	movl	0x0c(%ebp),%eax
000007c6	movl	%eax,0xb4(%ebp)
000007c9	movl	%eax,(%esp)
000007cc	calll	_strlen
000007d1	addl	CCommandBuffer::CCommandBuffer(),%esp
000007d4	movl	%eax,%ebx
000007d6	movl	0x08(%ebp),%eax
000007d9	movl	0x00002034(%eax),%eax
000007df	addl	CCommandBuffer::CCommandBuffer()(%ebp),%eax
000007e2	movl	%eax,0xac(%ebp)
000007e5	jmp	0x00000805
000007e7	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
000007f0	movl	0xac(%ebp),%ecx
000007f3	movl	%edi,%ebx
000007f5	movl	0xb4(%ebp),%eax
000007f8	leal	0x01(%eax,%esi),%eax
000007fc	movl	%eax,0xb4(%ebp)
000007ff	incl	%esi
00000800	subl	%esi,%ebx
00000802	movl	%ecx,0xac(%ebp)
00000805	movb	$0x01,%al
00000807	testl	%ebx,%ebx
00000809	jle	0x00000a2c
0000080f	leal	0xff(%ebx),%eax
00000812	movl	%eax,0xb0(%ebp)
00000815	xorb	%cl,%cl
00000817	xorl	%esi,%esi
00000819	xorl	%eax,%eax
0000081b	xorb	%dl,%dl
0000081d	jmp	0x00000835
0000081f	nop
00000820	xorb	$0x01,%dh
00000823	movb	%dh,%cl
00000825	movb	%dl,%ch
00000827	andb	$0x01,%ch
0000082a	xorb	$0x01,%ch
0000082d	movzbl	%ch,%ebx
00000830	addl	%ebx,%eax
00000832	incl	%esi
00000833	movl	%edi,%ebx
00000835	cmpl	%ebx,%esi
00000837	movl	%ebx,%edi
00000839	jge	0x0000087e
0000083b	movl	0xb4(%ebp),%ebx
0000083e	movb	(%ebx,%esi),%ch
00000841	testb	$0x01,%dl
00000844	jne	0x00000879
00000846	movb	%cl,%dh
00000848	andb	$0x01,%dh
0000084b	cmpb	$0x22,%ch
0000084e	je	0x00000820
00000850	testb	%dh,%dh
00000852	jne	0x00000870
00000854	cmpb	$0x2f,%ch
00000857	jne	0x00000870
00000859	xorb	%dl,%dl
0000085b	cmpl	0xb0(%ebp),%esi
0000085e	jge	0x00000870
00000860	movl	0xb4(%ebp),%ebx
00000863	cmpb	$0x2f,0x01(%ebx,%esi)
00000868	sete	%dl
0000086b	jne	0x00000870
0000086d	incl	%esi
0000086e	jmp	0x00000825
00000870	testb	%dh,%dh
00000872	jne	0x00000879
00000874	cmpb	$0x3b,%ch
00000877	je	0x0000087e
00000879	cmpb	$0x0a,%ch
0000087c	jne	0x00000825
0000087e	testl	%eax,%eax
00000880	jle	0x000007f0
00000886	leal	CCommandBuffer::CCommandBuffer()(%eax),%ebx
00000889	andl	$0xf0,%ebx
0000088c	movl	%esp,%ecx
0000088e	movl	%ecx,0xa4(%ebp)
00000891	subl	%ebx,%ecx
00000893	movl	%ecx,0xa8(%ebp)
00000896	movl	%ecx,%esp
00000898	subl	CCommandBuffer::CCommandBuffer(),%esp
0000089b	movl	%eax,0x08(%esp)
0000089f	movl	%eax,0xb0(%ebp)
000008a2	movl	0xb4(%ebp),%eax
000008a5	movl	%eax,0x04(%esp)
000008a9	leal	0xb8(%ebp),%eax
000008ac	movl	%eax,(%esp)
000008af	movl	$0x00000009,0x0c(%esp)
000008b7	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
000008bc	addl	CCommandBuffer::CCommandBuffer(),%esp
000008bf	negl	%ebx
000008c1	movl	0xa4(%ebp),%eax
000008c4	movb	CCommandBuffer::CCommandBuffer(),(%eax,%ebx)
000008c8	xorb	%bl,%bl
000008ca	cmpb	CCommandBuffer::CCommandBuffer(),0xcc(%ebp)
000008ce	jne	0x000009ee
000008d4	calll	CCommand::DefaultBreakSet()
000008d9	movl	0xb0(%ebp),%ecx
000008dc	leal	0x01(%ecx),%ebx
000008df	subl	$0x20,%esp
000008e2	movl	%ebx,0x0c(%esp)
000008e6	movl	0xa8(%ebp),%ecx
000008e9	movl	%ecx,0x08(%esp)
000008ed	movl	%eax,0x04(%esp)
000008f1	leal	0xb8(%ebp),%eax
000008f4	movl	%eax,(%esp)
000008f7	movl	$0x00000001,CCommandBuffer::CCommandBuffer()(%esp)
000008ff	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
00000904	addl	$0x20,%esp
00000907	xorl	%edx,%edx
00000909	testl	%eax,%eax
0000090b	jle	0x00000927
0000090d	cmpl	%ebx,%eax
0000090f	je	0x00000927
00000911	movl	0xc4(%ebp),%eax
00000914	movl	0xd4(%ebp),%ecx
00000917	subl	%eax,%ecx
00000919	xorl	%edx,%edx
0000091b	testl	%ecx,%ecx
0000091d	jle	0x00000927
0000091f	subl	0xd8(%ebp),%eax
00000922	addl	0xb8(%ebp),%eax
00000925	movl	%eax,%edx
00000927	xorb	%bl,%bl
00000929	movl	0xa8(%ebp),%ecx
0000092c	cmpb	CCommandBuffer::CCommandBuffer(),(%ecx)
0000092f	je	0x000009ee
00000935	movl	%edx,%ebx
00000937	subl	CCommandBuffer::CCommandBuffer(),%esp
0000093a	movl	0xa0(%ebp),%eax
0000093d	leal	0xe048-0x7ae(%eax),%eax
00000943	movl	%eax,0x04(%esp)
00000947	movl	%ecx,(%esp)
0000094a	calll	V_stricmp(char const*, char const*)
0000094f	addl	CCommandBuffer::CCommandBuffer(),%esp
00000952	testl	%eax,%eax
00000954	movl	%ebx,%ecx
00000956	jne	0x000009c3
00000958	movl	0x08(%ebp),%eax
0000095b	testb	$0x01,0x00002049(%eax)
00000962	je	0x000009c3
00000964	testl	%ecx,%ecx
00000966	je	0x0000097a
00000968	subl	CCommandBuffer::CCommandBuffer(),%esp
0000096b	movl	%ecx,(%esp)
0000096e	calll	_atoi
00000973	addl	CCommandBuffer::CCommandBuffer(),%esp
00000976	movl	%eax,%ecx
00000978	jmp	0x00000983
0000097a	movl	0x08(%ebp),%eax
0000097d	movl	0x0000203c(%eax),%ecx
00000983	addl	0xac(%ebp),%ecx
00000986	xorb	%bl,%bl
00000988	jmp	0x000009f1
0000098a	movl	%eax,%esi
0000098c	cmpl	CCommandBuffer::CCommandBuffer(),0xc0(%ebp)
00000990	js	0x000009b5
00000992	movl	0xb8(%ebp),%eax
00000995	testl	%eax,%eax
00000997	je	0x000009ae
00000999	subl	CCommandBuffer::CCommandBuffer(),%esp
0000099c	movl	%eax,(%esp)
0000099f	calll	_free
000009a4	addl	CCommandBuffer::CCommandBuffer(),%esp
000009a7	movl	CCommandBuffer::CCommandBuffer(),0xb8(%ebp)
000009ae	movl	CCommandBuffer::CCommandBuffer(),0xbc(%ebp)
000009b5	subl	CCommandBuffer::CCommandBuffer(),%esp
000009b8	movl	%esi,(%esp)
000009bb	calll	__Unwind_Resume
000009c0	addl	CCommandBuffer::CCommandBuffer(),%esp
000009c3	subl	CCommandBuffer::CCommandBuffer(),%esp
000009c6	movl	0xac(%ebp),%eax
000009c9	movl	%eax,0x0c(%esp)
000009cd	movl	0xb0(%ebp),%eax
000009d0	movl	%eax,0x08(%esp)
000009d4	movl	0xb4(%ebp),%eax
000009d7	movl	%eax,0x04(%esp)
000009db	movl	0x08(%ebp),%eax
000009de	movl	%eax,(%esp)
000009e1	calll	CCommandBuffer::InsertCommand(char const*, int, int)
000009e6	addl	CCommandBuffer::CCommandBuffer(),%esp
000009e9	movb	%al,%bl
000009eb	xorb	$0x01,%bl
000009ee	movl	0xac(%ebp),%ecx
000009f1	cmpl	CCommandBuffer::CCommandBuffer(),0xc0(%ebp)
000009f5	js	0x00000a20
000009f7	movl	%ecx,0xb0(%ebp)
000009fa	movl	0xb8(%ebp),%eax
000009fd	testl	%eax,%eax
000009ff	je	0x00000a16
00000a01	subl	CCommandBuffer::CCommandBuffer(),%esp
00000a04	movl	%eax,(%esp)
00000a07	calll	_free
00000a0c	addl	CCommandBuffer::CCommandBuffer(),%esp
00000a0f	movl	CCommandBuffer::CCommandBuffer(),0xb8(%ebp)
00000a16	movl	CCommandBuffer::CCommandBuffer(),0xbc(%ebp)
00000a1d	movl	0xb0(%ebp),%ecx
00000a20	xorb	%al,%al
00000a22	testb	%bl,%bl
00000a24	movl	%edi,%ebx
00000a26	je	0x000007f5
00000a2c	movl	0x9c(%ebp),%ecx
00000a2f	movl	(%ecx),%ecx
00000a31	cmpl	0xf0(%ebp),%ecx
00000a34	jne	0x00000a41
00000a36	movzbl	%al,%eax
00000a39	leal	0xf4(%ebp),%esp
00000a3c	popl	%esi
00000a3d	popl	%edi
00000a3e	popl	%ebx
00000a3f	popl	%ebp
00000a40	ret
00000a41	calll	___stack_chk_fail
00000a46	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::IsProcessingCommands():
00000a50	movl	0x04(%esp),%eax
00000a54	movzbl	0x00002048(%eax),%eax
00000a5b	andl	$0x01,%eax
00000a5e	ret
00000a5f	nop
CCommandBuffer::DelayAllQueuedCommands(int):
00000a60	movl	0x08(%esp),%eax
00000a64	testl	%eax,%eax
00000a66	jle	0x00000a89
00000a68	movl	0x04(%esp),%ecx
00000a6c	movl	0x00002014(%ecx),%ecx
00000a72	jmp	0x00000a85
00000a74	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000a80	addl	%eax,(%ecx)
00000a82	movl	CCommandBuffer::CCommandBuffer()(%ecx),%ecx
00000a85	testl	%ecx,%ecx
00000a87	jne	0x00000a80
00000a89	ret
00000a8a	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::BeginProcessingCommands(int):
00000a90	movl	0x08(%esp),%eax
00000a94	testl	%eax,%eax
00000a96	je	0x00000abf
00000a98	movl	0x04(%esp),%ecx
00000a9c	movb	$0x01,0x00002048(%ecx)
00000aa3	movl	0x00002034(%ecx),%edx
00000aa9	leal	0xff(%eax,%edx),%eax
00000aad	movl	%eax,0x00002038(%ecx)
00000ab3	movl	0x00002014(%ecx),%eax
00000ab9	movl	%eax,0x00002040(%ecx)
00000abf	ret
CCommandBuffer::DequeueNextCommand():
00000ac0	pushl	%ebp
00000ac1	movl	%esp,%ebp
00000ac3	pushl	%ebx
00000ac4	pushl	%edi
00000ac5	pushl	%esi
00000ac6	subl	$0x0c,%esp
00000ac9	movl	0x08(%ebp),%esi
00000acc	leal	0x0000204c(%esi),%ebx
00000ad2	movl	%ebx,(%esp)
00000ad5	calll	CCommand::Reset()
00000ada	xorb	%al,%al
00000adc	cmpl	CCommandBuffer::CCommandBuffer(),0x00002020(%esi)
00000ae3	je	0x00000b4b
00000ae5	movl	0x00002014(%esi),%edi
00000aeb	movl	(%edi),%ecx
00000aed	xorb	%al,%al
00000aef	cmpl	0x00002038(%esi),%ecx
00000af5	jg	0x00000b4b
00000af7	movl	%ecx,0x00002034(%esi)
00000afd	cmpl	CCommandBuffer::CCommandBuffer(),0x08(%edi)
00000b01	jle	0x00000b1c
00000b03	movl	0x04(%edi),%eax
00000b06	addl	%esi,%eax
00000b08	movl	%eax,0x04(%esp)
00000b0c	movl	%ebx,(%esp)
00000b0f	movl	CCommandBuffer::CCommandBuffer(),0x08(%esp)
00000b17	calll	CCommand::Tokenize(char const*, characterset_t*)
00000b1c	leal	0x00002008(%esi),%eax
00000b22	movl	%edi,0x04(%esp)
00000b26	movl	%eax,(%esp)
00000b29	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000b2e	movl	0x0000201c(%esi),%eax
00000b34	movl	%eax,CCommandBuffer::CCommandBuffer()(%edi)
00000b37	movl	%edi,0x0000201c(%esi)
00000b3d	movl	0x00002014(%esi),%eax
00000b43	movl	%eax,0x00002040(%esi)
00000b49	movb	$0x01,%al
00000b4b	movzbl	%al,%eax
00000b4e	addl	$0x0c,%esp
00000b51	popl	%esi
00000b52	popl	%edi
00000b53	popl	%ebx
00000b54	popl	%ebp
00000b55	ret
00000b56	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::DequeueNextCommand(char const**&):
00000b60	pushl	%ebp
00000b61	movl	%esp,%ebp
00000b63	pushl	%ebx
00000b64	pushl	%edi
00000b65	pushl	%esi
00000b66	subl	$0x0c,%esp
00000b69	movl	0x08(%ebp),%esi
00000b6c	leal	0x0000204c(%esi),%ebx
00000b72	movl	%ebx,(%esp)
00000b75	calll	CCommand::Reset()
00000b7a	cmpl	CCommandBuffer::CCommandBuffer(),0x00002020(%esi)
00000b81	je	0x00000be5
00000b83	movl	0x00002014(%esi),%edi
00000b89	movl	(%edi),%eax
00000b8b	cmpl	0x00002038(%esi),%eax
00000b91	jg	0x00000be5
00000b93	movl	%eax,0x00002034(%esi)
00000b99	cmpl	CCommandBuffer::CCommandBuffer(),0x08(%edi)
00000b9d	jle	0x00000bb8
00000b9f	movl	0x04(%edi),%eax
00000ba2	addl	%esi,%eax
00000ba4	movl	%eax,0x04(%esp)
00000ba8	movl	%ebx,(%esp)
00000bab	movl	CCommandBuffer::CCommandBuffer(),0x08(%esp)
00000bb3	calll	CCommand::Tokenize(char const*, characterset_t*)
00000bb8	leal	0x00002008(%esi),%eax
00000bbe	movl	%edi,0x04(%esp)
00000bc2	movl	%eax,(%esp)
00000bc5	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000bca	movl	0x0000201c(%esi),%eax
00000bd0	movl	%eax,CCommandBuffer::CCommandBuffer()(%edi)
00000bd3	movl	%edi,0x0000201c(%esi)
00000bd9	movl	0x00002014(%esi),%eax
00000bdf	movl	%eax,0x00002040(%esi)
00000be5	movl	0x0c(%ebp),%eax
00000be8	leal	0x00002454(%esi),%ecx
00000bee	cmpl	CCommandBuffer::CCommandBuffer(),0x0000204c(%esi)
00000bf5	movl	CCommandBuffer::CCommandBuffer(),%edx
00000bfa	cmovnel	%ecx,%edx
00000bfd	movl	%edx,(%eax)
00000bff	movl	0x0000204c(%esi),%eax
00000c05	addl	$0x0c,%esp
00000c08	popl	%esi
00000c09	popl	%edi
00000c0a	popl	%ebx
00000c0b	popl	%ebp
00000c0c	ret
00000c0d	nopl	(%eax)
CCommandBuffer::EndProcessingCommands():
00000c10	pushl	%ebp
00000c11	movl	%esp,%ebp
00000c13	pushl	%ebx
00000c14	pushl	%edi
00000c15	pushl	%esi
00000c16	subl	$0x0000201c,%esp
00000c1c	calll	0x00000c21
00000c21	popl	%eax
00000c22	movl	%eax,0xffffdfec(%ebp)
00000c28	movl	0xff93-0xc21(%eax),%eax
00000c2e	movl	%eax,0xffffdfe8(%ebp)
00000c34	movl	(%eax),%eax
00000c36	movl	%eax,0xf0(%ebp)
00000c39	movl	0x08(%ebp),%edi
00000c3c	movb	CCommandBuffer::CCommandBuffer(),0x00002048(%edi)
00000c43	movl	0x00002038(%edi),%eax
00000c49	incl	%eax
00000c4a	movl	%eax,0x00002034(%edi)
00000c50	movl	CCommandBuffer::CCommandBuffer(),0x00002040(%edi)
00000c5a	movl	0x00002014(%edi),%esi
00000c60	testl	%esi,%esi
00000c62	je	0x00000d30
00000c68	leal	0x00002008(%edi),%ebx
00000c6e	jmp	0x00000cae
00000c70	movl	0x04(%esi),%eax
00000c73	addl	%edi,%eax
00000c75	movl	%eax,0x04(%esp)
00000c79	movl	0xffffdfec(%ebp),%eax
00000c7f	leal	0xe04d-0xc21(%eax),%eax
00000c85	movl	%eax,(%esp)
00000c88	calll	_Msg
00000c8d	movl	%esi,0x04(%esp)
00000c91	movl	%ebx,(%esp)
00000c94	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000c99	movl	0x0000201c(%edi),%eax
00000c9f	movl	%eax,CCommandBuffer::CCommandBuffer()(%esi)
00000ca2	movl	%esi,0x0000201c(%edi)
00000ca8	movl	0x00002034(%edi),%eax
00000cae	cmpl	%eax,(%esi)
00000cb0	jl	0x00000c70
00000cb2	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000cbc	movl	0x00002014(%edi),%esi
00000cc2	xorl	%ebx,%ebx
00000cc4	jmp	0x00000d04
00000cc6	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000cd0	movl	0x04(%esi),%eax
00000cd3	addl	%edi,%eax
00000cd5	movl	0x08(%esi),%ecx
00000cd8	movl	%ecx,0x08(%esp)
00000cdc	movl	%eax,0x04(%esp)
00000ce0	leal	0xffffdff0(%ebp,%ebx),%eax
00000ce7	movl	%eax,(%esp)
00000cea	calll	_memcpy
00000cef	movl	%ebx,0x04(%esi)
00000cf2	movl	0x00002004(%edi),%ebx
00000cf8	addl	0x08(%esi),%ebx
00000cfb	movl	%ebx,0x00002004(%edi)
00000d01	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
00000d04	testl	%esi,%esi
00000d06	jne	0x00000cd0
00000d08	movl	%ebx,0x08(%esp)
00000d0c	leal	0xffffdff0(%ebp),%eax
00000d12	movl	%eax,0x04(%esp)
00000d16	movl	%edi,(%esp)
00000d19	calll	_memcpy
00000d1e	movl	0xffffdfe8(%ebp),%eax
00000d24	movl	(%eax),%eax
00000d26	cmpl	0xf0(%ebp),%eax
00000d29	je	0x00000d3c
00000d2b	calll	___stack_chk_fail
00000d30	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000d3a	jmp	0x00000d1e
00000d3c	addl	$0x0000201c,%esp
00000d42	popl	%esi
00000d43	popl	%edi
00000d44	popl	%ebx
00000d45	popl	%ebp
00000d46	ret
00000d47	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::GetNextCommandHandle():
00000d50	movl	0x04(%esp),%eax
00000d54	movl	0x00002014(%eax),%eax
00000d5a	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(convar.o):
(__TEXT,__text) section
ConVar_Register(int, IConCommandBaseAccessor*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%esi
0000000f	movl	0x19689-0xe(%esi),%eax
00000015	movl	%eax,0xf0(%ebp)
00000018	movl	(%eax),%eax
0000001a	testl	%eax,%eax
0000001c	je	0x000000ad
00000022	movb	__ZL13s_bRegistered.b-0xe(%esi),%cl
00000028	testb	%cl,%cl
0000002a	jne	0x000000ad
00000030	movl	0x0c(%ebp),%ebx
00000033	movl	0x08(%ebp),%ecx
00000036	movb	$0x01,__ZL13s_bRegistered.b-0xe(%esi)
0000003d	movl	%ecx,s_nCVarFlag-0xe(%esi)
00000043	movl	(%eax),%ecx
00000045	movl	%eax,(%esp)
00000048	call	*0x14(%ecx)
0000004b	movl	%eax,s_nDLLIdentifier-0xe(%esi)
00000051	leal	s_DefaultAccessor-0xe(%esi),%eax
00000057	testl	%ebx,%ebx
00000059	cmovnel	%ebx,%eax
0000005c	movl	%eax,ConCommandBase::s_pAccessor-0xe(%esi)
00000062	movl	ConCommandBase::s_pConCommandBases-0xe(%esi),%ebx
00000068	testl	%ebx,%ebx
0000006a	je	0x00000093
0000006c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
00000070	movl	(%ebx),%eax
00000072	movl	0x04(%ebx),%edi
00000075	movl	s_nCVarFlag-0xe(%esi),%ecx
0000007b	movl	%ecx,0x04(%esp)
0000007f	movl	%ebx,(%esp)
00000082	call	*0x10(%eax)
00000085	movl	(%ebx),%eax
00000087	movl	%ebx,(%esp)
0000008a	call	*0x28(%eax)
0000008d	testl	%edi,%edi
0000008f	movl	%edi,%ebx
00000091	jne	0x00000070
00000093	movl	0xf0(%ebp),%eax
00000096	movl	(%eax),%ecx
00000098	movl	(%ecx),%eax
0000009a	movl	%ecx,(%esp)
0000009d	call	*0x00000084(%eax)
000000a3	movl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pConCommandBases-0xe(%esi)
000000ad	addl	$0x0c,%esp
000000b0	popl	%esi
000000b1	popl	%edi
000000b2	popl	%ebx
000000b3	popl	%ebp
000000b4	ret
000000b5	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_Unregister():
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%esi
000000c4	subl	$0x14,%esp
000000c7	calll	0x000000cc
000000cc	popl	%esi
000000cd	movl	0x19689-0xcc(%esi),%eax
000000d3	movl	(%eax),%eax
000000d5	testl	%eax,%eax
000000d7	je	0x00000107
000000d9	movb	__ZL13s_bRegistered.b-0xcc(%esi),%cl
000000df	cmpb	$0x01,%cl
000000e2	jne	0x00000107
000000e4	movl	(%eax),%ecx
000000e6	movl	s_nDLLIdentifier-0xcc(%esi),%edx
000000ec	movl	%edx,0x04(%esp)
000000f0	movl	%eax,(%esp)
000000f3	call	*0x20(%ecx)
000000f6	movl	$0xffffffff,s_nDLLIdentifier-0xcc(%esi)
00000100	movb	ConVar_Register(int, IConCommandBaseAccessor*),__ZL13s_bRegistered.b-0xcc(%esi)
00000107	addl	$0x14,%esp
0000010a	popl	%esi
0000010b	popl	%ebp
0000010c	ret
0000010d	nopl	(%eax)
ConCommandBase::ConCommandBase():
00000110	calll	0x00000115
00000115	popl	%eax
00000116	leal	vtable for ConCommandBase-0x115+0x00000008(%eax),%ecx
0000011c	movl	0x04(%esp),%eax
00000120	movl	%ecx,(%eax)
00000122	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000126	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%eax)
0000012d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%eax)
00000134	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%eax)
0000013b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000142	ret
00000143	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase():
00000150	calll	0x00000155
00000155	popl	%eax
00000156	leal	vtable for ConCommandBase-0x155+0x00000008(%eax),%ecx
0000015c	movl	0x04(%esp),%eax
00000160	movl	%ecx,(%eax)
00000162	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000166	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%eax)
0000016d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%eax)
00000174	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%eax)
0000017b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000182	ret
00000183	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase(char const*, char const*, int):
00000190	pushl	%esi
00000191	calll	0x00000196
00000196	popl	%ecx
00000197	leal	vtable for ConCommandBase-0x196+0x00000008(%ecx),%edx
0000019d	movl	0x08(%esp),%eax
000001a1	movl	%edx,(%eax)
000001a3	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000001a7	movl	0x0c(%esp),%edx
000001ab	movl	%edx,0x0c(%eax)
000001ae	leal	0x1604c-0x196(%ecx),%edx
000001b4	movl	0x10(%esp),%esi
000001b8	testl	%esi,%esi
000001ba	cmovnel	%esi,%edx
000001bd	movl	%edx,0x10(%eax)
000001c0	movl	0x14(%esp),%edx
000001c4	movl	%edx,0x14(%eax)
000001c7	testb	$0x01,%dl
000001ca	jne	0x000001dd
000001cc	movl	ConCommandBase::s_pConCommandBases-0x196(%ecx),%edx
000001d2	movl	%edx,0x04(%eax)
000001d5	movl	%eax,ConCommandBase::s_pConCommandBases-0x196(%ecx)
000001db	jmp	0x000001e4
000001dd	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000001e4	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x196(%ecx)
000001ee	jne	0x000001f2
000001f0	popl	%esi
000001f1	ret
000001f2	movl	(%eax),%eax
000001f4	movl	0x28(%eax),%eax
000001f7	popl	%esi
000001f8	jmp	*%eax
000001fa	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase(char const*, char const*, int):
00000200	pushl	%esi
00000201	calll	0x00000206
00000206	popl	%ecx
00000207	leal	vtable for ConCommandBase-0x206+0x00000008(%ecx),%edx
0000020d	movl	0x08(%esp),%eax
00000211	movl	%edx,(%eax)
00000213	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000217	movl	0x0c(%esp),%edx
0000021b	movl	%edx,0x0c(%eax)
0000021e	leal	0x1604c-0x206(%ecx),%edx
00000224	movl	0x10(%esp),%esi
00000228	testl	%esi,%esi
0000022a	cmovnel	%esi,%edx
0000022d	movl	%edx,0x10(%eax)
00000230	movl	0x14(%esp),%edx
00000234	movl	%edx,0x14(%eax)
00000237	testb	$0x01,%dl
0000023a	jne	0x0000024d
0000023c	movl	ConCommandBase::s_pConCommandBases-0x206(%ecx),%edx
00000242	movl	%edx,0x04(%eax)
00000245	movl	%eax,ConCommandBase::s_pConCommandBases-0x206(%ecx)
0000024b	jmp	0x00000254
0000024d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000254	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x206(%ecx)
0000025e	jne	0x00000262
00000260	popl	%esi
00000261	ret
00000262	movl	(%eax),%eax
00000264	movl	0x28(%eax),%eax
00000267	popl	%esi
00000268	jmp	*%eax
0000026a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000270	jmp	operator delete(void*)
00000275	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000280	ret
00000281	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000290	ret
00000291	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsCommand() const:
000002a0	movl	$0x00000001,%eax
000002a5	ret
000002a6	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::GetDLLIdentifier() const:
000002b0	calll	0x000002b5
000002b5	popl	%eax
000002b6	movl	s_nDLLIdentifier-0x2b5(%eax),%eax
000002bc	ret
000002bd	nopl	(%eax)
ConCommandBase::Create(char const*, char const*, int):
000002c0	pushl	%esi
000002c1	calll	0x000002c6
000002c6	popl	%ecx
000002c7	movl	0x08(%esp),%eax
000002cb	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000002cf	movl	0x0c(%esp),%edx
000002d3	movl	%edx,0x0c(%eax)
000002d6	leal	0x1604c-0x2c6(%ecx),%edx
000002dc	movl	0x10(%esp),%esi
000002e0	testl	%esi,%esi
000002e2	cmovnel	%esi,%edx
000002e5	movl	%edx,0x10(%eax)
000002e8	movl	0x14(%esp),%edx
000002ec	movl	%edx,0x14(%eax)
000002ef	testb	$0x01,%dl
000002f2	jne	0x00000305
000002f4	movl	ConCommandBase::s_pConCommandBases-0x2c6(%ecx),%edx
000002fa	movl	%edx,0x04(%eax)
000002fd	movl	%eax,ConCommandBase::s_pConCommandBases-0x2c6(%ecx)
00000303	jmp	0x0000030c
00000305	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
0000030c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x2c6(%ecx)
00000316	jne	0x0000031a
00000318	popl	%esi
00000319	ret
0000031a	movl	(%eax),%eax
0000031c	movl	0x28(%eax),%eax
0000031f	popl	%esi
00000320	jmp	*%eax
00000322	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::Init():
00000330	pushl	%ebp
00000331	movl	%esp,%ebp
00000333	subl	$0x08,%esp
00000336	calll	0x0000033b
0000033b	popl	%eax
0000033c	movl	ConCommandBase::s_pAccessor-0x33b(%eax),%eax
00000342	testl	%eax,%eax
00000344	je	0x00000354
00000346	movl	0x08(%ebp),%edx
00000349	movl	(%eax),%ecx
0000034b	movl	%edx,0x04(%esp)
0000034f	movl	%eax,(%esp)
00000352	call	(%ecx)
00000354	addl	$0x08,%esp
00000357	popl	%ebp
00000358	ret
00000359	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::Shutdown():
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	subl	$0x08,%esp
00000366	calll	0x0000036b
0000036b	popl	%eax
0000036c	movl	0x19689-0x36b(%eax),%eax
00000372	movl	(%eax),%eax
00000374	testl	%eax,%eax
00000376	je	0x00000387
00000378	movl	0x08(%ebp),%edx
0000037b	movl	(%eax),%ecx
0000037d	movl	%edx,0x04(%esp)
00000381	movl	%eax,(%esp)
00000384	call	*0x1c(%ecx)
00000387	addl	$0x08,%esp
0000038a	popl	%ebp
0000038b	ret
0000038c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetName() const:
00000390	movl	0x04(%esp),%eax
00000394	movl	0x0c(%eax),%eax
00000397	ret
00000398	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsFlagSet(int) const:
000003a0	movl	0x04(%esp),%eax
000003a4	movl	0x14(%eax),%eax
000003a7	testl	0x08(%esp),%eax
000003ab	setne	%al
000003ae	movzbl	%al,%eax
000003b1	ret
000003b2	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::AddFlags(int):
000003c0	movl	0x08(%esp),%eax
000003c4	movl	0x04(%esp),%ecx
000003c8	orl	%eax,0x14(%ecx)
000003cb	ret
000003cc	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetNext() const:
000003d0	movl	0x04(%esp),%eax
000003d4	movl	0x04(%eax),%eax
000003d7	ret
000003d8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::GetNext():
000003e0	movl	0x04(%esp),%eax
000003e4	movl	0x04(%eax),%eax
000003e7	ret
000003e8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::CopyString(char const*):
000003f0	pushl	%ebp
000003f1	movl	%esp,%ebp
000003f3	pushl	%ebx
000003f4	pushl	%edi
000003f5	pushl	%esi
000003f6	subl	$0x0c,%esp
000003f9	movl	0x0c(%ebp),%ebx
000003fc	movl	%ebx,(%esp)
000003ff	calll	_strlen
00000404	movl	%eax,%esi
00000406	testl	%esi,%esi
00000408	jg	0x0000041d
0000040a	movl	$0x00000001,(%esp)
00000411	calll	operator new[](unsigned long)
00000416	movl	%eax,%edi
00000418	movb	ConVar_Register(int, IConCommandBaseAccessor*),(%edi)
0000041b	jmp	0x00000442
0000041d	incl	%esi
0000041e	testl	%esi,%esi
00000420	movl	$0xffffffff,%eax
00000425	cmovnsl	%esi,%eax
00000428	movl	%eax,(%esp)
0000042b	calll	operator new[](unsigned long)
00000430	movl	%eax,%edi
00000432	movl	%esi,0x08(%esp)
00000436	movl	%ebx,0x04(%esp)
0000043a	movl	%edi,(%esp)
0000043d	calll	V_strncpy(char*, char const*, int)
00000442	movl	%edi,%eax
00000444	addl	$0x0c,%esp
00000447	popl	%esi
00000448	popl	%edi
00000449	popl	%ebx
0000044a	popl	%ebp
0000044b	ret
0000044c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetHelpText() const:
00000450	movl	0x04(%esp),%eax
00000454	movl	0x10(%eax),%eax
00000457	ret
00000458	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsRegistered() const:
00000460	movl	0x04(%esp),%eax
00000464	movzbl	0x08(%eax),%eax
00000468	andl	$0x01,%eax
0000046b	ret
0000046c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
CCommand::CCommand():
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	subl	$0x08,%esp
00000476	calll	0x0000047b
0000047b	popl	%eax
0000047c	movb	__ZL16s_bBuiltBreakSet.b-0x47b(%eax),%cl
00000482	testb	%cl,%cl
00000484	jne	0x000004a5
00000486	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x47b(%eax)
0000048d	leal	0x1604d-0x47b(%eax),%ecx
00000493	movl	%ecx,0x04(%esp)
00000497	leal	s_BreakSet-0x47b(%eax),%eax
0000049d	movl	%eax,(%esp)
000004a0	calll	CharacterSetBuild(characterset_t*, char const*)
000004a5	movl	0x08(%ebp),%eax
000004a8	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000004ae	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000004b5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000004b9	addl	$0x08,%esp
000004bc	popl	%ebp
000004bd	ret
000004be	nop
CCommand::CCommand():
000004c0	pushl	%ebp
000004c1	movl	%esp,%ebp
000004c3	subl	$0x08,%esp
000004c6	calll	0x000004cb
000004cb	popl	%eax
000004cc	movb	__ZL16s_bBuiltBreakSet.b-0x4cb(%eax),%cl
000004d2	testb	%cl,%cl
000004d4	jne	0x000004f5
000004d6	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x4cb(%eax)
000004dd	leal	0x1604d-0x4cb(%eax),%ecx
000004e3	movl	%ecx,0x04(%esp)
000004e7	leal	s_BreakSet-0x4cb(%eax),%eax
000004ed	movl	%eax,(%esp)
000004f0	calll	CharacterSetBuild(characterset_t*, char const*)
000004f5	movl	0x08(%ebp),%eax
000004f8	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000004fe	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000505	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000509	addl	$0x08,%esp
0000050c	popl	%ebp
0000050d	ret
0000050e	nop
CCommand::Reset():
00000510	movl	0x04(%esp),%eax
00000514	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000051a	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000521	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000525	ret
00000526	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::CCommand(int, char const**):
00000530	jmp	CCommand::CCommand(int, char const**)
00000535	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::CCommand(int, char const**):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%ebx
00000544	pushl	%edi
00000545	pushl	%esi
00000546	subl	$0x2c,%esp
00000549	calll	0x0000054e
0000054e	popl	%eax
0000054f	movb	__ZL16s_bBuiltBreakSet.b-0x54e(%eax),%cl
00000555	testb	%cl,%cl
00000557	jne	0x00000578
00000559	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x54e(%eax)
00000560	leal	0x1604d-0x54e(%eax),%ecx
00000566	movl	%ecx,0x04(%esp)
0000056a	leal	s_BreakSet-0x54e(%eax),%eax
00000570	movl	%eax,(%esp)
00000573	calll	CharacterSetBuild(characterset_t*, char const*)
00000578	movl	0x0c(%ebp),%eax
0000057b	movl	0x08(%ebp),%edx
0000057e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edx)
00000585	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edx)
00000589	movl	%eax,(%edx)
0000058b	testl	%eax,%eax
0000058d	jle	0x0000067d
00000593	movl	0x10(%ebp),%ebx
00000596	leal	0x08(%edx),%eax
00000599	movl	%eax,0xf0(%ebp)
0000059c	movl	0x0c(%ebp),%eax
0000059f	leal	0xff(%eax),%eax
000005a2	movl	%eax,0xdc(%ebp)
000005a5	leal	0x00000208(%edx),%eax
000005ab	movl	%eax,0xe8(%ebp)
000005ae	xorl	%ecx,%ecx
000005b0	movl	%ecx,0xec(%ebp)
000005b3	movl	0xe8(%ebp),%edi
000005b6	movl	%edi,0x00000408(%edx,%ecx,4)
000005bd	movl	(%ebx,%ecx,4),%ebx
000005c0	movl	%ebx,(%esp)
000005c3	calll	_strlen
000005c8	movl	%eax,%esi
000005ca	leal	0x01(%esi),%eax
000005cd	movl	%eax,0xe4(%ebp)
000005d0	movl	%eax,0x08(%esp)
000005d4	movl	%ebx,0x04(%esp)
000005d8	movl	%edi,(%esp)
000005db	calll	_memcpy
000005e0	movl	0xec(%ebp),%eax
000005e3	testl	%eax,%eax
000005e5	jne	0x000005ed
000005e7	movl	0x08(%ebp),%ecx
000005ea	movl	%esi,0x04(%ecx)
000005ed	movl	0x10(%ebp),%ebx
000005f0	movl	(%ebx,%eax,4),%ecx
000005f3	movl	%ecx,0xe0(%ebp)
000005f6	movl	%ecx,(%esp)
000005f9	movl	$0x00000020,0x04(%esp)
00000601	movl	0xe4(%ebp),%ecx
00000604	addl	%ecx,0xe8(%ebp)
00000607	movl	%eax,%edi
00000609	calll	_strchr
0000060e	testl	%eax,%eax
00000610	jne	0x0000062a
00000612	movl	%esi,0x08(%esp)
00000616	movl	0xe0(%ebp),%eax
00000619	movl	%eax,0x04(%esp)
0000061d	movl	0xf0(%ebp),%eax
00000620	movl	%eax,(%esp)
00000623	calll	_memcpy
00000628	jmp	0x00000654
0000062a	movl	0xf0(%ebp),%edi
0000062d	movb	$0x22,(%edi)
00000630	movl	0xec(%ebp),%eax
00000633	movl	(%ebx,%eax,4),%eax
00000636	movl	%esi,0x08(%esp)
0000063a	movl	%eax,0x04(%esp)
0000063e	leal	0x01(%edi),%eax
00000641	movl	%eax,(%esp)
00000644	calll	_memcpy
00000649	movb	$0x22,0x01(%edi,%esi)
0000064e	movl	0xec(%ebp),%edi
00000651	addl	$0x02,%esi
00000654	cmpl	%edi,0xdc(%ebp)
00000657	movl	%edi,%ecx
00000659	jne	0x00000660
0000065b	addl	%esi,0xf0(%ebp)
0000065e	jmp	0x0000066e
00000660	movl	0xf0(%ebp),%eax
00000663	movb	$0x20,(%eax,%esi)
00000667	leal	0x01(%eax,%esi),%eax
0000066b	movl	%eax,0xf0(%ebp)
0000066e	incl	%ecx
0000066f	cmpl	%ecx,0x0c(%ebp)
00000672	movl	0x08(%ebp),%esi
00000675	movl	%esi,%edx
00000677	jne	0x000005b0
0000067d	addl	$0x2c,%esp
00000680	popl	%esi
00000681	popl	%edi
00000682	popl	%ebx
00000683	popl	%ebp
00000684	ret
00000685	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::DefaultBreakSet():
00000690	calll	0x00000695
00000695	popl	%eax
00000696	leal	s_BreakSet-0x695(%eax),%eax
0000069c	ret
0000069d	nopl	(%eax)
CCommand::Tokenize(char const*, characterset_t*):
000006a0	pushl	%ebp
000006a1	movl	%esp,%ebp
000006a3	pushl	%ebx
000006a4	pushl	%edi
000006a5	pushl	%esi
000006a6	subl	$0x6c,%esp
000006a9	calll	0x000006ae
000006ae	popl	%ecx
000006af	movl	0x08(%ebp),%edi
000006b2	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%edi)
000006b8	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edi)
000006bf	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edi)
000006c3	xorb	%bl,%bl
000006c5	movl	0x0c(%ebp),%edx
000006c8	testl	%edx,%edx
000006ca	je	0x00000832
000006d0	movl	0x10(%ebp),%eax
000006d3	movl	%edx,(%esp)
000006d6	leal	s_BreakSet-0x6ae(%ecx),%edx
000006dc	testl	%eax,%eax
000006de	cmovnel	%eax,%edx
000006e1	movl	%edx,0xa4(%ebp)
000006e4	movl	%ecx,%ebx
000006e6	calll	_strlen
000006eb	movl	%eax,%esi
000006ed	cmpl	$0x000001ff,%esi
000006f3	jl	0x0000070a
000006f5	leal	0x16054-0x6ae(%ebx),%eax
000006fb	movl	%eax,(%esp)
000006fe	calll	_Warning
00000703	xorb	%bl,%bl
00000705	jmp	0x00000832
0000070a	movl	%ebx,0xa8(%ebp)
0000070d	leal	0x08(%edi),%ebx
00000710	leal	0x01(%esi),%eax
00000713	movl	%eax,0x08(%esp)
00000717	movl	0x0c(%ebp),%eax
0000071a	movl	%eax,0x04(%esp)
0000071e	movl	%ebx,(%esp)
00000721	calll	_memcpy
00000726	movl	%esi,0x08(%esp)
0000072a	movl	%ebx,0x04(%esp)
0000072e	leal	0xb8(%ebp),%eax
00000731	movl	%eax,(%esp)
00000734	movl	$0x00000009,0x0c(%esp)
0000073c	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
00000741	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb4(%ebp)
00000748	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
00000750	movb	$0x01,%bl
00000752	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xcc(%ebp)
00000756	jne	0x0000080f
0000075c	movb	$0x01,%bl
0000075e	cmpl	$0x3f,(%edi)
00000761	jg	0x0000080f
00000767	movl	0xb4(%ebp),%eax
0000076a	leal	0x00000208(%edi,%eax),%ecx
00000771	movl	%ecx,0xb0(%ebp)
00000774	movl	%edi,%esi
00000776	movl	ConCommandBase::ConCommandBase(char const*, char const*, int),%edi
0000077b	subl	%eax,%edi
0000077d	movl	0xc4(%ebp),%eax
00000780	movl	%eax,0xac(%ebp)
00000783	movl	%edi,0x0c(%esp)
00000787	movl	%ecx,0x08(%esp)
0000078b	movl	0xa4(%ebp),%eax
0000078e	movl	%eax,0x04(%esp)
00000792	leal	0xb8(%ebp),%eax
00000795	movl	%eax,(%esp)
00000798	movl	$0x00000001,0x10(%esp)
000007a0	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
000007a5	movb	$0x01,%bl
000007a7	testl	%eax,%eax
000007a9	movl	%esi,%edx
000007ab	js	0x0000080f
000007ad	cmpl	%eax,%edi
000007af	movl	%eax,%esi
000007b1	je	0x000007fc
000007b3	movl	(%edx),%eax
000007b5	cmpl	$0x01,%eax
000007b8	jne	0x000007e0
000007ba	movl	0xc4(%ebp),%ecx
000007bd	movl	%ecx,0x04(%edx)
000007c0	cmpb	$0x22,0x07(%edx,%ecx)
000007c5	jne	0x000007cb
000007c7	decl	%ecx
000007c8	movl	%ecx,0x04(%edx)
000007cb	subl	%esi,%ecx
000007cd	movl	%ecx,0x04(%edx)
000007d0	cmpl	0xac(%ebp),%ecx
000007d3	jle	0x000007e0
000007d5	cmpb	$0x22,0x07(%edx,%ecx)
000007da	jne	0x000007e0
000007dc	decl	%ecx
000007dd	movl	%ecx,0x04(%edx)
000007e0	leal	0x01(%eax),%ecx
000007e3	movl	%ecx,(%edx)
000007e5	movl	0xb0(%ebp),%ecx
000007e8	movl	%ecx,0x00000408(%edx,%eax,4)
000007ef	cmpl	$0x40,(%edx)
000007f2	movl	%edx,%edi
000007f4	jl	0x0000087b
000007fa	jmp	0x0000086a
000007fc	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%edx)
00000802	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edx)
00000809	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edx)
0000080d	xorb	%bl,%bl
0000080f	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConVar_Unregister()(%ebp)
00000813	js	0x00000832
00000815	movl	0xb8(%ebp),%eax
00000818	testl	%eax,%eax
0000081a	je	0x0000082b
0000081c	movl	%eax,(%esp)
0000081f	calll	_free
00000824	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb8(%ebp)
0000082b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xbc(%ebp)
00000832	movzbl	%bl,%eax
00000835	addl	$0x6c,%esp
00000838	popl	%esi
00000839	popl	%edi
0000083a	popl	%ebx
0000083b	popl	%ebp
0000083c	ret
0000083d	movl	%eax,%esi
0000083f	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConVar_Unregister()(%ebp)
00000843	js	0x00000862
00000845	movl	0xb8(%ebp),%eax
00000848	testl	%eax,%eax
0000084a	je	0x0000085b
0000084c	movl	%eax,(%esp)
0000084f	calll	_free
00000854	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb8(%ebp)
0000085b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xbc(%ebp)
00000862	movl	%esi,(%esp)
00000865	calll	__Unwind_Resume
0000086a	movl	0xa8(%ebp),%eax
0000086d	leal	0x160ae-0x6ae(%eax),%eax
00000873	movl	%eax,(%esp)
00000876	calll	_Warning
0000087b	movl	0xb4(%ebp),%eax
0000087e	leal	0x01(%eax,%esi),%eax
00000882	movl	%eax,0xb4(%ebp)
00000885	jmp	0x00000750
0000088a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::FindArg(char const*) const:
00000890	pushl	%ebp
00000891	movl	%esp,%ebp
00000893	pushl	%ebx
00000894	pushl	%edi
00000895	pushl	%esi
00000896	subl	$0x1c,%esp
00000899	calll	0x0000089e
0000089e	popl	%eax
0000089f	movl	%eax,0xf0(%ebp)
000008a2	movl	0x08(%ebp),%edx
000008a5	movl	(%edx),%eax
000008a7	movl	%eax,0xec(%ebp)
000008aa	movl	$0x00000103,%ebx
000008af	nop
000008b0	movl	%ebx,%esi
000008b2	leal	0xfffffefe(%esi),%ecx
000008b8	xorl	%eax,%eax
000008ba	cmpl	0xec(%ebp),%ecx
000008bd	jge	0x00000918
000008bf	cmpl	%ecx,(%edx)
000008c1	jg	0x000008d0
000008c3	movl	%edx,%edi
000008c5	movl	0xf0(%ebp),%eax
000008c8	leal	0x1604c-0x89e(%eax),%eax
000008ce	jmp	0x000008d5
000008d0	movl	(%edx,%esi,4),%eax
000008d3	movl	%edx,%edi
000008d5	movl	0x0c(%ebp),%ecx
000008d8	movl	%ecx,0x04(%esp)
000008dc	movl	%eax,(%esp)
000008df	leal	0x01(%esi),%ebx
000008e2	calll	V_stricmp(char const*, char const*)
000008e7	testl	%eax,%eax
000008e9	movl	%edi,%edx
000008eb	jne	0x000008b0
000008ed	addl	$0xfffffefe,%ebx
000008f3	movl	0xf0(%ebp),%eax
000008f6	leal	0x1604c-0x89e(%eax),%eax
000008fc	cmpl	0xec(%ebp),%ebx
000008ff	jge	0x00000918
00000901	testl	%ebx,%ebx
00000903	js	0x00000918
00000905	cmpl	%ebx,(%edx)
00000907	jg	0x00000914
00000909	movl	0xf0(%ebp),%eax
0000090c	leal	0x1604c-0x89e(%eax),%eax
00000912	jmp	0x00000918
00000914	movl	0x04(%edx,%esi,4),%eax
00000918	addl	$0x1c,%esp
0000091b	popl	%esi
0000091c	popl	%edi
0000091d	popl	%ebx
0000091e	popl	%ebp
0000091f	ret
CCommand::FindArgInt(char const*, int) const:
00000920	pushl	%ebp
00000921	movl	%esp,%ebp
00000923	pushl	%ebx
00000924	pushl	%edi
00000925	pushl	%esi
00000926	subl	$0x1c,%esp
00000929	calll	0x0000092e
0000092e	popl	%eax
0000092f	movl	%eax,0xf0(%ebp)
00000932	movl	0x08(%ebp),%ecx
00000935	movl	(%ecx),%eax
00000937	movl	%eax,0xec(%ebp)
0000093a	movl	$0x00000103,%esi
0000093f	nop
00000940	movl	%esi,%edi
00000942	leal	0xfffffefe(%edi),%eax
00000948	cmpl	0xec(%ebp),%eax
0000094b	jge	0x000009b4
0000094d	cmpl	%eax,(%ecx)
0000094f	jg	0x0000095e
00000951	movl	%ecx,%ebx
00000953	movl	0xf0(%ebp),%eax
00000956	leal	0x1604c-0x92e(%eax),%eax
0000095c	jmp	0x00000963
0000095e	movl	(%ecx,%edi,4),%eax
00000961	movl	%ecx,%ebx
00000963	movl	0x0c(%ebp),%ecx
00000966	movl	%ecx,0x04(%esp)
0000096a	movl	%eax,(%esp)
0000096d	leal	0x01(%edi),%esi
00000970	calll	V_stricmp(char const*, char const*)
00000975	testl	%eax,%eax
00000977	movl	%ebx,%ecx
00000979	jne	0x00000940
0000097b	addl	$0xfffffefe,%esi
00000981	movl	0xf0(%ebp),%eax
00000984	leal	0x1604c-0x92e(%eax),%eax
0000098a	cmpl	0xec(%ebp),%esi
0000098d	jge	0x000009aa
0000098f	testl	%esi,%esi
00000991	js	0x000009aa
00000993	cmpl	%esi,(%ecx)
00000995	jg	0x000009a2
00000997	movl	0xf0(%ebp),%eax
0000099a	leal	0x1604c-0x92e(%eax),%eax
000009a0	jmp	0x000009aa
000009a2	movl	0x04(%ecx,%edi,4),%eax
000009a6	testl	%eax,%eax
000009a8	je	0x000009b4
000009aa	movl	%eax,(%esp)
000009ad	calll	_atoi
000009b2	jmp	0x000009b7
000009b4	movl	0x10(%ebp),%eax
000009b7	addl	$0x1c,%esp
000009ba	popl	%esi
000009bb	popl	%edi
000009bc	popl	%ebx
000009bd	popl	%ebp
000009be	ret
000009bf	nop
DefaultCompletionFunc(char const*, char (*) [64]):
000009c0	xorl	%eax,%eax
000009c2	ret
000009c3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64])):
000009d0	pushl	%esi
000009d1	calll	0x000009d6
000009d6	popl	%ecx
000009d7	movl	0x08(%esp),%eax
000009db	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000009e2	leal	vtable for ConCommand-0x9d6+0x00000008(%ecx),%edx
000009e8	movl	%edx,(%eax)
000009ea	movl	0x10(%esp),%edx
000009ee	movl	%edx,0x18(%eax)
000009f1	leal	DefaultCompletionFunc(char const*, char (*) [64])-0x9d6(%ecx),%esi
000009f7	movl	0x1c(%esp),%edx
000009fb	testl	%edx,%edx
000009fd	cmovnel	%edx,%esi
00000a00	movb	0x20(%eax),%dl
00000a03	movl	%esi,0x1c(%eax)
00000a06	setne	%dh
00000a09	andb	$0xf8,%dl
00000a0c	orb	%dh,%dl
00000a0e	movb	%dl,0x20(%eax)
00000a11	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000a15	movl	0x0c(%esp),%edx
00000a19	movl	%edx,0x0c(%eax)
00000a1c	leal	0x1604c-0x9d6(%ecx),%edx
00000a22	movl	0x14(%esp),%esi
00000a26	testl	%esi,%esi
00000a28	cmovnel	%esi,%edx
00000a2b	movl	%edx,0x10(%eax)
00000a2e	movl	0x18(%esp),%edx
00000a32	movl	%edx,0x14(%eax)
00000a35	testb	$0x01,%dl
00000a38	jne	0x00000a4b
00000a3a	movl	ConCommandBase::s_pConCommandBases-0x9d6(%ecx),%edx
00000a40	movl	%edx,0x04(%eax)
00000a43	movl	%eax,ConCommandBase::s_pConCommandBases-0x9d6(%ecx)
00000a49	jmp	0x00000a52
00000a4b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000a52	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x9d6(%ecx)
00000a5c	jne	0x00000a60
00000a5e	popl	%esi
00000a5f	ret
00000a60	movl	(%eax),%eax
00000a62	movl	0x28(%eax),%eax
00000a65	popl	%esi
00000a66	jmp	*%eax
00000a68	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64])):
00000a70	pushl	%esi
00000a71	calll	0x00000a76
00000a76	popl	%ecx
00000a77	movl	0x08(%esp),%eax
00000a7b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000a82	leal	vtable for ConCommand-0xa76+0x00000008(%ecx),%edx
00000a88	movl	%edx,(%eax)
00000a8a	movl	0x10(%esp),%edx
00000a8e	movl	%edx,0x18(%eax)
00000a91	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xa76(%ecx),%esi
00000a97	movl	0x1c(%esp),%edx
00000a9b	testl	%edx,%edx
00000a9d	cmovnel	%edx,%esi
00000aa0	movb	0x20(%eax),%dl
00000aa3	movl	%esi,0x1c(%eax)
00000aa6	setne	%dh
00000aa9	andb	$0xf8,%dl
00000aac	orb	%dh,%dl
00000aae	movb	%dl,0x20(%eax)
00000ab1	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000ab5	movl	0x0c(%esp),%edx
00000ab9	movl	%edx,0x0c(%eax)
00000abc	leal	0x1604c-0xa76(%ecx),%edx
00000ac2	movl	0x14(%esp),%esi
00000ac6	testl	%esi,%esi
00000ac8	cmovnel	%esi,%edx
00000acb	movl	%edx,0x10(%eax)
00000ace	movl	0x18(%esp),%edx
00000ad2	movl	%edx,0x14(%eax)
00000ad5	testb	$0x01,%dl
00000ad8	jne	0x00000aeb
00000ada	movl	ConCommandBase::s_pConCommandBases-0xa76(%ecx),%edx
00000ae0	movl	%edx,0x04(%eax)
00000ae3	movl	%eax,ConCommandBase::s_pConCommandBases-0xa76(%ecx)
00000ae9	jmp	0x00000af2
00000aeb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000af2	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xa76(%ecx)
00000afc	jne	0x00000b00
00000afe	popl	%esi
00000aff	ret
00000b00	movl	(%eax),%eax
00000b02	movl	0x28(%eax),%eax
00000b05	popl	%esi
00000b06	jmp	*%eax
00000b08	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64])):
00000b10	pushl	%esi
00000b11	calll	0x00000b16
00000b16	popl	%ecx
00000b17	movl	0x08(%esp),%eax
00000b1b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000b22	leal	vtable for ConCommand-0xb16+0x00000008(%ecx),%edx
00000b28	movl	%edx,(%eax)
00000b2a	movl	0x10(%esp),%edx
00000b2e	movl	%edx,0x18(%eax)
00000b31	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xb16(%ecx),%esi
00000b37	movl	0x1c(%esp),%edx
00000b3b	testl	%edx,%edx
00000b3d	cmovnel	%edx,%esi
00000b40	movb	0x20(%eax),%dl
00000b43	movl	%esi,0x1c(%eax)
00000b46	setne	%dh
00000b49	andb	$0xf8,%dl
00000b4c	orb	%dh,%dl
00000b4e	orb	$0x02,%dl
00000b51	movb	%dl,0x20(%eax)
00000b54	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000b58	movl	0x0c(%esp),%edx
00000b5c	movl	%edx,0x0c(%eax)
00000b5f	leal	0x1604c-0xb16(%ecx),%edx
00000b65	movl	0x14(%esp),%esi
00000b69	testl	%esi,%esi
00000b6b	cmovnel	%esi,%edx
00000b6e	movl	%edx,0x10(%eax)
00000b71	movl	0x18(%esp),%edx
00000b75	movl	%edx,0x14(%eax)
00000b78	testb	$0x01,%dl
00000b7b	jne	0x00000b8e
00000b7d	movl	ConCommandBase::s_pConCommandBases-0xb16(%ecx),%edx
00000b83	movl	%edx,0x04(%eax)
00000b86	movl	%eax,ConCommandBase::s_pConCommandBases-0xb16(%ecx)
00000b8c	jmp	0x00000b95
00000b8e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000b95	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xb16(%ecx)
00000b9f	jne	0x00000ba3
00000ba1	popl	%esi
00000ba2	ret
00000ba3	movl	(%eax),%eax
00000ba5	movl	0x28(%eax),%eax
00000ba8	popl	%esi
00000ba9	jmp	*%eax
00000bab	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64])):
00000bb0	pushl	%esi
00000bb1	calll	0x00000bb6
00000bb6	popl	%ecx
00000bb7	movl	0x08(%esp),%eax
00000bbb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000bc2	leal	vtable for ConCommand-0xbb6+0x00000008(%ecx),%edx
00000bc8	movl	%edx,(%eax)
00000bca	movl	0x10(%esp),%edx
00000bce	movl	%edx,0x18(%eax)
00000bd1	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xbb6(%ecx),%esi
00000bd7	movl	0x1c(%esp),%edx
00000bdb	testl	%edx,%edx
00000bdd	cmovnel	%edx,%esi
00000be0	movb	0x20(%eax),%dl
00000be3	movl	%esi,0x1c(%eax)
00000be6	setne	%dh
00000be9	andb	$0xf8,%dl
00000bec	orb	%dh,%dl
00000bee	orb	$0x02,%dl
00000bf1	movb	%dl,0x20(%eax)
00000bf4	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000bf8	movl	0x0c(%esp),%edx
00000bfc	movl	%edx,0x0c(%eax)
00000bff	leal	0x1604c-0xbb6(%ecx),%edx
00000c05	movl	0x14(%esp),%esi
00000c09	testl	%esi,%esi
00000c0b	cmovnel	%esi,%edx
00000c0e	movl	%edx,0x10(%eax)
00000c11	movl	0x18(%esp),%edx
00000c15	movl	%edx,0x14(%eax)
00000c18	testb	$0x01,%dl
00000c1b	jne	0x00000c2e
00000c1d	movl	ConCommandBase::s_pConCommandBases-0xbb6(%ecx),%edx
00000c23	movl	%edx,0x04(%eax)
00000c26	movl	%eax,ConCommandBase::s_pConCommandBases-0xbb6(%ecx)
00000c2c	jmp	0x00000c35
00000c2e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000c35	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xbb6(%ecx)
00000c3f	jne	0x00000c43
00000c41	popl	%esi
00000c42	ret
00000c43	movl	(%eax),%eax
00000c45	movl	0x28(%eax),%eax
00000c48	popl	%esi
00000c49	jmp	*%eax
00000c4b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*):
00000c50	pushl	%esi
00000c51	calll	0x00000c56
00000c56	popl	%ecx
00000c57	movl	0x08(%esp),%eax
00000c5b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000c62	leal	vtable for ConCommand-0xc56+0x00000008(%ecx),%edx
00000c68	movl	%edx,(%eax)
00000c6a	movl	0x10(%esp),%edx
00000c6e	movl	%edx,0x18(%eax)
00000c71	movb	0x20(%eax),%dl
00000c74	movl	0x1c(%esp),%esi
00000c78	movl	%esi,0x1c(%eax)
00000c7b	testl	%esi,%esi
00000c7d	setne	%dh
00000c80	andb	$0xf8,%dl
00000c83	orb	%dh,%dl
00000c85	orb	$0x04,%dl
00000c88	movb	%dl,0x20(%eax)
00000c8b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000c8f	movl	0x0c(%esp),%edx
00000c93	movl	%edx,0x0c(%eax)
00000c96	leal	0x1604c-0xc56(%ecx),%edx
00000c9c	movl	0x14(%esp),%esi
00000ca0	testl	%esi,%esi
00000ca2	cmovnel	%esi,%edx
00000ca5	movl	%edx,0x10(%eax)
00000ca8	movl	0x18(%esp),%edx
00000cac	movl	%edx,0x14(%eax)
00000caf	testb	$0x01,%dl
00000cb2	jne	0x00000cc5
00000cb4	movl	ConCommandBase::s_pConCommandBases-0xc56(%ecx),%edx
00000cba	movl	%edx,0x04(%eax)
00000cbd	movl	%eax,ConCommandBase::s_pConCommandBases-0xc56(%ecx)
00000cc3	jmp	0x00000ccc
00000cc5	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000ccc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xc56(%ecx)
00000cd6	jne	0x00000cda
00000cd8	popl	%esi
00000cd9	ret
00000cda	movl	(%eax),%eax
00000cdc	movl	0x28(%eax),%eax
00000cdf	popl	%esi
00000ce0	jmp	*%eax
00000ce2	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*):
00000cf0	pushl	%esi
00000cf1	calll	0x00000cf6
00000cf6	popl	%ecx
00000cf7	movl	0x08(%esp),%eax
00000cfb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000d02	leal	vtable for ConCommand-0xcf6+0x00000008(%ecx),%edx
00000d08	movl	%edx,(%eax)
00000d0a	movl	0x10(%esp),%edx
00000d0e	movl	%edx,0x18(%eax)
00000d11	movb	0x20(%eax),%dl
00000d14	movl	0x1c(%esp),%esi
00000d18	movl	%esi,0x1c(%eax)
00000d1b	testl	%esi,%esi
00000d1d	setne	%dh
00000d20	andb	$0xf8,%dl
00000d23	orb	%dh,%dl
00000d25	orb	$0x04,%dl
00000d28	movb	%dl,0x20(%eax)
00000d2b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000d2f	movl	0x0c(%esp),%edx
00000d33	movl	%edx,0x0c(%eax)
00000d36	leal	0x1604c-0xcf6(%ecx),%edx
00000d3c	movl	0x14(%esp),%esi
00000d40	testl	%esi,%esi
00000d42	cmovnel	%esi,%edx
00000d45	movl	%edx,0x10(%eax)
00000d48	movl	0x18(%esp),%edx
00000d4c	movl	%edx,0x14(%eax)
00000d4f	testb	$0x01,%dl
00000d52	jne	0x00000d65
00000d54	movl	ConCommandBase::s_pConCommandBases-0xcf6(%ecx),%edx
00000d5a	movl	%edx,0x04(%eax)
00000d5d	movl	%eax,ConCommandBase::s_pConCommandBases-0xcf6(%ecx)
00000d63	jmp	0x00000d6c
00000d65	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000d6c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xcf6(%ecx)
00000d76	jne	0x00000d7a
00000d78	popl	%esi
00000d79	ret
00000d7a	movl	(%eax),%eax
00000d7c	movl	0x28(%eax),%eax
00000d7f	popl	%esi
00000d80	jmp	*%eax
00000d82	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000d90	jmp	operator delete(void*)
00000d95	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000da0	ret
00000da1	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000db0	ret
00000db1	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::IsCommand() const:
00000dc0	movl	$0x00000001,%eax
00000dc5	ret
00000dc6	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::Dispatch(CCommand const&):
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	subl	$0x08,%esp
00000dd6	movl	0x08(%ebp),%ecx
00000dd9	movb	0x20(%ecx),%dl
00000ddc	movl	0x0c(%ebp),%eax
00000ddf	testb	$0x02,%dl
00000de2	je	0x00000df2
00000de4	movl	0x18(%ecx),%ecx
00000de7	testl	%ecx,%ecx
00000de9	je	0x00000e12
00000deb	movl	%eax,(%esp)
00000dee	call	*%ecx
00000df0	jmp	0x00000e12
00000df2	testb	$0x04,%dl
00000df5	je	0x00000e0b
00000df7	movl	0x18(%ecx),%ecx
00000dfa	testl	%ecx,%ecx
00000dfc	je	0x00000e12
00000dfe	movl	(%ecx),%edx
00000e00	movl	%eax,0x04(%esp)
00000e04	movl	%ecx,(%esp)
00000e07	call	(%edx)
00000e09	jmp	0x00000e12
00000e0b	movl	0x18(%ecx),%eax
00000e0e	testl	%eax,%eax
00000e10	jne	0x00000e17
00000e12	addl	$0x08,%esp
00000e15	popl	%ebp
00000e16	ret
00000e17	addl	$0x08,%esp
00000e1a	popl	%ebp
00000e1b	jmp	*%eax
00000e1d	nopl	(%eax)
ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&):
00000e20	pushl	%ebp
00000e21	movl	%esp,%ebp
00000e23	pushl	%ebx
00000e24	pushl	%edi
00000e25	pushl	%esi
00000e26	subl	$0x0000103c,%esp
00000e2c	calll	0x00000e31
00000e31	popl	%eax
00000e32	movl	0x19685-0xe31(%eax),%eax
00000e38	movl	%eax,0xffffefd0(%ebp)
00000e3e	movl	(%eax),%eax
00000e40	movl	%eax,0xf0(%ebp)
00000e43	movl	0x10(%ebp),%ebx
00000e46	movl	0x0c(%ebp),%eax
00000e49	movl	0x08(%ebp),%ecx
00000e4c	testb	$0x04,0x20(%ecx)
00000e50	je	0x00000e9a
00000e52	movl	0x1c(%ecx),%ecx
00000e55	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefd4(%ebp)
00000e5f	testl	%ecx,%ecx
00000e61	je	0x00000e78
00000e63	movl	(%ecx),%edx
00000e65	movl	%ebx,0x08(%esp)
00000e69	movl	%eax,0x04(%esp)
00000e6d	movl	%ecx,(%esp)
00000e70	call	(%edx)
00000e72	movl	%eax,0xffffefd4(%ebp)
00000e78	movl	0xffffefd0(%ebp),%eax
00000e7e	movl	(%eax),%eax
00000e80	cmpl	0xf0(%ebp),%eax
00000e83	jne	0x00000ff3
00000e89	movl	0xffffefd4(%ebp),%eax
00000e8f	addl	$0x0000103c,%esp
00000e95	popl	%esi
00000e96	popl	%edi
00000e97	popl	%ebx
00000e98	popl	%ebp
00000e99	ret
00000e9a	movl	0x1c(%ecx),%ecx
00000e9d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefd4(%ebp)
00000ea7	testl	%ecx,%ecx
00000ea9	je	0x00000e78
00000eab	leal	0xffffeff0(%ebp),%esi
00000eb1	movl	%esi,0x04(%esp)
00000eb5	movl	%eax,(%esp)
00000eb8	call	*%ecx
00000eba	movl	%eax,0xffffefd4(%ebp)
00000ec0	movl	$0xffffffff,0xffffefdc(%ebp)
00000eca	jmp	0x00000ef6
00000ecc	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
00000ed0	movl	0xffffefe0(%ebp),%eax
00000ed6	testl	%eax,%eax
00000ed8	je	0x00000eec
00000eda	movl	%eax,(%esp)
00000edd	calll	_free
00000ee2	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe0(%ebp)
00000eec	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe4(%ebp)
00000ef6	movl	0xffffefdc(%ebp),%eax
00000efc	incl	%eax
00000efd	movl	%eax,0xffffefdc(%ebp)
00000f03	cmpl	0xffffefd4(%ebp),%eax
00000f09	jge	0x00000e78
00000f0f	movl	%esi,0x04(%esp)
00000f13	movl	%esi,0xffffefd8(%ebp)
00000f19	leal	0xffffefe0(%ebp),%eax
00000f1f	movl	%eax,(%esp)
00000f22	calll	CUtlString::CUtlString(char const*)
00000f27	movl	%ebx,%edx
00000f29	movl	0x04(%edx),%eax
00000f2c	movl	0x0c(%edx),%edi
00000f2f	leal	0x01(%edi),%ebx
00000f32	cmpl	%eax,%ebx
00000f34	movl	%edi,%ecx
00000f36	jle	0x00000f4f
00000f38	movl	%ebx,%ecx
00000f3a	subl	%eax,%ecx
00000f3c	movl	%ecx,0x04(%esp)
00000f40	movl	%edx,(%esp)
00000f43	movl	%edx,%esi
00000f45	calll	CUtlMemory<CUtlString, int>::Grow(int)
00000f4a	movl	%esi,%edx
00000f4c	movl	0x0c(%edx),%ecx
00000f4f	incl	%ecx
00000f50	movl	%ecx,0x0c(%edx)
00000f53	movl	(%edx),%eax
00000f55	movl	%eax,0x10(%edx)
00000f58	subl	%edi,%ecx
00000f5a	decl	%ecx
00000f5b	testl	%ecx,%ecx
00000f5d	jle	0x00000f84
00000f5f	shll	$0x04,%ecx
00000f62	movl	%ecx,0x08(%esp)
00000f66	movl	%edi,%ecx
00000f68	shll	$0x04,%ecx
00000f6b	addl	%eax,%ecx
00000f6d	movl	%ecx,0x04(%esp)
00000f71	shll	$0x04,%ebx
00000f74	addl	%eax,%ebx
00000f76	movl	%ebx,(%esp)
00000f79	movl	%edx,%ebx
00000f7b	calll	_memmove
00000f80	movl	%ebx,%edx
00000f82	movl	(%edx),%eax
00000f84	movl	%edx,%ebx
00000f86	shll	$0x04,%edi
00000f89	addl	%eax,%edi
00000f8b	movl	0xffffefd8(%ebp),%esi
00000f91	je	0x00000fa5
00000f93	leal	0xffffefe0(%ebp),%eax
00000f99	movl	%eax,0x04(%esp)
00000f9d	movl	%edi,(%esp)
00000fa0	calll	CUtlString::CUtlString(CUtlString const&)
00000fa5	addl	$0x40,%esi
00000fa8	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe8(%ebp)
00000faf	js	0x00000ef6
00000fb5	jmp	0x00000ed0
00000fba	movl	%eax,%esi
00000fbc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe8(%ebp)
00000fc3	js	0x00000feb
00000fc5	movl	0xffffefe0(%ebp),%eax
00000fcb	testl	%eax,%eax
00000fcd	je	0x00000fe1
00000fcf	movl	%eax,(%esp)
00000fd2	calll	_free
00000fd7	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe0(%ebp)
00000fe1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe4(%ebp)
00000feb	movl	%esi,(%esp)
00000fee	calll	__Unwind_Resume
00000ff3	calll	___stack_chk_fail
00000ff8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::CanAutoComplete():
00001000	movl	0x04(%esp),%eax
00001004	movzbl	0x20(%eax),%eax
00001008	andl	$0x01,%eax
0000100b	ret
0000100c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int):
00001010	jmp	ConVar::ConVar(char const*, char const*, int)
00001015	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int):
00001020	pushl	%ebp
00001021	movl	%esp,%ebp
00001023	pushl	%ebx
00001024	pushl	%edi
00001025	pushl	%esi
00001026	subl	$0x1c,%esp
00001029	calll	0x0000102e
0000102e	popl	%ecx
0000102f	movl	%ecx,0xec(%ebp)
00001032	movl	0x08(%ebp),%ebx
00001035	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001039	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001040	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001047	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000104e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001055	leal	vtable for ConVar-0x102e+0x00000008(%ecx),%eax
0000105b	movl	%eax,(%ebx)
0000105d	leal	vtable for ConVar-0x102e+0x00000060(%ecx),%eax
00001063	movl	%eax,0x18(%ebx)
00001066	movl	%ebx,0x1c(%ebx)
00001069	leal	0x1604c-0x102e(%ecx),%eax
0000106f	movl	%eax,0xe8(%ebp)
00001072	movl	0x10(%ebp),%esi
00001075	testl	%esi,%esi
00001077	cmovel	%eax,%esi
0000107a	movl	%esi,0x20(%ebx)
0000107d	movl	%esi,(%esp)
00001080	calll	_strlen
00001085	movl	%eax,%edi
00001087	incl	%edi
00001088	movl	%edi,0x28(%ebx)
0000108b	testl	%edi,%edi
0000108d	movl	$0xffffffff,%eax
00001092	cmovnsl	%edi,%eax
00001095	movl	%eax,(%esp)
00001098	calll	operator new[](unsigned long)
0000109d	movl	%eax,0x24(%ebx)
000010a0	movl	%edi,0x08(%esp)
000010a4	movl	%esi,0x04(%esp)
000010a8	movl	%eax,(%esp)
000010ab	movl	%eax,%esi
000010ad	calll	_memcpy
000010b2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000010b6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000010bd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
000010c1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
000010c8	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
000010cf	movl	%esi,(%esp)
000010d2	calll	_atof
000010d7	fstps	0xf0(%ebp)
000010da	movss	0xf0(%ebp),%xmm0
000010df	movss	%xmm0,0x2c(%ebx)
000010e4	cvttss2si	%xmm0,%eax
000010e8	movl	%eax,0x30(%ebx)
000010eb	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000010ef	movl	0x0c(%ebp),%eax
000010f2	movl	%eax,0x0c(%ebx)
000010f5	movl	0xe8(%ebp),%eax
000010f8	movl	%eax,0x10(%ebx)
000010fb	movl	0x14(%ebp),%eax
000010fe	movl	%eax,0x14(%ebx)
00001101	testb	$0x01,%al
00001103	jne	0x0000111b
00001105	movl	0xec(%ebp),%ecx
00001108	movl	ConCommandBase::s_pConCommandBases-0x102e(%ecx),%eax
0000110e	movl	%eax,0x04(%ebx)
00001111	movl	%ebx,ConCommandBase::s_pConCommandBases-0x102e(%ecx)
00001117	movl	%ecx,%eax
00001119	jmp	0x00001125
0000111b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001122	movl	0xec(%ebp),%eax
00001125	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x102e(%eax)
0000112f	jne	0x00001139
00001131	addl	$0x1c,%esp
00001134	popl	%esi
00001135	popl	%edi
00001136	popl	%ebx
00001137	popl	%ebp
00001138	ret
00001139	movl	(%ebx),%eax
0000113b	movl	0x28(%eax),%eax
0000113e	addl	$0x1c,%esp
00001141	popl	%esi
00001142	popl	%edi
00001143	popl	%ebx
00001144	popl	%ebp
00001145	jmp	*%eax
00001147	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*):
00001150	jmp	ConVar::ConVar(char const*, char const*, int, char const*)
00001155	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*):
00001160	pushl	%ebp
00001161	movl	%esp,%ebp
00001163	pushl	%ebx
00001164	pushl	%edi
00001165	pushl	%esi
00001166	subl	$0x1c,%esp
00001169	calll	0x0000116e
0000116e	popl	%ecx
0000116f	movl	%ecx,0xec(%ebp)
00001172	movl	0x08(%ebp),%ebx
00001175	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001179	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001180	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001187	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000118e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001195	leal	vtable for ConVar-0x116e+0x00000008(%ecx),%eax
0000119b	movl	%eax,(%ebx)
0000119d	leal	vtable for ConVar-0x116e+0x00000060(%ecx),%eax
000011a3	movl	%eax,0x18(%ebx)
000011a6	movl	%ebx,0x1c(%ebx)
000011a9	leal	0x1604c-0x116e(%ecx),%eax
000011af	movl	%eax,0xe8(%ebp)
000011b2	movl	0x10(%ebp),%esi
000011b5	testl	%esi,%esi
000011b7	cmovel	%eax,%esi
000011ba	movl	%esi,0x20(%ebx)
000011bd	movl	%esi,(%esp)
000011c0	calll	_strlen
000011c5	movl	%eax,%edi
000011c7	incl	%edi
000011c8	movl	%edi,0x28(%ebx)
000011cb	testl	%edi,%edi
000011cd	movl	$0xffffffff,%eax
000011d2	cmovnsl	%edi,%eax
000011d5	movl	%eax,(%esp)
000011d8	calll	operator new[](unsigned long)
000011dd	movl	%eax,0x24(%ebx)
000011e0	movl	%edi,0x08(%esp)
000011e4	movl	%esi,0x04(%esp)
000011e8	movl	%eax,(%esp)
000011eb	movl	%eax,%esi
000011ed	calll	_memcpy
000011f2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000011f6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000011fd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
00001201	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
00001208	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
0000120f	movl	%esi,(%esp)
00001212	calll	_atof
00001217	fstps	0xf0(%ebp)
0000121a	movss	0xf0(%ebp),%xmm0
0000121f	movss	%xmm0,0x2c(%ebx)
00001224	cvttss2si	%xmm0,%eax
00001228	movl	%eax,0x30(%ebx)
0000122b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
0000122f	movl	0x0c(%ebp),%eax
00001232	movl	%eax,0x0c(%ebx)
00001235	movl	0x18(%ebp),%eax
00001238	testl	%eax,%eax
0000123a	movl	0xe8(%ebp),%ecx
0000123d	cmovnel	%eax,%ecx
00001240	movl	%ecx,0x10(%ebx)
00001243	movl	0x14(%ebp),%eax
00001246	movl	%eax,0x14(%ebx)
00001249	testb	$0x01,%al
0000124b	jne	0x00001263
0000124d	movl	0xec(%ebp),%ecx
00001250	movl	ConCommandBase::s_pConCommandBases-0x116e(%ecx),%eax
00001256	movl	%eax,0x04(%ebx)
00001259	movl	%ebx,ConCommandBase::s_pConCommandBases-0x116e(%ecx)
0000125f	movl	%ecx,%eax
00001261	jmp	0x0000126d
00001263	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
0000126a	movl	0xec(%ebp),%eax
0000126d	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x116e(%eax)
00001277	jne	0x00001281
00001279	addl	$0x1c,%esp
0000127c	popl	%esi
0000127d	popl	%edi
0000127e	popl	%ebx
0000127f	popl	%ebp
00001280	ret
00001281	movl	(%ebx),%eax
00001283	movl	0x28(%eax),%eax
00001286	addl	$0x1c,%esp
00001289	popl	%esi
0000128a	popl	%edi
0000128b	popl	%ebx
0000128c	popl	%ebp
0000128d	jmp	*%eax
0000128f	nop
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float):
00001290	pushl	%ebp
00001291	movl	%esp,%ebp
00001293	subl	$0x28,%esp
00001296	movss	0x28(%ebp),%xmm0
0000129b	movss	%xmm0,0x20(%esp)
000012a1	movb	0x24(%ebp),%al
000012a4	movzbl	%al,%eax
000012a7	movl	%eax,0x1c(%esp)
000012ab	movss	0x20(%ebp),%xmm0
000012b0	movss	%xmm0,0x18(%esp)
000012b6	movb	0x1c(%ebp),%al
000012b9	movzbl	%al,%eax
000012bc	movl	%eax,0x14(%esp)
000012c0	movl	0x18(%ebp),%eax
000012c3	movl	%eax,0x10(%esp)
000012c7	movl	0x14(%ebp),%eax
000012ca	movl	%eax,0x0c(%esp)
000012ce	movl	0x10(%ebp),%eax
000012d1	movl	%eax,0x08(%esp)
000012d5	movl	0x0c(%ebp),%eax
000012d8	movl	%eax,0x04(%esp)
000012dc	movl	0x08(%ebp),%eax
000012df	movl	%eax,(%esp)
000012e2	calll	ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
000012e7	addl	$0x28,%esp
000012ea	popl	%ebp
000012eb	ret
000012ec	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float):
000012f0	pushl	%ebp
000012f1	movl	%esp,%ebp
000012f3	pushl	%ebx
000012f4	pushl	%edi
000012f5	pushl	%esi
000012f6	subl	$0x1c,%esp
000012f9	calll	0x000012fe
000012fe	popl	%ecx
000012ff	movl	%ecx,0xec(%ebp)
00001302	movl	0x08(%ebp),%ebx
00001305	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001309	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001310	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001317	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000131e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001325	leal	vtable for ConVar-0x12fe+0x00000008(%ecx),%eax
0000132b	movl	%eax,(%ebx)
0000132d	leal	vtable for ConVar-0x12fe+0x00000060(%ecx),%eax
00001333	movl	%eax,0x18(%ebx)
00001336	movl	%ebx,0x1c(%ebx)
00001339	leal	0x1604c-0x12fe(%ecx),%eax
0000133f	movl	%eax,0xe8(%ebp)
00001342	movl	0x10(%ebp),%esi
00001345	testl	%esi,%esi
00001347	cmovel	%eax,%esi
0000134a	movl	%esi,0x20(%ebx)
0000134d	movl	%esi,(%esp)
00001350	calll	_strlen
00001355	movl	%eax,%edi
00001357	incl	%edi
00001358	movl	%edi,0x28(%ebx)
0000135b	testl	%edi,%edi
0000135d	movl	$0xffffffff,%eax
00001362	cmovnsl	%edi,%eax
00001365	movl	%eax,(%esp)
00001368	calll	operator new[](unsigned long)
0000136d	movl	%eax,0x24(%ebx)
00001370	movl	%edi,0x08(%esp)
00001374	movl	%esi,0x04(%esp)
00001378	movl	%eax,(%esp)
0000137b	movl	%eax,%esi
0000137d	calll	_memcpy
00001382	movb	0x1c(%ebp),%al
00001385	movb	%al,0x34(%ebx)
00001388	movss	0x20(%ebp),%xmm0
0000138d	movss	%xmm0,0x38(%ebx)
00001392	movb	0x24(%ebp),%al
00001395	movb	%al,0x3c(%ebx)
00001398	movss	0x28(%ebp),%xmm0
0000139d	movss	%xmm0,0x40(%ebx)
000013a2	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
000013a9	movl	%esi,(%esp)
000013ac	calll	_atof
000013b1	fstps	0xf0(%ebp)
000013b4	movss	0xf0(%ebp),%xmm0
000013b9	movss	%xmm0,0x2c(%ebx)
000013be	cvttss2si	%xmm0,%eax
000013c2	movl	%eax,0x30(%ebx)
000013c5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000013c9	movl	0x0c(%ebp),%eax
000013cc	movl	%eax,0x0c(%ebx)
000013cf	movl	0x18(%ebp),%eax
000013d2	testl	%eax,%eax
000013d4	movl	0xe8(%ebp),%ecx
000013d7	cmovnel	%eax,%ecx
000013da	movl	%ecx,0x10(%ebx)
000013dd	movl	0x14(%ebp),%eax
000013e0	movl	%eax,0x14(%ebx)
000013e3	testb	$0x01,%al
000013e5	jne	0x000013fd
000013e7	movl	0xec(%ebp),%ecx
000013ea	movl	ConCommandBase::s_pConCommandBases-0x12fe(%ecx),%eax
000013f0	movl	%eax,0x04(%ebx)
000013f3	movl	%ebx,ConCommandBase::s_pConCommandBases-0x12fe(%ecx)
000013f9	movl	%ecx,%eax
000013fb	jmp	0x00001407
000013fd	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001404	movl	0xec(%ebp),%eax
00001407	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x12fe(%eax)
00001411	jne	0x0000141b
00001413	addl	$0x1c,%esp
00001416	popl	%esi
00001417	popl	%edi
00001418	popl	%ebx
00001419	popl	%ebp
0000141a	ret
0000141b	movl	(%ebx),%eax
0000141d	movl	0x28(%eax),%eax
00001420	addl	$0x1c,%esp
00001423	popl	%esi
00001424	popl	%edi
00001425	popl	%ebx
00001426	popl	%ebp
00001427	jmp	*%eax
00001429	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float)):
00001430	jmp	ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
00001435	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float)):
00001440	pushl	%ebp
00001441	movl	%esp,%ebp
00001443	pushl	%ebx
00001444	pushl	%edi
00001445	pushl	%esi
00001446	subl	$0x1c,%esp
00001449	calll	0x0000144e
0000144e	popl	%ecx
0000144f	movl	%ecx,0xec(%ebp)
00001452	movl	0x08(%ebp),%ebx
00001455	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001459	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001460	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001467	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000146e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001475	leal	vtable for ConVar-0x144e+0x00000008(%ecx),%eax
0000147b	movl	%eax,(%ebx)
0000147d	leal	vtable for ConVar-0x144e+0x00000060(%ecx),%eax
00001483	movl	%eax,0x18(%ebx)
00001486	movl	%ebx,0x1c(%ebx)
00001489	leal	0x1604c-0x144e(%ecx),%eax
0000148f	movl	%eax,0xe8(%ebp)
00001492	movl	0x10(%ebp),%esi
00001495	testl	%esi,%esi
00001497	cmovel	%eax,%esi
0000149a	movl	%esi,0x20(%ebx)
0000149d	movl	%esi,(%esp)
000014a0	calll	_strlen
000014a5	movl	%eax,%edi
000014a7	incl	%edi
000014a8	movl	%edi,0x28(%ebx)
000014ab	testl	%edi,%edi
000014ad	movl	$0xffffffff,%eax
000014b2	cmovnsl	%edi,%eax
000014b5	movl	%eax,(%esp)
000014b8	calll	operator new[](unsigned long)
000014bd	movl	%eax,0x24(%ebx)
000014c0	movl	%edi,0x08(%esp)
000014c4	movl	%esi,0x04(%esp)
000014c8	movl	%eax,(%esp)
000014cb	movl	%eax,%esi
000014cd	calll	_memcpy
000014d2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000014d6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000014dd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
000014e1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
000014e8	movl	0x1c(%ebp),%eax
000014eb	movl	%eax,0x44(%ebx)
000014ee	movl	%esi,(%esp)
000014f1	calll	_atof
000014f6	fstps	0xf0(%ebp)
000014f9	movss	0xf0(%ebp),%xmm0
000014fe	movss	%xmm0,0x2c(%ebx)
00001503	cvttss2si	%xmm0,%eax
00001507	movl	%eax,0x30(%ebx)
0000150a	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
0000150e	movl	0x0c(%ebp),%eax
00001511	movl	%eax,0x0c(%ebx)
00001514	movl	0x18(%ebp),%eax
00001517	testl	%eax,%eax
00001519	movl	0xe8(%ebp),%ecx
0000151c	cmovnel	%eax,%ecx
0000151f	movl	%ecx,0x10(%ebx)
00001522	movl	0x14(%ebp),%eax
00001525	movl	%eax,0x14(%ebx)
00001528	testb	$0x01,%al
0000152a	jne	0x00001542
0000152c	movl	0xec(%ebp),%ecx
0000152f	movl	ConCommandBase::s_pConCommandBases-0x144e(%ecx),%eax
00001535	movl	%eax,0x04(%ebx)
00001538	movl	%ebx,ConCommandBase::s_pConCommandBases-0x144e(%ecx)
0000153e	movl	%ecx,%eax
00001540	jmp	0x0000154c
00001542	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001549	movl	0xec(%ebp),%eax
0000154c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x144e(%eax)
00001556	jne	0x00001560
00001558	addl	$0x1c,%esp
0000155b	popl	%esi
0000155c	popl	%edi
0000155d	popl	%ebx
0000155e	popl	%ebp
0000155f	ret
00001560	movl	(%ebx),%eax
00001562	movl	0x28(%eax),%eax
00001565	addl	$0x1c,%esp
00001568	popl	%esi
00001569	popl	%edi
0000156a	popl	%ebx
0000156b	popl	%ebp
0000156c	jmp	*%eax
0000156e	nop
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
00001570	pushl	%ebp
00001571	movl	%esp,%ebp
00001573	subl	$0x28,%esp
00001576	movl	0x2c(%ebp),%eax
00001579	movl	%eax,0x24(%esp)
0000157d	movss	0x28(%ebp),%xmm0
00001582	movss	%xmm0,0x20(%esp)
00001588	movb	0x24(%ebp),%al
0000158b	movzbl	%al,%eax
0000158e	movl	%eax,0x1c(%esp)
00001592	movss	0x20(%ebp),%xmm0
00001597	movss	%xmm0,0x18(%esp)
0000159d	movb	0x1c(%ebp),%al
000015a0	movzbl	%al,%eax
000015a3	movl	%eax,0x14(%esp)
000015a7	movl	0x18(%ebp),%eax
000015aa	movl	%eax,0x10(%esp)
000015ae	movl	0x14(%ebp),%eax
000015b1	movl	%eax,0x0c(%esp)
000015b5	movl	0x10(%ebp),%eax
000015b8	movl	%eax,0x08(%esp)
000015bc	movl	0x0c(%ebp),%eax
000015bf	movl	%eax,0x04(%esp)
000015c3	movl	0x08(%ebp),%eax
000015c6	movl	%eax,(%esp)
000015c9	calll	ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
000015ce	addl	$0x28,%esp
000015d1	popl	%ebp
000015d2	ret
000015d3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
000015e0	pushl	%ebp
000015e1	movl	%esp,%ebp
000015e3	pushl	%ebx
000015e4	pushl	%edi
000015e5	pushl	%esi
000015e6	subl	$0x1c,%esp
000015e9	calll	0x000015ee
000015ee	popl	%ecx
000015ef	movl	%ecx,0xec(%ebp)
000015f2	movl	0x08(%ebp),%ebx
000015f5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000015f9	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001600	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001607	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000160e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001615	leal	vtable for ConVar-0x15ee+0x00000008(%ecx),%eax
0000161b	movl	%eax,(%ebx)
0000161d	leal	vtable for ConVar-0x15ee+0x00000060(%ecx),%eax
00001623	movl	%eax,0x18(%ebx)
00001626	movl	%ebx,0x1c(%ebx)
00001629	leal	0x1604c-0x15ee(%ecx),%eax
0000162f	movl	%eax,0xe8(%ebp)
00001632	movl	0x10(%ebp),%esi
00001635	testl	%esi,%esi
00001637	cmovel	%eax,%esi
0000163a	movl	%esi,0x20(%ebx)
0000163d	movl	%esi,(%esp)
00001640	calll	_strlen
00001645	movl	%eax,%edi
00001647	incl	%edi
00001648	movl	%edi,0x28(%ebx)
0000164b	testl	%edi,%edi
0000164d	movl	$0xffffffff,%eax
00001652	cmovnsl	%edi,%eax
00001655	movl	%eax,(%esp)
00001658	calll	operator new[](unsigned long)
0000165d	movl	%eax,0x24(%ebx)
00001660	movl	%edi,0x08(%esp)
00001664	movl	%esi,0x04(%esp)
00001668	movl	%eax,(%esp)
0000166b	movl	%eax,%esi
0000166d	calll	_memcpy
00001672	movb	0x1c(%ebp),%al
00001675	movb	%al,0x34(%ebx)
00001678	movss	0x20(%ebp),%xmm0
0000167d	movss	%xmm0,0x38(%ebx)
00001682	movb	0x24(%ebp),%al
00001685	movb	%al,0x3c(%ebx)
00001688	movss	0x28(%ebp),%xmm0
0000168d	movss	%xmm0,0x40(%ebx)
00001692	movl	0x2c(%ebp),%eax
00001695	movl	%eax,0x44(%ebx)
00001698	movl	%esi,(%esp)
0000169b	calll	_atof
000016a0	fstps	0xf0(%ebp)
000016a3	movss	0xf0(%ebp),%xmm0
000016a8	movss	%xmm0,0x2c(%ebx)
000016ad	cvttss2si	%xmm0,%eax
000016b1	movl	%eax,0x30(%ebx)
000016b4	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000016b8	movl	0x0c(%ebp),%eax
000016bb	movl	%eax,0x0c(%ebx)
000016be	movl	0x18(%ebp),%eax
000016c1	testl	%eax,%eax
000016c3	movl	0xe8(%ebp),%ecx
000016c6	cmovnel	%eax,%ecx
000016c9	movl	%ecx,0x10(%ebx)
000016cc	movl	0x14(%ebp),%eax
000016cf	movl	%eax,0x14(%ebx)
000016d2	testb	$0x01,%al
000016d4	jne	0x000016ec
000016d6	movl	0xec(%ebp),%ecx
000016d9	movl	ConCommandBase::s_pConCommandBases-0x15ee(%ecx),%eax
000016df	movl	%eax,0x04(%ebx)
000016e2	movl	%ebx,ConCommandBase::s_pConCommandBases-0x15ee(%ecx)
000016e8	movl	%ecx,%eax
000016ea	jmp	0x000016f6
000016ec	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
000016f3	movl	0xec(%ebp),%eax
000016f6	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x15ee(%eax)
00001700	jne	0x0000170a
00001702	addl	$0x1c,%esp
00001705	popl	%esi
00001706	popl	%edi
00001707	popl	%ebx
00001708	popl	%ebp
00001709	ret
0000170a	movl	(%ebx),%eax
0000170c	movl	0x28(%eax),%eax
0000170f	addl	$0x1c,%esp
00001712	popl	%esi
00001713	popl	%edi
00001714	popl	%ebx
00001715	popl	%ebp
00001716	jmp	*%eax
00001718	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	subl	$0x08,%esp
00001726	calll	0x0000172b
0000172b	popl	%eax
0000172c	leal	vtable for ConVar-0x172b+0x00000008(%eax),%edx
00001732	movl	0x08(%ebp),%ecx
00001735	movl	%edx,(%ecx)
00001737	leal	vtable for ConVar-0x172b+0x00000060(%eax),%eax
0000173d	movl	%eax,0x18(%ecx)
00001740	movl	0x24(%ecx),%eax
00001743	testl	%eax,%eax
00001745	je	0x0000174f
00001747	movl	%eax,(%esp)
0000174a	calll	operator delete[](void*)
0000174f	addl	$0x08,%esp
00001752	popl	%ebp
00001753	jmp	operator delete(void*)
00001758	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
00001760	pushl	%ebp
00001761	movl	%esp,%ebp
00001763	pushl	%esi
00001764	pushl	%eax
00001765	calll	0x0000176a
0000176a	popl	%eax
0000176b	leal	vtable for ConVar-0x176a+0x00000008(%eax),%ecx
00001771	movl	0x08(%ebp),%esi
00001774	movl	%ecx,(%esi)
00001776	leal	vtable for ConVar-0x176a+0x00000060(%eax),%eax
0000177c	movl	%eax,0x18(%esi)
0000177f	movl	0x24(%esi),%eax
00001782	testl	%eax,%eax
00001784	je	0x00001795
00001786	movl	%eax,(%esp)
00001789	calll	operator delete[](void*)
0000178e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x24(%esi)
00001795	addl	$0x04,%esp
00001798	popl	%esi
00001799	popl	%ebp
0000179a	ret
0000179b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
000017a0	pushl	%ebp
000017a1	movl	%esp,%ebp
000017a3	pushl	%esi
000017a4	pushl	%eax
000017a5	calll	0x000017aa
000017aa	popl	%eax
000017ab	leal	vtable for ConVar-0x17aa+0x00000008(%eax),%ecx
000017b1	movl	0x08(%ebp),%esi
000017b4	movl	%ecx,(%esi)
000017b6	leal	vtable for ConVar-0x17aa+0x00000060(%eax),%eax
000017bc	movl	%eax,0x18(%esi)
000017bf	movl	0x24(%esi),%eax
000017c2	testl	%eax,%eax
000017c4	je	0x000017d5
000017c6	movl	%eax,(%esp)
000017c9	calll	operator delete[](void*)
000017ce	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x24(%esi)
000017d5	addl	$0x04,%esp
000017d8	popl	%esi
000017d9	popl	%ebp
000017da	ret
000017db	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InstallChangeCallback(void (*)(IConVar*, char const*, float)):
000017e0	pushl	%ebp
000017e1	movl	%esp,%ebp
000017e3	subl	$0x18,%esp
000017e6	movl	0x08(%ebp),%eax
000017e9	movl	0x1c(%eax),%ecx
000017ec	movl	0x0c(%ebp),%edx
000017ef	movl	%edx,0x44(%ecx)
000017f2	movl	0x1c(%eax),%ecx
000017f5	movl	0x44(%ecx),%ecx
000017f8	testl	%ecx,%ecx
000017fa	je	0x00001816
000017fc	movl	0x24(%eax),%edx
000017ff	movss	0x2c(%eax),%xmm0
00001804	movss	%xmm0,0x08(%esp)
0000180a	movl	%edx,0x04(%esp)
0000180e	addl	$0x18,%eax
00001811	movl	%eax,(%esp)
00001814	call	*%ecx
00001816	addl	$0x18,%esp
00001819	popl	%ebp
0000181a	ret
0000181b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::IsFlagSet(int) const:
00001820	movl	0x04(%esp),%eax
00001824	movl	0x1c(%eax),%eax
00001827	movl	0x14(%eax),%eax
0000182a	testl	0x08(%esp),%eax
0000182e	setne	%al
00001831	movzbl	%al,%eax
00001834	ret
00001835	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::IsFlagSet(int) const:
00001840	movl	0x04(%esp),%eax
00001844	movl	0x04(%eax),%eax
00001847	movl	0x14(%eax),%eax
0000184a	testl	0x08(%esp),%eax
0000184e	setne	%al
00001851	movzbl	%al,%eax
00001854	ret
00001855	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::GetHelpText() const:
00001860	movl	0x04(%esp),%eax
00001864	movl	0x1c(%eax),%eax
00001867	movl	0x10(%eax),%eax
0000186a	ret
0000186b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::AddFlags(int):
00001870	movl	0x04(%esp),%eax
00001874	movl	0x1c(%eax),%eax
00001877	movl	0x08(%esp),%ecx
0000187b	orl	%ecx,0x14(%eax)
0000187e	ret
0000187f	nop
ConVar::IsRegistered() const:
00001880	movl	0x04(%esp),%eax
00001884	movl	0x1c(%eax),%eax
00001887	movzbl	0x08(%eax),%eax
0000188b	andl	$0x01,%eax
0000188e	ret
0000188f	nop
ConVar::GetName() const:
00001890	movl	0x04(%esp),%eax
00001894	movl	0x1c(%eax),%eax
00001897	movl	0x0c(%eax),%eax
0000189a	ret
0000189b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::GetName() const:
000018a0	movl	0x04(%esp),%eax
000018a4	movl	0x04(%eax),%eax
000018a7	movl	0x0c(%eax),%eax
000018aa	ret
000018ab	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::IsCommand() const:
000018b0	xorl	%eax,%eax
000018b2	ret
000018b3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::Init():
000018c0	pushl	%ebp
000018c1	movl	%esp,%ebp
000018c3	subl	$0x08,%esp
000018c6	calll	0x000018cb
000018cb	popl	%eax
000018cc	movl	ConCommandBase::s_pAccessor-0x18cb(%eax),%eax
000018d2	testl	%eax,%eax
000018d4	je	0x000018e4
000018d6	movl	0x08(%ebp),%edx
000018d9	movl	(%eax),%ecx
000018db	movl	%edx,0x04(%esp)
000018df	movl	%eax,(%esp)
000018e2	call	(%ecx)
000018e4	addl	$0x08,%esp
000018e7	popl	%ebp
000018e8	ret
000018e9	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::InternalSetValue(char const*):
000018f0	pushl	%ebp
000018f1	movl	%esp,%ebp
000018f3	pushl	%ebx
000018f4	pushl	%edi
000018f5	pushl	%esi
000018f6	subl	$0x4c,%esp
000018f9	calll	0x000018fe
000018fe	popl	%eax
000018ff	movl	%eax,0xc4(%ebp)
00001902	movl	0x19685-0x18fe(%eax),%eax
00001908	movl	%eax,ConVar_Unregister()(%ebp)
0000190b	movl	(%eax),%eax
0000190d	movl	%eax,0xf0(%ebp)
00001910	movl	0x08(%ebp),%edi
00001913	movl	(%edi),%eax
00001915	movl	%edi,(%esp)
00001918	movl	$0x00b00000,0x04(%esp)
00001920	call	*0x0c(%eax)
00001923	movl	0x0c(%ebp),%ebx
00001926	testb	%al,%al
00001928	je	0x0000195c
0000192a	movl	0xc4(%ebp),%eax
0000192d	movl	0x19689-0x18fe(%eax),%esi
00001933	movl	(%esi),%eax
00001935	testl	%eax,%eax
00001937	je	0x0000195c
00001939	movl	(%eax),%ecx
0000193b	movl	%eax,(%esp)
0000193e	call	*0x70(%ecx)
00001941	testb	%al,%al
00001943	jne	0x0000195c
00001945	movl	(%esi),%ecx
00001947	movl	(%ecx),%eax
00001949	movl	%ebx,0x08(%esp)
0000194d	movl	%edi,0x04(%esp)
00001951	movl	%ecx,(%esp)
00001954	call	*0x74(%eax)
00001957	jmp	0x000019f3
0000195c	movss	0x2c(%edi),%xmm0
00001961	movss	%xmm0,0xbc(%ebp)
00001966	pxor	%xmm0,%xmm0
0000196a	testl	%ebx,%ebx
0000196c	je	0x0000197e
0000196e	movl	%ebx,(%esp)
00001971	calll	_atof
00001976	fstps	0xc8(%ebp)
00001979	movss	0xc8(%ebp),%xmm0
0000197e	movss	%xmm0,0xcc(%ebp)
00001983	movl	(%edi),%eax
00001985	leal	0xcc(%ebp),%ecx
00001988	movl	%ecx,0x04(%esp)
0000198c	movl	%edi,(%esp)
0000198f	call	*0x44(%eax)
00001992	cmpb	$0x01,%al
00001994	jne	0x000019c5
00001996	movss	0xcc(%ebp),%xmm0
0000199b	cvtss2sd	%xmm0,%xmm0
0000199f	movsd	%xmm0,0x0c(%esp)
000019a5	movl	0xc4(%ebp),%eax
000019a8	leal	0x16106-0x18fe(%eax),%eax
000019ae	movl	%eax,0x08(%esp)
000019b2	leal	0xd0(%ebp),%ebx
000019b5	movl	%ebx,(%esp)
000019b8	movl	$0x00000020,0x04(%esp)
000019c0	calll	V_snprintf(char*, int, char const*, ...)
000019c5	movss	0xcc(%ebp),%xmm0
000019ca	movss	%xmm0,0x2c(%edi)
000019cf	cvttss2si	%xmm0,%eax
000019d3	movl	%eax,0x30(%edi)
000019d6	testb	$0x10,0x15(%edi)
000019da	jne	0x000019f3
000019dc	movl	(%edi),%eax
000019de	movss	0xbc(%ebp),%xmm0
000019e3	movss	%xmm0,0x08(%esp)
000019e9	movl	%ebx,0x04(%esp)
000019ed	movl	%edi,(%esp)
000019f0	call	*0x48(%eax)
000019f3	movl	ConVar_Unregister()(%ebp),%eax
000019f6	movl	(%eax),%eax
000019f8	cmpl	0xf0(%ebp),%eax
000019fb	jne	0x00001a05
000019fd	addl	$0x4c,%esp
00001a00	popl	%esi
00001a01	popl	%edi
00001a02	popl	%ebx
00001a03	popl	%ebp
00001a04	ret
00001a05	calll	___stack_chk_fail
00001a0a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ChangeStringValue(char const*, float):
00001a10	pushl	%ebp
00001a11	movl	%esp,%ebp
00001a13	pushl	%ebx
00001a14	pushl	%edi
00001a15	pushl	%esi
00001a16	subl	$0x1c,%esp
00001a19	calll	0x00001a1e
00001a1e	popl	%eax
00001a1f	movl	%eax,0xe8(%ebp)
00001a22	movl	0x19685-0x1a1e(%eax),%eax
00001a28	movl	%eax,0xec(%ebp)
00001a2b	movl	(%eax),%eax
00001a2d	movl	%eax,0xf0(%ebp)
00001a30	movl	0x08(%ebp),%ecx
00001a33	movl	0x28(%ecx),%ebx
00001a36	leal	0x0f(%ebx),%eax
00001a39	andl	$0xf0,%eax
00001a3c	movl	%esp,%edi
00001a3e	subl	%eax,%edi
00001a40	movl	%edi,%esp
00001a42	movl	0x24(%ecx),%esi
00001a45	subl	$0x10,%esp
00001a48	movl	%ebx,0x08(%esp)
00001a4c	movl	%esi,0x04(%esp)
00001a50	movl	%edi,(%esp)
00001a53	calll	_memcpy
00001a58	addl	$0x10,%esp
00001a5b	movss	0x10(%ebp),%xmm0
00001a60	movl	0x0c(%ebp),%eax
00001a63	testl	%eax,%eax
00001a65	je	0x00001ad7
00001a67	movl	%edi,0xe4(%ebp)
00001a6a	subl	$0x10,%esp
00001a6d	movl	%eax,(%esp)
00001a70	calll	_strlen
00001a75	addl	$0x10,%esp
00001a78	movl	%eax,%edi
00001a7a	incl	%edi
00001a7b	cmpl	%ebx,%edi
00001a7d	jle	0x00001ab4
00001a7f	testl	%esi,%esi
00001a81	je	0x00001a91
00001a83	subl	$0x10,%esp
00001a86	movl	%esi,(%esp)
00001a89	calll	operator delete[](void*)
00001a8e	addl	$0x10,%esp
00001a91	testl	%edi,%edi
00001a93	movl	$0xffffffff,%eax
00001a98	cmovnsl	%edi,%eax
00001a9b	subl	$0x10,%esp
00001a9e	movl	%eax,(%esp)
00001aa1	calll	operator new[](unsigned long)
00001aa6	addl	$0x10,%esp
00001aa9	movl	%eax,%esi
00001aab	movl	0x08(%ebp),%eax
00001aae	movl	%esi,0x24(%eax)
00001ab1	movl	%edi,0x28(%eax)
00001ab4	subl	$0x10,%esp
00001ab7	movl	%edi,0x08(%esp)
00001abb	movl	0x0c(%ebp),%eax
00001abe	movl	%eax,0x04(%esp)
00001ac2	movl	%esi,(%esp)
00001ac5	calll	_memcpy
00001aca	addl	$0x10,%esp
00001acd	movl	0xe4(%ebp),%edi
00001ad0	movss	0x10(%ebp),%xmm0
00001ad5	jmp	0x00001ada
00001ad7	movb	ConVar_Register(int, IConCommandBaseAccessor*),(%esi)
00001ada	movl	0x08(%ebp),%esi
00001add	movl	0x44(%esi),%eax
00001ae0	testl	%eax,%eax
00001ae2	je	0x00001b01
00001ae4	subl	$0x10,%esp
00001ae7	movss	%xmm0,0x08(%esp)
00001aed	movl	%edi,0x04(%esp)
00001af1	leal	0x18(%esi),%ecx
00001af4	movl	%ecx,(%esp)
00001af7	call	*%eax
00001af9	movss	0x10(%ebp),%xmm0
00001afe	addl	$0x10,%esp
00001b01	movl	0xe8(%ebp),%eax
00001b04	movl	0x19689-0x1a1e(%eax),%eax
00001b0a	movl	(%eax),%ecx
00001b0c	movl	(%ecx),%eax
00001b0e	subl	$0x10,%esp
00001b11	movss	%xmm0,0x0c(%esp)
00001b17	movl	%edi,0x08(%esp)
00001b1b	movl	%esi,0x04(%esp)
00001b1f	movl	%ecx,(%esp)
00001b22	call	*0x50(%eax)
00001b25	addl	$0x10,%esp
00001b28	movl	0xec(%ebp),%eax
00001b2b	movl	(%eax),%eax
00001b2d	cmpl	0xf0(%ebp),%eax
00001b30	jne	0x00001b3a
00001b32	leal	0xf4(%ebp),%esp
00001b35	popl	%esi
00001b36	popl	%edi
00001b37	popl	%ebx
00001b38	popl	%ebp
00001b39	ret
00001b3a	calll	___stack_chk_fail
00001b3f	nop
ConVar::ClampValue(float&):
00001b40	movl	0x08(%esp),%eax
00001b44	movl	0x04(%esp),%edx
00001b48	testb	$0x01,0x34(%edx)
00001b4c	je	0x00001b58
00001b4e	movss	0x38(%edx),%xmm0
00001b53	ucomiss	(%eax),%xmm0
00001b56	ja	0x00001b70
00001b58	xorb	%cl,%cl
00001b5a	testb	$0x01,0x3c(%edx)
00001b5e	je	0x00001b76
00001b60	movss	0x40(%edx),%xmm0
00001b65	movss	(%eax),%xmm1
00001b69	xorb	%cl,%cl
00001b6b	ucomiss	%xmm0,%xmm1
00001b6e	jbe	0x00001b76
00001b70	movss	%xmm0,(%eax)
00001b74	movb	$0x01,%cl
00001b76	movzbl	%cl,%eax
00001b79	ret
00001b7a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InternalSetFloatValue(float):
00001b80	pushl	%ebp
00001b81	movl	%esp,%ebp
00001b83	pushl	%ebx
00001b84	pushl	%edi
00001b85	pushl	%esi
00001b86	subl	$0x4c,%esp
00001b89	calll	0x00001b8e
00001b8e	popl	%ebx
00001b8f	movl	0x19685-0x1b8e(%ebx),%eax
00001b95	movl	%eax,0xc8(%ebp)
00001b98	movl	(%eax),%eax
00001b9a	movl	%eax,0xf0(%ebp)
00001b9d	movss	0x0c(%ebp),%xmm0
00001ba2	movss	%xmm0,0xcc(%ebp)
00001ba7	movl	0x08(%ebp),%edi
00001baa	movss	0x2c(%edi),%xmm1
00001baf	ucomiss	%xmm0,%xmm1
00001bb2	jne	0x00001bba
00001bb4	jnp	0x00001c6f
00001bba	movl	(%edi),%eax
00001bbc	movl	%edi,(%esp)
00001bbf	movl	$0x00b00000,0x04(%esp)
00001bc7	call	*0x0c(%eax)
00001bca	testb	%al,%al
00001bcc	je	0x00001c01
00001bce	movl	0x19689-0x1b8e(%ebx),%esi
00001bd4	movl	(%esi),%eax
00001bd6	testl	%eax,%eax
00001bd8	je	0x00001c01
00001bda	movl	(%eax),%ecx
00001bdc	movl	%eax,(%esp)
00001bdf	call	*0x70(%ecx)
00001be2	testb	%al,%al
00001be4	jne	0x00001c01
00001be6	movl	(%esi),%ecx
00001be8	movl	(%ecx),%eax
00001bea	movss	0xcc(%ebp),%xmm0
00001bef	movss	%xmm0,0x08(%esp)
00001bf5	movl	%edi,0x04(%esp)
00001bf9	movl	%ecx,(%esp)
00001bfc	call	*0x7c(%eax)
00001bff	jmp	0x00001c6f
00001c01	movl	(%edi),%eax
00001c03	leal	0xcc(%ebp),%ecx
00001c06	movl	%ecx,0x04(%esp)
00001c0a	movl	%edi,(%esp)
00001c0d	call	*0x44(%eax)
00001c10	movss	0x2c(%edi),%xmm0
00001c15	movss	%xmm0,0xc4(%ebp)
00001c1a	movss	0xcc(%ebp),%xmm0
00001c1f	movss	%xmm0,0x2c(%edi)
00001c24	cvttss2si	%xmm0,%eax
00001c28	movl	%eax,0x30(%edi)
00001c2b	testb	$0x10,0x15(%edi)
00001c2f	jne	0x00001c6f
00001c31	cvtss2sd	%xmm0,%xmm0
00001c35	movsd	%xmm0,0x0c(%esp)
00001c3b	leal	0x16106-0x1b8e(%ebx),%eax
00001c41	movl	%eax,0x08(%esp)
00001c45	leal	0xd0(%ebp),%esi
00001c48	movl	%esi,(%esp)
00001c4b	movl	$0x00000020,0x04(%esp)
00001c53	calll	V_snprintf(char*, int, char const*, ...)
00001c58	movl	(%edi),%eax
00001c5a	movss	0xc4(%ebp),%xmm0
00001c5f	movss	%xmm0,0x08(%esp)
00001c65	movl	%esi,0x04(%esp)
00001c69	movl	%edi,(%esp)
00001c6c	call	*0x48(%eax)
00001c6f	movl	0xc8(%ebp),%eax
00001c72	movl	(%eax),%eax
00001c74	cmpl	0xf0(%ebp),%eax
00001c77	jne	0x00001c81
00001c79	addl	$0x4c,%esp
00001c7c	popl	%esi
00001c7d	popl	%edi
00001c7e	popl	%ebx
00001c7f	popl	%ebp
00001c80	ret
00001c81	calll	___stack_chk_fail
00001c86	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InternalSetIntValue(int):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	pushl	%ebx
00001c94	pushl	%edi
00001c95	pushl	%esi
00001c96	subl	$0x4c,%esp
00001c99	calll	0x00001c9e
00001c9e	popl	%eax
00001c9f	movl	%eax,0xc8(%ebp)
00001ca2	movl	0x19685-0x1c9e(%eax),%eax
00001ca8	movl	%eax,0xc4(%ebp)
00001cab	movl	(%eax),%eax
00001cad	movl	%eax,0xf0(%ebp)
00001cb0	movl	0x0c(%ebp),%esi
00001cb3	movl	0x08(%ebp),%edi
00001cb6	cmpl	%esi,0x30(%edi)
00001cb9	je	0x00001d7a
00001cbf	movl	(%edi),%eax
00001cc1	movl	%edi,(%esp)
00001cc4	movl	$0x00b00000,0x04(%esp)
00001ccc	call	*0x0c(%eax)
00001ccf	testb	%al,%al
00001cd1	je	0x00001d02
00001cd3	movl	0xc8(%ebp),%eax
00001cd6	movl	0x19689-0x1c9e(%eax),%ebx
00001cdc	movl	(%ebx),%eax
00001cde	testl	%eax,%eax
00001ce0	je	0x00001d02
00001ce2	movl	(%eax),%ecx
00001ce4	movl	%eax,(%esp)
00001ce7	call	*0x70(%ecx)
00001cea	testb	%al,%al
00001cec	jne	0x00001d02
00001cee	movl	(%ebx),%ecx
00001cf0	movl	(%ecx),%eax
00001cf2	movl	%esi,0x08(%esp)
00001cf6	movl	%edi,0x04(%esp)
00001cfa	movl	%ecx,(%esp)
00001cfd	call	*0x78(%eax)
00001d00	jmp	0x00001d7a
00001d02	cvtsi2ss	%esi,%xmm0
00001d06	movss	%xmm0,0xcc(%ebp)
00001d0b	movl	(%edi),%eax
00001d0d	leal	0xcc(%ebp),%ecx
00001d10	movl	%ecx,0x04(%esp)
00001d14	movl	%edi,(%esp)
00001d17	call	*0x44(%eax)
00001d1a	movss	0xcc(%ebp),%xmm0
00001d1f	testb	%al,%al
00001d21	je	0x00001d27
00001d23	cvttss2si	%xmm0,%esi
00001d27	movss	0x2c(%edi),%xmm1
00001d2c	movss	%xmm1,ConVar_Unregister()(%ebp)
00001d31	movss	%xmm0,0x2c(%edi)
00001d36	movl	%esi,0x30(%edi)
00001d39	testb	$0x10,0x15(%edi)
00001d3d	jne	0x00001d7a
00001d3f	movl	%esi,0x0c(%esp)
00001d43	movl	0xc8(%ebp),%eax
00001d46	leal	0x16109-0x1c9e(%eax),%eax
00001d4c	movl	%eax,0x08(%esp)
00001d50	leal	0xd0(%ebp),%esi
00001d53	movl	%esi,(%esp)
00001d56	movl	$0x00000020,0x04(%esp)
00001d5e	calll	V_snprintf(char*, int, char const*, ...)
00001d63	movl	(%edi),%eax
00001d65	movss	ConVar_Unregister()(%ebp),%xmm0
00001d6a	movss	%xmm0,0x08(%esp)
00001d70	movl	%esi,0x04(%esp)
00001d74	movl	%edi,(%esp)
00001d77	call	*0x48(%eax)
00001d7a	movl	0xc4(%ebp),%eax
00001d7d	movl	(%eax),%eax
00001d7f	cmpl	0xf0(%ebp),%eax
00001d82	jne	0x00001d8c
00001d84	addl	$0x4c,%esp
00001d87	popl	%esi
00001d88	popl	%edi
00001d89	popl	%ebx
00001d8a	popl	%ebp
00001d8b	ret
00001d8c	calll	___stack_chk_fail
00001d91	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
00001da0	pushl	%ebp
00001da1	movl	%esp,%ebp
00001da3	pushl	%ebx
00001da4	pushl	%edi
00001da5	pushl	%esi
00001da6	subl	$0x1c,%esp
00001da9	calll	0x00001dae
00001dae	popl	%eax
00001daf	movl	%eax,0xec(%ebp)
00001db2	movl	0x08(%ebp),%ebx
00001db5	movl	%ebx,0x1c(%ebx)
00001db8	leal	0x1604c-0x1dae(%eax),%eax
00001dbe	movl	%eax,0xe8(%ebp)
00001dc1	movl	0x10(%ebp),%esi
00001dc4	testl	%esi,%esi
00001dc6	cmovel	%eax,%esi
00001dc9	movl	%esi,0x20(%ebx)
00001dcc	movl	%esi,(%esp)
00001dcf	calll	_strlen
00001dd4	movl	%eax,%edi
00001dd6	incl	%edi
00001dd7	movl	%edi,0x28(%ebx)
00001dda	testl	%edi,%edi
00001ddc	movl	$0xffffffff,%eax
00001de1	cmovnsl	%edi,%eax
00001de4	movl	%eax,(%esp)
00001de7	calll	operator new[](unsigned long)
00001dec	movl	%eax,0x24(%ebx)
00001def	movl	%edi,0x08(%esp)
00001df3	movl	%esi,0x04(%esp)
00001df7	movl	%eax,(%esp)
00001dfa	movl	%eax,%esi
00001dfc	calll	_memcpy
00001e01	movb	0x1c(%ebp),%al
00001e04	movb	%al,0x34(%ebx)
00001e07	movss	0x20(%ebp),%xmm0
00001e0c	movss	%xmm0,0x38(%ebx)
00001e11	movb	0x24(%ebp),%al
00001e14	movb	%al,0x3c(%ebx)
00001e17	movss	0x28(%ebp),%xmm0
00001e1c	movss	%xmm0,0x40(%ebx)
00001e21	movl	0x2c(%ebp),%eax
00001e24	movl	%eax,0x44(%ebx)
00001e27	movl	%esi,(%esp)
00001e2a	calll	_atof
00001e2f	fstps	0xf0(%ebp)
00001e32	movss	0xf0(%ebp),%xmm0
00001e37	movss	%xmm0,0x2c(%ebx)
00001e3c	cvttss2si	%xmm0,%eax
00001e40	movl	%eax,0x30(%ebx)
00001e43	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001e47	movl	0x0c(%ebp),%eax
00001e4a	movl	%eax,0x0c(%ebx)
00001e4d	movl	0x18(%ebp),%eax
00001e50	testl	%eax,%eax
00001e52	movl	0xe8(%ebp),%ecx
00001e55	cmovnel	%eax,%ecx
00001e58	movl	%ecx,0x10(%ebx)
00001e5b	movl	0x14(%ebp),%eax
00001e5e	movl	%eax,0x14(%ebx)
00001e61	testb	$0x01,%al
00001e63	jne	0x00001e7b
00001e65	movl	0xec(%ebp),%ecx
00001e68	movl	ConCommandBase::s_pConCommandBases-0x1dae(%ecx),%eax
00001e6e	movl	%eax,0x04(%ebx)
00001e71	movl	%ebx,ConCommandBase::s_pConCommandBases-0x1dae(%ecx)
00001e77	movl	%ecx,%eax
00001e79	jmp	0x00001e85
00001e7b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001e82	movl	0xec(%ebp),%eax
00001e85	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x1dae(%eax)
00001e8f	jne	0x00001e99
00001e91	addl	$0x1c,%esp
00001e94	popl	%esi
00001e95	popl	%edi
00001e96	popl	%ebx
00001e97	popl	%ebp
00001e98	ret
00001e99	movl	(%ebx),%eax
00001e9b	movl	0x28(%eax),%eax
00001e9e	addl	$0x1c,%esp
00001ea1	popl	%esi
00001ea2	popl	%edi
00001ea3	popl	%ebx
00001ea4	popl	%ebp
00001ea5	jmp	*%eax
00001ea7	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::SetDefault(char const*):
00001eb0	calll	0x00001eb5
00001eb5	popl	%eax
00001eb6	leal	0x1604c-0x1eb5(%eax),%eax
00001ebc	movl	0x08(%esp),%ecx
00001ec0	testl	%ecx,%ecx
00001ec2	cmovnel	%ecx,%eax
00001ec5	movl	0x04(%esp),%ecx
00001ec9	movl	%eax,0x20(%ecx)
00001ecc	ret
00001ecd	nopl	(%eax)
ConVar::SetValue(char const*):
00001ed0	pushl	%ebp
00001ed1	movl	%esp,%ebp
00001ed3	subl	$0x08,%esp
00001ed6	movl	0x08(%ebp),%eax
00001ed9	movl	0x1c(%eax),%ecx
00001edc	movl	(%ecx),%eax
00001ede	movl	0x0c(%ebp),%edx
00001ee1	movl	%edx,0x04(%esp)
00001ee5	movl	%ecx,(%esp)
00001ee8	call	*0x38(%eax)
00001eeb	addl	$0x08,%esp
00001eee	popl	%ebp
00001eef	ret
non-virtual thunk to ConVar::SetValue(char const*):
00001ef0	pushl	%ebp
00001ef1	movl	%esp,%ebp
00001ef3	subl	$0x08,%esp
00001ef6	movl	0x08(%ebp),%eax
00001ef9	movl	0x04(%eax),%ecx
00001efc	movl	(%ecx),%eax
00001efe	movl	0x0c(%ebp),%edx
00001f01	movl	%edx,0x04(%esp)
00001f05	movl	%ecx,(%esp)
00001f08	call	*0x38(%eax)
00001f0b	addl	$0x08,%esp
00001f0e	popl	%ebp
00001f0f	ret
ConVar::SetValue(float):
00001f10	pushl	%ebp
00001f11	movl	%esp,%ebp
00001f13	subl	$0x08,%esp
00001f16	movl	0x08(%ebp),%eax
00001f19	movl	0x1c(%eax),%ecx
00001f1c	movl	(%ecx),%eax
00001f1e	movss	0x0c(%ebp),%xmm0
00001f23	movss	%xmm0,0x04(%esp)
00001f29	movl	%ecx,(%esp)
00001f2c	call	*0x3c(%eax)
00001f2f	addl	$0x08,%esp
00001f32	popl	%ebp
00001f33	ret
00001f34	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::SetValue(float):
00001f40	pushl	%ebp
00001f41	movl	%esp,%ebp
00001f43	subl	$0x08,%esp
00001f46	movl	0x08(%ebp),%eax
00001f49	movl	0x04(%eax),%ecx
00001f4c	movl	(%ecx),%eax
00001f4e	movss	0x0c(%ebp),%xmm0
00001f53	movss	%xmm0,0x04(%esp)
00001f59	movl	%ecx,(%esp)
00001f5c	call	*0x3c(%eax)
00001f5f	addl	$0x08,%esp
00001f62	popl	%ebp
00001f63	ret
00001f64	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::SetValue(int):
00001f70	pushl	%ebp
00001f71	movl	%esp,%ebp
00001f73	subl	$0x08,%esp
00001f76	movl	0x08(%ebp),%eax
00001f79	movl	0x1c(%eax),%ecx
00001f7c	movl	(%ecx),%eax
00001f7e	movl	0x0c(%ebp),%edx
00001f81	movl	%edx,0x04(%esp)
00001f85	movl	%ecx,(%esp)
00001f88	call	*0x40(%eax)
00001f8b	addl	$0x08,%esp
00001f8e	popl	%ebp
00001f8f	ret
non-virtual thunk to ConVar::SetValue(int):
00001f90	pushl	%ebp
00001f91	movl	%esp,%ebp
00001f93	subl	$0x08,%esp
00001f96	movl	0x08(%ebp),%eax
00001f99	movl	0x04(%eax),%ecx
00001f9c	movl	(%ecx),%eax
00001f9e	movl	0x0c(%ebp),%edx
00001fa1	movl	%edx,0x04(%esp)
00001fa5	movl	%ecx,(%esp)
00001fa8	call	*0x40(%eax)
00001fab	addl	$0x08,%esp
00001fae	popl	%ebp
00001faf	ret
ConVar::Revert():
00001fb0	pushl	%ebp
00001fb1	movl	%esp,%ebp
00001fb3	subl	$0x08,%esp
00001fb6	movl	0x08(%ebp),%eax
00001fb9	movl	0x1c(%eax),%ecx
00001fbc	movl	(%ecx),%eax
00001fbe	movl	0x20(%ecx),%edx
00001fc1	movl	%edx,0x04(%esp)
00001fc5	movl	%ecx,(%esp)
00001fc8	call	*0x2c(%eax)
00001fcb	addl	$0x08,%esp
00001fce	popl	%ebp
00001fcf	ret
ConVar::GetMin(float&) const:
00001fd0	movl	0x04(%esp),%eax
00001fd4	movl	0x1c(%eax),%ecx
00001fd7	movss	0x38(%ecx),%xmm0
00001fdc	movl	0x08(%esp),%ecx
00001fe0	movss	%xmm0,(%ecx)
00001fe4	movl	0x1c(%eax),%eax
00001fe7	movzbl	0x34(%eax),%eax
00001feb	andl	$0x01,%eax
00001fee	ret
00001fef	nop
ConVar::GetMax(float&) const:
00001ff0	movl	0x04(%esp),%eax
00001ff4	movl	0x1c(%eax),%ecx
00001ff7	movss	0x40(%ecx),%xmm0
00001ffc	movl	0x08(%esp),%ecx
00002000	movss	%xmm0,(%ecx)
00002004	movl	0x1c(%eax),%eax
00002007	movzbl	0x3c(%eax),%eax
0000200b	andl	$0x01,%eax
0000200e	ret
0000200f	nop
ConVar::GetDefault() const:
00002010	movl	0x04(%esp),%eax
00002014	movl	0x1c(%eax),%eax
00002017	movl	0x20(%eax),%eax
0000201a	ret
0000201b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*):
00002020	pushl	%ebp
00002021	movl	%esp,%ebp
00002023	pushl	%ebx
00002024	pushl	%edi
00002025	pushl	%esi
00002026	subl	$0x0c,%esp
00002029	calll	0x0000202e
0000202e	popl	%esi
0000202f	movl	0x19689-0x202e(%esi),%ebx
00002035	movl	(%ebx),%eax
00002037	movl	0x0c(%ebp),%edx
0000203a	testl	%eax,%eax
0000203c	jne	0x00002046
0000203e	leal	s_EmptyConVar-0x202e(%esi),%eax
00002044	jmp	0x00002052
00002046	movl	(%eax),%ecx
00002048	movl	%edx,0x04(%esp)
0000204c	movl	%eax,(%esp)
0000204f	call	*0x30(%ecx)
00002052	movl	0x08(%ebp),%ecx
00002055	xorl	%edx,%edx
00002057	testl	%eax,%eax
00002059	leal	0x18(%eax),%eax
0000205c	cmovel	%edx,%eax
0000205f	leal	s_EmptyConVar-0x202e+0x00000018(%esi),%edx
00002065	testl	%eax,%eax
00002067	cmovel	%edx,%eax
0000206a	movl	%eax,(%ecx)
0000206c	leal	0xe8(%eax),%edi
0000206f	movl	%edi,0x04(%ecx)
00002072	cmpl	%edx,%eax
00002074	jne	0x000020a1
00002076	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%ebx)
00002079	jne	0x00002085
0000207b	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x202e(%esi),%al
00002081	testb	%al,%al
00002083	jne	0x000020a1
00002085	movl	0x0c(%ebp),%eax
00002088	movl	%eax,0x04(%esp)
0000208c	leal	0x1610c-0x202e(%esi),%eax
00002092	movl	%eax,(%esp)
00002095	calll	_Warning
0000209a	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x202e(%esi)
000020a1	addl	$0x0c,%esp
000020a4	popl	%esi
000020a5	popl	%edi
000020a6	popl	%ebx
000020a7	popl	%ebp
000020a8	ret
000020a9	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::ConVarRef(char const*):
000020b0	pushl	%ebp
000020b1	movl	%esp,%ebp
000020b3	pushl	%ebx
000020b4	pushl	%edi
000020b5	pushl	%esi
000020b6	subl	$0x0c,%esp
000020b9	calll	0x000020be
000020be	popl	%esi
000020bf	movl	0x19689-0x20be(%esi),%ebx
000020c5	movl	(%ebx),%eax
000020c7	movl	0x0c(%ebp),%edx
000020ca	testl	%eax,%eax
000020cc	jne	0x000020d6
000020ce	leal	s_EmptyConVar-0x20be(%esi),%eax
000020d4	jmp	0x000020e2
000020d6	movl	(%eax),%ecx
000020d8	movl	%edx,0x04(%esp)
000020dc	movl	%eax,(%esp)
000020df	call	*0x30(%ecx)
000020e2	movl	0x08(%ebp),%ecx
000020e5	xorl	%edx,%edx
000020e7	testl	%eax,%eax
000020e9	leal	0x18(%eax),%eax
000020ec	cmovel	%edx,%eax
000020ef	leal	s_EmptyConVar-0x20be+0x00000018(%esi),%edx
000020f5	testl	%eax,%eax
000020f7	cmovel	%edx,%eax
000020fa	movl	%eax,(%ecx)
000020fc	leal	0xe8(%eax),%edi
000020ff	movl	%edi,0x04(%ecx)
00002102	cmpl	%edx,%eax
00002104	jne	0x00002131
00002106	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%ebx)
00002109	jne	0x00002115
0000210b	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x20be(%esi),%al
00002111	testb	%al,%al
00002113	jne	0x00002131
00002115	movl	0x0c(%ebp),%eax
00002118	movl	%eax,0x04(%esp)
0000211c	leal	0x1610c-0x20be(%esi),%eax
00002122	movl	%eax,(%esp)
00002125	calll	_Warning
0000212a	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x20be(%esi)
00002131	addl	$0x0c,%esp
00002134	popl	%esi
00002135	popl	%edi
00002136	popl	%ebx
00002137	popl	%ebp
00002138	ret
00002139	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::Init(char const*, bool):
00002140	pushl	%ebp
00002141	movl	%esp,%ebp
00002143	pushl	%ebx
00002144	pushl	%edi
00002145	pushl	%esi
00002146	subl	$0x0c,%esp
00002149	calll	0x0000214e
0000214e	popl	%esi
0000214f	movl	0x19689-0x214e(%esi),%eax
00002155	movl	%eax,0xf0(%ebp)
00002158	movl	(%eax),%eax
0000215a	movl	0x0c(%ebp),%ebx
0000215d	testl	%eax,%eax
0000215f	jne	0x00002169
00002161	leal	s_EmptyConVar-0x214e(%esi),%eax
00002167	jmp	0x00002175
00002169	movl	(%eax),%ecx
0000216b	movl	%ebx,0x04(%esp)
0000216f	movl	%eax,(%esp)
00002172	call	*0x30(%ecx)
00002175	movl	0x08(%ebp),%ecx
00002178	xorl	%edx,%edx
0000217a	testl	%eax,%eax
0000217c	leal	0x18(%eax),%eax
0000217f	cmovel	%edx,%eax
00002182	leal	s_EmptyConVar-0x214e+0x00000018(%esi),%edx
00002188	testl	%eax,%eax
0000218a	cmovel	%edx,%eax
0000218d	movl	%eax,(%ecx)
0000218f	leal	0xe8(%eax),%edi
00002192	movl	%edi,0x04(%ecx)
00002195	cmpl	%edx,%eax
00002197	jne	0x000021cb
00002199	movl	0xf0(%ebp),%eax
0000219c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000219f	jne	0x000021ab
000021a1	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x214e(%esi),%al
000021a7	testb	%al,%al
000021a9	jne	0x000021cb
000021ab	movb	0x10(%ebp),%al
000021ae	testb	%al,%al
000021b0	jne	0x000021c4
000021b2	movl	%ebx,0x04(%esp)
000021b6	leal	0x1610c-0x214e(%esi),%eax
000021bc	movl	%eax,(%esp)
000021bf	calll	_Warning
000021c4	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x214e(%esi)
000021cb	addl	$0x0c,%esp
000021ce	popl	%esi
000021cf	popl	%edi
000021d0	popl	%ebx
000021d1	popl	%ebp
000021d2	ret
000021d3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*, bool):
000021e0	pushl	%ebp
000021e1	movl	%esp,%ebp
000021e3	pushl	%ebx
000021e4	pushl	%edi
000021e5	pushl	%esi
000021e6	subl	$0x0c,%esp
000021e9	calll	0x000021ee
000021ee	popl	%esi
000021ef	movl	0x19689-0x21ee(%esi),%eax
000021f5	movl	%eax,0xf0(%ebp)
000021f8	movl	(%eax),%eax
000021fa	movl	0x0c(%ebp),%ebx
000021fd	testl	%eax,%eax
000021ff	jne	0x00002209
00002201	leal	s_EmptyConVar-0x21ee(%esi),%eax
00002207	jmp	0x00002215
00002209	movl	(%eax),%ecx
0000220b	movl	%ebx,0x04(%esp)
0000220f	movl	%eax,(%esp)
00002212	call	*0x30(%ecx)
00002215	movl	0x08(%ebp),%ecx
00002218	xorl	%edx,%edx
0000221a	testl	%eax,%eax
0000221c	leal	0x18(%eax),%eax
0000221f	cmovel	%edx,%eax
00002222	leal	s_EmptyConVar-0x21ee+0x00000018(%esi),%edx
00002228	testl	%eax,%eax
0000222a	cmovel	%edx,%eax
0000222d	movl	%eax,(%ecx)
0000222f	leal	0xe8(%eax),%edi
00002232	movl	%edi,0x04(%ecx)
00002235	cmpl	%edx,%eax
00002237	jne	0x0000226b
00002239	movl	0xf0(%ebp),%eax
0000223c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000223f	jne	0x0000224b
00002241	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x21ee(%esi),%al
00002247	testb	%al,%al
00002249	jne	0x0000226b
0000224b	movb	0x10(%ebp),%al
0000224e	testb	%al,%al
00002250	jne	0x00002264
00002252	movl	%ebx,0x04(%esp)
00002256	leal	0x1610c-0x21ee(%esi),%eax
0000225c	movl	%eax,(%esp)
0000225f	calll	_Warning
00002264	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x21ee(%esi)
0000226b	addl	$0x0c,%esp
0000226e	popl	%esi
0000226f	popl	%edi
00002270	popl	%ebx
00002271	popl	%ebp
00002272	ret
00002273	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*, bool):
00002280	pushl	%ebp
00002281	movl	%esp,%ebp
00002283	pushl	%ebx
00002284	pushl	%edi
00002285	pushl	%esi
00002286	subl	$0x0c,%esp
00002289	calll	0x0000228e
0000228e	popl	%esi
0000228f	movl	0x19689-0x228e(%esi),%eax
00002295	movl	%eax,0xf0(%ebp)
00002298	movl	(%eax),%eax
0000229a	movl	0x0c(%ebp),%ebx
0000229d	testl	%eax,%eax
0000229f	jne	0x000022a9
000022a1	leal	s_EmptyConVar-0x228e(%esi),%eax
000022a7	jmp	0x000022b5
000022a9	movl	(%eax),%ecx
000022ab	movl	%ebx,0x04(%esp)
000022af	movl	%eax,(%esp)
000022b2	call	*0x30(%ecx)
000022b5	movl	0x08(%ebp),%ecx
000022b8	xorl	%edx,%edx
000022ba	testl	%eax,%eax
000022bc	leal	0x18(%eax),%eax
000022bf	cmovel	%edx,%eax
000022c2	leal	s_EmptyConVar-0x228e+0x00000018(%esi),%edx
000022c8	testl	%eax,%eax
000022ca	cmovel	%edx,%eax
000022cd	movl	%eax,(%ecx)
000022cf	leal	0xe8(%eax),%edi
000022d2	movl	%edi,0x04(%ecx)
000022d5	cmpl	%edx,%eax
000022d7	jne	0x0000230b
000022d9	movl	0xf0(%ebp),%eax
000022dc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000022df	jne	0x000022eb
000022e1	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x228e(%esi),%al
000022e7	testb	%al,%al
000022e9	jne	0x0000230b
000022eb	movb	0x10(%ebp),%al
000022ee	testb	%al,%al
000022f0	jne	0x00002304
000022f2	movl	%ebx,0x04(%esp)
000022f6	leal	0x1610c-0x228e(%esi),%eax
000022fc	movl	%eax,(%esp)
000022ff	calll	_Warning
00002304	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x228e(%esi)
0000230b	addl	$0x0c,%esp
0000230e	popl	%esi
0000230f	popl	%edi
00002310	popl	%ebx
00002311	popl	%ebp
00002312	ret
00002313	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::IsValid() const:
00002320	calll	0x00002325
00002325	popl	%eax
00002326	leal	s_EmptyConVar-0x2325+0x00000018(%eax),%eax
0000232c	movl	0x04(%esp),%ecx
00002330	cmpl	%eax,(%ecx)
00002332	setne	%al
00002335	movzbl	%al,%eax
00002338	ret
00002339	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::ConVarRef(IConVar*):
00002340	calll	0x00002345
00002345	popl	%eax
00002346	leal	s_EmptyConVar-0x2345+0x00000018(%eax),%eax
0000234c	movl	0x08(%esp),%ecx
00002350	testl	%ecx,%ecx
00002352	cmovnel	%ecx,%eax
00002355	movl	0x04(%esp),%ecx
00002359	movl	%eax,(%ecx)
0000235b	xorl	%edx,%edx
0000235d	testl	%eax,%eax
0000235f	je	0x00002366
00002361	addl	$0xe8,%eax
00002364	movl	%eax,%edx
00002366	movl	%edx,0x04(%ecx)
00002369	ret
0000236a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(IConVar*):
00002370	calll	0x00002375
00002375	popl	%eax
00002376	leal	s_EmptyConVar-0x2375+0x00000018(%eax),%eax
0000237c	movl	0x08(%esp),%ecx
00002380	testl	%ecx,%ecx
00002382	cmovnel	%ecx,%eax
00002385	movl	0x04(%esp),%ecx
00002389	movl	%eax,(%ecx)
0000238b	xorl	%edx,%edx
0000238d	testl	%eax,%eax
0000238f	je	0x00002396
00002391	addl	$0xe8,%eax
00002394	movl	%eax,%edx
00002396	movl	%edx,0x04(%ecx)
00002399	ret
0000239a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_PrintFlags(ConCommandBase const*):
000023a0	pushl	%ebp
000023a1	movl	%esp,%ebp
000023a3	pushl	%ebx
000023a4	pushl	%edi
000023a5	pushl	%esi
000023a6	subl	$0x0c,%esp
000023a9	calll	0x000023ae
000023ae	popl	%esi
000023af	movl	0x08(%ebp),%edi
000023b2	movl	(%edi),%eax
000023b4	movl	%edi,(%esp)
000023b7	movl	$0x00000004,0x04(%esp)
000023bf	call	*0x0c(%eax)
000023c2	xorb	%bl,%bl
000023c4	testb	%al,%al
000023c6	je	0x000023d8
000023c8	leal	0x1613e-0x23ae(%esi),%eax
000023ce	movl	%eax,(%esp)
000023d1	calll	ConMsg(char const*, ...)
000023d6	movb	$0x01,%bl
000023d8	movl	(%edi),%eax
000023da	movl	%edi,(%esp)
000023dd	movl	$0x00000008,0x04(%esp)
000023e5	call	*0x0c(%eax)
000023e8	cmpb	$0x01,%al
000023ea	jne	0x000023fc
000023ec	leal	0x16144-0x23ae(%esi),%eax
000023f2	movl	%eax,(%esp)
000023f5	calll	ConMsg(char const*, ...)
000023fa	movb	$0x01,%bl
000023fc	movl	(%edi),%eax
000023fe	movl	%edi,(%esp)
00002401	movl	$0x00000080,0x04(%esp)
00002409	call	*0x0c(%eax)
0000240c	cmpb	$0x01,%al
0000240e	jne	0x00002420
00002410	leal	0x1614c-0x23ae(%esi),%eax
00002416	movl	%eax,(%esp)
00002419	calll	ConMsg(char const*, ...)
0000241e	movb	$0x01,%bl
00002420	movl	(%edi),%eax
00002422	movl	%edi,(%esp)
00002425	movl	$0x00000100,0x04(%esp)
0000242d	call	*0x0c(%eax)
00002430	cmpb	$0x01,%al
00002432	jne	0x00002444
00002434	leal	0x16155-0x23ae(%esi),%eax
0000243a	movl	%eax,(%esp)
0000243d	calll	ConMsg(char const*, ...)
00002442	movb	$0x01,%bl
00002444	movl	(%edi),%eax
00002446	movl	%edi,(%esp)
00002449	movl	$0x00000040,0x04(%esp)
00002451	call	*0x0c(%eax)
00002454	cmpb	$0x01,%al
00002456	jne	0x00002468
00002458	leal	0x1615d-0x23ae(%esi),%eax
0000245e	movl	%eax,(%esp)
00002461	calll	ConMsg(char const*, ...)
00002466	movb	$0x01,%bl
00002468	movl	(%edi),%eax
0000246a	movl	%edi,(%esp)
0000246d	movl	$0x00400000,0x04(%esp)
00002475	call	*0x0c(%eax)
00002478	cmpb	$0x01,%al
0000247a	jne	0x0000248c
0000247c	leal	0x1616b-0x23ae(%esi),%eax
00002482	movl	%eax,(%esp)
00002485	calll	ConMsg(char const*, ...)
0000248a	movb	$0x01,%bl
0000248c	movl	(%edi),%eax
0000248e	movl	%edi,(%esp)
00002491	movl	$0x00004000,0x04(%esp)
00002499	call	*0x0c(%eax)
0000249c	cmpb	$0x01,%al
0000249e	jne	0x000024b0
000024a0	leal	0x16179-0x23ae(%esi),%eax
000024a6	movl	%eax,(%esp)
000024a9	calll	ConMsg(char const*, ...)
000024ae	movb	$0x01,%bl
000024b0	movl	(%edi),%eax
000024b2	movl	%edi,(%esp)
000024b5	movl	$0x00002000,0x04(%esp)
000024bd	call	*0x0c(%eax)
000024c0	cmpb	$0x01,%al
000024c2	jne	0x000024d4
000024c4	leal	0x16180-0x23ae(%esi),%eax
000024ca	movl	%eax,(%esp)
000024cd	calll	ConMsg(char const*, ...)
000024d2	movb	$0x01,%bl
000024d4	movl	(%edi),%eax
000024d6	movl	%edi,(%esp)
000024d9	movl	$0x10000000,0x04(%esp)
000024e1	call	*0x0c(%eax)
000024e4	cmpb	$0x01,%al
000024e6	jne	0x000024f8
000024e8	leal	0x1618c-0x23ae(%esi),%eax
000024ee	movl	%eax,(%esp)
000024f1	calll	ConMsg(char const*, ...)
000024f6	movb	$0x01,%bl
000024f8	movl	(%edi),%eax
000024fa	movl	%edi,(%esp)
000024fd	movl	$0x40000000,0x04(%esp)
00002505	call	*0x0c(%eax)
00002508	cmpb	$0x01,%al
0000250a	jne	0x0000251c
0000250c	leal	0x161a0-0x23ae(%esi),%eax
00002512	movl	%eax,(%esp)
00002515	calll	ConMsg(char const*, ...)
0000251a	jmp	0x00002520
0000251c	testb	%bl,%bl
0000251e	je	0x0000252e
00002520	leal	0x161b7-0x23ae(%esi),%eax
00002526	movl	%eax,(%esp)
00002529	calll	ConMsg(char const*, ...)
0000252e	addl	$0x0c,%esp
00002531	popl	%esi
00002532	popl	%edi
00002533	popl	%ebx
00002534	popl	%ebp
00002535	ret
00002536	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_PrintDescription(ConCommandBase const*):
00002540	pushl	%ebp
00002541	movl	%esp,%ebp
00002543	pushl	%ebx
00002544	pushl	%edi
00002545	pushl	%esi
00002546	subl	$0x6c,%esp
00002549	calll	0x0000254e
0000254e	popl	%ebx
0000254f	movl	0x19685-0x254e(%ebx),%eax
00002555	movl	%eax,0xbc(%ebp)
00002558	movl	(%eax),%eax
0000255a	movl	%eax,0xf0(%ebp)
0000255d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xcc(%ebp)
00002564	movb	$0xff,0xcc(%ebp)
00002568	movb	$0x64,0xcd(%ebp)
0000256c	movb	$0x64,0xce(%ebp)
00002570	movb	$0xff,0xcf(%ebp)
00002574	movl	0x08(%ebp),%esi
00002577	movl	(%esi),%eax
00002579	movl	%esi,(%esp)
0000257c	call	*0x08(%eax)
0000257f	testb	%al,%al
00002581	jne	0x0000278b
00002587	leal	typeinfo for ConVar_ServerBounded-0x254e(%ebx),%eax
0000258d	movl	%eax,0x08(%esp)
00002591	leal	typeinfo for ConVar-0x254e(%ebx),%eax
00002597	movl	%eax,0x04(%esp)
0000259b	movl	%esi,(%esp)
0000259e	movl	$0xffffffff,0x0c(%esp)
000025a6	calll	___dynamic_cast
000025ab	movl	%eax,%edi
000025ad	movl	0x1c(%esi),%eax
000025b0	movss	0x40(%eax),%xmm0
000025b5	movss	%xmm0,0xb8(%ebp)
000025ba	movss	0x38(%eax),%xmm0
000025bf	movss	%xmm0,0xb0(%ebp)
000025c4	movb	0x3c(%eax),%cl
000025c7	andb	$0x01,%cl
000025ca	movb	%cl,0xb7(%ebp)
000025cd	movb	0x34(%eax),%al
000025d0	andb	$0x01,%al
000025d2	movb	%al,0xaf(%ebp)
000025d5	testl	%edi,%edi
000025d7	jne	0x000027e6
000025dd	movl	(%esi),%eax
000025df	movl	%esi,(%esp)
000025e2	movl	ConCommand::CanAutoComplete(),0x04(%esp)
000025ea	call	*0x0c(%eax)
000025ed	testb	%al,%al
000025ef	je	0x0000265d
000025f1	movl	%edi,ConVar_Unregister()(%ebp)
000025f4	movl	0x1c(%esi),%eax
000025f7	movss	0x2c(%eax),%xmm0
000025fc	movl	0x30(%eax),%edi
000025ff	leal	0xd0(%ebp),%esi
00002602	cvtsi2ss	%edi,%xmm1
00002606	subss	%xmm0,%xmm1
0000260a	cvtss2sd	%xmm1,%xmm1
0000260e	andpd	0x15d60-0x254e(%ebx),%xmm1
00002616	movsd	0x15d70-0x254e(%ebx),%xmm2
0000261e	ucomisd	%xmm1,%xmm2
00002622	jbe	0x0000264b
00002624	movl	%edi,0x0c(%esp)
00002628	leal	0x16109-0x254e(%ebx),%eax
0000262e	movl	%eax,0x08(%esp)
00002632	movl	%esi,(%esp)
00002635	movl	$0x00000020,0x04(%esp)
0000263d	calll	V_snprintf(char*, int, char const*, ...)
00002642	testl	%esi,%esi
00002644	jne	0x0000267f
00002646	jmp	0x000026cf
0000264b	cvtss2sd	%xmm0,%xmm0
0000264f	movsd	%xmm0,0x0c(%esp)
00002655	leal	0x16106-0x254e(%ebx),%eax
0000265b	jmp	0x0000262e
0000265d	movl	%edi,ConVar_Unregister()(%ebp)
00002660	testb	$0x10,0x15(%esi)
00002664	je	0x0000266e
00002666	leal	0x1624c-0x254e(%ebx),%esi
0000266c	jmp	0x0000267f
0000266e	movl	0x1c(%esi),%eax
00002671	movl	0x24(%eax),%eax
00002674	leal	0x1604c-0x254e(%ebx),%esi
0000267a	testl	%eax,%eax
0000267c	cmovnel	%eax,%esi
0000267f	movl	0x08(%ebp),%edi
00002682	movl	(%edi),%eax
00002684	movl	%edi,(%esp)
00002687	call	*0x14(%eax)
0000268a	movl	%esi,0x0c(%esp)
0000268e	movl	%eax,0x08(%esp)
00002692	leal	0x161b9-0x254e(%ebx),%eax
00002698	movl	%eax,0x04(%esp)
0000269c	leal	0xcc(%ebp),%eax
0000269f	movl	%eax,(%esp)
000026a2	calll	ConColorMsg(Color const&, char const*, ...)
000026a7	movl	0x1c(%edi),%eax
000026aa	movl	0x20(%eax),%edi
000026ad	movl	%edi,0x04(%esp)
000026b1	movl	%esi,(%esp)
000026b4	calll	_strcasecmp
000026b9	testl	%eax,%eax
000026bb	je	0x000026cf
000026bd	movl	%edi,0x04(%esp)
000026c1	leal	0x161c5-0x254e(%ebx),%eax
000026c7	movl	%eax,(%esp)
000026ca	calll	ConMsg(char const*, ...)
000026cf	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xaf(%ebp)
000026d3	je	0x000026f2
000026d5	movss	0xb0(%ebp),%xmm0
000026da	cvtss2sd	%xmm0,%xmm0
000026de	movsd	%xmm0,0x04(%esp)
000026e4	leal	0x161d4-0x254e(%ebx),%eax
000026ea	movl	%eax,(%esp)
000026ed	calll	ConMsg(char const*, ...)
000026f2	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xb7(%ebp)
000026f6	movl	0x08(%ebp),%esi
000026f9	movl	ConVar_Unregister()(%ebp),%edi
000026fc	je	0x0000271b
000026fe	movss	0xb8(%ebp),%xmm0
00002703	cvtss2sd	%xmm0,%xmm0
00002707	movsd	%xmm0,0x04(%esp)
0000270d	leal	0x161dd-0x254e(%ebx),%eax
00002713	movl	%eax,(%esp)
00002716	calll	ConMsg(char const*, ...)
0000271b	leal	0x161b7-0x254e(%ebx),%eax
00002721	movl	%eax,(%esp)
00002724	calll	ConMsg(char const*, ...)
00002729	testl	%edi,%edi
0000272b	je	0x000027ac
0000272d	movl	(%edi),%eax
0000272f	movl	%edi,(%esp)
00002732	call	*0x50(%eax)
00002735	fstps	0xc4(%ebp)
00002738	movl	0x1c(%esi),%eax
0000273b	movss	0xc4(%ebp),%xmm0
00002740	subss	0x2c(%eax),%xmm0
00002745	cvtss2sd	%xmm0,%xmm0
00002749	andpd	0x15d60-0x254e(%ebx),%xmm0
00002751	ucomisd	0x15d78-0x254e(%ebx),%xmm0
00002759	jbe	0x000027ac
0000275b	movl	0x1c(%esi),%eax
0000275e	movss	0x2c(%eax),%xmm0
00002763	movss	%xmm0,0xb8(%ebp)
00002768	movl	(%edi),%eax
0000276a	movl	%edi,(%esp)
0000276d	call	*0x50(%eax)
00002770	fstpl	0x10(%esp)
00002774	movss	0xb8(%ebp),%xmm0
00002779	cvtss2sd	%xmm0,%xmm0
0000277d	movsd	%xmm0,0x08(%esp)
00002783	leal	0x161e6-0x254e(%ebx),%eax
00002789	jmp	0x0000279d
0000278b	movl	(%esi),%eax
0000278d	movl	%esi,(%esp)
00002790	call	*0x14(%eax)
00002793	movl	%eax,0x08(%esp)
00002797	leal	0x1623f-0x254e(%ebx),%eax
0000279d	movl	%eax,0x04(%esp)
000027a1	leal	0xcc(%ebp),%eax
000027a4	movl	%eax,(%esp)
000027a7	calll	ConColorMsg(Color const&, char const*, ...)
000027ac	movl	%esi,(%esp)
000027af	calll	ConVar_PrintFlags(ConCommandBase const*)
000027b4	movl	(%esi),%eax
000027b6	movl	%esi,(%esp)
000027b9	call	*0x18(%eax)
000027bc	testl	%eax,%eax
000027be	je	0x000027d7
000027c0	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000027c3	je	0x000027d7
000027c5	movl	%eax,0x04(%esp)
000027c9	leal	0x16245-0x254e(%ebx),%eax
000027cf	movl	%eax,(%esp)
000027d2	calll	ConMsg(char const*, ...)
000027d7	movl	0xbc(%ebp),%eax
000027da	movl	(%eax),%eax
000027dc	cmpl	0xf0(%ebp),%eax
000027df	je	0x0000280d
000027e1	calll	___stack_chk_fail
000027e6	movl	(%edi),%eax
000027e8	movl	%edi,(%esp)
000027eb	call	*0x54(%eax)
000027ee	movl	%edi,%ecx
000027f0	movl	%ecx,ConVar_Unregister()(%ebp)
000027f3	movl	%eax,%edi
000027f5	movl	(%ecx),%eax
000027f7	movl	%ecx,(%esp)
000027fa	call	*0x50(%eax)
000027fd	fstps	0xc8(%ebp)
00002800	leal	0xd0(%ebp),%esi
00002803	movss	0xc8(%ebp),%xmm0
00002808	jmp	0x00002602
0000280d	addl	$0x6c,%esp
00002810	popl	%esi
00002811	popl	%edi
00002812	popl	%ebx
00002813	popl	%ebp
00002814	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(datamanager.o):
(__TEXT,__text) section
CDataManagerBase::CDataManagerBase(unsigned int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	leal	vtable for CDataManagerBase-0xe+0x00000008(%eax),%eax
00000015	movl	0x08(%ebp),%edi
00000018	movl	%eax,(%edi)
0000001a	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x10(%edi)
00000021	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x0c(%edi)
00000028	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x18(%edi)
0000002f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x14(%edi)
00000036	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x20(%edi)
0000003d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x1c(%edi)
00000044	movw	$0xffff,0x2e(%edi)
0000004a	movw	$0xffff,0x24(%edi)
00000050	movw	$0xffff,0x26(%edi)
00000056	movw	$0xffff,0x28(%edi)
0000005c	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x2a(%edi)
00000062	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x2c(%edi)
00000068	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x30(%edi)
0000006f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x34(%edi)
00000076	movw	$0xffff,0x38(%edi)
0000007c	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x3a(%edi)
00000082	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x3c(%edi)
00000089	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x40(%edi)
00000090	movl	0x0c(%ebp),%eax
00000093	movl	%eax,0x04(%edi)
00000096	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x08(%edi)
0000009d	leal	0x18(%edi),%ebx
000000a0	leal	0x0c(%edi),%eax
000000a3	movl	%eax,0xf0(%ebp)
000000a6	movl	%ebx,(%esp)
000000a9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
000000b1	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
000000b6	movw	%ax,%si
000000b9	cmpw	$0xff,%si
000000bd	je	0x000000d6
000000bf	movzwl	%si,%eax
000000c2	movl	%eax,0x08(%esp)
000000c6	movl	%ebx,(%esp)
000000c9	movl	$0x0000ffff,0x04(%esp)
000000d1	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
000000d6	movl	0x18(%edi),%edx
000000d9	movzwl	%si,%eax
000000dc	imull	$0x0a,%eax,%ecx
000000df	movw	$0xffff,0x02(%edx,%ecx)
000000e6	movl	0x18(%edi),%edx
000000e9	movw	$0xffff,(%edx,%ecx)
000000ef	movl	0x18(%edi),%edx
000000f2	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
000000f9	movw	%ax,0x44(%edi)
000000fd	movl	%ebx,(%esp)
00000100	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
00000108	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
0000010d	movw	%ax,%si
00000110	cmpw	$0xff,%si
00000114	je	0x0000012d
00000116	movzwl	%si,%eax
00000119	movl	%eax,0x08(%esp)
0000011d	movl	%ebx,(%esp)
00000120	movl	$0x0000ffff,0x04(%esp)
00000128	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
0000012d	movl	0x18(%edi),%edx
00000130	movzwl	%si,%eax
00000133	imull	$0x0a,%eax,%ecx
00000136	movw	$0xffff,0x02(%edx,%ecx)
0000013d	movl	0x18(%edi),%edx
00000140	movw	$0xffff,(%edx,%ecx)
00000146	movl	0x18(%edi),%edx
00000149	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
00000150	movw	%ax,0x46(%edi)
00000154	movl	%ebx,(%esp)
00000157	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
0000015f	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
00000164	movw	%ax,%si
00000167	cmpw	$0xff,%si
0000016b	je	0x00000184
0000016d	movzwl	%si,%eax
00000170	movl	%eax,0x08(%esp)
00000174	movl	%ebx,(%esp)
00000177	movl	$0x0000ffff,0x04(%esp)
0000017f	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
00000184	movl	0x18(%edi),%edx
00000187	movzwl	%si,%eax
0000018a	imull	$0x0a,%eax,%ecx
0000018d	movw	$0xffff,0x02(%edx,%ecx)
00000194	movl	0x18(%edi),%edx
00000197	movw	$0xffff,(%edx,%ecx)
0000019d	movl	0x18(%edi),%edx
000001a0	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
000001a7	movw	%ax,0x48(%edi)
000001ab	andb	$0xfe,0x4a(%edi)
000001af	addl	$0x1c,%esp
000001b2	popl	%esi
000001b3	popl	%edi
000001b4	popl	%ebx
000001b5	popl	%ebp
000001b6	ret
000001b7	movl	%eax,%esi
000001b9	movl	0xf0(%ebp),%eax
000001bc	movl	%eax,(%esp)
000001bf	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
000001c4	movl	%esi,(%esp)
000001c7	calll	__Unwind_Resume
000001cc	calll	std::terminate()
000001d1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
000001e0	pushl	%ebp
000001e1	movl	%esp,%ebp
000001e3	pushl	%edi
000001e4	pushl	%esi
000001e5	subl	$0x10,%esp
000001e8	calll	0x000001ed
000001ed	popl	%eax
000001ee	leal	vtable for CDataManagerBase-0x1ed+0x00000008(%eax),%eax
000001f4	movl	0x08(%ebp),%edi
000001f7	movl	%eax,(%edi)
000001f9	leal	0x0c(%edi),%eax
000001fc	movl	%eax,(%esp)
000001ff	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000204	addl	$0x10,%esp
00000207	popl	%esi
00000208	popl	%edi
00000209	popl	%ebp
0000020a	jmp	operator delete(void*)
0000020f	movl	%eax,%esi
00000211	movl	%edi,(%esp)
00000214	calll	operator delete(void*)
00000219	movl	%esi,(%esp)
0000021c	calll	__Unwind_Resume
00000221	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	subl	$0x08,%esp
00000236	calll	0x0000023b
0000023b	popl	%eax
0000023c	leal	vtable for CDataManagerBase-0x23b+0x00000008(%eax),%ecx
00000242	movl	0x08(%ebp),%eax
00000245	movl	%ecx,(%eax)
00000247	addl	$0x0c,%eax
0000024a	movl	%eax,(%esp)
0000024d	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000252	addl	$0x08,%esp
00000255	popl	%ebp
00000256	ret
00000257	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	subl	$0x08,%esp
00000266	calll	0x0000026b
0000026b	popl	%eax
0000026c	leal	vtable for CDataManagerBase-0x26b+0x00000008(%eax),%ecx
00000272	movl	0x08(%ebp),%eax
00000275	movl	%ecx,(%eax)
00000277	addl	$0x0c,%eax
0000027a	movl	%eax,(%esp)
0000027d	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000282	addl	$0x08,%esp
00000285	popl	%ebp
00000286	ret
00000287	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::NotifySizeChanged(memhandle_t__*, unsigned int, unsigned int):
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%esi
00000294	pushl	%eax
00000295	movl	0x08(%ebp),%esi
00000298	movl	(%esi),%eax
0000029a	movl	%esi,(%esp)
0000029d	call	(%eax)
0000029f	movl	0x14(%ebp),%eax
000002a2	subl	0x10(%ebp),%eax
000002a5	addl	%eax,0x08(%esi)
000002a8	movl	(%esi),%eax
000002aa	movl	0x08(%eax),%eax
000002ad	addl	$0x04,%esp
000002b0	popl	%esi
000002b1	popl	%ebp
000002b2	jmp	*%eax
000002b4	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::SetTargetSize(unsigned int):
000002c0	movl	0x08(%esp),%eax
000002c4	movl	0x04(%esp),%ecx
000002c8	movl	%eax,0x04(%ecx)
000002cb	ret
000002cc	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushAllUnlocked():
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	pushl	%ebx
000002d4	pushl	%edi
000002d5	pushl	%esi
000002d6	subl	$0x3c,%esp
000002d9	calll	0x000002de
000002de	popl	%eax
000002df	movl	0x220bd-0x2de(%eax),%eax
000002e5	movl	%eax,0xc4(%ebp)
000002e8	movl	(%eax),%eax
000002ea	movl	%eax,0xf0(%ebp)
000002ed	movl	0x08(%ebp),%edi
000002f0	movl	(%edi),%eax
000002f2	subl	$0x10,%esp
000002f5	movl	%edi,(%esp)
000002f8	call	(%eax)
000002fa	addl	$0x10,%esp
000002fd	movl	0x18(%edi),%eax
00000300	movzwl	0x44(%edi),%ecx
00000304	imull	$0x0a,%ecx,%ecx
00000307	movzwl	0x04(%eax,%ecx),%ebx
0000030c	movl	%ebx,0xbc(%ebp)
0000030f	leal	0x0000000f(,%ebx,4),%edx
00000316	andl	$0xf0,%edx
00000319	movl	%esp,%esi
0000031b	subl	%edx,%esi
0000031d	movl	%esi,%edx
0000031f	movl	%edx,%esp
00000321	movl	%edx,0xd8(%ebp)
00000324	movl	%ebx,0xdc(%ebp)
00000327	movl	$0xffffffff,0xe0(%ebp)
0000032e	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
00000335	movl	%edx,0xe8(%ebp)
00000338	movzwl	(%eax,%ecx),%eax
0000033c	movl	%eax,0xd0(%ebp)
0000033f	movl	0x08(%edi),%eax
00000342	movl	%eax,0xc0(%ebp)
00000345	leal	0x0c(%edi),%eax
00000348	movl	%eax,0xc8(%ebp)
0000034b	xorl	%esi,%esi
0000034d	jmp	0x000003b3
0000034f	nop
00000350	movl	%edi,%ecx
00000352	subl	%eax,%ecx
00000354	subl	$0x10,%esp
00000357	movl	%ecx,0x04(%esp)
0000035b	leal	0xd8(%ebp),%eax
0000035e	movl	%eax,(%esp)
00000361	calll	CUtlMemory<void*, int>::Grow(int)
00000366	addl	$0x10,%esp
00000369	movl	0xd8(%ebp),%edx
0000036c	movl	0xe4(%ebp),%ebx
0000036f	incl	%ebx
00000370	movl	%ebx,0xe4(%ebp)
00000373	movl	%edx,0xe8(%ebp)
00000376	movl	%ebx,%eax
00000378	subl	%esi,%eax
0000037a	decl	%eax
0000037b	testl	%eax,%eax
0000037d	jle	0x000003a1
0000037f	subl	$0x10,%esp
00000382	shll	$0x02,%eax
00000385	movl	%eax,0x08(%esp)
00000389	leal	(%edx,%esi,4),%eax
0000038c	movl	%eax,0x04(%esp)
00000390	leal	(%edx,%edi,4),%eax
00000393	movl	%eax,(%esp)
00000396	calll	_memmove
0000039b	addl	$0x10,%esp
0000039e	movl	0xd8(%ebp),%edx
000003a1	shll	$0x02,%esi
000003a4	movl	%esi,%eax
000003a6	addl	%edx,%eax
000003a8	movl	%ebx,%esi
000003aa	je	0x000003b3
000003ac	movl	0xcc(%ebp),%ecx
000003af	movl	%ecx,(%eax)
000003b1	movl	%ebx,%esi
000003b3	movl	%edx,0xd4(%ebp)
000003b6	movl	0xd0(%ebp),%ecx
000003b9	cmpw	$0xff,%cx
000003bd	je	0x00000498
000003c3	movl	0x08(%ebp),%ebx
000003c6	movl	0x0c(%ebx),%eax
000003c9	movzwl	%cx,%edi
000003cc	imull	$0x0c,%edi,%ecx
000003cf	movw	0x0a(%eax,%ecx),%ax
000003d4	movl	%eax,0xd0(%ebp)
000003d7	movzwl	0x44(%ebx),%eax
000003db	subl	$0x10,%esp
000003de	movl	%edi,0x08(%esp)
000003e2	movl	%eax,0x04(%esp)
000003e6	movl	0xc8(%ebp),%eax
000003e9	movl	%eax,(%esp)
000003ec	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000003f1	addl	$0x10,%esp
000003f4	subl	$0x10,%esp
000003f7	movl	%edi,0x04(%esp)
000003fb	movl	%ebx,(%esp)
000003fe	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000403	addl	$0x10,%esp
00000406	movl	%eax,0xcc(%ebp)
00000409	leal	0x01(%esi),%edi
0000040c	movl	0xdc(%ebp),%eax
0000040f	cmpl	%eax,%edi
00000411	movl	%esi,%ebx
00000413	movl	0xd4(%ebp),%edx
00000416	jle	0x0000036f
0000041c	jmp	0x00000350
00000421	jmp	0x00000425
00000423	jmp	0x00000425
00000425	movl	%eax,%esi
00000427	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
0000042e	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000432	jns	0x00000448
00000434	movl	0xd4(%ebp),%eax
00000437	movl	%eax,0xe8(%ebp)
0000043a	subl	$0x10,%esp
0000043d	movl	%esi,(%esp)
00000440	calll	__Unwind_Resume
00000445	addl	$0x10,%esp
00000448	movl	0xd4(%ebp),%eax
0000044b	testl	%eax,%eax
0000044d	jne	0x00000466
0000044f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000456	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000045d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000464	jmp	0x0000043a
00000466	subl	$0x10,%esp
00000469	movl	%eax,(%esp)
0000046c	calll	_free
00000471	addl	$0x10,%esp
00000474	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
0000047b	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
0000047f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000486	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000048d	js	0x0000043a
0000048f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000496	jmp	0x0000043a
00000498	movl	0x08(%ebp),%edi
0000049b	movl	(%edi),%eax
0000049d	movl	0x08(%eax),%eax
000004a0	subl	$0x10,%esp
000004a3	movl	%edi,(%esp)
000004a6	call	*%eax
000004a8	addl	$0x10,%esp
000004ab	xorl	%esi,%esi
000004ad	movl	0xd4(%ebp),%ecx
000004b0	movl	0xbc(%ebp),%ebx
000004b3	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000004c0	cmpl	%ebx,%esi
000004c2	jge	0x000004e1
000004c4	movl	(%ecx,%esi,4),%ecx
000004c7	movl	(%edi),%eax
000004c9	movl	0x14(%eax),%eax
000004cc	subl	$0x10,%esp
000004cf	movl	%ecx,0x04(%esp)
000004d3	movl	%edi,(%esp)
000004d6	call	*%eax
000004d8	addl	$0x10,%esp
000004db	incl	%esi
000004dc	movl	0xd4(%ebp),%ecx
000004df	jmp	0x000004c0
000004e1	movl	0x08(%edi),%eax
000004e4	movl	0xc0(%ebp),%esi
000004e7	subl	%eax,%esi
000004e9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000004f0	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
000004f4	jns	0x000004fb
000004f6	movl	%ecx,0xe8(%ebp)
000004f9	jmp	0x0000053f
000004fb	testl	%ecx,%ecx
000004fd	jne	0x0000050f
000004ff	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000506	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000050d	jmp	0x00000538
0000050f	subl	$0x10,%esp
00000512	movl	%ecx,(%esp)
00000515	calll	_free
0000051a	addl	$0x10,%esp
0000051d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
00000524	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000528	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000052f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000536	js	0x0000053f
00000538	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000053f	movl	0xc4(%ebp),%eax
00000542	movl	(%eax),%eax
00000544	cmpl	0xf0(%ebp),%eax
00000547	jne	0x00000553
00000549	movl	%esi,%eax
0000054b	leal	0xf4(%ebp),%esp
0000054e	popl	%esi
0000054f	popl	%edi
00000550	popl	%ebx
00000551	popl	%ebp
00000552	ret
00000553	calll	___stack_chk_fail
00000558	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetForFreeByIndex(unsigned short):
00000560	pushl	%ebp
00000561	movl	%esp,%ebp
00000563	pushl	%ebx
00000564	pushl	%edi
00000565	pushl	%esi
00000566	subl	$0x2c,%esp
00000569	calll	0x0000056e
0000056e	popl	%esi
0000056f	xorl	%eax,%eax
00000571	movw	0x0c(%ebp),%cx
00000575	cmpw	$0xff,%cx
00000579	je	0x00000684
0000057f	movl	0x08(%ebp),%ebx
00000582	movl	(%ebx),%eax
00000584	movl	0x0c(%ebx),%edx
00000587	movl	%edx,0xe4(%ebp)
0000058a	movzwl	%cx,%ecx
0000058d	movl	%ecx,0xf0(%ebp)
00000590	imull	$0x0c,%ecx,%edi
00000593	movl	0x04(%edx,%edi),%ecx
00000597	movl	%ecx,0x04(%esp)
0000059b	movl	%ebx,(%esp)
0000059e	call	*0x18(%eax)
000005a1	movl	0x08(%ebx),%ecx
000005a4	cmpl	%ecx,%eax
000005a6	jbe	0x000005cf
000005a8	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount-0x56e(%esi)
000005b2	movl	%ecx,%eax
000005b4	jg	0x000005cf
000005b6	leal	0x1d9e0-0x56e(%esi),%eax
000005bc	movl	%eax,(%esp)
000005bf	calll	_Warning
000005c4	incl	CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount-0x56e(%esi)
000005ca	movl	0x08(%ebx),%ecx
000005cd	movl	%ecx,%eax
000005cf	movl	0xe4(%ebp),%esi
000005d2	leal	0x04(%esi,%edi),%edx
000005d6	movl	%edi,0xe0(%ebp)
000005d9	leal	0x0c(%ebx),%edi
000005dc	movl	%edi,0xec(%ebp)
000005df	subl	%eax,%ecx
000005e1	movl	%ecx,0x08(%ebx)
000005e4	movl	(%edx),%eax
000005e6	movl	%eax,0xe8(%ebp)
000005e9	movl	CDataManagerBase::CDataManagerBase(unsigned int),(%edx)
000005ef	movl	0xe0(%ebp),%edi
000005f2	incw	0x02(%esi,%edi)
000005f7	movw	0x48(%ebx),%cx
000005fb	movw	%cx,0xe4(%ebp)
000005ff	movl	0xf0(%ebp),%eax
00000602	movl	%eax,0x08(%esp)
00000606	movzwl	%cx,%esi
00000609	movl	%esi,0x04(%esp)
0000060d	movl	0xec(%ebp),%eax
00000610	movl	%eax,(%esp)
00000613	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000618	movl	0x0c(%ebx),%ecx
0000061b	movw	$0xffff,0x0a(%ecx,%edi)
00000622	imull	$0x0a,%esi,%eax
00000625	movl	0x18(%ebx),%edx
00000628	movw	0x02(%edx,%eax),%dx
0000062d	movw	%dx,0x08(%ecx,%edi)
00000632	movl	0x18(%ebx),%edx
00000635	movw	0x0c(%ebp),%si
00000639	movw	%si,0x02(%edx,%eax)
0000063e	movw	%si,%dx
00000641	movzwl	0x08(%ecx,%edi),%ecx
00000646	cmpl	$0x0000ffff,%ecx
0000064c	jne	0x00000657
0000064e	movl	0x18(%ebx),%ecx
00000651	movw	%dx,(%ecx,%eax)
00000655	jmp	0x00000667
00000657	movw	%dx,%si
0000065a	movl	0xec(%ebp),%edx
0000065d	movl	(%edx),%edx
0000065f	imull	$0x0c,%ecx,%ecx
00000662	movw	%si,0x0a(%edx,%ecx)
00000667	movl	0x18(%ebx),%ecx
0000066a	incw	0x04(%ecx,%eax)
0000066f	movl	0x34(%ebx),%edx
00000672	testl	%edx,%edx
00000674	movl	0xe8(%ebp),%eax
00000677	je	0x00000684
00000679	movl	0xf0(%ebp),%ecx
0000067c	movw	0xe4(%ebp),%si
00000680	movw	%si,(%edx,%ecx,2)
00000684	addl	$0x2c,%esp
00000687	popl	%esi
00000688	popl	%edi
00000689	popl	%ebx
0000068a	popl	%ebp
0000068b	ret
0000068c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushToTargetSize():
00000690	pushl	%ebp
00000691	movl	%esp,%ebp
00000693	subl	$0x08,%esp
00000696	movl	0x08(%ebp),%eax
00000699	movl	%eax,(%esp)
0000069c	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
000006a4	calll	CDataManagerBase::EnsureCapacity(unsigned int)
000006a9	addl	$0x08,%esp
000006ac	popl	%ebp
000006ad	ret
000006ae	nop
CDataManagerBase::EnsureCapacity(unsigned int):
000006b0	pushl	%ebp
000006b1	movl	%esp,%ebp
000006b3	pushl	%ebx
000006b4	pushl	%edi
000006b5	pushl	%esi
000006b6	subl	$0x1c,%esp
000006b9	movl	0x08(%ebp),%ebx
000006bc	movl	0x08(%ebx),%edx
000006bf	movl	%edx,0xf0(%ebp)
000006c2	leal	0x0c(%ebx),%esi
000006c5	jmp	0x0000070b
000006c7	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000006d0	movzwl	%cx,%edi
000006d3	movl	%edi,0x08(%esp)
000006d7	movzwl	%ax,%eax
000006da	movl	%eax,0x04(%esp)
000006de	movl	%esi,(%esp)
000006e1	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000006e6	movl	%edi,0x04(%esp)
000006ea	movl	%ebx,(%esp)
000006ed	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
000006f2	movl	%eax,%edi
000006f4	movl	(%ebx),%eax
000006f6	movl	%ebx,(%esp)
000006f9	call	*0x08(%eax)
000006fc	movl	(%ebx),%eax
000006fe	movl	%edi,0x04(%esp)
00000702	movl	%ebx,(%esp)
00000705	call	*0x14(%eax)
00000708	movl	0x08(%ebx),%edx
0000070b	movl	0x04(%ebx),%ecx
0000070e	cmpl	%ecx,%edx
00000710	ja	0x00000719
00000712	subl	%edx,%ecx
00000714	cmpl	0x0c(%ebp),%ecx
00000717	jae	0x0000073f
00000719	movl	(%ebx),%eax
0000071b	movl	%ebx,(%esp)
0000071e	call	(%eax)
00000720	movl	0x18(%ebx),%ecx
00000723	movzwl	0x44(%ebx),%eax
00000727	imull	$0x0a,%eax,%edx
0000072a	movw	(%ecx,%edx),%cx
0000072e	cmpw	$0xff,%cx
00000732	jne	0x000006d0
00000734	movl	(%ebx),%eax
00000736	movl	%ebx,(%esp)
00000739	call	*0x08(%eax)
0000073c	movl	0x08(%ebx),%edx
0000073f	movl	0xf0(%ebp),%eax
00000742	subl	%edx,%eax
00000744	addl	$0x1c,%esp
00000747	popl	%esi
00000748	popl	%edi
00000749	popl	%ebx
0000074a	popl	%ebp
0000074b	ret
0000074c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushAll():
00000750	pushl	%ebp
00000751	movl	%esp,%ebp
00000753	pushl	%ebx
00000754	pushl	%edi
00000755	pushl	%esi
00000756	subl	$0x3c,%esp
00000759	calll	0x0000075e
0000075e	popl	%eax
0000075f	movl	0x220bd-0x75e(%eax),%eax
00000765	movl	%eax,0xc0(%ebp)
00000768	movl	(%eax),%eax
0000076a	movl	%eax,0xf0(%ebp)
0000076d	movl	0x08(%ebp),%edi
00000770	movl	(%edi),%eax
00000772	subl	$0x10,%esp
00000775	movl	%edi,(%esp)
00000778	call	(%eax)
0000077a	addl	$0x10,%esp
0000077d	movl	0x18(%edi),%eax
00000780	movzwl	0x44(%edi),%ecx
00000784	imull	$0x0a,%ecx,%ecx
00000787	movzwl	0x04(%eax,%ecx),%edx
0000078c	movzwl	0x46(%edi),%esi
00000790	imull	$0x0a,%esi,%esi
00000793	movzwl	0x04(%eax,%esi),%ebx
00000798	addl	%edx,%ebx
0000079a	movl	%ebx,0xb8(%ebp)
0000079d	leal	0x0000000f(,%ebx,4),%edx
000007a4	andl	$0xf0,%edx
000007a7	movl	%esp,%esi
000007a9	subl	%edx,%esi
000007ab	movl	%esi,%edx
000007ad	movl	%edx,%esp
000007af	movl	%edx,0xd8(%ebp)
000007b2	movl	%ebx,0xdc(%ebp)
000007b5	movl	$0xffffffff,0xe0(%ebp)
000007bc	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000007c3	movl	%edx,0xe8(%ebp)
000007c6	movzwl	(%eax,%ecx),%ecx
000007ca	movl	0x08(%edi),%eax
000007cd	movl	%eax,0xbc(%ebp)
000007d0	leal	0x0c(%edi),%eax
000007d3	movl	%eax,0xc8(%ebp)
000007d6	xorl	%ebx,%ebx
000007d8	jmp	0x00000849
000007da	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000007e0	movl	%esi,%ecx
000007e2	subl	%eax,%ecx
000007e4	subl	$0x10,%esp
000007e7	movl	%ecx,0x04(%esp)
000007eb	leal	0xd8(%ebp),%eax
000007ee	movl	%eax,(%esp)
000007f1	calll	CUtlMemory<void*, int>::Grow(int)
000007f6	addl	$0x10,%esp
000007f9	movl	0xd8(%ebp),%edx
000007fc	movl	0xe4(%ebp),%edi
000007ff	incl	%edi
00000800	movl	%edi,0xe4(%ebp)
00000803	movl	%edx,0xe8(%ebp)
00000806	movl	%edi,%eax
00000808	movl	0xd0(%ebp),%ebx
0000080b	subl	%ebx,%eax
0000080d	decl	%eax
0000080e	testl	%eax,%eax
00000810	jle	0x00000834
00000812	subl	$0x10,%esp
00000815	shll	$0x02,%eax
00000818	movl	%eax,0x08(%esp)
0000081c	leal	(%edx,%ebx,4),%eax
0000081f	movl	%eax,0x04(%esp)
00000823	leal	(%edx,%esi,4),%eax
00000826	movl	%eax,(%esp)
00000829	calll	_memmove
0000082e	addl	$0x10,%esp
00000831	movl	0xd8(%ebp),%edx
00000834	movl	0xcc(%ebp),%ecx
00000837	shll	$0x02,%ebx
0000083a	movl	%ebx,%eax
0000083c	addl	%edx,%eax
0000083e	movl	%edi,%ebx
00000840	je	0x00000849
00000842	movl	0xc4(%ebp),%esi
00000845	movl	%esi,(%eax)
00000847	movl	%edi,%ebx
00000849	cmpw	$0xff,%cx
0000084d	je	0x00000910
00000853	movl	%edx,0xd4(%ebp)
00000856	movl	0x08(%ebp),%edi
00000859	movl	0x0c(%edi),%eax
0000085c	movzwl	%cx,%esi
0000085f	imull	$0x0c,%esi,%ecx
00000862	movw	0x0a(%eax,%ecx),%ax
00000867	movl	%eax,0xcc(%ebp)
0000086a	movzwl	0x44(%edi),%eax
0000086e	subl	$0x10,%esp
00000871	movl	%esi,0x08(%esp)
00000875	movl	%eax,0x04(%esp)
00000879	movl	0xc8(%ebp),%eax
0000087c	movl	%eax,(%esp)
0000087f	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000884	addl	$0x10,%esp
00000887	subl	$0x10,%esp
0000088a	movl	%esi,0x04(%esp)
0000088e	movl	%edi,(%esp)
00000891	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000896	addl	$0x10,%esp
00000899	movl	%eax,0xc4(%ebp)
0000089c	movl	%ebx,0xd0(%ebp)
0000089f	leal	0x01(%ebx),%esi
000008a2	movl	0xdc(%ebp),%eax
000008a5	cmpl	%eax,%esi
000008a7	movl	%ebx,%edi
000008a9	movl	0xd4(%ebp),%edx
000008ac	jle	0x000007ff
000008b2	jmp	0x000007e0
000008b7	jmp	0x000008bd
000008b9	jmp	0x000008bd
000008bb	jmp	0x000008bd
000008bd	movl	%eax,%esi
000008bf	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000008c6	movl	0xd8(%ebp),%eax
000008c9	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
000008cd	jns	0x000008e0
000008cf	movl	%eax,0xe8(%ebp)
000008d2	subl	$0x10,%esp
000008d5	movl	%esi,(%esp)
000008d8	calll	__Unwind_Resume
000008dd	addl	$0x10,%esp
000008e0	testl	%eax,%eax
000008e2	je	0x000008f9
000008e4	subl	$0x10,%esp
000008e7	movl	%eax,(%esp)
000008ea	calll	_free
000008ef	addl	$0x10,%esp
000008f2	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
000008f9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000900	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000907	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000090e	jmp	0x000008d2
00000910	movl	0x08(%ebp),%ecx
00000913	movl	0x18(%ecx),%eax
00000916	movzwl	0x46(%ecx),%ecx
0000091a	imull	$0x0a,%ecx,%ecx
0000091d	movzwl	(%eax,%ecx),%eax
00000921	movl	%eax,0xcc(%ebp)
00000924	jmp	0x00000993
00000926	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
00000930	movl	%edi,%ecx
00000932	subl	%eax,%ecx
00000934	subl	$0x10,%esp
00000937	movl	%ecx,0x04(%esp)
0000093b	leal	0xd8(%ebp),%eax
0000093e	movl	%eax,(%esp)
00000941	calll	CUtlMemory<void*, int>::Grow(int)
00000946	addl	$0x10,%esp
00000949	movl	0xd8(%ebp),%edx
0000094c	movl	0xe4(%ebp),%esi
0000094f	incl	%esi
00000950	movl	%esi,0xe4(%ebp)
00000953	movl	%edx,0xe8(%ebp)
00000956	movl	%esi,%eax
00000958	subl	%ebx,%eax
0000095a	decl	%eax
0000095b	testl	%eax,%eax
0000095d	jle	0x00000981
0000095f	subl	$0x10,%esp
00000962	shll	$0x02,%eax
00000965	movl	%eax,0x08(%esp)
00000969	leal	(%edx,%ebx,4),%eax
0000096c	movl	%eax,0x04(%esp)
00000970	leal	(%edx,%edi,4),%eax
00000973	movl	%eax,(%esp)
00000976	calll	_memmove
0000097b	addl	$0x10,%esp
0000097e	movl	0xd8(%ebp),%edx
00000981	shll	$0x02,%ebx
00000984	movl	%ebx,%eax
00000986	addl	%edx,%eax
00000988	movl	%esi,%ebx
0000098a	je	0x00000993
0000098c	movl	0xc4(%ebp),%ecx
0000098f	movl	%ecx,(%eax)
00000991	movl	%esi,%ebx
00000993	movl	%edx,0xd4(%ebp)
00000996	movl	0xcc(%ebp),%ecx
00000999	cmpw	$0xff,%cx
0000099d	je	0x00000a0c
0000099f	movl	%ebx,0xd0(%ebp)
000009a2	movl	0x08(%ebp),%ebx
000009a5	movl	0x0c(%ebx),%eax
000009a8	movzwl	%cx,%esi
000009ab	imull	$0x0c,%esi,%edi
000009ae	movw	0x0a(%eax,%edi),%ax
000009b3	movl	%eax,0xcc(%ebp)
000009b6	movzwl	0x46(%ebx),%eax
000009ba	subl	$0x10,%esp
000009bd	movl	%esi,0x08(%esp)
000009c1	movl	%eax,0x04(%esp)
000009c5	movl	0xc8(%ebp),%eax
000009c8	movl	%eax,(%esp)
000009cb	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000009d0	addl	$0x10,%esp
000009d3	movl	0x0c(%ebx),%eax
000009d6	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%edi)
000009dc	subl	$0x10,%esp
000009df	movl	%esi,0x04(%esp)
000009e3	movl	%ebx,(%esp)
000009e6	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
000009eb	addl	$0x10,%esp
000009ee	movl	%eax,0xc4(%ebp)
000009f1	movl	0xd0(%ebp),%ebx
000009f4	leal	0x01(%ebx),%edi
000009f7	movl	0xdc(%ebp),%eax
000009fa	cmpl	%eax,%edi
000009fc	movl	%ebx,%esi
000009fe	movl	0xd4(%ebp),%edx
00000a01	jle	0x0000094f
00000a07	jmp	0x00000930
00000a0c	movl	0x08(%ebp),%ecx
00000a0f	andb	$0xfe,0x4a(%ecx)
00000a13	movl	(%ecx),%eax
00000a15	movl	0x08(%eax),%eax
00000a18	subl	$0x10,%esp
00000a1b	movl	%ecx,(%esp)
00000a1e	movl	%ecx,%edi
00000a20	call	*%eax
00000a22	addl	$0x10,%esp
00000a25	xorl	%esi,%esi
00000a27	movl	0xb8(%ebp),%ebx
00000a2a	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
00000a30	cmpl	%ebx,%esi
00000a32	movl	0xd4(%ebp),%eax
00000a35	jge	0x00000a51
00000a37	movl	(%eax,%esi,4),%ecx
00000a3a	movl	(%edi),%eax
00000a3c	movl	0x14(%eax),%eax
00000a3f	subl	$0x10,%esp
00000a42	movl	%ecx,0x04(%esp)
00000a46	movl	%edi,(%esp)
00000a49	call	*%eax
00000a4b	addl	$0x10,%esp
00000a4e	incl	%esi
00000a4f	jmp	0x00000a30
00000a51	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
00000a58	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000a5c	jns	0x00000a63
00000a5e	movl	%eax,0xe8(%ebp)
00000a61	jmp	0x00000aa7
00000a63	testl	%eax,%eax
00000a65	jne	0x00000a77
00000a67	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000a6e	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000a75	jmp	0x00000aa0
00000a77	subl	$0x10,%esp
00000a7a	movl	%eax,(%esp)
00000a7d	calll	_free
00000a82	addl	$0x10,%esp
00000a85	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
00000a8c	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000a90	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000a97	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000a9e	js	0x00000aa7
00000aa0	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000aa7	movl	0xc0(%ebp),%eax
00000aaa	movl	(%eax),%eax
00000aac	cmpl	0xf0(%ebp),%eax
00000aaf	jne	0x00000abc
00000ab1	movl	0xbc(%ebp),%eax
00000ab4	leal	0xf4(%ebp),%esp
00000ab7	popl	%esi
00000ab8	popl	%edi
00000ab9	popl	%ebx
00000aba	popl	%ebp
00000abb	ret
00000abc	calll	___stack_chk_fail
00000ac1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::Purge(unsigned int):
00000ad0	pushl	%ebp
00000ad1	movl	%esp,%ebp
00000ad3	pushl	%esi
00000ad4	subl	$0x14,%esp
00000ad7	movl	0x08(%ebp),%edx
00000ada	movl	0x04(%edx),%eax
00000add	movl	0x08(%edx),%ecx
00000ae0	movl	%edx,(%esp)
00000ae3	movl	0x0c(%ebp),%esi
00000ae6	movl	%ecx,%edx
00000ae8	subl	%esi,%edx
00000aea	cmpl	%esi,%ecx
00000aec	movl	CDataManagerBase::CDataManagerBase(unsigned int),%ecx
00000af1	cmovael	%edx,%ecx
00000af4	subl	%ecx,%eax
00000af6	movl	%eax,0x04(%esp)
00000afa	calll	CDataManagerBase::EnsureCapacity(unsigned int)
00000aff	addl	$0x14,%esp
00000b02	popl	%esi
00000b03	popl	%ebp
00000b04	ret
00000b05	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::DestroyResource(memhandle_t__*):
00000b10	pushl	%ebp
00000b11	movl	%esp,%ebp
00000b13	pushl	%ebx
00000b14	pushl	%edi
00000b15	pushl	%esi
00000b16	subl	$0x0c,%esp
00000b19	movl	0x08(%ebp),%edi
00000b1c	movl	(%edi),%eax
00000b1e	movl	%edi,(%esp)
00000b21	call	(%eax)
00000b23	movl	0x0c(%ebp),%ebx
00000b26	leal	0xff(%ebx),%ecx
00000b29	movzwl	%cx,%esi
00000b2c	movl	0x3c(%edi),%edx
00000b2f	cmpl	%edx,%esi
00000b31	jge	0x00000b55
00000b33	movl	0x0c(%edi),%eax
00000b36	imull	$0x0c,%esi,%esi
00000b39	cmpw	%cx,0x08(%eax,%esi)
00000b3e	jne	0x00000b47
00000b40	cmpw	%cx,0x0a(%eax,%esi)
00000b45	jne	0x00000b55
00000b47	movzwl	0x02(%eax,%esi),%eax
00000b4c	movl	%ebx,%esi
00000b4e	shrl	$0x10,%esi
00000b51	cmpl	%esi,%eax
00000b53	je	0x00000b59
00000b55	movw	$0xffff,%cx
00000b59	movzwl	%cx,%esi
00000b5c	cmpl	%edx,%esi
00000b5e	jge	0x00000bca
00000b60	leal	0x0c(%edi),%ebx
00000b63	movl	(%ebx),%edx
00000b65	imull	$0x0c,%esi,%eax
00000b68	cmpw	%cx,0x08(%edx,%eax)
00000b6d	jne	0x00000b76
00000b6f	cmpw	%cx,0x0a(%edx,%eax)
00000b74	jne	0x00000bca
00000b76	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%edx,%eax)
00000b7b	je	0x00000b8c
00000b7d	movl	0x0c(%ebp),%eax
00000b80	movl	%eax,0x04(%esp)
00000b84	movl	%edi,(%esp)
00000b87	calll	CDataManagerBase::BreakLock(memhandle_t__*)
00000b8c	movzwl	0x44(%edi),%eax
00000b90	movl	%esi,0x08(%esp)
00000b94	movl	%eax,0x04(%esp)
00000b98	movl	%ebx,(%esp)
00000b9b	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ba0	movl	%esi,0x04(%esp)
00000ba4	movl	%edi,(%esp)
00000ba7	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000bac	movl	%eax,%esi
00000bae	movl	(%edi),%eax
00000bb0	movl	%edi,(%esp)
00000bb3	call	*0x08(%eax)
00000bb6	movl	(%edi),%eax
00000bb8	movl	%esi,0x04(%esp)
00000bbc	movl	%edi,(%esp)
00000bbf	call	*0x14(%eax)
00000bc2	addl	$0x0c,%esp
00000bc5	popl	%esi
00000bc6	popl	%edi
00000bc7	popl	%ebx
00000bc8	popl	%ebp
00000bc9	ret
00000bca	movl	(%edi),%eax
00000bcc	movl	0x08(%eax),%eax
00000bcf	addl	$0x0c,%esp
00000bd2	popl	%esi
00000bd3	popl	%edi
00000bd4	popl	%ebx
00000bd5	popl	%ebp
00000bd6	jmp	*%eax
00000bd8	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::BreakLock(memhandle_t__*):
00000be0	pushl	%ebp
00000be1	movl	%esp,%ebp
00000be3	pushl	%ebx
00000be4	pushl	%edi
00000be5	pushl	%esi
00000be6	subl	$0x2c,%esp
00000be9	movl	0x08(%ebp),%ebx
00000bec	movl	(%ebx),%eax
00000bee	movl	%ebx,(%esp)
00000bf1	call	(%eax)
00000bf3	movl	0x0c(%ebp),%eax
00000bf6	leal	0xff(%eax),%ecx
00000bf9	movzwl	%cx,%eax
00000bfc	movl	%eax,0xf0(%ebp)
00000bff	xorl	%esi,%esi
00000c01	cmpl	0x3c(%ebx),%eax
00000c04	jge	0x00000d14
00000c0a	movl	0x0c(%ebx),%eax
00000c0d	imull	$0x0c,0xf0(%ebp),%edi
00000c11	cmpw	%cx,0x08(%eax,%edi)
00000c16	jne	0x00000c25
00000c18	xorl	%esi,%esi
00000c1a	cmpw	%cx,0x0a(%eax,%edi)
00000c1f	jne	0x00000d14
00000c25	movl	%ecx,0xec(%ebp)
00000c28	movl	%ebx,%ecx
00000c2a	movzwl	0x02(%eax,%edi),%edx
00000c2f	movl	%edx,0xe8(%ebp)
00000c32	movl	0x0c(%ebp),%edx
00000c35	movl	%edx,%ebx
00000c37	shrl	$0x10,%ebx
00000c3a	xorl	%esi,%esi
00000c3c	cmpl	%ebx,0xe8(%ebp)
00000c3f	je	0x00000c48
00000c41	movl	%ecx,%ebx
00000c43	jmp	0x00000d14
00000c48	testw	%dx,%dx
00000c4b	movl	%ecx,%ebx
00000c4d	je	0x00000d14
00000c53	movzwl	(%eax,%edi),%ecx
00000c57	movl	%ecx,0xe4(%ebp)
00000c5a	xorl	%esi,%esi
00000c5c	testl	%ecx,%ecx
00000c5e	je	0x00000d14
00000c64	addl	%edi,%eax
00000c66	leal	0x0c(%ebx),%ecx
00000c69	movl	%ecx,0xe8(%ebp)
00000c6c	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax)
00000c71	movzwl	0x46(%ebx),%eax
00000c75	movl	0xf0(%ebp),%esi
00000c78	movl	%esi,0x08(%esp)
00000c7c	movl	%eax,0x04(%esp)
00000c80	movl	%ecx,(%esp)
00000c83	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000c88	movw	0x44(%ebx),%ax
00000c8c	movw	%ax,0xe2(%ebp)
00000c90	movl	%esi,0x08(%esp)
00000c94	movl	%ebx,%esi
00000c96	movzwl	%ax,%ebx
00000c99	movl	%ebx,0x04(%esp)
00000c9d	movl	0xe8(%ebp),%eax
00000ca0	movl	%eax,(%esp)
00000ca3	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ca8	movl	0x0c(%esi),%ecx
00000cab	movw	$0xffff,0x0a(%ecx,%edi)
00000cb2	imull	$0x0a,%ebx,%eax
00000cb5	movl	%esi,%ebx
00000cb7	movl	0x18(%ebx),%edx
00000cba	movw	0x02(%edx,%eax),%dx
00000cbf	movw	%dx,0x08(%ecx,%edi)
00000cc4	movl	0x18(%ebx),%edx
00000cc7	movl	0xec(%ebp),%esi
00000cca	movw	%si,0x02(%edx,%eax)
00000ccf	movl	0xec(%ebp),%edx
00000cd2	movzwl	0x08(%ecx,%edi),%ecx
00000cd7	cmpl	$0x0000ffff,%ecx
00000cdd	jne	0x00000ce8
00000cdf	movl	0x18(%ebx),%ecx
00000ce2	movw	%dx,(%ecx,%eax)
00000ce6	jmp	0x00000cf7
00000ce8	movl	%edx,%esi
00000cea	movl	0xe8(%ebp),%edx
00000ced	movl	(%edx),%edx
00000cef	imull	$0x0c,%ecx,%ecx
00000cf2	movw	%si,0x0a(%edx,%ecx)
00000cf7	movl	0x18(%ebx),%ecx
00000cfa	incw	0x04(%ecx,%eax)
00000cff	movl	0x34(%ebx),%eax
00000d02	testl	%eax,%eax
00000d04	movl	0xe4(%ebp),%esi
00000d07	je	0x00000d14
00000d09	movl	0xf0(%ebp),%ecx
00000d0c	movw	0xe2(%ebp),%dx
00000d10	movw	%dx,(%eax,%ecx,2)
00000d14	movl	(%ebx),%eax
00000d16	movl	%ebx,(%esp)
00000d19	call	*0x08(%eax)
00000d1c	movl	%esi,%eax
00000d1e	addl	$0x2c,%esp
00000d21	popl	%esi
00000d22	popl	%edi
00000d23	popl	%ebx
00000d24	popl	%ebp
00000d25	ret
00000d26	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::LockResource(memhandle_t__*):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%ebx
00000d34	pushl	%edi
00000d35	pushl	%esi
00000d36	subl	$0x2c,%esp
00000d39	movl	0x08(%ebp),%edi
00000d3c	movl	(%edi),%eax
00000d3e	movl	%edi,(%esp)
00000d41	call	(%eax)
00000d43	movl	0x0c(%ebp),%eax
00000d46	leal	0xff(%eax),%edx
00000d49	movzwl	%dx,%eax
00000d4c	movl	%eax,0xf0(%ebp)
00000d4f	xorl	%esi,%esi
00000d51	cmpl	0x3c(%edi),%eax
00000d54	jge	0x00000e6c
00000d5a	movl	0x0c(%edi),%ecx
00000d5d	imull	$0x0c,0xf0(%ebp),%ebx
00000d61	cmpw	%dx,0x08(%ecx,%ebx)
00000d66	jne	0x00000d75
00000d68	xorl	%esi,%esi
00000d6a	cmpw	%dx,0x0a(%ecx,%ebx)
00000d6f	jne	0x00000e6c
00000d75	movl	%edx,0xe4(%ebp)
00000d78	movl	%edi,%eax
00000d7a	movzwl	0x02(%ecx,%ebx),%edx
00000d7f	movl	%edx,0xe8(%ebp)
00000d82	movl	0x0c(%ebp),%edx
00000d85	movl	%edx,%edi
00000d87	shrl	$0x10,%edi
00000d8a	xorl	%esi,%esi
00000d8c	cmpl	%edi,0xe8(%ebp)
00000d8f	je	0x00000d98
00000d91	movl	%eax,%edi
00000d93	jmp	0x00000e6c
00000d98	testw	%dx,%dx
00000d9b	movl	%eax,%edi
00000d9d	je	0x00000e6c
00000da3	leal	0x0c(%edi),%edx
00000da6	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%ecx,%ebx)
00000dab	movl	%ebx,0xec(%ebp)
00000dae	jne	0x00000e5d
00000db4	movzwl	0x44(%edi),%eax
00000db8	movl	0xf0(%ebp),%esi
00000dbb	movl	%esi,0x08(%esp)
00000dbf	movl	%eax,0x04(%esp)
00000dc3	movl	%edx,(%esp)
00000dc6	movl	%edx,%ebx
00000dc8	movl	%ebx,0xe8(%ebp)
00000dcb	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000dd0	movw	0x46(%edi),%ax
00000dd4	movw	%ax,0xe2(%ebp)
00000dd8	movl	%esi,0x08(%esp)
00000ddc	movl	%edi,%esi
00000dde	movzwl	%ax,%edi
00000de1	movl	%edi,0x04(%esp)
00000de5	movl	%ebx,(%esp)
00000de8	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ded	movl	0x0c(%esi),%ecx
00000df0	movl	0xec(%ebp),%eax
00000df3	movw	$0xffff,0x0a(%ecx,%eax)
00000dfa	imull	$0x0a,%edi,%ebx
00000dfd	movl	%esi,%edi
00000dff	movl	0x18(%edi),%edx
00000e02	movw	0x02(%edx,%ebx),%dx
00000e07	movw	%dx,0x08(%ecx,%eax)
00000e0c	movl	0x18(%edi),%edx
00000e0f	movl	0xe4(%ebp),%esi
00000e12	movw	%si,0x02(%edx,%ebx)
00000e17	movl	%esi,%edx
00000e19	movzwl	0x08(%ecx,%eax),%ecx
00000e1e	cmpl	$0x0000ffff,%ecx
00000e24	jne	0x00000e32
00000e26	movl	0xe8(%ebp),%esi
00000e29	movl	0x18(%edi),%ecx
00000e2c	movw	%dx,(%ecx,%ebx)
00000e30	jmp	0x00000e41
00000e32	movl	%edx,%eax
00000e34	movl	0xe8(%ebp),%esi
00000e37	movl	(%esi),%edx
00000e39	imull	$0x0c,%ecx,%ecx
00000e3c	movw	%ax,0x0a(%edx,%ecx)
00000e41	movl	0x18(%edi),%ecx
00000e44	incw	0x04(%ecx,%ebx)
00000e49	movl	0x34(%edi),%eax
00000e4c	testl	%eax,%eax
00000e4e	movl	%esi,%edx
00000e50	je	0x00000e5d
00000e52	movl	0xf0(%ebp),%ecx
00000e55	movw	0xe2(%ebp),%si
00000e59	movw	%si,(%eax,%ecx,2)
00000e5d	movl	(%edx),%eax
00000e5f	movl	0xec(%ebp),%ecx
00000e62	incw	(%eax,%ecx)
00000e66	movl	(%edx),%eax
00000e68	movl	0x04(%eax,%ecx),%esi
00000e6c	movl	(%edi),%eax
00000e6e	movl	%edi,(%esp)
00000e71	call	*0x08(%eax)
00000e74	movl	%esi,%eax
00000e76	addl	$0x2c,%esp
00000e79	popl	%esi
00000e7a	popl	%edi
00000e7b	popl	%ebx
00000e7c	popl	%ebp
00000e7d	ret
00000e7e	nop
CDataManagerBase::UnlockResource(memhandle_t__*):
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x2c,%esp
00000e89	movl	0x08(%ebp),%edi
00000e8c	movl	(%edi),%eax
00000e8e	movl	%edi,(%esp)
00000e91	call	(%eax)
00000e93	movl	0x0c(%ebp),%eax
00000e96	leal	0xff(%eax),%ecx
00000e99	movzwl	%cx,%eax
00000e9c	movl	%eax,0xf0(%ebp)
00000e9f	xorl	%esi,%esi
00000ea1	cmpl	0x3c(%edi),%eax
00000ea4	jge	0x00000fc9
00000eaa	movl	0x0c(%edi),%eax
00000ead	imull	$0x0c,0xf0(%ebp),%ebx
00000eb1	cmpw	%cx,0x08(%eax,%ebx)
00000eb6	jne	0x00000ec5
00000eb8	xorl	%esi,%esi
00000eba	cmpw	%cx,0x0a(%eax,%ebx)
00000ebf	jne	0x00000fc9
00000ec5	movl	%ecx,0xe8(%ebp)
00000ec8	movl	%edi,%ecx
00000eca	movzwl	0x02(%eax,%ebx),%edx
00000ecf	movl	%edx,0xec(%ebp)
00000ed2	movl	0x0c(%ebp),%edx
00000ed5	movl	%edx,%edi
00000ed7	shrl	$0x10,%edi
00000eda	xorl	%esi,%esi
00000edc	cmpl	%edi,0xec(%ebp)
00000edf	je	0x00000ee8
00000ee1	movl	%ecx,%edi
00000ee3	jmp	0x00000fc9
00000ee8	testw	%dx,%dx
00000eeb	movl	%ecx,%edi
00000eed	je	0x00000fc9
00000ef3	movw	(%eax,%ebx),%cx
00000ef7	leal	0x0c(%edi),%edx
00000efa	testw	%cx,%cx
00000efd	je	0x00000fc3
00000f03	addl	%ebx,%eax
00000f05	decl	%ecx
00000f06	movw	%cx,(%eax)
00000f09	movl	(%edx),%eax
00000f0b	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%ebx)
00000f10	jne	0x00000fc3
00000f16	movzwl	0x46(%edi),%eax
00000f1a	movl	0xf0(%ebp),%esi
00000f1d	movl	%esi,0x08(%esp)
00000f21	movl	%eax,0x04(%esp)
00000f25	movl	%edx,(%esp)
00000f28	movl	%ebx,0xe4(%ebp)
00000f2b	movl	%edx,0xec(%ebp)
00000f2e	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000f33	movw	0x44(%edi),%ax
00000f37	movw	%ax,0xe2(%ebp)
00000f3b	movl	%esi,0x08(%esp)
00000f3f	movl	%edi,%esi
00000f41	movzwl	%ax,%edi
00000f44	movl	%edi,0x04(%esp)
00000f48	movl	0xec(%ebp),%eax
00000f4b	movl	%eax,(%esp)
00000f4e	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000f53	movl	0x0c(%esi),%ecx
00000f56	movw	$0xffff,0x0a(%ecx,%ebx)
00000f5d	imull	$0x0a,%edi,%eax
00000f60	movl	%esi,%edi
00000f62	movl	0x18(%edi),%edx
00000f65	movw	0x02(%edx,%eax),%dx
00000f6a	movw	%dx,0x08(%ecx,%ebx)
00000f6f	movl	0x18(%edi),%edx
00000f72	movl	0xe8(%ebp),%esi
00000f75	movw	%si,0x02(%edx,%eax)
00000f7a	movl	%esi,%edx
00000f7c	movzwl	0x08(%ecx,%ebx),%ecx
00000f81	cmpl	$0x0000ffff,%ecx
00000f87	jne	0x00000f95
00000f89	movl	0xec(%ebp),%ebx
00000f8c	movl	0x18(%edi),%ecx
00000f8f	movw	%dx,(%ecx,%eax)
00000f93	jmp	0x00000fa4
00000f95	movl	%edx,%esi
00000f97	movl	0xec(%ebp),%ebx
00000f9a	movl	(%ebx),%edx
00000f9c	imull	$0x0c,%ecx,%ecx
00000f9f	movw	%si,0x0a(%edx,%ecx)
00000fa4	movl	0x18(%edi),%ecx
00000fa7	incw	0x04(%ecx,%eax)
00000fac	movl	0x34(%edi),%eax
00000faf	testl	%eax,%eax
00000fb1	movl	%ebx,%edx
00000fb3	movl	0xe4(%ebp),%ebx
00000fb6	je	0x00000fc3
00000fb8	movl	0xf0(%ebp),%ecx
00000fbb	movw	0xe2(%ebp),%si
00000fbf	movw	%si,(%eax,%ecx,2)
00000fc3	movl	(%edx),%eax
00000fc5	movzwl	(%eax,%ebx),%esi
00000fc9	movl	(%edi),%eax
00000fcb	movl	%edi,(%esp)
00000fce	call	*0x08(%eax)
00000fd1	movl	%esi,%eax
00000fd3	addl	$0x2c,%esp
00000fd6	popl	%esi
00000fd7	popl	%edi
00000fd8	popl	%ebx
00000fd9	popl	%ebp
00000fda	ret
00000fdb	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetResource_NoLockNoLRUTouch(memhandle_t__*):
00000fe0	pushl	%ebp
00000fe1	movl	%esp,%ebp
00000fe3	pushl	%ebx
00000fe4	pushl	%edi
00000fe5	pushl	%esi
00000fe6	subl	$0x0c,%esp
00000fe9	movl	0x08(%ebp),%edi
00000fec	movl	(%edi),%eax
00000fee	movl	%edi,(%esp)
00000ff1	call	(%eax)
00000ff3	movl	0x0c(%ebp),%eax
00000ff6	leal	0xff(%eax),%ebx
00000ff9	movzwl	%bx,%edx
00000ffc	xorl	%esi,%esi
00000ffe	cmpl	0x3c(%edi),%edx
00001001	jge	0x00001037
00001003	movl	0x08(%ebp),%ecx
00001006	movl	0x0c(%ecx),%ecx
00001009	imull	$0x0c,%edx,%edx
0000100c	cmpw	%bx,0x08(%ecx,%edx)
00001011	jne	0x0000101c
00001013	xorl	%esi,%esi
00001015	cmpw	%bx,0x0a(%ecx,%edx)
0000101a	jne	0x00001037
0000101c	movzwl	0x02(%ecx,%edx),%ebx
00001021	movl	%eax,%edi
00001023	movl	%edi,%eax
00001025	shrl	$0x10,%eax
00001028	xorl	%esi,%esi
0000102a	cmpl	%eax,%ebx
0000102c	jne	0x00001037
0000102e	testw	%di,%di
00001031	je	0x00001037
00001033	movl	0x04(%ecx,%edx),%esi
00001037	movl	0x08(%ebp),%ecx
0000103a	movl	(%ecx),%eax
0000103c	movl	%ecx,(%esp)
0000103f	call	*0x08(%eax)
00001042	movl	%esi,%eax
00001044	addl	$0x0c,%esp
00001047	popl	%esi
00001048	popl	%edi
00001049	popl	%ebx
0000104a	popl	%ebp
0000104b	ret
0000104c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::GetResource_NoLock(memhandle_t__*):
00001050	pushl	%ebp
00001051	movl	%esp,%ebp
00001053	pushl	%ebx
00001054	pushl	%edi
00001055	pushl	%esi
00001056	subl	$0x0c,%esp
00001059	movl	0x08(%ebp),%edi
0000105c	movl	(%edi),%eax
0000105e	movl	%edi,(%esp)
00001061	call	(%eax)
00001063	movl	0x0c(%ebp),%eax
00001066	leal	0xff(%eax),%edx
00001069	movzwl	%dx,%eax
0000106c	xorl	%esi,%esi
0000106e	cmpl	0x3c(%edi),%eax
00001071	jge	0x000010c2
00001073	movl	0x0c(%edi),%ecx
00001076	imull	$0x0c,%eax,%ebx
00001079	cmpw	%dx,0x08(%ecx,%ebx)
0000107e	jne	0x00001089
00001080	xorl	%esi,%esi
00001082	cmpw	%dx,0x0a(%ecx,%ebx)
00001087	jne	0x000010c2
00001089	movl	%eax,0xf0(%ebp)
0000108c	movl	%edi,%eax
0000108e	movzwl	0x02(%ecx,%ebx),%ecx
00001093	movl	0x0c(%ebp),%edi
00001096	movl	%edi,%edx
00001098	shrl	$0x10,%edx
0000109b	xorl	%esi,%esi
0000109d	cmpl	%edx,%ecx
0000109f	je	0x000010a5
000010a1	movl	%eax,%edi
000010a3	jmp	0x000010c2
000010a5	testw	%di,%di
000010a8	movl	%eax,%edi
000010aa	movl	0xf0(%ebp),%eax
000010ad	je	0x000010c2
000010af	movl	%eax,0x04(%esp)
000010b3	movl	%edi,(%esp)
000010b6	calll	CDataManagerBase::TouchByIndex(unsigned short)
000010bb	movl	0x0c(%edi),%eax
000010be	movl	0x04(%eax,%ebx),%esi
000010c2	movl	(%edi),%eax
000010c4	movl	%edi,(%esp)
000010c7	call	*0x08(%eax)
000010ca	movl	%esi,%eax
000010cc	addl	$0x0c,%esp
000010cf	popl	%esi
000010d0	popl	%edi
000010d1	popl	%ebx
000010d2	popl	%ebp
000010d3	ret
000010d4	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::TouchByIndex(unsigned short):
000010e0	pushl	%ebp
000010e1	movl	%esp,%ebp
000010e3	pushl	%ebx
000010e4	pushl	%edi
000010e5	pushl	%esi
000010e6	subl	$0x1c,%esp
000010e9	movw	0x0c(%ebp),%cx
000010ed	cmpw	$0xff,%cx
000010f1	je	0x000011b6
000010f7	movl	0x08(%ebp),%ebx
000010fa	movl	0x0c(%ebx),%eax
000010fd	movzwl	%cx,%esi
00001100	imull	$0x0c,%esi,%ecx
00001103	movl	%ecx,0xe8(%ebp)
00001106	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%ecx)
0000110b	jne	0x000011b6
00001111	leal	0x0c(%ebx),%edi
00001114	movl	%edi,0xe4(%ebp)
00001117	movzwl	0x44(%ebx),%eax
0000111b	movl	%esi,0x08(%esp)
0000111f	movl	%eax,0x04(%esp)
00001123	movl	%edi,(%esp)
00001126	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
0000112b	movw	0x44(%ebx),%ax
0000112f	movw	%ax,0xee(%ebp)
00001133	movl	%esi,0x08(%esp)
00001137	movl	%esi,0xf0(%ebp)
0000113a	movzwl	%ax,%esi
0000113d	movl	%esi,0x04(%esp)
00001141	movl	%edi,(%esp)
00001144	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00001149	movl	0x0c(%ebx),%ecx
0000114c	movl	0xe8(%ebp),%eax
0000114f	movw	$0xffff,0x0a(%ecx,%eax)
00001156	imull	$0x0a,%esi,%edi
00001159	movl	0x18(%ebx),%edx
0000115c	movw	0x02(%edx,%edi),%dx
00001161	movw	%dx,0x08(%ecx,%eax)
00001166	movl	0x18(%ebx),%edx
00001169	movw	0x0c(%ebp),%si
0000116d	movw	%si,0x02(%edx,%edi)
00001172	movw	0x0c(%ebp),%dx
00001176	movzwl	0x08(%ecx,%eax),%ecx
0000117b	cmpl	$0x0000ffff,%ecx
00001181	jne	0x0000118c
00001183	movl	0x18(%ebx),%ecx
00001186	movw	%dx,(%ecx,%edi)
0000118a	jmp	0x0000119c
0000118c	movw	%dx,%si
0000118f	movl	0xe4(%ebp),%eax
00001192	movl	(%eax),%edx
00001194	imull	$0x0c,%ecx,%ecx
00001197	movw	%si,0x0a(%edx,%ecx)
0000119c	movl	0x18(%ebx),%ecx
0000119f	incw	0x04(%ecx,%edi)
000011a4	movl	0x34(%ebx),%eax
000011a7	testl	%eax,%eax
000011a9	movl	0xf0(%ebp),%ecx
000011ac	je	0x000011b6
000011ae	movw	0xee(%ebp),%dx
000011b2	movw	%dx,(%eax,%ecx,2)
000011b6	addl	$0x1c,%esp
000011b9	popl	%esi
000011ba	popl	%edi
000011bb	popl	%ebx
000011bc	popl	%ebp
000011bd	ret
000011be	nop
CDataManagerBase::TouchResource(memhandle_t__*):
000011c0	pushl	%ebp
000011c1	movl	%esp,%ebp
000011c3	pushl	%edi
000011c4	pushl	%esi
000011c5	subl	$0x10,%esp
000011c8	movl	0x08(%ebp),%esi
000011cb	movl	(%esi),%eax
000011cd	movl	%esi,(%esp)
000011d0	call	(%eax)
000011d2	movl	0x0c(%ebp),%ecx
000011d5	leal	0xff(%ecx),%eax
000011d8	movzwl	%ax,%edi
000011db	cmpl	0x3c(%esi),%edi
000011de	jge	0x00001200
000011e0	movl	0x0c(%esi),%edx
000011e3	imull	$0x0c,%edi,%edi
000011e6	cmpw	%ax,0x08(%edx,%edi)
000011eb	jne	0x000011f4
000011ed	cmpw	%ax,0x0a(%edx,%edi)
000011f2	jne	0x00001200
000011f4	movzwl	0x02(%edx,%edi),%edx
000011f9	shrl	$0x10,%ecx
000011fc	cmpl	%ecx,%edx
000011fe	je	0x00001204
00001200	movw	$0xffff,%ax
00001204	movzwl	%ax,%eax
00001207	movl	%eax,0x04(%esp)
0000120b	movl	%esi,(%esp)
0000120e	calll	CDataManagerBase::TouchByIndex(unsigned short)
00001213	movl	(%esi),%eax
00001215	movl	0x08(%eax),%eax
00001218	addl	$0x10,%esp
0000121b	popl	%esi
0000121c	popl	%edi
0000121d	popl	%ebp
0000121e	jmp	*%eax
CDataManagerBase::MarkAsStale(memhandle_t__*):
00001220	pushl	%ebp
00001221	movl	%esp,%ebp
00001223	pushl	%ebx
00001224	pushl	%edi
00001225	pushl	%esi
00001226	subl	$0x1c,%esp
00001229	movl	0x08(%ebp),%esi
0000122c	movl	(%esi),%eax
0000122e	movl	%esi,(%esp)
00001231	call	(%eax)
00001233	movl	0x0c(%ebp),%eax
00001236	leal	0xff(%eax),%ebx
00001239	movzwl	%bx,%ecx
0000123c	movl	%ecx,0xf0(%ebp)
0000123f	cmpl	0x3c(%esi),%ecx
00001242	jge	0x00001336
00001248	movl	0x0c(%esi),%ecx
0000124b	imull	$0x0c,0xf0(%ebp),%edi
0000124f	cmpw	%bx,0x08(%ecx,%edi)
00001254	jne	0x00001261
00001256	cmpw	%bx,0x0a(%ecx,%edi)
0000125b	jne	0x00001336
00001261	movzwl	0x02(%ecx,%edi),%edx
00001266	movl	%ebx,%eax
00001268	movl	%esi,%ebx
0000126a	movl	0x0c(%ebp),%esi
0000126d	shrl	$0x10,%esi
00001270	cmpl	%esi,%edx
00001272	movl	%ebx,%esi
00001274	movl	%eax,%edx
00001276	jne	0x00001336
0000127c	movl	0x0c(%ebp),%eax
0000127f	testw	%ax,%ax
00001282	je	0x00001336
00001288	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%ecx,%edi)
0000128d	jne	0x00001336
00001293	leal	0x0c(%esi),%ecx
00001296	movl	%ecx,0xec(%ebp)
00001299	movzwl	0x44(%esi),%eax
0000129d	movl	%edx,0xe8(%ebp)
000012a0	movl	0xf0(%ebp),%ebx
000012a3	movl	%ebx,0x08(%esp)
000012a7	movl	%eax,0x04(%esp)
000012ab	movl	%ecx,(%esp)
000012ae	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000012b3	movw	0x44(%esi),%ax
000012b7	movw	%ax,0xe6(%ebp)
000012bb	movl	%ebx,0x08(%esp)
000012bf	movl	%esi,%ebx
000012c1	movzwl	%ax,%esi
000012c4	movl	%esi,0x04(%esp)
000012c8	movl	0xec(%ebp),%eax
000012cb	movl	%eax,(%esp)
000012ce	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000012d3	movl	0x0c(%ebx),%ecx
000012d6	movw	$0xffff,0x08(%ecx,%edi)
000012dd	imull	$0x0a,%esi,%eax
000012e0	movl	%ebx,%esi
000012e2	movl	0xe8(%ebp),%ebx
000012e5	movl	0x18(%esi),%edx
000012e8	movw	(%edx,%eax),%dx
000012ec	movw	%dx,0x0a(%ecx,%edi)
000012f1	movl	0x18(%esi),%edx
000012f4	movw	%bx,(%edx,%eax)
000012f8	movzwl	0x0a(%ecx,%edi),%ecx
000012fd	cmpl	$0x0000ffff,%ecx
00001303	jne	0x0000130f
00001305	movl	0x18(%esi),%ecx
00001308	movw	%bx,0x02(%ecx,%eax)
0000130d	jmp	0x0000131c
0000130f	movl	0xec(%ebp),%edx
00001312	movl	(%edx),%edx
00001314	imull	$0x0c,%ecx,%ecx
00001317	movw	%bx,0x08(%edx,%ecx)
0000131c	movl	0x18(%esi),%ecx
0000131f	incw	0x04(%ecx,%eax)
00001324	movl	0x34(%esi),%eax
00001327	testl	%eax,%eax
00001329	je	0x00001336
0000132b	movl	0xf0(%ebp),%ecx
0000132e	movw	0xe6(%ebp),%dx
00001332	movw	%dx,(%eax,%ecx,2)
00001336	movl	(%esi),%eax
00001338	movl	0x08(%eax),%eax
0000133b	addl	$0x1c,%esp
0000133e	popl	%esi
0000133f	popl	%edi
00001340	popl	%ebx
00001341	popl	%ebp
00001342	jmp	*%eax
00001344	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::BreakAllLocks():
00001350	pushl	%ebp
00001351	movl	%esp,%ebp
00001353	pushl	%ebx
00001354	pushl	%edi
00001355	pushl	%esi
00001356	subl	$0x2c,%esp
00001359	movl	0x08(%ebp),%esi
0000135c	movl	(%esi),%eax
0000135e	movl	%esi,(%esp)
00001361	call	(%eax)
00001363	movl	0x18(%esi),%eax
00001366	movzwl	0x46(%esi),%ecx
0000136a	movl	%esi,%edx
0000136c	imull	$0x0a,%ecx,%ecx
0000136f	movw	(%eax,%ecx),%di
00001373	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
0000137a	cmpw	$0xff,%di
0000137e	je	0x0000147c
00001384	leal	0x0c(%edx),%esi
00001387	movl	%esi,0xf0(%ebp)
0000138a	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00001391	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000013a0	movw	%di,0xe4(%ebp)
000013a4	movl	0x0c(%edx),%eax
000013a7	movl	%edx,%ecx
000013a9	movzwl	%di,%ebx
000013ac	movl	%ebx,0xe8(%ebp)
000013af	imull	$0x0c,%ebx,%edi
000013b2	movw	0x0a(%eax,%edi),%dx
000013b7	movw	%dx,0xee(%ebp)
000013bb	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%edi)
000013c1	movzwl	0x46(%ecx),%eax
000013c5	movl	%ebx,0x08(%esp)
000013c9	movl	%eax,0x04(%esp)
000013cd	movl	%esi,(%esp)
000013d0	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000013d5	movl	0x08(%ebp),%eax
000013d8	movw	0x44(%eax),%ax
000013dc	movw	%ax,0xe6(%ebp)
000013e0	movl	%ebx,0x08(%esp)
000013e4	movzwl	%ax,%ebx
000013e7	movl	%ebx,0x04(%esp)
000013eb	movl	%esi,(%esp)
000013ee	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000013f3	movl	0x08(%ebp),%eax
000013f6	movl	0x0c(%eax),%ecx
000013f9	movw	$0xffff,0x0a(%ecx,%edi)
00001400	imull	$0x0a,%ebx,%esi
00001403	movl	0x08(%ebp),%ebx
00001406	movl	0x18(%ebx),%edx
00001409	movw	0x02(%edx,%esi),%dx
0000140e	movw	%dx,0x08(%ecx,%edi)
00001413	movl	0x18(%ebx),%edx
00001416	movw	0xe4(%ebp),%ax
0000141a	movw	%ax,0x02(%edx,%esi)
0000141f	movw	%ax,%dx
00001422	movzwl	0x08(%ecx,%edi),%ecx
00001427	incl	0xe0(%ebp)
0000142a	cmpl	$0x0000ffff,%ecx
00001430	jne	0x0000143b
00001432	movl	0x18(%ebx),%ecx
00001435	movw	%dx,(%ecx,%esi)
00001439	jmp	0x00001448
0000143b	movl	0xf0(%ebp),%eax
0000143e	movl	(%eax),%edi
00001440	imull	$0x0c,%ecx,%ecx
00001443	movw	%dx,0x0a(%edi,%ecx)
00001448	movl	0x18(%ebx),%ecx
0000144b	incw	0x04(%ecx,%esi)
00001450	movl	0x34(%ebx),%eax
00001453	movl	%ebx,%edx
00001455	testl	%eax,%eax
00001457	jne	0x0000146f
00001459	movw	0xee(%ebp),%ax
0000145d	cmpw	$0xff,%ax
00001461	movw	%ax,%di
00001464	movl	0xf0(%ebp),%esi
00001467	jne	0x000013a0
0000146d	jmp	0x0000147c
0000146f	movl	0xe8(%ebp),%ecx
00001472	movw	0xe6(%ebp),%di
00001476	movw	%di,(%eax,%ecx,2)
0000147a	jmp	0x00001459
0000147c	movl	(%edx),%eax
0000147e	movl	%edx,(%esp)
00001481	call	*0x08(%eax)
00001484	movl	0xe0(%ebp),%eax
00001487	addl	$0x2c,%esp
0000148a	popl	%esi
0000148b	popl	%edi
0000148c	popl	%ebx
0000148d	popl	%ebp
0000148e	ret
0000148f	nop
CDataManagerBase::CreateHandle(bool):
00001490	pushl	%ebp
00001491	movl	%esp,%ebp
00001493	pushl	%ebx
00001494	pushl	%edi
00001495	pushl	%esi
00001496	subl	$0x1c,%esp
00001499	movl	0x08(%ebp),%ebx
0000149c	movl	(%ebx),%eax
0000149e	movl	%ebx,(%esp)
000014a1	call	(%eax)
000014a3	movl	0x18(%ebx),%ecx
000014a6	movzwl	0x48(%ebx),%eax
000014aa	leal	0x46(%ebx),%esi
000014ad	leal	0x44(%ebx),%edx
000014b0	cmpb	CDataManagerBase::CDataManagerBase(unsigned int),0x0c(%ebp)
000014b4	cmovnel	%esi,%edx
000014b7	movw	(%edx),%dx
000014ba	movw	%dx,0xea(%ebp)
000014be	movzwl	%dx,%edx
000014c1	movl	%edx,0xf0(%ebp)
000014c4	imull	$0x0a,%eax,%edx
000014c7	movzwl	(%ecx,%edx),%esi
000014cb	leal	0x0c(%ebx),%edi
000014ce	cmpl	$0x0000ffff,%esi
000014d4	je	0x00001571
000014da	movl	%edi,0xec(%ebp)
000014dd	movzwl	%si,%ecx
000014e0	movl	%ecx,0xe4(%ebp)
000014e3	movl	%ecx,0x08(%esp)
000014e7	movzwl	%ax,%eax
000014ea	movl	%eax,0x04(%esp)
000014ee	movl	%edi,(%esp)
000014f1	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000014f6	movl	0xe4(%ebp),%eax
000014f9	movl	%eax,0x08(%esp)
000014fd	movl	0xf0(%ebp),%eax
00001500	movl	%eax,0x04(%esp)
00001504	movl	%edi,(%esp)
00001507	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
0000150c	imull	$0x0c,%esi,%ecx
0000150f	movl	0x0c(%ebx),%edx
00001512	movw	$0xffff,0x0a(%edx,%ecx)
00001519	imull	$0x0a,0xf0(%ebp),%eax
0000151d	movl	0x18(%ebx),%edi
00001520	movw	0x02(%edi,%eax),%di
00001525	movw	%di,0x08(%edx,%ecx)
0000152a	movl	0x18(%ebx),%edi
0000152d	movw	%si,0x02(%edi,%eax)
00001532	movzwl	0x08(%edx,%ecx),%ecx
00001537	cmpl	$0x0000ffff,%ecx
0000153d	jne	0x0000154b
0000153f	movl	0x18(%ebx),%ecx
00001542	movw	%si,(%ecx,%eax)
00001546	movl	0xec(%ebp),%edi
00001549	jmp	0x00001558
0000154b	movl	0xec(%ebp),%edi
0000154e	movl	(%edi),%edx
00001550	imull	$0x0c,%ecx,%ecx
00001553	movw	%si,0x0a(%edx,%ecx)
00001558	movl	0x18(%ebx),%ecx
0000155b	incw	0x04(%ecx,%eax)
00001560	movl	0x34(%ebx),%eax
00001563	testl	%eax,%eax
00001565	je	0x00001583
00001567	movw	0xea(%ebp),%cx
0000156b	movw	%cx,(%eax,%esi,2)
0000156f	jmp	0x00001583
00001571	movl	0xf0(%ebp),%eax
00001574	movl	%eax,0x04(%esp)
00001578	movl	%edi,(%esp)
0000157b	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::AddToTail(unsigned short)
00001580	movw	%ax,%si
00001583	cmpb	$0x01,0x0c(%ebp)
00001587	jne	0x00001595
00001589	movl	(%edi),%eax
0000158b	movzwl	%si,%ecx
0000158e	imull	$0x0c,%ecx,%ecx
00001591	incw	(%eax,%ecx)
00001595	movl	(%ebx),%eax
00001597	movl	%ebx,(%esp)
0000159a	call	*0x08(%eax)
0000159d	movzwl	%si,%eax
000015a0	addl	$0x1c,%esp
000015a3	popl	%esi
000015a4	popl	%edi
000015a5	popl	%ebx
000015a6	popl	%ebp
000015a7	ret
000015a8	movl	%eax,%esi
000015aa	movl	(%ebx),%eax
000015ac	movl	0x08(%eax),%eax
000015af	movl	%ebx,(%esp)
000015b2	call	*%eax
000015b4	movl	%esi,(%esp)
000015b7	calll	__Unwind_Resume
000015bc	calll	std::terminate()
000015c1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int):
000015d0	pushl	%ebp
000015d1	movl	%esp,%ebp
000015d3	pushl	%ebx
000015d4	pushl	%edi
000015d5	pushl	%esi
000015d6	subl	$0x0c,%esp
000015d9	movl	0x08(%ebp),%edi
000015dc	movl	(%edi),%eax
000015de	movl	%edi,(%esp)
000015e1	call	(%eax)
000015e3	movzwl	0x0c(%ebp),%esi
000015e7	imull	$0x0c,%esi,%eax
000015ea	movl	0x0c(%edi),%ecx
000015ed	movl	0x10(%ebp),%edx
000015f0	movl	%edx,0x04(%ecx,%eax)
000015f4	movl	0x14(%ebp),%ecx
000015f7	addl	%ecx,0x08(%edi)
000015fa	movl	(%edi),%ecx
000015fc	movl	0x0c(%edi),%edx
000015ff	movzwl	0x02(%edx,%eax),%ebx
00001604	movl	%edi,(%esp)
00001607	call	*0x08(%ecx)
0000160a	shll	$0x10,%ebx
0000160d	incl	%esi
0000160e	movzwl	%si,%eax
00001611	orl	%ebx,%eax
00001613	addl	$0x0c,%esp
00001616	popl	%esi
00001617	popl	%edi
00001618	popl	%ebx
00001619	popl	%ebp
0000161a	ret
0000161b	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::ToHandle(unsigned short):
00001620	movzwl	0x08(%esp),%eax
00001625	imull	$0x0c,%eax,%ecx
00001628	movl	0x04(%esp),%edx
0000162c	movl	0x0c(%edx),%edx
0000162f	movzwl	0x02(%edx,%ecx),%ecx
00001634	shll	$0x10,%ecx
00001637	incl	%eax
00001638	movzwl	%ax,%eax
0000163b	orl	%ecx,%eax
0000163d	ret
0000163e	nop
CDataManagerBase::TargetSize():
00001640	movl	0x04(%esp),%eax
00001644	movl	0x04(%eax),%eax
00001647	ret
00001648	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::AvailableSize():
00001650	movl	0x04(%esp),%ecx
00001654	movl	0x04(%ecx),%eax
00001657	subl	0x08(%ecx),%eax
0000165a	ret
0000165b	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::UsedSize():
00001660	movl	0x04(%esp),%eax
00001664	movl	0x08(%eax),%eax
00001667	ret
00001668	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetLRUHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&):
00001670	pushl	%ebp
00001671	movl	%esp,%ebp
00001673	pushl	%ebx
00001674	pushl	%edi
00001675	pushl	%esi
00001676	subl	$0x1c,%esp
00001679	movl	0x08(%ebp),%ecx
0000167c	movl	0x18(%ecx),%eax
0000167f	movzwl	0x44(%ecx),%ecx
00001683	imull	$0x0a,%ecx,%ecx
00001686	movw	0x02(%eax,%ecx),%bx
0000168b	cmpw	$0xff,%bx
0000168f	je	0x00001739
00001695	movl	0x0c(%ebp),%edx
00001698	movl	0x08(%ebp),%eax
0000169b	movl	0x0c(%eax),%eax
0000169e	nop
000016a0	movzwl	%bx,%ecx
000016a3	imull	$0x0c,%ecx,%ecx
000016a6	movl	%ecx,0xf0(%ebp)
000016a9	movzwl	0x02(%eax,%ecx),%eax
000016ae	movl	%eax,0xec(%ebp)
000016b1	movl	0x04(%edx),%eax
000016b4	movl	0x0c(%edx),%edi
000016b7	leal	0x01(%edi),%esi
000016ba	cmpl	%eax,%esi
000016bc	movl	%edi,%ecx
000016be	jle	0x000016dd
000016c0	movl	%esi,%ecx
000016c2	subl	%eax,%ecx
000016c4	movl	%ecx,0x04(%esp)
000016c8	movl	%edx,(%esp)
000016cb	movl	%esi,0xe8(%ebp)
000016ce	movl	%edx,%esi
000016d0	calll	CUtlMemory<memhandle_t__*, int>::Grow(int)
000016d5	movl	%esi,%edx
000016d7	movl	0xe8(%ebp),%esi
000016da	movl	0x0c(%edx),%ecx
000016dd	incl	%ecx
000016de	movl	%ecx,0x0c(%edx)
000016e1	movl	(%edx),%eax
000016e3	movl	%eax,0x10(%edx)
000016e6	subl	%edi,%ecx
000016e8	decl	%ecx
000016e9	testl	%ecx,%ecx
000016eb	jle	0x0000170c
000016ed	shll	$0x02,%ecx
000016f0	movl	%ecx,0x08(%esp)
000016f4	leal	(%eax,%edi,4),%ecx
000016f7	movl	%ecx,0x04(%esp)
000016fb	leal	(%eax,%esi,4),%eax
000016fe	movl	%eax,(%esp)
00001701	movl	%edx,%esi
00001703	calll	_memmove
00001708	movl	%esi,%edx
0000170a	movl	(%edx),%eax
0000170c	shll	$0x02,%edi
0000170f	addl	%eax,%edi
00001711	je	0x00001721
00001713	incl	%ebx
00001714	movzwl	%bx,%eax
00001717	movl	0xec(%ebp),%ecx
0000171a	shll	$0x10,%ecx
0000171d	orl	%eax,%ecx
0000171f	movl	%ecx,(%edi)
00001721	movl	0x08(%ebp),%eax
00001724	movl	0x0c(%eax),%eax
00001727	movl	0xf0(%ebp),%ecx
0000172a	movw	0x08(%eax,%ecx),%bx
0000172f	cmpw	$0xff,%bx
00001733	jne	0x000016a0
00001739	addl	$0x1c,%esp
0000173c	popl	%esi
0000173d	popl	%edi
0000173e	popl	%ebx
0000173f	popl	%ebp
00001740	ret
00001741	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetLockHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&):
00001750	pushl	%ebp
00001751	movl	%esp,%ebp
00001753	pushl	%ebx
00001754	pushl	%edi
00001755	pushl	%esi
00001756	subl	$0x1c,%esp
00001759	movl	0x08(%ebp),%ecx
0000175c	movl	0x18(%ecx),%eax
0000175f	movzwl	0x46(%ecx),%ecx
00001763	imull	$0x0a,%ecx,%ecx
00001766	movw	(%eax,%ecx),%bx
0000176a	cmpw	$0xff,%bx
0000176e	je	0x00001819
00001774	movl	0x0c(%ebp),%edx
00001777	movl	0x08(%ebp),%eax
0000177a	movl	0x0c(%eax),%eax
0000177d	nopl	(%eax)
00001780	movzwl	%bx,%ecx
00001783	imull	$0x0c,%ecx,%ecx
00001786	movl	%ecx,0xf0(%ebp)
00001789	movzwl	0x02(%eax,%ecx),%eax
0000178e	movl	%eax,0xec(%ebp)
00001791	movl	0x04(%edx),%eax
00001794	movl	0x0c(%edx),%edi
00001797	leal	0x01(%edi),%esi
0000179a	cmpl	%eax,%esi
0000179c	movl	%edi,%ecx
0000179e	jle	0x000017bd
000017a0	movl	%esi,%ecx
000017a2	subl	%eax,%ecx
000017a4	movl	%ecx,0x04(%esp)
000017a8	movl	%edx,(%esp)
000017ab	movl	%esi,0xe8(%ebp)
000017ae	movl	%edx,%esi
000017b0	calll	CUtlMemory<memhandle_t__*, int>::Grow(int)
000017b5	movl	%esi,%edx
000017b7	movl	0xe8(%ebp),%esi
000017ba	movl	0x0c(%edx),%ecx
000017bd	incl	%ecx
000017be	movl	%ecx,0x0c(%edx)
000017c1	movl	(%edx),%eax
000017c3	movl	%eax,0x10(%edx)
000017c6	subl	%edi,%ecx
000017c8	decl	%ecx
000017c9	testl	%ecx,%ecx
000017cb	jle	0x000017ec
000017cd	shll	$0x02,%ecx
000017d0	movl	%ecx,0x08(%esp)
000017d4	leal	(%eax,%edi,4),%ecx
000017d7	movl	%ecx,0x04(%esp)
000017db	leal	(%eax,%esi,4),%eax
000017de	movl	%eax,(%esp)
000017e1	movl	%edx,%esi
000017e3	calll	_memmove
000017e8	movl	%esi,%edx
000017ea	movl	(%edx),%eax
000017ec	shll	$0x02,%edi
000017ef	addl	%eax,%edi
000017f1	je	0x00001801
000017f3	incl	%ebx
000017f4	movzwl	%bx,%eax
000017f7	movl	0xec(%ebp),%ecx
000017fa	shll	$0x10,%ecx
000017fd	orl	%eax,%ecx
000017ff	movl	%ecx,(%edi)
00001801	movl	0x08(%ebp),%eax
00001804	movl	0x0c(%eax),%eax
00001807	movl	0xf0(%ebp),%ecx
0000180a	movw	0x0a(%eax,%ecx),%bx
0000180f	cmpw	$0xff,%bx
00001813	jne	0x00001780
00001819	addl	$0x1c,%esp
0000181c	popl	%esi
0000181d	popl	%edi
0000181e	popl	%ebx
0000181f	popl	%ebp
00001820	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(diff.o):
(__TEXT,__text) section
Fail(char const*):
00000000	ret
00000001	nopl	%cs:Fail(char const*)(%eax,%eax)
ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000010	pushl	%ebp
00000011	movl	%esp,%ebp
00000013	pushl	%ebx
00000014	pushl	%edi
00000015	pushl	%esi
00000016	subl	$0x1c,%esp
00000019	movl	0x0c(%ebp),%esi
0000001c	movl	0x14(%ebp),%eax
0000001f	addl	%esi,%eax
00000021	movl	%eax,0xf0(%ebp)
00000024	movl	0x1c(%ebp),%ebx
00000027	movl	0x08(%ebp),%eax
0000002a	movl	%eax,0xec(%ebp)
0000002d	jmp	0x00000047
0000002f	nop
00000030	movl	%edi,0x08(%esp)
00000034	movl	%eax,0x04(%esp)
00000038	movl	%ebx,(%esp)
0000003b	calll	_memcpy
00000040	leal	0x01(%edi),%eax
00000043	addl	%edi,%ebx
00000045	addl	%eax,%esi
00000047	cmpl	0xf0(%ebp),%esi
0000004a	jae	0x00000158
00000050	movzbl	(%esi),%ecx
00000053	testl	%ecx,%ecx
00000055	jne	0x000000a4
00000057	movzbl	0x03(%esi),%edx
0000005b	movzbl	0x04(%esi),%ecx
0000005f	movzbl	0x01(%esi),%edi
00000063	movzbl	0x02(%esi),%eax
00000067	movl	%ebx,(%esp)
0000006a	shll	$0x08,%eax
0000006d	orl	%edi,%eax
0000006f	movl	%eax,0x08(%esp)
00000073	shll	$0x08,%ecx
00000076	orl	%edx,%ecx
00000078	leal	0xffff0000(%ecx),%edx
0000007e	cmpl	$0x00007fff,%ecx
00000084	cmovbel	%ecx,%edx
00000087	movl	0xec(%ebp),%edi
0000008a	leal	(%edi,%edx),%ecx
0000008d	movl	%ecx,0x04(%esp)
00000091	addl	%eax,%edx
00000093	addl	%edx,%edi
00000095	movl	%edi,0xec(%ebp)
00000098	addl	%eax,%ebx
0000009a	addl	$0x05,%esi
0000009d	calll	_memcpy
000000a2	jmp	0x00000047
000000a4	leal	0x01(%esi),%eax
000000a7	movl	%ecx,%edi
000000a9	andl	$0x7f,%edi
000000ac	testb	$0x80,%cl
000000af	je	0x00000030
000000b5	movzbl	(%eax),%eax
000000b8	testl	%edi,%edi
000000ba	jne	0x00000127
000000bc	movzbl	0x02(%esi),%edx
000000c0	movzbl	0x03(%esi),%ecx
000000c4	shll	$0x08,%ecx
000000c7	orl	%edx,%ecx
000000c9	testb	%al,%al
000000cb	jne	0x000000f1
000000cd	movzbl	0x04(%esi),%edi
000000d1	shll	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%edi
000000d4	orl	%ecx,%edi
000000d6	movl	%edi,0x08(%esp)
000000da	leal	0x05(%esi),%eax
000000dd	movl	%eax,0x04(%esp)
000000e1	movl	%ebx,(%esp)
000000e4	calll	_memcpy
000000e9	leal	0x05(%edi),%eax
000000ec	jmp	0x00000043
000000f1	movl	%ebx,(%esp)
000000f4	movl	%eax,0x08(%esp)
000000f8	leal	0xffff0000(%ecx),%edx
000000fe	cmpl	$0x00007fff,%ecx
00000104	cmovbel	%ecx,%edx
00000107	movl	0xec(%ebp),%edi
0000010a	leal	(%edi,%edx),%ecx
0000010d	movl	%ecx,0x04(%esp)
00000111	addl	%eax,%edx
00000113	addl	%edx,%edi
00000115	movl	%edi,0xec(%ebp)
00000118	addl	%eax,%ebx
0000011a	addl	$0x04,%esi
0000011d	calll	_memcpy
00000122	jmp	0x00000047
00000127	movl	%ebx,(%esp)
0000012a	movl	%edi,0x08(%esp)
0000012e	movl	%eax,%ecx
00000130	orl	$0x80,%ecx
00000133	testb	%al,%al
00000135	cmovnsl	%eax,%ecx
00000138	movl	0xec(%ebp),%edx
0000013b	leal	(%edx,%ecx),%eax
0000013e	movl	%eax,0x04(%esp)
00000142	addl	%edi,%ecx
00000144	addl	%ecx,%edx
00000146	movl	%edx,0xec(%ebp)
00000149	addl	%edi,%ebx
0000014b	addl	$0x02,%esi
0000014e	calll	_memcpy
00000153	jmp	0x00000047
00000158	subl	0x1c(%ebp),%ebx
0000015b	movl	0x18(%ebp),%eax
0000015e	movl	%ebx,(%eax)
00000160	addl	$0x1c,%esp
00000163	popl	%esi
00000164	popl	%edi
00000165	popl	%ebx
00000166	popl	%ebp
00000167	ret
00000168	nopl	Fail(char const*)(%eax,%eax)
FindDiffsForLargeFiles(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int, int):
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x4c,%esp
00000179	movl	$0xffffffff,%esi
0000017e	movl	0x24(%ebp),%edi
00000181	movl	%edi,0xcc(%ebp)
00000184	movl	$0x00000004,%ecx
00000189	movl	%edi,%eax
0000018b	mull	%ecx
0000018d	cmovol	%esi,%eax
00000190	movl	%eax,(%esp)
00000193	calll	operator new[](unsigned long)
00000198	movl	%eax,0xd0(%ebp)
0000019b	leal	Fail(char const*)(,%edi,4),%ecx
000001a2	movl	%ecx,0x08(%esp)
000001a6	movl	%eax,(%esp)
000001a9	movl	Fail(char const*),0x04(%esp)
000001b1	movl	0x14(%ebp),%edi
000001b4	movl	%edi,0xe0(%ebp)
000001b7	cmpl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%edi
000001ba	setne	%bl
000001bd	calll	_memset
000001c2	movl	Fail(char const*),0xbc(%ebp)
000001c9	testl	%edi,%edi
000001cb	movl	$0x00000001,0xc4(%ebp)
000001d2	je	0x000002b0
000001d8	movl	$0x00000008,%ecx
000001dd	movl	0x14(%ebp),%edi
000001e0	movl	%edi,%eax
000001e2	mull	%ecx
000001e4	cmovol	%esi,%eax
000001e7	movl	%eax,(%esp)
000001ea	calll	operator new[](unsigned long)
000001ef	cmpl	Fail(char const*),0x0c(%ebp)
000001f3	jne	0x00000207
000001f5	movl	%edi,0xe0(%ebp)
000001f8	movl	%eax,0xbc(%ebp)
000001fb	movl	$0x00000001,0xc4(%ebp)
00000202	jmp	0x000002b0
00000207	movzbl	%bl,%ecx
0000020a	movl	%ecx,0xc4(%ebp)
0000020d	leal	0xf8(%edi),%ecx
00000210	testl	%ecx,%ecx
00000212	movl	%edi,%ecx
00000214	jg	0x00000221
00000216	movl	%ecx,0xe0(%ebp)
00000219	movl	%eax,0xbc(%ebp)
0000021c	jmp	0x000002b0
00000221	movl	0x0c(%ebp),%edx
00000224	leal	0xf8(%edx,%ecx),%esi
00000228	movl	%esi,0xd8(%ebp)
0000022b	movl	%ecx,0xe0(%ebp)
0000022e	movl	0x24(%ebp),%ecx
00000231	leal	0xff(%ecx),%ecx
00000234	movl	%ecx,0xd4(%ebp)
00000237	movl	%eax,%ebx
00000239	movl	%eax,0xbc(%ebp)
0000023c	movl	0xd0(%ebp),%edi
0000023f	nop
00000240	movzbl	0x07(%edx),%eax
00000244	movl	%eax,0xf0(%ebp)
00000247	movzbl	0x06(%edx),%eax
0000024b	movl	%eax,0xec(%ebp)
0000024e	movzbl	0x05(%edx),%eax
00000252	movl	%eax,0xe8(%ebp)
00000255	movzbl	0x04(%edx),%eax
00000259	movl	%eax,0xe4(%ebp)
0000025c	movzbl	0x03(%edx),%eax
00000260	movl	%eax,0xdc(%ebp)
00000263	movzbl	0x02(%edx),%ecx
00000267	movzbl	0x01(%edx),%esi
0000026b	movzbl	(%edx),%eax
0000026e	movl	%edx,0x04(%ebx)
00000271	shll	$0x04,%eax
00000274	addl	%esi,%eax
00000276	shll	$0x04,%eax
00000279	addl	%ecx,%eax
0000027b	shll	$0x04,%eax
0000027e	addl	0xdc(%ebp),%eax
00000281	shll	$0x04,%eax
00000284	addl	0xe4(%ebp),%eax
00000287	shll	$0x04,%eax
0000028a	addl	0xe8(%ebp),%eax
0000028d	shll	$0x04,%eax
00000290	addl	0xec(%ebp),%eax
00000293	shll	$0x04,%eax
00000296	addl	0xf0(%ebp),%eax
00000299	andl	0xd4(%ebp),%eax
0000029c	movl	(%edi,%eax,4),%ecx
0000029f	movl	%ecx,(%ebx)
000002a1	movl	%ebx,(%edi,%eax,4)
000002a4	addl	$0x08,%ebx
000002a7	incl	%edx
000002a8	cmpl	0xd8(%ebp),%edx
000002ab	jb	0x00000240
000002ad	movl	%edi,0xd0(%ebp)
000002b0	movl	0x1c(%ebp),%ecx
000002b3	movl	0x08(%ebp),%esi
000002b6	movl	%esi,0xf0(%ebp)
000002b9	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
000002bc	leal	0xf8(%esi,%eax),%edx
000002c0	movl	%edx,0xc8(%ebp)
000002c3	movl	0x0c(%ebp),%edx
000002c6	addl	%edx,0xe0(%ebp)
000002c9	addl	%esi,%eax
000002cb	movl	%eax,0xdc(%ebp)
000002ce	decl	0xcc(%ebp)
000002d1	movl	%ecx,0xd4(%ebp)
000002d4	jmp	0x000002fb
000002d6	nopw	%cs:Fail(char const*)(%eax,%eax)
000002e0	movl	0xd4(%ebp),%ecx
000002e3	movb	$0x80,(%ecx)
000002e6	movb	%dl,0x01(%ecx)
000002e9	movb	%al,0x02(%ecx)
000002ec	movb	%ah,0x03(%ecx)
000002ef	addl	$0x04,%ecx
000002f2	movl	%ecx,0xd4(%ebp)
000002f5	addl	%edx,0xf0(%ebp)
000002f8	addl	0x04(%edi),%edx
000002fb	movl	%edx,%eax
000002fd	movl	%eax,0xc0(%ebp)
00000300	movl	$0x00007fff,%ecx
00000305	subl	%eax,%ecx
00000307	movl	%ecx,0xe4(%ebp)
0000030a	xorl	%edx,%edx
0000030c	movl	0xf0(%ebp),%eax
0000030f	jmp	0x0000032a
00000311	nopl	%cs:Fail(char const*)(%eax,%eax)
00000320	movl	0xec(%ebp),%edi
00000323	jmp	0x0000040a
00000328	incl	%eax
00000329	incl	%edx
0000032a	cmpl	0xdc(%ebp),%eax
0000032d	jae	0x000004db
00000333	cmpl	0xc8(%ebp),%eax
00000336	jae	0x00000328
00000338	movl	%edx,0xd8(%ebp)
0000033b	movl	0xdc(%ebp),%ecx
0000033e	subl	%eax,%ecx
00000340	movl	%ecx,0xe8(%ebp)
00000343	movzbl	0x01(%eax),%edx
00000347	movl	%eax,%ecx
00000349	movl	%ecx,0xf0(%ebp)
0000034c	movzbl	(%ecx),%eax
0000034f	shll	$0x04,%eax
00000352	addl	%edx,%eax
00000354	shll	$0x04,%eax
00000357	movzbl	0x02(%ecx),%esi
0000035b	addl	%eax,%esi
0000035d	shll	$0x04,%esi
00000360	movzbl	0x03(%ecx),%edx
00000364	addl	%esi,%edx
00000366	shll	$0x04,%edx
00000369	movzbl	0x04(%ecx),%eax
0000036d	addl	%edx,%eax
0000036f	shll	$0x04,%eax
00000372	movzbl	0x05(%ecx),%edx
00000376	addl	%eax,%edx
00000378	shll	$0x04,%edx
0000037b	movzbl	0x06(%ecx),%eax
0000037f	addl	%edx,%eax
00000381	shll	$0x04,%eax
00000384	movzbl	0x07(%ecx),%edx
00000388	addl	%eax,%edx
0000038a	andl	0xcc(%ebp),%edx
0000038d	movl	0xd0(%ebp),%eax
00000390	leal	(%eax,%edx,4),%edx
00000393	xorl	%ebx,%ebx
00000395	movl	Fail(char const*),0xec(%ebp)
0000039c	nopl	Fail(char const*)(%eax)
000003a0	movl	(%edx),%edx
000003a2	testl	%edx,%edx
000003a4	je	0x00000320
000003aa	movl	0x04(%edx),%eax
000003ad	movl	0xe4(%ebp),%ecx
000003b0	leal	(%ecx,%eax),%ecx
000003b3	cmpl	$0x0000fffd,%ecx
000003b9	ja	0x000003a0
000003bb	movl	0xe0(%ebp),%esi
000003be	subl	%eax,%esi
000003c0	cmpl	$0x0000ffff,%esi
000003c6	movl	$0x0000ffff,%ecx
000003cb	cmovgl	%ecx,%esi
000003ce	movl	0xe8(%ebp),%ecx
000003d1	cmpl	%ecx,%esi
000003d3	cmovgel	%ecx,%esi
000003d6	xorl	%edi,%edi
000003d8	jmp	0x000003e1
000003da	nopw	Fail(char const*)(%eax,%eax)
000003e0	incl	%edi
000003e1	cmpl	%esi,%edi
000003e3	jge	0x000003f0
000003e5	movl	0xf0(%ebp),%ecx
000003e8	movb	(%ecx,%edi),%cl
000003eb	cmpb	(%eax,%edi),%cl
000003ee	je	0x000003e0
000003f0	cmpl	$0x09,%edi
000003f3	jl	0x000003a0
000003f5	cmpl	%ebx,%edi
000003f7	jle	0x000003a0
000003f9	cmpl	$0x00001000,%edi
000003ff	movl	%edi,%ebx
00000401	movl	%edx,0xec(%ebp)
00000404	jle	0x000003a0
00000406	movl	%edi,%ebx
00000408	movl	%edx,%edi
0000040a	testl	%edi,%edi
0000040c	movl	0xd8(%ebp),%edx
0000040f	movl	0xf0(%ebp),%eax
00000412	je	0x00000328
00000418	testl	%edx,%edx
0000041a	jne	0x00000421
0000041c	movl	0xc4(%ebp),%edx
0000041f	jmp	0x00000475
00000421	movl	%edi,0xec(%ebp)
00000424	subl	%edx,%eax
00000426	cmpl	$0x7f,%edx
00000429	jg	0x0000043b
0000042b	movl	0xd4(%ebp),%esi
0000042e	movb	%dl,(%esi)
00000430	movl	%edx,0x08(%esp)
00000434	movl	%eax,0x04(%esp)
00000438	incl	%esi
00000439	jmp	0x0000045e
0000043b	movl	0xd4(%ebp),%esi
0000043e	movb	$0x80,(%esi)
00000441	movb	Fail(char const*),0x01(%esi)
00000445	movb	%dl,0x02(%esi)
00000448	movb	%dh,0x03(%esi)
0000044b	movl	%edx,%ecx
0000044d	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
00000450	movb	%cl,0x04(%esi)
00000453	movl	%edx,0x08(%esp)
00000457	movl	%eax,0x04(%esp)
0000045b	addl	$0x05,%esi
0000045e	movl	%esi,(%esp)
00000461	movl	%edx,%edi
00000463	calll	_memcpy
00000468	addl	%edi,%esi
0000046a	movl	%esi,0xd4(%ebp)
0000046d	movl	$0x00000001,%edx
00000472	movl	0xec(%ebp),%edi
00000475	movl	0x04(%edi),%eax
00000478	movl	0xc0(%ebp),%esi
0000047b	cmpl	%esi,%eax
0000047d	movl	$0x00000001,%ecx
00000482	cmovnel	%ecx,%edx
00000485	movl	%edx,0xc4(%ebp)
00000488	subl	%esi,%eax
0000048a	movl	%ebx,%edx
0000048c	cmpl	$0x00000080,%edx
00000492	jl	0x000004ae
00000494	movl	0xd4(%ebp),%ecx
00000497	movb	Fail(char const*),(%ecx)
0000049a	movb	%dl,0x01(%ecx)
0000049d	movb	%dh,0x02(%ecx)
000004a0	movb	%al,0x03(%ecx)
000004a3	movb	%ah,0x04(%ecx)
000004a6	addl	$0x05,%ecx
000004a9	jmp	0x000002f2
000004ae	movl	%eax,%ecx
000004b0	subl	$0x80,%ecx
000004b3	cmpl	$0x000000ff,%ecx
000004b9	ja	0x000002e0
000004bf	movl	%edx,%ecx
000004c1	subl	$0x80,%ecx
000004c4	movl	%edx,%esi
000004c6	movl	0xd4(%ebp),%edx
000004c9	movb	%cl,(%edx)
000004cb	movb	%al,0x01(%edx)
000004ce	addl	$0x02,%edx
000004d1	movl	%edx,0xd4(%ebp)
000004d4	movl	%esi,%edx
000004d6	jmp	0x000002f5
000004db	testl	%edx,%edx
000004dd	movl	0xbc(%ebp),%esi
000004e0	jne	0x000004ed
000004e2	movl	0xd0(%ebp),%eax
000004e5	movl	0xd4(%ebp),%edi
000004e8	movl	0xc4(%ebp),%ebx
000004eb	jmp	0x00000541
000004ed	subl	%edx,%eax
000004ef	cmpl	$0x7f,%edx
000004f2	movl	%eax,%edi
000004f4	jg	0x00000508
000004f6	movl	0xd4(%ebp),%eax
000004f9	movb	%dl,(%eax)
000004fb	movl	%edx,0x08(%esp)
000004ff	movl	%edi,0x04(%esp)
00000503	movl	%eax,%edi
00000505	incl	%edi
00000506	jmp	0x0000052d
00000508	movl	0xd4(%ebp),%ecx
0000050b	movb	$0x80,(%ecx)
0000050e	movb	Fail(char const*),0x01(%ecx)
00000512	movb	%dl,0x02(%ecx)
00000515	movb	%dh,0x03(%ecx)
00000518	movl	%edx,%eax
0000051a	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
0000051d	movb	%al,0x04(%ecx)
00000520	movl	%edx,0x08(%esp)
00000524	movl	%edi,0x04(%esp)
00000528	movl	%ecx,%edi
0000052a	addl	$0x05,%edi
0000052d	movl	%edi,(%esp)
00000530	movl	%edx,%ebx
00000532	calll	_memcpy
00000537	addl	%ebx,%edi
00000539	movl	$0x00000001,%ebx
0000053e	movl	0xd0(%ebp),%eax
00000541	testl	%eax,%eax
00000543	je	0x0000054d
00000545	movl	%eax,(%esp)
00000548	calll	operator delete[](void*)
0000054d	testl	%esi,%esi
0000054f	je	0x00000559
00000551	movl	%esi,(%esp)
00000554	calll	operator delete[](void*)
00000559	subl	0x1c(%ebp),%edi
0000055c	movl	0x18(%ebp),%eax
0000055f	movl	%edi,(%eax)
00000561	movl	%ebx,%eax
00000563	addl	$0x4c,%esp
00000566	popl	%esi
00000567	popl	%edi
00000568	popl	%ebx
00000569	popl	%ebp
0000056a	ret
0000056b	nopl	Fail(char const*)(%eax,%eax)
FindDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000570	pushl	%ebp
00000571	movl	%esp,%ebp
00000573	pushl	%ebx
00000574	pushl	%edi
00000575	pushl	%esi
00000576	subl	$0x0004004c,%esp
0000057c	calll	0x00000581
00000581	popl	%eax
00000582	movl	0x41ae-0x581(%eax),%eax
00000588	movl	%eax,0xfffbffbc(%ebp)
0000058e	movl	(%eax),%eax
00000590	movl	%eax,0xf0(%ebp)
00000593	leal	0xfffbfff0(%ebp),%eax
00000599	movl	%eax,(%esp)
0000059c	movl	$0x00040000,0x08(%esp)
000005a4	movl	Fail(char const*),0x04(%esp)
000005ac	movl	0x14(%ebp),%edi
000005af	cmpl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%edi
000005b2	setne	%bl
000005b5	calll	_memset
000005ba	movl	Fail(char const*),0xfffbffc0(%ebp)
000005c4	testl	%edi,%edi
000005c6	movl	$0x00000001,0xfffbffc4(%ebp)
000005d0	je	0x00000655
000005d6	movl	$0xffffffff,%ecx
000005db	movl	$0x00000008,%edx
000005e0	movl	%edi,%esi
000005e2	movl	%esi,%eax
000005e4	mull	%edx
000005e6	cmovol	%ecx,%eax
000005e9	movl	%eax,(%esp)
000005ec	calll	operator new[](unsigned long)
000005f1	movl	%eax,0xfffbffc0(%ebp)
000005f7	cmpl	Fail(char const*),0x0c(%ebp)
000005fb	jne	0x0000060b
000005fd	movl	%esi,%edi
000005ff	movl	$0x00000001,0xfffbffc4(%ebp)
00000609	jmp	0x00000655
0000060b	movzbl	%bl,%eax
0000060e	movl	%eax,0xfffbffc4(%ebp)
00000614	leal	0xf8(%esi),%eax
00000617	testl	%eax,%eax
00000619	movl	%esi,%edi
0000061b	jle	0x00000655
0000061d	movl	0x0c(%ebp),%edx
00000620	leal	0xf8(%edx,%edi),%eax
00000624	movl	0xfffbffc0(%ebp),%ecx
0000062a	nopw	Fail(char const*)(%eax,%eax)
00000630	movw	0x04(%edx),%si
00000634	addw	(%edx),%si
00000637	movl	%edx,0x04(%ecx)
0000063a	movzwl	%si,%esi
0000063d	movl	0xfffbfff0(%ebp,%esi,4),%ebx
00000644	movl	%ebx,(%ecx)
00000646	movl	%ecx,0xfffbfff0(%ebp,%esi,4)
0000064d	addl	$0x08,%ecx
00000650	incl	%edx
00000651	cmpl	%eax,%edx
00000653	jb	0x00000630
00000655	movl	0x1c(%ebp),%edx
00000658	movl	0x08(%ebp),%ebx
0000065b	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
0000065e	leal	0xf8(%ebx,%eax),%ecx
00000662	movl	%ecx,0xfffbffcc(%ebp)
00000668	movl	%edi,%ecx
0000066a	movl	0x0c(%ebp),%edi
0000066d	addl	%edi,%ecx
0000066f	movl	%ecx,0xfffbffdc(%ebp)
00000675	addl	%ebx,%eax
00000677	movl	%eax,0xfffbffd4(%ebp)
0000067d	movl	%edx,%esi
0000067f	movl	%edi,%edx
00000681	jmp	0x000006aa
00000683	nopl	%cs:Fail(char const*)(%eax,%eax)
00000690	movb	$0x80,(%esi)
00000693	movb	%dl,0x01(%esi)
00000696	movb	%al,0x02(%esi)
00000699	movb	%ah,0x03(%esi)
0000069c	addl	$0x04,%esi
0000069f	movl	0xfffbffe8(%ebp),%eax
000006a5	addl	%edx,%ebx
000006a7	addl	0x04(%eax),%edx
000006aa	movl	%esi,0xfffbffd0(%ebp)
000006b0	movl	%edx,0xfffbffc8(%ebp)
000006b6	movl	$0x00007fff,%eax
000006bb	subl	%edx,%eax
000006bd	movl	%eax,0xfffbffe0(%ebp)
000006c3	xorl	%edx,%edx
000006c5	jmp	0x000006d8
000006c7	nopw	Fail(char const*)(%eax,%eax)
000006d0	incl	%edx
000006d1	incl	%ebx
000006d2	movl	0xfffbffd0(%ebp),%esi
000006d8	cmpl	0xfffbffd4(%ebp),%ebx
000006de	jae	0x0000087c
000006e4	cmpl	0xfffbffcc(%ebp),%ebx
000006ea	jae	0x000006d0
000006ec	movw	0x04(%ebx),%ax
000006f0	addw	(%ebx),%ax
000006f3	movzwl	%ax,%eax
000006f6	movl	0xfffbfff0(%ebp,%eax,4),%ecx
000006fd	testl	%ecx,%ecx
000006ff	je	0x000006d0
00000701	movl	%edx,0xfffbffd8(%ebp)
00000707	movl	0xfffbffd4(%ebp),%eax
0000070d	subl	%ebx,%eax
0000070f	movl	%eax,0xfffbffe4(%ebp)
00000715	movl	%ebx,%esi
00000717	movl	Fail(char const*),0xfffbffe8(%ebp)
00000721	xorl	%edx,%edx
00000723	nopl	%cs:Fail(char const*)(%eax,%eax)
00000730	movl	0x04(%ecx),%edi
00000733	movl	0xfffbffe0(%ebp),%eax
00000739	leal	(%eax,%edi),%eax
0000073c	cmpl	$0x0000fffd,%eax
00000741	ja	0x0000079c
00000743	movl	%edx,0xfffbffec(%ebp)
00000749	movl	0xfffbffdc(%ebp),%eax
0000074f	subl	%edi,%eax
00000751	cmpl	$0x0000ffff,%eax
00000756	movl	$0x0000ffff,%edx
0000075b	cmovgl	%edx,%eax
0000075e	movl	0xfffbffe4(%ebp),%edx
00000764	cmpl	%edx,%eax
00000766	cmovgel	%edx,%eax
00000769	xorl	%ebx,%ebx
0000076b	jmp	0x00000771
0000076d	nopl	(%eax)
00000770	incl	%ebx
00000771	cmpl	%eax,%ebx
00000773	jge	0x0000077d
00000775	movb	(%esi,%ebx),%dl
00000778	cmpb	(%edi,%ebx),%dl
0000077b	je	0x00000770
0000077d	cmpl	$0x09,%ebx
00000780	jge	0x0000078a
00000782	movl	0xfffbffec(%ebp),%edx
00000788	jmp	0x0000079c
0000078a	movl	0xfffbffec(%ebp),%edx
00000790	cmpl	%edx,%ebx
00000792	jle	0x0000079c
00000794	movl	%ebx,%edx
00000796	movl	%ecx,0xfffbffe8(%ebp)
0000079c	movl	(%ecx),%ecx
0000079e	testl	%ecx,%ecx
000007a0	jne	0x00000730
000007a2	movl	%edx,%edi
000007a4	movl	0xfffbffe8(%ebp),%eax
000007aa	testl	%eax,%eax
000007ac	movl	%esi,%ebx
000007ae	movl	0xfffbffd8(%ebp),%edx
000007b4	je	0x000006d0
000007ba	testl	%edx,%edx
000007bc	movl	0xfffbffd0(%ebp),%esi
000007c2	jne	0x000007cc
000007c4	movl	0xfffbffc4(%ebp),%edx
000007ca	jmp	0x0000081b
000007cc	movl	%ebx,%eax
000007ce	subl	%edx,%eax
000007d0	cmpl	$0x7f,%edx
000007d3	jg	0x000007e2
000007d5	movb	%dl,(%esi)
000007d7	movl	%edx,0x08(%esp)
000007db	movl	%eax,0x04(%esp)
000007df	incl	%esi
000007e0	jmp	0x00000802
000007e2	movb	$0x80,(%esi)
000007e5	movb	Fail(char const*),0x01(%esi)
000007e9	movb	%dl,0x02(%esi)
000007ec	movb	%dh,0x03(%esi)
000007ef	movl	%edx,%ecx
000007f1	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
000007f4	movb	%cl,0x04(%esi)
000007f7	movl	%edx,0x08(%esp)
000007fb	movl	%eax,0x04(%esp)
000007ff	addl	$0x05,%esi
00000802	movl	%esi,(%esp)
00000805	calll	_memcpy
0000080a	addl	0xfffbffd8(%ebp),%esi
00000810	movl	$0x00000001,%edx
00000815	movl	0xfffbffe8(%ebp),%eax
0000081b	movl	0x04(%eax),%eax
0000081e	cmpl	0xfffbffc8(%ebp),%eax
00000824	movl	$0x00000001,%ecx
00000829	cmovnel	%ecx,%edx
0000082c	movl	%edx,0xfffbffc4(%ebp)
00000832	subl	0xfffbffc8(%ebp),%eax
00000838	movl	%edi,%edx
0000083a	cmpl	$0x00000080,%edx
00000840	jl	0x00000859
00000842	movb	Fail(char const*),(%esi)
00000845	movb	%dl,0x01(%esi)
00000848	movb	%dh,0x02(%esi)
0000084b	movb	%al,0x03(%esi)
0000084e	movb	%ah,0x04(%esi)
00000851	addl	$0x05,%esi
00000854	jmp	0x0000069f
00000859	movl	%eax,%ecx
0000085b	subl	$0x80,%ecx
0000085e	cmpl	$0x000000ff,%ecx
00000864	ja	0x00000690
0000086a	movl	%edx,%ecx
0000086c	subl	$0x80,%ecx
0000086f	movb	%cl,(%esi)
00000871	movb	%al,0x01(%esi)
00000874	addl	$0x02,%esi
00000877	jmp	0x0000069f
0000087c	testl	%edx,%edx
0000087e	movl	0xfffbffc0(%ebp),%edi
00000884	jne	0x0000088e
00000886	movl	0xfffbffc4(%ebp),%ebx
0000088c	jmp	0x000008d3
0000088e	subl	%edx,%ebx
00000890	cmpl	$0x7f,%edx
00000893	jg	0x000008a2
00000895	movb	%dl,(%esi)
00000897	movl	%edx,0x08(%esp)
0000089b	movl	%ebx,0x04(%esp)
0000089f	incl	%esi
000008a0	jmp	0x000008c2
000008a2	movb	$0x80,(%esi)
000008a5	movb	Fail(char const*),0x01(%esi)
000008a9	movb	%dl,0x02(%esi)
000008ac	movb	%dh,0x03(%esi)
000008af	movl	%edx,%eax
000008b1	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
000008b4	movb	%al,0x04(%esi)
000008b7	movl	%edx,0x08(%esp)
000008bb	movl	%ebx,0x04(%esp)
000008bf	addl	$0x05,%esi
000008c2	movl	%esi,(%esp)
000008c5	movl	%edx,%ebx
000008c7	calll	_memcpy
000008cc	addl	%ebx,%esi
000008ce	movl	$0x00000001,%ebx
000008d3	testl	%edi,%edi
000008d5	je	0x000008df
000008d7	movl	%edi,(%esp)
000008da	calll	operator delete[](void*)
000008df	subl	0x1c(%ebp),%esi
000008e2	movl	0x18(%ebp),%eax
000008e5	movl	%esi,(%eax)
000008e7	movl	0xfffbffbc(%ebp),%eax
000008ed	movl	(%eax),%eax
000008ef	cmpl	0xf0(%ebp),%eax
000008f2	jne	0x00000901
000008f4	movl	%ebx,%eax
000008f6	addl	$0x0004004c,%esp
000008fc	popl	%esi
000008fd	popl	%edi
000008fe	popl	%ebx
000008ff	popl	%ebp
00000900	ret
00000901	calll	___stack_chk_fail
00000906	nopw	%cs:Fail(char const*)(%eax,%eax)
FindDiffsLowMemory(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000910	pushl	%ebp
00000911	movl	%esp,%ebp
00000913	pushl	%ebx
00000914	pushl	%edi
00000915	pushl	%esi
00000916	subl	$0x0000044c,%esp
0000091c	calll	0x00000921
00000921	popl	%eax
00000922	movl	0x41ae-0x921(%eax),%eax
00000928	movl	%eax,0xfffffbc0(%ebp)
0000092e	movl	(%eax),%eax
00000930	movl	%eax,0xf0(%ebp)
00000933	leal	0xfffffbf0(%ebp),%eax
00000939	movl	%eax,(%esp)
0000093c	movl	$0x00000400,0x08(%esp)
00000944	movl	Fail(char const*),0x04(%esp)
0000094c	movl	0x08(%ebp),%edi
0000094f	movl	$0x00000028,%eax
00000954	subl	%edi,%eax
00000956	movl	%eax,0xfffffbd8(%ebp)
0000095c	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
0000095f	leal	0xf8(%edi,%eax),%ecx
00000963	movl	%ecx,0xfffffbd4(%ebp)
00000969	movl	0x14(%ebp),%ecx
0000096c	movl	0x0c(%ebp),%esi
0000096f	leal	(%esi,%ecx),%edx
00000972	movl	%edx,0xfffffbd0(%ebp)
00000978	leal	(%edi,%eax),%edx
0000097b	movl	%edx,0xfffffbec(%ebp)
00000981	cmpl	%eax,%ecx
00000983	setne	%al
00000986	movzbl	%al,%eax
00000989	movl	%eax,0xfffffbc8(%ebp)
0000098f	addl	$0xf8,%ecx
00000992	movl	%ecx,0xfffffbdc(%ebp)
00000998	calll	_memset
0000099d	movl	0x1c(%ebp),%eax
000009a0	movl	%eax,0xfffffbe4(%ebp)
000009a6	movl	%esi,%ebx
000009a8	jmp	0x000009cf
000009aa	nopw	Fail(char const*)(%eax,%eax)
000009b0	movl	0xfffffbe4(%ebp),%ecx
000009b6	movb	$0x80,(%ecx)
000009b9	movb	%dl,0x01(%ecx)
000009bc	movb	%al,0x02(%ecx)
000009bf	movb	%ah,0x03(%ecx)
000009c2	addl	$0x04,%ecx
000009c5	movl	%ecx,0xfffffbe4(%ebp)
000009cb	addl	%edx,%edi
000009cd	addl	%edx,%esi
000009cf	movl	%esi,0xfffffbc4(%ebp)
000009d5	movl	Fail(char const*),0xfffffbe0(%ebp)
000009df	jmp	0x000009fb
000009e1	nopl	%cs:Fail(char const*)(%eax,%eax)
000009f0	incl	%edi
000009f1	movl	%edi,%eax
000009f3	incl	0xfffffbe0(%ebp)
000009f9	movl	%eax,%edi
000009fb	movl	0xfffffbdc(%ebp),%esi
00000a01	cmpl	0xfffffbec(%ebp),%edi
00000a07	jae	0x00000bed
00000a0d	movl	%ebx,%ecx
00000a0f	subl	0x0c(%ebp),%ecx
00000a12	movl	0xfffffbd8(%ebp),%eax
00000a18	leal	(%eax,%edi),%eax
00000a1b	cmpl	%eax,%ecx
00000a1d	jge	0x00000a61
00000a1f	cmpl	%esi,%ecx
00000a21	jge	0x00000a61
00000a23	incl	%ebx
00000a24	nopw	%cs:Fail(char const*)(%eax,%eax)
00000a30	movzbl	0xff(%ebx),%edx
00000a34	movzbl	(%ebx),%ecx
00000a37	addl	%edx,%ecx
00000a39	movzbl	0x01(%ebx),%edx
00000a3d	addl	%ecx,%edx
00000a3f	movzbl	0x02(%ebx),%ecx
00000a43	addl	%edx,%ecx
00000a45	movzbl	%cl,%ecx
00000a48	leal	0xff(%ebx),%edx
00000a4b	movl	%edx,0xfffffbf0(%ebp,%ecx,4)
00000a52	movl	%ebx,%ecx
00000a54	subl	0x0c(%ebp),%ecx
00000a57	incl	%ebx
00000a58	cmpl	%eax,%ecx
00000a5a	jge	0x00000a60
00000a5c	cmpl	%esi,%ecx
00000a5e	jl	0x00000a30
00000a60	decl	%ebx
00000a61	cmpl	0xfffffbd4(%ebp),%edi
00000a67	jae	0x000009f0
00000a69	movzbl	(%edi),%ecx
00000a6c	movzbl	0x01(%edi),%eax
00000a70	addl	%ecx,%eax
00000a72	movzbl	0x02(%edi),%ecx
00000a76	addl	%eax,%ecx
00000a78	movzbl	0x03(%edi),%eax
00000a7c	addl	%ecx,%eax
00000a7e	movzbl	%al,%eax
00000a81	movl	0xfffffbf0(%ebp,%eax,4),%esi
00000a88	leal	0x01(%edi),%eax
00000a8b	testl	%esi,%esi
00000a8d	je	0x000009f3
00000a93	movl	%eax,0xfffffbe8(%ebp)
00000a99	movl	0xfffffbd0(%ebp),%edx
00000a9f	subl	%esi,%edx
00000aa1	movl	0xfffffbec(%ebp),%ecx
00000aa7	subl	%edi,%ecx
00000aa9	cmpl	%edx,%ecx
00000aab	cmovgel	%edx,%ecx
00000aae	xorl	%edx,%edx
00000ab0	jmp	0x00000ac1
00000ab2	nopw	%cs:Fail(char const*)(%eax,%eax)
00000ac0	incl	%edx
00000ac1	cmpl	%ecx,%edx
00000ac3	jge	0x00000ad1
00000ac5	movl	%edx,%eax
00000ac7	movb	(%edi,%eax),%dl
00000aca	cmpb	(%esi,%eax),%dl
00000acd	movl	%eax,%edx
00000acf	je	0x00000ac0
00000ad1	cmpl	$0x09,%edx
00000ad4	movl	0xfffffbe8(%ebp),%eax
00000ada	jl	0x000009f3
00000ae0	movl	0xfffffbe0(%ebp),%eax
00000ae6	testl	%eax,%eax
00000ae8	jne	0x00000af8
00000aea	movl	%edx,0xfffffbcc(%ebp)
00000af0	movl	0xfffffbc8(%ebp),%ecx
00000af6	jmp	0x00000b73
00000af8	movl	%edx,0xfffffbcc(%ebp)
00000afe	movl	%eax,%edx
00000b00	movl	%edi,%ecx
00000b02	subl	%edx,%ecx
00000b04	cmpl	$0x7f,%edx
00000b07	jg	0x00000b1c
00000b09	movl	0xfffffbe4(%ebp),%eax
00000b0f	movb	%dl,(%eax)
00000b11	movl	%edx,0x08(%esp)
00000b15	movl	%ecx,0x04(%esp)
00000b19	incl	%eax
00000b1a	jmp	0x00000b4e
00000b1c	movl	0xfffffbe4(%ebp),%eax
00000b22	movb	$0x80,(%eax)
00000b25	movb	Fail(char const*),0x01(%eax)
00000b29	movb	%dl,0x02(%eax)
00000b2c	movb	%dh,0x03(%eax)
00000b2f	movl	%ecx,0xfffffbe8(%ebp)
00000b35	movl	%edx,%ecx
00000b37	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
00000b3a	movb	%cl,0x04(%eax)
00000b3d	movl	%edx,0x08(%esp)
00000b41	movl	0xfffffbe8(%ebp),%ecx
00000b47	movl	%ecx,0x04(%esp)
00000b4b	addl	$0x05,%eax
00000b4e	movl	%eax,0xfffffbe4(%ebp)
00000b54	movl	%eax,(%esp)
00000b57	calll	_memcpy
00000b5c	movl	0xfffffbe4(%ebp),%eax
00000b62	addl	0xfffffbe0(%ebp),%eax
00000b68	movl	%eax,0xfffffbe4(%ebp)
00000b6e	movl	$0x00000001,%ecx
00000b73	movl	0xfffffbc4(%ebp),%edx
00000b79	cmpl	%edx,%esi
00000b7b	movl	$0x00000001,%eax
00000b80	cmovnel	%eax,%ecx
00000b83	movl	%ecx,0xfffffbc8(%ebp)
00000b89	movl	%esi,%eax
00000b8b	subl	%edx,%eax
00000b8d	movl	0xfffffbcc(%ebp),%edx
00000b93	cmpl	$0x00000080,%edx
00000b99	jl	0x00000bb8
00000b9b	movl	0xfffffbe4(%ebp),%ecx
00000ba1	movb	Fail(char const*),(%ecx)
00000ba4	movb	%dl,0x01(%ecx)
00000ba7	movb	%dh,0x02(%ecx)
00000baa	movb	%al,0x03(%ecx)
00000bad	movb	%ah,0x04(%ecx)
00000bb0	addl	$0x05,%ecx
00000bb3	jmp	0x000009c5
00000bb8	movl	%eax,%ecx
00000bba	subl	$0x80,%ecx
00000bbd	cmpl	$0x000000ff,%ecx
00000bc3	ja	0x000009b0
00000bc9	movl	%edx,%ecx
00000bcb	subl	$0x80,%ecx
00000bce	movl	0xfffffbe4(%ebp),%edx
00000bd4	movb	%cl,(%edx)
00000bd6	movb	%al,0x01(%edx)
00000bd9	addl	$0x02,%edx
00000bdc	movl	%edx,0xfffffbe4(%ebp)
00000be2	movl	0xfffffbcc(%ebp),%edx
00000be8	jmp	0x000009cb
00000bed	movl	0xfffffbe0(%ebp),%eax
00000bf3	testl	%eax,%eax
00000bf5	movl	0xfffffbe4(%ebp),%esi
00000bfb	jne	0x00000c05
00000bfd	movl	0xfffffbc8(%ebp),%ecx
00000c03	jmp	0x00000c4f
00000c05	subl	%eax,%edi
00000c07	cmpl	$0x7f,%eax
00000c0a	jg	0x00000c1e
00000c0c	movb	%al,(%esi)
00000c0e	movl	%eax,0x08(%esp)
00000c12	movl	%edi,0x04(%esp)
00000c16	incl	%esi
00000c17	movl	%esi,(%esp)
00000c1a	movl	%eax,%ebx
00000c1c	jmp	0x00000c43
00000c1e	movb	$0x80,(%esi)
00000c21	movb	Fail(char const*),0x01(%esi)
00000c25	movb	%al,0x02(%esi)
00000c28	movb	%ah,0x03(%esi)
00000c2b	movl	%eax,%ebx
00000c2d	movl	%ebx,%eax
00000c2f	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
00000c32	movb	%al,0x04(%esi)
00000c35	movl	%ebx,0x08(%esp)
00000c39	movl	%edi,0x04(%esp)
00000c3d	addl	$0x05,%esi
00000c40	movl	%esi,(%esp)
00000c43	calll	_memcpy
00000c48	addl	%ebx,%esi
00000c4a	movl	$0x00000001,%ecx
00000c4f	subl	0x1c(%ebp),%esi
00000c52	movl	0x18(%ebp),%eax
00000c55	movl	%esi,(%eax)
00000c57	movl	0xfffffbc0(%ebp),%eax
00000c5d	movl	(%eax),%eax
00000c5f	cmpl	0xf0(%ebp),%eax
00000c62	jne	0x00000c71
00000c64	movl	%ecx,%eax
00000c66	addl	$0x0000044c,%esp
00000c6c	popl	%esi
00000c6d	popl	%edi
00000c6e	popl	%ebx
00000c6f	popl	%ebp
00000c70	ret
00000c71	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(generichash.o):
(__TEXT,__text) section
HashString(char const*):
00000000	pushl	%edi
00000001	pushl	%esi
00000002	calll	0x00000007
00000007	popl	%edx
00000008	movl	0x0c(%esp),%esi
0000000c	incl	%esi
0000000d	xorl	%ecx,%ecx
0000000f	xorl	%eax,%eax
00000011	jmp	0x0000002c
00000013	nopl	%cs:HashString(char const*)(%eax,%eax)
00000020	xorl	%eax,%edi
00000022	movl	g_nRandomValues-0x7(%edx,%edi,4),%ecx
00000029	addl	$0x02,%esi
0000002c	movzbl	0xff(%esi),%edi
00000030	testl	%edi,%edi
00000032	je	0x00000044
00000034	xorl	%ecx,%edi
00000036	movl	g_nRandomValues-0x7(%edx,%edi,4),%eax
0000003d	movzbl	(%esi),%edi
00000040	testl	%edi,%edi
00000042	jne	0x00000020
00000044	shll	$0x08,%eax
00000047	orl	%ecx,%eax
00000049	popl	%esi
0000004a	popl	%edi
0000004b	ret
0000004c	nopl	HashString(char const*)(%eax)
HashStringCaseless(char const*):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%ebx
00000054	pushl	%edi
00000055	pushl	%esi
00000056	subl	$0x0c,%esp
00000059	calll	0x0000005e
0000005e	popl	%edi
0000005f	movl	0x08(%ebp),%ebx
00000062	incl	%ebx
00000063	movl	HashString(char const*),0xf0(%ebp)
0000006a	xorl	%esi,%esi
0000006c	jmp	0x0000007f
0000006e	nop
00000070	xorl	%esi,%eax
00000072	movl	g_nRandomValues-0x5e(%edi,%eax,4),%eax
00000079	movl	%eax,0xf0(%ebp)
0000007c	addl	$0x02,%ebx
0000007f	movzbl	0xff(%ebx),%eax
00000083	movl	%eax,(%esp)
00000086	calll	___toupper
0000008b	testl	%eax,%eax
0000008d	je	0x000000a8
0000008f	movzbl	(%ebx),%ecx
00000092	movl	%ecx,(%esp)
00000095	xorl	0xf0(%ebp),%eax
00000098	movl	g_nRandomValues-0x5e(%edi,%eax,4),%esi
0000009f	calll	___toupper
000000a4	testl	%eax,%eax
000000a6	jne	0x00000070
000000a8	shll	$0x08,%esi
000000ab	orl	0xf0(%ebp),%esi
000000ae	movl	%esi,%eax
000000b0	addl	$0x0c,%esp
000000b3	popl	%esi
000000b4	popl	%edi
000000b5	popl	%ebx
000000b6	popl	%ebp
000000b7	ret
000000b8	nopl	HashString(char const*)(%eax,%eax)
HashStringCaselessConventional(char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%esi
000000cb	movb	(%esi),%cl
000000cd	movl	$0xaaaaaaaa,%eax
000000d2	testb	%cl,%cl
000000d4	je	0x000000fa
000000d6	incl	%esi
000000d7	movl	$0xaaaaaaaa,%eax
000000dc	nopl	HashString(char const*)(%eax)
000000e0	movsbl	%cl,%ecx
000000e3	movl	%ecx,(%esp)
000000e6	imull	$0x21,%eax,%edi
000000e9	calll	___tolower
000000ee	movzbl	%al,%eax
000000f1	addl	%edi,%eax
000000f3	movb	(%esi),%cl
000000f5	incl	%esi
000000f6	testb	%cl,%cl
000000f8	jne	0x000000e0
000000fa	addl	$0x10,%esp
000000fd	popl	%esi
000000fe	popl	%edi
000000ff	popl	%ebp
00000100	ret
00000101	nopl	%cs:HashString(char const*)(%eax,%eax)
HashInt(int):
00000110	pushl	%ebx
00000111	pushl	%edi
00000112	pushl	%esi
00000113	calll	0x00000118
00000118	popl	%ecx
00000119	movl	0x10(%esp),%edx
0000011d	movl	%edx,%esi
0000011f	sarl	$0x18,%esi
00000122	movzbl	%dh,%eax
00000125	xorl	g_nRandomValues-0x118(%ecx,%eax,4),%esi
0000012c	movl	%edx,%ebx
0000012e	shrl	$0x10,%ebx
00000131	movzbl	%bl,%edi
00000134	xorl	g_nRandomValues-0x118(%ecx,%esi,4),%edi
0000013b	xorl	g_nRandomValues-0x118(%ecx,%edi,4),%eax
00000142	movl	g_nRandomValues-0x118(%ecx,%eax,4),%eax
00000149	movzbl	%dl,%edx
0000014c	xorl	%eax,%edx
0000014e	shll	$0x08,%eax
00000151	orl	g_nRandomValues-0x118(%ecx,%edx,4),%eax
00000158	popl	%esi
00000159	popl	%edi
0000015a	popl	%ebx
0000015b	ret
0000015c	nopl	HashString(char const*)(%eax)
Hash4(void const*):
00000160	pushl	%ebx
00000161	pushl	%edi
00000162	pushl	%esi
00000163	calll	0x00000168
00000168	popl	%ecx
00000169	movl	0x10(%esp),%eax
0000016d	movl	(%eax),%edx
0000016f	movl	%edx,%esi
00000171	shrl	$0x18,%esi
00000174	movzbl	%dh,%eax
00000177	xorl	g_nRandomValues-0x168(%ecx,%eax,4),%esi
0000017e	movl	%edx,%ebx
00000180	shrl	$0x10,%ebx
00000183	movzbl	%bl,%edi
00000186	xorl	g_nRandomValues-0x168(%ecx,%esi,4),%edi
0000018d	xorl	g_nRandomValues-0x168(%ecx,%edi,4),%eax
00000194	movl	g_nRandomValues-0x168(%ecx,%eax,4),%eax
0000019b	movzbl	%dl,%edx
0000019e	xorl	%eax,%edx
000001a0	shll	$0x08,%eax
000001a3	orl	g_nRandomValues-0x168(%ecx,%edx,4),%eax
000001aa	popl	%esi
000001ab	popl	%edi
000001ac	popl	%ebx
000001ad	ret
000001ae	nop
Hash8(void const*):
000001b0	pushl	%ebx
000001b1	pushl	%edi
000001b2	pushl	%esi
000001b3	calll	0x000001b8
000001b8	popl	%ecx
000001b9	movl	0x10(%esp),%edx
000001bd	movl	(%edx),%eax
000001bf	movl	0x04(%edx),%edx
000001c2	movl	%eax,%edi
000001c4	shrl	$0x18,%edi
000001c7	movzbl	%ah,%esi
000001ca	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%edi
000001d1	movl	%eax,%ebx
000001d3	shrl	$0x10,%ebx
000001d6	movzbl	%bl,%ebx
000001d9	xorl	g_nRandomValues-0x1b8(%ecx,%edi,4),%ebx
000001e0	xorl	g_nRandomValues-0x1b8(%ecx,%ebx,4),%esi
000001e7	movzbl	%al,%edi
000001ea	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%edi
000001f1	movl	%edx,%eax
000001f3	shrl	$0x18,%eax
000001f6	xorl	g_nRandomValues-0x1b8(%ecx,%edi,4),%eax
000001fd	movl	%edx,%ebx
000001ff	shrl	$0x10,%ebx
00000202	movzbl	%bl,%esi
00000205	xorl	g_nRandomValues-0x1b8(%ecx,%eax,4),%esi
0000020c	movzbl	%dh,%eax
0000020f	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%eax
00000216	movl	g_nRandomValues-0x1b8(%ecx,%eax,4),%eax
0000021d	movzbl	%dl,%edx
00000220	xorl	%eax,%edx
00000222	shll	$0x08,%eax
00000225	orl	g_nRandomValues-0x1b8(%ecx,%edx,4),%eax
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	ret
Hash12(void const*):
00000230	pushl	%ebp
00000231	pushl	%ebx
00000232	pushl	%edi
00000233	pushl	%esi
00000234	calll	0x00000239
00000239	popl	%ecx
0000023a	movl	0x14(%esp),%edx
0000023e	movl	(%edx),%eax
00000240	movl	0x04(%edx),%edx
00000243	movl	%eax,%edi
00000245	shrl	$0x18,%edi
00000248	movzbl	%ah,%esi
0000024b	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%edi
00000252	movl	%eax,%ebx
00000254	shrl	$0x10,%ebx
00000257	movzbl	%bl,%ebp
0000025a	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%ebp
00000261	xorl	g_nRandomValues-0x239(%ecx,%ebp,4),%esi
00000268	movzbl	%al,%edi
0000026b	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%edi
00000272	movl	%edx,%esi
00000274	shrl	$0x18,%esi
00000277	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%esi
0000027e	movl	%edx,%ebx
00000280	shrl	$0x10,%ebx
00000283	movzbl	%bl,%ebx
00000286	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%ebx
0000028d	movzbl	%dh,%edi
00000290	xorl	g_nRandomValues-0x239(%ecx,%ebx,4),%edi
00000297	movzbl	%dl,%esi
0000029a	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%esi
000002a1	movl	0x14(%esp),%eax
000002a5	movl	0x08(%eax),%edx
000002a8	movl	%edx,%eax
000002aa	shrl	$0x18,%eax
000002ad	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%eax
000002b4	movl	%edx,%ebx
000002b6	shrl	$0x10,%ebx
000002b9	movzbl	%bl,%esi
000002bc	xorl	g_nRandomValues-0x239(%ecx,%eax,4),%esi
000002c3	movzbl	%dh,%eax
000002c6	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%eax
000002cd	movl	g_nRandomValues-0x239(%ecx,%eax,4),%eax
000002d4	movzbl	%dl,%edx
000002d7	xorl	%eax,%edx
000002d9	shll	$0x08,%eax
000002dc	orl	g_nRandomValues-0x239(%ecx,%edx,4),%eax
000002e3	popl	%esi
000002e4	popl	%edi
000002e5	popl	%ebx
000002e6	popl	%ebp
000002e7	ret
000002e8	nopl	HashString(char const*)(%eax,%eax)
Hash16(void const*):
000002f0	pushl	%ebp
000002f1	pushl	%ebx
000002f2	pushl	%edi
000002f3	pushl	%esi
000002f4	calll	0x000002f9
000002f9	popl	%ecx
000002fa	movl	0x14(%esp),%edx
000002fe	movl	(%edx),%eax
00000300	movl	0x04(%edx),%edx
00000303	movl	%eax,%edi
00000305	shrl	$0x18,%edi
00000308	movzbl	%ah,%esi
0000030b	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000312	movl	%eax,%ebx
00000314	shrl	$0x10,%ebx
00000317	movzbl	%bl,%ebp
0000031a	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%ebp
00000321	xorl	g_nRandomValues-0x2f9(%ecx,%ebp,4),%esi
00000328	movzbl	%al,%edi
0000032b	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000332	movl	%edx,%esi
00000334	shrl	$0x18,%esi
00000337	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
0000033e	movl	%edx,%ebx
00000340	shrl	$0x10,%ebx
00000343	movzbl	%bl,%edi
00000346	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
0000034d	movzbl	%dh,%esi
00000350	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000357	movzbl	%dl,%edi
0000035a	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000361	movl	0x14(%esp),%eax
00000365	movl	0x08(%eax),%edx
00000368	movl	%edx,%esi
0000036a	shrl	$0x18,%esi
0000036d	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000374	movl	%edx,%ebx
00000376	shrl	$0x10,%ebx
00000379	movzbl	%bl,%ebx
0000037c	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%ebx
00000383	movzbl	%dh,%edi
00000386	xorl	g_nRandomValues-0x2f9(%ecx,%ebx,4),%edi
0000038d	movzbl	%dl,%esi
00000390	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000397	movl	0x0c(%eax),%edx
0000039a	movl	%edx,%eax
0000039c	shrl	$0x18,%eax
0000039f	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%eax
000003a6	movl	%edx,%ebx
000003a8	shrl	$0x10,%ebx
000003ab	movzbl	%bl,%esi
000003ae	xorl	g_nRandomValues-0x2f9(%ecx,%eax,4),%esi
000003b5	movzbl	%dh,%eax
000003b8	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%eax
000003bf	movl	g_nRandomValues-0x2f9(%ecx,%eax,4),%eax
000003c6	movzbl	%dl,%edx
000003c9	xorl	%eax,%edx
000003cb	shll	$0x08,%eax
000003ce	orl	g_nRandomValues-0x2f9(%ecx,%edx,4),%eax
000003d5	popl	%esi
000003d6	popl	%edi
000003d7	popl	%ebx
000003d8	popl	%ebp
000003d9	ret
000003da	nopw	HashString(char const*)(%eax,%eax)
HashBlock(void const*, unsigned int):
000003e0	pushl	%edi
000003e1	pushl	%esi
000003e2	calll	0x000003e7
000003e7	popl	%edx
000003e8	movl	0x0c(%esp),%esi
000003ec	incl	%esi
000003ed	xorl	%ecx,%ecx
000003ef	movl	0x10(%esp),%edi
000003f3	xorl	%eax,%eax
000003f5	jmp	0x00000412
000003f7	nopw	HashString(char const*)(%eax,%eax)
00000400	movzbl	(%esi),%ecx
00000403	xorl	%eax,%ecx
00000405	movl	g_nRandomValues-0x3e7(%edx,%ecx,4),%ecx
0000040c	addl	$0x02,%esi
0000040f	addl	$0xfe,%edi
00000412	testl	%edi,%edi
00000414	je	0x00000428
00000416	movzbl	0xff(%esi),%eax
0000041a	xorl	%ecx,%eax
0000041c	movl	g_nRandomValues-0x3e7(%edx,%eax,4),%eax
00000423	cmpl	$0x01,%edi
00000426	jne	0x00000400
00000428	shll	$0x08,%eax
0000042b	orl	%ecx,%eax
0000042d	popl	%esi
0000042e	popl	%edi
0000042f	ret
MurmurHash2(void const*, int, unsigned int):
00000430	pushl	%ebp
00000431	pushl	%ebx
00000432	pushl	%edi
00000433	pushl	%esi
00000434	pushl	%eax
00000435	movl	0x1c(%esp),%esi
00000439	movl	0x20(%esp),%eax
0000043d	xorl	%esi,%eax
0000043f	movl	0x18(%esp),%ecx
00000443	cmpl	$0x04,%esi
00000446	jge	0x0000044c
00000448	movl	%esi,%edx
0000044a	jmp	0x00000490
0000044c	leal	0xfc(%esi),%edx
0000044f	movl	%edx,%edi
00000451	andl	$0xfc,%edi
00000454	leal	0x04(%edi),%ebx
00000457	movl	%ebx,(%esp)
0000045a	movl	%ecx,%ebp
0000045c	nopl	HashString(char const*)(%eax)
00000460	imull	$0x5bd1e995,HashString(char const*)(%ebp),%ecx
00000467	movl	%ecx,%ebx
00000469	shrl	$0x18,%ebx
0000046c	xorl	%ecx,%ebx
0000046e	imull	$0x5bd1e995,%ebx,%ecx
00000474	imull	$0x5bd1e995,%eax,%eax
0000047a	xorl	%ecx,%eax
0000047c	addl	$0x04,%ebp
0000047f	addl	$0xfc,%esi
00000482	cmpl	$0x03,%esi
00000485	jg	0x00000460
00000487	movl	0x18(%esp),%ecx
0000048b	addl	(%esp),%ecx
0000048e	subl	%edi,%edx
00000490	cmpl	$0x01,%edx
00000493	je	0x000004b5
00000495	cmpl	$0x02,%edx
00000498	jne	0x0000049e
0000049a	movl	%eax,%edx
0000049c	jmp	0x000004ac
0000049e	cmpl	$0x03,%edx
000004a1	jne	0x000004c0
000004a3	movzbl	0x02(%ecx),%edx
000004a7	shll	$0x10,%edx
000004aa	xorl	%eax,%edx
000004ac	movzbl	0x01(%ecx),%eax
000004b0	shll	$0x08,%eax
000004b3	xorl	%edx,%eax
000004b5	movzbl	(%ecx),%ecx
000004b8	xorl	%eax,%ecx
000004ba	imull	$0x5bd1e995,%ecx,%eax
000004c0	movl	%eax,%ecx
000004c2	shrl	$0x0d,%ecx
000004c5	xorl	%eax,%ecx
000004c7	imull	$0x5bd1e995,%ecx,%ecx
000004cd	movl	%ecx,%eax
000004cf	shrl	$0x0f,%eax
000004d2	xorl	%ecx,%eax
000004d4	addl	$0x04,%esp
000004d7	popl	%esi
000004d8	popl	%edi
000004d9	popl	%ebx
000004da	popl	%ebp
000004db	ret
000004dc	nopl	HashString(char const*)(%eax)
MurmurHash2LowerCase(char const*, unsigned int):
000004e0	pushl	%ebp
000004e1	movl	%esp,%ebp
000004e3	pushl	%ebx
000004e4	pushl	%edi
000004e5	pushl	%esi
000004e6	subl	$0x1c,%esp
000004e9	calll	0x000004ee
000004ee	popl	%eax
000004ef	movl	0x294e-0x4ee(%eax),%eax
000004f5	movl	%eax,0xec(%ebp)
000004f8	movl	(%eax),%eax
000004fa	movl	%eax,0xf0(%ebp)
000004fd	subl	$0x10,%esp
00000500	movl	0x08(%ebp),%eax
00000503	movl	%eax,(%esp)
00000506	calll	_strlen
0000050b	addl	$0x10,%esp
0000050e	leal	0x10(%eax),%ecx
00000511	andl	$0xf0,%ecx
00000514	movl	%esp,%edx
00000516	subl	%ecx,%edx
00000518	movl	%edx,%ecx
0000051a	movl	%ecx,%esp
0000051c	movl	0x0c(%ebp),%esi
0000051f	testl	%eax,%eax
00000521	jle	0x000005e1
00000527	xorl	%edx,%edx
00000529	nopl	HashString(char const*)(%eax)
00000530	movl	%ecx,%edi
00000532	movl	0x08(%ebp),%ecx
00000535	movb	(%ecx,%edx),%cl
00000538	movb	%cl,%bl
0000053a	addb	$0x20,%bl
0000053d	movb	%cl,%bh
0000053f	addb	$0xbf,%bh
00000542	cmpb	$0x1a,%bh
00000545	jb	0x00000549
00000547	movb	%cl,%bl
00000549	movl	%edi,%ecx
0000054b	movb	%bl,(%ecx,%edx)
0000054e	incl	%edx
0000054f	cmpl	%edx,%eax
00000551	jne	0x00000530
00000553	xorl	%eax,%esi
00000555	cmpl	$0x04,%eax
00000558	jl	0x000005a2
0000055a	leal	0xfc(%eax),%edx
0000055d	movl	%edx,0xe8(%ebp)
00000560	andl	$0xfc,%edx
00000563	movl	%edx,0xe4(%ebp)
00000566	movl	%ecx,%edx
00000568	nopl	HashString(char const*)(%eax,%eax)
00000570	imull	$0x5bd1e995,(%edx),%ebx
00000576	movl	%ebx,%edi
00000578	shrl	$0x18,%edi
0000057b	xorl	%ebx,%edi
0000057d	imull	$0x5bd1e995,%edi,%edi
00000583	imull	$0x5bd1e995,%esi,%esi
00000589	xorl	%edi,%esi
0000058b	addl	$0x04,%edx
0000058e	addl	$0xfc,%eax
00000591	cmpl	$0x03,%eax
00000594	jg	0x00000570
00000596	movl	0xe4(%ebp),%edx
00000599	leal	0x04(%edx,%ecx),%ecx
0000059d	movl	0xe8(%ebp),%eax
000005a0	subl	%edx,%eax
000005a2	cmpl	$0x01,%eax
000005a5	je	0x000005c7
000005a7	cmpl	$0x02,%eax
000005aa	jne	0x000005b0
000005ac	movl	%esi,%eax
000005ae	jmp	0x000005be
000005b0	cmpl	$0x03,%eax
000005b3	jne	0x000005d2
000005b5	movzbl	0x02(%ecx),%eax
000005b9	shll	$0x10,%eax
000005bc	xorl	%esi,%eax
000005be	movzbl	0x01(%ecx),%esi
000005c2	shll	$0x08,%esi
000005c5	xorl	%eax,%esi
000005c7	movzbl	(%ecx),%eax
000005ca	xorl	%esi,%eax
000005cc	imull	$0x5bd1e995,%eax,%esi
000005d2	movl	0xec(%ebp),%eax
000005d5	movl	(%eax),%eax
000005d7	cmpl	0xf0(%ebp),%eax
000005da	je	0x000005e5
000005dc	calll	___stack_chk_fail
000005e1	xorl	%eax,%esi
000005e3	jmp	0x000005a2
000005e5	movl	%esi,%eax
000005e7	shrl	$0x0d,%eax
000005ea	xorl	%esi,%eax
000005ec	imull	$0x5bd1e995,%eax,%ecx
000005f2	movl	%ecx,%eax
000005f4	shrl	$0x0f,%eax
000005f7	xorl	%ecx,%eax
000005f9	leal	0xf4(%ebp),%esp
000005fc	popl	%esi
000005fd	popl	%edi
000005fe	popl	%ebx
000005ff	popl	%ebp
00000600	ret
00000601	nopl	%cs:HashString(char const*)(%eax,%eax)
MurmurHash64(void const*, int, unsigned int):
00000610	pushl	%ebp
00000611	pushl	%ebx
00000612	pushl	%edi
00000613	pushl	%esi
00000614	subl	$0x08,%esp
00000617	movl	0x20(%esp),%edi
0000061b	movl	0x24(%esp),%eax
0000061f	xorl	%edi,%eax
00000621	xorl	%ecx,%ecx
00000623	movl	0x1c(%esp),%ebx
00000627	cmpl	$0x08,%edi
0000062a	jge	0x00000632
0000062c	movl	%ebx,%ebp
0000062e	movl	%edi,%esi
00000630	jmp	0x00000699
00000632	leal	0xf8(%edi),%esi
00000635	movl	%esi,%ecx
00000637	andl	$0xf8,%ecx
0000063a	movl	%ecx,(%esp)
0000063d	leal	0x08(%ecx,%ebx),%ecx
00000641	movl	%ecx,0x04(%esp)
00000645	addl	$0x04,%ebx
00000648	xorl	%ecx,%ecx
0000064a	nopw	HashString(char const*)(%eax,%eax)
00000650	imull	$0x5bd1e995,(%ebx),%ebp
00000656	movl	%ebp,%edx
00000658	shrl	$0x18,%edx
0000065b	xorl	%ebp,%edx
0000065d	imull	$0x5bd1e995,%edx,%edx
00000663	imull	$0x5bd1e995,%ecx,%ecx
00000669	xorl	%edx,%ecx
0000066b	imull	$0x5bd1e995,0xfc(%ebx),%ebp
00000672	movl	%ebp,%edx
00000674	shrl	$0x18,%edx
00000677	xorl	%ebp,%edx
00000679	imull	$0x5bd1e995,%edx,%edx
0000067f	imull	$0x5bd1e995,%eax,%eax
00000685	xorl	%edx,%eax
00000687	addl	$0x08,%ebx
0000068a	addl	$0xf8,%edi
0000068d	cmpl	$0x07,%edi
00000690	jg	0x00000650
00000692	subl	(%esp),%esi
00000695	movl	0x04(%esp),%ebp
00000699	cmpl	$0x04,%esi
0000069c	jl	0x000006c0
0000069e	imull	$0x5bd1e995,HashString(char const*)(%ebp),%ebx
000006a5	movl	%ebx,%edi
000006a7	shrl	$0x18,%edi
000006aa	xorl	%ebx,%edi
000006ac	imull	$0x5bd1e995,%edi,%edx
000006b2	imull	$0x5bd1e995,%eax,%eax
000006b8	xorl	%edx,%eax
000006ba	addl	$0xfc,%esi
000006bd	addl	$0x04,%ebp
000006c0	cmpl	$0x01,%esi
000006c3	je	0x000006d1
000006c5	cmpl	$0x03,%esi
000006c8	je	0x000006d5
000006ca	cmpl	$0x02,%esi
000006cd	je	0x000006de
000006cf	jmp	0x000006f3
000006d1	movl	%ecx,%esi
000006d3	jmp	0x000006e7
000006d5	movzbl	0x02(%ebp),%edx
000006d9	shll	$0x10,%edx
000006dc	xorl	%edx,%ecx
000006de	movzbl	0x01(%ebp),%esi
000006e2	shll	$0x08,%esi
000006e5	xorl	%ecx,%esi
000006e7	movzbl	HashString(char const*)(%ebp),%ecx
000006eb	xorl	%esi,%ecx
000006ed	imull	$0x5bd1e995,%ecx,%ecx
000006f3	movl	%ecx,%edx
000006f5	shrl	$0x12,%edx
000006f8	xorl	%eax,%edx
000006fa	imull	$0x5bd1e995,%edx,%edx
00000700	movl	%edx,%eax
00000702	shrl	$0x16,%eax
00000705	xorl	%ecx,%eax
00000707	imull	$0x5bd1e995,%eax,%eax
0000070d	movl	%eax,%ecx
0000070f	shrl	$0x11,%ecx
00000712	xorl	%edx,%ecx
00000714	imull	$0x5bd1e995,%ecx,%edx
0000071a	movl	%edx,%ecx
0000071c	shrl	$0x13,%ecx
0000071f	xorl	%eax,%ecx
00000721	imull	$0x5bd1e995,%ecx,%eax
00000727	addl	$0x08,%esp
0000072a	popl	%esi
0000072b	popl	%edi
0000072c	popl	%ebx
0000072d	popl	%ebp
0000072e	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(ilocalize.o):
(__TEXT,__text) section
ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int):
00000000	jmp	V_UTF8ToUnicode(char const*, wchar_t*, int)
00000005	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConvertUnicodeToANSI(wchar_t const*, char*, int):
00000010	jmp	V_UnicodeToUTF8(wchar_t const*, char*, int)
00000015	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringVArgsInternal(char*, int, char const*, int, char*):
00000020	jmp	void ConstructStringVArgsInternal_Impl<char>(char*, int, char const*, int, char*)
00000025	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringVArgsInternal(wchar_t*, int, wchar_t const*, int, char*):
00000030	jmp	void ConstructStringVArgsInternal_Impl<wchar_t>(wchar_t*, int, wchar_t const*, int, char*)
00000035	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
char const* GetTypedKeyValuesString<char>(KeyValues*, char const*):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	subl	$0x18,%esp
00000046	calll	0x0000004b
0000004b	popl	%eax
0000004c	leal	0x697e-0x4b(%eax),%eax
00000052	movl	%eax,0x08(%esp)
00000056	movl	0x0c(%ebp),%eax
00000059	movl	%eax,0x04(%esp)
0000005d	movl	0x08(%ebp),%eax
00000060	movl	%eax,(%esp)
00000063	calll	KeyValues::GetString(char const*, char const*)
00000068	addl	$0x18,%esp
0000006b	popl	%ebp
0000006c	ret
0000006d	nopl	(%eax)
wchar_t const* GetTypedKeyValuesString<wchar_t>(KeyValues*, char const*):
00000070	pushl	%ebp
00000071	movl	%esp,%ebp
00000073	subl	$0x18,%esp
00000076	calll	0x0000007b
0000007b	popl	%eax
0000007c	leal	0x69cc-0x7b(%eax),%eax
00000082	movl	%eax,0x08(%esp)
00000086	movl	0x0c(%ebp),%eax
00000089	movl	%eax,0x04(%esp)
0000008d	movl	0x08(%ebp),%eax
00000090	movl	%eax,(%esp)
00000093	calll	KeyValues::GetWString(char const*, wchar_t const*)
00000098	addl	$0x18,%esp
0000009b	popl	%ebp
0000009c	ret
0000009d	nopl	(%eax)
ILocalize::ConstructStringKeyValuesInternal(char*, int, char const*, KeyValues*):
000000a0	jmp	void ConstructStringKeyValuesInternal_Impl<char>(char*, int, char const*, KeyValues*)
000000a5	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringKeyValuesInternal(wchar_t*, int, wchar_t const*, KeyValues*):
000000b0	jmp	void ConstructStringKeyValuesInternal_Impl<wchar_t>(wchar_t*, int, wchar_t const*, KeyValues*)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(interface.o):
(__TEXT,__text) section
InterfaceReg::InterfaceReg(void* (*)(), char const*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x0c(%esp),%edx
0000000a	movl	0x04(%esp),%ecx
0000000e	movl	%edx,0x04(%ecx)
00000011	movl	0x08(%esp),%edx
00000015	movl	%edx,(%ecx)
00000017	movl	InterfaceReg::s_pInterfaceRegs-0x5(%eax),%edx
0000001d	movl	%edx,0x08(%ecx)
00000020	movl	%ecx,InterfaceReg::s_pInterfaceRegs-0x5(%eax)
00000026	ret
00000027	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
InterfaceReg::InterfaceReg(void* (*)(), char const*):
00000030	calll	0x00000035
00000035	popl	%eax
00000036	movl	0x0c(%esp),%edx
0000003a	movl	0x04(%esp),%ecx
0000003e	movl	%edx,0x04(%ecx)
00000041	movl	0x08(%esp),%edx
00000045	movl	%edx,(%ecx)
00000047	movl	InterfaceReg::s_pInterfaceRegs-0x35(%eax),%edx
0000004d	movl	%edx,0x08(%ecx)
00000050	movl	%ecx,InterfaceReg::s_pInterfaceRegs-0x35(%eax)
00000056	ret
00000057	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CreateInterfaceInternal(char const*, int*):
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%ebx
00000064	pushl	%edi
00000065	pushl	%esi
00000066	subl	$0x0c,%esp
00000069	calll	0x0000006e
0000006e	popl	%eax
0000006f	leal	InterfaceReg::s_pInterfaceRegs-0x6e(%eax),%edi
00000075	movl	0x0c(%ebp),%esi
00000078	movl	0x08(%ebp),%ebx
0000007b	jmp	0x00000083
0000007d	nopl	(%eax)
00000080	addl	$0x08,%edi
00000083	movl	(%edi),%edi
00000085	testl	%edi,%edi
00000087	je	0x000000b1
00000089	movl	0x04(%edi),%eax
0000008c	movl	%ebx,0x04(%esp)
00000090	movl	%eax,(%esp)
00000093	calll	_strcmp
00000098	testl	%eax,%eax
0000009a	jne	0x00000080
0000009c	testl	%esi,%esi
0000009e	je	0x000000a6
000000a0	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esi)
000000a6	movl	(%edi),%eax
000000a8	addl	$0x0c,%esp
000000ab	popl	%esi
000000ac	popl	%edi
000000ad	popl	%ebx
000000ae	popl	%ebp
000000af	jmp	*%eax
000000b1	testl	%esi,%esi
000000b3	je	0x000000bb
000000b5	movl	$0x00000001,(%esi)
000000bb	xorl	%eax,%eax
000000bd	addl	$0x0c,%esp
000000c0	popl	%esi
000000c1	popl	%edi
000000c2	popl	%ebx
000000c3	popl	%ebp
000000c4	ret
000000c5	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
_CreateInterface:
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%ebx
000000d4	pushl	%edi
000000d5	pushl	%esi
000000d6	subl	$0x0c,%esp
000000d9	calll	0x000000de
000000de	popl	%eax
000000df	leal	InterfaceReg::s_pInterfaceRegs-0xde(%eax),%edi
000000e5	movl	0x0c(%ebp),%esi
000000e8	movl	0x08(%ebp),%ebx
000000eb	jmp	0x000000f3
000000ed	nopl	(%eax)
000000f0	addl	$0x08,%edi
000000f3	movl	(%edi),%edi
000000f5	testl	%edi,%edi
000000f7	je	0x00000121
000000f9	movl	0x04(%edi),%eax
000000fc	movl	%ebx,0x04(%esp)
00000100	movl	%eax,(%esp)
00000103	calll	_strcmp
00000108	testl	%eax,%eax
0000010a	jne	0x000000f0
0000010c	testl	%esi,%esi
0000010e	je	0x00000116
00000110	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esi)
00000116	movl	(%edi),%eax
00000118	addl	$0x0c,%esp
0000011b	popl	%esi
0000011c	popl	%edi
0000011d	popl	%ebx
0000011e	popl	%ebp
0000011f	jmp	*%eax
00000121	testl	%esi,%esi
00000123	je	0x0000012b
00000125	movl	$0x00000001,(%esi)
0000012b	xorl	%eax,%eax
0000012d	addl	$0x0c,%esp
00000130	popl	%esi
00000131	popl	%edi
00000132	popl	%ebx
00000133	popl	%ebp
00000134	ret
00000135	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
GetModuleHandle(char const*):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	calll	0x0000014d
0000014d	popl	%edi
0000014e	xorl	%esi,%esi
00000150	movl	0x08(%ebp),%eax
00000153	testl	%eax,%eax
00000155	je	0x00000190
00000157	movl	%eax,(%esp)
0000015a	movl	$0x00000002,0x04(%esp)
00000162	calll	_dlopen
00000167	movl	%eax,%esi
00000169	testl	%esi,%esi
0000016b	jne	0x00000188
0000016d	calll	_dlerror
00000172	movl	%eax,0x04(%esp)
00000176	leal	0x2b88-0x14d(%edi),%eax
0000017c	movl	%eax,(%esp)
0000017f	calll	_printf
00000184	xorl	%esi,%esi
00000186	jmp	0x00000190
00000188	movl	%esi,(%esp)
0000018b	calll	_dlclose
00000190	movl	%esi,%eax
00000192	addl	$0x10,%esp
00000195	popl	%esi
00000196	popl	%edi
00000197	popl	%ebp
00000198	ret
00000199	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_IsDebuggerPresent():
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	subl	$0x08,%esp
000001a6	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esp)
000001ad	calll	_Plat_IsInDebugSession
000001b2	movzbl	%al,%eax
000001b5	addl	$0x08,%esp
000001b8	popl	%ebp
000001b9	ret
000001ba	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
Sys_LoadLibrary(char const*, Sys_Flags):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%ebx
000001c4	pushl	%edi
000001c5	pushl	%esi
000001c6	subl	$0x0000041c,%esp
000001cc	calll	0x000001d1
000001d1	popl	%ebx
000001d2	movl	0x3714-0x1d1(%ebx),%eax
000001d8	movl	%eax,0xfffffbec(%ebp)
000001de	movl	(%eax),%eax
000001e0	movl	%eax,0xf0(%ebp)
000001e3	leal	0x2b99-0x1d1(%ebx),%eax
000001e9	movl	%eax,(%esp)
000001ec	calll	V_GetFileExtension(char const*)
000001f1	movl	0x08(%ebp),%ecx
000001f4	movl	%ecx,0x04(%esp)
000001f8	leal	0xfffffbf0(%ebp),%esi
000001fe	movl	%esi,(%esp)
00000201	movl	$0x00000400,0x08(%esp)
00000209	testl	%eax,%eax
0000020b	leal	0xff(%eax),%edi
0000020e	leal	0x2b99-0x1d1(%ebx),%eax
00000214	cmovel	%eax,%edi
00000217	calll	V_strncpy(char*, char const*, int)
0000021c	movl	%edi,0x04(%esp)
00000220	movl	%esi,(%esp)
00000223	movl	$0x00000400,0x08(%esp)
0000022b	calll	V_SetExtension(char*, char const*, int)
00000230	movl	%esi,(%esp)
00000233	movl	$0x0000002f,0x04(%esp)
0000023b	calll	V_FixSlashes(char*, char)
00000240	movl	0x0c(%ebp),%edi
00000243	andl	$0x01,%edi
00000246	movl	%edi,%eax
00000248	shll	$0x04,%eax
0000024b	orl	$0x02,%eax
0000024e	movl	%eax,0x04(%esp)
00000252	movl	%esi,(%esp)
00000255	calll	_dlopen
0000025a	movl	%eax,%esi
0000025c	testl	%esi,%esi
0000025e	jne	0x000002b7
00000260	testl	%edi,%edi
00000262	jne	0x000002b7
00000264	calll	_dlerror
00000269	movl	%eax,%edi
0000026b	testl	%edi,%edi
0000026d	je	0x000002b7
0000026f	leal	0x2ba0-0x1d1(%ebx),%eax
00000275	movl	%eax,0x04(%esp)
00000279	movl	%edi,(%esp)
0000027c	calll	_strstr
00000281	testl	%eax,%eax
00000283	jne	0x000002b7
00000285	leal	0x2bad-0x1d1(%ebx),%eax
0000028b	movl	%eax,0x04(%esp)
0000028f	movl	%edi,(%esp)
00000292	calll	_strstr
00000297	testl	%eax,%eax
00000299	jne	0x000002b7
0000029b	movl	%edi,0x08(%esp)
0000029f	leal	0xfffffbf0(%ebp),%eax
000002a5	movl	%eax,0x04(%esp)
000002a9	leal	0x2bbd-0x1d1(%ebx),%eax
000002af	movl	%eax,(%esp)
000002b2	calll	_Msg
000002b7	movl	0xfffffbec(%ebp),%eax
000002bd	movl	(%eax),%eax
000002bf	cmpl	0xf0(%ebp),%eax
000002c2	jne	0x000002d1
000002c4	movl	%esi,%eax
000002c6	addl	$0x0000041c,%esp
000002cc	popl	%esi
000002cd	popl	%edi
000002ce	popl	%ebx
000002cf	popl	%ebp
000002d0	ret
000002d1	calll	___stack_chk_fail
000002d6	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
Sys_LoadModule(char const*, Sys_Flags):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%ebx
000002e4	pushl	%edi
000002e5	pushl	%esi
000002e6	subl	$0x0000081c,%esp
000002ec	calll	0x000002f1
000002f1	popl	%ebx
000002f2	movl	0x3714-0x2f1(%ebx),%eax
000002f8	movl	%eax,0xfffff7ec(%ebp)
000002fe	movl	(%eax),%eax
00000300	movl	%eax,0xf0(%ebp)
00000303	movl	0x08(%ebp),%eax
00000306	movl	%eax,(%esp)
00000309	calll	V_IsAbsolutePath(char const*)
0000030e	movl	0x0c(%ebp),%edi
00000311	testb	%al,%al
00000313	jne	0x000003e9
00000319	leal	0xfffffbf0(%ebp),%edi
0000031f	movl	%edi,(%esp)
00000322	movl	$0x00000400,0x04(%esp)
0000032a	calll	_getcwd
0000032f	movl	%edi,(%esp)
00000332	calll	_strlen
00000337	movb	0xff(%eax,%edi),%al
0000033b	cmpb	$0x2f,%al
0000033d	je	0x00000343
0000033f	cmpb	$0x5c,%al
00000341	jne	0x00000350
00000343	movl	%edi,(%esp)
00000346	calll	_strlen
0000034b	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0xff(%eax,%edi)
00000350	movl	%edi,(%esp)
00000353	calll	_strlen
00000358	movl	%eax,%esi
0000035a	leal	0x2bdc-0x2f1(%ebx),%eax
00000360	movl	%eax,0x04(%esp)
00000364	movl	0x08(%ebp),%eax
00000367	movl	%eax,(%esp)
0000036a	movl	$0x00000004,0x08(%esp)
00000372	calll	_strncmp
00000377	testl	%eax,%eax
00000379	je	0x00000390
0000037b	cmpb	$0x6e,0xff(%esi,%edi)
00000380	jne	0x000003a3
00000382	cmpb	$0x69,0xfe(%esi,%edi)
00000387	jne	0x000003a3
00000389	cmpb	$0x62,0xfd(%esi,%edi)
0000038e	jne	0x000003a3
00000390	movl	0x08(%ebp),%eax
00000393	movl	%eax,0x10(%esp)
00000397	movl	%edi,0x0c(%esp)
0000039b	leal	0x2be1-0x2f1(%ebx),%eax
000003a1	jmp	0x000003b4
000003a3	movl	0x08(%ebp),%eax
000003a6	movl	%eax,0x10(%esp)
000003aa	movl	%edi,0x0c(%esp)
000003ae	leal	0x2be7-0x2f1(%ebx),%eax
000003b4	movl	%eax,0x08(%esp)
000003b8	leal	0xfffff7f0(%ebp),%eax
000003be	movl	%eax,(%esp)
000003c1	movl	$0x00000400,0x04(%esp)
000003c9	calll	V_snprintf(char*, int, char const*, ...)
000003ce	movl	0x0c(%ebp),%edi
000003d1	movl	%edi,0x04(%esp)
000003d5	leal	0xfffff7f0(%ebp),%eax
000003db	movl	%eax,(%esp)
000003de	calll	Sys_LoadLibrary(char const*, Sys_Flags)
000003e3	movl	%eax,%esi
000003e5	testl	%esi,%esi
000003e7	jne	0x000003fa
000003e9	movl	%edi,0x04(%esp)
000003ed	movl	0x08(%ebp),%eax
000003f0	movl	%eax,(%esp)
000003f3	calll	Sys_LoadLibrary(char const*, Sys_Flags)
000003f8	movl	%eax,%esi
000003fa	leal	0x2bf1-0x2f1(%ebx),%eax
00000400	movl	%eax,0x04(%esp)
00000404	movl	%esi,(%esp)
00000407	calll	_dlsym
0000040c	testl	%eax,%eax
0000040e	je	0x0000047a
00000410	testl	%esi,%esi
00000412	je	0x00000454
00000414	calll	_CommandLine_Tier0
00000419	movl	(%eax),%ecx
0000041b	leal	0x2bfc-0x2f1(%ebx),%edx
00000421	movl	%edx,0x04(%esp)
00000425	movl	%eax,(%esp)
00000428	call	*0x28(%ecx)
0000042b	testl	%eax,%eax
0000042d	jne	0x00000454
0000042f	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esp)
00000436	calll	_Plat_IsInDebugSession
0000043b	testb	%al,%al
0000043d	jne	0x00000454
0000043f	movl	0x08(%ebp),%eax
00000442	movl	%eax,0x04(%esp)
00000446	leal	0x2c08-0x2f1(%ebx),%eax
0000044c	movl	%eax,(%esp)
0000044f	calll	_Error
00000454	movl	0x08(%ebp),%eax
00000457	movl	%eax,0x04(%esp)
0000045b	leal	0x2c08-0x2f1(%ebx),%eax
00000461	movl	%eax,(%esp)
00000464	calll	DevWarning(char const*, ...)
00000469	movb	__ZL26s_bRunningWithDebugModules.b-0x2f1(%ebx),%al
0000046f	testb	%al,%al
00000471	jne	0x0000047a
00000473	movb	$0x01,__ZL26s_bRunningWithDebugModules.b-0x2f1(%ebx)
0000047a	movl	0xfffff7ec(%ebp),%eax
00000480	movl	(%eax),%eax
00000482	cmpl	0xf0(%ebp),%eax
00000485	jne	0x00000494
00000487	movl	%esi,%eax
00000489	addl	$0x0000081c,%esp
0000048f	popl	%esi
00000490	popl	%edi
00000491	popl	%ebx
00000492	popl	%ebp
00000493	ret
00000494	calll	___stack_chk_fail
00000499	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_RunningWithDebugModules():
000004a0	calll	0x000004a5
000004a5	popl	%eax
000004a6	movzbl	__ZL26s_bRunningWithDebugModules.b-0x4a5(%eax),%eax
000004ad	ret
000004ae	nop
Sys_UnloadModule(CSysModule*):
000004b0	movl	0x04(%esp),%eax
000004b4	testl	%eax,%eax
000004b6	jne	0x000004b9
000004b8	ret
000004b9	jmp	_dlclose
000004be	nop
Sys_GetFactory(CSysModule*):
000004c0	pushl	%ebp
000004c1	movl	%esp,%ebp
000004c3	subl	$0x08,%esp
000004c6	calll	0x000004cb
000004cb	popl	%ecx
000004cc	movl	0x08(%ebp),%eax
000004cf	testl	%eax,%eax
000004d1	jne	0x000004d7
000004d3	xorl	%eax,%eax
000004d5	jmp	0x000004e9
000004d7	leal	0x2c24-0x4cb(%ecx),%ecx
000004dd	movl	%ecx,0x04(%esp)
000004e1	movl	%eax,(%esp)
000004e4	calll	_dlsym
000004e9	addl	$0x08,%esp
000004ec	popl	%ebp
000004ed	ret
000004ee	nop
Sys_GetFactoryThis():
000004f0	calll	0x000004f5
000004f5	popl	%eax
000004f6	leal	CreateInterfaceInternal(char const*, int*)-0x4f5(%eax),%eax
000004fc	ret
000004fd	nopl	(%eax)
Sys_GetFactory(char const*):
00000500	pushl	%ebp
00000501	movl	%esp,%ebp
00000503	pushl	%edi
00000504	pushl	%esi
00000505	subl	$0x10,%esp
00000508	calll	0x0000050d
0000050d	popl	%edi
0000050e	xorl	%esi,%esi
00000510	movl	0x08(%ebp),%eax
00000513	testl	%eax,%eax
00000515	je	0x00000550
00000517	movl	%eax,(%esp)
0000051a	movl	$0x00000002,0x04(%esp)
00000522	calll	_dlopen
00000527	movl	%eax,%esi
00000529	testl	%esi,%esi
0000052b	jne	0x00000548
0000052d	calll	_dlerror
00000532	movl	%eax,0x04(%esp)
00000536	leal	0x2b88-0x50d(%edi),%eax
0000053c	movl	%eax,(%esp)
0000053f	calll	_printf
00000544	xorl	%esi,%esi
00000546	jmp	0x00000550
00000548	movl	%esi,(%esp)
0000054b	calll	_dlclose
00000550	leal	0x2c24-0x50d(%edi),%eax
00000556	movl	%eax,0x04(%esp)
0000055a	movl	%esi,(%esp)
0000055d	calll	_dlsym
00000562	addl	$0x10,%esp
00000565	popl	%esi
00000566	popl	%edi
00000567	popl	%ebp
00000568	ret
00000569	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_LoadInterface(char const*, char const*, CSysModule**, void**):
00000570	pushl	%ebp
00000571	movl	%esp,%ebp
00000573	pushl	%edi
00000574	pushl	%esi
00000575	subl	$0x10,%esp
00000578	calll	0x0000057d
0000057d	popl	%edi
0000057e	movl	0x08(%ebp),%eax
00000581	movl	%eax,(%esp)
00000584	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
0000058c	calll	Sys_LoadModule(char const*, Sys_Flags)
00000591	movl	%eax,%esi
00000593	xorb	%al,%al
00000595	testl	%esi,%esi
00000597	je	0x000005e1
00000599	leal	0x2c24-0x57d(%edi),%eax
0000059f	movl	%eax,0x04(%esp)
000005a3	movl	%esi,(%esp)
000005a6	calll	_dlsym
000005ab	testl	%eax,%eax
000005ad	jne	0x000005bb
000005af	movl	%esi,(%esp)
000005b2	calll	_dlclose
000005b7	xorb	%al,%al
000005b9	jmp	0x000005e1
000005bb	movl	0x14(%ebp),%edi
000005be	movl	0x0c(%ebp),%ecx
000005c1	movl	%ecx,(%esp)
000005c4	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
000005cc	call	*%eax
000005ce	movl	%eax,(%edi)
000005d0	testl	%eax,%eax
000005d2	je	0x000005af
000005d4	movl	0x10(%ebp),%ecx
000005d7	movb	$0x01,%al
000005d9	testl	%ecx,%ecx
000005db	je	0x000005e1
000005dd	movl	%esi,(%ecx)
000005df	movb	$0x01,%al
000005e1	movzbl	%al,%eax
000005e4	addl	$0x10,%esp
000005e7	popl	%esi
000005e8	popl	%edi
000005e9	popl	%ebp
000005ea	ret
000005eb	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::CDllDemandLoader(char const*):
000005f0	calll	0x000005f5
000005f5	popl	%eax
000005f6	leal	vtable for CDllDemandLoader-0x5f5+0x00000008(%eax),%ecx
000005fc	movl	0x04(%esp),%eax
00000600	movl	%ecx,(%eax)
00000602	movl	0x08(%esp),%ecx
00000606	movl	%ecx,0x04(%eax)
00000609	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%eax)
00000610	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x0c(%eax)
00000614	ret
00000615	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::CDllDemandLoader(char const*):
00000620	calll	0x00000625
00000625	popl	%eax
00000626	leal	vtable for CDllDemandLoader-0x625+0x00000008(%eax),%ecx
0000062c	movl	0x04(%esp),%eax
00000630	movl	%ecx,(%eax)
00000632	movl	0x08(%esp),%ecx
00000636	movl	%ecx,0x04(%eax)
00000639	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%eax)
00000640	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x0c(%eax)
00000644	ret
00000645	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	pushl	%edi
00000654	pushl	%esi
00000655	subl	$0x10,%esp
00000658	calll	0x0000065d
0000065d	popl	%eax
0000065e	leal	vtable for CDllDemandLoader-0x65d+0x00000008(%eax),%eax
00000664	movl	0x08(%ebp),%edi
00000667	movl	%eax,(%edi)
00000669	movl	0x08(%edi),%eax
0000066c	testl	%eax,%eax
0000066e	je	0x00000678
00000670	movl	%eax,(%esp)
00000673	calll	_dlclose
00000678	addl	$0x10,%esp
0000067b	popl	%esi
0000067c	popl	%edi
0000067d	popl	%ebp
0000067e	jmp	operator delete(void*)
00000683	movl	%eax,%esi
00000685	movl	%edi,(%esp)
00000688	calll	operator delete(void*)
0000068d	movl	%esi,(%esp)
00000690	calll	__Unwind_Resume
00000695	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
000006a0	pushl	%ebp
000006a1	movl	%esp,%ebp
000006a3	pushl	%esi
000006a4	pushl	%eax
000006a5	calll	0x000006aa
000006aa	popl	%eax
000006ab	leal	vtable for CDllDemandLoader-0x6aa+0x00000008(%eax),%eax
000006b1	movl	0x08(%ebp),%esi
000006b4	movl	%eax,(%esi)
000006b6	movl	0x08(%esi),%eax
000006b9	testl	%eax,%eax
000006bb	je	0x000006cc
000006bd	movl	%eax,(%esp)
000006c0	calll	_dlclose
000006c5	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
000006cc	addl	$0x04,%esp
000006cf	popl	%esi
000006d0	popl	%ebp
000006d1	ret
000006d2	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
000006e0	pushl	%ebp
000006e1	movl	%esp,%ebp
000006e3	pushl	%esi
000006e4	pushl	%eax
000006e5	calll	0x000006ea
000006ea	popl	%eax
000006eb	leal	vtable for CDllDemandLoader-0x6ea+0x00000008(%eax),%eax
000006f1	movl	0x08(%ebp),%esi
000006f4	movl	%eax,(%esi)
000006f6	movl	0x08(%esi),%eax
000006f9	testl	%eax,%eax
000006fb	je	0x0000070c
000006fd	movl	%eax,(%esp)
00000700	calll	_dlclose
00000705	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
0000070c	addl	$0x04,%esp
0000070f	popl	%esi
00000710	popl	%ebp
00000711	ret
00000712	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::Unload():
00000720	pushl	%ebp
00000721	movl	%esp,%ebp
00000723	pushl	%esi
00000724	pushl	%eax
00000725	movl	0x08(%ebp),%esi
00000728	movl	0x08(%esi),%eax
0000072b	testl	%eax,%eax
0000072d	je	0x0000073e
0000072f	movl	%eax,(%esp)
00000732	calll	_dlclose
00000737	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
0000073e	addl	$0x04,%esp
00000741	popl	%esi
00000742	popl	%ebp
00000743	ret
00000744	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::GetFactory():
00000750	pushl	%ebp
00000751	movl	%esp,%ebp
00000753	pushl	%edi
00000754	pushl	%esi
00000755	subl	$0x10,%esp
00000758	calll	0x0000075d
0000075d	popl	%esi
0000075e	movl	0x08(%ebp),%edi
00000761	movl	0x08(%edi),%eax
00000764	testl	%eax,%eax
00000766	jne	0x00000790
00000768	xorl	%ecx,%ecx
0000076a	testb	$0x01,0x0c(%edi)
0000076e	jne	0x000007a4
00000770	movb	$0x01,0x0c(%edi)
00000774	movl	0x04(%edi),%eax
00000777	movl	%eax,(%esp)
0000077a	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
00000782	calll	Sys_LoadModule(char const*, Sys_Flags)
00000787	movl	%eax,0x08(%edi)
0000078a	xorl	%ecx,%ecx
0000078c	testl	%eax,%eax
0000078e	je	0x000007a4
00000790	leal	0x2c24-0x75d(%esi),%ecx
00000796	movl	%ecx,0x04(%esp)
0000079a	movl	%eax,(%esp)
0000079d	calll	_dlsym
000007a2	movl	%eax,%ecx
000007a4	movl	%ecx,%eax
000007a6	addl	$0x10,%esp
000007a9	popl	%esi
000007aa	popl	%edi
000007ab	popl	%ebp
000007ac	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(KeyValues.o):
(__TEXT,__text) section
KeyValues::GetSymbolForStringClassic(char const*, bool):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	calll	_KeyValuesSystem
0000000b	movl	(%eax),%ecx
0000000d	movb	0x0c(%ebp),%dl
00000010	movzbl	%dl,%edx
00000013	movl	%edx,0x08(%esp)
00000017	movl	0x08(%ebp),%edx
0000001a	movl	%edx,0x04(%esp)
0000001e	movl	%eax,(%esp)
00000021	call	*0x0c(%ecx)
00000024	addl	$0x18,%esp
00000027	popl	%ebp
00000028	ret
00000029	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::GetStringForSymbolClassic(int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	subl	$0x08,%esp
00000036	calll	_KeyValuesSystem
0000003b	movl	(%eax),%ecx
0000003d	movl	0x08(%ebp),%edx
00000040	movl	%edx,0x04(%esp)
00000044	movl	%eax,(%esp)
00000047	call	*0x10(%ecx)
0000004a	addl	$0x08,%esp
0000004d	popl	%ebp
0000004e	ret
0000004f	nop
KeyValues::SetUseGrowableStringTable(bool):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%edi
00000054	pushl	%esi
00000055	subl	$0x20,%esp
00000058	calll	0x0000005d
0000005d	popl	%edi
0000005e	movb	0x08(%ebp),%al
00000061	cmpb	$0x01,%al
00000063	jne	0x00000135
00000069	leal	KeyValues::GetStringForSymbolGrowable(int)-0x5d(%edi),%eax
0000006f	movl	%eax,KeyValues::s_pfGetStringForSymbol-0x5d(%edi)
00000075	leal	KeyValues::GetSymbolForStringGrowable(char const*, bool)-0x5d(%edi),%eax
0000007b	movl	%eax,KeyValues::s_pfGetSymbolForString-0x5d(%edi)
00000081	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::s_pGrowableStringTable-0x5d(%edi)
0000008b	jne	0x000001c7
00000091	movl	$0x00000048,(%esp)
00000098	calll	operator new(unsigned long)
0000009d	movl	%eax,%esi
0000009f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
000000a5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000000ac	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000000b3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000000ba	leal	0x08(%esi),%eax
000000bd	movl	%eax,0x14(%esp)
000000c1	movl	%eax,0x10(%esp)
000000c5	movl	%esi,%eax
000000c7	addl	$0x10,%eax
000000ca	movl	%eax,(%esp)
000000cd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000000d5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000000dd	movl	$0x00000800,0x04(%esp)
000000e5	calll	CUtlHash<int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&>::CUtlHash(int, int, int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&)
000000ea	movl	$0x00080000,0x38(%esi)
000000f1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
000000f8	movl	$0x00080000,(%esp)
000000ff	calll	_malloc
00000104	movl	%eax,0x34(%esi)
00000107	movl	$0x00000001,0x40(%esi)
0000010e	movl	%eax,0x44(%esi)
00000111	testl	%eax,%eax
00000113	je	0x00000118
00000115	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00000118	movl	%esi,KeyValues::s_pGrowableStringTable-0x5d(%edi)
0000011e	jmp	0x000001c7
00000123	movl	%eax,%edi
00000125	movl	%esi,(%esp)
00000128	calll	operator delete(void*)
0000012d	movl	%edi,(%esp)
00000130	calll	__Unwind_Resume
00000135	leal	KeyValues::GetStringForSymbolClassic(int)-0x5d(%edi),%eax
0000013b	movl	%eax,KeyValues::s_pfGetStringForSymbol-0x5d(%edi)
00000141	leal	KeyValues::GetSymbolForStringClassic(char const*, bool)-0x5d(%edi),%eax
00000147	movl	%eax,KeyValues::s_pfGetSymbolForString-0x5d(%edi)
0000014d	movl	KeyValues::s_pGrowableStringTable-0x5d(%edi),%esi
00000153	testl	%esi,%esi
00000155	je	0x000001bd
00000157	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x40(%esi)
0000015e	movl	0x34(%esi),%eax
00000161	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
00000165	jns	0x0000016c
00000167	movl	%eax,0x44(%esi)
0000016a	jmp	0x000001aa
0000016c	testl	%eax,%eax
0000016e	jne	0x00000180
00000170	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
00000177	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x44(%esi)
0000017e	jmp	0x000001a3
00000180	movl	%eax,(%esp)
00000183	calll	_free
00000188	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x34(%esi)
0000018f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
00000193	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
0000019a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x44(%esi)
000001a1	js	0x000001aa
000001a3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
000001aa	leal	0x10(%esi),%eax
000001ad	movl	%eax,(%esp)
000001b0	calll	CUtlHash<int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&>::~CUtlHash()
000001b5	movl	%esi,(%esp)
000001b8	calll	operator delete(void*)
000001bd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::s_pGrowableStringTable-0x5d(%edi)
000001c7	addl	$0x20,%esp
000001ca	popl	%esi
000001cb	popl	%edi
000001cc	popl	%ebp
000001cd	ret
000001ce	jmp	0x00000123
000001d3	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetStringForSymbolGrowable(int):
000001e0	calll	0x000001e5
000001e5	popl	%eax
000001e6	movl	KeyValues::s_pGrowableStringTable-0x1e5(%eax),%eax
000001ec	movl	0x34(%eax),%eax
000001ef	addl	0x04(%esp),%eax
000001f3	ret
000001f4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetSymbolForStringGrowable(char const*, bool):
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	subl	$0x18,%esp
00000206	calll	0x0000020b
0000020b	popl	%eax
0000020c	movl	KeyValues::s_pGrowableStringTable-0x20b(%eax),%eax
00000212	movb	0x0c(%ebp),%cl
00000215	movzbl	%cl,%ecx
00000218	movl	%ecx,0x08(%esp)
0000021c	movl	0x08(%ebp),%ecx
0000021f	movl	%ecx,0x04(%esp)
00000223	movl	%eax,(%esp)
00000226	calll	CKeyValuesGrowableStringTable::GetSymbolForString(char const*, bool)
0000022b	addl	$0x18,%esp
0000022e	popl	%ebp
0000022f	ret
KeyValues::KeyValues(char const*):
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	pushl	%esi
00000234	subl	$0x14,%esp
00000237	calll	0x0000023c
0000023c	popl	%eax
0000023d	movl	0x08(%ebp),%esi
00000240	movl	$0xffffffff,(%esi)
00000246	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000024d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000254	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000025b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000262	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000269	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000026f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000276	movb	$0x01,0x12(%esi)
0000027a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000027e	movl	0x0c(%ebp),%ecx
00000281	movl	%ecx,(%esp)
00000284	movl	$0x00000001,0x04(%esp)
0000028c	call	*KeyValues::s_pfGetSymbolForString-0x23c(%eax)
00000292	movl	%eax,(%esi)
00000294	addl	$0x14,%esp
00000297	popl	%esi
00000298	popl	%ebp
00000299	ret
0000029a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	pushl	%esi
000002a4	subl	$0x14,%esp
000002a7	calll	0x000002ac
000002ac	popl	%eax
000002ad	movl	0x08(%ebp),%esi
000002b0	movl	$0xffffffff,(%esi)
000002b6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000002bd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000002c4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000002cb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000002d2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000002d9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000002df	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000002e6	movb	$0x01,0x12(%esi)
000002ea	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000002ee	movl	0x0c(%ebp),%ecx
000002f1	movl	%ecx,(%esp)
000002f4	movl	$0x00000001,0x04(%esp)
000002fc	call	*KeyValues::s_pfGetSymbolForString-0x2ac(%eax)
00000302	movl	%eax,(%esi)
00000304	addl	$0x14,%esp
00000307	popl	%esi
00000308	popl	%ebp
00000309	ret
0000030a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::Init():
00000310	movl	0x04(%esp),%eax
00000314	movl	$0xffffffff,(%eax)
0000031a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
00000321	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00000328	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%eax)
0000032f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%eax)
00000336	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%eax)
0000033d	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00000343	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%eax)
0000034a	movb	$0x01,0x12(%eax)
0000034e	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%eax)
00000352	ret
00000353	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetName(char const*):
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	subl	$0x08,%esp
00000366	calll	0x0000036b
0000036b	popl	%eax
0000036c	movl	0x0c(%ebp),%ecx
0000036f	movl	%ecx,(%esp)
00000372	movl	$0x00000001,0x04(%esp)
0000037a	call	*KeyValues::s_pfGetSymbolForString-0x36b(%eax)
00000380	movl	0x08(%ebp),%ecx
00000383	movl	%eax,(%ecx)
00000385	addl	$0x08,%esp
00000388	popl	%ebp
00000389	ret
0000038a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*):
00000390	pushl	%ebp
00000391	movl	%esp,%ebp
00000393	pushl	%esi
00000394	subl	$0x14,%esp
00000397	calll	0x0000039c
0000039c	popl	%eax
0000039d	movl	0x08(%ebp),%esi
000003a0	movl	$0xffffffff,(%esi)
000003a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000003ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000003b4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000003bb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000003c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000003c9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000003cf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000003d6	movb	$0x01,0x12(%esi)
000003da	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000003de	movl	0x0c(%ebp),%ecx
000003e1	movl	%ecx,(%esp)
000003e4	movl	$0x00000001,0x04(%esp)
000003ec	call	*KeyValues::s_pfGetSymbolForString-0x39c(%eax)
000003f2	movl	%eax,(%esi)
000003f4	movl	0x14(%ebp),%eax
000003f7	movl	%eax,0x08(%esp)
000003fb	movl	0x10(%ebp),%eax
000003fe	movl	%eax,0x04(%esp)
00000402	movl	%esi,(%esp)
00000405	calll	KeyValues::SetString(char const*, char const*)
0000040a	addl	$0x14,%esp
0000040d	popl	%esi
0000040e	popl	%ebp
0000040f	ret
KeyValues::KeyValues(char const*, char const*, char const*):
00000410	pushl	%ebp
00000411	movl	%esp,%ebp
00000413	pushl	%esi
00000414	subl	$0x14,%esp
00000417	calll	0x0000041c
0000041c	popl	%eax
0000041d	movl	0x08(%ebp),%esi
00000420	movl	$0xffffffff,(%esi)
00000426	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000042d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000434	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000043b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000442	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000449	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000044f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000456	movb	$0x01,0x12(%esi)
0000045a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000045e	movl	0x0c(%ebp),%ecx
00000461	movl	%ecx,(%esp)
00000464	movl	$0x00000001,0x04(%esp)
0000046c	call	*KeyValues::s_pfGetSymbolForString-0x41c(%eax)
00000472	movl	%eax,(%esi)
00000474	movl	0x14(%ebp),%eax
00000477	movl	%eax,0x08(%esp)
0000047b	movl	0x10(%ebp),%eax
0000047e	movl	%eax,0x04(%esp)
00000482	movl	%esi,(%esp)
00000485	calll	KeyValues::SetString(char const*, char const*)
0000048a	addl	$0x14,%esp
0000048d	popl	%esi
0000048e	popl	%ebp
0000048f	ret
KeyValues::SetString(char const*, char const*):
00000490	pushl	%ebp
00000491	movl	%esp,%ebp
00000493	pushl	%ebx
00000494	pushl	%edi
00000495	pushl	%esi
00000496	subl	$0x0c,%esp
00000499	calll	0x0000049e
0000049e	popl	%ebx
0000049f	movl	0x0c(%ebp),%eax
000004a2	movl	%eax,0x04(%esp)
000004a6	movl	0x08(%ebp),%eax
000004a9	movl	%eax,(%esp)
000004ac	movl	$0x00000001,0x08(%esp)
000004b4	calll	KeyValues::FindKey(char const*, bool)
000004b9	movl	%eax,%esi
000004bb	testl	%esi,%esi
000004bd	je	0x00000530
000004bf	movl	0x10(%ebp),%edi
000004c2	movl	0x04(%esi),%eax
000004c5	cmpb	$0x01,0x10(%esi)
000004c9	jne	0x000004cf
000004cb	cmpl	%edi,%eax
000004cd	je	0x00000530
000004cf	testl	%eax,%eax
000004d1	je	0x000004db
000004d3	movl	%eax,(%esp)
000004d6	calll	operator delete[](void*)
000004db	movl	0x08(%esi),%eax
000004de	testl	%eax,%eax
000004e0	je	0x000004ea
000004e2	movl	%eax,(%esp)
000004e5	calll	operator delete[](void*)
000004ea	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000004f1	leal	0x3a9e0-0x49e(%ebx),%ebx
000004f7	testl	%edi,%edi
000004f9	cmovnel	%edi,%ebx
000004fc	movl	%ebx,(%esp)
000004ff	calll	_strlen
00000504	movl	%eax,%edi
00000506	incl	%edi
00000507	testl	%edi,%edi
00000509	movl	$0xffffffff,%eax
0000050e	cmovnsl	%edi,%eax
00000511	movl	%eax,(%esp)
00000514	calll	operator new[](unsigned long)
00000519	movl	%eax,0x04(%esi)
0000051c	movl	%edi,0x08(%esp)
00000520	movl	%ebx,0x04(%esp)
00000524	movl	%eax,(%esp)
00000527	calll	_memcpy
0000052c	movb	$0x01,0x10(%esi)
00000530	addl	$0x0c,%esp
00000533	popl	%esi
00000534	popl	%edi
00000535	popl	%ebx
00000536	popl	%ebp
00000537	ret
00000538	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, wchar_t const*):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%esi
00000544	subl	$0x14,%esp
00000547	calll	0x0000054c
0000054c	popl	%eax
0000054d	movl	0x08(%ebp),%esi
00000550	movl	$0xffffffff,(%esi)
00000556	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000055d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000564	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000056b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000572	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000579	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000057f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000586	movb	$0x01,0x12(%esi)
0000058a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000058e	movl	0x0c(%ebp),%ecx
00000591	movl	%ecx,(%esp)
00000594	movl	$0x00000001,0x04(%esp)
0000059c	call	*KeyValues::s_pfGetSymbolForString-0x54c(%eax)
000005a2	movl	%eax,(%esi)
000005a4	movl	0x14(%ebp),%eax
000005a7	movl	%eax,0x08(%esp)
000005ab	movl	0x10(%ebp),%eax
000005ae	movl	%eax,0x04(%esp)
000005b2	movl	%esi,(%esp)
000005b5	calll	KeyValues::SetWString(char const*, wchar_t const*)
000005ba	addl	$0x14,%esp
000005bd	popl	%esi
000005be	popl	%ebp
000005bf	ret
KeyValues::KeyValues(char const*, char const*, wchar_t const*):
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%esi
000005c4	subl	$0x14,%esp
000005c7	calll	0x000005cc
000005cc	popl	%eax
000005cd	movl	0x08(%ebp),%esi
000005d0	movl	$0xffffffff,(%esi)
000005d6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000005dd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000005e4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000005eb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000005f2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000005f9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000005ff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000606	movb	$0x01,0x12(%esi)
0000060a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000060e	movl	0x0c(%ebp),%ecx
00000611	movl	%ecx,(%esp)
00000614	movl	$0x00000001,0x04(%esp)
0000061c	call	*KeyValues::s_pfGetSymbolForString-0x5cc(%eax)
00000622	movl	%eax,(%esi)
00000624	movl	0x14(%ebp),%eax
00000627	movl	%eax,0x08(%esp)
0000062b	movl	0x10(%ebp),%eax
0000062e	movl	%eax,0x04(%esp)
00000632	movl	%esi,(%esp)
00000635	calll	KeyValues::SetWString(char const*, wchar_t const*)
0000063a	addl	$0x14,%esp
0000063d	popl	%esi
0000063e	popl	%ebp
0000063f	ret
KeyValues::SetWString(char const*, wchar_t const*):
00000640	pushl	%ebp
00000641	movl	%esp,%ebp
00000643	pushl	%ebx
00000644	pushl	%edi
00000645	pushl	%esi
00000646	subl	$0x0c,%esp
00000649	calll	0x0000064e
0000064e	popl	%edi
0000064f	movl	0x0c(%ebp),%eax
00000652	movl	%eax,0x04(%esp)
00000656	movl	0x08(%ebp),%eax
00000659	movl	%eax,(%esp)
0000065c	movl	$0x00000001,0x08(%esp)
00000664	calll	KeyValues::FindKey(char const*, bool)
00000669	movl	%eax,%esi
0000066b	testl	%esi,%esi
0000066d	je	0x000006e4
0000066f	movl	0x08(%esi),%eax
00000672	testl	%eax,%eax
00000674	je	0x0000067e
00000676	movl	%eax,(%esp)
00000679	calll	operator delete[](void*)
0000067e	movl	0x04(%esi),%eax
00000681	testl	%eax,%eax
00000683	je	0x0000068d
00000685	movl	%eax,(%esp)
00000688	calll	operator delete[](void*)
0000068d	movl	0x10(%ebp),%eax
00000690	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000697	leal	0x3ac7c-0x64e(%edi),%ebx
0000069d	testl	%eax,%eax
0000069f	cmovnel	%eax,%ebx
000006a2	movl	%ebx,(%esp)
000006a5	calll	_wcslen
000006aa	movl	%eax,%edi
000006ac	leal	0x01(%edi),%eax
000006af	movl	$0xffffffff,%ecx
000006b4	movl	$0x00000004,%edx
000006b9	mull	%edx
000006bb	cmovol	%ecx,%eax
000006be	movl	%eax,(%esp)
000006c1	calll	operator new[](unsigned long)
000006c6	movl	%eax,0x08(%esi)
000006c9	leal	0x00000004(,%edi,4),%ecx
000006d0	movl	%ecx,0x08(%esp)
000006d4	movl	%ebx,0x04(%esp)
000006d8	movl	%eax,(%esp)
000006db	calll	_memcpy
000006e0	movb	$0x05,0x10(%esi)
000006e4	addl	$0x0c,%esp
000006e7	popl	%esi
000006e8	popl	%edi
000006e9	popl	%ebx
000006ea	popl	%ebp
000006eb	ret
000006ec	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::KeyValues(char const*, char const*, int):
000006f0	pushl	%ebp
000006f1	movl	%esp,%ebp
000006f3	pushl	%esi
000006f4	subl	$0x14,%esp
000006f7	calll	0x000006fc
000006fc	popl	%eax
000006fd	movl	0x08(%ebp),%esi
00000700	movl	$0xffffffff,(%esi)
00000706	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000070d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000714	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000071b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000722	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000729	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000072f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000736	movb	$0x01,0x12(%esi)
0000073a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000073e	movl	0x0c(%ebp),%ecx
00000741	movl	%ecx,(%esp)
00000744	movl	$0x00000001,0x04(%esp)
0000074c	call	*KeyValues::s_pfGetSymbolForString-0x6fc(%eax)
00000752	movl	%eax,(%esi)
00000754	movl	0x10(%ebp),%eax
00000757	movl	%eax,0x04(%esp)
0000075b	movl	%esi,(%esp)
0000075e	movl	$0x00000001,0x08(%esp)
00000766	calll	KeyValues::FindKey(char const*, bool)
0000076b	testl	%eax,%eax
0000076d	je	0x00000779
0000076f	movl	0x14(%ebp),%ecx
00000772	movl	%ecx,0x0c(%eax)
00000775	movb	$0x02,0x10(%eax)
00000779	addl	$0x14,%esp
0000077c	popl	%esi
0000077d	popl	%ebp
0000077e	ret
0000077f	nop
KeyValues::KeyValues(char const*, char const*, int):
00000780	pushl	%ebp
00000781	movl	%esp,%ebp
00000783	pushl	%esi
00000784	subl	$0x14,%esp
00000787	calll	0x0000078c
0000078c	popl	%eax
0000078d	movl	0x08(%ebp),%esi
00000790	movl	$0xffffffff,(%esi)
00000796	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000079d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000007a4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000007ab	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000007b2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000007b9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000007bf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000007c6	movb	$0x01,0x12(%esi)
000007ca	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000007ce	movl	0x0c(%ebp),%ecx
000007d1	movl	%ecx,(%esp)
000007d4	movl	$0x00000001,0x04(%esp)
000007dc	call	*KeyValues::s_pfGetSymbolForString-0x78c(%eax)
000007e2	movl	%eax,(%esi)
000007e4	movl	0x10(%ebp),%eax
000007e7	movl	%eax,0x04(%esp)
000007eb	movl	%esi,(%esp)
000007ee	movl	$0x00000001,0x08(%esp)
000007f6	calll	KeyValues::FindKey(char const*, bool)
000007fb	testl	%eax,%eax
000007fd	je	0x00000809
000007ff	movl	0x14(%ebp),%ecx
00000802	movl	%ecx,0x0c(%eax)
00000805	movb	$0x02,0x10(%eax)
00000809	addl	$0x14,%esp
0000080c	popl	%esi
0000080d	popl	%ebp
0000080e	ret
0000080f	nop
KeyValues::SetInt(char const*, int):
00000810	pushl	%ebp
00000811	movl	%esp,%ebp
00000813	subl	$0x18,%esp
00000816	movl	0x0c(%ebp),%eax
00000819	movl	%eax,0x04(%esp)
0000081d	movl	0x08(%ebp),%eax
00000820	movl	%eax,(%esp)
00000823	movl	$0x00000001,0x08(%esp)
0000082b	calll	KeyValues::FindKey(char const*, bool)
00000830	testl	%eax,%eax
00000832	je	0x0000083e
00000834	movl	0x10(%ebp),%ecx
00000837	movl	%ecx,0x0c(%eax)
0000083a	movb	$0x02,0x10(%eax)
0000083e	addl	$0x18,%esp
00000841	popl	%ebp
00000842	ret
00000843	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*):
00000850	pushl	%ebp
00000851	movl	%esp,%ebp
00000853	pushl	%esi
00000854	subl	$0x14,%esp
00000857	calll	0x0000085c
0000085c	popl	%eax
0000085d	movl	0x08(%ebp),%esi
00000860	movl	$0xffffffff,(%esi)
00000866	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000086d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000874	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000087b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000882	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000889	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000088f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000896	movb	$0x01,0x12(%esi)
0000089a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000089e	movl	0x0c(%ebp),%ecx
000008a1	movl	%ecx,(%esp)
000008a4	movl	$0x00000001,0x04(%esp)
000008ac	call	*KeyValues::s_pfGetSymbolForString-0x85c(%eax)
000008b2	movl	%eax,(%esi)
000008b4	movl	0x14(%ebp),%eax
000008b7	movl	%eax,0x08(%esp)
000008bb	movl	0x10(%ebp),%eax
000008be	movl	%eax,0x04(%esp)
000008c2	movl	%esi,(%esp)
000008c5	calll	KeyValues::SetString(char const*, char const*)
000008ca	movl	0x1c(%ebp),%eax
000008cd	movl	%eax,0x08(%esp)
000008d1	movl	0x18(%ebp),%eax
000008d4	movl	%eax,0x04(%esp)
000008d8	movl	%esi,(%esp)
000008db	calll	KeyValues::SetString(char const*, char const*)
000008e0	addl	$0x14,%esp
000008e3	popl	%esi
000008e4	popl	%ebp
000008e5	ret
000008e6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%esi
000008f4	subl	$0x14,%esp
000008f7	calll	0x000008fc
000008fc	popl	%eax
000008fd	movl	0x08(%ebp),%esi
00000900	movl	$0xffffffff,(%esi)
00000906	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000090d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000914	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000091b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000922	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000929	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000092f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000936	movb	$0x01,0x12(%esi)
0000093a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000093e	movl	0x0c(%ebp),%ecx
00000941	movl	%ecx,(%esp)
00000944	movl	$0x00000001,0x04(%esp)
0000094c	call	*KeyValues::s_pfGetSymbolForString-0x8fc(%eax)
00000952	movl	%eax,(%esi)
00000954	movl	0x14(%ebp),%eax
00000957	movl	%eax,0x08(%esp)
0000095b	movl	0x10(%ebp),%eax
0000095e	movl	%eax,0x04(%esp)
00000962	movl	%esi,(%esp)
00000965	calll	KeyValues::SetString(char const*, char const*)
0000096a	movl	0x1c(%ebp),%eax
0000096d	movl	%eax,0x08(%esp)
00000971	movl	0x18(%ebp),%eax
00000974	movl	%eax,0x04(%esp)
00000978	movl	%esi,(%esp)
0000097b	calll	KeyValues::SetString(char const*, char const*)
00000980	addl	$0x14,%esp
00000983	popl	%esi
00000984	popl	%ebp
00000985	ret
00000986	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, int, char const*, int):
00000990	pushl	%ebp
00000991	movl	%esp,%ebp
00000993	pushl	%esi
00000994	subl	$0x14,%esp
00000997	calll	0x0000099c
0000099c	popl	%eax
0000099d	movl	0x08(%ebp),%esi
000009a0	movl	$0xffffffff,(%esi)
000009a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000009ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000009b4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000009bb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000009c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000009c9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000009cf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000009d6	movb	$0x01,0x12(%esi)
000009da	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000009de	movl	0x0c(%ebp),%ecx
000009e1	movl	%ecx,(%esp)
000009e4	movl	$0x00000001,0x04(%esp)
000009ec	call	*KeyValues::s_pfGetSymbolForString-0x99c(%eax)
000009f2	movl	%eax,(%esi)
000009f4	movl	0x10(%ebp),%eax
000009f7	movl	%eax,0x04(%esp)
000009fb	movl	%esi,(%esp)
000009fe	movl	$0x00000001,0x08(%esp)
00000a06	calll	KeyValues::FindKey(char const*, bool)
00000a0b	testl	%eax,%eax
00000a0d	je	0x00000a19
00000a0f	movl	0x14(%ebp),%ecx
00000a12	movl	%ecx,0x0c(%eax)
00000a15	movb	$0x02,0x10(%eax)
00000a19	movl	0x18(%ebp),%eax
00000a1c	movl	%eax,0x04(%esp)
00000a20	movl	%esi,(%esp)
00000a23	movl	$0x00000001,0x08(%esp)
00000a2b	calll	KeyValues::FindKey(char const*, bool)
00000a30	testl	%eax,%eax
00000a32	je	0x00000a3e
00000a34	movl	0x1c(%ebp),%ecx
00000a37	movl	%ecx,0x0c(%eax)
00000a3a	movb	$0x02,0x10(%eax)
00000a3e	addl	$0x14,%esp
00000a41	popl	%esi
00000a42	popl	%ebp
00000a43	ret
00000a44	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, int, char const*, int):
00000a50	pushl	%ebp
00000a51	movl	%esp,%ebp
00000a53	pushl	%esi
00000a54	subl	$0x14,%esp
00000a57	calll	0x00000a5c
00000a5c	popl	%eax
00000a5d	movl	0x08(%ebp),%esi
00000a60	movl	$0xffffffff,(%esi)
00000a66	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00000a6d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000a74	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00000a7b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000a82	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000a89	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00000a8f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000a96	movb	$0x01,0x12(%esi)
00000a9a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00000a9e	movl	0x0c(%ebp),%ecx
00000aa1	movl	%ecx,(%esp)
00000aa4	movl	$0x00000001,0x04(%esp)
00000aac	call	*KeyValues::s_pfGetSymbolForString-0xa5c(%eax)
00000ab2	movl	%eax,(%esi)
00000ab4	movl	0x10(%ebp),%eax
00000ab7	movl	%eax,0x04(%esp)
00000abb	movl	%esi,(%esp)
00000abe	movl	$0x00000001,0x08(%esp)
00000ac6	calll	KeyValues::FindKey(char const*, bool)
00000acb	testl	%eax,%eax
00000acd	je	0x00000ad9
00000acf	movl	0x14(%ebp),%ecx
00000ad2	movl	%ecx,0x0c(%eax)
00000ad5	movb	$0x02,0x10(%eax)
00000ad9	movl	0x18(%ebp),%eax
00000adc	movl	%eax,0x04(%esp)
00000ae0	movl	%esi,(%esp)
00000ae3	movl	$0x00000001,0x08(%esp)
00000aeb	calll	KeyValues::FindKey(char const*, bool)
00000af0	testl	%eax,%eax
00000af2	je	0x00000afe
00000af4	movl	0x1c(%ebp),%ecx
00000af7	movl	%ecx,0x0c(%eax)
00000afa	movb	$0x02,0x10(%eax)
00000afe	addl	$0x14,%esp
00000b01	popl	%esi
00000b02	popl	%ebp
00000b03	ret
00000b04	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::~KeyValues():
00000b10	jmp	KeyValues::RemoveEverything()
00000b15	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::~KeyValues():
00000b20	jmp	KeyValues::RemoveEverything()
00000b25	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RemoveEverything():
00000b30	pushl	%ebp
00000b31	movl	%esp,%ebp
00000b33	pushl	%ebx
00000b34	pushl	%edi
00000b35	pushl	%esi
00000b36	subl	$0x0c,%esp
00000b39	movl	0x08(%ebp),%esi
00000b3c	movl	0x18(%esi),%edi
00000b3f	nop
00000b40	testl	%edi,%edi
00000b42	je	0x00000b88
00000b44	movl	0x14(%edi),%ebx
00000b47	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00000b4e	movl	%edi,(%esp)
00000b51	calll	KeyValues::RemoveEverything()
00000b56	calll	_KeyValuesSystem
00000b5b	movl	(%eax),%ecx
00000b5d	movl	%edi,0x04(%esp)
00000b61	movl	%eax,(%esp)
00000b64	call	*0x08(%ecx)
00000b67	movl	%ebx,%edi
00000b69	jmp	0x00000b40
00000b6b	movl	%eax,%esi
00000b6d	calll	_KeyValuesSystem
00000b72	movl	(%eax),%ecx
00000b74	movl	0x08(%ecx),%ecx
00000b77	movl	%edi,0x04(%esp)
00000b7b	movl	%eax,(%esp)
00000b7e	call	*%ecx
00000b80	movl	%esi,(%esp)
00000b83	calll	__Unwind_Resume
00000b88	movl	0x14(%esi),%ebx
00000b8b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00000b90	movl	%ebx,%edi
00000b92	testl	%edi,%edi
00000b94	je	0x00000bda
00000b96	cmpl	%esi,%edi
00000b98	je	0x00000bda
00000b9a	movl	0x14(%edi),%ebx
00000b9d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00000ba4	testl	%edi,%edi
00000ba6	je	0x00000b90
00000ba8	movl	%edi,(%esp)
00000bab	calll	KeyValues::RemoveEverything()
00000bb0	calll	_KeyValuesSystem
00000bb5	movl	(%eax),%ecx
00000bb7	movl	%edi,0x04(%esp)
00000bbb	movl	%eax,(%esp)
00000bbe	call	*0x08(%ecx)
00000bc1	jmp	0x00000b90
00000bc3	movl	%eax,%esi
00000bc5	calll	_KeyValuesSystem
00000bca	movl	(%eax),%ecx
00000bcc	movl	0x08(%ecx),%ecx
00000bcf	movl	%edi,0x04(%esp)
00000bd3	movl	%eax,(%esp)
00000bd6	call	*%ecx
00000bd8	jmp	0x00000b80
00000bda	movl	0x04(%esi),%eax
00000bdd	testl	%eax,%eax
00000bdf	je	0x00000be9
00000be1	movl	%eax,(%esp)
00000be4	calll	operator delete[](void*)
00000be9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000bf0	movl	0x08(%esi),%eax
00000bf3	testl	%eax,%eax
00000bf5	je	0x00000bff
00000bf7	movl	%eax,(%esp)
00000bfa	calll	operator delete[](void*)
00000bff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000c06	addl	$0x0c,%esp
00000c09	popl	%esi
00000c0a	popl	%edi
00000c0b	popl	%ebx
00000c0c	popl	%ebp
00000c0d	ret
00000c0e	calll	std::terminate()
00000c13	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::operator delete(void*):
00000c20	pushl	%ebp
00000c21	movl	%esp,%ebp
00000c23	subl	$0x08,%esp
00000c26	calll	_KeyValuesSystem
00000c2b	movl	(%eax),%ecx
00000c2d	movl	0x08(%ebp),%edx
00000c30	movl	%edx,0x04(%esp)
00000c34	movl	%eax,(%esp)
00000c37	call	*0x08(%ecx)
00000c3a	addl	$0x08,%esp
00000c3d	popl	%ebp
00000c3e	ret
00000c3f	nop
KeyValues::RecursiveSaveToFile(CUtlBuffer&, int, bool, bool):
00000c40	pushl	%ebp
00000c41	movl	%esp,%ebp
00000c43	subl	$0x28,%esp
00000c46	movb	0x18(%ebp),%al
00000c49	movzbl	%al,%eax
00000c4c	movl	%eax,0x18(%esp)
00000c50	movb	0x14(%ebp),%al
00000c53	movzbl	%al,%eax
00000c56	movl	%eax,0x14(%esp)
00000c5a	movl	0x10(%ebp),%eax
00000c5d	movl	%eax,0x10(%esp)
00000c61	movl	0x0c(%ebp),%eax
00000c64	movl	%eax,0x0c(%esp)
00000c68	movl	0x08(%ebp),%eax
00000c6b	movl	%eax,(%esp)
00000c6e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00000c76	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00000c7e	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00000c83	addl	$0x28,%esp
00000c86	popl	%ebp
00000c87	ret
00000c88	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool):
00000c90	pushl	%ebp
00000c91	movl	%esp,%ebp
00000c93	pushl	%ebx
00000c94	pushl	%edi
00000c95	pushl	%esi
00000c96	subl	$0x7c,%esp
00000c99	calll	0x00000c9e
00000c9e	popl	%edi
00000c9f	movl	0x18(%ebp),%eax
00000ca2	movl	0x14(%ebp),%ebx
00000ca5	movl	0x0c(%ebp),%esi
00000ca8	testl	%eax,%eax
00000caa	jg	0x00000cb9
00000cac	movb	$0x01,0xab(%ebp)
00000cb0	testl	%esi,%esi
00000cb2	jne	0x00000d19
00000cb4	jmp	0x00000d3e
00000cb9	movl	%edi,0xb4(%ebp)
00000cbc	movl	%esi,%edi
00000cbe	movl	%eax,%esi
00000cc0	testl	%edi,%edi
00000cc2	je	0x00000ce8
00000cc4	movl	(%edi),%eax
00000cc6	movl	0x10(%ebp),%ecx
00000cc9	movl	%ecx,0x0c(%esp)
00000ccd	movl	0xb4(%ebp),%ecx
00000cd0	leal	0x3a969-0xc9e(%ecx),%ecx
00000cd6	movl	%ecx,0x04(%esp)
00000cda	movl	%edi,(%esp)
00000cdd	movl	$0x00000001,0x08(%esp)
00000ce5	call	*0x04(%eax)
00000ce8	testl	%ebx,%ebx
00000cea	je	0x00000d09
00000cec	movl	0xb4(%ebp),%eax
00000cef	leal	0x3a969-0xc9e(%eax),%eax
00000cf5	movl	%eax,0x04(%esp)
00000cf9	movl	%ebx,(%esp)
00000cfc	movl	$0x00000001,0x08(%esp)
00000d04	calll	CUtlBuffer::Put(void const*, int)
00000d09	decl	%esi
00000d0a	jne	0x00000cc0
00000d0c	movb	$0x01,0xab(%ebp)
00000d10	movl	%edi,%esi
00000d12	testl	%esi,%esi
00000d14	movl	0xb4(%ebp),%edi
00000d17	je	0x00000d3e
00000d19	movl	(%esi),%eax
00000d1b	movl	0x10(%ebp),%ecx
00000d1e	movl	%ecx,0x0c(%esp)
00000d22	leal	0x3a96b-0xc9e(%edi),%ecx
00000d28	movl	%ecx,0x04(%esp)
00000d2c	movl	%esi,(%esp)
00000d2f	movl	$0x00000001,0x08(%esp)
00000d37	call	*0x04(%eax)
00000d3a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000d3e	testl	%ebx,%ebx
00000d40	je	0x00000d5c
00000d42	leal	0x3a96b-0xc9e(%edi),%eax
00000d48	movl	%eax,0x04(%esp)
00000d4c	movl	%ebx,(%esp)
00000d4f	movl	$0x00000001,0x08(%esp)
00000d57	calll	CUtlBuffer::Put(void const*, int)
00000d5c	movl	%edi,%ebx
00000d5e	movl	0x08(%ebp),%edi
00000d61	movl	(%edi),%eax
00000d63	movl	%eax,(%esp)
00000d66	call	*KeyValues::s_pfGetStringForSymbol-0xc9e(%ebx)
00000d6c	movl	%ebx,%ecx
00000d6e	movl	%eax,0x10(%esp)
00000d72	movl	0x14(%ebp),%eax
00000d75	movl	%eax,0x0c(%esp)
00000d79	movl	0x10(%ebp),%ebx
00000d7c	movl	%ebx,0x08(%esp)
00000d80	movl	%esi,0x04(%esp)
00000d84	movl	%edi,(%esp)
00000d87	movl	%ecx,%edi
00000d89	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00000d8e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000d92	jne	0x00000db2
00000d94	movl	(%esi),%eax
00000d96	movl	%ebx,0x0c(%esp)
00000d9a	leal	0x3a96d-0xc9e(%edi),%ecx
00000da0	movl	%ecx,0x04(%esp)
00000da4	movl	%esi,(%esp)
00000da7	movl	$0x00000002,0x08(%esp)
00000daf	call	*0x04(%eax)
00000db2	movl	%edi,0xb4(%ebp)
00000db5	movl	%esi,%edi
00000db7	movl	0x14(%ebp),%ebx
00000dba	testl	%ebx,%ebx
00000dbc	je	0x00000ddb
00000dbe	movl	0xb4(%ebp),%eax
00000dc1	leal	0x3a96d-0xc9e(%eax),%eax
00000dc7	movl	%eax,0x04(%esp)
00000dcb	movl	%ebx,(%esp)
00000dce	movl	$0x00000002,0x08(%esp)
00000dd6	calll	CUtlBuffer::Put(void const*, int)
00000ddb	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebp)
00000ddf	jle	0x00000e3e
00000de1	movl	0x18(%ebp),%esi
00000de4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00000df0	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000df4	jne	0x00000e1a
00000df6	movl	(%edi),%eax
00000df8	movl	0x10(%ebp),%ecx
00000dfb	movl	%ecx,0x0c(%esp)
00000dff	movl	0xb4(%ebp),%ecx
00000e02	leal	0x3a969-0xc9e(%ecx),%ecx
00000e08	movl	%ecx,0x04(%esp)
00000e0c	movl	%edi,(%esp)
00000e0f	movl	$0x00000001,0x08(%esp)
00000e17	call	*0x04(%eax)
00000e1a	testl	%ebx,%ebx
00000e1c	je	0x00000e3b
00000e1e	movl	0xb4(%ebp),%eax
00000e21	leal	0x3a969-0xc9e(%eax),%eax
00000e27	movl	%eax,0x04(%esp)
00000e2b	movl	%ebx,(%esp)
00000e2e	movl	$0x00000001,0x08(%esp)
00000e36	calll	CUtlBuffer::Put(void const*, int)
00000e3b	decl	%esi
00000e3c	jne	0x00000df0
00000e3e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000e42	movl	0x08(%ebp),%esi
00000e45	jne	0x00000e6b
00000e47	movl	(%edi),%eax
00000e49	movl	0x10(%ebp),%ecx
00000e4c	movl	%ecx,0x0c(%esp)
00000e50	movl	0xb4(%ebp),%ecx
00000e53	leal	0x3a970-0xc9e(%ecx),%ecx
00000e59	movl	%ecx,0x04(%esp)
00000e5d	movl	%edi,(%esp)
00000e60	movl	$0x00000002,0x08(%esp)
00000e68	call	*0x04(%eax)
00000e6b	testl	%ebx,%ebx
00000e6d	je	0x00000e8c
00000e6f	movl	0xb4(%ebp),%eax
00000e72	leal	0x3a970-0xc9e(%eax),%eax
00000e78	movl	%eax,0x04(%esp)
00000e7c	movl	%ebx,(%esp)
00000e7f	movl	$0x00000002,0x08(%esp)
00000e87	calll	CUtlBuffer::Put(void const*, int)
00000e8c	cmpb	$0x01,0x1c(%ebp)
00000e90	jne	0x000010cb
00000e96	xorps	%xmm0,%xmm0
00000e99	movaps	%xmm0,0xb8(%ebp)
00000e9d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd0(%ebp)
00000ea1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xcc(%ebp)
00000ea8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00000eaf	movl	0x18(%esi),%edi
00000eb2	testl	%edi,%edi
00000eb4	jne	0x00000ec7
00000eb6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb0(%ebp)
00000ebd	xorl	%ecx,%ecx
00000ebf	movb	0x20(%ebp),%al
00000ec2	jmp	0x00000ff5
00000ec7	xorl	%eax,%eax
00000ec9	xorl	%ecx,%ecx
00000ecb	movl	%eax,%esi
00000ecd	jmp	0x00000f0f
00000ecf	nop
00000ed0	movl	%edx,0xac(%ebp)
00000ed3	shll	$0x02,%eax
00000ed6	movl	%eax,0x08(%esp)
00000eda	leal	(%ecx,%esi,4),%eax
00000edd	movl	%eax,0x04(%esp)
00000ee1	leal	(%ecx,%ebx,4),%eax
00000ee4	movl	%eax,(%esp)
00000ee7	calll	_memmove
00000eec	movl	0xb8(%ebp),%ecx
00000eef	shll	$0x02,%esi
00000ef2	addl	%ecx,%esi
00000ef4	je	0x00000ef8
00000ef6	movl	%edi,(%esi)
00000ef8	movl	0x14(%edi),%edi
00000efb	testl	%edi,%edi
00000efd	movl	0x14(%ebp),%ebx
00000f00	movl	0xac(%ebp),%eax
00000f03	je	0x00000f99
00000f09	movl	0xbc(%ebp),%eax
00000f0c	movl	0xb0(%ebp),%esi
00000f0f	movb	$0x01,0xd0(%ebp)
00000f13	leal	0x01(%esi),%ebx
00000f16	cmpl	%eax,%ebx
00000f18	movl	%esi,%edx
00000f1a	jle	0x00000f35
00000f1c	movl	%ebx,%ecx
00000f1e	subl	%eax,%ecx
00000f20	movl	%ecx,0x04(%esp)
00000f24	leal	0xb8(%ebp),%eax
00000f27	movl	%eax,(%esp)
00000f2a	calll	CUtlMemory<KeyValues*, int>::Grow(int)
00000f2f	movl	0xb8(%ebp),%ecx
00000f32	movl	0xc4(%ebp),%edx
00000f35	leal	0x01(%edx),%eax
00000f38	movl	%eax,0xb0(%ebp)
00000f3b	movl	%eax,0xc4(%ebp)
00000f3e	movl	%ecx,0xc8(%ebp)
00000f41	subl	%esi,%eax
00000f43	decl	%eax
00000f44	testl	%eax,%eax
00000f46	jg	0x00000ed0
00000f48	movl	%edx,0xac(%ebp)
00000f4b	jmp	0x00000eef
00000f4d	jmp	0x00000f4f
00000f4f	movl	%eax,%esi
00000f51	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
00000f58	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00000f5c	jns	0x00000f69
00000f5e	movl	%edi,0xc8(%ebp)
00000f61	movl	%esi,(%esp)
00000f64	calll	__Unwind_Resume
00000f69	testl	%edi,%edi
00000f6b	je	0x00000f7c
00000f6d	movl	%edi,(%esp)
00000f70	calll	_free
00000f75	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00000f7c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00000f83	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00000f8a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00000f91	movl	%esi,(%esp)
00000f94	calll	__Unwind_Resume
00000f99	testb	$0x01,0xd0(%ebp)
00000f9d	jne	0x00000fa4
00000f9f	movb	0x20(%ebp),%al
00000fa2	jmp	0x00000ff5
00000fa4	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd0(%ebp)
00000fa8	testl	%eax,%eax
00000faa	jg	0x00000fb1
00000fac	movb	0x20(%ebp),%al
00000faf	jmp	0x00000ff5
00000fb1	movl	0xcc(%ebp),%eax
00000fb4	movl	%eax,0xe8(%ebp)
00000fb7	leal	0xe0(%ebp),%eax
00000fba	movl	%eax,0xec(%ebp)
00000fbd	leal	0xe8(%ebp),%eax
00000fc0	movl	0xb4(%ebp),%edx
00000fc3	movl	%ecx,%esi
00000fc5	movl	0x42cf0-0xc9e(%edx),%ecx
00000fcb	movl	%eax,(%ecx)
00000fcd	leal	CUtlSortVector<KeyValues*, CUtlSortVectorKeyValuesByName, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> > >::CompareHelper(KeyValues* const*, KeyValues* const*)-0xc9e(%edx),%eax
00000fd3	movl	%eax,0x0c(%esp)
00000fd7	movl	0xb0(%ebp),%eax
00000fda	movl	%eax,0x04(%esp)
00000fde	movl	%esi,(%esp)
00000fe1	movl	%esi,%edi
00000fe3	movl	$0x00000004,0x08(%esp)
00000feb	calll	_qsort
00000ff0	movb	0x20(%ebp),%al
00000ff3	movl	%edi,%ecx
00000ff5	xorl	%esi,%esi
00000ff7	movzbl	%al,%eax
00000ffa	movl	%eax,0xac(%ebp)
00000ffd	nopl	(%eax)
00001000	cmpl	0xb0(%ebp),%esi
00001003	jge	0x00001046
00001005	movl	(%ecx,%esi,4),%eax
00001008	movl	%ecx,%edi
0000100a	movl	0xac(%ebp),%ecx
0000100d	movl	%ecx,0x1c(%esp)
00001011	movl	0x18(%ebp),%ecx
00001014	movl	%ecx,0x14(%esp)
00001018	movl	%ebx,0x10(%esp)
0000101c	movl	0x10(%ebp),%ecx
0000101f	movl	%ecx,0x0c(%esp)
00001023	movl	0x0c(%ebp),%ecx
00001026	movl	%ecx,0x08(%esp)
0000102a	movl	%eax,0x04(%esp)
0000102e	movl	0x08(%ebp),%eax
00001031	movl	%eax,(%esp)
00001034	movl	$0x00000001,0x18(%esp)
0000103c	calll	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001041	incl	%esi
00001042	movl	%edi,%ecx
00001044	jmp	0x00001000
00001046	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
0000104d	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00001051	jns	0x00001067
00001053	movl	%ecx,0xc8(%ebp)
00001056	movl	0x0c(%ebp),%edi
00001059	movl	%edi,%ecx
0000105b	movl	0x18(%ebp),%edi
0000105e	movl	%edi,%edx
00001060	movl	%ebx,%edi
00001062	jmp	0x00001126
00001067	movl	%ebx,%esi
00001069	testl	%ecx,%ecx
0000106b	jne	0x00001093
0000106d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00001074	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
0000107b	movl	0x0c(%ebp),%edi
0000107e	movl	%edi,%ecx
00001080	movl	0x18(%ebp),%edi
00001083	movl	%edi,%edx
00001085	movl	%esi,%edi
00001087	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000108e	jmp	0x00001126
00001093	movl	%ecx,(%esp)
00001096	calll	_free
0000109b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
000010a2	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000010a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000010ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
000010b4	movl	0x0c(%ebp),%edi
000010b7	movl	%edi,%ecx
000010b9	movl	0x18(%ebp),%edi
000010bc	movl	%edi,%edx
000010be	movl	%esi,%edi
000010c0	js	0x00001126
000010c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000010c9	jmp	0x00001126
000010cb	movl	%edi,%ecx
000010cd	movl	0x18(%esi),%esi
000010d0	testl	%esi,%esi
000010d2	movl	0x18(%ebp),%edi
000010d5	movl	%edi,%edx
000010d7	movb	0x20(%ebp),%al
000010da	movl	%ebx,%edi
000010dc	je	0x00001126
000010de	nop
000010e0	movb	%al,%bl
000010e2	movzbl	%bl,%eax
000010e5	movl	%eax,0x1c(%esp)
000010e9	movl	%edx,0x14(%esp)
000010ed	movl	%edi,0x10(%esp)
000010f1	movl	0x10(%ebp),%eax
000010f4	movl	%eax,0x0c(%esp)
000010f8	movl	%ecx,0x08(%esp)
000010fc	movl	%esi,0x04(%esp)
00001100	movl	0x08(%ebp),%eax
00001103	movl	%eax,(%esp)
00001106	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esp)
0000110e	movl	%ecx,%edi
00001110	calll	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001115	movl	0x18(%ebp),%edx
00001118	movl	%edi,%ecx
0000111a	movl	0x14(%ebp),%edi
0000111d	movb	%bl,%al
0000111f	movl	0x14(%esi),%esi
00001122	testl	%esi,%esi
00001124	jne	0x000010e0
00001126	testl	%edx,%edx
00001128	movl	%ecx,%esi
0000112a	movl	%edi,%eax
0000112c	movl	%edx,%edi
0000112e	movl	%eax,%ebx
00001130	jle	0x0000118e
00001132	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001140	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00001144	jne	0x0000116a
00001146	movl	(%esi),%eax
00001148	movl	0x10(%ebp),%ecx
0000114b	movl	%ecx,0x0c(%esp)
0000114f	movl	0xb4(%ebp),%ecx
00001152	leal	0x3a969-0xc9e(%ecx),%ecx
00001158	movl	%ecx,0x04(%esp)
0000115c	movl	%esi,(%esp)
0000115f	movl	$0x00000001,0x08(%esp)
00001167	call	*0x04(%eax)
0000116a	testl	%ebx,%ebx
0000116c	je	0x0000118b
0000116e	movl	0xb4(%ebp),%eax
00001171	leal	0x3a969-0xc9e(%eax),%eax
00001177	movl	%eax,0x04(%esp)
0000117b	movl	%ebx,(%esp)
0000117e	movl	$0x00000001,0x08(%esp)
00001186	calll	CUtlBuffer::Put(void const*, int)
0000118b	decl	%edi
0000118c	jne	0x00001140
0000118e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00001192	movl	0xb4(%ebp),%edi
00001195	jne	0x000011b8
00001197	movl	(%esi),%eax
00001199	movl	0x10(%ebp),%ecx
0000119c	movl	%ecx,0x0c(%esp)
000011a0	leal	0x3a973-0xc9e(%edi),%ecx
000011a6	movl	%ecx,0x04(%esp)
000011aa	movl	%esi,(%esp)
000011ad	movl	$0x00000002,0x08(%esp)
000011b5	call	*0x04(%eax)
000011b8	testl	%ebx,%ebx
000011ba	je	0x000011d6
000011bc	leal	0x3a973-0xc9e(%edi),%eax
000011c2	movl	%eax,0x04(%esp)
000011c6	movl	%ebx,(%esp)
000011c9	movl	$0x00000002,0x08(%esp)
000011d1	calll	CUtlBuffer::Put(void const*, int)
000011d6	addl	$0x7c,%esp
000011d9	popl	%esi
000011da	popl	%edi
000011db	popl	%ebx
000011dc	popl	%ebp
000011dd	ret
000011de	nop
KeyValues::ChainKeyValue(KeyValues*):
000011e0	movl	0x08(%esp),%eax
000011e4	movl	0x04(%esp),%ecx
000011e8	movl	%eax,0x1c(%ecx)
000011eb	ret
000011ec	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::GetName() const:
000011f0	pushl	%ebp
000011f1	movl	%esp,%ebp
000011f3	subl	$0x08,%esp
000011f6	calll	0x000011fb
000011fb	popl	%eax
000011fc	movl	0x08(%ebp),%ecx
000011ff	movl	(%ecx),%ecx
00001201	movl	%ecx,(%esp)
00001204	call	*KeyValues::s_pfGetStringForSymbol-0x11fb(%eax)
0000120a	addl	$0x08,%esp
0000120d	popl	%ebp
0000120e	ret
0000120f	nop
KeyValues::ReadToken(CUtlBuffer&, bool&, bool&):
00001210	pushl	%ebp
00001211	movl	%esp,%ebp
00001213	pushl	%ebx
00001214	pushl	%edi
00001215	pushl	%esi
00001216	subl	$0x1c,%esp
00001219	calll	0x0000121e
0000121e	popl	%eax
0000121f	movl	%eax,0xf0(%ebp)
00001222	movl	0x10(%ebp),%ebx
00001225	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
00001228	movl	0x14(%ebp),%eax
0000122b	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
0000122e	xorl	%esi,%esi
00001230	movl	0x0c(%ebp),%eax
00001233	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00001237	jne	0x00001424
0000123d	movl	%eax,%esi
0000123f	nop
00001240	movl	%esi,(%esp)
00001243	calll	CUtlBuffer::EatWhiteSpace()
00001248	movl	%esi,%edi
0000124a	xorl	%esi,%esi
0000124c	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00001250	jne	0x00001424
00001256	movl	%edi,(%esp)
00001259	calll	CUtlBuffer::EatCPPComment()
0000125e	testb	%al,%al
00001260	movl	%edi,%esi
00001262	jne	0x00001240
00001264	movl	%esi,(%esp)
00001267	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000126f	movl	$0x00000001,0x04(%esp)
00001277	movl	%esi,%edi
00001279	xorl	%esi,%esi
0000127b	calll	CUtlBuffer::PeekGet(int, int)
00001280	testl	%eax,%eax
00001282	je	0x00001424
00001288	movb	(%eax),%al
0000128a	cmpb	$0x7d,%al
0000128c	je	0x000013f6
00001292	cmpb	$0x7b,%al
00001294	je	0x000013f6
0000129a	cmpb	$0x22,%al
0000129c	je	0x000013bb
000012a2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
000012a9	xorb	%bh,%bh
000012ab	xorb	%bl,%bl
000012ad	jmp	0x000012ed
000012af	nop
000012b0	movl	%eax,0xec(%ebp)
000012b3	testb	$0x01,%bh
000012b6	jne	0x000012d5
000012b8	movl	0xf0(%ebp),%ecx
000012bb	leal	0x3a90c-0x121e(%ecx),%eax
000012c1	movl	%eax,0x04(%esp)
000012c5	leal	_g_KeyValuesErrorStack-0x121e(%ecx),%eax
000012cb	movl	%eax,(%esp)
000012ce	calll	CKeyValuesErrorStack::ReportError(char const*)
000012d3	movb	$0x01,%bh
000012d5	movl	%edi,(%esp)
000012d8	movl	$0x00000001,0x08(%esp)
000012e0	movl	$0x00000001,0x04(%esp)
000012e8	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
000012ed	movl	%edi,(%esp)
000012f0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000012f8	movl	$0x00000001,0x04(%esp)
00001300	calll	CUtlBuffer::PeekGet(int, int)
00001305	movl	%eax,%esi
00001307	testl	%esi,%esi
00001309	je	0x00001369
0000130b	movsbl	(%esi),%eax
0000130e	cmpl	$0x21,%eax
00001311	jg	0x00001319
00001313	testb	%al,%al
00001315	jne	0x00001321
00001317	jmp	0x00001369
00001319	cmpb	$0x5a,%al
0000131b	jg	0x00001344
0000131d	cmpb	$0x22,%al
0000131f	je	0x00001369
00001321	movsbl	%al,%ecx
00001324	testb	%al,%al
00001326	js	0x00001382
00001328	movl	%ecx,%eax
0000132a	movb	%bl,%cl
0000132c	movl	0xf0(%ebp),%edx
0000132f	movl	0x42ce4-0x121e(%edx),%edx
00001335	movl	0x34(%edx,%eax,4),%eax
00001339	movl	$0x00004000,%edx
0000133e	andl	%edx,%eax
00001340	movb	%cl,%bl
00001342	jmp	0x00001392
00001344	cmpb	$0x7a,%al
00001346	jg	0x00001361
00001348	movb	$0x01,%cl
0000134a	cmpb	$0x5b,%al
0000134c	je	0x0000132c
0000134e	cmpb	$0x5d,%al
00001350	jne	0x00001321
00001352	testb	$0x01,%bl
00001355	je	0x0000132a
00001357	movl	0x14(%ebp),%eax
0000135a	movb	$0x01,(%eax)
0000135d	movb	(%esi),%al
0000135f	jmp	0x00001321
00001361	cmpb	$0x7b,%al
00001363	je	0x00001369
00001365	cmpb	$0x7d,%al
00001367	jne	0x00001321
00001369	movl	0xf0(%ebp),%eax
0000136c	movl	0xec(%ebp),%ecx
0000136f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),s_pTokenBuf-0x121e(%eax,%ecx)
00001377	leal	s_pTokenBuf-0x121e(%eax),%esi
0000137d	jmp	0x00001424
00001382	movl	%ecx,(%esp)
00001385	movl	$0x00004000,0x04(%esp)
0000138d	calll	___maskrune
00001392	testl	%eax,%eax
00001394	jne	0x00001369
00001396	movl	0xec(%ebp),%eax
00001399	cmpl	$0x00000ffe,%eax
0000139e	jg	0x000012b0
000013a4	movl	%eax,%edx
000013a6	movb	(%esi),%al
000013a8	movl	0xf0(%ebp),%ecx
000013ab	movb	%al,s_pTokenBuf-0x121e(%ecx,%edx)
000013b2	incl	%edx
000013b3	movl	%edx,0xec(%ebp)
000013b6	jmp	0x000012d5
000013bb	movb	$0x01,(%ebx)
000013be	movl	0x08(%ebp),%eax
000013c1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
000013c5	je	0x000013ce
000013c7	calll	GetCStringCharConversion()
000013cc	jmp	0x000013d3
000013ce	calll	GetNoEscCharConversion()
000013d3	movl	0xf0(%ebp),%ecx
000013d6	leal	s_pTokenBuf-0x121e(%ecx),%esi
000013dc	movl	%esi,0x08(%esp)
000013e0	movl	%eax,0x04(%esp)
000013e4	movl	%edi,(%esp)
000013e7	movl	$0x00001000,0x0c(%esp)
000013ef	calll	CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
000013f4	jmp	0x00001424
000013f6	movl	0xf0(%ebp),%esi
000013f9	movb	%al,s_pTokenBuf-0x121e(%esi)
000013ff	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),s_pTokenBuf-0x121e+0x00000001(%esi)
00001406	movl	%edi,(%esp)
00001409	movl	$0x00000001,0x08(%esp)
00001411	movl	$0x00000001,0x04(%esp)
00001419	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
0000141e	leal	s_pTokenBuf-0x121e(%esi),%esi
00001424	movl	%esi,%eax
00001426	addl	$0x1c,%esp
00001429	popl	%esi
0000142a	popl	%edi
0000142b	popl	%ebx
0000142c	popl	%ebp
0000142d	ret
0000142e	nop
KeyValues::UsesEscapeSequences(bool):
00001430	movb	0x08(%esp),%al
00001434	movl	0x04(%esp),%ecx
00001438	movb	%al,0x11(%ecx)
0000143b	ret
0000143c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::UsesConditionals(bool):
00001440	movb	0x08(%esp),%al
00001444	movl	0x04(%esp),%ecx
00001448	movb	%al,0x12(%ecx)
0000144b	ret
0000144c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*):
00001450	pushl	%ebp
00001451	movl	%esp,%ebp
00001453	pushl	%ebx
00001454	pushl	%edi
00001455	pushl	%esi
00001456	subl	$0x2c,%esp
00001459	calll	0x0000145e
0000145e	popl	%ecx
0000145f	movl	0x0c(%ebp),%edi
00001462	movl	(%edi),%eax
00001464	movl	0x14(%ebp),%edx
00001467	movl	%edx,0x0c(%esp)
0000146b	leal	0x3a920-0x145e(%ecx),%ecx
00001471	movl	%ecx,0x08(%esp)
00001475	movl	0x10(%ebp),%ecx
00001478	movl	%ecx,0x04(%esp)
0000147c	movl	%edi,(%esp)
0000147f	call	*0x08(%eax)
00001482	movl	%eax,%esi
00001484	xorb	%al,%al
00001486	testl	%esi,%esi
00001488	je	0x00001591
0000148e	movl	(%edi),%eax
00001490	movl	%esi,0x04(%esp)
00001494	movl	%edi,(%esp)
00001497	call	*0x18(%eax)
0000149a	movl	%eax,0xec(%ebp)
0000149d	movl	0xfc(%edi),%eax
000014a0	leal	0xf0(%ebp),%ecx
000014a3	movl	%ecx,0x08(%esp)
000014a7	movl	%esi,0x04(%esp)
000014ab	movl	%esi,0xe8(%ebp)
000014ae	leal	0xfc(%edi),%esi
000014b1	movl	%edi,%ebx
000014b3	movl	%esi,(%esp)
000014b6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
000014be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000014c6	call	*0x00000150(%eax)
000014cc	testb	%al,%al
000014ce	jne	0x000014d8
000014d0	movl	0xec(%ebp),%edi
000014d3	addl	$0x02,%edi
000014d6	jmp	0x000014e6
000014d8	movl	0xf0(%ebp),%edi
000014db	movl	0xec(%ebp),%eax
000014de	leal	0x01(%eax,%edi),%eax
000014e2	negl	%edi
000014e4	andl	%eax,%edi
000014e6	movl	0xfc(%ebx),%eax
000014e9	movl	%edi,0x08(%esp)
000014ed	movl	0xe8(%ebp),%ecx
000014f0	movl	%ecx,0x04(%esp)
000014f4	movl	%esi,(%esp)
000014f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000014ff	call	*0x00000154(%eax)
00001505	movl	0xfc(%ebx),%edx
00001508	movl	0xe8(%ebp),%ecx
0000150b	movl	%ecx,0x10(%esp)
0000150f	movl	0xec(%ebp),%ecx
00001512	movl	%ecx,0x0c(%esp)
00001516	movl	%edi,0x08(%esp)
0000151a	movl	%ebx,%edi
0000151c	movl	%eax,0x04(%esp)
00001520	movl	%esi,(%esp)
00001523	movl	%esi,%ebx
00001525	movl	%eax,%esi
00001527	call	*0x00000118(%edx)
0000152d	movl	%eax,0xe4(%ebp)
00001530	movl	(%edi),%eax
00001532	movl	0xe8(%ebp),%ecx
00001535	movl	%ecx,0x04(%esp)
00001539	movl	%edi,(%esp)
0000153c	call	*0x0c(%eax)
0000153f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00001543	setne	%al
00001546	je	0x00001578
00001548	movl	0xec(%ebp),%eax
0000154b	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi,%eax)
0000154f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x01(%esi,%eax)
00001554	movl	%edi,0x0c(%esp)
00001558	movl	%esi,0x08(%esp)
0000155c	movl	0x10(%ebp),%eax
0000155f	movl	%eax,0x04(%esp)
00001563	movl	0x08(%ebp),%eax
00001566	movl	%eax,(%esp)
00001569	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
00001571	calll	KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
00001576	movb	$0x01,%al
00001578	movb	%al,0xec(%ebp)
0000157b	movl	(%ebx),%eax
0000157d	movl	%esi,0x04(%esp)
00001581	movl	%ebx,(%esp)
00001584	call	*0x00000158(%eax)
0000158a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
0000158e	setne	%al
00001591	movzbl	%al,%eax
00001594	addl	$0x2c,%esp
00001597	popl	%esi
00001598	popl	%edi
00001599	popl	%ebx
0000159a	popl	%ebp
0000159b	ret
0000159c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*):
000015a0	pushl	%ebp
000015a1	movl	%esp,%ebp
000015a3	pushl	%ebx
000015a4	pushl	%edi
000015a5	pushl	%esi
000015a6	subl	$0x5c,%esp
000015a9	movl	0x10(%ebp),%ebx
000015ac	testl	%ebx,%ebx
000015ae	je	0x00001693
000015b4	movl	%ebx,(%esp)
000015b7	calll	_strlen
000015bc	movl	%eax,%esi
000015be	movl	%esi,0x08(%esp)
000015c2	movl	%ebx,0x04(%esp)
000015c6	leal	0xb8(%ebp),%eax
000015c9	movl	%eax,(%esp)
000015cc	movl	$0x00000009,0x0c(%esp)
000015d4	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
000015d9	cmpl	$0x03,%esi
000015dc	jl	0x00001649
000015de	cmpb	$0xff,(%ebx)
000015e1	jne	0x00001649
000015e3	cmpb	$0xfe,0x01(%ebx)
000015e7	jne	0x00001649
000015e9	addl	$0x02,%ebx
000015ec	movl	%ebx,(%esp)
000015ef	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000015f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
000015ff	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00001604	movl	%eax,%esi
00001606	testl	%esi,%esi
00001608	movl	$0xffffffff,%eax
0000160d	cmovnsl	%esi,%eax
00001610	movl	%eax,(%esp)
00001613	calll	operator new[](unsigned long)
00001618	movl	%eax,%edi
0000161a	movl	%esi,0x08(%esp)
0000161e	movl	%edi,0x04(%esp)
00001622	movl	%ebx,(%esp)
00001625	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
0000162a	movl	%esi,0x0c(%esp)
0000162e	movl	%esi,0x08(%esp)
00001632	movl	%edi,0x04(%esp)
00001636	leal	0xb8(%ebp),%eax
00001639	movl	%eax,(%esp)
0000163c	movl	$0x00000009,0x10(%esp)
00001644	calll	CUtlBuffer::AssumeMemory(void*, int, int, int)
00001649	movl	0x18(%ebp),%edx
0000164c	movl	0x14(%ebp),%esi
0000164f	movl	0x0c(%ebp),%eax
00001652	movl	0x08(%ebp),%ecx
00001655	movl	%edx,0x10(%esp)
00001659	movl	%esi,0x0c(%esp)
0000165d	leal	0xb8(%ebp),%edx
00001660	movl	%edx,0x08(%esp)
00001664	movl	%eax,0x04(%esp)
00001668	movl	%ecx,(%esp)
0000166b	calll	KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*)
00001670	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00001674	js	0x00001693
00001676	movl	0xb8(%ebp),%eax
00001679	testl	%eax,%eax
0000167b	je	0x0000168c
0000167d	movl	%eax,(%esp)
00001680	calll	_free
00001685	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
0000168c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00001693	movl	$0x00000001,%eax
00001698	addl	$0x5c,%esp
0000169b	popl	%esi
0000169c	popl	%edi
0000169d	popl	%ebx
0000169e	popl	%ebp
0000169f	ret
000016a0	movl	%eax,%esi
000016a2	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000016a6	js	0x000016c5
000016a8	movl	0xb8(%ebp),%eax
000016ab	testl	%eax,%eax
000016ad	je	0x000016be
000016af	movl	%eax,(%esp)
000016b2	calll	_free
000016b7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
000016be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000016c5	movl	%esi,(%esp)
000016c8	calll	__Unwind_Resume
000016cd	nopl	(%eax)
KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*, bool, bool):
000016d0	pushl	%ebp
000016d1	movl	%esp,%ebp
000016d3	pushl	%ebx
000016d4	pushl	%edi
000016d5	pushl	%esi
000016d6	subl	$0x1c,%esp
000016d9	calll	0x000016de
000016de	popl	%edi
000016df	movl	0x0c(%ebp),%edx
000016e2	movl	(%edx),%eax
000016e4	movl	0x14(%ebp),%ebx
000016e7	movl	%ebx,0x0c(%esp)
000016eb	leal	0x3a923-0x16de(%edi),%ecx
000016f1	movl	%ecx,0x08(%esp)
000016f5	movl	0x10(%ebp),%ecx
000016f8	movl	%ecx,0x04(%esp)
000016fc	movl	%edx,(%esp)
000016ff	call	*0x08(%eax)
00001702	movl	%eax,%esi
00001704	testl	%esi,%esi
00001706	jne	0x0000173d
00001708	leal	0x3a926-0x16de(%edi),%eax
0000170e	movl	%eax,0x04(%esp)
00001712	leal	0x3a964-0x16de(%edi),%eax
00001718	testl	%ebx,%ebx
0000171a	cmovel	%eax,%ebx
0000171d	movl	%ebx,0x0c(%esp)
00001721	movl	0x10(%ebp),%ecx
00001724	testl	%ecx,%ecx
00001726	cmovnel	%ecx,%eax
00001729	movl	%eax,0x08(%esp)
0000172d	movl	$0x00000001,(%esp)
00001734	calll	_DevMsg
00001739	xorb	%al,%al
0000173b	jmp	0x00001785
0000173d	movb	0x1c(%ebp),%dl
00001740	movb	0x18(%ebp),%cl
00001743	movl	0x08(%ebp),%eax
00001746	movzbl	%dl,%edx
00001749	movl	%edx,0x18(%esp)
0000174d	movzbl	%cl,%ecx
00001750	movl	%ecx,0x14(%esp)
00001754	movl	%esi,0x08(%esp)
00001758	movl	0x0c(%ebp),%edi
0000175b	movl	%edi,0x04(%esp)
0000175f	movl	%eax,(%esp)
00001762	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
0000176a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
00001772	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001777	movl	(%edi),%eax
00001779	movl	%esi,0x04(%esp)
0000177d	movl	%edi,(%esp)
00001780	call	*0x0c(%eax)
00001783	movb	$0x01,%al
00001785	movzbl	%al,%eax
00001788	addl	$0x1c,%esp
0000178b	popl	%esi
0000178c	popl	%edi
0000178d	popl	%ebx
0000178e	popl	%ebp
0000178f	ret
KeyValues::WriteIndents(IBaseFileSystem*, void*, CUtlBuffer*, int):
00001790	pushl	%ebp
00001791	movl	%esp,%ebp
00001793	pushl	%ebx
00001794	pushl	%edi
00001795	pushl	%esi
00001796	subl	$0x1c,%esp
00001799	calll	0x0000179e
0000179e	popl	%eax
0000179f	movl	%eax,0xf0(%ebp)
000017a2	movl	0x18(%ebp),%edi
000017a5	testl	%edi,%edi
000017a7	jle	0x0000180c
000017a9	movl	0x14(%ebp),%ecx
000017ac	movl	0x0c(%ebp),%edx
000017af	nop
000017b0	movl	%ecx,%ebx
000017b2	testl	%edx,%edx
000017b4	je	0x000017de
000017b6	movl	(%edx),%eax
000017b8	movl	0x10(%ebp),%ecx
000017bb	movl	%ecx,0x0c(%esp)
000017bf	movl	0xf0(%ebp),%ecx
000017c2	leal	0x3a969-0x179e(%ecx),%ecx
000017c8	movl	%ecx,0x04(%esp)
000017cc	movl	%edx,(%esp)
000017cf	movl	$0x00000001,0x08(%esp)
000017d7	movl	%edx,%esi
000017d9	call	*0x04(%eax)
000017dc	movl	%esi,%edx
000017de	movl	%edx,%esi
000017e0	movl	%ebx,%ecx
000017e2	testl	%ecx,%ecx
000017e4	je	0x00001807
000017e6	movl	0xf0(%ebp),%eax
000017e9	leal	0x3a969-0x179e(%eax),%eax
000017ef	movl	%eax,0x04(%esp)
000017f3	movl	%ecx,(%esp)
000017f6	movl	$0x00000001,0x08(%esp)
000017fe	movl	%ecx,%ebx
00001800	calll	CUtlBuffer::Put(void const*, int)
00001805	movl	%ebx,%ecx
00001807	decl	%edi
00001808	movl	%esi,%edx
0000180a	jne	0x000017b0
0000180c	addl	$0x1c,%esp
0000180f	popl	%esi
00001810	popl	%edi
00001811	popl	%ebx
00001812	popl	%ebp
00001813	ret
00001814	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::InternalWrite(IBaseFileSystem*, void*, CUtlBuffer*, void const*, int):
00001820	pushl	%ebp
00001821	movl	%esp,%ebp
00001823	pushl	%edi
00001824	pushl	%esi
00001825	subl	$0x10,%esp
00001828	movl	0x1c(%ebp),%esi
0000182b	movl	0x18(%ebp),%edi
0000182e	movl	0x0c(%ebp),%eax
00001831	testl	%eax,%eax
00001833	je	0x0000184c
00001835	movl	0x10(%ebp),%edx
00001838	movl	(%eax),%ecx
0000183a	movl	%edx,0x0c(%esp)
0000183e	movl	%esi,0x08(%esp)
00001842	movl	%edi,0x04(%esp)
00001846	movl	%eax,(%esp)
00001849	call	*0x04(%ecx)
0000184c	movl	0x14(%ebp),%eax
0000184f	testl	%eax,%eax
00001851	je	0x00001863
00001853	movl	%esi,0x08(%esp)
00001857	movl	%edi,0x04(%esp)
0000185b	movl	%eax,(%esp)
0000185e	calll	CUtlBuffer::Put(void const*, int)
00001863	addl	$0x10,%esp
00001866	popl	%esi
00001867	popl	%edi
00001868	popl	%ebp
00001869	ret
0000186a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*):
00001870	pushl	%ebp
00001871	movl	%esp,%ebp
00001873	pushl	%ebx
00001874	pushl	%edi
00001875	pushl	%esi
00001876	subl	$0x0c,%esp
00001879	calll	0x0000187e
0000187e	popl	%eax
0000187f	movl	0x42cec-0x187e(%eax),%eax
00001885	movl	%eax,0xec(%ebp)
00001888	movl	(%eax),%eax
0000188a	movl	%eax,0xf0(%ebp)
0000188d	subl	$0x10,%esp
00001890	movl	0x18(%ebp),%esi
00001893	movl	%esi,(%esp)
00001896	calll	_strlen
0000189b	addl	$0x10,%esp
0000189e	leal	0x11(%eax,%eax),%ecx
000018a2	andl	$0xf0,%ecx
000018a5	movl	%esp,%ebx
000018a7	subl	%ecx,%ebx
000018a9	movl	%ebx,%esp
000018ab	testl	%eax,%eax
000018ad	js	0x000018df
000018af	movl	0x08(%ebp),%edi
000018b2	incl	%eax
000018b3	xorl	%edx,%edx
000018b5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000018c0	movb	(%esi),%cl
000018c2	cmpb	$0x22,%cl
000018c5	je	0x000018d2
000018c7	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%edi)
000018cb	je	0x000018d7
000018cd	cmpb	$0x5c,%cl
000018d0	jne	0x000018d7
000018d2	movb	$0x5c,(%ebx,%edx)
000018d6	incl	%edx
000018d7	movb	%cl,(%ebx,%edx)
000018da	incl	%esi
000018db	incl	%edx
000018dc	decl	%eax
000018dd	jne	0x000018c0
000018df	movl	0x0c(%ebp),%edi
000018e2	subl	$0x10,%esp
000018e5	movl	%ebx,(%esp)
000018e8	calll	_strlen
000018ed	addl	$0x10,%esp
000018f0	movl	%eax,%esi
000018f2	testl	%edi,%edi
000018f4	je	0x00001913
000018f6	movl	0x10(%ebp),%ecx
000018f9	movl	(%edi),%eax
000018fb	subl	$0x10,%esp
000018fe	movl	%ecx,0x0c(%esp)
00001902	movl	%esi,0x08(%esp)
00001906	movl	%ebx,0x04(%esp)
0000190a	movl	%edi,(%esp)
0000190d	call	*0x04(%eax)
00001910	addl	$0x10,%esp
00001913	movl	0x14(%ebp),%eax
00001916	testl	%eax,%eax
00001918	je	0x00001930
0000191a	subl	$0x10,%esp
0000191d	movl	%esi,0x08(%esp)
00001921	movl	%ebx,0x04(%esp)
00001925	movl	%eax,(%esp)
00001928	calll	CUtlBuffer::Put(void const*, int)
0000192d	addl	$0x10,%esp
00001930	movl	0xec(%ebp),%eax
00001933	movl	(%eax),%eax
00001935	cmpl	0xf0(%ebp),%eax
00001938	jne	0x00001942
0000193a	leal	0xf4(%ebp),%esp
0000193d	popl	%esi
0000193e	popl	%edi
0000193f	popl	%ebx
00001940	popl	%ebp
00001941	ret
00001942	calll	___stack_chk_fail
00001947	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool):
00001950	pushl	%ebp
00001951	movl	%esp,%ebp
00001953	pushl	%ebx
00001954	pushl	%edi
00001955	pushl	%esi
00001956	subl	$0x000000ac,%esp
0000195c	calll	0x00001961
00001961	popl	%edx
00001962	movl	0x42cec-0x1961(%edx),%eax
00001968	movl	%eax,0xffffff70(%ebp)
0000196e	movl	(%eax),%eax
00001970	movl	%eax,0xf0(%ebp)
00001973	movb	0x24(%ebp),%al
00001976	movl	0x1c(%ebp),%ebx
00001979	movl	0x18(%ebp),%esi
0000197c	movl	0x10(%ebp),%edi
0000197f	movl	0x0c(%ebp),%ecx
00001982	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ecx)
00001986	je	0x000019ba
00001988	movb	0x20(%ebp),%dl
0000198b	movzbl	%al,%eax
0000198e	movl	%eax,0x18(%esp)
00001992	movzbl	%dl,%eax
00001995	movl	%eax,0x14(%esp)
00001999	incl	%ebx
0000199a	movl	%ebx,0x10(%esp)
0000199e	movl	%esi,0x0c(%esp)
000019a2	movl	0x14(%ebp),%eax
000019a5	movl	%eax,0x08(%esp)
000019a9	movl	%edi,0x04(%esp)
000019ad	movl	%ecx,(%esp)
000019b0	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
000019b5	jmp	0x000022ac
000019ba	movsbl	0x10(%ecx),%ecx
000019be	decl	%ecx
000019bf	cmpl	$0x06,%ecx
000019c2	ja	0x000022ac
000019c8	movl	%edx,0xffffff7c(%ebp)
000019ce	movl	0x0000096b(%edx,%ecx,4),%ecx
000019d5	addl	%edx,%ecx
000019d7	jmp	*%ecx
000019d9	movl	0x0c(%ebp),%ecx
000019dc	movl	0x04(%ecx),%ecx
000019df	testl	%ecx,%ecx
000019e1	je	0x000022ac
000019e7	testb	%al,%al
000019e9	jne	0x000019f4
000019eb	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ecx)
000019ee	je	0x000022ac
000019f4	incl	%ebx
000019f5	testl	%ebx,%ebx
000019f7	jle	0x00001a52
000019f9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00001a00	testl	%edi,%edi
00001a02	je	0x00001a2b
00001a04	movl	(%edi),%eax
00001a06	movl	0x14(%ebp),%ecx
00001a09	movl	%ecx,0x0c(%esp)
00001a0d	movl	0xffffff7c(%ebp),%ecx
00001a13	leal	0x3a969-0x1961(%ecx),%ecx
00001a19	movl	%ecx,0x04(%esp)
00001a1d	movl	%edi,(%esp)
00001a20	movl	$0x00000001,0x08(%esp)
00001a28	call	*0x04(%eax)
00001a2b	testl	%esi,%esi
00001a2d	je	0x00001a4f
00001a2f	movl	0xffffff7c(%ebp),%eax
00001a35	leal	0x3a969-0x1961(%eax),%eax
00001a3b	movl	%eax,0x04(%esp)
00001a3f	movl	%esi,(%esp)
00001a42	movl	$0x00000001,0x08(%esp)
00001a4a	calll	CUtlBuffer::Put(void const*, int)
00001a4f	decl	%ebx
00001a50	jne	0x00001a00
00001a52	movb	$0x01,%al
00001a54	testl	%edi,%edi
00001a56	movl	0x0c(%ebp),%ebx
00001a59	je	0x00001a84
00001a5b	movl	(%edi),%eax
00001a5d	movl	0x14(%ebp),%ecx
00001a60	movl	%ecx,0x0c(%esp)
00001a64	movl	0xffffff7c(%ebp),%ecx
00001a6a	leal	0x3a96b-0x1961(%ecx),%ecx
00001a70	movl	%ecx,0x04(%esp)
00001a74	movl	%edi,(%esp)
00001a77	movl	$0x00000001,0x08(%esp)
00001a7f	call	*0x04(%eax)
00001a82	xorb	%al,%al
00001a84	movb	%al,0xffffff7b(%ebp)
00001a8a	testl	%esi,%esi
00001a8c	je	0x00001aae
00001a8e	movl	0xffffff7c(%ebp),%eax
00001a94	leal	0x3a96b-0x1961(%eax),%eax
00001a9a	movl	%eax,0x04(%esp)
00001a9e	movl	%esi,(%esp)
00001aa1	movl	$0x00000001,0x08(%esp)
00001aa9	calll	CUtlBuffer::Put(void const*, int)
00001aae	movl	(%ebx),%eax
00001ab0	movl	%eax,(%esp)
00001ab3	movl	0xffffff7c(%ebp),%eax
00001ab9	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%eax)
00001abf	movl	%eax,0x10(%esp)
00001ac3	movl	%esi,0x0c(%esp)
00001ac7	movl	0x14(%ebp),%ebx
00001aca	movl	%ebx,0x08(%esp)
00001ace	movl	%edi,0x04(%esp)
00001ad2	movl	0x08(%ebp),%eax
00001ad5	movl	%eax,(%esp)
00001ad8	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00001add	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001ae4	jne	0x00001b0a
00001ae6	movl	(%edi),%eax
00001ae8	movl	%ebx,0x0c(%esp)
00001aec	movl	0xffffff7c(%ebp),%ecx
00001af2	leal	0x3a976-0x1961(%ecx),%ecx
00001af8	movl	%ecx,0x04(%esp)
00001afc	movl	%edi,(%esp)
00001aff	movl	$0x00000004,0x08(%esp)
00001b07	call	*0x04(%eax)
00001b0a	testl	%esi,%esi
00001b0c	je	0x00001b2e
00001b0e	movl	0xffffff7c(%ebp),%eax
00001b14	leal	0x3a976-0x1961(%eax),%eax
00001b1a	movl	%eax,0x04(%esp)
00001b1e	movl	%esi,(%esp)
00001b21	movl	$0x00000004,0x08(%esp)
00001b29	calll	CUtlBuffer::Put(void const*, int)
00001b2e	movl	0x0c(%ebp),%eax
00001b31	movl	0x04(%eax),%eax
00001b34	movl	%eax,0x10(%esp)
00001b38	movl	%esi,0x0c(%esp)
00001b3c	movl	0x14(%ebp),%ebx
00001b3f	movl	%ebx,0x08(%esp)
00001b43	movl	%edi,0x04(%esp)
00001b47	movl	0x08(%ebp),%eax
00001b4a	movl	%eax,(%esp)
00001b4d	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00001b52	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001b59	jne	0x00001b7f
00001b5b	movl	(%edi),%eax
00001b5d	movl	%ebx,0x0c(%esp)
00001b61	movl	0xffffff7c(%ebp),%ecx
00001b67	leal	0x3a96d-0x1961(%ecx),%ecx
00001b6d	movl	%ecx,0x04(%esp)
00001b71	movl	%edi,(%esp)
00001b74	movl	$0x00000002,0x08(%esp)
00001b7c	call	*0x04(%eax)
00001b7f	testl	%esi,%esi
00001b81	je	0x000022ac
00001b87	movl	0xffffff7c(%ebp),%eax
00001b8d	leal	0x3a96d-0x1961(%eax),%eax
00001b93	movl	%eax,0x04(%esp)
00001b97	movl	%esi,(%esp)
00001b9a	movl	$0x00000002,0x08(%esp)
00001ba2	calll	CUtlBuffer::Put(void const*, int)
00001ba7	jmp	0x000022ac
00001bac	movl	0x0c(%ebp),%eax
00001baf	movl	0x08(%eax),%eax
00001bb2	testl	%eax,%eax
00001bb4	je	0x000022ac
00001bba	movl	0xffffff7c(%ebp),%ecx
00001bc0	leal	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)::buf-0x1961(%ecx),%ecx
00001bc6	movl	%ecx,0xffffff6c(%ebp)
00001bcc	movl	%ecx,0x04(%esp)
00001bd0	movl	%eax,(%esp)
00001bd3	movl	$0x00001000,0x08(%esp)
00001bdb	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00001be0	testl	%eax,%eax
00001be2	je	0x000022ac
00001be8	incl	%ebx
00001be9	testl	%ebx,%ebx
00001beb	jle	0x00001c42
00001bed	nopl	(%eax)
00001bf0	testl	%edi,%edi
00001bf2	je	0x00001c1b
00001bf4	movl	(%edi),%eax
00001bf6	movl	0x14(%ebp),%ecx
00001bf9	movl	%ecx,0x0c(%esp)
00001bfd	movl	0xffffff7c(%ebp),%ecx
00001c03	leal	0x3a969-0x1961(%ecx),%ecx
00001c09	movl	%ecx,0x04(%esp)
00001c0d	movl	%edi,(%esp)
00001c10	movl	$0x00000001,0x08(%esp)
00001c18	call	*0x04(%eax)
00001c1b	testl	%esi,%esi
00001c1d	je	0x00001c3f
00001c1f	movl	0xffffff7c(%ebp),%eax
00001c25	leal	0x3a969-0x1961(%eax),%eax
00001c2b	movl	%eax,0x04(%esp)
00001c2f	movl	%esi,(%esp)
00001c32	movl	$0x00000001,0x08(%esp)
00001c3a	calll	CUtlBuffer::Put(void const*, int)
00001c3f	decl	%ebx
00001c40	jne	0x00001bf0
00001c42	movb	$0x01,0xffffff7b(%ebp)
00001c49	testl	%edi,%edi
00001c4b	je	0x00001c7b
00001c4d	movl	(%edi),%eax
00001c4f	movl	0x14(%ebp),%ecx
00001c52	movl	%ecx,0x0c(%esp)
00001c56	movl	0xffffff7c(%ebp),%ecx
00001c5c	leal	0x3a96b-0x1961(%ecx),%ecx
00001c62	movl	%ecx,0x04(%esp)
00001c66	movl	%edi,(%esp)
00001c69	movl	$0x00000001,0x08(%esp)
00001c71	call	*0x04(%eax)
00001c74	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001c7b	testl	%esi,%esi
00001c7d	movl	0xffffff7c(%ebp),%ebx
00001c83	je	0x00001c9f
00001c85	leal	0x3a96b-0x1961(%ebx),%eax
00001c8b	movl	%eax,0x04(%esp)
00001c8f	movl	%esi,(%esp)
00001c92	movl	$0x00000001,0x08(%esp)
00001c9a	calll	CUtlBuffer::Put(void const*, int)
00001c9f	movl	0x0c(%ebp),%esi
00001ca2	movl	(%esi),%eax
00001ca4	movl	%eax,(%esp)
00001ca7	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%ebx)
00001cad	movl	%eax,0xffffff74(%ebp)
00001cb3	movl	(%esi),%ecx
00001cb5	movl	%ecx,(%esp)
00001cb8	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%ebx)
00001cbe	movl	%eax,(%esp)
00001cc1	calll	_strlen
00001cc6	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001ccd	movl	0x14(%ebp),%ebx
00001cd0	jne	0x00001cf4
00001cd2	movl	(%edi),%ecx
00001cd4	movl	%ebx,0x0c(%esp)
00001cd8	movl	%eax,0x08(%esp)
00001cdc	movl	0xffffff74(%ebp),%edx
00001ce2	movl	%edx,0x04(%esp)
00001ce6	movl	%edi,(%esp)
00001ce9	movl	%ebx,%esi
00001ceb	movl	%eax,%ebx
00001ced	call	*0x04(%ecx)
00001cf0	movl	%ebx,%eax
00001cf2	movl	%esi,%ebx
00001cf4	movl	0xffffff74(%ebp),%ecx
00001cfa	movl	0x18(%ebp),%esi
00001cfd	testl	%esi,%esi
00001cff	je	0x00001d11
00001d01	movl	%eax,0x08(%esp)
00001d05	movl	%ecx,0x04(%esp)
00001d09	movl	%esi,(%esp)
00001d0c	calll	CUtlBuffer::Put(void const*, int)
00001d11	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001d18	jne	0x00001d3e
00001d1a	movl	(%edi),%eax
00001d1c	movl	%ebx,0x0c(%esp)
00001d20	movl	0xffffff7c(%ebp),%ecx
00001d26	leal	0x3a976-0x1961(%ecx),%ecx
00001d2c	movl	%ecx,0x04(%esp)
00001d30	movl	%edi,(%esp)
00001d33	movl	$0x00000004,0x08(%esp)
00001d3b	call	*0x04(%eax)
00001d3e	testl	%esi,%esi
00001d40	je	0x00001d62
00001d42	movl	0xffffff7c(%ebp),%eax
00001d48	leal	0x3a976-0x1961(%eax),%eax
00001d4e	movl	%eax,0x04(%esp)
00001d52	movl	%esi,(%esp)
00001d55	movl	$0x00000004,0x08(%esp)
00001d5d	calll	CUtlBuffer::Put(void const*, int)
00001d62	movl	0xffffff6c(%ebp),%eax
00001d68	movl	%eax,0x10(%esp)
00001d6c	movl	%esi,0x0c(%esp)
00001d70	jmp	0x00001b3f
00001d75	incl	%ebx
00001d76	testl	%ebx,%ebx
00001d78	jle	0x00001dd2
00001d7a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001d80	testl	%edi,%edi
00001d82	je	0x00001dab
00001d84	movl	(%edi),%eax
00001d86	movl	0x14(%ebp),%ecx
00001d89	movl	%ecx,0x0c(%esp)
00001d8d	movl	0xffffff7c(%ebp),%ecx
00001d93	leal	0x3a969-0x1961(%ecx),%ecx
00001d99	movl	%ecx,0x04(%esp)
00001d9d	movl	%edi,(%esp)
00001da0	movl	$0x00000001,0x08(%esp)
00001da8	call	*0x04(%eax)
00001dab	testl	%esi,%esi
00001dad	je	0x00001dcf
00001daf	movl	0xffffff7c(%ebp),%eax
00001db5	leal	0x3a969-0x1961(%eax),%eax
00001dbb	movl	%eax,0x04(%esp)
00001dbf	movl	%esi,(%esp)
00001dc2	movl	$0x00000001,0x08(%esp)
00001dca	calll	CUtlBuffer::Put(void const*, int)
00001dcf	decl	%ebx
00001dd0	jne	0x00001d80
00001dd2	movb	$0x01,%al
00001dd4	testl	%edi,%edi
00001dd6	movl	0xffffff7c(%ebp),%ebx
00001ddc	je	0x00001e01
00001dde	movl	(%edi),%eax
00001de0	movl	0x14(%ebp),%ecx
00001de3	movl	%ecx,0x0c(%esp)
00001de7	leal	0x3a96b-0x1961(%ebx),%ecx
00001ded	movl	%ecx,0x04(%esp)
00001df1	movl	%edi,(%esp)
00001df4	movl	$0x00000001,0x08(%esp)
00001dfc	call	*0x04(%eax)
00001dff	xorb	%al,%al
00001e01	movb	%al,0xffffff7b(%ebp)
00001e07	movl	%esi,%ecx
00001e09	testl	%ecx,%ecx
00001e0b	je	0x00001e27
00001e0d	leal	0x3a96b-0x1961(%ebx),%eax
00001e13	movl	%eax,0x04(%esp)
00001e17	movl	%ecx,(%esp)
00001e1a	movl	$0x00000001,0x08(%esp)
00001e22	calll	CUtlBuffer::Put(void const*, int)
00001e27	movl	%ebx,%esi
00001e29	movl	0x0c(%ebp),%ebx
00001e2c	movl	(%ebx),%eax
00001e2e	movl	%eax,(%esp)
00001e31	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00001e37	movl	%eax,0xffffff74(%ebp)
00001e3d	movl	(%ebx),%eax
00001e3f	movl	%eax,(%esp)
00001e42	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00001e48	movl	%eax,(%esp)
00001e4b	calll	_strlen
00001e50	movb	0xffffff7b(%ebp),%bl
00001e56	testb	%bl,%bl
00001e58	jne	0x00001e7b
00001e5a	movl	(%edi),%edx
00001e5c	movl	0x14(%ebp),%ecx
00001e5f	movl	%ecx,0x0c(%esp)
00001e63	movl	%eax,0x08(%esp)
00001e67	movl	0xffffff74(%ebp),%ecx
00001e6d	movl	%ecx,0x04(%esp)
00001e71	movl	%edi,(%esp)
00001e74	movl	%eax,%esi
00001e76	call	*0x04(%edx)
00001e79	movl	%esi,%eax
00001e7b	movl	0xffffff74(%ebp),%ecx
00001e81	movl	0x18(%ebp),%esi
00001e84	testl	%esi,%esi
00001e86	je	0x00001e98
00001e88	movl	%eax,0x08(%esp)
00001e8c	movl	%ecx,0x04(%esp)
00001e90	movl	%esi,(%esp)
00001e93	calll	CUtlBuffer::Put(void const*, int)
00001e98	testb	%bl,%bl
00001e9a	movl	0xffffff7c(%ebp),%ebx
00001ea0	jne	0x00001ec3
00001ea2	movl	(%edi),%eax
00001ea4	movl	0x14(%ebp),%ecx
00001ea7	movl	%ecx,0x0c(%esp)
00001eab	leal	0x3a976-0x1961(%ebx),%ecx
00001eb1	movl	%ecx,0x04(%esp)
00001eb5	movl	%edi,(%esp)
00001eb8	movl	$0x00000004,0x08(%esp)
00001ec0	call	*0x04(%eax)
00001ec3	testl	%esi,%esi
00001ec5	je	0x00001ee1
00001ec7	leal	0x3a976-0x1961(%ebx),%eax
00001ecd	movl	%eax,0x04(%esp)
00001ed1	movl	%esi,(%esp)
00001ed4	movl	$0x00000004,0x08(%esp)
00001edc	calll	CUtlBuffer::Put(void const*, int)
00001ee1	movl	0x0c(%ebp),%eax
00001ee4	movl	0x0c(%eax),%eax
00001ee7	movl	%eax,0x0c(%esp)
00001eeb	leal	0x3a97b-0x1961(%ebx),%eax
00001ef1	movl	%eax,0x08(%esp)
00001ef5	leal	0xd0(%ebp),%ebx
00001ef8	movl	%ebx,(%esp)
00001efb	movl	$0x00000020,0x04(%esp)
00001f03	calll	V_snprintf(char*, int, char const*, ...)
00001f08	movl	%ebx,(%esp)
00001f0b	calll	_strlen
00001f10	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001f17	jne	0x00001f34
00001f19	movl	(%edi),%edx
00001f1b	movl	0x14(%ebp),%ecx
00001f1e	movl	%ecx,0x0c(%esp)
00001f22	movl	%eax,0x08(%esp)
00001f26	movl	%ebx,0x04(%esp)
00001f2a	movl	%edi,(%esp)
00001f2d	movl	%eax,%esi
00001f2f	call	*0x04(%edx)
00001f32	movl	%esi,%eax
00001f34	movl	0x18(%ebp),%esi
00001f37	testl	%esi,%esi
00001f39	je	0x00001f4b
00001f3b	movl	%eax,0x08(%esp)
00001f3f	movl	%ebx,0x04(%esp)
00001f43	movl	%esi,(%esp)
00001f46	calll	CUtlBuffer::Put(void const*, int)
00001f4b	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001f52	jne	0x00001b7f
00001f58	movl	(%edi),%eax
00001f5a	movl	0x14(%ebp),%ecx
00001f5d	movl	%ecx,0x0c(%esp)
00001f61	jmp	0x00001b61
00001f66	incl	%ebx
00001f67	testl	%ebx,%ebx
00001f69	jle	0x00001fc2
00001f6b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001f70	testl	%edi,%edi
00001f72	je	0x00001f9b
00001f74	movl	(%edi),%eax
00001f76	movl	0x14(%ebp),%ecx
00001f79	movl	%ecx,0x0c(%esp)
00001f7d	movl	0xffffff7c(%ebp),%ecx
00001f83	leal	0x3a969-0x1961(%ecx),%ecx
00001f89	movl	%ecx,0x04(%esp)
00001f8d	movl	%edi,(%esp)
00001f90	movl	$0x00000001,0x08(%esp)
00001f98	call	*0x04(%eax)
00001f9b	testl	%esi,%esi
00001f9d	je	0x00001fbf
00001f9f	movl	0xffffff7c(%ebp),%eax
00001fa5	leal	0x3a969-0x1961(%eax),%eax
00001fab	movl	%eax,0x04(%esp)
00001faf	movl	%esi,(%esp)
00001fb2	movl	$0x00000001,0x08(%esp)
00001fba	calll	CUtlBuffer::Put(void const*, int)
00001fbf	decl	%ebx
00001fc0	jne	0x00001f70
00001fc2	movb	$0x01,%al
00001fc4	testl	%edi,%edi
00001fc6	movl	0xffffff7c(%ebp),%ebx
00001fcc	je	0x00001ff1
00001fce	movl	(%edi),%eax
00001fd0	movl	0x14(%ebp),%ecx
00001fd3	movl	%ecx,0x0c(%esp)
00001fd7	leal	0x3a96b-0x1961(%ebx),%ecx
00001fdd	movl	%ecx,0x04(%esp)
00001fe1	movl	%edi,(%esp)
00001fe4	movl	$0x00000001,0x08(%esp)
00001fec	call	*0x04(%eax)
00001fef	xorb	%al,%al
00001ff1	movb	%al,0xffffff7b(%ebp)
00001ff7	movl	%esi,%ecx
00001ff9	testl	%ecx,%ecx
00001ffb	je	0x00002017
00001ffd	leal	0x3a96b-0x1961(%ebx),%eax
00002003	movl	%eax,0x04(%esp)
00002007	movl	%ecx,(%esp)
0000200a	movl	$0x00000001,0x08(%esp)
00002012	calll	CUtlBuffer::Put(void const*, int)
00002017	movl	%ebx,%esi
00002019	movl	0x0c(%ebp),%ebx
0000201c	movl	(%ebx),%eax
0000201e	movl	%eax,(%esp)
00002021	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00002027	movl	%eax,0xffffff74(%ebp)
0000202d	movl	(%ebx),%eax
0000202f	movl	%eax,(%esp)
00002032	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00002038	movl	%eax,(%esp)
0000203b	calll	_strlen
00002040	movb	0xffffff7b(%ebp),%bl
00002046	testb	%bl,%bl
00002048	jne	0x0000206b
0000204a	movl	(%edi),%edx
0000204c	movl	0x14(%ebp),%ecx
0000204f	movl	%ecx,0x0c(%esp)
00002053	movl	%eax,0x08(%esp)
00002057	movl	0xffffff74(%ebp),%ecx
0000205d	movl	%ecx,0x04(%esp)
00002061	movl	%edi,(%esp)
00002064	movl	%eax,%esi
00002066	call	*0x04(%edx)
00002069	movl	%esi,%eax
0000206b	movl	0xffffff74(%ebp),%ecx
00002071	movl	0x18(%ebp),%esi
00002074	testl	%esi,%esi
00002076	je	0x00002088
00002078	movl	%eax,0x08(%esp)
0000207c	movl	%ecx,0x04(%esp)
00002080	movl	%esi,(%esp)
00002083	calll	CUtlBuffer::Put(void const*, int)
00002088	testb	%bl,%bl
0000208a	movl	0xffffff7c(%ebp),%ebx
00002090	jne	0x000020b3
00002092	movl	(%edi),%eax
00002094	movl	0x14(%ebp),%ecx
00002097	movl	%ecx,0x0c(%esp)
0000209b	leal	0x3a976-0x1961(%ebx),%ecx
000020a1	movl	%ecx,0x04(%esp)
000020a5	movl	%edi,(%esp)
000020a8	movl	$0x00000004,0x08(%esp)
000020b0	call	*0x04(%eax)
000020b3	testl	%esi,%esi
000020b5	je	0x000020d1
000020b7	leal	0x3a976-0x1961(%ebx),%eax
000020bd	movl	%eax,0x04(%esp)
000020c1	movl	%esi,(%esp)
000020c4	movl	$0x00000004,0x08(%esp)
000020cc	calll	CUtlBuffer::Put(void const*, int)
000020d1	movl	0x0c(%ebp),%eax
000020d4	movl	0x04(%eax),%ecx
000020d7	movl	(%ecx),%eax
000020d9	movl	0x04(%ecx),%ecx
000020dc	movl	%ecx,0x10(%esp)
000020e0	movl	%eax,0x0c(%esp)
000020e4	leal	0x3a97e-0x1961(%ebx),%eax
000020ea	movl	%eax,0x08(%esp)
000020ee	leal	0xb0(%ebp),%ebx
000020f1	jmp	0x00001ef8
000020f6	incl	%ebx
000020f7	testl	%ebx,%ebx
000020f9	jle	0x00002152
000020fb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002100	testl	%edi,%edi
00002102	je	0x0000212b
00002104	movl	(%edi),%eax
00002106	movl	0x14(%ebp),%ecx
00002109	movl	%ecx,0x0c(%esp)
0000210d	movl	0xffffff7c(%ebp),%ecx
00002113	leal	0x3a969-0x1961(%ecx),%ecx
00002119	movl	%ecx,0x04(%esp)
0000211d	movl	%edi,(%esp)
00002120	movl	$0x00000001,0x08(%esp)
00002128	call	*0x04(%eax)
0000212b	testl	%esi,%esi
0000212d	je	0x0000214f
0000212f	movl	0xffffff7c(%ebp),%eax
00002135	leal	0x3a969-0x1961(%eax),%eax
0000213b	movl	%eax,0x04(%esp)
0000213f	movl	%esi,(%esp)
00002142	movl	$0x00000001,0x08(%esp)
0000214a	calll	CUtlBuffer::Put(void const*, int)
0000214f	decl	%ebx
00002150	jne	0x00002100
00002152	movb	$0x01,%al
00002154	testl	%edi,%edi
00002156	movl	0xffffff7c(%ebp),%ebx
0000215c	je	0x00002181
0000215e	movl	(%edi),%eax
00002160	movl	0x14(%ebp),%ecx
00002163	movl	%ecx,0x0c(%esp)
00002167	leal	0x3a96b-0x1961(%ebx),%ecx
0000216d	movl	%ecx,0x04(%esp)
00002171	movl	%edi,(%esp)
00002174	movl	$0x00000001,0x08(%esp)
0000217c	call	*0x04(%eax)
0000217f	xorb	%al,%al
00002181	movb	%al,0xffffff7b(%ebp)
00002187	movl	%esi,%ecx
00002189	testl	%ecx,%ecx
0000218b	je	0x000021a7
0000218d	leal	0x3a96b-0x1961(%ebx),%eax
00002193	movl	%eax,0x04(%esp)
00002197	movl	%ecx,(%esp)
0000219a	movl	$0x00000001,0x08(%esp)
000021a2	calll	CUtlBuffer::Put(void const*, int)
000021a7	movl	%ebx,%esi
000021a9	movl	0x0c(%ebp),%ebx
000021ac	movl	(%ebx),%eax
000021ae	movl	%eax,(%esp)
000021b1	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
000021b7	movl	%eax,0xffffff74(%ebp)
000021bd	movl	(%ebx),%eax
000021bf	movl	%eax,(%esp)
000021c2	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
000021c8	movl	%eax,(%esp)
000021cb	calll	_strlen
000021d0	movb	0xffffff7b(%ebp),%bl
000021d6	testb	%bl,%bl
000021d8	jne	0x000021fb
000021da	movl	(%edi),%edx
000021dc	movl	0x14(%ebp),%ecx
000021df	movl	%ecx,0x0c(%esp)
000021e3	movl	%eax,0x08(%esp)
000021e7	movl	0xffffff74(%ebp),%ecx
000021ed	movl	%ecx,0x04(%esp)
000021f1	movl	%edi,(%esp)
000021f4	movl	%eax,%esi
000021f6	call	*0x04(%edx)
000021f9	movl	%esi,%eax
000021fb	movl	0xffffff74(%ebp),%ecx
00002201	movl	0x18(%ebp),%esi
00002204	testl	%esi,%esi
00002206	je	0x00002218
00002208	movl	%eax,0x08(%esp)
0000220c	movl	%ecx,0x04(%esp)
00002210	movl	%esi,(%esp)
00002213	calll	CUtlBuffer::Put(void const*, int)
00002218	testb	%bl,%bl
0000221a	movl	0xffffff7c(%ebp),%ebx
00002220	jne	0x00002243
00002222	movl	(%edi),%eax
00002224	movl	0x14(%ebp),%ecx
00002227	movl	%ecx,0x0c(%esp)
0000222b	leal	0x3a976-0x1961(%ebx),%ecx
00002231	movl	%ecx,0x04(%esp)
00002235	movl	%edi,(%esp)
00002238	movl	$0x00000004,0x08(%esp)
00002240	call	*0x04(%eax)
00002243	testl	%esi,%esi
00002245	je	0x00002261
00002247	leal	0x3a976-0x1961(%ebx),%eax
0000224d	movl	%eax,0x04(%esp)
00002251	movl	%esi,(%esp)
00002254	movl	$0x00000004,0x08(%esp)
0000225c	calll	CUtlBuffer::Put(void const*, int)
00002261	movl	0x0c(%ebp),%eax
00002264	movss	0x0c(%eax),%xmm0
00002269	cvtss2sd	%xmm0,%xmm0
0000226d	movsd	%xmm0,0x0c(%esp)
00002273	leal	0x3a988-0x1961(%ebx),%eax
00002279	movl	%eax,0x08(%esp)
0000227d	leal	0x80(%ebp),%ebx
00002280	movl	%ebx,(%esp)
00002283	movl	KeyValues::GetStringForSymbolClassic(int),0x04(%esp)
0000228b	jmp	0x00001f03
00002290	movl	0xffffff7c(%ebp),%eax
00002296	leal	0x3a98b-0x1961(%eax),%eax
0000229c	movl	%eax,0x04(%esp)
000022a0	movl	$0x00000001,(%esp)
000022a7	calll	_DevMsg
000022ac	movl	0xffffff70(%ebp),%eax
000022b2	movl	(%eax),%eax
000022b4	cmpl	0xf0(%ebp),%eax
000022b7	jne	0x000022c4
000022b9	addl	$0x000000ac,%esp
000022bf	popl	%esi
000022c0	popl	%edi
000022c1	popl	%ebx
000022c2	popl	%ebp
000022c3	ret
000022c4	calll	___stack_chk_fail
000022c9	nopl	(%eax)
000022cc	js	0x000022ce
000022ce	addb	%al,(%eax)
000022d0	adcb	$0x04,%al
000022d2	addb	%al,(%eax)
000022d4	xchg	%ebp,%eax
000022d5	popl	%es
000022d6	addb	%al,(%eax)
000022d8	decl	%ebx
000022d9	orl	%eax,(%eax)
000022db	addb	%cl,0x02(%ebx)
000022de	addb	%al,(%eax)
000022e0	das
000022e1	orl	%eax,(%eax)
000022e3	addb	%al,0x0f000006
000022e9	popl	%ds
000022ea	testb	(%eax),%al
000022ec	addb	%al,(%eax)
000022ee	addb	%al,(%eax)
KeyValues::FindKey(int) const:
000022f0	movl	0x04(%esp),%ecx
000022f4	addl	$0x18,%ecx
000022f7	movl	0x08(%esp),%edx
000022fb	xorl	%eax,%eax
000022fd	jmp	0x00002303
000022ff	nop
00002300	addl	$0x14,%ecx
00002303	movl	(%ecx),%ecx
00002305	testl	%ecx,%ecx
00002307	je	0x0000230f
00002309	cmpl	%edx,(%ecx)
0000230b	jne	0x00002300
0000230d	movl	%ecx,%eax
0000230f	ret
KeyValues::FindKey(char const*, bool):
00002310	pushl	%ebp
00002311	movl	%esp,%ebp
00002313	pushl	%ebx
00002314	pushl	%edi
00002315	pushl	%esi
00002316	subl	$0x0000012c,%esp
0000231c	calll	0x00002321
00002321	popl	%eax
00002322	movl	%eax,0xfffffeec(%ebp)
00002328	movl	0x42cec-0x2321(%eax),%eax
0000232e	movl	%eax,0xfffffee8(%ebp)
00002334	movl	(%eax),%eax
00002336	movl	%eax,0xf0(%ebp)
00002339	movl	0x0c(%ebp),%esi
0000233c	movl	0x08(%ebp),%edi
0000233f	testl	%esi,%esi
00002341	je	0x000024f8
00002347	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
0000234a	je	0x000024f8
00002350	movl	%esi,(%esp)
00002353	movl	$0x0000002f,0x04(%esp)
0000235b	calll	_strchr
00002360	movl	%eax,%edi
00002362	testl	%edi,%edi
00002364	movl	%esi,%eax
00002366	movl	%eax,%ebx
00002368	je	0x0000238c
0000236a	movl	%edi,%esi
0000236c	subl	%eax,%esi
0000236e	movl	%esi,0x08(%esp)
00002372	movl	%eax,0x04(%esp)
00002376	leal	0xfffffef0(%ebp),%ebx
0000237c	movl	%ebx,(%esp)
0000237f	calll	_memcpy
00002384	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xfffffef0(%ebp,%esi)
0000238c	movl	%edi,0xfffffee4(%ebp)
00002392	movzbl	0x10(%ebp),%eax
00002396	movl	%eax,0xfffffee0(%ebp)
0000239c	movl	%eax,0x04(%esp)
000023a0	movl	%ebx,(%esp)
000023a3	movl	0xfffffeec(%ebp),%eax
000023a9	call	*KeyValues::s_pfGetSymbolForString-0x2321(%eax)
000023af	xorl	%edi,%edi
000023b1	cmpl	$0xff,%eax
000023b4	je	0x000024f8
000023ba	movl	0x08(%ebp),%edx
000023bd	leal	0x18(%edx),%ecx
000023c0	movl	%ecx,0xfffffedc(%ebp)
000023c6	xorl	%esi,%esi
000023c8	jmp	0x000023dd
000023ca	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000023d0	cmpl	%eax,(%edi)
000023d2	je	0x000024d3
000023d8	leal	0x14(%edi),%ecx
000023db	movl	%edi,%esi
000023dd	movl	(%ecx),%edi
000023df	testl	%edi,%edi
000023e1	jne	0x000023d0
000023e3	movl	0x1c(%edx),%eax
000023e6	testl	%eax,%eax
000023e8	je	0x0000240b
000023ea	movl	0x0c(%ebp),%ecx
000023ed	movl	%ecx,0x04(%esp)
000023f1	movl	%eax,(%esp)
000023f4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000023fc	calll	KeyValues::FindKey(char const*, bool)
00002401	movl	%eax,%edi
00002403	testl	%edi,%edi
00002405	jne	0x000024d3
0000240b	xorl	%edi,%edi
0000240d	cmpb	$0x01,0x10(%ebp)
00002411	jne	0x000024f8
00002417	calll	_KeyValuesSystem
0000241c	movl	(%eax),%ecx
0000241e	movl	%eax,(%esp)
00002421	movl	$0x00000020,0x04(%esp)
00002429	call	*0x04(%ecx)
0000242c	movl	%eax,%edi
0000242e	movl	$0xffffffff,(%edi)
00002434	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
0000243b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00002442	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00002449	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00002450	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00002457	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000245d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00002464	movb	$0x01,0x12(%edi)
00002468	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
0000246c	movl	0xfffffeec(%ebp),%eax
00002472	movl	KeyValues::s_pfGetSymbolForString-0x2321(%eax),%eax
00002478	movl	%ebx,(%esp)
0000247b	movl	$0x00000001,0x04(%esp)
00002483	call	*%eax
00002485	movl	%eax,(%edi)
00002487	movl	0x08(%ebp),%eax
0000248a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
0000248e	setne	0x11(%edi)
00002492	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00002496	setne	0x12(%edi)
0000249a	testl	%esi,%esi
0000249c	je	0x000024c0
0000249e	movl	%edi,0x14(%esi)
000024a1	jmp	0x000024c8
000024a3	movl	%eax,%esi
000024a5	calll	_KeyValuesSystem
000024aa	movl	(%eax),%ecx
000024ac	movl	0x08(%ecx),%ecx
000024af	movl	%edi,0x04(%esp)
000024b3	movl	%eax,(%esp)
000024b6	call	*%ecx
000024b8	movl	%esi,(%esp)
000024bb	calll	__Unwind_Resume
000024c0	movl	0xfffffedc(%ebp),%ecx
000024c6	movl	%edi,(%ecx)
000024c8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000024cf	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000024d3	movl	0xfffffee4(%ebp),%eax
000024d9	testl	%eax,%eax
000024db	je	0x000024f8
000024dd	movl	0xfffffee0(%ebp),%ecx
000024e3	movl	%ecx,0x08(%esp)
000024e7	leal	0x01(%eax),%eax
000024ea	movl	%eax,0x04(%esp)
000024ee	movl	%edi,(%esp)
000024f1	calll	KeyValues::FindKey(char const*, bool)
000024f6	movl	%eax,%edi
000024f8	movl	0xfffffee8(%ebp),%eax
000024fe	movl	(%eax),%eax
00002500	cmpl	0xf0(%ebp),%eax
00002503	jne	0x00002517
00002505	movl	%edi,%eax
00002507	addl	$0x0000012c,%esp
0000250d	popl	%esi
0000250e	popl	%edi
0000250f	popl	%ebx
00002510	popl	%ebp
00002511	ret
00002512	calll	std::terminate()
00002517	calll	___stack_chk_fail
0000251c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::operator new(unsigned long):
00002520	pushl	%ebp
00002521	movl	%esp,%ebp
00002523	subl	$0x08,%esp
00002526	calll	_KeyValuesSystem
0000252b	movl	(%eax),%ecx
0000252d	movl	0x08(%ebp),%edx
00002530	movl	%edx,0x04(%esp)
00002534	movl	%eax,(%esp)
00002537	call	*0x04(%ecx)
0000253a	addl	$0x08,%esp
0000253d	popl	%ebp
0000253e	ret
0000253f	nop
KeyValues::CreateNewKey():
00002540	pushl	%ebp
00002541	movl	%esp,%ebp
00002543	pushl	%ebx
00002544	pushl	%edi
00002545	pushl	%esi
00002546	subl	$0x2c,%esp
00002549	calll	0x0000254e
0000254e	popl	%ebx
0000254f	movl	0x42cec-0x254e(%ebx),%eax
00002555	movl	%eax,0xe0(%ebp)
00002558	movl	(%eax),%eax
0000255a	movl	%eax,0xf0(%ebp)
0000255d	movl	0x08(%ebp),%eax
00002560	movl	0x18(%eax),%eax
00002563	xorl	%edi,%edi
00002565	movl	$0x00000001,%esi
0000256a	jmp	0x00002590
0000256c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00002570	movl	%eax,%edi
00002572	movl	(%edi),%eax
00002574	movl	%eax,(%esp)
00002577	call	*KeyValues::s_pfGetStringForSymbol-0x254e(%ebx)
0000257d	movl	%eax,(%esp)
00002580	calll	_atoi
00002585	cmpl	%eax,%esi
00002587	leal	0x01(%eax),%eax
0000258a	cmovlel	%eax,%esi
0000258d	movl	0x14(%edi),%eax
00002590	testl	%eax,%eax
00002592	jne	0x00002570
00002594	movl	%esi,0x0c(%esp)
00002598	leal	0x3a97b-0x254e(%ebx),%eax
0000259e	movl	%eax,0x08(%esp)
000025a2	leal	0xe4(%ebp),%esi
000025a5	movl	%esi,(%esp)
000025a8	movl	$0x0000000c,0x04(%esp)
000025b0	calll	V_snprintf(char*, int, char const*, ...)
000025b5	movl	%edi,0x08(%esp)
000025b9	movl	%esi,0x04(%esp)
000025bd	movl	0x08(%ebp),%eax
000025c0	movl	%eax,(%esp)
000025c3	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
000025c8	movl	0xe0(%ebp),%ecx
000025cb	movl	(%ecx),%ecx
000025cd	cmpl	0xf0(%ebp),%ecx
000025d0	jne	0x000025da
000025d2	addl	$0x2c,%esp
000025d5	popl	%esi
000025d6	popl	%edi
000025d7	popl	%ebx
000025d8	popl	%ebp
000025d9	ret
000025da	calll	___stack_chk_fail
000025df	nop
KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*):
000025e0	pushl	%ebp
000025e1	movl	%esp,%ebp
000025e3	pushl	%edi
000025e4	pushl	%esi
000025e5	subl	$0x10,%esp
000025e8	calll	0x000025ed
000025ed	popl	%edi
000025ee	calll	_KeyValuesSystem
000025f3	movl	(%eax),%ecx
000025f5	movl	%eax,(%esp)
000025f8	movl	$0x00000020,0x04(%esp)
00002600	call	*0x04(%ecx)
00002603	movl	%eax,%esi
00002605	movl	$0xffffffff,(%esi)
0000260b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00002612	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00002619	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00002620	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00002627	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000262e	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00002634	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
0000263b	movb	$0x01,0x12(%esi)
0000263f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00002643	movl	KeyValues::s_pfGetSymbolForString-0x25ed(%edi),%eax
00002649	movl	0x0c(%ebp),%ecx
0000264c	movl	%ecx,(%esp)
0000264f	movl	$0x00000001,0x04(%esp)
00002657	call	*%eax
00002659	movl	0x10(%ebp),%ecx
0000265c	movl	0x08(%ebp),%edx
0000265f	movl	%eax,(%esi)
00002661	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%edx)
00002665	setne	0x11(%esi)
00002669	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%edx)
0000266d	setne	0x12(%esi)
00002671	testl	%ecx,%ecx
00002673	jne	0x0000267a
00002675	movl	%esi,0x18(%edx)
00002678	jmp	0x0000267d
0000267a	movl	%esi,0x14(%ecx)
0000267d	movl	%esi,%eax
0000267f	addl	$0x10,%esp
00002682	popl	%esi
00002683	popl	%edi
00002684	popl	%ebp
00002685	ret
00002686	movl	%eax,%edi
00002688	calll	_KeyValuesSystem
0000268d	movl	(%eax),%ecx
0000268f	movl	0x08(%ecx),%ecx
00002692	movl	%esi,0x04(%esp)
00002696	movl	%eax,(%esp)
00002699	call	*%ecx
0000269b	movl	%edi,(%esp)
0000269e	calll	__Unwind_Resume
000026a3	calll	std::terminate()
000026a8	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::CreateKey(char const*):
000026b0	pushl	%ebp
000026b1	movl	%esp,%ebp
000026b3	subl	$0x18,%esp
000026b6	movl	0x08(%ebp),%eax
000026b9	movl	0x18(%eax),%edx
000026bc	xorl	%ecx,%ecx
000026be	jmp	0x000026c5
000026c0	movl	%edx,%ecx
000026c2	movl	0x14(%ecx),%edx
000026c5	testl	%edx,%edx
000026c7	jne	0x000026c0
000026c9	movl	0x0c(%ebp),%edx
000026cc	movl	%ecx,0x08(%esp)
000026d0	movl	%edx,0x04(%esp)
000026d4	movl	%eax,(%esp)
000026d7	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
000026dc	addl	$0x18,%esp
000026df	popl	%ebp
000026e0	ret
000026e1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::FindLastSubKey():
000026f0	movl	0x04(%esp),%eax
000026f4	movl	0x18(%eax),%ecx
000026f7	xorl	%eax,%eax
000026f9	jmp	0x00002705
000026fb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002700	movl	%ecx,%eax
00002702	movl	0x14(%eax),%ecx
00002705	testl	%ecx,%ecx
00002707	jne	0x00002700
00002709	ret
0000270a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::AddSubkeyUsingKnownLastChild(KeyValues*, KeyValues*):
00002710	movl	0x0c(%esp),%ecx
00002714	movl	0x08(%esp),%eax
00002718	testl	%ecx,%ecx
0000271a	jne	0x00002724
0000271c	movl	0x04(%esp),%ecx
00002720	movl	%eax,0x18(%ecx)
00002723	ret
00002724	movl	%eax,0x14(%ecx)
00002727	ret
00002728	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetNextKey(KeyValues*):
00002730	movl	0x08(%esp),%eax
00002734	movl	0x04(%esp),%ecx
00002738	movl	%eax,0x14(%ecx)
0000273b	ret
0000273c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::AddSubKey(KeyValues*):
00002740	movl	0x04(%esp),%edx
00002744	movl	0x18(%edx),%ecx
00002747	movl	0x08(%esp),%eax
0000274b	testl	%ecx,%ecx
0000274d	jne	0x00002760
0000274f	movl	%eax,0x18(%edx)
00002752	ret
00002753	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002760	movl	%ecx,%edx
00002762	movl	0x14(%edx),%ecx
00002765	testl	%ecx,%ecx
00002767	jne	0x00002760
00002769	movl	%eax,0x14(%edx)
0000276c	ret
0000276d	nopl	(%eax)
KeyValues::RemoveSubKey(KeyValues*):
00002770	movl	0x08(%esp),%eax
00002774	testl	%eax,%eax
00002776	je	0x000027ac
00002778	movl	0x04(%esp),%edx
0000277c	movl	0x18(%edx),%ecx
0000277f	cmpl	%eax,%ecx
00002781	jne	0x00002790
00002783	movl	0x14(%eax),%ecx
00002786	movl	%ecx,0x18(%edx)
00002789	jmp	0x000027a3
0000278b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002790	movl	%ecx,%edx
00002792	movl	0x14(%edx),%ecx
00002795	testl	%ecx,%ecx
00002797	je	0x000027a3
00002799	cmpl	%eax,%ecx
0000279b	jne	0x00002790
0000279d	movl	0x14(%eax),%ecx
000027a0	movl	%ecx,0x14(%edx)
000027a3	addl	$0x14,%eax
000027a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
000027ac	ret
000027ad	nopl	(%eax)
KeyValues::GetFirstTrueSubKey():
000027b0	movl	0x04(%esp),%eax
000027b4	addl	$0x18,%eax
000027b7	jmp	0x000027c3
000027b9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
000027c0	addl	$0x14,%eax
000027c3	movl	(%eax),%eax
000027c5	testl	%eax,%eax
000027c7	je	0x000027cf
000027c9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000027cd	jne	0x000027c0
000027cf	ret
KeyValues::GetNextTrueSubKey():
000027d0	movl	0x04(%esp),%eax
000027d4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000027e0	movl	0x14(%eax),%eax
000027e3	testl	%eax,%eax
000027e5	je	0x000027ed
000027e7	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000027eb	jne	0x000027e0
000027ed	ret
000027ee	nop
KeyValues::GetFirstValue():
000027f0	movl	0x04(%esp),%eax
000027f4	addl	$0x18,%eax
000027f7	jmp	0x00002803
000027f9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00002800	addl	$0x14,%eax
00002803	movl	(%eax),%eax
00002805	testl	%eax,%eax
00002807	je	0x0000280f
00002809	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000280d	je	0x00002800
0000280f	ret
KeyValues::GetNextValue():
00002810	movl	0x04(%esp),%eax
00002814	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002820	movl	0x14(%eax),%eax
00002823	testl	%eax,%eax
00002825	je	0x0000282d
00002827	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000282b	je	0x00002820
0000282d	ret
0000282e	nop
KeyValues::GetInt(char const*, int):
00002830	pushl	%ebp
00002831	movl	%esp,%ebp
00002833	pushl	%esi
00002834	subl	$0x14,%esp
00002837	calll	0x0000283c
0000283c	popl	%esi
0000283d	movl	0x0c(%ebp),%eax
00002840	movl	%eax,0x04(%esp)
00002844	movl	0x08(%ebp),%eax
00002847	movl	%eax,(%esp)
0000284a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002852	calll	KeyValues::FindKey(char const*, bool)
00002857	testl	%eax,%eax
00002859	jne	0x00002860
0000285b	movl	0x10(%ebp),%ecx
0000285e	jmp	0x000028a9
00002860	movsbl	0x10(%eax),%edx
00002864	decl	%edx
00002865	cmpl	$0x06,%edx
00002868	ja	0x000028a6
0000286a	xorl	%ecx,%ecx
0000286c	addl	0x00000078(%esi,%edx,4),%esi
00002873	jmp	*%esi
00002875	movl	0x04(%eax),%eax
00002878	movl	%eax,(%esp)
0000287b	calll	_atoi
00002880	jmp	0x000028ab
00002882	movl	0x08(%eax),%eax
00002885	movl	%eax,(%esp)
00002888	movl	$0x0000000a,0x08(%esp)
00002890	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002898	calll	_wcstol
0000289d	jmp	0x000028ab
0000289f	cvttss2si	0x0c(%eax),%ecx
000028a4	jmp	0x000028a9
000028a6	movl	0x0c(%eax),%ecx
000028a9	movl	%ecx,%eax
000028ab	addl	$0x14,%esp
000028ae	popl	%esi
000028af	popl	%ebp
000028b0	ret
000028b1	nopl	(%eax)
000028b4	cmpl	%eax,(%eax)
000028b6	addb	%al,(%eax)
000028b8	pushl	KeyValues::GetSymbolForStringClassic(char const*, bool)
000028ba	addb	%al,(%eax)
000028bc	arpl	%ax,(%eax)
000028be	addb	%al,(%eax)
000028c0	pushl	KeyValues::GetSymbolForStringClassic(char const*, bool)
000028c2	addb	%al,(%eax)
000028c4	incl	%esi
000028c5	addb	%al,(%eax)
000028c7	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx)
000028ca	addb	%al,(%eax)
000028cc	insl
000028cd	addb	%al,(%eax)
000028cf	addb	%dl,0x89(%ebp)
000028d2	inl	$0x56,%eax
000028d4	subl	$0x14,%esp
000028d7	calll	0x000028dc
000028dc	popl	%esi
000028dd	movl	0x0c(%ebp),%eax
000028e0	movl	%eax,0x04(%esp)
000028e4	movl	0x08(%ebp),%eax
000028e7	movl	%eax,(%esp)
000028ea	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000028f2	calll	KeyValues::FindKey(char const*, bool)
000028f7	testl	%eax,%eax
000028f9	jne	0x00002903
000028fb	movl	0x14(%ebp),%edx
000028fe	movl	0x10(%ebp),%eax
00002901	jmp	0x00002959
00002903	movsbl	0x10(%eax),%ecx
00002907	decl	%ecx
00002908	cmpl	$0x06,%ecx
0000290b	ja	0x00002951
0000290d	addl	0x00000084(%esi,%ecx,4),%esi
00002914	jmp	*%esi
00002916	movl	0x04(%eax),%eax
00002919	movl	%eax,(%esp)
0000291c	calll	V_atoi64(char const*)
00002921	jmp	0x00002959
00002923	movl	0x08(%eax),%eax
00002926	movl	%eax,(%esp)
00002929	movl	$0x0000000a,0x08(%esp)
00002931	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002939	calll	_wcstoll
0000293e	jmp	0x00002959
00002940	cvttss2si	0x0c(%eax),%eax
00002945	jmp	0x00002954
00002947	movl	0x04(%eax),%ecx
0000294a	movl	(%ecx),%eax
0000294c	movl	0x04(%ecx),%edx
0000294f	jmp	0x00002959
00002951	movl	0x0c(%eax),%eax
00002954	movl	%eax,%edx
00002956	sarl	$0x1f,%edx
00002959	addl	$0x14,%esp
0000295c	popl	%esi
0000295d	popl	%ebp
0000295e	ret
0000295f	nop
00002960	cmpb	(%eax),%al
00002962	addb	%al,(%eax)
00002964	jne	0x00002966
00002966	addb	%al,(%eax)
00002968	addb	%al,%fs:(%eax)
0000296b	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebp)
0000296e	addb	%al,(%eax)
00002970	incl	%edi
00002971	addb	%al,(%eax)
00002973	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebp)
00002976	addb	%al,(%eax)
00002978	imull	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax),%eax
0000297b	addb	%cl,(%edi)
0000297d	popl	%ds
0000297e	incl	%eax
0000297f	addb	%dl,0x89(%ebp)
00002982	inl	$0x83,%eax
00002984	inb	%dx,%al
00002985	sbbb	%cl,0x44890c45(%ebx)
0000298b	andb	$0x04,%al
0000298d	movl	0x08(%ebp),%eax
00002990	movl	%eax,(%esp)
00002993	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000299b	calll	KeyValues::FindKey(char const*, bool)
000029a0	movl	%eax,%ecx
000029a2	testl	%ecx,%ecx
000029a4	jne	0x000029ab
000029a6	movl	0x10(%ebp),%eax
000029a9	jmp	0x000029b6
000029ab	xorl	%eax,%eax
000029ad	cmpb	$0x04,0x10(%ecx)
000029b1	jne	0x000029b6
000029b3	movl	0x0c(%ecx),%eax
000029b6	addl	$0x18,%esp
000029b9	popl	%ebp
000029ba	ret
000029bb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetFloat(char const*, float):
000029c0	pushl	%ebp
000029c1	movl	%esp,%ebp
000029c3	pushl	%esi
000029c4	subl	$0x24,%esp
000029c7	calll	0x000029cc
000029cc	popl	%esi
000029cd	movl	0x0c(%ebp),%eax
000029d0	movl	%eax,0x04(%esp)
000029d4	movl	0x08(%ebp),%eax
000029d7	movl	%eax,(%esp)
000029da	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000029e2	calll	KeyValues::FindKey(char const*, bool)
000029e7	testl	%eax,%eax
000029e9	jne	0x000029f2
000029eb	movss	0x10(%ebp),%xmm0
000029f0	jmp	0x00002a58
000029f2	movsbl	0x10(%eax),%ecx
000029f6	decl	%ecx
000029f7	pxor	%xmm0,%xmm0
000029fb	cmpl	$0x06,%ecx
000029fe	ja	0x00002a58
00002a00	movl	0x0000009c(%esi,%ecx,4),%ecx
00002a07	addl	%esi,%ecx
00002a09	jmp	*%ecx
00002a0b	movl	0x04(%eax),%eax
00002a0e	movl	%eax,(%esp)
00002a11	calll	_atof
00002a16	fstps	0xe8(%ebp)
00002a19	movss	0xe8(%ebp),%xmm0
00002a1e	jmp	0x00002a58
00002a20	movss	0x0c(%eax),%xmm0
00002a25	jmp	0x00002a58
00002a27	cvtsi2ss	0x0c(%eax),%xmm0
00002a2c	jmp	0x00002a58
00002a2e	movl	0x04(%eax),%eax
00002a31	movl	(%eax),%ecx
00002a33	movl	0x04(%eax),%eax
00002a36	movl	%eax,0xf4(%ebp)
00002a39	movl	%ecx,0xf0(%ebp)
00002a3c	testl	%eax,%eax
00002a3e	sets	%al
00002a41	xorb	$0x01,%al
00002a43	movzbl	%al,%eax
00002a46	fildq	0xf0(%ebp)
00002a49	fadds	0x3a8f0-0x29cc(%esi,%eax,4)
00002a50	fstps	0xec(%ebp)
00002a53	movss	0xec(%ebp),%xmm0
00002a58	movss	%xmm0,0xe4(%ebp)
00002a5d	flds	0xe4(%ebp)
00002a60	addl	$0x24,%esp
00002a63	popl	%esi
00002a64	popl	%ebp
00002a65	ret
00002a66	nop
00002a68	aas
00002a69	addb	%al,(%eax)
00002a6b	addb	%bl,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx)
00002a6e	addb	%al,(%eax)
00002a70	pushl	%esp
00002a71	addb	%al,(%eax)
00002a73	addb	%cl,0x008c0000(%eax,%eax)
00002a7a	addb	%al,(%eax)
00002a7c	mov	%es,(%eax)
00002a7e	addb	%al,(%eax)
00002a80	bound	(%eax),%eax
00002a82	addb	%al,(%eax)
00002a84	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetString(char const*, char const*):
00002a90	pushl	%ebp
00002a91	movl	%esp,%ebp
00002a93	pushl	%ebx
00002a94	pushl	%edi
00002a95	pushl	%esi
00002a96	subl	$0x0000025c,%esp
00002a9c	calll	0x00002aa1
00002aa1	popl	%ebx
00002aa2	movl	0x42cec-0x2aa1(%ebx),%eax
00002aa8	movl	%eax,0xfffffdac(%ebp)
00002aae	movl	(%eax),%eax
00002ab0	movl	%eax,0xf0(%ebp)
00002ab3	movl	0x0c(%ebp),%eax
00002ab6	movl	%eax,0x04(%esp)
00002aba	movl	0x08(%ebp),%eax
00002abd	movl	%eax,(%esp)
00002ac0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002ac8	calll	KeyValues::FindKey(char const*, bool)
00002acd	movl	%eax,%esi
00002acf	movl	0x10(%ebp),%edi
00002ad2	testl	%esi,%esi
00002ad4	je	0x00002b86
00002ada	movsbl	0x10(%esi),%eax
00002ade	decl	%eax
00002adf	cmpl	$0x06,%eax
00002ae2	ja	0x00002b86
00002ae8	movl	0x00000107(%ebx,%eax,4),%eax
00002aef	addl	%ebx,%eax
00002af1	jmp	*%eax
00002af3	movss	0x0c(%esi),%xmm0
00002af8	cvtss2sd	%xmm0,%xmm0
00002afc	movsd	%xmm0,0x0c(%esp)
00002b02	leal	0x3a988-0x2aa1(%ebx),%eax
00002b08	jmp	0x00002b17
00002b0a	movl	0x0c(%esi),%eax
00002b0d	movl	%eax,0x0c(%esp)
00002b11	leal	0x3a97b-0x2aa1(%ebx),%eax
00002b17	movl	%eax,0x08(%esp)
00002b1b	leal	0xb0(%ebp),%edi
00002b1e	movl	%edi,(%esp)
00002b21	movl	$0x00000040,0x04(%esp)
00002b29	calll	V_snprintf(char*, int, char const*, ...)
00002b2e	movl	%edi,0x08(%esp)
00002b32	jmp	0x00002b71
00002b34	movl	0x04(%esi),%ecx
00002b37	movl	(%ecx),%eax
00002b39	movl	0x04(%ecx),%ecx
00002b3c	movl	%ecx,0x10(%esp)
00002b40	movl	%eax,0x0c(%esp)
00002b44	leal	0x3a9cf-0x2aa1(%ebx),%eax
00002b4a	jmp	0x00002b17
00002b4c	movl	0x08(%esi),%eax
00002b4f	leal	0xfffffdb0(%ebp),%ebx
00002b55	movl	%ebx,0x04(%esp)
00002b59	movl	%eax,(%esp)
00002b5c	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
00002b64	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00002b69	testl	%eax,%eax
00002b6b	je	0x00002b86
00002b6d	movl	%ebx,0x08(%esp)
00002b71	movl	0x0c(%ebp),%eax
00002b74	movl	%eax,0x04(%esp)
00002b78	movl	0x08(%ebp),%eax
00002b7b	movl	%eax,(%esp)
00002b7e	calll	KeyValues::SetString(char const*, char const*)
00002b83	movl	0x04(%esi),%edi
00002b86	movl	0xfffffdac(%ebp),%eax
00002b8c	movl	(%eax),%eax
00002b8e	cmpl	0xf0(%ebp),%eax
00002b91	jne	0x00002ba0
00002b93	movl	%edi,%eax
00002b95	addl	$0x0000025c,%esp
00002b9b	popl	%esi
00002b9c	popl	%edi
00002b9d	popl	%ebx
00002b9e	popl	%ebp
00002b9f	ret
00002ba0	calll	___stack_chk_fail
00002ba5	nopl	(%eax)
00002ba8	loop	0x00002baa
00002baa	addb	%al,(%eax)
00002bac	imull	$0x00520000,(%eax),%eax
00002bb2	addb	%al,(%eax)
00002bb4	imull	$0x00ab0000,(%eax),%eax
00002bba	addb	%al,(%eax)
00002bbc	inl	KeyValues::GetSymbolForStringClassic(char const*, bool),%eax
00002bbe	addb	%al,(%eax)
00002bc0	xchgl	%ebx,%eax
00002bc1	addb	%al,(%eax)
00002bc3	addb	%ah,0x66(%esi)
00002bc6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetWString(char const*, wchar_t const*):
00002bd0	pushl	%ebp
00002bd1	movl	%esp,%ebp
00002bd3	pushl	%ebx
00002bd4	pushl	%edi
00002bd5	pushl	%esi
00002bd6	subl	$0x0000012c,%esp
00002bdc	calll	0x00002be1
00002be1	popl	%edi
00002be2	movl	0x42cec-0x2be1(%edi),%eax
00002be8	movl	%eax,0xfffffee8(%ebp)
00002bee	movl	(%eax),%eax
00002bf0	movl	%eax,0xf0(%ebp)
00002bf3	movl	0x0c(%ebp),%eax
00002bf6	movl	%eax,0x04(%esp)
00002bfa	movl	0x08(%ebp),%ebx
00002bfd	movl	%ebx,(%esp)
00002c00	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002c08	calll	KeyValues::FindKey(char const*, bool)
00002c0d	movl	%eax,%esi
00002c0f	movl	0x10(%ebp),%eax
00002c12	movl	%eax,0xfffffeec(%ebp)
00002c18	testl	%esi,%esi
00002c1a	je	0x00002d34
00002c20	movsbl	0x10(%esi),%eax
00002c24	decl	%eax
00002c25	cmpl	$0x06,%eax
00002c28	ja	0x00002d34
00002c2e	movl	0x00000177(%edi,%eax,4),%eax
00002c35	addl	%edi,%eax
00002c37	jmp	*%eax
00002c39	movss	0x0c(%esi),%xmm0
00002c3e	cvtss2sd	%xmm0,%xmm0
00002c42	movsd	%xmm0,0x0c(%esp)
00002c48	leal	0x3ac50-0x2be1(%edi),%eax
00002c4e	jmp	0x00002c5d
00002c50	movl	0x0c(%esi),%eax
00002c53	movl	%eax,0x0c(%esp)
00002c57	leal	0x3ac5c-0x2be1(%edi),%eax
00002c5d	movl	%eax,0x08(%esp)
00002c61	movl	%esi,%edi
00002c63	leal	0xfffffef0(%ebp),%esi
00002c69	movl	%esi,(%esp)
00002c6c	movl	$0x00000040,0x04(%esp)
00002c74	calll	_swprintf
00002c79	movl	%esi,0x08(%esp)
00002c7d	movl	%edi,%esi
00002c7f	movl	0x0c(%ebp),%eax
00002c82	movl	%eax,0x04(%esp)
00002c86	movl	%ebx,(%esp)
00002c89	calll	KeyValues::SetWString(char const*, wchar_t const*)
00002c8e	jmp	0x00002d1d
00002c93	movl	0x04(%esi),%ecx
00002c96	movl	(%ecx),%eax
00002c98	movl	0x04(%ecx),%ecx
00002c9b	movl	%ecx,0x10(%esp)
00002c9f	movl	%eax,0x0c(%esp)
00002ca3	leal	0x3ac68-0x2be1(%edi),%eax
00002ca9	jmp	0x00002c5d
00002cab	movl	%esi,0xfffffee4(%ebp)
00002cb1	movl	0x04(%esi),%esi
00002cb4	movl	%esi,(%esp)
00002cb7	calll	_strlen
00002cbc	movl	%eax,%edi
00002cbe	leal	0x01(%edi),%eax
00002cc1	movl	$0xffffffff,%ecx
00002cc6	movl	$0x00000004,%edx
00002ccb	mull	%edx
00002ccd	cmovol	%ecx,%eax
00002cd0	movl	%eax,(%esp)
00002cd3	calll	operator new[](unsigned long)
00002cd8	movl	%eax,%ebx
00002cda	leal	0x00000004(,%edi,4),%eax
00002ce1	movl	%eax,0x08(%esp)
00002ce5	movl	%ebx,0x04(%esp)
00002ce9	movl	%esi,(%esp)
00002cec	calll	V_UTF8ToUnicode(char const*, wchar_t*, int)
00002cf1	testl	%eax,%eax
00002cf3	js	0x00002d28
00002cf5	movl	%ebx,0x08(%esp)
00002cf9	movl	0x0c(%ebp),%eax
00002cfc	movl	%eax,0x04(%esp)
00002d00	movl	0x08(%ebp),%eax
00002d03	movl	%eax,(%esp)
00002d06	calll	KeyValues::SetWString(char const*, wchar_t const*)
00002d0b	testl	%ebx,%ebx
00002d0d	movl	0xfffffee4(%ebp),%esi
00002d13	je	0x00002d1d
00002d15	movl	%ebx,(%esp)
00002d18	calll	operator delete[](void*)
00002d1d	movl	0x08(%esi),%eax
00002d20	movl	%eax,0xfffffeec(%ebp)
00002d26	jmp	0x00002d34
00002d28	testl	%ebx,%ebx
00002d2a	je	0x00002d34
00002d2c	movl	%ebx,(%esp)
00002d2f	calll	operator delete[](void*)
00002d34	movl	0xfffffee8(%ebp),%eax
00002d3a	movl	(%eax),%eax
00002d3c	cmpl	0xf0(%ebp),%eax
00002d3f	jne	0x00002d52
00002d41	movl	0xfffffeec(%ebp),%eax
00002d47	addl	$0x0000012c,%esp
00002d4d	popl	%esi
00002d4e	popl	%edi
00002d4f	popl	%ebx
00002d50	popl	%ebp
00002d51	ret
00002d52	calll	___stack_chk_fail
00002d57	nop
00002d58	lretl	KeyValues::GetSymbolForStringClassic(char const*, bool)
00002d5b	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edi)
00002d5e	addb	%al,(%eax)
00002d60	popl	%eax
00002d61	addb	%al,(%eax)
00002d63	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edi)
00002d66	addb	%al,(%eax)
00002d68	cmpb	$0x01,%al
00002d6a	addb	%al,(%eax)
00002d6c	pushl	%ebx
00002d6d	addl	%eax,(%eax)
00002d6f	addb	%dh,0x66000000(%edx)
00002d75	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetBool(char const*, bool):
00002d80	pushl	%ebp
00002d81	movl	%esp,%ebp
00002d83	pushl	%ebx
00002d84	pushl	%edi
00002d85	pushl	%esi
00002d86	subl	$0x0c,%esp
00002d89	calll	0x00002d8e
00002d8e	popl	%edi
00002d8f	movl	0x0c(%ebp),%esi
00002d92	movl	%esi,0x04(%esp)
00002d96	movl	0x08(%ebp),%ebx
00002d99	movl	%ebx,(%esp)
00002d9c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002da4	calll	KeyValues::FindKey(char const*, bool)
00002da9	testl	%eax,%eax
00002dab	jne	0x00002db2
00002dad	movb	0x10(%ebp),%al
00002db0	jmp	0x00002e1e
00002db2	movl	%esi,0x04(%esp)
00002db6	movl	%ebx,(%esp)
00002db9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002dc1	xorl	%esi,%esi
00002dc3	calll	KeyValues::FindKey(char const*, bool)
00002dc8	testl	%eax,%eax
00002dca	je	0x00002e19
00002dcc	movsbl	0x10(%eax),%ecx
00002dd0	decl	%ecx
00002dd1	cmpl	$0x06,%ecx
00002dd4	ja	0x00002e16
00002dd6	xorl	%esi,%esi
00002dd8	addl	0x0000009e(%edi,%ecx,4),%edi
00002ddf	jmp	*%edi
00002de1	movl	0x04(%eax),%eax
00002de4	movl	%eax,(%esp)
00002de7	calll	_atoi
00002dec	movl	%eax,%esi
00002dee	jmp	0x00002e19
00002df0	movl	0x08(%eax),%eax
00002df3	movl	%eax,(%esp)
00002df6	movl	$0x0000000a,0x08(%esp)
00002dfe	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002e06	calll	_wcstol
00002e0b	movl	%eax,%esi
00002e0d	jmp	0x00002e19
00002e0f	cvttss2si	0x0c(%eax),%esi
00002e14	jmp	0x00002e19
00002e16	movl	0x0c(%eax),%esi
00002e19	testl	%esi,%esi
00002e1b	setne	%al
00002e1e	movzbl	%al,%eax
00002e21	addl	$0x0c,%esp
00002e24	popl	%esi
00002e25	popl	%edi
00002e26	popl	%ebx
00002e27	popl	%ebp
00002e28	ret
00002e29	nopl	(%eax)
00002e2c	pushl	%ebx
00002e2d	addb	%al,(%eax)
00002e2f	addb	%cl,0x81000000(%eax)
00002e35	addb	%al,(%eax)
00002e37	addb	%cl,0x62000000(%eax)
00002e3d	addb	%al,(%eax)
00002e3f	addb	%cl,0x8b000000(%eax)
00002e45	addb	%al,(%eax)
00002e47	addb	%cl,(%edi)
00002e49	popl	%ds
00002e4a	testb	(%eax),%al
00002e4c	addb	%al,(%eax)
00002e4e	addb	%al,(%eax)
KeyValues::GetColor(char const*):
00002e50	pushl	%ebp
00002e51	movl	%esp,%ebp
00002e53	pushl	%edi
00002e54	pushl	%esi
00002e55	subl	KeyValues::GetStringForSymbolClassic(int),%esp
00002e58	calll	0x00002e5d
00002e5d	popl	%edi
00002e5e	movl	0x0c(%ebp),%eax
00002e61	movl	%eax,0x04(%esp)
00002e65	movl	0x08(%ebp),%eax
00002e68	movl	%eax,(%esp)
00002e6b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002e73	xorl	%esi,%esi
00002e75	calll	KeyValues::FindKey(char const*, bool)
00002e7a	testl	%eax,%eax
00002e7c	je	0x00002f48
00002e82	movb	0x10(%eax),%cl
00002e85	decb	%cl
00002e87	xorl	%esi,%esi
00002e89	cmpb	$0x05,%cl
00002e8c	ja	0x00002f48
00002e92	movzbl	%cl,%ecx
00002e95	movl	0x000000f7(%edi,%ecx,4),%ecx
00002e9c	addl	%edi,%ecx
00002e9e	jmp	*%ecx
00002ea0	movzbl	0x0c(%eax),%ecx
00002ea4	movzbl	0x0d(%eax),%edx
00002ea8	shll	$0x08,%edx
00002eab	orl	%ecx,%edx
00002ead	movzbl	0x0e(%eax),%ecx
00002eb1	shll	$0x10,%ecx
00002eb4	orl	%edx,%ecx
00002eb6	movzbl	0x0f(%eax),%esi
00002eba	jmp	0x00002f43
00002ebf	cvttss2si	0x0c(%eax),%eax
00002ec4	movzbl	%al,%esi
00002ec7	jmp	0x00002f48
00002ec9	movzbl	0x0c(%eax),%esi
00002ecd	jmp	0x00002f48
00002ecf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xf4(%ebp)
00002ed6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xf0(%ebp)
00002edd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
00002ee4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
00002eeb	movl	0x04(%eax),%eax
00002eee	leal	0xe8(%ebp),%ecx
00002ef1	movl	%ecx,0x14(%esp)
00002ef5	leal	0xec(%ebp),%ecx
00002ef8	movl	%ecx,0x10(%esp)
00002efc	leal	0xf0(%ebp),%ecx
00002eff	movl	%ecx,0x0c(%esp)
00002f03	leal	0xf4(%ebp),%ecx
00002f06	movl	%ecx,0x08(%esp)
00002f0a	leal	0x3a9d4-0x2e5d(%edi),%ecx
00002f10	movl	%ecx,0x04(%esp)
00002f14	movl	%eax,(%esp)
00002f17	calll	_sscanf
00002f1c	cvttss2si	0xf4(%ebp),%eax
00002f21	movzbl	%al,%ecx
00002f24	cvttss2si	0xf0(%ebp),%eax
00002f29	movzbl	%al,%eax
00002f2c	shll	$0x08,%eax
00002f2f	orl	%ecx,%eax
00002f31	cvttss2si	0xec(%ebp),%ecx
00002f36	movzbl	%cl,%ecx
00002f39	shll	$0x10,%ecx
00002f3c	orl	%eax,%ecx
00002f3e	cvttss2si	0xe8(%ebp),%esi
00002f43	shll	$0x18,%esi
00002f46	orl	%ecx,%esi
00002f48	movl	%esi,%eax
00002f4a	addl	KeyValues::GetStringForSymbolClassic(int),%esp
00002f4d	popl	%esi
00002f4e	popl	%edi
00002f4f	popl	%ebp
00002f50	ret
00002f51	nopl	(%eax)
00002f54	jb	0x00002f56
00002f56	addb	%al,(%eax)
00002f58	insb
00002f59	addb	%al,(%eax)
00002f5b	addb	%ah,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx)
00002f5e	addb	%al,(%eax)
00002f60	jmp	0x00002f62
00002f62	addb	%al,(%eax)
00002f64	jmp	0x00002f66
00002f66	addb	%al,(%eax)
00002f68	incl	%ebx
00002f69	addb	%al,(%eax)
00002f6b	addb	%cl,(%edi)
00002f6d	popl	%ds
00002f6e	incl	%eax
00002f6f	addb	%dl,0x89(%ebp)
00002f72	inl	$0x83,%eax
00002f74	inb	%dx,%al
00002f75	sbbb	%cl,0x44890c45(%ebx)
00002f7b	andb	$0x04,%al
00002f7d	movl	0x08(%ebp),%eax
00002f80	movl	%eax,(%esp)
00002f83	movl	$0x00000001,0x08(%esp)
00002f8b	calll	KeyValues::FindKey(char const*, bool)
00002f90	testl	%eax,%eax
00002f92	je	0x00002fb1
00002f94	leal	0x10(%ebp),%ecx
00002f97	movb	$0x06,0x10(%eax)
00002f9b	movl	(%ecx),%ecx
00002f9d	movb	%cl,0x0c(%eax)
00002fa0	movb	%ch,0x0d(%eax)
00002fa3	movl	%ecx,%edx
00002fa5	shrl	$0x10,%edx
00002fa8	movb	%dl,0x0e(%eax)
00002fab	shrl	$0x18,%ecx
00002fae	movb	%cl,0x0f(%eax)
00002fb1	addl	$0x18,%esp
00002fb4	popl	%ebp
00002fb5	ret
00002fb6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetStringValue(char const*):
00002fc0	pushl	%ebp
00002fc1	movl	%esp,%ebp
00002fc3	pushl	%ebx
00002fc4	pushl	%edi
00002fc5	pushl	%esi
00002fc6	subl	$0x0c,%esp
00002fc9	calll	0x00002fce
00002fce	popl	%esi
00002fcf	movl	0x08(%ebp),%edi
00002fd2	movl	0x04(%edi),%eax
00002fd5	testl	%eax,%eax
00002fd7	je	0x00002fe1
00002fd9	movl	%eax,(%esp)
00002fdc	calll	operator delete[](void*)
00002fe1	movl	0x08(%edi),%eax
00002fe4	testl	%eax,%eax
00002fe6	je	0x00002ff0
00002fe8	movl	%eax,(%esp)
00002feb	calll	operator delete[](void*)
00002ff0	movl	0x0c(%ebp),%eax
00002ff3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00002ffa	leal	0x3a9e0-0x2fce(%esi),%ebx
00003000	testl	%eax,%eax
00003002	cmovnel	%eax,%ebx
00003005	movl	%ebx,(%esp)
00003008	calll	_strlen
0000300d	movl	%eax,%esi
0000300f	incl	%esi
00003010	testl	%esi,%esi
00003012	movl	$0xffffffff,%eax
00003017	cmovnsl	%esi,%eax
0000301a	movl	%eax,(%esp)
0000301d	calll	operator new[](unsigned long)
00003022	movl	%eax,0x04(%edi)
00003025	movl	%esi,0x08(%esp)
00003029	movl	%ebx,0x04(%esp)
0000302d	movl	%eax,(%esp)
00003030	calll	_memcpy
00003035	movb	$0x01,0x10(%edi)
00003039	addl	$0x0c,%esp
0000303c	popl	%esi
0000303d	popl	%edi
0000303e	popl	%ebx
0000303f	popl	%ebp
00003040	ret
00003041	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetUint64(char const*, unsigned long long):
00003050	pushl	%ebp
00003051	movl	%esp,%ebp
00003053	pushl	%ebx
00003054	pushl	%edi
00003055	pushl	%esi
00003056	subl	$0x0c,%esp
00003059	movl	0x0c(%ebp),%eax
0000305c	movl	%eax,0x04(%esp)
00003060	movl	0x08(%ebp),%eax
00003063	movl	%eax,(%esp)
00003066	movl	$0x00000001,0x08(%esp)
0000306e	calll	KeyValues::FindKey(char const*, bool)
00003073	movl	%eax,%esi
00003075	testl	%esi,%esi
00003077	je	0x000030bc
00003079	movl	0x04(%esi),%eax
0000307c	testl	%eax,%eax
0000307e	je	0x00003088
00003080	movl	%eax,(%esp)
00003083	calll	operator delete[](void*)
00003088	movl	0x08(%esi),%eax
0000308b	testl	%eax,%eax
0000308d	je	0x00003097
0000308f	movl	%eax,(%esp)
00003092	calll	operator delete[](void*)
00003097	movl	0x14(%ebp),%edi
0000309a	movl	0x10(%ebp),%ebx
0000309d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000030a4	movl	$0x00000008,(%esp)
000030ab	calll	operator new[](unsigned long)
000030b0	movl	%eax,0x04(%esi)
000030b3	movl	%edi,0x04(%eax)
000030b6	movl	%ebx,(%eax)
000030b8	movb	$0x07,0x10(%esi)
000030bc	addl	$0x0c,%esp
000030bf	popl	%esi
000030c0	popl	%edi
000030c1	popl	%ebx
000030c2	popl	%ebp
000030c3	ret
000030c4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetFloat(char const*, float):
000030d0	pushl	%ebp
000030d1	movl	%esp,%ebp
000030d3	subl	$0x18,%esp
000030d6	movl	0x0c(%ebp),%eax
000030d9	movl	%eax,0x04(%esp)
000030dd	movl	0x08(%ebp),%eax
000030e0	movl	%eax,(%esp)
000030e3	movl	$0x00000001,0x08(%esp)
000030eb	calll	KeyValues::FindKey(char const*, bool)
000030f0	testl	%eax,%eax
000030f2	je	0x00003102
000030f4	movss	0x10(%ebp),%xmm0
000030f9	movss	%xmm0,0x0c(%eax)
000030fe	movb	$0x03,0x10(%eax)
00003102	addl	$0x18,%esp
00003105	popl	%ebp
00003106	ret
00003107	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetPtr(char const*, void*):
00003110	pushl	%ebp
00003111	movl	%esp,%ebp
00003113	subl	$0x18,%esp
00003116	movl	0x0c(%ebp),%eax
00003119	movl	%eax,0x04(%esp)
0000311d	movl	0x08(%ebp),%eax
00003120	movl	%eax,(%esp)
00003123	movl	$0x00000001,0x08(%esp)
0000312b	calll	KeyValues::FindKey(char const*, bool)
00003130	testl	%eax,%eax
00003132	je	0x0000313e
00003134	movl	0x10(%ebp),%ecx
00003137	movl	%ecx,0x0c(%eax)
0000313a	movb	$0x04,0x10(%eax)
0000313e	addl	$0x18,%esp
00003141	popl	%ebp
00003142	ret
00003143	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveCopyKeyValues(KeyValues&):
00003150	pushl	%ebp
00003151	movl	%esp,%ebp
00003153	pushl	%ebx
00003154	pushl	%edi
00003155	pushl	%esi
00003156	subl	$0x0000012c,%esp
0000315c	calll	0x00003161
00003161	popl	%eax
00003162	movl	%eax,0xfffffeec(%ebp)
00003168	movl	0x42cec-0x3161(%eax),%eax
0000316e	movl	%eax,0xfffffee8(%ebp)
00003174	movl	(%eax),%eax
00003176	movl	%eax,0xf0(%ebp)
00003179	movl	0x0c(%ebp),%ebx
0000317c	movl	(%ebx),%eax
0000317e	movl	0x08(%ebp),%esi
00003181	movl	%eax,(%esi)
00003183	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
00003187	jne	0x000032c5
0000318d	movb	0x10(%ebx),%al
00003190	movb	%al,0x10(%esi)
00003193	movsbl	0x10(%ebx),%eax
00003197	decl	%eax
00003198	cmpl	$0x06,%eax
0000319b	ja	0x000032bb
000031a1	movl	0xfffffeec(%ebp),%ecx
000031a7	movl	0x000002d3(%ecx,%eax,4),%eax
000031ae	addl	%ecx,%eax
000031b0	jmp	*%eax
000031b2	movl	0x04(%ebx),%eax
000031b5	testl	%eax,%eax
000031b7	je	0x000032bb
000031bd	movl	%eax,(%esp)
000031c0	calll	_strlen
000031c5	movl	%esi,%edi
000031c7	movl	%eax,%esi
000031c9	incl	%esi
000031ca	testl	%esi,%esi
000031cc	movl	$0xffffffff,%eax
000031d1	cmovnsl	%esi,%eax
000031d4	movl	%eax,(%esp)
000031d7	calll	operator new[](unsigned long)
000031dc	movl	%eax,0x04(%edi)
000031df	movl	0x04(%ebx),%ecx
000031e2	movl	%esi,0x08(%esp)
000031e6	movl	%edi,%esi
000031e8	movl	%ecx,0x04(%esp)
000031ec	movl	%eax,(%esp)
000031ef	calll	V_strncpy(char*, char const*, int)
000031f4	jmp	0x000032bb
000031f9	movl	0x0c(%ebx),%eax
000031fc	movl	%eax,0x0c(%esi)
000031ff	movl	%eax,0x0c(%esp)
00003203	movl	0xfffffeec(%ebp),%eax
00003209	leal	0x3a97b-0x3161(%eax),%eax
0000320f	movl	%eax,0x08(%esp)
00003213	leal	0xfffffef0(%ebp),%edi
00003219	movl	%edi,(%esp)
0000321c	movl	$0x00000100,0x04(%esp)
00003224	calll	V_snprintf(char*, int, char const*, ...)
00003229	movl	%edi,(%esp)
0000322c	calll	_strlen
00003231	movl	%ebx,%edi
00003233	movl	%esi,%ebx
00003235	movl	%eax,%esi
00003237	incl	%esi
00003238	testl	%esi,%esi
0000323a	movl	$0xffffffff,%eax
0000323f	cmovnsl	%esi,%eax
00003242	movl	%eax,(%esp)
00003245	calll	operator new[](unsigned long)
0000324a	movl	%eax,0x04(%ebx)
0000324d	movl	%esi,0x08(%esp)
00003251	movl	%ebx,%esi
00003253	movl	%edi,%ebx
00003255	leal	0xfffffef0(%ebp),%ecx
0000325b	jmp	0x000031e8
0000325d	movss	0x0c(%ebx),%xmm0
00003262	movss	%xmm0,0x0c(%esi)
00003267	cvtss2sd	%xmm0,%xmm0
0000326b	movsd	%xmm0,0x0c(%esp)
00003271	movl	0xfffffeec(%ebp),%eax
00003277	leal	0x3a988-0x3161(%eax),%eax
0000327d	jmp	0x0000320f
0000327f	movl	0x0c(%ebx),%eax
00003282	movl	%eax,0x0c(%esi)
00003285	jmp	0x000032bb
00003287	movl	$0x00000008,(%esp)
0000328e	calll	operator new[](unsigned long)
00003293	movl	%eax,0x04(%esi)
00003296	movl	0x04(%ebx),%ecx
00003299	movsd	(%ecx),%xmm0
0000329d	movsd	%xmm0,(%eax)
000032a1	jmp	0x000032bb
000032a3	movb	0x0c(%ebx),%al
000032a6	movb	%al,0x0c(%esi)
000032a9	movb	0x0d(%ebx),%al
000032ac	movb	%al,0x0d(%esi)
000032af	movb	0x0e(%ebx),%al
000032b2	movb	%al,0x0e(%esi)
000032b5	movb	0x0f(%ebx),%al
000032b8	movb	%al,0x0f(%esi)
000032bb	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
000032bf	je	0x0000334b
000032c5	calll	_KeyValuesSystem
000032ca	movl	(%eax),%ecx
000032cc	movl	%eax,(%esp)
000032cf	movl	$0x00000020,0x04(%esp)
000032d7	call	*0x04(%ecx)
000032da	movl	%eax,%edi
000032dc	movl	$0xffffffff,(%edi)
000032e2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
000032e9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000032f0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
000032f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
000032fe	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00003305	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000330b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00003312	movb	$0x01,0x12(%edi)
00003316	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
0000331a	movl	0xfffffeec(%ebp),%eax
00003320	movl	KeyValues::s_pfGetSymbolForString-0x3161(%eax),%eax
00003326	movl	$0x00000001,0x04(%esp)
0000332e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esp)
00003335	call	*%eax
00003337	movl	%eax,(%edi)
00003339	movl	%edi,0x18(%esi)
0000333c	movl	0x18(%ebx),%eax
0000333f	movl	%eax,0x04(%esp)
00003343	movl	%edi,(%esp)
00003346	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
0000334b	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebx)
0000334f	je	0x000033db
00003355	calll	_KeyValuesSystem
0000335a	movl	(%eax),%ecx
0000335c	movl	%eax,(%esp)
0000335f	movl	$0x00000020,0x04(%esp)
00003367	call	*0x04(%ecx)
0000336a	movl	%eax,%edi
0000336c	movl	$0xffffffff,(%edi)
00003372	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00003379	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00003380	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00003387	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
0000338e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00003395	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000339b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
000033a2	movb	$0x01,0x12(%edi)
000033a6	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
000033aa	movl	0xfffffeec(%ebp),%eax
000033b0	movl	KeyValues::s_pfGetSymbolForString-0x3161(%eax),%eax
000033b6	movl	$0x00000001,0x04(%esp)
000033be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esp)
000033c5	call	*%eax
000033c7	movl	%eax,(%edi)
000033c9	movl	%edi,0x14(%esi)
000033cc	movl	0x14(%ebx),%eax
000033cf	movl	%eax,0x04(%esp)
000033d3	movl	%edi,(%esp)
000033d6	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
000033db	movl	0xfffffee8(%ebp),%eax
000033e1	movl	(%eax),%eax
000033e3	cmpl	0xf0(%ebp),%eax
000033e6	jne	0x00003427
000033e8	addl	$0x0000012c,%esp
000033ee	popl	%esi
000033ef	popl	%edi
000033f0	popl	%ebx
000033f1	popl	%ebp
000033f2	ret
000033f3	movl	%eax,%esi
000033f5	calll	_KeyValuesSystem
000033fa	movl	(%eax),%ecx
000033fc	movl	0x08(%ecx),%ecx
000033ff	movl	%edi,0x04(%esp)
00003403	movl	%eax,(%esp)
00003406	call	*%ecx
00003408	jmp	0x0000341f
0000340a	movl	%eax,%esi
0000340c	calll	_KeyValuesSystem
00003411	movl	(%eax),%ecx
00003413	movl	0x08(%ecx),%ecx
00003416	movl	%edi,0x04(%esp)
0000341a	movl	%eax,(%esp)
0000341d	call	*%ecx
0000341f	movl	%esi,(%esp)
00003422	calll	__Unwind_Resume
00003427	calll	___stack_chk_fail
0000342c	calll	std::terminate()
00003431	nopl	(%eax)
00003434	pushl	%ecx
00003435	addb	%al,(%eax)
00003437	addb	%bl,0xfc000000(%eax)
0000343d	addb	%al,(%eax)
0000343f	addb	%bl,(%esi)
00003441	addl	%eax,(%eax)
00003443	addb	%bl,0x01(%edx)
00003446	addb	%al,(%eax)
00003448	incl	%edx
00003449	addl	%eax,(%eax)
0000344b	addb	%ah,(%esi)
0000344d	addl	%eax,(%eax)
0000344f	addb	%dl,0x89(%ebp)
00003452	inl	$0x56,%eax
00003454	subl	$0x14,%esp
00003457	movl	0x08(%ebp),%esi
0000345a	movl	%esi,(%esp)
0000345d	calll	KeyValues::RemoveEverything()
00003462	movl	$0xffffffff,(%esi)
00003468	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000346f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003476	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000347d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003484	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000348b	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003491	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003498	movb	$0x01,0x12(%esi)
0000349c	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000034a0	movl	0x0c(%ebp),%eax
000034a3	movl	%eax,0x04(%esp)
000034a7	movl	%esi,(%esp)
000034aa	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
000034af	movl	%esi,%eax
000034b1	addl	$0x14,%esp
000034b4	popl	%esi
000034b5	popl	%ebp
000034b6	ret
000034b7	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::CopySubkeys(KeyValues*) const:
000034c0	pushl	%ebp
000034c1	movl	%esp,%ebp
000034c3	pushl	%ebx
000034c4	pushl	%edi
000034c5	pushl	%esi
000034c6	subl	$0x0c,%esp
000034c9	movl	0x08(%ebp),%eax
000034cc	movl	0x18(%eax),%esi
000034cf	testl	%esi,%esi
000034d1	je	0x00003504
000034d3	movl	0x0c(%ebp),%edi
000034d6	xorl	%ebx,%ebx
000034d8	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000034e0	movl	%esi,(%esp)
000034e3	calll	KeyValues::MakeCopy() const
000034e8	testl	%ebx,%ebx
000034ea	je	0x000034f1
000034ec	movl	%eax,0x14(%ebx)
000034ef	jmp	0x000034f4
000034f1	movl	%eax,0x18(%edi)
000034f4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000034fb	movl	0x14(%esi),%esi
000034fe	testl	%esi,%esi
00003500	movl	%eax,%ebx
00003502	jne	0x000034e0
00003504	addl	$0x0c,%esp
00003507	popl	%esi
00003508	popl	%edi
00003509	popl	%ebx
0000350a	popl	%ebp
0000350b	ret
0000350c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::MakeCopy() const:
00003510	pushl	%ebp
00003511	movl	%esp,%ebp
00003513	pushl	%ebx
00003514	pushl	%edi
00003515	pushl	%esi
00003516	subl	$0x1c,%esp
00003519	calll	0x0000351e
0000351e	popl	%edi
0000351f	calll	_KeyValuesSystem
00003524	movl	(%eax),%ecx
00003526	movl	%eax,(%esp)
00003529	movl	$0x00000020,0x04(%esp)
00003531	call	*0x04(%ecx)
00003534	movl	%eax,%esi
00003536	movl	0x08(%ebp),%ebx
00003539	movl	(%ebx),%eax
0000353b	movl	KeyValues::s_pfGetStringForSymbol-0x351e(%edi),%ecx
00003541	movl	%eax,(%esp)
00003544	call	*%ecx
00003546	movl	$0xffffffff,(%esi)
0000354c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003553	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
0000355a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00003561	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003568	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000356f	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003575	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
0000357c	movb	$0x01,0x12(%esi)
00003580	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00003584	movl	KeyValues::s_pfGetSymbolForString-0x351e(%edi),%ecx
0000358a	movl	%eax,(%esp)
0000358d	movl	$0x00000001,0x04(%esp)
00003595	call	*%ecx
00003597	movl	%eax,(%esi)
00003599	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%ebx)
0000359d	setne	0x11(%esi)
000035a1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ebx)
000035a5	setne	0x12(%esi)
000035a9	movb	0x10(%ebx),%al
000035ac	movb	%al,0x10(%esi)
000035af	movsbl	0x10(%ebx),%eax
000035b3	decl	%eax
000035b4	cmpl	$0x06,%eax
000035b7	ja	0x000036b9
000035bd	leal	0x04(%esi),%ecx
000035c0	addl	0x000001e6(%edi,%eax,4),%edi
000035c7	jmp	*%edi
000035c9	movl	%eax,%edi
000035cb	calll	_KeyValuesSystem
000035d0	movl	(%eax),%ecx
000035d2	movl	0x08(%ecx),%ecx
000035d5	movl	%esi,0x04(%esp)
000035d9	movl	%eax,(%esp)
000035dc	call	*%ecx
000035de	movl	%edi,(%esp)
000035e1	calll	__Unwind_Resume
000035e6	movl	0x04(%ebx),%eax
000035e9	testl	%eax,%eax
000035eb	movl	%ecx,0xf0(%ebp)
000035ee	je	0x000036b9
000035f4	movl	%eax,(%esp)
000035f7	calll	_strlen
000035fc	movl	%eax,%edi
000035fe	incl	%edi
000035ff	testl	%edi,%edi
00003601	movl	$0xffffffff,%eax
00003606	cmovnsl	%edi,%eax
00003609	movl	%eax,(%esp)
0000360c	calll	operator new[](unsigned long)
00003611	movl	0xf0(%ebp),%ecx
00003614	movl	%eax,(%ecx)
00003616	movl	0x04(%ebx),%ecx
00003619	movl	%edi,0x08(%esp)
0000361d	movl	%ecx,0x04(%esp)
00003621	movl	%eax,(%esp)
00003624	calll	_memcpy
00003629	jmp	0x000036b9
0000362e	movl	0x08(%ebx),%eax
00003631	testl	%eax,%eax
00003633	je	0x000036b9
00003639	movl	%eax,(%esp)
0000363c	calll	_wcslen
00003641	movl	%eax,%edi
00003643	leal	0x01(%edi),%eax
00003646	movl	$0xffffffff,%ecx
0000364b	movl	$0x00000004,%edx
00003650	mull	%edx
00003652	cmovol	%ecx,%eax
00003655	movl	%eax,(%esp)
00003658	calll	operator new[](unsigned long)
0000365d	movl	%eax,0x08(%esi)
00003660	movl	0x08(%ebx),%ecx
00003663	leal	0x00000004(,%edi,4),%edx
0000366a	movl	%edx,0x08(%esp)
0000366e	jmp	0x0000361d
00003670	movss	0x0c(%ebx),%xmm0
00003675	movss	%xmm0,0x0c(%esi)
0000367a	jmp	0x000036b9
0000367c	movl	0x0c(%ebx),%eax
0000367f	movl	%eax,0x0c(%esi)
00003682	jmp	0x000036b9
00003684	movb	0x0c(%ebx),%al
00003687	movb	%al,0x0c(%esi)
0000368a	movb	0x0d(%ebx),%al
0000368d	movb	%al,0x0d(%esi)
00003690	movb	0x0e(%ebx),%al
00003693	movb	%al,0x0e(%esi)
00003696	movb	0x0f(%ebx),%al
00003699	movb	%al,0x0f(%esi)
0000369c	jmp	0x000036b9
0000369e	movl	$0x00000008,(%esp)
000036a5	movl	%ecx,%edi
000036a7	calll	operator new[](unsigned long)
000036ac	movl	%eax,(%edi)
000036ae	movl	0x04(%ebx),%ecx
000036b1	movsd	(%ecx),%xmm0
000036b5	movsd	%xmm0,(%eax)
000036b9	movl	0x18(%ebx),%edi
000036bc	testl	%edi,%edi
000036be	je	0x000036f4
000036c0	xorl	%ebx,%ebx
000036c2	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000036d0	movl	%edi,(%esp)
000036d3	calll	KeyValues::MakeCopy() const
000036d8	testl	%ebx,%ebx
000036da	je	0x000036e1
000036dc	movl	%eax,0x14(%ebx)
000036df	jmp	0x000036e4
000036e1	movl	%eax,0x18(%esi)
000036e4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000036eb	movl	0x14(%edi),%edi
000036ee	testl	%edi,%edi
000036f0	movl	%eax,%ebx
000036f2	jne	0x000036d0
000036f4	movl	%esi,%eax
000036f6	addl	$0x1c,%esp
000036f9	popl	%esi
000036fa	popl	%edi
000036fb	popl	%ebx
000036fc	popl	%ebp
000036fd	ret
000036fe	calll	std::terminate()
00003703	nop
00003704	enter	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::GetSymbolForStringClassic(char const*, bool)
00003708	popl	%esi
00003709	addl	%eax,(%eax)
0000370b	addb	%dl,0x01(%edx)
0000370e	addb	%al,(%eax)
00003710	popl	%esi
00003711	addl	%eax,(%eax)
00003713	addb	%dl,(%eax)
00003715	addl	%eax,(%eax)
00003717	addb	%ah,0x01(%esi)
0000371a	addb	%al,(%eax)
0000371c	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ecx)
0000371f	addb	%dl,0x89(%ebp)
00003722	inl	$0x83,%eax
00003724	inb	%dx,%al
00003725	sbbb	%cl,0x44890c45(%ebx)
0000372b	andb	$0x04,%al
0000372d	movl	0x08(%ebp),%eax
00003730	movl	%eax,(%esp)
00003733	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000373b	calll	KeyValues::FindKey(char const*, bool)
00003740	movb	$0x01,%cl
00003742	testl	%eax,%eax
00003744	je	0x00003756
00003746	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000374a	jne	0x00003754
0000374c	movb	$0x01,%cl
0000374e	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
00003752	je	0x00003756
00003754	xorb	%cl,%cl
00003756	movzbl	%cl,%eax
00003759	addl	$0x18,%esp
0000375c	popl	%ebp
0000375d	ret
0000375e	nop
KeyValues::Clear():
00003760	pushl	%ebp
00003761	movl	%esp,%ebp
00003763	pushl	%edi
00003764	pushl	%esi
00003765	subl	$0x10,%esp
00003768	movl	0x08(%ebp),%esi
0000376b	movl	0x18(%esi),%edi
0000376e	testl	%edi,%edi
00003770	je	0x0000378b
00003772	movl	%edi,(%esp)
00003775	calll	KeyValues::RemoveEverything()
0000377a	calll	_KeyValuesSystem
0000377f	movl	(%eax),%ecx
00003781	movl	%edi,0x04(%esp)
00003785	movl	%eax,(%esp)
00003788	call	*0x08(%ecx)
0000378b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003792	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003796	addl	$0x10,%esp
00003799	popl	%esi
0000379a	popl	%edi
0000379b	popl	%ebp
0000379c	ret
0000379d	movl	%eax,%esi
0000379f	calll	_KeyValuesSystem
000037a4	movl	(%eax),%ecx
000037a6	movl	0x08(%ecx),%ecx
000037a9	movl	%edi,0x04(%esp)
000037ad	movl	%eax,(%esp)
000037b0	call	*%ecx
000037b2	movl	%esi,(%esp)
000037b5	calll	__Unwind_Resume
000037ba	calll	std::terminate()
000037bf	nop
KeyValues::GetDataType(char const*):
000037c0	pushl	%ebp
000037c1	movl	%esp,%ebp
000037c3	subl	$0x18,%esp
000037c6	movl	0x0c(%ebp),%eax
000037c9	movl	%eax,0x04(%esp)
000037cd	movl	0x08(%ebp),%eax
000037d0	movl	%eax,(%esp)
000037d3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000037db	calll	KeyValues::FindKey(char const*, bool)
000037e0	testl	%eax,%eax
000037e2	jne	0x000037e8
000037e4	xorl	%eax,%eax
000037e6	jmp	0x000037ec
000037e8	movsbl	0x10(%eax),%eax
000037ec	addl	$0x18,%esp
000037ef	popl	%ebp
000037f0	ret
000037f1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::deleteThis():
00003800	pushl	%ebp
00003801	movl	%esp,%ebp
00003803	pushl	%edi
00003804	pushl	%esi
00003805	subl	$0x10,%esp
00003808	movl	0x08(%ebp),%edi
0000380b	testl	%edi,%edi
0000380d	je	0x00003828
0000380f	movl	%edi,(%esp)
00003812	calll	KeyValues::RemoveEverything()
00003817	calll	_KeyValuesSystem
0000381c	movl	(%eax),%ecx
0000381e	movl	%edi,0x04(%esp)
00003822	movl	%eax,(%esp)
00003825	call	*0x08(%ecx)
00003828	addl	$0x10,%esp
0000382b	popl	%esi
0000382c	popl	%edi
0000382d	popl	%ebp
0000382e	ret
0000382f	movl	%eax,%esi
00003831	calll	_KeyValuesSystem
00003836	movl	(%eax),%ecx
00003838	movl	0x08(%ecx),%ecx
0000383b	movl	%edi,0x04(%esp)
0000383f	movl	%eax,(%esp)
00003842	call	*%ecx
00003844	movl	%esi,(%esp)
00003847	calll	__Unwind_Resume
0000384c	calll	std::terminate()
00003851	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::AppendIncludedKeys(CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
00003860	pushl	%ebx
00003861	pushl	%edi
00003862	pushl	%esi
00003863	movl	0x14(%esp),%eax
00003867	movl	0x0c(%eax),%ecx
0000386a	testl	%ecx,%ecx
0000386c	jle	0x000038a3
0000386e	movl	0x10(%esp),%esi
00003872	xorl	%edx,%edx
00003874	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003880	movl	(%eax),%edi
00003882	movl	(%edi,%edx,4),%ebx
00003885	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003890	movl	%esi,%edi
00003892	movl	0x14(%edi),%esi
00003895	testl	%esi,%esi
00003897	jne	0x00003890
00003899	movl	%ebx,0x14(%edi)
0000389c	incl	%edx
0000389d	cmpl	%ecx,%edx
0000389f	movl	%edi,%esi
000038a1	jne	0x00003880
000038a3	popl	%esi
000038a4	popl	%edi
000038a5	popl	%ebx
000038a6	ret
000038a7	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
000038b0	pushl	%ebp
000038b1	movl	%esp,%ebp
000038b3	pushl	%ebx
000038b4	pushl	%edi
000038b5	pushl	%esi
000038b6	subl	$0x0000021c,%esp
000038bc	calll	0x000038c1
000038c1	popl	%edi
000038c2	movl	0x42cec-0x38c1(%edi),%eax
000038c8	movl	%eax,0xfffffdec(%ebp)
000038ce	movl	(%eax),%eax
000038d0	movl	%eax,0xf0(%ebp)
000038d3	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebp)
000038d7	je	0x00003a8f
000038dd	movl	0x10(%ebp),%esi
000038e0	movl	0x0c(%ebp),%eax
000038e3	movl	%eax,0x04(%esp)
000038e7	leal	0xfffffdf0(%ebp),%ebx
000038ed	movl	%ebx,(%esp)
000038f0	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
000038f8	calll	V_strncpy(char*, char const*, int)
000038fd	movl	%ebx,(%esp)
00003900	calll	_strlen
00003905	jmp	0x0000391b
00003907	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003910	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xfffffdef(%ebp,%eax)
00003918	leal	0xff(%eax),%eax
0000391b	testl	%eax,%eax
0000391d	jle	0x00003930
0000391f	movb	0xfffffdef(%ebp,%eax),%cl
00003926	cmpb	$0x2f,%cl
00003929	je	0x00003930
0000392b	cmpb	$0x5c,%cl
0000392e	jne	0x00003910
00003930	movl	%esi,0x04(%esp)
00003934	movl	%ebx,(%esp)
00003937	movl	$0xffffffff,0x0c(%esp)
0000393f	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
00003947	calll	V_strncat(char*, char const*, unsigned long, int)
0000394c	calll	_KeyValuesSystem
00003951	movl	(%eax),%ecx
00003953	movl	%eax,(%esp)
00003956	movl	$0x00000020,0x04(%esp)
0000395e	call	*0x04(%ecx)
00003961	movl	%eax,%esi
00003963	movl	$0xffffffff,(%esi)
00003969	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003970	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003977	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000397e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003985	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000398c	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003992	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003999	movb	$0x01,0x12(%esi)
0000399d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000039a1	movl	KeyValues::s_pfGetSymbolForString-0x38c1(%edi),%eax
000039a7	movl	%ebx,(%esp)
000039aa	movl	$0x00000001,0x04(%esp)
000039b2	call	*%eax
000039b4	movl	%eax,(%esi)
000039b6	movl	0x08(%ebp),%eax
000039b9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
000039bd	setne	0x11(%esi)
000039c1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
000039c5	setne	0x12(%esi)
000039c9	movl	0x18(%ebp),%eax
000039cc	movl	%eax,0x0c(%esp)
000039d0	movl	%ebx,0x08(%esp)
000039d4	movl	0x14(%ebp),%eax
000039d7	movl	%eax,0x04(%esp)
000039db	movl	%esi,(%esp)
000039de	calll	KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*)
000039e3	cmpb	$0x01,%al
000039e5	jne	0x00003a75
000039eb	movl	0x1c(%ebp),%edx
000039ee	movl	0x04(%edx),%eax
000039f1	movl	0x0c(%edx),%edi
000039f4	leal	0x01(%edi),%ebx
000039f7	cmpl	%eax,%ebx
000039f9	movl	%edi,%ecx
000039fb	jle	0x00003a20
000039fd	movl	%ebx,%ecx
000039ff	subl	%eax,%ecx
00003a01	movl	%ecx,0x04(%esp)
00003a05	movl	%edx,(%esp)
00003a08	movl	%ebx,0xfffffde8(%ebp)
00003a0e	movl	%edx,%ebx
00003a10	calll	CUtlMemory<KeyValues*, int>::Grow(int)
00003a15	movl	%ebx,%edx
00003a17	movl	0xfffffde8(%ebp),%ebx
00003a1d	movl	0x0c(%edx),%ecx
00003a20	incl	%ecx
00003a21	movl	%ecx,0x0c(%edx)
00003a24	movl	(%edx),%eax
00003a26	movl	%eax,0x10(%edx)
00003a29	subl	%edi,%ecx
00003a2b	decl	%ecx
00003a2c	testl	%ecx,%ecx
00003a2e	jle	0x00003a4d
00003a30	shll	$0x02,%ecx
00003a33	movl	%ecx,0x08(%esp)
00003a37	leal	(%eax,%edi,4),%ecx
00003a3a	movl	%ecx,0x04(%esp)
00003a3e	leal	(%eax,%ebx,4),%eax
00003a41	movl	%eax,(%esp)
00003a44	movl	%edx,%ebx
00003a46	calll	_memmove
00003a4b	movl	(%ebx),%eax
00003a4d	shll	$0x02,%edi
00003a50	addl	%eax,%edi
00003a52	je	0x00003a8f
00003a54	movl	%esi,(%edi)
00003a56	jmp	0x00003a8f
00003a58	movl	%eax,%edi
00003a5a	calll	_KeyValuesSystem
00003a5f	movl	(%eax),%ecx
00003a61	movl	0x08(%ecx),%ecx
00003a64	movl	%esi,0x04(%esp)
00003a68	movl	%eax,(%esp)
00003a6b	call	*%ecx
00003a6d	movl	%edi,(%esp)
00003a70	calll	__Unwind_Resume
00003a75	movl	%ebx,0x04(%esp)
00003a79	leal	0x3a9e1-0x38c1(%edi),%eax
00003a7f	movl	%eax,(%esp)
00003a82	calll	DevMsg(char const*, ...)
00003a87	movl	%esi,(%esp)
00003a8a	calll	KeyValues::deleteThis()
00003a8f	movl	0xfffffdec(%ebp),%eax
00003a95	movl	(%eax),%eax
00003a97	cmpl	0xf0(%ebp),%eax
00003a9a	jne	0x00003aac
00003a9c	addl	$0x0000021c,%esp
00003aa2	popl	%esi
00003aa3	popl	%edi
00003aa4	popl	%ebx
00003aa5	popl	%ebp
00003aa6	ret
00003aa7	calll	std::terminate()
00003aac	calll	___stack_chk_fail
00003ab1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::MergeBaseKeys(CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
00003ac0	pushl	%ebp
00003ac1	movl	%esp,%ebp
00003ac3	pushl	%ebx
00003ac4	pushl	%edi
00003ac5	pushl	%esi
00003ac6	subl	$0x0c,%esp
00003ac9	movl	0x0c(%ebp),%eax
00003acc	movl	0x0c(%eax),%edi
00003acf	testl	%edi,%edi
00003ad1	jle	0x00003afd
00003ad3	xorl	%esi,%esi
00003ad5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003ae0	movl	%eax,%ebx
00003ae2	movl	(%ebx),%eax
00003ae4	movl	(%eax,%esi,4),%eax
00003ae7	movl	%eax,0x04(%esp)
00003aeb	movl	0x08(%ebp),%eax
00003aee	movl	%eax,(%esp)
00003af1	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
00003af6	movl	%ebx,%eax
00003af8	incl	%esi
00003af9	cmpl	%esi,%edi
00003afb	jne	0x00003ae0
00003afd	addl	$0x0c,%esp
00003b00	popl	%esi
00003b01	popl	%edi
00003b02	popl	%ebx
00003b03	popl	%ebp
00003b04	ret
00003b05	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveMergeKeyValues(KeyValues*):
00003b10	pushl	%ebp
00003b11	movl	%esp,%ebp
00003b13	pushl	%ebx
00003b14	pushl	%edi
00003b15	pushl	%esi
00003b16	subl	$0x1c,%esp
00003b19	calll	0x00003b1e
00003b1e	popl	%ebx
00003b1f	movl	0x0c(%ebp),%eax
00003b22	movl	0x18(%eax),%eax
00003b25	movl	%eax,0xf0(%ebp)
00003b28	testl	%eax,%eax
00003b2a	je	0x00003bcd
00003b30	movl	0x08(%ebp),%esi
00003b33	addl	$0x18,%esi
00003b36	movl	%esi,0xec(%ebp)
00003b39	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00003b40	movl	%esi,%edi
00003b42	jmp	0x00003b53
00003b44	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003b50	addl	$0x14,%edi
00003b53	movl	(%edi),%edi
00003b55	testl	%edi,%edi
00003b57	je	0x00003b98
00003b59	movl	0xf0(%ebp),%eax
00003b5c	movl	(%eax),%eax
00003b5e	movl	%eax,(%esp)
00003b61	call	*KeyValues::s_pfGetStringForSymbol-0x3b1e(%ebx)
00003b67	movl	%eax,%esi
00003b69	movl	(%edi),%eax
00003b6b	movl	%eax,(%esp)
00003b6e	call	*KeyValues::s_pfGetStringForSymbol-0x3b1e(%ebx)
00003b74	movl	%eax,0x04(%esp)
00003b78	movl	%esi,(%esp)
00003b7b	calll	_strcmp
00003b80	testl	%eax,%eax
00003b82	jne	0x00003b50
00003b84	movl	0xf0(%ebp),%eax
00003b87	movl	%eax,0x04(%esp)
00003b8b	movl	%edi,(%esp)
00003b8e	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
00003b93	movl	0xec(%ebp),%esi
00003b96	jmp	0x00003bbc
00003b98	movl	0xf0(%ebp),%eax
00003b9b	movl	%eax,(%esp)
00003b9e	calll	KeyValues::MakeCopy() const
00003ba3	movl	0xec(%ebp),%esi
00003ba6	movl	(%esi),%ecx
00003ba8	testl	%ecx,%ecx
00003baa	jne	0x00003bb0
00003bac	movl	%eax,(%esi)
00003bae	jmp	0x00003bbc
00003bb0	movl	%ecx,%edx
00003bb2	movl	0x14(%edx),%ecx
00003bb5	testl	%ecx,%ecx
00003bb7	jne	0x00003bb0
00003bb9	movl	%eax,0x14(%edx)
00003bbc	movl	0xf0(%ebp),%eax
00003bbf	movl	0x14(%eax),%eax
00003bc2	movl	%eax,0xf0(%ebp)
00003bc5	testl	%eax,%eax
00003bc7	jne	0x00003b40
00003bcd	addl	$0x1c,%esp
00003bd0	popl	%esi
00003bd1	popl	%edi
00003bd2	popl	%ebx
00003bd3	popl	%ebp
00003bd4	ret
00003bd5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
EvaluateConditional(char const*):
00003be0	pushl	%ebp
00003be1	movl	%esp,%ebp
00003be3	pushl	%ebx
00003be4	pushl	%edi
00003be5	pushl	%esi
00003be6	subl	$0x0c,%esp
00003be9	calll	0x00003bee
00003bee	popl	%esi
00003bef	xorb	%bl,%bl
00003bf1	movl	0x08(%ebp),%eax
00003bf4	testl	%eax,%eax
00003bf6	je	0x00003c3b
00003bf8	leal	0x01(%eax),%edi
00003bfb	cmpb	$0x5b,(%eax)
00003bfe	cmovnel	%eax,%edi
00003c01	movb	(%edi),%bh
00003c03	leal	0x3aa28-0x3bee(%esi),%eax
00003c09	movl	%eax,0x04(%esp)
00003c0d	movl	%edi,(%esp)
00003c10	cmpb	$0x21,%bh
00003c13	sete	%bl
00003c16	calll	V_stristr(char const*, char const*)
00003c1b	testl	%eax,%eax
00003c1d	jne	0x00003c3b
00003c1f	leal	0x3aa2e-0x3bee(%esi),%eax
00003c25	movl	%eax,0x04(%esp)
00003c29	movl	%edi,(%esp)
00003c2c	calll	V_stristr(char const*, char const*)
00003c31	testl	%eax,%eax
00003c33	je	0x00003c40
00003c35	cmpb	$0x21,%bh
00003c38	setne	%bl
00003c3b	movzbl	%bl,%eax
00003c3e	jmp	0x00003ca4
00003c40	leal	0x3aa35-0x3bee(%esi),%eax
00003c46	movl	%eax,0x04(%esp)
00003c4a	movl	%edi,(%esp)
00003c4d	calll	V_stristr(char const*, char const*)
00003c52	testl	%eax,%eax
00003c54	jne	0x00003c3b
00003c56	leal	0x3aa3e-0x3bee(%esi),%eax
00003c5c	movl	%eax,0x04(%esp)
00003c60	movl	%edi,(%esp)
00003c63	calll	V_stristr(char const*, char const*)
00003c68	testl	%eax,%eax
00003c6a	jne	0x00003c35
00003c6c	leal	0x3aa43-0x3bee(%esi),%eax
00003c72	movl	%eax,0x04(%esp)
00003c76	movl	%edi,(%esp)
00003c79	calll	V_stristr(char const*, char const*)
00003c7e	testl	%eax,%eax
00003c80	jne	0x00003c3b
00003c82	leal	0x3aa4a-0x3bee(%esi),%eax
00003c88	movl	%eax,0x04(%esp)
00003c8c	movl	%edi,(%esp)
00003c8f	cmpb	$0x21,%bh
00003c92	setne	%bl
00003c95	calll	V_stristr(char const*, char const*)
00003c9a	testl	%eax,%eax
00003c9c	setne	%al
00003c9f	andb	%bl,%al
00003ca1	movzbl	%al,%eax
00003ca4	addl	$0x0c,%esp
00003ca7	popl	%esi
00003ca8	popl	%edi
00003ca9	popl	%ebx
00003caa	popl	%ebp
00003cab	ret
00003cac	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*):
00003cb0	pushl	%ebp
00003cb1	movl	%esp,%ebp
00003cb3	pushl	%ebx
00003cb4	pushl	%edi
00003cb5	pushl	%esi
00003cb6	subl	$0x6c,%esp
00003cb9	calll	0x00003cbe
00003cbe	popl	%eax
00003cbf	movl	%eax,0xb0(%ebp)
00003cc2	xorps	%xmm0,%xmm0
00003cc5	movaps	%xmm0,0xd8(%ebp)
00003cc9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
00003cd0	movaps	%xmm0,0xb8(%ebp)
00003cd4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00003cdb	movl	0x0c(%ebp),%ecx
00003cde	movl	%ecx,_g_KeyValuesErrorStack-0x3cbe+0x00000100(%eax)
00003ce4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),_g_KeyValuesErrorStack-0x3cbe+0x00000108(%eax)
00003cee	xorl	%ebx,%ebx
00003cf0	movl	0x08(%ebp),%eax
00003cf3	movl	%eax,%esi
00003cf5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003d00	leal	0xb6(%ebp),%eax
00003d03	movl	%eax,0x0c(%esp)
00003d07	leal	0xb7(%ebp),%eax
00003d0a	movl	%eax,0x08(%esp)
00003d0e	movl	0x10(%ebp),%eax
00003d11	movl	%eax,0x04(%esp)
00003d15	movl	0x08(%ebp),%eax
00003d18	movl	%eax,(%esp)
00003d1b	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003d20	movl	%eax,%edi
00003d22	movl	0x10(%ebp),%eax
00003d25	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00003d29	jne	0x0000401e
00003d2f	testl	%edi,%edi
00003d31	je	0x0000401e
00003d37	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
00003d3a	je	0x0000401e
00003d40	movl	0xb0(%ebp),%eax
00003d43	leal	0x3aa51-0x3cbe(%eax),%eax
00003d49	movl	%eax,0x04(%esp)
00003d4d	movl	%edi,(%esp)
00003d50	calll	V_stricmp(char const*, char const*)
00003d55	testl	%eax,%eax
00003d57	jne	0x00003dfa
00003d5d	leal	0xb6(%ebp),%eax
00003d60	movl	%eax,0x0c(%esp)
00003d64	leal	0xb7(%ebp),%eax
00003d67	movl	%eax,0x08(%esp)
00003d6b	movl	0x10(%ebp),%eax
00003d6e	movl	%eax,0x04(%esp)
00003d72	movl	0x08(%ebp),%eax
00003d75	movl	%eax,(%esp)
00003d78	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003d7d	testl	%eax,%eax
00003d7f	je	0x00003d86
00003d81	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00003d84	jne	0x00003dca
00003d86	movl	0xb0(%ebp),%ecx
00003d89	leal	0x3aa5a-0x3cbe(%ecx),%eax
00003d8f	movl	%eax,0x04(%esp)
00003d93	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003d99	movl	%eax,(%esp)
00003d9c	calll	CKeyValuesErrorStack::ReportError(char const*)
00003da1	jmp	0x00004011
00003da6	jmp	0x00003dac
00003da8	jmp	0x00003dac
00003daa	jmp	0x00003dac
00003dac	movl	%eax,%edi
00003dae	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
00003db5	movl	0xb8(%ebp),%eax
00003db8	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00003dbc	jns	0x00004162
00003dc2	movl	%eax,0xc8(%ebp)
00003dc5	jmp	0x0000418a
00003dca	leal	0xd8(%ebp),%ecx
00003dcd	movl	%ecx,0x14(%esp)
00003dd1	movl	0x18(%ebp),%ecx
00003dd4	movl	%ecx,0x10(%esp)
00003dd8	movl	0x14(%ebp),%ecx
00003ddb	movl	%ecx,0x0c(%esp)
00003ddf	movl	%eax,0x08(%esp)
00003de3	movl	0x0c(%ebp),%eax
00003de6	movl	%eax,0x04(%esp)
00003dea	movl	0x08(%ebp),%eax
00003ded	movl	%eax,(%esp)
00003df0	calll	KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
00003df5	jmp	0x00004011
00003dfa	movl	0xb0(%ebp),%eax
00003dfd	leal	0x3aa6c-0x3cbe(%eax),%eax
00003e03	movl	%eax,0x04(%esp)
00003e07	movl	%edi,(%esp)
00003e0a	calll	V_stricmp(char const*, char const*)
00003e0f	testl	%eax,%eax
00003e11	jne	0x00003e8c
00003e13	leal	0xb6(%ebp),%eax
00003e16	movl	%eax,0x0c(%esp)
00003e1a	leal	0xb7(%ebp),%eax
00003e1d	movl	%eax,0x08(%esp)
00003e21	movl	0x10(%ebp),%eax
00003e24	movl	%eax,0x04(%esp)
00003e28	movl	0x08(%ebp),%eax
00003e2b	movl	%eax,(%esp)
00003e2e	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003e33	testl	%eax,%eax
00003e35	je	0x00003e3c
00003e37	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00003e3a	jne	0x00003e5c
00003e3c	movl	0xb0(%ebp),%ecx
00003e3f	leal	0x3aa72-0x3cbe(%ecx),%eax
00003e45	movl	%eax,0x04(%esp)
00003e49	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003e4f	movl	%eax,(%esp)
00003e52	calll	CKeyValuesErrorStack::ReportError(char const*)
00003e57	jmp	0x00004011
00003e5c	leal	0xb8(%ebp),%ecx
00003e5f	movl	%ecx,0x14(%esp)
00003e63	movl	0x18(%ebp),%ecx
00003e66	movl	%ecx,0x10(%esp)
00003e6a	movl	0x14(%ebp),%ecx
00003e6d	movl	%ecx,0x0c(%esp)
00003e71	movl	%eax,0x08(%esp)
00003e75	movl	0x0c(%ebp),%eax
00003e78	movl	%eax,0x04(%esp)
00003e7c	movl	0x08(%ebp),%eax
00003e7f	movl	%eax,(%esp)
00003e82	calll	KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
00003e87	jmp	0x00004011
00003e8c	testl	%esi,%esi
00003e8e	jne	0x00003f39
00003e94	calll	_KeyValuesSystem
00003e99	movl	(%eax),%ecx
00003e9b	movl	0x04(%ecx),%ecx
00003e9e	movl	%eax,(%esp)
00003ea1	movl	$0x00000020,0x04(%esp)
00003ea9	call	*%ecx
00003eab	movl	%eax,%esi
00003ead	movl	$0xffffffff,(%esi)
00003eb3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003eba	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003ec1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00003ec8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003ecf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00003ed6	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003edc	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003ee3	movb	$0x01,0x12(%esi)
00003ee7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00003eeb	movl	0xb0(%ebp),%eax
00003eee	movl	KeyValues::s_pfGetSymbolForString-0x3cbe(%eax),%eax
00003ef4	movl	%edi,(%esp)
00003ef7	movl	$0x00000001,0x04(%esp)
00003eff	call	*%eax
00003f01	movl	%eax,(%esi)
00003f03	movl	0x08(%ebp),%eax
00003f06	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
00003f0a	setne	0x11(%esi)
00003f0e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00003f12	setne	0x12(%esi)
00003f16	testl	%ebx,%ebx
00003f18	je	0x00003f51
00003f1a	movl	%esi,0x14(%ebx)
00003f1d	jmp	0x00003f51
00003f1f	movl	%eax,%edi
00003f21	calll	_KeyValuesSystem
00003f26	movl	(%eax),%ecx
00003f28	movl	0x08(%ecx),%ecx
00003f2b	movl	%esi,0x04(%esp)
00003f2f	movl	%eax,(%esp)
00003f32	call	*%ecx
00003f34	jmp	0x00003dae
00003f39	movl	0xb0(%ebp),%eax
00003f3c	movl	KeyValues::s_pfGetSymbolForString-0x3cbe(%eax),%eax
00003f42	movl	%edi,(%esp)
00003f45	movl	$0x00000001,0x04(%esp)
00003f4d	call	*%eax
00003f4f	movl	%eax,(%esi)
00003f51	movl	%ebx,%edi
00003f53	leal	0xb6(%ebp),%eax
00003f56	movl	%eax,0x0c(%esp)
00003f5a	leal	0xb7(%ebp),%eax
00003f5d	movl	%eax,0x08(%esp)
00003f61	movl	0x10(%ebp),%eax
00003f64	movl	%eax,0x04(%esp)
00003f68	movl	0x08(%ebp),%eax
00003f6b	movl	%eax,(%esp)
00003f6e	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003f73	movb	$0x01,%bl
00003f75	testb	$0x01,0xb6(%ebp)
00003f79	je	0x00003fb0
00003f7b	movb	$0x01,%bl
00003f7d	movl	0x08(%ebp),%ecx
00003f80	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ecx)
00003f84	je	0x00003f90
00003f86	movl	%eax,(%esp)
00003f89	calll	EvaluateConditional(char const*)
00003f8e	movb	%al,%bl
00003f90	leal	0xb6(%ebp),%eax
00003f93	movl	%eax,0x0c(%esp)
00003f97	leal	0xb7(%ebp),%eax
00003f9a	movl	%eax,0x08(%esp)
00003f9e	movl	0x10(%ebp),%eax
00003fa1	movl	%eax,0x04(%esp)
00003fa5	movl	0x08(%ebp),%eax
00003fa8	movl	%eax,(%esp)
00003fab	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003fb0	testl	%eax,%eax
00003fb2	je	0x00003fd7
00003fb4	cmpb	$0x7b,(%eax)
00003fb7	jne	0x00003fd7
00003fb9	testb	$0x01,0xb7(%ebp)
00003fbd	jne	0x00003fd7
00003fbf	movl	0x10(%ebp),%eax
00003fc2	movl	%eax,0x08(%esp)
00003fc6	movl	0x0c(%ebp),%eax
00003fc9	movl	%eax,0x04(%esp)
00003fcd	movl	%esi,(%esp)
00003fd0	calll	KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
00003fd5	jmp	0x00003ff2
00003fd7	movl	0xb0(%ebp),%ecx
00003fda	leal	0x3aa81-0x3cbe(%ecx),%eax
00003fe0	movl	%eax,0x04(%esp)
00003fe4	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003fea	movl	%eax,(%esp)
00003fed	calll	CKeyValuesErrorStack::ReportError(char const*)
00003ff2	testb	%bl,%bl
00003ff4	je	0x00003ffc
00003ff6	movl	%esi,%ebx
00003ff8	xorl	%esi,%esi
00003ffa	jmp	0x00004011
00003ffc	testl	%edi,%edi
00003ffe	je	0x00004007
00004000	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004007	movl	%edi,%ebx
00004009	movl	%esi,(%esp)
0000400c	calll	KeyValues::Clear()
00004011	movl	0x10(%ebp),%eax
00004014	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00004018	je	0x00003d00
0000401e	movl	0xe4(%ebp),%edi
00004021	testl	%edi,%edi
00004023	jle	0x00004056
00004025	xorl	%eax,%eax
00004027	movl	0x08(%ebp),%ecx
0000402a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004030	movl	0xd8(%ebp),%edx
00004033	movl	(%edx,%eax,4),%esi
00004036	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004040	movl	%ecx,%edx
00004042	movl	0x14(%edx),%ecx
00004045	testl	%ecx,%ecx
00004047	jne	0x00004040
00004049	movl	%esi,0x14(%edx)
0000404c	incl	%eax
0000404d	cmpl	%edi,%eax
0000404f	movl	%edx,%ecx
00004051	jne	0x00004030
00004053	movl	0xe4(%ebp),%edi
00004056	decl	%edi
00004057	movl	0xd8(%ebp),%esi
0000405a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004060	testl	%edi,%edi
00004062	jle	0x00004072
00004064	movl	(%esi,%edi,4),%eax
00004067	decl	%edi
00004068	movl	%eax,(%esp)
0000406b	calll	KeyValues::deleteThis()
00004070	jmp	0x00004060
00004072	movl	%esi,0xac(%ebp)
00004075	movl	0xc4(%ebp),%esi
00004078	testl	%esi,%esi
0000407a	jle	0x000040a7
0000407c	movl	0xb8(%ebp),%ebx
0000407f	movl	%esi,%edi
00004081	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004090	movl	(%ebx),%eax
00004092	movl	%eax,0x04(%esp)
00004096	movl	0x08(%ebp),%eax
00004099	movl	%eax,(%esp)
0000409c	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
000040a1	addl	$0x04,%ebx
000040a4	decl	%edi
000040a5	jne	0x00004090
000040a7	movl	0xb8(%ebp),%ebx
000040aa	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000040b0	testl	%esi,%esi
000040b2	jle	0x000040c5
000040b4	movl	0xfc(%ebx,%esi,4),%eax
000040b8	leal	0xff(%esi),%esi
000040bb	movl	%eax,(%esp)
000040be	calll	KeyValues::deleteThis()
000040c3	jmp	0x000040b0
000040c5	movl	0xb0(%ebp),%ecx
000040c8	leal	0x3a9e0-0x3cbe(%ecx),%eax
000040ce	movl	%eax,_g_KeyValuesErrorStack-0x3cbe+0x00000100(%ecx)
000040d4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),_g_KeyValuesErrorStack-0x3cbe+0x00000108(%ecx)
000040de	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
000040e5	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000040e9	movl	0xac(%ebp),%esi
000040ec	jns	0x000040f3
000040ee	movl	%ebx,0xc8(%ebp)
000040f1	jmp	0x0000411b
000040f3	testl	%ebx,%ebx
000040f5	je	0x00004106
000040f7	movl	%ebx,(%esp)
000040fa	calll	_free
000040ff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00004106	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000410d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00004114	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000411b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00004122	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe0(%ebp)
00004126	jns	0x0000412d
00004128	movl	%esi,0xe8(%ebp)
0000412b	jmp	0x00004155
0000412d	testl	%esi,%esi
0000412f	je	0x00004140
00004131	movl	%esi,(%esp)
00004134	calll	_free
00004139	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd8(%ebp)
00004140	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
00004147	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
0000414e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
00004155	movl	$0x00000001,%eax
0000415a	addl	$0x6c,%esp
0000415d	popl	%esi
0000415e	popl	%edi
0000415f	popl	%ebx
00004160	popl	%ebp
00004161	ret
00004162	testl	%eax,%eax
00004164	je	0x00004175
00004166	movl	%eax,(%esp)
00004169	calll	_free
0000416e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00004175	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000417c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00004183	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000418a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00004191	movl	0xd8(%ebp),%eax
00004194	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe0(%ebp)
00004198	jns	0x000041a5
0000419a	movl	%eax,0xe8(%ebp)
0000419d	movl	%edi,(%esp)
000041a0	calll	__Unwind_Resume
000041a5	testl	%eax,%eax
000041a7	je	0x000041b8
000041a9	movl	%eax,(%esp)
000041ac	calll	_free
000041b1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd8(%ebp)
000041b8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
000041bf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
000041c6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
000041cd	movl	%edi,(%esp)
000041d0	calll	__Unwind_Resume
000041d5	calll	std::terminate()
000041da	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&):
000041e0	pushl	%ebp
000041e1	movl	%esp,%ebp
000041e3	pushl	%ebx
000041e4	pushl	%edi
000041e5	pushl	%esi
000041e6	subl	$0x5c,%esp
000041e9	calll	0x000041ee
000041ee	popl	%edx
000041ef	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%eax
000041f5	movl	0x08(%ebp),%ecx
000041f8	cmpl	$0x3f,%eax
000041fb	jg	0x0000420c
000041fd	movl	(%ecx),%ecx
000041ff	movl	%ecx,_g_KeyValuesErrorStack-0x41ee(%edx,%eax,4)
00004206	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%eax
0000420c	leal	0x01(%eax),%esi
0000420f	movl	%esi,_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx)
00004215	movl	_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx),%ecx
0000421b	cmpl	%eax,%ecx
0000421d	cmovlel	%eax,%ecx
00004220	movl	%ecx,_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx)
00004226	cmpl	$0x3f,%esi
00004229	jg	0x00004242
0000422b	movl	$0xffffffff,_g_KeyValuesErrorStack-0x41ee+0x00000004(%edx,%eax,4)
00004236	movl	_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx),%ecx
0000423c	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%esi
00004242	cmpl	%esi,%ecx
00004244	cmovlel	%esi,%ecx
00004247	leal	0x01(%esi),%eax
0000424a	movl	%eax,_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx)
00004250	movl	%ecx,_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx)
00004256	movl	%edx,0xd0(%ebp)
00004259	movl	0x08(%ebp),%eax
0000425c	movl	0x18(%eax),%eax
0000425f	xorl	%ecx,%ecx
00004261	jmp	0x00004275
00004263	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004270	movl	%eax,%ecx
00004272	movl	0x14(%ecx),%eax
00004275	testl	%eax,%eax
00004277	jne	0x00004270
00004279	movl	%ecx,%edi
0000427b	movl	%esi,0xcc(%ebp)
0000427e	jmp	0x00004282
00004280	movl	%ebx,%edi
00004282	movl	%edi,0xbc(%ebp)
00004285	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004290	leal	0xf2(%ebp),%eax
00004293	movl	%eax,0x0c(%esp)
00004297	leal	0xf3(%ebp),%eax
0000429a	movl	%eax,0x08(%esp)
0000429e	movl	0x10(%ebp),%eax
000042a1	movl	%eax,0x04(%esp)
000042a5	movl	0x08(%ebp),%eax
000042a8	movl	%eax,(%esp)
000042ab	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
000042b0	testl	%eax,%eax
000042b2	jne	0x000042fd
000042b4	jmp	0x000042e0
000042b6	movl	0xbc(%ebp),%edi
000042b9	testl	%edi,%edi
000042bb	jne	0x000042cc
000042bd	movl	0x08(%ebp),%eax
000042c0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
000042c7	jmp	0x00004674
000042cc	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000042d3	jmp	0x00004674
000042d8	testb	$0x01,0xf3(%ebp)
000042dc	je	0x00004323
000042de	jmp	0x00004338
000042e0	movl	0xd0(%ebp),%ecx
000042e3	leal	0x3aa9b-0x41ee(%ecx),%eax
000042e9	movl	%eax,0x04(%esp)
000042ed	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
000042f3	movl	%eax,(%esp)
000042f6	calll	CKeyValuesErrorStack::ReportError(char const*)
000042fb	jmp	0x00004323
000042fd	movb	(%eax),%cl
000042ff	cmpb	$0x7d,%cl
00004302	je	0x000042d8
00004304	testb	%cl,%cl
00004306	jne	0x00004338
00004308	movl	0xd0(%ebp),%ecx
0000430b	leal	0x3aad0-0x41ee(%ecx),%eax
00004311	movl	%eax,0x04(%esp)
00004315	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
0000431b	movl	%eax,(%esp)
0000431e	calll	CKeyValuesErrorStack::ReportError(char const*)
00004323	movl	0xd0(%ebp),%eax
00004326	addl	$0xfffffffe,_g_KeyValuesErrorStack-0x41ee+0x00000104(%eax)
00004330	addl	$0x5c,%esp
00004333	popl	%esi
00004334	popl	%edi
00004335	popl	%ebx
00004336	popl	%ebp
00004337	ret
00004338	movl	%edi,0x08(%esp)
0000433c	movl	%eax,0x04(%esp)
00004340	movl	0x08(%ebp),%eax
00004343	movl	%eax,(%esp)
00004346	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
0000434b	movl	%eax,%esi
0000434d	movl	(%esi),%eax
0000434f	movl	0xd0(%ebp),%ecx
00004352	movl	0xcc(%ebp),%edx
00004355	movl	%eax,_g_KeyValuesErrorStack-0x41ee(%ecx,%edx,4)
0000435c	leal	0xf2(%ebp),%eax
0000435f	movl	%eax,0x0c(%esp)
00004363	leal	0xf3(%ebp),%eax
00004366	movl	%eax,0x08(%esp)
0000436a	movl	0x10(%ebp),%eax
0000436d	movl	%eax,0x04(%esp)
00004371	movl	0x08(%ebp),%eax
00004374	movl	%eax,(%esp)
00004377	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
0000437c	movl	%eax,%edi
0000437e	movb	$0x01,0xdf(%ebp)
00004382	testb	$0x01,0xf2(%ebp)
00004386	je	0x000043c6
00004388	testl	%edi,%edi
0000438a	je	0x000043c6
0000438c	movb	$0x01,0xdf(%ebp)
00004390	movl	0x08(%ebp),%eax
00004393	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00004397	je	0x000043a4
00004399	movl	%edi,(%esp)
0000439c	calll	EvaluateConditional(char const*)
000043a1	movb	%al,0xdf(%ebp)
000043a4	leal	0xf2(%ebp),%eax
000043a7	movl	%eax,0x0c(%esp)
000043ab	leal	0xf3(%ebp),%eax
000043ae	movl	%eax,0x08(%esp)
000043b2	movl	0x10(%ebp),%eax
000043b5	movl	%eax,0x04(%esp)
000043b9	movl	0x08(%ebp),%eax
000043bc	movl	%eax,(%esp)
000043bf	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
000043c4	movl	%eax,%edi
000043c6	testl	%edi,%edi
000043c8	jne	0x000043ea
000043ca	movl	0xd0(%ebp),%ecx
000043cd	leal	0x3aafc-0x41ee(%ecx),%eax
000043d3	movl	%eax,0x04(%esp)
000043d7	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
000043dd	movl	%eax,(%esp)
000043e0	calll	CKeyValuesErrorStack::ReportError(char const*)
000043e5	jmp	0x00004323
000043ea	movb	(%edi),%al
000043ec	cmpb	$0x7b,%al
000043ee	je	0x0000441a
000043f0	cmpb	$0x7d,%al
000043f2	jne	0x0000444e
000043f4	testb	$0x01,0xf3(%ebp)
000043f8	jne	0x0000444e
000043fa	movl	0xd0(%ebp),%ecx
000043fd	leal	0x3ab23-0x41ee(%ecx),%eax
00004403	movl	%eax,0x04(%esp)
00004407	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
0000440d	movl	%eax,(%esp)
00004410	calll	CKeyValuesErrorStack::ReportError(char const*)
00004415	jmp	0x00004323
0000441a	testb	$0x01,0xf3(%ebp)
0000441e	jne	0x0000444e
00004420	movl	0xd0(%ebp),%eax
00004423	movl	0xcc(%ebp),%ecx
00004426	movl	$0xffffffff,_g_KeyValuesErrorStack-0x41ee(%eax,%ecx,4)
00004431	movl	0x10(%ebp),%eax
00004434	movl	%eax,0x08(%esp)
00004438	movl	0x0c(%ebp),%eax
0000443b	movl	%eax,0x04(%esp)
0000443f	movl	%esi,(%esp)
00004442	movl	%esi,%ebx
00004444	calll	KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
00004449	jmp	0x00004665
0000444e	testb	$0x01,0xf2(%ebp)
00004452	je	0x00004474
00004454	movl	0xd0(%ebp),%ecx
00004457	leal	0x3ab4a-0x41ee(%ecx),%eax
0000445d	movl	%eax,0x04(%esp)
00004461	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
00004467	movl	%eax,(%esp)
0000446a	calll	CKeyValuesErrorStack::ReportError(char const*)
0000446f	jmp	0x00004323
00004474	movl	0x04(%esi),%eax
00004477	testl	%eax,%eax
00004479	je	0x0000448a
0000447b	movl	%eax,(%esp)
0000447e	calll	operator delete[](void*)
00004483	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000448a	movl	%edi,(%esp)
0000448d	calll	_strlen
00004492	movl	%eax,%ebx
00004494	movl	%edi,(%esp)
00004497	leal	0xec(%ebp),%eax
0000449a	movl	%eax,0x04(%esp)
0000449e	movl	$0x0000000a,0x08(%esp)
000044a6	calll	_strtol
000044ab	movl	%eax,0xd8(%ebp)
000044ae	leal	0xe8(%ebp),%eax
000044b1	movl	%eax,0x04(%esp)
000044b5	movl	%edi,(%esp)
000044b8	calll	_strtod$UNIX2003
000044bd	fstpl	0xe0(%ebp)
000044c0	movsd	0xe0(%ebp),%xmm0
000044c5	movsd	%xmm0,0xc0(%ebp)
000044ca	movl	0xd8(%ebp),%eax
000044cd	leal	0x80000001(%eax),%eax
000044d3	xorb	%cl,%cl
000044d5	cmpl	$0x01,%eax
000044d8	ja	0x000044e5
000044da	calll	___error
000044df	cmpl	$0x22,(%eax)
000044e2	sete	%cl
000044e5	movb	%cl,0xcb(%ebp)
000044e8	movl	%ebx,%eax
000044ea	movl	%eax,0xd4(%ebp)
000044ed	movsd	0xc0(%ebp),%xmm0
000044f2	cvtsd2ss	%xmm0,%xmm0
000044f6	cmpl	$0x02,%eax
000044f9	jge	0x000044ff
000044fb	movl	%esi,%edx
000044fd	jmp	0x00004523
000044ff	movsbl	0x01(%edi),%eax
00004503	movl	%eax,(%esp)
00004506	movss	%xmm0,0xc0(%ebp)
0000450b	calll	___tolower
00004510	movss	0xc0(%ebp),%xmm0
00004515	cmpl	$0x78,%eax
00004518	movl	%esi,%edx
0000451a	jne	0x00004523
0000451c	movl	%edi,0xe8(%ebp)
0000451f	pxor	%xmm0,%xmm0
00004523	movb	(%edi),%al
00004525	testb	%al,%al
00004527	je	0x000045da
0000452d	cmpl	$0x12,0xd4(%ebp)
00004531	jne	0x000045a5
00004533	cmpb	KeyValues::GetStringForSymbolClassic(int),%al
00004535	jne	0x000045a5
00004537	cmpb	$0x78,0x01(%edi)
0000453b	jne	0x000045a5
0000453d	movl	%edx,0xd8(%ebp)
00004540	xorl	%eax,%eax
00004542	xorl	%esi,%esi
00004544	xorl	%ebx,%ebx
00004546	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004550	movb	0x02(%edi,%eax),%dl
00004554	cmpb	$0x61,%dl
00004557	jl	0x0000455e
00004559	addb	$0xd9,%dl
0000455c	jmp	0x00004568
0000455e	movb	%dl,%cl
00004560	addb	$0xf9,%cl
00004563	cmpb	$0x40,%dl
00004566	jg	0x0000456a
00004568	movb	%dl,%cl
0000456a	shldl	$0x04,%esi,%ebx
0000456e	movsbl	%cl,%ecx
00004571	addl	$0xd0,%ecx
00004574	movl	%ecx,%edx
00004576	sarl	$0x1f,%edx
00004579	shll	$0x04,%esi
0000457c	addl	%ecx,%esi
0000457e	adcl	%edx,%ebx
00004580	incl	%eax
00004581	cmpl	$0x10,%eax
00004584	jne	0x00004550
00004586	movl	$0x00000008,(%esp)
0000458d	calll	operator new[](unsigned long)
00004592	movl	0xd8(%ebp),%ecx
00004595	movl	%eax,0x04(%ecx)
00004598	movl	%ebx,0x04(%eax)
0000459b	movl	%esi,(%eax)
0000459d	movb	$0x07,0x10(%ecx)
000045a1	movl	%ecx,%ebx
000045a3	jmp	0x0000460b
000045a5	addl	%edi,%ebx
000045a7	movl	0xe8(%ebp),%ecx
000045aa	movl	0xec(%ebp),%eax
000045ad	cmpl	%eax,%ecx
000045af	jbe	0x000045c2
000045b1	cmpl	%ebx,%ecx
000045b3	jne	0x000045c2
000045b5	movss	%xmm0,0x0c(%edx)
000045ba	movb	$0x03,0x10(%edx)
000045be	movl	%edx,%ebx
000045c0	jmp	0x0000460b
000045c2	cmpl	%ebx,%eax
000045c4	setne	%al
000045c7	orb	0xcb(%ebp),%al
000045ca	jne	0x000045da
000045cc	movl	0xd8(%ebp),%eax
000045cf	movl	%eax,0x0c(%edx)
000045d2	movb	$0x02,0x10(%edx)
000045d6	movl	%edx,%ebx
000045d8	jmp	0x0000460b
000045da	movb	$0x01,0x10(%edx)
000045de	movl	%edx,%ebx
000045e0	movl	0xd4(%ebp),%eax
000045e3	leal	0x01(%eax),%esi
000045e6	testl	%esi,%esi
000045e8	movl	$0xffffffff,%eax
000045ed	cmovnsl	%esi,%eax
000045f0	movl	%eax,(%esp)
000045f3	calll	operator new[](unsigned long)
000045f8	movl	%eax,0x04(%ebx)
000045fb	movl	%esi,0x08(%esp)
000045ff	movl	%edi,0x04(%esp)
00004603	movl	%eax,(%esp)
00004606	calll	_memcpy
0000460b	movl	0x10(%ebp),%eax
0000460e	movl	0x0c(%eax),%esi
00004611	leal	0xf2(%ebp),%ecx
00004614	movl	%ecx,0x0c(%esp)
00004618	leal	0xf3(%ebp),%ecx
0000461b	movl	%ecx,0x08(%esp)
0000461f	movl	%eax,0x04(%esp)
00004623	movl	0x08(%ebp),%eax
00004626	movl	%eax,(%esp)
00004629	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
0000462e	testb	$0x01,0xf2(%ebp)
00004632	je	0x0000464e
00004634	movb	$0x01,0xdf(%ebp)
00004638	movl	0x08(%ebp),%ecx
0000463b	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ecx)
0000463f	je	0x00004665
00004641	movl	%eax,(%esp)
00004644	calll	EvaluateConditional(char const*)
00004649	movb	%al,0xdf(%ebp)
0000464c	jmp	0x00004665
0000464e	movl	%esi,0x08(%esp)
00004652	movl	0x10(%ebp),%eax
00004655	movl	%eax,(%esp)
00004658	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00004660	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00004665	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdf(%ebp)
00004669	je	0x000042b6
0000466f	jmp	0x00004280
00004674	movl	%ebx,(%esp)
00004677	calll	KeyValues::deleteThis()
0000467c	jmp	0x00004290
00004681	jmp	0x00004683
00004683	movl	0xd0(%ebp),%ecx
00004686	addl	$0xfffffffe,_g_KeyValuesErrorStack-0x41ee+0x00000104(%ecx)
00004690	movl	%eax,(%esp)
00004693	calll	__Unwind_Resume
00004698	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::WriteAsBinary(CUtlBuffer&):
000046a0	pushl	%ebp
000046a1	movl	%esp,%ebp
000046a3	pushl	%ebx
000046a4	pushl	%edi
000046a5	pushl	%esi
000046a6	subl	$0x3c,%esp
000046a9	calll	0x000046ae
000046ae	popl	%eax
000046af	movl	%eax,0xdc(%ebp)
000046b2	movl	0x0c(%ebp),%esi
000046b5	movb	0x15(%esi),%al
000046b8	xorb	%cl,%cl
000046ba	testb	$0x01,%al
000046bc	jne	0x00004ab0
000046c2	xorb	%cl,%cl
000046c4	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000046c8	jne	0x00004ab0
000046ce	movl	0x08(%ebp),%edi
000046d1	jmp	0x00004712
000046d3	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000046e0	movl	0xd8(%ebp),%eax
000046e3	movl	0x0c(%eax),%edi
000046e6	testb	$0x01,0x15(%esi)
000046ea	je	0x000047ef
000046f0	movl	%edi,0x08(%esp)
000046f4	movl	0xdc(%ebp),%eax
000046f7	leal	0x3ac10-0x46ae(%eax),%eax
000046fd	movl	%eax,0x04(%esp)
00004701	movl	%esi,(%esp)
00004704	calll	CUtlBuffer::Printf(char const*, ...)
00004709	movb	0x15(%esi),%al
0000470c	movl	0xd8(%ebp),%edi
0000470f	movl	0x14(%edi),%edi
00004712	testl	%edi,%edi
00004714	je	0x00004a5b
0000471a	movb	0x10(%edi),%bl
0000471d	testb	$0x01,%al
0000471f	jne	0x0000474d
00004721	movl	%esi,(%esp)
00004724	movl	$0x00000001,0x04(%esp)
0000472c	calll	CUtlBuffer::CheckPut(int)
00004731	cmpb	$0x01,%al
00004733	jne	0x00004769
00004735	movl	(%esi),%eax
00004737	movl	0x10(%esi),%ecx
0000473a	subl	0x20(%esi),%ecx
0000473d	movb	%bl,(%eax,%ecx)
00004740	incl	0x10(%esi)
00004743	movl	%esi,(%esp)
00004746	calll	CUtlBuffer::AddNullTermination()
0000474b	jmp	0x00004769
0000474d	movzbl	%bl,%eax
00004750	movl	%eax,0x08(%esp)
00004754	movl	0xdc(%ebp),%eax
00004757	leal	0x3ac10-0x46ae(%eax),%eax
0000475d	movl	%eax,0x04(%esp)
00004761	movl	%esi,(%esp)
00004764	calll	CUtlBuffer::Printf(char const*, ...)
00004769	movl	(%edi),%eax
0000476b	movl	%eax,(%esp)
0000476e	movl	0xdc(%ebp),%eax
00004771	call	*KeyValues::s_pfGetStringForSymbol-0x46ae(%eax)
00004777	movl	%eax,0x04(%esp)
0000477b	movl	%esi,(%esp)
0000477e	calll	CUtlBuffer::PutString(char const*)
00004783	movsbl	0x10(%edi),%eax
00004787	movl	%edi,0xd8(%ebp)
0000478a	cmpl	$0x07,%eax
0000478d	ja	0x00004709
00004793	movl	0xdc(%ebp),%ecx
00004796	movl	0x0000040e(%ecx,%eax,4),%eax
0000479d	addl	%ecx,%eax
0000479f	jmp	*%eax
000047a1	movl	0xd8(%ebp),%eax
000047a4	movl	0x18(%eax),%eax
000047a7	movl	%esi,0x04(%esp)
000047ab	movl	%eax,(%esp)
000047ae	calll	KeyValues::WriteAsBinary(CUtlBuffer&)
000047b3	jmp	0x00004709
000047b8	movl	0xd8(%ebp),%eax
000047bb	movl	0x04(%eax),%eax
000047be	testl	%eax,%eax
000047c0	je	0x000047d8
000047c2	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
000047c5	je	0x000047d8
000047c7	movl	%eax,0x04(%esp)
000047cb	movl	%esi,(%esp)
000047ce	calll	CUtlBuffer::PutString(char const*)
000047d3	jmp	0x00004709
000047d8	movl	0xdc(%ebp),%eax
000047db	leal	0x3a9e0-0x46ae(%eax),%eax
000047e1	jmp	0x000047c7
000047e3	movl	0xd8(%ebp),%eax
000047e6	movl	0x0c(%eax),%edi
000047e9	testb	$0x01,0x15(%esi)
000047ed	jne	0x0000482e
000047ef	movl	%esi,(%esp)
000047f2	movl	$0x00000004,0x04(%esp)
000047fa	calll	CUtlBuffer::CheckPut(int)
000047ff	cmpb	$0x01,%al
00004801	jne	0x00004709
00004807	movl	0x10(%esi),%eax
0000480a	subl	0x20(%esi),%eax
0000480d	addl	(%esi),%eax
0000480f	testb	$0x01,0x34(%esi)
00004813	je	0x0000481b
00004815	testl	%eax,%eax
00004817	je	0x0000481d
00004819	bswap	%edi
0000481b	movl	%edi,(%eax)
0000481d	addl	$0x04,0x10(%esi)
00004821	movl	%esi,(%esp)
00004824	calll	CUtlBuffer::AddNullTermination()
00004829	jmp	0x00004709
0000482e	movl	%edi,0x08(%esp)
00004832	movl	0xdc(%ebp),%eax
00004835	leal	0x3a97b-0x46ae(%eax),%eax
0000483b	jmp	0x000046fd
00004840	movl	0xd8(%ebp),%eax
00004843	movl	0x04(%eax),%eax
00004846	movsd	(%eax),%xmm0
0000484a	testb	$0x01,0x15(%esi)
0000484e	jne	0x0000490e
00004854	movl	%esi,(%esp)
00004857	movsd	%xmm0,0xe8(%ebp)
0000485c	movsd	%xmm0,0xd0(%ebp)
00004861	movl	$0x00000008,0x04(%esp)
00004869	calll	CUtlBuffer::CheckPut(int)
0000486e	testb	%al,%al
00004870	je	0x00004709
00004876	movl	0x10(%esi),%eax
00004879	subl	0x20(%esi),%eax
0000487c	addl	(%esi),%eax
0000487e	testb	$0x01,0x34(%esi)
00004882	jne	0x0000488b
00004884	movsd	0xd0(%ebp),%xmm0
00004889	jmp	0x000048a4
0000488b	testl	%eax,%eax
0000488d	je	0x000048a8
0000488f	movl	0xe8(%ebp),%edx
00004892	movl	0xec(%ebp),%ecx
00004895	bswap	%edx
00004897	movl	%edx,0xe4(%ebp)
0000489a	bswap	%ecx
0000489c	movl	%ecx,0xe0(%ebp)
0000489f	movsd	0xe0(%ebp),%xmm0
000048a4	movsd	%xmm0,(%eax)
000048a8	addl	$0x08,0x10(%esi)
000048ac	jmp	0x00004821
000048b1	movl	0xd8(%ebp),%eax
000048b4	movss	0x0c(%eax),%xmm0
000048b9	testb	$0x01,0x15(%esi)
000048bd	jne	0x0000490a
000048bf	movl	%esi,(%esp)
000048c2	movl	$0x00000004,0x04(%esp)
000048ca	movss	%xmm0,0xd0(%ebp)
000048cf	calll	CUtlBuffer::CheckPut(int)
000048d4	movss	0xd0(%ebp),%xmm0
000048d9	testb	%al,%al
000048db	je	0x00004709
000048e1	movl	0x10(%esi),%eax
000048e4	subl	0x20(%esi),%eax
000048e7	addl	(%esi),%eax
000048e9	testb	$0x01,0x34(%esi)
000048ed	je	0x00004901
000048ef	testl	%eax,%eax
000048f1	je	0x0000481d
000048f7	movd	%xmm0,%ecx
000048fb	bswap	%ecx
000048fd	movd	%ecx,%xmm0
00004901	movss	%xmm0,(%eax)
00004905	jmp	0x0000481d
0000490a	cvtss2sd	%xmm0,%xmm0
0000490e	movsd	%xmm0,0x08(%esp)
00004914	movl	0xdc(%ebp),%eax
00004917	leal	0x3a988-0x46ae(%eax),%eax
0000491d	jmp	0x000046fd
00004922	movl	0xd8(%ebp),%edi
00004925	movb	0x0c(%edi),%bl
00004928	testb	$0x01,0x15(%esi)
0000492c	jne	0x0000495a
0000492e	movl	%esi,(%esp)
00004931	movl	$0x00000001,0x04(%esp)
00004939	calll	CUtlBuffer::CheckPut(int)
0000493e	cmpb	$0x01,%al
00004940	jne	0x00004976
00004942	movl	(%esi),%eax
00004944	movl	0x10(%esi),%ecx
00004947	subl	0x20(%esi),%ecx
0000494a	movb	%bl,(%eax,%ecx)
0000494d	incl	0x10(%esi)
00004950	movl	%esi,(%esp)
00004953	calll	CUtlBuffer::AddNullTermination()
00004958	jmp	0x00004976
0000495a	movzbl	%bl,%eax
0000495d	movl	%eax,0x08(%esp)
00004961	movl	0xdc(%ebp),%eax
00004964	leal	0x3ac10-0x46ae(%eax),%eax
0000496a	movl	%eax,0x04(%esp)
0000496e	movl	%esi,(%esp)
00004971	calll	CUtlBuffer::Printf(char const*, ...)
00004976	movb	0x0d(%edi),%bl
00004979	testb	$0x01,0x15(%esi)
0000497d	jne	0x000049ab
0000497f	movl	%esi,(%esp)
00004982	movl	$0x00000001,0x04(%esp)
0000498a	calll	CUtlBuffer::CheckPut(int)
0000498f	cmpb	$0x01,%al
00004991	jne	0x000049c7
00004993	movl	(%esi),%eax
00004995	movl	0x10(%esi),%ecx
00004998	subl	0x20(%esi),%ecx
0000499b	movb	%bl,(%eax,%ecx)
0000499e	incl	0x10(%esi)
000049a1	movl	%esi,(%esp)
000049a4	calll	CUtlBuffer::AddNullTermination()
000049a9	jmp	0x000049c7
000049ab	movzbl	%bl,%eax
000049ae	movl	%eax,0x08(%esp)
000049b2	movl	0xdc(%ebp),%eax
000049b5	leal	0x3ac10-0x46ae(%eax),%eax
000049bb	movl	%eax,0x04(%esp)
000049bf	movl	%esi,(%esp)
000049c2	calll	CUtlBuffer::Printf(char const*, ...)
000049c7	movb	0x0e(%edi),%bl
000049ca	testb	$0x01,0x15(%esi)
000049ce	jne	0x000049fc
000049d0	movl	%esi,(%esp)
000049d3	movl	$0x00000001,0x04(%esp)
000049db	calll	CUtlBuffer::CheckPut(int)
000049e0	cmpb	$0x01,%al
000049e2	jne	0x00004a18
000049e4	movl	(%esi),%eax
000049e6	movl	0x10(%esi),%ecx
000049e9	subl	0x20(%esi),%ecx
000049ec	movb	%bl,(%eax,%ecx)
000049ef	incl	0x10(%esi)
000049f2	movl	%esi,(%esp)
000049f5	calll	CUtlBuffer::AddNullTermination()
000049fa	jmp	0x00004a18
000049fc	movzbl	%bl,%eax
000049ff	movl	%eax,0x08(%esp)
00004a03	movl	0xdc(%ebp),%eax
00004a06	leal	0x3ac10-0x46ae(%eax),%eax
00004a0c	movl	%eax,0x04(%esp)
00004a10	movl	%esi,(%esp)
00004a13	calll	CUtlBuffer::Printf(char const*, ...)
00004a18	movb	0x0f(%edi),%bl
00004a1b	movl	%edi,0xd8(%ebp)
00004a1e	testb	$0x01,0x15(%esi)
00004a22	jne	0x00004a4f
00004a24	movl	%esi,(%esp)
00004a27	movl	$0x00000001,0x04(%esp)
00004a2f	calll	CUtlBuffer::CheckPut(int)
00004a34	cmpb	$0x01,%al
00004a36	jne	0x00004709
00004a3c	movl	(%esi),%eax
00004a3e	movl	0x10(%esi),%ecx
00004a41	subl	0x20(%esi),%ecx
00004a44	movb	%bl,(%eax,%ecx)
00004a47	incl	0x10(%esi)
00004a4a	jmp	0x00004821
00004a4f	movzbl	%bl,%eax
00004a52	movl	%eax,0x08(%esp)
00004a56	jmp	0x000046f4
00004a5b	testb	$0x01,%al
00004a5d	jne	0x00004a8c
00004a5f	movl	%esi,(%esp)
00004a62	movl	$0x00000001,0x04(%esp)
00004a6a	calll	CUtlBuffer::CheckPut(int)
00004a6f	cmpb	$0x01,%al
00004a71	jne	0x00004aa9
00004a73	movl	(%esi),%eax
00004a75	movl	0x10(%esi),%ecx
00004a78	subl	0x20(%esi),%ecx
00004a7b	movb	$0x08,(%eax,%ecx)
00004a7f	incl	0x10(%esi)
00004a82	movl	%esi,(%esp)
00004a85	calll	CUtlBuffer::AddNullTermination()
00004a8a	jmp	0x00004aa9
00004a8c	movl	0xdc(%ebp),%eax
00004a8f	leal	0x3ac10-0x46ae(%eax),%eax
00004a95	movl	%eax,0x04(%esp)
00004a99	movl	%esi,(%esp)
00004a9c	movl	$0x00000008,0x08(%esp)
00004aa4	calll	CUtlBuffer::Printf(char const*, ...)
00004aa9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00004aad	sete	%cl
00004ab0	movzbl	%cl,%eax
00004ab3	addl	$0x3c,%esp
00004ab6	popl	%esi
00004ab7	popl	%edi
00004ab8	popl	%ebx
00004ab9	popl	%ebp
00004aba	ret
00004abb	nop
00004abc	repz/addb	%al,(%eax)
00004abf	addb	%cl,(%edx)
00004ac1	addl	%eax,(%eax)
00004ac3	addb	%dh,0x03000001
00004ac9	addb	(%eax),%al
00004acb	addb	%dh,(%edx)
00004acd	addb	%al,(%eax)
00004acf	addb	%bl,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx)
00004ad2	addb	%al,(%eax)
00004ad4	je	0x00004ad8
00004ad6	addb	%al,(%eax)
00004ad8	xchgl	%edx,%eax
00004ad9	addl	%eax,(%eax)
00004adb	addb	%cl,(%edi)
00004add	popl	%ds
00004ade	incl	%eax
00004adf	addb	%dl,0x89(%ebp)
00004ae2	inl	$0x53,%eax
00004ae4	pushl	%edi
00004ae5	pushl	%esi
00004ae6	subl	$0x0000204c,%esp
00004aec	calll	0x00004af1
00004af1	popl	%eax
00004af2	movl	%eax,0xffffdfc8(%ebp)
00004af8	movl	0x42cec-0x4af1(%eax),%eax
00004afe	movl	%eax,0xffffdfbc(%ebp)
00004b04	movl	(%eax),%eax
00004b06	movl	%eax,0xf0(%ebp)
00004b09	xorb	%al,%al
00004b0b	movl	0x0c(%ebp),%edi
00004b0e	testb	$0x01,0x15(%edi)
00004b12	jne	0x000052c5
00004b18	xorb	%al,%al
00004b1a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004b1e	jne	0x000052c5
00004b24	movl	0x10(%ebp),%esi
00004b27	movl	%esi,0xffffdfc0(%ebp)
00004b2d	movl	0x08(%ebp),%ebx
00004b30	movl	%ebx,(%esp)
00004b33	calll	KeyValues::RemoveEverything()
00004b38	movl	$0xffffffff,(%ebx)
00004b3e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
00004b45	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebx)
00004b4c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%ebx)
00004b53	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebx)
00004b5a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%ebx)
00004b61	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%ebx)
00004b67	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebx)
00004b6e	movb	$0x01,0x12(%ebx)
00004b72	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%ebx)
00004b76	xorb	%al,%al
00004b78	cmpl	$0x64,%esi
00004b7b	movl	%ebx,%esi
00004b7d	jg	0x000052c5
00004b83	testb	$0x01,0x15(%edi)
00004b87	jne	0x00004bc7
00004b89	movl	%esi,%ebx
00004b8b	movl	%edi,(%esp)
00004b8e	movl	$0x00000001,0x04(%esp)
00004b96	calll	CUtlBuffer::CheckGet(int)
00004b9b	cmpb	$0x01,%al
00004b9d	jne	0x00004bba
00004b9f	movl	(%edi),%ecx
00004ba1	movl	0x0c(%edi),%eax
00004ba4	movl	%eax,%edx
00004ba6	subl	0x20(%edi),%edx
00004ba9	movb	(%ecx,%edx),%cl
00004bac	movb	%cl,0xffffdfd3(%ebp)
00004bb2	incl	%eax
00004bb3	movl	%eax,0x0c(%edi)
00004bb6	movl	%ebx,%esi
00004bb8	jmp	0x00004bf6
00004bba	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd3(%ebp)
00004bc1	xorb	%cl,%cl
00004bc3	movl	%ebx,%esi
00004bc5	jmp	0x00004bf6
00004bc7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd3(%ebp)
00004bce	leal	0xffffdfd3(%ebp),%eax
00004bd4	movl	%eax,0x08(%esp)
00004bd8	movl	0xffffdfc8(%ebp),%eax
00004bde	leal	0x3ac10-0x4af1(%eax),%eax
00004be4	movl	%eax,0x04(%esp)
00004be8	movl	%edi,(%esp)
00004beb	calll	CUtlBuffer::Scanf(char const*, ...)
00004bf0	movb	0xffffdfd3(%ebp),%cl
00004bf6	incl	0xffffdfc0(%ebp)
00004bfc	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00004c00	cmpb	$0x08,%cl
00004c03	je	0x000052bb
00004c09	movb	%cl,0x10(%esi)
00004c0c	movl	%esi,0xffffdfcc(%ebp)
00004c12	leal	0xffffeff0(%ebp),%ebx
00004c18	movl	%ebx,0x04(%esp)
00004c1c	movl	0x0c(%ebp),%esi
00004c1f	movl	%esi,(%esp)
00004c22	movl	$0x00000fff,0x08(%esp)
00004c2a	movb	%cl,0xffffdfc4(%ebp)
00004c30	calll	CUtlBuffer::GetString(char*, int)
00004c35	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xef(%ebp)
00004c39	movl	%ebx,(%esp)
00004c3c	movl	0xffffdfc8(%ebp),%ebx
00004c42	movl	%esi,%edi
00004c44	movl	$0x00000001,0x04(%esp)
00004c4c	call	*KeyValues::s_pfGetSymbolForString-0x4af1(%ebx)
00004c52	movb	0xffffdfc4(%ebp),%cl
00004c58	movl	%ebx,%esi
00004c5a	movl	0xffffdfcc(%ebp),%ebx
00004c60	movl	%eax,(%ebx)
00004c62	cmpb	$0x07,%cl
00004c65	ja	0x00005184
00004c6b	movzbl	%cl,%eax
00004c6e	movl	0x000007fb(%esi,%eax,4),%eax
00004c75	addl	%esi,%eax
00004c77	jmp	*%eax
00004c79	calll	_KeyValuesSystem
00004c7e	movl	(%eax),%ecx
00004c80	movl	%eax,(%esp)
00004c83	movl	$0x00000020,0x04(%esp)
00004c8b	call	*0x04(%ecx)
00004c8e	movl	%eax,%edi
00004c90	movl	$0xffffffff,(%edi)
00004c96	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00004c9d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004ca4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00004cab	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00004cb2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00004cb9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
00004cbf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00004cc6	movb	$0x01,0x12(%edi)
00004cca	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
00004cce	movl	KeyValues::s_pfGetSymbolForString-0x4af1(%esi),%eax
00004cd4	leal	0x3a9e0-0x4af1(%esi),%ecx
00004cda	movl	%ecx,(%esp)
00004cdd	movl	$0x00000001,0x04(%esp)
00004ce5	call	*%eax
00004ce7	movl	%eax,(%edi)
00004ce9	movl	%edi,0x18(%ebx)
00004cec	movl	0xffffdfc0(%ebp),%eax
00004cf2	movl	%eax,0x08(%esp)
00004cf6	movl	0x0c(%ebp),%ebx
00004cf9	movl	%ebx,0x04(%esp)
00004cfd	movl	%edi,(%esp)
00004d00	movl	%ebx,%edi
00004d02	calll	KeyValues::ReadAsBinary(CUtlBuffer&, int)
00004d07	jmp	0x00005184
00004d0c	leal	0xffffdff0(%ebp),%esi
00004d12	movl	%esi,0x04(%esp)
00004d16	movl	%edi,(%esp)
00004d19	movl	$0x00000fff,0x08(%esp)
00004d21	calll	CUtlBuffer::GetString(char*, int)
00004d26	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffefef(%ebp)
00004d2d	movl	%esi,(%esp)
00004d30	calll	_strlen
00004d35	movl	%eax,%esi
00004d37	incl	%esi
00004d38	testl	%esi,%esi
00004d3a	movl	$0xffffffff,%eax
00004d3f	cmovnsl	%esi,%eax
00004d42	movl	%eax,(%esp)
00004d45	calll	operator new[](unsigned long)
00004d4a	movl	%eax,0x04(%ebx)
00004d4d	movl	%esi,0x08(%esp)
00004d51	movl	0xffffdfc8(%ebp),%esi
00004d57	leal	0xffffdff0(%ebp),%ecx
00004d5d	movl	%ecx,0x04(%esp)
00004d61	movl	%eax,(%esp)
00004d64	calll	_memcpy
00004d69	jmp	0x00005184
00004d6e	testb	$0x01,0x15(%edi)
00004d72	jne	0x00004e01
00004d78	movl	%edi,(%esp)
00004d7b	movl	$0x00000004,0x04(%esp)
00004d83	calll	CUtlBuffer::CheckGet(int)
00004d88	cmpb	$0x01,%al
00004d8a	jne	0x00004ded
00004d8c	movl	%edi,%ecx
00004d8e	movl	%esi,%edi
00004d90	movl	0x0c(%ecx),%eax
00004d93	movl	%eax,%edx
00004d95	subl	0x20(%ecx),%edx
00004d98	addl	(%ecx),%edx
00004d9a	testb	$0x01,0x34(%ecx)
00004d9e	movl	%ecx,%ebx
00004da0	jne	0x00004da6
00004da2	movl	(%edx),%ecx
00004da4	jmp	0x00004dcf
00004da6	leal	0xffffdfd4(%ebp),%ecx
00004dac	testl	%edx,%edx
00004dae	cmovnel	%edx,%ecx
00004db1	movzbl	0x03(%ecx),%edx
00004db5	movzbl	0x02(%ecx),%esi
00004db9	shll	$0x08,%esi
00004dbc	orl	%edx,%esi
00004dbe	movzbl	0x01(%ecx),%edx
00004dc2	shll	$0x10,%edx
00004dc5	orl	%esi,%edx
00004dc7	movzbl	(%ecx),%ecx
00004dca	shll	$0x18,%ecx
00004dcd	orl	%edx,%ecx
00004dcf	movl	%edi,%esi
00004dd1	movl	%ecx,0xffffdfd4(%ebp)
00004dd7	addl	$0x04,%eax
00004dda	movl	%ebx,%edi
00004ddc	movl	%eax,0x0c(%edi)
00004ddf	movl	0xffffdfcc(%ebp),%eax
00004de5	movl	%ecx,0x0c(%eax)
00004de8	jmp	0x00005184
00004ded	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd4(%ebp)
00004df7	xorl	%eax,%eax
00004df9	movl	%eax,0x0c(%ebx)
00004dfc	jmp	0x00005184
00004e01	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd4(%ebp)
00004e0b	leal	0xffffdfd4(%ebp),%eax
00004e11	movl	%eax,0x08(%esp)
00004e15	leal	0x3a97b-0x4af1(%esi),%eax
00004e1b	movl	%eax,0x04(%esp)
00004e1f	movl	%edi,(%esp)
00004e22	calll	CUtlBuffer::Scanf(char const*, ...)
00004e27	movl	0xffffdfd4(%ebp),%eax
00004e2d	movl	%eax,0x0c(%ebx)
00004e30	jmp	0x00005184
00004e35	movl	$0x00000008,(%esp)
00004e3c	calll	operator new[](unsigned long)
00004e41	movl	%eax,0x04(%ebx)
00004e44	leal	0x3a9cf-0x4af1(%esi),%eax
00004e4a	movl	%eax,0x08(%esp)
00004e4e	leal	0xffffdfd8(%ebp),%eax
00004e54	movl	%eax,0x04(%esp)
00004e58	movl	%edi,(%esp)
00004e5b	calll	void CUtlBuffer::GetType<long long>(long long&, char const*)
00004e60	movl	0x04(%ebx),%eax
00004e63	movsd	0xffffdfd8(%ebp),%xmm0
00004e6b	movsd	%xmm0,(%eax)
00004e6f	jmp	0x00005184
00004e74	testb	$0x01,0x15(%edi)
00004e78	jne	0x00004ee3
00004e7a	movl	%edi,(%esp)
00004e7d	movl	$0x00000004,0x04(%esp)
00004e85	calll	CUtlBuffer::CheckGet(int)
00004e8a	cmpb	$0x01,%al
00004e8c	jne	0x00004ecb
00004e8e	movl	(%edi),%ecx
00004e90	movl	0x0c(%edi),%eax
00004e93	movl	%eax,%edx
00004e95	subl	0x20(%edi),%edx
00004e98	movss	(%ecx,%edx),%xmm0
00004e9d	movss	%xmm0,0xffffdfe0(%ebp)
00004ea5	testb	$0x01,0x34(%edi)
00004ea9	je	0x00004ebb
00004eab	movd	%xmm0,%ecx
00004eaf	bswap	%ecx
00004eb1	movl	%ecx,0xffffdfe0(%ebp)
00004eb7	movd	%ecx,%xmm0
00004ebb	addl	$0x04,%eax
00004ebe	movl	%eax,0x0c(%edi)
00004ec1	movss	%xmm0,0x0c(%ebx)
00004ec6	jmp	0x00005184
00004ecb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe0(%ebp)
00004ed5	pxor	%xmm0,%xmm0
00004ed9	movss	%xmm0,0x0c(%ebx)
00004ede	jmp	0x00005184
00004ee3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe0(%ebp)
00004eed	leal	0xffffdfe0(%ebp),%eax
00004ef3	movl	%eax,0x08(%esp)
00004ef7	leal	0x3a988-0x4af1(%esi),%eax
00004efd	movl	%eax,0x04(%esp)
00004f01	movl	%edi,(%esp)
00004f04	calll	CUtlBuffer::Scanf(char const*, ...)
00004f09	movss	0xffffdfe0(%ebp),%xmm0
00004f11	movss	%xmm0,0x0c(%ebx)
00004f16	jmp	0x00005184
00004f1b	testb	$0x01,0x15(%edi)
00004f1f	jne	0x00004f59
00004f21	movl	%edi,(%esp)
00004f24	movl	$0x00000001,0x04(%esp)
00004f2c	calll	CUtlBuffer::CheckGet(int)
00004f31	cmpb	$0x01,%al
00004f33	jne	0x00004f4e
00004f35	movl	(%edi),%eax
00004f37	movl	0x0c(%edi),%ecx
00004f3a	movl	%ecx,%edx
00004f3c	subl	0x20(%edi),%edx
00004f3f	movb	(%eax,%edx),%al
00004f42	movb	%al,0xffffdfe4(%ebp)
00004f48	incl	%ecx
00004f49	movl	%ecx,0x0c(%edi)
00004f4c	jmp	0x00004f82
00004f4e	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe4(%ebp)
00004f55	xorb	%al,%al
00004f57	jmp	0x00004f82
00004f59	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe4(%ebp)
00004f60	leal	0xffffdfe4(%ebp),%eax
00004f66	movl	%eax,0x08(%esp)
00004f6a	leal	0x3ac10-0x4af1(%esi),%eax
00004f70	movl	%eax,0x04(%esp)
00004f74	movl	%edi,(%esp)
00004f77	calll	CUtlBuffer::Scanf(char const*, ...)
00004f7c	movb	0xffffdfe4(%ebp),%al
00004f82	movb	%al,0x0c(%ebx)
00004f85	testb	$0x01,0x15(%edi)
00004f89	jne	0x00004fc3
00004f8b	movl	%edi,(%esp)
00004f8e	movl	$0x00000001,0x04(%esp)
00004f96	calll	CUtlBuffer::CheckGet(int)
00004f9b	cmpb	$0x01,%al
00004f9d	jne	0x00004fb8
00004f9f	movl	(%edi),%eax
00004fa1	movl	0x0c(%edi),%ecx
00004fa4	movl	%ecx,%edx
00004fa6	subl	0x20(%edi),%edx
00004fa9	movb	(%eax,%edx),%al
00004fac	movb	%al,0xffffdfe5(%ebp)
00004fb2	incl	%ecx
00004fb3	movl	%ecx,0x0c(%edi)
00004fb6	jmp	0x00004fec
00004fb8	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe5(%ebp)
00004fbf	xorb	%al,%al
00004fc1	jmp	0x00004fec
00004fc3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe5(%ebp)
00004fca	leal	0xffffdfe5(%ebp),%eax
00004fd0	movl	%eax,0x08(%esp)
00004fd4	leal	0x3ac10-0x4af1(%esi),%eax
00004fda	movl	%eax,0x04(%esp)
00004fde	movl	%edi,(%esp)
00004fe1	calll	CUtlBuffer::Scanf(char const*, ...)
00004fe6	movb	0xffffdfe5(%ebp),%al
00004fec	movb	%al,0x0d(%ebx)
00004fef	testb	$0x01,0x15(%edi)
00004ff3	jne	0x0000502d
00004ff5	movl	%edi,(%esp)
00004ff8	movl	$0x00000001,0x04(%esp)
00005000	calll	CUtlBuffer::CheckGet(int)
00005005	cmpb	$0x01,%al
00005007	jne	0x00005022
00005009	movl	(%edi),%eax
0000500b	movl	0x0c(%edi),%ecx
0000500e	movl	%ecx,%edx
00005010	subl	0x20(%edi),%edx
00005013	movb	(%eax,%edx),%al
00005016	movb	%al,0xffffdfe6(%ebp)
0000501c	incl	%ecx
0000501d	movl	%ecx,0x0c(%edi)
00005020	jmp	0x00005056
00005022	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe6(%ebp)
00005029	xorb	%al,%al
0000502b	jmp	0x00005056
0000502d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe6(%ebp)
00005034	leal	0xffffdfe6(%ebp),%eax
0000503a	movl	%eax,0x08(%esp)
0000503e	leal	0x3ac10-0x4af1(%esi),%eax
00005044	movl	%eax,0x04(%esp)
00005048	movl	%edi,(%esp)
0000504b	calll	CUtlBuffer::Scanf(char const*, ...)
00005050	movb	0xffffdfe6(%ebp),%al
00005056	movb	%al,0x0e(%ebx)
00005059	testb	$0x01,0x15(%edi)
0000505d	jne	0x000050a3
0000505f	movl	%edi,(%esp)
00005062	movl	$0x00000001,0x04(%esp)
0000506a	calll	CUtlBuffer::CheckGet(int)
0000506f	cmpb	$0x01,%al
00005071	jne	0x00005092
00005073	movl	(%edi),%ecx
00005075	movl	0x0c(%edi),%eax
00005078	movl	%eax,%edx
0000507a	subl	0x20(%edi),%edx
0000507d	movb	(%ecx,%edx),%cl
00005080	movb	%cl,0xffffdfe7(%ebp)
00005086	incl	%eax
00005087	movl	%eax,0x0c(%edi)
0000508a	movb	%cl,0x0f(%ebx)
0000508d	jmp	0x00005184
00005092	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe7(%ebp)
00005099	xorb	%al,%al
0000509b	movb	%al,0x0f(%ebx)
0000509e	jmp	0x00005184
000050a3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe7(%ebp)
000050aa	leal	0xffffdfe7(%ebp),%eax
000050b0	movl	%eax,0x08(%esp)
000050b4	leal	0x3ac10-0x4af1(%esi),%eax
000050ba	movl	%eax,0x04(%esp)
000050be	movl	%edi,(%esp)
000050c1	calll	CUtlBuffer::Scanf(char const*, ...)
000050c6	movb	0xffffdfe7(%ebp),%al
000050cc	movb	%al,0x0f(%ebx)
000050cf	jmp	0x00005184
000050d4	testb	$0x01,0x15(%edi)
000050d8	jne	0x00005155
000050da	movl	%edi,(%esp)
000050dd	movl	$0x00000004,0x04(%esp)
000050e5	calll	CUtlBuffer::CheckGet(int)
000050ea	cmpb	$0x01,%al
000050ec	jne	0x00005147
000050ee	movl	0x0c(%edi),%eax
000050f1	movl	%eax,%edx
000050f3	subl	0x20(%edi),%edx
000050f6	addl	(%edi),%edx
000050f8	testb	$0x01,0x34(%edi)
000050fc	jne	0x00005102
000050fe	movl	(%edx),%ecx
00005100	jmp	0x00005139
00005102	leal	0xffffdfe8(%ebp),%ecx
00005108	testl	%edx,%edx
0000510a	cmovnel	%edx,%ecx
0000510d	movzbl	0x03(%ecx),%edx
00005111	movl	%edi,%ebx
00005113	movl	%esi,%edi
00005115	movzbl	0x02(%ecx),%esi
00005119	shll	$0x08,%esi
0000511c	orl	%edx,%esi
0000511e	movzbl	0x01(%ecx),%edx
00005122	shll	$0x10,%edx
00005125	orl	%esi,%edx
00005127	movl	%edi,%esi
00005129	movl	%ebx,%edi
0000512b	movl	0xffffdfcc(%ebp),%ebx
00005131	movzbl	(%ecx),%ecx
00005134	shll	$0x18,%ecx
00005137	orl	%edx,%ecx
00005139	movl	%ecx,0xffffdfe8(%ebp)
0000513f	addl	$0x04,%eax
00005142	movl	%eax,0x0c(%edi)
00005145	jmp	0x00005181
00005147	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe8(%ebp)
00005151	xorl	%ecx,%ecx
00005153	jmp	0x00005181
00005155	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe8(%ebp)
0000515f	leal	0xffffdfe8(%ebp),%eax
00005165	movl	%eax,0x08(%esp)
00005169	leal	0x3ac10-0x4af1(%esi),%eax
0000516f	movl	%eax,0x04(%esp)
00005173	movl	%edi,(%esp)
00005176	calll	CUtlBuffer::Scanf(char const*, ...)
0000517b	movl	0xffffdfe8(%ebp),%ecx
00005181	movl	%ecx,0x0c(%ebx)
00005184	xorb	%al,%al
00005186	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
0000518a	jne	0x000052c5
00005190	testb	$0x01,0x15(%edi)
00005194	jne	0x000051ce
00005196	movl	%edi,(%esp)
00005199	movl	$0x00000001,0x04(%esp)
000051a1	calll	CUtlBuffer::CheckGet(int)
000051a6	cmpb	$0x01,%al
000051a8	jne	0x000051c3
000051aa	movl	(%edi),%ecx
000051ac	movl	0x0c(%edi),%eax
000051af	movl	%eax,%edx
000051b1	subl	0x20(%edi),%edx
000051b4	movb	(%ecx,%edx),%bl
000051b7	movb	%bl,0xffffdfef(%ebp)
000051bd	incl	%eax
000051be	movl	%eax,0x0c(%edi)
000051c1	jmp	0x000051f7
000051c3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfef(%ebp)
000051ca	xorb	%bl,%bl
000051cc	jmp	0x0000521f
000051ce	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfef(%ebp)
000051d5	leal	0xffffdfef(%ebp),%eax
000051db	movl	%eax,0x08(%esp)
000051df	leal	0x3ac10-0x4af1(%esi),%eax
000051e5	movl	%eax,0x04(%esp)
000051e9	movl	%edi,(%esp)
000051ec	calll	CUtlBuffer::Scanf(char const*, ...)
000051f1	movb	0xffffdfef(%ebp),%bl
000051f7	cmpb	$0x08,%bl
000051fa	je	0x000052bb
00005200	jmp	0x0000521f
00005202	movl	%eax,%esi
00005204	calll	_KeyValuesSystem
00005209	movl	(%eax),%ecx
0000520b	movl	0x08(%ecx),%ecx
0000520e	movl	%edi,0x04(%esp)
00005212	movl	%eax,(%esp)
00005215	call	*%ecx
00005217	movl	%esi,(%esp)
0000521a	calll	__Unwind_Resume
0000521f	calll	_KeyValuesSystem
00005224	movl	(%eax),%ecx
00005226	movl	%eax,(%esp)
00005229	movl	$0x00000020,0x04(%esp)
00005231	call	*0x04(%ecx)
00005234	movl	%eax,%edi
00005236	movl	$0xffffffff,(%edi)
0000523c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00005243	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
0000524a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00005251	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00005258	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
0000525f	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
00005265	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
0000526c	movb	$0x01,0x12(%edi)
00005270	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
00005274	movl	KeyValues::s_pfGetSymbolForString-0x4af1(%esi),%eax
0000527a	leal	0x3a9e0-0x4af1(%esi),%ecx
00005280	movl	%ecx,(%esp)
00005283	movl	$0x00000001,0x04(%esp)
0000528b	call	*%eax
0000528d	movl	%eax,(%edi)
0000528f	movl	0xffffdfcc(%ebp),%eax
00005295	movl	%edi,0x14(%eax)
00005298	movl	%edi,%esi
0000529a	movb	%bl,%cl
0000529c	jmp	0x00004c00
000052a1	movl	%eax,%esi
000052a3	calll	_KeyValuesSystem
000052a8	movl	(%eax),%ecx
000052aa	movl	0x08(%ecx),%ecx
000052ad	movl	%edi,0x04(%esp)
000052b1	movl	%eax,(%esp)
000052b4	call	*%ecx
000052b6	jmp	0x00005217
000052bb	movl	0x0c(%ebp),%eax
000052be	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000052c2	sete	%al
000052c5	movl	0xffffdfbc(%ebp),%ecx
000052cb	movl	(%ecx),%ecx
000052cd	cmpl	0xf0(%ebp),%ecx
000052d0	jne	0x000052e5
000052d2	movzbl	%al,%eax
000052d5	addl	$0x0000204c,%esp
000052db	popl	%esi
000052dc	popl	%edi
000052dd	popl	%ebx
000052de	popl	%ebp
000052df	ret
000052e0	calll	std::terminate()
000052e5	calll	___stack_chk_fail
000052ea	nop
000052ec	movb	%al,(%ecx)
000052ee	addb	%al,(%eax)
000052f0	sbbl	(%edx),%eax
000052f2	addb	%al,(%eax)
000052f4	jge	0x000052f8
000052f6	addb	%al,(%eax)
000052f8	addl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
000052fb	addb	%ah,%bl
000052fd	addl	$0x06930000,%eax
00005302	addb	%al,(%eax)
00005304	subb	(%eax,%eax),%al
00005307	addb	%al,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx,%eax)
0000530b	addb	%cl,(%edi)
0000530d	popl	%ds
0000530e	incl	%eax
0000530f	addb	%dl,0x89(%ebp)
00005312	inl	$0x83,%eax
00005314	inb	%dx,%al
00005315	orb	%ch,%al
00005317	inl	$0xac,%eax
00005319	.byte 0xff, 0xff #bad opcode
0000531b	movl	(%eax),%ecx
0000531d	movl	0x08(%ebp),%edx
00005320	movl	%edx,0x04(%esp)
00005324	movl	%eax,(%esp)
00005327	call	*0x04(%ecx)
0000532a	addl	$0x08,%esp
0000532d	popl	%ebp
0000532e	ret
0000532f	nop
KeyValues::operator delete(void*, int, char const*, int):
00005330	pushl	%ebp
00005331	movl	%esp,%ebp
00005333	subl	$0x08,%esp
00005336	calll	_KeyValuesSystem
0000533b	movl	(%eax),%ecx
0000533d	movl	0x08(%ebp),%edx
00005340	movl	%edx,0x04(%esp)
00005344	movl	%eax,(%esp)
00005347	call	*0x08(%ecx)
0000534a	addl	$0x08,%esp
0000534d	popl	%ebp
0000534e	ret
0000534f	nop
KeyValues::UnpackIntoStructure(KeyValuesUnpackStructure const*, void*, unsigned long):
00005350	pushl	%ebp
00005351	movl	%esp,%ebp
00005353	pushl	%ebx
00005354	pushl	%edi
00005355	pushl	%esi
00005356	subl	$0x4c,%esp
00005359	calll	0x0000535e
0000535e	popl	%eax
0000535f	movl	%eax,0xd8(%ebp)
00005362	movl	0x0c(%ebp),%edi
00005365	movl	(%edi),%eax
00005367	testl	%eax,%eax
00005369	je	0x00005797
0000536f	addl	$0x14,%edi
00005372	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005380	movl	%edi,0xdc(%ebp)
00005383	movl	0xf8(%edi),%esi
00005386	movl	%eax,0x04(%esp)
0000538a	movl	0x08(%ebp),%eax
0000538d	movl	%eax,(%esp)
00005390	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005398	calll	KeyValues::FindKey(char const*, bool)
0000539d	movl	0xf4(%edi),%ecx
000053a0	cmpl	$0x06,%ecx
000053a3	ja	0x00005787
000053a9	movl	0x10(%ebp),%edx
000053ac	leal	(%edx,%esi),%edx
000053af	movl	%edx,0xd4(%ebp)
000053b2	movl	0xd8(%ebp),%edx
000053b5	movl	0x00000442(%edx,%ecx,4),%ecx
000053bc	addl	%edx,%ecx
000053be	jmp	*%ecx
000053c0	movl	0xdc(%ebp),%esi
000053c3	movl	0xf0(%esi),%eax
000053c6	pxor	%xmm0,%xmm0
000053ca	testl	%eax,%eax
000053cc	je	0x000053de
000053ce	movl	%eax,(%esp)
000053d1	calll	_atof
000053d6	fstps	0xf0(%ebp)
000053d9	movss	0xf0(%ebp),%xmm0
000053de	movss	%xmm0,0xd0(%ebp)
000053e3	movl	0xec(%esi),%eax
000053e6	movl	%esi,0xdc(%ebp)
000053e9	movl	%eax,0x04(%esp)
000053ed	movl	0x08(%ebp),%eax
000053f0	movl	%eax,(%esp)
000053f3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000053fb	calll	KeyValues::FindKey(char const*, bool)
00005400	movss	0xd0(%ebp),%xmm0
00005405	testl	%eax,%eax
00005407	je	0x00005475
00005409	movsbl	0x10(%eax),%ecx
0000540d	decl	%ecx
0000540e	pxor	%xmm0,%xmm0
00005412	cmpl	$0x06,%ecx
00005415	ja	0x00005475
00005417	movl	0xd8(%ebp),%edx
0000541a	movl	0x0000047a(%edx,%ecx,4),%ecx
00005421	addl	%edx,%ecx
00005423	jmp	*%ecx
00005425	movl	0x04(%eax),%eax
00005428	movl	%eax,(%esp)
0000542b	calll	_atof
00005430	fstps	0xe0(%ebp)
00005433	movss	0xe0(%ebp),%xmm0
00005438	jmp	0x00005475
0000543a	movss	0x0c(%eax),%xmm0
0000543f	jmp	0x00005475
00005441	cvtsi2ss	0x0c(%eax),%xmm0
00005446	jmp	0x00005475
00005448	movl	0x04(%eax),%eax
0000544b	movl	(%eax),%ecx
0000544d	movl	0x04(%eax),%eax
00005450	movl	%eax,0xec(%ebp)
00005453	movl	%ecx,0xe8(%ebp)
00005456	testl	%eax,%eax
00005458	sets	%al
0000545b	xorb	$0x01,%al
0000545d	movzbl	%al,%eax
00005460	fildq	0xe8(%ebp)
00005463	movl	0xd8(%ebp),%ecx
00005466	fadds	0x3a8f8-0x535e(%ecx,%eax,4)
0000546d	fstps	0xe4(%ebp)
00005470	movss	0xe4(%ebp),%xmm0
00005475	movl	0xd4(%ebp),%eax
00005478	movss	%xmm0,(%eax)
0000547c	jmp	0x00005787
00005481	movl	0xdc(%ebp),%ecx
00005484	movl	0xec(%ecx),%eax
00005487	movl	0xf0(%ecx),%ecx
0000548a	movl	%ecx,0x08(%esp)
0000548e	movl	%eax,0x04(%esp)
00005492	movl	0x08(%ebp),%eax
00005495	movl	%eax,(%esp)
00005498	movl	0x10(%ebp),%eax
0000549b	leal	0x08(%esi,%eax),%edi
0000549f	leal	0x04(%esi,%eax),%esi
000054a3	calll	KeyValues::GetString(char const*, char const*)
000054a8	testl	%eax,%eax
000054aa	movl	0xd4(%ebp),%ebx
000054ad	je	0x000054d9
000054af	movl	%edi,0x10(%esp)
000054b3	movl	%esi,0x0c(%esp)
000054b7	movl	%ebx,0x08(%esp)
000054bb	movl	0xd8(%ebp),%ecx
000054be	leal	0x3ab8a-0x535e(%ecx),%ecx
000054c4	movl	%ecx,0x04(%esp)
000054c8	movl	%eax,(%esp)
000054cb	calll	_sscanf
000054d0	cmpl	$0x03,%eax
000054d3	je	0x00005787
000054d9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
000054df	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
000054e5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
000054eb	jmp	0x00005787
000054f0	movl	0xdc(%ebp),%ecx
000054f3	movl	0xec(%ecx),%eax
000054f6	movl	0xf0(%ecx),%ecx
000054f9	movl	%ecx,0x08(%esp)
000054fd	movl	%eax,0x04(%esp)
00005501	movl	0x08(%ebp),%eax
00005504	movl	%eax,(%esp)
00005507	calll	KeyValues::GetString(char const*, char const*)
0000550c	testl	%eax,%eax
0000550e	movl	0xd4(%ebp),%edi
00005511	je	0x00005550
00005513	movl	0x10(%ebp),%edx
00005516	leal	0x0c(%esi,%edx),%ecx
0000551a	movl	%ecx,0x14(%esp)
0000551e	leal	0x08(%esi,%edx),%ecx
00005522	movl	%ecx,0x10(%esp)
00005526	leal	0x04(%esi,%edx),%ecx
0000552a	movl	%ecx,0x0c(%esp)
0000552e	movl	%edi,0x08(%esp)
00005532	movl	0xd8(%ebp),%ecx
00005535	leal	0x3a9d4-0x535e(%ecx),%ecx
0000553b	movl	%ecx,0x04(%esp)
0000553f	movl	%eax,(%esp)
00005542	calll	_sscanf
00005547	cmpl	$0x04,%eax
0000554a	je	0x00005787
00005550	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00005557	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
0000555d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00005564	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
0000556b	jmp	0x00005787
00005570	movl	0xdc(%ebp),%ecx
00005573	movl	0xec(%ecx),%eax
00005576	movl	0xf0(%ecx),%ecx
00005579	movl	%ecx,0x08(%esp)
0000557d	movl	%eax,0x04(%esp)
00005581	movl	0x08(%ebp),%eax
00005584	movl	%eax,(%esp)
00005587	calll	KeyValues::GetString(char const*, char const*)
0000558c	testl	%eax,%eax
0000558e	movl	0xd4(%ebp),%edi
00005591	je	0x000055c0
00005593	movl	0x10(%ebp),%ecx
00005596	leal	0x04(%esi,%ecx),%ecx
0000559a	movl	%ecx,0x0c(%esp)
0000559e	movl	%edi,0x08(%esp)
000055a2	movl	0xd8(%ebp),%ecx
000055a5	leal	0x3ab93-0x535e(%ecx),%ecx
000055ab	movl	%ecx,0x04(%esp)
000055af	movl	%eax,(%esp)
000055b2	calll	_sscanf
000055b7	cmpl	$0x02,%eax
000055ba	je	0x00005787
000055c0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
000055c7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
000055cd	jmp	0x00005787
000055d2	movl	0xdc(%ebp),%esi
000055d5	movl	0xec(%esi),%eax
000055d8	movl	0xf0(%esi),%ecx
000055db	movl	%ecx,0x08(%esp)
000055df	movl	%eax,0x04(%esp)
000055e3	movl	0x08(%ebp),%eax
000055e6	movl	%eax,(%esp)
000055e9	calll	KeyValues::GetString(char const*, char const*)
000055ee	movl	0xfc(%esi),%ecx
000055f1	movl	%ecx,0x08(%esp)
000055f5	movl	%eax,0x04(%esp)
000055f9	movl	0xd4(%ebp),%eax
000055fc	movl	%eax,(%esp)
000055ff	calll	_strncpy
00005604	jmp	0x00005787
00005609	movl	0xdc(%ebp),%edi
0000560c	movl	0xf0(%edi),%eax
0000560f	xorl	%esi,%esi
00005611	testl	%eax,%eax
00005613	je	0x0000561f
00005615	movl	%eax,(%esp)
00005618	calll	_atoi
0000561d	movl	%eax,%esi
0000561f	movl	0xec(%edi),%eax
00005622	movl	%edi,0xdc(%ebp)
00005625	movl	%eax,0x04(%esp)
00005629	movl	0x08(%ebp),%eax
0000562c	movl	%eax,(%esp)
0000562f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005637	calll	KeyValues::FindKey(char const*, bool)
0000563c	testl	%eax,%eax
0000563e	je	0x00005692
00005640	movsbl	0x10(%eax),%ecx
00005644	decl	%ecx
00005645	cmpl	$0x06,%ecx
00005648	ja	0x0000568f
0000564a	xorl	%esi,%esi
0000564c	movl	0xd8(%ebp),%edx
0000564f	movl	0x0000045e(%edx,%ecx,4),%ecx
00005656	addl	%edx,%ecx
00005658	jmp	*%ecx
0000565a	movl	0x04(%eax),%eax
0000565d	movl	%eax,(%esp)
00005660	calll	_atoi
00005665	movl	%eax,%esi
00005667	jmp	0x00005692
00005669	movl	0x08(%eax),%eax
0000566c	movl	%eax,(%esp)
0000566f	movl	$0x0000000a,0x08(%esp)
00005677	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
0000567f	calll	_wcstol
00005684	movl	%eax,%esi
00005686	jmp	0x00005692
00005688	cvttss2si	0x0c(%eax),%esi
0000568d	jmp	0x00005692
0000568f	movl	0x0c(%eax),%esi
00005692	movl	0xd4(%ebp),%eax
00005695	movl	%esi,(%eax)
00005697	jmp	0x00005787
0000569c	testl	%eax,%eax
0000569e	movl	0xdc(%ebp),%ecx
000056a1	je	0x000056ee
000056a3	movl	0xec(%ecx),%eax
000056a6	movl	%ecx,0xdc(%ebp)
000056a9	movl	%eax,0x04(%esp)
000056ad	movl	0x08(%ebp),%eax
000056b0	movl	%eax,(%esp)
000056b3	calll	KeyValues::GetColor(char const*)
000056b8	movzbl	%al,%ecx
000056bb	cvtsi2ss	%ecx,%xmm0
000056bf	movl	0x10(%ebp),%edx
000056c2	movss	%xmm0,(%edx,%esi)
000056c7	movzbl	%ah,%ecx
000056ca	cvtsi2ss	%ecx,%xmm1
000056ce	movss	%xmm1,0x04(%edx,%esi)
000056d4	shrl	$0x10,%eax
000056d7	movzbl	%al,%eax
000056da	cvtsi2ss	%eax,%xmm1
000056de	movss	%xmm1,0x08(%edx,%esi)
000056e4	leal	0x08(%edx,%esi),%edi
000056e8	leal	0x04(%edx,%esi),%ebx
000056ec	jmp	0x0000575d
000056ee	movl	0xf0(%ecx),%eax
000056f1	movl	%ecx,0xdc(%ebp)
000056f4	testl	%eax,%eax
000056f6	je	0x00005737
000056f8	movl	0x10(%ebp),%edi
000056fb	leal	0x08(%edi,%esi),%ecx
000056ff	movl	%ecx,0xd0(%ebp)
00005702	movl	%ecx,0x10(%esp)
00005706	leal	0x04(%edi,%esi),%ebx
0000570a	movl	%ebx,0x0c(%esp)
0000570e	movl	0xd4(%ebp),%ecx
00005711	movl	%ecx,0x08(%esp)
00005715	movl	0xd8(%ebp),%ecx
00005718	leal	0x3ab8a-0x535e(%ecx),%ecx
0000571e	movl	%ecx,0x04(%esp)
00005722	movl	%eax,(%esp)
00005725	calll	_sscanf
0000572a	movl	0xd4(%ebp),%ecx
0000572d	movss	(%edi,%esi),%xmm0
00005732	movl	0xd0(%ebp),%edi
00005735	jmp	0x00005760
00005737	movl	0x10(%ebp),%eax
0000573a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax,%esi)
00005741	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%eax,%esi)
00005749	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%eax,%esi)
00005751	leal	0x08(%eax,%esi),%edi
00005755	leal	0x04(%eax,%esi),%ebx
00005759	pxor	%xmm0,%xmm0
0000575d	movl	0xd4(%ebp),%ecx
00005760	movl	0xd8(%ebp),%eax
00005763	movss	0x3a908-0x535e(%eax),%xmm1
0000576b	mulss	%xmm1,%xmm0
0000576f	movss	%xmm0,(%ecx)
00005773	movss	(%ebx),%xmm0
00005777	mulss	%xmm1,%xmm0
0000577b	movss	%xmm0,(%ebx)
0000577f	mulss	(%edi),%xmm1
00005783	movss	%xmm1,(%edi)
00005787	movl	0xdc(%ebp),%edi
0000578a	movl	(%edi),%eax
0000578c	addl	$0x14,%edi
0000578f	testl	%eax,%eax
00005791	jne	0x00005380
00005797	addl	$0x4c,%esp
0000579a	popl	%esi
0000579b	popl	%edi
0000579c	popl	%ebx
0000579d	popl	%ebp
0000579e	ret
0000579f	nop
000057a0	bound	(%eax),%eax
000057a2	addb	%al,(%eax)
000057a4	andl	(%ecx),%eax
000057a6	addb	%al,(%eax)
000057a8	addl	%ds:(%eax),%eax
000057ab	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx,%eax)
000057af	addb	%ch,0x92000002(%ebx)
000057b5	addl	%eax,(%eax)
000057b7	addb	%dl,(%edx)
000057b9	addb	(%eax),%al
000057bb	addb	%bh,%ah
000057bd	addb	(%eax),%al
000057bf	addb	%dh,(%ecx)
000057c1	addl	(%eax),%eax
000057c3	addb	%ch,(%edx)
000057c5	addl	(%eax),%eax
000057c7	addb	%dh,(%ecx)
000057c9	addl	(%eax),%eax
000057cb	addb	%cl,(%ebx)
000057cd	addl	(%eax),%eax
000057cf	addb	%dh,(%ecx)
000057d1	addl	(%eax),%eax
000057d3	addb	%dh,(%ebx,%eax)
000057d6	addb	%al,(%eax)
000057d8	movl	$0x00e30000,(%eax)
000057de	addb	%al,(%eax)
000057e0	faddl	(%eax)
000057e2	addb	%al,(%eax)
000057e4	popl	%ss
000057e5	addl	%eax,(%eax)
000057e7	addb	%dl,(%edi)
000057e9	addl	%eax,(%eax)
000057eb	addb	%dl,(%edi)
000057ed	addl	%eax,(%eax)
000057ef	addb	%ch,%dl
000057f1	addb	%al,(%eax)
000057f3	addb	%ah,0x66(%esi)
000057f6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::ProcessResolutionKeys(char const*):
00005800	pushl	%ebp
00005801	movl	%esp,%ebp
00005803	pushl	%ebx
00005804	pushl	%edi
00005805	pushl	%esi
00005806	subl	$0x0000009c,%esp
0000580c	calll	0x00005811
00005811	popl	%eax
00005812	movl	%eax,0xffffff6c(%ebp)
00005818	movl	0x42cec-0x5811(%eax),%eax
0000581e	movl	%eax,0xffffff68(%ebp)
00005824	movl	(%eax),%eax
00005826	movl	%eax,0xf0(%ebp)
00005829	xorb	%al,%al
0000582b	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebp)
0000582f	je	0x00005947
00005835	movl	0x08(%ebp),%eax
00005838	movl	0x18(%eax),%edi
0000583b	xorb	%al,%al
0000583d	jmp	0x0000587a
0000583f	nop
00005840	movl	%ecx,%edx
00005842	movl	0x14(%edx),%ecx
00005845	testl	%ecx,%ecx
00005847	je	0x00005853
00005849	cmpl	%eax,%ecx
0000584b	jne	0x00005840
0000584d	movl	0x14(%eax),%ecx
00005850	movl	%ecx,0x14(%edx)
00005853	addl	$0x14,%eax
00005856	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
0000585c	movl	%ebx,(%esp)
0000585f	movl	$0x00000001,0x04(%esp)
00005867	movl	0xffffff6c(%ebp),%eax
0000586d	call	*KeyValues::s_pfGetSymbolForString-0x5811(%eax)
00005873	movl	%eax,(%edi)
00005875	movl	0x14(%edi),%edi
00005878	movb	$0x01,%al
0000587a	testl	%edi,%edi
0000587c	je	0x00005947
00005882	movl	0x0c(%ebp),%esi
00005885	movl	%esi,0x04(%esp)
00005889	movl	%edi,(%esp)
0000588c	calll	KeyValues::ProcessResolutionKeys(char const*)
00005891	movl	(%edi),%eax
00005893	movl	%eax,(%esp)
00005896	movl	0xffffff6c(%ebp),%eax
0000589c	call	*KeyValues::s_pfGetStringForSymbol-0x5811(%eax)
000058a2	movl	%esi,0x04(%esp)
000058a6	movl	%eax,(%esp)
000058a9	calll	V_stristr(char const*, char const*)
000058ae	testl	%eax,%eax
000058b0	je	0x00005875
000058b2	movl	(%edi),%eax
000058b4	movl	%eax,(%esp)
000058b7	movl	0xffffff6c(%ebp),%eax
000058bd	call	*KeyValues::s_pfGetStringForSymbol-0x5811(%eax)
000058c3	movl	%eax,0x04(%esp)
000058c7	leal	0xffffff70(%ebp),%ebx
000058cd	movl	%ebx,(%esp)
000058d0	movl	$0x00000080,0x08(%esp)
000058d8	calll	V_strncpy(char*, char const*, int)
000058dd	movl	0x0c(%ebp),%eax
000058e0	movl	%eax,0x04(%esp)
000058e4	movl	%ebx,(%esp)
000058e7	calll	V_stristr(char*, char const*)
000058ec	movl	%eax,%esi
000058ee	testl	%esi,%esi
000058f0	je	0x00005875
000058f2	movl	0x0c(%ebp),%eax
000058f5	movl	%eax,0x04(%esp)
000058f9	movl	%esi,(%esp)
000058fc	calll	V_stricmp(char const*, char const*)
00005901	testl	%eax,%eax
00005903	jne	0x00005875
00005909	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
0000590c	movl	%ebx,0x04(%esp)
00005910	movl	0x08(%ebp),%eax
00005913	movl	%eax,(%esp)
00005916	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000591e	calll	KeyValues::FindKey(char const*, bool)
00005923	testl	%eax,%eax
00005925	je	0x0000585c
0000592b	movl	0x08(%ebp),%ecx
0000592e	movl	0x18(%ecx),%ecx
00005931	cmpl	%eax,%ecx
00005933	jne	0x00005840
00005939	movl	0x14(%eax),%ecx
0000593c	movl	0x08(%ebp),%edx
0000593f	movl	%ecx,0x18(%edx)
00005942	jmp	0x00005853
00005947	movl	0xffffff68(%ebp),%ecx
0000594d	movl	(%ecx),%ecx
0000594f	cmpl	0xf0(%ebp),%ecx
00005952	jne	0x00005962
00005954	movzbl	%al,%eax
00005957	addl	$0x0000009c,%esp
0000595d	popl	%esi
0000595e	popl	%edi
0000595f	popl	%ebx
00005960	popl	%ebp
00005961	ret
00005962	calll	___stack_chk_fail
00005967	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::Dump(IKeyValuesDumpContext*, int):
00005970	pushl	%ebp
00005971	movl	%esp,%ebp
00005973	pushl	%ebx
00005974	pushl	%edi
00005975	pushl	%esi
00005976	subl	$0x0c,%esp
00005979	movl	0x0c(%ebp),%esi
0000597c	movl	(%esi),%eax
0000597e	movl	0x10(%ebp),%ecx
00005981	movl	%ecx,0x08(%esp)
00005985	movl	0x08(%ebp),%ecx
00005988	movl	%ecx,0x04(%esp)
0000598c	movl	%esi,(%esp)
0000598f	call	(%eax)
00005991	movb	%al,%cl
00005993	xorb	%al,%al
00005995	testb	%cl,%cl
00005997	je	0x00005a8b
0000599d	xorl	%ebx,%ebx
0000599f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebp)
000059a3	je	0x000059c1
000059a5	movl	0x08(%ebp),%eax
000059a8	leal	0x18(%eax),%eax
000059ab	xorl	%ebx,%ebx
000059ad	jmp	0x000059b3
000059af	nop
000059b0	addl	$0x14,%eax
000059b3	movl	(%eax),%eax
000059b5	testl	%eax,%eax
000059b7	je	0x000059c1
000059b9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000059bd	je	0x000059b0
000059bf	movl	%eax,%ebx
000059c1	movl	0x10(%ebp),%eax
000059c4	leal	0x01(%eax),%edi
000059c7	jmp	0x00005a01
000059c9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
000059d0	movl	(%esi),%eax
000059d2	movl	%edi,0x08(%esp)
000059d6	movl	%ebx,0x04(%esp)
000059da	movl	%esi,(%esp)
000059dd	call	*0x04(%eax)
000059e0	movb	%al,%cl
000059e2	xorb	%al,%al
000059e4	testb	%cl,%cl
000059e6	movl	%ebx,%ecx
000059e8	je	0x00005a8b
000059ee	nop
000059f0	movl	0x14(%ecx),%ecx
000059f3	xorl	%ebx,%ebx
000059f5	testl	%ecx,%ecx
000059f7	je	0x00005a01
000059f9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%ecx)
000059fd	movl	%ecx,%ebx
000059ff	je	0x000059f0
00005a01	testl	%ebx,%ebx
00005a03	jne	0x000059d0
00005a05	xorl	%ebx,%ebx
00005a07	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebp)
00005a0b	je	0x00005a71
00005a0d	movl	0x08(%ebp),%eax
00005a10	leal	0x18(%eax),%eax
00005a13	xorl	%ebx,%ebx
00005a15	jmp	0x00005a23
00005a17	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a20	addl	$0x14,%eax
00005a23	movl	(%eax),%eax
00005a25	testl	%eax,%eax
00005a27	je	0x00005a71
00005a29	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00005a2d	jne	0x00005a20
00005a2f	movl	%eax,%ebx
00005a31	jmp	0x00005a71
00005a33	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a40	movl	%edi,0x08(%esp)
00005a44	movl	%esi,0x04(%esp)
00005a48	movl	%ebx,(%esp)
00005a4b	calll	KeyValues::Dump(IKeyValuesDumpContext*, int)
00005a50	movb	%al,%cl
00005a52	xorb	%al,%al
00005a54	testb	%cl,%cl
00005a56	je	0x00005a8b
00005a58	movl	%ebx,%eax
00005a5a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a60	movl	0x14(%eax),%eax
00005a63	xorl	%ebx,%ebx
00005a65	testl	%eax,%eax
00005a67	je	0x00005a71
00005a69	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00005a6d	movl	%eax,%ebx
00005a6f	jne	0x00005a60
00005a71	testl	%ebx,%ebx
00005a73	jne	0x00005a40
00005a75	movl	(%esi),%eax
00005a77	movl	0x10(%ebp),%ecx
00005a7a	movl	%ecx,0x08(%esp)
00005a7e	movl	0x08(%ebp),%ecx
00005a81	movl	%ecx,0x04(%esp)
00005a85	movl	%esi,(%esp)
00005a88	call	*0x08(%eax)
00005a8b	movzbl	%al,%eax
00005a8e	addl	$0x0c,%esp
00005a91	popl	%esi
00005a92	popl	%edi
00005a93	popl	%ebx
00005a94	popl	%ebp
00005a95	ret
00005a96	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
IKeyValuesDumpContextAsText::KvBeginKey(KeyValues*, int):
00005aa0	pushl	%ebp
00005aa1	movl	%esp,%ebp
00005aa3	pushl	%ebx
00005aa4	pushl	%edi
00005aa5	pushl	%esi
00005aa6	subl	$0x0c,%esp
00005aa9	calll	0x00005aae
00005aae	popl	%edi
00005aaf	movl	0x08(%ebp),%esi
00005ab2	movl	(%esi),%eax
00005ab4	movl	0x10(%ebp),%ecx
00005ab7	movl	%ecx,0x04(%esp)
00005abb	movl	%esi,(%esp)
00005abe	call	*0x0c(%eax)
00005ac1	movb	%al,%cl
00005ac3	movl	0x0c(%ebp),%edx
00005ac6	xorb	%al,%al
00005ac8	testl	%edx,%edx
00005aca	je	0x00005afc
00005acc	cmpb	$0x01,%cl
00005acf	jne	0x00005b13
00005ad1	movl	(%esi),%eax
00005ad3	movl	0x10(%eax),%ebx
00005ad6	movl	(%edx),%eax
00005ad8	movl	%eax,(%esp)
00005adb	call	*KeyValues::s_pfGetStringForSymbol-0x5aae(%edi)
00005ae1	movl	%eax,0x04(%esp)
00005ae5	movl	%esi,(%esp)
00005ae8	call	*%ebx
00005aea	movb	%al,%cl
00005aec	xorb	%al,%al
00005aee	testb	%cl,%cl
00005af0	je	0x00005b13
00005af2	movl	(%esi),%eax
00005af4	leal	0x3ab99-0x5aae(%edi),%ecx
00005afa	jmp	0x00005b09
00005afc	cmpb	$0x01,%cl
00005aff	jne	0x00005b13
00005b01	movl	(%esi),%eax
00005b03	leal	0x3ab9d-0x5aae(%edi),%ecx
00005b09	movl	%ecx,0x04(%esp)
00005b0d	movl	%esi,(%esp)
00005b10	call	*0x10(%eax)
00005b13	movzbl	%al,%eax
00005b16	addl	$0x0c,%esp
00005b19	popl	%esi
00005b1a	popl	%edi
00005b1b	popl	%ebx
00005b1c	popl	%ebp
00005b1d	ret
00005b1e	nop
IKeyValuesDumpContextAsText::KvWriteValue(KeyValues*, int):
00005b20	pushl	%ebp
00005b21	movl	%esp,%ebp
00005b23	pushl	%ebx
00005b24	pushl	%edi
00005b25	pushl	%esi
00005b26	subl	$0x2c,%esp
00005b29	calll	0x00005b2e
00005b2e	popl	%eax
00005b2f	movl	%eax,0xdc(%ebp)
00005b32	movl	0x42cec-0x5b2e(%eax),%eax
00005b38	movl	%eax,0xd8(%ebp)
00005b3b	movl	(%eax),%eax
00005b3d	movl	%eax,0xf0(%ebp)
00005b40	movl	0x08(%ebp),%ebx
00005b43	movl	(%ebx),%eax
00005b45	subl	$0x10,%esp
00005b48	movl	0x10(%ebp),%ecx
00005b4b	movl	%ecx,0x04(%esp)
00005b4f	movl	%ebx,(%esp)
00005b52	call	*0x0c(%eax)
00005b55	addl	$0x10,%esp
00005b58	movb	%al,%cl
00005b5a	movl	0x0c(%ebp),%esi
00005b5d	xorb	%al,%al
00005b5f	testl	%esi,%esi
00005b61	jne	0x00005b86
00005b63	cmpb	$0x01,%cl
00005b66	jne	0x00005fab
00005b6c	movl	(%ebx),%eax
00005b6e	subl	$0x10,%esp
00005b71	movl	0xdc(%ebp),%ecx
00005b74	leal	0x3ab9d-0x5b2e(%ecx),%ecx
00005b7a	movl	%ecx,0x04(%esp)
00005b7e	movl	%ebx,(%esp)
00005b81	jmp	0x00005fa5
00005b86	cmpb	$0x01,%cl
00005b89	jne	0x00005fab
00005b8f	movl	%ebx,%edi
00005b91	movl	(%edi),%eax
00005b93	movl	0x10(%eax),%ebx
00005b96	movl	(%esi),%eax
00005b98	subl	$0x10,%esp
00005b9b	movl	%eax,(%esp)
00005b9e	movl	0xdc(%ebp),%eax
00005ba1	call	*KeyValues::s_pfGetStringForSymbol-0x5b2e(%eax)
00005ba7	addl	$0x10,%esp
00005baa	subl	$0x10,%esp
00005bad	movl	%eax,0x04(%esp)
00005bb1	movl	%edi,(%esp)
00005bb4	call	*%ebx
00005bb6	addl	$0x10,%esp
00005bb9	movb	%al,%cl
00005bbb	xorb	%al,%al
00005bbd	testb	%cl,%cl
00005bbf	je	0x00005fab
00005bc5	movl	(%edi),%eax
00005bc7	subl	$0x10,%esp
00005bca	movl	0xdc(%ebp),%ecx
00005bcd	leal	0x3aba9-0x5b2e(%ecx),%ecx
00005bd3	movl	%ecx,0x04(%esp)
00005bd7	movl	%edi,(%esp)
00005bda	call	*0x10(%eax)
00005bdd	addl	$0x10,%esp
00005be0	movb	%al,%cl
00005be2	xorb	%al,%al
00005be4	testb	%cl,%cl
00005be6	je	0x00005fab
00005bec	subl	$0x10,%esp
00005bef	movl	%esi,(%esp)
00005bf2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005bfa	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c02	calll	KeyValues::FindKey(char const*, bool)
00005c07	addl	$0x10,%esp
00005c0a	testl	%eax,%eax
00005c0c	je	0x00005f8d
00005c12	movsbl	0x10(%eax),%eax
00005c16	decl	%eax
00005c17	cmpl	$0x06,%eax
00005c1a	ja	0x00005f8d
00005c20	movl	0xdc(%ebp),%ecx
00005c23	movl	0x0000049a(%ecx,%eax,4),%eax
00005c2a	addl	%ecx,%eax
00005c2c	jmp	*%eax
00005c2e	movl	0x08(%ebp),%edi
00005c31	movl	(%edi),%eax
00005c33	movl	0x10(%eax),%ebx
00005c36	subl	$0x10,%esp
00005c39	movl	0xdc(%ebp),%eax
00005c3c	leal	0x3a9e0-0x5b2e(%eax),%eax
00005c42	movl	%eax,0x08(%esp)
00005c46	movl	%esi,(%esp)
00005c49	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c51	calll	KeyValues::GetString(char const*, char const*)
00005c56	addl	$0x10,%esp
00005c59	subl	$0x10,%esp
00005c5c	movl	%eax,0x04(%esp)
00005c60	movl	%edi,(%esp)
00005c63	call	*%ebx
00005c65	jmp	0x00005f82
00005c6a	subl	$0x10,%esp
00005c6d	movl	%esi,(%esp)
00005c70	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005c78	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c80	xorl	%esi,%esi
00005c82	calll	KeyValues::FindKey(char const*, bool)
00005c87	addl	$0x10,%esp
00005c8a	testl	%eax,%eax
00005c8c	je	0x00005ce7
00005c8e	movsbl	0x10(%eax),%ecx
00005c92	decl	%ecx
00005c93	cmpl	$0x06,%ecx
00005c96	ja	0x00005ce4
00005c98	xorl	%esi,%esi
00005c9a	movl	0xdc(%ebp),%edx
00005c9d	movl	0x000004ee(%edx,%ecx,4),%ecx
00005ca4	addl	%edx,%ecx
00005ca6	jmp	*%ecx
00005ca8	movl	0x04(%eax),%eax
00005cab	subl	$0x10,%esp
00005cae	movl	%eax,(%esp)
00005cb1	calll	_atoi
00005cb6	addl	$0x10,%esp
00005cb9	movl	%eax,%esi
00005cbb	jmp	0x00005ce7
00005cbd	movl	0x08(%eax),%eax
00005cc0	subl	$0x10,%esp
00005cc3	movl	%eax,(%esp)
00005cc6	movl	$0x0000000a,0x08(%esp)
00005cce	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005cd6	calll	_wcstol
00005cdb	jmp	0x00005cb6
00005cdd	cvttss2si	0x0c(%eax),%esi
00005ce2	jmp	0x00005ce7
00005ce4	movl	0x0c(%eax),%esi
00005ce7	leal	0x80(%esp),%ebx
00005ceb	movl	%ebx,%esp
00005ced	subl	$0x20,%esp
00005cf0	movl	%esi,0x10(%esp)
00005cf4	movl	%esi,0x0c(%esp)
00005cf8	movl	0xdc(%ebp),%eax
00005cfb	leal	0x3abab-0x5b2e(%eax),%eax
00005d01	jmp	0x00005f59
00005d06	subl	$0x10,%esp
00005d09	movl	%esi,(%esp)
00005d0c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005d14	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005d1c	calll	KeyValues::FindKey(char const*, bool)
00005d21	addl	$0x10,%esp
00005d24	pxor	%xmm0,%xmm0
00005d28	testl	%eax,%eax
00005d2a	je	0x00005d9e
00005d2c	movsbl	0x10(%eax),%ecx
00005d30	decl	%ecx
00005d31	pxor	%xmm0,%xmm0
00005d35	cmpl	$0x06,%ecx
00005d38	ja	0x00005d9e
00005d3a	movl	0xdc(%ebp),%edx
00005d3d	movl	0x000004d2(%edx,%ecx,4),%ecx
00005d44	addl	%edx,%ecx
00005d46	jmp	*%ecx
00005d48	movl	0x04(%eax),%eax
00005d4b	subl	$0x10,%esp
00005d4e	movl	%eax,(%esp)
00005d51	calll	_atof
00005d56	addl	$0x10,%esp
00005d59	fstps	0xe0(%ebp)
00005d5c	movss	0xe0(%ebp),%xmm0
00005d61	jmp	0x00005d9e
00005d63	movss	0x0c(%eax),%xmm0
00005d68	jmp	0x00005d9e
00005d6a	cvtsi2ss	0x0c(%eax),%xmm0
00005d6f	jmp	0x00005d9e
00005d71	movl	0x04(%eax),%eax
00005d74	movl	(%eax),%ecx
00005d76	movl	0x04(%eax),%eax
00005d79	movl	%eax,0xec(%ebp)
00005d7c	movl	%ecx,0xe8(%ebp)
00005d7f	testl	%eax,%eax
00005d81	sets	%al
00005d84	xorb	$0x01,%al
00005d86	movzbl	%al,%eax
00005d89	fildq	0xe8(%ebp)
00005d8c	movl	0xdc(%ebp),%ecx
00005d8f	fadds	0x3a900-0x5b2e(%ecx,%eax,4)
00005d96	fstps	0xe4(%ebp)
00005d99	movss	0xe4(%ebp),%xmm0
00005d9e	leal	0x80(%esp),%esi
00005da2	movl	%esi,%esp
00005da4	subl	$0x20,%esp
00005da7	cvtss2sd	%xmm0,%xmm0
00005dab	movsd	%xmm0,0x0c(%esp)
00005db1	movl	0xdc(%ebp),%eax
00005db4	leal	0x3abbc-0x5b2e(%eax),%eax
00005dba	movl	%eax,0x08(%esp)
00005dbe	movl	%esi,(%esp)
00005dc1	movl	$0x00000080,0x04(%esp)
00005dc9	calll	V_snprintf(char*, int, char const*, ...)
00005dce	addl	$0x20,%esp
00005dd1	movl	0x08(%ebp),%ecx
00005dd4	movl	(%ecx),%eax
00005dd6	subl	$0x10,%esp
00005dd9	movl	%esi,0x04(%esp)
00005ddd	jmp	0x00005f7c
00005de2	subl	$0x10,%esp
00005de5	movl	%esi,(%esp)
00005de8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005df0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005df8	xorl	%esi,%esi
00005dfa	calll	KeyValues::FindKey(char const*, bool)
00005dff	addl	$0x10,%esp
00005e02	testl	%eax,%eax
00005e04	je	0x00005e11
00005e06	xorl	%esi,%esi
00005e08	cmpb	$0x04,0x10(%eax)
00005e0c	jne	0x00005e11
00005e0e	movl	0x0c(%eax),%esi
00005e11	leal	0x80(%esp),%ebx
00005e15	movl	%ebx,%esp
00005e17	subl	$0x10,%esp
00005e1a	movl	%esi,0x0c(%esp)
00005e1e	movl	0xdc(%ebp),%eax
00005e21	leal	0x3abc8-0x5b2e(%eax),%eax
00005e27	movl	%eax,0x08(%esp)
00005e2b	movl	%ebx,(%esp)
00005e2e	movl	$0x00000080,0x04(%esp)
00005e36	calll	V_snprintf(char*, int, char const*, ...)
00005e3b	addl	$0x10,%esp
00005e3e	jmp	0x00005f70
00005e43	subl	$0x10,%esp
00005e46	movl	0xdc(%ebp),%edi
00005e49	leal	0x3ac7c-0x5b2e(%edi),%eax
00005e4f	movl	%eax,0x08(%esp)
00005e53	movl	%esi,(%esp)
00005e56	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005e5e	calll	KeyValues::GetWString(char const*, wchar_t const*)
00005e63	addl	$0x10,%esp
00005e66	movl	%eax,%esi
00005e68	subl	$0x10,%esp
00005e6b	movl	%esi,(%esp)
00005e6e	calll	_wcslen
00005e73	addl	$0x10,%esp
00005e76	leal	0x4f(%eax,%eax),%ecx
00005e7a	andl	$0xf0,%ecx
00005e7d	movl	%esp,%ebx
00005e7f	subl	%ecx,%ebx
00005e81	movl	%ebx,%esp
00005e83	subl	$0x20,%esp
00005e86	movl	%eax,0x10(%esp)
00005e8a	movl	%esi,0x0c(%esp)
00005e8e	leal	0x3abd4-0x5b2e(%edi),%ecx
00005e94	movl	%ecx,0x08(%esp)
00005e98	leal	0x40(%eax,%eax),%eax
00005e9c	movl	%eax,0x04(%esp)
00005ea0	movl	%ebx,(%esp)
00005ea3	jmp	0x00005f68
00005ea8	subl	$0x10,%esp
00005eab	movl	%esi,(%esp)
00005eae	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005eb6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005ebe	xorl	%esi,%esi
00005ec0	calll	KeyValues::FindKey(char const*, bool)
00005ec5	addl	$0x10,%esp
00005ec8	testl	%eax,%eax
00005eca	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),%edx
00005ecf	je	0x00005f37
00005ed1	movsbl	0x10(%eax),%ecx
00005ed5	decl	%ecx
00005ed6	cmpl	$0x06,%ecx
00005ed9	ja	0x00005f2f
00005edb	movl	0xdc(%ebp),%edx
00005ede	movl	0x000004b6(%edx,%ecx,4),%ecx
00005ee5	addl	%edx,%ecx
00005ee7	jmp	*%ecx
00005ee9	movl	0x04(%eax),%eax
00005eec	subl	$0x10,%esp
00005eef	movl	%eax,(%esp)
00005ef2	calll	V_atoi64(char const*)
00005ef7	addl	$0x10,%esp
00005efa	movl	%eax,%esi
00005efc	jmp	0x00005f37
00005efe	movl	0x08(%eax),%eax
00005f01	subl	$0x10,%esp
00005f04	movl	%eax,(%esp)
00005f07	movl	$0x0000000a,0x08(%esp)
00005f0f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005f17	calll	_wcstoll
00005f1c	jmp	0x00005ef7
00005f1e	cvttss2si	0x0c(%eax),%esi
00005f23	jmp	0x00005f32
00005f25	movl	0x04(%eax),%eax
00005f28	movl	(%eax),%esi
00005f2a	movl	0x04(%eax),%edx
00005f2d	jmp	0x00005f37
00005f2f	movl	0x0c(%eax),%esi
00005f32	movl	%esi,%edx
00005f34	sarl	$0x1f,%edx
00005f37	leal	0x80(%esp),%ebx
00005f3b	movl	%ebx,%esp
00005f3d	subl	$0x20,%esp
00005f40	movl	%edx,0x18(%esp)
00005f44	movl	%esi,0x14(%esp)
00005f48	movl	%edx,0x10(%esp)
00005f4c	movl	%esi,0x0c(%esp)
00005f50	movl	0xdc(%ebp),%eax
00005f53	leal	0x3abec-0x5b2e(%eax),%eax
00005f59	movl	%eax,0x08(%esp)
00005f5d	movl	%ebx,(%esp)
00005f60	movl	$0x00000080,0x04(%esp)
00005f68	calll	V_snprintf(char*, int, char const*, ...)
00005f6d	addl	$0x20,%esp
00005f70	movl	0x08(%ebp),%ecx
00005f73	movl	(%ecx),%eax
00005f75	subl	$0x10,%esp
00005f78	movl	%ebx,0x04(%esp)
00005f7c	movl	%ecx,(%esp)
00005f7f	call	*0x10(%eax)
00005f82	addl	$0x10,%esp
00005f85	movb	%al,%cl
00005f87	xorb	%al,%al
00005f89	testb	%cl,%cl
00005f8b	je	0x00005fab
00005f8d	movl	0x08(%ebp),%edx
00005f90	movl	(%edx),%eax
00005f92	subl	$0x10,%esp
00005f95	movl	0xdc(%ebp),%ecx
00005f98	leal	0x3ac01-0x5b2e(%ecx),%ecx
00005f9e	movl	%ecx,0x04(%esp)
00005fa2	movl	%edx,(%esp)
00005fa5	call	*0x10(%eax)
00005fa8	addl	$0x10,%esp
00005fab	movl	0xd8(%ebp),%ecx
00005fae	movl	(%ecx),%ecx
00005fb0	cmpl	0xf0(%ebp),%ecx
00005fb3	jne	0x00005fc0
00005fb5	movzbl	%al,%eax
00005fb8	leal	0xf4(%ebp),%esp
00005fbb	popl	%esi
00005fbc	popl	%edi
00005fbd	popl	%ebx
00005fbe	popl	%ebp
00005fbf	ret
00005fc0	calll	___stack_chk_fail
00005fc5	nopl	(%eax)
00005fc8	addb	%al,(%ecx)
00005fca	addb	%al,(%eax)
00005fcc	cmpb	$0x01,%al
00005fce	addb	%al,(%eax)
00005fd0	fadds	(%ecx)
00005fd2	addb	%al,(%eax)
00005fd4	movb	$0x02,%ah
00005fd6	addb	%al,(%eax)
00005fd8	adcl	$0x5f000003,%eax
00005fdd	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005fdf	addb	%bh,0x03(%edx)
00005fe2	addb	%al,(%eax)
00005fe4	movl	$0x01000003,%ebx
00005fe9	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005feb	addb	%dh,%al
00005fed	addl	(%eax),%eax
00005fef	addb	%al,(%ecx)
00005ff1	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005ff3	addb	%dl,%al
00005ff5	addl	(%eax),%eax
00005ff7	addb	%al,(%ecx)
00005ff9	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005ffb	addb	%dh,%bh
00005ffd	addl	(%eax),%eax
00005fff	addb	%bl,(%edx)
00006001	addb	(%eax),%al
00006003	addb	%bh,(%edx,%eax)
00006006	addb	%al,(%eax)
00006008	xorl	$0x70000002,%eax
0000600d	addb	(%eax),%al
0000600f	addb	%dh,0x02(%eax)
00006012	addb	%al,(%eax)
00006014	jo	0x00006018
00006016	addb	%al,(%eax)
00006018	incl	%ebx
00006019	addb	(%eax),%al
0000601b	addb	%bh,0x01(%edx)
0000601e	addb	%al,(%eax)
00006020	movb	$0x01,%dh
00006022	addb	%al,(%eax)
00006024	scasl	%eax,(%edi)
00006025	addl	%eax,(%eax)
00006027	addb	%dh,0x8f000001(%esi)
0000602d	addl	%eax,(%eax)
0000602f	addb	%dh,0xb9000001(%esi)
00006035	addl	%eax,(%eax)
00006037	addb	%cl,(%edi)
00006039	popl	%ds
0000603a	testb	(%eax),%al
0000603c	addb	%al,(%eax)
0000603e	addb	%al,(%eax)
IKeyValuesDumpContextAsText::KvEndKey(KeyValues*, int):
00006040	pushl	%ebp
00006041	movl	%esp,%ebp
00006043	pushl	%edi
00006044	pushl	%esi
00006045	subl	$0x10,%esp
00006048	calll	0x0000604d
0000604d	popl	%esi
0000604e	movb	$0x01,%al
00006050	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebp)
00006054	je	0x00006082
00006056	movl	0x10(%ebp),%ecx
00006059	movl	0x08(%ebp),%edi
0000605c	movl	(%edi),%eax
0000605e	movl	%ecx,0x04(%esp)
00006062	movl	%edi,(%esp)
00006065	call	*0x0c(%eax)
00006068	movb	%al,%cl
0000606a	xorb	%al,%al
0000606c	testb	%cl,%cl
0000606e	je	0x00006082
00006070	movl	(%edi),%eax
00006072	leal	0x3a973-0x604d(%esi),%ecx
00006078	movl	%ecx,0x04(%esp)
0000607c	movl	%edi,(%esp)
0000607f	call	*0x10(%eax)
00006082	movzbl	%al,%eax
00006085	addl	$0x10,%esp
00006088	popl	%esi
00006089	popl	%edi
0000608a	popl	%ebp
0000608b	ret
0000608c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
IKeyValuesDumpContextAsText::KvWriteIndent(int):
00006090	pushl	%ebp
00006091	movl	%esp,%ebp
00006093	pushl	%ebx
00006094	pushl	%edi
00006095	pushl	%esi
00006096	subl	$0x0c,%esp
00006099	calll	0x0000609e
0000609e	popl	%eax
0000609f	movl	0x42cec-0x609e(%eax),%esi
000060a5	movl	(%esi),%eax
000060a7	movl	%eax,0xf0(%ebp)
000060aa	movl	0x0c(%ebp),%ebx
000060ad	leal	0x10(%ebx,%ebx),%eax
000060b1	andl	$0xf0,%eax
000060b4	movl	%esp,%edi
000060b6	subl	%eax,%edi
000060b8	movl	%edi,%esp
000060ba	subl	$0x10,%esp
000060bd	leal	(%ebx,%ebx),%eax
000060c0	movl	%eax,0x08(%esp)
000060c4	movl	%edi,(%esp)
000060c7	movl	$0x00000020,0x04(%esp)
000060cf	calll	_memset
000060d4	addl	$0x10,%esp
000060d7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi,%ebx,2)
000060db	movl	0x08(%ebp),%ecx
000060de	movl	(%ecx),%eax
000060e0	subl	$0x10,%esp
000060e3	movl	%edi,0x04(%esp)
000060e7	movl	%ecx,(%esp)
000060ea	call	*0x10(%eax)
000060ed	addl	$0x10,%esp
000060f0	movl	(%esi),%ecx
000060f2	cmpl	0xf0(%ebp),%ecx
000060f5	jne	0x00006102
000060f7	movzbl	%al,%eax
000060fa	leal	0xf4(%ebp),%esp
000060fd	popl	%esi
000060fe	popl	%edi
000060ff	popl	%ebx
00006100	popl	%ebp
00006101	ret
00006102	calll	___stack_chk_fail
00006107	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int):
00006110	pushl	%ebp
00006111	movl	%esp,%ebp
00006113	pushl	%edi
00006114	pushl	%esi
00006115	subl	$0x10,%esp
00006118	calll	0x0000611d
0000611d	popl	%esi
0000611e	movb	guard variable for CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%al
00006124	testb	%al,%al
00006126	jne	0x0000615a
00006128	leal	guard variable for CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%edi
0000612e	movl	%edi,(%esp)
00006131	calll	___cxa_guard_acquire
00006136	testl	%eax,%eax
00006138	je	0x0000615a
0000613a	leal	0x3ac03-0x611d(%esi),%eax
00006140	movl	%eax,0x04(%esp)
00006144	leal	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%eax
0000614a	movl	%eax,(%esp)
0000614d	calll	ConVarRef::ConVarRef(char const*)
00006152	movl	%edi,(%esp)
00006155	calll	___cxa_guard_release
0000615a	movl	0x08(%ebp),%edi
0000615d	leal	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%eax
00006163	movl	%eax,(%esp)
00006166	calll	ConVarRef::IsValid() const
0000616b	cmpb	$0x01,%al
0000616d	jne	0x0000617f
0000616f	movl	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d+0x00000004(%esi),%eax
00006175	movl	KeyValues::GetStringForSymbolClassic(int)(%eax),%ecx
00006178	xorb	%al,%al
0000617a	cmpl	0x04(%edi),%ecx
0000617d	jl	0x00006195
0000617f	movl	0x10(%ebp),%eax
00006182	movl	0x0c(%ebp),%ecx
00006185	movl	%eax,0x08(%esp)
00006189	movl	%ecx,0x04(%esp)
0000618d	movl	%edi,(%esp)
00006190	calll	IKeyValuesDumpContextAsText::KvBeginKey(KeyValues*, int)
00006195	movzbl	%al,%eax
00006198	addl	$0x10,%esp
0000619b	popl	%esi
0000619c	popl	%edi
0000619d	popl	%ebp
0000619e	ret
0000619f	movl	%eax,%esi
000061a1	movl	%edi,(%esp)
000061a4	calll	___cxa_guard_abort
000061a9	movl	%esi,(%esp)
000061ac	calll	__Unwind_Resume
000061b1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
CKeyValuesDumpContextAsDevMsg::KvWriteText(char const*):
000061c0	pushl	%ebp
000061c1	movl	%esp,%ebp
000061c3	subl	$0x18,%esp
000061c6	calll	0x000061cb
000061cb	popl	%eax
000061cc	movl	0x08(%ebp),%ecx
000061cf	movl	0x04(%ecx),%ecx
000061d2	movl	0x0c(%ebp),%edx
000061d5	testl	%ecx,%ecx
000061d7	jle	0x000061f1
000061d9	movl	%edx,0x08(%esp)
000061dd	leal	0x3ac0d-0x61cb(%eax),%eax
000061e3	movl	%eax,0x04(%esp)
000061e7	movl	%ecx,(%esp)
000061ea	calll	_DevMsg
000061ef	jmp	0x00006203
000061f1	movl	%edx,0x04(%esp)
000061f5	leal	0x3ac0d-0x61cb(%eax),%eax
000061fb	movl	%eax,(%esp)
000061fe	calll	_Msg
00006203	movl	$0x00000001,%eax
00006208	addl	$0x18,%esp
0000620b	popl	%ebp
0000620c	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(kvpacker.o):
(__TEXT,__text) section
KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	movl	%eax,0xec(%ebp)
00000012	xorb	%cl,%cl
00000014	movl	0x10(%ebp),%ebx
00000017	testb	$0x01,0x15(%ebx)
0000001b	jne	0x0000086d
00000021	xorb	%cl,%cl
00000023	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%ebx)
00000027	jne	0x0000086d
0000002d	movl	0x0c(%ebp),%esi
00000030	jmp	0x00000086
00000032	nopw	%cs:KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)(%eax,%eax)
00000040	movl	0xe8(%ebp),%eax
00000043	movl	%eax,(%esp)
00000046	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
0000004e	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000056	calll	KeyValues::GetPtr(char const*, void*)
0000005b	movl	%eax,%esi
0000005d	testb	$0x01,0x15(%ebx)
00000061	je	0x00000558
00000067	movl	%esi,0x08(%esp)
0000006b	movl	0xec(%ebp),%eax
0000006e	leal	0xdc28-0xe(%eax),%eax
00000074	movl	%eax,0x04(%esp)
00000078	movl	%ebx,(%esp)
0000007b	calll	CUtlBuffer::Printf(char const*, ...)
00000080	movl	0xe8(%ebp),%esi
00000083	movl	0x14(%esi),%esi
00000086	testl	%esi,%esi
00000088	je	0x00000816
0000008e	movl	%esi,(%esp)
00000091	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000099	calll	KeyValues::GetDataType(char const*)
0000009e	cmpl	$0x07,%eax
000000a1	ja	0x00000312
000000a7	movl	0xec(%ebp),%ecx
000000aa	movl	0x0000086a(%ecx,%eax,4),%eax
000000b1	addl	%ecx,%eax
000000b3	jmp	*%eax
000000b5	testb	$0x01,0x15(%ebx)
000000b9	jne	0x000000ef
000000bb	movl	%ebx,(%esp)
000000be	movl	$0x00000001,0x04(%esp)
000000c6	calll	CUtlBuffer::CheckPut(int)
000000cb	cmpb	$0x01,%al
000000cd	jne	0x00000312
000000d3	movl	(%ebx),%eax
000000d5	movl	0x10(%ebx),%ecx
000000d8	subl	0x20(%ebx),%ecx
000000db	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%eax,%ecx)
000000df	incl	0x10(%ebx)
000000e2	movl	%ebx,(%esp)
000000e5	calll	CUtlBuffer::AddNullTermination()
000000ea	jmp	0x00000312
000000ef	movl	0xec(%ebp),%eax
000000f2	leal	0xdc28-0xe(%eax),%eax
000000f8	movl	%eax,0x04(%esp)
000000fc	movl	%ebx,(%esp)
000000ff	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000107	jmp	0x0000030d
0000010c	testb	$0x01,0x15(%ebx)
00000110	jne	0x00000138
00000112	movl	%ebx,(%esp)
00000115	movl	$0x00000001,0x04(%esp)
0000011d	calll	CUtlBuffer::CheckPut(int)
00000122	cmpb	$0x01,%al
00000124	jne	0x00000312
0000012a	movl	(%ebx),%eax
0000012c	movl	0x10(%ebx),%ecx
0000012f	subl	0x20(%ebx),%ecx
00000132	movb	$0x01,(%eax,%ecx)
00000136	jmp	0x000000df
00000138	movl	0xec(%ebp),%eax
0000013b	leal	0xdc28-0xe(%eax),%eax
00000141	movl	%eax,0x04(%esp)
00000145	movl	%ebx,(%esp)
00000148	movl	$0x00000001,0x08(%esp)
00000150	jmp	0x0000030d
00000155	testb	$0x01,0x15(%ebx)
00000159	jne	0x00000184
0000015b	movl	%ebx,(%esp)
0000015e	movl	$0x00000001,0x04(%esp)
00000166	calll	CUtlBuffer::CheckPut(int)
0000016b	cmpb	$0x01,%al
0000016d	jne	0x00000312
00000173	movl	(%ebx),%eax
00000175	movl	0x10(%ebx),%ecx
00000178	subl	0x20(%ebx),%ecx
0000017b	movb	$0x05,(%eax,%ecx)
0000017f	jmp	0x000000df
00000184	movl	0xec(%ebp),%eax
00000187	leal	0xdc28-0xe(%eax),%eax
0000018d	movl	%eax,0x04(%esp)
00000191	movl	%ebx,(%esp)
00000194	movl	$0x00000005,0x08(%esp)
0000019c	jmp	0x0000030d
000001a1	testb	$0x01,0x15(%ebx)
000001a5	jne	0x000001d0
000001a7	movl	%ebx,(%esp)
000001aa	movl	$0x00000001,0x04(%esp)
000001b2	calll	CUtlBuffer::CheckPut(int)
000001b7	cmpb	$0x01,%al
000001b9	jne	0x00000312
000001bf	movl	(%ebx),%eax
000001c1	movl	0x10(%ebx),%ecx
000001c4	subl	0x20(%ebx),%ecx
000001c7	movb	$0x02,(%eax,%ecx)
000001cb	jmp	0x000000df
000001d0	movl	0xec(%ebp),%eax
000001d3	leal	0xdc28-0xe(%eax),%eax
000001d9	movl	%eax,0x04(%esp)
000001dd	movl	%ebx,(%esp)
000001e0	movl	$0x00000002,0x08(%esp)
000001e8	jmp	0x0000030d
000001ed	testb	$0x01,0x15(%ebx)
000001f1	jne	0x0000021c
000001f3	movl	%ebx,(%esp)
000001f6	movl	$0x00000001,0x04(%esp)
000001fe	calll	CUtlBuffer::CheckPut(int)
00000203	cmpb	$0x01,%al
00000205	jne	0x00000312
0000020b	movl	(%ebx),%eax
0000020d	movl	0x10(%ebx),%ecx
00000210	subl	0x20(%ebx),%ecx
00000213	movb	$0x07,(%eax,%ecx)
00000217	jmp	0x000000df
0000021c	movl	0xec(%ebp),%eax
0000021f	leal	0xdc28-0xe(%eax),%eax
00000225	movl	%eax,0x04(%esp)
00000229	movl	%ebx,(%esp)
0000022c	movl	$0x00000007,0x08(%esp)
00000234	jmp	0x0000030d
00000239	testb	$0x01,0x15(%ebx)
0000023d	jne	0x00000268
0000023f	movl	%ebx,(%esp)
00000242	movl	$0x00000001,0x04(%esp)
0000024a	calll	CUtlBuffer::CheckPut(int)
0000024f	cmpb	$0x01,%al
00000251	jne	0x00000312
00000257	movl	(%ebx),%eax
00000259	movl	0x10(%ebx),%ecx
0000025c	subl	0x20(%ebx),%ecx
0000025f	movb	$0x03,(%eax,%ecx)
00000263	jmp	0x000000df
00000268	movl	0xec(%ebp),%eax
0000026b	leal	0xdc28-0xe(%eax),%eax
00000271	movl	%eax,0x04(%esp)
00000275	movl	%ebx,(%esp)
00000278	movl	$0x00000003,0x08(%esp)
00000280	jmp	0x0000030d
00000285	testb	$0x01,0x15(%ebx)
00000289	jne	0x000002b0
0000028b	movl	%ebx,(%esp)
0000028e	movl	$0x00000001,0x04(%esp)
00000296	calll	CUtlBuffer::CheckPut(int)
0000029b	cmpb	$0x01,%al
0000029d	jne	0x00000312
0000029f	movl	(%ebx),%eax
000002a1	movl	0x10(%ebx),%ecx
000002a4	subl	0x20(%ebx),%ecx
000002a7	movb	$0x06,(%eax,%ecx)
000002ab	jmp	0x000000df
000002b0	movl	0xec(%ebp),%eax
000002b3	leal	0xdc28-0xe(%eax),%eax
000002b9	movl	%eax,0x04(%esp)
000002bd	movl	%ebx,(%esp)
000002c0	movl	$0x00000006,0x08(%esp)
000002c8	jmp	0x0000030d
000002ca	testb	$0x01,0x15(%ebx)
000002ce	jne	0x000002f5
000002d0	movl	%ebx,(%esp)
000002d3	movl	$0x00000001,0x04(%esp)
000002db	calll	CUtlBuffer::CheckPut(int)
000002e0	cmpb	$0x01,%al
000002e2	jne	0x00000312
000002e4	movl	(%ebx),%eax
000002e6	movl	0x10(%ebx),%ecx
000002e9	subl	0x20(%ebx),%ecx
000002ec	movb	$0x04,(%eax,%ecx)
000002f0	jmp	0x000000df
000002f5	movl	0xec(%ebp),%eax
000002f8	leal	0xdc28-0xe(%eax),%eax
000002fe	movl	%eax,0x04(%esp)
00000302	movl	%ebx,(%esp)
00000305	movl	$0x00000004,0x08(%esp)
0000030d	calll	CUtlBuffer::Printf(char const*, ...)
00000312	movl	%esi,(%esp)
00000315	calll	KeyValues::GetName() const
0000031a	movl	%eax,0x04(%esp)
0000031e	movl	%ebx,(%esp)
00000321	calll	CUtlBuffer::PutString(char const*)
00000326	movl	%esi,(%esp)
00000329	movl	%esi,0xe8(%ebp)
0000032c	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000334	calll	KeyValues::GetDataType(char const*)
00000339	cmpl	$0x07,%eax
0000033c	ja	0x00000080
00000342	movl	0xec(%ebp),%ecx
00000345	movl	0x0000088a(%ecx,%eax,4),%eax
0000034c	addl	%ecx,%eax
0000034e	jmp	*%eax
00000350	movl	0xe8(%ebp),%eax
00000353	movl	0x18(%eax),%eax
00000356	movl	%ebx,0x08(%esp)
0000035a	movl	%eax,0x04(%esp)
0000035e	movl	0x08(%ebp),%eax
00000361	movl	%eax,(%esp)
00000364	calll	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)
00000369	xorb	%cl,%cl
0000036b	testb	%al,%al
0000036d	jne	0x00000080
00000373	jmp	0x0000086d
00000378	movl	0xec(%ebp),%eax
0000037b	leal	0xdc27-0xe(%eax),%esi
00000381	movl	%esi,0x08(%esp)
00000385	movl	0xe8(%ebp),%edi
00000388	movl	%edi,(%esp)
0000038b	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000393	calll	KeyValues::GetString(char const*, char const*)
00000398	testl	%eax,%eax
0000039a	je	0x000003d2
0000039c	movl	%esi,0x08(%esp)
000003a0	movl	%edi,(%esp)
000003a3	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000003ab	calll	KeyValues::GetString(char const*, char const*)
000003b0	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%eax)
000003b3	je	0x000003d2
000003b5	movl	%esi,0x08(%esp)
000003b9	movl	%edi,(%esp)
000003bc	movl	%edi,0xe8(%ebp)
000003bf	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000003c7	calll	KeyValues::GetString(char const*, char const*)
000003cc	movl	%eax,0x04(%esp)
000003d0	jmp	0x000003d9
000003d2	movl	%edi,0xe8(%ebp)
000003d5	movl	%esi,0x04(%esp)
000003d9	movl	%ebx,(%esp)
000003dc	calll	CUtlBuffer::PutString(char const*)
000003e1	jmp	0x00000080
000003e6	movl	0xec(%ebp),%eax
000003e9	leal	0xdc3c-0xe(%eax),%edi
000003ef	movl	%edi,0x08(%esp)
000003f3	movl	0xe8(%ebp),%esi
000003f6	movl	%esi,(%esp)
000003f9	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000401	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xe4(%ebp)
00000408	calll	KeyValues::GetWString(char const*, wchar_t const*)
0000040d	testl	%eax,%eax
0000040f	je	0x00000430
00000411	movl	%edi,0x08(%esp)
00000415	movl	%esi,(%esp)
00000418	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000420	calll	KeyValues::GetWString(char const*, wchar_t const*)
00000425	movl	%eax,(%esp)
00000428	calll	_wcslen
0000042d	movl	%eax,0xe4(%ebp)
00000430	movl	%edi,0xe0(%ebp)
00000433	testb	$0x01,0x15(%ebx)
00000437	jne	0x0000047f
00000439	movl	%ebx,(%esp)
0000043c	movl	$0x00000002,0x04(%esp)
00000444	calll	CUtlBuffer::CheckPut(int)
00000449	cmpb	$0x01,%al
0000044b	jne	0x0000049e
0000044d	movl	0x10(%ebx),%eax
00000450	subl	0x20(%ebx),%eax
00000453	addl	(%ebx),%eax
00000455	testb	$0x01,0x34(%ebx)
00000459	jne	0x00000463
0000045b	movl	0xe4(%ebp),%ecx
0000045e	movw	%cx,(%eax)
00000461	jmp	0x00000471
00000463	testl	%eax,%eax
00000465	je	0x00000471
00000467	movl	0xe4(%ebp),%ecx
0000046a	rolw	$0x08,%cx
0000046e	movw	%cx,(%eax)
00000471	addl	$0x02,0x10(%ebx)
00000475	movl	%ebx,(%esp)
00000478	calll	CUtlBuffer::AddNullTermination()
0000047d	jmp	0x0000049e
0000047f	movl	0xe4(%ebp),%eax
00000482	movswl	%ax,%eax
00000485	movl	%eax,0x08(%esp)
00000489	movl	0xec(%ebp),%eax
0000048c	leal	0xdc33-0xe(%eax),%eax
00000492	movl	%eax,0x04(%esp)
00000496	movl	%ebx,(%esp)
00000499	calll	CUtlBuffer::Printf(char const*, ...)
0000049e	movl	%esi,0xe8(%ebp)
000004a1	xorl	%edi,%edi
000004a3	cmpl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xe4(%ebp)
000004a7	jle	0x00000080
000004ad	jmp	0x000004d6
000004af	nop
000004b0	movswl	%si,%eax
000004b3	movl	%eax,0x08(%esp)
000004b7	movl	0xec(%ebp),%eax
000004ba	leal	0xdc33-0xe(%eax),%eax
000004c0	movl	%eax,0x04(%esp)
000004c4	movl	%ebx,(%esp)
000004c7	calll	CUtlBuffer::Printf(char const*, ...)
000004cc	incl	%edi
000004cd	cmpl	%edi,0xe4(%ebp)
000004d0	je	0x00000080
000004d6	movl	0xe0(%ebp),%eax
000004d9	movl	%eax,0x08(%esp)
000004dd	movl	0xe8(%ebp),%eax
000004e0	movl	%eax,(%esp)
000004e3	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000004eb	calll	KeyValues::GetWString(char const*, wchar_t const*)
000004f0	movzwl	(%eax,%edi,4),%esi
000004f4	testb	$0x01,0x15(%ebx)
000004f8	jne	0x000004b0
000004fa	movl	%ebx,(%esp)
000004fd	movl	$0x00000002,0x04(%esp)
00000505	calll	CUtlBuffer::CheckPut(int)
0000050a	cmpb	$0x01,%al
0000050c	jne	0x000004cc
0000050e	movl	0x10(%ebx),%eax
00000511	subl	0x20(%ebx),%eax
00000514	addl	(%ebx),%eax
00000516	testb	$0x01,0x34(%ebx)
0000051a	je	0x00000524
0000051c	testl	%eax,%eax
0000051e	je	0x00000527
00000520	rolw	$0x08,%si
00000524	movw	%si,(%eax)
00000527	addl	$0x02,0x10(%ebx)
0000052b	movl	%ebx,(%esp)
0000052e	calll	CUtlBuffer::AddNullTermination()
00000533	jmp	0x000004cc
00000535	movl	0xe8(%ebp),%eax
00000538	movl	%eax,(%esp)
0000053b	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000543	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
0000054b	calll	KeyValues::GetInt(char const*, int)
00000550	movl	%eax,%esi
00000552	testb	$0x01,0x15(%ebx)
00000556	jne	0x00000597
00000558	movl	%ebx,(%esp)
0000055b	movl	$0x00000004,0x04(%esp)
00000563	calll	CUtlBuffer::CheckPut(int)
00000568	cmpb	$0x01,%al
0000056a	jne	0x00000080
00000570	movl	0x10(%ebx),%eax
00000573	subl	0x20(%ebx),%eax
00000576	addl	(%ebx),%eax
00000578	testb	$0x01,0x34(%ebx)
0000057c	je	0x00000584
0000057e	testl	%eax,%eax
00000580	je	0x00000586
00000582	bswap	%esi
00000584	movl	%esi,(%eax)
00000586	addl	$0x04,0x10(%ebx)
0000058a	movl	%ebx,(%esp)
0000058d	calll	CUtlBuffer::AddNullTermination()
00000592	jmp	0x00000080
00000597	movl	%esi,0x08(%esp)
0000059b	movl	0xec(%ebp),%eax
0000059e	leal	0xdc33-0xe(%eax),%eax
000005a4	jmp	0x00000074
000005a9	movl	0xe8(%ebp),%eax
000005ac	movl	%eax,(%esp)
000005af	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x0c(%esp)
000005b7	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
000005bf	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000005c7	calll	KeyValues::GetUint64(char const*, unsigned long long)
000005cc	movl	%eax,%edi
000005ce	movl	%edx,%esi
000005d0	testb	$0x01,0x15(%ebx)
000005d4	jne	0x0000061d
000005d6	movl	%ebx,(%esp)
000005d9	movl	$0x00000008,0x04(%esp)
000005e1	calll	CUtlBuffer::CheckPut(int)
000005e6	cmpb	$0x01,%al
000005e8	jne	0x00000080
000005ee	movl	0x10(%ebx),%eax
000005f1	subl	0x20(%ebx),%eax
000005f4	addl	(%ebx),%eax
000005f6	testb	$0x01,0x34(%ebx)
000005fa	jne	0x00000607
000005fc	movl	%edi,(%eax)
000005fe	movl	%esi,0x04(%eax)
00000601	addl	$0x08,0x10(%ebx)
00000605	jmp	0x0000058a
00000607	testl	%eax,%eax
00000609	je	0x00000614
0000060b	bswap	%edi
0000060d	movl	%edi,0x04(%eax)
00000610	bswap	%esi
00000612	movl	%esi,(%eax)
00000614	addl	$0x08,0x10(%ebx)
00000618	jmp	0x0000058a
0000061d	movl	%esi,0x0c(%esp)
00000621	movl	%edi,0x08(%esp)
00000625	movl	0xec(%ebp),%eax
00000628	leal	0xdc36-0xe(%eax),%eax
0000062e	jmp	0x00000074
00000633	movl	0xe8(%ebp),%eax
00000636	movl	%eax,(%esp)
00000639	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000641	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000649	calll	KeyValues::GetFloat(char const*, float)
0000064e	fstps	0xf0(%ebp)
00000651	movss	0xf0(%ebp),%xmm0
00000656	testb	$0x01,0x15(%ebx)
0000065a	jne	0x000006a7
0000065c	movl	%ebx,(%esp)
0000065f	movl	$0x00000004,0x04(%esp)
00000667	movss	%xmm0,0xe4(%ebp)
0000066c	calll	CUtlBuffer::CheckPut(int)
00000671	movss	0xe4(%ebp),%xmm0
00000676	testb	%al,%al
00000678	je	0x00000080
0000067e	movl	0x10(%ebx),%eax
00000681	subl	0x20(%ebx),%eax
00000684	addl	(%ebx),%eax
00000686	testb	$0x01,0x34(%ebx)
0000068a	je	0x0000069e
0000068c	testl	%eax,%eax
0000068e	je	0x00000586
00000694	movd	%xmm0,%ecx
00000698	bswap	%ecx
0000069a	movd	%ecx,%xmm0
0000069e	movss	%xmm0,(%eax)
000006a2	jmp	0x00000586
000006a7	cvtss2sd	%xmm0,%xmm0
000006ab	movsd	%xmm0,0x08(%esp)
000006b1	movl	0xec(%ebp),%eax
000006b4	leal	0xdc2b-0xe(%eax),%eax
000006ba	jmp	0x00000074
000006bf	movl	0xe8(%ebp),%eax
000006c2	movl	%eax,(%esp)
000006c5	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000006cd	calll	KeyValues::GetColor(char const*)
000006d2	movl	%eax,%ecx
000006d4	testb	$0x01,0x15(%ebx)
000006d8	jne	0x0000070c
000006da	movl	%ebx,(%esp)
000006dd	movl	$0x00000001,0x04(%esp)
000006e5	movl	%ecx,%esi
000006e7	calll	CUtlBuffer::CheckPut(int)
000006ec	cmpb	$0x01,%al
000006ee	jne	0x0000072a
000006f0	movl	(%ebx),%eax
000006f2	movl	0x10(%ebx),%ecx
000006f5	subl	0x20(%ebx),%ecx
000006f8	movl	%esi,%edx
000006fa	movb	%dl,(%eax,%ecx)
000006fd	movl	%edx,%esi
000006ff	incl	0x10(%ebx)
00000702	movl	%ebx,(%esp)
00000705	calll	CUtlBuffer::AddNullTermination()
0000070a	jmp	0x0000072a
0000070c	movl	0xec(%ebp),%eax
0000070f	leal	0xdc28-0xe(%eax),%eax
00000715	movl	%eax,0x04(%esp)
00000719	movl	%ebx,(%esp)
0000071c	movzbl	%cl,%eax
0000071f	movl	%eax,0x08(%esp)
00000723	movl	%ecx,%esi
00000725	calll	CUtlBuffer::Printf(char const*, ...)
0000072a	movl	%esi,%ecx
0000072c	movl	%esi,%edi
0000072e	shrl	$0x08,%ecx
00000731	testb	$0x01,0x15(%ebx)
00000735	jne	0x00000767
00000737	movl	%ecx,%esi
00000739	movl	%ebx,(%esp)
0000073c	movl	$0x00000001,0x04(%esp)
00000744	calll	CUtlBuffer::CheckPut(int)
00000749	cmpb	$0x01,%al
0000074b	jne	0x00000783
0000074d	movl	(%ebx),%eax
0000074f	movl	0x10(%ebx),%ecx
00000752	subl	0x20(%ebx),%ecx
00000755	movl	%esi,%edx
00000757	movb	%dl,(%eax,%ecx)
0000075a	incl	0x10(%ebx)
0000075d	movl	%ebx,(%esp)
00000760	calll	CUtlBuffer::AddNullTermination()
00000765	jmp	0x00000783
00000767	movl	0xec(%ebp),%eax
0000076a	leal	0xdc28-0xe(%eax),%eax
00000770	movl	%eax,0x04(%esp)
00000774	movl	%ebx,(%esp)
00000777	movzbl	%cl,%eax
0000077a	movl	%eax,0x08(%esp)
0000077e	calll	CUtlBuffer::Printf(char const*, ...)
00000783	movl	%edi,%ecx
00000785	movl	%edi,%esi
00000787	shrl	$0x10,%ecx
0000078a	testb	$0x01,0x15(%ebx)
0000078e	jne	0x000007c0
00000790	movl	%ecx,%edi
00000792	movl	%ebx,(%esp)
00000795	movl	$0x00000001,0x04(%esp)
0000079d	calll	CUtlBuffer::CheckPut(int)
000007a2	cmpb	$0x01,%al
000007a4	jne	0x000007dc
000007a6	movl	(%ebx),%eax
000007a8	movl	0x10(%ebx),%ecx
000007ab	subl	0x20(%ebx),%ecx
000007ae	movl	%edi,%edx
000007b0	movb	%dl,(%eax,%ecx)
000007b3	incl	0x10(%ebx)
000007b6	movl	%ebx,(%esp)
000007b9	calll	CUtlBuffer::AddNullTermination()
000007be	jmp	0x000007dc
000007c0	movl	0xec(%ebp),%eax
000007c3	leal	0xdc28-0xe(%eax),%eax
000007c9	movl	%eax,0x04(%esp)
000007cd	movl	%ebx,(%esp)
000007d0	movzbl	%cl,%eax
000007d3	movl	%eax,0x08(%esp)
000007d7	calll	CUtlBuffer::Printf(char const*, ...)
000007dc	shrl	$0x18,%esi
000007df	testb	$0x01,0x15(%ebx)
000007e3	jne	0x00000067
000007e9	movl	%ebx,(%esp)
000007ec	movl	$0x00000001,0x04(%esp)
000007f4	calll	CUtlBuffer::CheckPut(int)
000007f9	cmpb	$0x01,%al
000007fb	jne	0x00000080
00000801	movl	(%ebx),%eax
00000803	movl	0x10(%ebx),%ecx
00000806	subl	0x20(%ebx),%ecx
00000809	movl	%esi,%edx
0000080b	movb	%dl,(%eax,%ecx)
0000080e	incl	0x10(%ebx)
00000811	jmp	0x0000058a
00000816	testb	$0x01,0x15(%ebx)
0000081a	jne	0x00000849
0000081c	movl	%ebx,(%esp)
0000081f	movl	$0x00000001,0x04(%esp)
00000827	calll	CUtlBuffer::CheckPut(int)
0000082c	cmpb	$0x01,%al
0000082e	jne	0x00000866
00000830	movl	(%ebx),%eax
00000832	movl	0x10(%ebx),%ecx
00000835	subl	0x20(%ebx),%ecx
00000838	movb	$0x08,(%eax,%ecx)
0000083c	incl	0x10(%ebx)
0000083f	movl	%ebx,(%esp)
00000842	calll	CUtlBuffer::AddNullTermination()
00000847	jmp	0x00000866
00000849	movl	0xec(%ebp),%eax
0000084c	leal	0xdc28-0xe(%eax),%eax
00000852	movl	%eax,0x04(%esp)
00000856	movl	%ebx,(%esp)
00000859	movl	$0x00000008,0x08(%esp)
00000861	calll	CUtlBuffer::Printf(char const*, ...)
00000866	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%ebx)
0000086a	sete	%cl
0000086d	movzbl	%cl,%eax
00000870	addl	$0x2c,%esp
00000873	popl	%esi
00000874	popl	%edi
00000875	popl	%ebx
00000876	popl	%ebp
00000877	ret
00000878	cmpsl	(%esi),(%edi)
00000879	addb	%al,(%eax)
0000087b	addb	%bh,%dh
0000087d	addb	%al,(%eax)
0000087f	addb	%dl,0x2b000001(%ebx)
00000885	addb	(%eax),%al
00000887	addb	%bh,0x01470000(%edx,%eax)
0000088e	addb	%al,(%eax)
00000890	ja	0x00000894
00000892	addb	%al,(%eax)
00000894	filds	(%ecx)
00000896	addb	%al,(%eax)
00000898	incl	%edx
00000899	addl	(%eax),%eax
0000089b	addb	%ch,0x03(%edx)
0000089e	addb	%al,(%eax)
000008a0	daa
000008a1	addl	$0x06250000,%eax
000008a6	addb	%al,(%eax)
000008a8	xorb	(%eax),%al
000008aa	addb	%al,(%eax)
000008ac	fadds	(%ebx)
000008ae	addb	%al,(%eax)
000008b0	movb	$0x06,%cl
000008b2	addb	%al,(%eax)
000008b4	wait/addl	$0x1f0f0000,%eax
000008ba	testb	(%eax),%al
000008bc	addb	%al,(%eax)
000008be	addb	%al,(%eax)
KVPacker::ReadAsBinary(KeyValues*, CUtlBuffer&):
000008c0	pushl	%ebp
000008c1	movl	%esp,%ebp
000008c3	pushl	%ebx
000008c4	pushl	%edi
000008c5	pushl	%esi
000008c6	subl	$0x0000044c,%esp
000008cc	calll	0x000008d1
000008d1	popl	%eax
000008d2	movl	%eax,0xfffffbc4(%ebp)
000008d8	movl	0xf9aa-0x8d1(%eax),%eax
000008de	movl	%eax,0xfffffbb0(%ebp)
000008e4	movl	(%eax),%eax
000008e6	movl	%eax,0xf0(%ebp)
000008e9	xorb	%cl,%cl
000008eb	movl	0x10(%ebp),%esi
000008ee	testb	$0x01,0x15(%esi)
000008f2	jne	0x0000127c
000008f8	xorb	%cl,%cl
000008fa	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
000008fe	jne	0x0000127c
00000904	movl	0x0c(%ebp),%eax
00000907	movl	%eax,0xfffffbbc(%ebp)
0000090d	subl	$0x10,%esp
00000910	movl	%eax,(%esp)
00000913	calll	KeyValues::Clear()
00000918	addl	$0x10,%esp
0000091b	testb	$0x01,0x15(%esi)
0000091f	jne	0x0000095f
00000921	subl	$0x10,%esp
00000924	movl	%esi,(%esp)
00000927	movl	$0x00000001,0x04(%esp)
0000092f	calll	CUtlBuffer::CheckGet(int)
00000934	addl	$0x10,%esp
00000937	cmpb	$0x01,%al
00000939	jne	0x00000954
0000093b	movl	(%esi),%ecx
0000093d	movl	0x0c(%esi),%eax
00000940	movl	%eax,%edx
00000942	subl	0x20(%esi),%edx
00000945	movb	(%ecx,%edx),%bl
00000948	movb	%bl,0xfffffbcf(%ebp)
0000094e	incl	%eax
0000094f	movl	%eax,0x0c(%esi)
00000952	jmp	0x000009a0
00000954	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbcf(%ebp)
0000095b	xorb	%bl,%bl
0000095d	jmp	0x000009a0
0000095f	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbcf(%ebp)
00000966	subl	$0x10,%esp
00000969	leal	0xfffffbcf(%ebp),%eax
0000096f	movl	%eax,0x08(%esp)
00000973	movl	0xfffffbc4(%ebp),%eax
00000979	leal	0xdc28-0x8d1(%eax),%eax
0000097f	movl	%eax,0x04(%esp)
00000983	movl	%esi,(%esp)
00000986	calll	CUtlBuffer::Scanf(char const*, ...)
0000098b	addl	$0x10,%esp
0000098e	movb	0xfffffbcf(%ebp),%bl
00000994	nopw	%cs:KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)(%eax,%eax)
000009a0	cmpb	$0x08,%bl
000009a3	je	0x00001275
000009a9	subl	$0x10,%esp
000009ac	leal	0xfffffbf0(%ebp),%edi
000009b2	movl	%edi,0x04(%esp)
000009b6	movl	%esi,(%esp)
000009b9	movl	$0x000003ff,0x08(%esp)
000009c1	calll	CUtlBuffer::GetString(char*, int)
000009c6	addl	$0x10,%esp
000009c9	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xef(%ebp)
000009cd	subl	$0x10,%esp
000009d0	movl	%edi,0x04(%esp)
000009d4	movl	0xfffffbbc(%ebp),%eax
000009da	movl	%eax,(%esp)
000009dd	calll	KeyValues::SetName(char const*)
000009e2	addl	$0x10,%esp
000009e5	cmpb	$0x07,%bl
000009e8	ja	0x00001180
000009ee	movzbl	%bl,%eax
000009f1	movl	0xfffffbc4(%ebp),%ecx
000009f7	movl	0x000009eb(%ecx,%eax,4),%eax
000009fe	addl	%ecx,%eax
00000a00	jmp	*%eax
00000a02	movl	%esi,%edi
00000a04	subl	$0x10,%esp
00000a07	movl	$0x00000020,(%esp)
00000a0e	calll	KeyValues::operator new(unsigned long)
00000a13	addl	$0x10,%esp
00000a16	movl	%eax,%esi
00000a18	subl	$0x10,%esp
00000a1b	movl	0xfffffbc4(%ebp),%eax
00000a21	leal	0xdc27-0x8d1(%eax),%eax
00000a27	movl	%eax,0x04(%esp)
00000a2b	movl	%esi,(%esp)
00000a2e	calll	KeyValues::KeyValues(char const*)
00000a33	addl	$0x10,%esp
00000a36	subl	$0x10,%esp
00000a39	movl	%esi,0x04(%esp)
00000a3d	movl	0xfffffbbc(%ebp),%eax
00000a43	movl	%eax,(%esp)
00000a46	calll	KeyValues::AddSubKey(KeyValues*)
00000a4b	addl	$0x10,%esp
00000a4e	subl	$0x10,%esp
00000a51	movl	%edi,0x08(%esp)
00000a55	movl	%esi,0x04(%esp)
00000a59	movl	%edi,%esi
00000a5b	movl	0x08(%ebp),%eax
00000a5e	movl	%eax,(%esp)
00000a61	calll	KVPacker::ReadAsBinary(KeyValues*, CUtlBuffer&)
00000a66	addl	$0x10,%esp
00000a69	xorb	%cl,%cl
00000a6b	testb	%al,%al
00000a6d	jne	0x00001180
00000a73	jmp	0x0000127c
00000a78	subl	$0x10,%esp
00000a7b	leal	0xfffffbf0(%ebp),%edi
00000a81	movl	%edi,0x04(%esp)
00000a85	movl	%esi,(%esp)
00000a88	movl	$0x000003ff,0x08(%esp)
00000a90	calll	CUtlBuffer::GetString(char*, int)
00000a95	addl	$0x10,%esp
00000a98	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xef(%ebp)
00000a9c	subl	$0x10,%esp
00000a9f	movl	%edi,0x04(%esp)
00000aa3	movl	0xfffffbbc(%ebp),%eax
00000aa9	movl	%eax,(%esp)
00000aac	calll	KeyValues::SetStringValue(char const*)
00000ab1	jmp	0x0000117d
00000ab6	testb	$0x01,0x15(%esi)
00000aba	jne	0x00000b22
00000abc	subl	$0x10,%esp
00000abf	movl	%esi,(%esp)
00000ac2	movl	$0x00000002,0x04(%esp)
00000aca	calll	CUtlBuffer::CheckGet(int)
00000acf	addl	$0x10,%esp
00000ad2	cmpb	$0x01,%al
00000ad4	jne	0x00000b15
00000ad6	movl	0x0c(%esi),%eax
00000ad9	movl	%eax,%ecx
00000adb	subl	0x20(%esi),%ecx
00000ade	addl	(%esi),%ecx
00000ae0	testb	$0x01,0x34(%esi)
00000ae4	jne	0x00000aeb
00000ae6	movzwl	(%ecx),%ecx
00000ae9	jmp	0x00000b06
00000aeb	movl	%esi,%edi
00000aed	leal	0xfffffbd0(%ebp),%esi
00000af3	testl	%ecx,%ecx
00000af5	cmovnel	%ecx,%esi
00000af8	movzbl	0x01(%esi),%edx
00000afc	movzbl	(%esi),%ecx
00000aff	movl	%edi,%esi
00000b01	shll	$0x08,%ecx
00000b04	orl	%edx,%ecx
00000b06	movw	%cx,0xfffffbd0(%ebp)
00000b0d	addl	$0x02,%eax
00000b10	movl	%eax,0x0c(%esi)
00000b13	jmp	0x00000b5a
00000b15	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd0(%ebp)
00000b1e	xorl	%ecx,%ecx
00000b20	jmp	0x00000b5a
00000b22	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd0(%ebp)
00000b2b	subl	$0x10,%esp
00000b2e	leal	0xfffffbd0(%ebp),%eax
00000b34	movl	%eax,0x08(%esp)
00000b38	movl	0xfffffbc4(%ebp),%eax
00000b3e	leal	0xdc33-0x8d1(%eax),%eax
00000b44	movl	%eax,0x04(%esp)
00000b48	movl	%esi,(%esp)
00000b4b	calll	CUtlBuffer::Scanf(char const*, ...)
00000b50	addl	$0x10,%esp
00000b53	movzwl	0xfffffbd0(%ebp),%ecx
00000b5a	movswl	%cx,%ecx
00000b5d	movl	%ecx,0xfffffbb8(%ebp)
00000b63	leal	0x00000013(,%ecx,4),%eax
00000b6a	andl	$0xf0,%eax
00000b6d	movl	%esp,%edx
00000b6f	subl	%eax,%edx
00000b71	movl	%edx,0xfffffbb4(%ebp)
00000b77	movl	%edx,%esp
00000b79	testw	%cx,%cx
00000b7c	jle	0x00000c4b
00000b82	movl	0xfffffbb8(%ebp),%eax
00000b88	movl	0xfffffbb4(%ebp),%ebx
00000b8e	nop
00000b90	movl	%eax,0xfffffbc0(%ebp)
00000b96	testb	$0x01,0x15(%esi)
00000b9a	jne	0x00000bfe
00000b9c	subl	$0x10,%esp
00000b9f	movl	%esi,(%esp)
00000ba2	movl	$0x00000002,0x04(%esp)
00000baa	calll	CUtlBuffer::CheckGet(int)
00000baf	addl	$0x10,%esp
00000bb2	cmpb	$0x01,%al
00000bb4	jne	0x00000bf1
00000bb6	movl	0x0c(%esi),%eax
00000bb9	movl	%eax,%ecx
00000bbb	subl	0x20(%esi),%ecx
00000bbe	addl	(%esi),%ecx
00000bc0	testb	$0x01,0x34(%esi)
00000bc4	jne	0x00000bcb
00000bc6	movzwl	(%ecx),%ecx
00000bc9	jmp	0x00000be2
00000bcb	leal	0xfffffbd2(%ebp),%edi
00000bd1	testl	%ecx,%ecx
00000bd3	cmovnel	%ecx,%edi
00000bd6	movzbl	0x01(%edi),%edx
00000bda	movzbl	(%edi),%ecx
00000bdd	shll	$0x08,%ecx
00000be0	orl	%edx,%ecx
00000be2	movw	%cx,0xfffffbd2(%ebp)
00000be9	addl	$0x02,%eax
00000bec	movl	%eax,0x0c(%esi)
00000bef	jmp	0x00000c36
00000bf1	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd2(%ebp)
00000bfa	xorl	%ecx,%ecx
00000bfc	jmp	0x00000c36
00000bfe	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd2(%ebp)
00000c07	subl	$0x10,%esp
00000c0a	leal	0xfffffbd2(%ebp),%eax
00000c10	movl	%eax,0x08(%esp)
00000c14	movl	0xfffffbc4(%ebp),%eax
00000c1a	leal	0xdc33-0x8d1(%eax),%eax
00000c20	movl	%eax,0x04(%esp)
00000c24	movl	%esi,(%esp)
00000c27	calll	CUtlBuffer::Scanf(char const*, ...)
00000c2c	addl	$0x10,%esp
00000c2f	movzwl	0xfffffbd2(%ebp),%ecx
00000c36	movswl	%cx,%eax
00000c39	movl	%eax,(%ebx)
00000c3b	addl	$0x04,%ebx
00000c3e	movl	0xfffffbc0(%ebp),%eax
00000c44	decl	%eax
00000c45	jne	0x00000b90
00000c4b	movl	0xfffffbb8(%ebp),%eax
00000c51	movl	0xfffffbb4(%ebp),%ecx
00000c57	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%ecx,%eax,4)
00000c5e	subl	$0x10,%esp
00000c61	movl	%ecx,0x08(%esp)
00000c65	movl	0xfffffbbc(%ebp),%eax
00000c6b	movl	%eax,(%esp)
00000c6e	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000c76	calll	KeyValues::SetWString(char const*, wchar_t const*)
00000c7b	jmp	0x0000117d
00000c80	testb	$0x01,0x15(%esi)
00000c84	jne	0x00000cfd
00000c86	subl	$0x10,%esp
00000c89	movl	%esi,(%esp)
00000c8c	movl	$0x00000004,0x04(%esp)
00000c94	calll	CUtlBuffer::CheckGet(int)
00000c99	addl	$0x10,%esp
00000c9c	cmpb	$0x01,%al
00000c9e	jne	0x00000cef
00000ca0	movl	0x0c(%esi),%eax
00000ca3	movl	%eax,%edx
00000ca5	subl	0x20(%esi),%edx
00000ca8	addl	(%esi),%edx
00000caa	testb	$0x01,0x34(%esi)
00000cae	jne	0x00000cb4
00000cb0	movl	(%edx),%ecx
00000cb2	jmp	0x00000ce1
00000cb4	leal	0xfffffbd4(%ebp),%ecx
00000cba	testl	%edx,%edx
00000cbc	cmovnel	%edx,%ecx
00000cbf	movzbl	0x03(%ecx),%edx
00000cc3	movl	%esi,%edi
00000cc5	movzbl	0x02(%ecx),%esi
00000cc9	shll	$0x08,%esi
00000ccc	orl	%edx,%esi
00000cce	movzbl	0x01(%ecx),%edx
00000cd2	shll	$0x10,%edx
00000cd5	orl	%esi,%edx
00000cd7	movl	%edi,%esi
00000cd9	movzbl	(%ecx),%ecx
00000cdc	shll	$0x18,%ecx
00000cdf	orl	%edx,%ecx
00000ce1	movl	%ecx,0xfffffbd4(%ebp)
00000ce7	addl	$0x04,%eax
00000cea	movl	%eax,0x0c(%esi)
00000ced	jmp	0x00000d35
00000cef	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd4(%ebp)
00000cf9	xorl	%ecx,%ecx
00000cfb	jmp	0x00000d35
00000cfd	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd4(%ebp)
00000d07	subl	$0x10,%esp
00000d0a	leal	0xfffffbd4(%ebp),%eax
00000d10	movl	%eax,0x08(%esp)
00000d14	movl	0xfffffbc4(%ebp),%eax
00000d1a	leal	0xdc33-0x8d1(%eax),%eax
00000d20	movl	%eax,0x04(%esp)
00000d24	movl	%esi,(%esp)
00000d27	calll	CUtlBuffer::Scanf(char const*, ...)
00000d2c	addl	$0x10,%esp
00000d2f	movl	0xfffffbd4(%ebp),%ecx
00000d35	subl	$0x10,%esp
00000d38	movl	%ecx,0x08(%esp)
00000d3c	movl	0xfffffbbc(%ebp),%eax
00000d42	movl	%eax,(%esp)
00000d45	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000d4d	calll	KeyValues::SetInt(char const*, int)
00000d52	jmp	0x0000117d
00000d57	subl	$0x10,%esp
00000d5a	movl	0xfffffbc4(%ebp),%eax
00000d60	leal	0xdc2e-0x8d1(%eax),%eax
00000d66	movl	%eax,0x08(%esp)
00000d6a	leal	0xfffffbd8(%ebp),%eax
00000d70	movl	%eax,0x04(%esp)
00000d74	movl	%esi,(%esp)
00000d77	calll	void CUtlBuffer::GetType<long long>(long long&, char const*)
00000d7c	addl	$0x10,%esp
00000d7f	movl	0xfffffbd8(%ebp),%eax
00000d85	movl	0xfffffbdc(%ebp),%ecx
00000d8b	subl	$0x10,%esp
00000d8e	movl	%ecx,0x0c(%esp)
00000d92	movl	%eax,0x08(%esp)
00000d96	movl	0xfffffbbc(%ebp),%eax
00000d9c	movl	%eax,(%esp)
00000d9f	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000da7	calll	KeyValues::SetUint64(char const*, unsigned long long)
00000dac	jmp	0x0000117d
00000db1	testb	$0x01,0x15(%esi)
00000db5	jne	0x00000e16
00000db7	subl	$0x10,%esp
00000dba	movl	%esi,(%esp)
00000dbd	movl	$0x00000004,0x04(%esp)
00000dc5	calll	CUtlBuffer::CheckGet(int)
00000dca	addl	$0x10,%esp
00000dcd	cmpb	$0x01,%al
00000dcf	jne	0x00000e06
00000dd1	movl	(%esi),%ecx
00000dd3	movl	0x0c(%esi),%eax
00000dd6	movl	%eax,%edx
00000dd8	subl	0x20(%esi),%edx
00000ddb	movss	(%ecx,%edx),%xmm0
00000de0	movss	%xmm0,0xfffffbe4(%ebp)
00000de8	testb	$0x01,0x34(%esi)
00000dec	je	0x00000dfe
00000dee	movd	%xmm0,%ecx
00000df2	bswap	%ecx
00000df4	movl	%ecx,0xfffffbe4(%ebp)
00000dfa	movd	%ecx,%xmm0
00000dfe	addl	$0x04,%eax
00000e01	movl	%eax,0x0c(%esi)
00000e04	jmp	0x00000e50
00000e06	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe4(%ebp)
00000e10	pxor	%xmm0,%xmm0
00000e14	jmp	0x00000e50
00000e16	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe4(%ebp)
00000e20	subl	$0x10,%esp
00000e23	leal	0xfffffbe4(%ebp),%eax
00000e29	movl	%eax,0x08(%esp)
00000e2d	movl	0xfffffbc4(%ebp),%eax
00000e33	leal	0xdc2b-0x8d1(%eax),%eax
00000e39	movl	%eax,0x04(%esp)
00000e3d	movl	%esi,(%esp)
00000e40	calll	CUtlBuffer::Scanf(char const*, ...)
00000e45	addl	$0x10,%esp
00000e48	movss	0xfffffbe4(%ebp),%xmm0
00000e50	subl	$0x10,%esp
00000e53	movss	%xmm0,0x08(%esp)
00000e59	movl	0xfffffbbc(%ebp),%eax
00000e5f	movl	%eax,(%esp)
00000e62	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000e6a	calll	KeyValues::SetFloat(char const*, float)
00000e6f	jmp	0x0000117d
00000e74	testb	$0x01,0x15(%esi)
00000e78	jne	0x00000eb8
00000e7a	subl	$0x10,%esp
00000e7d	movl	%esi,(%esp)
00000e80	movl	$0x00000001,0x04(%esp)
00000e88	calll	CUtlBuffer::CheckGet(int)
00000e8d	addl	$0x10,%esp
00000e90	cmpb	$0x01,%al
00000e92	jne	0x00000ead
00000e94	movl	(%esi),%ecx
00000e96	movl	0x0c(%esi),%eax
00000e99	movl	%eax,%edx
00000e9b	subl	0x20(%esi),%edx
00000e9e	movb	(%ecx,%edx),%cl
00000ea1	movb	%cl,0xfffffbe8(%ebp)
00000ea7	incl	%eax
00000ea8	movl	%eax,0x0c(%esi)
00000eab	jmp	0x00000eed
00000ead	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe8(%ebp)
00000eb4	xorb	%cl,%cl
00000eb6	jmp	0x00000eed
00000eb8	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe8(%ebp)
00000ebf	subl	$0x10,%esp
00000ec2	leal	0xfffffbe8(%ebp),%eax
00000ec8	movl	%eax,0x08(%esp)
00000ecc	movl	0xfffffbc4(%ebp),%eax
00000ed2	leal	0xdc28-0x8d1(%eax),%eax
00000ed8	movl	%eax,0x04(%esp)
00000edc	movl	%esi,(%esp)
00000edf	calll	CUtlBuffer::Scanf(char const*, ...)
00000ee4	addl	$0x10,%esp
00000ee7	movb	0xfffffbe8(%ebp),%cl
00000eed	movb	%cl,0xfffffbc0(%ebp)
00000ef3	testb	$0x01,0x15(%esi)
00000ef7	jne	0x00000f37
00000ef9	subl	$0x10,%esp
00000efc	movl	%esi,(%esp)
00000eff	movl	$0x00000001,0x04(%esp)
00000f07	calll	CUtlBuffer::CheckGet(int)
00000f0c	addl	$0x10,%esp
00000f0f	cmpb	$0x01,%al
00000f11	jne	0x00000f2c
00000f13	movl	(%esi),%ecx
00000f15	movl	0x0c(%esi),%eax
00000f18	movl	%eax,%edx
00000f1a	subl	0x20(%esi),%edx
00000f1d	movb	(%ecx,%edx),%bh
00000f20	movb	%bh,0xfffffbe9(%ebp)
00000f26	incl	%eax
00000f27	movl	%eax,0x0c(%esi)
00000f2a	jmp	0x00000f6c
00000f2c	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe9(%ebp)
00000f33	xorb	%bh,%bh
00000f35	jmp	0x00000f6c
00000f37	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe9(%ebp)
00000f3e	subl	$0x10,%esp
00000f41	leal	0xfffffbe9(%ebp),%eax
00000f47	movl	%eax,0x08(%esp)
00000f4b	movl	0xfffffbc4(%ebp),%eax
00000f51	leal	0xdc28-0x8d1(%eax),%eax
00000f57	movl	%eax,0x04(%esp)
00000f5b	movl	%esi,(%esp)
00000f5e	calll	CUtlBuffer::Scanf(char const*, ...)
00000f63	addl	$0x10,%esp
00000f66	movb	0xfffffbe9(%ebp),%bh
00000f6c	testb	$0x01,0x15(%esi)
00000f70	jne	0x00000fb0
00000f72	subl	$0x10,%esp
00000f75	movl	%esi,(%esp)
00000f78	movl	$0x00000001,0x04(%esp)
00000f80	calll	CUtlBuffer::CheckGet(int)
00000f85	addl	$0x10,%esp
00000f88	cmpb	$0x01,%al
00000f8a	jne	0x00000fa5
00000f8c	movl	(%esi),%ecx
00000f8e	movl	0x0c(%esi),%eax
00000f91	movl	%eax,%edx
00000f93	subl	0x20(%esi),%edx
00000f96	movb	(%ecx,%edx),%bl
00000f99	movb	%bl,0xfffffbea(%ebp)
00000f9f	incl	%eax
00000fa0	movl	%eax,0x0c(%esi)
00000fa3	jmp	0x00000fe5
00000fa5	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbea(%ebp)
00000fac	xorb	%bl,%bl
00000fae	jmp	0x00000fe5
00000fb0	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbea(%ebp)
00000fb7	subl	$0x10,%esp
00000fba	leal	0xfffffbea(%ebp),%eax
00000fc0	movl	%eax,0x08(%esp)
00000fc4	movl	0xfffffbc4(%ebp),%eax
00000fca	leal	0xdc28-0x8d1(%eax),%eax
00000fd0	movl	%eax,0x04(%esp)
00000fd4	movl	%esi,(%esp)
00000fd7	calll	CUtlBuffer::Scanf(char const*, ...)
00000fdc	addl	$0x10,%esp
00000fdf	movb	0xfffffbea(%ebp),%bl
00000fe5	testb	$0x01,0x15(%esi)
00000fe9	jne	0x00001029
00000feb	subl	$0x10,%esp
00000fee	movl	%esi,(%esp)
00000ff1	movl	$0x00000001,0x04(%esp)
00000ff9	calll	CUtlBuffer::CheckGet(int)
00000ffe	addl	$0x10,%esp
00001001	cmpb	$0x01,%al
00001003	jne	0x0000101e
00001005	movl	(%esi),%eax
00001007	movl	0x0c(%esi),%ecx
0000100a	movl	%ecx,%edx
0000100c	subl	0x20(%esi),%edx
0000100f	movb	(%eax,%edx),%al
00001012	movb	%al,0xfffffbeb(%ebp)
00001018	incl	%ecx
00001019	movl	%ecx,0x0c(%esi)
0000101c	jmp	0x0000105e
0000101e	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbeb(%ebp)
00001025	xorb	%al,%al
00001027	jmp	0x0000105e
00001029	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbeb(%ebp)
00001030	subl	$0x10,%esp
00001033	leal	0xfffffbeb(%ebp),%eax
00001039	movl	%eax,0x08(%esp)
0000103d	movl	0xfffffbc4(%ebp),%eax
00001043	leal	0xdc28-0x8d1(%eax),%eax
00001049	movl	%eax,0x04(%esp)
0000104d	movl	%esi,(%esp)
00001050	calll	CUtlBuffer::Scanf(char const*, ...)
00001055	addl	$0x10,%esp
00001058	movb	0xfffffbeb(%ebp),%al
0000105e	movzbl	0xfffffbc0(%ebp),%ecx
00001065	movzbl	%bh,%edx
00001068	shll	$0x08,%edx
0000106b	orl	%ecx,%edx
0000106d	movzbl	%bl,%ecx
00001070	shll	$0x10,%ecx
00001073	orl	%edx,%ecx
00001075	movzbl	%al,%eax
00001078	shll	$0x18,%eax
0000107b	orl	%ecx,%eax
0000107d	movl	%eax,0xfffffbc8(%ebp)
00001083	subl	$0x10,%esp
00001086	movl	0xfffffbc8(%ebp),%eax
0000108c	movl	%eax,0x08(%esp)
00001090	movl	0xfffffbbc(%ebp),%eax
00001096	movl	%eax,(%esp)
00001099	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000010a1	calll	KeyValues::SetColor(char const*, Color)
000010a6	jmp	0x0000117d
000010ab	testb	$0x01,0x15(%esi)
000010af	jne	0x00001128
000010b1	subl	$0x10,%esp
000010b4	movl	%esi,(%esp)
000010b7	movl	$0x00000004,0x04(%esp)
000010bf	calll	CUtlBuffer::CheckGet(int)
000010c4	addl	$0x10,%esp
000010c7	cmpb	$0x01,%al
000010c9	jne	0x0000111a
000010cb	movl	0x0c(%esi),%eax
000010ce	movl	%eax,%edx
000010d0	subl	0x20(%esi),%edx
000010d3	addl	(%esi),%edx
000010d5	testb	$0x01,0x34(%esi)
000010d9	jne	0x000010df
000010db	movl	(%edx),%ecx
000010dd	jmp	0x0000110c
000010df	leal	0xfffffbec(%ebp),%ecx
000010e5	testl	%edx,%edx
000010e7	cmovnel	%edx,%ecx
000010ea	movzbl	0x03(%ecx),%edx
000010ee	movl	%esi,%edi
000010f0	movzbl	0x02(%ecx),%esi
000010f4	shll	$0x08,%esi
000010f7	orl	%edx,%esi
000010f9	movzbl	0x01(%ecx),%edx
000010fd	shll	$0x10,%edx
00001100	orl	%esi,%edx
00001102	movl	%edi,%esi
00001104	movzbl	(%ecx),%ecx
00001107	shll	$0x18,%ecx
0000110a	orl	%edx,%ecx
0000110c	movl	%ecx,0xfffffbec(%ebp)
00001112	addl	$0x04,%eax
00001115	movl	%eax,0x0c(%esi)
00001118	jmp	0x00001160
0000111a	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbec(%ebp)
00001124	xorl	%ecx,%ecx
00001126	jmp	0x00001160
00001128	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbec(%ebp)
00001132	subl	$0x10,%esp
00001135	leal	0xfffffbec(%ebp),%eax
0000113b	movl	%eax,0x08(%esp)
0000113f	movl	0xfffffbc4(%ebp),%eax
00001145	leal	0xdc28-0x8d1(%eax),%eax
0000114b	movl	%eax,0x04(%esp)
0000114f	movl	%esi,(%esp)
00001152	calll	CUtlBuffer::Scanf(char const*, ...)
00001157	addl	$0x10,%esp
0000115a	movl	0xfffffbec(%ebp),%ecx
00001160	subl	$0x10,%esp
00001163	movl	%ecx,0x08(%esp)
00001167	movl	0xfffffbbc(%ebp),%eax
0000116d	movl	%eax,(%esp)
00001170	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00001178	calll	KeyValues::SetPtr(char const*, void*)
0000117d	addl	$0x10,%esp
00001180	xorb	%cl,%cl
00001182	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
00001186	jne	0x0000127c
0000118c	testb	$0x01,0x15(%esi)
00001190	jne	0x000011d0
00001192	subl	$0x10,%esp
00001195	movl	%esi,(%esp)
00001198	movl	$0x00000001,0x04(%esp)
000011a0	calll	CUtlBuffer::CheckGet(int)
000011a5	addl	$0x10,%esp
000011a8	cmpb	$0x01,%al
000011aa	jne	0x000011c5
000011ac	movl	(%esi),%ecx
000011ae	movl	0x0c(%esi),%eax
000011b1	movl	%eax,%edx
000011b3	subl	0x20(%esi),%edx
000011b6	movb	(%ecx,%edx),%bl
000011b9	movb	%bl,0xfffffbce(%ebp)
000011bf	incl	%eax
000011c0	movl	%eax,0x0c(%esi)
000011c3	jmp	0x00001205
000011c5	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbce(%ebp)
000011cc	xorb	%bl,%bl
000011ce	jmp	0x0000120a
000011d0	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbce(%ebp)
000011d7	subl	$0x10,%esp
000011da	leal	0xfffffbce(%ebp),%eax
000011e0	movl	%eax,0x08(%esp)
000011e4	movl	0xfffffbc4(%ebp),%eax
000011ea	leal	0xdc28-0x8d1(%eax),%eax
000011f0	movl	%eax,0x04(%esp)
000011f4	movl	%esi,(%esp)
000011f7	calll	CUtlBuffer::Scanf(char const*, ...)
000011fc	addl	$0x10,%esp
000011ff	movb	0xfffffbce(%ebp),%bl
00001205	cmpb	$0x08,%bl
00001208	je	0x00001275
0000120a	movl	%esi,%edi
0000120c	subl	$0x10,%esp
0000120f	movl	$0x00000020,(%esp)
00001216	calll	KeyValues::operator new(unsigned long)
0000121b	addl	$0x10,%esp
0000121e	movl	%eax,%esi
00001220	subl	$0x10,%esp
00001223	movl	0xfffffbc4(%ebp),%eax
00001229	leal	0xdc27-0x8d1(%eax),%eax
0000122f	movl	%eax,0x04(%esp)
00001233	movl	%esi,(%esp)
00001236	calll	KeyValues::KeyValues(char const*)
0000123b	addl	$0x10,%esp
0000123e	subl	$0x10,%esp
00001241	movl	%esi,0x04(%esp)
00001245	movl	0xfffffbbc(%ebp),%eax
0000124b	movl	%eax,(%esp)
0000124e	calll	KeyValues::SetNextKey(KeyValues*)
00001253	addl	$0x10,%esp
00001256	movl	%esi,0xfffffbbc(%ebp)
0000125c	movl	%edi,%esi
0000125e	jmp	0x000009a0
00001263	movl	%eax,%edi
00001265	subl	$0x10,%esp
00001268	movl	%esi,(%esp)
0000126b	calll	KeyValues::operator delete(void*)
00001270	addl	$0x10,%esp
00001273	jmp	0x000012a4
00001275	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
00001279	sete	%cl
0000127c	movl	0xfffffbb0(%ebp),%eax
00001282	movl	(%eax),%eax
00001284	cmpl	0xf0(%ebp),%eax
00001287	jne	0x000012b2
00001289	movzbl	%cl,%eax
0000128c	leal	0xf4(%ebp),%esp
0000128f	popl	%esi
00001290	popl	%edi
00001291	popl	%ebx
00001292	popl	%ebp
00001293	ret
00001294	movl	%eax,%edi
00001296	subl	$0x10,%esp
00001299	movl	%esi,(%esp)
0000129c	calll	KeyValues::operator delete(void*)
000012a1	addl	$0x10,%esp
000012a4	subl	$0x10,%esp
000012a7	movl	%edi,(%esp)
000012aa	calll	__Unwind_Resume
000012af	addl	$0x10,%esp
000012b2	calll	___stack_chk_fail
000012b7	calll	std::terminate()
000012bc	xorl	%eax,(%ecx)
000012be	addb	%al,(%eax)
000012c0	cmpsl	(%esi),(%edi)
000012c1	addl	%eax,(%eax)
000012c3	addb	%ch,0xe0000003(%edi)
000012c9	addb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),%al
000012cb	addb	%bl,%dl
000012cd	popl	%es
000012ce	addb	%al,(%eax)
000012d0	inl	$0x01,%eax
000012d2	addb	%al,(%eax)
000012d4	movl	%eax,0x86000005
000012d9	addb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),%al
000012db	addb	%al,(%eax)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(lzmaDecoder.o):
(__TEXT,__text) section
LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int):
00000000	movl	$0x00000001,%eax
00000005	cmpl	$0x05,0x0c(%esp)
0000000a	jl	0x00000063
0000000c	movl	0x08(%esp),%eax
00000010	movb	(%eax),%cl
00000012	movl	$0x00000001,%eax
00000017	cmpb	$0xe0,%cl
0000001a	ja	0x00000063
0000001c	movl	0x04(%esp),%eax
00000020	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0x08(%eax)
00000027	cmpb	$0x2d,%cl
0000002a	jb	0x0000003c
0000002c	xorl	%edx,%edx
0000002e	nop
00000030	incl	%edx
00000031	addb	$0xd3,%cl
00000034	cmpb	$0x2c,%cl
00000037	ja	0x00000030
00000039	movl	%edx,0x08(%eax)
0000003c	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0x04(%eax)
00000043	cmpb	$0x09,%cl
00000046	jb	0x0000005c
00000048	xorl	%edx,%edx
0000004a	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000050	incl	%edx
00000051	addb	$0xf7,%cl
00000054	cmpb	$0x08,%cl
00000057	ja	0x00000050
00000059	movl	%edx,0x04(%eax)
0000005c	movzbl	%cl,%ecx
0000005f	movl	%ecx,(%eax)
00000061	xorl	%eax,%eax
00000063	ret
00000064	nopw	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
LzmaDecode(_CLzmaDecoderState*, unsigned char const*, unsigned int, unsigned int*, unsigned char*, unsigned int, unsigned int*):
00000070	pushl	%ebp
00000071	movl	%esp,%ebp
00000073	pushl	%ebx
00000074	pushl	%edi
00000075	pushl	%esi
00000076	subl	$0x7c,%esp
00000079	calll	0x0000007e
0000007e	popl	%eax
0000007f	movl	%eax,0xf0(%ebp)
00000082	movl	0x08(%ebp),%esi
00000085	movl	0x0c(%esi),%edx
00000088	movl	%edx,0xe4(%ebp)
0000008b	movl	(%esi),%ebx
0000008d	movb	0x08(%esi),%al
00000090	movb	0x04(%esi),%cl
00000093	movl	0x14(%ebp),%edi
00000096	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),(%edi)
0000009c	movl	0x20(%ebp),%edi
0000009f	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),(%edi)
000000a5	movl	$0x00000001,%edi
000000aa	shll	%cl,%edi
000000ac	movl	%edi,0xc0(%ebp)
000000af	movl	%edx,%edi
000000b1	movb	%al,%cl
000000b3	movl	$0x00000001,%eax
000000b8	shll	%cl,%eax
000000ba	movl	%eax,0xbc(%ebp)
000000bd	movl	0x04(%esi),%ecx
000000c0	addl	%ebx,%ecx
000000c2	movl	%ebx,%esi
000000c4	movl	$0x00000300,%eax
000000c9	shll	%cl,%eax
000000cb	cmpl	$0xfffff8ca,%eax
000000d0	je	0x000000f2
000000d2	leal	0x00001cd8(,%eax,4),%eax
000000d9	movl	%eax,0x08(%esp)
000000dd	movl	0xf0(%ebp),%eax
000000e0	leal	_.memset_pattern-0x7e(%eax),%eax
000000e6	movl	%eax,0x04(%esp)
000000ea	movl	%edi,(%esp)
000000ed	calll	_memset_pattern16
000000f2	movl	%edi,%ecx
000000f4	decl	0xc0(%ebp)
000000f7	decl	0xbc(%ebp)
000000fa	movl	0x10(%ebp),%edx
000000fd	movl	0x0c(%ebp),%eax
00000100	leal	(%eax,%edx),%eax
00000103	movl	%eax,0xdc(%ebp)
00000106	xorl	%edi,%edi
00000108	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xf0(%ebp)
0000010f	jmp	0x00000140
00000111	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000120	movl	$0x00000001,%eax
00000125	cmpl	%edi,%edx
00000127	je	0x00000c70
0000012d	movl	0x0c(%ebp),%eax
00000130	movzbl	(%eax,%edi),%eax
00000134	movl	0xf0(%ebp),%ebx
00000137	shll	$0x08,%ebx
0000013a	orl	%eax,%ebx
0000013c	movl	%ebx,0xf0(%ebp)
0000013f	incl	%edi
00000140	cmpl	$0x05,%edi
00000143	jl	0x00000120
00000145	addl	0x0c(%ebp),%edi
00000148	movl	$0x00000008,%eax
0000014d	movl	%esi,0xb8(%ebp)
00000150	subl	%esi,%eax
00000152	movl	%eax,0xb4(%ebp)
00000155	movl	%ecx,0xe4(%ebp)
00000158	leal	0x000014d0(%ecx),%eax
0000015e	movl	%eax,0x98(%ebp)
00000161	leal	0x00000c88(%ecx),%eax
00000167	movl	%eax,0x94(%ebp)
0000016a	leal	0x00000cc8(%ecx),%eax
00000170	movl	%eax,0x90(%ebp)
00000173	movb	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe8(%ebp)
00000177	xorl	%ecx,%ecx
00000179	movl	$0xffffffff,%esi
0000017e	movl	$0x00000001,0xb0(%ebp)
00000185	movl	$0x00000001,0xac(%ebp)
0000018c	movl	$0x00000001,0xa8(%ebp)
00000193	movl	$0x00000001,0xc4(%ebp)
0000019a	movl	%ecx,%eax
0000019c	jmp	0x00000c2e
000001a1	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
000001b0	cmpl	$0x00ffffff,%esi
000001b6	movl	%esi,%edx
000001b8	jbe	0x000001c2
000001ba	movl	%edi,0xec(%ebp)
000001bd	movl	0xf0(%ebp),%edi
000001c0	jmp	0x000001e8
000001c2	movl	%eax,%ecx
000001c4	movl	$0x00000001,%eax
000001c9	cmpl	0xdc(%ebp),%edi
000001cc	movl	%edi,%esi
000001ce	je	0x00000c70
000001d4	movl	0xf0(%ebp),%eax
000001d7	shll	$0x08,%eax
000001da	movzbl	(%esi),%edi
000001dd	orl	%eax,%edi
000001df	incl	%esi
000001e0	movl	%esi,0xec(%ebp)
000001e3	shll	$0x08,%edx
000001e6	movl	%ecx,%eax
000001e8	movl	0xe4(%ebp),%ecx
000001eb	movl	%eax,%esi
000001ed	andl	0xbc(%ebp),%esi
000001f0	movl	%esi,0xd8(%ebp)
000001f3	movl	%ebx,0xc8(%ebp)
000001f6	shll	$0x04,%ebx
000001f9	movl	%ebx,0xe0(%ebp)
000001fc	leal	(%esi,%ebx),%esi
000001ff	movl	%esi,0xf0(%ebp)
00000202	movl	(%ecx,%esi,4),%esi
00000205	movl	%eax,%ebx
00000207	movl	%edx,%eax
00000209	shrl	$0x0b,%eax
0000020c	imull	%esi,%eax
0000020f	cmpl	%eax,%edi
00000211	jae	0x00000444
00000217	movl	$0x00000800,%edx
0000021c	subl	%esi,%edx
0000021e	shrl	$0x05,%edx
00000221	addl	%esi,%edx
00000223	movl	0xf0(%ebp),%esi
00000226	movl	%edx,(%ecx,%esi,4)
00000229	movzbl	0xe8(%ebp),%edx
0000022d	movl	0xb4(%ebp),%ecx
00000230	shrl	%cl,%edx
00000232	movl	%ebx,%esi
00000234	andl	0xc0(%ebp),%esi
00000237	movl	0xb8(%ebp),%ecx
0000023a	shll	%cl,%esi
0000023c	addl	%edx,%esi
0000023e	imull	$0x00000300,%esi,%esi
00000244	movl	$0x00000001,%ecx
00000249	cmpl	$0x07,0xc8(%ebp)
0000024d	jge	0x00000262
0000024f	movl	%esi,0xd4(%ebp)
00000252	movl	%ebx,0xcc(%ebp)
00000255	movl	%edi,0xf0(%ebp)
00000258	movl	%eax,%esi
0000025a	movl	0xe4(%ebp),%ebx
0000025d	jmp	0x0000034d
00000262	movl	%ebx,%ecx
00000264	movl	%ebx,0xcc(%ebp)
00000267	subl	0xc4(%ebp),%ecx
0000026a	movl	0x18(%ebp),%edx
0000026d	movzbl	(%edx,%ecx),%ecx
00000271	movl	%ecx,0xd8(%ebp)
00000274	leal	0x00000836(%esi),%ecx
0000027a	movl	%ecx,0xd0(%ebp)
0000027d	movl	%esi,0xd4(%ebp)
00000280	movl	$0x00000001,%ecx
00000285	movl	%edi,0xf0(%ebp)
00000288	movl	%eax,%esi
0000028a	movl	0xe4(%ebp),%ebx
0000028d	jmp	0x000002bf
0000028f	nop
00000290	movl	%edx,0xf0(%ebp)
00000293	movl	$0x00000800,%eax
00000298	subl	%ecx,%eax
0000029a	shrl	$0x05,%eax
0000029d	addl	%ecx,%eax
0000029f	movl	%eax,(%ebx,%edi,4)
000002a2	movl	0xe8(%ebp),%eax
000002a5	addl	%eax,%eax
000002a7	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe0(%ebp)
000002ab	movl	%eax,%ecx
000002ad	jne	0x0000034d
000002b3	cmpl	$0x00000100,%ecx
000002b9	jge	0x0000034d
000002bf	movl	%ecx,%edi
000002c1	cmpl	$0x00ffffff,%esi
000002c7	movl	0xec(%ebp),%ecx
000002ca	jbe	0x000002d3
000002cc	movl	%esi,%eax
000002ce	movl	0xf0(%ebp),%edx
000002d1	jmp	0x000002f5
000002d3	movl	$0x00000001,%eax
000002d8	cmpl	0xdc(%ebp),%ecx
000002db	je	0x00000c70
000002e1	movl	0xf0(%ebp),%edx
000002e4	shll	$0x08,%edx
000002e7	movzbl	(%ecx),%eax
000002ea	orl	%eax,%edx
000002ec	incl	%ecx
000002ed	movl	%ecx,0xec(%ebp)
000002f0	shll	$0x08,%esi
000002f3	movl	%esi,%eax
000002f5	movl	%edi,0xe8(%ebp)
000002f8	movl	0xd0(%ebp),%esi
000002fb	leal	(%esi,%edi),%edi
000002fe	movl	0xd8(%ebp),%esi
00000301	addl	%esi,%esi
00000303	movl	%esi,0xd8(%ebp)
00000306	andl	$0x00000100,%esi
0000030c	movl	%esi,0xe0(%ebp)
0000030f	addl	%esi,%edi
00000311	movl	(%ebx,%edi,4),%ecx
00000314	movl	%eax,%esi
00000316	shrl	$0x0b,%esi
00000319	imull	%ecx,%esi
0000031c	cmpl	%esi,%edx
0000031e	jb	0x00000290
00000324	movl	%ecx,%ebx
00000326	shrl	$0x05,%ebx
00000329	subl	%ebx,%ecx
0000032b	movl	0xe4(%ebp),%ebx
0000032e	movl	%ecx,(%ebx,%edi,4)
00000331	subl	%esi,%edx
00000333	movl	%edx,0xf0(%ebp)
00000336	subl	%esi,%eax
00000338	movl	0xe8(%ebp),%ecx
0000033b	leal	0x01(%ecx,%ecx),%ecx
0000033f	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe0(%ebp)
00000343	movl	%eax,%esi
00000345	jne	0x000002b3
0000034b	movl	%eax,%esi
0000034d	addl	$0x00000736,0xd4(%ebp)
00000354	movl	0xec(%ebp),%edi
00000357	jmp	0x00000389
00000359	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax)
00000360	movl	%edi,%ebx
00000362	shrl	$0x05,%ebx
00000365	subl	%ebx,%edi
00000367	movl	0xe4(%ebp),%ecx
0000036a	movl	0xf0(%ebp),%ebx
0000036d	movl	%edi,(%ecx,%ebx,4)
00000370	movl	%ecx,%edi
00000372	subl	%esi,%eax
00000374	movl	0xe0(%ebp),%ecx
00000377	subl	%esi,%ecx
00000379	leal	0x01(%edx,%edx),%edx
0000037d	movl	%eax,0xf0(%ebp)
00000380	movl	%edi,%ebx
00000382	movl	0xec(%ebp),%edi
00000385	movl	%ecx,%esi
00000387	movl	%edx,%ecx
00000389	cmpl	$0x000000ff,%ecx
0000038f	jg	0x00000408
00000391	movl	%ecx,0xe8(%ebp)
00000394	cmpl	$0x00ffffff,%esi
0000039a	jbe	0x000003a1
0000039c	movl	0xf0(%ebp),%eax
0000039f	jmp	0x000003c2
000003a1	movl	%ebx,%edx
000003a3	movl	$0x00000001,%eax
000003a8	cmpl	0xdc(%ebp),%edi
000003ab	je	0x00000c70
000003b1	movl	0xf0(%ebp),%ecx
000003b4	shll	$0x08,%ecx
000003b7	movzbl	(%edi),%eax
000003ba	orl	%ecx,%eax
000003bc	incl	%edi
000003bd	shll	$0x08,%esi
000003c0	movl	%edx,%ebx
000003c2	movl	%esi,0xe0(%ebp)
000003c5	movl	%edi,0xec(%ebp)
000003c8	movl	0xd4(%ebp),%ecx
000003cb	movl	0xe8(%ebp),%edx
000003ce	leal	(%ecx,%edx),%ecx
000003d1	movl	%ecx,0xf0(%ebp)
000003d4	movl	(%ebx,%ecx,4),%edi
000003d7	shrl	$0x0b,%esi
000003da	imull	%edi,%esi
000003dd	cmpl	%esi,%eax
000003df	jae	0x00000360
000003e5	movl	$0x00000800,%ebx
000003ea	subl	%edi,%ebx
000003ec	shrl	$0x05,%ebx
000003ef	addl	%edi,%ebx
000003f1	movl	0xe4(%ebp),%ecx
000003f4	movl	0xf0(%ebp),%edi
000003f7	movl	%ebx,(%ecx,%edi,4)
000003fa	addl	%edx,%edx
000003fc	movl	%eax,0xf0(%ebp)
000003ff	movl	%ecx,%ebx
00000401	movl	0xec(%ebp),%edi
00000404	movl	%edx,%ecx
00000406	jmp	0x00000389
00000408	movb	%cl,%dl
0000040a	movb	%dl,0xe8(%ebp)
0000040d	movl	0x18(%ebp),%eax
00000410	movl	0xcc(%ebp),%ecx
00000413	movb	%dl,(%eax,%ecx)
00000416	movl	%ecx,%eax
00000418	incl	%eax
00000419	xorl	%ecx,%ecx
0000041b	movl	0xc8(%ebp),%edx
0000041e	cmpl	$0x04,%edx
00000421	jl	0x00000c2e
00000427	movl	%edi,%ebx
00000429	cmpl	$0x09,%edx
0000042c	movl	%edx,%ecx
0000042e	jg	0x0000043a
00000430	addl	$0xfd,%ecx
00000433	movl	%ebx,%edi
00000435	jmp	0x00000c2e
0000043a	addl	$0xfa,%ecx
0000043d	movl	%ebx,%edi
0000043f	jmp	0x00000c2e
00000444	movl	%ebx,0xcc(%ebp)
00000447	movl	%esi,%ebx
00000449	shrl	$0x05,%ebx
0000044c	subl	%ebx,%esi
0000044e	movl	0xe4(%ebp),%ecx
00000451	movl	0xf0(%ebp),%ebx
00000454	movl	%esi,(%ecx,%ebx,4)
00000457	subl	%eax,%edi
00000459	subl	%eax,%edx
0000045b	cmpl	$0x00ffffff,%edx
00000461	movl	%edx,%esi
00000463	jbe	0x0000046a
00000465	movl	%edi,0xf0(%ebp)
00000468	jmp	0x0000048d
0000046a	movl	$0x00000001,%eax
0000046f	movl	0xec(%ebp),%edx
00000472	cmpl	0xdc(%ebp),%edx
00000475	je	0x00000c70
0000047b	shll	$0x08,%edi
0000047e	movzbl	(%edx),%eax
00000481	orl	%edi,%eax
00000483	movl	%eax,0xf0(%ebp)
00000486	incl	%edx
00000487	movl	%edx,0xec(%ebp)
0000048a	shll	$0x08,%esi
0000048d	movl	%ecx,%edx
0000048f	movl	0xc8(%ebp),%ebx
00000492	movl	0x00000300(%edx,%ebx,4),%eax
00000499	movl	%esi,%edi
0000049b	movl	%edi,%esi
0000049d	shrl	$0x0b,%esi
000004a0	imull	%eax,%esi
000004a3	cmpl	%esi,0xf0(%ebp)
000004a6	jae	0x000004ea
000004a8	movl	%edx,%ecx
000004aa	movl	$0x00000800,%edx
000004af	subl	%eax,%edx
000004b1	shrl	$0x05,%edx
000004b4	addl	%eax,%edx
000004b6	movl	%edx,0x00000300(%ecx,%ebx,4)
000004bd	cmpl	$0x06,%ebx
000004c0	setg	%al
000004c3	movzbl	%al,%eax
000004c6	leal	(%eax,%eax,2),%eax
000004c9	movl	%eax,0xc8(%ebp)
000004cc	movl	0x90(%ebp),%eax
000004cf	movl	%eax,0xd4(%ebp)
000004d2	movl	0xac(%ebp),%ebx
000004d5	movl	0xa8(%ebp),%eax
000004d8	movl	%eax,0xac(%ebp)
000004db	movl	0xc4(%ebp),%eax
000004de	movl	%eax,%edx
000004e0	movl	%eax,%edi
000004e2	movl	0xec(%ebp),%ecx
000004e5	jmp	0x00000749
000004ea	movl	%eax,%ecx
000004ec	shrl	$0x05,%ecx
000004ef	subl	%ecx,%eax
000004f1	movl	%eax,0x00000300(%edx,%ebx,4)
000004f8	movl	0xf0(%ebp),%ebx
000004fb	subl	%esi,%ebx
000004fd	subl	%esi,%edi
000004ff	cmpl	$0x00ffffff,%edi
00000505	movl	%edi,%ecx
00000507	movl	%edx,%eax
00000509	jbe	0x0000050f
0000050b	movl	%ebx,%edx
0000050d	jmp	0x00000535
0000050f	movl	%ebx,%edi
00000511	movl	%eax,%ebx
00000513	movl	$0x00000001,%eax
00000518	movl	0xec(%ebp),%esi
0000051b	cmpl	0xdc(%ebp),%esi
0000051e	je	0x00000c70
00000524	shll	$0x08,%edi
00000527	movzbl	(%esi),%edx
0000052a	orl	%edi,%edx
0000052c	incl	%esi
0000052d	movl	%esi,0xec(%ebp)
00000530	shll	$0x08,%ecx
00000533	movl	%ebx,%eax
00000535	movl	0xc8(%ebp),%ebx
00000538	movl	%eax,%edi
0000053a	movl	0x00000330(%edi,%ebx,4),%eax
00000541	movl	%ecx,%esi
00000543	shrl	$0x0b,%esi
00000546	imull	%eax,%esi
00000549	cmpl	%esi,%edx
0000054b	jae	0x000005ed
00000551	movl	$0x00000800,%ecx
00000556	subl	%eax,%ecx
00000558	shrl	$0x05,%ecx
0000055b	addl	%eax,%ecx
0000055d	movl	%ecx,0x00000330(%edi,%ebx,4)
00000564	cmpl	$0x00ffffff,%esi
0000056a	movl	%edi,%eax
0000056c	jbe	0x00000574
0000056e	movl	%edx,%edi
00000570	movl	%eax,%edx
00000572	jmp	0x00000598
00000574	movl	%eax,%ebx
00000576	movl	$0x00000001,%eax
0000057b	movl	0xec(%ebp),%ecx
0000057e	cmpl	0xdc(%ebp),%ecx
00000581	je	0x00000c70
00000587	shll	$0x08,%edx
0000058a	movzbl	(%ecx),%edi
0000058d	orl	%edx,%edi
0000058f	incl	%ecx
00000590	movl	%ecx,0xec(%ebp)
00000593	shll	$0x08,%esi
00000596	movl	%ebx,%edx
00000598	movl	%edi,0xf0(%ebp)
0000059b	movl	0xd8(%ebp),%ebx
0000059e	movl	0xe0(%ebp),%eax
000005a1	leal	0x000000f0(%eax,%ebx),%eax
000005a8	movl	(%edx,%eax,4),%edx
000005ab	movl	%esi,%ecx
000005ad	shrl	$0x0b,%ecx
000005b0	imull	%edx,%ecx
000005b3	movl	%ecx,0xe0(%ebp)
000005b6	cmpl	%ecx,%edi
000005b8	jb	0x00000be6
000005be	movl	%ebx,0xd8(%ebp)
000005c1	movl	%edx,%ecx
000005c3	shrl	$0x05,%ecx
000005c6	subl	%ecx,%edx
000005c8	movl	0xe4(%ebp),%ecx
000005cb	movl	%edx,(%ecx,%eax,4)
000005ce	movl	0xe0(%ebp),%eax
000005d1	subl	%eax,0xf0(%ebp)
000005d4	subl	%eax,%esi
000005d6	movl	0xb0(%ebp),%eax
000005d9	movl	%eax,0xd0(%ebp)
000005dc	movl	0xa8(%ebp),%edx
000005df	movl	0xc4(%ebp),%edi
000005e2	movl	0xec(%ebp),%ecx
000005e5	movl	0xc8(%ebp),%ebx
000005e8	jmp	0x00000730
000005ed	movl	%ecx,0xe0(%ebp)
000005f0	movl	%eax,%ecx
000005f2	shrl	$0x05,%ecx
000005f5	subl	%ecx,%eax
000005f7	movl	%eax,0x00000330(%edi,%ebx,4)
000005fe	movl	%edx,%ebx
00000600	subl	%esi,%ebx
00000602	movl	0xe0(%ebp),%eax
00000605	subl	%esi,%eax
00000607	cmpl	$0x00ffffff,%eax
0000060c	movl	%eax,%ecx
0000060e	movl	%edi,%esi
00000610	jbe	0x00000616
00000612	movl	%ebx,%edx
00000614	jmp	0x0000063c
00000616	movl	%esi,%edx
00000618	movl	$0x00000001,%eax
0000061d	movl	0xec(%ebp),%esi
00000620	cmpl	0xdc(%ebp),%esi
00000623	je	0x00000c70
00000629	shll	$0x08,%ebx
0000062c	movzbl	(%esi),%eax
0000062f	orl	%ebx,%eax
00000631	incl	%esi
00000632	movl	%esi,0xec(%ebp)
00000635	shll	$0x08,%ecx
00000638	movl	%edx,%esi
0000063a	movl	%eax,%edx
0000063c	movl	0xc8(%ebp),%ebx
0000063f	movl	0x00000360(%esi,%ebx,4),%eax
00000646	movl	%ecx,%edi
00000648	movl	%edi,%esi
0000064a	shrl	$0x0b,%esi
0000064d	imull	%eax,%esi
00000650	cmpl	%esi,%edx
00000652	jae	0x0000067e
00000654	movl	%edx,0xf0(%ebp)
00000657	movl	$0x00000800,%edx
0000065c	subl	%eax,%edx
0000065e	shrl	$0x05,%edx
00000661	addl	%eax,%edx
00000663	movl	0xe4(%ebp),%eax
00000666	movl	%edx,0x00000360(%eax,%ebx,4)
0000066d	movl	0xb0(%ebp),%eax
00000670	movl	%eax,0xd0(%ebp)
00000673	movl	0xc4(%ebp),%edx
00000676	movl	0xa8(%ebp),%edi
00000679	jmp	0x0000072d
0000067e	movl	%eax,%ecx
00000680	shrl	$0x05,%ecx
00000683	subl	%ecx,%eax
00000685	movl	0xe4(%ebp),%ecx
00000688	movl	%eax,0x00000360(%ecx,%ebx,4)
0000068f	subl	%esi,%edx
00000691	subl	%esi,%edi
00000693	cmpl	$0x00ffffff,%edi
00000699	movl	%edi,%esi
0000069b	movl	%ecx,%eax
0000069d	jbe	0x000006a5
0000069f	movl	%eax,%ecx
000006a1	movl	%edx,%eax
000006a3	jmp	0x000006cb
000006a5	movl	%edx,%edi
000006a7	movl	%eax,%edx
000006a9	movl	$0x00000001,%eax
000006ae	movl	0xec(%ebp),%ecx
000006b1	cmpl	0xdc(%ebp),%ecx
000006b4	je	0x00000c70
000006ba	shll	$0x08,%edi
000006bd	movzbl	(%ecx),%eax
000006c0	orl	%edi,%eax
000006c2	incl	%ecx
000006c3	movl	%ecx,0xec(%ebp)
000006c6	shll	$0x08,%esi
000006c9	movl	%edx,%ecx
000006cb	movl	0x00000390(%ecx,%ebx,4),%ecx
000006d2	movl	%esi,%edi
000006d4	movl	%edi,%esi
000006d6	shrl	$0x0b,%esi
000006d9	imull	%ecx,%esi
000006dc	cmpl	%esi,%eax
000006de	jae	0x000006fd
000006e0	movl	$0x00000800,%edx
000006e5	subl	%ecx,%edx
000006e7	shrl	$0x05,%edx
000006ea	addl	%ecx,%edx
000006ec	movl	%eax,0xf0(%ebp)
000006ef	movl	0xb0(%ebp),%eax
000006f2	movl	%eax,0xd0(%ebp)
000006f5	movl	0xac(%ebp),%edi
000006f8	movl	0xc4(%ebp),%ecx
000006fb	jmp	0x0000071b
000006fd	subl	%esi,%eax
000006ff	subl	%esi,%edi
00000701	movl	%ecx,%edx
00000703	shrl	$0x05,%edx
00000706	subl	%edx,%ecx
00000708	movl	%ecx,%edx
0000070a	movl	%eax,0xf0(%ebp)
0000070d	movl	%edi,%esi
0000070f	movl	0xac(%ebp),%eax
00000712	movl	%eax,0xd0(%ebp)
00000715	movl	0xc4(%ebp),%ecx
00000718	movl	0xb0(%ebp),%edi
0000071b	movl	0xe4(%ebp),%eax
0000071e	movl	%edx,0x00000390(%eax,%ebx,4)
00000725	movl	0xa8(%ebp),%eax
00000728	movl	%eax,0xac(%ebp)
0000072b	movl	%ecx,%edx
0000072d	movl	0xec(%ebp),%ecx
00000730	cmpl	$0x06,%ebx
00000733	setg	%al
00000736	movzbl	%al,%eax
00000739	leal	0x08(%eax,%eax,2),%eax
0000073d	movl	%eax,0xc8(%ebp)
00000740	movl	0x98(%ebp),%eax
00000743	movl	%eax,0xd4(%ebp)
00000746	movl	0xd0(%ebp),%ebx
00000749	movl	%edx,0x9c(%ebp)
0000074c	cmpl	$0x00ffffff,%esi
00000752	jbe	0x00000762
00000754	movl	%ebx,0xd0(%ebp)
00000757	movl	%edi,0xb0(%ebp)
0000075a	movl	%ecx,0xec(%ebp)
0000075d	movl	0xf0(%ebp),%ebx
00000760	jmp	0x00000788
00000762	movl	%ebx,0xd0(%ebp)
00000765	movl	%edi,0xb0(%ebp)
00000768	movl	$0x00000001,%eax
0000076d	cmpl	0xdc(%ebp),%ecx
00000770	je	0x00000c70
00000776	movl	0xf0(%ebp),%eax
00000779	shll	$0x08,%eax
0000077c	movzbl	(%ecx),%ebx
0000077f	orl	%eax,%ebx
00000781	incl	%ecx
00000782	movl	%ecx,0xec(%ebp)
00000785	shll	$0x08,%esi
00000788	movl	%esi,%edi
0000078a	shrl	$0x0b,%edi
0000078d	movl	0xd4(%ebp),%edx
00000790	movl	(%edx),%eax
00000792	imull	%eax,%edi
00000795	cmpl	%edi,%ebx
00000797	jae	0x000007c3
00000799	movl	%edi,0xe0(%ebp)
0000079c	movl	$0x00000800,%ecx
000007a1	subl	%eax,%ecx
000007a3	shrl	$0x05,%ecx
000007a6	addl	%eax,%ecx
000007a8	movl	%ecx,(%edx)
000007aa	movl	0xd8(%ebp),%eax
000007ad	shll	$0x05,%eax
000007b0	leal	0x08(%edx,%eax),%edx
000007b4	movl	%edx,0xd4(%ebp)
000007b7	xorl	%ecx,%ecx
000007b9	movl	$0x00000003,%edi
000007be	jmp	0x00000863
000007c3	movl	%eax,%ecx
000007c5	shrl	$0x05,%ecx
000007c8	subl	%ecx,%eax
000007ca	movl	%eax,(%edx)
000007cc	subl	%edi,%ebx
000007ce	subl	%edi,%esi
000007d0	cmpl	$0x00ffffff,%esi
000007d6	jbe	0x000007dc
000007d8	movl	%ebx,%eax
000007da	jmp	0x000007fc
000007dc	movl	$0x00000001,%eax
000007e1	movl	0xec(%ebp),%ecx
000007e4	cmpl	0xdc(%ebp),%ecx
000007e7	je	0x00000c70
000007ed	shll	$0x08,%ebx
000007f0	movzbl	(%ecx),%eax
000007f3	orl	%ebx,%eax
000007f5	incl	%ecx
000007f6	movl	%ecx,0xec(%ebp)
000007f9	shll	$0x08,%esi
000007fc	movl	%esi,%edi
000007fe	shrl	$0x0b,%edi
00000801	movl	0x04(%edx),%ecx
00000804	imull	%ecx,%edi
00000807	cmpl	%edi,%eax
00000809	movl	%edx,%ebx
0000080b	jae	0x0000083d
0000080d	movl	%edi,0xe0(%ebp)
00000810	movl	$0x00000800,%edx
00000815	subl	%ecx,%edx
00000817	shrl	$0x05,%edx
0000081a	addl	%ecx,%edx
0000081c	movl	%edx,0x04(%ebx)
0000081f	movl	0xd8(%ebp),%ecx
00000822	shll	$0x05,%ecx
00000825	leal	0x00000208(%ecx,%ebx),%ebx
0000082c	movl	%ebx,0xd4(%ebp)
0000082f	movl	$0x00000008,%ecx
00000834	movl	$0x00000003,%edi
00000839	movl	%eax,%ebx
0000083b	jmp	0x00000863
0000083d	movl	%ecx,%edx
0000083f	shrl	$0x05,%edx
00000842	subl	%edx,%ecx
00000844	movl	%ecx,0x04(%ebx)
00000847	subl	%edi,%eax
00000849	subl	%edi,%esi
0000084b	addl	$0x00000408,%ebx
00000851	movl	%ebx,0xd4(%ebp)
00000854	movl	$0x00000010,%ecx
00000859	movl	$0x00000008,%edi
0000085e	movl	%eax,%ebx
00000860	movl	%esi,0xe0(%ebp)
00000863	movl	%edi,0xd8(%ebp)
00000866	movl	%ecx,0xa8(%ebp)
00000869	movl	$0x00000001,%edx
0000086e	movl	%edi,%eax
00000870	movl	%eax,0xe8(%ebp)
00000873	movl	%edx,%edi
00000875	cmpl	$0x00ffffff,0xe0(%ebp)
0000087c	jbe	0x00000886
0000087e	movl	0xe0(%ebp),%esi
00000881	movl	0xec(%ebp),%edx
00000884	jmp	0x000008a8
00000886	movl	$0x00000001,%eax
0000088b	movl	0xec(%ebp),%edx
0000088e	cmpl	0xdc(%ebp),%edx
00000891	je	0x00000c70
00000897	shll	$0x08,%ebx
0000089a	movzbl	(%edx),%eax
0000089d	orl	%ebx,%eax
0000089f	movl	%eax,%ebx
000008a1	incl	%edx
000008a2	movl	0xe0(%ebp),%esi
000008a5	shll	$0x08,%esi
000008a8	movl	%ebx,0xf0(%ebp)
000008ab	movl	%edx,0xec(%ebp)
000008ae	movl	%edi,%ecx
000008b0	movl	0xd4(%ebp),%eax
000008b3	movl	(%eax,%ecx,4),%edx
000008b6	movl	%esi,%edi
000008b8	shrl	$0x0b,%edi
000008bb	imull	%edx,%edi
000008be	cmpl	%edi,%ebx
000008c0	jae	0x000008db
000008c2	movl	$0x00000800,%ebx
000008c7	subl	%edx,%ebx
000008c9	shrl	$0x05,%ebx
000008cc	addl	%edx,%ebx
000008ce	movl	%ebx,(%eax,%ecx,4)
000008d1	addl	%ecx,%ecx
000008d3	movl	0xf0(%ebp),%ebx
000008d6	movl	%edi,0xe0(%ebp)
000008d9	jmp	0x000008f5
000008db	movl	%edx,%ebx
000008dd	shrl	$0x05,%ebx
000008e0	subl	%ebx,%edx
000008e2	movl	%edx,(%eax,%ecx,4)
000008e5	movl	0xf0(%ebp),%eax
000008e8	subl	%edi,%eax
000008ea	subl	%edi,%esi
000008ec	movl	%esi,0xe0(%ebp)
000008ef	leal	0x01(%ecx,%ecx),%ecx
000008f3	movl	%eax,%ebx
000008f5	movl	%ecx,%edx
000008f7	movl	0xe8(%ebp),%eax
000008fa	decl	%eax
000008fb	movl	0xd8(%ebp),%ecx
000008fe	jne	0x00000870
00000904	movl	$0x00000001,%esi
00000909	shll	%cl,%esi
0000090b	movl	0xc8(%ebp),%ecx
0000090e	cmpl	$0x03,%ecx
00000911	jbe	0x00000924
00000913	movl	%ebx,0xf0(%ebp)
00000916	movl	%esi,0xa0(%ebp)
00000919	movl	%edx,0xa4(%ebp)
0000091c	movl	0xb0(%ebp),%ecx
0000091f	jmp	0x00000b65
00000924	movl	%edx,%eax
00000926	movl	%edx,0xa4(%ebp)
00000929	subl	%esi,%eax
0000092b	movl	%esi,0xa0(%ebp)
0000092e	addl	0xa8(%ebp),%eax
00000931	movl	%eax,%edx
00000933	shll	$0x06,%edx
00000936	addl	$0x000001b0,%edx
0000093c	cmpl	$0x03,%eax
0000093f	movl	$0x00000270,%eax
00000944	cmovgl	%eax,%edx
00000947	movl	%edx,0xd8(%ebp)
0000094a	addl	$0x07,%ecx
0000094d	movl	%ecx,0xc8(%ebp)
00000950	movl	$0x00000001,%edi
00000955	movl	$0xfffffffa,%eax
0000095a	movl	0xe0(%ebp),%ecx
0000095d	movl	0xec(%ebp),%edx
00000960	movl	%eax,0xe8(%ebp)
00000963	cmpl	$0x00ffffff,%ecx
00000969	jbe	0x00000972
0000096b	movl	%edx,0xec(%ebp)
0000096e	movl	%ebx,%eax
00000970	jmp	0x0000098f
00000972	movl	$0x00000001,%eax
00000977	cmpl	0xdc(%ebp),%edx
0000097a	je	0x00000c70
00000980	shll	$0x08,%ebx
00000983	movzbl	(%edx),%eax
00000986	orl	%ebx,%eax
00000988	incl	%edx
00000989	movl	%edx,0xec(%ebp)
0000098c	shll	$0x08,%ecx
0000098f	movl	%ecx,0xe0(%ebp)
00000992	movl	0xd8(%ebp),%edx
00000995	leal	(%edi,%edx),%edx
00000998	movl	%edx,0xf0(%ebp)
0000099b	movl	0xe4(%ebp),%esi
0000099e	movl	(%esi,%edx,4),%ebx
000009a1	movl	%ecx,%esi
000009a3	shrl	$0x0b,%esi
000009a6	imull	%ebx,%esi
000009a9	cmpl	%esi,%eax
000009ab	jae	0x000009ca
000009ad	movl	$0x00000800,%ecx
000009b2	subl	%ebx,%ecx
000009b4	shrl	$0x05,%ecx
000009b7	addl	%ebx,%ecx
000009b9	movl	0xf0(%ebp),%edx
000009bc	movl	0xe4(%ebp),%ebx
000009bf	movl	%ecx,(%ebx,%edx,4)
000009c2	addl	%edi,%edi
000009c4	movl	%eax,%ebx
000009c6	movl	%esi,%ecx
000009c8	jmp	0x000009e7
000009ca	movl	%ebx,%ecx
000009cc	shrl	$0x05,%ecx
000009cf	subl	%ecx,%ebx
000009d1	movl	0xf0(%ebp),%ecx
000009d4	movl	0xe4(%ebp),%edx
000009d7	movl	%ebx,(%edx,%ecx,4)
000009da	subl	%esi,%eax
000009dc	movl	0xe0(%ebp),%ecx
000009df	subl	%esi,%ecx
000009e1	leal	0x01(%edi,%edi),%edi
000009e5	movl	%eax,%ebx
000009e7	movl	0xe8(%ebp),%eax
000009ea	incl	%eax
000009eb	movl	0xec(%ebp),%edx
000009ee	jne	0x00000960
000009f4	movl	%ecx,%edx
000009f6	leal	0xc0(%edi),%esi
000009f9	cmpl	$0x04,%esi
000009fc	jge	0x00000a0b
000009fe	movl	%ebx,0xf0(%ebp)
00000a01	movl	%esi,0xc4(%ebp)
00000a04	movl	%edx,%esi
00000a06	jmp	0x00000b58
00000a0b	movl	%edi,%ecx
00000a0d	movl	%esi,%edi
00000a0f	andl	$0x01,%edi
00000a12	orl	$0x02,%edi
00000a15	movl	%esi,%eax
00000a17	sarl	%eax
00000a19	cmpl	$0x0d,%esi
00000a1c	jg	0x00000a3c
00000a1e	movl	%ebx,0xf0(%ebp)
00000a21	decl	%eax
00000a22	movl	$0x000002ef,%esi
00000a27	subl	%ecx,%esi
00000a29	movb	%al,%cl
00000a2b	shll	%cl,%edi
00000a2d	movl	%edi,0xc4(%ebp)
00000a30	addl	%edi,%esi
00000a32	movl	0xe4(%ebp),%ecx
00000a35	leal	(%ecx,%esi,4),%ecx
00000a38	movl	%edx,%esi
00000a3a	jmp	0x00000a9c
00000a3c	movl	$0x00000005,%ecx
00000a41	subl	%eax,%ecx
00000a43	movl	%edx,%esi
00000a45	movl	0xec(%ebp),%edx
00000a48	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000a50	cmpl	$0x00ffffff,%esi
00000a56	jbe	0x00000a5c
00000a58	movl	%ebx,%eax
00000a5a	jmp	0x00000a76
00000a5c	movl	$0x00000001,%eax
00000a61	cmpl	0xdc(%ebp),%edx
00000a64	je	0x00000c70
00000a6a	shll	$0x08,%ebx
00000a6d	movzbl	(%edx),%eax
00000a70	orl	%ebx,%eax
00000a72	incl	%edx
00000a73	shll	$0x08,%esi
00000a76	addl	%edi,%edi
00000a78	shrl	%esi
00000a7a	cmpl	%esi,%eax
00000a7c	jb	0x00000a83
00000a7e	subl	%esi,%eax
00000a80	orl	$0x01,%edi
00000a83	movl	%eax,%ebx
00000a85	incl	%ecx
00000a86	jne	0x00000a50
00000a88	movl	%ebx,0xf0(%ebp)
00000a8b	movl	%edx,0xec(%ebp)
00000a8e	shll	$0x04,%edi
00000a91	movl	%edi,0xc4(%ebp)
00000a94	movl	$0x00000004,%eax
00000a99	movl	0x94(%ebp),%ecx
00000a9c	movl	%ecx,0xd8(%ebp)
00000a9f	movl	$0x00000001,%edx
00000aa4	movl	%edx,0xe8(%ebp)
00000aa7	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000ab0	movl	%edx,0xe0(%ebp)
00000ab3	movl	%eax,0xd4(%ebp)
00000ab6	cmpl	$0x00ffffff,%esi
00000abc	movl	%ecx,%edi
00000abe	jbe	0x00000acb
00000ac0	movl	0xf0(%ebp),%eax
00000ac3	movl	0xec(%ebp),%ecx
00000ac6	movl	0xe8(%ebp),%ebx
00000ac9	jmp	0x00000aee
00000acb	movl	$0x00000001,%eax
00000ad0	movl	0xec(%ebp),%ecx
00000ad3	cmpl	0xdc(%ebp),%ecx
00000ad6	movl	0xe8(%ebp),%ebx
00000ad9	je	0x00000c70
00000adf	movl	0xf0(%ebp),%edx
00000ae2	shll	$0x08,%edx
00000ae5	movzbl	(%ecx),%eax
00000ae8	orl	%edx,%eax
00000aea	incl	%ecx
00000aeb	shll	$0x08,%esi
00000aee	movl	%ecx,0xec(%ebp)
00000af1	movl	%ebx,%ecx
00000af3	movl	(%edi,%ecx,4),%edx
00000af6	movl	%esi,%edi
00000af8	movl	%edi,%esi
00000afa	shrl	$0x0b,%esi
00000afd	imull	%edx,%esi
00000b00	cmpl	%esi,%eax
00000b02	jae	0x00000b25
00000b04	movl	$0x00000800,%ebx
00000b09	subl	%edx,%ebx
00000b0b	shrl	$0x05,%ebx
00000b0e	addl	%edx,%ebx
00000b10	movl	0xd8(%ebp),%edx
00000b13	movl	%ebx,(%edx,%ecx,4)
00000b16	addl	%ecx,%ecx
00000b18	movl	%ecx,0xe8(%ebp)
00000b1b	movl	%eax,0xf0(%ebp)
00000b1e	movl	%edx,%edi
00000b20	movl	0xe0(%ebp),%edx
00000b23	jmp	0x00000b4a
00000b25	movl	%edx,%ebx
00000b27	shrl	$0x05,%ebx
00000b2a	subl	%ebx,%edx
00000b2c	movl	0xd8(%ebp),%ebx
00000b2f	movl	%edx,(%ebx,%ecx,4)
00000b32	movl	0xe0(%ebp),%edx
00000b35	orl	%edx,0xc4(%ebp)
00000b38	subl	%esi,%eax
00000b3a	subl	%esi,%edi
00000b3c	leal	0x01(%ecx,%ecx),%ecx
00000b40	movl	%ecx,0xe8(%ebp)
00000b43	movl	%eax,0xf0(%ebp)
00000b46	movl	%edi,%esi
00000b48	movl	%ebx,%edi
00000b4a	movl	%edi,%ecx
00000b4c	addl	%edx,%edx
00000b4e	movl	0xd4(%ebp),%eax
00000b51	decl	%eax
00000b52	jne	0x00000ab0
00000b58	movl	%esi,0xe0(%ebp)
00000b5b	movl	0xc4(%ebp),%ecx
00000b5e	incl	%ecx
00000b5f	je	0x00000c42
00000b65	movl	%ecx,0xc4(%ebp)
00000b68	movl	$0x00000001,%eax
00000b6d	cmpl	0xcc(%ebp),%ecx
00000b70	ja	0x00000c70
00000b76	movl	0xa0(%ebp),%edi
00000b79	addl	$0xfe,%edi
00000b7c	subl	0xa8(%ebp),%edi
00000b7f	subl	0xa4(%ebp),%edi
00000b82	movl	0xcc(%ebp),%edx
00000b85	leal	0x01(%edx),%ebx
00000b88	movl	0x1c(%ebp),%ecx
00000b8b	cmpl	%ecx,%ebx
00000b8d	movl	%ebx,%eax
00000b8f	cmovbl	%ecx,%eax
00000b92	movl	%edx,%esi
00000b94	subl	%eax,%esi
00000b96	cmpl	%edi,%esi
00000b98	cmovbel	%edi,%esi
00000b9b	movl	0x18(%ebp),%eax
00000b9e	leal	(%eax,%edx),%eax
00000ba1	cmpl	%ebx,%ecx
00000ba3	cmoval	%ecx,%ebx
00000ba6	movl	%edx,%ecx
00000ba8	subl	%ebx,%ecx
00000baa	subl	%esi,%edx
00000bac	movl	%edx,0xcc(%ebp)
00000baf	cmpl	%edi,%ecx
00000bb1	cmovbel	%edi,%ecx
00000bb4	negl	%ecx
00000bb6	movl	0xc4(%ebp),%esi
00000bb9	negl	%esi
00000bbb	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000bc0	movb	(%eax,%esi),%dl
00000bc3	movb	%dl,(%eax)
00000bc5	incl	%eax
00000bc6	decl	%ecx
00000bc7	jne	0x00000bc0
00000bc9	movb	%dl,0xe8(%ebp)
00000bcc	movl	0xd0(%ebp),%eax
00000bcf	movl	%eax,0xb0(%ebp)
00000bd2	movl	0x9c(%ebp),%eax
00000bd5	movl	%eax,0xa8(%ebp)
00000bd8	movl	0xcc(%ebp),%eax
00000bdb	movl	0xe0(%ebp),%esi
00000bde	movl	0xec(%ebp),%edi
00000be1	movl	0xc8(%ebp),%ecx
00000be4	jmp	0x00000c2e
00000be6	movl	$0x00000800,%esi
00000beb	subl	%edx,%esi
00000bed	shrl	$0x05,%esi
00000bf0	addl	%edx,%esi
00000bf2	movl	0xe4(%ebp),%ecx
00000bf5	movl	%esi,(%ecx,%eax,4)
00000bf8	movl	$0x00000001,%eax
00000bfd	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xcc(%ebp)
00000c01	movl	0xec(%ebp),%edi
00000c04	je	0x00000c70
00000c06	movl	0xcc(%ebp),%edx
00000c09	movl	%edx,%eax
00000c0b	subl	0xc4(%ebp),%eax
00000c0e	movl	0x18(%ebp),%ecx
00000c11	movb	(%ecx,%eax),%al
00000c14	movb	%al,0xe8(%ebp)
00000c17	movb	%al,(%ecx,%edx)
00000c1a	incl	%edx
00000c1b	cmpl	$0x06,0xc8(%ebp)
00000c1f	setg	%al
00000c22	movzbl	%al,%eax
00000c25	leal	0x09(%eax,%eax),%ecx
00000c29	movl	%edx,%eax
00000c2b	movl	0xe0(%ebp),%esi
00000c2e	movl	%ecx,%ebx
00000c30	cmpl	0x1c(%ebp),%eax
00000c33	jb	0x000001b0
00000c39	movl	%edi,0xec(%ebp)
00000c3c	movl	%esi,0xe0(%ebp)
00000c3f	movl	%eax,0xcc(%ebp)
00000c42	cmpl	$0x00ffffff,0xe0(%ebp)
00000c49	jbe	0x00000c50
00000c4b	movl	0xec(%ebp),%ecx
00000c4e	jmp	0x00000c5e
00000c50	movl	$0x00000001,%eax
00000c55	movl	0xec(%ebp),%ecx
00000c58	cmpl	0xdc(%ebp),%ecx
00000c5b	je	0x00000c70
00000c5d	incl	%ecx
00000c5e	subl	0x0c(%ebp),%ecx
00000c61	movl	0x14(%ebp),%eax
00000c64	movl	%ecx,(%eax)
00000c66	movl	0x20(%ebp),%eax
00000c69	movl	0xcc(%ebp),%ecx
00000c6c	movl	%ecx,(%eax)
00000c6e	xorl	%eax,%eax
00000c70	addl	$0x7c,%esp
00000c73	popl	%esi
00000c74	popl	%edi
00000c75	popl	%ebx
00000c76	popl	%ebp
00000c77	ret
00000c78	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::IsCompressed(unsigned char*):
00000c80	movl	0x08(%esp),%ecx
00000c84	testl	%ecx,%ecx
00000c86	je	0x00000c92
00000c88	movb	$0x01,%al
00000c8a	cmpl	$0x414d5a4c,(%ecx)
00000c90	je	0x00000c94
00000c92	xorb	%al,%al
00000c94	movzbl	%al,%eax
00000c97	ret
00000c98	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::GetActualSize(unsigned char*):
00000ca0	xorl	%eax,%eax
00000ca2	movl	0x08(%esp),%ecx
00000ca6	testl	%ecx,%ecx
00000ca8	je	0x00000cb7
00000caa	xorl	%eax,%eax
00000cac	cmpl	$0x414d5a4c,(%ecx)
00000cb2	jne	0x00000cb7
00000cb4	movl	0x04(%ecx),%eax
00000cb7	ret
00000cb8	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::Uncompress(unsigned char*, unsigned char*):
00000cc0	pushl	%ebp
00000cc1	movl	%esp,%ebp
00000cc3	pushl	%ebx
00000cc4	pushl	%edi
00000cc5	pushl	%esi
00000cc6	subl	$0x3c,%esp
00000cc9	xorl	%eax,%eax
00000ccb	movl	0x0c(%ebp),%esi
00000cce	testl	%esi,%esi
00000cd0	je	0x00000da9
00000cd6	xorl	%eax,%eax
00000cd8	cmpl	$0x414d5a4c,(%esi)
00000cde	jne	0x00000da9
00000ce4	movl	0x04(%esi),%edi
00000ce7	xorl	%eax,%eax
00000ce9	testl	%edi,%edi
00000ceb	je	0x00000da9
00000cf1	movb	0x0c(%esi),%al
00000cf4	cmpb	$0xe0,%al
00000cf6	ja	0x00000d40
00000cf8	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe8(%ebp)
00000cff	cmpb	$0x2d,%al
00000d01	jb	0x00000d1a
00000d03	xorl	%ecx,%ecx
00000d05	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000d10	incl	%ecx
00000d11	addb	$0xd3,%al
00000d13	cmpb	$0x2c,%al
00000d15	ja	0x00000d10
00000d17	movl	%ecx,0xe8(%ebp)
00000d1a	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe4(%ebp)
00000d21	xorl	%edx,%edx
00000d23	cmpb	$0x09,%al
00000d25	jb	0x00000d3a
00000d27	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000d30	incl	%edx
00000d31	addb	$0xf7,%al
00000d33	cmpb	$0x08,%al
00000d35	ja	0x00000d30
00000d37	movl	%edx,0xe4(%ebp)
00000d3a	movzbl	%al,%ecx
00000d3d	movl	%ecx,0xe0(%ebp)
00000d40	movl	0x10(%ebp),%ebx
00000d43	addl	%edx,%ecx
00000d45	movl	$0x00000c00,%eax
00000d4a	shll	%cl,%eax
00000d4c	addl	$0x00001cd8,%eax
00000d51	movl	%eax,(%esp)
00000d54	calll	_malloc
00000d59	movl	%eax,0xec(%ebp)
00000d5c	movl	0x08(%esi),%eax
00000d5f	leal	0xd8(%ebp),%ecx
00000d62	movl	%ecx,0x18(%esp)
00000d66	movl	%edi,0x14(%esp)
00000d6a	movl	%ebx,0x10(%esp)
00000d6e	leal	0xdc(%ebp),%ecx
00000d71	movl	%ecx,0x0c(%esp)
00000d75	movl	%eax,0x08(%esp)
00000d79	addl	$0x11,%esi
00000d7c	movl	%esi,0x04(%esp)
00000d80	leal	0xe0(%ebp),%eax
00000d83	movl	%eax,(%esp)
00000d86	calll	LzmaDecode(_CLzmaDecoderState*, unsigned char const*, unsigned int, unsigned int*, unsigned char*, unsigned int, unsigned int*)
00000d8b	movl	%eax,%esi
00000d8d	movl	0xec(%ebp),%eax
00000d90	movl	%eax,(%esp)
00000d93	calll	_free
00000d98	xorl	%eax,%eax
00000d9a	testl	%esi,%esi
00000d9c	jne	0x00000da9
00000d9e	xorl	%eax,%eax
00000da0	movl	0xd8(%ebp),%ecx
00000da3	cmpl	%edi,%ecx
00000da5	jne	0x00000da9
00000da7	movl	%ecx,%eax
00000da9	addl	$0x3c,%esp
00000dac	popl	%esi
00000dad	popl	%edi
00000dae	popl	%ebx
00000daf	popl	%ebp
00000db0	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(lzss.o):
(__TEXT,__text) section
CLZSS::IsCompressed(unsigned char const*):
00000000	movl	0x04(%esp),%ecx
00000004	testl	%ecx,%ecx
00000006	je	0x00000012
00000008	movb	$0x01,%al
0000000a	cmpl	$0x53535a4c,(%ecx)
00000010	je	0x00000014
00000012	xorb	%al,%al
00000014	movzbl	%al,%eax
00000017	ret
00000018	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::GetActualSize(unsigned char const*):
00000020	xorl	%eax,%eax
00000022	movl	0x04(%esp),%ecx
00000026	testl	%ecx,%ecx
00000028	je	0x00000037
0000002a	xorl	%eax,%eax
0000002c	cmpl	$0x53535a4c,(%ecx)
00000032	jne	0x00000037
00000034	movl	0x04(%ecx),%eax
00000037	ret
00000038	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::BuildHash(unsigned char const*):
00000040	pushl	%ebp
00000041	pushl	%ebx
00000042	pushl	%edi
00000043	pushl	%esi
00000044	pushl	%eax
00000045	movl	0x18(%esp),%edi
00000049	movl	0x04(%edi),%ecx
0000004c	movl	0x08(%edi),%edx
0000004f	decl	%edx
00000050	andl	0x1c(%esp),%edx
00000054	shll	$0x04,%edx
00000057	movl	(%ecx,%edx),%ebp
0000005a	leal	(%ecx,%edx),%eax
0000005d	testl	%ebp,%ebp
0000005f	jne	0x00000067
00000061	leal	0x04(%ecx,%edx),%ebx
00000065	jmp	0x000000a1
00000067	movl	%eax,(%esp)
0000006a	leal	0x04(%ecx,%edx),%ebx
0000006e	movl	0x04(%ecx,%edx),%esi
00000072	movl	%edi,%eax
00000074	movl	(%eax),%edi
00000076	movzbl	CLZSS::IsCompressed(unsigned char const*)(%ebp),%ebp
0000007a	testl	%esi,%esi
0000007c	je	0x0000008d
0000007e	movl	%esi,0x04(%edi,%ebp,8)
00000082	movl	(%ebx),%esi
00000084	movl	CLZSS::IsCompressed(unsigned char const*),0x08(%esi)
0000008b	jmp	0x0000009c
0000008d	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%edi,%ebp,8)
00000095	movl	CLZSS::IsCompressed(unsigned char const*),(%edi,%ebp,8)
0000009c	movl	%eax,%edi
0000009e	movl	(%esp),%eax
000000a1	movl	(%edi),%esi
000000a3	movl	0x1c(%esp),%edi
000000a7	movzbl	(%edi),%ebp
000000aa	movl	%edi,(%eax)
000000ac	movl	CLZSS::IsCompressed(unsigned char const*),(%ebx)
000000b2	movl	(%esi,%ebp,8),%edi
000000b5	movl	%edi,0x08(%ecx,%edx)
000000b9	movl	(%esi,%ebp,8),%ecx
000000bc	testl	%ecx,%ecx
000000be	je	0x000000c5
000000c0	movl	%eax,0x04(%ecx)
000000c3	jmp	0x000000c9
000000c5	movl	%eax,0x04(%esi,%ebp,8)
000000c9	movl	%eax,(%esi,%ebp,8)
000000cc	addl	$0x04,%esp
000000cf	popl	%esi
000000d0	popl	%edi
000000d1	popl	%ebx
000000d2	popl	%ebp
000000d3	ret
000000d4	nopw	%cs:CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%ebx
000000e4	pushl	%edi
000000e5	pushl	%esi
000000e6	subl	$0x4c,%esp
000000e9	calll	0x000000ee
000000ee	popl	%edi
000000ef	movl	0x6a23-0xee(%edi),%eax
000000f5	movl	%eax,0xb8(%ebp)
000000f8	movl	(%eax),%eax
000000fa	movl	%eax,0xf0(%ebp)
000000fd	xorl	%esi,%esi
000000ff	cmpl	$0x11,0x10(%ebp)
00000103	jb	0x00000454
00000109	movl	0x6a27-0xee(%edi),%esi
0000010f	movl	0x0000100c(%esi),%eax
00000115	movl	%eax,0xb0(%ebp)
00000118	testl	%eax,%eax
0000011a	je	0x00000186
0000011c	movl	%esi,%ebx
0000011e	movl	0x000019b8(%ebx),%esi
00000124	calll	_ThreadGetCurrentId
00000129	cmpl	%eax,%esi
0000012b	movl	%ebx,%esi
0000012d	jne	0x00000186
0000012f	movl	0x00001014(%esi),%eax
00000135	leal	0x61f9-0xee(%edi),%ecx
0000013b	cmpl	%ecx,(%eax)
0000013d	je	0x00000171
0000013f	subl	CLZSS::GetActualSize(unsigned char const*),%esp
00000142	leal	0x6210-0xee(%edi),%edx
00000148	movl	%edx,0x0c(%esp)
0000014c	movl	%ecx,0x04(%esp)
00000150	movl	%eax,(%esp)
00000153	movl	CLZSS::IsCompressed(unsigned char const*),0x10(%esp)
0000015b	movl	$0x00000001,0x08(%esp)
00000163	calll	CVProfNode::GetSubNode(char const*, int, char const*, int)
00000168	addl	CLZSS::GetActualSize(unsigned char const*),%esp
0000016b	movl	%eax,0x00001014(%esi)
00000171	subl	$0x10,%esp
00000174	movl	%eax,(%esp)
00000177	calll	CVProfNode::EnterScope()
0000017c	addl	$0x10,%esp
0000017f	movb	CLZSS::IsCompressed(unsigned char const*),0x00001010(%esi)
00000186	movl	%esi,0xb4(%ebp)
00000189	movl	0x14(%ebp),%esi
0000018c	movl	0x0c(%ebp),%ebx
0000018f	movl	0x08(%ebp),%edi
00000192	leal	0xfffff800(%esp),%eax
00000199	movl	%eax,%esp
0000019b	movl	%eax,(%edi)
0000019d	subl	$0x10,%esp
000001a0	movl	%eax,(%esp)
000001a3	movl	$0x00000800,0x08(%esp)
000001ab	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%esp)
000001b3	calll	_memset
000001b8	addl	$0x10,%esp
000001bb	movl	0x08(%edi),%eax
000001be	shll	$0x04,%eax
000001c1	movl	%esp,%ecx
000001c3	subl	%eax,%ecx
000001c5	movl	%ecx,%esp
000001c7	movl	%ecx,0x04(%edi)
000001ca	movl	%ebx,%edi
000001cc	subl	$0x10,%esp
000001cf	movl	%eax,0x08(%esp)
000001d3	movl	%ecx,(%esp)
000001d6	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%esp)
000001de	calll	_memset
000001e3	addl	$0x10,%esp
000001e6	movl	$0x53535a4c,(%esi)
000001ec	movl	0x10(%ebp),%eax
000001ef	movl	%eax,0x04(%esi)
000001f2	leal	0xf0(%eax,%esi),%ecx
000001f6	movl	%ecx,0xbc(%ebp)
000001f9	leal	0x08(%esi),%ebx
000001fc	movl	CLZSS::IsCompressed(unsigned char const*),0xd4(%ebp)
00000203	movl	CLZSS::IsCompressed(unsigned char const*),0xd0(%ebp)
0000020a	xorl	%edx,%edx
0000020c	jmp	0x00000241
0000020e	nop
00000210	movl	%edx,0x04(%edi,%esi,8)
00000214	movl	%edx,(%edi,%esi,8)
00000217	movl	CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)(%ebp),%ecx
0000021a	decl	%ecx
0000021b	movl	0xdc(%ebp),%edi
0000021e	movl	0x08(%ebp),%edx
00000221	jne	0x00000320
00000227	movl	0xcc(%ebp),%eax
0000022a	subl	0xe8(%ebp),%eax
0000022d	xorl	%esi,%esi
0000022f	movl	0xc4(%ebp),%ebx
00000232	cmpl	0xbc(%ebp),%ebx
00000235	movl	0xc0(%ebp),%edi
00000238	movl	0xc8(%ebp),%edx
0000023b	jae	0x000003f3
00000241	testl	%eax,%eax
00000243	movl	%eax,%ecx
00000245	jle	0x000003b3
0000024b	testl	%edx,%edx
0000024d	movl	%edx,%eax
0000024f	je	0x00000256
00000251	movl	%ebx,0xec(%ebp)
00000254	jmp	0x00000262
00000256	movb	CLZSS::IsCompressed(unsigned char const*),(%ebx)
00000259	leal	0x01(%ebx),%edx
0000025c	movl	%edx,0xec(%ebp)
0000025f	movl	%ebx,0xd0(%ebp)
00000262	movl	%ecx,%edx
00000264	movl	%ecx,0xcc(%ebp)
00000267	notl	%edx
00000269	cmpl	$0xef,%edx
0000026c	movl	$0xffffffef,%ecx
00000271	cmovlel	%ecx,%edx
00000274	notl	%edx
00000276	movzbl	(%edi),%esi
00000279	shll	$0x03,%esi
0000027c	movl	0x08(%ebp),%ecx
0000027f	addl	(%ecx),%esi
00000281	incl	%eax
00000282	andl	$0x07,%eax
00000285	movl	%eax,0xc8(%ebp)
00000288	xorl	%eax,%eax
0000028a	jmp	0x00000293
0000028c	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax)
00000290	addl	$0x08,%esi
00000293	movl	(%esi),%esi
00000295	testl	%esi,%esi
00000297	je	0x000002c5
00000299	movl	%eax,0xe8(%ebp)
0000029c	xorl	%ecx,%ecx
0000029e	jmp	0x000002a1
000002a0	incl	%ecx
000002a1	cmpl	%ecx,%edx
000002a3	je	0x000002b3
000002a5	movl	%edi,%eax
000002a7	movl	(%esi),%edi
000002a9	movb	(%edi,%ecx),%bl
000002ac	movl	%eax,%edi
000002ae	cmpb	(%edi,%ecx),%bl
000002b1	je	0x000002a0
000002b3	movl	0xe8(%ebp),%eax
000002b6	cmpl	%eax,%ecx
000002b8	jle	0x000002c1
000002ba	movl	(%esi),%eax
000002bc	movl	%eax,0xd4(%ebp)
000002bf	movl	%ecx,%eax
000002c1	cmpl	%ecx,%edx
000002c3	jne	0x00000290
000002c5	movl	0xd0(%ebp),%edx
000002c8	movb	(%edx),%cl
000002ca	shrb	%cl
000002cc	cmpl	$0x02,%eax
000002cf	jg	0x000002e3
000002d1	movb	%cl,(%edx)
000002d3	movb	(%edi),%cl
000002d5	movl	0xec(%ebp),%edx
000002d8	movb	%cl,(%edx)
000002da	movl	$0x00000001,%eax
000002df	movl	%edx,%ecx
000002e1	jmp	0x00000309
000002e3	orb	$0x80,%cl
000002e6	movb	%cl,(%edx)
000002e8	movl	%edi,%ecx
000002ea	subl	0xd4(%ebp),%ecx
000002ed	decl	%ecx
000002ee	movl	%ecx,%edx
000002f0	shrl	$0x04,%edx
000002f3	movl	0xec(%ebp),%esi
000002f6	movb	%dl,(%esi)
000002f8	shll	$0x04,%ecx
000002fb	leal	0x000000ff(%eax),%edx
00000301	orl	%ecx,%edx
00000303	movb	%dl,0x01(%esi)
00000306	incl	%esi
00000307	movl	%esi,%ecx
00000309	movl	0x08(%ebp),%edx
0000030c	movl	%eax,0xe8(%ebp)
0000030f	incl	%ecx
00000310	movl	%ecx,0xc4(%ebp)
00000313	movl	%eax,%ecx
00000315	leal	(%edi,%eax),%eax
00000318	movl	%eax,0xc0(%ebp)
0000031b	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
00000320	movl	%ecx,CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)(%ebp)
00000323	movl	%edi,0xe4(%ebp)
00000326	movl	0x04(%edx),%ebx
00000329	movl	0x08(%edx),%ecx
0000032c	decl	%ecx
0000032d	andl	%edi,%ecx
0000032f	shll	$0x04,%ecx
00000332	movl	(%ebx,%ecx),%esi
00000335	leal	(%ebx,%ecx),%eax
00000338	movl	%eax,0xd8(%ebp)
0000033b	leal	0x01(%edi),%eax
0000033e	movl	%eax,0xdc(%ebp)
00000341	testl	%esi,%esi
00000343	leal	0x04(%ebx,%ecx),%eax
00000347	jne	0x0000034e
00000349	movl	%eax,0xec(%ebp)
0000034c	jmp	0x00000383
0000034e	movl	%eax,0xec(%ebp)
00000351	movl	%edx,%eax
00000353	movl	0x04(%ebx,%ecx),%edx
00000357	movl	(%eax),%edi
00000359	movzbl	(%esi),%esi
0000035c	testl	%edx,%edx
0000035e	je	0x00000372
00000360	movl	%edx,0x04(%edi,%esi,8)
00000364	movl	0xec(%ebp),%edx
00000367	movl	(%edx),%edx
00000369	movl	CLZSS::IsCompressed(unsigned char const*),0x08(%edx)
00000370	jmp	0x00000381
00000372	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%edi,%esi,8)
0000037a	movl	CLZSS::IsCompressed(unsigned char const*),(%edi,%esi,8)
00000381	movl	%eax,%edx
00000383	movl	(%edx),%edi
00000385	movl	0xe4(%ebp),%eax
00000388	movzbl	(%eax),%esi
0000038b	movl	0xd8(%ebp),%edx
0000038e	movl	%eax,(%edx)
00000390	movl	0xec(%ebp),%eax
00000393	movl	CLZSS::IsCompressed(unsigned char const*),(%eax)
00000399	movl	(%edi,%esi,8),%eax
0000039c	movl	%eax,0x08(%ebx,%ecx)
000003a0	movl	(%edi,%esi,8),%eax
000003a3	testl	%eax,%eax
000003a5	je	0x00000210
000003ab	movl	%edx,0x04(%eax)
000003ae	jmp	0x00000214
000003b3	xorl	%esi,%esi
000003b5	testl	%ecx,%ecx
000003b7	jne	0x000003f3
000003b9	testl	%edx,%edx
000003bb	jne	0x000003c3
000003bd	movb	$0x01,(%ebx)
000003c0	incl	%ebx
000003c1	jmp	0x000003db
000003c3	movl	$0x00000007,%ecx
000003c8	subl	%edx,%ecx
000003ca	movl	0xd0(%ebp),%edx
000003cd	movzbl	(%edx),%eax
000003d0	shrl	%eax
000003d2	orl	$0x00000080,%eax
000003d7	shrl	%cl,%eax
000003d9	movb	%al,(%edx)
000003db	movl	0x18(%ebp),%eax
000003de	movb	CLZSS::IsCompressed(unsigned char const*),(%ebx)
000003e1	movb	CLZSS::IsCompressed(unsigned char const*),0x01(%ebx)
000003e5	testl	%eax,%eax
000003e7	movl	0x14(%ebp),%esi
000003ea	je	0x000003f3
000003ec	addl	$0x02,%ebx
000003ef	subl	%esi,%ebx
000003f1	movl	%ebx,(%eax)
000003f3	cmpl	CLZSS::IsCompressed(unsigned char const*),0xb0(%ebp)
000003f7	je	0x00000454
000003f9	movl	0xb4(%ebp),%ebx
000003fc	testb	$0x01,0x00001010(%ebx)
00000403	je	0x0000040f
00000405	movl	0x0000100c(%ebx),%eax
0000040b	testl	%eax,%eax
0000040d	je	0x00000454
0000040f	movl	0x000019b8(%ebx),%edi
00000415	calll	_ThreadGetCurrentId
0000041a	cmpl	%eax,%edi
0000041c	jne	0x00000454
0000041e	movl	0x00001014(%ebx),%eax
00000424	subl	$0x10,%esp
00000427	movl	%eax,(%esp)
0000042a	calll	CVProfNode::ExitScope()
0000042f	addl	$0x10,%esp
00000432	movl	0x00001014(%ebx),%ecx
00000438	testb	%al,%al
0000043a	je	0x00000445
0000043c	movl	0x64(%ecx),%ecx
0000043f	movl	%ecx,0x00001014(%ebx)
00000445	leal	0x00001018(%ebx),%eax
0000044b	cmpl	%eax,%ecx
0000044d	sete	0x00001010(%ebx)
00000454	movl	0xb8(%ebp),%eax
00000457	movl	(%eax),%eax
00000459	cmpl	0xf0(%ebp),%eax
0000045c	jne	0x00000468
0000045e	movl	%esi,%eax
00000460	leal	0xf4(%ebp),%esp
00000463	popl	%esi
00000464	popl	%edi
00000465	popl	%ebx
00000466	popl	%ebp
00000467	ret
00000468	calll	___stack_chk_fail
0000046d	nopl	(%eax)
CLZSS::Compress(unsigned char const*, int, unsigned int*):
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	pushl	%edi
00000474	pushl	%esi
00000475	subl	CLZSS::GetActualSize(unsigned char const*),%esp
00000478	movl	0x10(%ebp),%edi
0000047b	movl	%edi,(%esp)
0000047e	calll	_malloc
00000483	movl	%eax,%esi
00000485	movl	0x14(%ebp),%eax
00000488	movl	%eax,0x10(%esp)
0000048c	movl	%esi,0x0c(%esp)
00000490	movl	%edi,0x08(%esp)
00000494	movl	0x0c(%ebp),%eax
00000497	movl	%eax,0x04(%esp)
0000049b	movl	0x08(%ebp),%eax
0000049e	movl	%eax,(%esp)
000004a1	calll	CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)
000004a6	testl	%eax,%eax
000004a8	jne	0x000004b4
000004aa	movl	%esi,(%esp)
000004ad	calll	_free
000004b2	xorl	%esi,%esi
000004b4	movl	%esi,%eax
000004b6	addl	CLZSS::GetActualSize(unsigned char const*),%esp
000004b9	popl	%esi
000004ba	popl	%edi
000004bb	popl	%ebp
000004bc	ret
000004bd	nopl	(%eax)
CLZSS::SafeUncompress(unsigned char const*, unsigned char*, unsigned int):
000004c0	pushl	%ebp
000004c1	pushl	%ebx
000004c2	pushl	%edi
000004c3	pushl	%esi
000004c4	subl	$0x10,%esp
000004c7	xorl	%eax,%eax
000004c9	movl	0x28(%esp),%ecx
000004cd	testl	%ecx,%ecx
000004cf	je	0x00000592
000004d5	xorl	%eax,%eax
000004d7	cmpl	$0x53535a4c,(%ecx)
000004dd	jne	0x00000592
000004e3	movl	0x04(%ecx),%edx
000004e6	xorl	%eax,%eax
000004e8	testl	%edx,%edx
000004ea	je	0x00000592
000004f0	cmpl	0x30(%esp),%edx
000004f4	movl	%edx,(%esp)
000004f7	ja	0x00000592
000004fd	movl	0x2c(%esp),%ebx
00000501	addl	$0x08,%ecx
00000504	xorl	%esi,%esi
00000506	xorl	%eax,%eax
00000508	movl	%esi,%edi
0000050a	jmp	0x00000525
0000050c	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax)
00000510	incl	%edi
00000511	xorl	%eax,%eax
00000513	cmpl	0x30(%esp),%edi
00000517	ja	0x00000592
00000519	movb	(%ecx),%al
0000051b	movb	%al,(%ebx)
0000051d	incl	%ebx
0000051e	movl	0x08(%esp),%eax
00000522	sarl	%eax
00000524	incl	%ecx
00000525	testl	%esi,%esi
00000527	jne	0x0000052d
00000529	movzbl	(%ecx),%eax
0000052c	incl	%ecx
0000052d	movl	%eax,0x08(%esp)
00000531	incl	%esi
00000532	andl	$0x07,%esi
00000535	testb	$0x01,%al
00000537	je	0x00000510
00000539	movzbl	0x01(%ecx),%ebp
0000053d	movl	%ebp,%edx
0000053f	andl	$0x0f,%edx
00000542	je	0x00000587
00000544	leal	0x01(%edx,%edi),%edi
00000548	xorl	%eax,%eax
0000054a	cmpl	0x30(%esp),%edi
0000054e	ja	0x00000592
00000550	movl	%esi,0x0c(%esp)
00000554	leal	0x01(%ecx),%eax
00000557	movl	%eax,0x04(%esp)
0000055b	movl	%ebp,%esi
0000055d	shrl	$0x04,%esi
00000560	movzbl	(%ecx),%ecx
00000563	shll	$0x04,%ecx
00000566	orl	%esi,%ecx
00000568	notl	%ecx
0000056a	andl	$0x0f,%ebp
0000056d	incl	%ebp
0000056e	movl	%ebx,%esi
00000570	movb	(%esi,%ecx),%al
00000573	movb	%al,(%esi)
00000575	incl	%esi
00000576	decl	%ebp
00000577	jne	0x00000570
00000579	leal	0x01(%edx,%ebx),%ebx
0000057d	movl	0x04(%esp),%ecx
00000581	movl	0x0c(%esp),%esi
00000585	jmp	0x0000051e
00000587	cmpl	(%esp),%edi
0000058a	movl	CLZSS::IsCompressed(unsigned char const*),%eax
0000058f	cmovel	%edi,%eax
00000592	addl	$0x10,%esp
00000595	popl	%esi
00000596	popl	%edi
00000597	popl	%ebx
00000598	popl	%ebp
00000599	ret
0000059a	nopw	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::Uncompress(unsigned char const*, unsigned char*):
000005a0	pushl	%ebp
000005a1	pushl	%ebx
000005a2	pushl	%edi
000005a3	pushl	%esi
000005a4	subl	$0x14,%esp
000005a7	xorl	%eax,%eax
000005a9	movl	0x2c(%esp),%edi
000005ad	testl	%edi,%edi
000005af	je	0x00000680
000005b5	xorl	%eax,%eax
000005b7	cmpl	$0x53535a4c,(%edi)
000005bd	jne	0x00000680
000005c3	movl	0x04(%edi),%ecx
000005c6	movl	%ecx,(%esp)
000005c9	xorl	%eax,%eax
000005cb	testl	%ecx,%ecx
000005cd	je	0x00000680
000005d3	movl	0x30(%esp),%ecx
000005d7	addl	$0x08,%edi
000005da	xorl	%edx,%edx
000005dc	xorl	%esi,%esi
000005de	xorl	%eax,%eax
000005e0	jmp	0x00000641
000005e2	nopw	%cs:CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
000005f0	incl	%edi
000005f1	movb	%bl,(%ecx)
000005f3	incl	%ecx
000005f4	movl	$0x00000001,%ebp
000005f9	jmp	0x00000639
000005fb	movzbl	%bl,%eax
000005fe	addl	$0x02,%edi
00000601	incl	%ebp
00000602	shll	$0x04,%eax
00000605	movl	%edx,%ebx
00000607	shrl	$0x04,%ebx
0000060a	orl	%eax,%ebx
0000060c	notl	%ebx
0000060e	andl	$0x0f,%edx
00000611	incl	%edx
00000612	movl	%ecx,%eax
00000614	movl	%ecx,0x0c(%esp)
00000618	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
00000620	movb	(%eax,%ebx),%cl
00000623	movb	%cl,(%eax)
00000625	incl	%eax
00000626	decl	%edx
00000627	jne	0x00000620
00000629	movl	0x0c(%esp),%ecx
0000062d	leal	0x01(%esi,%ecx),%ecx
00000631	movl	0x08(%esp),%edx
00000635	movl	0x04(%esp),%esi
00000639	movl	0x10(%esp),%eax
0000063d	addl	%ebp,%eax
0000063f	sarl	%esi
00000641	movl	%eax,0x10(%esp)
00000645	testl	%edx,%edx
00000647	jne	0x0000064d
00000649	movzbl	(%edi),%esi
0000064c	incl	%edi
0000064d	movb	(%edi),%bl
0000064f	incl	%edx
00000650	andl	$0x07,%edx
00000653	movl	%esi,%eax
00000655	testb	$0x01,%al
00000657	je	0x000005f0
00000659	movl	%esi,0x04(%esp)
0000065d	movl	%edx,0x08(%esp)
00000661	movzbl	0x01(%edi),%edx
00000665	movl	%edx,%ebp
00000667	andl	$0x0f,%ebp
0000066a	movl	%edx,%esi
0000066c	andl	$0x0f,%esi
0000066f	jne	0x000005fb
00000671	movl	0x10(%esp),%ecx
00000675	cmpl	(%esp),%ecx
00000678	movl	CLZSS::IsCompressed(unsigned char const*),%eax
0000067d	cmovel	%ecx,%eax
00000680	addl	$0x14,%esp
00000683	popl	%esi
00000684	popl	%edi
00000685	popl	%ebx
00000686	popl	%ebp
00000687	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(mempool.o):
(__TEXT,__text) section
CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	%ecx,CUtlMemoryPool::g_ReportFunc-0x5(%eax)
00000010	ret
00000011	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int):
00000020	pushl	%edi
00000021	pushl	%esi
00000022	calll	0x00000027
00000027	popl	%ecx
00000028	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esp),%eax
0000002c	testl	%eax,%eax
0000002e	movw	$0x0001,%dx
00000032	cmovnew	%ax,%dx
00000036	movl	0x0c(%esp),%eax
0000003a	movw	%dx,0x18(%eax)
0000003e	movl	0x10(%esp),%esi
00000042	movl	$0x00000003,%edi
00000047	cmpl	$0x04,%esi
0000004a	leal	0xff(%esi),%esi
0000004d	cmovbl	%edi,%esi
00000050	movzwl	%dx,%edx
00000053	addl	%edx,%esi
00000055	negl	%edx
00000057	andl	%esi,%edx
00000059	movl	%edx,(%eax)
0000005b	movl	0x14(%esp),%edx
0000005f	movl	%edx,0x04(%eax)
00000062	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x14(%eax)
00000069	movl	0x18(%esp),%edx
0000006d	movl	%edx,0x08(%eax)
00000070	leal	0x2ebe-0x27(%ecx),%ecx
00000076	movl	0x1c(%esp),%edx
0000007a	testl	%edx,%edx
0000007c	cmovnel	%edx,%ecx
0000007f	movl	%ecx,0x1c(%eax)
00000082	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
00000088	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
0000008f	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000096	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
00000099	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000009c	movl	%ecx,0x24(%eax)
0000009f	popl	%esi
000000a0	popl	%edi
000000a1	jmp	CUtlMemoryPool::AddNewBlob()
000000a6	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int):
000000b0	pushl	%edi
000000b1	pushl	%esi
000000b2	calll	0x000000b7
000000b7	popl	%ecx
000000b8	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esp),%eax
000000bc	testl	%eax,%eax
000000be	movw	$0x0001,%dx
000000c2	cmovnew	%ax,%dx
000000c6	movl	0x0c(%esp),%eax
000000ca	movw	%dx,0x18(%eax)
000000ce	movl	0x10(%esp),%esi
000000d2	movl	$0x00000003,%edi
000000d7	cmpl	$0x04,%esi
000000da	leal	0xff(%esi),%esi
000000dd	cmovbl	%edi,%esi
000000e0	movzwl	%dx,%edx
000000e3	addl	%edx,%esi
000000e5	negl	%edx
000000e7	andl	%esi,%edx
000000e9	movl	%edx,(%eax)
000000eb	movl	0x14(%esp),%edx
000000ef	movl	%edx,0x04(%eax)
000000f2	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x14(%eax)
000000f9	movl	0x18(%esp),%edx
000000fd	movl	%edx,0x08(%eax)
00000100	leal	0x2ebe-0xb7(%ecx),%ecx
00000106	movl	0x1c(%esp),%edx
0000010a	testl	%edx,%edx
0000010c	cmovnel	%edx,%ecx
0000010f	movl	%ecx,0x1c(%eax)
00000112	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
00000118	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
0000011f	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000126	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
00000129	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000012c	movl	%ecx,0x24(%eax)
0000012f	popl	%esi
00000130	popl	%edi
00000131	jmp	CUtlMemoryPool::AddNewBlob()
00000136	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Init():
00000140	movl	0x04(%esp),%eax
00000144	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
0000014a	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
00000151	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000158	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
0000015b	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000015e	movl	%ecx,0x24(%eax)
00000161	ret
00000162	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::AddNewBlob():
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x0c,%esp
00000179	movl	0x08(%ebp),%esi
0000017c	movl	0x08(%esi),%ecx
0000017f	movl	$0x00000001,%eax
00000184	testl	%ecx,%ecx
00000186	je	0x00000194
00000188	cmpl	$0x02,%ecx
0000018b	je	0x0000019b
0000018d	movzwl	0x1a(%esi),%eax
00000191	incl	%eax
00000192	jmp	0x0000019b
00000194	cmpw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000199	jne	0x00000203
0000019b	movl	(%esi),%ebx
0000019d	movl	0x04(%esi),%edi
000001a0	imull	%eax,%edi
000001a3	imull	%edi,%ebx
000001a6	movzwl	0x18(%esi),%eax
000001aa	leal	0x0e(%ebx,%eax),%eax
000001ae	movl	%eax,(%esp)
000001b1	calll	_malloc
000001b6	movl	%ebx,0x08(%eax)
000001b9	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%ecx
000001bc	movl	%ecx,0x04(%eax)
000001bf	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%ecx
000001c2	movl	%ecx,(%eax)
000001c4	movl	%eax,0x04(%ecx)
000001c7	movl	0x04(%eax),%ecx
000001ca	movl	%eax,(%ecx)
000001cc	movzwl	0x18(%esi),%ecx
000001d0	leal	0x0b(%eax,%ecx),%eax
000001d4	negl	%ecx
000001d6	andl	%eax,%ecx
000001d8	movl	%ecx,0x10(%esi)
000001db	decl	%edi
000001dc	testl	%edi,%edi
000001de	jg	0x000001e4
000001e0	movl	%ecx,%eax
000001e2	jmp	0x000001f9
000001e4	movl	%ecx,%eax
000001e6	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
000001f0	addl	(%esi),%eax
000001f2	movl	%eax,(%ecx)
000001f4	decl	%edi
000001f5	movl	%eax,%ecx
000001f7	jne	0x000001f0
000001f9	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),(%eax)
000001ff	incw	0x1a(%esi)
00000203	addl	$0x0c,%esp
00000206	popl	%esi
00000207	popl	%edi
00000208	popl	%ebx
00000209	popl	%ebp
0000020a	ret
0000020b	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::~CUtlMemoryPool():
00000210	pushl	%ebp
00000211	movl	%esp,%ebp
00000213	pushl	%ebx
00000214	pushl	%edi
00000215	pushl	%esi
00000216	subl	$0x0c,%esp
00000219	calll	0x0000021e
0000021e	popl	%eax
0000021f	movl	0x08(%ebp),%esi
00000222	movl	0x0c(%esi),%ecx
00000225	testl	%ecx,%ecx
00000227	jle	0x00000242
00000229	movl	CUtlMemoryPool::g_ReportFunc-0x21e(%eax),%edx
0000022f	testl	%edx,%edx
00000231	je	0x00000242
00000233	movl	%ecx,0x04(%esp)
00000237	leal	0x2ef5-0x21e(%eax),%eax
0000023d	movl	%eax,(%esp)
00000240	call	*%edx
00000242	movl	0x24(%esi),%eax
00000245	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
00000248	cmpl	%edi,%eax
0000024a	je	0x00000261
0000024c	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
00000250	movl	0x04(%eax),%ebx
00000253	movl	%eax,(%esp)
00000256	calll	_free
0000025b	cmpl	%edi,%ebx
0000025d	movl	%ebx,%eax
0000025f	jne	0x00000250
00000261	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000267	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
0000026e	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
00000275	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
00000278	movl	%edi,0x24(%esi)
0000027b	addl	$0x0c,%esp
0000027e	popl	%esi
0000027f	popl	%edi
00000280	popl	%ebx
00000281	popl	%ebp
00000282	ret
00000283	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::~CUtlMemoryPool():
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%ebx
00000294	pushl	%edi
00000295	pushl	%esi
00000296	subl	$0x0c,%esp
00000299	calll	0x0000029e
0000029e	popl	%eax
0000029f	movl	0x08(%ebp),%esi
000002a2	movl	0x0c(%esi),%ecx
000002a5	testl	%ecx,%ecx
000002a7	jle	0x000002c2
000002a9	movl	CUtlMemoryPool::g_ReportFunc-0x29e(%eax),%edx
000002af	testl	%edx,%edx
000002b1	je	0x000002c2
000002b3	movl	%ecx,0x04(%esp)
000002b7	leal	0x2ef5-0x29e(%eax),%eax
000002bd	movl	%eax,(%esp)
000002c0	call	*%edx
000002c2	movl	0x24(%esi),%eax
000002c5	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
000002c8	cmpl	%edi,%eax
000002ca	je	0x000002e1
000002cc	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
000002d0	movl	0x04(%eax),%ebx
000002d3	movl	%eax,(%esp)
000002d6	calll	_free
000002db	cmpl	%edi,%ebx
000002dd	movl	%ebx,%eax
000002df	jne	0x000002d0
000002e1	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
000002e7	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
000002ee	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
000002f5	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
000002f8	movl	%edi,0x24(%esi)
000002fb	addl	$0x0c,%esp
000002fe	popl	%esi
000002ff	popl	%edi
00000300	popl	%ebx
00000301	popl	%ebp
00000302	ret
00000303	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::ReportLeaks():
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	subl	$0x08,%esp
00000316	calll	0x0000031b
0000031b	popl	%ecx
0000031c	movl	CUtlMemoryPool::g_ReportFunc-0x31b(%ecx),%eax
00000322	testl	%eax,%eax
00000324	je	0x0000033b
00000326	movl	0x08(%ebp),%edx
00000329	movl	0x0c(%edx),%edx
0000032c	movl	%edx,0x04(%esp)
00000330	leal	0x2ef5-0x31b(%ecx),%ecx
00000336	movl	%ecx,(%esp)
00000339	call	*%eax
0000033b	addl	$0x08,%esp
0000033e	popl	%ebp
0000033f	ret
CUtlMemoryPool::Clear():
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%edi
00000345	pushl	%esi
00000346	subl	$0x0c,%esp
00000349	movl	0x08(%ebp),%esi
0000034c	movl	0x24(%esi),%eax
0000034f	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
00000352	cmpl	%edi,%eax
00000354	je	0x00000371
00000356	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
00000360	movl	0x04(%eax),%ebx
00000363	movl	%eax,(%esp)
00000366	calll	_free
0000036b	cmpl	%edi,%ebx
0000036d	movl	%ebx,%eax
0000036f	jne	0x00000360
00000371	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000377	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
0000037e	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
00000385	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
00000388	movl	%edi,0x24(%esi)
0000038b	addl	$0x0c,%esp
0000038e	popl	%esi
0000038f	popl	%edi
00000390	popl	%ebx
00000391	popl	%ebp
00000392	ret
00000393	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Alloc():
000003a0	pushl	%ebp
000003a1	movl	%esp,%ebp
000003a3	pushl	%esi
000003a4	pushl	%eax
000003a5	movl	0x08(%ebp),%esi
000003a8	movl	0x10(%esi),%ecx
000003ab	testl	%ecx,%ecx
000003ad	jne	0x000003c8
000003af	xorl	%eax,%eax
000003b1	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%esi)
000003b5	je	0x000003e1
000003b7	movl	%esi,(%esp)
000003ba	calll	CUtlMemoryPool::AddNewBlob()
000003bf	movl	0x10(%esi),%ecx
000003c2	xorl	%eax,%eax
000003c4	testl	%ecx,%ecx
000003c6	je	0x000003e1
000003c8	movl	0x0c(%esi),%eax
000003cb	incl	%eax
000003cc	movl	%eax,0x0c(%esi)
000003cf	movl	0x14(%esi),%edx
000003d2	cmpl	%eax,%edx
000003d4	cmovgl	%edx,%eax
000003d7	movl	%eax,0x14(%esi)
000003da	movl	(%ecx),%eax
000003dc	movl	%eax,0x10(%esi)
000003df	movl	%ecx,%eax
000003e1	addl	$0x04,%esp
000003e4	popl	%esi
000003e5	popl	%ebp
000003e6	ret
000003e7	nopw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Alloc(unsigned long):
000003f0	pushl	%ebp
000003f1	movl	%esp,%ebp
000003f3	pushl	%esi
000003f4	pushl	%eax
000003f5	movl	0x08(%ebp),%esi
000003f8	movl	(%esi),%ecx
000003fa	xorl	%eax,%eax
000003fc	cmpl	0x0c(%ebp),%ecx
000003ff	jb	0x0000043a
00000401	movl	0x10(%esi),%ecx
00000404	testl	%ecx,%ecx
00000406	jne	0x00000421
00000408	xorl	%eax,%eax
0000040a	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%esi)
0000040e	je	0x0000043a
00000410	movl	%esi,(%esp)
00000413	calll	CUtlMemoryPool::AddNewBlob()
00000418	movl	0x10(%esi),%ecx
0000041b	xorl	%eax,%eax
0000041d	testl	%ecx,%ecx
0000041f	je	0x0000043a
00000421	movl	0x0c(%esi),%eax
00000424	incl	%eax
00000425	movl	%eax,0x0c(%esi)
00000428	movl	0x14(%esi),%edx
0000042b	cmpl	%eax,%edx
0000042d	cmovgl	%edx,%eax
00000430	movl	%eax,0x14(%esi)
00000433	movl	(%ecx),%eax
00000435	movl	%eax,0x10(%esi)
00000438	movl	%ecx,%eax
0000043a	addl	$0x04,%esp
0000043d	popl	%esi
0000043e	popl	%ebp
0000043f	ret
CUtlMemoryPool::AllocZero():
00000440	pushl	%ebp
00000441	movl	%esp,%ebp
00000443	pushl	%ebx
00000444	pushl	%edi
00000445	pushl	%esi
00000446	subl	$0x0c,%esp
00000449	movl	0x08(%ebp),%edi
0000044c	movl	(%edi),%esi
0000044e	movl	0x10(%edi),%ebx
00000451	testl	%ebx,%ebx
00000453	jne	0x0000046e
00000455	xorl	%eax,%eax
00000457	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%edi)
0000045b	je	0x000004a1
0000045d	movl	%edi,(%esp)
00000460	calll	CUtlMemoryPool::AddNewBlob()
00000465	movl	0x10(%edi),%ebx
00000468	xorl	%eax,%eax
0000046a	testl	%ebx,%ebx
0000046c	je	0x000004a1
0000046e	movl	0x0c(%edi),%eax
00000471	incl	%eax
00000472	movl	%eax,0x0c(%edi)
00000475	movl	0x14(%edi),%ecx
00000478	cmpl	%eax,%ecx
0000047a	cmovgl	%ecx,%eax
0000047d	movl	%eax,0x14(%edi)
00000480	movl	(%ebx),%eax
00000482	movl	%eax,0x10(%edi)
00000485	xorl	%eax,%eax
00000487	testl	%ebx,%ebx
00000489	je	0x000004a1
0000048b	movl	%esi,0x08(%esp)
0000048f	movl	%ebx,(%esp)
00000492	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x04(%esp)
0000049a	calll	_memset
0000049f	movl	%ebx,%eax
000004a1	addl	$0x0c,%esp
000004a4	popl	%esi
000004a5	popl	%edi
000004a6	popl	%ebx
000004a7	popl	%ebp
000004a8	ret
000004a9	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
CUtlMemoryPool::AllocZero(unsigned long):
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%ebx
000004b4	pushl	%edi
000004b5	pushl	%esi
000004b6	subl	$0x0c,%esp
000004b9	xorl	%eax,%eax
000004bb	movl	0x0c(%ebp),%esi
000004be	movl	0x08(%ebp),%edi
000004c1	cmpl	%esi,(%edi)
000004c3	jb	0x00000518
000004c5	movl	0x10(%edi),%ebx
000004c8	testl	%ebx,%ebx
000004ca	jne	0x000004e5
000004cc	xorl	%eax,%eax
000004ce	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%edi)
000004d2	je	0x00000518
000004d4	movl	%edi,(%esp)
000004d7	calll	CUtlMemoryPool::AddNewBlob()
000004dc	movl	0x10(%edi),%ebx
000004df	xorl	%eax,%eax
000004e1	testl	%ebx,%ebx
000004e3	je	0x00000518
000004e5	movl	0x0c(%edi),%eax
000004e8	incl	%eax
000004e9	movl	%eax,0x0c(%edi)
000004ec	movl	0x14(%edi),%ecx
000004ef	cmpl	%eax,%ecx
000004f1	cmovgl	%ecx,%eax
000004f4	movl	%eax,0x14(%edi)
000004f7	movl	(%ebx),%eax
000004f9	movl	%eax,0x10(%edi)
000004fc	xorl	%eax,%eax
000004fe	testl	%ebx,%ebx
00000500	je	0x00000518
00000502	movl	%esi,0x08(%esp)
00000506	movl	%ebx,(%esp)
00000509	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x04(%esp)
00000511	calll	_memset
00000516	movl	%ebx,%eax
00000518	addl	$0x0c,%esp
0000051b	popl	%esi
0000051c	popl	%edi
0000051d	popl	%ebx
0000051e	popl	%ebp
0000051f	ret
CUtlMemoryPool::Free(void*):
00000520	movl	0x08(%esp),%eax
00000524	testl	%eax,%eax
00000526	je	0x00000537
00000528	movl	0x04(%esp),%ecx
0000052c	decl	0x0c(%ecx)
0000052f	movl	0x10(%ecx),%edx
00000532	movl	%edx,(%eax)
00000534	movl	%eax,0x10(%ecx)
00000537	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(memstack.o):
(__TEXT,__text) section
CMemoryStack::CMemoryStack():
00000000	movl	0x04(%esp),%eax
00000004	movl	CMemoryStack::CMemoryStack(),0x04(%eax)
0000000b	movl	CMemoryStack::CMemoryStack(),(%eax)
00000011	movl	CMemoryStack::CMemoryStack(),0x0c(%eax)
00000018	movl	CMemoryStack::CMemoryStack(),0x08(%eax)
0000001f	movl	CMemoryStack::CMemoryStack(),0x10(%eax)
00000026	movl	$0x00000010,0x14(%eax)
0000002d	ret
0000002e	nop
CMemoryStack::CMemoryStack():
00000030	movl	0x04(%esp),%eax
00000034	movl	CMemoryStack::CMemoryStack(),0x04(%eax)
0000003b	movl	CMemoryStack::CMemoryStack(),(%eax)
00000041	movl	CMemoryStack::CMemoryStack(),0x0c(%eax)
00000048	movl	CMemoryStack::CMemoryStack(),0x08(%eax)
0000004f	movl	CMemoryStack::CMemoryStack(),0x10(%eax)
00000056	movl	$0x00000010,0x14(%eax)
0000005d	ret
0000005e	nop
CMemoryStack::~CMemoryStack():
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%esi
00000064	pushl	%eax
00000065	movl	0x08(%ebp),%esi
00000068	movl	0x0c(%esi),%eax
0000006b	testl	%eax,%eax
0000006d	je	0x00000089
0000006f	movl	0x04(%esi),%ecx
00000072	subl	%eax,%ecx
00000074	testl	%ecx,%ecx
00000076	jle	0x0000007a
00000078	movl	%eax,(%esi)
0000007a	movl	%eax,(%esp)
0000007d	calll	_free
00000082	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
00000089	addl	$0x04,%esp
0000008c	popl	%esi
0000008d	popl	%ebp
0000008e	ret
0000008f	nop
CMemoryStack::~CMemoryStack():
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	pushl	%esi
00000094	pushl	%eax
00000095	movl	0x08(%ebp),%esi
00000098	movl	0x0c(%esi),%eax
0000009b	testl	%eax,%eax
0000009d	je	0x000000b9
0000009f	movl	0x04(%esi),%ecx
000000a2	subl	%eax,%ecx
000000a4	testl	%ecx,%ecx
000000a6	jle	0x000000aa
000000a8	movl	%eax,(%esi)
000000aa	movl	%eax,(%esp)
000000ad	calll	_free
000000b2	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
000000b9	addl	$0x04,%esp
000000bc	popl	%esi
000000bd	popl	%ebp
000000be	ret
000000bf	nop
CMemoryStack::Term():
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%esi
000000c4	pushl	%eax
000000c5	movl	0x08(%ebp),%esi
000000c8	movl	0x0c(%esi),%eax
000000cb	testl	%eax,%eax
000000cd	je	0x000000e9
000000cf	movl	0x04(%esi),%ecx
000000d2	subl	%eax,%ecx
000000d4	testl	%ecx,%ecx
000000d6	jle	0x000000da
000000d8	movl	%eax,(%esi)
000000da	movl	%eax,(%esp)
000000dd	calll	_free
000000e2	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
000000e9	addl	$0x04,%esp
000000ec	popl	%esi
000000ed	popl	%ebp
000000ee	ret
000000ef	nop
CMemoryStack::Init(unsigned int, unsigned int, unsigned int, unsigned int):
000000f0	pushl	%ebp
000000f1	movl	%esp,%ebp
000000f3	pushl	%edi
000000f4	pushl	%esi
000000f5	subl	$0x10,%esp
000000f8	movl	0x0c(%ebp),%esi
000000fb	movl	0x08(%ebp),%edi
000000fe	movl	%esi,0x10(%edi)
00000101	movl	0x18(%ebp),%eax
00000104	addl	$0x03,%eax
00000107	andl	$0xfc,%eax
0000010a	movl	%eax,0x14(%edi)
0000010d	movl	%esi,(%esp)
00000110	calll	_malloc
00000115	movl	%eax,0x0c(%edi)
00000118	movl	%eax,(%edi)
0000011a	addl	%eax,%esi
0000011c	movl	%esi,0x04(%edi)
0000011f	movl	%esi,0x08(%edi)
00000122	testl	%eax,%eax
00000124	setne	%al
00000127	movzbl	%al,%eax
0000012a	addl	$0x10,%esp
0000012d	popl	%esi
0000012e	popl	%edi
0000012f	popl	%ebp
00000130	ret
00000131	nopl	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::FreeAll(bool):
00000140	movl	0x04(%esp),%eax
00000144	movl	0x0c(%eax),%ecx
00000147	testl	%ecx,%ecx
00000149	je	0x00000156
0000014b	movl	0x04(%eax),%edx
0000014e	subl	%ecx,%edx
00000150	testl	%edx,%edx
00000152	jle	0x00000156
00000154	movl	%ecx,(%eax)
00000156	ret
00000157	nopw	CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::GetSize():
00000160	movl	0x04(%esp),%eax
00000164	movl	0x10(%eax),%eax
00000167	ret
00000168	nopl	CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::CommitTo(unsigned char*):
00000170	xorl	%eax,%eax
00000172	ret
00000173	nopl	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::FreeToAllocPoint(unsigned int, bool):
00000180	movl	0x08(%esp),%eax
00000184	testl	%eax,%eax
00000186	js	0x00000195
00000188	movl	0x04(%esp),%ecx
0000018c	addl	0x0c(%ecx),%eax
0000018f	cmpl	(%ecx),%eax
00000191	jae	0x00000195
00000193	movl	%eax,(%ecx)
00000195	ret
00000196	nopw	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::Access(void**, unsigned int*):
000001a0	movl	0x04(%esp),%eax
000001a4	movl	0x0c(%eax),%ecx
000001a7	movl	0x08(%esp),%edx
000001ab	movl	%ecx,(%edx)
000001ad	movl	(%eax),%ecx
000001af	subl	0x0c(%eax),%ecx
000001b2	movl	0x0c(%esp),%eax
000001b6	movl	%ecx,(%eax)
000001b8	ret
000001b9	nopl	CMemoryStack::CMemoryStack()(%eax)
CMemoryStack::PrintContents():
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%edi
000001c4	pushl	%esi
000001c5	subl	$0x10,%esp
000001c8	calll	0x000001cd
000001cd	popl	%esi
000001ce	movl	0x08(%ebp),%edi
000001d1	movl	(%edi),%eax
000001d3	subl	0x0c(%edi),%eax
000001d6	movl	%eax,0x04(%esp)
000001da	leal	0x23cf-0x1cd(%esi),%eax
000001e0	movl	%eax,(%esp)
000001e3	calll	_Msg
000001e8	movl	0x10(%edi),%eax
000001eb	movl	%eax,0x04(%esp)
000001ef	leal	0x23eb-0x1cd(%esi),%eax
000001f5	movl	%eax,(%esp)
000001f8	calll	_Msg
000001fd	addl	$0x10,%esp
00000200	popl	%esi
00000201	popl	%edi
00000202	popl	%ebp
00000203	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(NetAdr.o):
(__TEXT,__text) section
netadr_s::CompareAdr(netadr_s const&, bool) const:
00000000	pushl	%edi
00000001	pushl	%esi
00000002	movl	0x0c(%esp),%eax
00000006	movl	(%eax),%esi
00000008	xorb	%dl,%dl
0000000a	movl	0x10(%esp),%ecx
0000000e	cmpl	%esi,(%ecx)
00000010	jne	0x00000059
00000012	leal	0xff(%esi),%edi
00000015	movb	$0x01,%dl
00000017	cmpl	$0x02,%edi
0000001a	jb	0x00000059
0000001c	cmpl	$0x03,%esi
0000001f	jne	0x00000057
00000021	movb	0x14(%esp),%dl
00000025	testb	%dl,%dl
00000027	jne	0x00000035
00000029	movw	0x08(%eax),%si
0000002d	xorb	%dl,%dl
0000002f	cmpw	0x08(%ecx),%si
00000033	jne	0x00000059
00000035	movb	0x04(%ecx),%dl
00000038	cmpb	0x04(%eax),%dl
0000003b	jne	0x00000057
0000003d	movb	0x05(%ecx),%dl
00000040	cmpb	0x05(%eax),%dl
00000043	jne	0x00000057
00000045	movb	0x06(%ecx),%dl
00000048	cmpb	0x06(%eax),%dl
0000004b	jne	0x00000057
0000004d	movb	0x07(%ecx),%cl
00000050	movb	$0x01,%dl
00000052	cmpb	0x07(%eax),%cl
00000055	je	0x00000059
00000057	xorb	%dl,%dl
00000059	movzbl	%dl,%eax
0000005c	popl	%esi
0000005d	popl	%edi
0000005e	ret
0000005f	nop
netadr_s::CompareClassBAdr(netadr_s const&) const:
00000060	pushl	%esi
00000061	movl	0x08(%esp),%eax
00000065	movl	(%eax),%esi
00000067	xorb	%dl,%dl
00000069	movl	0x0c(%esp),%ecx
0000006d	cmpl	%esi,(%ecx)
0000006f	jne	0x00000091
00000071	movb	$0x01,%dl
00000073	cmpl	$0x01,%esi
00000076	je	0x00000091
00000078	cmpl	$0x03,%esi
0000007b	jne	0x0000008f
0000007d	movb	0x04(%ecx),%dl
00000080	cmpb	0x04(%eax),%dl
00000083	jne	0x0000008f
00000085	movb	0x05(%ecx),%cl
00000088	movb	$0x01,%dl
0000008a	cmpb	0x05(%eax),%cl
0000008d	je	0x00000091
0000008f	xorb	%dl,%dl
00000091	movzbl	%dl,%eax
00000094	popl	%esi
00000095	ret
00000096	nopw	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::CompareClassCAdr(netadr_s const&) const:
000000a0	pushl	%esi
000000a1	movl	0x08(%esp),%eax
000000a5	movl	(%eax),%esi
000000a7	xorb	%dl,%dl
000000a9	movl	0x0c(%esp),%ecx
000000ad	cmpl	%esi,(%ecx)
000000af	jne	0x000000d9
000000b1	movb	$0x01,%dl
000000b3	cmpl	$0x01,%esi
000000b6	je	0x000000d9
000000b8	cmpl	$0x03,%esi
000000bb	jne	0x000000d7
000000bd	movb	0x04(%ecx),%dl
000000c0	cmpb	0x04(%eax),%dl
000000c3	jne	0x000000d7
000000c5	movb	0x05(%ecx),%dl
000000c8	cmpb	0x05(%eax),%dl
000000cb	jne	0x000000d7
000000cd	movb	0x06(%ecx),%cl
000000d0	movb	$0x01,%dl
000000d2	cmpb	0x06(%eax),%cl
000000d5	je	0x000000d9
000000d7	xorb	%dl,%dl
000000d9	movzbl	%dl,%eax
000000dc	popl	%esi
000000dd	ret
000000de	nop
netadr_s::IsReservedAdr() const:
000000e0	movl	0x04(%esp),%ecx
000000e4	movl	(%ecx),%edx
000000e6	movb	$0x01,%al
000000e8	cmpl	$0x01,%edx
000000eb	je	0x0000012d
000000ed	cmpl	$0x03,%edx
000000f0	jne	0x0000012b
000000f2	movb	0x04(%ecx),%dl
000000f5	movb	$0x01,%al
000000f7	cmpb	$0x7f,%dl
000000fa	je	0x0000010d
000000fc	cmpb	$0xac,%dl
000000ff	je	0x00000114
00000101	cmpb	$0xc0,%dl
00000104	je	0x00000123
00000106	cmpb	$0x0a,%dl
00000109	jne	0x0000012b
0000010b	jmp	0x0000012d
0000010d	cmpb	$0x7f,%dl
00000110	jne	0x0000012b
00000112	jmp	0x0000012d
00000114	movb	0x05(%ecx),%cl
00000117	addb	$0xf0,%cl
0000011a	movb	$0x01,%al
0000011c	cmpb	$0x10,%cl
0000011f	jae	0x0000012b
00000121	jmp	0x0000012d
00000123	movb	$0x01,%al
00000125	cmpb	$0xa7,0x05(%ecx)
00000129	ja	0x0000012d
0000012b	xorb	%al,%al
0000012d	movzbl	%al,%eax
00000130	ret
00000131	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::ToString(bool) const:
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%ebx
00000144	pushl	%edi
00000145	pushl	%esi
00000146	subl	$0x2c,%esp
00000149	calll	0x0000014e
0000014e	popl	%edi
0000014f	leal	0x2cec-0x14e(%edi),%eax
00000155	movl	%eax,0x04(%esp)
00000159	leal	netadr_s::ToString(bool) const::s-0x14e(%edi),%esi
0000015f	movl	%esi,(%esp)
00000162	movl	$0x00000040,0x08(%esp)
0000016a	calll	V_strncpy(char*, char const*, int)
0000016f	movl	0x08(%ebp),%eax
00000172	movl	(%eax),%ecx
00000174	cmpl	$0x03,%ecx
00000177	je	0x000001ae
00000179	cmpl	$0x02,%ecx
0000017c	je	0x000001a6
0000017e	cmpl	$0x01,%ecx
00000181	jne	0x00000227
00000187	leal	0x2cf4-0x14e(%edi),%eax
0000018d	movl	%eax,0x04(%esp)
00000191	movl	%esi,(%esp)
00000194	movl	$0x00000040,0x08(%esp)
0000019c	calll	V_strncpy(char*, char const*, int)
000001a1	jmp	0x00000227
000001a6	leal	0x2cfd-0x14e(%edi),%eax
000001ac	jmp	0x0000018d
000001ae	movzbl	0x07(%eax),%ebx
000001b2	movzbl	0x06(%eax),%edx
000001b6	movzbl	0x05(%eax),%ecx
000001ba	movl	%ecx,0xec(%ebp)
000001bd	movzbl	0x04(%eax),%ecx
000001c1	movl	%ecx,0xf0(%ebp)
000001c4	cmpb	$0x01,0x0c(%ebp)
000001c8	jne	0x000001e8
000001ca	movl	%ebx,0x18(%esp)
000001ce	movl	%edx,0x14(%esp)
000001d2	movl	0xec(%ebp),%eax
000001d5	movl	%eax,0x10(%esp)
000001d9	movl	0xf0(%ebp),%eax
000001dc	movl	%eax,0x0c(%esp)
000001e0	leal	0x2d07-0x14e(%edi),%eax
000001e6	jmp	0x00000213
000001e8	movw	0x08(%eax),%ax
000001ec	rolw	$0x08,%ax
000001f0	movzwl	%ax,%eax
000001f3	movl	%eax,0x1c(%esp)
000001f7	movl	%ebx,0x18(%esp)
000001fb	movl	%edx,0x14(%esp)
000001ff	movl	0xec(%ebp),%eax
00000202	movl	%eax,0x10(%esp)
00000206	movl	0xf0(%ebp),%eax
00000209	movl	%eax,0x0c(%esp)
0000020d	leal	0x2d13-0x14e(%edi),%eax
00000213	movl	%eax,0x08(%esp)
00000217	movl	%esi,(%esp)
0000021a	movl	$0x00000040,0x04(%esp)
00000222	calll	V_snprintf(char*, int, char const*, ...)
00000227	movl	%esi,%eax
00000229	addl	$0x2c,%esp
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	popl	%ebp
00000230	ret
00000231	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsLocalhost() const:
00000240	xorb	%al,%al
00000242	movl	0x04(%esp),%ecx
00000246	cmpb	$0x7f,0x04(%ecx)
0000024a	jne	0x00000263
0000024c	xorb	%al,%al
0000024e	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x05(%ecx)
00000252	jne	0x00000263
00000254	xorb	%al,%al
00000256	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x06(%ecx)
0000025a	jne	0x00000263
0000025c	cmpb	$0x01,0x07(%ecx)
00000260	sete	%al
00000263	movzbl	%al,%eax
00000266	ret
00000267	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsLoopback() const:
00000270	movl	0x04(%esp),%eax
00000274	cmpl	$0x01,(%eax)
00000277	sete	%al
0000027a	movzbl	%al,%eax
0000027d	ret
0000027e	nop
netadr_s::Clear():
00000280	movl	0x04(%esp),%eax
00000284	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000028b	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000291	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
00000297	ret
00000298	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetIP(unsigned char, unsigned char, unsigned char, unsigned char):
000002a0	movb	0x08(%esp),%cl
000002a4	movl	0x04(%esp),%eax
000002a8	movb	%cl,0x04(%eax)
000002ab	movb	0x0c(%esp),%cl
000002af	movb	%cl,0x05(%eax)
000002b2	movb	0x10(%esp),%cl
000002b6	movb	%cl,0x06(%eax)
000002b9	movb	0x14(%esp),%cl
000002bd	movb	%cl,0x07(%eax)
000002c0	ret
000002c1	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetIP(unsigned int):
000002d0	movl	0x08(%esp),%eax
000002d4	bswap	%eax
000002d6	movl	0x04(%esp),%ecx
000002da	movl	%eax,0x04(%ecx)
000002dd	ret
000002de	nop
netadr_s::SetType(netadrtype_t):
000002e0	movl	0x08(%esp),%eax
000002e4	movl	0x04(%esp),%ecx
000002e8	movl	%eax,(%ecx)
000002ea	ret
000002eb	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetType() const:
000002f0	movl	0x04(%esp),%eax
000002f4	movl	(%eax),%eax
000002f6	ret
000002f7	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetPort() const:
00000300	movl	0x04(%esp),%eax
00000304	movw	0x08(%eax),%ax
00000308	rolw	$0x08,%ax
0000030c	movzwl	%ax,%eax
0000030f	ret
netadr_s::GetIPNetworkByteOrder() const:
00000310	movl	0x04(%esp),%eax
00000314	movl	0x04(%eax),%eax
00000317	ret
00000318	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetIPHostByteOrder() const:
00000320	movl	0x04(%esp),%eax
00000324	movl	0x04(%eax),%eax
00000327	bswap	%eax
00000329	ret
0000032a	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::ToSockadr(sockaddr*) const:
00000330	movl	0x08(%esp),%eax
00000334	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000033b	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000341	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x0c(%eax)
00000348	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
0000034f	movl	0x04(%esp),%ecx
00000353	movl	(%ecx),%edx
00000355	cmpl	$0x01,%edx
00000358	je	0x0000038b
0000035a	cmpl	$0x03,%edx
0000035d	je	0x00000378
0000035f	cmpl	$0x02,%edx
00000362	jne	0x0000039e
00000364	movb	$0x02,0x01(%eax)
00000368	movw	0x08(%ecx),%cx
0000036c	movw	%cx,0x02(%eax)
00000370	movl	$0xffffffff,0x04(%eax)
00000377	ret
00000378	movb	$0x02,0x01(%eax)
0000037c	movl	0x04(%ecx),%edx
0000037f	movl	%edx,0x04(%eax)
00000382	movw	0x08(%ecx),%cx
00000386	movw	%cx,0x02(%eax)
0000038a	ret
0000038b	movb	$0x02,0x01(%eax)
0000038f	movw	0x08(%ecx),%cx
00000393	movw	%cx,0x02(%eax)
00000397	movl	$0x7f000001,0x04(%eax)
0000039e	ret
0000039f	nop
netadr_s::SetFromSockadr(sockaddr const*):
000003a0	movl	0x08(%esp),%ecx
000003a4	movl	0x04(%esp),%eax
000003a8	cmpb	$0x02,0x01(%ecx)
000003ac	jne	0x000003c8
000003ae	movl	$0x00000003,(%eax)
000003b4	movl	0x04(%ecx),%edx
000003b7	movl	%edx,0x04(%eax)
000003ba	movw	0x02(%ecx),%cx
000003be	movw	%cx,0x08(%eax)
000003c2	movb	$0x01,%al
000003c4	movzbl	%al,%eax
000003c7	ret
000003c8	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
000003cf	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
000003d5	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
000003db	xorb	%al,%al
000003dd	movzbl	%al,%eax
000003e0	ret
000003e1	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsValid() const:
000003f0	xorb	%cl,%cl
000003f2	movl	0x04(%esp),%eax
000003f6	cmpw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
000003fb	je	0x00000423
000003fd	xorb	%cl,%cl
000003ff	cmpl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000402	je	0x00000423
00000404	movb	$0x01,%cl
00000406	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000040a	jne	0x00000423
0000040c	movb	$0x01,%cl
0000040e	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x05(%eax)
00000412	jne	0x00000423
00000414	movb	$0x01,%cl
00000416	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x06(%eax)
0000041a	jne	0x00000423
0000041c	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x07(%eax)
00000420	setne	%cl
00000423	movzbl	%cl,%eax
00000426	ret
00000427	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetPort(unsigned short):
00000430	movw	0x08(%esp),%ax
00000435	rolw	$0x08,%ax
00000439	movl	0x04(%esp),%ecx
0000043d	movw	%ax,0x08(%ecx)
00000441	ret
00000442	nopw	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetFromString(char const*, bool):
00000450	pushl	%ebp
00000451	movl	%esp,%ebp
00000453	pushl	%ebx
00000454	pushl	%edi
00000455	pushl	%esi
00000456	subl	$0x0000013c,%esp
0000045c	calll	0x00000461
00000461	popl	%edi
00000462	movl	0x36eb-0x461(%edi),%eax
00000468	movl	%eax,0xfffffed8(%ebp)
0000046e	movl	(%eax),%eax
00000470	movl	%eax,0xf0(%ebp)
00000473	movl	0x08(%ebp),%ebx
00000476	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%ebx)
0000047d	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%ebx)
00000483	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%ebx)
00000489	movl	$0x00000003,(%ebx)
0000048f	movl	0x0c(%ebp),%esi
00000492	testl	%esi,%esi
00000494	je	0x000005de
0000049a	movb	(%esi),%al
0000049c	addb	$0xd0,%al
0000049e	cmpb	$0x09,%al
000004a0	ja	0x00000577
000004a6	movl	%esi,(%esp)
000004a9	movl	$0x0000002e,0x04(%esp)
000004b1	calll	_strchr
000004b6	testl	%eax,%eax
000004b8	je	0x00000577
000004be	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffeec(%ebp)
000004c8	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee8(%ebp)
000004d2	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee4(%ebp)
000004dc	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee0(%ebp)
000004e6	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffedc(%ebp)
000004f0	leal	0xfffffedc(%ebp),%eax
000004f6	movl	%eax,0x18(%esp)
000004fa	leal	0xfffffee0(%ebp),%eax
00000500	movl	%eax,0x14(%esp)
00000504	leal	0xfffffee4(%ebp),%eax
0000050a	movl	%eax,0x10(%esp)
0000050e	leal	0xfffffee8(%ebp),%eax
00000514	movl	%eax,0x0c(%esp)
00000518	leal	0xfffffeec(%ebp),%eax
0000051e	movl	%eax,0x08(%esp)
00000522	leal	0x2d22-0x461(%edi),%eax
00000528	movl	%eax,0x04(%esp)
0000052c	movl	%esi,(%esp)
0000052f	calll	_sscanf
00000534	cmpl	$0x04,%eax
00000537	jl	0x000005de
0000053d	movb	0xfffffee0(%ebp),%cl
00000543	movb	0xfffffee4(%ebp),%dl
00000549	movb	0xfffffee8(%ebp),%ch
0000054f	movb	0xfffffeec(%ebp),%dh
00000555	movb	%dh,0x04(%ebx)
00000558	movb	%ch,0x05(%ebx)
0000055b	movb	%dl,0x06(%ebx)
0000055e	movb	%cl,0x07(%ebx)
00000561	cmpl	$0x05,%eax
00000564	jne	0x000005de
00000566	movw	0xfffffedc(%ebp),%ax
0000056d	rolw	$0x08,%ax
00000571	movw	%ax,0x08(%ebx)
00000575	jmp	0x000005de
00000577	movb	0x10(%ebp),%al
0000057a	cmpb	$0x01,%al
0000057c	jne	0x000005de
0000057e	movl	%esi,0x04(%esp)
00000582	leal	0xfffffef0(%ebp),%edi
00000588	movl	%edi,(%esp)
0000058b	movl	$0x00000100,0x08(%esp)
00000593	calll	V_strncpy(char*, char const*, int)
00000598	movl	%edi,(%esp)
0000059b	movl	$0x0000003a,0x04(%esp)
000005a3	calll	_strchr
000005a8	movl	%eax,%esi
000005aa	testl	%esi,%esi
000005ac	je	0x000005b1
000005ae	movb	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
000005b1	movl	%edi,(%esp)
000005b4	calll	_gethostbyname
000005b9	testl	%eax,%eax
000005bb	je	0x000005de
000005bd	movl	0x10(%eax),%eax
000005c0	movl	(%eax),%eax
000005c2	movl	(%eax),%eax
000005c4	movl	%eax,0x04(%ebx)
000005c7	testl	%esi,%esi
000005c9	je	0x000005de
000005cb	leal	0x01(%esi),%eax
000005ce	movl	%eax,(%esp)
000005d1	calll	_atoi
000005d6	rolw	$0x08,%ax
000005da	movw	%ax,0x08(%ebx)
000005de	movl	0xfffffed8(%ebp),%eax
000005e4	movl	(%eax),%eax
000005e6	cmpl	0xf0(%ebp),%eax
000005e9	jne	0x000005f6
000005eb	addl	$0x0000013c,%esp
000005f1	popl	%esi
000005f2	popl	%edi
000005f3	popl	%ebx
000005f4	popl	%ebp
000005f5	ret
000005f6	calll	___stack_chk_fail
000005fb	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::operator<(netadr_s const&) const:
00000600	pushl	%edi
00000601	pushl	%esi
00000602	movl	0x0c(%esp),%eax
00000606	movl	0x04(%eax),%esi
00000609	movl	0x10(%esp),%ecx
0000060d	movl	0x04(%ecx),%edi
00000610	movb	$0x01,%dl
00000612	cmpl	%esi,%edi
00000614	jb	0x00000627
00000616	xorb	%dl,%dl
00000618	cmpl	%esi,%edi
0000061a	ja	0x00000627
0000061c	movw	0x08(%ecx),%cx
00000620	cmpw	0x08(%eax),%cx
00000624	setb	%dl
00000627	movzbl	%dl,%eax
0000062a	popl	%esi
0000062b	popl	%edi
0000062c	ret
0000062d	nopl	(%eax)
netadr_s::SetFromSocket(int):
00000630	pushl	%ebp
00000631	movl	%esp,%ebp
00000633	pushl	%esi
00000634	subl	$0x24,%esp
00000637	movl	0x08(%ebp),%esi
0000063a	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%esi)
00000641	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
00000647	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%esi)
0000064d	movl	$0x00000003,(%esi)
00000653	movl	$0x00000010,0xe4(%ebp)
0000065a	leal	0xe4(%ebp),%eax
0000065d	movl	%eax,0x08(%esp)
00000661	leal	0xe8(%ebp),%eax
00000664	movl	%eax,0x04(%esp)
00000668	movl	0x0c(%ebp),%eax
0000066b	movl	%eax,(%esp)
0000066e	calll	_getsockname$UNIX2003
00000673	testl	%eax,%eax
00000675	jne	0x000006a6
00000677	cmpb	$0x02,0xe9(%ebp)
0000067b	jne	0x00000693
0000067d	movl	$0x00000003,(%esi)
00000683	movl	0xec(%ebp),%eax
00000686	movl	%eax,0x04(%esi)
00000689	movw	0xea(%ebp),%ax
0000068d	movw	%ax,0x08(%esi)
00000691	jmp	0x000006a6
00000693	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%esi)
0000069a	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
000006a0	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%esi)
000006a6	addl	$0x24,%esp
000006a9	popl	%esi
000006aa	popl	%ebp
000006ab	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(newbitbuf.o):
(__TEXT,__text) section
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(processor_detect_linux.o):
(__TEXT,__text) section
CheckMMXTechnology():
00000000	pushl	%esi
00000001	movl	$0x00000001,%eax
00000006	pushl	%ebx
00000007	cpuid
00000009	movl	%ebx,%esi
0000000b	popl	%ebx
0000000c	andl	$0x00800000,%edx
00000012	shrl	$0x17,%edx
00000015	movl	%edx,%eax
00000017	popl	%esi
00000018	ret
00000019	nopl	CheckMMXTechnology()(%eax)
CheckSSETechnology():
00000020	pushl	%esi
00000021	movl	$0x00000001,%eax
00000026	pushl	%ebx
00000027	cpuid
00000029	movl	%ebx,%esi
0000002b	popl	%ebx
0000002c	andl	$0x02000000,%edx
00000032	shrl	$0x19,%edx
00000035	movl	%edx,%eax
00000037	popl	%esi
00000038	ret
00000039	nopl	CheckMMXTechnology()(%eax)
CheckSSE2Technology():
00000040	pushl	%esi
00000041	movl	$0x00000001,%eax
00000046	pushl	%ebx
00000047	cpuid
00000049	movl	%ebx,%esi
0000004b	popl	%ebx
0000004c	andl	$0x04000000,%edx
00000052	shrl	$0x1a,%edx
00000055	movl	%edx,%eax
00000057	popl	%esi
00000058	ret
00000059	nopl	CheckMMXTechnology()(%eax)
Check3DNowTechnology():
00000060	pushl	%esi
00000061	movl	$0x80000000,%eax
00000066	pushl	%ebx
00000067	cpuid
00000069	movl	%ebx,%esi
0000006b	popl	%ebx
0000006c	cmpl	$0x80000001,%eax
00000071	jae	0x00000077
00000073	xorb	%dl,%dl
00000075	jmp	0x00000085
00000077	movl	$0x80000001,%eax
0000007c	pushl	%ebx
0000007d	cpuid
0000007f	movl	%ebx,%esi
00000081	popl	%ebx
00000082	shrl	$0x1f,%edx
00000085	movzbl	%dl,%eax
00000088	popl	%esi
00000089	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(rangecheckedvar.o):
(__TEXT,__text) section
CDisableRangeChecks::CDisableRangeChecks():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%esi
00000004	pushl	%eax
00000005	calll	0x0000000a
0000000a	popl	%esi
0000000b	calll	_ThreadInMainThread
00000010	cmpb	$0x01,%al
00000012	jne	0x00000021
00000014	incl	g_nDisables-0xa(%esi)
0000001a	movb	CDisableRangeChecks::CDisableRangeChecks(),_g_bDoRangeChecks-0xa(%esi)
00000021	addl	$0x04,%esp
00000024	popl	%esi
00000025	popl	%ebp
00000026	ret
00000027	nopw	CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::CDisableRangeChecks():
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%esi
00000034	pushl	%eax
00000035	calll	0x0000003a
0000003a	popl	%esi
0000003b	calll	_ThreadInMainThread
00000040	cmpb	$0x01,%al
00000042	jne	0x00000051
00000044	incl	g_nDisables-0x3a(%esi)
0000004a	movb	CDisableRangeChecks::CDisableRangeChecks(),_g_bDoRangeChecks-0x3a(%esi)
00000051	addl	$0x04,%esp
00000054	popl	%esi
00000055	popl	%ebp
00000056	ret
00000057	nopw	CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::~CDisableRangeChecks():
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%esi
00000064	pushl	%eax
00000065	calll	0x0000006a
0000006a	popl	%esi
0000006b	calll	_ThreadInMainThread
00000070	cmpb	$0x01,%al
00000072	jne	0x0000008c
00000074	movl	g_nDisables-0x6a(%esi),%eax
0000007a	decl	%eax
0000007b	movl	%eax,g_nDisables-0x6a(%esi)
00000081	testl	%eax,%eax
00000083	jne	0x0000008c
00000085	movb	$0x01,_g_bDoRangeChecks-0x6a(%esi)
0000008c	addl	$0x04,%esp
0000008f	popl	%esi
00000090	popl	%ebp
00000091	ret
00000092	nopw	%cs:CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::~CDisableRangeChecks():
000000a0	pushl	%ebp
000000a1	movl	%esp,%ebp
000000a3	pushl	%esi
000000a4	pushl	%eax
000000a5	calll	0x000000aa
000000aa	popl	%esi
000000ab	calll	_ThreadInMainThread
000000b0	cmpb	$0x01,%al
000000b2	jne	0x000000cc
000000b4	movl	g_nDisables-0xaa(%esi),%eax
000000ba	decl	%eax
000000bb	movl	%eax,g_nDisables-0xaa(%esi)
000000c1	testl	%eax,%eax
000000c3	jne	0x000000cc
000000c5	movb	$0x01,_g_bDoRangeChecks-0xaa(%esi)
000000cc	addl	$0x04,%esp
000000cf	popl	%esi
000000d0	popl	%ebp
000000d1	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(reliabletimer.o):
(__TEXT,__text) section
CReliableTimer::CReliableTimer():
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	CReliableTimer::CReliableTimer(),0x04(%ecx)
00000011	movl	CReliableTimer::CReliableTimer(),(%ecx)
00000017	movl	CReliableTimer::CReliableTimer(),0x0c(%ecx)
0000001e	movl	CReliableTimer::CReliableTimer(),0x08(%ecx)
00000025	movl	CReliableTimer::CReliableTimer(),0x14(%ecx)
0000002c	movl	CReliableTimer::CReliableTimer(),0x10(%ecx)
00000033	movl	CReliableTimer::sm_nPerformanceFrequency-0x5(%eax),%ecx
00000039	orl	CReliableTimer::sm_nPerformanceFrequency-0x5+0x00000004(%eax),%ecx
0000003f	jne	0x00000053
00000041	movl	0x18d6-0x5(%eax),%ecx
00000047	movsd	(%ecx),%xmm0
0000004b	movsd	%xmm0,CReliableTimer::sm_nPerformanceFrequency-0x5(%eax)
00000053	ret
00000054	nopw	%cs:CReliableTimer::CReliableTimer()(%eax,%eax)
CReliableTimer::CReliableTimer():
00000060	calll	0x00000065
00000065	popl	%eax
00000066	movl	0x04(%esp),%ecx
0000006a	movl	CReliableTimer::CReliableTimer(),0x04(%ecx)
00000071	movl	CReliableTimer::CReliableTimer(),(%ecx)
00000077	movl	CReliableTimer::CReliableTimer(),0x0c(%ecx)
0000007e	movl	CReliableTimer::CReliableTimer(),0x08(%ecx)
00000085	movl	CReliableTimer::CReliableTimer(),0x14(%ecx)
0000008c	movl	CReliableTimer::CReliableTimer(),0x10(%ecx)
00000093	movl	CReliableTimer::sm_nPerformanceFrequency-0x65(%eax),%ecx
00000099	orl	CReliableTimer::sm_nPerformanceFrequency-0x65+0x00000004(%eax),%ecx
0000009f	jne	0x000000b3
000000a1	movl	0x18d6-0x65(%eax),%ecx
000000a7	movsd	(%ecx),%xmm0
000000ab	movsd	%xmm0,CReliableTimer::sm_nPerformanceFrequency-0x65(%eax)
000000b3	ret
000000b4	nopw	%cs:CReliableTimer::CReliableTimer()(%eax,%eax)
CReliableTimer::GetPerformanceCountNow():
000000c0	rdtsc
000000c2	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(snappy-sinksource.o):
(__TEXT,__text) section
snappy::Source::~Source():
00000000	jmp	operator delete(void*)
00000005	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Source::~Source():
00000010	ret
00000011	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Source::~Source():
00000020	ret
00000021	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000030	jmp	operator delete(void*)
00000035	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000040	ret
00000041	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000050	ret
00000051	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::GetAppendBuffer(unsigned long, char*):
00000060	movl	0x0c(%esp),%eax
00000064	ret
00000065	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000070	jmp	operator delete(void*)
00000075	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000080	ret
00000081	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000090	ret
00000091	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Available() const:
000000a0	movl	0x04(%esp),%eax
000000a4	movl	0x08(%eax),%eax
000000a7	ret
000000a8	nopl	snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Peek(unsigned long*):
000000b0	movl	0x04(%esp),%eax
000000b4	movl	0x08(%eax),%ecx
000000b7	movl	0x08(%esp),%edx
000000bb	movl	%ecx,(%edx)
000000bd	movl	0x04(%eax),%eax
000000c0	ret
000000c1	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Skip(unsigned long):
000000d0	movl	0x08(%esp),%eax
000000d4	movl	0x04(%esp),%ecx
000000d8	subl	%eax,0x08(%ecx)
000000db	addl	%eax,0x04(%ecx)
000000de	ret
000000df	nop
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
000000e0	jmp	operator delete(void*)
000000e5	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
000000f0	ret
000000f1	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
00000100	ret
00000101	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::Append(char const*, unsigned long):
00000110	pushl	%ebp
00000111	movl	%esp,%ebp
00000113	pushl	%edi
00000114	pushl	%esi
00000115	subl	snappy::Source::~Source(),%esp
00000118	movl	0x08(%ebp),%esi
0000011b	movl	0x04(%esi),%eax
0000011e	movl	snappy::Source::~Source()(%ebp),%edi
00000121	movl	0x0c(%ebp),%ecx
00000124	cmpl	%ecx,%eax
00000126	je	0x0000013b
00000128	movl	%edi,0x08(%esp)
0000012c	movl	%ecx,0x04(%esp)
00000130	movl	%eax,(%esp)
00000133	calll	_memcpy
00000138	movl	0x04(%esi),%eax
0000013b	addl	%edi,%eax
0000013d	movl	%eax,0x04(%esi)
00000140	addl	snappy::Source::~Source(),%esp
00000143	popl	%esi
00000144	popl	%edi
00000145	popl	%ebp
00000146	ret
00000147	nopw	snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::GetAppendBuffer(unsigned long, char*):
00000150	movl	0x04(%esp),%eax
00000154	movl	0x04(%eax),%eax
00000157	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(snappy-stubs-internal.o):
(__TEXT,__text) section
snappy::Varint::Append32(std::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	movl	0x0c(%ebp),%ecx
00000009	movl	0x08(%ebp),%eax
0000000c	cmpl	$0x7f,%ecx
0000000f	ja	0x0000001c
00000011	movb	%cl,0xfb(%ebp)
00000014	leal	0xfc(%ebp),%ecx
00000017	jmp	0x000000a4
0000001c	movl	%ecx,%edx
0000001e	orl	$0x00000080,%edx
00000024	cmpl	$0x00003fff,%ecx
0000002a	ja	0x0000003a
0000002c	movb	%dl,0xfb(%ebp)
0000002f	shrl	$0x07,%ecx
00000032	movb	%cl,0xfc(%ebp)
00000035	leal	0xfd(%ebp),%ecx
00000038	jmp	0x000000a4
0000003a	cmpl	$0x001fffff,%ecx
00000040	ja	0x0000005e
00000042	movb	%dl,0xfb(%ebp)
00000045	movl	%ecx,%edx
00000047	shrl	$0x07,%edx
0000004a	orl	$0x00000080,%edx
00000050	movb	%dl,0xfc(%ebp)
00000053	shrl	$0x0e,%ecx
00000056	movb	%cl,0xfd(%ebp)
00000059	leal	0xfe(%ebp),%ecx
0000005c	jmp	0x000000a4
0000005e	movb	%dl,0xfb(%ebp)
00000061	movl	%ecx,%edx
00000063	shrl	$0x07,%edx
00000066	orl	$0x00000080,%edx
0000006c	movb	%dl,0xfc(%ebp)
0000006f	movl	%ecx,%edx
00000071	shrl	$0x0e,%edx
00000074	orl	$0x00000080,%edx
0000007a	movb	%dl,0xfd(%ebp)
0000007d	movl	%ecx,%edx
0000007f	shrl	$0x15,%edx
00000082	cmpl	$0x0fffffff,%ecx
00000088	ja	0x00000092
0000008a	movb	%dl,0xfe(%ebp)
0000008d	leal	0xff(%ebp),%ecx
00000090	jmp	0x000000a4
00000092	orl	$0x00000080,%edx
00000098	movb	%dl,0xfe(%ebp)
0000009b	shrl	$0x1c,%ecx
0000009e	movb	%cl,0xff(%ebp)
000000a1	leal	snappy::Varint::Append32(std::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int)(%ebp),%ecx
000000a4	leal	0xfb(%ebp),%edx
000000a7	subl	%edx,%ecx
000000a9	movl	%ecx,0x08(%esp)
000000ad	movl	%edx,0x04(%esp)
000000b1	movl	%eax,(%esp)
000000b4	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)
000000b9	addl	$0x18,%esp
000000bc	popl	%ebp
000000bd	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(snappy.o):
(__TEXT,__text) section
snappy::MaxCompressedLength(unsigned long):
00000000	movl	0x04(%esp),%ecx
00000004	movl	$0xaaaaaaab,%edx
00000009	movl	%ecx,%eax
0000000b	mull	%edx
0000000d	shrl	$0x02,%edx
00000010	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%ecx,%edx),%eax
00000014	ret
00000015	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*):
00000020	pushl	%ebx
00000021	pushl	%edi
00000022	pushl	%esi
00000023	xorb	%bl,%bl
00000025	movl	0x14(%esp),%esi
00000029	testl	%esi,%esi
0000002b	jle	0x000000c8
00000031	movl	0x18(%esp),%eax
00000035	movl	0x10(%esp),%ecx
00000039	movzbl	(%ecx),%edx
0000003c	movl	%edx,%edi
0000003e	andl	$0x7f,%edi
00000041	testb	%dl,%dl
00000043	js	0x00000048
00000045	incl	%ecx
00000046	jmp	0x000000be
00000048	xorb	%bl,%bl
0000004a	cmpl	$0x02,%esi
0000004d	jl	0x000000c8
0000004f	movzbl	0x01(%ecx),%edx
00000053	movl	%edx,%ebx
00000055	andl	$0x7f,%ebx
00000058	shll	$0x07,%ebx
0000005b	orl	%ebx,%edi
0000005d	testb	%dl,%dl
0000005f	js	0x00000066
00000061	addl	$0x02,%ecx
00000064	jmp	0x000000be
00000066	xorb	%bl,%bl
00000068	cmpl	$0x03,%esi
0000006b	jl	0x000000c8
0000006d	movzbl	0x02(%ecx),%edx
00000071	movl	%edx,%ebx
00000073	andl	$0x7f,%ebx
00000076	shll	$0x0e,%ebx
00000079	orl	%ebx,%edi
0000007b	testb	%dl,%dl
0000007d	js	0x00000084
0000007f	addl	$0x03,%ecx
00000082	jmp	0x000000be
00000084	xorb	%bl,%bl
00000086	cmpl	$0x04,%esi
00000089	jl	0x000000c8
0000008b	movzbl	0x03(%ecx),%edx
0000008f	movl	%edx,%ebx
00000091	andl	$0x7f,%ebx
00000094	shll	$0x15,%ebx
00000097	orl	%ebx,%edi
00000099	testb	%dl,%dl
0000009b	js	0x000000a2
0000009d	addl	$0x04,%ecx
000000a0	jmp	0x000000be
000000a2	xorb	%bl,%bl
000000a4	cmpl	$0x05,%esi
000000a7	jl	0x000000c8
000000a9	movzbl	0x04(%ecx),%edx
000000ad	xorb	%bl,%bl
000000af	cmpb	$0x0f,%dl
000000b2	ja	0x000000c8
000000b4	shll	$0x1c,%edx
000000b7	orl	%edi,%edx
000000b9	addl	$0x05,%ecx
000000bc	movl	%edx,%edi
000000be	xorb	%bl,%bl
000000c0	testl	%ecx,%ecx
000000c2	je	0x000000c8
000000c4	movl	%edi,(%eax)
000000c6	movb	$0x01,%bl
000000c8	movzbl	%bl,%eax
000000cb	popl	%esi
000000cc	popl	%edi
000000cd	popl	%ebx
000000ce	ret
000000cf	nop
snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*):
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%ebx
000000d4	pushl	%edi
000000d5	pushl	%esi
000000d6	subl	$0x4c,%esp
000000d9	calll	0x000000de
000000de	popl	%esi
000000df	movl	$0x00000100,%edi
000000e4	movl	0x0c(%ebp),%eax
000000e7	cmpl	$0x00000101,%eax
000000ec	jb	0x000000fe
000000ee	nop
000000f0	addl	%edi,%edi
000000f2	cmpl	$0x00003fff,%edi
000000f8	jg	0x000000fe
000000fa	cmpl	%eax,%edi
000000fc	jb	0x000000f0
000000fe	leal	0xff(%edi),%eax
00000101	testl	%edi,%eax
00000103	je	0x0000016e
00000105	leal	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
00000108	movl	%eax,0x08(%esp)
0000010c	leal	0xe567-0xde(%esi),%eax
00000112	movl	%eax,0x04(%esp)
00000116	leal	0xd8(%ebp),%eax
00000119	movl	%eax,(%esp)
0000011c	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000121	movl	0x10864-0xde(%esi),%eax
00000127	movl	(%eax),%ecx
00000129	movl	0xd8(%ebp),%eax
0000012c	movl	%ecx,0x04(%esp)
00000130	movl	%eax,(%esp)
00000133	calll	_fputs
00000138	movl	0xd8(%ebp),%ecx
0000013b	leal	0xf4(%ecx),%eax
0000013e	cmpl	0x10854-0xde(%esi),%eax
00000144	je	0x00000163
00000146	movl	$0xffffffff,%edx
0000014b	lock/xaddl	%edx,0xfc(%ecx)
00000150	testl	%edx,%edx
00000152	jg	0x00000163
00000154	leal	0xf0(%ebp),%ecx
00000157	movl	%ecx,0x04(%esp)
0000015b	movl	%eax,(%esp)
0000015e	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
00000163	leal	0xe0(%ebp),%eax
00000166	movl	%eax,(%esp)
00000169	calll	snappy::LogMessageCrash::~LogMessageCrash()
0000016e	cmpl	$0x00004001,%edi
00000174	jl	0x000001df
00000176	leal	0xb8(%ebp),%eax
00000179	movl	%eax,0x08(%esp)
0000017d	leal	0xe57e-0xde(%esi),%eax
00000183	movl	%eax,0x04(%esp)
00000187	leal	0xc0(%ebp),%eax
0000018a	movl	%eax,(%esp)
0000018d	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000192	movl	0x10864-0xde(%esi),%eax
00000198	movl	(%eax),%ecx
0000019a	movl	0xc0(%ebp),%eax
0000019d	movl	%ecx,0x04(%esp)
000001a1	movl	%eax,(%esp)
000001a4	calll	_fputs
000001a9	movl	0xc0(%ebp),%ecx
000001ac	leal	0xf4(%ecx),%eax
000001af	cmpl	0x10854-0xde(%esi),%eax
000001b5	je	0x000001d4
000001b7	movl	$0xffffffff,%edx
000001bc	lock/xaddl	%edx,0xfc(%ecx)
000001c1	testl	%edx,%edx
000001c3	jg	0x000001d4
000001c5	leal	0xe8(%ebp),%ecx
000001c8	movl	%ecx,0x04(%esp)
000001cc	movl	%eax,(%esp)
000001cf	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
000001d4	leal	0xc8(%ebp),%eax
000001d7	movl	%eax,(%esp)
000001da	calll	snappy::LogMessageCrash::~LogMessageCrash()
000001df	movl	0x08(%ebp),%ebx
000001e2	cmpl	$0x00000400,%edi
000001e8	ja	0x00000204
000001ea	movl	%ebx,%esi
000001ec	jmp	0x00000222
000001ee	leal	0xe0(%ebp),%eax
000001f1	movl	%eax,(%esp)
000001f4	calll	snappy::LogMessageCrash::~LogMessageCrash()
000001f9	leal	0xc8(%ebp),%eax
000001fc	movl	%eax,(%esp)
000001ff	calll	snappy::LogMessageCrash::~LogMessageCrash()
00000204	movl	0x00000800(%ebx),%esi
0000020a	testl	%esi,%esi
0000020c	jne	0x00000222
0000020e	movl	$0x00008000,(%esp)
00000215	calll	operator new[](unsigned long)
0000021a	movl	%eax,%esi
0000021c	movl	%esi,0x00000800(%ebx)
00000222	movl	0x10(%ebp),%eax
00000225	movl	%edi,(%eax)
00000227	addl	%edi,%edi
00000229	movl	%edi,0x08(%esp)
0000022d	movl	%esi,(%esp)
00000230	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
00000238	calll	_memset
0000023d	movl	%esi,%eax
0000023f	addl	$0x4c,%esp
00000242	popl	%esi
00000243	popl	%edi
00000244	popl	%ebx
00000245	popl	%ebp
00000246	ret
00000247	calll	std::terminate()
0000024c	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int):
00000250	pushl	%ebp
00000251	movl	%esp,%ebp
00000253	pushl	%ebx
00000254	pushl	%edi
00000255	pushl	%esi
00000256	subl	$0x6c,%esp
00000259	calll	0x0000025e
0000025e	popl	%esi
0000025f	movl	0x0c(%ebp),%ecx
00000262	cmpl	$0x00008001,%ecx
00000268	jae	0x00000700
0000026e	movl	0x18(%ebp),%edx
00000271	leal	0xff(%edx),%eax
00000274	testl	%edx,%eax
00000276	je	0x000002e1
00000278	leal	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
0000027b	movl	%eax,0x08(%esp)
0000027f	leal	0xe595-0x25e(%esi),%eax
00000285	movl	%eax,0x04(%esp)
00000289	leal	0xd8(%ebp),%eax
0000028c	movl	%eax,(%esp)
0000028f	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000294	movl	0x10864-0x25e(%esi),%eax
0000029a	movl	(%eax),%ecx
0000029c	movl	0xd8(%ebp),%eax
0000029f	movl	%ecx,0x04(%esp)
000002a3	movl	%eax,(%esp)
000002a6	calll	_fputs
000002ab	movl	0xd8(%ebp),%ecx
000002ae	leal	0xf4(%ecx),%eax
000002b1	cmpl	0x10854-0x25e(%esi),%eax
000002b7	je	0x000002d6
000002b9	movl	$0xffffffff,%edx
000002be	lock/xaddl	%edx,0xfc(%ecx)
000002c3	testl	%edx,%edx
000002c5	jg	0x000002d6
000002c7	leal	0xf0(%ebp),%ecx
000002ca	movl	%ecx,0x04(%esp)
000002ce	movl	%eax,(%esp)
000002d1	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
000002d6	leal	0xe0(%ebp),%eax
000002d9	movl	%eax,(%esp)
000002dc	calll	snappy::LogMessageCrash::~LogMessageCrash()
000002e1	movl	$0xffffffff,%eax
000002e6	testl	%edx,%edx
000002e8	je	0x0000034b
000002ea	movl	%edx,%esi
000002ec	shrl	$0x10,%esi
000002ef	testl	%esi,%esi
000002f1	cmovel	%edx,%esi
000002f4	setne	%al
000002f7	movl	%esi,%edi
000002f9	shrl	$0x08,%edi
000002fc	testl	%edi,%edi
000002fe	cmovel	%esi,%edi
00000301	setne	%dl
00000304	movl	%edi,%esi
00000306	shrl	$0x04,%esi
00000309	testl	%esi,%esi
0000030b	cmovel	%edi,%esi
0000030e	setne	%ah
00000311	movl	%esi,%edi
00000313	shrl	$0x02,%edi
00000316	testl	%edi,%edi
00000318	cmovel	%esi,%edi
0000031b	sete	%dh
0000031e	cmpl	$0x01,%edi
00000321	seta	%bl
00000324	movzbl	%bl,%esi
00000327	notb	%dh
00000329	movzbl	%dh,%edi
0000032c	andl	$0x01,%edi
0000032f	addl	%edi,%edi
00000331	movzbl	%ah,%ebx
00000334	shll	$0x02,%ebx
00000337	movzbl	%dl,%edx
0000033a	shll	$0x03,%edx
0000033d	movzbl	%al,%eax
00000340	shll	$0x04,%eax
00000343	orl	%edx,%eax
00000345	orl	%ebx,%eax
00000347	orl	%edi,%eax
00000349	orl	%esi,%eax
0000034b	movl	0x10(%ebp),%edi
0000034e	movl	0x08(%ebp),%esi
00000351	leal	(%esi,%ecx),%edx
00000354	movl	%edx,0xcc(%ebp)
00000357	cmpl	$0x0f,%ecx
0000035a	jb	0x0000039c
0000035c	movl	%edi,0xbc(%ebp)
0000035f	movl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%edx
00000364	subl	%eax,%edx
00000366	movl	%edx,0xb8(%ebp)
00000369	leal	0xf1(%ecx,%esi),%eax
0000036d	movl	%eax,0xa8(%ebp)
00000370	leal	0xfc(%ecx,%esi),%eax
00000374	movl	%eax,0xa4(%ebp)
00000377	movl	0x01(%esi),%eax
0000037a	movl	%eax,0xc4(%ebp)
0000037d	leal	0x01(%esi),%edx
00000380	movl	%esi,0xb4(%ebp)
00000383	movl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%ecx
00000388	movl	%edx,%eax
0000038a	movl	%ecx,%edx
0000038c	shrl	$0x05,%edx
0000038f	addl	%eax,%edx
00000391	cmpl	0xa8(%ebp),%edx
00000394	jbe	0x000003b9
00000396	movl	0xb4(%ebp),%esi
00000399	movl	0xbc(%ebp),%edi
0000039c	movl	0xcc(%ebp),%eax
0000039f	cmpl	%eax,%esi
000003a1	jb	0x000006af
000003a7	movl	%edi,%esi
000003a9	jmp	0x000006f1
000003ae	leal	0xe0(%ebp),%eax
000003b1	movl	%eax,(%esp)
000003b4	calll	snappy::LogMessageCrash::~LogMessageCrash()
000003b9	imull	$0x1e35a7bd,0xc4(%ebp),%esi
000003c0	movl	%ecx,0xc0(%ebp)
000003c3	movl	0xb8(%ebp),%ecx
000003c6	shrl	%cl,%esi
000003c8	movl	0x14(%ebp),%ecx
000003cb	movzwl	(%ecx,%esi,2),%edi
000003cf	movl	%edi,0xc8(%ebp)
000003d2	movl	%eax,%edi
000003d4	movl	%edi,%eax
000003d6	movl	0x08(%ebp),%ebx
000003d9	subl	%ebx,%eax
000003db	movl	(%edx),%ebx
000003dd	movl	%ebx,0xc4(%ebp)
000003e0	movl	0xc8(%ebp),%ebx
000003e3	movw	%ax,(%ecx,%esi,2)
000003e7	movl	0xc0(%ebp),%ecx
000003ea	incl	%ecx
000003eb	movl	(%edi),%eax
000003ed	movl	0x08(%ebp),%esi
000003f0	cmpl	(%esi,%ebx),%eax
000003f3	jne	0x00000388
000003f5	addl	0x08(%ebp),%ebx
000003f8	movl	%edi,%edx
000003fa	movl	%edi,0xb0(%ebp)
000003fd	movl	0xb4(%ebp),%edi
00000400	subl	%edi,%edx
00000402	leal	0xff(%edx),%eax
00000405	cmpl	$0x3c,%eax
00000408	jl	0x00000448
0000040a	movl	%edx,0xc8(%ebp)
0000040d	movl	0xbc(%ebp),%edx
00000410	leal	0x01(%edx),%esi
00000413	movb	$0xec,%cl
00000415	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000420	movb	%al,(%esi)
00000422	addb	$0x04,%cl
00000425	incl	%esi
00000426	sarl	$0x08,%eax
00000429	testl	%eax,%eax
0000042b	jg	0x00000420
0000042d	movb	%cl,(%edx)
0000042f	movl	0xc8(%ebp),%edx
00000432	movl	%edx,0x08(%esp)
00000436	movl	%edi,0x04(%esp)
0000043a	movl	%esi,(%esp)
0000043d	movl	%edx,%edi
0000043f	calll	_memcpy
00000444	movl	%edi,%edx
00000446	jmp	0x0000046b
00000448	shll	$0x02,%eax
0000044b	movl	0xbc(%ebp),%ecx
0000044e	movb	%al,(%ecx)
00000450	leal	0x01(%ecx),%esi
00000453	cmpl	$0x10,%edx
00000456	jg	0x00000432
00000458	movsd	(%edi),%xmm0
0000045c	movsd	%xmm0,0x01(%ecx)
00000461	movsd	0x08(%edi),%xmm0
00000466	movsd	%xmm0,0x09(%ecx)
0000046b	movl	0xb0(%ebp),%eax
0000046e	addl	%edx,%esi
00000470	movl	%esi,0xc0(%ebp)
00000473	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000480	movl	%eax,%ecx
00000482	movl	%ecx,0xbc(%ebp)
00000485	leal	0x04(%ecx),%eax
00000488	xorl	%edx,%edx
0000048a	movl	%ecx,0xc4(%ebp)
0000048d	movl	0xa4(%ebp),%edi
00000490	leal	(%eax,%edx),%ecx
00000493	cmpl	%edi,%ecx
00000495	ja	0x00000526
0000049b	movl	(%eax,%edx),%esi
0000049e	movl	0x04(%ebx,%edx),%ecx
000004a2	addl	$0x04,%edx
000004a5	cmpl	%ecx,%esi
000004a7	je	0x00000490
000004a9	movl	%ebx,0xc8(%ebp)
000004ac	xorl	%esi,%ecx
000004ae	movl	%ecx,%eax
000004b0	shll	$0x10,%eax
000004b3	testl	%eax,%eax
000004b5	cmovel	%ecx,%eax
000004b8	movl	$0x0000000f,%ecx
000004bd	movl	%ecx,%esi
000004bf	movl	$0x0000001f,%ecx
000004c4	cmovel	%ecx,%esi
000004c7	movl	%esi,0xb4(%ebp)
000004ca	movl	%eax,%esi
000004cc	shll	$0x08,%esi
000004cf	testl	%esi,%esi
000004d1	cmovel	%eax,%esi
000004d4	movl	$0xfffffff8,%eax
000004d9	movl	snappy::MaxCompressedLength(unsigned long),%edi
000004de	cmovel	%edi,%eax
000004e1	movl	%esi,%ecx
000004e3	shll	$0x04,%ecx
000004e6	testl	%ecx,%ecx
000004e8	cmovel	%esi,%ecx
000004eb	movl	$0xfffffffc,%ebx
000004f0	cmovel	%edi,%ebx
000004f3	leal	snappy::MaxCompressedLength(unsigned long)(,%ecx,4),%esi
000004fa	testl	%esi,%esi
000004fc	cmovnel	%esi,%ecx
000004ff	movl	$0xfffffffe,%esi
00000504	cmovel	%edi,%esi
00000507	andl	$0x7fffffff,%ecx
0000050d	cmpl	$0x01,%ecx
00000510	sbbl	%ecx,%ecx
00000512	notl	%ecx
00000514	addl	0xb4(%ebp),%eax
00000517	addl	%ebx,%eax
00000519	addl	%esi,%eax
0000051b	addl	%ecx,%eax
0000051d	sarl	$0x03,%eax
00000520	leal	0xfc(%eax,%edx),%edx
00000524	jmp	0x00000553
00000526	movl	%edi,0xa4(%ebp)
00000529	leal	(%ebx,%edx),%esi
0000052c	movl	%ebx,0xc8(%ebp)
0000052f	movl	0xbc(%ebp),%eax
00000532	leal	0x04(%eax,%edx),%edi
00000536	xorl	%eax,%eax
00000538	jmp	0x00000541
0000053a	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000540	incl	%eax
00000541	leal	(%edi,%eax),%ecx
00000544	cmpl	0xcc(%ebp),%ecx
00000547	jae	0x00000551
00000549	movb	0x04(%esi,%eax),%bl
0000054d	cmpb	(%ecx),%bl
0000054f	je	0x00000540
00000551	addl	%eax,%edx
00000553	movl	0xc0(%ebp),%ebx
00000556	movl	0xc4(%ebp),%ecx
00000559	subl	0xc8(%ebp),%ecx
0000055c	leal	0x04(%edx),%eax
0000055f	cmpl	$0x44,%eax
00000562	jl	0x000005a6
00000564	leal	0x01(%ebx),%edi
00000567	leal	0xc0(%edx),%esi
0000056a	movl	%ecx,%ebx
0000056c	movl	%esi,%ecx
0000056e	shrl	$0x06,%ecx
00000571	leal	(%ecx,%ecx,2),%ecx
00000574	movl	%ecx,0xc8(%ebp)
00000577	movl	%ebx,%ecx
00000579	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
00000580	movb	$0xfe,0xff(%edi)
00000584	movw	%cx,(%edi)
00000587	addl	$0x03,%edi
0000058a	addl	$0xc0,%eax
0000058d	cmpl	$0x43,%eax
00000590	jg	0x00000580
00000592	movl	0xc0(%ebp),%eax
00000595	movl	0xc8(%ebp),%edi
00000598	leal	0x03(%edi,%eax),%eax
0000059c	movl	%eax,%ebx
0000059e	andl	$0xc0,%esi
000005a1	leal	0xc4(%edx),%eax
000005a4	subl	%esi,%eax
000005a6	cmpl	$0x41,%eax
000005a9	movl	0xbc(%ebp),%esi
000005ac	jl	0x000005bb
000005ae	movb	$0xee,(%ebx)
000005b1	movw	%cx,0x01(%ebx)
000005b5	addl	$0xc4,%eax
000005b8	addl	$0x03,%ebx
000005bb	leal	0x04(%esi,%edx),%edi
000005bf	cmpl	$0x0b,%eax
000005c2	leal	snappy::MaxCompressedLength(unsigned long)(,%eax,4),%eax
000005c9	jg	0x000005f9
000005cb	cmpl	$0x000007ff,%ecx
000005d1	jg	0x000005f9
000005d3	addl	$0x000000f0,%eax
000005d8	movl	%ecx,0xc4(%ebp)
000005db	movl	0xc4(%ebp),%ecx
000005de	shrl	$0x03,%ecx
000005e1	andl	$0x000000e0,%ecx
000005e7	orl	%eax,%ecx
000005e9	orl	$0x01,%ecx
000005ec	movb	%cl,(%ebx)
000005ee	movl	0xc4(%ebp),%eax
000005f1	movb	%al,0x01(%ebx)
000005f4	addl	$0x02,%ebx
000005f7	jmp	0x0000060a
000005f9	addl	$0x000000fc,%eax
000005fe	orl	$0x02,%eax
00000601	movb	%al,(%ebx)
00000603	movw	%cx,0x01(%ebx)
00000607	addl	$0x03,%ebx
0000060a	movl	%edi,%eax
0000060c	cmpl	0xa8(%ebp),%eax
0000060f	jae	0x000006a6
00000615	movl	%ebx,0xc0(%ebp)
00000618	movl	0x03(%edx,%esi),%ecx
0000061c	movl	%ecx,0xac(%ebp)
0000061f	movl	0x07(%edx,%esi),%esi
00000623	movl	%esi,0xc4(%ebp)
00000626	imull	$0x1e35a7bd,%ecx,%edi
0000062c	movl	0xb8(%ebp),%ecx
0000062f	shrl	%cl,%edi
00000631	movl	%eax,%ecx
00000633	movl	0x08(%ebp),%esi
00000636	subl	%esi,%ecx
00000638	movl	%ecx,0xa0(%ebp)
0000063b	movl	%eax,0xb0(%ebp)
0000063e	leal	0x0000ffff(%ecx),%eax
00000644	movl	0x14(%ebp),%ebx
00000647	movw	%ax,(%ebx,%edi,2)
0000064b	movl	0xc4(%ebp),%eax
0000064e	movl	0xac(%ebp),%ecx
00000651	shldl	$0x18,%ecx,%eax
00000655	imull	$0x1e35a7bd,%eax,%edi
0000065b	movl	0xb8(%ebp),%ecx
0000065e	shrl	%cl,%edi
00000660	movzwl	(%ebx,%edi,2),%ecx
00000664	movl	%ecx,0xb4(%ebp)
00000667	movl	0xb4(%ebp),%ecx
0000066a	leal	(%esi,%ecx),%ecx
0000066d	movl	%ecx,0xc8(%ebp)
00000670	movl	0xb4(%ebp),%ecx
00000673	cmpl	(%esi,%ecx),%eax
00000676	movl	0xb0(%ebp),%eax
00000679	movl	0xa0(%ebp),%ecx
0000067c	movw	%cx,(%ebx,%edi,2)
00000680	movl	0xc8(%ebp),%ebx
00000683	je	0x00000480
00000689	movl	0xbc(%ebp),%ecx
0000068c	leal	0x05(%edx,%ecx),%edx
00000690	movl	0xac(%ebp),%ecx
00000693	shldl	$0x10,%ecx,0xc4(%ebp)
00000698	movl	%eax,0xb4(%ebp)
0000069b	movl	0xc0(%ebp),%eax
0000069e	movl	%eax,0xbc(%ebp)
000006a1	jmp	0x00000383
000006a6	movl	%eax,%esi
000006a8	movl	%ebx,%edi
000006aa	jmp	0x0000039c
000006af	subl	%esi,%eax
000006b1	movl	%esi,%ebx
000006b3	movl	%eax,%ecx
000006b5	leal	0xff(%ecx),%eax
000006b8	movl	%ecx,%edx
000006ba	leal	0x01(%edi),%esi
000006bd	cmpl	$0x3c,%eax
000006c0	jl	0x0000070b
000006c2	movl	$0x000000ec,%ecx
000006c7	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
000006d0	movb	%al,(%esi)
000006d2	addl	$0x04,%ecx
000006d5	incl	%esi
000006d6	sarl	$0x08,%eax
000006d9	testl	%eax,%eax
000006db	jg	0x000006d0
000006dd	movb	%cl,(%edi)
000006df	movl	%esi,(%esp)
000006e2	movl	%edx,0x08(%esp)
000006e6	movl	%ebx,0x04(%esp)
000006ea	addl	%edx,%esi
000006ec	calll	_memcpy
000006f1	movl	%esi,%eax
000006f3	addl	$0x6c,%esp
000006f6	popl	%esi
000006f7	popl	%edi
000006f8	popl	%ebx
000006f9	popl	%ebp
000006fa	ret
000006fb	calll	std::terminate()
00000700	leal	0xe8(%ebp),%eax
00000703	movl	%eax,(%esp)
00000706	calll	snappy::LogMessageCrash::~LogMessageCrash()
0000070b	shll	$0x02,%eax
0000070e	movl	%eax,%ecx
00000710	jmp	0x000006dd
00000712	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::SnappyDecompressor::RefillTag():
00000720	pushl	%ebp
00000721	movl	%esp,%ebp
00000723	pushl	%ebx
00000724	pushl	%edi
00000725	pushl	%esi
00000726	subl	$0x1c,%esp
00000729	calll	0x0000072e
0000072e	popl	%ebx
0000072f	movl	0x08(%ebp),%esi
00000732	movl	0x04(%esi),%eax
00000735	movl	0x08(%esi),%edi
00000738	cmpl	%edi,%eax
0000073a	jne	0x00000778
0000073c	movl	(%esi),%eax
0000073e	movl	0x0c(%esi),%edx
00000741	movl	(%eax),%ecx
00000743	movl	%edx,0x04(%esp)
00000747	movl	%eax,(%esp)
0000074a	call	*0x10(%ecx)
0000074d	movl	(%esi),%ecx
0000074f	movl	(%ecx),%eax
00000751	leal	0xf0(%ebp),%edx
00000754	movl	%edx,0x04(%esp)
00000758	movl	%ecx,(%esp)
0000075b	call	*0x0c(%eax)
0000075e	movl	0xf0(%ebp),%edi
00000761	movl	%edi,0x0c(%esi)
00000764	testl	%edi,%edi
00000766	jne	0x00000773
00000768	movb	$0x01,0x10(%esi)
0000076c	xorb	%cl,%cl
0000076e	jmp	0x00000879
00000773	addl	%eax,%edi
00000775	movl	%edi,0x08(%esi)
00000778	movl	%esi,%edx
0000077a	subl	%eax,%edi
0000077c	movzbl	(%eax),%ecx
0000077f	movzwl	snappy::char_table-0x72e(%ebx,%ecx,2),%ebx
00000787	shrl	$0x0b,%ebx
0000078a	incl	%ebx
0000078b	movl	%ebx,0xe8(%ebp)
0000078e	cmpl	%ebx,%edi
00000790	jae	0x00000836
00000796	movl	%edi,0x08(%esp)
0000079a	movl	%eax,0x04(%esp)
0000079e	movl	%edx,%esi
000007a0	leal	0x11(%esi),%eax
000007a3	movl	%eax,0xe4(%ebp)
000007a6	movl	%eax,(%esp)
000007a9	calll	_memmove
000007ae	movl	(%esi),%eax
000007b0	movl	0x0c(%esi),%edx
000007b3	movl	(%eax),%ecx
000007b5	movl	%edx,0x04(%esp)
000007b9	movl	%eax,(%esp)
000007bc	call	*0x10(%ecx)
000007bf	movl	snappy::MaxCompressedLength(unsigned long),0x0c(%esi)
000007c6	jmp	0x00000823
000007c8	nopl	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
000007d0	movl	%esi,%ebx
000007d2	movl	(%ebx),%ecx
000007d4	movl	(%ecx),%eax
000007d6	leal	0xec(%ebp),%edx
000007d9	movl	%edx,0x04(%esp)
000007dd	movl	%ecx,(%esp)
000007e0	call	*0x0c(%eax)
000007e3	xorb	%cl,%cl
000007e5	movl	0xec(%ebp),%edx
000007e8	testl	%edx,%edx
000007ea	je	0x00000879
000007f0	movl	%eax,0x04(%esp)
000007f4	leal	0x11(%ebx,%edi),%eax
000007f8	movl	%eax,(%esp)
000007fb	movl	%ebx,%esi
000007fd	movl	0xe8(%ebp),%ebx
00000800	subl	%edi,%ebx
00000802	cmpl	%ebx,%edx
00000804	cmovbl	%edx,%ebx
00000807	movl	%ebx,0x08(%esp)
0000080b	calll	_memcpy
00000810	movl	(%esi),%ecx
00000812	movl	(%ecx),%eax
00000814	movl	%ebx,0x04(%esp)
00000818	movl	%ecx,(%esp)
0000081b	call	*0x10(%eax)
0000081e	addl	%ebx,%edi
00000820	movl	0xe8(%ebp),%ebx
00000823	cmpl	%ebx,%edi
00000825	jb	0x000007d0
00000827	movl	0xe4(%ebp),%eax
0000082a	movl	%eax,0x04(%esi)
0000082d	leal	0x11(%esi,%ebx),%eax
00000831	movl	%eax,0x08(%esi)
00000834	jmp	0x00000877
00000836	cmpl	$0x04,%edi
00000839	movl	%edx,%ebx
0000083b	ja	0x00000874
0000083d	movl	%edi,0x08(%esp)
00000841	movl	%eax,0x04(%esp)
00000845	leal	0x11(%ebx),%esi
00000848	movl	%esi,(%esp)
0000084b	calll	_memmove
00000850	movl	(%ebx),%eax
00000852	movl	0x0c(%ebx),%edx
00000855	movl	(%eax),%ecx
00000857	movl	%edx,0x04(%esp)
0000085b	movl	%eax,(%esp)
0000085e	call	*0x10(%ecx)
00000861	movl	snappy::MaxCompressedLength(unsigned long),0x0c(%ebx)
00000868	movl	%esi,0x04(%ebx)
0000086b	leal	0x11(%ebx,%edi),%eax
0000086f	movl	%eax,0x08(%ebx)
00000872	jmp	0x00000877
00000874	movl	%eax,0x04(%ebx)
00000877	movb	$0x01,%cl
00000879	movzbl	%cl,%eax
0000087c	addl	$0x1c,%esp
0000087f	popl	%esi
00000880	popl	%edi
00000881	popl	%ebx
00000882	popl	%ebp
00000883	ret
00000884	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::GetUncompressedLength(snappy::Source*, unsigned int*):
00000890	pushl	%ebp
00000891	movl	%esp,%ebp
00000893	pushl	%ebx
00000894	pushl	%edi
00000895	pushl	%esi
00000896	subl	$0x0c,%esp
00000899	movl	0x0c(%ebp),%eax
0000089c	movl	snappy::MaxCompressedLength(unsigned long),(%eax)
000008a2	xorl	%edx,%edx
000008a4	movl	0x08(%ebp),%edi
000008a7	jmp	0x000008b3
000008a9	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
000008b0	addl	$0x07,%edx
000008b3	xorb	%bl,%bl
000008b5	cmpl	$0x1f,%edx
000008b8	movl	%edx,%esi
000008ba	ja	0x00000902
000008bc	movl	(%edi),%eax
000008be	movl	0x0c(%eax),%eax
000008c1	leal	0xf0(%ebp),%ecx
000008c4	movl	%ecx,0x04(%esp)
000008c8	movl	%edi,(%esp)
000008cb	call	*%eax
000008cd	xorb	%bl,%bl
000008cf	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
000008d3	je	0x00000902
000008d5	movzbl	(%eax),%ebx
000008d8	movl	(%edi),%eax
000008da	movl	0x10(%eax),%eax
000008dd	movl	%edi,(%esp)
000008e0	movl	$0x00000001,0x04(%esp)
000008e8	call	*%eax
000008ea	movl	%ebx,%eax
000008ec	andl	$0x7f,%eax
000008ef	movl	%esi,%edx
000008f1	movb	%dl,%cl
000008f3	shll	%cl,%eax
000008f5	movl	0x0c(%ebp),%ecx
000008f8	orl	%eax,(%ecx)
000008fa	movl	%ebx,%eax
000008fc	movb	$0x01,%bl
000008fe	testb	%al,%al
00000900	js	0x000008b0
00000902	movl	(%edi),%eax
00000904	movl	%edi,(%esp)
00000907	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
0000090f	call	*0x10(%eax)
00000912	movzbl	%bl,%eax
00000915	addl	$0x0c,%esp
00000918	popl	%esi
00000919	popl	%edi
0000091a	popl	%ebx
0000091b	popl	%ebp
0000091c	ret
0000091d	movl	%eax,%esi
0000091f	movl	(%edi),%eax
00000921	movl	0x10(%eax),%eax
00000924	movl	%edi,(%esp)
00000927	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
0000092f	call	*%eax
00000931	movl	%esi,(%esp)
00000934	calll	__Unwind_Resume
00000939	calll	std::terminate()
0000093e	nop
snappy::Compress(snappy::Source*, snappy::Sink*):
00000940	pushl	%ebp
00000941	movl	%esp,%ebp
00000943	pushl	%ebx
00000944	pushl	%edi
00000945	pushl	%esi
00000946	subl	$0x0000084c,%esp
0000094c	movl	0x08(%ebp),%esi
0000094f	movl	(%esi),%eax
00000951	movl	%esi,(%esp)
00000954	call	*0x08(%eax)
00000957	movl	%eax,%ecx
00000959	movl	0x0c(%ebp),%edx
0000095c	cmpl	$0x7f,%ecx
0000095f	ja	0x00000972
00000961	movb	%cl,0xef(%ebp)
00000964	movl	%ecx,0xfffff7cc(%ebp)
0000096a	leal	0xf0(%ebp),%edi
0000096d	jmp	0x00000a13
00000972	movl	%ecx,%eax
00000974	orl	$0x00000080,%eax
00000979	cmpl	$0x00003fff,%ecx
0000097f	ja	0x00000997
00000981	movb	%al,0xef(%ebp)
00000984	movl	%ecx,%eax
00000986	movl	%ecx,0xfffff7cc(%ebp)
0000098c	shrl	$0x07,%eax
0000098f	movb	%al,0xf0(%ebp)
00000992	leal	0xf1(%ebp),%edi
00000995	jmp	0x00000a13
00000997	cmpl	$0x001fffff,%ecx
0000099d	ja	0x000009c2
0000099f	movb	%al,0xef(%ebp)
000009a2	movl	%ecx,%eax
000009a4	shrl	$0x07,%eax
000009a7	orl	$0x00000080,%eax
000009ac	movb	%al,0xf0(%ebp)
000009af	movl	%ecx,%eax
000009b1	movl	%ecx,0xfffff7cc(%ebp)
000009b7	shrl	$0x0e,%eax
000009ba	movb	%al,0xf1(%ebp)
000009bd	leal	0xf2(%ebp),%edi
000009c0	jmp	0x00000a13
000009c2	movb	%al,0xef(%ebp)
000009c5	movl	%ecx,%eax
000009c7	shrl	$0x07,%eax
000009ca	orl	$0x00000080,%eax
000009cf	movb	%al,0xf0(%ebp)
000009d2	movl	%ecx,%eax
000009d4	shrl	$0x0e,%eax
000009d7	orl	$0x00000080,%eax
000009dc	movb	%al,0xf1(%ebp)
000009df	movl	%ecx,%eax
000009e1	shrl	$0x15,%eax
000009e4	cmpl	$0x0fffffff,%ecx
000009ea	ja	0x000009fa
000009ec	movl	%ecx,0xfffff7cc(%ebp)
000009f2	movb	%al,0xf2(%ebp)
000009f5	leal	0xf3(%ebp),%edi
000009f8	jmp	0x00000a13
000009fa	orl	$0x00000080,%eax
000009ff	movb	%al,0xf2(%ebp)
00000a02	movl	%ecx,%eax
00000a04	movl	%ecx,0xfffff7cc(%ebp)
00000a0a	shrl	$0x1c,%eax
00000a0d	movb	%al,0xf3(%ebp)
00000a10	leal	0xf4(%ebp),%edi
00000a13	leal	0xef(%ebp),%eax
00000a16	subl	%eax,%edi
00000a18	movl	%edi,0xfffff7c4(%ebp)
00000a1e	movl	(%edx),%ecx
00000a20	movl	%edi,0x08(%esp)
00000a24	movl	%eax,0x04(%esp)
00000a28	movl	%edx,(%esp)
00000a2b	call	*0x08(%ecx)
00000a2e	movl	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00000a35	xorl	%eax,%eax
00000a37	movl	%eax,0xfffff7d0(%ebp)
00000a3d	movl	snappy::MaxCompressedLength(unsigned long),0xfffff7d8(%ebp)
00000a47	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000a50	movl	0xfffff7cc(%ebp),%eax
00000a56	testl	%eax,%eax
00000a58	jle	0x00000c75
00000a5e	movl	%eax,%edi
00000a60	movl	(%esi),%eax
00000a62	movl	0x0c(%eax),%eax
00000a65	leal	0xfffff7e4(%ebp),%ecx
00000a6b	movl	%ecx,0x04(%esp)
00000a6f	movl	%esi,(%esp)
00000a72	movl	%esi,%ebx
00000a74	call	*%eax
00000a76	movl	%eax,0xfffff7d4(%ebp)
00000a7c	cmpl	$0x00008000,%edi
00000a82	movl	%edi,%ecx
00000a84	movl	$0x00008000,%eax
00000a89	cmovgl	%eax,%ecx
00000a8c	movl	0xfffff7e4(%ebp),%edi
00000a92	cmpl	%ecx,%edi
00000a94	jb	0x00000b9d
00000a9a	movl	%ecx,%esi
00000a9c	movl	%ecx,0xfffff7e4(%ebp)
00000aa2	leal	0xfffff7e0(%ebp),%eax
00000aa8	movl	%eax,0x08(%esp)
00000aac	movl	%ecx,0x04(%esp)
00000ab0	movl	%ecx,%edi
00000ab2	leal	0xfffff7e8(%ebp),%eax
00000ab8	movl	%eax,(%esp)
00000abb	calll	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)
00000ac0	movl	%eax,0xfffff7c8(%ebp)
00000ac6	movl	%edi,0xfffff7dc(%ebp)
00000acc	movl	%edi,%eax
00000ace	movl	$0xaaaaaaab,%ecx
00000ad3	mull	%ecx
00000ad5	shrl	$0x02,%edx
00000ad8	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%edi,%edx),%edi
00000adc	cmpl	snappy::MaxCompressedLength(unsigned long),0xfffff7d0(%ebp)
00000ae3	jne	0x00000af3
00000ae5	movl	%edi,(%esp)
00000ae8	calll	operator new[](unsigned long)
00000aed	movl	%eax,0xfffff7d0(%ebp)
00000af3	movl	0x0c(%ebp),%ecx
00000af6	movl	(%ecx),%eax
00000af8	movl	0x0c(%eax),%eax
00000afb	movl	0xfffff7d0(%ebp),%edx
00000b01	movl	%edx,0x08(%esp)
00000b05	movl	%edi,0x04(%esp)
00000b09	movl	%ecx,(%esp)
00000b0c	call	*%eax
00000b0e	movl	%eax,%edx
00000b10	movl	0xfffff7e4(%ebp),%eax
00000b16	movl	0xfffff7e0(%ebp),%ecx
00000b1c	movl	%ecx,0x10(%esp)
00000b20	movl	0xfffff7c8(%ebp),%ecx
00000b26	movl	%ecx,0x0c(%esp)
00000b2a	movl	%edx,0x08(%esp)
00000b2e	movl	%eax,0x04(%esp)
00000b32	movl	0xfffff7d4(%ebp),%eax
00000b38	movl	%eax,(%esp)
00000b3b	movl	%edx,%edi
00000b3d	calll	snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int)
00000b42	movl	%edi,%edx
00000b44	movl	%eax,%edi
00000b46	subl	%edx,%edi
00000b48	movl	0x0c(%ebp),%ecx
00000b4b	movl	(%ecx),%eax
00000b4d	movl	0x08(%eax),%eax
00000b50	movl	%edi,0x08(%esp)
00000b54	movl	%edx,0x04(%esp)
00000b58	movl	%ecx,(%esp)
00000b5b	call	*%eax
00000b5d	movl	0xfffff7dc(%ebp),%eax
00000b63	subl	%eax,0xfffff7cc(%ebp)
00000b69	addl	%edi,0xfffff7c4(%ebp)
00000b6f	movl	(%ebx),%eax
00000b71	movl	0x10(%eax),%eax
00000b74	movl	%esi,0x04(%esp)
00000b78	movl	%ebx,(%esp)
00000b7b	movl	%ebx,%esi
00000b7d	call	*%eax
00000b7f	jmp	0x00000a50
00000b84	movl	%eax,%esi
00000b86	movl	0xe8(%ebp),%eax
00000b89	testl	%eax,%eax
00000b8b	je	0x00000b95
00000b8d	movl	%eax,(%esp)
00000b90	calll	operator delete[](void*)
00000b95	movl	%esi,(%esp)
00000b98	calll	__Unwind_Resume
00000b9d	movl	%ecx,0xfffff7dc(%ebp)
00000ba3	cmpl	snappy::MaxCompressedLength(unsigned long),0xfffff7d8(%ebp)
00000baa	jne	0x00000bca
00000bac	movl	0xfffff7dc(%ebp),%ecx
00000bb2	testl	%ecx,%ecx
00000bb4	movl	$0xffffffff,%eax
00000bb9	cmovnsl	%ecx,%eax
00000bbc	movl	%eax,(%esp)
00000bbf	calll	operator new[](unsigned long)
00000bc4	movl	%eax,0xfffff7d8(%ebp)
00000bca	movl	%edi,0x08(%esp)
00000bce	movl	0xfffff7d4(%ebp),%eax
00000bd4	movl	%eax,0x04(%esp)
00000bd8	movl	0xfffff7d8(%ebp),%eax
00000bde	movl	%eax,(%esp)
00000be1	calll	_memcpy
00000be6	movl	(%ebx),%eax
00000be8	movl	0x10(%eax),%eax
00000beb	movl	%edi,0x04(%esp)
00000bef	movl	%ebx,(%esp)
00000bf2	call	*%eax
00000bf4	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000c00	xorl	%esi,%esi
00000c02	movl	0xfffff7dc(%ebp),%ecx
00000c08	cmpl	%ecx,%edi
00000c0a	jb	0x00000c1d
00000c0c	movl	0xfffff7d8(%ebp),%eax
00000c12	movl	%eax,0xfffff7d4(%ebp)
00000c18	jmp	0x00000a9c
00000c1d	movl	%ecx,0xfffff7dc(%ebp)
00000c23	movl	(%ebx),%eax
00000c25	movl	0x0c(%eax),%eax
00000c28	leal	0xfffff7e4(%ebp),%ecx
00000c2e	movl	%ecx,0x04(%esp)
00000c32	movl	%ebx,(%esp)
00000c35	call	*%eax
00000c37	movl	0xfffff7e4(%ebp),%ecx
00000c3d	movl	%eax,0x04(%esp)
00000c41	movl	0xfffff7d8(%ebp),%eax
00000c47	leal	(%eax,%edi),%eax
00000c4a	movl	%eax,(%esp)
00000c4d	movl	0xfffff7dc(%ebp),%esi
00000c53	subl	%edi,%esi
00000c55	cmpl	%ecx,%esi
00000c57	cmovael	%ecx,%esi
00000c5a	movl	%esi,0x08(%esp)
00000c5e	addl	%esi,%edi
00000c60	calll	_memcpy
00000c65	movl	(%ebx),%eax
00000c67	movl	0x10(%eax),%eax
00000c6a	movl	%esi,0x04(%esp)
00000c6e	movl	%ebx,(%esp)
00000c71	call	*%eax
00000c73	jmp	0x00000c00
00000c75	movl	0xfffff7d8(%ebp),%eax
00000c7b	testl	%eax,%eax
00000c7d	je	0x00000c87
00000c7f	movl	%eax,(%esp)
00000c82	calll	operator delete[](void*)
00000c87	movl	0xfffff7d0(%ebp),%eax
00000c8d	testl	%eax,%eax
00000c8f	movl	0xfffff7c4(%ebp),%esi
00000c95	je	0x00000c9f
00000c97	movl	%eax,(%esp)
00000c9a	calll	operator delete[](void*)
00000c9f	movl	0xe8(%ebp),%eax
00000ca2	testl	%eax,%eax
00000ca4	je	0x00000cae
00000ca6	movl	%eax,(%esp)
00000ca9	calll	operator delete[](void*)
00000cae	movl	%esi,%eax
00000cb0	addl	$0x0000084c,%esp
00000cb6	popl	%esi
00000cb7	popl	%edi
00000cb8	popl	%ebx
00000cb9	popl	%ebp
00000cba	ret
00000cbb	jmp	0x00000b84
snappy::RawUncompress(char const*, unsigned long, char*):
00000cc0	pushl	%ebp
00000cc1	movl	%esp,%ebp
00000cc3	pushl	%ebx
00000cc4	pushl	%edi
00000cc5	pushl	%esi
00000cc6	subl	$0x1c,%esp
00000cc9	calll	0x00000cce
00000cce	popl	%eax
00000ccf	movl	0x10858-0xcce(%eax),%eax
00000cd5	addl	$0x08,%eax
00000cd8	movl	%eax,0xe8(%ebp)
00000cdb	movl	0x08(%ebp),%eax
00000cde	movl	%eax,0xec(%ebp)
00000ce1	movl	0x0c(%ebp),%eax
00000ce4	movl	%eax,0xf0(%ebp)
00000ce7	movl	0x10(%ebp),%eax
00000cea	movl	%eax,0x04(%esp)
00000cee	leal	0xe8(%ebp),%edi
00000cf1	movl	%edi,(%esp)
00000cf4	calll	snappy::RawUncompress(snappy::Source*, char*)
00000cf9	movb	%al,%bl
00000cfb	movl	%edi,(%esp)
00000cfe	calll	snappy::ByteArraySource::~ByteArraySource()
00000d03	movzbl	%bl,%eax
00000d06	addl	$0x1c,%esp
00000d09	popl	%esi
00000d0a	popl	%edi
00000d0b	popl	%ebx
00000d0c	popl	%ebp
00000d0d	ret
00000d0e	movl	%eax,%esi
00000d10	movl	%edi,(%esp)
00000d13	calll	snappy::ByteArraySource::~ByteArraySource()
00000d18	movl	%esi,(%esp)
00000d1b	calll	__Unwind_Resume
00000d20	calll	std::terminate()
00000d25	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::RawUncompress(snappy::Source*, char*):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%ebx
00000d34	pushl	%edi
00000d35	pushl	%esi
00000d36	subl	$0x3c,%esp
00000d39	movl	0x0c(%ebp),%eax
00000d3c	movl	%eax,0xc8(%ebp)
00000d3f	movl	%eax,0xcc(%ebp)
00000d42	movl	0x08(%ebp),%eax
00000d45	movl	%eax,0xd8(%ebp)
00000d48	movl	snappy::MaxCompressedLength(unsigned long),0xe0(%ebp)
00000d4f	movl	snappy::MaxCompressedLength(unsigned long),0xdc(%ebp)
00000d56	movb	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00000d5a	movl	snappy::MaxCompressedLength(unsigned long),0xe4(%ebp)
00000d61	xorl	%edi,%edi
00000d63	movl	%edi,%edx
00000d65	jmp	0x00000d73
00000d67	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000d70	addl	$0x07,%edx
00000d73	xorb	%bl,%bl
00000d75	cmpl	$0x1f,%edx
00000d78	movl	%edx,%esi
00000d7a	ja	0x00000e12
00000d80	movl	0xd8(%ebp),%eax
00000d83	movl	(%eax),%ecx
00000d85	movl	0x0c(%ecx),%ecx
00000d88	leal	0xf0(%ebp),%edx
00000d8b	movl	%edx,0x04(%esp)
00000d8f	movl	%eax,(%esp)
00000d92	call	*%ecx
00000d94	xorb	%bl,%bl
00000d96	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
00000d9a	je	0x00000e12
00000d9c	movzbl	(%eax),%ebx
00000d9f	movl	0xd8(%ebp),%ecx
00000da2	movl	(%ecx),%eax
00000da4	movl	0x10(%eax),%eax
00000da7	movl	%ecx,(%esp)
00000daa	movl	$0x00000001,0x04(%esp)
00000db2	call	*%eax
00000db4	movl	%ebx,%eax
00000db6	andl	$0x7f,%eax
00000db9	movl	%esi,%edx
00000dbb	movb	%dl,%cl
00000dbd	shll	%cl,%eax
00000dbf	orl	%eax,%edi
00000dc1	testb	%bl,%bl
00000dc3	jns	0x00000de7
00000dc5	jmp	0x00000d70
00000dc7	jmp	0x00000dc9
00000dc9	movl	%eax,%esi
00000dcb	movl	0xd8(%ebp),%eax
00000dce	movl	0xe4(%ebp),%edx
00000dd1	movl	(%eax),%ecx
00000dd3	movl	0x10(%ecx),%ecx
00000dd6	movl	%edx,0x04(%esp)
00000dda	movl	%eax,(%esp)
00000ddd	call	*%ecx
00000ddf	movl	%esi,(%esp)
00000de2	calll	__Unwind_Resume
00000de7	movl	0x0c(%ebp),%eax
00000dea	addl	%edi,%eax
00000dec	movl	%eax,snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp)
00000def	leal	0xc8(%ebp),%eax
00000df2	movl	%eax,0x04(%esp)
00000df6	leal	0xd8(%ebp),%eax
00000df9	movl	%eax,(%esp)
00000dfc	calll	void snappy::SnappyDecompressor::DecompressAllTags<snappy::SnappyArrayWriter>(snappy::SnappyArrayWriter*)
00000e01	xorb	%bl,%bl
00000e03	testb	$0x01,0xe8(%ebp)
00000e07	je	0x00000e12
00000e09	movl	0xcc(%ebp),%eax
00000e0c	cmpl	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
00000e0f	sete	%bl
00000e12	movl	0xd8(%ebp),%eax
00000e15	movl	0xe4(%ebp),%edx
00000e18	movl	(%eax),%ecx
00000e1a	movl	%edx,0x04(%esp)
00000e1e	movl	%eax,(%esp)
00000e21	call	*0x10(%ecx)
00000e24	movzbl	%bl,%eax
00000e27	addl	$0x3c,%esp
00000e2a	popl	%esi
00000e2b	popl	%edi
00000e2c	popl	%ebx
00000e2d	popl	%ebp
00000e2e	ret
00000e2f	calll	std::terminate()
00000e34	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::Uncompress(char const*, unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%ebx
00000e44	pushl	%edi
00000e45	pushl	%esi
00000e46	subl	$0x1c,%esp
00000e49	calll	0x00000e4e
00000e4e	popl	%eax
00000e4f	movl	%eax,0xe4(%ebp)
00000e52	xorb	%bl,%bl
00000e54	movl	0x0c(%ebp),%esi
00000e57	testl	%esi,%esi
00000e59	jle	0x00000f99
00000e5f	movl	0x08(%ebp),%edi
00000e62	movzbl	(%edi),%ecx
00000e65	movl	%ecx,%eax
00000e67	andl	$0x7f,%eax
00000e6a	testb	%cl,%cl
00000e6c	js	0x00000e76
00000e6e	leal	0x01(%edi),%ecx
00000e71	jmp	0x00000f00
00000e76	xorb	%bl,%bl
00000e78	cmpl	$0x02,%esi
00000e7b	jl	0x00000f99
00000e81	movzbl	0x01(%edi),%ecx
00000e85	movl	%ecx,%edx
00000e87	andl	$0x7f,%edx
00000e8a	shll	$0x07,%edx
00000e8d	orl	%edx,%eax
00000e8f	testb	%cl,%cl
00000e91	js	0x00000e98
00000e93	leal	0x02(%edi),%ecx
00000e96	jmp	0x00000f00
00000e98	xorb	%bl,%bl
00000e9a	cmpl	$0x03,%esi
00000e9d	jl	0x00000f99
00000ea3	movzbl	0x02(%edi),%ecx
00000ea7	movl	%ecx,%edx
00000ea9	andl	$0x7f,%edx
00000eac	shll	$0x0e,%edx
00000eaf	orl	%edx,%eax
00000eb1	testb	%cl,%cl
00000eb3	js	0x00000eba
00000eb5	leal	0x03(%edi),%ecx
00000eb8	jmp	0x00000f00
00000eba	xorb	%bl,%bl
00000ebc	cmpl	$0x04,%esi
00000ebf	jl	0x00000f99
00000ec5	movzbl	0x03(%edi),%ecx
00000ec9	movl	%ecx,%edx
00000ecb	andl	$0x7f,%edx
00000ece	shll	$0x15,%edx
00000ed1	orl	%edx,%eax
00000ed3	testb	%cl,%cl
00000ed5	js	0x00000edc
00000ed7	leal	0x04(%edi),%ecx
00000eda	jmp	0x00000f00
00000edc	xorb	%bl,%bl
00000ede	cmpl	$0x05,%esi
00000ee1	jl	0x00000f99
00000ee7	movzbl	0x04(%edi),%edx
00000eeb	xorb	%bl,%bl
00000eed	cmpb	$0x0f,%dl
00000ef0	ja	0x00000f99
00000ef6	shll	$0x1c,%edx
00000ef9	orl	%eax,%edx
00000efb	leal	0x05(%edi),%ecx
00000efe	movl	%edx,%eax
00000f00	xorb	%bl,%bl
00000f02	testl	%ecx,%ecx
00000f04	je	0x00000f99
00000f0a	movl	0x10(%ebp),%ecx
00000f0d	movl	(%ecx),%ecx
00000f0f	movl	0xf4(%ecx),%ecx
00000f12	addl	%eax,%ecx
00000f14	sbbl	%edx,%edx
00000f16	movl	0xe4(%ebp),%ebx
00000f19	movl	0x10850-0xe4e(%ebx),%ebx
00000f1f	cmpl	(%ebx),%ecx
00000f21	seta	%cl
00000f24	testb	$0x01,%dl
00000f27	setne	%dl
00000f2a	je	0x00000f2e
00000f2c	movb	%dl,%cl
00000f2e	xorb	%bl,%bl
00000f30	testb	%cl,%cl
00000f32	jne	0x00000f99
00000f34	movl	%eax,0x04(%esp)
00000f38	movl	0x10(%ebp),%ebx
00000f3b	movl	%ebx,(%esp)
00000f3e	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
00000f46	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
00000f4b	movl	(%ebx),%ecx
00000f4d	movl	%ebx,%edx
00000f4f	xorl	%eax,%eax
00000f51	cmpl	snappy::MaxCompressedLength(unsigned long),0xf4(%ecx)
00000f55	je	0x00000f6b
00000f57	cmpl	snappy::MaxCompressedLength(unsigned long),0xfc(%ecx)
00000f5b	movl	%ecx,%eax
00000f5d	js	0x00000f6b
00000f5f	movl	%edx,%ebx
00000f61	movl	%ebx,(%esp)
00000f64	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard()
00000f69	movl	(%ebx),%eax
00000f6b	movl	0xe4(%ebp),%ecx
00000f6e	movl	0x10858-0xe4e(%ecx),%ecx
00000f74	addl	$0x08,%ecx
00000f77	movl	%ecx,0xe8(%ebp)
00000f7a	movl	%edi,0xec(%ebp)
00000f7d	movl	%esi,0xf0(%ebp)
00000f80	movl	%eax,0x04(%esp)
00000f84	leal	0xe8(%ebp),%edi
00000f87	movl	%edi,(%esp)
00000f8a	calll	snappy::RawUncompress(snappy::Source*, char*)
00000f8f	movb	%al,%bl
00000f91	movl	%edi,(%esp)
00000f94	calll	snappy::ByteArraySource::~ByteArraySource()
00000f99	movzbl	%bl,%eax
00000f9c	addl	$0x1c,%esp
00000f9f	popl	%esi
00000fa0	popl	%edi
00000fa1	popl	%ebx
00000fa2	popl	%ebp
00000fa3	ret
00000fa4	movl	%eax,%esi
00000fa6	movl	%edi,(%esp)
00000fa9	calll	snappy::ByteArraySource::~ByteArraySource()
00000fae	movl	%esi,(%esp)
00000fb1	calll	__Unwind_Resume
00000fb6	calll	std::terminate()
00000fbb	nopl	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::IsValidCompressedBuffer(char const*, unsigned long):
00000fc0	pushl	%ebp
00000fc1	movl	%esp,%ebp
00000fc3	pushl	%ebx
00000fc4	pushl	%edi
00000fc5	pushl	%esi
00000fc6	subl	$0x3c,%esp
00000fc9	calll	0x00000fce
00000fce	popl	%eax
00000fcf	movl	0x10858-0xfce(%eax),%eax
00000fd5	addl	$0x08,%eax
00000fd8	movl	%eax,0xc8(%ebp)
00000fdb	movl	0x08(%ebp),%eax
00000fde	movl	%eax,0xcc(%ebp)
00000fe1	movl	0x0c(%ebp),%eax
00000fe4	movl	%eax,snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp)
00000fe7	movl	snappy::MaxCompressedLength(unsigned long),0xc4(%ebp)
00000fee	leal	0xc8(%ebp),%eax
00000ff1	movl	%eax,0xd8(%ebp)
00000ff4	movl	snappy::MaxCompressedLength(unsigned long),0xe0(%ebp)
00000ffb	movl	snappy::MaxCompressedLength(unsigned long),0xdc(%ebp)
00001002	movb	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00001006	movl	snappy::MaxCompressedLength(unsigned long),0xe4(%ebp)
0000100d	xorl	%esi,%esi
0000100f	movl	%esi,%edx
00001011	jmp	0x00001023
00001013	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00001020	addl	$0x07,%edx
00001023	xorb	%bl,%bl
00001025	cmpl	$0x1f,%edx
00001028	movl	%edx,%edi
0000102a	ja	0x000010b7
00001030	movl	0xd8(%ebp),%eax
00001033	movl	(%eax),%ecx
00001035	movl	0x0c(%ecx),%ecx
00001038	leal	0xf0(%ebp),%edx
0000103b	movl	%edx,0x04(%esp)
0000103f	movl	%eax,(%esp)
00001042	call	*%ecx
00001044	xorb	%bl,%bl
00001046	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
0000104a	je	0x000010b7
0000104c	movzbl	(%eax),%ebx
0000104f	movl	0xd8(%ebp),%ecx
00001052	movl	(%ecx),%eax
00001054	movl	0x10(%eax),%eax
00001057	movl	%ecx,(%esp)
0000105a	movl	$0x00000001,0x04(%esp)
00001062	call	*%eax
00001064	movl	%ebx,%eax
00001066	andl	$0x7f,%eax
00001069	movl	%edi,%edx
0000106b	movb	%dl,%cl
0000106d	shll	%cl,%eax
0000106f	orl	%eax,%esi
00001071	testb	%bl,%bl
00001073	jns	0x00001091
00001075	jmp	0x00001020
00001077	jmp	0x00001079
00001079	movl	%eax,%esi
0000107b	movl	0xd8(%ebp),%eax
0000107e	movl	0xe4(%ebp),%edx
00001081	movl	(%eax),%ecx
00001083	movl	0x10(%ecx),%ecx
00001086	movl	%edx,0x04(%esp)
0000108a	movl	%eax,(%esp)
0000108d	call	*%ecx
0000108f	jmp	0x000010e3
00001091	movl	%esi,0xc0(%ebp)
00001094	leal	0xc0(%ebp),%eax
00001097	movl	%eax,0x04(%esp)
0000109b	leal	0xd8(%ebp),%eax
0000109e	movl	%eax,(%esp)
000010a1	calll	void snappy::SnappyDecompressor::DecompressAllTags<snappy::SnappyDecompressionValidator>(snappy::SnappyDecompressionValidator*)
000010a6	xorb	%bl,%bl
000010a8	testb	$0x01,0xe8(%ebp)
000010ac	je	0x000010b7
000010ae	movl	0xc0(%ebp),%eax
000010b1	cmpl	0xc4(%ebp),%eax
000010b4	sete	%bl
000010b7	movl	0xd8(%ebp),%eax
000010ba	movl	0xe4(%ebp),%edx
000010bd	movl	(%eax),%ecx
000010bf	movl	0x10(%ecx),%ecx
000010c2	movl	%edx,0x04(%esp)
000010c6	movl	%eax,(%esp)
000010c9	call	*%ecx
000010cb	leal	0xc8(%ebp),%eax
000010ce	movl	%eax,(%esp)
000010d1	calll	snappy::ByteArraySource::~ByteArraySource()
000010d6	movzbl	%bl,%eax
000010d9	addl	$0x3c,%esp
000010dc	popl	%esi
000010dd	popl	%edi
000010de	popl	%ebx
000010df	popl	%ebp
000010e0	ret
000010e1	movl	%eax,%esi
000010e3	leal	0xc8(%ebp),%eax
000010e6	movl	%eax,(%esp)
000010e9	calll	snappy::ByteArraySource::~ByteArraySource()
000010ee	movl	%esi,(%esp)
000010f1	calll	__Unwind_Resume
000010f6	calll	std::terminate()
000010fb	calll	std::terminate()
snappy::RawCompress(char const*, unsigned long, char*, unsigned long*):
00001100	pushl	%ebp
00001101	movl	%esp,%ebp
00001103	pushl	%ebx
00001104	pushl	%edi
00001105	pushl	%esi
00001106	subl	$0x1c,%esp
00001109	calll	0x0000110e
0000110e	popl	%eax
0000110f	movl	0x10858-0x110e(%eax),%ecx
00001115	addl	$0x08,%ecx
00001118	movl	%ecx,0xe8(%ebp)
0000111b	movl	0x08(%ebp),%ecx
0000111e	movl	%ecx,0xec(%ebp)
00001121	movl	0x0c(%ebp),%ecx
00001124	movl	%ecx,0xf0(%ebp)
00001127	movl	0x1085c-0x110e(%eax),%eax
0000112d	addl	$0x08,%eax
00001130	movl	%eax,0xe0(%ebp)
00001133	movl	0x10(%ebp),%esi
00001136	movl	%esi,0xe4(%ebp)
00001139	leal	0xe0(%ebp),%ebx
0000113c	movl	%ebx,0x04(%esp)
00001140	leal	0xe8(%ebp),%edi
00001143	movl	%edi,(%esp)
00001146	calll	snappy::Compress(snappy::Source*, snappy::Sink*)
0000114b	movl	0x14(%ebp),%eax
0000114e	movl	0xe4(%ebp),%ecx
00001151	subl	%esi,%ecx
00001153	movl	%ecx,(%eax)
00001155	movl	%ebx,(%esp)
00001158	calll	snappy::UncheckedByteArraySink::~UncheckedByteArraySink()
0000115d	movl	%edi,(%esp)
00001160	calll	snappy::ByteArraySource::~ByteArraySource()
00001165	addl	$0x1c,%esp
00001168	popl	%esi
00001169	popl	%edi
0000116a	popl	%ebx
0000116b	popl	%ebp
0000116c	ret
0000116d	movl	%eax,%esi
0000116f	jmp	0x0000117b
00001171	movl	%eax,%esi
00001173	movl	%ebx,(%esp)
00001176	calll	snappy::UncheckedByteArraySink::~UncheckedByteArraySink()
0000117b	movl	%edi,(%esp)
0000117e	calll	snappy::ByteArraySource::~ByteArraySource()
00001183	movl	%esi,(%esp)
00001186	calll	__Unwind_Resume
0000118b	calll	std::terminate()
snappy::Compress(char const*, unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
00001190	pushl	%ebp
00001191	movl	%esp,%ebp
00001193	pushl	%edi
00001194	pushl	%esi
00001195	subl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%esp
00001198	movl	0x10(%ebp),%edi
0000119b	movl	%edi,(%esp)
0000119e	movl	0x0c(%ebp),%esi
000011a1	movl	$0xaaaaaaab,%ecx
000011a6	movl	%esi,%eax
000011a8	mull	%ecx
000011aa	shrl	$0x02,%edx
000011ad	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%esi,%edx),%eax
000011b1	movl	%eax,0x04(%esp)
000011b5	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
000011bd	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
000011c2	movl	(%edi),%ecx
000011c4	xorl	%eax,%eax
000011c6	cmpl	snappy::MaxCompressedLength(unsigned long),0xf4(%ecx)
000011ca	je	0x000011de
000011cc	cmpl	snappy::MaxCompressedLength(unsigned long),0xfc(%ecx)
000011d0	movl	%ecx,%eax
000011d2	js	0x000011de
000011d4	movl	%edi,(%esp)
000011d7	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard()
000011dc	movl	(%edi),%eax
000011de	movl	0x08(%ebp),%ecx
000011e1	leal	0xf4(%ebp),%edx
000011e4	movl	%edx,0x0c(%esp)
000011e8	movl	%eax,0x08(%esp)
000011ec	movl	%esi,0x04(%esp)
000011f0	movl	%ecx,(%esp)
000011f3	calll	snappy::RawCompress(char const*, unsigned long, char*, unsigned long*)
000011f8	movl	0xf4(%ebp),%esi
000011fb	movl	%esi,0x04(%esp)
000011ff	movl	%edi,(%esp)
00001202	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
0000120a	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
0000120f	movl	%esi,%eax
00001211	addl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%esp
00001214	popl	%esi
00001215	popl	%edi
00001216	popl	%ebp
00001217	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(sparsematrix.o):
(__TEXT,__text) section
CSparseMatrix::AdjustAllRowIndicesAfter(int, int):
00000000	pushl	%esi
00000001	movl	0x0c(%esp),%eax
00000005	incl	%eax
00000006	movl	0x08(%esp),%ecx
0000000a	cmpl	(%ecx),%eax
0000000c	jge	0x0000002c
0000000e	movl	0x10(%esp),%edx
00000012	nopw	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000020	movl	0x08(%ecx),%esi
00000023	addl	%edx,0x04(%esi,%eax,8)
00000027	incl	%eax
00000028	cmpl	(%ecx),%eax
0000002a	jl	0x00000020
0000002c	popl	%esi
0000002d	ret
0000002e	nop
CSparseMatrix::SetDimensions(int, int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%edi
00000034	pushl	%esi
00000035	subl	$0x10,%esp
00000038	movl	0x0c(%ebp),%edi
0000003b	movl	0x08(%ebp),%esi
0000003e	movl	%edi,(%esi)
00000040	movl	0x10(%ebp),%eax
00000043	movl	%eax,0x04(%esi)
00000046	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x28(%esi)
0000004d	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x14(%esi)
00000054	testl	%edi,%edi
00000056	je	0x000000a1
00000058	movl	0x0c(%esi),%ecx
0000005b	xorl	%eax,%eax
0000005d	cmpl	%edi,%ecx
0000005f	jge	0x00000077
00000061	leal	0x08(%esi),%eax
00000064	movl	%edi,%edx
00000066	subl	%ecx,%edx
00000068	movl	%edx,0x04(%esp)
0000006c	movl	%eax,(%esp)
0000006f	calll	CUtlMemory<CSparseMatrix::RowDescriptor_t, int>::Grow(int)
00000074	movl	0x14(%esi),%eax
00000077	leal	(%eax,%edi),%ecx
0000007a	movl	%ecx,0x14(%esi)
0000007d	movl	0x08(%esi),%ecx
00000080	movl	%ecx,0x18(%esi)
00000083	testl	%eax,%eax
00000085	jle	0x000000a1
00000087	testl	%edi,%edi
00000089	jle	0x000000a1
0000008b	shll	$0x03,%eax
0000008e	movl	%eax,0x08(%esp)
00000092	movl	%ecx,0x04(%esp)
00000096	leal	(%ecx,%edi,8),%eax
00000099	movl	%eax,(%esp)
0000009c	calll	_memmove
000000a1	cmpl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),(%esi)
000000a4	jle	0x000000ca
000000a6	xorl	%eax,%eax
000000a8	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000000b0	movl	0x08(%esi),%ecx
000000b3	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),(%ecx,%eax,8)
000000ba	movl	0x08(%esi),%ecx
000000bd	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x04(%ecx,%eax,8)
000000c5	incl	%eax
000000c6	cmpl	(%esi),%eax
000000c8	jl	0x000000b0
000000ca	movl	$0xffffffff,CSparseMatrix::SetDimensions(int, int)(%esi)
000000d1	addl	$0x10,%esp
000000d4	popl	%esi
000000d5	popl	%edi
000000d6	popl	%ebp
000000d7	ret
000000d8	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::SetElement(int, int, float):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%ebx
000000e4	pushl	%edi
000000e5	pushl	%esi
000000e6	subl	$0x2c,%esp
000000e9	movl	0x08(%ebp),%ecx
000000ec	movl	0x08(%ecx),%eax
000000ef	movl	%eax,0xe4(%ebp)
000000f2	movl	0x0c(%ebp),%edi
000000f5	movl	0x04(%eax,%edi,8),%esi
000000f9	movl	(%eax,%edi,8),%eax
000000fc	movl	%eax,0xf0(%ebp)
000000ff	movss	0x14(%ebp),%xmm1
00000104	testl	%eax,%eax
00000106	je	0x00000312
0000010c	movl	0x1c(%ecx),%eax
0000010f	movl	%eax,CSparseMatrix::SetElement(int, int, float)(%ebp)
00000112	leal	0x04(%eax,%esi,8),%edx
00000116	movl	%esi,0xec(%ebp)
00000119	leal	0x1c(%ecx),%eax
0000011c	movl	%eax,0xe8(%ebp)
0000011f	xorl	%esi,%esi
00000121	movl	%esi,%ebx
00000123	jmp	0x0000013c
00000125	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000130	cmpl	%eax,%ecx
00000132	jg	0x000001d2
00000138	addl	$0x08,%esi
0000013b	incl	%ebx
0000013c	cmpl	0xf0(%ebp),%ebx
0000013f	jge	0x000001d2
00000145	movl	0xfc(%edx,%esi),%ecx
00000149	movl	0x10(%ebp),%eax
0000014c	cmpl	%eax,%ecx
0000014e	jne	0x00000130
00000150	pxor	%xmm0,%xmm0
00000154	ucomiss	%xmm0,%xmm1
00000157	jne	0x0000015b
00000159	jnp	0x0000016f
0000015b	movl	0xec(%ebp),%eax
0000015e	movl	CSparseMatrix::SetElement(int, int, float)(%ebp),%ecx
00000161	leal	(%ecx,%eax,8),%eax
00000164	movss	%xmm1,0x04(%esi,%eax)
0000016a	jmp	0x000003bc
0000016f	movl	0xf0(%ebp),%eax
00000172	decl	%eax
00000173	movl	0xe4(%ebp),%ecx
00000176	movl	%eax,(%ecx,%edi,8)
00000179	movl	0x08(%ebp),%edx
0000017c	movl	0x28(%edx),%eax
0000017f	movl	%eax,%ecx
00000181	subl	0xec(%ebp),%ecx
00000184	subl	%ebx,%ecx
00000186	decl	%ecx
00000187	testl	%ecx,%ecx
00000189	jle	0x000001b8
0000018b	movl	0x1c(%edx),%ecx
0000018e	movl	0xec(%ebp),%ebx
00000191	leal	(%ecx,%ebx,8),%ecx
00000194	leal	0x08(%esi,%ecx),%edx
00000198	movl	%edx,0x04(%esp)
0000019c	addl	%esi,%ecx
0000019e	movl	%ecx,(%esp)
000001a1	decl	%eax
000001a2	subl	%ebx,%eax
000001a4	shll	$0x03,%eax
000001a7	subl	%esi,%eax
000001a9	movl	%eax,0x08(%esp)
000001ad	calll	_memmove
000001b2	movl	0x08(%ebp),%edx
000001b5	movl	0x28(%edx),%eax
000001b8	decl	%eax
000001b9	movl	%eax,0x28(%edx)
000001bc	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax)
000001c0	incl	%edi
000001c1	cmpl	(%edx),%edi
000001c3	jge	0x000003bc
000001c9	movl	0x08(%edx),%eax
000001cc	decl	0x04(%eax,%edi,8)
000001d0	jmp	0x000001c0
000001d2	pxor	%xmm0,%xmm0
000001d6	ucomiss	%xmm0,%xmm1
000001d9	jne	0x000001e1
000001db	jnp	0x000003bc
000001e1	movl	0xf0(%ebp),%eax
000001e4	leal	0x01(%eax),%ecx
000001e7	movl	0xe4(%ebp),%edx
000001ea	movl	%ecx,(%edx,%edi,8)
000001ed	cmpl	%ebx,%eax
000001ef	jne	0x00000270
000001f1	movl	0x08(%ebp),%esi
000001f4	movl	0x20(%esi),%edx
000001f7	movl	0x28(%esi),%eax
000001fa	leal	0x01(%eax),%ecx
000001fd	cmpl	%edx,%ecx
000001ff	jle	0x00000215
00000201	subl	%edx,%ecx
00000203	movl	%ecx,0x04(%esp)
00000207	movl	0xe8(%ebp),%eax
0000020a	movl	%eax,(%esp)
0000020d	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
00000212	movl	0x28(%esi),%eax
00000215	movl	0xec(%ebp),%ebx
00000218	addl	0xf0(%ebp),%ebx
0000021b	incl	%eax
0000021c	movl	%eax,0x28(%esi)
0000021f	movl	0x1c(%esi),%ecx
00000222	movl	%ecx,0x2c(%esi)
00000225	subl	%ebx,%eax
00000227	decl	%eax
00000228	testl	%eax,%eax
0000022a	movl	%esi,%edx
0000022c	jle	0x00000251
0000022e	shll	$0x03,%eax
00000231	movl	%eax,0x08(%esp)
00000235	leal	(%ecx,%ebx,8),%eax
00000238	movl	%eax,0x04(%esp)
0000023c	leal	0x08(%ecx,%ebx,8),%eax
00000240	movl	%eax,(%esp)
00000243	movl	%edx,%esi
00000245	calll	_memmove
0000024a	movl	%esi,%edx
0000024c	movl	0xe8(%ebp),%eax
0000024f	movl	(%eax),%ecx
00000251	shll	$0x03,%ebx
00000254	addl	%ecx,%ebx
00000256	movss	0x14(%ebp),%xmm0
0000025b	je	0x00000300
00000261	movss	%xmm0,0x04(%ebx)
00000266	movl	0x10(%ebp),%eax
00000269	movl	%eax,(%ebx)
0000026b	jmp	0x00000300
00000270	movl	0x08(%ebp),%eax
00000273	movl	0x20(%eax),%edx
00000276	movl	0x28(%eax),%eax
00000279	leal	0x01(%eax),%ecx
0000027c	cmpl	%edx,%ecx
0000027e	jle	0x00000297
00000280	subl	%edx,%ecx
00000282	movl	%ecx,0x04(%esp)
00000286	movl	0xe8(%ebp),%eax
00000289	movl	%eax,(%esp)
0000028c	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
00000291	movl	0x08(%ebp),%eax
00000294	movl	0x28(%eax),%eax
00000297	leal	0x01(%eax),%ecx
0000029a	movl	0x08(%ebp),%edx
0000029d	movl	%ecx,0x28(%edx)
000002a0	movl	0x1c(%edx),%ecx
000002a3	movl	%ecx,0x2c(%edx)
000002a6	subl	0xec(%ebp),%eax
000002a9	movl	%eax,%edx
000002ab	subl	%ebx,%edx
000002ad	testl	%edx,%edx
000002af	jg	0x000002b6
000002b1	movl	0xec(%ebp),%eax
000002b4	jmp	0x000002de
000002b6	movl	0xec(%ebp),%ebx
000002b9	leal	(%ecx,%ebx,8),%ecx
000002bc	leal	0x08(%esi,%ecx),%edx
000002c0	addl	%esi,%ecx
000002c2	movl	%ecx,0x04(%esp)
000002c6	movl	%edx,(%esp)
000002c9	shll	$0x03,%eax
000002cc	subl	%esi,%eax
000002ce	movl	%eax,0x08(%esp)
000002d2	calll	_memmove
000002d7	movl	0xe8(%ebp),%eax
000002da	movl	(%eax),%ecx
000002dc	movl	%ebx,%eax
000002de	leal	(%ecx,%eax,8),%eax
000002e1	movl	%eax,%ecx
000002e3	addl	%esi,%ecx
000002e5	movl	0x08(%ebp),%edx
000002e8	movss	0x14(%ebp),%xmm0
000002ed	je	0x00000300
000002ef	movss	%xmm0,0x04(%esi,%eax)
000002f5	movl	0x10(%ebp),%ecx
000002f8	movl	%ecx,(%esi,%eax)
000002fb	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000300	incl	%edi
00000301	cmpl	(%edx),%edi
00000303	jge	0x000003bc
00000309	movl	0x08(%edx),%eax
0000030c	incl	0x04(%eax,%edi,8)
00000310	jmp	0x00000300
00000312	movl	%esi,0xec(%ebp)
00000315	pxor	%xmm0,%xmm0
00000319	ucomiss	%xmm0,%xmm1
0000031c	jne	0x00000324
0000031e	jnp	0x000003bc
00000324	movl	0xe4(%ebp),%eax
00000327	movl	$0x00000001,(%eax,%edi,8)
0000032e	movl	%ecx,%ebx
00000330	movl	0x20(%ebx),%edx
00000333	movl	0x28(%ebx),%eax
00000336	leal	0x1c(%ebx),%esi
00000339	leal	0x01(%eax),%ecx
0000033c	cmpl	%edx,%ecx
0000033e	jle	0x00000351
00000340	subl	%edx,%ecx
00000342	movl	%ecx,0x04(%esp)
00000346	movl	%esi,(%esp)
00000349	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
0000034e	movl	0x28(%ebx),%eax
00000351	movl	%esi,0xf0(%ebp)
00000354	incl	%eax
00000355	movl	%eax,0x28(%ebx)
00000358	movl	0x1c(%ebx),%ecx
0000035b	movl	%ecx,0x2c(%ebx)
0000035e	movl	0xec(%ebp),%esi
00000361	subl	%esi,%eax
00000363	decl	%eax
00000364	testl	%eax,%eax
00000366	movl	%ebx,%edx
00000368	jle	0x0000038d
0000036a	shll	$0x03,%eax
0000036d	movl	%eax,0x08(%esp)
00000371	leal	(%ecx,%esi,8),%eax
00000374	movl	%eax,0x04(%esp)
00000378	leal	0x08(%ecx,%esi,8),%eax
0000037c	movl	%eax,(%esp)
0000037f	movl	%edx,%ebx
00000381	calll	_memmove
00000386	movl	%ebx,%edx
00000388	movl	0xf0(%ebp),%eax
0000038b	movl	(%eax),%ecx
0000038d	movl	0x10(%ebp),%eax
00000390	shll	$0x03,%esi
00000393	addl	%ecx,%esi
00000395	movss	0x14(%ebp),%xmm0
0000039a	je	0x000003b7
0000039c	movss	%xmm0,0x04(%esi)
000003a1	movl	%eax,(%esi)
000003a3	jmp	0x000003b7
000003a5	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000003b0	movl	0x08(%edx),%eax
000003b3	incl	0x04(%eax,%edi,8)
000003b7	incl	%edi
000003b8	cmpl	(%edx),%edi
000003ba	jl	0x000003b0
000003bc	addl	$0x2c,%esp
000003bf	popl	%esi
000003c0	popl	%edi
000003c1	popl	%ebx
000003c2	popl	%ebp
000003c3	ret
000003c4	nopw	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::FinishedAppending():
000003d0	pushl	%esi
000003d1	movl	0x08(%esp),%eax
000003d5	movl	CSparseMatrix::SetDimensions(int, int)(%eax),%ecx
000003d8	jmp	0x000003ea
000003da	nopw	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000003e0	movl	0x08(%eax),%edx
000003e3	movl	0x28(%eax),%esi
000003e6	movl	%esi,0x04(%edx,%ecx,8)
000003ea	incl	%ecx
000003eb	cmpl	(%eax),%ecx
000003ed	jl	0x000003e0
000003ef	popl	%esi
000003f0	ret
000003f1	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::AppendElement(int, int, float):
00000400	pushl	%ebp
00000401	movl	%esp,%ebp
00000403	pushl	%ebx
00000404	pushl	%edi
00000405	pushl	%esi
00000406	subl	$0x1c,%esp
00000409	pxor	%xmm0,%xmm0
0000040d	ucomiss	0x14(%ebp),%xmm0
00000411	jne	0x00000419
00000413	jnp	0x000004bf
00000419	movl	0x0c(%ebp),%eax
0000041c	movl	0x08(%ebp),%edi
0000041f	movl	CSparseMatrix::SetDimensions(int, int)(%edi),%ecx
00000422	cmpl	%eax,%ecx
00000424	jne	0x0000043a
00000426	jmp	0x0000043f
00000428	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000430	movl	0x08(%edi),%edx
00000433	movl	0x28(%edi),%esi
00000436	movl	%esi,0x04(%edx,%ecx,8)
0000043a	incl	%ecx
0000043b	cmpl	%eax,%ecx
0000043d	jle	0x00000430
0000043f	movl	%eax,CSparseMatrix::SetDimensions(int, int)(%edi)
00000442	movl	0x08(%edi),%ecx
00000445	incl	(%ecx,%eax,8)
00000448	movl	0x20(%edi),%eax
0000044b	movl	0x28(%edi),%esi
0000044e	leal	0x1c(%edi),%ebx
00000451	leal	0x01(%esi),%edx
00000454	cmpl	%eax,%edx
00000456	movl	%esi,%ecx
00000458	jle	0x00000477
0000045a	movl	%edx,%ecx
0000045c	subl	%eax,%ecx
0000045e	movl	%ecx,0x04(%esp)
00000462	movl	%ebx,(%esp)
00000465	movl	%ebx,0xf0(%ebp)
00000468	movl	%edx,%ebx
0000046a	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
0000046f	movl	%ebx,%edx
00000471	movl	0xf0(%ebp),%ebx
00000474	movl	0x28(%edi),%ecx
00000477	movl	%ebx,0xf0(%ebp)
0000047a	incl	%ecx
0000047b	movl	%ecx,0x28(%edi)
0000047e	movl	0x1c(%edi),%eax
00000481	movl	%eax,0x2c(%edi)
00000484	subl	%esi,%ecx
00000486	decl	%ecx
00000487	testl	%ecx,%ecx
00000489	jle	0x000004a9
0000048b	shll	$0x03,%ecx
0000048e	movl	%ecx,0x08(%esp)
00000492	leal	(%eax,%esi,8),%ecx
00000495	movl	%ecx,0x04(%esp)
00000499	leal	(%eax,%edx,8),%eax
0000049c	movl	%eax,(%esp)
0000049f	calll	_memmove
000004a4	movl	0xf0(%ebp),%eax
000004a7	movl	(%eax),%eax
000004a9	shll	$0x03,%esi
000004ac	addl	%eax,%esi
000004ae	je	0x000004bf
000004b0	movl	0x10(%ebp),%eax
000004b3	movss	0x14(%ebp),%xmm0
000004b8	movss	%xmm0,0x04(%esi)
000004bd	movl	%eax,(%esi)
000004bf	addl	$0x1c,%esp
000004c2	popl	%esi
000004c3	popl	%edi
000004c4	popl	%ebx
000004c5	popl	%ebp
000004c6	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(splitstring.o):
(__TEXT,__text) section
CSplitString::CSplitString(char const*, char const**, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%edi
0000000b	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000012	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
00000018	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000001f	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000026	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000002d	movl	0x14(%ebp),%eax
00000030	movl	%eax,0x0c(%esp)
00000034	movl	0x10(%ebp),%eax
00000037	movl	%eax,0x08(%esp)
0000003b	movl	0x0c(%ebp),%eax
0000003e	movl	%eax,0x04(%esp)
00000042	movl	%edi,(%esp)
00000045	calll	CSplitString::Construct(char const*, char const**, int)
0000004a	addl	$0x10,%esp
0000004d	popl	%esi
0000004e	popl	%edi
0000004f	popl	%ebp
00000050	ret
00000051	movl	%eax,%esi
00000053	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000005a	movl	(%edi),%eax
0000005c	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000060	jns	0x0000006d
00000062	movl	%eax,0x10(%edi)
00000065	movl	%esi,(%esp)
00000068	calll	__Unwind_Resume
0000006d	testl	%eax,%eax
0000006f	jne	0x00000081
00000071	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000078	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000007f	jmp	0x000000a3
00000081	movl	%eax,(%esp)
00000084	calll	_free
00000089	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000008f	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000093	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000009a	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000000a1	js	0x000000aa
000000a3	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000000aa	movl	%esi,(%esp)
000000ad	calll	__Unwind_Resume
000000b2	nopw	%cs:CSplitString::CSplitString(char const*, char const**, int)(%eax,%eax)
CSplitString::CSplitString(char const*, char const**, int):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%edi
000000cb	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000000d2	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000000d8	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
000000df	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000000e6	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000000ed	movl	0x14(%ebp),%eax
000000f0	movl	%eax,0x0c(%esp)
000000f4	movl	0x10(%ebp),%eax
000000f7	movl	%eax,0x08(%esp)
000000fb	movl	0x0c(%ebp),%eax
000000fe	movl	%eax,0x04(%esp)
00000102	movl	%edi,(%esp)
00000105	calll	CSplitString::Construct(char const*, char const**, int)
0000010a	addl	$0x10,%esp
0000010d	popl	%esi
0000010e	popl	%edi
0000010f	popl	%ebp
00000110	ret
00000111	movl	%eax,%esi
00000113	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000011a	movl	(%edi),%eax
0000011c	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000120	jns	0x0000012d
00000122	movl	%eax,0x10(%edi)
00000125	movl	%esi,(%esp)
00000128	calll	__Unwind_Resume
0000012d	testl	%eax,%eax
0000012f	jne	0x00000141
00000131	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000138	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000013f	jmp	0x00000163
00000141	movl	%eax,(%esp)
00000144	calll	_free
00000149	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000014f	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000153	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000015a	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000161	js	0x0000016a
00000163	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000016a	movl	%esi,(%esp)
0000016d	calll	__Unwind_Resume
00000172	nopw	%cs:CSplitString::CSplitString(char const*, char const**, int)(%eax,%eax)
CSplitString::Construct(char const*, char const**, int):
00000180	pushl	%ebp
00000181	movl	%esp,%ebp
00000183	pushl	%ebx
00000184	pushl	%edi
00000185	pushl	%esi
00000186	subl	$0x1c,%esp
00000189	movl	0x0c(%ebp),%ebx
0000018c	movl	%ebx,(%esp)
0000018f	calll	_strlen
00000194	movl	%eax,%esi
00000196	incl	%esi
00000197	testl	%esi,%esi
00000199	movl	$0xffffffff,%eax
0000019e	cmovnsl	%esi,%eax
000001a1	movl	%eax,(%esp)
000001a4	calll	operator new[](unsigned long)
000001a9	movl	0x08(%ebp),%edi
000001ac	movl	%eax,0x14(%edi)
000001af	movl	%esi,0x08(%esp)
000001b3	movl	%ebx,0x04(%esp)
000001b7	movl	%eax,(%esp)
000001ba	calll	_memcpy
000001bf	movl	%edi,%edx
000001c1	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edx)
000001c8	movl	(%edx),%eax
000001ca	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edx)
000001ce	js	0x000001ef
000001d0	testl	%eax,%eax
000001d2	je	0x000001e6
000001d4	movl	%eax,(%esp)
000001d7	movl	%edx,%esi
000001d9	calll	_free
000001de	movl	%esi,%edx
000001e0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edx)
000001e6	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edx)
000001ed	xorl	%eax,%eax
000001ef	movl	%eax,0x10(%edx)
000001f2	movl	0x0c(%ebp),%eax
000001f5	movl	%eax,0xf0(%ebp)
000001f8	jmp	0x0000029e
000001fd	nopl	(%eax)
00000200	movl	0x10(%ebp),%eax
00000203	movl	(%eax,%ebx,4),%eax
00000206	movl	%eax,(%esp)
00000209	movl	%edx,%edi
0000020b	calll	_strlen
00000210	movl	%edi,%edx
00000212	movl	%eax,0xec(%ebp)
00000215	cmpl	0xf0(%ebp),%esi
00000218	jbe	0x00000298
0000021a	movl	%esi,%eax
0000021c	subl	0x0c(%ebp),%eax
0000021f	movl	0x14(%edx),%ecx
00000222	movl	%ecx,0xe8(%ebp)
00000225	movb	CSplitString::CSplitString(char const*, char const**, int),(%ecx,%eax)
00000229	movl	0x04(%edx),%eax
0000022c	movl	0x0c(%edx),%edi
0000022f	leal	0x01(%edi),%ebx
00000232	cmpl	%eax,%ebx
00000234	movl	%edi,%ecx
00000236	jle	0x00000255
00000238	movl	%ebx,%ecx
0000023a	subl	%eax,%ecx
0000023c	movl	%ecx,0x04(%esp)
00000240	movl	%edx,(%esp)
00000243	movl	%ebx,0xe4(%ebp)
00000246	movl	%edx,%ebx
00000248	calll	CUtlMemory<char*, int>::Grow(int)
0000024d	movl	%ebx,%edx
0000024f	movl	0xe4(%ebp),%ebx
00000252	movl	0x0c(%edx),%ecx
00000255	incl	%ecx
00000256	movl	%ecx,0x0c(%edx)
00000259	movl	(%edx),%eax
0000025b	movl	%eax,0x10(%edx)
0000025e	subl	%edi,%ecx
00000260	decl	%ecx
00000261	testl	%ecx,%ecx
00000263	jle	0x00000284
00000265	shll	$0x02,%ecx
00000268	movl	%ecx,0x08(%esp)
0000026c	leal	(%eax,%edi,4),%ecx
0000026f	movl	%ecx,0x04(%esp)
00000273	leal	(%eax,%ebx,4),%eax
00000276	movl	%eax,(%esp)
00000279	movl	%edx,%ebx
0000027b	calll	_memmove
00000280	movl	%ebx,%edx
00000282	movl	(%edx),%eax
00000284	shll	$0x02,%edi
00000287	addl	%eax,%edi
00000289	je	0x00000298
0000028b	movl	0xf0(%ebp),%eax
0000028e	subl	0x0c(%ebp),%eax
00000291	movl	0xe8(%ebp),%ecx
00000294	addl	%eax,%ecx
00000296	movl	%ecx,(%edi)
00000298	addl	0xec(%ebp),%esi
0000029b	movl	%esi,0xf0(%ebp)
0000029e	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x14(%ebp)
000002a2	jle	0x000002e6
000002a4	xorl	%edi,%edi
000002a6	movl	$0xffffffff,%ebx
000002ab	xorl	%esi,%esi
000002ad	nopl	(%eax)
000002b0	movl	0x10(%ebp),%eax
000002b3	movl	(%eax,%edi,4),%eax
000002b6	movl	%eax,0x04(%esp)
000002ba	movl	0xf0(%ebp),%eax
000002bd	movl	%eax,(%esp)
000002c0	calll	V_stristr(char const*, char const*)
000002c5	testl	%eax,%eax
000002c7	je	0x000002d5
000002c9	testl	%esi,%esi
000002cb	je	0x000002d1
000002cd	cmpl	%esi,%eax
000002cf	jae	0x000002d5
000002d1	movl	%edi,%ebx
000002d3	movl	%eax,%esi
000002d5	incl	%edi
000002d6	cmpl	%edi,0x14(%ebp)
000002d9	jne	0x000002b0
000002db	testl	%esi,%esi
000002dd	movl	0x08(%ebp),%edx
000002e0	jne	0x00000200
000002e6	movl	0xf0(%ebp),%eax
000002e9	cmpb	CSplitString::CSplitString(char const*, char const**, int),(%eax)
000002ec	je	0x00000356
000002ee	subl	0x0c(%ebp),%eax
000002f1	addl	0x14(%edx),%eax
000002f4	movl	%eax,0xf0(%ebp)
000002f7	movl	0x04(%edx),%eax
000002fa	movl	0x0c(%edx),%esi
000002fd	leal	0x01(%esi),%edi
00000300	cmpl	%eax,%edi
00000302	movl	%esi,%ecx
00000304	jle	0x0000031d
00000306	movl	%edi,%ecx
00000308	subl	%eax,%ecx
0000030a	movl	%ecx,0x04(%esp)
0000030e	movl	%edx,(%esp)
00000311	movl	%edx,%ebx
00000313	calll	CUtlMemory<char*, int>::Grow(int)
00000318	movl	%ebx,%edx
0000031a	movl	0x0c(%edx),%ecx
0000031d	incl	%ecx
0000031e	movl	%ecx,0x0c(%edx)
00000321	movl	(%edx),%eax
00000323	movl	%eax,0x10(%edx)
00000326	subl	%esi,%ecx
00000328	decl	%ecx
00000329	testl	%ecx,%ecx
0000032b	jle	0x0000034a
0000032d	shll	$0x02,%ecx
00000330	movl	%ecx,0x08(%esp)
00000334	leal	(%eax,%esi,4),%ecx
00000337	movl	%ecx,0x04(%esp)
0000033b	leal	(%eax,%edi,4),%eax
0000033e	movl	%eax,(%esp)
00000341	movl	%edx,%edi
00000343	calll	_memmove
00000348	movl	(%edi),%eax
0000034a	shll	$0x02,%esi
0000034d	addl	%eax,%esi
0000034f	movl	0xf0(%ebp),%eax
00000352	je	0x00000356
00000354	movl	%eax,(%esi)
00000356	addl	$0x1c,%esp
00000359	popl	%esi
0000035a	popl	%edi
0000035b	popl	%ebx
0000035c	popl	%ebp
0000035d	ret
0000035e	nop
CSplitString::CSplitString(char const*, char const*):
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	pushl	%edi
00000364	pushl	%esi
00000365	subl	$0x20,%esp
00000368	movl	0x10(%ebp),%eax
0000036b	movl	%eax,0xf4(%ebp)
0000036e	movl	0x08(%ebp),%edi
00000371	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000378	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000037e	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000385	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
0000038c	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000393	leal	0xf4(%ebp),%eax
00000396	movl	%eax,0x08(%esp)
0000039a	movl	0x0c(%ebp),%eax
0000039d	movl	%eax,0x04(%esp)
000003a1	movl	%edi,(%esp)
000003a4	movl	$0x00000001,0x0c(%esp)
000003ac	calll	CSplitString::Construct(char const*, char const**, int)
000003b1	addl	$0x20,%esp
000003b4	popl	%esi
000003b5	popl	%edi
000003b6	popl	%ebp
000003b7	ret
000003b8	movl	%eax,%esi
000003ba	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
000003c1	movl	(%edi),%eax
000003c3	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000003c7	jns	0x000003d4
000003c9	movl	%eax,0x10(%edi)
000003cc	movl	%esi,(%esp)
000003cf	calll	__Unwind_Resume
000003d4	testl	%eax,%eax
000003d6	jne	0x000003e8
000003d8	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000003df	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000003e6	jmp	0x0000040a
000003e8	movl	%eax,(%esp)
000003eb	calll	_free
000003f0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000003f6	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000003fa	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000401	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000408	js	0x00000411
0000040a	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000411	movl	%esi,(%esp)
00000414	calll	__Unwind_Resume
00000419	nopl	CSplitString::CSplitString(char const*, char const**, int)(%eax)
CSplitString::CSplitString(char const*, char const*):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%edi
00000424	pushl	%esi
00000425	subl	$0x20,%esp
00000428	movl	0x10(%ebp),%eax
0000042b	movl	%eax,0xf4(%ebp)
0000042e	movl	0x08(%ebp),%edi
00000431	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000438	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000043e	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000445	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
0000044c	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000453	leal	0xf4(%ebp),%eax
00000456	movl	%eax,0x08(%esp)
0000045a	movl	0x0c(%ebp),%eax
0000045d	movl	%eax,0x04(%esp)
00000461	movl	%edi,(%esp)
00000464	movl	$0x00000001,0x0c(%esp)
0000046c	calll	CSplitString::Construct(char const*, char const**, int)
00000471	addl	$0x20,%esp
00000474	popl	%esi
00000475	popl	%edi
00000476	popl	%ebp
00000477	ret
00000478	movl	%eax,%esi
0000047a	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000481	movl	(%edi),%eax
00000483	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000487	jns	0x00000494
00000489	movl	%eax,0x10(%edi)
0000048c	movl	%esi,(%esp)
0000048f	calll	__Unwind_Resume
00000494	testl	%eax,%eax
00000496	jne	0x000004a8
00000498	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000049f	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000004a6	jmp	0x000004ca
000004a8	movl	%eax,(%esp)
000004ab	calll	_free
000004b0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000004b6	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000004ba	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000004c1	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000004c8	js	0x000004d1
000004ca	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000004d1	movl	%esi,(%esp)
000004d4	calll	__Unwind_Resume
000004d9	nopl	CSplitString::CSplitString(char const*, char const**, int)(%eax)
CSplitString::~CSplitString():
000004e0	pushl	%ebp
000004e1	movl	%esp,%ebp
000004e3	pushl	%esi
000004e4	pushl	%eax
000004e5	movl	0x08(%ebp),%esi
000004e8	movl	0x14(%esi),%eax
000004eb	testl	%eax,%eax
000004ed	je	0x000004f7
000004ef	movl	%eax,(%esp)
000004f2	calll	operator delete[](void*)
000004f7	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
000004fe	movl	(%esi),%eax
00000500	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000504	jns	0x0000050b
00000506	movl	%eax,0x10(%esi)
00000509	jmp	0x00000548
0000050b	testl	%eax,%eax
0000050d	jne	0x0000051f
0000050f	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000516	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000051d	jmp	0x00000541
0000051f	movl	%eax,(%esp)
00000522	calll	_free
00000527	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
0000052d	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000531	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000538	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000053f	js	0x00000548
00000541	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000548	addl	$0x04,%esp
0000054b	popl	%esi
0000054c	popl	%ebp
0000054d	ret
0000054e	nop
CSplitString::~CSplitString():
00000550	pushl	%ebp
00000551	movl	%esp,%ebp
00000553	pushl	%esi
00000554	pushl	%eax
00000555	movl	0x08(%ebp),%esi
00000558	movl	0x14(%esi),%eax
0000055b	testl	%eax,%eax
0000055d	je	0x00000567
0000055f	movl	%eax,(%esp)
00000562	calll	operator delete[](void*)
00000567	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
0000056e	movl	(%esi),%eax
00000570	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000574	jns	0x0000057b
00000576	movl	%eax,0x10(%esi)
00000579	jmp	0x000005b8
0000057b	testl	%eax,%eax
0000057d	jne	0x0000058f
0000057f	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000586	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000058d	jmp	0x000005b1
0000058f	movl	%eax,(%esp)
00000592	calll	_free
00000597	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
0000059d	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
000005a1	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005a8	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
000005af	js	0x000005b8
000005b1	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005b8	addl	$0x04,%esp
000005bb	popl	%esi
000005bc	popl	%ebp
000005bd	ret
000005be	nop
CSplitString::PurgeAndDeleteElements():
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%esi
000005c4	pushl	%eax
000005c5	movl	0x08(%ebp),%esi
000005c8	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
000005cf	movl	(%esi),%eax
000005d1	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
000005d5	js	0x000005f2
000005d7	testl	%eax,%eax
000005d9	je	0x000005e9
000005db	movl	%eax,(%esp)
000005de	calll	_free
000005e3	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
000005e9	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005f0	xorl	%eax,%eax
000005f2	movl	%eax,0x10(%esi)
000005f5	addl	$0x04,%esp
000005f8	popl	%esi
000005f9	popl	%ebp
000005fa	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(stringpool.o):
(__TEXT,__text) section
StrLess(char const* const&, char const* const&):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x08,%esp
00000006	movl	0x08(%ebp),%eax
00000009	movl	(%eax),%eax
0000000b	movl	0x0c(%ebp),%ecx
0000000e	movl	(%ecx),%ecx
00000010	movl	%ecx,0x04(%esp)
00000014	movl	%eax,(%esp)
00000017	calll	V_stricmp(char const*, char const*)
0000001c	shrl	$0x1f,%eax
0000001f	addl	$0x08,%esp
00000022	popl	%ebp
00000023	ret
00000024	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::CStringPool():
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%esi
00000034	pushl	%eax
00000035	calll	0x0000003a
0000003a	popl	%eax
0000003b	leal	StrLess(char const* const&, char const* const&)-0x3a(%eax),%eax
00000041	movl	0x08(%ebp),%esi
00000044	movl	%eax,(%esi)
00000046	movl	CStringPool::~CStringPool(),0x08(%esi)
0000004d	movl	$0x00000020,0x0c(%esi)
00000054	movl	$0x00000c00,(%esp)
0000005b	calll	_malloc
00000060	movl	%eax,0x04(%esi)
00000063	movw	$0xffff,0x10(%esi)
00000069	movw	StrLess(char const* const&, char const* const&),0x12(%esi)
0000006f	movw	$0xffff,0x14(%esi)
00000075	movw	$0xffff,0x16(%esi)
0000007b	movl	%eax,0x18(%esi)
0000007e	addl	$0x04,%esp
00000081	popl	%esi
00000082	popl	%ebp
00000083	ret
00000084	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::CStringPool():
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	pushl	%esi
00000094	pushl	%eax
00000095	calll	0x0000009a
0000009a	popl	%eax
0000009b	leal	StrLess(char const* const&, char const* const&)-0x9a(%eax),%eax
000000a1	movl	0x08(%ebp),%esi
000000a4	movl	%eax,(%esi)
000000a6	movl	CStringPool::~CStringPool(),0x08(%esi)
000000ad	movl	$0x00000020,0x0c(%esi)
000000b4	movl	$0x00000c00,(%esp)
000000bb	calll	_malloc
000000c0	movl	%eax,0x04(%esi)
000000c3	movw	$0xffff,0x10(%esi)
000000c9	movw	StrLess(char const* const&, char const* const&),0x12(%esi)
000000cf	movw	$0xffff,0x14(%esi)
000000d5	movw	$0xffff,0x16(%esi)
000000db	movl	%eax,0x18(%esi)
000000de	addl	$0x04,%esp
000000e1	popl	%esi
000000e2	popl	%ebp
000000e3	ret
000000e4	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::~CStringPool():
000000f0	jmp	CStringPool::~CStringPool()
000000f5	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::~CStringPool():
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	pushl	%edi
00000104	pushl	%esi
00000105	subl	$0x10,%esp
00000108	movl	0x08(%ebp),%edi
0000010b	movl	%edi,(%esp)
0000010e	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
00000113	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000120	cmpw	$0xff,%ax
00000124	je	0x00000149
00000126	movl	0x04(%edi),%ecx
00000129	movzwl	%ax,%esi
0000012c	imull	$0x0c,%esi,%eax
0000012f	movl	0x08(%ecx,%eax),%eax
00000133	movl	%eax,(%esp)
00000136	calll	_free
0000013b	movl	%esi,0x04(%esp)
0000013f	movl	%edi,(%esp)
00000142	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
00000147	jmp	0x00000120
00000149	movl	%edi,(%esp)
0000014c	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
00000151	addl	$0x10,%esp
00000154	popl	%esi
00000155	popl	%edi
00000156	popl	%ebp
00000157	jmp	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::~CUtlRBTree()
0000015c	jmp	0x0000015e
0000015e	movl	%eax,%esi
00000160	movl	%edi,(%esp)
00000163	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::~CUtlRBTree()
00000168	movl	%esi,(%esp)
0000016b	calll	__Unwind_Resume
00000170	calll	std::terminate()
00000175	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::FreeAll():
00000180	pushl	%ebp
00000181	movl	%esp,%ebp
00000183	pushl	%edi
00000184	pushl	%esi
00000185	subl	$0x10,%esp
00000188	movl	0x08(%ebp),%esi
0000018b	movl	%esi,(%esp)
0000018e	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
00000193	jmp	0x000001c1
00000195	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000001a0	movl	0x04(%esi),%ecx
000001a3	movzwl	%ax,%edi
000001a6	imull	$0x0c,%edi,%eax
000001a9	movl	0x08(%ecx,%eax),%eax
000001ad	movl	%eax,(%esp)
000001b0	calll	_free
000001b5	movl	%edi,0x04(%esp)
000001b9	movl	%esi,(%esp)
000001bc	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
000001c1	cmpw	$0xff,%ax
000001c5	jne	0x000001a0
000001c7	addl	$0x10,%esp
000001ca	popl	%esi
000001cb	popl	%edi
000001cc	popl	%ebp
000001cd	jmp	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
000001d2	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::Count() const:
000001e0	movl	0x04(%esp),%eax
000001e4	movzwl	0x12(%eax),%eax
000001e8	ret
000001e9	nopl	StrLess(char const* const&, char const* const&)(%eax)
CStringPool::Find(char const*):
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	pushl	%ebx
000001f4	pushl	%edi
000001f5	pushl	%esi
000001f6	subl	$0x1c,%esp
000001f9	calll	0x000001fe
000001fe	popl	%edi
000001ff	movl	0x0c(%ebp),%eax
00000202	movl	%eax,CStringPool::~CStringPool()(%ebp)
00000205	leal	CStringPool::~CStringPool()(%ebp),%eax
00000208	movl	%eax,0x04(%esp)
0000020c	movl	0x08(%ebp),%esi
0000020f	movl	%esi,(%esp)
00000212	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
00000217	movl	%esi,%ecx
00000219	movw	%ax,%si
0000021c	movzwl	%si,%edx
0000021f	xorl	%eax,%eax
00000221	cmpl	0x08(%ecx),%edx
00000224	jae	0x000002a4
00000226	xorl	%eax,%eax
00000228	cmpw	%si,0x16(%ecx)
0000022c	jb	0x000002a4
0000022e	movl	%edx,0xec(%ebp)
00000231	movb	guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%al
00000237	testb	%al,%al
00000239	jne	0x00000279
0000023b	leal	guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%ebx
00000241	movl	%ebx,(%esp)
00000244	calll	___cxa_guard_acquire
00000249	testl	%eax,%eax
0000024b	je	0x00000279
0000024d	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi)
00000256	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000002(%edi)
0000025f	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000004(%edi)
00000268	movw	$0x0001,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000006(%edi)
00000271	movl	%ebx,(%esp)
00000274	calll	___cxa_guard_release
00000279	cmpw	$0xff,%si
0000027d	movl	0x08(%ebp),%edx
00000280	movl	0xec(%ebp),%ebx
00000283	jne	0x0000028d
00000285	leal	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%ecx
0000028b	jmp	0x00000293
0000028d	imull	$0x0c,%ebx,%ecx
00000290	addl	0x04(%edx),%ecx
00000293	xorl	%eax,%eax
00000295	cmpw	%si,(%ecx)
00000298	je	0x000002a4
0000029a	imull	$0x0c,%ebx,%eax
0000029d	movl	0x04(%edx),%ecx
000002a0	movl	0x08(%ecx,%eax),%eax
000002a4	addl	$0x1c,%esp
000002a7	popl	%esi
000002a8	popl	%edi
000002a9	popl	%ebx
000002aa	popl	%ebp
000002ab	ret
000002ac	nopl	StrLess(char const* const&, char const* const&)(%eax)
CStringPool::Allocate(char const*):
000002b0	pushl	%ebp
000002b1	movl	%esp,%ebp
000002b3	pushl	%edi
000002b4	pushl	%esi
000002b5	subl	$0x10,%esp
000002b8	movl	0x0c(%ebp),%eax
000002bb	movl	%eax,0xf4(%ebp)
000002be	leal	0xf4(%ebp),%eax
000002c1	movl	%eax,0x04(%esp)
000002c5	movl	0x08(%ebp),%edi
000002c8	movl	%edi,(%esp)
000002cb	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
000002d0	cmpw	$0xff,%ax
000002d4	je	0x000002e5
000002d6	movl	0x04(%edi),%ecx
000002d9	movzwl	%ax,%eax
000002dc	imull	$0x0c,%eax,%eax
000002df	movl	0x08(%ecx,%eax),%esi
000002e3	jmp	0x00000304
000002e5	movl	0xf4(%ebp),%eax
000002e8	movl	%eax,(%esp)
000002eb	calll	_strdup
000002f0	movl	%eax,%esi
000002f2	movl	%esi,CStringPool::~CStringPool()(%ebp)
000002f5	leal	CStringPool::~CStringPool()(%ebp),%eax
000002f8	movl	%eax,0x04(%esp)
000002fc	movl	%edi,(%esp)
000002ff	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Insert(char const* const&)
00000304	movl	%esi,%eax
00000306	addl	$0x10,%esp
00000309	popl	%esi
0000030a	popl	%edi
0000030b	popl	%ebp
0000030c	ret
0000030d	nopl	(%eax)
CCountedStringPool::CCountedStringPool():
00000310	jmp	CCountedStringPool::CCountedStringPool()
00000315	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::CCountedStringPool():
00000320	pushl	%ebp
00000321	movl	%esp,%ebp
00000323	pushl	%ebx
00000324	pushl	%edi
00000325	pushl	%esi
00000326	subl	$0x1c,%esp
00000329	calll	0x0000032e
0000032e	popl	%eax
0000032f	leal	vtable for CCountedStringPool-0x32e+0x00000008(%eax),%eax
00000335	movl	0x08(%ebp),%esi
00000338	movl	%eax,(%esi)
0000033a	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000341	movl	StrLess(char const* const&, char const* const&),0x04(%esi)
00000348	movl	StrLess(char const* const&, char const* const&),0x10(%esi)
0000034f	movl	StrLess(char const* const&, char const* const&),0x0c(%esi)
00000356	movl	StrLess(char const* const&, char const* const&),0x18(%esi)
0000035d	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
00000364	movl	StrLess(char const* const&, char const* const&),0x20(%esi)
0000036b	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000372	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
00000379	movl	StrLess(char const* const&, char const* const&),0x24(%esi)
00000380	leal	0x04(%esi),%eax
00000383	movl	%eax,(%esp)
00000386	movl	$0x00000400,0x04(%esp)
0000038e	calll	CUtlMemory<unsigned short, int>::Grow(int)
00000393	movl	0x04(%esi),%eax
00000396	movl	0x10(%esi),%ecx
00000399	leal	0x00000400(%ecx),%edx
0000039f	movl	%edx,0x10(%esi)
000003a2	movl	%eax,0x14(%esi)
000003a5	testl	%ecx,%ecx
000003a7	jle	0x000003c3
000003a9	movl	%eax,0x04(%esp)
000003ad	addl	%ecx,%ecx
000003af	movl	%ecx,0x08(%esp)
000003b3	addl	$0x00000800,%eax
000003b8	movl	%eax,(%esp)
000003bb	calll	_memmove
000003c0	movl	0x10(%esi),%edx
000003c3	testl	%edx,%edx
000003c5	jle	0x000003df
000003c7	xorl	%eax,%eax
000003c9	nopl	StrLess(char const* const&, char const* const&)(%eax)
000003d0	movl	0x04(%esi),%ecx
000003d3	movw	StrLess(char const* const&, char const* const&),(%ecx,%eax,2)
000003d9	incl	%eax
000003da	cmpl	0x10(%esi),%eax
000003dd	jl	0x000003d0
000003df	leal	0x18(%esi),%ebx
000003e2	movw	StrLess(char const* const&, char const* const&),0x2c(%esi)
000003e8	movl	0x1c(%esi),%eax
000003eb	movl	0x24(%esi),%edi
000003ee	leal	0x01(%edi),%edx
000003f1	cmpl	%eax,%edx
000003f3	movl	%edi,%ecx
000003f5	jle	0x00000414
000003f7	movl	%edx,%ecx
000003f9	subl	%eax,%ecx
000003fb	movl	%ecx,0x04(%esp)
000003ff	movl	%ebx,(%esp)
00000402	movl	%ebx,CStringPool::~CStringPool()(%ebp)
00000405	movl	%edx,%ebx
00000407	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
0000040c	movl	%ebx,%edx
0000040e	movl	CStringPool::~CStringPool()(%ebp),%ebx
00000411	movl	0x24(%esi),%ecx
00000414	movl	%ebx,CStringPool::~CStringPool()(%ebp)
00000417	incl	%ecx
00000418	movl	%ecx,0x24(%esi)
0000041b	movl	0x18(%esi),%eax
0000041e	movl	%eax,0x28(%esi)
00000421	subl	%edi,%ecx
00000423	decl	%ecx
00000424	testl	%ecx,%ecx
00000426	jg	0x0000042d
00000428	movl	CStringPool::~CStringPool()(%ebp),%ecx
0000042b	jmp	0x0000044b
0000042d	shll	$0x03,%ecx
00000430	movl	%ecx,0x08(%esp)
00000434	leal	(%eax,%edi,8),%ecx
00000437	movl	%ecx,0x04(%esp)
0000043b	leal	(%eax,%edx,8),%eax
0000043e	movl	%eax,(%esp)
00000441	calll	_memmove
00000446	movl	CStringPool::~CStringPool()(%ebp),%ecx
00000449	movl	(%ecx),%eax
0000044b	movl	StrLess(char const* const&, char const* const&),(%eax)
00000451	movl	(%ecx),%eax
00000453	movb	StrLess(char const* const&, char const* const&),0x06(%eax)
00000457	movl	(%ecx),%eax
00000459	movw	StrLess(char const* const&, char const* const&),0x04(%eax)
0000045f	addl	$0x1c,%esp
00000462	popl	%esi
00000463	popl	%edi
00000464	popl	%ebx
00000465	popl	%ebp
00000466	ret
00000467	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::~CCountedStringPool():
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	pushl	%edi
00000474	pushl	%esi
00000475	subl	$0x10,%esp
00000478	movl	0x08(%ebp),%edi
0000047b	movl	%edi,(%esp)
0000047e	calll	CCountedStringPool::~CCountedStringPool()
00000483	addl	$0x10,%esp
00000486	popl	%esi
00000487	popl	%edi
00000488	popl	%ebp
00000489	jmp	operator delete(void*)
0000048e	movl	%eax,%esi
00000490	movl	%edi,(%esp)
00000493	calll	operator delete(void*)
00000498	movl	%esi,(%esp)
0000049b	calll	__Unwind_Resume
CCountedStringPool::~CCountedStringPool():
000004a0	jmp	CCountedStringPool::~CCountedStringPool()
000004a5	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::~CCountedStringPool():
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%esi
000004b4	pushl	%eax
000004b5	calll	0x000004ba
000004ba	popl	%eax
000004bb	leal	vtable for CCountedStringPool-0x4ba+0x00000008(%eax),%eax
000004c1	movl	0x08(%ebp),%esi
000004c4	movl	%eax,(%esi)
000004c6	movl	%esi,(%esp)
000004c9	calll	CCountedStringPool::FreeAll()
000004ce	movl	StrLess(char const* const&, char const* const&),0x24(%esi)
000004d5	movl	0x18(%esi),%eax
000004d8	cmpl	StrLess(char const* const&, char const* const&),0x20(%esi)
000004dc	jns	0x000004e3
000004de	movl	%eax,0x28(%esi)
000004e1	jmp	0x00000521
000004e3	testl	%eax,%eax
000004e5	jne	0x000004f7
000004e7	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
000004ee	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
000004f5	jmp	0x0000051a
000004f7	movl	%eax,(%esp)
000004fa	calll	_free
000004ff	movl	StrLess(char const* const&, char const* const&),0x18(%esi)
00000506	cmpl	StrLess(char const* const&, char const* const&),0x20(%esi)
0000050a	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000511	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
00000518	js	0x00000521
0000051a	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000521	movl	StrLess(char const* const&, char const* const&),0x10(%esi)
00000528	movl	0x04(%esi),%eax
0000052b	cmpl	StrLess(char const* const&, char const* const&),0x0c(%esi)
0000052f	jns	0x00000536
00000531	movl	%eax,0x14(%esi)
00000534	jmp	0x00000574
00000536	testl	%eax,%eax
00000538	jne	0x0000054a
0000053a	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000541	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
00000548	jmp	0x0000056d
0000054a	movl	%eax,(%esp)
0000054d	calll	_free
00000552	movl	StrLess(char const* const&, char const* const&),0x04(%esi)
00000559	cmpl	StrLess(char const* const&, char const* const&),0x0c(%esi)
0000055d	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000564	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
0000056b	js	0x00000574
0000056d	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000574	addl	$0x04,%esp
00000577	popl	%esi
00000578	popl	%ebp
00000579	ret
0000057a	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::FreeAll():
00000580	pushl	%ebp
00000581	movl	%esp,%ebp
00000583	pushl	%ebx
00000584	pushl	%edi
00000585	pushl	%esi
00000586	subl	$0x0c,%esp
00000589	movl	0x08(%ebp),%edi
0000058c	cmpl	StrLess(char const* const&, char const* const&),0x10(%edi)
00000590	jle	0x000005af
00000592	xorl	%eax,%eax
00000594	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000005a0	movl	0x04(%edi),%ecx
000005a3	movw	StrLess(char const* const&, char const* const&),(%ecx,%eax,2)
000005a9	incl	%eax
000005aa	cmpl	0x10(%edi),%eax
000005ad	jl	0x000005a0
000005af	movw	StrLess(char const* const&, char const* const&),0x2c(%edi)
000005b5	movl	0x24(%edi),%eax
000005b8	leal	0x18(%edi),%esi
000005bb	testl	%eax,%eax
000005bd	jle	0x00000605
000005bf	xorl	%ebx,%ebx
000005c1	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000005d0	movl	(%esi),%ecx
000005d2	movl	(%ecx,%ebx,8),%ecx
000005d5	testl	%ecx,%ecx
000005d7	je	0x00000600
000005d9	movl	%ecx,(%esp)
000005dc	calll	operator delete[](void*)
000005e1	movl	0x18(%edi),%eax
000005e4	movl	StrLess(char const* const&, char const* const&),(%eax,%ebx,8)
000005eb	movl	0x18(%edi),%eax
000005ee	movb	StrLess(char const* const&, char const* const&),0x06(%eax,%ebx,8)
000005f3	movl	0x18(%edi),%eax
000005f6	movw	StrLess(char const* const&, char const* const&),0x04(%eax,%ebx,8)
000005fd	movl	0x24(%edi),%eax
00000600	incl	%ebx
00000601	cmpl	%eax,%ebx
00000603	jl	0x000005d0
00000605	movl	StrLess(char const* const&, char const* const&),0x24(%edi)
0000060c	movl	0x1c(%edi),%ecx
0000060f	xorl	%eax,%eax
00000611	testl	%ecx,%ecx
00000613	jg	0x0000062b
00000615	movl	$0x00000001,%eax
0000061a	subl	%ecx,%eax
0000061c	movl	%eax,0x04(%esp)
00000620	movl	%esi,(%esp)
00000623	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
00000628	movl	0x24(%edi),%eax
0000062b	leal	0x01(%eax),%ecx
0000062e	movl	%ecx,0x24(%edi)
00000631	movl	0x18(%edi),%ecx
00000634	movl	%ecx,0x28(%edi)
00000637	testl	%eax,%eax
00000639	jle	0x00000653
0000063b	movl	%ecx,0x04(%esp)
0000063f	shll	$0x03,%eax
00000642	movl	%eax,0x08(%esp)
00000646	addl	$0x08,%ecx
00000649	movl	%ecx,(%esp)
0000064c	calll	_memmove
00000651	movl	(%esi),%ecx
00000653	movl	StrLess(char const* const&, char const* const&),(%ecx)
00000659	movl	(%esi),%eax
0000065b	movb	StrLess(char const* const&, char const* const&),0x06(%eax)
0000065f	movl	(%esi),%eax
00000661	movw	StrLess(char const* const&, char const* const&),0x04(%eax)
00000667	addl	$0x0c,%esp
0000066a	popl	%esi
0000066b	popl	%edi
0000066c	popl	%ebx
0000066d	popl	%ebp
0000066e	ret
0000066f	nop
CCountedStringPool::FindStringHandle(char const*):
00000670	pushl	%ebp
00000671	movl	%esp,%ebp
00000673	pushl	%ebx
00000674	pushl	%edi
00000675	pushl	%esi
00000676	subl	$0x0c,%esp
00000679	xorl	%eax,%eax
0000067b	cmpl	StrLess(char const* const&, char const* const&),0x0c(%ebp)
0000067f	je	0x000006e2
00000681	movl	0x08(%ebp),%esi
00000684	movl	0x0c(%ebp),%eax
00000687	movl	%eax,(%esp)
0000068a	calll	HashStringCaseless(char const*)
0000068f	movl	%esi,%edx
00000691	andl	$0x000003ff,%eax
00000696	movl	0x04(%edx),%ecx
00000699	movw	(%ecx,%eax,2),%di
0000069d	xorl	%eax,%eax
0000069f	testw	%di,%di
000006a2	je	0x000006e2
000006a4	jmp	0x000006b8
000006a6	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000006b0	movl	0x18(%edx),%eax
000006b3	movzwl	0x04(%eax,%esi,8),%edi
000006b8	xorl	%eax,%eax
000006ba	testw	%di,%di
000006bd	je	0x000006e2
000006bf	movzwl	%di,%esi
000006c2	movl	0x18(%edx),%eax
000006c5	movl	(%eax,%esi,8),%eax
000006c8	movl	%eax,0x04(%esp)
000006cc	movl	0x0c(%ebp),%eax
000006cf	movl	%eax,(%esp)
000006d2	movl	%edx,%ebx
000006d4	calll	V_stricmp(char const*, char const*)
000006d9	movl	%ebx,%edx
000006db	testl	%eax,%eax
000006dd	movw	%di,%ax
000006e0	jne	0x000006b0
000006e2	movzwl	%ax,%eax
000006e5	addl	$0x0c,%esp
000006e8	popl	%esi
000006e9	popl	%edi
000006ea	popl	%ebx
000006eb	popl	%ebp
000006ec	ret
000006ed	nopl	(%eax)
CCountedStringPool::FindString(char const*):
000006f0	pushl	%ebp
000006f1	movl	%esp,%ebp
000006f3	pushl	%ebx
000006f4	pushl	%edi
000006f5	pushl	%esi
000006f6	subl	$0x0c,%esp
000006f9	xorl	%eax,%eax
000006fb	movl	0x0c(%ebp),%ecx
000006fe	testl	%ecx,%ecx
00000700	je	0x0000076b
00000702	movl	0x08(%ebp),%esi
00000705	movl	%ecx,(%esp)
00000708	calll	HashStringCaseless(char const*)
0000070d	movl	%esi,%edx
0000070f	andl	$0x000003ff,%eax
00000714	movl	0x04(%edx),%ecx
00000717	movw	(%ecx,%eax,2),%di
0000071b	xorl	%eax,%eax
0000071d	testw	%di,%di
00000720	je	0x00000762
00000722	jmp	0x00000738
00000724	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000730	movl	0x18(%edx),%eax
00000733	movzwl	0x04(%eax,%esi,8),%edi
00000738	xorl	%eax,%eax
0000073a	testw	%di,%di
0000073d	je	0x00000762
0000073f	movzwl	%di,%esi
00000742	movl	0x18(%edx),%eax
00000745	movl	(%eax,%esi,8),%eax
00000748	movl	%eax,0x04(%esp)
0000074c	movl	0x0c(%ebp),%eax
0000074f	movl	%eax,(%esp)
00000752	movl	%edx,%ebx
00000754	calll	V_stricmp(char const*, char const*)
00000759	movl	%ebx,%edx
0000075b	testl	%eax,%eax
0000075d	movw	%di,%ax
00000760	jne	0x00000730
00000762	movzwl	%ax,%eax
00000765	movl	0x18(%edx),%ecx
00000768	movl	(%ecx,%eax,8),%eax
0000076b	addl	$0x0c,%esp
0000076e	popl	%esi
0000076f	popl	%edi
00000770	popl	%ebx
00000771	popl	%ebp
00000772	ret
00000773	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::ReferenceStringHandle(char const*):
00000780	pushl	%ebp
00000781	movl	%esp,%ebp
00000783	pushl	%ebx
00000784	pushl	%edi
00000785	pushl	%esi
00000786	subl	$0x1c,%esp
00000789	xorl	%edi,%edi
0000078b	movl	0x0c(%ebp),%eax
0000078e	testl	%eax,%eax
00000790	je	0x000008c2
00000796	movl	0x08(%ebp),%ebx
00000799	movl	%eax,(%esp)
0000079c	calll	HashStringCaseless(char const*)
000007a1	andl	$0x000003ff,%eax
000007a6	movl	%eax,CStringPool::~CStringPool()(%ebp)
000007a9	movl	0x04(%ebx),%ecx
000007ac	movw	(%ecx,%eax,2),%di
000007b0	testw	%di,%di
000007b3	je	0x00000800
000007b5	jmp	0x000007c5
000007b7	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
000007c0	movzwl	0x04(%ecx,%esi,8),%edi
000007c5	testw	%di,%di
000007c8	je	0x00000800
000007ca	movzwl	%di,%esi
000007cd	movl	0x18(%ebx),%eax
000007d0	movl	(%eax,%esi,8),%eax
000007d3	movl	%eax,0x04(%esp)
000007d7	movl	0x0c(%ebp),%eax
000007da	movl	%eax,(%esp)
000007dd	calll	V_stricmp(char const*, char const*)
000007e2	movl	0x18(%ebx),%ecx
000007e5	testl	%eax,%eax
000007e7	jne	0x000007c0
000007e9	movb	0x06(%ecx,%esi,8),%al
000007ed	cmpb	$0xff,%al
000007ef	je	0x000008c2
000007f5	incb	%al
000007f7	movb	%al,0x06(%ecx,%esi,8)
000007fb	jmp	0x000008c2
00000800	movzwl	0x2c(%ebx),%edi
00000804	testl	%edi,%edi
00000806	je	0x00000816
00000808	movl	0x18(%ebx),%eax
0000080b	movw	0x04(%eax,%edi,8),%cx
00000810	movw	%cx,0x2c(%ebx)
00000814	jmp	0x00000868
00000816	movl	0x1c(%ebx),%eax
00000819	movl	0x24(%ebx),%edi
0000081c	leal	0x01(%edi),%esi
0000081f	cmpl	%eax,%esi
00000821	movl	%edi,%ecx
00000823	jle	0x0000083b
00000825	leal	0x18(%ebx),%ecx
00000828	movl	%esi,%edx
0000082a	subl	%eax,%edx
0000082c	movl	%edx,0x04(%esp)
00000830	movl	%ecx,(%esp)
00000833	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
00000838	movl	0x24(%ebx),%ecx
0000083b	incl	%ecx
0000083c	movl	%ecx,0x24(%ebx)
0000083f	movl	0x18(%ebx),%eax
00000842	movl	%eax,0x28(%ebx)
00000845	subl	%edi,%ecx
00000847	decl	%ecx
00000848	testl	%ecx,%ecx
0000084a	jle	0x00000868
0000084c	shll	$0x03,%ecx
0000084f	movl	%ecx,0x08(%esp)
00000853	leal	(%eax,%edi,8),%ecx
00000856	movl	%ecx,0x04(%esp)
0000085a	leal	(%eax,%esi,8),%eax
0000085d	movl	%eax,(%esp)
00000860	calll	_memmove
00000865	movl	0x18(%ebx),%eax
00000868	movzwl	%di,%esi
0000086b	movb	$0x01,0x06(%eax,%esi,8)
00000870	movl	0x04(%ebx),%ecx
00000873	movl	0x18(%ebx),%eax
00000876	movl	CStringPool::~CStringPool()(%ebp),%edx
00000879	movw	(%ecx,%edx,2),%cx
0000087d	movw	%cx,0x04(%eax,%esi,8)
00000882	movl	0x04(%ebx),%eax
00000885	movw	%si,(%eax,%edx,2)
00000889	movl	0x0c(%ebp),%eax
0000088c	movl	%eax,(%esp)
0000088f	calll	_strlen
00000894	incl	%eax
00000895	testl	%eax,%eax
00000897	movl	$0xffffffff,%ecx
0000089c	cmovnsl	%eax,%ecx
0000089f	movl	%ecx,(%esp)
000008a2	calll	operator new[](unsigned long)
000008a7	movl	0x18(%ebx),%ecx
000008aa	movl	%eax,(%ecx,%esi,8)
000008ad	movl	0x18(%ebx),%eax
000008b0	movl	(%eax,%esi,8),%eax
000008b3	movl	0x0c(%ebp),%ecx
000008b6	movl	%ecx,0x04(%esp)
000008ba	movl	%eax,(%esp)
000008bd	calll	_strcpy
000008c2	movzwl	%di,%eax
000008c5	addl	$0x1c,%esp
000008c8	popl	%esi
000008c9	popl	%edi
000008ca	popl	%ebx
000008cb	popl	%ebp
000008cc	ret
000008cd	nopl	(%eax)
CCountedStringPool::ReferenceString(char const*):
000008d0	pushl	%ebp
000008d1	movl	%esp,%ebp
000008d3	pushl	%esi
000008d4	subl	$0x14,%esp
000008d7	movl	0x0c(%ebp),%eax
000008da	testl	%eax,%eax
000008dc	jne	0x000008e2
000008de	xorl	%eax,%eax
000008e0	jmp	0x000008fa
000008e2	movl	0x08(%ebp),%esi
000008e5	movl	%eax,0x04(%esp)
000008e9	movl	%esi,(%esp)
000008ec	calll	CCountedStringPool::ReferenceStringHandle(char const*)
000008f1	movzwl	%ax,%eax
000008f4	movl	0x18(%esi),%ecx
000008f7	movl	(%ecx,%eax,8),%eax
000008fa	addl	$0x14,%esp
000008fd	popl	%esi
000008fe	popl	%ebp
000008ff	ret
CCountedStringPool::DereferenceString(char const*):
00000900	pushl	%ebp
00000901	movl	%esp,%ebp
00000903	pushl	%ebx
00000904	pushl	%edi
00000905	pushl	%esi
00000906	subl	$0x1c,%esp
00000909	cmpl	StrLess(char const* const&, char const* const&),0x0c(%ebp)
0000090d	je	0x000009fe
00000913	movl	0x08(%ebp),%esi
00000916	movl	0x0c(%ebp),%eax
00000919	movl	%eax,(%esp)
0000091c	calll	HashStringCaseless(char const*)
00000921	xorl	%edx,%edx
00000923	divl	0x10(%esi)
00000926	movzwl	%dx,%ecx
00000929	movl	%ecx,0xec(%ebp)
0000092c	movl	%esi,%edx
0000092e	movl	0x04(%edx),%eax
00000931	movw	(%eax,%ecx,2),%ax
00000935	testw	%ax,%ax
00000938	je	0x000009fe
0000093e	xorl	%edi,%edi
00000940	jmp	0x00000955
00000942	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000950	movzwl	0x04(%ecx,%ebx,8),%eax
00000955	movw	%di,0xf2(%ebp)
00000959	movw	%ax,%di
0000095c	testw	%di,%di
0000095f	je	0x000009fe
00000965	movzwl	%di,%ebx
00000968	movl	0x18(%edx),%eax
0000096b	movl	(%eax,%ebx,8),%eax
0000096e	movl	%eax,0x04(%esp)
00000972	movl	0x0c(%ebp),%eax
00000975	movl	%eax,(%esp)
00000978	movl	%edx,%esi
0000097a	calll	V_stricmp(char const*, char const*)
0000097f	movl	%esi,%edx
00000981	movl	0x18(%edx),%ecx
00000984	testl	%eax,%eax
00000986	jne	0x00000950
00000988	movb	0x06(%ecx,%ebx,8),%al
0000098c	cmpb	$0xff,%al
0000098e	je	0x00000950
00000990	decb	%al
00000992	movb	%al,0x06(%ecx,%ebx,8)
00000996	movl	0x18(%edx),%ecx
00000999	cmpb	StrLess(char const* const&, char const* const&),0x06(%ecx,%ebx,8)
0000099e	jne	0x00000950
000009a0	movzwl	0x04(%ecx,%ebx,8),%eax
000009a5	movw	0xf2(%ebp),%si
000009a9	testw	%si,%si
000009ac	jne	0x000009ba
000009ae	movl	0x04(%edx),%ecx
000009b1	movl	0xec(%ebp),%esi
000009b4	movw	%ax,(%ecx,%esi,2)
000009b8	jmp	0x000009c6
000009ba	movl	%edx,%edi
000009bc	movzwl	%si,%edx
000009bf	movw	%ax,0x04(%ecx,%edx,8)
000009c4	movl	%edi,%edx
000009c6	movl	0x18(%edx),%eax
000009c9	movl	(%eax,%ebx,8),%ecx
000009cc	testl	%ecx,%ecx
000009ce	je	0x000009df
000009d0	movl	%ecx,(%esp)
000009d3	movl	%edx,%esi
000009d5	calll	operator delete[](void*)
000009da	movl	%esi,%edx
000009dc	movl	0x18(%edx),%eax
000009df	movl	StrLess(char const* const&, char const* const&),(%eax,%ebx,8)
000009e6	movl	0x18(%edx),%eax
000009e9	movb	StrLess(char const* const&, char const* const&),0x06(%eax,%ebx,8)
000009ee	movl	0x18(%edx),%eax
000009f1	movw	0x2c(%edx),%cx
000009f5	movw	%cx,0x04(%eax,%ebx,8)
000009fa	movw	%bx,0x2c(%edx)
000009fe	addl	$0x1c,%esp
00000a01	popl	%esi
00000a02	popl	%edi
00000a03	popl	%ebx
00000a04	popl	%ebp
00000a05	ret
00000a06	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::HandleToString(unsigned short):
00000a10	movl	0x04(%esp),%eax
00000a14	movl	0x18(%eax),%eax
00000a17	movzwl	0x08(%esp),%ecx
00000a1c	movl	(%eax,%ecx,8),%eax
00000a1f	ret
CCountedStringPool::SpewStrings():
00000a20	pushl	%ebp
00000a21	movl	%esp,%ebp
00000a23	pushl	%ebx
00000a24	pushl	%edi
00000a25	pushl	%esi
00000a26	subl	$0x1c,%esp
00000a29	calll	0x00000a2e
00000a2e	popl	%eax
00000a2f	movl	%eax,0xec(%ebp)
00000a32	movl	0x08(%ebp),%edi
00000a35	movl	0x24(%edi),%eax
00000a38	testl	%eax,%eax
00000a3a	jle	0x00000a7d
00000a3c	xorl	%ebx,%ebx
00000a3e	movl	0xec(%ebp),%eax
00000a41	leal	0x16afd-0xa2e(%eax),%ecx
00000a47	movl	%ecx,CStringPool::~CStringPool()(%ebp)
00000a4a	leal	0x16ae8-0xa2e(%eax),%esi
00000a50	movl	0x18(%edi),%ecx
00000a53	movl	(%ecx,%ebx,8),%eax
00000a56	testl	%eax,%eax
00000a58	cmovel	CStringPool::~CStringPool()(%ebp),%eax
00000a5c	movzbl	0x06(%ecx,%ebx,8),%ecx
00000a61	movl	%eax,0x0c(%esp)
00000a65	movl	%ecx,0x08(%esp)
00000a69	movl	%ebx,0x04(%esp)
00000a6d	movl	%esi,(%esp)
00000a70	calll	_Msg
00000a75	incl	%ebx
00000a76	movl	0x24(%edi),%eax
00000a79	cmpl	%eax,%ebx
00000a7b	jl	0x00000a50
00000a7d	movl	%eax,0x04(%esp)
00000a81	movl	0xec(%ebp),%eax
00000a84	leal	0x16b1c-0xa2e(%eax),%eax
00000a8a	movl	%eax,(%esp)
00000a8d	calll	_Msg
00000a92	addl	$0x1c,%esp
00000a95	popl	%esi
00000a96	popl	%edi
00000a97	popl	%ebx
00000a98	popl	%ebp
00000a99	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(strtools.o):
(__TEXT,__text) section
_V_memset(char const*, int, void*, int, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	movl	0x18(%ebp),%eax
00000009	movl	%eax,0x08(%esp)
0000000d	movzbl	0x14(%ebp),%eax
00000011	movl	%eax,0x04(%esp)
00000015	movl	0x10(%ebp),%eax
00000018	movl	%eax,(%esp)
0000001b	calll	_memset
00000020	addl	$0x18,%esp
00000023	popl	%ebp
00000024	ret
00000025	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memcpy(char const*, int, void*, void const*, int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	subl	$0x18,%esp
00000036	movl	0x18(%ebp),%eax
00000039	movl	%eax,0x08(%esp)
0000003d	movl	0x14(%ebp),%eax
00000040	movl	%eax,0x04(%esp)
00000044	movl	0x10(%ebp),%eax
00000047	movl	%eax,(%esp)
0000004a	calll	_memcpy
0000004f	addl	$0x18,%esp
00000052	popl	%ebp
00000053	ret
00000054	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memmove(char const*, int, void*, void const*, int):
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	subl	$0x18,%esp
00000066	movl	0x18(%ebp),%eax
00000069	movl	%eax,0x08(%esp)
0000006d	movl	0x14(%ebp),%eax
00000070	movl	%eax,0x04(%esp)
00000074	movl	0x10(%ebp),%eax
00000077	movl	%eax,(%esp)
0000007a	calll	_memmove
0000007f	addl	$0x18,%esp
00000082	popl	%ebp
00000083	ret
00000084	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memcmp(char const*, int, void const*, void const*, int):
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	subl	$0x18,%esp
00000096	movl	0x18(%ebp),%eax
00000099	movl	%eax,0x08(%esp)
0000009d	movl	0x14(%ebp),%eax
000000a0	movl	%eax,0x04(%esp)
000000a4	movl	0x10(%ebp),%eax
000000a7	movl	%eax,(%esp)
000000aa	calll	_memcmp
000000af	addl	$0x18,%esp
000000b2	popl	%ebp
000000b3	ret
000000b4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strlen(char const*, int, char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	subl	$0x08,%esp
000000c6	movl	0x10(%ebp),%eax
000000c9	movl	%eax,(%esp)
000000cc	calll	_strlen
000000d1	addl	$0x08,%esp
000000d4	popl	%ebp
000000d5	ret
000000d6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strcpy(char const*, int, char*, char const*):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	subl	$0x08,%esp
000000e6	movl	0x14(%ebp),%eax
000000e9	movl	%eax,0x04(%esp)
000000ed	movl	0x10(%ebp),%eax
000000f0	movl	%eax,(%esp)
000000f3	calll	_strcpy
000000f8	addl	$0x08,%esp
000000fb	popl	%ebp
000000fc	ret
000000fd	nopl	(%eax)
_V_wcslen(char const*, int, wchar_t const*):
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	subl	$0x08,%esp
00000106	movl	0x10(%ebp),%eax
00000109	movl	%eax,(%esp)
0000010c	calll	_wcslen
00000111	addl	$0x08,%esp
00000114	popl	%ebp
00000115	ret
00000116	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strrchr(char const*, int, char const*, char):
00000120	pushl	%ebp
00000121	movl	%esp,%ebp
00000123	pushl	%esi
00000124	pushl	%eax
00000125	movl	0x10(%ebp),%esi
00000128	movl	%esi,(%esp)
0000012b	calll	_strlen
00000130	movb	0x14(%ebp),%dl
00000133	xorl	%ecx,%ecx
00000135	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000140	testl	%eax,%eax
00000142	je	0x00000151
00000144	cmpb	%dl,0xff(%esi,%eax)
00000148	leal	0xff(%eax),%eax
0000014b	jne	0x00000140
0000014d	addl	%eax,%esi
0000014f	movl	%esi,%ecx
00000151	movl	%ecx,%eax
00000153	addl	$0x04,%esp
00000156	popl	%esi
00000157	popl	%ebp
00000158	ret
00000159	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
_V_strcmp(char const*, int, char const*, char const*):
00000160	pushl	%ebp
00000161	movl	%esp,%ebp
00000163	subl	$0x08,%esp
00000166	movl	0x14(%ebp),%eax
00000169	movl	%eax,0x04(%esp)
0000016d	movl	0x10(%ebp),%eax
00000170	movl	%eax,(%esp)
00000173	calll	_strcmp
00000178	addl	$0x08,%esp
0000017b	popl	%ebp
0000017c	ret
0000017d	nopl	(%eax)
_V_wcscmp(char const*, int, wchar_t const*, wchar_t const*):
00000180	pushl	%esi
00000181	movl	0x14(%esp),%ecx
00000185	movl	0x10(%esp),%edx
00000189	jmp	0x0000019c
0000018b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000190	xorl	%eax,%eax
00000192	testl	%esi,%esi
00000194	je	0x000001b3
00000196	addl	$0x04,%ecx
00000199	addl	$0x04,%edx
0000019c	movl	(%ecx),%eax
0000019e	movl	(%edx),%esi
000001a0	cmpl	%eax,%esi
000001a2	je	0x00000190
000001a4	movl	$0x00000001,%ecx
000001a9	cmpl	%eax,%esi
000001ab	movl	$0xffffffff,%eax
000001b0	cmovgl	%ecx,%eax
000001b3	popl	%esi
000001b4	ret
000001b5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strstr(char const*, int, char const*, char const*):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	subl	$0x08,%esp
000001c6	movl	0x14(%ebp),%eax
000001c9	movl	%eax,0x04(%esp)
000001cd	movl	0x10(%ebp),%eax
000001d0	movl	%eax,(%esp)
000001d3	calll	_strstr
000001d8	addl	$0x08,%esp
000001db	popl	%ebp
000001dc	ret
000001dd	nopl	(%eax)
_V_wcsupr(char const*, int, wchar_t*):
000001e0	pushl	%ebp
000001e1	movl	%esp,%ebp
000001e3	pushl	%edi
000001e4	pushl	%esi
000001e5	subl	$0x10,%esp
000001e8	movl	0x10(%ebp),%esi
000001eb	movl	%esi,%edi
000001ed	jmp	0x000001fd
000001ef	nop
000001f0	movl	%eax,(%esp)
000001f3	calll	___toupper
000001f8	movl	%eax,(%edi)
000001fa	addl	$0x04,%edi
000001fd	testl	%edi,%edi
000001ff	je	0x00000207
00000201	movl	(%edi),%eax
00000203	testl	%eax,%eax
00000205	jne	0x000001f0
00000207	movl	%esi,%eax
00000209	addl	$0x10,%esp
0000020c	popl	%esi
0000020d	popl	%edi
0000020e	popl	%ebp
0000020f	ret
_V_wcslower(char const*, int, wchar_t*):
00000210	pushl	%ebp
00000211	movl	%esp,%ebp
00000213	pushl	%edi
00000214	pushl	%esi
00000215	subl	$0x10,%esp
00000218	movl	0x10(%ebp),%esi
0000021b	movl	%esi,%edi
0000021d	jmp	0x0000022d
0000021f	nop
00000220	movl	%eax,(%esp)
00000223	calll	___tolower
00000228	movl	%eax,(%edi)
0000022a	addl	$0x04,%edi
0000022d	testl	%edi,%edi
0000022f	je	0x00000237
00000231	movl	(%edi),%eax
00000233	testl	%eax,%eax
00000235	jne	0x00000220
00000237	movl	%esi,%eax
00000239	addl	$0x10,%esp
0000023c	popl	%esi
0000023d	popl	%edi
0000023e	popl	%ebp
0000023f	ret
V_strupr(char*):
00000240	pushl	%ebp
00000241	movl	%esp,%ebp
00000243	pushl	%edi
00000244	pushl	%esi
00000245	subl	$0x10,%esp
00000248	movl	0x08(%ebp),%esi
0000024b	movb	(%esi),%cl
0000024d	testb	%cl,%cl
0000024f	je	0x00000285
00000251	movl	%esi,%edi
00000253	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000260	movzbl	%cl,%eax
00000263	addb	$0x9f,%cl
00000266	cmpb	$0x19,%cl
00000269	ja	0x0000026f
0000026b	addb	_V_strcpy(char const*, int, char*, char const*),%al
0000026d	jmp	0x0000027b
0000026f	testb	%al,%al
00000271	jns	0x0000027d
00000273	movl	%eax,(%esp)
00000276	calll	___toupper
0000027b	movb	%al,(%edi)
0000027d	movb	0x01(%edi),%cl
00000280	incl	%edi
00000281	testb	%cl,%cl
00000283	jne	0x00000260
00000285	movl	%esi,%eax
00000287	addl	$0x10,%esp
0000028a	popl	%esi
0000028b	popl	%edi
0000028c	popl	%ebp
0000028d	ret
0000028e	nop
V_strlower(char*):
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%edi
00000294	pushl	%esi
00000295	subl	$0x10,%esp
00000298	movl	0x08(%ebp),%esi
0000029b	movb	(%esi),%cl
0000029d	testb	%cl,%cl
0000029f	je	0x000002d5
000002a1	movl	%esi,%edi
000002a3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000002b0	movzbl	%cl,%eax
000002b3	addb	$0xbf,%cl
000002b6	cmpb	$0x19,%cl
000002b9	ja	0x000002bf
000002bb	addb	$0x20,%al
000002bd	jmp	0x000002cb
000002bf	testb	%al,%al
000002c1	jns	0x000002cd
000002c3	movl	%eax,(%esp)
000002c6	calll	___tolower
000002cb	movb	%al,(%edi)
000002cd	movb	0x01(%edi),%cl
000002d0	incl	%edi
000002d1	testb	%cl,%cl
000002d3	jne	0x000002b0
000002d5	movl	%esi,%eax
000002d7	addl	$0x10,%esp
000002da	popl	%esi
000002db	popl	%edi
000002dc	popl	%ebp
000002dd	ret
000002de	nop
V_strnlwr(char*, unsigned long):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%ebx
000002e4	pushl	%edi
000002e5	pushl	%esi
000002e6	subl	$0x0c,%esp
000002e9	movl	0x08(%ebp),%esi
000002ec	testl	%esi,%esi
000002ee	je	0x0000032a
000002f0	movl	0x0c(%ebp),%eax
000002f3	testl	%eax,%eax
000002f5	je	0x0000032a
000002f7	movl	$0x00000001,%edi
000002fc	subl	%eax,%edi
000002fe	movl	%esi,%ebx
00000300	jmp	0x00000323
00000302	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000310	movsbl	(%ebx),%eax
00000313	testl	%eax,%eax
00000315	je	0x0000032a
00000317	movl	%eax,(%esp)
0000031a	calll	___tolower
0000031f	movb	%al,(%ebx)
00000321	incl	%edi
00000322	incl	%ebx
00000323	testl	%edi,%edi
00000325	jne	0x00000310
00000327	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
0000032a	movl	%esi,%eax
0000032c	addl	$0x0c,%esp
0000032f	popl	%esi
00000330	popl	%edi
00000331	popl	%ebx
00000332	popl	%ebp
00000333	ret
00000334	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stricmp(char const*, char const*):
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%esi
00000345	subl	$0x10,%esp
00000348	xorl	%eax,%eax
0000034a	movl	0x0c(%ebp),%edx
0000034d	movl	0x08(%ebp),%esi
00000350	cmpl	%edx,%esi
00000352	je	0x000003c4
00000354	jmp	0x00000362
00000356	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000360	incl	%edx
00000361	incl	%esi
00000362	movb	(%edx),%al
00000364	movb	(%esi),%cl
00000366	testb	%cl,%cl
00000368	je	0x000003be
0000036a	cmpb	%al,%cl
0000036c	je	0x00000360
0000036e	movb	%cl,%ah
00000370	orb	$0x20,%ah
00000373	movb	%ah,%bh
00000375	addb	$0x9f,%bh
00000378	movb	%al,%bl
0000037a	orb	$0x20,%bl
0000037d	cmpb	%bl,%ah
0000037f	jne	0x00000386
00000381	cmpb	$0x1a,%bh
00000384	jb	0x00000360
00000386	movb	%al,%ch
00000388	orb	%cl,%ch
0000038a	jns	0x0000039a
0000038c	movl	%edx,0x04(%esp)
00000390	movl	%esi,(%esp)
00000393	calll	_strcasecmp
00000398	jmp	0x000003c4
0000039a	cmpb	$0x19,%bh
0000039d	ja	0x000003a1
0000039f	movb	%ah,%cl
000003a1	movb	%bl,%dl
000003a3	addb	$0x9f,%dl
000003a6	cmpb	$0x19,%dl
000003a9	ja	0x000003ad
000003ab	movb	%bl,%al
000003ad	movl	$0x00000001,%edx
000003b2	cmpb	%al,%cl
000003b4	movl	$0xffffffff,%eax
000003b9	cmoval	%edx,%eax
000003bc	jmp	0x000003c4
000003be	cmpb	$0x01,%al
000003c0	sbbl	%eax,%eax
000003c2	notl	%eax
000003c4	addl	$0x10,%esp
000003c7	popl	%esi
000003c8	popl	%ebx
000003c9	popl	%ebp
000003ca	ret
000003cb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnicmp(char const*, char const*, int):
000003d0	pushl	%ebp
000003d1	movl	%esp,%ebp
000003d3	pushl	%ebx
000003d4	pushl	%edi
000003d5	pushl	%esi
000003d6	subl	$0x0c,%esp
000003d9	movl	0x10(%ebp),%esi
000003dc	movl	0x0c(%ebp),%edx
000003df	movl	0x08(%ebp),%edi
000003e2	jmp	0x000003f3
000003e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000003f0	incl	%edx
000003f1	incl	%edi
000003f2	decl	%esi
000003f3	xorb	%al,%al
000003f5	testl	%esi,%esi
000003f7	jle	0x0000045e
000003f9	movb	(%edx),%al
000003fb	movb	(%edi),%cl
000003fd	testb	%cl,%cl
000003ff	je	0x00000459
00000401	cmpb	%al,%cl
00000403	je	0x000003f0
00000405	movb	%cl,%bh
00000407	orb	$0x20,%bh
0000040a	movb	%bh,%ah
0000040c	addb	$0x9f,%ah
0000040f	movb	%al,%bl
00000411	orb	$0x20,%bl
00000414	cmpb	%bl,%bh
00000416	jne	0x0000041d
00000418	cmpb	$0x1a,%ah
0000041b	jb	0x000003f0
0000041d	movb	%al,%ch
0000041f	orb	%cl,%ch
00000421	jns	0x00000435
00000423	movl	%esi,0x08(%esp)
00000427	movl	%edx,0x04(%esp)
0000042b	movl	%edi,(%esp)
0000042e	calll	_strncasecmp
00000433	jmp	0x00000467
00000435	cmpb	$0x19,%ah
00000438	ja	0x0000043c
0000043a	movb	%bh,%cl
0000043c	movb	%bl,%dl
0000043e	addb	$0x9f,%dl
00000441	cmpb	$0x19,%dl
00000444	ja	0x00000448
00000446	movb	%bl,%al
00000448	movl	$0x00000001,%edx
0000044d	cmpb	%al,%cl
0000044f	movl	$0xffffffff,%eax
00000454	cmoval	%edx,%eax
00000457	jmp	0x00000467
00000459	testb	%al,%al
0000045b	setne	%al
0000045e	movzbl	%al,%eax
00000461	shll	$0x1f,%eax
00000464	sarl	$0x1f,%eax
00000467	addl	$0x0c,%esp
0000046a	popl	%esi
0000046b	popl	%edi
0000046c	popl	%ebx
0000046d	popl	%ebp
0000046e	ret
0000046f	nop
V_strncmp(char const*, char const*, int):
00000470	pushl	%ebx
00000471	pushl	%esi
00000472	movl	0x14(%esp),%ecx
00000476	movl	0x10(%esp),%edx
0000047a	movl	0x0c(%esp),%esi
0000047e	jmp	0x00000489
00000480	xorl	%eax,%eax
00000482	testb	%bl,%bl
00000484	je	0x000004a6
00000486	decl	%ecx
00000487	incl	%edx
00000488	incl	%esi
00000489	xorl	%eax,%eax
0000048b	testl	%ecx,%ecx
0000048d	jle	0x000004a6
0000048f	movb	(%edx),%al
00000491	movb	(%esi),%bl
00000493	cmpb	%al,%bl
00000495	je	0x00000480
00000497	movl	$0xffffffff,%ecx
0000049c	cmpb	%al,%bl
0000049e	movl	$0x00000001,%eax
000004a3	cmovbl	%ecx,%eax
000004a6	popl	%esi
000004a7	popl	%ebx
000004a8	ret
000004a9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
StringAfterPrefix(char const*, char const*):
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%ebx
000004b4	pushl	%edi
000004b5	pushl	%esi
000004b6	subl	$0x0c,%esp
000004b9	movl	0x0c(%ebp),%edi
000004bc	movl	0x08(%ebp),%edx
000004bf	nop
000004c0	movb	(%edi),%cl
000004c2	testb	%cl,%cl
000004c4	je	0x0000055c
000004ca	movzbl	(%edx),%eax
000004cd	incl	%edx
000004ce	movl	%edx,0xf0(%ebp)
000004d1	movl	%eax,%edx
000004d3	testb	%dl,%dl
000004d5	js	0x000004eb
000004d7	movl	$0x00000040,%eax
000004dc	subl	%edx,%eax
000004de	leal	0xa5(%edx),%ebx
000004e1	andl	%eax,%ebx
000004e3	shrl	$0x1a,%ebx
000004e6	andl	$0x20,%ebx
000004e9	jmp	0x0000050c
000004eb	movl	%edx,(%esp)
000004ee	movl	$0x00008000,0x04(%esp)
000004f6	movl	%edx,%esi
000004f8	calll	___maskrune
000004fd	movl	%esi,%edx
000004ff	movb	(%edi),%cl
00000501	testl	%eax,%eax
00000503	setne	%al
00000506	movzbl	%al,%ebx
00000509	shll	$0x05,%ebx
0000050c	addl	%edx,%ebx
0000050e	movzbl	%cl,%esi
00000511	incl	%edi
00000512	testb	%cl,%cl
00000514	js	0x0000052a
00000516	movl	$0x00000040,%eax
0000051b	subl	%esi,%eax
0000051d	leal	0xa5(%esi),%ecx
00000520	andl	%eax,%ecx
00000522	shrl	$0x1a,%ecx
00000525	andl	$0x20,%ecx
00000528	jmp	0x00000545
0000052a	movl	%esi,(%esp)
0000052d	movl	$0x00008000,0x04(%esp)
00000535	calll	___maskrune
0000053a	testl	%eax,%eax
0000053c	setne	%al
0000053f	movzbl	%al,%ecx
00000542	shll	$0x05,%ecx
00000545	addl	%esi,%ecx
00000547	xorl	%eax,%eax
00000549	cmpl	%ecx,%ebx
0000054b	movl	0xf0(%ebp),%edx
0000054e	je	0x000004c0
00000554	addl	$0x0c,%esp
00000557	popl	%esi
00000558	popl	%edi
00000559	popl	%ebx
0000055a	popl	%ebp
0000055b	ret
0000055c	movl	%edx,%eax
0000055e	jmp	0x00000554
StringAfterPrefixCaseSensitive(char const*, char const*):
00000560	pushl	%ebx
00000561	pushl	%esi
00000562	movl	0x10(%esp),%ecx
00000566	movl	0x0c(%esp),%edx
0000056a	xorl	%eax,%eax
0000056c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00000570	movb	(%ecx),%bl
00000572	testb	%bl,%bl
00000574	je	0x00000583
00000576	incl	%ecx
00000577	leal	0x01(%edx),%esi
0000057a	cmpb	%bl,(%edx)
0000057c	movl	%esi,%edx
0000057e	je	0x00000570
00000580	popl	%esi
00000581	popl	%ebx
00000582	ret
00000583	movl	%edx,%eax
00000585	jmp	0x00000580
00000587	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atoi64(char const*):
00000590	pushl	%ebp
00000591	pushl	%ebx
00000592	pushl	%edi
00000593	pushl	%esi
00000594	subl	$0x08,%esp
00000597	movl	0x1c(%esp),%eax
0000059b	leal	0x01(%eax),%ebp
0000059e	movl	$0xffffffff,%ecx
000005a3	cmpb	$0x2d,(%eax)
000005a6	movl	_V_memset(char const*, int, void*, int, int),%edx
000005ab	cmovel	%ecx,%edx
000005ae	movl	%edx,0x04(%esp)
000005b2	movl	$0x00000001,%edx
000005b7	cmovel	%ecx,%edx
000005ba	movl	%edx,(%esp)
000005bd	cmovnel	%eax,%ebp
000005c0	movb	_V_memset(char const*, int, void*, int, int)(%ebp),%bl
000005c3	cmpb	$0x27,%bl
000005c6	je	0x00000681
000005cc	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000005cf	jne	0x0000068c
000005d5	movb	0x01(%ebp),%al
000005d8	orb	$0x20,%al
000005da	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000005dc	cmpb	$0x78,%al
000005de	je	0x0000061f
000005e0	incl	%ebp
000005e1	movl	$0xffffffff,%eax
000005e6	movl	$0xffffffd0,%ecx
000005eb	movl	$0x0000000a,%edi
000005f0	movsbl	%bl,%edx
000005f3	movl	%edx,%esi
000005f5	sarl	$0x1f,%esi
000005f8	addl	%edx,%ecx
000005fa	adcl	%eax,%esi
000005fc	movb	_V_memset(char const*, int, void*, int, int)(%ebp),%bl
000005ff	movb	%bl,%al
00000601	addb	$0xd0,%al
00000603	cmpb	$0x09,%al
00000605	ja	0x0000069f
0000060b	movl	%ecx,%eax
0000060d	mull	%edi
0000060f	movl	%eax,%ecx
00000611	imull	$0x0a,%esi,%eax
00000614	addl	%edx,%eax
00000616	addl	$0xd0,%ecx
00000619	adcl	$0xff,%eax
0000061c	incl	%ebp
0000061d	jmp	0x000005f0
0000061f	addl	$0x02,%ebp
00000622	xorl	%ecx,%ecx
00000624	xorl	%esi,%esi
00000626	jmp	0x00000641
00000628	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000630	shldl	$0x04,%ecx,%esi
00000634	shll	$0x04,%ecx
00000637	addl	$0xa9,%ecx
0000063a	adcl	$0xff,%esi
0000063d	addl	%eax,%ecx
0000063f	adcl	%edx,%esi
00000641	movsbl	_V_memset(char const*, int, void*, int, int)(%ebp),%eax
00000645	incl	%ebp
00000646	movl	%eax,%edx
00000648	sarl	$0x1f,%edx
0000064b	movl	%eax,%ebx
0000064d	addb	$0xd0,%bl
00000650	cmpb	$0x09,%bl
00000653	ja	0x00000661
00000655	shldl	$0x04,%ecx,%esi
00000659	shll	$0x04,%ecx
0000065c	addl	$0xd0,%ecx
0000065f	jmp	0x0000063a
00000661	movl	%eax,%ebx
00000663	addb	$0x9f,%bl
00000666	cmpb	$0x05,%bl
00000669	jbe	0x00000630
0000066b	movl	%eax,%ebx
0000066d	addb	$0xbf,%bl
00000670	cmpb	$0x05,%bl
00000673	ja	0x0000069f
00000675	shldl	$0x04,%ecx,%esi
00000679	shll	$0x04,%ecx
0000067c	addl	$0xc9,%ecx
0000067f	jmp	0x0000063a
00000681	movsbl	0x01(%ebp),%ecx
00000685	movl	%ecx,%esi
00000687	sarl	$0x1f,%esi
0000068a	jmp	0x0000069f
0000068c	movb	%bl,%al
0000068e	addb	$0xd0,%al
00000690	xorl	%ecx,%ecx
00000692	cmpb	$0x09,%al
00000694	movl	_V_memset(char const*, int, void*, int, int),%esi
00000699	jbe	0x000005e0
0000069f	movl	%ecx,%eax
000006a1	movl	(%esp),%ebx
000006a4	mull	%ebx
000006a6	movl	0x04(%esp),%edi
000006aa	imull	%ecx,%edi
000006ad	addl	%edx,%edi
000006af	imull	%ebx,%esi
000006b2	addl	%edi,%esi
000006b4	movl	%esi,%edx
000006b6	addl	$0x08,%esp
000006b9	popl	%esi
000006ba	popl	%edi
000006bb	popl	%ebx
000006bc	popl	%ebp
000006bd	ret
000006be	nop
V_atoui64(char const*):
000006c0	pushl	%ebp
000006c1	pushl	%ebx
000006c2	pushl	%edi
000006c3	pushl	%esi
000006c4	movl	0x14(%esp),%esi
000006c8	movb	(%esi),%bl
000006ca	cmpb	$0x27,%bl
000006cd	je	0x00000790
000006d3	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000006d6	jne	0x0000079b
000006dc	movb	0x01(%esi),%al
000006df	orb	$0x20,%al
000006e1	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000006e3	cmpb	$0x78,%al
000006e5	je	0x0000072c
000006e7	incl	%esi
000006e8	movl	$0xffffffff,%ebp
000006ed	movl	$0xffffffd0,%eax
000006f2	movl	$0x0000000a,%edi
000006f7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000700	movsbl	%bl,%edx
00000703	movl	%edx,%ecx
00000705	sarl	$0x1f,%ecx
00000708	addl	%edx,%eax
0000070a	adcl	%ebp,%ecx
0000070c	movb	(%esi),%bl
0000070e	movb	%bl,%dl
00000710	addb	$0xd0,%dl
00000713	cmpb	$0x09,%dl
00000716	ja	0x000007b0
0000071c	mull	%edi
0000071e	imull	$0x0a,%ecx,%ebp
00000721	addl	%edx,%ebp
00000723	addl	$0xd0,%eax
00000726	adcl	$0xff,%ebp
00000729	incl	%esi
0000072a	jmp	0x00000700
0000072c	addl	$0x02,%esi
0000072f	xorl	%eax,%eax
00000731	xorl	%ecx,%ecx
00000733	jmp	0x00000751
00000735	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000740	shldl	$0x04,%eax,%ecx
00000744	shll	$0x04,%eax
00000747	addl	$0xa9,%eax
0000074a	adcl	$0xff,%ecx
0000074d	addl	%edx,%eax
0000074f	adcl	%edi,%ecx
00000751	movsbl	(%esi),%edx
00000754	incl	%esi
00000755	movl	%edx,%edi
00000757	sarl	$0x1f,%edi
0000075a	movl	%edx,%ebx
0000075c	addb	$0xd0,%bl
0000075f	cmpb	$0x09,%bl
00000762	ja	0x00000770
00000764	shldl	$0x04,%eax,%ecx
00000768	shll	$0x04,%eax
0000076b	addl	$0xd0,%eax
0000076e	jmp	0x0000074a
00000770	movl	%edx,%ebx
00000772	addb	$0x9f,%bl
00000775	cmpb	$0x05,%bl
00000778	jbe	0x00000740
0000077a	movl	%edx,%ebx
0000077c	addb	$0xbf,%bl
0000077f	cmpb	$0x05,%bl
00000782	ja	0x000007b0
00000784	shldl	$0x04,%eax,%ecx
00000788	shll	$0x04,%eax
0000078b	addl	$0xc9,%eax
0000078e	jmp	0x0000074a
00000790	movsbl	0x01(%esi),%eax
00000794	movl	%eax,%ecx
00000796	sarl	$0x1f,%ecx
00000799	jmp	0x000007b0
0000079b	movb	%bl,%cl
0000079d	addb	$0xd0,%cl
000007a0	xorl	%eax,%eax
000007a2	cmpb	$0x09,%cl
000007a5	movl	_V_memset(char const*, int, void*, int, int),%ecx
000007aa	jbe	0x000006e7
000007b0	movl	%ecx,%edx
000007b2	popl	%esi
000007b3	popl	%edi
000007b4	popl	%ebx
000007b5	popl	%ebp
000007b6	ret
000007b7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atoi(char const*):
000007c0	jmp	V_atoi64(char const*)
000007c5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atof(char const*):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x2c,%esp
000007d9	calll	0x000007de
000007de	popl	%edi
000007df	movl	0x08(%ebp),%eax
000007e2	movb	(%eax),%cl
000007e4	cmpb	$0x2b,%cl
000007e7	je	0x000007fb
000007e9	movl	$0x00000001,%esi
000007ee	cmpb	$0x2d,%cl
000007f1	jne	0x00000801
000007f3	incl	%eax
000007f4	movl	$0xffffffff,%esi
000007f9	jmp	0x00000801
000007fb	incl	%eax
000007fc	movl	$0x00000001,%esi
00000801	movb	(%eax),%cl
00000803	cmpb	$0x27,%cl
00000806	je	0x000008d6
0000080c	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%cl
0000080f	je	0x00000825
00000811	movl	%esi,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00000814	xorl	%ebx,%ebx
00000816	pxor	%xmm1,%xmm1
0000081a	movl	$0xffffffff,%ecx
0000081f	incl	%eax
00000820	jmp	0x0000092c
00000825	movb	0x01(%eax),%cl
00000828	orb	$0x20,%cl
0000082b	cmpb	$0x78,%cl
0000082e	jne	0x00000811
00000830	addl	$0x02,%eax
00000833	pxor	%xmm1,%xmm1
00000837	movsd	0x13500-0x7de(%edi),%xmm0
0000083f	jmp	0x0000086a
00000841	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000850	mulsd	%xmm0,%xmm1
00000854	movsbl	%cl,%ecx
00000857	cvtsi2sd	%ecx,%xmm2
0000085b	addsd	%xmm1,%xmm2
0000085f	addsd	0x13520-0x7de(%edi),%xmm2
00000867	movaps	%xmm2,%xmm1
0000086a	movb	(%eax),%cl
0000086c	incl	%eax
0000086d	movb	%cl,%dl
0000086f	addb	$0xd0,%dl
00000872	cmpb	$0x09,%dl
00000875	jbe	0x00000850
00000877	movb	%cl,%dl
00000879	addb	$0x9f,%dl
0000087c	cmpb	$0x05,%dl
0000087f	ja	0x000008a5
00000881	mulsd	%xmm0,%xmm1
00000885	movsbl	%cl,%ecx
00000888	cvtsi2sd	%ecx,%xmm2
0000088c	addsd	%xmm1,%xmm2
00000890	addsd	0x13518-0x7de(%edi),%xmm2
00000898	addsd	0x13510-0x7de(%edi),%xmm2
000008a0	movaps	%xmm2,%xmm1
000008a3	jmp	0x0000086a
000008a5	movb	%cl,%dl
000008a7	addb	$0xbf,%dl
000008aa	cmpb	$0x05,%dl
000008ad	ja	0x000008c8
000008af	mulsd	%xmm0,%xmm1
000008b3	movsbl	%cl,%ecx
000008b6	cvtsi2sd	%ecx,%xmm2
000008ba	addsd	%xmm1,%xmm2
000008be	addsd	0x13508-0x7de(%edi),%xmm2
000008c6	jmp	0x00000898
000008c8	cvtsi2sd	%esi,%xmm0
000008cc	mulsd	%xmm0,%xmm1
000008d0	cvtsd2ss	%xmm1,%xmm0
000008d4	jmp	0x000008e1
000008d6	movsbl	0x01(%eax),%eax
000008da	imull	%esi,%eax
000008dd	cvtsi2ss	%eax,%xmm0
000008e1	movss	%xmm0,0xe4(%ebp)
000008e6	flds	0xe4(%ebp)
000008e9	addl	$0x2c,%esp
000008ec	popl	%esi
000008ed	popl	%edi
000008ee	popl	%ebx
000008ef	popl	%ebp
000008f0	ret
000008f1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000900	movb	%cl,%dl
00000902	addb	$0xd0,%dl
00000905	cmpb	$0x0a,%dl
00000908	jae	0x0000096b
0000090a	mulsd	0x13510-0x7de(%edi),%xmm1
00000912	movsbl	%cl,%ecx
00000915	cvtsi2sd	%ecx,%xmm0
00000919	addsd	%xmm1,%xmm0
0000091d	addsd	0x13520-0x7de(%edi),%xmm0
00000925	incl	%ebx
00000926	movl	%esi,%ecx
00000928	movaps	%xmm0,%xmm1
0000092b	incl	%eax
0000092c	movl	%ecx,%esi
0000092e	movb	0xff(%eax),%cl
00000931	cmpb	$0x2e,%cl
00000934	jne	0x00000900
00000936	incl	%eax
00000937	cmpl	$0xff,%esi
0000093a	movl	%ebx,%ecx
0000093c	je	0x0000092c
0000093e	cmpl	%esi,%ebx
00000940	jle	0x00000959
00000942	movsd	0x13510-0x7de(%edi),%xmm0
0000094a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000950	divsd	%xmm0,%xmm1
00000954	decl	%ebx
00000955	cmpl	%esi,%ebx
00000957	jg	0x00000950
00000959	cvtsi2sd	_V_strcpy(char const*, int, char*, char const*)(%ebp),%xmm0
0000095e	mulsd	%xmm1,%xmm0
00000962	cvtsd2ss	%xmm0,%xmm0
00000966	jmp	0x000008e1
0000096b	orb	$0x20,%cl
0000096e	cmpb	$0x65,%cl
00000971	jne	0x000009b4
00000973	movsd	%xmm1,0xd8(%ebp)
00000978	movl	%eax,(%esp)
0000097b	calll	V_atoi64(char const*)
00000980	testl	%eax,%eax
00000982	jne	0x0000098b
00000984	movsd	0xd8(%ebp),%xmm1
00000989	jmp	0x000009b4
0000098b	cvtsi2sd	%eax,%xmm0
0000098f	movsd	%xmm0,0x08(%esp)
00000995	movsd	0x13510-0x7de(%edi),%xmm0
0000099d	movsd	%xmm0,(%esp)
000009a2	calll	_pow
000009a7	fstpl	0xe8(%ebp)
000009aa	movsd	0xd8(%ebp),%xmm1
000009af	mulsd	0xe8(%ebp),%xmm1
000009b4	cmpl	$0xff,%esi
000009b7	jne	0x0000093e
000009b9	cvtsi2sd	_V_strcpy(char const*, int, char*, char const*)(%ebp),%xmm0
000009be	jmp	0x000008cc
000009c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_normalizeFloatString(char*):
000009d0	pushl	%ebp
000009d1	movl	%esp,%ebp
000009d3	pushl	%esi
000009d4	subl	$0x14,%esp
000009d7	movl	0x08(%ebp),%esi
000009da	movl	%esi,(%esp)
000009dd	movl	$0x0000002e,0x04(%esp)
000009e5	calll	_strchr
000009ea	testl	%eax,%eax
000009ec	je	0x00000a20
000009ee	movl	%esi,(%esp)
000009f1	calll	_strlen
000009f6	jmp	0x00000a0d
000009f8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000a00	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%cl
00000a03	jne	0x00000a20
00000a05	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00000a0a	leal	0xff(%eax),%eax
00000a0d	cmpl	$0x02,%eax
00000a10	jl	0x00000a20
00000a12	movb	0xff(%esi,%eax),%cl
00000a16	cmpb	$0x2e,%cl
00000a19	jne	0x00000a00
00000a1b	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00000a20	addl	$0x14,%esp
00000a23	popl	%esi
00000a24	popl	%ebp
00000a25	ret
00000a26	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stristr(char const*, char const*):
00000a30	pushl	%ebp
00000a31	movl	%esp,%ebp
00000a33	pushl	%ebx
00000a34	pushl	%edi
00000a35	pushl	%esi
00000a36	subl	$0x0c,%esp
00000a39	xorl	%eax,%eax
00000a3b	movl	0x08(%ebp),%ecx
00000a3e	testl	%ecx,%ecx
00000a40	je	0x00000bad
00000a46	cmpl	_V_memset(char const*, int, void*, int, int),0x0c(%ebp)
00000a4a	je	0x00000bad
00000a50	movl	%ecx,%eax
00000a52	jmp	0x00000a61
00000a54	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000a60	incl	%eax
00000a61	movl	%eax,0xf0(%ebp)
00000a64	movzbl	(%eax),%ecx
00000a67	movl	%eax,%esi
00000a69	xorl	%eax,%eax
00000a6b	testl	%ecx,%ecx
00000a6d	je	0x00000bad
00000a73	testb	%cl,%cl
00000a75	js	0x00000a8b
00000a77	movl	$0x00000040,%eax
00000a7c	subl	%ecx,%eax
00000a7e	leal	0xa5(%ecx),%ebx
00000a81	andl	%eax,%ebx
00000a83	shrl	$0x1a,%ebx
00000a86	andl	$0x20,%ebx
00000a89	jmp	0x00000aaa
00000a8b	movl	%ecx,(%esp)
00000a8e	movl	$0x00008000,0x04(%esp)
00000a96	movl	%ecx,%edi
00000a98	calll	___maskrune
00000a9d	movl	%edi,%ecx
00000a9f	testl	%eax,%eax
00000aa1	setne	%al
00000aa4	movzbl	%al,%ebx
00000aa7	shll	$0x05,%ebx
00000aaa	addl	%ecx,%ebx
00000aac	movl	0x0c(%ebp),%eax
00000aaf	movzbl	(%eax),%edx
00000ab2	testb	%dl,%dl
00000ab4	js	0x00000aca
00000ab6	movl	$0x00000040,%ecx
00000abb	subl	%edx,%ecx
00000abd	leal	0xa5(%edx),%eax
00000ac0	andl	%ecx,%eax
00000ac2	shrl	$0x1a,%eax
00000ac5	andl	$0x20,%eax
00000ac8	jmp	0x00000ae9
00000aca	movl	%edx,(%esp)
00000acd	movl	$0x00008000,0x04(%esp)
00000ad5	movl	%edx,%edi
00000ad7	calll	___maskrune
00000adc	movl	%edi,%edx
00000ade	testl	%eax,%eax
00000ae0	setne	%al
00000ae3	movzbl	%al,%eax
00000ae6	shll	$0x05,%eax
00000ae9	addl	%edx,%eax
00000aeb	movl	$0x00000001,%edi
00000af0	cmpl	%eax,%ebx
00000af2	movl	%esi,%eax
00000af4	jne	0x00000a60
00000afa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000b00	movl	0x0c(%ebp),%ecx
00000b03	movb	(%ecx,%edi),%cl
00000b06	testb	%cl,%cl
00000b08	je	0x00000bad
00000b0e	movzbl	(%eax,%edi),%edx
00000b12	xorl	%eax,%eax
00000b14	testl	%edx,%edx
00000b16	je	0x00000bad
00000b1c	testb	%dl,%dl
00000b1e	js	0x00000b34
00000b20	movl	$0x00000040,%eax
00000b25	subl	%edx,%eax
00000b27	leal	0xa5(%edx),%ebx
00000b2a	andl	%eax,%ebx
00000b2c	shrl	$0x1a,%ebx
00000b2f	andl	$0x20,%ebx
00000b32	jmp	0x00000b59
00000b34	movl	%edx,(%esp)
00000b37	movl	$0x00008000,0x04(%esp)
00000b3f	movl	%edx,%esi
00000b41	calll	___maskrune
00000b46	movl	%esi,%edx
00000b48	movl	0x0c(%ebp),%ecx
00000b4b	movb	(%ecx,%edi),%cl
00000b4e	testl	%eax,%eax
00000b50	setne	%al
00000b53	movzbl	%al,%ebx
00000b56	shll	$0x05,%ebx
00000b59	addl	%edx,%ebx
00000b5b	movzbl	%cl,%esi
00000b5e	testb	%cl,%cl
00000b60	js	0x00000b76
00000b62	movl	$0x00000040,%ecx
00000b67	subl	%esi,%ecx
00000b69	leal	0xa5(%esi),%eax
00000b6c	andl	%ecx,%eax
00000b6e	shrl	$0x1a,%eax
00000b71	andl	$0x20,%eax
00000b74	jmp	0x00000b91
00000b76	movl	%esi,(%esp)
00000b79	movl	$0x00008000,0x04(%esp)
00000b81	calll	___maskrune
00000b86	testl	%eax,%eax
00000b88	setne	%al
00000b8b	movzbl	%al,%eax
00000b8e	shll	$0x05,%eax
00000b91	addl	%esi,%eax
00000b93	incl	%edi
00000b94	cmpl	%eax,%ebx
00000b96	movl	0xf0(%ebp),%eax
00000b99	je	0x00000b00
00000b9f	movl	0x0c(%ebp),%ecx
00000ba2	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%ecx,%edi)
00000ba7	jne	0x00000a60
00000bad	addl	$0x0c,%esp
00000bb0	popl	%esi
00000bb1	popl	%edi
00000bb2	popl	%ebx
00000bb3	popl	%ebp
00000bb4	ret
00000bb5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stristr(char*, char const*):
00000bc0	jmp	V_stristr(char const*, char const*)
00000bc5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnistr(char const*, char const*, int):
00000bd0	pushl	%ebp
00000bd1	movl	%esp,%ebp
00000bd3	pushl	%ebx
00000bd4	pushl	%edi
00000bd5	pushl	%esi
00000bd6	subl	$0x1c,%esp
00000bd9	xorl	%eax,%eax
00000bdb	movl	0x08(%ebp),%edx
00000bde	testl	%edx,%edx
00000be0	je	0x00000d6c
00000be6	cmpl	_V_memset(char const*, int, void*, int, int),0x0c(%ebp)
00000bea	je	0x00000d6c
00000bf0	movl	0x10(%ebp),%ecx
00000bf3	leal	0xff(%ecx),%eax
00000bf6	movl	%eax,0xe8(%ebp)
00000bf9	jmp	0x00000c08
00000bfb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000c00	decl	0xe8(%ebp)
00000c03	movl	0xe4(%ebp),%ecx
00000c06	decl	%ecx
00000c07	incl	%edx
00000c08	movl	%edx,0xec(%ebp)
00000c0b	movzbl	(%edx),%ebx
00000c0e	xorl	%eax,%eax
00000c10	testl	%ebx,%ebx
00000c12	je	0x00000d6c
00000c18	testl	%ecx,%ecx
00000c1a	movl	%ecx,0xe4(%ebp)
00000c1d	jle	0x00000d6c
00000c23	movl	%edx,0xec(%ebp)
00000c26	testb	%bl,%bl
00000c28	js	0x00000c3e
00000c2a	movl	$0x00000040,%eax
00000c2f	subl	%ebx,%eax
00000c31	leal	0xa5(%ebx),%esi
00000c34	andl	%eax,%esi
00000c36	shrl	$0x1a,%esi
00000c39	andl	$0x20,%esi
00000c3c	jmp	0x00000c59
00000c3e	movl	%ebx,(%esp)
00000c41	movl	$0x00008000,0x04(%esp)
00000c49	calll	___maskrune
00000c4e	testl	%eax,%eax
00000c50	setne	%al
00000c53	movzbl	%al,%esi
00000c56	shll	$0x05,%esi
00000c59	addl	%ebx,%esi
00000c5b	movl	0x0c(%ebp),%eax
00000c5e	movzbl	(%eax),%ebx
00000c61	testb	%bl,%bl
00000c63	js	0x00000c79
00000c65	movl	$0x00000040,%ecx
00000c6a	subl	%ebx,%ecx
00000c6c	leal	0xa5(%ebx),%eax
00000c6f	andl	%ecx,%eax
00000c71	shrl	$0x1a,%eax
00000c74	andl	$0x20,%eax
00000c77	jmp	0x00000c94
00000c79	movl	%ebx,(%esp)
00000c7c	movl	$0x00008000,0x04(%esp)
00000c84	calll	___maskrune
00000c89	testl	%eax,%eax
00000c8b	setne	%al
00000c8e	movzbl	%al,%eax
00000c91	shll	$0x05,%eax
00000c94	addl	%ebx,%eax
00000c96	movl	$0x00000001,%edi
00000c9b	cmpl	%eax,%esi
00000c9d	movl	0xe8(%ebp),%ebx
00000ca0	movl	0xec(%ebp),%edx
00000ca3	jne	0x00000c00
00000ca9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00000cb0	movl	0x0c(%ebp),%eax
00000cb3	movb	(%eax,%edi),%cl
00000cb6	testb	%cl,%cl
00000cb8	je	0x00000d6a
00000cbe	xorl	%eax,%eax
00000cc0	testl	%ebx,%ebx
00000cc2	movl	%ebx,0xf0(%ebp)
00000cc5	jle	0x00000d6c
00000ccb	movzbl	(%edx,%edi),%ebx
00000ccf	xorl	%eax,%eax
00000cd1	testl	%ebx,%ebx
00000cd3	je	0x00000d6c
00000cd9	testb	%bl,%bl
00000cdb	js	0x00000cf1
00000cdd	movl	$0x00000040,%eax
00000ce2	subl	%ebx,%eax
00000ce4	leal	0xa5(%ebx),%esi
00000ce7	andl	%eax,%esi
00000ce9	shrl	$0x1a,%esi
00000cec	andl	$0x20,%esi
00000cef	jmp	0x00000d12
00000cf1	movl	%ebx,(%esp)
00000cf4	movl	$0x00008000,0x04(%esp)
00000cfc	calll	___maskrune
00000d01	movl	0x0c(%ebp),%ecx
00000d04	movb	(%ecx,%edi),%cl
00000d07	testl	%eax,%eax
00000d09	setne	%al
00000d0c	movzbl	%al,%esi
00000d0f	shll	$0x05,%esi
00000d12	addl	%ebx,%esi
00000d14	movzbl	%cl,%ebx
00000d17	testb	%cl,%cl
00000d19	js	0x00000d2f
00000d1b	movl	$0x00000040,%ecx
00000d20	subl	%ebx,%ecx
00000d22	leal	0xa5(%ebx),%eax
00000d25	andl	%ecx,%eax
00000d27	shrl	$0x1a,%eax
00000d2a	andl	$0x20,%eax
00000d2d	jmp	0x00000d4a
00000d2f	movl	%ebx,(%esp)
00000d32	movl	$0x00008000,0x04(%esp)
00000d3a	calll	___maskrune
00000d3f	testl	%eax,%eax
00000d41	setne	%al
00000d44	movzbl	%al,%eax
00000d47	shll	$0x05,%eax
00000d4a	addl	%ebx,%eax
00000d4c	incl	%edi
00000d4d	movl	0xf0(%ebp),%ebx
00000d50	decl	%ebx
00000d51	cmpl	%eax,%esi
00000d53	movl	0xec(%ebp),%edx
00000d56	je	0x00000cb0
00000d5c	movl	0x0c(%ebp),%eax
00000d5f	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%edi)
00000d64	jne	0x00000c00
00000d6a	movl	%edx,%eax
00000d6c	addl	$0x1c,%esp
00000d6f	popl	%esi
00000d70	popl	%edi
00000d71	popl	%ebx
00000d72	popl	%ebp
00000d73	ret
00000d74	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnchr(char const*, char, int):
00000d80	pushl	%ebx
00000d81	movl	0x08(%esp),%ecx
00000d85	movl	0x10(%esp),%edx
00000d89	addl	%ecx,%edx
00000d8b	movb	0x0c(%esp),%bl
00000d8f	jmp	0x00000da1
00000d91	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000da0	incl	%ecx
00000da1	xorl	%eax,%eax
00000da3	cmpl	%edx,%ecx
00000da5	jae	0x00000db5
00000da7	movb	(%ecx),%bh
00000da9	xorl	%eax,%eax
00000dab	testb	%bh,%bh
00000dad	je	0x00000db5
00000daf	cmpb	%bl,%bh
00000db1	jne	0x00000da0
00000db3	movl	%ecx,%eax
00000db5	popl	%ebx
00000db6	ret
00000db7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strncpy(char*, char const*, int):
00000dc0	pushl	%ebp
00000dc1	movl	%esp,%ebp
00000dc3	pushl	%edi
00000dc4	pushl	%esi
00000dc5	subl	$0x10,%esp
00000dc8	movl	0x10(%ebp),%esi
00000dcb	movl	%esi,0x08(%esp)
00000dcf	movl	0x0c(%ebp),%eax
00000dd2	movl	%eax,0x04(%esp)
00000dd6	movl	0x08(%ebp),%edi
00000dd9	movl	%edi,(%esp)
00000ddc	calll	_strncpy
00000de1	testl	%esi,%esi
00000de3	jle	0x00000dea
00000de5	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000dea	addl	$0x10,%esp
00000ded	popl	%esi
00000dee	popl	%edi
00000def	popl	%ebp
00000df0	ret
00000df1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_wcsncpy(wchar_t*, wchar_t const*, int):
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	pushl	%edi
00000e04	pushl	%esi
00000e05	subl	$0x10,%esp
00000e08	movl	0x10(%ebp),%esi
00000e0b	shrl	$0x02,%esi
00000e0e	movl	%esi,0x08(%esp)
00000e12	movl	0x0c(%ebp),%eax
00000e15	movl	%eax,0x04(%esp)
00000e19	movl	0x08(%ebp),%edi
00000e1c	movl	%edi,(%esp)
00000e1f	calll	_wcsncpy
00000e24	testl	%esi,%esi
00000e26	je	0x00000e30
00000e28	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000e30	addl	$0x10,%esp
00000e33	popl	%esi
00000e34	popl	%edi
00000e35	popl	%ebp
00000e36	ret
00000e37	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_snwprintf(wchar_t*, int, wchar_t const*, ...):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%edi
00000e44	pushl	%esi
00000e45	subl	$0x20,%esp
00000e48	leal	0x14(%ebp),%eax
00000e4b	movl	%eax,0xf4(%ebp)
00000e4e	movl	%eax,0x0c(%esp)
00000e52	movl	0x10(%ebp),%eax
00000e55	movl	%eax,0x08(%esp)
00000e59	movl	0x0c(%ebp),%esi
00000e5c	movl	%esi,0x04(%esp)
00000e60	movl	0x08(%ebp),%edi
00000e63	movl	%edi,(%esp)
00000e66	calll	_vswprintf
00000e6b	testl	%eax,%eax
00000e6d	js	0x00000e73
00000e6f	cmpl	%esi,%eax
00000e71	jl	0x00000e7d
00000e73	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000e7b	movl	%esi,%eax
00000e7d	addl	$0x20,%esp
00000e80	popl	%esi
00000e81	popl	%edi
00000e82	popl	%ebp
00000e83	ret
00000e84	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_vsnwprintf(wchar_t*, int, wchar_t const*, char*):
00000e90	pushl	%ebp
00000e91	movl	%esp,%ebp
00000e93	pushl	%edi
00000e94	pushl	%esi
00000e95	subl	$0x10,%esp
00000e98	movl	0x14(%ebp),%eax
00000e9b	movl	%eax,0x0c(%esp)
00000e9f	movl	0x10(%ebp),%eax
00000ea2	movl	%eax,0x08(%esp)
00000ea6	movl	0x0c(%ebp),%esi
00000ea9	movl	%esi,0x04(%esp)
00000ead	movl	0x08(%ebp),%edi
00000eb0	movl	%edi,(%esp)
00000eb3	calll	_vswprintf
00000eb8	testl	%eax,%eax
00000eba	js	0x00000ec0
00000ebc	cmpl	%esi,%eax
00000ebe	jl	0x00000eca
00000ec0	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000ec8	movl	%esi,%eax
00000eca	addl	$0x10,%esp
00000ecd	popl	%esi
00000ece	popl	%edi
00000ecf	popl	%ebp
00000ed0	ret
00000ed1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_snprintf(char*, int, char const*, ...):
00000ee0	pushl	%ebp
00000ee1	movl	%esp,%ebp
00000ee3	pushl	%edi
00000ee4	pushl	%esi
00000ee5	subl	$0x20,%esp
00000ee8	leal	0x14(%ebp),%eax
00000eeb	movl	%eax,0xf4(%ebp)
00000eee	movl	%eax,0x0c(%esp)
00000ef2	movl	0x10(%ebp),%eax
00000ef5	movl	%eax,0x08(%esp)
00000ef9	movl	0x0c(%ebp),%esi
00000efc	movl	%esi,0x04(%esp)
00000f00	movl	0x08(%ebp),%edi
00000f03	movl	%edi,(%esp)
00000f06	calll	_vsnprintf
00000f0b	testl	%eax,%eax
00000f0d	js	0x00000f13
00000f0f	cmpl	%esi,%eax
00000f11	jl	0x00000f1a
00000f13	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000f18	movl	%esi,%eax
00000f1a	addl	$0x20,%esp
00000f1d	popl	%esi
00000f1e	popl	%edi
00000f1f	popl	%ebp
00000f20	ret
00000f21	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_vsnprintf(char*, int, char const*, char*):
00000f30	pushl	%ebp
00000f31	movl	%esp,%ebp
00000f33	pushl	%edi
00000f34	pushl	%esi
00000f35	subl	$0x10,%esp
00000f38	movl	0x14(%ebp),%eax
00000f3b	movl	%eax,0x0c(%esp)
00000f3f	movl	0x10(%ebp),%eax
00000f42	movl	%eax,0x08(%esp)
00000f46	movl	0x0c(%ebp),%esi
00000f49	movl	%esi,0x04(%esp)
00000f4d	movl	0x08(%ebp),%edi
00000f50	movl	%edi,(%esp)
00000f53	calll	_vsnprintf
00000f58	testl	%eax,%eax
00000f5a	js	0x00000f60
00000f5c	cmpl	%esi,%eax
00000f5e	jl	0x00000f67
00000f60	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000f65	movl	%esi,%eax
00000f67	addl	$0x10,%esp
00000f6a	popl	%esi
00000f6b	popl	%edi
00000f6c	popl	%ebp
00000f6d	ret
00000f6e	nop
V_vsnprintfRet(char*, int, char const*, char*, bool*):
00000f70	pushl	%ebp
00000f71	movl	%esp,%ebp
00000f73	pushl	%ebx
00000f74	pushl	%edi
00000f75	pushl	%esi
00000f76	subl	$0x1c,%esp
00000f79	movl	0x14(%ebp),%eax
00000f7c	movl	%eax,0x0c(%esp)
00000f80	movl	0x10(%ebp),%eax
00000f83	movl	%eax,0x08(%esp)
00000f87	movl	0x0c(%ebp),%esi
00000f8a	movl	%esi,0x04(%esp)
00000f8e	movl	0x08(%ebp),%edi
00000f91	movl	%edi,(%esp)
00000f94	calll	_vsnprintf
00000f99	movl	0x18(%ebp),%ecx
00000f9c	testl	%ecx,%ecx
00000f9e	je	0x00000fae
00000fa0	cmpl	%esi,%eax
00000fa2	setge	%bl
00000fa5	movl	%eax,%edx
00000fa7	shrl	$0x1f,%edx
00000faa	orb	%bl,%dl
00000fac	movb	%dl,(%ecx)
00000fae	testl	%eax,%eax
00000fb0	js	0x00000fb6
00000fb2	cmpl	%esi,%eax
00000fb4	jl	0x00000fbd
00000fb6	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000fbb	movl	%esi,%eax
00000fbd	addl	$0x1c,%esp
00000fc0	popl	%esi
00000fc1	popl	%edi
00000fc2	popl	%ebx
00000fc3	popl	%ebp
00000fc4	ret
00000fc5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strncat(char*, char const*, unsigned long, int):
00000fd0	pushl	%ebp
00000fd1	movl	%esp,%ebp
00000fd3	pushl	%ebx
00000fd4	pushl	%edi
00000fd5	pushl	%esi
00000fd6	subl	$0x0c,%esp
00000fd9	movl	0x08(%ebp),%esi
00000fdc	movl	%esi,(%esp)
00000fdf	calll	_strlen
00000fe4	movl	%eax,%edi
00000fe6	movl	0x0c(%ebp),%ebx
00000fe9	movl	%ebx,(%esp)
00000fec	calll	_strlen
00000ff1	movl	0x14(%ebp),%ecx
00000ff4	testl	%ecx,%ecx
00000ff6	js	0x00000ffd
00000ff8	cmpl	%ecx,%eax
00000ffa	cmovgl	%ecx,%eax
00000ffd	movl	0x10(%ebp),%ecx
00001000	leal	(%eax,%edi),%edx
00001003	cmpl	%ecx,%edx
00001005	jb	0x0000100c
00001007	decl	%ecx
00001008	subl	%edi,%ecx
0000100a	movl	%ecx,%eax
0000100c	testl	%eax,%eax
0000100e	jle	0x00001022
00001010	movl	%eax,0x08(%esp)
00001014	movl	%ebx,0x04(%esp)
00001018	movl	%esi,(%esp)
0000101b	calll	_strncat
00001020	jmp	0x00001024
00001022	movl	%esi,%eax
00001024	addl	$0x0c,%esp
00001027	popl	%esi
00001028	popl	%edi
00001029	popl	%ebx
0000102a	popl	%ebp
0000102b	ret
0000102c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_wcsncat(wchar_t*, wchar_t const*, unsigned long, int):
00001030	pushl	%ebp
00001031	movl	%esp,%ebp
00001033	pushl	%ebx
00001034	pushl	%edi
00001035	pushl	%esi
00001036	subl	$0x0c,%esp
00001039	movl	0x08(%ebp),%esi
0000103c	movl	%esi,(%esp)
0000103f	calll	_wcslen
00001044	movl	%eax,%edi
00001046	movl	0x0c(%ebp),%ebx
00001049	movl	%ebx,(%esp)
0000104c	calll	_wcslen
00001051	movl	0x14(%ebp),%ecx
00001054	testl	%ecx,%ecx
00001056	js	0x0000105d
00001058	cmpl	%ecx,%eax
0000105a	cmovgl	%ecx,%eax
0000105d	movl	0x10(%ebp),%ecx
00001060	leal	(%eax,%edi),%edx
00001063	cmpl	%ecx,%edx
00001065	jb	0x0000106c
00001067	decl	%ecx
00001068	subl	%edi,%ecx
0000106a	movl	%ecx,%eax
0000106c	testl	%eax,%eax
0000106e	jle	0x00001082
00001070	movl	%eax,0x08(%esp)
00001074	movl	%ebx,0x04(%esp)
00001078	movl	%esi,(%esp)
0000107b	calll	_wcsncat
00001080	jmp	0x00001084
00001082	movl	%esi,%eax
00001084	addl	$0x0c,%esp
00001087	popl	%esi
00001088	popl	%edi
00001089	popl	%ebx
0000108a	popl	%ebp
0000108b	ret
0000108c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_pretifymem(float, int, bool):
00001090	pushl	%ebp
00001091	movl	%esp,%ebp
00001093	pushl	%ebx
00001094	pushl	%edi
00001095	pushl	%esi
00001096	subl	$0x6c,%esp
00001099	calll	0x0000109e
0000109e	popl	%ebx
0000109f	movl	0x15f7b-0x109e(%ebx),%eax
000010a5	movl	%eax,0x9c(%ebp)
000010a8	movl	(%eax),%eax
000010aa	movl	%eax,0xf0(%ebp)
000010ad	movl	V_pretifymem(float, int, bool)::current-0x109e(%ebx),%eax
000010b3	leal	0x01(%eax),%ecx
000010b6	andl	$0x07,%ecx
000010b9	movl	%ecx,V_pretifymem(float, int, bool)::current-0x109e(%ebx)
000010bf	movb	0x10(%ebp),%cl
000010c2	testb	%cl,%cl
000010c4	je	0x000010d0
000010c6	movss	0x13530-0x109e(%ebx),%xmm0
000010ce	jmp	0x000010d8
000010d0	movss	0x13534-0x109e(%ebx),%xmm0
000010d8	movaps	%xmm0,%xmm1
000010db	mulss	%xmm1,%xmm1
000010df	shll	$0x05,%eax
000010e2	leal	V_pretifymem(float, int, bool)::output-0x109e(%ebx,%eax),%eax
000010e9	movl	%eax,0xa4(%ebp)
000010ec	movl	0x0c(%ebp),%edi
000010ef	movss	0x08(%ebp),%xmm2
000010f4	ucomiss	%xmm1,%xmm2
000010f7	jbe	0x00001117
000010f9	leal	0x135ec-0x109e(%ebx),%eax
000010ff	movl	%eax,0x08(%esp)
00001103	leal	0xe8(%ebp),%eax
00001106	movl	%eax,(%esp)
00001109	movl	$0x00000008,0x04(%esp)
00001111	divss	%xmm1,%xmm2
00001115	jmp	0x00001152
00001117	ucomiss	%xmm0,%xmm2
0000111a	jbe	0x0000113a
0000111c	leal	0x135f0-0x109e(%ebx),%eax
00001122	movl	%eax,0x08(%esp)
00001126	leal	0xe8(%ebp),%eax
00001129	movl	%eax,(%esp)
0000112c	movl	$0x00000008,0x04(%esp)
00001134	divss	%xmm0,%xmm2
00001138	jmp	0x00001152
0000113a	leal	0x135f4-0x109e(%ebx),%eax
00001140	movl	%eax,0x08(%esp)
00001144	leal	0xe8(%ebp),%eax
00001147	movl	%eax,(%esp)
0000114a	movl	$0x00000008,0x04(%esp)
00001152	movss	%xmm2,0xa0(%ebp)
00001157	calll	V_snprintf(char*, int, char const*, ...)
0000115c	movss	0xa0(%ebp),%xmm0
00001161	cvttss2si	%xmm0,%eax
00001165	cvtsi2ss	%eax,%xmm1
00001169	subss	%xmm1,%xmm0
0000116d	andps	0x13540-0x109e(%ebx),%xmm0
00001174	cvtss2sd	%xmm0,%xmm0
00001178	movsd	0x13528-0x109e(%ebx),%xmm1
00001180	ucomisd	%xmm0,%xmm1
00001184	jbe	0x0000119d
00001186	leal	0xe8(%ebp),%ecx
00001189	movl	%ecx,0x10(%esp)
0000118d	movl	%eax,0x0c(%esp)
00001191	leal	0x135fb-0x109e(%ebx),%eax
00001197	movl	%eax,0x08(%esp)
0000119b	jmp	0x000011e2
0000119d	leal	0xe8(%ebp),%eax
000011a0	movl	%eax,0x10(%esp)
000011a4	leal	0x13600-0x109e(%ebx),%eax
000011aa	movl	%eax,0x08(%esp)
000011ae	leal	0xa8(%ebp),%esi
000011b1	movl	%esi,(%esp)
000011b4	testl	%edi,%edi
000011b6	movl	_V_memset(char const*, int, void*, int, int),%eax
000011bb	cmovgl	%edi,%eax
000011be	movl	%eax,0x0c(%esp)
000011c2	movl	$0x00000020,0x04(%esp)
000011ca	calll	V_snprintf(char*, int, char const*, ...)
000011cf	movss	0xa0(%ebp),%xmm0
000011d4	cvtss2sd	%xmm0,%xmm0
000011d8	movsd	%xmm0,0x0c(%esp)
000011de	movl	%esi,0x08(%esp)
000011e2	leal	0xc8(%ebp),%eax
000011e5	movl	%eax,(%esp)
000011e8	movl	$0x00000020,0x04(%esp)
000011f0	calll	V_snprintf(char*, int, char const*, ...)
000011f5	leal	0xc8(%ebp),%esi
000011f8	movl	%esi,(%esp)
000011fb	movl	$0x0000002e,0x04(%esp)
00001203	calll	_strchr
00001208	testl	%eax,%eax
0000120a	jne	0x0000121c
0000120c	movl	%esi,(%esp)
0000120f	movl	$0x00000020,0x04(%esp)
00001217	calll	_strchr
0000121c	movb	0xc8(%ebp),%bl
0000121f	testb	%bl,%bl
00001221	movl	0xa4(%ebp),%edi
00001224	je	0x00001274
00001226	movl	$0xfffffffd,%ecx
0000122b	subl	%esi,%ecx
0000122d	addl	%eax,%ecx
0000122f	leal	0xc9(%ebp),%esi
00001232	movl	0xa4(%ebp),%edi
00001235	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001240	movl	%ecx,%eax
00001242	movl	$0x55555556,%edx
00001247	imull	%edx
00001249	movl	%edx,%eax
0000124b	shrl	$0x1f,%eax
0000124e	addl	%edx,%eax
00001250	leal	(%eax,%eax,2),%eax
00001253	movl	%ecx,%edx
00001255	subl	%eax,%edx
00001257	jne	0x00001269
00001259	testl	%ecx,%ecx
0000125b	js	0x00001269
0000125d	cmpl	0xa4(%ebp),%edi
00001260	je	0x00001269
00001262	movb	$0x2c,(%edi)
00001265	movb	0xff(%esi),%bl
00001268	incl	%edi
00001269	movb	%bl,(%edi)
0000126b	incl	%edi
0000126c	decl	%ecx
0000126d	movb	(%esi),%bl
0000126f	incl	%esi
00001270	testb	%bl,%bl
00001272	jne	0x00001240
00001274	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00001277	movl	0x9c(%ebp),%eax
0000127a	movl	(%eax),%eax
0000127c	cmpl	0xf0(%ebp),%eax
0000127f	jne	0x0000128c
00001281	movl	0xa4(%ebp),%eax
00001284	addl	$0x6c,%esp
00001287	popl	%esi
00001288	popl	%edi
00001289	popl	%ebx
0000128a	popl	%ebp
0000128b	ret
0000128c	calll	___stack_chk_fail
00001291	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_pretifynum(long long):
000012a0	pushl	%ebp
000012a1	movl	%esp,%ebp
000012a3	pushl	%ebx
000012a4	pushl	%edi
000012a5	pushl	%esi
000012a6	subl	$0x3c,%esp
000012a9	calll	0x000012ae
000012ae	popl	%edx
000012af	movl	V_pretifynum(long long)::current-0x12ae(%edx),%esi
000012b5	leal	0x01(%esi),%eax
000012b8	andl	$0x07,%eax
000012bb	movl	%eax,V_pretifynum(long long)::current-0x12ae(%edx)
000012c1	shll	$0x05,%esi
000012c4	movb	_V_memset(char const*, int, void*, int, int),V_pretifynum(long long)::output-0x12ae(%edx,%esi)
000012cc	leal	V_pretifynum(long long)::output-0x12ae(%edx,%esi),%ecx
000012d3	movl	0x0c(%ebp),%eax
000012d6	movl	0x08(%ebp),%edi
000012d9	testl	%eax,%eax
000012db	js	0x000012e8
000012dd	movl	%edi,0xe8(%ebp)
000012e0	movl	%eax,0xe4(%ebp)
000012e3	movl	%ecx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000012e6	jmp	0x0000132b
000012e8	leal	0x13609-0x12ae(%edx),%eax
000012ee	movl	%eax,0x08(%esp)
000012f2	movl	%ecx,(%esp)
000012f5	movl	$0x00000020,0x04(%esp)
000012fd	movl	%ecx,%ebx
000012ff	movl	%edx,0xec(%ebp)
00001302	calll	V_snprintf(char*, int, char const*, ...)
00001307	movl	%ebx,(%esp)
0000130a	xorl	%eax,%eax
0000130c	subl	%edi,%eax
0000130e	movl	%eax,0xe8(%ebp)
00001311	movl	_V_memset(char const*, int, void*, int, int),%eax
00001316	sbbl	0x0c(%ebp),%eax
00001319	movl	%eax,0xe4(%ebp)
0000131c	calll	_strlen
00001321	movl	0xec(%ebp),%edx
00001324	movl	%ebx,%ecx
00001326	addl	%ecx,%eax
00001328	movl	%eax,_V_strcpy(char const*, int, char*, char const*)(%ebp)
0000132b	movl	%edx,0xec(%ebp)
0000132e	movl	%ecx,0xcc(%ebp)
00001331	leal	V_pretifynum(long long)::output-0x12ae+0x00000020(%edx,%esi),%eax
00001338	movl	%eax,0xd4(%ebp)
0000133b	xorl	%edi,%edi
0000133d	movl	$0x00000001,%eax
00001342	movl	$0xffffffff,%ecx
00001347	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001350	movl	%eax,%edx
00001352	movl	%edi,%esi
00001354	incl	%ecx
00001355	cmpl	$0x05,%ecx
00001358	jg	0x00001385
0000135a	movl	%edx,%eax
0000135c	movl	%edx,0xf0(%ebp)
0000135f	movl	$0x000003e8,%edx
00001364	mull	%edx
00001366	cmpl	%eax,0xe8(%ebp)
00001369	setae	%bl
0000136c	imull	$0x000003e8,%esi,%edi
00001372	addl	%edx,%edi
00001374	cmpl	%edi,0xe4(%ebp)
00001377	setae	%dl
0000137a	je	0x0000137e
0000137c	movb	%dl,%bl
0000137e	testb	%bl,%bl
00001380	movl	0xf0(%ebp),%edx
00001383	jne	0x00001350
00001385	movl	%edx,0xf0(%ebp)
00001388	movl	%esi,0x0c(%esp)
0000138c	movl	%edx,0x08(%esp)
00001390	movl	0xe4(%ebp),%eax
00001393	movl	%eax,0x04(%esp)
00001397	movl	0xe8(%ebp),%eax
0000139a	movl	%eax,(%esp)
0000139d	movl	%edx,%edi
0000139f	calll	___udivdi3
000013a4	movl	%eax,%ebx
000013a6	movl	%ebx,0x0c(%esp)
000013aa	movl	0xec(%ebp),%eax
000013ad	leal	0x1360b-0x12ae(%eax),%eax
000013b3	movl	%eax,0x08(%esp)
000013b7	movl	0xd4(%ebp),%eax
000013ba	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
000013bd	subl	%ecx,%eax
000013bf	movl	%eax,0x04(%esp)
000013c3	movl	%ecx,(%esp)
000013c6	cmpl	$0x000003e8,%edi
000013cc	setb	%al
000013cf	testl	%esi,%esi
000013d1	movl	%esi,%edi
000013d3	je	0x000013d7
000013d5	movb	_V_memset(char const*, int, void*, int, int),%al
000013d7	movb	%al,0xdc(%ebp)
000013da	calll	V_snprintf(char*, int, char const*, ...)
000013df	cmpb	_V_memset(char const*, int, void*, int, int),0xdc(%ebp)
000013e3	movl	0xf0(%ebp),%ecx
000013e6	jne	0x000014e3
000013ec	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%eax
000013ef	movl	%eax,(%esp)
000013f2	movl	%ebx,%eax
000013f4	movl	%ecx,%esi
000013f6	mull	%esi
000013f8	movl	%ebx,%ecx
000013fa	imull	%edi,%ecx
000013fd	addl	%edx,%ecx
000013ff	sarl	$0x1f,%ebx
00001402	imull	%esi,%ebx
00001405	addl	%ecx,%ebx
00001407	subl	%eax,0xe8(%ebp)
0000140a	sbbl	%ebx,0xe4(%ebp)
0000140d	calll	_strlen
00001412	movl	%esi,%ecx
00001414	movl	%eax,%edx
00001416	addl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%edx
00001419	movl	0xec(%ebp),%eax
0000141c	leal	0x1360e-0x12ae(%eax),%eax
00001422	movl	%eax,0xd0(%ebp)
00001425	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001430	movl	%edi,0xd8(%ebp)
00001433	movl	%ecx,0xf0(%ebp)
00001436	movl	%edx,0xdc(%ebp)
00001439	movl	%edi,0x04(%esp)
0000143d	movl	%ecx,(%esp)
00001440	movl	_V_memset(char const*, int, void*, int, int),0x0c(%esp)
00001448	movl	$0x000003e8,0x08(%esp)
00001450	movl	%edx,%esi
00001452	calll	___udivdi3
00001457	movl	%eax,0xec(%ebp)
0000145a	movl	%edx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
0000145d	movl	%edx,0x0c(%esp)
00001461	movl	%eax,0x08(%esp)
00001465	movl	0xe4(%ebp),%eax
00001468	movl	%eax,0x04(%esp)
0000146c	movl	0xe8(%ebp),%ebx
0000146f	movl	%ebx,(%esp)
00001472	calll	___udivdi3
00001477	movl	%eax,%edi
00001479	movl	%edi,0x0c(%esp)
0000147d	movl	0xd0(%ebp),%eax
00001480	movl	%eax,0x08(%esp)
00001484	movl	0xd4(%ebp),%eax
00001487	subl	%esi,%eax
00001489	movl	%eax,0x04(%esp)
0000148d	movl	%esi,(%esp)
00001490	calll	V_snprintf(char*, int, char const*, ...)
00001495	movl	%esi,(%esp)
00001498	movl	%edi,%eax
0000149a	mull	0xec(%ebp)
0000149d	movl	%edi,%ecx
0000149f	imull	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
000014a3	addl	%edx,%ecx
000014a5	sarl	$0x1f,%edi
000014a8	imull	0xec(%ebp),%edi
000014ac	addl	%ecx,%edi
000014ae	subl	%eax,%ebx
000014b0	movl	%ebx,0xe8(%ebp)
000014b3	sbbl	%edi,0xe4(%ebp)
000014b6	cmpl	$0x000f423f,0xf0(%ebp)
000014bd	seta	%bl
000014c0	cmpl	_V_memset(char const*, int, void*, int, int),0xd8(%ebp)
000014c4	setne	%al
000014c7	je	0x000014cb
000014c9	movb	%al,%bl
000014cb	calll	_strlen
000014d0	movl	0xdc(%ebp),%edx
000014d3	addl	%eax,%edx
000014d5	testb	%bl,%bl
000014d7	movl	0xec(%ebp),%ecx
000014da	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%edi
000014dd	jne	0x00001430
000014e3	movl	0xcc(%ebp),%eax
000014e6	addl	$0x3c,%esp
000014e9	popl	%esi
000014ea	popl	%edi
000014eb	popl	%ebx
000014ec	popl	%ebp
000014ed	ret
000014ee	nop
Q_IsMeanSpaceW(wchar_t):
000014f0	xorb	%al,%al
000014f2	movl	0x04(%esp),%ecx
000014f6	cmpl	$0x0000fffb,%ecx
000014fc	jg	0x00001567
000014fe	cmpl	$0x0000fefe,%ecx
00001504	jg	0x0000155d
00001506	cmpl	$0x0000205f,%ecx
0000150c	jg	0x00001553
0000150e	cmpl	$0x00001fff,%ecx
00001514	jg	0x00001533
00001516	leal	0xffffff7e(%ecx),%edx
0000151c	cmpl	$0x02,%edx
0000151f	jb	0x0000156f
00001521	cmpl	$0x000000a0,%ecx
00001527	je	0x0000156f
00001529	cmpl	$0x0000034f,%ecx
0000152f	je	0x0000156f
00001531	jmp	0x00001571
00001533	leal	0xffffe000(%ecx),%edx
00001539	cmpl	$0x0e,%edx
0000153c	jb	0x0000156f
0000153e	leal	0xffffdfd8(%ecx),%edx
00001544	cmpl	$0x02,%edx
00001547	jb	0x0000156f
00001549	cmpl	$0x0000202f,%ecx
0000154f	je	0x0000156f
00001551	jmp	0x00001571
00001553	cmpl	$0x00002060,%ecx
00001559	je	0x0000156f
0000155b	jmp	0x00001571
0000155d	cmpl	$0x0000feff,%ecx
00001563	je	0x0000156f
00001565	jmp	0x00001571
00001567	cmpl	$0x0000fffc,%ecx
0000156d	jne	0x00001571
0000156f	movb	$0x01,%al
00001571	movzbl	%al,%eax
00001574	ret
00001575	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
Q_StripPrecedingAndTrailingWhitespaceW(wchar_t*):
00001580	pushl	%ebp
00001581	movl	%esp,%ebp
00001583	pushl	%ebx
00001584	pushl	%edi
00001585	pushl	%esi
00001586	subl	$0x1c,%esp
00001589	calll	0x0000158e
0000158e	popl	%eax
0000158f	movl	%eax,0xe8(%ebp)
00001592	movl	0x15f7b-0x158e(%eax),%eax
00001598	movl	%eax,0xe4(%ebp)
0000159b	movl	(%eax),%eax
0000159d	movl	%eax,0xf0(%ebp)
000015a0	subl	$0x10,%esp
000015a3	movl	0x08(%ebp),%edi
000015a6	movl	%edi,(%esp)
000015a9	calll	_wcslen
000015ae	addl	$0x10,%esp
000015b1	movl	%eax,0xec(%ebp)
000015b4	leal	0x00000013(,%eax,4),%ecx
000015bb	andl	$0xf0,%ecx
000015be	movl	%esp,%esi
000015c0	subl	%ecx,%esi
000015c2	movl	%esi,%esp
000015c4	subl	$0x10,%esp
000015c7	leal	0x00000004(,%eax,4),%ebx
000015ce	shrl	$0x02,%ebx
000015d1	movl	%ebx,0x08(%esp)
000015d5	movl	%edi,0x04(%esp)
000015d9	movl	%esi,(%esp)
000015dc	calll	_wcsncpy
000015e1	addl	$0x10,%esp
000015e4	testl	%ebx,%ebx
000015e6	je	0x000015f0
000015e8	movl	_V_memset(char const*, int, void*, int, int),0xfc(%esi,%ebx,4)
000015f0	movl	%ebx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000015f3	movl	0xec(%ebp),%eax
000015f6	leal	0xfc(%edi,%eax,4),%esi
000015fa	movb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000015fe	jmp	0x0000164c
00001600	movl	(%esi),%eax
00001602	cmpl	$0x7f,%eax
00001605	ja	0x0000161d
00001607	movl	0xe8(%ebp),%ecx
0000160a	movl	0x15f77-0x158e(%ecx),%ecx
00001610	movl	0x34(%ecx,%eax,4),%eax
00001614	movl	$0x00004000,%ecx
00001619	andl	%ecx,%eax
0000161b	jmp	0x00001633
0000161d	subl	$0x10,%esp
00001620	movl	%eax,(%esp)
00001623	movl	$0x00004000,0x04(%esp)
0000162b	calll	___maskrune
00001630	addl	$0x10,%esp
00001633	testl	%eax,%eax
00001635	movl	%edi,%eax
00001637	movl	%eax,%edi
00001639	movl	%eax,%ebx
0000163b	je	0x00001667
0000163d	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001643	addl	$0xfc,%esi
00001646	movb	$0x01,0xec(%ebp)
0000164a	movl	%ebx,%edi
0000164c	cmpl	%edi,%esi
0000164e	jae	0x00001600
00001650	movl	%edi,%eax
00001652	movl	%eax,%edi
00001654	movl	%eax,%ebx
00001656	jmp	0x00001667
00001658	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001660	addl	$0x04,%edi
00001663	movb	$0x01,0xec(%ebp)
00001667	cmpl	%esi,%edi
00001669	jae	0x000016a0
0000166b	movl	(%edi),%ecx
0000166d	cmpl	$0x7f,%ecx
00001670	ja	0x00001686
00001672	movl	0xe8(%ebp),%eax
00001675	movl	0x15f77-0x158e(%eax),%edx
0000167b	movl	$0x00004000,%eax
00001680	andl	0x34(%edx,%ecx,4),%eax
00001684	jmp	0x0000169c
00001686	subl	$0x10,%esp
00001689	movl	%ecx,(%esp)
0000168c	movl	$0x00004000,0x04(%esp)
00001694	calll	___maskrune
00001699	addl	$0x10,%esp
0000169c	testl	%eax,%eax
0000169e	jne	0x00001660
000016a0	andb	$0x01,0xec(%ebp)
000016a4	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%esi
000016a7	je	0x000016cb
000016a9	subl	$0x10,%esp
000016ac	movl	%esi,0x08(%esp)
000016b0	movl	%edi,0x04(%esp)
000016b4	movl	%ebx,(%esp)
000016b7	calll	_wcsncpy
000016bc	addl	$0x10,%esp
000016bf	testl	%esi,%esi
000016c1	je	0x000016cb
000016c3	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%esi,4)
000016cb	cmpb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000016cf	setne	%al
000016d2	movl	0xe4(%ebp),%ecx
000016d5	movl	(%ecx),%ecx
000016d7	cmpl	0xf0(%ebp),%ecx
000016da	jne	0x000016e7
000016dc	movzbl	%al,%eax
000016df	leal	0xf4(%ebp),%esp
000016e2	popl	%esi
000016e3	popl	%edi
000016e4	popl	%ebx
000016e5	popl	%ebp
000016e6	ret
000016e7	calll	___stack_chk_fail
000016ec	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
Q_AggressiveStripPrecedingAndTrailingWhitespaceW(wchar_t*):
000016f0	pushl	%ebp
000016f1	movl	%esp,%ebp
000016f3	pushl	%ebx
000016f4	pushl	%edi
000016f5	pushl	%esi
000016f6	subl	$0x1c,%esp
000016f9	calll	0x000016fe
000016fe	popl	%eax
000016ff	movl	%eax,0xe8(%ebp)
00001702	movl	0x15f7b-0x16fe(%eax),%eax
00001708	movl	%eax,0xe4(%ebp)
0000170b	movl	(%eax),%eax
0000170d	movl	%eax,0xf0(%ebp)
00001710	subl	$0x10,%esp
00001713	movl	0x08(%ebp),%edi
00001716	movl	%edi,(%esp)
00001719	calll	_wcslen
0000171e	addl	$0x10,%esp
00001721	movl	%eax,0xec(%ebp)
00001724	leal	0x00000013(,%eax,4),%ecx
0000172b	andl	$0xf0,%ecx
0000172e	movl	%esp,%ebx
00001730	subl	%ecx,%ebx
00001732	movl	%ebx,%esp
00001734	subl	$0x10,%esp
00001737	leal	0x00000004(,%eax,4),%esi
0000173e	shrl	$0x02,%esi
00001741	movl	%esi,0x08(%esp)
00001745	movl	%edi,0x04(%esp)
00001749	movl	%ebx,(%esp)
0000174c	calll	_wcsncpy
00001751	addl	$0x10,%esp
00001754	testl	%esi,%esi
00001756	je	0x00001760
00001758	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%esi,4)
00001760	movl	%esi,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00001763	movl	0xec(%ebp),%eax
00001766	leal	0xfc(%edi,%eax,4),%esi
0000176a	xorb	%al,%al
0000176c	jmp	0x0000182d
00001771	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001780	movl	(%esi),%eax
00001782	cmpl	$0x7f,%eax
00001785	ja	0x0000179d
00001787	movl	0xe8(%ebp),%ecx
0000178a	movl	0x15f77-0x16fe(%ecx),%ecx
00001790	movl	0x34(%ecx,%eax,4),%eax
00001794	movl	$0x00004000,%ecx
00001799	andl	%ecx,%eax
0000179b	jmp	0x000017b3
0000179d	subl	$0x10,%esp
000017a0	movl	%eax,(%esp)
000017a3	movl	$0x00004000,0x04(%esp)
000017ab	calll	___maskrune
000017b0	addl	$0x10,%esp
000017b3	testl	%eax,%eax
000017b5	jne	0x00001822
000017b7	movl	(%esi),%eax
000017b9	cmpl	$0x0000fffb,%eax
000017be	jg	0x00001819
000017c0	cmpl	$0x0000fefe,%eax
000017c5	jg	0x00001812
000017c7	cmpl	$0x0000205f,%eax
000017cc	jg	0x0000180b
000017ce	cmpl	$0x00001fff,%eax
000017d3	jg	0x000017ee
000017d5	leal	0xffffff7e(%eax),%ecx
000017db	cmpl	$0x02,%ecx
000017de	jb	0x00001822
000017e0	cmpl	$0x000000a0,%eax
000017e5	je	0x00001822
000017e7	cmpl	$0x0000034f,%eax
000017ec	jmp	0x0000181e
000017ee	leal	0xffffe000(%eax),%ecx
000017f4	cmpl	$0x0e,%ecx
000017f7	jb	0x00001822
000017f9	leal	0xffffdfd8(%eax),%ecx
000017ff	cmpl	$0x02,%ecx
00001802	jb	0x00001822
00001804	cmpl	$0x0000202f,%eax
00001809	jmp	0x0000181e
0000180b	cmpl	$0x00002060,%eax
00001810	jmp	0x0000181e
00001812	cmpl	$0x0000feff,%eax
00001817	jmp	0x0000181e
00001819	cmpl	$0x0000fffc,%eax
0000181e	movl	%edi,%ebx
00001820	jne	0x00001847
00001822	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001828	addl	$0xfc,%esi
0000182b	movb	$0x01,%al
0000182d	movb	%al,0xec(%ebp)
00001830	cmpl	%edi,%esi
00001832	jae	0x00001780
00001838	movl	%edi,%ebx
0000183a	jmp	0x00001847
0000183c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00001840	addl	$0x04,%ebx
00001843	movb	$0x01,0xec(%ebp)
00001847	cmpl	%esi,%ebx
00001849	jae	0x00001880
0000184b	movl	(%ebx),%ecx
0000184d	cmpl	$0x7f,%ecx
00001850	ja	0x00001866
00001852	movl	0xe8(%ebp),%eax
00001855	movl	0x15f77-0x16fe(%eax),%edx
0000185b	movl	$0x00004000,%eax
00001860	andl	0x34(%edx,%ecx,4),%eax
00001864	jmp	0x0000187c
00001866	subl	$0x10,%esp
00001869	movl	%ecx,(%esp)
0000186c	movl	$0x00004000,0x04(%esp)
00001874	calll	___maskrune
00001879	addl	$0x10,%esp
0000187c	testl	%eax,%eax
0000187e	jne	0x00001840
00001880	andb	$0x01,0xec(%ebp)
00001884	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%esi
00001887	je	0x000018ab
00001889	subl	$0x10,%esp
0000188c	movl	%esi,0x08(%esp)
00001890	movl	%ebx,0x04(%esp)
00001894	movl	%edi,(%esp)
00001897	calll	_wcsncpy
0000189c	addl	$0x10,%esp
0000189f	testl	%esi,%esi
000018a1	je	0x000018ab
000018a3	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
000018ab	cmpb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000018af	setne	%al
000018b2	movl	0xe4(%ebp),%ecx
000018b5	movl	(%ecx),%ecx
000018b7	cmpl	0xf0(%ebp),%ecx
000018ba	jne	0x000018c7
000018bc	movzbl	%al,%eax
000018bf	leal	0xf4(%ebp),%esp
000018c2	popl	%esi
000018c3	popl	%edi
000018c4	popl	%ebx
000018c5	popl	%ebp
000018c6	ret
000018c7	calll	___stack_chk_fail
000018cc	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
Q_StripPrecedingAndTrailingWhitespace(char*):
000018d0	pushl	%ebp
000018d1	movl	%esp,%ebp
000018d3	pushl	%ebx
000018d4	pushl	%edi
000018d5	pushl	%esi
000018d6	subl	$0x1c,%esp
000018d9	calll	0x000018de
000018de	popl	%eax
000018df	movl	%eax,0xec(%ebp)
000018e2	movl	0x15f7b-0x18de(%eax),%eax
000018e8	movl	%eax,0xe8(%ebp)
000018eb	movl	(%eax),%eax
000018ed	movl	%eax,0xf0(%ebp)
000018f0	subl	$0x10,%esp
000018f3	movl	0x08(%ebp),%eax
000018f6	movl	%eax,(%esp)
000018f9	calll	_strlen
000018fe	addl	$0x10,%esp
00001901	movl	%eax,0xe4(%ebp)
00001904	leal	0x00000013(,%eax,4),%ecx
0000190b	andl	$0xf0,%ecx
0000190e	movl	%esp,%edi
00001910	subl	%ecx,%edi
00001912	movl	%edi,%esp
00001914	leal	0x00000004(,%eax,4),%esi
0000191b	testl	%esi,%esi
0000191d	jle	0x00001925
0000191f	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001925	xorl	%eax,%eax
00001927	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ebp)
0000192b	je	0x00001958
0000192d	subl	$0x10,%esp
00001930	movl	%esi,%ebx
00001932	shrl	$0x02,%ebx
00001935	movl	%ebx,0x08(%esp)
00001939	movl	0x08(%ebp),%eax
0000193c	movl	%eax,0x04(%esp)
00001940	movl	%edi,(%esp)
00001943	calll	_mbstowcs
00001948	addl	$0x10,%esp
0000194b	incl	%eax
0000194c	testl	%esi,%esi
0000194e	jle	0x00001958
00001950	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%ebx,4)
00001958	leal	0xf8(%edi,%eax,4),%esi
0000195c	xorb	%bl,%bl
0000195e	jmp	0x0000196b
00001960	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001966	addl	$0xfc,%esi
00001969	movb	$0x01,%bl
0000196b	cmpl	%edi,%esi
0000196d	jb	0x000019b5
0000196f	movl	(%esi),%eax
00001971	cmpl	$0x7f,%eax
00001974	ja	0x0000198c
00001976	movl	0xec(%ebp),%ecx
00001979	movl	0x15f77-0x18de(%ecx),%ecx
0000197f	movl	0x34(%ecx,%eax,4),%eax
00001983	movl	$0x00004000,%ecx
00001988	andl	%ecx,%eax
0000198a	jmp	0x000019a2
0000198c	subl	$0x10,%esp
0000198f	movl	%eax,(%esp)
00001992	movl	$0x00004000,0x04(%esp)
0000199a	calll	___maskrune
0000199f	addl	$0x10,%esp
000019a2	testl	%eax,%eax
000019a4	jne	0x00001960
000019a6	jmp	0x000019b5
000019a8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000019b0	addl	$0x04,%edi
000019b3	movb	$0x01,%bl
000019b5	cmpl	%esi,%edi
000019b7	jae	0x000019ee
000019b9	movl	(%edi),%ecx
000019bb	cmpl	$0x7f,%ecx
000019be	ja	0x000019d4
000019c0	movl	0xec(%ebp),%eax
000019c3	movl	0x15f77-0x18de(%eax),%edx
000019c9	movl	$0x00004000,%eax
000019ce	andl	0x34(%edx,%ecx,4),%eax
000019d2	jmp	0x000019ea
000019d4	subl	$0x10,%esp
000019d7	movl	%ecx,(%esp)
000019da	movl	$0x00004000,0x04(%esp)
000019e2	calll	___maskrune
000019e7	addl	$0x10,%esp
000019ea	testl	%eax,%eax
000019ec	jne	0x000019b0
000019ee	andb	$0x01,%bl
000019f1	movl	0x08(%ebp),%esi
000019f4	movl	0xe4(%ebp),%eax
000019f7	je	0x00001a2b
000019f9	testl	%eax,%eax
000019fb	jle	0x00001a00
000019fd	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00001a00	testl	%edi,%edi
00001a02	je	0x00001a22
00001a04	testl	%esi,%esi
00001a06	je	0x00001a22
00001a08	subl	$0x10,%esp
00001a0b	movl	%eax,0x08(%esp)
00001a0f	movl	%edi,0x04(%esp)
00001a13	movl	%esi,(%esp)
00001a16	movl	%eax,%edi
00001a18	calll	_wcstombs
00001a1d	movl	%edi,%eax
00001a1f	addl	$0x10,%esp
00001a22	testl	%eax,%eax
00001a24	jle	0x00001a2b
00001a26	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%esi)
00001a2b	testb	%bl,%bl
00001a2d	setne	%al
00001a30	movl	0xe8(%ebp),%ecx
00001a33	movl	(%ecx),%ecx
00001a35	cmpl	0xf0(%ebp),%ecx
00001a38	jne	0x00001a45
00001a3a	movzbl	%al,%eax
00001a3d	leal	0xf4(%ebp),%esp
00001a40	popl	%esi
00001a41	popl	%edi
00001a42	popl	%ebx
00001a43	popl	%ebp
00001a44	ret
00001a45	calll	___stack_chk_fail
00001a4a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UTF8ToUnicode(char const*, wchar_t*, int):
00001a50	pushl	%ebp
00001a51	movl	%esp,%ebp
00001a53	pushl	%ebx
00001a54	pushl	%edi
00001a55	pushl	%esi
00001a56	subl	$0x0c,%esp
00001a59	movl	0x10(%ebp),%edi
00001a5c	movl	0x0c(%ebp),%esi
00001a5f	testl	%edi,%edi
00001a61	jle	0x00001a69
00001a63	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001a69	movl	0x08(%ebp),%ecx
00001a6c	xorl	%eax,%eax
00001a6e	testl	%ecx,%ecx
00001a70	je	0x00001a94
00001a72	movl	%edi,%ebx
00001a74	shrl	$0x02,%ebx
00001a77	movl	%ebx,0x08(%esp)
00001a7b	movl	%ecx,0x04(%esp)
00001a7f	movl	%esi,(%esp)
00001a82	calll	_mbstowcs
00001a87	incl	%eax
00001a88	testl	%edi,%edi
00001a8a	jle	0x00001a94
00001a8c	movl	_V_memset(char const*, int, void*, int, int),0xfc(%esi,%ebx,4)
00001a94	addl	$0x0c,%esp
00001a97	popl	%esi
00001a98	popl	%edi
00001a99	popl	%ebx
00001a9a	popl	%ebp
00001a9b	ret
00001a9c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_UnicodeToUTF8(wchar_t const*, char*, int):
00001aa0	pushl	%ebp
00001aa1	movl	%esp,%ebp
00001aa3	pushl	%edi
00001aa4	pushl	%esi
00001aa5	subl	$0x10,%esp
00001aa8	movl	0x10(%ebp),%esi
00001aab	movl	0x0c(%ebp),%edi
00001aae	testl	%esi,%esi
00001ab0	jle	0x00001ab5
00001ab2	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00001ab5	movl	0x08(%ebp),%ecx
00001ab8	xorl	%eax,%eax
00001aba	testl	%ecx,%ecx
00001abc	je	0x00001ad3
00001abe	testl	%edi,%edi
00001ac0	je	0x00001ad3
00001ac2	movl	%esi,0x08(%esp)
00001ac6	movl	%ecx,0x04(%esp)
00001aca	movl	%edi,(%esp)
00001acd	calll	_wcstombs
00001ad2	incl	%eax
00001ad3	testl	%esi,%esi
00001ad5	jle	0x00001adc
00001ad7	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00001adc	addl	$0x10,%esp
00001adf	popl	%esi
00001ae0	popl	%edi
00001ae1	popl	%ebp
00001ae2	ret
00001ae3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
Q_AggressiveStripPrecedingAndTrailingWhitespace(char*):
00001af0	pushl	%ebp
00001af1	movl	%esp,%ebp
00001af3	pushl	%ebx
00001af4	pushl	%edi
00001af5	pushl	%esi
00001af6	subl	$0x1c,%esp
00001af9	calll	0x00001afe
00001afe	popl	%eax
00001aff	movl	%eax,0xec(%ebp)
00001b02	movl	0x15f7b-0x1afe(%eax),%eax
00001b08	movl	%eax,0xe8(%ebp)
00001b0b	movl	(%eax),%eax
00001b0d	movl	%eax,0xf0(%ebp)
00001b10	subl	$0x10,%esp
00001b13	movl	0x08(%ebp),%eax
00001b16	movl	%eax,(%esp)
00001b19	calll	_strlen
00001b1e	addl	$0x10,%esp
00001b21	movl	%eax,0xe4(%ebp)
00001b24	leal	0x00000013(,%eax,4),%ecx
00001b2b	andl	$0xf0,%ecx
00001b2e	movl	%esp,%edi
00001b30	subl	%ecx,%edi
00001b32	movl	%edi,%esp
00001b34	leal	0x00000004(,%eax,4),%esi
00001b3b	testl	%esi,%esi
00001b3d	jle	0x00001b45
00001b3f	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001b45	xorl	%eax,%eax
00001b47	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ebp)
00001b4b	je	0x00001b78
00001b4d	subl	$0x10,%esp
00001b50	movl	%esi,%ebx
00001b52	shrl	$0x02,%ebx
00001b55	movl	%ebx,0x08(%esp)
00001b59	movl	0x08(%ebp),%eax
00001b5c	movl	%eax,0x04(%esp)
00001b60	movl	%edi,(%esp)
00001b63	calll	_mbstowcs
00001b68	addl	$0x10,%esp
00001b6b	incl	%eax
00001b6c	testl	%esi,%esi
00001b6e	jle	0x00001b78
00001b70	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%ebx,4)
00001b78	leal	0xf8(%edi,%eax,4),%esi
00001b7c	xorb	%bl,%bl
00001b7e	jmp	0x00001b96
00001b80	cmpl	$0x0000fffc,%eax
00001b85	jne	0x00001c65
00001b8b	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001b91	addl	$0xfc,%esi
00001b94	movb	$0x01,%bl
00001b96	cmpl	%edi,%esi
00001b98	jb	0x00001c65
00001b9e	movl	(%esi),%eax
00001ba0	cmpl	$0x7f,%eax
00001ba3	ja	0x00001bbb
00001ba5	movl	0xec(%ebp),%ecx
00001ba8	movl	0x15f77-0x1afe(%ecx),%ecx
00001bae	movl	0x34(%ecx,%eax,4),%eax
00001bb2	movl	$0x00004000,%ecx
00001bb7	andl	%ecx,%eax
00001bb9	jmp	0x00001bd1
00001bbb	subl	$0x10,%esp
00001bbe	movl	%eax,(%esp)
00001bc1	movl	$0x00004000,0x04(%esp)
00001bc9	calll	___maskrune
00001bce	addl	$0x10,%esp
00001bd1	testl	%eax,%eax
00001bd3	jne	0x00001b8b
00001bd5	movl	(%esi),%eax
00001bd7	cmpl	$0x0000fffb,%eax
00001bdc	jg	0x00001b80
00001bde	cmpl	$0x0000fefe,%eax
00001be3	jg	0x00001c3d
00001be5	cmpl	$0x0000205f,%eax
00001bea	jg	0x00001c4a
00001bec	cmpl	$0x00001fff,%eax
00001bf1	jg	0x00001c12
00001bf3	leal	0xffffff7e(%eax),%ecx
00001bf9	cmpl	$0x02,%ecx
00001bfc	jb	0x00001b8b
00001bfe	cmpl	$0x000000a0,%eax
00001c03	je	0x00001b8b
00001c05	cmpl	$0x0000034f,%eax
00001c0a	je	0x00001b8b
00001c10	jmp	0x00001c65
00001c12	leal	0xffffe000(%eax),%ecx
00001c18	cmpl	$0x0e,%ecx
00001c1b	jb	0x00001b8b
00001c21	leal	0xffffdfd8(%eax),%ecx
00001c27	cmpl	$0x02,%ecx
00001c2a	jb	0x00001b8b
00001c30	cmpl	$0x0000202f,%eax
00001c35	je	0x00001b8b
00001c3b	jmp	0x00001c65
00001c3d	cmpl	$0x0000feff,%eax
00001c42	je	0x00001b8b
00001c48	jmp	0x00001c65
00001c4a	cmpl	$0x00002060,%eax
00001c4f	je	0x00001b8b
00001c55	jmp	0x00001c65
00001c57	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001c60	addl	$0x04,%edi
00001c63	movb	$0x01,%bl
00001c65	cmpl	%esi,%edi
00001c67	jae	0x00001c9e
00001c69	movl	(%edi),%ecx
00001c6b	cmpl	$0x7f,%ecx
00001c6e	ja	0x00001c84
00001c70	movl	0xec(%ebp),%eax
00001c73	movl	0x15f77-0x1afe(%eax),%edx
00001c79	movl	$0x00004000,%eax
00001c7e	andl	0x34(%edx,%ecx,4),%eax
00001c82	jmp	0x00001c9a
00001c84	subl	$0x10,%esp
00001c87	movl	%ecx,(%esp)
00001c8a	movl	$0x00004000,0x04(%esp)
00001c92	calll	___maskrune
00001c97	addl	$0x10,%esp
00001c9a	testl	%eax,%eax
00001c9c	jne	0x00001c60
00001c9e	andb	$0x01,%bl
00001ca1	movl	0x08(%ebp),%esi
00001ca4	movl	0xe4(%ebp),%eax
00001ca7	je	0x00001cdb
00001ca9	testl	%eax,%eax
00001cab	jle	0x00001cb0
00001cad	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00001cb0	testl	%edi,%edi
00001cb2	je	0x00001cd2
00001cb4	testl	%esi,%esi
00001cb6	je	0x00001cd2
00001cb8	subl	$0x10,%esp
00001cbb	movl	%eax,0x08(%esp)
00001cbf	movl	%edi,0x04(%esp)
00001cc3	movl	%esi,(%esp)
00001cc6	movl	%eax,%edi
00001cc8	calll	_wcstombs
00001ccd	movl	%edi,%eax
00001ccf	addl	$0x10,%esp
00001cd2	testl	%eax,%eax
00001cd4	jle	0x00001cdb
00001cd6	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%esi)
00001cdb	testb	%bl,%bl
00001cdd	setne	%al
00001ce0	movl	0xe8(%ebp),%ecx
00001ce3	movl	(%ecx),%ecx
00001ce5	cmpl	0xf0(%ebp),%ecx
00001ce8	jne	0x00001cf5
00001cea	movzbl	%al,%eax
00001ced	leal	0xf4(%ebp),%esp
00001cf0	popl	%esi
00001cf1	popl	%edi
00001cf2	popl	%ebx
00001cf3	popl	%ebp
00001cf4	ret
00001cf5	calll	___stack_chk_fail
00001cfa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UCS2ToUnicode(unsigned short const*, wchar_t*, int):
00001d00	pushl	%ebp
00001d01	movl	%esp,%ebp
00001d03	pushl	%ebx
00001d04	pushl	%edi
00001d05	pushl	%esi
00001d06	subl	$0x2c,%esp
00001d09	calll	0x00001d0e
00001d0e	popl	%eax
00001d0f	movl	0x0c(%ebp),%edi
00001d12	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001d18	leal	0x1361c-0x1d0e(%eax),%ecx
00001d1e	movl	%ecx,0x04(%esp)
00001d22	leal	0x13614-0x1d0e(%eax),%eax
00001d28	movl	%eax,(%esp)
00001d2b	calll	_iconv_open
00001d30	movl	%eax,%esi
00001d32	movl	0x10(%ebp),%ebx
00001d35	movl	%ebx,0xf0(%ebp)
00001d38	movl	%ebx,0xec(%ebp)
00001d3b	movl	0x08(%ebp),%eax
00001d3e	movl	%eax,0xe8(%ebp)
00001d41	movl	%edi,0xe4(%ebp)
00001d44	movl	$0xffffffff,%eax
00001d49	testl	%esi,%esi
00001d4b	je	0x00001d84
00001d4d	leal	0xec(%ebp),%eax
00001d50	movl	%eax,0x10(%esp)
00001d54	leal	0xe4(%ebp),%eax
00001d57	movl	%eax,0x0c(%esp)
00001d5b	leal	0xf0(%ebp),%eax
00001d5e	movl	%eax,0x08(%esp)
00001d62	leal	0xe8(%ebp),%eax
00001d65	movl	%eax,0x04(%esp)
00001d69	movl	%esi,(%esp)
00001d6c	calll	_iconv
00001d71	movl	%eax,%edi
00001d73	movl	%esi,(%esp)
00001d76	calll	_iconv_close
00001d7b	xorl	%eax,%eax
00001d7d	testl	%edi,%edi
00001d7f	js	0x00001d84
00001d81	movl	0xec(%ebp),%eax
00001d84	andl	$0xfc,%ebx
00001d87	movl	0x0c(%ebp),%ecx
00001d8a	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%ecx)
00001d92	addl	$0x2c,%esp
00001d95	popl	%esi
00001d96	popl	%edi
00001d97	popl	%ebx
00001d98	popl	%ebp
00001d99	ret
00001d9a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UnicodeToUCS2(wchar_t const*, int, char*, int):
00001da0	pushl	%ebp
00001da1	movl	%esp,%ebp
00001da3	pushl	%edi
00001da4	pushl	%esi
00001da5	subl	_V_memcpy(char const*, int, void*, void const*, int),%esp
00001da8	calll	0x00001dad
00001dad	popl	%eax
00001dae	leal	0x13624-0x1dad(%eax),%ecx
00001db4	movl	%ecx,0x04(%esp)
00001db8	leal	0x1361c-0x1dad(%eax),%eax
00001dbe	movl	%eax,(%esp)
00001dc1	calll	_iconv_open
00001dc6	movl	%eax,%esi
00001dc8	movl	0x0c(%ebp),%edi
00001dcb	movl	%edi,0xf4(%ebp)
00001dce	movl	0x14(%ebp),%eax
00001dd1	movl	%eax,0xf0(%ebp)
00001dd4	movl	0x08(%ebp),%eax
00001dd7	movl	%eax,0xec(%ebp)
00001dda	movl	0x10(%ebp),%eax
00001ddd	movl	%eax,0xe8(%ebp)
00001de0	testl	%esi,%esi
00001de2	je	0x00001e21
00001de4	leal	0xf0(%ebp),%eax
00001de7	movl	%eax,0x10(%esp)
00001deb	leal	0xe8(%ebp),%eax
00001dee	movl	%eax,0x0c(%esp)
00001df2	leal	0xf4(%ebp),%eax
00001df5	movl	%eax,0x08(%esp)
00001df9	leal	0xec(%ebp),%eax
00001dfc	movl	%eax,0x04(%esp)
00001e00	movl	%esi,(%esp)
00001e03	calll	_iconv
00001e08	movl	%esi,(%esp)
00001e0b	shrl	$0x02,%edi
00001e0e	testl	%eax,%eax
00001e10	movl	_V_memset(char const*, int, void*, int, int),%esi
00001e15	cmovnsl	%edi,%esi
00001e18	calll	_iconv_close
00001e1d	movl	%esi,%eax
00001e1f	jmp	0x00001e26
00001e21	movl	$0xffffffff,%eax
00001e26	addl	_V_memcpy(char const*, int, void*, void const*, int),%esp
00001e29	popl	%esi
00001e2a	popl	%edi
00001e2b	popl	%ebp
00001e2c	ret
00001e2d	nopl	(%eax)
V_UCS2ToUTF8(unsigned short const*, char*, int):
00001e30	pushl	%ebp
00001e31	movl	%esp,%ebp
00001e33	pushl	%ebx
00001e34	pushl	%edi
00001e35	pushl	%esi
00001e36	subl	$0x2c,%esp
00001e39	calll	0x00001e3e
00001e3e	popl	%eax
00001e3f	movl	0x0c(%ebp),%ebx
00001e42	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
00001e45	leal	0x1361c-0x1e3e(%eax),%ecx
00001e4b	movl	%ecx,0x04(%esp)
00001e4f	leal	0x1362d-0x1e3e(%eax),%eax
00001e55	movl	%eax,(%esp)
00001e58	calll	_iconv_open
00001e5d	movl	%eax,%esi
00001e5f	movl	0x10(%ebp),%eax
00001e62	movl	%eax,0xf0(%ebp)
00001e65	movl	%eax,0xec(%ebp)
00001e68	movl	0x08(%ebp),%eax
00001e6b	movl	%eax,0xe8(%ebp)
00001e6e	movl	%ebx,0xe4(%ebp)
00001e71	movl	$0xffffffff,%eax
00001e76	testl	%esi,%esi
00001e78	je	0x00001eb1
00001e7a	leal	0xec(%ebp),%eax
00001e7d	movl	%eax,0x10(%esp)
00001e81	leal	0xe4(%ebp),%eax
00001e84	movl	%eax,0x0c(%esp)
00001e88	leal	0xf0(%ebp),%eax
00001e8b	movl	%eax,0x08(%esp)
00001e8f	leal	0xe8(%ebp),%eax
00001e92	movl	%eax,0x04(%esp)
00001e96	movl	%esi,(%esp)
00001e99	calll	_iconv
00001e9e	movl	%eax,%edi
00001ea0	movl	%esi,(%esp)
00001ea3	calll	_iconv_close
00001ea8	xorl	%eax,%eax
00001eaa	testl	%edi,%edi
00001eac	js	0x00001eb1
00001eae	movl	0xec(%ebp),%eax
00001eb1	movl	0x10(%ebp),%ecx
00001eb4	movb	_V_memset(char const*, int, void*, int, int),0xff(%ecx,%ebx)
00001eb9	addl	$0x2c,%esp
00001ebc	popl	%esi
00001ebd	popl	%edi
00001ebe	popl	%ebx
00001ebf	popl	%ebp
00001ec0	ret
00001ec1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UTF8ToUCS2(char const*, int, unsigned short*, int):
00001ed0	pushl	%ebp
00001ed1	movl	%esp,%ebp
00001ed3	pushl	%ebx
00001ed4	pushl	%edi
00001ed5	pushl	%esi
00001ed6	subl	$0x2c,%esp
00001ed9	calll	0x00001ede
00001ede	popl	%eax
00001edf	movl	0x10(%ebp),%ecx
00001ee2	movw	_V_memset(char const*, int, void*, int, int),(%ecx)
00001ee7	leal	0x1362d-0x1ede(%eax),%ecx
00001eed	movl	%ecx,0x04(%esp)
00001ef1	leal	0x1361c-0x1ede(%eax),%eax
00001ef7	movl	%eax,(%esp)
00001efa	calll	_iconv_open
00001eff	movl	%eax,%esi
00001f01	movl	0x0c(%ebp),%edi
00001f04	movl	%edi,0xf0(%ebp)
00001f07	movl	0x14(%ebp),%ebx
00001f0a	movl	%ebx,0xec(%ebp)
00001f0d	movl	0x08(%ebp),%eax
00001f10	movl	%eax,0xe8(%ebp)
00001f13	movl	0x10(%ebp),%eax
00001f16	movl	%eax,0xe4(%ebp)
00001f19	movl	$0xffffffff,%eax
00001f1e	testl	%esi,%esi
00001f20	je	0x00001f57
00001f22	leal	0xec(%ebp),%eax
00001f25	movl	%eax,0x10(%esp)
00001f29	leal	0xe4(%ebp),%eax
00001f2c	movl	%eax,0x0c(%esp)
00001f30	leal	0xf0(%ebp),%eax
00001f33	movl	%eax,0x08(%esp)
00001f37	leal	0xe8(%ebp),%eax
00001f3a	movl	%eax,0x04(%esp)
00001f3e	movl	%esi,(%esp)
00001f41	calll	_iconv
00001f46	movl	%esi,(%esp)
00001f49	xorl	%ecx,%ecx
00001f4b	testl	%eax,%eax
00001f4d	cmovsl	%ecx,%edi
00001f50	calll	_iconv_close
00001f55	movl	%edi,%eax
00001f57	andl	$0xfe,%ebx
00001f5a	movl	0x10(%ebp),%ecx
00001f5d	movw	_V_memset(char const*, int, void*, int, int),0xfe(%ebx,%ecx)
00001f64	addl	$0x2c,%esp
00001f67	popl	%esi
00001f68	popl	%edi
00001f69	popl	%ebx
00001f6a	popl	%ebp
00001f6b	ret
00001f6c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_nibble(char):
00001f70	movb	0x04(%esp),%al
00001f74	movb	%al,%cl
00001f76	addb	$0xd0,%cl
00001f79	cmpb	$0x0a,%cl
00001f7c	jb	0x00001f9d
00001f7e	movb	%al,%cl
00001f80	addb	$0xbf,%cl
00001f83	cmpb	$0x05,%cl
00001f86	ja	0x00001f90
00001f88	addb	$0xc9,%al
00001f8a	movb	%al,%cl
00001f8c	movzbl	%cl,%eax
00001f8f	ret
00001f90	movb	%al,%cl
00001f92	addb	$0xa9,%cl
00001f95	addb	$0x9f,%al
00001f97	cmpb	$0x06,%al
00001f99	jb	0x00001f9d
00001f9b	movb	_V_memcpy(char const*, int, void*, void const*, int),%cl
00001f9d	movzbl	%cl,%eax
00001fa0	ret
00001fa1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_hextobinary(char const*, int, unsigned char*, int):
00001fb0	pushl	%ebp
00001fb1	movl	%esp,%ebp
00001fb3	pushl	%ebx
00001fb4	pushl	%edi
00001fb5	pushl	%esi
00001fb6	subl	$0x0c,%esp
00001fb9	movl	0x08(%ebp),%edi
00001fbc	movl	%edi,(%esp)
00001fbf	calll	_strlen
00001fc4	movl	0x14(%ebp),%ecx
00001fc7	movl	%ecx,0x08(%esp)
00001fcb	movl	0x10(%ebp),%ebx
00001fce	movl	%ebx,(%esp)
00001fd1	movl	_V_memset(char const*, int, void*, int, int),0x04(%esp)
00001fd9	movl	0x0c(%ebp),%esi
00001fdc	cmpl	%esi,%eax
00001fde	cmovll	%eax,%esi
00001fe1	andl	$0xfe,%esi
00001fe4	calll	_memset
00001fe9	xorl	%eax,%eax
00001feb	movl	%ebx,%ecx
00001fed	jmp	0x0000200a
00001fef	nop
00001ff0	movb	%dh,%bl
00001ff2	addb	$0xa9,%bl
00001ff5	addb	$0x9f,%dh
00001ff8	cmpb	$0x06,%dh
00001ffb	jb	0x00001fff
00001ffd	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
00001fff	shlb	$0x04,%dl
00002002	orb	%bl,%dl
00002004	movb	%dl,(%ecx)
00002006	addl	$0x02,%eax
00002009	incl	%ecx
0000200a	cmpl	%esi,%eax
0000200c	jge	0x00002064
0000200e	movl	%ecx,%edx
00002010	subl	0x10(%ebp),%edx
00002013	cmpl	0x14(%ebp),%edx
00002016	jge	0x00002064
00002018	movb	(%edi,%eax),%dh
0000201b	movb	%dh,%dl
0000201d	addb	$0xd0,%dl
00002020	cmpb	$0x0a,%dl
00002023	jb	0x00002045
00002025	movb	%dh,%dl
00002027	addb	$0xbf,%dl
0000202a	cmpb	$0x05,%dl
0000202d	ja	0x00002036
0000202f	addb	$0xc9,%dh
00002032	movb	%dh,%dl
00002034	jmp	0x00002045
00002036	movb	%dh,%dl
00002038	addb	$0xa9,%dl
0000203b	addb	$0x9f,%dh
0000203e	cmpb	$0x06,%dh
00002041	jb	0x00002045
00002043	movb	_V_memcpy(char const*, int, void*, void const*, int),%dl
00002045	movb	0x01(%edi,%eax),%dh
00002049	movb	%dh,%bl
0000204b	addb	$0xd0,%bl
0000204e	cmpb	$0x0a,%bl
00002051	jb	0x00001fff
00002053	movb	%dh,%bl
00002055	addb	$0xbf,%bl
00002058	cmpb	$0x05,%bl
0000205b	ja	0x00001ff0
0000205d	addb	$0xc9,%dh
00002060	movb	%dh,%bl
00002062	jmp	0x00001fff
00002064	addl	$0x0c,%esp
00002067	popl	%esi
00002068	popl	%edi
00002069	popl	%ebx
0000206a	popl	%ebp
0000206b	ret
0000206c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_binarytohex(unsigned char const*, int, char*, int):
00002070	pushl	%ebp
00002071	movl	%esp,%ebp
00002073	pushl	%ebx
00002074	pushl	%edi
00002075	pushl	%esi
00002076	subl	$0x3c,%esp
00002079	calll	0x0000207e
0000207e	popl	%eax
0000207f	movl	0x15f7b-0x207e(%eax),%ecx
00002085	movl	%ecx,0xd4(%ebp)
00002088	movl	(%ecx),%ecx
0000208a	movl	%ecx,0xf0(%ebp)
0000208d	movl	0x10(%ebp),%esi
00002090	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00002093	movl	0x0c(%ebp),%ecx
00002096	testl	%ecx,%ecx
00002098	jle	0x00002124
0000209e	movl	0x14(%ebp),%edx
000020a1	movl	0x08(%ebp),%ebx
000020a4	leal	0xff(%edx),%edx
000020a7	movl	%edx,0xdc(%ebp)
000020aa	leal	0x13633-0x207e(%eax),%eax
000020b0	movl	%eax,0xd8(%ebp)
000020b3	leal	0xe6(%ebp),%edi
000020b6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000020c0	movl	%ecx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000020c3	movzbl	(%ebx),%eax
000020c6	movl	%eax,0x0c(%esp)
000020ca	movl	0xd8(%ebp),%eax
000020cd	movl	%eax,0x08(%esp)
000020d1	movl	%edi,(%esp)
000020d4	movl	$0x0000000a,0x04(%esp)
000020dc	calll	V_snprintf(char*, int, char const*, ...)
000020e1	movl	%esi,(%esp)
000020e4	calll	_strlen
000020e9	movl	%eax,%esi
000020eb	movl	%edi,(%esp)
000020ee	movl	0xdc(%ebp),%edi
000020f1	subl	%esi,%edi
000020f3	calll	_strlen
000020f8	addl	%eax,%esi
000020fa	cmpl	0x14(%ebp),%esi
000020fd	movl	0x10(%ebp),%esi
00002100	cmovbl	%eax,%edi
00002103	testl	%edi,%edi
00002105	jle	0x0000211a
00002107	movl	%edi,0x08(%esp)
0000210b	leal	0xe6(%ebp),%eax
0000210e	movl	%eax,0x04(%esp)
00002112	movl	%esi,(%esp)
00002115	calll	_strncat
0000211a	incl	%ebx
0000211b	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
0000211e	decl	%ecx
0000211f	leal	0xe6(%ebp),%edi
00002122	jne	0x000020c0
00002124	movl	0xd4(%ebp),%eax
00002127	movl	(%eax),%eax
00002129	cmpl	0xf0(%ebp),%eax
0000212c	jne	0x00002136
0000212e	addl	$0x3c,%esp
00002131	popl	%esi
00002132	popl	%edi
00002133	popl	%ebx
00002134	popl	%ebp
00002135	ret
00002136	calll	___stack_chk_fail
0000213b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
PATHSEPARATOR(char):
00002140	movb	0x04(%esp),%cl
00002144	cmpb	$0x2f,%cl
00002147	sete	%al
0000214a	cmpb	$0x5c,%cl
0000214d	sete	%cl
00002150	orb	%al,%cl
00002152	movzbl	%cl,%eax
00002155	ret
00002156	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FileBase(char const*, char*, int):
00002160	pushl	%ebp
00002161	movl	%esp,%ebp
00002163	pushl	%ebx
00002164	pushl	%edi
00002165	pushl	%esi
00002166	subl	$0x1c,%esp
00002169	movl	0x0c(%ebp),%esi
0000216c	movl	0x08(%ebp),%edi
0000216f	testl	%edi,%edi
00002171	je	0x0000217c
00002173	movb	(%edi),%al
00002175	movb	%al,0xf3(%ebp)
00002178	testb	%al,%al
0000217a	jne	0x00002184
0000217c	movb	_V_memset(char const*, int, void*, int, int),(%esi)
0000217f	jmp	0x00002225
00002184	movl	%edi,(%esp)
00002187	calll	_strlen
0000218c	leal	0xff(%eax),%ebx
0000218f	movl	%ebx,%ecx
00002191	jmp	0x000021b3
00002193	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000021a0	movb	(%edi,%ecx),%dl
000021a3	movb	%dl,%dh
000021a5	addb	$0xd2,%dh
000021a8	cmpb	$0x02,%dh
000021ab	jb	0x000021ba
000021ad	cmpb	$0x5c,%dl
000021b0	je	0x000021ba
000021b2	decl	%ecx
000021b3	testl	%ecx,%ecx
000021b5	jne	0x000021a0
000021b7	movb	0xf3(%ebp),%dl
000021ba	decl	%ecx
000021bb	cmpb	$0x2e,%dl
000021be	cmovel	%ecx,%ebx
000021c1	jmp	0x000021d2
000021c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000021d0	movl	%edx,%eax
000021d2	xorl	%ecx,%ecx
000021d4	movl	%eax,%edx
000021d6	decl	%edx
000021d7	js	0x000021fd
000021d9	movb	0xff(%edi,%eax),%cl
000021dd	cmpb	$0x2f,%cl
000021e0	je	0x000021e7
000021e2	cmpb	$0x5c,%cl
000021e5	jne	0x000021d0
000021e7	cmpb	$0x2f,%cl
000021ea	sete	%dl
000021ed	cmpb	$0x5c,%cl
000021f0	sete	%cl
000021f3	orb	%dl,%cl
000021f5	movl	_V_memset(char const*, int, void*, int, int),%ecx
000021fa	cmovnel	%eax,%ecx
000021fd	addl	%ecx,%edi
000021ff	movl	%edi,0x04(%esp)
00002203	movl	%esi,(%esp)
00002206	subl	%ecx,%ebx
00002208	addl	$0x02,%ebx
0000220b	movl	0x10(%ebp),%eax
0000220e	cmpl	%eax,%ebx
00002210	cmovgel	%eax,%ebx
00002213	movl	%ebx,0x08(%esp)
00002217	calll	_strncpy
0000221c	testl	%ebx,%ebx
0000221e	jle	0x00002225
00002220	movb	_V_memset(char const*, int, void*, int, int),0xff(%ebx,%esi)
00002225	addl	$0x1c,%esp
00002228	popl	%esi
00002229	popl	%edi
0000222a	popl	%ebx
0000222b	popl	%ebp
0000222c	ret
0000222d	nopl	(%eax)
V_StripTrailingSlash(char*):
00002230	pushl	%ebp
00002231	movl	%esp,%ebp
00002233	pushl	%esi
00002234	pushl	%eax
00002235	movl	0x08(%ebp),%esi
00002238	movl	%esi,(%esp)
0000223b	calll	_strlen
00002240	testl	%eax,%eax
00002242	jle	0x00002257
00002244	movb	0xff(%eax,%esi),%cl
00002248	cmpb	$0x2f,%cl
0000224b	je	0x00002252
0000224d	cmpb	$0x5c,%cl
00002250	jne	0x00002257
00002252	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00002257	addl	$0x04,%esp
0000225a	popl	%esi
0000225b	popl	%ebp
0000225c	ret
0000225d	nopl	(%eax)
V_StripExtension(char const*, char*, int):
00002260	pushl	%ebp
00002261	movl	%esp,%ebp
00002263	pushl	%ebx
00002264	pushl	%edi
00002265	pushl	%esi
00002266	subl	$0x0c,%esp
00002269	movl	0x08(%ebp),%ebx
0000226c	movl	%ebx,(%esp)
0000226f	calll	_strlen
00002274	decl	%eax
00002275	movl	0x10(%ebp),%esi
00002278	movl	0x0c(%ebp),%edi
0000227b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002280	testl	%eax,%eax
00002282	jle	0x000022c6
00002284	movb	(%ebx,%eax),%cl
00002287	movb	%cl,%dl
00002289	addb	$0xd2,%dl
0000228c	decl	%eax
0000228d	cmpb	$0x02,%dl
00002290	jb	0x00002297
00002292	cmpb	$0x5c,%cl
00002295	jne	0x00002280
00002297	incl	%eax
00002298	cmpl	%esi,%eax
0000229a	jge	0x000022c6
0000229c	cmpb	$0x2f,%cl
0000229f	je	0x000022c6
000022a1	cmpb	$0x5c,%cl
000022a4	je	0x000022c6
000022a6	decl	%esi
000022a7	cmpl	%esi,%eax
000022a9	cmovll	%eax,%esi
000022ac	cmpl	%ebx,%edi
000022ae	je	0x000022c0
000022b0	movl	%esi,0x08(%esp)
000022b4	movl	%ebx,0x04(%esp)
000022b8	movl	%edi,(%esp)
000022bb	calll	_memcpy
000022c0	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000022c4	jmp	0x000022e3
000022c6	cmpl	%ebx,%edi
000022c8	je	0x000022e3
000022ca	movl	%esi,0x08(%esp)
000022ce	movl	%ebx,0x04(%esp)
000022d2	movl	%edi,(%esp)
000022d5	calll	_strncpy
000022da	testl	%esi,%esi
000022dc	jle	0x000022e3
000022de	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
000022e3	addl	$0x0c,%esp
000022e6	popl	%esi
000022e7	popl	%edi
000022e8	popl	%ebx
000022e9	popl	%ebp
000022ea	ret
000022eb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_DefaultExtension(char*, char const*, int):
000022f0	pushl	%ebp
000022f1	movl	%esp,%ebp
000022f3	pushl	%ebx
000022f4	pushl	%edi
000022f5	pushl	%esi
000022f6	subl	$0x0c,%esp
000022f9	movl	0x08(%ebp),%edi
000022fc	movl	%edi,(%esp)
000022ff	calll	_strlen
00002304	leal	0xff(%eax,%edi),%eax
00002308	movl	0x10(%ebp),%ebx
0000230b	jmp	0x00002311
0000230d	nopl	(%eax)
00002310	decl	%eax
00002311	cmpl	%edi,%eax
00002313	jbe	0x00002326
00002315	movb	(%eax),%cl
00002317	cmpb	$0x2e,%cl
0000231a	je	0x0000235e
0000231c	cmpb	$0x2f,%cl
0000231f	je	0x00002326
00002321	cmpb	$0x5c,%cl
00002324	jne	0x00002310
00002326	movl	%edi,(%esp)
00002329	calll	_strlen
0000232e	movl	%eax,%esi
00002330	movl	0x0c(%ebp),%eax
00002333	movl	%eax,(%esp)
00002336	calll	_strlen
0000233b	leal	(%eax,%esi),%ecx
0000233e	cmpl	%ebx,%ecx
00002340	jb	0x00002347
00002342	decl	%ebx
00002343	subl	%esi,%ebx
00002345	movl	%ebx,%eax
00002347	testl	%eax,%eax
00002349	jle	0x0000235e
0000234b	movl	%eax,0x08(%esp)
0000234f	movl	0x0c(%ebp),%eax
00002352	movl	%eax,0x04(%esp)
00002356	movl	%edi,(%esp)
00002359	calll	_strncat
0000235e	addl	$0x0c,%esp
00002361	popl	%esi
00002362	popl	%edi
00002363	popl	%ebx
00002364	popl	%ebp
00002365	ret
00002366	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SetExtension(char*, char const*, int):
00002370	pushl	%ebp
00002371	movl	%esp,%ebp
00002373	pushl	%ebx
00002374	pushl	%edi
00002375	pushl	%esi
00002376	subl	$0x0c,%esp
00002379	movl	0x08(%ebp),%edi
0000237c	movl	%edi,(%esp)
0000237f	calll	_strlen
00002384	decl	%eax
00002385	movl	0x10(%ebp),%ebx
00002388	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002390	testl	%eax,%eax
00002392	jle	0x000023c2
00002394	movb	(%edi,%eax),%cl
00002397	movb	%cl,%dl
00002399	addb	$0xd2,%dl
0000239c	decl	%eax
0000239d	cmpb	$0x02,%dl
000023a0	jb	0x000023a7
000023a2	cmpb	$0x5c,%cl
000023a5	jne	0x00002390
000023a7	incl	%eax
000023a8	cmpl	%ebx,%eax
000023aa	jge	0x000023c2
000023ac	cmpb	$0x2f,%cl
000023af	je	0x000023c2
000023b1	cmpb	$0x5c,%cl
000023b4	je	0x000023c2
000023b6	leal	0xff(%ebx),%ecx
000023b9	cmpl	%ecx,%eax
000023bb	cmovll	%eax,%ecx
000023be	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
000023c2	movl	%edi,(%esp)
000023c5	calll	_strlen
000023ca	leal	0xff(%eax,%edi),%eax
000023ce	jmp	0x000023d1
000023d0	decl	%eax
000023d1	cmpl	%edi,%eax
000023d3	jbe	0x000023e6
000023d5	movb	(%eax),%cl
000023d7	cmpb	$0x2e,%cl
000023da	je	0x0000241e
000023dc	cmpb	$0x2f,%cl
000023df	je	0x000023e6
000023e1	cmpb	$0x5c,%cl
000023e4	jne	0x000023d0
000023e6	movl	%edi,(%esp)
000023e9	calll	_strlen
000023ee	movl	%eax,%esi
000023f0	movl	0x0c(%ebp),%eax
000023f3	movl	%eax,(%esp)
000023f6	calll	_strlen
000023fb	leal	(%eax,%esi),%ecx
000023fe	cmpl	%ebx,%ecx
00002400	jb	0x00002407
00002402	decl	%ebx
00002403	subl	%esi,%ebx
00002405	movl	%ebx,%eax
00002407	testl	%eax,%eax
00002409	jle	0x0000241e
0000240b	movl	%eax,0x08(%esp)
0000240f	movl	0x0c(%ebp),%eax
00002412	movl	%eax,0x04(%esp)
00002416	movl	%edi,(%esp)
00002419	calll	_strncat
0000241e	addl	$0x0c,%esp
00002421	popl	%esi
00002422	popl	%edi
00002423	popl	%ebx
00002424	popl	%ebp
00002425	ret
00002426	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StripFilename(char*):
00002430	pushl	%ebp
00002431	movl	%esp,%ebp
00002433	pushl	%esi
00002434	pushl	%eax
00002435	movl	0x08(%ebp),%esi
00002438	movl	%esi,(%esp)
0000243b	calll	_strlen
00002440	decl	%eax
00002441	testl	%eax,%eax
00002443	jle	0x00002466
00002445	jmp	0x00002451
00002447	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002450	decl	%eax
00002451	testl	%eax,%eax
00002453	jle	0x00002462
00002455	movb	(%esi,%eax),%cl
00002458	cmpb	$0x2f,%cl
0000245b	je	0x00002462
0000245d	cmpb	$0x5c,%cl
00002460	jne	0x00002450
00002462	movb	_V_memset(char const*, int, void*, int, int),(%esi,%eax)
00002466	addl	$0x04,%esp
00002469	popl	%esi
0000246a	popl	%ebp
0000246b	ret
0000246c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_FixSlashes(char*, char):
00002470	movb	0x08(%esp),%al
00002474	movl	0x04(%esp),%ecx
00002478	jmp	0x0000248d
0000247a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002480	cmpb	$0x2f,%dl
00002483	je	0x0000248a
00002485	cmpb	$0x5c,%dl
00002488	jne	0x0000248c
0000248a	movb	%al,(%ecx)
0000248c	incl	%ecx
0000248d	movb	(%ecx),%dl
0000248f	testb	%dl,%dl
00002491	jne	0x00002480
00002493	ret
00002494	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FixDoubleSlashes(char*):
000024a0	pushl	%ebp
000024a1	movl	%esp,%ebp
000024a3	pushl	%ebx
000024a4	pushl	%edi
000024a5	pushl	%esi
000024a6	subl	$0x1c,%esp
000024a9	movl	0x08(%ebp),%esi
000024ac	movl	%esi,(%esp)
000024af	calll	_strlen
000024b4	leal	0xff(%eax),%edi
000024b7	cmpl	$0x02,%edi
000024ba	jl	0x0000251f
000024bc	movl	$0x00000001,%ecx
000024c1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000024d0	movb	(%esi,%ecx),%dl
000024d3	cmpb	$0x2f,%dl
000024d6	je	0x000024e0
000024d8	cmpb	$0x5c,%dl
000024db	je	0x000024e0
000024dd	incl	%ecx
000024de	jmp	0x00002518
000024e0	movb	0x01(%esi,%ecx),%dl
000024e4	leal	0x01(%ecx),%ebx
000024e7	cmpb	$0x2f,%dl
000024ea	je	0x000024f5
000024ec	cmpb	$0x5c,%dl
000024ef	je	0x000024f5
000024f1	movl	%ebx,%ecx
000024f3	jmp	0x00002518
000024f5	leal	(%esi,%ecx),%edx
000024f8	movl	%edx,0xf0(%ebp)
000024fb	leal	0x01(%esi,%ecx),%edx
000024ff	subl	%ecx,%eax
00002501	movl	%eax,0x08(%esp)
00002505	movl	%edx,0x04(%esp)
00002509	movl	0xf0(%ebp),%eax
0000250c	movl	%eax,(%esp)
0000250f	calll	_memmove
00002514	movl	%ebx,%ecx
00002516	movl	%edi,%eax
00002518	leal	0xff(%eax),%edi
0000251b	cmpl	%edi,%ecx
0000251d	jl	0x000024d0
0000251f	addl	$0x1c,%esp
00002522	popl	%esi
00002523	popl	%edi
00002524	popl	%ebx
00002525	popl	%ebp
00002526	ret
00002527	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StripLastDir(char*, int):
00002530	pushl	%ebp
00002531	movl	%esp,%ebp
00002533	pushl	%ebx
00002534	pushl	%edi
00002535	pushl	%esi
00002536	subl	$0x1c,%esp
00002539	calll	0x0000253e
0000253e	popl	%edi
0000253f	movl	0x08(%ebp),%esi
00002542	movb	(%esi),%cl
00002544	xorb	%dl,%dl
00002546	testb	%cl,%cl
00002548	je	0x000026bd
0000254e	leal	0x13638-0x253e(%edi),%eax
00002554	cmpl	%eax,%esi
00002556	je	0x000026bd
0000255c	leal	0x13638-0x253e(%edi),%eax
00002562	movb	%cl,%dl
00002564	movb	%cl,0xf3(%ebp)
00002567	movl	%esi,%ecx
00002569	jmp	0x00002575
0000256b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002570	movb	0x01(%ecx),%dl
00002573	incl	%eax
00002574	incl	%ecx
00002575	movb	(%eax),%bl
00002577	testb	%dl,%dl
00002579	je	0x000025bd
0000257b	cmpb	%bl,%dl
0000257d	je	0x00002570
0000257f	movb	%dl,%bh
00002581	orb	$0x20,%bh
00002584	movb	%bl,%dh
00002586	orb	$0x20,%dh
00002589	cmpb	%dh,%bh
0000258b	jne	0x00002595
0000258d	addb	$0x9f,%bh
00002590	cmpb	$0x1a,%bh
00002593	jb	0x00002570
00002595	orb	%dl,%bl
00002597	jns	0x000025a7
00002599	movl	%eax,0x04(%esp)
0000259d	movl	%ecx,(%esp)
000025a0	calll	_strcasecmp
000025a5	jmp	0x000025c4
000025a7	leal	0x1363b-0x253e(%edi),%eax
000025ad	xorb	%dl,%dl
000025af	cmpl	%eax,%esi
000025b1	movl	%esi,%ecx
000025b3	movb	0xf3(%ebp),%bl
000025b6	jne	0x000025f5
000025b8	jmp	0x000026bd
000025bd	cmpb	$0x01,%bl
000025c0	sbbl	%eax,%eax
000025c2	notl	%eax
000025c4	xorb	%dl,%dl
000025c6	testl	%eax,%eax
000025c8	movb	0xf3(%ebp),%bl
000025cb	je	0x000026bd
000025d1	leal	0x1363b-0x253e(%edi),%eax
000025d7	cmpl	%eax,%esi
000025d9	je	0x000026bd
000025df	leal	0x1363b-0x253e(%edi),%eax
000025e5	movl	%esi,%ecx
000025e7	jmp	0x000025f5
000025e9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
000025f0	movb	0x01(%ecx),%bl
000025f3	incl	%eax
000025f4	incl	%ecx
000025f5	movb	(%eax),%dl
000025f7	testb	%bl,%bl
000025f9	je	0x00002627
000025fb	cmpb	%dl,%bl
000025fd	je	0x000025f0
000025ff	movb	%bl,%dh
00002601	orb	$0x20,%dh
00002604	movb	%dl,%bh
00002606	orb	$0x20,%bh
00002609	cmpb	%bh,%dh
0000260b	jne	0x00002615
0000260d	addb	$0x9f,%dh
00002610	cmpb	$0x1a,%dh
00002613	jb	0x000025f0
00002615	orb	%bl,%dl
00002617	jns	0x00002638
00002619	movl	%eax,0x04(%esp)
0000261d	movl	%ecx,(%esp)
00002620	calll	_strcasecmp
00002625	jmp	0x0000262e
00002627	cmpb	$0x01,%dl
0000262a	sbbl	%eax,%eax
0000262c	notl	%eax
0000262e	xorb	%dl,%dl
00002630	testl	%eax,%eax
00002632	je	0x000026bd
00002638	movl	%esi,(%esp)
0000263b	calll	_strlen
00002640	movb	0xff(%esi,%eax),%cl
00002644	cmpb	$0x2f,%cl
00002647	sete	%dl
0000264a	cmpb	$0x5c,%cl
0000264d	sete	%dh
00002650	leal	0xff(%eax),%ecx
00002653	orb	%dl,%dh
00002655	cmovel	%eax,%ecx
00002658	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002660	testl	%ecx,%ecx
00002662	jle	0x00002694
00002664	movb	0xff(%esi,%ecx),%al
00002668	decl	%ecx
00002669	cmpb	$0x2f,%al
0000266b	je	0x00002671
0000266d	cmpb	$0x5c,%al
0000266f	jne	0x00002660
00002671	movb	_V_memset(char const*, int, void*, int, int),0x01(%esi,%ecx)
00002676	movb	$0x01,%dl
00002678	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002680	movb	(%esi),%al
00002682	testb	%al,%al
00002684	je	0x000026bd
00002686	cmpb	$0x2f,%al
00002688	je	0x0000268e
0000268a	cmpb	$0x5c,%al
0000268c	jne	0x00002691
0000268e	movb	$0x2f,(%esi)
00002691	incl	%esi
00002692	jmp	0x00002680
00002694	movb	$0x01,%dl
00002696	testl	%ecx,%ecx
00002698	jne	0x000026bd
0000269a	leal	0x1363e-0x253e(%edi),%eax
000026a0	movl	%eax,0x08(%esp)
000026a4	movl	0x0c(%ebp),%eax
000026a7	movl	%eax,0x04(%esp)
000026ab	movl	%esi,(%esp)
000026ae	movl	$0x0000002f,0x0c(%esp)
000026b6	calll	V_snprintf(char*, int, char const*, ...)
000026bb	movb	$0x01,%dl
000026bd	movzbl	%dl,%eax
000026c0	addl	$0x1c,%esp
000026c3	popl	%esi
000026c4	popl	%edi
000026c5	popl	%ebx
000026c6	popl	%ebp
000026c7	ret
000026c8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UnqualifiedFileName(char const*):
000026d0	pushl	%ebp
000026d1	movl	%esp,%ebp
000026d3	pushl	%esi
000026d4	pushl	%eax
000026d5	movl	0x08(%ebp),%esi
000026d8	movl	%esi,(%esp)
000026db	calll	_strlen
000026e0	leal	0xff(%eax,%esi),%ecx
000026e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000026f0	movl	%ecx,%eax
000026f2	cmpl	%esi,%eax
000026f4	jbe	0x00002706
000026f6	movb	0xff(%eax),%dl
000026f9	cmpb	$0x2f,%dl
000026fc	je	0x00002706
000026fe	leal	0xff(%eax),%ecx
00002701	cmpb	$0x5c,%dl
00002704	jne	0x000026f0
00002706	addl	$0x04,%esp
00002709	popl	%esi
0000270a	popl	%ebp
0000270b	ret
0000270c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_ComposeFileName(char const*, char const*, char*, int):
00002710	pushl	%ebp
00002711	movl	%esp,%ebp
00002713	pushl	%ebx
00002714	pushl	%edi
00002715	pushl	%esi
00002716	subl	$0x1c,%esp
00002719	calll	0x0000271e
0000271e	popl	%eax
0000271f	movl	%eax,0xf0(%ebp)
00002722	movl	0x14(%ebp),%ebx
00002725	movl	%ebx,0x08(%esp)
00002729	movl	0x08(%ebp),%eax
0000272c	movl	%eax,0x04(%esp)
00002730	movl	0x10(%ebp),%edi
00002733	movl	%edi,(%esp)
00002736	calll	_strncpy
0000273b	testl	%ebx,%ebx
0000273d	movl	%edi,%eax
0000273f	jle	0x0000275e
00002741	movb	_V_memset(char const*, int, void*, int, int),0xff(%ebx,%edi)
00002746	movl	%edi,%eax
00002748	jmp	0x0000275e
0000274a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002750	cmpb	$0x2f,%cl
00002753	je	0x0000275a
00002755	cmpb	$0x5c,%cl
00002758	jne	0x0000275d
0000275a	movb	$0x2f,(%eax)
0000275d	incl	%eax
0000275e	movb	(%eax),%cl
00002760	testb	%cl,%cl
00002762	jne	0x00002750
00002764	movl	%edi,(%esp)
00002767	calll	_strlen
0000276c	movl	%eax,%esi
0000276e	testl	%esi,%esi
00002770	jle	0x000027a3
00002772	movb	0xff(%esi,%edi),%al
00002776	cmpb	$0x2f,%al
00002778	je	0x000027a3
0000277a	cmpb	$0x5c,%al
0000277c	je	0x000027a3
0000277e	leal	0x01(%esi),%eax
00002781	cmpl	%ebx,%eax
00002783	jl	0x0000279a
00002785	movl	%edi,0x04(%esp)
00002789	movl	0xf0(%ebp),%eax
0000278c	leal	0x13642-0x271e(%eax),%eax
00002792	movl	%eax,(%esp)
00002795	calll	_Error
0000279a	movb	$0x2f,(%edi,%esi)
0000279e	movb	_V_memset(char const*, int, void*, int, int),0x01(%edi,%esi)
000027a3	movl	%edi,(%esp)
000027a6	calll	_strlen
000027ab	movl	%eax,%esi
000027ad	movl	0x0c(%ebp),%eax
000027b0	movl	%eax,(%esp)
000027b3	calll	_strlen
000027b8	leal	(%eax,%esi),%ecx
000027bb	cmpl	%ebx,%ecx
000027bd	jb	0x000027c4
000027bf	decl	%ebx
000027c0	subl	%esi,%ebx
000027c2	movl	%ebx,%eax
000027c4	testl	%eax,%eax
000027c6	jle	0x000027ec
000027c8	movl	%eax,0x08(%esp)
000027cc	movl	0x0c(%ebp),%eax
000027cf	movl	%eax,0x04(%esp)
000027d3	movl	%edi,(%esp)
000027d6	calll	_strncat
000027db	jmp	0x000027ec
000027dd	nopl	(%eax)
000027e0	cmpb	$0x2f,%al
000027e2	je	0x000027e8
000027e4	cmpb	$0x5c,%al
000027e6	jne	0x000027eb
000027e8	movb	$0x2f,(%edi)
000027eb	incl	%edi
000027ec	movb	(%edi),%al
000027ee	testb	%al,%al
000027f0	jne	0x000027e0
000027f2	addl	$0x1c,%esp
000027f5	popl	%esi
000027f6	popl	%edi
000027f7	popl	%ebx
000027f8	popl	%ebp
000027f9	ret
000027fa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_AppendSlash(char*, int):
00002800	pushl	%ebp
00002801	movl	%esp,%ebp
00002803	pushl	%ebx
00002804	pushl	%edi
00002805	pushl	%esi
00002806	subl	$0x0c,%esp
00002809	calll	0x0000280e
0000280e	popl	%ebx
0000280f	movl	0x08(%ebp),%edi
00002812	movl	%edi,(%esp)
00002815	calll	_strlen
0000281a	movl	%eax,%esi
0000281c	testl	%esi,%esi
0000281e	jle	0x00002851
00002820	movb	0xff(%esi,%edi),%al
00002824	cmpb	$0x2f,%al
00002826	je	0x00002851
00002828	cmpb	$0x5c,%al
0000282a	je	0x00002851
0000282c	movl	0x0c(%ebp),%eax
0000282f	leal	0x01(%esi),%ecx
00002832	cmpl	%eax,%ecx
00002834	jl	0x00002848
00002836	movl	%edi,0x04(%esp)
0000283a	leal	0x13642-0x280e(%ebx),%eax
00002840	movl	%eax,(%esp)
00002843	calll	_Error
00002848	movb	$0x2f,(%edi,%esi)
0000284c	movb	_V_memset(char const*, int, void*, int, int),0x01(%edi,%esi)
00002851	addl	$0x0c,%esp
00002854	popl	%esi
00002855	popl	%edi
00002856	popl	%ebx
00002857	popl	%ebp
00002858	ret
00002859	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_ExtractFilePath(char const*, char*, int):
00002860	pushl	%ebp
00002861	movl	%esp,%ebp
00002863	pushl	%ebx
00002864	pushl	%edi
00002865	pushl	%esi
00002866	subl	$0x0c,%esp
00002869	xorb	%al,%al
0000286b	movl	0x10(%ebp),%esi
0000286e	testl	%esi,%esi
00002870	jle	0x000028cd
00002872	movl	0x0c(%ebp),%edi
00002875	movl	0x08(%ebp),%ebx
00002878	movl	%ebx,(%esp)
0000287b	calll	_strlen
00002880	cmpl	$0x01,%eax
00002883	movl	$0x00000001,%ecx
00002888	cmoval	%eax,%ecx
0000288b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002890	movl	%ecx,%eax
00002892	cmpl	$0x01,%eax
00002895	je	0x000028a8
00002897	movb	0xfe(%ebx,%eax),%dl
0000289b	cmpb	$0x2f,%dl
0000289e	je	0x000028a8
000028a0	leal	0xff(%eax),%ecx
000028a3	cmpb	$0x5c,%dl
000028a6	jne	0x00002890
000028a8	movl	%ebx,0x04(%esp)
000028ac	movl	%edi,(%esp)
000028af	leal	0xff(%ebx,%eax),%eax
000028b3	subl	%ebx,%eax
000028b5	decl	%esi
000028b6	cmpl	%esi,%eax
000028b8	cmovll	%eax,%esi
000028bb	movl	%esi,0x08(%esp)
000028bf	calll	_memcpy
000028c4	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000028c8	testl	%esi,%esi
000028ca	setne	%al
000028cd	movzbl	%al,%eax
000028d0	addl	$0x0c,%esp
000028d3	popl	%esi
000028d4	popl	%edi
000028d5	popl	%ebx
000028d6	popl	%ebp
000028d7	ret
000028d8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_ExtractFileExtension(char const*, char*, int):
000028e0	pushl	%ebp
000028e1	movl	%esp,%ebp
000028e3	pushl	%ebx
000028e4	pushl	%edi
000028e5	pushl	%esi
000028e6	subl	$0x0c,%esp
000028e9	movl	0x0c(%ebp),%edi
000028ec	movb	_V_memset(char const*, int, void*, int, int),(%edi)
000028ef	movl	0x08(%ebp),%ebx
000028f2	movl	%ebx,(%esp)
000028f5	calll	_strlen
000028fa	leal	(%ebx,%eax),%edx
000028fd	xorl	%ecx,%ecx
000028ff	nop
00002900	leal	(%eax,%ecx),%esi
00002903	cmpl	$0x01,%esi
00002906	je	0x00002941
00002908	cmpb	$0x2e,0xfe(%edx,%ecx)
0000290d	leal	0xff(%ecx),%ecx
00002910	jne	0x00002900
00002912	addl	%eax,%ebx
00002914	movb	(%ecx,%ebx),%al
00002917	cmpb	$0x2f,%al
00002919	je	0x00002941
0000291b	cmpb	$0x5c,%al
0000291d	je	0x00002941
0000291f	addl	%ecx,%ebx
00002921	testl	%ebx,%ebx
00002923	je	0x00002941
00002925	movl	0x10(%ebp),%esi
00002928	movl	%esi,0x08(%esp)
0000292c	movl	%ebx,0x04(%esp)
00002930	movl	%edi,(%esp)
00002933	calll	_strncpy
00002938	testl	%esi,%esi
0000293a	jle	0x00002941
0000293c	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00002941	addl	$0x0c,%esp
00002944	popl	%esi
00002945	popl	%edi
00002946	popl	%ebx
00002947	popl	%ebp
00002948	ret
00002949	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_GetFileExtension(char const*):
00002950	pushl	%ebp
00002951	movl	%esp,%ebp
00002953	pushl	%esi
00002954	pushl	%eax
00002955	movl	0x08(%ebp),%esi
00002958	movl	%esi,(%esp)
0000295b	calll	_strlen
00002960	xorl	%ecx,%ecx
00002962	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002970	cmpl	$0x01,%eax
00002973	je	0x00002992
00002975	cmpb	$0x2e,0xfe(%esi,%eax)
0000297a	leal	0xff(%eax),%eax
0000297d	jne	0x00002970
0000297f	movb	(%esi,%eax),%dl
00002982	xorl	%ecx,%ecx
00002984	cmpb	$0x2f,%dl
00002987	je	0x00002992
00002989	cmpb	$0x5c,%dl
0000298c	je	0x00002992
0000298e	addl	%eax,%esi
00002990	movl	%esi,%ecx
00002992	movl	%ecx,%eax
00002994	addl	$0x04,%esp
00002997	popl	%esi
00002998	popl	%ebp
00002999	ret
0000299a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_GetFileName(char const*):
000029a0	pushl	%ebp
000029a1	movl	%esp,%ebp
000029a3	pushl	%esi
000029a4	pushl	%eax
000029a5	movl	0x08(%ebp),%esi
000029a8	movl	%esi,(%esp)
000029ab	calll	_strlen
000029b0	leal	0xff(%eax,%esi),%ecx
000029b4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000029c0	movl	%ecx,%eax
000029c2	cmpl	%esi,%eax
000029c4	jbe	0x000029d6
000029c6	movb	0xff(%eax),%dl
000029c9	cmpb	$0x2f,%dl
000029cc	je	0x000029d6
000029ce	leal	0xff(%eax),%ecx
000029d1	cmpb	$0x5c,%dl
000029d4	jne	0x000029c0
000029d6	addl	$0x04,%esp
000029d9	popl	%esi
000029da	popl	%ebp
000029db	ret
000029dc	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_RemoveDotSlashes(char*, char, bool):
000029e0	pushl	%ebp
000029e1	pushl	%ebx
000029e2	pushl	%edi
000029e3	pushl	%esi
000029e4	pushl	%eax
000029e5	movb	$0x01,0x03(%esp)
000029ea	movb	0x1c(%esp),%al
000029ee	movl	0x18(%esp),%esi
000029f2	movl	%esi,%ebx
000029f4	movl	%esi,%edi
000029f6	movb	$0x01,%ah
000029f8	jmp	0x00002a0c
000029fa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002a00	incl	%ebx
00002a01	cmpl	%esi,%edi
00002a03	je	0x00002a41
00002a05	cmpb	%al,_V_memset(char const*, int, void*, int, int)(%ebp)
00002a08	jne	0x00002a41
00002a0a	movl	%ebp,%edi
00002a0c	leal	0xff(%edi),%ebp
00002a0f	jmp	0x00002a41
00002a11	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002a20	testb	%ah,%ah
00002a22	je	0x00002aa3
00002a24	cmpb	$0x2e,%ch
00002a27	jne	0x00002aa3
00002a29	movb	0x01(%ebx),%dl
00002a2c	testb	%dl,%dl
00002a2e	je	0x00002a00
00002a30	cmpb	$0x2f,%dl
00002a33	je	0x00002a3e
00002a35	cmpb	$0x5c,%dl
00002a38	jne	0x00002acb
00002a3e	addl	$0x02,%ebx
00002a41	movb	(%ebx),%ch
00002a43	testb	%ch,%ch
00002a45	je	0x00002ada
00002a4b	testb	%ah,%ah
00002a4d	je	0x00002a20
00002a4f	cmpb	$0x2e,%ch
00002a52	jne	0x00002a20
00002a54	cmpb	$0x2e,0x01(%ebx)
00002a58	jne	0x00002a20
00002a5a	movb	0x02(%ebx),%cl
00002a5d	leal	0x02(%ebx),%edx
00002a60	testb	%cl,%cl
00002a62	je	0x00002a70
00002a64	cmpb	$0x2f,%cl
00002a67	je	0x00002a70
00002a69	cmpb	$0x5c,%cl
00002a6c	jne	0x00002a20
00002a6e	nop
00002a70	movl	%edi,%ebx
00002a72	cmpl	%ebx,%esi
00002a74	je	0x00002a80
00002a76	leal	0xff(%ebx),%edi
00002a79	cmpb	%al,0xff(%ebx)
00002a7c	je	0x00002a70
00002a7e	nop
00002a80	cmpl	%ebx,%esi
00002a82	je	0x00002a9a
00002a84	leal	0xff(%ebx),%edi
00002a87	cmpb	%al,0xff(%ebx)
00002a8a	movl	%edi,%ebx
00002a8c	jne	0x00002a80
00002a8e	cmpl	%esi,%edi
00002a90	sete	%ah
00002a93	movl	%edx,%ebx
00002a95	jmp	0x00002a0c
00002a9a	movl	%ebx,%edi
00002a9c	movb	_V_memset(char const*, int, void*, int, int),0x03(%esp)
00002aa1	jmp	0x00002a8e
00002aa3	cmpb	$0x2f,%ch
00002aa6	je	0x00002aad
00002aa8	cmpb	$0x5c,%ch
00002aab	jne	0x00002acb
00002aad	movb	%al,(%edi)
00002aaf	cmpl	%esi,%edi
00002ab1	setne	%cl
00002ab4	andb	0x20(%esp),%cl
00002ab8	andb	%ah,%cl
00002aba	movzbl	%cl,%ecx
00002abd	negl	%ecx
00002abf	leal	0x01(%edi,%ecx),%edi
00002ac3	movb	$0x01,%ah
00002ac5	incl	%ebx
00002ac6	jmp	0x00002a0c
00002acb	cmpl	%ebx,%edi
00002acd	je	0x00002ad1
00002acf	movb	%ch,(%edi)
00002ad1	incl	%edi
00002ad2	xorb	%ah,%ah
00002ad4	incl	%ebx
00002ad5	jmp	0x00002a0c
00002ada	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00002add	movb	0x03(%esp),%al
00002ae1	andb	$0x01,%al
00002ae3	movzbl	%al,%eax
00002ae6	addl	$0x04,%esp
00002ae9	popl	%esi
00002aea	popl	%edi
00002aeb	popl	%ebx
00002aec	popl	%ebp
00002aed	ret
00002aee	nop
V_MakeAbsolutePath(char*, int, char const*, char const*):
00002af0	pushl	%ebp
00002af1	movl	%esp,%ebp
00002af3	pushl	%ebx
00002af4	pushl	%edi
00002af5	pushl	%esi
00002af6	subl	$0x1c,%esp
00002af9	calll	0x00002afe
00002afe	popl	%eax
00002aff	movl	%eax,0xf0(%ebp)
00002b02	movl	0x10(%ebp),%ecx
00002b05	movb	(%ecx),%al
00002b07	movl	0x0c(%ebp),%edi
00002b0a	movl	0x08(%ebp),%ebx
00002b0d	testb	%al,%al
00002b0f	je	0x00002b41
00002b11	cmpb	$0x3a,0x01(%ecx)
00002b15	je	0x00002b1f
00002b17	cmpb	$0x2f,%al
00002b19	je	0x00002b1f
00002b1b	cmpb	$0x5c,%al
00002b1d	jne	0x00002b41
00002b1f	movl	%edi,0x08(%esp)
00002b23	movl	%ecx,0x04(%esp)
00002b27	movl	%ebx,(%esp)
00002b2a	calll	_strncpy
00002b2f	testl	%edi,%edi
00002b31	jle	0x00002c91
00002b37	movb	_V_memset(char const*, int, void*, int, int),0xff(%edi,%ebx)
00002b3c	jmp	0x00002c91
00002b41	movl	0x14(%ebp),%esi
00002b44	testl	%esi,%esi
00002b46	je	0x00002b7e
00002b48	movb	(%esi),%al
00002b4a	testb	%al,%al
00002b4c	je	0x00002b7e
00002b4e	cmpb	$0x3a,0x01(%esi)
00002b52	je	0x00002b5c
00002b54	cmpb	$0x2f,%al
00002b56	je	0x00002b5c
00002b58	cmpb	$0x5c,%al
00002b5a	jne	0x00002b7e
00002b5c	movl	%edi,0x08(%esp)
00002b60	movl	%esi,0x04(%esp)
00002b64	movl	%ebx,(%esp)
00002b67	calll	_strncpy
00002b6c	testl	%edi,%edi
00002b6e	jle	0x00002c1a
00002b74	movb	_V_memset(char const*, int, void*, int, int),0xff(%edi,%ebx)
00002b79	jmp	0x00002c1a
00002b7e	movl	%edi,0x04(%esp)
00002b82	movl	%ebx,(%esp)
00002b85	calll	_getcwd
00002b8a	testl	%eax,%eax
00002b8c	jne	0x00002b9f
00002b8e	movl	0xf0(%ebp),%eax
00002b91	leal	0x13669-0x2afe(%eax),%eax
00002b97	movl	%eax,(%esp)
00002b9a	calll	_Error
00002b9f	testl	%esi,%esi
00002ba1	je	0x00002c1a
00002ba3	movl	%ebx,(%esp)
00002ba6	calll	_strlen
00002bab	movl	%eax,%esi
00002bad	testl	%esi,%esi
00002baf	jle	0x00002be2
00002bb1	movb	0xff(%esi,%ebx),%al
00002bb5	cmpb	$0x2f,%al
00002bb7	je	0x00002be2
00002bb9	cmpb	$0x5c,%al
00002bbb	je	0x00002be2
00002bbd	leal	0x01(%esi),%eax
00002bc0	cmpl	%edi,%eax
00002bc2	jl	0x00002bd9
00002bc4	movl	%ebx,0x04(%esp)
00002bc8	movl	0xf0(%ebp),%eax
00002bcb	leal	0x13642-0x2afe(%eax),%eax
00002bd1	movl	%eax,(%esp)
00002bd4	calll	_Error
00002bd9	movb	$0x2f,(%ebx,%esi)
00002bdd	movb	_V_memset(char const*, int, void*, int, int),0x01(%ebx,%esi)
00002be2	movl	%ebx,(%esp)
00002be5	calll	_strlen
00002bea	movl	%eax,%esi
00002bec	movl	0x14(%ebp),%eax
00002bef	movl	%eax,(%esp)
00002bf2	calll	_strlen
00002bf7	leal	(%eax,%esi),%ecx
00002bfa	cmpl	%edi,%ecx
00002bfc	jb	0x00002c03
00002bfe	leal	0xff(%edi),%eax
00002c01	subl	%esi,%eax
00002c03	testl	%eax,%eax
00002c05	jle	0x00002c1a
00002c07	movl	%eax,0x08(%esp)
00002c0b	movl	0x14(%ebp),%eax
00002c0e	movl	%eax,0x04(%esp)
00002c12	movl	%ebx,(%esp)
00002c15	calll	_strncat
00002c1a	movl	%ebx,(%esp)
00002c1d	calll	_strlen
00002c22	movl	%eax,%esi
00002c24	testl	%esi,%esi
00002c26	jle	0x00002c59
00002c28	movb	0xff(%esi,%ebx),%al
00002c2c	cmpb	$0x2f,%al
00002c2e	je	0x00002c59
00002c30	cmpb	$0x5c,%al
00002c32	je	0x00002c59
00002c34	leal	0x01(%esi),%eax
00002c37	cmpl	%edi,%eax
00002c39	jl	0x00002c50
00002c3b	movl	%ebx,0x04(%esp)
00002c3f	movl	0xf0(%ebp),%eax
00002c42	leal	0x13642-0x2afe(%eax),%eax
00002c48	movl	%eax,(%esp)
00002c4b	calll	_Error
00002c50	movb	$0x2f,(%ebx,%esi)
00002c54	movb	_V_memset(char const*, int, void*, int, int),0x01(%ebx,%esi)
00002c59	movl	%ebx,(%esp)
00002c5c	calll	_strlen
00002c61	movl	%eax,%esi
00002c63	movl	0x10(%ebp),%eax
00002c66	movl	%eax,(%esp)
00002c69	calll	_strlen
00002c6e	leal	(%eax,%esi),%ecx
00002c71	cmpl	%edi,%ecx
00002c73	jb	0x00002c7a
00002c75	decl	%edi
00002c76	subl	%esi,%edi
00002c78	movl	%edi,%eax
00002c7a	testl	%eax,%eax
00002c7c	movl	0x10(%ebp),%ecx
00002c7f	jle	0x00002c91
00002c81	movl	%eax,0x08(%esp)
00002c85	movl	%ecx,0x04(%esp)
00002c89	movl	%ebx,(%esp)
00002c8c	calll	_strncat
00002c91	movl	%ebx,(%esp)
00002c94	movl	$0x00000001,0x08(%esp)
00002c9c	movl	$0x0000002f,0x04(%esp)
00002ca4	calll	V_RemoveDotSlashes(char*, char, bool)
00002ca9	testb	%al,%al
00002cab	jne	0x00002cbe
00002cad	movl	0xf0(%ebp),%eax
00002cb0	leal	0x1368d-0x2afe(%eax),%eax
00002cb6	movl	%eax,(%esp)
00002cb9	calll	_Error
00002cbe	addl	$0x1c,%esp
00002cc1	popl	%esi
00002cc2	popl	%edi
00002cc3	popl	%ebx
00002cc4	popl	%ebp
00002cc5	ret
00002cc6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_IsAbsolutePath(char const*):
00002cd0	pushl	%esi
00002cd1	movl	0x08(%esp),%esi
00002cd5	movb	(%esi),%cl
00002cd7	xorb	%dl,%dl
00002cd9	testb	%cl,%cl
00002cdb	je	0x00002cec
00002cdd	movb	$0x01,%al
00002cdf	cmpb	$0x3a,0x01(%esi)
00002ce3	je	0x00002cf2
00002ce5	cmpb	$0x2f,%cl
00002ce8	movb	%cl,%dl
00002cea	je	0x00002cf2
00002cec	cmpb	$0x5c,%dl
00002cef	sete	%al
00002cf2	movzbl	%al,%eax
00002cf5	popl	%esi
00002cf6	ret
00002cf7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_MakeRelativePath(char const*, char const*, char*, int):
00002d00	pushl	%ebp
00002d01	movl	%esp,%ebp
00002d03	pushl	%ebx
00002d04	pushl	%edi
00002d05	pushl	%esi
00002d06	subl	$0x1c,%esp
00002d09	movl	0x10(%ebp),%eax
00002d0c	movb	_V_memset(char const*, int, void*, int, int),(%eax)
00002d0f	movl	0x08(%ebp),%edx
00002d12	incl	%edx
00002d13	movl	0x0c(%ebp),%esi
00002d16	incl	%esi
00002d17	movl	_V_memset(char const*, int, void*, int, int),0xe8(%ebp)
00002d1e	movl	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
00002d25	jmp	0x00002de6
00002d2a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002d30	movl	%esi,0xf0(%ebp)
00002d33	movl	%edx,%edi
00002d35	testb	%bl,%bl
00002d37	js	0x00002d4d
00002d39	movl	$0x00000040,%eax
00002d3e	subl	%ebx,%eax
00002d40	leal	0xa5(%ebx),%esi
00002d43	andl	%eax,%esi
00002d45	shrl	$0x1a,%esi
00002d48	andl	$0x20,%esi
00002d4b	jmp	0x00002d68
00002d4d	movl	%ebx,(%esp)
00002d50	movl	$0x00008000,0x04(%esp)
00002d58	calll	___maskrune
00002d5d	testl	%eax,%eax
00002d5f	setne	%al
00002d62	movzbl	%al,%esi
00002d65	shll	$0x05,%esi
00002d68	addl	%ebx,%esi
00002d6a	movl	0xf0(%ebp),%eax
00002d6d	movzbl	0xff(%eax),%ebx
00002d71	testb	%bl,%bl
00002d73	js	0x00002d89
00002d75	movl	$0x00000040,%eax
00002d7a	subl	%ebx,%eax
00002d7c	leal	0xa5(%ebx),%ecx
00002d7f	andl	%eax,%ecx
00002d81	shrl	$0x1a,%ecx
00002d84	andl	$0x20,%ecx
00002d87	jmp	0x00002da4
00002d89	movl	%ebx,(%esp)
00002d8c	movl	$0x00008000,0x04(%esp)
00002d94	calll	___maskrune
00002d99	testl	%eax,%eax
00002d9b	setne	%al
00002d9e	movzbl	%al,%ecx
00002da1	shll	$0x05,%ecx
00002da4	movl	%edi,%edx
00002da6	addl	%ebx,%ecx
00002da8	movb	0xff(%edx),%al
00002dab	cmpl	%ecx,%esi
00002dad	movl	0xec(%ebp),%ebx
00002db0	movl	0xf0(%ebp),%esi
00002db3	je	0x00002dce
00002db5	cmpb	$0x2f,%al
00002db7	je	0x00002dbd
00002db9	cmpb	$0x5c,%al
00002dbb	jne	0x00002df8
00002dbd	movb	0xff(%esi),%cl
00002dc0	testb	%cl,%cl
00002dc2	je	0x00002dce
00002dc4	cmpb	$0x2f,%cl
00002dc7	je	0x00002dce
00002dc9	cmpb	$0x5c,%cl
00002dcc	jne	0x00002df8
00002dce	cmpb	$0x2f,%al
00002dd0	je	0x00002dd6
00002dd2	cmpb	$0x5c,%al
00002dd4	jne	0x00002ddb
00002dd6	movl	%edx,0xe8(%ebp)
00002dd9	movl	%esi,%ebx
00002ddb	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%esi)
00002ddf	je	0x00002df7
00002de1	movl	%ebx,0xec(%ebp)
00002de4	incl	%edx
00002de5	incl	%esi
00002de6	movzbl	0xff(%edx),%ebx
00002dea	testl	%ebx,%ebx
00002dec	jne	0x00002d30
00002df2	movl	0xec(%ebp),%ebx
00002df5	jmp	0x00002df8
00002df7	decl	%ebx
00002df8	xorb	%al,%al
00002dfa	movl	0xe8(%ebp),%edi
00002dfd	testl	%edi,%edi
00002dff	je	0x00002e86
00002e05	movb	$0x01,%cl
00002e07	xorl	%eax,%eax
00002e09	movl	0x10(%ebp),%esi
00002e0c	jmp	0x00002e30
00002e0e	nop
00002e10	cmpb	$0x2f,%dl
00002e13	je	0x00002e1c
00002e15	xorb	%cl,%cl
00002e17	cmpb	$0x5c,%dl
00002e1a	jne	0x00002e2f
00002e1c	movb	$0x2e,(%esi,%eax)
00002e20	movb	$0x2e,0x01(%esi,%eax)
00002e25	movb	$0x2f,0x02(%esi,%eax)
00002e2a	addl	$0x03,%eax
00002e2d	movb	$0x01,%cl
00002e2f	incl	%ebx
00002e30	movb	(%ebx),%dl
00002e32	testb	%dl,%dl
00002e34	jne	0x00002e10
00002e36	testb	$0x01,%cl
00002e39	movl	0x14(%ebp),%edx
00002e3c	jne	0x00002e4f
00002e3e	movb	$0x2e,(%esi,%eax)
00002e42	movb	$0x2e,0x01(%esi,%eax)
00002e47	movb	$0x2f,0x02(%esi,%eax)
00002e4c	addl	$0x03,%eax
00002e4f	addl	$0xfe,%edx
00002e52	jmp	0x00002e62
00002e54	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002e60	incl	%eax
00002e61	incl	%edi
00002e62	movb	(%edi),%cl
00002e64	testb	%cl,%cl
00002e66	je	0x00002e80
00002e68	cmpb	$0x2f,%cl
00002e6b	je	0x00002e72
00002e6d	cmpb	$0x5c,%cl
00002e70	jne	0x00002e78
00002e72	movb	$0x2f,(%esi,%eax)
00002e76	jmp	0x00002e7b
00002e78	movb	%cl,(%esi,%eax)
00002e7b	cmpl	%eax,%edx
00002e7d	jne	0x00002e60
00002e7f	incl	%eax
00002e80	movb	_V_memset(char const*, int, void*, int, int),(%esi,%eax)
00002e84	movb	$0x01,%al
00002e86	movzbl	%al,%eax
00002e89	addl	$0x1c,%esp
00002e8c	popl	%esi
00002e8d	popl	%edi
00002e8e	popl	%ebx
00002e8f	popl	%ebp
00002e90	ret
00002e91	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FixupPathName(char*, unsigned long, char const*):
00002ea0	pushl	%ebp
00002ea1	movl	%esp,%ebp
00002ea3	pushl	%edi
00002ea4	pushl	%esi
00002ea5	subl	$0x10,%esp
00002ea8	movl	0x0c(%ebp),%esi
00002eab	movl	%esi,0x08(%esp)
00002eaf	movl	0x10(%ebp),%eax
00002eb2	movl	%eax,0x04(%esp)
00002eb6	movl	0x08(%ebp),%edi
00002eb9	movl	%edi,(%esp)
00002ebc	calll	_strncpy
00002ec1	testl	%esi,%esi
00002ec3	jle	0x00002eca
00002ec5	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00002eca	movl	%edi,(%esp)
00002ecd	movl	$0x00000001,0x08(%esp)
00002ed5	movl	$0x0000002f,0x04(%esp)
00002edd	calll	V_RemoveDotSlashes(char*, char, bool)
00002ee2	addl	$0x10,%esp
00002ee5	popl	%esi
00002ee6	popl	%edi
00002ee7	popl	%ebp
00002ee8	ret
00002ee9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_StrSubst(char const*, char const*, char const*, char*, int, bool):
00002ef0	pushl	%ebp
00002ef1	movl	%esp,%ebp
00002ef3	pushl	%ebx
00002ef4	pushl	%edi
00002ef5	pushl	%esi
00002ef6	subl	$0x2c,%esp
00002ef9	movl	0x0c(%ebp),%edi
00002efc	movl	%edi,(%esp)
00002eff	calll	_strlen
00002f04	movl	%eax,0xdc(%ebp)
00002f07	movl	0x10(%ebp),%eax
00002f0a	movl	%eax,(%esp)
00002f0d	calll	_strlen
00002f12	movl	%eax,0xe8(%ebp)
00002f15	movl	0x14(%ebp),%ebx
00002f18	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
00002f1b	movl	0x18(%ebp),%eax
00002f1e	leal	0xff(%ebx,%eax),%eax
00002f22	movl	%eax,0xe4(%ebp)
00002f25	movl	0x08(%ebp),%eax
00002f28	movl	%eax,0xf0(%ebp)
00002f2b	jmp	0x00002fa0
00002f2d	nopl	(%eax)
00002f30	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
00002f34	xorb	%cl,%cl
00002f36	cmpl	%esi,0xec(%ebp)
00002f39	movl	%edi,%ebx
00002f3b	jg	0x0000304d
00002f41	movl	%ebx,(%esp)
00002f44	calll	_strlen
00002f49	leal	(%ebx,%eax),%edi
00002f4c	movl	0x14(%ebp),%edx
00002f4f	subl	%edi,%edx
00002f51	xorb	%cl,%cl
00002f53	addl	0x18(%ebp),%edx
00002f56	je	0x0000304d
00002f5c	movl	0xe4(%ebp),%edx
00002f5f	subl	%edi,%edx
00002f61	leal	(%ebx,%eax),%esi
00002f64	movl	%ebx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00002f67	movl	0x10(%ebp),%ebx
00002f6a	movl	0xe8(%ebp),%edi
00002f6d	jmp	0x00002f76
00002f6f	nop
00002f70	movb	%cl,(%esi)
00002f72	decl	%edx
00002f73	incl	%esi
00002f74	decl	%edi
00002f75	incl	%ebx
00002f76	testl	%edi,%edi
00002f78	jle	0x00002f89
00002f7a	movb	(%ebx),%cl
00002f7c	testb	%cl,%cl
00002f7e	je	0x00002f89
00002f80	testl	%edx,%edx
00002f82	jne	0x00002f70
00002f84	jmp	0x00003017
00002f89	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00002f8c	addl	0xe8(%ebp),%eax
00002f8f	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ebx
00002f92	addl	%eax,%ebx
00002f94	movl	0xec(%ebp),%eax
00002f97	addl	0xdc(%ebp),%eax
00002f9a	addl	%eax,0xf0(%ebp)
00002f9d	movl	0x0c(%ebp),%edi
00002fa0	movl	0x14(%ebp),%esi
00002fa3	subl	%ebx,%esi
00002fa5	addl	0x18(%ebp),%esi
00002fa8	cmpb	$0x01,0x1c(%ebp)
00002fac	jne	0x00002fbf
00002fae	movl	%edi,0x04(%esp)
00002fb2	movl	0xf0(%ebp),%eax
00002fb5	movl	%eax,(%esp)
00002fb8	calll	_strstr
00002fbd	jmp	0x00002fce
00002fbf	movl	%edi,0x04(%esp)
00002fc3	movl	0xf0(%ebp),%eax
00002fc6	movl	%eax,(%esp)
00002fc9	calll	V_stristr(char const*, char const*)
00002fce	testl	%eax,%eax
00002fd0	je	0x0000301e
00002fd2	xorb	%cl,%cl
00002fd4	testl	%esi,%esi
00002fd6	je	0x0000304d
00002fd8	movl	%eax,%edx
00002fda	subl	0xf0(%ebp),%edx
00002fdd	movl	%edx,0xec(%ebp)
00002fe0	movl	0xe4(%ebp),%eax
00002fe3	subl	%ebx,%eax
00002fe5	decl	%esi
00002fe6	xorl	%ecx,%ecx
00002fe8	movl	%ebx,%edi
00002fea	jmp	0x00002ff5
00002fec	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00002ff0	movb	%bl,(%edi,%ecx)
00002ff3	decl	%edx
00002ff4	incl	%ecx
00002ff5	testl	%edx,%edx
00002ff7	jle	0x00002f30
00002ffd	movl	0xf0(%ebp),%ebx
00003000	movb	(%ebx,%ecx),%bl
00003003	testb	%bl,%bl
00003005	je	0x00002f30
0000300b	cmpl	%ecx,%eax
0000300d	jne	0x00002ff0
0000300f	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
00003013	xorb	%cl,%cl
00003015	jmp	0x0000304d
00003017	movb	_V_memset(char const*, int, void*, int, int),(%esi)
0000301a	xorb	%cl,%cl
0000301c	jmp	0x0000304d
0000301e	movl	0xf0(%ebp),%edi
00003021	movl	%edi,(%esp)
00003024	calll	_strlen
00003029	movl	%eax,0xec(%ebp)
0000302c	movl	%esi,0x08(%esp)
00003030	movl	%edi,0x04(%esp)
00003034	movl	%ebx,(%esp)
00003037	calll	_strncpy
0000303c	leal	0xff(%esi),%eax
0000303f	testl	%esi,%esi
00003041	jle	0x00003047
00003043	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%eax)
00003047	cmpl	%eax,0xec(%ebp)
0000304a	setle	%cl
0000304d	movzbl	%cl,%eax
00003050	addl	$0x2c,%esp
00003053	popl	%esi
00003054	popl	%edi
00003055	popl	%ebx
00003056	popl	%ebp
00003057	ret
00003058	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
AllocString(char const*, int):
00003060	pushl	%ebp
00003061	movl	%esp,%ebp
00003063	pushl	%ebx
00003064	pushl	%edi
00003065	pushl	%esi
00003066	subl	$0x0c,%esp
00003069	movl	0x08(%ebp),%eax
0000306c	movl	%eax,(%esp)
0000306f	movl	0x0c(%ebp),%edi
00003072	calll	_strlen
00003077	cmpl	$0xff,%edi
0000307a	je	0x00003080
0000307c	cmpl	%edi,%eax
0000307e	jge	0x00003082
00003080	movl	%eax,%edi
00003082	leal	0x01(%edi),%ebx
00003085	testl	%ebx,%ebx
00003087	movl	$0xffffffff,%eax
0000308c	cmovnsl	%ebx,%eax
0000308f	movl	%eax,(%esp)
00003092	calll	operator new[](unsigned long)
00003097	movl	%eax,%esi
00003099	movl	%ebx,0x08(%esp)
0000309d	movl	0x08(%ebp),%eax
000030a0	movl	%eax,0x04(%esp)
000030a4	movl	%esi,(%esp)
000030a7	calll	_strncpy
000030ac	testl	%ebx,%ebx
000030ae	jle	0x000030b4
000030b0	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
000030b4	movl	%esi,%eax
000030b6	addl	$0x0c,%esp
000030b9	popl	%esi
000030ba	popl	%edi
000030bb	popl	%ebx
000030bc	popl	%ebp
000030bd	ret
000030be	nop
V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&):
000030c0	pushl	%ebp
000030c1	movl	%esp,%ebp
000030c3	pushl	%ebx
000030c4	pushl	%edi
000030c5	pushl	%esi
000030c6	subl	$0x1c,%esp
000030c9	movl	0x14(%ebp),%ecx
000030cc	movl	_V_memset(char const*, int, void*, int, int),0x0c(%ecx)
000030d3	movl	(%ecx),%eax
000030d5	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ecx)
000030d9	js	0x000030fa
000030db	testl	%eax,%eax
000030dd	je	0x000030f1
000030df	movl	%eax,(%esp)
000030e2	movl	%ecx,%esi
000030e4	calll	_free
000030e9	movl	%esi,%ecx
000030eb	movl	_V_memset(char const*, int, void*, int, int),(%ecx)
000030f1	movl	_V_memset(char const*, int, void*, int, int),0x04(%ecx)
000030f8	xorl	%eax,%eax
000030fa	movl	0x08(%ebp),%edx
000030fd	movl	%edx,0xf0(%ebp)
00003100	movl	%eax,0x10(%ecx)
00003103	jmp	0x000031e9
00003108	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00003110	movl	0x0c(%ebp),%eax
00003113	movl	(%eax,%ebx,4),%eax
00003116	movl	%eax,(%esp)
00003119	calll	_strlen
0000311e	movl	%eax,0xe8(%ebp)
00003121	movl	0xf0(%ebp),%eax
00003124	cmpl	%eax,%esi
00003126	jbe	0x000031e3
0000312c	movl	%eax,(%esp)
0000312f	movl	%esi,%ebx
00003131	subl	%eax,%ebx
00003133	calll	_strlen
00003138	cmpl	$0xff,%ebx
0000313b	je	0x00003141
0000313d	cmpl	%ebx,%eax
0000313f	jge	0x00003143
00003141	movl	%eax,%ebx
00003143	leal	0x01(%ebx),%edi
00003146	testl	%edi,%edi
00003148	movl	$0xffffffff,%eax
0000314d	cmovnsl	%edi,%eax
00003150	movl	%eax,(%esp)
00003153	calll	operator new[](unsigned long)
00003158	movl	%eax,%ecx
0000315a	movl	%ecx,0xec(%ebp)
0000315d	movl	%edi,0x08(%esp)
00003161	movl	0xf0(%ebp),%eax
00003164	movl	%eax,0x04(%esp)
00003168	movl	%ecx,(%esp)
0000316b	calll	_strncpy
00003170	movl	0xec(%ebp),%eax
00003173	testl	%edi,%edi
00003175	jle	0x0000317b
00003177	movb	_V_memset(char const*, int, void*, int, int),(%eax,%ebx)
0000317b	movl	0x14(%ebp),%edx
0000317e	movl	0x04(%edx),%eax
00003181	movl	0x0c(%edx),%ebx
00003184	leal	0x01(%ebx),%edi
00003187	cmpl	%eax,%edi
00003189	movl	%ebx,%ecx
0000318b	jle	0x000031aa
0000318d	movl	%edi,%ecx
0000318f	subl	%eax,%ecx
00003191	movl	%ecx,0x04(%esp)
00003195	movl	%edx,(%esp)
00003198	movl	%edi,0xf0(%ebp)
0000319b	movl	%edx,%edi
0000319d	calll	CUtlMemory<char*, int>::Grow(int)
000031a2	movl	%edi,%edx
000031a4	movl	0xf0(%ebp),%edi
000031a7	movl	0x0c(%edx),%ecx
000031aa	incl	%ecx
000031ab	movl	%ecx,0x0c(%edx)
000031ae	movl	(%edx),%eax
000031b0	movl	%eax,0x10(%edx)
000031b3	subl	%ebx,%ecx
000031b5	decl	%ecx
000031b6	testl	%ecx,%ecx
000031b8	jle	0x000031d7
000031ba	shll	$0x02,%ecx
000031bd	movl	%ecx,0x08(%esp)
000031c1	leal	(%eax,%ebx,4),%ecx
000031c4	movl	%ecx,0x04(%esp)
000031c8	leal	(%eax,%edi,4),%eax
000031cb	movl	%eax,(%esp)
000031ce	movl	%edx,%edi
000031d0	calll	_memmove
000031d5	movl	(%edi),%eax
000031d7	movl	0xec(%ebp),%ecx
000031da	shll	$0x02,%ebx
000031dd	addl	%eax,%ebx
000031df	je	0x000031e3
000031e1	movl	%ecx,(%ebx)
000031e3	addl	0xe8(%ebp),%esi
000031e6	movl	%esi,0xf0(%ebp)
000031e9	xorl	%edi,%edi
000031eb	cmpl	_V_memset(char const*, int, void*, int, int),0x10(%ebp)
000031ef	movl	_V_memset(char const*, int, void*, int, int),%esi
000031f4	movl	$0xffffffff,%ebx
000031f9	jle	0x00003233
000031fb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00003200	movl	0x0c(%ebp),%eax
00003203	movl	(%eax,%edi,4),%eax
00003206	movl	%eax,0x04(%esp)
0000320a	movl	0xf0(%ebp),%eax
0000320d	movl	%eax,(%esp)
00003210	calll	V_stristr(char const*, char const*)
00003215	testl	%eax,%eax
00003217	je	0x00003225
00003219	testl	%esi,%esi
0000321b	je	0x00003221
0000321d	cmpl	%esi,%eax
0000321f	jae	0x00003225
00003221	movl	%edi,%ebx
00003223	movl	%eax,%esi
00003225	incl	%edi
00003226	cmpl	%edi,0x10(%ebp)
00003229	jne	0x00003200
0000322b	testl	%esi,%esi
0000322d	jne	0x00003110
00003233	movl	0xf0(%ebp),%esi
00003236	movl	%esi,(%esp)
00003239	calll	_strlen
0000323e	movl	%eax,%edi
00003240	testl	%edi,%edi
00003242	je	0x000032dc
00003248	leal	0x01(%edi),%ebx
0000324b	testl	%ebx,%ebx
0000324d	movl	$0xffffffff,%eax
00003252	cmovnsl	%ebx,%eax
00003255	movl	%eax,(%esp)
00003258	calll	operator new[](unsigned long)
0000325d	movl	%ebx,0x08(%esp)
00003261	movl	%esi,0x04(%esp)
00003265	movl	%eax,%esi
00003267	movl	%esi,(%esp)
0000326a	calll	_strncpy
0000326f	testl	%ebx,%ebx
00003271	jle	0x00003277
00003273	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
00003277	movl	%esi,0xf0(%ebp)
0000327a	movl	0x14(%ebp),%edx
0000327d	movl	0x04(%edx),%eax
00003280	movl	0x0c(%edx),%edi
00003283	leal	0x01(%edi),%ebx
00003286	cmpl	%eax,%ebx
00003288	movl	%edi,%ecx
0000328a	jle	0x000032a3
0000328c	movl	%ebx,%ecx
0000328e	subl	%eax,%ecx
00003290	movl	%ecx,0x04(%esp)
00003294	movl	%edx,(%esp)
00003297	movl	%edx,%esi
00003299	calll	CUtlMemory<char*, int>::Grow(int)
0000329e	movl	%esi,%edx
000032a0	movl	0x0c(%edx),%ecx
000032a3	incl	%ecx
000032a4	movl	%ecx,0x0c(%edx)
000032a7	movl	(%edx),%eax
000032a9	movl	%eax,0x10(%edx)
000032ac	subl	%edi,%ecx
000032ae	decl	%ecx
000032af	testl	%ecx,%ecx
000032b1	jle	0x000032d0
000032b3	shll	$0x02,%ecx
000032b6	movl	%ecx,0x08(%esp)
000032ba	leal	(%eax,%edi,4),%ecx
000032bd	movl	%ecx,0x04(%esp)
000032c1	leal	(%eax,%ebx,4),%eax
000032c4	movl	%eax,(%esp)
000032c7	movl	%edx,%ebx
000032c9	calll	_memmove
000032ce	movl	(%ebx),%eax
000032d0	movl	0xf0(%ebp),%ecx
000032d3	shll	$0x02,%edi
000032d6	addl	%eax,%edi
000032d8	je	0x000032dc
000032da	movl	%ecx,(%edi)
000032dc	addl	$0x1c,%esp
000032df	popl	%esi
000032e0	popl	%edi
000032e1	popl	%ebx
000032e2	popl	%ebp
000032e3	ret
000032e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&):
000032f0	pushl	%ebp
000032f1	movl	%esp,%ebp
000032f3	subl	$0x18,%esp
000032f6	movl	0x0c(%ebp),%eax
000032f9	movl	%eax,0xfc(%ebp)
000032fc	movl	0x10(%ebp),%eax
000032ff	movl	%eax,0x0c(%esp)
00003303	leal	0xfc(%ebp),%eax
00003306	movl	%eax,0x04(%esp)
0000330a	movl	0x08(%ebp),%eax
0000330d	movl	%eax,(%esp)
00003310	movl	$0x00000001,0x08(%esp)
00003318	calll	V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
0000331d	addl	$0x18,%esp
00003320	popl	%ebp
00003321	ret
00003322	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_GetCurrentDirectory(char*, int):
00003330	pushl	%ebp
00003331	movl	%esp,%ebp
00003333	pushl	%esi
00003334	subl	$0x14,%esp
00003337	movl	0x0c(%ebp),%eax
0000333a	movl	%eax,0x04(%esp)
0000333e	movl	0x08(%ebp),%esi
00003341	movl	%esi,(%esp)
00003344	calll	_getcwd
00003349	cmpl	%esi,%eax
0000334b	sete	%al
0000334e	movzbl	%al,%eax
00003351	addl	$0x14,%esp
00003354	popl	%esi
00003355	popl	%ebp
00003356	ret
00003357	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SetCurrentDirectory(char const*):
00003360	pushl	%ebp
00003361	movl	%esp,%ebp
00003363	subl	$0x08,%esp
00003366	movl	0x08(%ebp),%eax
00003369	movl	%eax,(%esp)
0000336c	calll	_chdir
00003371	testl	%eax,%eax
00003373	sete	%al
00003376	movzbl	%al,%eax
00003379	addl	$0x08,%esp
0000337c	popl	%ebp
0000337d	ret
0000337e	nop
V_StrSlice(char const*, int, int, char*, int):
00003380	pushl	%ebp
00003381	movl	%esp,%ebp
00003383	pushl	%ebx
00003384	pushl	%edi
00003385	pushl	%esi
00003386	subl	$0x0c,%esp
00003389	cmpl	_V_memset(char const*, int, void*, int, int),0x18(%ebp)
0000338d	je	0x00003424
00003393	movl	0x10(%ebp),%ebx
00003396	movl	0x0c(%ebp),%edi
00003399	movl	0x08(%ebp),%eax
0000339c	movl	%eax,(%esp)
0000339f	calll	_strlen
000033a4	movl	%eax,%esi
000033a6	testl	%edi,%edi
000033a8	jns	0x000033c7
000033aa	negl	%edi
000033ac	movl	%edi,%eax
000033ae	cltd
000033af	idivl	%esi
000033b1	movl	%esi,%edi
000033b3	subl	%edx,%edi
000033b5	testl	%ebx,%ebx
000033b7	movl	0x08(%ebp),%ecx
000033ba	jns	0x000033d3
000033bc	negl	%ebx
000033be	movl	%ebx,%eax
000033c0	cltd
000033c1	idivl	%esi
000033c3	subl	%edx,%esi
000033c5	jmp	0x000033e2
000033c7	cmpl	%edi,%esi
000033c9	jg	0x000033b5
000033cb	movl	0x14(%ebp),%eax
000033ce	movb	_V_memset(char const*, int, void*, int, int),(%eax)
000033d1	jmp	0x00003424
000033d3	cmpl	%ebx,%esi
000033d5	jl	0x000033db
000033d7	movl	%ebx,%esi
000033d9	jmp	0x000033e2
000033db	movl	%ebx,%eax
000033dd	cltd
000033de	idivl	%esi
000033e0	movl	%edx,%esi
000033e2	cmpl	%edi,%esi
000033e4	movl	0x14(%ebp),%ebx
000033e7	jg	0x000033ee
000033e9	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
000033ec	jmp	0x00003424
000033ee	addl	%edi,%ecx
000033f0	subl	%edi,%esi
000033f2	movl	0x18(%ebp),%edi
000033f5	decl	%edi
000033f6	cmpl	%edi,%esi
000033f8	jg	0x00003410
000033fa	movl	%esi,0x08(%esp)
000033fe	movl	%ecx,0x04(%esp)
00003402	movl	%ebx,(%esp)
00003405	calll	_memcpy
0000340a	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%esi)
0000340e	jmp	0x00003424
00003410	movl	%edi,0x08(%esp)
00003414	movl	%ecx,0x04(%esp)
00003418	movl	%ebx,(%esp)
0000341b	calll	_memcpy
00003420	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%edi)
00003424	addl	$0x0c,%esp
00003427	popl	%esi
00003428	popl	%edi
00003429	popl	%ebx
0000342a	popl	%ebp
0000342b	ret
0000342c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_StrLeft(char const*, int, char*, int):
00003430	pushl	%ebp
00003431	movl	%esp,%ebp
00003433	pushl	%ebx
00003434	pushl	%edi
00003435	pushl	%esi
00003436	subl	$0x0c,%esp
00003439	movl	0x14(%ebp),%ebx
0000343c	movl	0x0c(%ebp),%edi
0000343f	testl	%edi,%edi
00003441	jne	0x0000344f
00003443	testl	%ebx,%ebx
00003445	je	0x000034c0
00003447	movl	0x10(%ebp),%eax
0000344a	movb	_V_memset(char const*, int, void*, int, int),(%eax)
0000344d	jmp	0x000034c0
0000344f	testl	%ebx,%ebx
00003451	je	0x000034c0
00003453	movl	0x08(%ebp),%eax
00003456	movl	%eax,(%esp)
00003459	calll	_strlen
0000345e	movl	%eax,%esi
00003460	testl	%esi,%esi
00003462	jle	0x00003447
00003464	testl	%edi,%edi
00003466	jns	0x00003473
00003468	negl	%edi
0000346a	movl	%edi,%eax
0000346c	cltd
0000346d	idivl	%esi
0000346f	subl	%edx,%esi
00003471	jmp	0x00003482
00003473	cmpl	%edi,%esi
00003475	jl	0x0000347b
00003477	movl	%edi,%esi
00003479	jmp	0x00003482
0000347b	movl	%edi,%eax
0000347d	cltd
0000347e	idivl	%esi
00003480	movl	%edx,%esi
00003482	testl	%esi,%esi
00003484	movl	0x10(%ebp),%edi
00003487	movl	0x08(%ebp),%eax
0000348a	jg	0x00003491
0000348c	movb	_V_memset(char const*, int, void*, int, int),(%edi)
0000348f	jmp	0x000034c0
00003491	decl	%ebx
00003492	cmpl	%ebx,%esi
00003494	jg	0x000034ac
00003496	movl	%esi,0x08(%esp)
0000349a	movl	%eax,0x04(%esp)
0000349e	movl	%edi,(%esp)
000034a1	calll	_memcpy
000034a6	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000034aa	jmp	0x000034c0
000034ac	movl	%ebx,0x08(%esp)
000034b0	movl	%eax,0x04(%esp)
000034b4	movl	%edi,(%esp)
000034b7	calll	_memcpy
000034bc	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ebx)
000034c0	addl	$0x0c,%esp
000034c3	popl	%esi
000034c4	popl	%edi
000034c5	popl	%ebx
000034c6	popl	%ebp
000034c7	ret
000034c8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StrRight(char const*, int, char*, int):
000034d0	pushl	%ebp
000034d1	movl	%esp,%ebp
000034d3	pushl	%ebx
000034d4	pushl	%edi
000034d5	pushl	%esi
000034d6	subl	$0x0c,%esp
000034d9	movl	0x08(%ebp),%esi
000034dc	movl	%esi,(%esp)
000034df	calll	_strlen
000034e4	movl	%eax,%ebx
000034e6	movl	0x14(%ebp),%eax
000034e9	movl	0x10(%ebp),%ecx
000034ec	movl	0x0c(%ebp),%edi
000034ef	cmpl	%edi,%ebx
000034f1	jg	0x0000351d
000034f3	movl	%eax,0x08(%esp)
000034f7	movl	%esi,0x04(%esp)
000034fb	movl	%ecx,(%esp)
000034fe	movl	%eax,%edi
00003500	movl	%ecx,%esi
00003502	calll	_strncpy
00003507	movl	%esi,%ecx
00003509	movl	%edi,%eax
0000350b	testl	%eax,%eax
0000350d	jle	0x000035ad
00003513	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%ecx)
00003518	jmp	0x000035ad
0000351d	testl	%eax,%eax
0000351f	je	0x000035ad
00003525	movl	%esi,(%esp)
00003528	calll	_strlen
0000352d	movl	%eax,%esi
0000352f	testl	%edi,%edi
00003531	jle	0x0000354e
00003533	movl	%edi,%eax
00003535	cltd
00003536	idivl	%esi
00003538	movl	%esi,%edi
0000353a	subl	%edx,%edi
0000353c	testl	%ebx,%ebx
0000353e	movl	0x14(%ebp),%ecx
00003541	jns	0x0000355c
00003543	negl	%ebx
00003545	movl	%ebx,%eax
00003547	cltd
00003548	idivl	%esi
0000354a	subl	%edx,%esi
0000354c	jmp	0x0000356b
0000354e	negl	%edi
00003550	cmpl	%edi,%esi
00003552	jg	0x0000353c
00003554	movl	0x10(%ebp),%eax
00003557	movb	_V_memset(char const*, int, void*, int, int),(%eax)
0000355a	jmp	0x000035ad
0000355c	cmpl	%ebx,%esi
0000355e	jl	0x00003564
00003560	movl	%ebx,%esi
00003562	jmp	0x0000356b
00003564	movl	%ebx,%eax
00003566	cltd
00003567	idivl	%esi
00003569	movl	%edx,%esi
0000356b	cmpl	%edi,%esi
0000356d	movl	0x08(%ebp),%eax
00003570	jle	0x00003554
00003572	addl	%edi,%eax
00003574	subl	%edi,%esi
00003576	decl	%ecx
00003577	cmpl	%ecx,%esi
00003579	jg	0x00003594
0000357b	movl	%esi,0x08(%esp)
0000357f	movl	%eax,0x04(%esp)
00003583	movl	0x10(%ebp),%edi
00003586	movl	%edi,(%esp)
00003589	calll	_memcpy
0000358e	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
00003592	jmp	0x000035ad
00003594	movl	%ecx,0x08(%esp)
00003598	movl	%eax,0x04(%esp)
0000359c	movl	0x10(%ebp),%esi
0000359f	movl	%esi,(%esp)
000035a2	movl	%ecx,%edi
000035a4	calll	_memcpy
000035a9	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
000035ad	addl	$0x0c,%esp
000035b0	popl	%esi
000035b1	popl	%edi
000035b2	popl	%ebx
000035b3	popl	%ebp
000035b4	ret
000035b5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strtowcs(char const*, int, wchar_t*, int):
000035c0	pushl	%ebp
000035c1	movl	%esp,%ebp
000035c3	pushl	%esi
000035c4	subl	$0x14,%esp
000035c7	movl	0x14(%ebp),%eax
000035ca	shrl	$0x02,%eax
000035cd	movl	%eax,0x08(%esp)
000035d1	movl	0x08(%ebp),%eax
000035d4	movl	%eax,0x04(%esp)
000035d8	movl	0x10(%ebp),%esi
000035db	movl	%esi,(%esp)
000035de	calll	_mbstowcs
000035e3	testl	%eax,%eax
000035e5	jne	0x000035ed
000035e7	movl	_V_memset(char const*, int, void*, int, int),(%esi)
000035ed	addl	$0x14,%esp
000035f0	popl	%esi
000035f1	popl	%ebp
000035f2	ret
000035f3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_wcstostr(wchar_t const*, int, char*, int):
00003600	pushl	%ebp
00003601	movl	%esp,%ebp
00003603	pushl	%esi
00003604	subl	$0x14,%esp
00003607	movl	0x14(%ebp),%eax
0000360a	movl	%eax,0x08(%esp)
0000360e	movl	0x08(%ebp),%eax
00003611	movl	%eax,0x04(%esp)
00003615	movl	0x10(%ebp),%esi
00003618	movl	%esi,(%esp)
0000361b	calll	_wcstombs
00003620	testl	%eax,%eax
00003622	jne	0x00003627
00003624	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00003627	addl	$0x14,%esp
0000362a	popl	%esi
0000362b	popl	%ebp
0000362c	ret
0000362d	nopl	(%eax)
V_AddBackSlashesToSpecialChars(char const*):
00003630	pushl	%ebp
00003631	movl	%esp,%ebp
00003633	pushl	%ebx
00003634	pushl	%edi
00003635	pushl	%esi
00003636	subl	$0x0c,%esp
00003639	calll	0x0000363e
0000363e	popl	%eax
0000363f	movl	%eax,0xec(%ebp)
00003642	movl	0x08(%ebp),%eax
00003645	movb	(%eax),%bl
00003647	testb	%bl,%bl
00003649	je	0x00003717
0000364f	movl	%eax,0xf0(%ebp)
00003652	leal	0x01(%eax),%eax
00003655	movl	$0x00000001,%edx
0000365a	movb	%bl,%cl
0000365c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00003660	cmpb	$0x09,%cl
00003663	sete	%ch
00003666	movzbl	%ch,%esi
00003669	addl	%edx,%esi
0000366b	cmpb	$0x0a,%cl
0000366e	sete	%dl
00003671	movzbl	%dl,%edi
00003674	addl	%esi,%edi
00003676	cmpb	$0x0d,%cl
00003679	sete	%dl
0000367c	movzbl	%dl,%edx
0000367f	addl	%edi,%edx
00003681	cmpb	$0x22,%cl
00003684	sete	%ch
00003687	movzbl	%ch,%esi
0000368a	addl	%edx,%esi
0000368c	cmpb	$0x5c,%cl
0000368f	sete	%cl
00003692	movzbl	%cl,%ecx
00003695	leal	0x01(%ecx,%esi),%edx
00003699	movb	(%eax),%cl
0000369b	incl	%eax
0000369c	testb	%cl,%cl
0000369e	jne	0x00003660
000036a0	testl	%edx,%edx
000036a2	movl	$0xffffffff,%eax
000036a7	cmovnsl	%edx,%eax
000036aa	movl	%eax,(%esp)
000036ad	calll	operator new[](unsigned long)
000036b2	testb	%bl,%bl
000036b4	jne	0x000036ba
000036b6	movl	%eax,%ecx
000036b8	jmp	0x0000370c
000036ba	movl	0xec(%ebp),%ecx
000036bd	leal	s_BackSlashMap-0x363e+0x00000001(%ecx),%edx
000036c3	movl	%eax,%ecx
000036c5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000036d0	movl	%edx,%edi
000036d2	jmp	0x000036e3
000036d4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000036e0	addl	$0x02,%edi
000036e3	movb	0xff(%edi),%bh
000036e6	testb	%bh,%bh
000036e8	je	0x000036fb
000036ea	cmpb	%bl,%bh
000036ec	jne	0x000036e0
000036ee	movb	$0x5c,(%ecx)
000036f1	movb	(%edi),%bl
000036f3	movb	%bl,0x01(%ecx)
000036f6	addl	$0x02,%ecx
000036f9	jmp	0x000036fe
000036fb	movb	%bl,(%ecx)
000036fd	incl	%ecx
000036fe	movl	0xf0(%ebp),%esi
00003701	movb	0x01(%esi),%bl
00003704	incl	%esi
00003705	movl	%esi,0xf0(%ebp)
00003708	testb	%bl,%bl
0000370a	jne	0x000036d0
0000370c	movb	_V_memset(char const*, int, void*, int, int),(%ecx)
0000370f	addl	$0x0c,%esp
00003712	popl	%esi
00003713	popl	%edi
00003714	popl	%ebx
00003715	popl	%ebp
00003716	ret
00003717	movl	$0x00000001,(%esp)
0000371e	calll	operator new[](unsigned long)
00003723	movl	%eax,%ecx
00003725	jmp	0x0000370c
00003727	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_qsort_s(void*, unsigned long, unsigned long, int (*)(void*, void const*, void const*), void*):
00003730	pushl	%ebp
00003731	movl	%esp,%ebp
00003733	subl	$0x18,%esp
00003736	movl	0x14(%ebp),%eax
00003739	movl	%eax,0x10(%esp)
0000373d	movl	0x18(%ebp),%eax
00003740	movl	%eax,0x0c(%esp)
00003744	movl	0x10(%ebp),%eax
00003747	movl	%eax,0x08(%esp)
0000374b	movl	0x0c(%ebp),%eax
0000374e	movl	%eax,0x04(%esp)
00003752	movl	0x08(%ebp),%eax
00003755	movl	%eax,(%esp)
00003758	calll	_qsort_r
0000375d	addl	$0x18,%esp
00003760	popl	%ebp
00003761	ret
00003762	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedDateAndTime(long, char*, int, char*, int):
00003770	pushl	%ebp
00003771	movl	%esp,%ebp
00003773	pushl	%ebx
00003774	pushl	%edi
00003775	pushl	%esi
00003776	subl	$0x7c,%esp
00003779	calll	0x0000377e
0000377e	popl	%esi
0000377f	movl	0x08(%ebp),%eax
00003782	movl	%eax,0xf0(%ebp)
00003785	testl	%eax,%eax
00003787	jg	0x000037a0
00003789	leal	0xf0(%ebp),%eax
0000378c	movl	%eax,(%esp)
0000378f	calll	_time
00003794	xorb	%dl,%dl
00003796	cmpl	_V_memset(char const*, int, void*, int, int),0xf0(%ebp)
0000379a	je	0x000038b8
000037a0	movl	0x0c(%ebp),%edi
000037a3	leal	_V_strlen(char const*, int, char const*)(%ebp),%eax
000037a6	movl	%eax,0x04(%esp)
000037aa	leal	0xf0(%ebp),%eax
000037ad	movl	%eax,(%esp)
000037b0	calll	_Plat_localtime
000037b5	movl	0x28(%eax),%ecx
000037b8	movl	%ecx,0xb8(%ebp)
000037bb	movsd	0x20(%eax),%xmm0
000037c0	movsd	%xmm0,0xb0(%ebp)
000037c5	movsd	0x18(%eax),%xmm0
000037ca	movsd	%xmm0,0xa8(%ebp)
000037cf	movsd	0x10(%eax),%xmm0
000037d4	movsd	%xmm0,0xa0(%ebp)
000037d9	movsd	(%eax),%xmm0
000037dd	movsd	0x08(%eax),%xmm1
000037e2	movsd	%xmm1,0x98(%ebp)
000037e7	movsd	%xmm0,_V_memcmp(char const*, int, void const*, void const*, int)(%ebp)
000037ec	testl	%edi,%edi
000037ee	je	0x0000381d
000037f0	movl	0x10(%ebp),%eax
000037f3	movb	_V_memset(char const*, int, void*, int, int),(%edi)
000037f6	leal	_V_memcmp(char const*, int, void const*, void const*, int)(%ebp),%ecx
000037f9	movl	%ecx,0x0c(%esp)
000037fd	leal	0x136c9-0x377e(%esi),%ecx
00003803	movl	%ecx,0x08(%esp)
00003807	movl	%eax,0x04(%esp)
0000380b	movl	%edi,(%esp)
0000380e	calll	_strftime$UNIX2003
00003813	xorb	%dl,%dl
00003815	testl	%eax,%eax
00003817	je	0x000038b8
0000381d	movl	0x14(%ebp),%eax
00003820	movb	$0x01,%dl
00003822	testl	%eax,%eax
00003824	je	0x000038b8
0000382a	movl	0x18(%ebp),%ebx
0000382d	movl	%eax,%ecx
0000382f	movb	_V_memset(char const*, int, void*, int, int),(%ecx)
00003832	leal	_V_memcmp(char const*, int, void const*, void const*, int)(%ebp),%eax
00003835	movl	%eax,0x0c(%esp)
00003839	leal	0x136d2-0x377e(%esi),%eax
0000383f	movl	%eax,0x08(%esp)
00003843	leal	0xfa(%ebx),%eax
00003846	movl	%eax,0x04(%esp)
0000384a	movl	%ecx,(%esp)
0000384d	calll	_strftime$UNIX2003
00003852	xorb	%dl,%dl
00003854	testl	%eax,%eax
00003856	je	0x000038b8
00003858	movl	0x98(%ebp),%edi
0000385b	movl	0x14(%ebp),%eax
0000385e	movl	%eax,(%esp)
00003861	calll	_strlen
00003866	cmpl	$0x0c,%edi
00003869	leal	0x04(%eax),%edx
0000386c	movl	$0x00000004,%ecx
00003871	jl	0x0000388e
00003873	cmpl	%ebx,%edx
00003875	jb	0x00003882
00003877	decl	%ebx
00003878	subl	%eax,%ebx
0000387a	movb	$0x01,%dl
0000387c	testl	%ebx,%ebx
0000387e	movl	%ebx,%ecx
00003880	jle	0x000038b8
00003882	movl	%ecx,0x08(%esp)
00003886	leal	0x136d9-0x377e(%esi),%eax
0000388c	jmp	0x000038a7
0000388e	cmpl	%ebx,%edx
00003890	jb	0x0000389d
00003892	decl	%ebx
00003893	subl	%eax,%ebx
00003895	movb	$0x01,%dl
00003897	testl	%ebx,%ebx
00003899	movl	%ebx,%ecx
0000389b	jle	0x000038b8
0000389d	movl	%ecx,0x08(%esp)
000038a1	leal	0x136de-0x377e(%esi),%eax
000038a7	movl	%eax,0x04(%esp)
000038ab	movl	0x14(%ebp),%eax
000038ae	movl	%eax,(%esp)
000038b1	calll	_strncat
000038b6	movb	$0x01,%dl
000038b8	movzbl	%dl,%eax
000038bb	addl	$0x7c,%esp
000038be	popl	%esi
000038bf	popl	%edi
000038c0	popl	%ebx
000038c1	popl	%ebp
000038c2	ret
000038c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedDate(long, char*, int):
000038d0	pushl	%ebp
000038d1	movl	%esp,%ebp
000038d3	subl	$0x18,%esp
000038d6	movl	0x10(%ebp),%eax
000038d9	movl	%eax,0x08(%esp)
000038dd	movl	0x0c(%ebp),%eax
000038e0	movl	%eax,0x04(%esp)
000038e4	movl	0x08(%ebp),%eax
000038e7	movl	%eax,(%esp)
000038ea	movl	_V_memset(char const*, int, void*, int, int),0x10(%esp)
000038f2	movl	_V_memset(char const*, int, void*, int, int),0x0c(%esp)
000038fa	calll	BGetLocalFormattedDateAndTime(long, char*, int, char*, int)
000038ff	movzbl	%al,%eax
00003902	addl	$0x18,%esp
00003905	popl	%ebp
00003906	ret
00003907	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedTime(long, char*, int):
00003910	pushl	%ebp
00003911	movl	%esp,%ebp
00003913	subl	$0x18,%esp
00003916	movl	0x10(%ebp),%eax
00003919	movl	%eax,0x10(%esp)
0000391d	movl	0x0c(%ebp),%eax
00003920	movl	%eax,0x0c(%esp)
00003924	movl	0x08(%ebp),%eax
00003927	movl	%eax,(%esp)
0000392a	movl	_V_memset(char const*, int, void*, int, int),0x08(%esp)
00003932	movl	_V_memset(char const*, int, void*, int, int),0x04(%esp)
0000393a	calll	BGetLocalFormattedDateAndTime(long, char*, int, char*, int)
0000393f	movzbl	%al,%eax
00003942	addl	$0x18,%esp
00003945	popl	%ebp
00003946	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(tier1.o):
(__TEXT,__text) section
ConnectTier1Libraries(void* (**)(char const*, int*), int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%esi
0000000f	movb	__ZL12s_bConnected.b-0xe(%esi),%al
00000015	testb	%al,%al
00000017	jne	0x00000086
00000019	movl	0x0c(%ebp),%edi
0000001c	movb	$0x01,__ZL12s_bConnected.b-0xe(%esi)
00000023	testl	%edi,%edi
00000025	jle	0x00000086
00000027	movl	0x08(%ebp),%ebx
0000002a	nopw	ConnectTier1Libraries(void* (**)(char const*, int*), int)(%eax,%eax)
00000030	cmpl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pCVar-0xe(%esi)
0000003a	jne	0x0000005b
0000003c	leal	0x11db-0xe(%esi),%eax
00000042	movl	%eax,(%esp)
00000045	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),0x04(%esp)
0000004d	call	(%ebx)
0000004f	movl	%eax,_g_pCVar-0xe(%esi)
00000055	movl	%eax,_cvar-0xe(%esi)
0000005b	cmpl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pProcessUtils-0xe(%esi)
00000065	jne	0x00000080
00000067	leal	0x11ea-0xe(%esi),%eax
0000006d	movl	%eax,(%esp)
00000070	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),0x04(%esp)
00000078	call	(%ebx)
0000007a	movl	%eax,_g_pProcessUtils-0xe(%esi)
00000080	addl	$0x04,%ebx
00000083	decl	%edi
00000084	jne	0x00000030
00000086	addl	$0x0c,%esp
00000089	popl	%esi
0000008a	popl	%edi
0000008b	popl	%ebx
0000008c	popl	%ebp
0000008d	ret
0000008e	nop
DisconnectTier1Libraries():
00000090	calll	0x00000095
00000095	popl	%eax
00000096	movb	__ZL12s_bConnected.b-0x95(%eax),%cl
0000009c	cmpb	$0x01,%cl
0000009f	jne	0x000000c6
000000a1	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_cvar-0x95(%eax)
000000ab	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pCVar-0x95(%eax)
000000b5	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pProcessUtils-0x95(%eax)
000000bf	movb	ConnectTier1Libraries(void* (**)(char const*, int*), int),__ZL12s_bConnected.b-0x95(%eax)
000000c6	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(tokenreader.o):
(__TEXT,__text) section
TokenReader::TokenReader():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	movl	0x08(%ebp),%esi
00000012	leal	0x0000031c(%esi),%ebx
00000018	movl	%ebx,(%esp)
0000001b	calll	std::ios_base::ios_base()
00000020	movl	0x122f8-0xe(%edi),%eax
00000026	addl	$0x08,%eax
00000029	movl	%eax,0x0000031c(%esi)
0000002f	movl	TokenReader::TokenReader(),0x0000038c(%esi)
00000039	movb	TokenReader::TokenReader(),0x00000390(%esi)
00000040	movb	TokenReader::TokenReader(),0x00000391(%esi)
00000047	movl	TokenReader::TokenReader(),0x00000398(%esi)
00000051	movl	TokenReader::TokenReader(),0x00000394(%esi)
0000005b	movl	TokenReader::TokenReader(),0x000003a0(%esi)
00000065	movl	TokenReader::TokenReader(),0x0000039c(%esi)
0000006f	leal	VTT for TokenReader-0xe+0x00000004(%edi),%eax
00000075	movl	%eax,0x04(%esp)
00000079	movl	%esi,(%esp)
0000007c	calll	std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()
00000081	leal	vtable for TokenReader-0xe+0x0000000c(%edi),%eax
00000087	movl	%eax,(%esi)
00000089	leal	vtable for TokenReader-0xe+0x00000020(%edi),%eax
0000008f	movl	%eax,0x0000031c(%esi)
00000095	movb	TokenReader::TokenReader(),0x00000214(%esi)
0000009c	movl	$0x00000001,0x0000020c(%esi)
000000a6	movl	TokenReader::TokenReader(),0x00000210(%esi)
000000b0	movb	TokenReader::TokenReader(),0x00000314(%esi)
000000b7	addl	$0x0c,%esp
000000ba	popl	%esi
000000bb	popl	%edi
000000bc	popl	%ebx
000000bd	popl	%ebp
000000be	ret
000000bf	movl	%eax,%esi
000000c1	movl	%ebx,(%esp)
000000c4	calll	std::ios_base::~ios_base()
000000c9	movl	%esi,(%esp)
000000cc	calll	__Unwind_Resume
000000d1	calll	std::terminate()
000000d6	nopw	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::TokenReader():
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%edi
000000e4	pushl	%esi
000000e5	subl	$0x10,%esp
000000e8	movl	0x0c(%ebp),%edi
000000eb	leal	0x04(%edi),%eax
000000ee	movl	%eax,0x04(%esp)
000000f2	movl	0x08(%ebp),%esi
000000f5	movl	%esi,(%esp)
000000f8	calll	std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()
000000fd	movl	(%edi),%eax
000000ff	movl	%eax,(%esi)
00000101	movl	0xf4(%eax),%eax
00000104	movl	0x14(%edi),%ecx
00000107	movl	%ecx,(%esi,%eax)
0000010a	movb	TokenReader::TokenReader(),0x00000214(%esi)
00000111	movl	$0x00000001,0x0000020c(%esi)
0000011b	movl	TokenReader::TokenReader(),0x00000210(%esi)
00000125	movb	TokenReader::TokenReader(),0x00000314(%esi)
0000012c	addl	$0x10,%esp
0000012f	popl	%esi
00000130	popl	%edi
00000131	popl	%ebp
00000132	ret
00000133	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::Open(char const*):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	movl	0x0c(%ebp),%edi
0000014b	movl	%edi,0x04(%esp)
0000014f	movl	0x08(%ebp),%esi
00000152	leal	0x08(%esi),%eax
00000155	movl	%eax,(%esp)
00000158	movl	$0x0000000c,0x08(%esp)
00000160	calll	std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
00000165	movl	(%esi),%ecx
00000167	movl	0xf4(%ecx),%edx
0000016a	leal	(%esi,%edx),%ecx
0000016d	testl	%eax,%eax
0000016f	jne	0x00000181
00000171	movl	0x14(%edx,%esi),%eax
00000175	orl	$0x04,%eax
00000178	movl	%eax,0x04(%esp)
0000017c	movl	%ecx,(%esp)
0000017f	jmp	0x0000018c
00000181	movl	%ecx,(%esp)
00000184	movl	TokenReader::TokenReader(),0x04(%esp)
0000018c	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000191	movl	%edi,0x04(%esp)
00000195	leal	0x00000214(%esi),%eax
0000019b	movl	%eax,(%esp)
0000019e	movl	$0x00000080,0x08(%esp)
000001a6	calll	V_strncpy(char*, char const*, int)
000001ab	movl	$0x00000001,0x0000020c(%esi)
000001b5	movl	TokenReader::TokenReader(),0x00000210(%esi)
000001bf	movb	TokenReader::TokenReader(),0x00000314(%esi)
000001c6	addl	$0x54,%esi
000001c9	movl	%esi,(%esp)
000001cc	calll	std::__basic_file<char>::is_open() const
000001d1	movzbl	%al,%eax
000001d4	addl	$0x10,%esp
000001d7	popl	%esi
000001d8	popl	%edi
000001d9	popl	%ebp
000001da	ret
000001db	movl	%eax,(%esp)
000001de	calll	___cxa_call_unexpected
000001e3	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::Close():
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	pushl	%esi
000001f4	subl	$0x14,%esp
000001f7	movl	0x08(%ebp),%esi
000001fa	leal	0x08(%esi),%eax
000001fd	movl	%eax,(%esp)
00000200	calll	std::basic_filebuf<char, std::char_traits<char> >::close()
00000205	testl	%eax,%eax
00000207	jne	0x00000223
00000209	movl	(%esi),%eax
0000020b	movl	0xf4(%eax),%eax
0000020e	movl	0x14(%esi,%eax),%ecx
00000212	orl	$0x04,%ecx
00000215	movl	%ecx,0x04(%esp)
00000219	addl	%eax,%esi
0000021b	movl	%esi,(%esp)
0000021e	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000223	addl	$0x14,%esp
00000226	popl	%esi
00000227	popl	%ebp
00000228	ret
00000229	nopl	TokenReader::TokenReader()(%eax)
TokenReader::Error(char*, ...):
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	pushl	%edi
00000234	pushl	%esi
00000235	subl	$0x20,%esp
00000238	calll	0x0000023d
0000023d	popl	%eax
0000023e	movl	0x08(%ebp),%edi
00000241	movl	0x0000020c(%edi),%ecx
00000247	movl	%ecx,0x10(%esp)
0000024b	leal	0x00000214(%edi),%ecx
00000251	movl	%ecx,0x0c(%esp)
00000255	leal	0x10948-0x23d(%eax),%ecx
0000025b	movl	%ecx,0x08(%esp)
0000025f	leal	TokenReader::Error(char*, ...)::szErrorBuf-0x23d(%eax),%esi
00000265	movl	%esi,(%esp)
00000268	movl	$0x00000100,0x04(%esp)
00000270	calll	V_snprintf(char*, int, char const*, ...)
00000275	movl	0x0c(%ebp),%eax
00000278	movl	%eax,0x04(%esp)
0000027c	movl	%esi,(%esp)
0000027f	movl	$0xffffffff,0x0c(%esp)
00000287	movl	$0x00000100,0x08(%esp)
0000028f	calll	V_strncat(char*, char const*, unsigned long, int)
00000294	incl	0x00000210(%edi)
0000029a	movl	%esi,%eax
0000029c	addl	$0x20,%esp
0000029f	popl	%esi
000002a0	popl	%edi
000002a1	popl	%ebp
000002a2	ret
000002a3	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::GetString(char*, int):
000002b0	pushl	%ebp
000002b1	movl	%esp,%ebp
000002b3	pushl	%ebx
000002b4	pushl	%edi
000002b5	pushl	%esi
000002b6	subl	$0x0000041c,%esp
000002bc	calll	0x000002c1
000002c1	popl	%eax
000002c2	movl	0x12300-0x2c1(%eax),%eax
000002c8	movl	%eax,0xfffffbec(%ebp)
000002ce	movl	(%eax),%eax
000002d0	movl	%eax,0xf0(%ebp)
000002d3	movl	$0xfffffffd,%eax
000002d8	movl	0x10(%ebp),%ebx
000002db	testl	%ebx,%ebx
000002dd	jle	0x00000402
000002e3	movl	0x0c(%ebp),%edi
000002e6	movl	0x08(%ebp),%esi
000002e9	jmp	0x00000339
000002eb	nopl	TokenReader::TokenReader()(%eax,%eax)
000002f0	movl	%esi,(%esp)
000002f3	calll	std::basic_istream<char, std::char_traits<char> >::peek()
000002f8	cmpl	$0x22,%eax
000002fb	jne	0x00000339
000002fd	movl	%esi,(%esp)
00000300	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000305	movl	%esi,(%esp)
00000308	calll	TokenReader::SkipWhiteSpace()
0000030d	cmpb	$0x01,%al
0000030f	jne	0x000003fa
00000315	movl	%esi,(%esp)
00000318	calll	std::basic_istream<char, std::char_traits<char> >::peek()
0000031d	cmpl	$0x22,%eax
00000320	jne	0x000003fa
00000326	jmp	0x00000331
00000328	testb	%cl,%cl
0000032a	je	0x000002f0
0000032c	jmp	0x000003e0
00000331	movl	%esi,(%esp)
00000334	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000339	leal	0xfffffbf0(%ebp),%eax
0000033f	movl	%eax,0x04(%esp)
00000343	movl	%esi,(%esp)
00000346	movl	$0x00000022,0x0c(%esp)
0000034e	movl	$0x00000400,0x08(%esp)
00000356	calll	std::basic_istream<char, std::char_traits<char> >::get(char*, int, char)
0000035b	movl	(%esi),%eax
0000035d	movl	0xf4(%eax),%ecx
00000360	movl	0x14(%esi,%ecx),%edx
00000364	movl	$0xffffffff,%eax
00000369	testb	$0x02,%dl
0000036c	jne	0x00000402
00000372	testb	$0x05,%dl
00000375	je	0x00000389
00000377	addl	%esi,%ecx
00000379	movl	%ecx,(%esp)
0000037c	movl	TokenReader::TokenReader(),0x04(%esp)
00000384	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000389	leal	0xfffffbf0(%ebp),%eax
0000038f	jmp	0x000003b3
00000391	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
000003a0	movb	%cl,(%edi)
000003a2	incl	%eax
000003a3	jmp	0x000003b1
000003a5	cmpb	$0x6e,0x01(%eax)
000003a9	jne	0x000003ae
000003ab	movb	$0x0a,(%edi)
000003ae	addl	$0x02,%eax
000003b1	decl	%ebx
000003b2	incl	%edi
000003b3	movb	(%eax),%cl
000003b5	testb	%cl,%cl
000003b7	setne	%dl
000003ba	cmpl	$0x02,%ebx
000003bd	jl	0x00000328
000003c3	cmpb	$0x01,%dl
000003c6	jne	0x00000328
000003cc	cmpb	$0x5c,%cl
000003cf	je	0x000003a5
000003d1	cmpb	$0x0d,%cl
000003d4	jne	0x000003a0
000003d6	movb	TokenReader::TokenReader(),(%edi)
000003d9	movl	$0xfffffffc,%eax
000003de	jmp	0x00000402
000003e0	movl	%esi,(%esp)
000003e3	movl	$0x00000022,0x08(%esp)
000003eb	movl	$0x00000400,0x04(%esp)
000003f3	calll	std::basic_istream<char, std::char_traits<char> >::ignore(int, int)
000003f8	jmp	0x000003d6
000003fa	movb	TokenReader::TokenReader(),(%edi)
000003fd	movl	$0x00000002,%eax
00000402	movl	0xfffffbec(%ebp),%ecx
00000408	movl	(%ecx),%ecx
0000040a	cmpl	0xf0(%ebp),%ecx
0000040d	jne	0x0000041a
0000040f	addl	$0x0000041c,%esp
00000415	popl	%esi
00000416	popl	%edi
00000417	popl	%ebx
00000418	popl	%ebp
00000419	ret
0000041a	calll	___stack_chk_fail
0000041f	nop
TokenReader::SkipWhiteSpace():
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%esi
00000425	subl	$0x10,%esp
00000428	xorb	%bl,%bl
0000042a	movl	0x08(%ebp),%esi
0000042d	jmp	0x0000043c
0000042f	nop
00000430	cmpb	$0x09,%al
00000432	je	0x0000043c
00000434	cmpb	$0x0a,%al
00000436	je	0x0000045e
00000438	cmpb	$0x0d,%al
0000043a	jne	0x0000046a
0000043c	movl	%esi,(%esp)
0000043f	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000444	cmpb	$0x2a,%al
00000446	jg	0x00000456
00000448	cmpb	$0x1f,%al
0000044a	jg	0x00000466
0000044c	cmpb	$0x08,%al
0000044e	jg	0x00000430
00000450	testb	%al,%al
00000452	je	0x0000043c
00000454	jmp	0x0000046a
00000456	cmpb	$0x2b,%al
00000458	jne	0x0000046a
0000045a	movb	$0x01,%bl
0000045c	jmp	0x0000043c
0000045e	incl	0x0000020c(%esi)
00000464	jmp	0x0000043c
00000466	cmpb	$0x20,%al
00000468	je	0x0000043c
0000046a	movl	(%esi),%ecx
0000046c	movl	0xf4(%ecx),%ecx
0000046f	testb	$0x02,0x14(%ecx,%esi)
00000474	jne	0x000004b6
00000476	cmpb	$0x2f,%al
00000478	jne	0x000004a7
0000047a	movl	%esi,(%esp)
0000047d	calll	std::basic_istream<char, std::char_traits<char> >::peek()
00000482	cmpl	$0x2f,%eax
00000485	jne	0x0000043c
00000487	movl	%esi,(%esp)
0000048a	movl	$0x0000000a,0x08(%esp)
00000492	movl	$0x00000400,0x04(%esp)
0000049a	calll	std::basic_istream<char, std::char_traits<char> >::ignore(int, int)
0000049f	incl	0x0000020c(%esi)
000004a5	jmp	0x0000043c
000004a7	movsbl	%al,%eax
000004aa	movl	%eax,0x04(%esp)
000004ae	movl	%esi,(%esp)
000004b1	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
000004b6	testb	%bl,%bl
000004b8	setne	%al
000004bb	movzbl	%al,%eax
000004be	addl	$0x10,%esp
000004c1	popl	%esi
000004c2	popl	%ebx
000004c3	popl	%ebp
000004c4	ret
000004c5	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::NextTokenDynamic(char**):
000004d0	pushl	%ebp
000004d1	movl	%esp,%ebp
000004d3	pushl	%ebx
000004d4	pushl	%edi
000004d5	pushl	%esi
000004d6	subl	$0x0000201c,%esp
000004dc	calll	0x000004e1
000004e1	popl	%eax
000004e2	movl	0x12300-0x4e1(%eax),%ebx
000004e8	movl	(%ebx),%eax
000004ea	movl	%eax,0xf0(%ebp)
000004ed	leal	0xffffdff0(%ebp),%esi
000004f3	movl	%esi,0x04(%esp)
000004f7	movl	0x08(%ebp),%eax
000004fa	movl	%eax,(%esp)
000004fd	movl	$0x00002000,0x08(%esp)
00000505	calll	TokenReader::NextToken(char*, int)
0000050a	movl	%eax,0xffffdfec(%ebp)
00000510	movl	%esi,(%esp)
00000513	calll	_strlen
00000518	movl	%eax,%edi
0000051a	incl	%edi
0000051b	testl	%edi,%edi
0000051d	movl	$0xffffffff,%eax
00000522	cmovnsl	%edi,%eax
00000525	movl	%eax,(%esp)
00000528	calll	operator new[](unsigned long)
0000052d	movl	0x0c(%ebp),%ecx
00000530	movl	%eax,(%ecx)
00000532	movl	%edi,0x08(%esp)
00000536	movl	%esi,0x04(%esp)
0000053a	movl	%eax,(%esp)
0000053d	calll	V_strncpy(char*, char const*, int)
00000542	movl	(%ebx),%eax
00000544	cmpl	0xf0(%ebp),%eax
00000547	jne	0x0000055a
00000549	movl	0xffffdfec(%ebp),%eax
0000054f	addl	$0x0000201c,%esp
00000555	popl	%esi
00000556	popl	%edi
00000557	popl	%ebx
00000558	popl	%ebp
00000559	ret
0000055a	calll	___stack_chk_fail
0000055f	nop
TokenReader::NextToken(char*, int):
00000560	pushl	%ebp
00000561	movl	%esp,%ebp
00000563	pushl	%ebx
00000564	pushl	%edi
00000565	pushl	%esi
00000566	subl	$0x1c,%esp
00000569	calll	0x0000056e
0000056e	popl	%eax
0000056f	movl	%eax,0xf0(%ebp)
00000572	movl	0x08(%ebp),%esi
00000575	leal	0x54(%esi),%eax
00000578	movl	%eax,(%esp)
0000057b	calll	std::__basic_file<char>::is_open() const
00000580	movb	%al,%cl
00000582	movl	$0xffffffff,%eax
00000587	cmpb	$0x01,%cl
0000058a	jne	0x00000794
00000590	movl	0x10(%ebp),%eax
00000593	movl	0x0c(%ebp),%edi
00000596	testb	$0x01,0x00000314(%esi)
0000059d	je	0x000005c7
0000059f	movb	TokenReader::TokenReader(),0x00000314(%esi)
000005a6	movl	%eax,0x08(%esp)
000005aa	leal	0x00000294(%esi),%eax
000005b0	movl	%eax,0x04(%esp)
000005b4	movl	%edi,(%esp)
000005b7	calll	V_strncpy(char*, char const*, int)
000005bc	movl	0x00000318(%esi),%eax
000005c2	jmp	0x00000794
000005c7	movl	%esi,(%esp)
000005ca	calll	TokenReader::SkipWhiteSpace()
000005cf	movl	(%esi),%eax
000005d1	movl	0xf4(%eax),%ecx
000005d4	movl	$0xffffffff,%eax
000005d9	testb	$0x07,0x14(%ecx,%esi)
000005de	jne	0x00000794
000005e4	movl	0x08(%ebp),%eax
000005e7	movl	%eax,(%esp)
000005ea	calll	std::basic_istream<char, std::char_traits<char> >::get()
000005ef	movb	%al,%bl
000005f1	movsbl	%bl,%eax
000005f4	cmpl	$0x7a,%eax
000005f7	jg	0x00000612
000005f9	cmpl	$0x5a,%eax
000005fc	jg	0x00000629
000005fe	leal	0xdf(%eax),%ecx
00000601	cmpl	$0x1f,%ecx
00000604	ja	0x00000631
00000606	movl	$0x92002fa9,%edx
0000060b	btl	%ecx,%edx
0000060e	jb	0x0000061c
00000610	jmp	0x00000631
00000612	cmpl	$0x7b,%eax
00000615	je	0x0000061c
00000617	cmpl	$0x7d,%eax
0000061a	jne	0x00000631
0000061c	movb	%bl,(%edi)
0000061e	movb	TokenReader::TokenReader(),0x01(%edi)
00000622	xorl	%eax,%eax
00000624	jmp	0x00000794
00000629	leal	0xa5(%eax),%ecx
0000062c	cmpl	$0x03,%ecx
0000062f	jb	0x0000061c
00000631	cmpb	$0x22,%bl
00000634	je	0x000007a4
0000063a	xorb	%cl,%cl
0000063c	testb	%bl,%bl
0000063e	js	0x00000653
00000640	movl	0xf0(%ebp),%ecx
00000643	movl	0x122f4-0x56e(%ecx),%ecx
00000649	movb	0x35(%ecx,%eax,4),%cl
0000064d	andb	$0x04,%cl
00000650	shrb	$0x02,%cl
00000653	movl	$0x00000001,%eax
00000658	subl	%edi,%eax
0000065a	movl	%eax,0xec(%ebp)
0000065d	testb	%cl,%cl
0000065f	jne	0x00000670
00000661	cmpb	$0x2d,%bl
00000664	jne	0x0000072b
0000066a	nopw	TokenReader::TokenReader()(%eax,%eax)
00000670	movl	0xec(%ebp),%eax
00000673	leal	(%eax,%edi),%eax
00000676	cmpl	0x10(%ebp),%eax
00000679	jge	0x0000067e
0000067b	movb	%bl,(%edi)
0000067d	incl	%edi
0000067e	movl	0x08(%ebp),%eax
00000681	movl	%eax,(%esp)
00000684	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000689	movb	%al,%bl
0000068b	movl	$0xfffffffd,%eax
00000690	cmpb	$0x2d,%bl
00000693	je	0x00000794
00000699	movsbl	%bl,%esi
0000069c	testb	%bl,%bl
0000069e	js	0x000006be
000006a0	movl	0xf0(%ebp),%eax
000006a3	movl	0x122f4-0x56e(%eax),%eax
000006a9	movl	0x34(%eax,%esi,4),%ecx
000006ad	testb	$0x04,%ch
000006b0	jne	0x00000670
000006b2	testb	%bl,%bl
000006b4	js	0x000006be
000006b6	andl	$0x00000100,%ecx
000006bc	jmp	0x000006d0
000006be	movl	%esi,(%esp)
000006c1	movl	$0x00000100,0x04(%esp)
000006c9	calll	___maskrune
000006ce	movl	%eax,%ecx
000006d0	movl	$0xfffffffd,%eax
000006d5	testl	%ecx,%ecx
000006d7	jne	0x00000794
000006dd	cmpb	$0x5f,%bl
000006e0	je	0x00000794
000006e6	movl	%esi,0x04(%esp)
000006ea	movl	0x08(%ebp),%eax
000006ed	movl	%eax,(%esp)
000006f0	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
000006f5	movb	TokenReader::TokenReader(),(%edi)
000006f8	movl	$0x00000001,%eax
000006fd	jmp	0x00000794
00000702	nopw	%cs:TokenReader::TokenReader()(%eax,%eax)
00000710	movl	0xec(%ebp),%eax
00000713	leal	(%eax,%edi),%eax
00000716	cmpl	0x10(%ebp),%eax
00000719	jge	0x0000071e
0000071b	movb	%bl,(%edi)
0000071d	incl	%edi
0000071e	movl	0x08(%ebp),%eax
00000721	movl	%eax,(%esp)
00000724	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000729	movb	%al,%bl
0000072b	movsbl	%bl,%esi
0000072e	testb	%bl,%bl
00000730	js	0x00000748
00000732	movl	0xf0(%ebp),%eax
00000735	movl	0x122f4-0x56e(%eax),%eax
0000073b	movl	0x34(%eax,%esi,4),%eax
0000073f	movl	$0x00000100,%ecx
00000744	andl	%ecx,%eax
00000746	jmp	0x00000758
00000748	movl	%esi,(%esp)
0000074b	movl	$0x00000100,0x04(%esp)
00000753	calll	___maskrune
00000758	testl	%eax,%eax
0000075a	jne	0x00000710
0000075c	xorb	%al,%al
0000075e	testb	%bl,%bl
00000760	js	0x00000774
00000762	movl	0xf0(%ebp),%eax
00000765	movl	0x122f4-0x56e(%eax),%eax
0000076b	movb	0x35(%eax,%esi,4),%al
0000076f	andb	$0x04,%al
00000771	shrb	$0x02,%al
00000774	testb	%al,%al
00000776	jne	0x00000710
00000778	cmpb	$0x5f,%bl
0000077b	je	0x00000710
0000077d	movl	%esi,0x04(%esp)
00000781	movl	0x08(%ebp),%eax
00000784	movl	%eax,(%esp)
00000787	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
0000078c	movb	TokenReader::TokenReader(),(%edi)
0000078f	movl	$0x00000003,%eax
00000794	addl	$0x1c,%esp
00000797	popl	%esi
00000798	popl	%edi
00000799	popl	%ebx
0000079a	popl	%ebp
0000079b	ret
0000079c	movl	%eax,(%esp)
0000079f	calll	___cxa_call_unexpected
000007a4	addl	$0x1c,%esp
000007a7	popl	%esi
000007a8	popl	%edi
000007a9	popl	%ebx
000007aa	popl	%ebp
000007ab	jmp	TokenReader::GetString(char*, int)
TokenReader::IgnoreTill(trtoken_t, char const*):
000007b0	pushl	%ebp
000007b1	movl	%esp,%ebp
000007b3	pushl	%ebx
000007b4	pushl	%edi
000007b5	pushl	%esi
000007b6	subl	$0x0000041c,%esp
000007bc	calll	0x000007c1
000007c1	popl	%eax
000007c2	movl	0x12300-0x7c1(%eax),%eax
000007c8	movl	%eax,0xfffffbec(%ebp)
000007ce	movl	(%eax),%eax
000007d0	movl	%eax,0xf0(%ebp)
000007d3	movl	0x0c(%ebp),%esi
000007d6	movl	0x08(%ebp),%edi
000007d9	leal	0xfffffbf0(%ebp),%ebx
000007df	nop
000007e0	movl	%ebx,0x04(%esp)
000007e4	movl	%edi,(%esp)
000007e7	movl	$0x00000400,0x08(%esp)
000007ef	calll	TokenReader::NextToken(char*, int)
000007f4	cmpl	$0xff,%eax
000007f7	je	0x0000083a
000007f9	cmpl	%esi,%eax
000007fb	jne	0x000007e0
000007fd	movl	%ebx,0x04(%esp)
00000801	movl	0x10(%ebp),%eax
00000804	movl	%eax,(%esp)
00000807	calll	_strcasecmp
0000080c	testl	%eax,%eax
0000080e	jne	0x000007e0
00000810	movl	%esi,0x00000318(%edi)
00000816	movl	0x10(%ebp),%eax
00000819	movl	%eax,0x04(%esp)
0000081d	leal	0x00000294(%edi),%eax
00000823	movl	%eax,(%esp)
00000826	movl	$0x00000080,0x08(%esp)
0000082e	calll	V_strncpy(char*, char const*, int)
00000833	movb	$0x01,0x00000314(%edi)
0000083a	movl	0xfffffbec(%ebp),%eax
00000840	movl	(%eax),%eax
00000842	cmpl	0xf0(%ebp),%eax
00000845	jne	0x00000852
00000847	addl	$0x0000041c,%esp
0000084d	popl	%esi
0000084e	popl	%edi
0000084f	popl	%ebx
00000850	popl	%ebp
00000851	ret
00000852	calll	___stack_chk_fail
00000857	nopw	TokenReader::TokenReader()(%eax,%eax)
TokenReader::Stuff(trtoken_t, char const*):
00000860	pushl	%ebp
00000861	movl	%esp,%ebp
00000863	pushl	%esi
00000864	subl	$0x14,%esp
00000867	movl	0x0c(%ebp),%eax
0000086a	movl	0x08(%ebp),%esi
0000086d	movl	%eax,0x00000318(%esi)
00000873	movl	0x10(%ebp),%eax
00000876	movl	%eax,0x04(%esp)
0000087a	leal	0x00000294(%esi),%eax
00000880	movl	%eax,(%esp)
00000883	movl	$0x00000080,0x08(%esp)
0000088b	calll	V_strncpy(char*, char const*, int)
00000890	movb	$0x01,0x00000314(%esi)
00000897	addl	$0x14,%esp
0000089a	popl	%esi
0000089b	popl	%ebp
0000089c	ret
0000089d	nopl	(%eax)
TokenReader::Expecting(trtoken_t, char const*):
000008a0	pushl	%ebp
000008a1	movl	%esp,%ebp
000008a3	pushl	%edi
000008a4	pushl	%esi
000008a5	subl	$0x00000410,%esp
000008ab	calll	0x000008b0
000008b0	popl	%eax
000008b1	movl	0x12300-0x8b0(%eax),%esi
000008b7	movl	(%esi),%eax
000008b9	movl	%eax,0xf4(%ebp)
000008bc	leal	0xfffffbf4(%ebp),%edi
000008c2	movl	%edi,0x04(%esp)
000008c6	movl	0x08(%ebp),%eax
000008c9	movl	%eax,(%esp)
000008cc	movl	$0x00000400,0x08(%esp)
000008d4	calll	TokenReader::NextToken(char*, int)
000008d9	xorb	%cl,%cl
000008db	cmpl	0x0c(%ebp),%eax
000008de	jne	0x000008f7
000008e0	movl	0x10(%ebp),%eax
000008e3	movl	%edi,0x04(%esp)
000008e7	movl	%eax,(%esp)
000008ea	calll	_strcasecmp
000008ef	xorb	%cl,%cl
000008f1	testl	%eax,%eax
000008f3	jne	0x000008f7
000008f5	movb	$0x01,%cl
000008f7	movl	(%esi),%eax
000008f9	cmpl	0xf4(%ebp),%eax
000008fc	jne	0x0000090b
000008fe	movzbl	%cl,%eax
00000901	addl	$0x00000410,%esp
00000907	popl	%esi
00000908	popl	%edi
00000909	popl	%ebp
0000090a	ret
0000090b	calll	___stack_chk_fail
TokenReader::PeekTokenType(char*, int):
00000910	pushl	%ebp
00000911	movl	%esp,%ebp
00000913	pushl	%esi
00000914	subl	$0x14,%esp
00000917	movl	0x08(%ebp),%esi
0000091a	testb	$0x01,0x00000314(%esi)
00000921	jne	0x0000094a
00000923	movl	%esi,(%esp)
00000926	leal	0x00000294(%esi),%eax
0000092c	movl	%eax,0x04(%esp)
00000930	movl	$0x00000080,0x08(%esp)
00000938	calll	TokenReader::NextToken(char*, int)
0000093d	movl	%eax,0x00000318(%esi)
00000943	movb	$0x01,0x00000314(%esi)
0000094a	movl	0x0c(%ebp),%eax
0000094d	testl	%eax,%eax
0000094f	je	0x0000096a
00000951	movl	0x10(%ebp),%ecx
00000954	movl	%ecx,0x08(%esp)
00000958	leal	0x00000294(%esi),%ecx
0000095e	movl	%ecx,0x04(%esp)
00000962	movl	%eax,(%esp)
00000965	calll	V_strncpy(char*, char const*, int)
0000096a	movl	0x00000318(%esi),%eax
00000970	addl	$0x14,%esp
00000973	popl	%esi
00000974	popl	%ebp
00000975	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(uniqueid.o):
(__TEXT,__text) section
CreateUniqueId(UniqueId_t*):
00000000	movl	0x04(%esp),%eax
00000004	movl	CreateUniqueId(UniqueId_t*),0x04(%eax)
0000000b	movl	CreateUniqueId(UniqueId_t*),(%eax)
00000011	movl	CreateUniqueId(UniqueId_t*),0x0c(%eax)
00000018	movl	CreateUniqueId(UniqueId_t*),0x08(%eax)
0000001f	ret
UniqueIdFromString(UniqueId_t*, char const*, int):
00000020	pushl	%ebp
00000021	movl	%esp,%ebp
00000023	pushl	%ebx
00000024	pushl	%edi
00000025	pushl	%esi
00000026	subl	$0x1c,%esp
00000029	calll	0x0000002e
0000002e	popl	%eax
0000002f	movl	%eax,0xe8(%ebp)
00000032	movl	0x58c2-0x2e(%eax),%eax
00000038	movl	%eax,0xe4(%ebp)
0000003b	movl	(%eax),%eax
0000003d	movl	%eax,0xf0(%ebp)
00000040	movl	0x10(%ebp),%ebx
00000043	movl	0x0c(%ebp),%esi
00000046	testl	%ebx,%ebx
00000048	jne	0x0000005a
0000004a	subl	$0x10,%esp
0000004d	movl	%esi,(%esp)
00000050	calll	_strlen
00000055	addl	$0x10,%esp
00000058	movl	%eax,%ebx
0000005a	leal	0x10(%ebx),%eax
0000005d	andl	$0xf0,%eax
00000060	movl	%esp,%edi
00000062	subl	%eax,%edi
00000064	movl	%edi,%esp
00000066	subl	$0x10,%esp
00000069	leal	0x01(%ebx),%eax
0000006c	movl	%eax,0x08(%esp)
00000070	movl	%esi,0x04(%esp)
00000074	movl	%edi,(%esp)
00000077	calll	V_strncpy(char*, char const*, int)
0000007c	addl	$0x10,%esp
0000007f	nop
00000080	movl	%ebx,%esi
00000082	testl	%esi,%esi
00000084	jle	0x000000c2
00000086	leal	0xff(%esi),%ebx
00000089	movsbl	0xff(%edi,%esi),%eax
0000008e	testl	%eax,%eax
00000090	js	0x000000a8
00000092	movl	0xe8(%ebp),%ecx
00000095	movl	0x58be-0x2e(%ecx),%ecx
0000009b	movl	0x34(%ecx,%eax,4),%eax
0000009f	movl	$0x00004000,%ecx
000000a4	andl	%ecx,%eax
000000a6	jmp	0x000000be
000000a8	subl	$0x10,%esp
000000ab	movl	%eax,(%esp)
000000ae	movl	$0x00004000,0x04(%esp)
000000b6	calll	___maskrune
000000bb	addl	$0x10,%esp
000000be	testl	%eax,%eax
000000c0	jne	0x00000080
000000c2	movb	CreateUniqueId(UniqueId_t*),(%edi,%esi)
000000c6	decl	%esi
000000c7	movl	$0x00004000,%ebx
000000cc	jmp	0x000000d1
000000ce	nop
000000d0	incl	%edi
000000d1	movsbl	(%edi),%eax
000000d4	testl	%eax,%eax
000000d6	je	0x00000107
000000d8	testb	%al,%al
000000da	js	0x000000ed
000000dc	movl	0xe8(%ebp),%ecx
000000df	movl	0x58be-0x2e(%ecx),%ecx
000000e5	movl	0x34(%ecx,%eax,4),%eax
000000e9	andl	%ebx,%eax
000000eb	jmp	0x00000103
000000ed	subl	$0x10,%esp
000000f0	movl	%eax,(%esp)
000000f3	movl	$0x00004000,0x04(%esp)
000000fb	calll	___maskrune
00000100	addl	$0x10,%esp
00000103	testl	%eax,%eax
00000105	jne	0x000000d0
00000107	movl	0x08(%ebp),%ebx
0000010a	movl	CreateUniqueId(UniqueId_t*),0x04(%ebx)
00000111	movl	CreateUniqueId(UniqueId_t*),(%ebx)
00000117	movl	CreateUniqueId(UniqueId_t*),0x0c(%ebx)
0000011e	movl	CreateUniqueId(UniqueId_t*),0x08(%ebx)
00000125	testl	%esi,%esi
00000127	jle	0x00000166
00000129	subl	$0x10,%esp
0000012c	leal	0xec(%ebp),%edi
0000012f	movl	%edi,(%esp)
00000132	calll	CRC32_Init(unsigned int*)
00000137	addl	$0x10,%esp
0000013a	subl	$0x10,%esp
0000013d	movl	%esi,0x08(%esp)
00000141	movl	0x0c(%ebp),%eax
00000144	movl	%eax,0x04(%esp)
00000148	movl	%edi,(%esp)
0000014b	calll	CRC32_ProcessBuffer(unsigned int*, void const*, int)
00000150	addl	$0x10,%esp
00000153	subl	$0x10,%esp
00000156	movl	%edi,(%esp)
00000159	calll	CRC32_Final(unsigned int*)
0000015e	addl	$0x10,%esp
00000161	movl	0xec(%ebp),%eax
00000164	movl	%eax,(%ebx)
00000166	movl	0xe4(%ebp),%eax
00000169	movl	(%eax),%eax
0000016b	cmpl	0xf0(%ebp),%eax
0000016e	jne	0x0000017d
00000170	movl	$0x00000001,%eax
00000175	leal	0xf4(%ebp),%esp
00000178	popl	%esi
00000179	popl	%edi
0000017a	popl	%ebx
0000017b	popl	%ebp
0000017c	ret
0000017d	calll	___stack_chk_fail
00000182	nopw	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
InvalidateUniqueId(UniqueId_t*):
00000190	movl	0x04(%esp),%eax
00000194	movl	CreateUniqueId(UniqueId_t*),0x04(%eax)
0000019b	movl	CreateUniqueId(UniqueId_t*),(%eax)
000001a1	movl	CreateUniqueId(UniqueId_t*),0x0c(%eax)
000001a8	movl	CreateUniqueId(UniqueId_t*),0x08(%eax)
000001af	ret
IsUniqueIdValid(UniqueId_t const&):
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	subl	$0x28,%esp
000001b6	xorps	%xmm0,%xmm0
000001b9	movaps	%xmm0,0xe8(%ebp)
000001bd	movl	0x08(%ebp),%eax
000001c0	movl	%eax,0x04(%esp)
000001c4	leal	0xe8(%ebp),%eax
000001c7	movl	%eax,(%esp)
000001ca	movl	$0x00000010,0x08(%esp)
000001d2	calll	_memcmp
000001d7	testl	%eax,%eax
000001d9	setne	%al
000001dc	movzbl	%al,%eax
000001df	addl	$0x28,%esp
000001e2	popl	%ebp
000001e3	ret
000001e4	nopw	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
IsUniqueIdEqual(UniqueId_t const&, UniqueId_t const&):
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	subl	$0x18,%esp
000001f6	movl	0x0c(%ebp),%eax
000001f9	movl	%eax,0x04(%esp)
000001fd	movl	0x08(%ebp),%eax
00000200	movl	%eax,(%esp)
00000203	movl	$0x00000010,0x08(%esp)
0000020b	calll	_memcmp
00000210	testl	%eax,%eax
00000212	sete	%al
00000215	movzbl	%al,%eax
00000218	addl	$0x18,%esp
0000021b	popl	%ebp
0000021c	ret
0000021d	nopl	(%eax)
UniqueIdToString(UniqueId_t const&, char*, int):
00000220	movl	0x08(%esp),%eax
00000224	movb	CreateUniqueId(UniqueId_t*),(%eax)
00000227	ret
00000228	nopl	CreateUniqueId(UniqueId_t*)(%eax,%eax)
CopyUniqueId(UniqueId_t const&, UniqueId_t*):
00000230	movl	0x04(%esp),%eax
00000234	movsd	(%eax),%xmm0
00000238	movsd	0x08(%eax),%xmm1
0000023d	movl	0x08(%esp),%eax
00000241	movsd	%xmm1,0x08(%eax)
00000246	movsd	%xmm0,(%eax)
0000024a	ret
0000024b	nopl	CreateUniqueId(UniqueId_t*)(%eax,%eax)
Serialize(CUtlBuffer&, UniqueId_t const&):
00000250	xorl	%eax,%eax
00000252	ret
00000253	nopl	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
Unserialize(CUtlBuffer&, UniqueId_t&):
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x0c,%esp
00000269	calll	0x0000026e
0000026e	popl	%eax
0000026f	movl	0x58c2-0x26e(%eax),%eax
00000275	movl	%eax,0xec(%ebp)
00000278	movl	(%eax),%eax
0000027a	movl	%eax,0xf0(%ebp)
0000027d	movl	0x0c(%ebp),%eax
00000280	movl	0x08(%ebp),%ebx
00000283	testb	$0x01,0x15(%ebx)
00000287	je	0x000002d3
00000289	subl	$0x10,%esp
0000028c	movl	%ebx,(%esp)
0000028f	calll	CUtlBuffer::PeekStringLength()
00000294	addl	$0x10,%esp
00000297	movl	%eax,%esi
00000299	leal	0x0f(%esi),%eax
0000029c	andl	$0xf0,%eax
0000029f	movl	%esp,%edi
000002a1	subl	%eax,%edi
000002a3	movl	%edi,%esp
000002a5	subl	$0x10,%esp
000002a8	movl	%esi,0x08(%esp)
000002ac	movl	%edi,0x04(%esp)
000002b0	movl	%ebx,(%esp)
000002b3	calll	CUtlBuffer::GetString(char*, int)
000002b8	addl	$0x10,%esp
000002bb	subl	$0x10,%esp
000002be	movl	%esi,0x08(%esp)
000002c2	movl	%edi,0x04(%esp)
000002c6	movl	0x0c(%ebp),%eax
000002c9	movl	%eax,(%esp)
000002cc	calll	UniqueIdFromString(UniqueId_t*, char const*, int)
000002d1	jmp	0x000002ea
000002d3	subl	$0x10,%esp
000002d6	movl	%eax,0x04(%esp)
000002da	movl	%ebx,(%esp)
000002dd	movl	$0x00000010,0x08(%esp)
000002e5	calll	CUtlBuffer::Get(void*, int)
000002ea	addl	$0x10,%esp
000002ed	cmpb	CreateUniqueId(UniqueId_t*),0x14(%ebx)
000002f1	sete	%al
000002f4	movl	0xec(%ebp),%ecx
000002f7	movl	(%ecx),%ecx
000002f9	cmpl	0xf0(%ebp),%ecx
000002fc	jne	0x00000309
000002fe	movzbl	%al,%eax
00000301	leal	0xf4(%ebp),%esp
00000304	popl	%esi
00000305	popl	%edi
00000306	popl	%ebx
00000307	popl	%ebp
00000308	ret
00000309	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(utlbuffer.o):
(__TEXT,__text) section
CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000000	jmp	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
00000005	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
GetCStringCharConversion():
00000010	calll	0x00000015
00000015	popl	%eax
00000016	leal	_s_StringCharConversion-0x15(%eax),%eax
0000001c	ret
0000001d	nopl	(%eax)
GetNoEscCharConversion():
00000020	calll	0x00000025
00000025	popl	%eax
00000026	leal	_s_NoEscConversion-0x25(%eax),%eax
0000002c	ret
0000002d	nopl	(%eax)
CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%ebx
00000034	pushl	%edi
00000035	pushl	%esi
00000036	subl	$0x1c,%esp
00000039	calll	0x0000003e
0000003e	popl	%edi
0000003f	leal	vtable for CUtlCharConversion-0x3e+0x00000008(%edi),%eax
00000045	movl	0x08(%ebp),%ebx
00000048	movl	%eax,(%ebx)
0000004a	movb	0x0c(%ebp),%al
0000004d	movb	%al,0x04(%ebx)
00000050	movl	GetCStringCharConversion()(%ebp),%eax
00000053	movl	%eax,0x08(%ebx)
00000056	movl	0x14(%ebp),%esi
00000059	movl	%esi,GetCStringCharConversion()(%ebx)
0000005c	movl	%eax,(%esp)
0000005f	calll	_strlen
00000064	movl	%eax,0x0c(%ebx)
00000067	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
0000006e	leal	0x00000118(%ebx),%eax
00000074	movl	%eax,(%esp)
00000077	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
0000007f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000087	calll	_memset
0000008c	testl	%esi,%esi
0000008e	jle	0x0000013d
00000094	movl	%edi,0xec(%ebp)
00000097	movl	0x18(%ebp),%ecx
0000009a	movl	%esi,%eax
0000009c	leal	0x04(%ecx),%esi
0000009f	leal	0x18(%ebx),%edi
000000a2	movl	%ebx,%ecx
000000a4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000000b0	movl	%eax,0xf0(%ebp)
000000b3	movzbl	0xfc(%esi),%ebx
000000b7	movb	%bl,(%edi)
000000b9	movl	(%esi),%eax
000000bb	movl	%eax,0x0000011c(%ecx,%ebx,8)
000000c2	movl	%eax,(%esp)
000000c5	calll	_strlen
000000ca	movl	0x08(%ebp),%ecx
000000cd	movl	%eax,0x00000118(%ecx,%ebx,8)
000000d4	cmpl	0x14(%ecx),%eax
000000d7	jle	0x000000dc
000000d9	movl	%eax,0x14(%ecx)
000000dc	addl	$0x08,%esi
000000df	incl	%edi
000000e0	movl	0xf0(%ebp),%eax
000000e3	decl	%eax
000000e4	jne	0x000000b0
000000e6	movl	0xec(%ebp),%eax
000000e9	leal	vtable for CUtlCStringConversion-0x3e+0x00000008(%eax),%eax
000000ef	movl	%eax,(%ecx)
000000f1	leal	0x00000918(%ecx),%eax
000000f7	movl	%eax,(%esp)
000000fa	movl	$0x00000100,0x08(%esp)
00000102	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
0000010a	movl	%ecx,%esi
0000010c	calll	_memset
00000111	movl	%esi,%edx
00000113	movl	0x14(%ebp),%esi
00000116	testl	%esi,%esi
00000118	movl	0x18(%ebp),%edi
0000011b	jle	0x00000135
0000011d	addl	$0x04,%edi
00000120	movb	0xfc(%edi),%al
00000123	movl	(%edi),%ecx
00000125	movzbl	(%ecx),%ecx
00000128	movb	%al,0x00000918(%edx,%ecx)
0000012f	addl	$0x08,%edi
00000132	decl	%esi
00000133	jne	0x00000120
00000135	addl	$0x1c,%esp
00000138	popl	%esi
00000139	popl	%edi
0000013a	popl	%ebx
0000013b	popl	%ebp
0000013c	ret
0000013d	leal	vtable for CUtlCStringConversion-0x3e+0x00000008(%edi),%eax
00000143	movl	%eax,(%ebx)
00000145	addl	$0x00000918,%ebx
0000014b	movl	%ebx,(%esp)
0000014e	movl	$0x00000100,0x08(%esp)
00000156	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
0000015e	calll	_memset
00000163	jmp	0x00000135
00000165	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x1c,%esp
00000179	calll	0x0000017e
0000017e	popl	%eax
0000017f	leal	vtable for CUtlCharConversion-0x17e+0x00000008(%eax),%eax
00000185	movl	0x08(%ebp),%esi
00000188	movl	%eax,(%esi)
0000018a	movb	0x0c(%ebp),%al
0000018d	movb	%al,0x04(%esi)
00000190	movl	GetCStringCharConversion()(%ebp),%eax
00000193	movl	%eax,0x08(%esi)
00000196	movl	0x14(%ebp),%edi
00000199	movl	%edi,GetCStringCharConversion()(%esi)
0000019c	movl	%eax,(%esp)
0000019f	calll	_strlen
000001a4	movl	%eax,0x0c(%esi)
000001a7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000001ae	leal	0x00000118(%esi),%eax
000001b4	movl	%eax,(%esp)
000001b7	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
000001bf	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000001c7	calll	_memset
000001cc	movl	%esi,%ecx
000001ce	testl	%edi,%edi
000001d0	jle	0x0000021d
000001d2	movl	0x18(%ebp),%ebx
000001d5	addl	$0x04,%ebx
000001d8	leal	0x18(%ecx),%esi
000001db	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000001e0	movl	%edi,0xf0(%ebp)
000001e3	movzbl	0xfc(%ebx),%edx
000001e7	movl	%edx,0xec(%ebp)
000001ea	movb	%dl,(%esi)
000001ec	movl	(%ebx),%eax
000001ee	movl	%eax,0x0000011c(%ecx,%edx,8)
000001f5	movl	%eax,(%esp)
000001f8	movl	%ecx,%edi
000001fa	calll	_strlen
000001ff	movl	%edi,%ecx
00000201	movl	0xec(%ebp),%edx
00000204	movl	%eax,0x00000118(%ecx,%edx,8)
0000020b	cmpl	0x14(%ecx),%eax
0000020e	jle	0x00000213
00000210	movl	%eax,0x14(%ecx)
00000213	addl	$0x08,%ebx
00000216	incl	%esi
00000217	movl	0xf0(%ebp),%edi
0000021a	decl	%edi
0000021b	jne	0x000001e0
0000021d	addl	$0x1c,%esp
00000220	popl	%esi
00000221	popl	%edi
00000222	popl	%ebx
00000223	popl	%ebp
00000224	ret
00000225	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCStringConversion::FindConversion(char const*, int*):
00000230	movl	0x08(%esp),%eax
00000234	movzbl	(%eax),%eax
00000237	movl	0x04(%esp),%ecx
0000023b	movsbl	0x00000918(%ecx,%eax),%eax
00000243	testl	%eax,%eax
00000245	setne	%cl
00000248	movzbl	%cl,%ecx
0000024b	movl	0x0c(%esp),%edx
0000024f	movl	%ecx,(%edx)
00000251	ret
00000252	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x1c,%esp
00000269	calll	0x0000026e
0000026e	popl	%eax
0000026f	leal	vtable for CUtlCharConversion-0x26e+0x00000008(%eax),%eax
00000275	movl	0x08(%ebp),%esi
00000278	movl	%eax,(%esi)
0000027a	movb	0x0c(%ebp),%al
0000027d	movb	%al,0x04(%esi)
00000280	movl	GetCStringCharConversion()(%ebp),%eax
00000283	movl	%eax,0x08(%esi)
00000286	movl	0x14(%ebp),%edi
00000289	movl	%edi,GetCStringCharConversion()(%esi)
0000028c	movl	%eax,(%esp)
0000028f	calll	_strlen
00000294	movl	%eax,0x0c(%esi)
00000297	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
0000029e	leal	0x00000118(%esi),%eax
000002a4	movl	%eax,(%esp)
000002a7	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
000002af	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000002b7	calll	_memset
000002bc	movl	%esi,%ecx
000002be	testl	%edi,%edi
000002c0	jle	0x0000030d
000002c2	movl	0x18(%ebp),%ebx
000002c5	leal	0x18(%ecx),%esi
000002c8	addl	$0x04,%ebx
000002cb	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000002d0	movl	%edi,0xf0(%ebp)
000002d3	movzbl	0xfc(%ebx),%edx
000002d7	movl	%edx,0xec(%ebp)
000002da	movb	%dl,(%esi)
000002dc	movl	(%ebx),%eax
000002de	movl	%eax,0x0000011c(%ecx,%edx,8)
000002e5	movl	%eax,(%esp)
000002e8	movl	%ecx,%edi
000002ea	calll	_strlen
000002ef	movl	%edi,%ecx
000002f1	movl	0xec(%ebp),%edx
000002f4	movl	%eax,0x00000118(%ecx,%edx,8)
000002fb	cmpl	0x14(%ecx),%eax
000002fe	jle	0x00000303
00000300	movl	%eax,0x14(%ecx)
00000303	incl	%esi
00000304	addl	$0x08,%ebx
00000307	movl	0xf0(%ebp),%edi
0000030a	decl	%edi
0000030b	jne	0x000002d0
0000030d	addl	$0x1c,%esp
00000310	popl	%esi
00000311	popl	%edi
00000312	popl	%ebx
00000313	popl	%ebp
00000314	ret
00000315	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetEscapeChar() const:
00000320	movl	0x04(%esp),%eax
00000324	movsbl	0x04(%eax),%eax
00000328	ret
00000329	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlCharConversion::GetDelimiter() const:
00000330	movl	0x04(%esp),%eax
00000334	movl	0x08(%eax),%eax
00000337	ret
00000338	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetDelimiterLength() const:
00000340	movl	0x04(%esp),%eax
00000344	movl	0x0c(%eax),%eax
00000347	ret
00000348	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetConversionString(char) const:
00000350	movzbl	0x08(%esp),%eax
00000355	movl	0x04(%esp),%ecx
00000359	movl	0x0000011c(%ecx,%eax,8),%eax
00000360	ret
00000361	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetConversionLength(char) const:
00000370	movzbl	0x08(%esp),%eax
00000375	movl	0x04(%esp),%ecx
00000379	movl	0x00000118(%ecx,%eax,8),%eax
00000380	ret
00000381	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::MaxConversionLength() const:
00000390	movl	0x04(%esp),%eax
00000394	movl	0x14(%eax),%eax
00000397	ret
00000398	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::FindConversion(char const*, int*):
000003a0	pushl	%ebp
000003a1	movl	%esp,%ebp
000003a3	pushl	%ebx
000003a4	pushl	%edi
000003a5	pushl	%esi
000003a6	subl	$0x0c,%esp
000003a9	movl	0x08(%ebp),%esi
000003ac	movl	GetCStringCharConversion()(%esi),%eax
000003af	movl	%eax,0xf0(%ebp)
000003b2	xorl	%edi,%edi
000003b4	jmp	0x000003c1
000003b6	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000003c0	incl	%edi
000003c1	cmpl	0xf0(%ebp),%edi
000003c4	jge	0x000003f7
000003c6	movzbl	0x18(%esi,%edi),%ebx
000003cb	movl	0x0000011c(%esi,%ebx,8),%eax
000003d2	movl	%eax,0x04(%esp)
000003d6	movl	0x0c(%ebp),%eax
000003d9	movl	%eax,(%esp)
000003dc	calll	_strcmp
000003e1	testl	%eax,%eax
000003e3	jne	0x000003c0
000003e5	movl	0x00000118(%esi,%ebx,8),%eax
000003ec	movl	GetCStringCharConversion()(%ebp),%ecx
000003ef	movl	%eax,(%ecx)
000003f1	movb	0x18(%esi,%edi),%al
000003f5	jmp	0x00000402
000003f7	movl	GetCStringCharConversion()(%ebp),%eax
000003fa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00000400	xorb	%al,%al
00000402	movsbl	%al,%eax
00000405	addl	$0x0c,%esp
00000408	popl	%esi
00000409	popl	%edi
0000040a	popl	%ebx
0000040b	popl	%ebp
0000040c	ret
0000040d	nopl	(%eax)
CUtlBuffer::CUtlBuffer(int, int, int):
00000410	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00000415	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(int, int, int):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x0c,%esp
00000429	calll	0x0000042e
0000042e	popl	%esi
0000042f	movl	0x08(%ebp),%edi
00000432	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
00000438	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
0000043c	andb	$0xfc,0x34(%edi)
00000440	movl	0x0c(%ebp),%eax
00000443	movl	%eax,0x08(%edi)
00000446	movl	GetCStringCharConversion()(%ebp),%ebx
00000449	movl	%ebx,0x04(%edi)
0000044c	testl	%ebx,%ebx
0000044e	je	0x0000045a
00000450	movl	%ebx,(%esp)
00000453	calll	_malloc
00000458	movl	%eax,(%edi)
0000045a	movl	0x14(%ebp),%eax
0000045d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000464	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
0000046b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000472	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000479	movb	%al,0x15(%edi)
0000047c	testl	%ebx,%ebx
0000047e	je	0x000004c0
00000480	testb	$0x08,%al
00000482	jne	0x000004c0
00000484	movl	$0xffffffff,0x1c(%edi)
0000048b	movl	%edi,(%esp)
0000048e	calll	CUtlBuffer::AddNullTermination()
00000493	jmp	0x000004c7
00000495	movl	%eax,%esi
00000497	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
0000049b	js	0x000004b8
0000049d	movl	(%edi),%eax
0000049f	testl	%eax,%eax
000004a1	je	0x000004b1
000004a3	movl	%eax,(%esp)
000004a6	calll	_free
000004ab	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
000004b1	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
000004b8	movl	%esi,(%esp)
000004bb	calll	__Unwind_Resume
000004c0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x1c(%edi)
000004c7	leal	CUtlBuffer::GetOverflow(int)-0x42e(%esi),%eax
000004cd	movl	%eax,0x24(%edi)
000004d0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000004d7	leal	CUtlBuffer::PutOverflow(int)-0x42e(%esi),%eax
000004dd	movl	%eax,0x2c(%edi)
000004e0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
000004e7	addl	$0x0c,%esp
000004ea	popl	%esi
000004eb	popl	%edi
000004ec	popl	%ebx
000004ed	popl	%ebp
000004ee	ret
000004ef	nop
CUtlBuffer::AddNullTermination():
000004f0	pushl	%ebp
000004f1	movl	%esp,%ebp
000004f3	pushl	%esi
000004f4	subl	$0x14,%esp
000004f7	movl	0x08(%ebp),%esi
000004fa	movl	GetCStringCharConversion()(%esi),%eax
000004fd	cmpl	0x1c(%esi),%eax
00000500	jle	0x0000055e
00000502	testb	$0x08,0x15(%esi)
00000506	jne	0x00000558
00000508	testb	$0x01,0x14(%esi)
0000050c	jne	0x00000558
0000050e	movl	GetNoEscCharConversion()(%esi),%ecx
00000511	cmpl	%ecx,%eax
00000513	jl	0x0000051f
00000515	leal	0x01(%eax),%edx
00000518	subl	%ecx,%edx
0000051a	cmpl	%edx,0x04(%esi)
0000051d	jge	0x00000548
0000051f	movl	0x2c(%esi),%eax
00000522	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%ecx
00000525	addl	%esi,%ecx
00000527	testb	$0x01,%al
00000529	je	0x00000531
0000052b	movl	(%ecx),%edx
0000052d	movl	0xff(%eax,%edx),%eax
00000531	movl	%ecx,(%esp)
00000534	movl	$0x00000001,0x04(%esp)
0000053c	call	*%eax
0000053e	cmpb	$0x01,%al
00000540	jne	0x00000554
00000542	movl	GetCStringCharConversion()(%esi),%eax
00000545	movl	GetNoEscCharConversion()(%esi),%ecx
00000548	subl	%ecx,%eax
0000054a	js	0x00000558
0000054c	movl	(%esi),%ecx
0000054e	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
00000552	jmp	0x00000558
00000554	andb	$0xfe,0x14(%esi)
00000558	movl	GetCStringCharConversion()(%esi),%eax
0000055b	movl	%eax,0x1c(%esi)
0000055e	addl	$0x14,%esp
00000561	popl	%esi
00000562	popl	%ebp
00000563	ret
00000564	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SetOverflowFuncs(bool (CUtlBuffer::*)(int), bool (CUtlBuffer::*)(int)):
00000570	pushl	%edi
00000571	pushl	%esi
00000572	movl	0x18(%esp),%eax
00000576	movl	0x1c(%esp),%ecx
0000057a	movl	GetCStringCharConversion()(%esp),%esi
0000057e	movl	0x14(%esp),%edi
00000582	movl	0x0c(%esp),%edx
00000586	movl	%edi,0x28(%edx)
00000589	movl	%esi,0x24(%edx)
0000058c	movl	%ecx,CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edx)
0000058f	movl	%eax,0x2c(%edx)
00000592	popl	%esi
00000593	popl	%edi
00000594	ret
00000595	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetOverflow(int):
000005a0	xorl	%eax,%eax
000005a2	ret
000005a3	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PutOverflow(int):
000005b0	pushl	%ebp
000005b1	movl	%esp,%ebp
000005b3	pushl	%ebx
000005b4	pushl	%edi
000005b5	pushl	%esi
000005b6	subl	$0x0c,%esp
000005b9	movl	0x0c(%ebp),%esi
000005bc	movl	0x08(%ebp),%ebx
000005bf	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
000005c3	js	0x000005ca
000005c5	movl	0x04(%ebx),%edi
000005c8	jmp	0x0000060b
000005ca	xorb	%al,%al
000005cc	testb	$0x02,0x15(%ebx)
000005d0	je	0x0000063f
000005d2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
000005d9	movl	0x04(%ebx),%edi
000005dc	testl	%edi,%edi
000005de	je	0x00000600
000005e0	movl	%edi,(%esp)
000005e3	calll	_malloc
000005e8	movl	%eax,%esi
000005ea	movl	(%ebx),%eax
000005ec	movl	%edi,0x08(%esp)
000005f0	movl	%eax,0x04(%esp)
000005f4	movl	%esi,(%esp)
000005f7	calll	_memcpy
000005fc	movl	%esi,(%ebx)
000005fe	jmp	0x00000608
00000600	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00000606	xorl	%edi,%edi
00000608	movl	0x0c(%ebp),%esi
0000060b	movl	GetCStringCharConversion()(%ebx),%ecx
0000060e	addl	%esi,%ecx
00000610	subl	GetNoEscCharConversion()(%ebx),%ecx
00000613	movb	$0x01,%al
00000615	cmpl	%ecx,%edi
00000617	jge	0x0000063f
00000619	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
00000620	movl	%ebx,(%esp)
00000623	movl	$0x00000001,0x04(%esp)
0000062b	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000630	movl	GetCStringCharConversion()(%ebx),%ecx
00000633	addl	%esi,%ecx
00000635	subl	GetNoEscCharConversion()(%ebx),%ecx
00000638	movb	$0x01,%al
0000063a	cmpl	%ecx,0x04(%ebx)
0000063d	jl	0x00000620
0000063f	movzbl	%al,%eax
00000642	addl	$0x0c,%esp
00000645	popl	%esi
00000646	popl	%edi
00000647	popl	%ebx
00000648	popl	%ebp
00000649	ret
0000064a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(void const*, int, int):
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	pushl	%edi
00000654	pushl	%esi
00000655	subl	GetCStringCharConversion(),%esp
00000658	calll	0x0000065d
0000065d	popl	%esi
0000065e	movl	0x0c(%ebp),%eax
00000661	movl	0x08(%ebp),%edi
00000664	movl	%eax,(%edi)
00000666	movl	GetCStringCharConversion()(%ebp),%eax
00000669	movl	%eax,0x04(%edi)
0000066c	movl	$0xffffffff,0x08(%edi)
00000673	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000677	andb	$0xfc,0x34(%edi)
0000067b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000682	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
00000689	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000690	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000697	movb	0x14(%ebp),%cl
0000069a	movb	%cl,0x15(%edi)
0000069d	testb	$0x08,%cl
000006a0	je	0x000006d2
000006a2	movl	%eax,0x1c(%edi)
000006a5	jmp	0x000006e1
000006a7	movl	%eax,%esi
000006a9	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
000006ad	js	0x000006ca
000006af	movl	(%edi),%eax
000006b1	testl	%eax,%eax
000006b3	je	0x000006c3
000006b5	movl	%eax,(%esp)
000006b8	calll	_free
000006bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
000006c3	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
000006ca	movl	%esi,(%esp)
000006cd	calll	__Unwind_Resume
000006d2	movl	$0xffffffff,0x1c(%edi)
000006d9	movl	%edi,(%esp)
000006dc	calll	CUtlBuffer::AddNullTermination()
000006e1	leal	CUtlBuffer::GetOverflow(int)-0x65d(%esi),%eax
000006e7	movl	%eax,0x24(%edi)
000006ea	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000006f1	leal	CUtlBuffer::PutOverflow(int)-0x65d(%esi),%eax
000006f7	movl	%eax,0x2c(%edi)
000006fa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
00000701	addl	GetCStringCharConversion(),%esp
00000704	popl	%esi
00000705	popl	%edi
00000706	popl	%ebp
00000707	ret
00000708	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(void const*, int, int):
00000710	pushl	%ebp
00000711	movl	%esp,%ebp
00000713	pushl	%edi
00000714	pushl	%esi
00000715	subl	GetCStringCharConversion(),%esp
00000718	calll	0x0000071d
0000071d	popl	%esi
0000071e	movl	0x0c(%ebp),%eax
00000721	movl	0x08(%ebp),%edi
00000724	movl	%eax,(%edi)
00000726	movl	GetCStringCharConversion()(%ebp),%eax
00000729	movl	%eax,0x04(%edi)
0000072c	movl	$0xffffffff,0x08(%edi)
00000733	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000737	andb	$0xfc,0x34(%edi)
0000073b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000742	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
00000749	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000750	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000757	movb	0x14(%ebp),%cl
0000075a	movb	%cl,0x15(%edi)
0000075d	testb	$0x08,%cl
00000760	je	0x00000792
00000762	movl	%eax,0x1c(%edi)
00000765	jmp	0x000007a1
00000767	movl	%eax,%esi
00000769	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
0000076d	js	0x0000078a
0000076f	movl	(%edi),%eax
00000771	testl	%eax,%eax
00000773	je	0x00000783
00000775	movl	%eax,(%esp)
00000778	calll	_free
0000077d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
00000783	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
0000078a	movl	%esi,(%esp)
0000078d	calll	__Unwind_Resume
00000792	movl	$0xffffffff,0x1c(%edi)
00000799	movl	%edi,(%esp)
0000079c	calll	CUtlBuffer::AddNullTermination()
000007a1	leal	CUtlBuffer::GetOverflow(int)-0x71d(%esi),%eax
000007a7	movl	%eax,0x24(%edi)
000007aa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000007b1	leal	CUtlBuffer::PutOverflow(int)-0x71d(%esi),%eax
000007b7	movl	%eax,0x2c(%edi)
000007ba	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
000007c1	addl	GetCStringCharConversion(),%esp
000007c4	popl	%esi
000007c5	popl	%edi
000007c6	popl	%ebp
000007c7	ret
000007c8	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SetBufferType(bool, bool):
000007d0	movl	0x04(%esp),%eax
000007d4	movb	0x15(%eax),%dl
000007d7	movb	%dl,%cl
000007d9	orb	$0x01,%cl
000007dc	andb	$0xfe,%dl
000007df	movb	0x08(%esp),%ch
000007e3	testb	%ch,%ch
000007e5	jne	0x000007e9
000007e7	movb	%dl,%cl
000007e9	movb	%cl,%dl
000007eb	orb	$0x04,%dl
000007ee	andb	$0xfb,%cl
000007f1	movb	0x0c(%esp),%ch
000007f5	testb	%ch,%ch
000007f7	jne	0x000007fb
000007f9	movb	%cl,%dl
000007fb	movb	%dl,0x15(%eax)
000007fe	ret
000007ff	nop
CUtlBuffer::SetExternalBuffer(void*, int, int, int):
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	pushl	%edi
00000804	pushl	%esi
00000805	subl	GetCStringCharConversion(),%esp
00000808	movl	0x08(%ebp),%esi
0000080b	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
0000080f	js	0x0000082c
00000811	movl	(%esi),%eax
00000813	testl	%eax,%eax
00000815	je	0x00000825
00000817	movl	%eax,(%esp)
0000081a	calll	_free
0000081f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000825	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esi)
0000082c	movl	0x18(%ebp),%eax
0000082f	movl	0x14(%ebp),%ecx
00000832	movl	GetCStringCharConversion()(%ebp),%edx
00000835	movl	0x0c(%ebp),%edi
00000838	movl	%edi,(%esi)
0000083a	movl	%edx,0x04(%esi)
0000083d	movl	$0xffffffff,0x08(%esi)
00000844	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%esi)
0000084b	movl	%ecx,GetCStringCharConversion()(%esi)
0000084e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%esi)
00000855	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000859	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%esi)
00000860	movb	%al,0x15(%esi)
00000863	movl	$0xffffffff,0x1c(%esi)
0000086a	addl	GetCStringCharConversion(),%esp
0000086d	popl	%esi
0000086e	popl	%edi
0000086f	popl	%ebp
00000870	jmp	CUtlBuffer::AddNullTermination()
00000875	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::AssumeMemory(void*, int, int, int):
00000880	pushl	%ebp
00000881	movl	%esp,%ebp
00000883	pushl	%edi
00000884	pushl	%esi
00000885	subl	GetCStringCharConversion(),%esp
00000888	movl	0x08(%ebp),%esi
0000088b	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
0000088f	js	0x000008ac
00000891	movl	(%esi),%eax
00000893	testl	%eax,%eax
00000895	je	0x000008a5
00000897	movl	%eax,(%esp)
0000089a	calll	_free
0000089f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
000008a5	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esi)
000008ac	movl	0x18(%ebp),%eax
000008af	movl	0x14(%ebp),%ecx
000008b2	movl	GetCStringCharConversion()(%ebp),%edx
000008b5	movl	0x0c(%ebp),%edi
000008b8	movl	%edi,(%esi)
000008ba	movl	%edx,0x04(%esi)
000008bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%esi)
000008c4	movl	%ecx,GetCStringCharConversion()(%esi)
000008c7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%esi)
000008ce	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000008d2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%esi)
000008d9	movb	%al,0x15(%esi)
000008dc	movl	$0xffffffff,0x1c(%esi)
000008e3	addl	GetCStringCharConversion(),%esp
000008e6	popl	%esi
000008e7	popl	%edi
000008e8	popl	%ebp
000008e9	jmp	CUtlBuffer::AddNullTermination()
000008ee	nop
CUtlBuffer::EnsureCapacity(int):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%ebx
000008f4	pushl	%edi
000008f5	pushl	%esi
000008f6	subl	$0x1c,%esp
000008f9	movl	0x0c(%ebp),%eax
000008fc	leal	0x01(%eax),%edx
000008ff	movl	0x08(%ebp),%esi
00000902	movl	0x08(%esi),%ecx
00000905	testl	%ecx,%ecx
00000907	js	0x0000090d
00000909	movl	%edx,%eax
0000090b	jmp	0x00000956
0000090d	testb	$0x02,0x15(%esi)
00000911	je	0x00000956
00000913	movl	0x04(%esi),%edi
00000916	cmpl	%edx,%edi
00000918	cmovll	%edx,%eax
0000091b	jge	0x00000956
0000091d	movl	%edx,0xf0(%ebp)
00000920	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
00000927	testl	%edi,%edi
00000929	je	0x0000094b
0000092b	movl	%edi,(%esp)
0000092e	calll	_malloc
00000933	movl	%eax,%ebx
00000935	movl	(%esi),%eax
00000937	movl	%edi,0x08(%esp)
0000093b	movl	%eax,0x04(%esp)
0000093f	movl	%ebx,(%esp)
00000942	calll	_memcpy
00000947	movl	%ebx,(%esi)
00000949	jmp	0x00000951
0000094b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000951	xorl	%ecx,%ecx
00000953	movl	0xf0(%ebp),%eax
00000956	cmpl	%eax,0x04(%esi)
00000959	jge	0x00000980
0000095b	testl	%ecx,%ecx
0000095d	js	0x00000980
0000095f	movl	%eax,0x04(%esi)
00000962	movl	(%esi),%ecx
00000964	testl	%ecx,%ecx
00000966	je	0x00000976
00000968	movl	%eax,0x04(%esp)
0000096c	movl	%ecx,(%esp)
0000096f	calll	_realloc
00000974	jmp	0x0000097e
00000976	movl	%eax,(%esp)
00000979	calll	_malloc
0000097e	movl	%eax,(%esi)
00000980	addl	$0x1c,%esp
00000983	popl	%esi
00000984	popl	%edi
00000985	popl	%ebx
00000986	popl	%ebp
00000987	ret
00000988	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Get(void*, int):
00000990	pushl	%ebp
00000991	movl	%esp,%ebp
00000993	pushl	%ebx
00000994	pushl	%edi
00000995	pushl	%esi
00000996	subl	$0x0c,%esp
00000999	movl	GetCStringCharConversion()(%ebp),%esi
0000099c	testl	%esi,%esi
0000099e	jle	0x00000a0d
000009a0	movl	0x08(%ebp),%edi
000009a3	movb	0x14(%edi),%cl
000009a6	testb	$0x02,%cl
000009a9	jne	0x00000a0d
000009ab	movl	0x0c(%edi),%eax
000009ae	leal	(%eax,%esi),%edx
000009b1	cmpl	%edx,0x1c(%edi)
000009b4	jge	0x000009be
000009b6	orb	$0x02,%cl
000009b9	movb	%cl,0x14(%edi)
000009bc	jmp	0x00000a0d
000009be	movl	0x0c(%ebp),%ebx
000009c1	movl	GetNoEscCharConversion()(%edi),%ecx
000009c4	cmpl	%ecx,%eax
000009c6	jl	0x000009cf
000009c8	subl	%ecx,%edx
000009ca	cmpl	%edx,0x04(%edi)
000009cd	jge	0x000009f4
000009cf	movl	0x24(%edi),%eax
000009d2	movl	0x28(%edi),%ecx
000009d5	addl	%edi,%ecx
000009d7	testb	$0x01,%al
000009d9	je	0x000009e1
000009db	movl	(%ecx),%edx
000009dd	movl	0xff(%eax,%edx),%eax
000009e1	movl	%esi,0x04(%esp)
000009e5	movl	%ecx,(%esp)
000009e8	call	*%eax
000009ea	cmpb	$0x01,%al
000009ec	jne	0x00000a15
000009ee	movl	0x0c(%edi),%eax
000009f1	movl	GetNoEscCharConversion()(%edi),%ecx
000009f4	movl	(%edi),%edx
000009f6	movl	%esi,0x08(%esp)
000009fa	subl	%ecx,%eax
000009fc	addl	%edx,%eax
000009fe	movl	%eax,0x04(%esp)
00000a02	movl	%ebx,(%esp)
00000a05	calll	_memcpy
00000a0a	addl	%esi,0x0c(%edi)
00000a0d	addl	$0x0c,%esp
00000a10	popl	%esi
00000a11	popl	%edi
00000a12	popl	%ebx
00000a13	popl	%ebp
00000a14	ret
00000a15	orb	$0x02,0x14(%edi)
00000a19	jmp	0x00000a0d
00000a1b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckGet(int):
00000a20	pushl	%ebp
00000a21	movl	%esp,%ebp
00000a23	pushl	%edi
00000a24	pushl	%esi
00000a25	subl	GetCStringCharConversion(),%esp
00000a28	movl	0x08(%ebp),%esi
00000a2b	movb	0x14(%esi),%dl
00000a2e	xorb	%cl,%cl
00000a30	testb	$0x02,%dl
00000a33	jne	0x00000a83
00000a35	movl	0x0c(%ebp),%eax
00000a38	movl	0x0c(%esi),%ecx
00000a3b	leal	(%ecx,%eax),%edi
00000a3e	cmpl	%edi,0x1c(%esi)
00000a41	jge	0x00000a4b
00000a43	orb	$0x02,%dl
00000a46	movb	%dl,0x14(%esi)
00000a49	jmp	0x00000a81
00000a4b	movl	GetNoEscCharConversion()(%esi),%edx
00000a4e	cmpl	%edx,%ecx
00000a50	jl	0x00000a5b
00000a52	subl	%edx,%edi
00000a54	movb	$0x01,%cl
00000a56	cmpl	%edi,0x04(%esi)
00000a59	jge	0x00000a83
00000a5b	movl	0x24(%esi),%ecx
00000a5e	movl	0x28(%esi),%edx
00000a61	addl	%esi,%edx
00000a63	testb	$0x01,%cl
00000a66	je	0x00000a6e
00000a68	movl	(%edx),%edi
00000a6a	movl	0xff(%ecx,%edi),%ecx
00000a6e	movl	%eax,0x04(%esp)
00000a72	movl	%edx,(%esp)
00000a75	call	*%ecx
00000a77	movb	$0x01,%cl
00000a79	testb	%al,%al
00000a7b	jne	0x00000a83
00000a7d	orb	$0x02,0x14(%esi)
00000a81	xorb	%cl,%cl
00000a83	movzbl	%cl,%eax
00000a86	addl	GetCStringCharConversion(),%esp
00000a89	popl	%esi
00000a8a	popl	%edi
00000a8b	popl	%ebp
00000a8c	ret
00000a8d	nopl	(%eax)
CUtlBuffer::GetUpTo(void*, int):
00000a90	pushl	%ebp
00000a91	movl	%esp,%ebp
00000a93	pushl	%ebx
00000a94	pushl	%edi
00000a95	pushl	%esi
00000a96	subl	$0x0c,%esp
00000a99	movl	0x08(%ebp),%esi
00000a9c	movl	0x0c(%esi),%ecx
00000a9f	movl	0x1c(%esi),%edx
00000aa2	xorl	%eax,%eax
00000aa4	cmpl	%edx,%ecx
00000aa6	jge	0x00000afc
00000aa8	movl	GetCStringCharConversion()(%ebp),%eax
00000aab	movl	%esi,(%esp)
00000aae	movl	%edx,%ebx
00000ab0	subl	%ecx,%ebx
00000ab2	addl	%eax,%ecx
00000ab4	cmpl	%edx,%ecx
00000ab6	cmovlel	%eax,%ebx
00000ab9	movl	%ebx,0x08(%esp)
00000abd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000ac5	calll	CUtlBuffer::CheckPeekGet(int, int)
00000aca	movl	0x0c(%esi),%ecx
00000acd	movl	0x1c(%esi),%edi
00000ad0	subl	%ecx,%edi
00000ad2	cmpl	%ebx,%edi
00000ad4	cmovgel	%ebx,%edi
00000ad7	xorl	%eax,%eax
00000ad9	testl	%edi,%edi
00000adb	je	0x00000afc
00000add	movl	0x0c(%ebp),%eax
00000ae0	subl	GetNoEscCharConversion()(%esi),%ecx
00000ae3	movl	(%esi),%edx
00000ae5	movl	%edi,0x08(%esp)
00000ae9	addl	%ecx,%edx
00000aeb	movl	%edx,0x04(%esp)
00000aef	movl	%eax,(%esp)
00000af2	calll	_memcpy
00000af7	addl	%edi,0x0c(%esi)
00000afa	movl	%edi,%eax
00000afc	addl	$0x0c,%esp
00000aff	popl	%esi
00000b00	popl	%edi
00000b01	popl	%ebx
00000b02	popl	%ebp
00000b03	ret
00000b04	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckArbitraryPeekGet(int, int&):
00000b10	pushl	%ebp
00000b11	movl	%esp,%ebp
00000b13	pushl	%ebx
00000b14	pushl	%edi
00000b15	pushl	%esi
00000b16	subl	$0x0c,%esp
00000b19	movl	0x08(%ebp),%edi
00000b1c	movl	0x0c(%edi),%ecx
00000b1f	addl	0x0c(%ebp),%ecx
00000b22	movl	0x1c(%edi),%edx
00000b25	movl	GetCStringCharConversion()(%ebp),%esi
00000b28	cmpl	%edx,%ecx
00000b2a	jl	0x00000b36
00000b2c	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000b32	xorb	%al,%al
00000b34	jmp	0x00000b6d
00000b36	movl	(%esi),%ebx
00000b38	leal	(%ebx,%ecx),%eax
00000b3b	cmpl	%edx,%eax
00000b3d	jle	0x00000b45
00000b3f	subl	%ecx,%edx
00000b41	movl	%edx,(%esi)
00000b43	movl	%edx,%ebx
00000b45	movl	%ebx,0x08(%esp)
00000b49	movl	0x0c(%ebp),%eax
00000b4c	movl	%eax,0x04(%esp)
00000b50	movl	%edi,(%esp)
00000b53	calll	CUtlBuffer::CheckPeekGet(int, int)
00000b58	movl	0x1c(%edi),%eax
00000b5b	subl	0x0c(%edi),%eax
00000b5e	movl	(%esi),%ecx
00000b60	cmpl	%ecx,%eax
00000b62	jge	0x00000b68
00000b64	movl	%eax,(%esi)
00000b66	movl	%eax,%ecx
00000b68	testl	%ecx,%ecx
00000b6a	setne	%al
00000b6d	movzbl	%al,%eax
00000b70	addl	$0x0c,%esp
00000b73	popl	%esi
00000b74	popl	%edi
00000b75	popl	%ebx
00000b76	popl	%ebp
00000b77	ret
00000b78	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::EatWhiteSpace():
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%ebx
00000b84	pushl	%edi
00000b85	pushl	%esi
00000b86	subl	$0x0c,%esp
00000b89	calll	0x00000b8e
00000b8e	popl	%eax
00000b8f	movl	0x08(%ebp),%esi
00000b92	testb	$0x01,0x15(%esi)
00000b96	je	0x00000c41
00000b9c	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000ba0	jne	0x00000c41
00000ba6	xorb	%cl,%cl
00000ba8	movl	0x19013-0xb8e(%eax),%edi
00000bae	movl	$0x00004000,%ebx
00000bb3	jmp	0x00000c25
00000bb5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000bc0	movl	GetNoEscCharConversion()(%esi),%ecx
00000bc3	cmpl	%ecx,%eax
00000bc5	jl	0x00000bce
00000bc7	subl	%ecx,%edx
00000bc9	cmpl	%edx,0x04(%esi)
00000bcc	jge	0x00000bf7
00000bce	movl	0x24(%esi),%eax
00000bd1	movl	0x28(%esi),%ecx
00000bd4	addl	%esi,%ecx
00000bd6	testb	$0x01,%al
00000bd8	je	0x00000be0
00000bda	movl	(%ecx),%edx
00000bdc	movl	0xff(%eax,%edx),%eax
00000be0	movl	%ecx,(%esp)
00000be3	movl	$0x00000001,0x04(%esp)
00000beb	call	*%eax
00000bed	cmpb	$0x01,%al
00000bef	jne	0x00000c3d
00000bf1	movl	0x0c(%esi),%eax
00000bf4	movl	GetNoEscCharConversion()(%esi),%ecx
00000bf7	subl	%ecx,%eax
00000bf9	movl	(%esi),%ecx
00000bfb	movzbl	(%ecx,%eax),%eax
00000bff	testb	%al,%al
00000c01	js	0x00000c0b
00000c03	movl	0x34(%edi,%eax,4),%eax
00000c07	andl	%ebx,%eax
00000c09	jmp	0x00000c1b
00000c0b	movl	%eax,(%esp)
00000c0e	movl	$0x00004000,0x04(%esp)
00000c16	calll	___maskrune
00000c1b	testl	%eax,%eax
00000c1d	je	0x00000c41
00000c1f	incl	0x0c(%esi)
00000c22	movb	0x14(%esi),%cl
00000c25	testb	$0x02,%cl
00000c28	jne	0x00000c41
00000c2a	movl	0x0c(%esi),%eax
00000c2d	leal	0x01(%eax),%edx
00000c30	cmpl	%edx,0x1c(%esi)
00000c33	jge	0x00000bc0
00000c35	orb	$0x02,%cl
00000c38	movb	%cl,0x14(%esi)
00000c3b	jmp	0x00000c41
00000c3d	orb	$0x02,0x14(%esi)
00000c41	addl	$0x0c,%esp
00000c44	popl	%esi
00000c45	popl	%edi
00000c46	popl	%ebx
00000c47	popl	%ebp
00000c48	ret
00000c49	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::EatCPPComment():
00000c50	pushl	%ebp
00000c51	movl	%esp,%ebp
00000c53	pushl	%ebx
00000c54	pushl	%edi
00000c55	pushl	%esi
00000c56	subl	$0x1c,%esp
00000c59	calll	0x00000c5e
00000c5e	popl	%eax
00000c5f	movl	%eax,0xec(%ebp)
00000c62	xorb	%cl,%cl
00000c64	movl	0x08(%ebp),%esi
00000c67	testb	$0x01,0x15(%esi)
00000c6b	je	0x00000d1f
00000c71	xorb	%cl,%cl
00000c73	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000c77	jne	0x00000d1f
00000c7d	movl	%esi,(%esp)
00000c80	movl	$0x00000002,0x08(%esp)
00000c88	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000c90	calll	CUtlBuffer::CheckPeekGet(int, int)
00000c95	xorb	%cl,%cl
00000c97	testb	%al,%al
00000c99	je	0x00000d1f
00000c9f	movl	(%esi),%edi
00000ca1	movl	0x0c(%esi),%eax
00000ca4	movl	%eax,%ebx
00000ca6	subl	GetNoEscCharConversion()(%esi),%ebx
00000ca9	xorb	%cl,%cl
00000cab	movl	%edi,%edx
00000cad	addl	%ebx,%edx
00000caf	je	0x00000d1f
00000cb1	xorb	%cl,%cl
00000cb3	cmpb	$0x2f,(%edx)
00000cb6	jne	0x00000d1f
00000cb8	xorb	%cl,%cl
00000cba	cmpb	$0x2f,0x01(%ebx,%edi)
00000cbf	jne	0x00000d1f
00000cc1	addl	$0x02,%eax
00000cc4	movl	%eax,0x0c(%esi)
00000cc7	movl	0xec(%ebp),%eax
00000cca	leal	0x151ef-0xc5e(%eax),%edi
00000cd0	movl	%edi,0x08(%esp)
00000cd4	leal	0xf3(%ebp),%eax
00000cd7	movl	%eax,0x04(%esp)
00000cdb	movl	%esi,(%esp)
00000cde	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00000ce3	movb	$0x01,%cl
00000ce5	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000ce9	jne	0x00000d1f
00000ceb	movb	0xf3(%ebp),%al
00000cee	cmpb	$0x0a,%al
00000cf0	je	0x00000d1f
00000cf2	leal	0xf2(%ebp),%ebx
00000cf5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000d00	movl	%edi,0x08(%esp)
00000d04	movl	%ebx,0x04(%esp)
00000d08	movl	%esi,(%esp)
00000d0b	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00000d10	movb	$0x01,%cl
00000d12	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000d16	jne	0x00000d1f
00000d18	movb	0xf2(%ebp),%al
00000d1b	cmpb	$0x0a,%al
00000d1d	jne	0x00000d00
00000d1f	movzbl	%cl,%eax
00000d22	addl	$0x1c,%esp
00000d25	popl	%esi
00000d26	popl	%edi
00000d27	popl	%ebx
00000d28	popl	%ebp
00000d29	ret
00000d2a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekGet(int, int):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%edi
00000d34	pushl	%esi
00000d35	subl	GetCStringCharConversion(),%esp
00000d38	movl	0x0c(%ebp),%eax
00000d3b	movl	%eax,0x08(%esp)
00000d3f	movl	GetCStringCharConversion()(%ebp),%esi
00000d42	movl	%esi,0x04(%esp)
00000d46	movl	0x08(%ebp),%edi
00000d49	movl	%edi,(%esp)
00000d4c	calll	CUtlBuffer::CheckPeekGet(int, int)
00000d51	testb	%al,%al
00000d53	jne	0x00000d59
00000d55	xorl	%esi,%esi
00000d57	jmp	0x00000d61
00000d59	addl	0x0c(%edi),%esi
00000d5c	subl	GetNoEscCharConversion()(%edi),%esi
00000d5f	addl	(%edi),%esi
00000d61	movl	%esi,%eax
00000d63	addl	GetCStringCharConversion(),%esp
00000d66	popl	%esi
00000d67	popl	%edi
00000d68	popl	%ebp
00000d69	ret
00000d6a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekWhiteSpace(int):
00000d70	pushl	%ebp
00000d71	movl	%esp,%ebp
00000d73	pushl	%ebx
00000d74	pushl	%edi
00000d75	pushl	%esi
00000d76	subl	$0x0c,%esp
00000d79	calll	0x00000d7e
00000d7e	popl	%eax
00000d7f	xorl	%esi,%esi
00000d81	movl	0x08(%ebp),%edi
00000d84	testb	$0x01,0x15(%edi)
00000d88	je	0x00000dea
00000d8a	xorl	%esi,%esi
00000d8c	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000d90	jne	0x00000dea
00000d92	movl	0x0c(%ebp),%esi
00000d95	movl	0x19013-0xd7e(%eax),%ebx
00000d9b	jmp	0x00000da1
00000d9d	nopl	(%eax)
00000da0	incl	%esi
00000da1	movl	%esi,0x04(%esp)
00000da5	movl	%edi,(%esp)
00000da8	movl	$0x00000001,0x08(%esp)
00000db0	calll	CUtlBuffer::CheckPeekGet(int, int)
00000db5	cmpb	$0x01,%al
00000db7	jne	0x00000dea
00000db9	movl	0x0c(%edi),%eax
00000dbc	subl	GetNoEscCharConversion()(%edi),%eax
00000dbf	addl	(%edi),%eax
00000dc1	movzbl	(%esi,%eax),%eax
00000dc5	testb	%al,%al
00000dc7	js	0x00000dd6
00000dc9	movl	0x34(%ebx,%eax,4),%eax
00000dcd	movl	$0x00004000,%ecx
00000dd2	andl	%ecx,%eax
00000dd4	jmp	0x00000de6
00000dd6	movl	%eax,(%esp)
00000dd9	movl	$0x00004000,0x04(%esp)
00000de1	calll	___maskrune
00000de6	testl	%eax,%eax
00000de8	jne	0x00000da0
00000dea	movl	%esi,%eax
00000dec	addl	$0x0c,%esp
00000def	popl	%esi
00000df0	popl	%edi
00000df1	popl	%ebx
00000df2	popl	%ebp
00000df3	ret
00000df4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckPeekGet(int, int):
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	pushl	%ebx
00000e04	pushl	%edi
00000e05	pushl	%esi
00000e06	subl	$0x0c,%esp
00000e09	movl	0x08(%ebp),%esi
00000e0c	movb	0x14(%esi),%cl
00000e0f	xorb	%dl,%dl
00000e11	testb	$0x02,%cl
00000e14	jne	0x00000e6c
00000e16	movl	GetCStringCharConversion()(%ebp),%edx
00000e19	movl	0x0c(%ebp),%eax
00000e1c	addl	%edx,%eax
00000e1e	movl	0x0c(%esi),%edx
00000e21	leal	(%edx,%eax),%edi
00000e24	cmpl	%edi,0x1c(%esi)
00000e27	jl	0x00000e5e
00000e29	movl	GetNoEscCharConversion()(%esi),%ebx
00000e2c	cmpl	%ebx,%edx
00000e2e	jl	0x00000e39
00000e30	subl	%ebx,%edi
00000e32	movb	$0x01,%dl
00000e34	cmpl	%edi,0x04(%esi)
00000e37	jge	0x00000e66
00000e39	movl	0x24(%esi),%ecx
00000e3c	movl	0x28(%esi),%edx
00000e3f	addl	%esi,%edx
00000e41	testb	$0x01,%cl
00000e44	je	0x00000e4c
00000e46	movl	(%edx),%edi
00000e48	movl	0xff(%ecx,%edi),%ecx
00000e4c	movl	%eax,0x04(%esp)
00000e50	movl	%edx,(%esp)
00000e53	call	*%ecx
00000e55	movb	0x14(%esi),%cl
00000e58	movb	$0x01,%dl
00000e5a	testb	%al,%al
00000e5c	jne	0x00000e66
00000e5e	orb	$0x02,%cl
00000e61	movb	%cl,0x14(%esi)
00000e64	xorb	%dl,%dl
00000e66	andb	$0xfd,%cl
00000e69	movb	%cl,0x14(%esi)
00000e6c	movzbl	%dl,%eax
00000e6f	addl	$0x0c,%esp
00000e72	popl	%esi
00000e73	popl	%edi
00000e74	popl	%ebx
00000e75	popl	%ebp
00000e76	ret
00000e77	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekStringLength():
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x1c,%esp
00000e89	calll	0x00000e8e
00000e8e	popl	%eax
00000e8f	movl	%eax,0xf0(%ebp)
00000e92	xorl	%eax,%eax
00000e94	movl	0x08(%ebp),%ebx
00000e97	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00000e9b	jne	0x00001002
00000ea1	xorl	%edi,%edi
00000ea3	testb	$0x01,0x15(%ebx)
00000ea7	je	0x00000efe
00000ea9	movl	$0x00004000,%esi
00000eae	jmp	0x00000eb1
00000eb0	incl	%edi
00000eb1	movl	%edi,0x04(%esp)
00000eb5	movl	%ebx,(%esp)
00000eb8	movl	$0x00000001,0x08(%esp)
00000ec0	calll	CUtlBuffer::CheckPeekGet(int, int)
00000ec5	cmpb	$0x01,%al
00000ec7	jne	0x00000efe
00000ec9	movl	0x0c(%ebx),%eax
00000ecc	subl	GetNoEscCharConversion()(%ebx),%eax
00000ecf	addl	(%ebx),%eax
00000ed1	movzbl	(%edi,%eax),%eax
00000ed5	testb	%al,%al
00000ed7	js	0x00000eea
00000ed9	movl	0xf0(%ebp),%ecx
00000edc	movl	0x19013-0xe8e(%ecx),%ecx
00000ee2	movl	0x34(%ecx,%eax,4),%eax
00000ee6	andl	%esi,%eax
00000ee8	jmp	0x00000efa
00000eea	movl	%eax,(%esp)
00000eed	movl	$0x00004000,0x04(%esp)
00000ef5	calll	___maskrune
00000efa	testl	%eax,%eax
00000efc	jne	0x00000eb0
00000efe	movl	%edi,0xe8(%ebp)
00000f01	movl	%edi,%edx
00000f03	jmp	0x00000f97
00000f08	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f10	addl	0xec(%ebp),%eax
00000f13	subl	%ecx,%eax
00000f15	addl	%eax,%esi
00000f17	xorl	%ecx,%ecx
00000f19	jmp	0x00000f21
00000f1b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f20	incl	%ecx
00000f21	cmpl	%ebx,%ecx
00000f23	jge	0x00000f8f
00000f25	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi,%ecx)
00000f29	jne	0x00000f20
00000f2b	jmp	0x0000100a
00000f30	movl	(%edi),%esi
00000f32	movl	GetNoEscCharConversion()(%edi),%ecx
00000f35	testb	$0x01,0x15(%edi)
00000f39	je	0x00000f10
00000f3b	addl	0xec(%ebp),%eax
00000f3e	subl	%ecx,%eax
00000f40	addl	%eax,%esi
00000f42	xorl	%edi,%edi
00000f44	jmp	0x00000f51
00000f46	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f50	incl	%edi
00000f51	cmpl	%ebx,%edi
00000f53	jge	0x00000f8f
00000f55	movzbl	(%esi,%edi),%eax
00000f59	testb	%al,%al
00000f5b	js	0x00000f73
00000f5d	movl	0xf0(%ebp),%ecx
00000f60	movl	0x19013-0xe8e(%ecx),%ecx
00000f66	movl	0x34(%ecx,%eax,4),%eax
00000f6a	movl	$0x00004000,%ecx
00000f6f	andl	%ecx,%eax
00000f71	jmp	0x00000f83
00000f73	movl	%eax,(%esp)
00000f76	movl	$0x00004000,0x04(%esp)
00000f7e	calll	___maskrune
00000f83	testl	%eax,%eax
00000f85	jne	0x00000ff5
00000f87	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi,%edi)
00000f8b	jne	0x00000f50
00000f8d	jmp	0x00000ff5
00000f8f	movl	0xec(%ebp),%edx
00000f92	addl	%ebx,%edx
00000f94	movl	0x08(%ebp),%ebx
00000f97	movl	0x0c(%ebx),%eax
00000f9a	addl	%edx,%eax
00000f9c	movl	0x1c(%ebx),%ecx
00000f9f	cmpl	%ecx,%eax
00000fa1	movl	%ebx,%edi
00000fa3	jge	0x00000fe1
00000fa5	movl	%edx,0x04(%esp)
00000fa9	movl	%edi,(%esp)
00000fac	movl	%edx,0xec(%ebp)
00000faf	movl	%ecx,%esi
00000fb1	subl	%eax,%esi
00000fb3	subl	$0x80,%eax
00000fb6	cmpl	%ecx,%eax
00000fb8	movl	$0x00000080,%eax
00000fbd	cmovlel	%eax,%esi
00000fc0	movl	%esi,0x08(%esp)
00000fc4	calll	CUtlBuffer::CheckPeekGet(int, int)
00000fc9	movl	0x0c(%edi),%eax
00000fcc	movl	0x1c(%edi),%ebx
00000fcf	subl	%eax,%ebx
00000fd1	cmpl	%esi,%ebx
00000fd3	cmovgel	%esi,%ebx
00000fd6	movl	0xec(%ebp),%edx
00000fd9	testl	%ebx,%ebx
00000fdb	jne	0x00000f30
00000fe1	xorl	%eax,%eax
00000fe3	movl	0xe8(%ebp),%ecx
00000fe6	cmpl	%ecx,%edx
00000fe8	je	0x00001002
00000fea	movl	$0x00000001,%eax
00000fef	subl	%ecx,%eax
00000ff1	addl	%edx,%eax
00000ff3	jmp	0x00001002
00000ff5	movl	$0x00000001,%eax
00000ffa	subl	0xe8(%ebp),%eax
00000ffd	addl	0xec(%ebp),%eax
00001000	addl	%edi,%eax
00001002	addl	$0x1c,%esp
00001005	popl	%esi
00001006	popl	%edi
00001007	popl	%ebx
00001008	popl	%ebp
00001009	ret
0000100a	movl	$0x00000001,%eax
0000100f	subl	0xe8(%ebp),%eax
00001012	addl	0xec(%ebp),%eax
00001015	addl	%ecx,%eax
00001017	jmp	0x00001002
00001019	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::PeekLineLength():
00001020	pushl	%ebp
00001021	movl	%esp,%ebp
00001023	pushl	%ebx
00001024	pushl	%edi
00001025	pushl	%esi
00001026	subl	$0x1c,%esp
00001029	xorl	%eax,%eax
0000102b	movl	0x08(%ebp),%ecx
0000102e	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ecx)
00001032	jne	0x000010eb
00001038	movl	0x0c(%ecx),%ebx
0000103b	movl	0x1c(%ecx),%eax
0000103e	xorl	%edi,%edi
00001040	jmp	0x0000108d
00001042	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001050	movl	%eax,0xf0(%ebp)
00001053	movl	%ebx,%eax
00001055	subl	GetNoEscCharConversion()(%edi),%eax
00001058	addl	(%edi),%eax
0000105a	addl	%ecx,%eax
0000105c	xorl	%esi,%esi
0000105e	movl	%ecx,%edi
00001060	jmp	0x00001071
00001062	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001070	incl	%esi
00001071	cmpl	%edx,%esi
00001073	jge	0x00001088
00001075	movb	(%eax,%esi),%cl
00001078	testb	%cl,%cl
0000107a	je	0x000010e7
0000107c	cmpb	$0x0a,%cl
0000107f	je	0x000010e1
00001081	cmpb	$0x0d,%cl
00001084	jne	0x00001070
00001086	jmp	0x000010e1
00001088	addl	%edx,%edi
0000108a	movl	0xf0(%ebp),%eax
0000108d	addl	%edi,%ebx
0000108f	cmpl	%eax,%ebx
00001091	movl	%edi,%ecx
00001093	movl	0x08(%ebp),%edi
00001096	jge	0x000010d0
00001098	movl	%ecx,0x04(%esp)
0000109c	movl	%edi,(%esp)
0000109f	movl	%eax,%esi
000010a1	subl	%ebx,%esi
000010a3	subl	$0x80,%ebx
000010a6	cmpl	%eax,%ebx
000010a8	movl	$0x00000080,%eax
000010ad	cmovlel	%eax,%esi
000010b0	movl	%esi,0x08(%esp)
000010b4	movl	%ecx,%ebx
000010b6	calll	CUtlBuffer::CheckPeekGet(int, int)
000010bb	movl	%ebx,%ecx
000010bd	movl	0x0c(%edi),%ebx
000010c0	movl	0x1c(%edi),%eax
000010c3	movl	%eax,%edx
000010c5	subl	%ebx,%edx
000010c7	cmpl	%esi,%edx
000010c9	cmovgel	%esi,%edx
000010cc	testl	%edx,%edx
000010ce	jne	0x00001050
000010d0	movl	%ecx,%eax
000010d2	leal	0x01(%eax),%ecx
000010d5	testl	%eax,%eax
000010d7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%eax
000010dc	cmovnel	%ecx,%eax
000010df	jmp	0x000010eb
000010e1	leal	0x02(%edi,%esi),%eax
000010e5	jmp	0x000010eb
000010e7	leal	0x01(%edi,%esi),%eax
000010eb	addl	$0x1c,%esp
000010ee	popl	%esi
000010ef	popl	%edi
000010f0	popl	%ebx
000010f1	popl	%ebp
000010f2	ret
000010f3	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekStringMatch(int, char const*, int):
00001100	pushl	%ebp
00001101	movl	%esp,%ebp
00001103	pushl	%ebx
00001104	pushl	%edi
00001105	pushl	%esi
00001106	subl	$0x0c,%esp
00001109	movl	0x14(%ebp),%edi
0000110c	movl	%edi,0x08(%esp)
00001110	movl	0x0c(%ebp),%esi
00001113	movl	%esi,0x04(%esp)
00001117	movl	0x08(%ebp),%ebx
0000111a	movl	%ebx,(%esp)
0000111d	calll	CUtlBuffer::CheckPeekGet(int, int)
00001122	xorb	%cl,%cl
00001124	testb	%al,%al
00001126	je	0x0000114c
00001128	movl	GetCStringCharConversion()(%ebp),%ecx
0000112b	addl	0x0c(%ebx),%esi
0000112e	movl	(%ebx),%eax
00001130	movl	GetNoEscCharConversion()(%ebx),%edx
00001133	movl	%edi,0x08(%esp)
00001137	movl	%ecx,0x04(%esp)
0000113b	subl	%edx,%esi
0000113d	addl	%eax,%esi
0000113f	movl	%esi,(%esp)
00001142	calll	V_strncmp(char const*, char const*, int)
00001147	testl	%eax,%eax
00001149	sete	%cl
0000114c	movzbl	%cl,%eax
0000114f	addl	$0x0c,%esp
00001152	popl	%esi
00001153	popl	%edi
00001154	popl	%ebx
00001155	popl	%ebp
00001156	ret
00001157	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool):
00001160	pushl	%ebp
00001161	movl	%esp,%ebp
00001163	pushl	%ebx
00001164	pushl	%edi
00001165	pushl	%esi
00001166	subl	$0x2c,%esp
00001169	calll	0x0000116e
0000116e	popl	%eax
0000116f	movl	0x08(%ebp),%esi
00001172	movb	0x15(%esi),%cl
00001175	andb	$0x01,%cl
00001178	sete	%dl
0000117b	movl	0x0c(%ebp),%edi
0000117e	testl	%edi,%edi
00001180	je	0x00001187
00001182	cmpb	$0x01,%dl
00001185	jne	0x00001196
00001187	movl	%esi,(%esp)
0000118a	calll	CUtlBuffer::PeekStringLength()
0000118f	movl	%eax,%ecx
00001191	jmp	0x000013c3
00001196	xorl	%ebx,%ebx
00001198	testb	%cl,%cl
0000119a	je	0x0000120d
0000119c	xorl	%ebx,%ebx
0000119e	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000011a2	jne	0x0000120d
000011a4	movl	0x19013-0x116e(%eax),%eax
000011aa	movl	%eax,0xec(%ebp)
000011ad	xorl	%ebx,%ebx
000011af	jmp	0x000011c1
000011b1	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000011c0	incl	%ebx
000011c1	movl	%ebx,0x04(%esp)
000011c5	movl	%esi,(%esp)
000011c8	movl	$0x00000001,0x08(%esp)
000011d0	calll	CUtlBuffer::CheckPeekGet(int, int)
000011d5	cmpb	$0x01,%al
000011d7	jne	0x0000120d
000011d9	movl	0x0c(%esi),%eax
000011dc	subl	GetNoEscCharConversion()(%esi),%eax
000011df	addl	(%esi),%eax
000011e1	movzbl	(%ebx,%eax),%eax
000011e5	testb	%al,%al
000011e7	js	0x000011f9
000011e9	movl	0xec(%ebp),%ecx
000011ec	movl	0x34(%ecx,%eax,4),%eax
000011f0	movl	$0x00004000,%ecx
000011f5	andl	%ecx,%eax
000011f7	jmp	0x00001209
000011f9	movl	%eax,(%esp)
000011fc	movl	$0x00004000,0x04(%esp)
00001204	calll	___maskrune
00001209	testl	%eax,%eax
0000120b	jne	0x000011c0
0000120d	movl	0x08(%edi),%eax
00001210	movl	%eax,0xec(%ebp)
00001213	movl	0x0c(%edi),%edi
00001216	movl	%edi,0x08(%esp)
0000121a	movl	%ebx,0x04(%esp)
0000121e	movl	%esi,(%esp)
00001221	calll	CUtlBuffer::CheckPeekGet(int, int)
00001226	testb	%al,%al
00001228	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%ecx
0000122d	je	0x000013c3
00001233	movl	0x0c(%esi),%eax
00001236	addl	%ebx,%eax
00001238	movl	(%esi),%ecx
0000123a	movl	GetNoEscCharConversion()(%esi),%edx
0000123d	movl	%edi,0x08(%esp)
00001241	movl	0xec(%ebp),%esi
00001244	movl	%esi,0x04(%esp)
00001248	subl	%edx,%eax
0000124a	addl	%ecx,%eax
0000124c	movl	%eax,(%esp)
0000124f	calll	V_strncmp(char const*, char const*, int)
00001254	xorl	%ecx,%ecx
00001256	testl	%eax,%eax
00001258	jne	0x000013c3
0000125e	movl	0x0c(%ebp),%edi
00001261	movl	0x0c(%edi),%esi
00001264	movl	$0x00000001,0xec(%ebp)
0000126b	movl	%ebx,%eax
0000126d	leal	(%esi,%eax),%ebx
00001270	movl	%eax,0xe4(%ebp)
00001273	jmp	0x00001346
00001278	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001280	movl	(%esi),%ecx
00001282	movl	0x0c(%esi),%eax
00001285	leal	(%eax,%ebx),%edx
00001288	subl	GetNoEscCharConversion()(%esi),%edx
0000128b	movb	(%ecx,%edx),%cl
0000128e	movl	0xec(%ebp),%edx
00001291	leal	0x01(%edx),%edi
00001294	movl	%edi,0xe8(%ebp)
00001297	incl	%ebx
00001298	movl	0x0c(%ebp),%edi
0000129b	cmpb	0x04(%edi),%cl
0000129e	jne	0x0000133d
000012a4	movl	%edi,%ecx
000012a6	movl	%ebx,%edi
000012a8	movl	%edx,%ebx
000012aa	movl	0x14(%ecx),%ecx
000012ad	movl	%ecx,0xf0(%ebp)
000012b0	addl	%edi,%eax
000012b2	movl	0x1c(%esi),%edx
000012b5	cmpl	%edx,%eax
000012b7	jl	0x000012dd
000012b9	jmp	0x0000139a
000012be	movl	%ebx,0x04(%esp)
000012c2	movl	%edi,(%esp)
000012c5	movl	$0x00000001,0x08(%esp)
000012cd	calll	CUtlBuffer::CheckPeekGet(int, int)
000012d2	cmpb	$0x01,%al
000012d4	movl	%edi,%esi
000012d6	je	0x00001280
000012d8	jmp	0x00001395
000012dd	leal	(%eax,%ecx),%esi
000012e0	cmpl	%edx,%esi
000012e2	jle	0x000012eb
000012e4	subl	%eax,%edx
000012e6	movl	%edx,0xf0(%ebp)
000012e9	movl	%edx,%ecx
000012eb	movl	%ecx,0x08(%esp)
000012ef	movl	%edi,%ebx
000012f1	movl	%ebx,0x04(%esp)
000012f5	movl	0x08(%ebp),%esi
000012f8	movl	%esi,(%esp)
000012fb	calll	CUtlBuffer::CheckPeekGet(int, int)
00001300	movl	0x0c(%esi),%eax
00001303	movl	0x1c(%esi),%ecx
00001306	subl	%eax,%ecx
00001308	movl	0xf0(%ebp),%edx
0000130b	cmpl	%edx,%ecx
0000130d	jge	0x00001314
0000130f	movl	%ecx,0xf0(%ebp)
00001312	movl	%ecx,%edx
00001314	testl	%edx,%edx
00001316	movl	0x0c(%ebp),%edi
00001319	je	0x000013a8
0000131f	addl	%ebx,%eax
00001321	subl	GetNoEscCharConversion()(%esi),%eax
00001324	movl	(%edi),%ecx
00001326	movl	(%esi),%edx
00001328	leal	0xf0(%ebp),%esi
0000132b	movl	%esi,0x08(%esp)
0000132f	addl	%eax,%edx
00001331	movl	%edx,0x04(%esp)
00001335	movl	%edi,(%esp)
00001338	call	(%ecx)
0000133a	addl	0xf0(%ebp),%ebx
0000133d	movl	0x0c(%edi),%esi
00001340	movl	0xe8(%ebp),%eax
00001343	movl	%eax,0xec(%ebp)
00001346	movl	0x08(%edi),%eax
00001349	movl	%eax,0xe8(%ebp)
0000134c	movl	%esi,0x08(%esp)
00001350	movl	%ebx,0x04(%esp)
00001354	movl	0x08(%ebp),%edi
00001357	movl	%edi,(%esp)
0000135a	calll	CUtlBuffer::CheckPeekGet(int, int)
0000135f	testb	%al,%al
00001361	je	0x000012be
00001367	movl	0x0c(%edi),%eax
0000136a	addl	%ebx,%eax
0000136c	movl	(%edi),%ecx
0000136e	movl	GetNoEscCharConversion()(%edi),%edx
00001371	movl	%esi,0x08(%esp)
00001375	movl	0xe8(%ebp),%esi
00001378	movl	%esi,0x04(%esp)
0000137c	subl	%edx,%eax
0000137e	addl	%ecx,%eax
00001380	movl	%eax,(%esp)
00001383	calll	V_strncmp(char const*, char const*, int)
00001388	testl	%eax,%eax
0000138a	jne	0x000012be
00001390	movl	0xec(%ebp),%ecx
00001393	jmp	0x000013ab
00001395	movl	0xec(%ebp),%ecx
00001398	jmp	0x000013ab
0000139a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf0(%ebp)
000013a1	movl	%ebx,%ecx
000013a3	incl	%ecx
000013a4	movl	%edi,%ebx
000013a6	jmp	0x000013ab
000013a8	movl	0xe8(%ebp),%ecx
000013ab	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%ebp)
000013af	movl	0xe4(%ebp),%eax
000013b2	jne	0x000013c3
000013b4	movl	$0x00000001,%ecx
000013b9	subl	%eax,%ecx
000013bb	addl	%ebx,%ecx
000013bd	movl	0x0c(%ebp),%eax
000013c0	addl	0x0c(%eax),%ecx
000013c3	movl	%ecx,%eax
000013c5	addl	$0x2c,%esp
000013c8	popl	%esi
000013c9	popl	%edi
000013ca	popl	%ebx
000013cb	popl	%ebp
000013cc	ret
000013cd	nopl	(%eax)
CUtlBuffer::GetString(char*, int):
000013d0	pushl	%ebp
000013d1	movl	%esp,%ebp
000013d3	pushl	%ebx
000013d4	pushl	%edi
000013d5	pushl	%esi
000013d6	subl	$0x1c,%esp
000013d9	calll	0x000013de
000013de	popl	%eax
000013df	movl	%eax,0xec(%ebp)
000013e2	movl	0x0c(%ebp),%eax
000013e5	movl	0x08(%ebp),%edi
000013e8	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000013ec	je	0x000013f6
000013ee	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000013f1	jmp	0x000014e0
000013f6	movl	GetCStringCharConversion()(%ebp),%eax
000013f9	movl	%edi,(%esp)
000013fc	testl	%eax,%eax
000013fe	movl	$0x7fffffff,%ebx
00001403	cmovnel	%eax,%ebx
00001406	calll	CUtlBuffer::PeekStringLength()
0000140b	movl	%eax,%esi
0000140d	testb	$0x01,0x15(%edi)
00001411	je	0x0000141b
00001413	movl	%edi,(%esp)
00001416	calll	CUtlBuffer::EatWhiteSpace()
0000141b	testl	%esi,%esi
0000141d	jne	0x0000142e
0000141f	movl	0x0c(%ebp),%eax
00001422	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001425	orb	$0x02,0x14(%edi)
00001429	jmp	0x000014e0
0000142e	movl	%edi,%ecx
00001430	cmpl	%ebx,%esi
00001432	jg	0x00001455
00001434	leal	0xff(%esi),%eax
00001437	movl	%eax,0x08(%esp)
0000143b	movl	0x0c(%ebp),%edi
0000143e	movl	%edi,0x04(%esp)
00001442	movl	%ecx,%ebx
00001444	movl	%ebx,(%esp)
00001447	calll	CUtlBuffer::Get(void*, int)
0000144c	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%edi,%esi)
00001451	movl	%ebx,%edi
00001453	jmp	0x000014be
00001455	leal	0xff(%ebx),%eax
00001458	movl	%eax,0x08(%esp)
0000145c	movl	0x0c(%ebp),%edi
0000145f	movl	%edi,0x04(%esp)
00001463	movl	%ecx,(%esp)
00001466	calll	CUtlBuffer::Get(void*, int)
0000146b	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%edi,%ebx)
00001470	movl	0x08(%ebp),%edi
00001473	notl	%ebx
00001475	addl	%ebx,%esi
00001477	addl	0x0c(%edi),%esi
0000147a	movl	%esi,0x0c(%edi)
0000147d	movb	0x14(%edi),%al
00001480	cmpl	0x1c(%edi),%esi
00001483	jle	0x0000148c
00001485	orb	$0x02,%al
00001487	movb	%al,0x14(%edi)
0000148a	jmp	0x000014be
0000148c	andb	$0xfd,%al
0000148e	movb	%al,0x14(%edi)
00001491	movl	GetNoEscCharConversion()(%edi),%eax
00001494	cmpl	%eax,%esi
00001496	jl	0x0000149f
00001498	addl	0x04(%edi),%eax
0000149b	cmpl	%eax,%esi
0000149d	jl	0x000014be
0000149f	movl	0x24(%edi),%eax
000014a2	movl	0x28(%edi),%ecx
000014a5	addl	%edi,%ecx
000014a7	testb	$0x01,%al
000014a9	je	0x000014b1
000014ab	movl	(%ecx),%edx
000014ad	movl	0xff(%eax,%edx),%eax
000014b1	movl	%ecx,(%esp)
000014b4	movl	$0xffffffff,0x04(%esp)
000014bc	call	*%eax
000014be	testb	$0x01,0x15(%edi)
000014c2	jne	0x000014e0
000014c4	movl	0xec(%ebp),%eax
000014c7	leal	0x151ef-0x13de(%eax),%eax
000014cd	movl	%eax,0x08(%esp)
000014d1	leal	0xf3(%ebp),%eax
000014d4	movl	%eax,0x04(%esp)
000014d8	movl	%edi,(%esp)
000014db	calll	void CUtlBuffer::GetType<char>(char&, char const*)
000014e0	addl	$0x1c,%esp
000014e3	popl	%esi
000014e4	popl	%edi
000014e5	popl	%ebx
000014e6	popl	%ebp
000014e7	ret
000014e8	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int):
000014f0	pushl	%ebp
000014f1	movl	%esp,%ebp
000014f3	subl	$0x08,%esp
000014f6	movl	GetCStringCharConversion()(%ebp),%ecx
000014f9	movl	0x0c(%ebp),%edx
000014fc	movl	0x08(%ebp),%eax
000014ff	testl	%edx,%edx
00001501	je	0x00001512
00001503	cmpl	$0x01,%edx
00001506	je	0x00001517
00001508	cmpl	$0x02,%edx
0000150b	je	0x0000151f
0000150d	movl	0x0c(%eax),%ecx
00001510	jmp	0x00001529
00001512	movl	%ecx,0x0c(%eax)
00001515	jmp	0x00001529
00001517	addl	0x0c(%eax),%ecx
0000151a	movl	%ecx,0x0c(%eax)
0000151d	jmp	0x00001529
0000151f	movl	0x1c(%eax),%edx
00001522	subl	%ecx,%edx
00001524	movl	%edx,0x0c(%eax)
00001527	movl	%edx,%ecx
00001529	movb	0x14(%eax),%dl
0000152c	cmpl	0x1c(%eax),%ecx
0000152f	jle	0x00001539
00001531	orb	$0x02,%dl
00001534	movb	%dl,0x14(%eax)
00001537	jmp	0x0000156b
00001539	andb	$0xfd,%dl
0000153c	movb	%dl,0x14(%eax)
0000153f	movl	GetNoEscCharConversion()(%eax),%edx
00001542	cmpl	%edx,%ecx
00001544	jl	0x0000154d
00001546	addl	0x04(%eax),%edx
00001549	cmpl	%edx,%ecx
0000154b	jl	0x0000156b
0000154d	movl	0x24(%eax),%ecx
00001550	addl	0x28(%eax),%eax
00001553	testb	$0x01,%cl
00001556	je	0x0000155e
00001558	movl	(%eax),%edx
0000155a	movl	0xff(%ecx,%edx),%ecx
0000155e	movl	%eax,(%esp)
00001561	movl	$0xffffffff,0x04(%esp)
00001569	call	*%ecx
0000156b	addl	$0x08,%esp
0000156e	popl	%ebp
0000156f	ret
CUtlBuffer::GetLine(char*, int):
00001570	pushl	%ebp
00001571	movl	%esp,%ebp
00001573	pushl	%ebx
00001574	pushl	%edi
00001575	pushl	%esi
00001576	subl	$0x0c,%esp
00001579	movl	0x0c(%ebp),%eax
0000157c	movl	0x08(%ebp),%edi
0000157f	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00001583	je	0x0000158d
00001585	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001588	jmp	0x0000163f
0000158d	movl	GetCStringCharConversion()(%ebp),%eax
00001590	movl	%edi,(%esp)
00001593	testl	%eax,%eax
00001595	movl	$0x7fffffff,%ebx
0000159a	cmovnel	%eax,%ebx
0000159d	calll	CUtlBuffer::PeekLineLength()
000015a2	movl	%eax,%esi
000015a4	testl	%esi,%esi
000015a6	jne	0x000015b7
000015a8	movl	0x0c(%ebp),%eax
000015ab	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000015ae	orb	$0x02,0x14(%edi)
000015b2	jmp	0x0000163f
000015b7	cmpl	%ebx,%esi
000015b9	jg	0x000015d8
000015bb	leal	0xff(%esi),%eax
000015be	movl	%eax,0x08(%esp)
000015c2	movl	0x0c(%ebp),%ebx
000015c5	movl	%ebx,0x04(%esp)
000015c9	movl	%edi,(%esp)
000015cc	calll	CUtlBuffer::Get(void*, int)
000015d1	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%ebx,%esi)
000015d6	jmp	0x0000163f
000015d8	leal	0xff(%ebx),%eax
000015db	movl	%eax,0x08(%esp)
000015df	movl	0x0c(%ebp),%eax
000015e2	movl	%eax,0x04(%esp)
000015e6	movl	%edi,(%esp)
000015e9	calll	CUtlBuffer::Get(void*, int)
000015ee	movl	0x0c(%ebp),%eax
000015f1	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%ebx)
000015f6	notl	%ebx
000015f8	addl	%ebx,%esi
000015fa	addl	0x0c(%edi),%esi
000015fd	movl	%esi,0x0c(%edi)
00001600	movb	0x14(%edi),%al
00001603	cmpl	0x1c(%edi),%esi
00001606	jle	0x0000160f
00001608	orb	$0x02,%al
0000160a	movb	%al,0x14(%edi)
0000160d	jmp	0x0000163f
0000160f	andb	$0xfd,%al
00001611	movb	%al,0x14(%edi)
00001614	movl	GetNoEscCharConversion()(%edi),%eax
00001617	cmpl	%eax,%esi
00001619	jl	0x00001622
0000161b	addl	0x04(%edi),%eax
0000161e	cmpl	%eax,%esi
00001620	jl	0x0000163f
00001622	movl	0x24(%edi),%eax
00001625	addl	0x28(%edi),%edi
00001628	testb	$0x01,%al
0000162a	je	0x00001632
0000162c	movl	(%edi),%ecx
0000162e	movl	0xff(%eax,%ecx),%eax
00001632	movl	%edi,(%esp)
00001635	movl	$0xffffffff,0x04(%esp)
0000163d	call	*%eax
0000163f	addl	$0x0c,%esp
00001642	popl	%esi
00001643	popl	%edi
00001644	popl	%ebx
00001645	popl	%ebp
00001646	ret
00001647	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*):
00001650	pushl	%ebp
00001651	movl	%esp,%ebp
00001653	pushl	%ebx
00001654	pushl	%edi
00001655	pushl	%esi
00001656	subl	$0x1c,%esp
00001659	calll	0x0000165e
0000165e	popl	%eax
0000165f	leal	0x151ef-0x165e(%eax),%eax
00001665	movl	%eax,0x08(%esp)
00001669	leal	0xf3(%ebp),%eax
0000166c	movl	%eax,0x04(%esp)
00001670	movl	0x08(%ebp),%esi
00001673	movl	%esi,(%esp)
00001676	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000167b	movl	0x0c(%ebp),%edi
0000167e	movb	0xf3(%ebp),%bl
00001681	cmpb	0x04(%edi),%bl
00001684	jne	0x00001749
0000168a	movl	0x14(%edi),%eax
0000168d	movl	%eax,0xec(%ebp)
00001690	movl	0x0c(%esi),%edx
00001693	movl	0x1c(%esi),%ecx
00001696	cmpl	%ecx,%edx
00001698	jl	0x000016a8
0000169a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xec(%ebp)
000016a1	xorb	%bl,%bl
000016a3	jmp	0x00001749
000016a8	leal	(%edx,%eax),%ebx
000016ab	cmpl	%ecx,%ebx
000016ad	jle	0x000016b6
000016af	subl	%edx,%ecx
000016b1	movl	%ecx,0xec(%ebp)
000016b4	movl	%ecx,%eax
000016b6	movl	%eax,0x08(%esp)
000016ba	movl	%esi,(%esp)
000016bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000016c5	calll	CUtlBuffer::CheckPeekGet(int, int)
000016ca	movl	0x0c(%esi),%eax
000016cd	movl	0x1c(%esi),%ecx
000016d0	subl	%eax,%ecx
000016d2	movl	0xec(%ebp),%edx
000016d5	cmpl	%edx,%ecx
000016d7	jge	0x000016de
000016d9	movl	%ecx,0xec(%ebp)
000016dc	movl	%ecx,%edx
000016de	xorb	%bl,%bl
000016e0	testl	%edx,%edx
000016e2	je	0x00001749
000016e4	subl	GetNoEscCharConversion()(%esi),%eax
000016e7	movl	(%edi),%ecx
000016e9	movl	(%esi),%edx
000016eb	leal	0xec(%ebp),%ebx
000016ee	movl	%ebx,0x08(%esp)
000016f2	addl	%eax,%edx
000016f4	movl	%edx,0x04(%esp)
000016f8	movl	%edi,(%esp)
000016fb	call	(%ecx)
000016fd	movb	%al,%bl
000016ff	movl	0x0c(%esi),%eax
00001702	addl	0xec(%ebp),%eax
00001705	movl	%eax,0x0c(%esi)
00001708	movb	0x14(%esi),%cl
0000170b	cmpl	0x1c(%esi),%eax
0000170e	jle	0x00001718
00001710	orb	$0x02,%cl
00001713	movb	%cl,0x14(%esi)
00001716	jmp	0x00001749
00001718	andb	$0xfd,%cl
0000171b	movb	%cl,0x14(%esi)
0000171e	movl	GetNoEscCharConversion()(%esi),%ecx
00001721	cmpl	%ecx,%eax
00001723	jl	0x0000172c
00001725	addl	0x04(%esi),%ecx
00001728	cmpl	%ecx,%eax
0000172a	jl	0x00001749
0000172c	movl	0x24(%esi),%eax
0000172f	addl	0x28(%esi),%esi
00001732	testb	$0x01,%al
00001734	je	0x0000173c
00001736	movl	(%esi),%ecx
00001738	movl	0xff(%eax,%ecx),%eax
0000173c	movl	%esi,(%esp)
0000173f	movl	$0xffffffff,0x04(%esp)
00001747	call	*%eax
00001749	movsbl	%bl,%eax
0000174c	addl	$0x1c,%esp
0000174f	popl	%esi
00001750	popl	%edi
00001751	popl	%ebx
00001752	popl	%ebp
00001753	ret
00001754	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetDelimitedChar(CUtlCharConversion*):
00001760	pushl	%ebp
00001761	movl	%esp,%ebp
00001763	subl	$0x18,%esp
00001766	calll	0x0000176b
0000176b	popl	%ecx
0000176c	movl	0x08(%ebp),%eax
0000176f	testb	$0x01,0x15(%eax)
00001773	je	0x0000177c
00001775	movl	0x0c(%ebp),%edx
00001778	testl	%edx,%edx
0000177a	jne	0x0000179a
0000177c	leal	0x151ef-0x176b(%ecx),%ecx
00001782	movl	%ecx,0x08(%esp)
00001786	leal	0xff(%ebp),%ecx
00001789	movl	%ecx,0x04(%esp)
0000178d	movl	%eax,(%esp)
00001790	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00001795	movb	0xff(%ebp),%al
00001798	jmp	0x000017a6
0000179a	movl	%edx,0x04(%esp)
0000179e	movl	%eax,(%esp)
000017a1	calll	CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
000017a6	movsbl	%al,%eax
000017a9	addl	$0x18,%esp
000017ac	popl	%ebp
000017ad	ret
000017ae	nop
CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int):
000017b0	pushl	%ebp
000017b1	movl	%esp,%ebp
000017b3	pushl	%ebx
000017b4	pushl	%edi
000017b5	pushl	%esi
000017b6	subl	$0x1c,%esp
000017b9	movl	0x14(%ebp),%ebx
000017bc	movl	GetCStringCharConversion()(%ebp),%eax
000017bf	movl	0x08(%ebp),%edi
000017c2	testb	$0x01,0x15(%edi)
000017c6	je	0x000017cf
000017c8	movl	0x0c(%ebp),%esi
000017cb	testl	%esi,%esi
000017cd	jne	0x000017e1
000017cf	movl	%ebx,0x08(%esp)
000017d3	movl	%eax,0x04(%esp)
000017d7	movl	%edi,(%esp)
000017da	calll	CUtlBuffer::GetString(char*, int)
000017df	jmp	0x000017ea
000017e1	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000017e5	je	0x000017f2
000017e7	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000017ea	addl	$0x1c,%esp
000017ed	popl	%esi
000017ee	popl	%edi
000017ef	popl	%ebx
000017f0	popl	%ebp
000017f1	ret
000017f2	movl	%edi,(%esp)
000017f5	calll	CUtlBuffer::EatWhiteSpace()
000017fa	movl	0x08(%esi),%eax
000017fd	movl	%eax,0xec(%ebp)
00001800	movl	0x0c(%esi),%esi
00001803	movl	%esi,0x08(%esp)
00001807	movl	%edi,(%esp)
0000180a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001812	testl	%ebx,%ebx
00001814	movl	$0x7fffffff,%eax
00001819	cmovnel	%ebx,%eax
0000181c	movl	%eax,0xf0(%ebp)
0000181f	calll	CUtlBuffer::CheckPeekGet(int, int)
00001824	testb	%al,%al
00001826	je	0x000017ea
00001828	movl	(%edi),%ecx
0000182a	movl	0x0c(%edi),%eax
0000182d	subl	GetNoEscCharConversion()(%edi),%eax
00001830	movl	%esi,0x08(%esp)
00001834	movl	0xec(%ebp),%edx
00001837	movl	%edx,0x04(%esp)
0000183b	addl	%ecx,%eax
0000183d	movl	%eax,(%esp)
00001840	calll	V_strncmp(char const*, char const*, int)
00001845	testl	%eax,%eax
00001847	jne	0x000017ea
00001849	movl	0x0c(%edi),%ecx
0000184c	movl	0x0c(%ebp),%eax
0000184f	addl	0x0c(%eax),%ecx
00001852	movl	%ecx,0x0c(%edi)
00001855	movb	0x14(%edi),%al
00001858	cmpl	0x1c(%edi),%ecx
0000185b	jle	0x00001866
0000185d	orb	$0x02,%al
0000185f	movb	%al,0x14(%edi)
00001862	xorl	%esi,%esi
00001864	jmp	0x0000189f
00001866	andb	$0xfd,%al
00001868	movb	%al,0x14(%edi)
0000186b	movl	GetNoEscCharConversion()(%edi),%eax
0000186e	cmpl	%eax,%ecx
00001870	jl	0x0000187b
00001872	addl	0x04(%edi),%eax
00001875	xorl	%esi,%esi
00001877	cmpl	%eax,%ecx
00001879	jl	0x0000189c
0000187b	movl	0x24(%edi),%eax
0000187e	movl	0x28(%edi),%ecx
00001881	addl	%edi,%ecx
00001883	testb	$0x01,%al
00001885	je	0x0000188d
00001887	movl	(%ecx),%edx
00001889	movl	0xff(%eax,%edx),%eax
0000188d	movl	%ecx,(%esp)
00001890	movl	$0xffffffff,0x04(%esp)
00001898	call	*%eax
0000189a	xorl	%esi,%esi
0000189c	movb	0x14(%edi),%al
0000189f	testb	%al,%al
000018a1	jne	0x0000193d
000018a7	movl	0x0c(%ebp),%eax
000018aa	movl	0x08(%eax),%ecx
000018ad	movl	%ecx,0xec(%ebp)
000018b0	movl	0x0c(%eax),%ebx
000018b3	movl	%ebx,0x08(%esp)
000018b7	movl	%edi,(%esp)
000018ba	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000018c2	calll	CUtlBuffer::CheckPeekGet(int, int)
000018c7	testb	%al,%al
000018c9	je	0x00001954
000018cf	movl	(%edi),%ecx
000018d1	movl	0x0c(%edi),%eax
000018d4	subl	GetNoEscCharConversion()(%edi),%eax
000018d7	movl	%ebx,0x08(%esp)
000018db	movl	0xec(%ebp),%edx
000018de	movl	%edx,0x04(%esp)
000018e2	addl	%ecx,%eax
000018e4	movl	%eax,(%esp)
000018e7	calll	V_strncmp(char const*, char const*, int)
000018ec	testl	%eax,%eax
000018ee	jne	0x00001954
000018f0	movl	0x0c(%edi),%eax
000018f3	movl	0x0c(%ebp),%ecx
000018f6	addl	0x0c(%ecx),%eax
000018f9	movl	%eax,0x0c(%edi)
000018fc	movb	0x14(%edi),%cl
000018ff	cmpl	0x1c(%edi),%eax
00001902	jle	0x0000190c
00001904	orb	$0x02,%cl
00001907	movb	%cl,0x14(%edi)
0000190a	jmp	0x0000193d
0000190c	andb	$0xfd,%cl
0000190f	movb	%cl,0x14(%edi)
00001912	movl	GetNoEscCharConversion()(%edi),%ecx
00001915	cmpl	%ecx,%eax
00001917	jl	0x00001920
00001919	addl	0x04(%edi),%ecx
0000191c	cmpl	%ecx,%eax
0000191e	jl	0x0000193d
00001920	movl	0x24(%edi),%eax
00001923	addl	0x28(%edi),%edi
00001926	testb	$0x01,%al
00001928	je	0x00001930
0000192a	movl	(%edi),%ecx
0000192c	movl	0xff(%eax,%ecx),%eax
00001930	movl	%edi,(%esp)
00001933	movl	$0xffffffff,0x04(%esp)
0000193b	call	*%eax
0000193d	movl	0xf0(%ebp),%eax
00001940	cmpl	%eax,%esi
00001942	leal	0xff(%eax),%eax
00001945	cmovll	%esi,%eax
00001948	movl	GetCStringCharConversion()(%ebp),%ecx
0000194b	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
0000194f	jmp	0x000017ea
00001954	movl	0x0c(%ebp),%eax
00001957	movl	%eax,0x04(%esp)
0000195b	movl	%edi,(%esp)
0000195e	calll	CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
00001963	cmpl	0xf0(%ebp),%esi
00001966	jge	0x0000189c
0000196c	movl	GetCStringCharConversion()(%ebp),%ecx
0000196f	movb	%al,(%ecx,%esi)
00001972	incl	%esi
00001973	jmp	0x0000189c
00001978	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::OnGetOverflow(int):
00001980	pushl	%ebp
00001981	movl	%esp,%ebp
00001983	pushl	%esi
00001984	subl	$0x14,%esp
00001987	movl	0x08(%ebp),%ecx
0000198a	movl	0x24(%ecx),%eax
0000198d	addl	0x28(%ecx),%ecx
00001990	movl	0x0c(%ebp),%edx
00001993	testb	$0x01,%al
00001995	je	0x0000199d
00001997	movl	(%ecx),%esi
00001999	movl	0xff(%eax,%esi),%eax
0000199d	movl	%edx,0x04(%esp)
000019a1	movl	%ecx,(%esp)
000019a4	call	*%eax
000019a6	movzbl	%al,%eax
000019a9	addl	$0x14,%esp
000019ac	popl	%esi
000019ad	popl	%ebp
000019ae	ret
000019af	nop
CUtlBuffer::VaScanf(char const*, char*):
000019b0	pushl	%ebp
000019b1	movl	%esp,%ebp
000019b3	pushl	%ebx
000019b4	pushl	%edi
000019b5	pushl	%esi
000019b6	subl	$0x2c,%esp
000019b9	calll	0x000019be
000019be	popl	%eax
000019bf	movl	%eax,0xdc(%ebp)
000019c2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xe4(%ebp)
000019c9	movl	0x08(%ebp),%edi
000019cc	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000019d0	jne	0x00001d36
000019d6	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xe4(%ebp)
000019dd	testb	$0x01,0x15(%edi)
000019e1	je	0x00001d36
000019e7	movl	GetCStringCharConversion()(%ebp),%ecx
000019ea	movl	0x0c(%ebp),%esi
000019ed	xorl	%eax,%eax
000019ef	jmp	0x00001c30
000019f4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001a00	movl	(%esi),%ebx
00001a02	movl	%edi,(%esp)
00001a05	movl	$0x00000001,0x08(%esp)
00001a0d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001a15	calll	CUtlBuffer::CheckPeekGet(int, int)
00001a1a	testb	%al,%al
00001a1c	je	0x00001d33
00001a22	movl	(%edi),%eax
00001a24	movl	0x0c(%edi),%ecx
00001a27	subl	GetNoEscCharConversion()(%edi),%ecx
00001a2a	movb	(%eax,%ecx),%al
00001a2d	movb	%al,(%ebx)
00001a2f	incl	0x0c(%edi)
00001a32	movl	0xe8(%ebp),%esi
00001a35	jmp	0x00001c26
00001a3a	movl	%ecx,%ebx
00001a3c	subl	%eax,%ebx
00001a3e	subl	$0x80,%eax
00001a41	cmpl	%ecx,%eax
00001a43	movl	$0x00000080,%eax
00001a48	cmovlel	%eax,%ebx
00001a4b	movl	(%esi),%eax
00001a4d	movl	%eax,0xe0(%ebp)
00001a50	movl	%esi,0xec(%ebp)
00001a53	movl	%ebx,0x08(%esp)
00001a57	movl	%edi,(%esp)
00001a5a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001a62	calll	CUtlBuffer::CheckPeekGet(int, int)
00001a67	movl	0x0c(%edi),%eax
00001a6a	movl	0x1c(%edi),%ecx
00001a6d	subl	%eax,%ecx
00001a6f	cmpl	%ebx,%ecx
00001a71	cmovgel	%ebx,%ecx
00001a74	testl	%ecx,%ecx
00001a76	jne	0x00001aa3
00001a78	jmp	0x00001d28
00001a7d	movsbl	0xff(%esi),%edx
00001a81	testl	%edx,%edx
00001a83	je	0x00001d36
00001a89	cmpl	$0x72,%edx
00001a8c	jg	0x00001cc4
00001a92	addl	$0x9d,%edx
00001a95	cmpl	$0x06,%edx
00001a98	ja	0x00001d36
00001a9e	jmp	0x00001cb0
00001aa3	subl	GetNoEscCharConversion()(%edi),%eax
00001aa6	movl	(%edi),%ecx
00001aa8	leal	0xf0(%ebp),%edx
00001aab	movl	%edx,0x04(%esp)
00001aaf	addl	%eax,%ecx
00001ab1	movl	%ecx,(%esp)
00001ab4	movl	$0x0000000a,0x08(%esp)
00001abc	calll	_strtol
00001ac1	movl	0xe0(%ebp),%ecx
00001ac4	movl	%eax,(%ecx)
00001ac6	movl	0x0c(%edi),%ecx
00001ac9	movl	%ecx,%eax
00001acb	subl	GetNoEscCharConversion()(%edi),%eax
00001ace	addl	(%edi),%eax
00001ad0	movl	0xf0(%ebp),%edx
00001ad3	cmpl	%eax,%edx
00001ad5	je	0x00001d36
00001adb	addl	%ecx,%edx
00001add	subl	%eax,%edx
00001adf	movl	%edx,0x0c(%edi)
00001ae2	movl	0xe8(%ebp),%esi
00001ae5	jmp	0x00001c26
00001aea	subl	GetNoEscCharConversion()(%edi),%eax
00001aed	movl	(%edi),%ecx
00001aef	leal	0xf0(%ebp),%edx
00001af2	movl	%edx,0x04(%esp)
00001af6	addl	%eax,%ecx
00001af8	movl	%ecx,(%esp)
00001afb	movl	GetCStringCharConversion(),0x08(%esp)
00001b03	calll	_strtol
00001b08	movl	0xe8(%ebp),%ecx
00001b0b	movl	%eax,(%ecx)
00001b0d	movl	0x0c(%edi),%ecx
00001b10	movl	%ecx,%eax
00001b12	subl	GetNoEscCharConversion()(%edi),%eax
00001b15	addl	(%edi),%eax
00001b17	movl	0xf0(%ebp),%edx
00001b1a	cmpl	%eax,%edx
00001b1c	je	0x00001d36
00001b22	addl	%ecx,%edx
00001b24	subl	%eax,%edx
00001b26	movl	%edx,0x0c(%edi)
00001b29	jmp	0x00001c26
00001b2e	movl	%ecx,%ebx
00001b30	subl	%eax,%ebx
00001b32	subl	$0x80,%eax
00001b35	cmpl	%ecx,%eax
00001b37	movl	$0x00000080,%eax
00001b3c	cmovlel	%eax,%ebx
00001b3f	movl	0xec(%ebp),%eax
00001b42	movl	(%eax),%eax
00001b44	movl	%eax,0xe8(%ebp)
00001b47	movl	%ebx,0x08(%esp)
00001b4b	movl	%edi,(%esp)
00001b4e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001b56	calll	CUtlBuffer::CheckPeekGet(int, int)
00001b5b	movl	0x0c(%edi),%eax
00001b5e	movl	0x1c(%edi),%ecx
00001b61	subl	%eax,%ecx
00001b63	cmpl	%ebx,%ecx
00001b65	cmovgel	%ebx,%ecx
00001b68	testl	%ecx,%ecx
00001b6a	je	0x00001d1d
00001b70	subl	GetNoEscCharConversion()(%edi),%eax
00001b73	movl	(%edi),%ecx
00001b75	leal	0xf0(%ebp),%edx
00001b78	movl	%edx,0x04(%esp)
00001b7c	addl	%eax,%ecx
00001b7e	movl	%ecx,(%esp)
00001b81	movl	$0x0000000a,0x08(%esp)
00001b89	calll	_strtoul
00001b8e	jmp	0x00001b08
00001b93	movl	%ecx,%ebx
00001b95	subl	%eax,%ebx
00001b97	subl	$0x80,%eax
00001b9a	cmpl	%ecx,%eax
00001b9c	movl	$0x00000080,%eax
00001ba1	cmovlel	%eax,%ebx
00001ba4	movl	(%esi),%eax
00001ba6	movl	%eax,0xe0(%ebp)
00001ba9	movl	%esi,0xec(%ebp)
00001bac	movl	%ebx,0x08(%esp)
00001bb0	movl	%edi,(%esp)
00001bb3	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001bbb	calll	CUtlBuffer::CheckPeekGet(int, int)
00001bc0	movl	0x0c(%edi),%eax
00001bc3	movl	0x1c(%edi),%ecx
00001bc6	subl	%eax,%ecx
00001bc8	cmpl	%ebx,%ecx
00001bca	cmovgel	%ebx,%ecx
00001bcd	testl	%ecx,%ecx
00001bcf	je	0x00001d28
00001bd5	subl	GetNoEscCharConversion()(%edi),%eax
00001bd8	movl	(%edi),%ecx
00001bda	leal	0xf0(%ebp),%edx
00001bdd	movl	%edx,0x04(%esp)
00001be1	addl	%eax,%ecx
00001be3	movl	%ecx,(%esp)
00001be6	calll	_strtod$UNIX2003
00001beb	movl	0xe0(%ebp),%eax
00001bee	fstps	(%eax)
00001bf0	movl	0x0c(%edi),%ecx
00001bf3	movl	%ecx,%eax
00001bf5	subl	GetNoEscCharConversion()(%edi),%eax
00001bf8	addl	(%edi),%eax
00001bfa	movl	0xf0(%ebp),%edx
00001bfd	cmpl	%eax,%edx
00001bff	movl	0xe8(%ebp),%esi
00001c02	jne	0x00001b22
00001c08	jmp	0x00001d36
00001c0d	movl	0xec(%ebp),%eax
00001c10	movl	(%eax),%eax
00001c12	movl	%eax,0x04(%esp)
00001c16	movl	%edi,(%esp)
00001c19	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esp)
00001c21	calll	CUtlBuffer::GetString(char*, int)
00001c26	movl	0xe4(%ebp),%eax
00001c29	incl	%eax
00001c2a	movl	0xec(%ebp),%ecx
00001c2d	addl	$0x04,%ecx
00001c30	movl	%ecx,0xec(%ebp)
00001c33	movl	%eax,0xe4(%ebp)
00001c36	addl	$0x02,%esi
00001c39	jmp	0x00001c91
00001c3b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001c40	movl	%edi,(%esp)
00001c43	movl	$0x00000001,0x08(%esp)
00001c4b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001c53	calll	CUtlBuffer::CheckPeekGet(int, int)
00001c58	cmpb	$0x01,%al
00001c5a	jne	0x00001d36
00001c60	movl	(%edi),%ecx
00001c62	movl	0x0c(%edi),%eax
00001c65	movl	%eax,%edx
00001c67	subl	GetNoEscCharConversion()(%edi),%edx
00001c6a	cmpb	(%ecx,%edx),%bl
00001c6d	jne	0x00001d36
00001c73	incl	%eax
00001c74	movl	%eax,0x0c(%edi)
00001c77	incl	%esi
00001c78	jmp	0x00001c91
00001c7a	cmpl	$0x25,%ebx
00001c7d	je	0x00001a7d
00001c83	cmpl	GetNoEscCharConversion(),%ebx
00001c86	jne	0x00001c40
00001c88	movl	%edi,(%esp)
00001c8b	calll	CUtlBuffer::EatWhiteSpace()
00001c90	incl	%esi
00001c91	movsbl	0xfe(%esi),%ebx
00001c95	testl	%ebx,%ebx
00001c97	je	0x00001d36
00001c9d	movl	0x0c(%edi),%eax
00001ca0	movl	0x1c(%edi),%ecx
00001ca3	cmpl	%ecx,%eax
00001ca5	jl	0x00001c7a
00001ca7	orb	$0x02,0x14(%edi)
00001cab	jmp	0x00001d36
00001cb0	movl	%esi,0xe8(%ebp)
00001cb3	movl	0xdc(%ebp),%ebx
00001cb6	movl	0x00000386(%ebx,%edx,4),%edx
00001cbd	addl	%ebx,%edx
00001cbf	movl	0xec(%ebp),%esi
00001cc2	jmp	*%edx
00001cc4	cmpl	$0x73,%edx
00001cc7	je	0x00001c0d
00001ccd	cmpl	$0x75,%edx
00001cd0	je	0x00001b2e
00001cd6	cmpl	$0x78,%edx
00001cd9	jne	0x00001d36
00001cdb	movl	%ecx,%ebx
00001cdd	subl	%eax,%ebx
00001cdf	subl	$0x80,%eax
00001ce2	cmpl	%ecx,%eax
00001ce4	movl	$0x00000080,%eax
00001ce9	cmovlel	%eax,%ebx
00001cec	movl	0xec(%ebp),%eax
00001cef	movl	(%eax),%eax
00001cf1	movl	%eax,0xe8(%ebp)
00001cf4	movl	%ebx,0x08(%esp)
00001cf8	movl	%edi,(%esp)
00001cfb	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001d03	calll	CUtlBuffer::CheckPeekGet(int, int)
00001d08	movl	0x0c(%edi),%eax
00001d0b	movl	0x1c(%edi),%ecx
00001d0e	subl	%eax,%ecx
00001d10	cmpl	%ebx,%ecx
00001d12	cmovgel	%ebx,%ecx
00001d15	testl	%ecx,%ecx
00001d17	jne	0x00001aea
00001d1d	movl	0xe8(%ebp),%eax
00001d20	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001d26	jmp	0x00001d36
00001d28	movl	0xe0(%ebp),%eax
00001d2b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001d31	jmp	0x00001d36
00001d33	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00001d36	movl	0xe4(%ebp),%eax
00001d39	addl	$0x2c,%esp
00001d3c	popl	%esi
00001d3d	popl	%edi
00001d3e	popl	%ebx
00001d3f	popl	%ebp
00001d40	ret
00001d41	nopl	(%eax)
00001d44	incl	%edx
00001d45	addb	%al,(%eax)
00001d47	addb	%bh,CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001d4b	addb	%bh,0x03(%eax)
00001d4e	addb	%al,(%eax)
00001d50	aad	$0x1
00001d52	addb	%al,(%eax)
00001d54	js	0x00001d59
00001d56	addb	%al,(%eax)
00001d58	js	0x00001d5d
00001d5a	addb	%al,(%eax)
00001d5c	jl	0x00001d5e
00001d5e	addb	%al,(%eax)
CUtlBuffer::Scanf(char const*, ...):
00001d60	pushl	%ebp
00001d61	movl	%esp,%ebp
00001d63	subl	$0x18,%esp
00001d66	leal	GetCStringCharConversion()(%ebp),%eax
00001d69	movl	%eax,0xfc(%ebp)
00001d6c	movl	%eax,0x08(%esp)
00001d70	movl	0x0c(%ebp),%eax
00001d73	movl	%eax,0x04(%esp)
00001d77	movl	0x08(%ebp),%eax
00001d7a	movl	%eax,(%esp)
00001d7d	calll	CUtlBuffer::VaScanf(char const*, char*)
00001d82	addl	$0x18,%esp
00001d85	popl	%ebp
00001d86	ret
00001d87	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetToken(char const*):
00001d90	pushl	%ebp
00001d91	movl	%esp,%ebp
00001d93	pushl	%ebx
00001d94	pushl	%edi
00001d95	pushl	%esi
00001d96	subl	$0x1c,%esp
00001d99	movl	0x0c(%ebp),%eax
00001d9c	movl	%eax,(%esp)
00001d9f	calll	_strlen
00001da4	movl	%eax,0xf0(%ebp)
00001da7	movl	$0x00000001,%ecx
00001dac	subl	%eax,%ecx
00001dae	movl	%ecx,0xec(%ebp)
00001db1	movl	0x08(%ebp),%edi
00001db4	movl	0x04(%edi),%esi
00001db7	movl	0x0c(%edi),%ecx
00001dba	movl	%ecx,0xe4(%ebp)
00001dbd	subl	%ecx,%esi
00001dbf	subl	GetNoEscCharConversion()(%edi),%esi
00001dc2	notl	%eax
00001dc4	movl	%eax,0xe8(%ebp)
00001dc7	jmp	0x00001e4d
00001dcc	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
00001dd0	addl	0xe8(%ebp),%ebx
00001dd3	addl	0x0c(%edi),%ebx
00001dd6	movl	%ebx,0x0c(%edi)
00001dd9	movb	0x14(%edi),%al
00001ddc	cmpl	0x1c(%edi),%ebx
00001ddf	jle	0x00001e10
00001de1	orb	$0x02,%al
00001de3	movb	%al,0x14(%edi)
00001de6	movl	%ebx,%ecx
00001de8	jmp	0x00001e47
00001dea	movl	(%edi),%eax
00001dec	movl	0x0c(%edi),%esi
00001def	subl	GetNoEscCharConversion()(%edi),%esi
00001df2	movl	%ebx,0x08(%esp)
00001df6	movl	0x0c(%ebp),%ecx
00001df9	movl	%ecx,0x04(%esp)
00001dfd	addl	%eax,%esi
00001dff	movl	%esi,(%esp)
00001e02	calll	V_strnistr(char const*, char const*, int)
00001e07	testl	%eax,%eax
00001e09	je	0x00001dd0
00001e0b	jmp	0x00001e94
00001e10	andb	$0xfd,%al
00001e12	movb	%al,0x14(%edi)
00001e15	movl	GetNoEscCharConversion()(%edi),%eax
00001e18	cmpl	%eax,%ebx
00001e1a	jl	0x00001e25
00001e1c	addl	0x04(%edi),%eax
00001e1f	cmpl	%eax,%ebx
00001e21	movl	%ebx,%ecx
00001e23	jl	0x00001e47
00001e25	movl	0x24(%edi),%eax
00001e28	movl	0x28(%edi),%ecx
00001e2b	addl	%edi,%ecx
00001e2d	testb	$0x01,%al
00001e2f	je	0x00001e37
00001e31	movl	(%ecx),%edx
00001e33	movl	0xff(%eax,%edx),%eax
00001e37	movl	%ecx,(%esp)
00001e3a	movl	$0xffffffff,0x04(%esp)
00001e42	call	*%eax
00001e44	movl	0x0c(%edi),%ecx
00001e47	movl	0x04(%edi),%esi
00001e4a	addl	0xec(%ebp),%esi
00001e4d	movl	0x1c(%edi),%edx
00001e50	movl	%edx,%ebx
00001e52	subl	%ecx,%ebx
00001e54	cmpl	%esi,%ebx
00001e56	cmovgel	%esi,%ebx
00001e59	cmpl	%ebx,0xf0(%ebp)
00001e5c	jg	0x00001e7d
00001e5e	movl	%ebx,0x08(%esp)
00001e62	movl	%edi,(%esp)
00001e65	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001e6d	calll	CUtlBuffer::CheckPeekGet(int, int)
00001e72	testb	%al,%al
00001e74	jne	0x00001dea
00001e7a	movl	0x1c(%edi),%edx
00001e7d	movl	0xe4(%ebp),%esi
00001e80	movl	%esi,0x0c(%edi)
00001e83	movb	0x14(%edi),%al
00001e86	cmpl	%edx,%esi
00001e88	jle	0x00001ee8
00001e8a	orb	$0x02,%al
00001e8c	movb	%al,0x14(%edi)
00001e8f	jmp	0x00001f1a
00001e94	addl	0xf0(%ebp),%eax
00001e97	subl	%esi,%eax
00001e99	addl	0x0c(%edi),%eax
00001e9c	movl	%eax,0x0c(%edi)
00001e9f	movb	0x14(%edi),%cl
00001ea2	cmpl	0x1c(%edi),%eax
00001ea5	jle	0x00001eb1
00001ea7	orb	$0x02,%cl
00001eaa	movb	%cl,0x14(%edi)
00001ead	movb	$0x01,%cl
00001eaf	jmp	0x00001f1c
00001eb1	andb	$0xfd,%cl
00001eb4	movb	%cl,0x14(%edi)
00001eb7	movl	GetNoEscCharConversion()(%edi),%edx
00001eba	cmpl	%edx,%eax
00001ebc	jl	0x00001ec7
00001ebe	addl	0x04(%edi),%edx
00001ec1	movb	$0x01,%cl
00001ec3	cmpl	%edx,%eax
00001ec5	jl	0x00001f1c
00001ec7	movl	0x24(%edi),%eax
00001eca	addl	0x28(%edi),%edi
00001ecd	testb	$0x01,%al
00001ecf	je	0x00001ed7
00001ed1	movl	(%edi),%ecx
00001ed3	movl	0xff(%eax,%ecx),%eax
00001ed7	movl	%edi,(%esp)
00001eda	movl	$0xffffffff,0x04(%esp)
00001ee2	call	*%eax
00001ee4	movb	$0x01,%cl
00001ee6	jmp	0x00001f1c
00001ee8	andb	$0xfd,%al
00001eea	movb	%al,0x14(%edi)
00001eed	movl	GetNoEscCharConversion()(%edi),%eax
00001ef0	cmpl	%eax,%esi
00001ef2	jl	0x00001efd
00001ef4	addl	0x04(%edi),%eax
00001ef7	xorb	%cl,%cl
00001ef9	cmpl	%eax,%esi
00001efb	jl	0x00001f1c
00001efd	movl	0x24(%edi),%eax
00001f00	addl	0x28(%edi),%edi
00001f03	testb	$0x01,%al
00001f05	je	0x00001f0d
00001f07	movl	(%edi),%ecx
00001f09	movl	0xff(%eax,%ecx),%eax
00001f0d	movl	%edi,(%esp)
00001f10	movl	$0xffffffff,0x04(%esp)
00001f18	call	*%eax
00001f1a	xorb	%cl,%cl
00001f1c	movzbl	%cl,%eax
00001f1f	addl	$0x1c,%esp
00001f22	popl	%esi
00001f23	popl	%edi
00001f24	popl	%ebx
00001f25	popl	%ebp
00001f26	ret
00001f27	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::ParseToken(char const*, char const*, char*, int):
00001f30	pushl	%ebp
00001f31	movl	%esp,%ebp
00001f33	pushl	%ebx
00001f34	pushl	%edi
00001f35	pushl	%esi
00001f36	subl	$0x2c,%esp
00001f39	calll	0x00001f3e
00001f3e	popl	%eax
00001f3f	movl	%eax,0xec(%ebp)
00001f42	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf2(%ebp)
00001f46	movl	GetCStringCharConversion()(%ebp),%eax
00001f49	movl	%eax,(%esp)
00001f4c	calll	_strlen
00001f51	movl	%eax,0xe4(%ebp)
00001f54	movl	0x08(%ebp),%ebx
00001f57	movl	0x0c(%ebx),%eax
00001f5a	movl	%eax,0xe0(%ebp)
00001f5d	movl	%ebx,(%esp)
00001f60	leal	0xf2(%ebp),%esi
00001f63	movl	0x0c(%ebp),%eax
00001f66	testl	%eax,%eax
00001f68	cmovnel	%eax,%esi
00001f6b	jmp	0x00001f73
00001f6d	nopl	(%eax)
00001f70	movl	%ebx,(%esp)
00001f73	calll	CUtlBuffer::EatWhiteSpace()
00001f78	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001f80	movzbl	(%esi),%eax
00001f83	testl	%eax,%eax
00001f85	je	0x00002015
00001f8b	movsbl	%al,%ecx
00001f8e	movl	%ecx,0xe8(%ebp)
00001f91	incl	%esi
00001f92	testb	%al,%al
00001f94	js	0x00001fac
00001f96	movl	0xec(%ebp),%ecx
00001f99	movl	0x19013-0x1f3e(%ecx),%ecx
00001f9f	movl	0x34(%ecx,%eax,4),%eax
00001fa3	movl	$0x00004000,%ecx
00001fa8	andl	%ecx,%eax
00001faa	jmp	0x00001fbc
00001fac	movl	%eax,(%esp)
00001faf	movl	$0x00004000,0x04(%esp)
00001fb7	calll	___maskrune
00001fbc	testl	%eax,%eax
00001fbe	jne	0x00001f70
00001fc0	movl	0xec(%ebp),%eax
00001fc3	leal	0x151ef-0x1f3e(%eax),%eax
00001fc9	movl	%eax,0x08(%esp)
00001fcd	leal	0xf3(%ebp),%eax
00001fd0	movl	%eax,0x04(%esp)
00001fd4	movl	%ebx,(%esp)
00001fd7	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00001fdc	movsbl	0xf3(%ebp),%eax
00001fe0	movl	%eax,(%esp)
00001fe3	calll	___tolower
00001fe8	movl	%eax,%edi
00001fea	movl	0xe8(%ebp),%eax
00001fed	movl	%eax,(%esp)
00001ff0	calll	___tolower
00001ff5	cmpl	%eax,%edi
00001ff7	je	0x00001f80
00001ff9	movl	0xe0(%ebp),%ecx
00001ffc	movl	%ecx,0x0c(%ebx)
00001fff	movb	0x14(%ebx),%al
00002002	cmpl	0x1c(%ebx),%ecx
00002005	jle	0x00002167
0000200b	orb	$0x02,%al
0000200d	movb	%al,0x14(%ebx)
00002010	jmp	0x00002197
00002015	movl	%ebx,(%esp)
00002018	calll	CUtlBuffer::EatWhiteSpace()
0000201d	movl	0x0c(%ebx),%esi
00002020	movl	GetCStringCharConversion()(%ebp),%eax
00002023	movl	%eax,0x04(%esp)
00002027	movl	%ebx,(%esp)
0000202a	calll	CUtlBuffer::GetToken(char const*)
0000202f	testb	%al,%al
00002031	je	0x00001ff9
00002033	movl	0x0c(%ebx),%eax
00002036	movl	%eax,0xdc(%ebp)
00002039	subl	0xe4(%ebp),%eax
0000203c	subl	%esi,%eax
0000203e	movl	0x18(%ebp),%ecx
00002041	cmpl	%ecx,%eax
00002043	leal	0xff(%ecx),%edi
00002046	cmovll	%eax,%edi
00002049	testl	%edi,%edi
0000204b	jg	0x0000205b
0000204d	leal	0x14(%ebx),%ecx
00002050	leal	0x1c(%ebx),%eax
00002053	movl	%eax,0xe4(%ebp)
00002056	jmp	0x00002114
0000205b	movl	%esi,0x0c(%ebx)
0000205e	movb	0x14(%ebx),%al
00002061	leal	0x14(%ebx),%ecx
00002064	leal	0x1c(%ebx),%edx
00002067	movl	%edx,0xe4(%ebp)
0000206a	cmpl	0x1c(%ebx),%esi
0000206d	jle	0x00002078
0000206f	orb	$0x02,%al
00002071	movb	%al,(%ecx)
00002073	movl	%ecx,0xe8(%ebp)
00002076	jmp	0x000020ad
00002078	movl	%ecx,0xe8(%ebp)
0000207b	andb	$0xfd,%al
0000207d	movb	%al,0x14(%ebx)
00002080	movl	GetNoEscCharConversion()(%ebx),%eax
00002083	cmpl	%eax,%esi
00002085	jl	0x0000208e
00002087	addl	0x04(%ebx),%eax
0000208a	cmpl	%eax,%esi
0000208c	jl	0x000020ad
0000208e	movl	0x24(%ebx),%eax
00002091	movl	0x28(%ebx),%ecx
00002094	addl	%ebx,%ecx
00002096	testb	$0x01,%al
00002098	je	0x000020a0
0000209a	movl	(%ecx),%edx
0000209c	movl	0xff(%eax,%edx),%eax
000020a0	movl	%ecx,(%esp)
000020a3	movl	$0xffffffff,0x04(%esp)
000020ab	call	*%eax
000020ad	movl	%edi,0x08(%esp)
000020b1	movl	0x14(%ebp),%eax
000020b4	movl	%eax,0x04(%esp)
000020b8	movl	%ebx,(%esp)
000020bb	calll	CUtlBuffer::Get(void*, int)
000020c0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000020c4	jne	0x00001ff9
000020ca	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000020d0	movl	%edi,%esi
000020d2	testl	%esi,%esi
000020d4	jle	0x0000210f
000020d6	movl	0x14(%ebp),%eax
000020d9	movzbl	0xff(%eax,%esi),%eax
000020de	leal	0xff(%esi),%edi
000020e1	testb	%al,%al
000020e3	js	0x000020fb
000020e5	movl	0xec(%ebp),%ecx
000020e8	movl	0x19013-0x1f3e(%ecx),%ecx
000020ee	movl	0x34(%ecx,%eax,4),%eax
000020f2	movl	$0x00004000,%ecx
000020f7	andl	%ecx,%eax
000020f9	jmp	0x0000210b
000020fb	movl	%eax,(%esp)
000020fe	movl	$0x00004000,0x04(%esp)
00002106	calll	___maskrune
0000210b	testl	%eax,%eax
0000210d	jne	0x000020d0
0000210f	movl	%esi,%edi
00002111	movl	0xe8(%ebp),%ecx
00002114	movl	0x14(%ebp),%eax
00002117	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax,%edi)
0000211b	movl	0xdc(%ebp),%edx
0000211e	movl	%edx,0x0c(%ebx)
00002121	movb	(%ecx),%al
00002123	movl	0xe4(%ebp),%esi
00002126	cmpl	(%esi),%edx
00002128	jle	0x00002132
0000212a	orb	$0x02,%al
0000212c	movb	%al,(%ecx)
0000212e	movb	$0x01,%al
00002130	jmp	0x0000219f
00002132	andb	$0xfd,%al
00002134	movb	%al,(%ecx)
00002136	movl	GetNoEscCharConversion()(%ebx),%ecx
00002139	cmpl	%ecx,%edx
0000213b	jl	0x00002146
0000213d	addl	0x04(%ebx),%ecx
00002140	movb	$0x01,%al
00002142	cmpl	%ecx,%edx
00002144	jl	0x0000219f
00002146	movl	0x24(%ebx),%eax
00002149	addl	0x28(%ebx),%ebx
0000214c	testb	$0x01,%al
0000214e	je	0x00002156
00002150	movl	(%ebx),%ecx
00002152	movl	0xff(%eax,%ecx),%eax
00002156	movl	%ebx,(%esp)
00002159	movl	$0xffffffff,0x04(%esp)
00002161	call	*%eax
00002163	movb	$0x01,%al
00002165	jmp	0x0000219f
00002167	andb	$0xfd,%al
00002169	movb	%al,0x14(%ebx)
0000216c	movl	GetNoEscCharConversion()(%ebx),%eax
0000216f	cmpl	%eax,%ecx
00002171	jl	0x0000217a
00002173	addl	0x04(%ebx),%eax
00002176	cmpl	%eax,%ecx
00002178	jl	0x00002197
0000217a	movl	0x24(%ebx),%eax
0000217d	addl	0x28(%ebx),%ebx
00002180	testb	$0x01,%al
00002182	je	0x0000218a
00002184	movl	(%ebx),%ecx
00002186	movl	0xff(%eax,%ecx),%eax
0000218a	movl	%ebx,(%esp)
0000218d	movl	$0xffffffff,0x04(%esp)
00002195	call	*%eax
00002197	movl	0x14(%ebp),%eax
0000219a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
0000219d	xorb	%al,%al
0000219f	movzbl	%al,%eax
000021a2	addl	$0x2c,%esp
000021a5	popl	%esi
000021a6	popl	%edi
000021a7	popl	%ebx
000021a8	popl	%ebp
000021a9	ret
000021aa	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::ParseToken(characterset_t*, char*, int, bool):
000021b0	pushl	%ebp
000021b1	movl	%esp,%ebp
000021b3	pushl	%ebx
000021b4	pushl	%edi
000021b5	pushl	%esi
000021b6	subl	$0x1c,%esp
000021b9	calll	0x000021be
000021be	popl	%edi
000021bf	movl	GetCStringCharConversion()(%ebp),%eax
000021c2	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000021c5	movl	0x08(%ebp),%ebx
000021c8	movl	$0xffffffff,%esi
000021cd	nopl	(%eax)
000021d0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000021d4	jne	0x00002319
000021da	movl	%ebx,(%esp)
000021dd	calll	CUtlBuffer::EatWhiteSpace()
000021e2	cmpb	$0x01,0x18(%ebp)
000021e6	jne	0x000021f4
000021e8	movl	%ebx,(%esp)
000021eb	calll	CUtlBuffer::EatCPPComment()
000021f0	testb	%al,%al
000021f2	jne	0x000021d0
000021f4	leal	0x151ef-0x21be(%edi),%edi
000021fa	movl	%edi,0x08(%esp)
000021fe	leal	0xf1(%ebp),%eax
00002201	movl	%eax,0x04(%esp)
00002205	movl	%ebx,(%esp)
00002208	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000220d	movzbl	0xf1(%ebp),%eax
00002211	movl	$0xffffffff,%esi
00002216	testl	%eax,%eax
00002218	je	0x00002319
0000221e	cmpb	$0x22,%al
00002220	jne	0x0000227c
00002222	xorl	%esi,%esi
00002224	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00002230	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00002234	jne	0x00002312
0000223a	movl	%edi,0x08(%esp)
0000223e	leal	0xf3(%ebp),%eax
00002241	movl	%eax,0x04(%esp)
00002245	movl	%ebx,(%esp)
00002248	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000224d	movb	0xf3(%ebp),%al
00002250	testb	%al,%al
00002252	je	0x00002312
00002258	cmpb	$0x22,%al
0000225a	je	0x00002312
00002260	movl	GetCStringCharConversion()(%ebp),%ecx
00002263	movb	%al,(%ecx,%esi)
00002266	incl	%esi
00002267	cmpl	%esi,0x14(%ebp)
0000226a	jne	0x00002230
0000226c	movl	GetCStringCharConversion()(%ebp),%eax
0000226f	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%esi)
00002274	movl	0x14(%ebp),%esi
00002277	jmp	0x00002319
0000227c	movl	0x0c(%ebp),%ecx
0000227f	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
00002283	jne	0x00002323
00002289	movl	$0x00000001,%ecx
0000228e	nop
00002290	movl	%ecx,%esi
00002292	movl	GetCStringCharConversion()(%ebp),%ecx
00002295	movb	%al,0xff(%ecx,%esi)
00002299	cmpl	%esi,0x14(%ebp)
0000229c	je	0x0000226c
0000229e	movl	%edi,0x08(%esp)
000022a2	leal	0xf2(%ebp),%eax
000022a5	movl	%eax,0x04(%esp)
000022a9	movl	%ebx,(%esp)
000022ac	calll	void CUtlBuffer::GetType<char>(char&, char const*)
000022b1	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000022b5	jne	0x00002312
000022b7	movb	0xf2(%ebp),%al
000022ba	movzbl	%al,%ecx
000022bd	movl	0x0c(%ebp),%edx
000022c0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edx,%ecx)
000022c4	jne	0x000022d1
000022c6	cmpb	$0x22,%al
000022c8	je	0x000022d1
000022ca	leal	0x01(%esi),%ecx
000022cd	cmpb	GetNoEscCharConversion(),%al
000022cf	jg	0x00002290
000022d1	movl	0x0c(%ebx),%eax
000022d4	decl	%eax
000022d5	movl	%eax,0x0c(%ebx)
000022d8	cmpl	0x1c(%ebx),%eax
000022db	jle	0x000022e3
000022dd	movb	$0x02,0x14(%ebx)
000022e1	jmp	0x00002312
000022e3	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000022e7	movl	GetNoEscCharConversion()(%ebx),%ecx
000022ea	cmpl	%ecx,%eax
000022ec	jl	0x000022f5
000022ee	addl	0x04(%ebx),%ecx
000022f1	cmpl	%ecx,%eax
000022f3	jl	0x00002312
000022f5	movl	0x24(%ebx),%eax
000022f8	addl	0x28(%ebx),%ebx
000022fb	testb	$0x01,%al
000022fd	je	0x00002305
000022ff	movl	(%ebx),%ecx
00002301	movl	0xff(%eax,%ecx),%eax
00002305	movl	%ebx,(%esp)
00002308	movl	$0xffffffff,0x04(%esp)
00002310	call	*%eax
00002312	movl	GetCStringCharConversion()(%ebp),%eax
00002315	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax,%esi)
00002319	movl	%esi,%eax
0000231b	addl	$0x1c,%esp
0000231e	popl	%esi
0000231f	popl	%edi
00002320	popl	%ebx
00002321	popl	%ebp
00002322	ret
00002323	movl	GetCStringCharConversion()(%ebp),%ecx
00002326	movb	%al,(%ecx)
00002328	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x01(%ecx)
0000232c	movl	$0x00000001,%esi
00002331	jmp	0x00002319
00002333	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Put(void const*, int):
00002340	pushl	%ebp
00002341	movl	%esp,%ebp
00002343	pushl	%ebx
00002344	pushl	%edi
00002345	pushl	%esi
00002346	subl	$0x0c,%esp
00002349	movl	GetCStringCharConversion()(%ebp),%esi
0000234c	testl	%esi,%esi
0000234e	je	0x000023c6
00002350	movl	0x08(%ebp),%edi
00002353	testb	$0x01,0x14(%edi)
00002357	jne	0x000023c6
00002359	testb	$0x08,0x15(%edi)
0000235d	jne	0x000023c6
0000235f	movl	0x0c(%ebp),%ebx
00002362	movl	GetCStringCharConversion()(%edi),%eax
00002365	movl	GetNoEscCharConversion()(%edi),%ecx
00002368	cmpl	%ecx,%eax
0000236a	jl	0x00002376
0000236c	leal	(%eax,%esi),%edx
0000236f	subl	%ecx,%edx
00002371	cmpl	%edx,0x04(%edi)
00002374	jge	0x0000239b
00002376	movl	0x2c(%edi),%eax
00002379	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%ecx
0000237c	addl	%edi,%ecx
0000237e	testb	$0x01,%al
00002380	je	0x00002388
00002382	movl	(%ecx),%edx
00002384	movl	0xff(%eax,%edx),%eax
00002388	movl	%esi,0x04(%esp)
0000238c	movl	%ecx,(%esp)
0000238f	call	*%eax
00002391	cmpb	$0x01,%al
00002393	jne	0x000023c2
00002395	movl	GetCStringCharConversion()(%edi),%eax
00002398	movl	GetNoEscCharConversion()(%edi),%ecx
0000239b	subl	%ecx,%eax
0000239d	js	0x000023c6
0000239f	movl	(%edi),%ecx
000023a1	movl	%esi,0x08(%esp)
000023a5	movl	%ebx,0x04(%esp)
000023a9	addl	%eax,%ecx
000023ab	movl	%ecx,(%esp)
000023ae	calll	_memcpy
000023b3	addl	%esi,GetCStringCharConversion()(%edi)
000023b6	addl	$0x0c,%esp
000023b9	popl	%esi
000023ba	popl	%edi
000023bb	popl	%ebx
000023bc	popl	%ebp
000023bd	jmp	CUtlBuffer::AddNullTermination()
000023c2	orb	$0x01,0x14(%edi)
000023c6	addl	$0x0c,%esp
000023c9	popl	%esi
000023ca	popl	%edi
000023cb	popl	%ebx
000023cc	popl	%ebp
000023cd	ret
000023ce	nop
CUtlBuffer::CheckPut(int):
000023d0	pushl	%ebp
000023d1	movl	%esp,%ebp
000023d3	pushl	%edi
000023d4	pushl	%esi
000023d5	subl	GetCStringCharConversion(),%esp
000023d8	xorb	%cl,%cl
000023da	movl	0x08(%ebp),%esi
000023dd	testb	$0x01,0x14(%esi)
000023e1	jne	0x0000242b
000023e3	xorb	%cl,%cl
000023e5	testb	$0x08,0x15(%esi)
000023e9	jne	0x0000242b
000023eb	movl	0x0c(%ebp),%eax
000023ee	movl	GetCStringCharConversion()(%esi),%edx
000023f1	movl	GetNoEscCharConversion()(%esi),%ecx
000023f4	cmpl	%ecx,%edx
000023f6	jl	0x00002403
000023f8	addl	%eax,%edx
000023fa	subl	%ecx,%edx
000023fc	movb	$0x01,%cl
000023fe	cmpl	%edx,0x04(%esi)
00002401	jge	0x0000242b
00002403	movl	0x2c(%esi),%ecx
00002406	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%edx
00002409	addl	%esi,%edx
0000240b	testb	$0x01,%cl
0000240e	je	0x00002416
00002410	movl	(%edx),%edi
00002412	movl	0xff(%ecx,%edi),%ecx
00002416	movl	%eax,0x04(%esp)
0000241a	movl	%edx,(%esp)
0000241d	call	*%ecx
0000241f	movb	$0x01,%cl
00002421	testb	%al,%al
00002423	jne	0x0000242b
00002425	orb	$0x01,0x14(%esi)
00002429	xorb	%cl,%cl
0000242b	movzbl	%cl,%eax
0000242e	addl	GetCStringCharConversion(),%esp
00002431	popl	%esi
00002432	popl	%edi
00002433	popl	%ebp
00002434	ret
00002435	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PutString(char const*):
00002440	pushl	%ebp
00002441	movl	%esp,%ebp
00002443	pushl	%ebx
00002444	pushl	%edi
00002445	pushl	%esi
00002446	subl	$0x0c,%esp
00002449	movl	0x08(%ebp),%edi
0000244c	movb	0x15(%edi),%al
0000244f	movl	0x0c(%ebp),%ebx
00002452	testb	$0x01,%al
00002454	jne	0x000024d2
00002456	testl	%ebx,%ebx
00002458	je	0x00002468
0000245a	movl	%ebx,(%esp)
0000245d	calll	_strlen
00002462	incl	%eax
00002463	jmp	0x0000253f
00002468	testb	$0x01,0x14(%edi)
0000246c	jne	0x0000254f
00002472	testb	$0x08,%al
00002474	jne	0x0000254f
0000247a	movl	GetCStringCharConversion()(%edi),%eax
0000247d	movl	GetNoEscCharConversion()(%edi),%ecx
00002480	cmpl	%ecx,%eax
00002482	jl	0x0000248e
00002484	leal	0x01(%eax),%edx
00002487	subl	%ecx,%edx
00002489	cmpl	%edx,0x04(%edi)
0000248c	jge	0x000024bb
0000248e	movl	0x2c(%edi),%eax
00002491	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%ecx
00002494	addl	%edi,%ecx
00002496	testb	$0x01,%al
00002498	je	0x000024a0
0000249a	movl	(%ecx),%edx
0000249c	movl	0xff(%eax,%edx),%eax
000024a0	movl	%ecx,(%esp)
000024a3	movl	$0x00000001,0x04(%esp)
000024ab	call	*%eax
000024ad	cmpb	$0x01,%al
000024af	jne	0x00002557
000024b5	movl	GetCStringCharConversion()(%edi),%eax
000024b8	movl	GetNoEscCharConversion()(%edi),%ecx
000024bb	subl	%ecx,%eax
000024bd	movl	(%edi),%ecx
000024bf	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
000024c3	incl	GetCStringCharConversion()(%edi)
000024c6	addl	$0x0c,%esp
000024c9	popl	%esi
000024ca	popl	%edi
000024cb	popl	%ebx
000024cc	popl	%ebp
000024cd	jmp	CUtlBuffer::AddNullTermination()
000024d2	testl	%ebx,%ebx
000024d4	je	0x0000254f
000024d6	testb	GetCStringCharConversion(),%al
000024d8	jne	0x00002533
000024da	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
000024de	jle	0x00002533
000024e0	movl	GetCStringCharConversion()(%edi),%eax
000024e3	testl	%eax,%eax
000024e5	je	0x000024fb
000024e7	decl	%eax
000024e8	subl	GetNoEscCharConversion()(%edi),%eax
000024eb	movl	(%edi),%ecx
000024ed	cmpb	$0x0a,(%ecx,%eax)
000024f1	jne	0x000024fb
000024f3	movl	%edi,(%esp)
000024f6	calll	CUtlBuffer::PutTabs()
000024fb	movl	%ebx,(%esp)
000024fe	movl	$0x0000000a,0x04(%esp)
00002506	calll	_strchr
0000250b	movl	%eax,%esi
0000250d	testl	%esi,%esi
0000250f	je	0x00002533
00002511	movl	%ebx,0x04(%esp)
00002515	movl	%edi,(%esp)
00002518	movl	$0x00000001,%eax
0000251d	subl	%ebx,%eax
0000251f	addl	%esi,%eax
00002521	movl	%eax,0x08(%esp)
00002525	calll	CUtlBuffer::Put(void const*, int)
0000252a	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x01(%esi)
0000252e	leal	0x01(%esi),%ebx
00002531	jne	0x000024f3
00002533	movl	%ebx,(%esp)
00002536	calll	_strlen
0000253b	testl	%eax,%eax
0000253d	je	0x0000254f
0000253f	movl	%eax,0x08(%esp)
00002543	movl	%ebx,0x04(%esp)
00002547	movl	%edi,(%esp)
0000254a	calll	CUtlBuffer::Put(void const*, int)
0000254f	addl	$0x0c,%esp
00002552	popl	%esi
00002553	popl	%edi
00002554	popl	%ebx
00002555	popl	%ebp
00002556	ret
00002557	orb	$0x01,0x14(%edi)
0000255b	jmp	0x0000254f
0000255d	nopl	(%eax)
CUtlBuffer::PutDelimitedChar(CUtlCharConversion*, char):
00002560	pushl	%ebp
00002561	movl	%esp,%ebp
00002563	pushl	%ebx
00002564	pushl	%edi
00002565	pushl	%esi
00002566	subl	$0x0c,%esp
00002569	movb	GetCStringCharConversion()(%ebp),%al
0000256c	movl	0x08(%ebp),%ecx
0000256f	testb	$0x01,0x15(%ecx)
00002573	je	0x0000257c
00002575	movl	0x0c(%ebp),%edx
00002578	testl	%edx,%edx
0000257a	jne	0x00002593
0000257c	movsbl	%al,%eax
0000257f	movl	%eax,0x04(%esp)
00002583	movl	%ecx,(%esp)
00002586	calll	CUtlBuffer::PutChar(char)
0000258b	addl	$0x0c,%esp
0000258e	popl	%esi
0000258f	popl	%edi
00002590	popl	%ebx
00002591	popl	%ebp
00002592	ret
00002593	movzbl	%al,%esi
00002596	movl	0x00000118(%edx,%esi,8),%ebx
0000259d	testl	%ebx,%ebx
0000259f	je	0x0000257c
000025a1	movsbl	0x04(%edx),%eax
000025a5	movl	%eax,0x04(%esp)
000025a9	movl	%ecx,(%esp)
000025ac	movl	%edx,%edi
000025ae	calll	CUtlBuffer::PutChar(char)
000025b3	movl	0x0000011c(%edi,%esi,8),%eax
000025ba	movl	%ebx,0x08(%esp)
000025be	movl	%eax,0x04(%esp)
000025c2	movl	0x08(%ebp),%eax
000025c5	movl	%eax,(%esp)
000025c8	calll	CUtlBuffer::Put(void const*, int)
000025cd	jmp	0x0000258b
000025cf	nop
CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*):
000025d0	pushl	%ebp
000025d1	movl	%esp,%ebp
000025d3	pushl	%ebx
000025d4	pushl	%edi
000025d5	pushl	%esi
000025d6	subl	$0x1c,%esp
000025d9	movl	GetCStringCharConversion()(%ebp),%ebx
000025dc	movl	0x08(%ebp),%edi
000025df	testb	$0x01,0x15(%edi)
000025e3	je	0x000025ec
000025e5	movl	0x0c(%ebp),%esi
000025e8	testl	%esi,%esi
000025ea	jne	0x00002600
000025ec	movl	%ebx,0x04(%esp)
000025f0	movl	%edi,(%esp)
000025f3	calll	CUtlBuffer::PutString(char const*)
000025f8	addl	$0x1c,%esp
000025fb	popl	%esi
000025fc	popl	%edi
000025fd	popl	%ebx
000025fe	popl	%ebp
000025ff	ret
00002600	movl	GetCStringCharConversion()(%edi),%eax
00002603	testl	%eax,%eax
00002605	je	0x0000261b
00002607	decl	%eax
00002608	subl	GetNoEscCharConversion()(%edi),%eax
0000260b	movl	(%edi),%ecx
0000260d	cmpb	$0x0a,(%ecx,%eax)
00002611	jne	0x0000261b
00002613	movl	%edi,(%esp)
00002616	calll	CUtlBuffer::PutTabs()
0000261b	movl	0x08(%esi),%eax
0000261e	movl	0x0c(%esi),%ecx
00002621	movl	%ecx,0x08(%esp)
00002625	movl	%eax,0x04(%esp)
00002629	movl	%edi,(%esp)
0000262c	calll	CUtlBuffer::Put(void const*, int)
00002631	testl	%ebx,%ebx
00002633	je	0x000026b5
00002639	movl	%ebx,(%esp)
0000263c	calll	_strlen
00002641	testl	%eax,%eax
00002643	jle	0x000026b5
00002645	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00002650	movl	%eax,0xec(%ebp)
00002653	movl	%ebx,0xf0(%ebp)
00002656	movl	%edi,%ecx
00002658	movzbl	(%ebx),%ebx
0000265b	movl	0x0c(%ebp),%esi
0000265e	movl	0x00000118(%esi,%ebx,8),%eax
00002665	movl	%eax,0xe8(%ebp)
00002668	testl	%eax,%eax
0000266a	jne	0x0000267f
0000266c	movl	%ecx,%edi
0000266e	movl	%edi,(%esp)
00002671	movsbl	%bl,%eax
00002674	movl	%eax,0x04(%esp)
00002678	calll	CUtlBuffer::PutChar(char)
0000267d	jmp	0x000026ab
0000267f	movsbl	0x04(%esi),%eax
00002683	movl	%eax,0x04(%esp)
00002687	movl	%ecx,%edi
00002689	movl	%edi,(%esp)
0000268c	calll	CUtlBuffer::PutChar(char)
00002691	movl	0x0000011c(%esi,%ebx,8),%eax
00002698	movl	0xe8(%ebp),%ecx
0000269b	movl	%ecx,0x08(%esp)
0000269f	movl	%eax,0x04(%esp)
000026a3	movl	%edi,(%esp)
000026a6	calll	CUtlBuffer::Put(void const*, int)
000026ab	movl	0xf0(%ebp),%ebx
000026ae	incl	%ebx
000026af	movl	0xec(%ebp),%eax
000026b2	decl	%eax
000026b3	jne	0x00002650
000026b5	testb	$0x01,0x15(%edi)
000026b9	je	0x000026d6
000026bb	movl	GetCStringCharConversion()(%edi),%eax
000026be	testl	%eax,%eax
000026c0	je	0x000026d6
000026c2	decl	%eax
000026c3	subl	GetNoEscCharConversion()(%edi),%eax
000026c6	movl	(%edi),%ecx
000026c8	cmpb	$0x0a,(%ecx,%eax)
000026cc	jne	0x000026d6
000026ce	movl	%edi,(%esp)
000026d1	calll	CUtlBuffer::PutTabs()
000026d6	movl	0x0c(%ebp),%ecx
000026d9	movl	0x08(%ecx),%eax
000026dc	movl	0x0c(%ecx),%ecx
000026df	movl	%ecx,0x08(%esp)
000026e3	movl	%eax,0x04(%esp)
000026e7	movl	%edi,(%esp)
000026ea	calll	CUtlBuffer::Put(void const*, int)
000026ef	jmp	0x000025f8
000026f4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::VaPrintf(char const*, char*):
00002700	pushl	%ebp
00002701	movl	%esp,%ebp
00002703	pushl	%edi
00002704	pushl	%esi
00002705	subl	$0x00000820,%esp
0000270b	calll	0x00002710
00002710	popl	%eax
00002711	movl	0x1901b-0x2710(%eax),%esi
00002717	movl	(%esi),%eax
00002719	movl	%eax,0xf4(%ebp)
0000271c	movl	GetCStringCharConversion()(%ebp),%eax
0000271f	movl	%eax,0x0c(%esp)
00002723	movl	0x0c(%ebp),%eax
00002726	movl	%eax,0x08(%esp)
0000272a	leal	0xfffff7f4(%ebp),%edi
00002730	movl	%edi,(%esp)
00002733	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x04(%esp)
0000273b	calll	V_vsnprintf(char*, int, char const*, char*)
00002740	movl	%edi,0x04(%esp)
00002744	movl	0x08(%ebp),%eax
00002747	movl	%eax,(%esp)
0000274a	calll	CUtlBuffer::PutString(char const*)
0000274f	movl	(%esi),%eax
00002751	cmpl	0xf4(%ebp),%eax
00002754	jne	0x00002760
00002756	addl	$0x00000820,%esp
0000275c	popl	%esi
0000275d	popl	%edi
0000275e	popl	%ebp
0000275f	ret
00002760	calll	___stack_chk_fail
00002765	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Printf(char const*, ...):
00002770	pushl	%ebp
00002771	movl	%esp,%ebp
00002773	pushl	%edi
00002774	pushl	%esi
00002775	subl	$0x00000820,%esp
0000277b	calll	0x00002780
00002780	popl	%eax
00002781	movl	0x1901b-0x2780(%eax),%esi
00002787	movl	(%esi),%eax
00002789	movl	%eax,0xf4(%ebp)
0000278c	leal	GetCStringCharConversion()(%ebp),%eax
0000278f	movl	%eax,0xfffff7f0(%ebp)
00002795	movl	%eax,0x0c(%esp)
00002799	movl	0x0c(%ebp),%eax
0000279c	movl	%eax,0x08(%esp)
000027a0	leal	0xfffff7f4(%ebp),%edi
000027a6	movl	%edi,(%esp)
000027a9	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x04(%esp)
000027b1	calll	V_vsnprintf(char*, int, char const*, char*)
000027b6	movl	%edi,0x04(%esp)
000027ba	movl	0x08(%ebp),%eax
000027bd	movl	%eax,(%esp)
000027c0	calll	CUtlBuffer::PutString(char const*)
000027c5	movl	(%esi),%eax
000027c7	cmpl	0xf4(%ebp),%eax
000027ca	jne	0x000027d6
000027cc	addl	$0x00000820,%esp
000027d2	popl	%esi
000027d3	popl	%edi
000027d4	popl	%ebp
000027d5	ret
000027d6	calll	___stack_chk_fail
000027db	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::OnPutOverflow(int):
000027e0	pushl	%ebp
000027e1	movl	%esp,%ebp
000027e3	pushl	%esi
000027e4	subl	$0x14,%esp
000027e7	movl	0x08(%ebp),%ecx
000027ea	movl	0x2c(%ecx),%eax
000027ed	addl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%ecx),%ecx
000027f0	movl	0x0c(%ebp),%edx
000027f3	testb	$0x01,%al
000027f5	je	0x000027fd
000027f7	movl	(%ecx),%esi
000027f9	movl	0xff(%eax,%esi),%eax
000027fd	movl	%edx,0x04(%esp)
00002801	movl	%ecx,(%esp)
00002804	call	*%eax
00002806	movzbl	%al,%eax
00002809	addl	$0x14,%esp
0000280c	popl	%esi
0000280d	popl	%ebp
0000280e	ret
0000280f	nop
CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int):
00002810	pushl	%ebp
00002811	movl	%esp,%ebp
00002813	pushl	%ebx
00002814	pushl	%edi
00002815	pushl	%esi
00002816	subl	$0x0c,%esp
00002819	movl	0x08(%ebp),%esi
0000281c	movl	GetCStringCharConversion()(%ebp),%eax
0000281f	movl	0x0c(%ebp),%ecx
00002822	cmpl	$0x02,%ecx
00002825	je	0x0000283b
00002827	movl	GetCStringCharConversion()(%esi),%edi
0000282a	cmpl	$0x01,%ecx
0000282d	je	0x00002837
0000282f	testl	%ecx,%ecx
00002831	jne	0x00002840
00002833	movl	%eax,%edi
00002835	jmp	0x00002840
00002837	addl	%eax,%edi
00002839	jmp	0x00002840
0000283b	movl	0x1c(%esi),%edi
0000283e	subl	%eax,%edi
00002840	movl	0x2c(%esi),%eax
00002843	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%ecx
00002846	addl	%esi,%ecx
00002848	movl	%edi,%edx
0000284a	notl	%edx
0000284c	testb	$0x01,%al
0000284e	je	0x00002856
00002850	movl	(%ecx),%ebx
00002852	movl	0xff(%eax,%ebx),%eax
00002856	movl	%edx,0x04(%esp)
0000285a	movl	%ecx,(%esp)
0000285d	call	*%eax
0000285f	movl	%edi,GetCStringCharConversion()(%esi)
00002862	addl	$0x0c,%esp
00002865	popl	%esi
00002866	popl	%edi
00002867	popl	%ebx
00002868	popl	%ebp
00002869	jmp	CUtlBuffer::AddNullTermination()
0000286e	nop
CUtlBuffer::ActivateByteSwapping(bool):
00002870	movb	0x08(%esp),%al
00002874	movzbl	%al,%ecx
00002877	leal	(%ecx,%ecx),%eax
0000287a	orl	%ecx,%eax
0000287c	movl	0x04(%esp),%ecx
00002880	movl	0x34(%ecx),%edx
00002883	andl	$0xfc,%edx
00002886	orl	%eax,%edx
00002888	movl	%edx,0x34(%ecx)
0000288b	ret
0000288c	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::SetBigEndian(bool):
00002890	movb	0x08(%esp),%al
00002894	movzbl	%al,%ecx
00002897	leal	(%ecx,%ecx),%eax
0000289a	orl	%ecx,%eax
0000289c	movl	0x04(%esp),%ecx
000028a0	movl	0x34(%ecx),%edx
000028a3	andl	$0xfc,%edx
000028a6	orl	%eax,%edx
000028a8	movl	%edx,0x34(%ecx)
000028ab	ret
000028ac	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::IsBigEndian():
000028b0	movl	0x04(%esp),%eax
000028b4	movb	0x34(%eax),%al
000028b7	andb	$0x02,%al
000028b9	shrb	%al
000028bb	movzbl	%al,%eax
000028be	ret
000028bf	nop
CUtlBuffer::ConvertCRLF(CUtlBuffer&):
000028c0	pushl	%ebp
000028c1	movl	%esp,%ebp
000028c3	pushl	%ebx
000028c4	pushl	%edi
000028c5	pushl	%esi
000028c6	subl	$0x3c,%esp
000028c9	calll	0x000028ce
000028ce	popl	%esi
000028cf	movl	0x08(%ebp),%edi
000028d2	movb	0x15(%edi),%al
000028d5	xorb	%cl,%cl
000028d7	testb	$0x01,%al
000028d9	je	0x00002b27
000028df	movl	0x0c(%ebp),%ebx
000028e2	movb	0x15(%ebx),%dl
000028e5	xorb	%cl,%cl
000028e7	testb	$0x01,%dl
000028ea	je	0x00002b27
000028f0	xorb	%dl,%al
000028f2	andb	$0x04,%al
000028f4	shrb	$0x02,%al
000028f7	xorb	%cl,%cl
000028f9	testb	%al,%al
000028fb	je	0x00002b27
00002901	movl	0x1c(%edi),%eax
00002904	movl	%eax,0xdc(%ebp)
00002907	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%ebx)
0000290e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%ebx)
00002915	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%ebx)
0000291c	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x1c(%ebx)
00002923	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00002927	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
0000292b	js	0x00002948
0000292d	movl	(%ebx),%eax
0000292f	testl	%eax,%eax
00002931	je	0x00002941
00002933	movl	%eax,(%esp)
00002936	calll	_free
0000293b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00002941	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%ebx)
00002948	movl	0xdc(%ebp),%eax
0000294b	movl	%eax,0x04(%esp)
0000294f	movl	%ebx,(%esp)
00002952	calll	CUtlBuffer::EnsureCapacity(int)
00002957	movb	0x15(%edi),%al
0000295a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xdb(%ebp)
0000295e	testb	$0x01,%al
00002960	je	0x0000296a
00002962	andb	$0x04,%al
00002964	shrb	$0x02,%al
00002967	movb	%al,0xdb(%ebp)
0000296a	movl	(%edi),%eax
0000296c	movl	%eax,0xd4(%ebp)
0000296f	movl	0x0c(%edi),%eax
00002972	movl	%eax,0xe4(%ebp)
00002975	movl	GetCStringCharConversion()(%edi),%eax
00002978	movl	%eax,0xec(%ebp)
0000297b	leal	0x151ec-0x28ce(%esi),%eax
00002981	movl	%eax,0xd0(%ebp)
00002984	xorl	%esi,%esi
00002986	xorl	%ecx,%ecx
00002988	xorl	%eax,%eax
0000298a	jmp	0x00002a52
0000298f	nop
00002990	movl	%edi,0x08(%esp)
00002994	movl	%ebx,(%esp)
00002997	movl	$0x0000000a,0x04(%esp)
0000299f	calll	V_strnchr(char const*, char, int)
000029a4	movl	%eax,%esi
000029a6	testl	%esi,%esi
000029a8	je	0x00002a93
000029ae	subl	%ebx,%esi
000029b0	movl	%esi,0x08(%esp)
000029b4	movl	%ebx,0x04(%esp)
000029b8	movl	0x0c(%ebp),%edi
000029bb	movl	%edi,(%esp)
000029be	calll	CUtlBuffer::Put(void const*, int)
000029c3	movl	%edi,(%esp)
000029c6	movl	$0x0000000d,0x04(%esp)
000029ce	calll	CUtlBuffer::PutChar(char)
000029d3	movl	%edi,(%esp)
000029d6	movl	$0x0000000a,0x04(%esp)
000029de	movl	0xf0(%ebp),%eax
000029e1	leal	0x01(%eax,%esi),%eax
000029e5	movl	%eax,%esi
000029e7	cmpl	%esi,0xec(%ebp)
000029ea	setge	%al
000029ed	movzbl	%al,%edi
000029f0	cmpl	%esi,0xe4(%ebp)
000029f3	setge	%al
000029f6	movzbl	%al,%ebx
000029f9	jmp	0x00002a43
000029fb	subl	%ebx,%esi
000029fd	movl	%esi,0x08(%esp)
00002a01	movl	%ebx,0x04(%esp)
00002a05	movl	0x0c(%ebp),%edi
00002a08	movl	%edi,(%esp)
00002a0b	calll	CUtlBuffer::Put(void const*, int)
00002a10	movl	%edi,(%esp)
00002a13	movl	$0x0000000a,0x04(%esp)
00002a1b	movl	0xf0(%ebp),%ecx
00002a1e	leal	0x01(%ecx,%esi),%eax
00002a22	cmpl	%eax,0xec(%ebp)
00002a25	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%edi
00002a2a	movl	$0xffffffff,%edx
00002a2f	cmovgel	%edx,%edi
00002a32	cmpl	%eax,0xe4(%ebp)
00002a35	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%ebx
00002a3a	cmovgel	%edx,%ebx
00002a3d	leal	0x02(%ecx,%esi),%ecx
00002a41	movl	%ecx,%esi
00002a43	calll	CUtlBuffer::PutChar(char)
00002a48	movl	0xe8(%ebp),%ecx
00002a4b	addl	%ebx,%ecx
00002a4d	movl	0xe0(%ebp),%eax
00002a50	addl	%edi,%eax
00002a52	movl	%eax,0xe0(%ebp)
00002a55	movl	0xdc(%ebp),%eax
00002a58	cmpl	%eax,%esi
00002a5a	jge	0x00002aa9
00002a5c	movl	%ecx,0xe8(%ebp)
00002a5f	movl	%eax,%edi
00002a61	subl	%esi,%edi
00002a63	movl	0xd4(%ebp),%eax
00002a66	leal	(%eax,%esi),%ebx
00002a69	movl	%esi,0xf0(%ebp)
00002a6c	cmpb	$0x01,0xdb(%ebp)
00002a70	jne	0x00002990
00002a76	movl	%edi,0x08(%esp)
00002a7a	movl	0xd0(%ebp),%eax
00002a7d	movl	%eax,0x04(%esp)
00002a81	movl	%ebx,(%esp)
00002a84	calll	V_strnistr(char const*, char const*, int)
00002a89	movl	%eax,%esi
00002a8b	testl	%esi,%esi
00002a8d	jne	0x000029fb
00002a93	movl	%edi,0x08(%esp)
00002a97	movl	%ebx,0x04(%esp)
00002a9b	movl	0x0c(%ebp),%eax
00002a9e	movl	%eax,(%esp)
00002aa1	calll	CUtlBuffer::Put(void const*, int)
00002aa6	movl	0xe8(%ebp),%ecx
00002aa9	addl	0xe4(%ebp),%ecx
00002aac	movl	0x0c(%ebp),%edi
00002aaf	movl	%ecx,0x0c(%edi)
00002ab2	movb	0x14(%edi),%al
00002ab5	cmpl	0x1c(%edi),%ecx
00002ab8	jle	0x00002ac1
00002aba	orb	$0x02,%al
00002abc	movb	%al,0x14(%edi)
00002abf	jmp	0x00002af3
00002ac1	andb	$0xfd,%al
00002ac3	movb	%al,0x14(%edi)
00002ac6	movl	GetNoEscCharConversion()(%edi),%eax
00002ac9	cmpl	%eax,%ecx
00002acb	jl	0x00002ad4
00002acd	addl	0x04(%edi),%eax
00002ad0	cmpl	%eax,%ecx
00002ad2	jl	0x00002af3
00002ad4	movl	0x24(%edi),%eax
00002ad7	movl	0x28(%edi),%ecx
00002ada	addl	%edi,%ecx
00002adc	testb	$0x01,%al
00002ade	je	0x00002ae6
00002ae0	movl	(%ecx),%edx
00002ae2	movl	0xff(%eax,%edx),%eax
00002ae6	movl	%ecx,(%esp)
00002ae9	movl	$0xffffffff,0x04(%esp)
00002af1	call	*%eax
00002af3	movl	0xe0(%ebp),%eax
00002af6	addl	0xec(%ebp),%eax
00002af9	movl	%eax,%ecx
00002afb	movl	%eax,%ebx
00002afd	notl	%ecx
00002aff	movl	0x2c(%edi),%eax
00002b02	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%edx
00002b05	addl	%edi,%edx
00002b07	testb	$0x01,%al
00002b09	je	0x00002b11
00002b0b	movl	(%edx),%esi
00002b0d	movl	0xff(%eax,%esi),%eax
00002b11	movl	%ecx,0x04(%esp)
00002b15	movl	%edx,(%esp)
00002b18	call	*%eax
00002b1a	movl	%ebx,GetCStringCharConversion()(%edi)
00002b1d	movl	%edi,(%esp)
00002b20	calll	CUtlBuffer::AddNullTermination()
00002b25	movb	$0x01,%cl
00002b27	movzbl	%cl,%eax
00002b2a	addl	$0x3c,%esp
00002b2d	popl	%esi
00002b2e	popl	%edi
00002b2f	popl	%ebx
00002b30	popl	%ebp
00002b31	ret
00002b32	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Swap(CUtlBuffer&):
00002b40	pushl	%esi
00002b41	movl	0x08(%esp),%eax
00002b45	movl	0x0c(%eax),%edx
00002b48	movl	0x0c(%esp),%ecx
00002b4c	movl	0x0c(%ecx),%esi
00002b4f	movl	%esi,0x0c(%eax)
00002b52	movl	%edx,0x0c(%ecx)
00002b55	movl	GetCStringCharConversion()(%eax),%edx
00002b58	movl	GetCStringCharConversion()(%ecx),%esi
00002b5b	movl	%esi,GetCStringCharConversion()(%eax)
00002b5e	movl	%edx,GetCStringCharConversion()(%ecx)
00002b61	movl	0x1c(%eax),%edx
00002b64	movl	0x1c(%ecx),%esi
00002b67	movl	%esi,0x1c(%eax)
00002b6a	movl	%edx,0x1c(%ecx)
00002b6d	movb	0x14(%eax),%dl
00002b70	movb	0x14(%ecx),%dh
00002b73	movb	%dh,0x14(%eax)
00002b76	movb	%dl,0x14(%ecx)
00002b79	movl	0x08(%eax),%edx
00002b7c	movl	0x08(%ecx),%esi
00002b7f	movl	%esi,0x08(%eax)
00002b82	movl	%edx,0x08(%ecx)
00002b85	movl	(%eax),%edx
00002b87	movl	(%ecx),%esi
00002b89	movl	%esi,(%eax)
00002b8b	movl	%edx,(%ecx)
00002b8d	movl	0x04(%eax),%edx
00002b90	movl	0x04(%ecx),%esi
00002b93	movl	%esi,0x04(%eax)
00002b96	movl	%edx,0x04(%ecx)
00002b99	popl	%esi
00002b9a	ret
00002b9b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Swap(CUtlMemory<unsigned char, int>&):
00002ba0	pushl	%esi
00002ba1	movl	0x08(%esp),%eax
00002ba5	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%eax)
00002bac	movl	0x0c(%esp),%ecx
00002bb0	movl	0x04(%ecx),%edx
00002bb3	movl	%edx,GetCStringCharConversion()(%eax)
00002bb6	movl	0x04(%ecx),%edx
00002bb9	movl	%edx,0x1c(%eax)
00002bbc	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%eax)
00002bc0	movl	0x08(%eax),%edx
00002bc3	movl	0x08(%ecx),%esi
00002bc6	movl	%esi,0x08(%eax)
00002bc9	movl	%edx,0x08(%ecx)
00002bcc	movl	(%eax),%edx
00002bce	movl	(%ecx),%esi
00002bd0	movl	%esi,(%eax)
00002bd2	movl	%edx,(%ecx)
00002bd4	movl	0x04(%eax),%edx
00002bd7	movl	0x04(%ecx),%esi
00002bda	movl	%esi,0x04(%eax)
00002bdd	movl	%edx,0x04(%ecx)
00002be0	popl	%esi
00002be1	ret
00002be2	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int):
00002bf0	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00002bf5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int):
00002c00	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00002c05	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*):
00002c10	pushl	%ebp
00002c11	movl	%esp,%ebp
00002c13	pushl	%ebx
00002c14	pushl	%edi
00002c15	pushl	%esi
00002c16	subl	$0x0c,%esp
00002c19	movl	0x08(%ebp),%edi
00002c1c	movl	%edi,(%esp)
00002c1f	calll	CUtlBuffer::PeekLineLength()
00002c24	movl	%eax,%esi
00002c26	cmpl	$0x01,%esi
00002c29	jg	0x00002c6a
00002c2b	movl	0x1c(%edi),%ecx
00002c2e	movl	%ecx,0x0c(%edi)
00002c31	andb	$0xfd,0x14(%edi)
00002c35	movl	GetNoEscCharConversion()(%edi),%edx
00002c38	cmpl	%edx,%ecx
00002c3a	jl	0x00002c49
00002c3c	addl	0x04(%edi),%edx
00002c3f	xorb	%al,%al
00002c41	cmpl	%edx,%ecx
00002c43	jl	0x00002cd2
00002c49	movl	0x24(%edi),%eax
00002c4c	addl	0x28(%edi),%edi
00002c4f	testb	$0x01,%al
00002c51	je	0x00002c59
00002c53	movl	(%edi),%ecx
00002c55	movl	0xff(%eax,%ecx),%eax
00002c59	movl	%edi,(%esp)
00002c5c	movl	$0xffffffff,0x04(%esp)
00002c64	call	*%eax
00002c66	xorb	%al,%al
00002c68	jmp	0x00002cd2
00002c6a	movl	(%edi),%edx
00002c6c	movl	0x0c(%edi),%ebx
00002c6f	leal	0xff(%ebx,%esi),%eax
00002c73	movl	GetNoEscCharConversion()(%edi),%ecx
00002c76	movl	%eax,0x0c(%edi)
00002c79	subl	%ecx,%ebx
00002c7b	addl	%edx,%ebx
00002c7d	decl	%esi
00002c7e	movb	0x14(%edi),%dl
00002c81	cmpl	0x1c(%edi),%eax
00002c84	jle	0x00002c8e
00002c86	orb	$0x02,%dl
00002c89	movb	%dl,0x14(%edi)
00002c8c	jmp	0x00002cbc
00002c8e	andb	$0xfd,%dl
00002c91	movb	%dl,0x14(%edi)
00002c94	cmpl	%ecx,%eax
00002c96	jl	0x00002c9f
00002c98	addl	0x04(%edi),%ecx
00002c9b	cmpl	%ecx,%eax
00002c9d	jl	0x00002cbc
00002c9f	movl	0x24(%edi),%eax
00002ca2	addl	0x28(%edi),%edi
00002ca5	testb	$0x01,%al
00002ca7	je	0x00002caf
00002ca9	movl	(%edi),%ecx
00002cab	movl	0xff(%eax,%ecx),%eax
00002caf	movl	%edi,(%esp)
00002cb2	movl	$0xffffffff,0x04(%esp)
00002cba	call	*%eax
00002cbc	movl	0x0c(%ebp),%eax
00002cbf	testl	%eax,%eax
00002cc1	je	0x00002cc5
00002cc3	movl	%ebx,(%eax)
00002cc5	movb	$0x01,%al
00002cc7	movl	GetCStringCharConversion()(%ebp),%ecx
00002cca	testl	%ecx,%ecx
00002ccc	je	0x00002cd2
00002cce	movl	%esi,(%ecx)
00002cd0	movb	$0x01,%al
00002cd2	movzbl	%al,%eax
00002cd5	addl	$0x0c,%esp
00002cd8	popl	%esi
00002cd9	popl	%edi
00002cda	popl	%ebx
00002cdb	popl	%ebp
00002cdc	ret
00002cdd	nopl	(%eax)
CUtlInplaceBuffer::InplaceGetLinePtr():
00002ce0	pushl	%ebp
00002ce1	movl	%esp,%ebp
00002ce3	subl	$0x18,%esp
00002ce6	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xfc(%ebp)
00002ced	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf8(%ebp)
00002cf4	leal	0xf8(%ebp),%eax
00002cf7	movl	%eax,0x08(%esp)
00002cfb	leal	0xfc(%ebp),%eax
00002cfe	movl	%eax,0x04(%esp)
00002d02	movl	0x08(%ebp),%eax
00002d05	movl	%eax,(%esp)
00002d08	calll	CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*)
00002d0d	cmpb	$0x01,%al
00002d0f	jne	0x00002d4f
00002d11	movl	0xfc(%ebp),%eax
00002d14	movl	0xf8(%ebp),%ecx
00002d17	movsbl	0xff(%ecx,%eax),%edx
00002d1c	cmpl	$0x0a,%edx
00002d1f	je	0x00002d26
00002d21	cmpl	$0x0d,%edx
00002d24	jne	0x00002d4f
00002d26	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%ecx)
00002d2b	movl	0xf8(%ebp),%eax
00002d2e	leal	0xff(%eax),%ecx
00002d31	movl	%ecx,0xf8(%ebp)
00002d34	testl	%ecx,%ecx
00002d36	je	0x00002d4f
00002d38	movl	0xfc(%ebp),%ecx
00002d3b	movsbl	0xfe(%eax,%ecx),%edx
00002d40	cmpl	$0x0a,%edx
00002d43	je	0x00002d4a
00002d45	cmpl	$0x0d,%edx
00002d48	jne	0x00002d4f
00002d4a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xfe(%eax,%ecx)
00002d4f	movl	0xfc(%ebp),%eax
00002d52	addl	$0x18,%esp
00002d55	popl	%ebp
00002d56	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(utlbufferutil.o):
(__TEXT,__text) section
SetSerializationDelimiter(CUtlCharConversion*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	%ecx,_s_pConv-0x5(%eax)
00000010	ret
00000011	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
SetSerializationArrayDelimiter(char const*):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movl	0x04(%esp),%ecx
0000002a	movl	%ecx,_s_pUtlBufferUtilArrayDelim-0x25(%eax)
00000030	ret
00000031	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, bool const&):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	pushl	%esi
00000044	subl	$0x14,%esp
00000047	calll	0x0000004c
0000004c	popl	%eax
0000004d	movl	0x0c(%ebp),%ecx
00000050	movb	(%ecx),%cl
00000052	andb	$0x01,%cl
00000055	movl	0x08(%ebp),%esi
00000058	testb	$0x01,0x15(%esi)
0000005c	je	0x00000079
0000005e	movzbl	%cl,%ecx
00000061	movl	%ecx,0x08(%esp)
00000065	leal	0x1726a-0x4c(%eax),%eax
0000006b	movl	%eax,0x04(%esp)
0000006f	movl	%esi,(%esp)
00000072	calll	CUtlBuffer::Printf(char const*, ...)
00000077	jmp	0x00000088
00000079	movzbl	%cl,%eax
0000007c	movl	%eax,0x04(%esp)
00000080	movl	%esi,(%esp)
00000083	calll	CUtlBuffer::PutChar(char)
00000088	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000008c	sete	%al
0000008f	movzbl	%al,%eax
00000092	addl	$0x14,%esp
00000095	popl	%esi
00000096	popl	%ebp
00000097	ret
00000098	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, bool&):
000000a0	pushl	%ebp
000000a1	movl	%esp,%ebp
000000a3	pushl	%edi
000000a4	pushl	%esi
000000a5	subl	SetSerializationArrayDelimiter(char const*),%esp
000000a8	calll	0x000000ad
000000ad	popl	%eax
000000ae	movl	0x0c(%ebp),%edi
000000b1	movl	0x08(%ebp),%esi
000000b4	testb	$0x01,0x15(%esi)
000000b8	je	0x000000ea
000000ba	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000000c1	leal	0xf0(%ebp),%ecx
000000c4	movl	%ecx,0x08(%esp)
000000c8	leal	0x1726a-0xad(%eax),%eax
000000ce	movl	%eax,0x04(%esp)
000000d2	movl	%esi,(%esp)
000000d5	calll	CUtlBuffer::Scanf(char const*, ...)
000000da	cmpl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000000de	setne	(%edi)
000000e1	xorb	%cl,%cl
000000e3	cmpl	$0x01,%eax
000000e6	je	0x00000121
000000e8	jmp	0x00000128
000000ea	movl	%esi,(%esp)
000000ed	movl	$0x00000001,0x04(%esp)
000000f5	calll	CUtlBuffer::CheckGet(int)
000000fa	cmpb	$0x01,%al
000000fc	jne	0x00000119
000000fe	movl	(%esi),%ecx
00000100	movl	0x0c(%esi),%eax
00000103	movl	%eax,%edx
00000105	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000108	movb	(%ecx,%edx),%cl
0000010b	movb	%cl,0xf7(%ebp)
0000010e	incl	%eax
0000010f	movl	%eax,0x0c(%esi)
00000112	testb	%cl,%cl
00000114	setne	%al
00000117	jmp	0x0000011f
00000119	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf7(%ebp)
0000011d	xorb	%al,%al
0000011f	movb	%al,(%edi)
00000121	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000125	sete	%cl
00000128	movzbl	%cl,%eax
0000012b	addl	SetSerializationArrayDelimiter(char const*),%esp
0000012e	popl	%esi
0000012f	popl	%edi
00000130	popl	%ebp
00000131	ret
00000132	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, int const&):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	calll	0x0000014d
0000014d	popl	%eax
0000014e	movl	0x0c(%ebp),%ecx
00000151	movl	(%ecx),%edi
00000153	movl	0x08(%ebp),%esi
00000156	testb	$0x01,0x15(%esi)
0000015a	je	0x00000174
0000015c	movl	%edi,0x08(%esp)
00000160	leal	0x1726a-0x14d(%eax),%eax
00000166	movl	%eax,0x04(%esp)
0000016a	movl	%esi,(%esp)
0000016d	calll	CUtlBuffer::Printf(char const*, ...)
00000172	jmp	0x000001aa
00000174	movl	%esi,(%esp)
00000177	movl	$0x00000004,0x04(%esp)
0000017f	calll	CUtlBuffer::CheckPut(int)
00000184	cmpb	$0x01,%al
00000186	jne	0x000001aa
00000188	movl	0x10(%esi),%eax
0000018b	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
0000018e	addl	(%esi),%eax
00000190	testb	$0x01,0x34(%esi)
00000194	je	0x0000019c
00000196	testl	%eax,%eax
00000198	je	0x0000019e
0000019a	bswap	%edi
0000019c	movl	%edi,(%eax)
0000019e	addl	$0x04,0x10(%esi)
000001a2	movl	%esi,(%esp)
000001a5	calll	CUtlBuffer::AddNullTermination()
000001aa	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000001ae	sete	%al
000001b1	movzbl	%al,%eax
000001b4	addl	$0x10,%esp
000001b7	popl	%esi
000001b8	popl	%edi
000001b9	popl	%ebp
000001ba	ret
000001bb	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, int&):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%ebx
000001c4	pushl	%edi
000001c5	pushl	%esi
000001c6	subl	$0x1c,%esp
000001c9	calll	0x000001ce
000001ce	popl	%eax
000001cf	movl	0x0c(%ebp),%edi
000001d2	movl	0x08(%ebp),%esi
000001d5	testb	$0x01,0x15(%esi)
000001d9	je	0x000001fa
000001db	movl	%edi,0x08(%esp)
000001df	leal	0x1726a-0x1ce(%eax),%eax
000001e5	movl	%eax,0x04(%esp)
000001e9	movl	%esi,(%esp)
000001ec	calll	CUtlBuffer::Scanf(char const*, ...)
000001f1	xorb	%cl,%cl
000001f3	cmpl	$0x01,%eax
000001f6	je	0x0000025e
000001f8	jmp	0x00000265
000001fa	movl	%esi,(%esp)
000001fd	movl	$0x00000004,0x04(%esp)
00000205	calll	CUtlBuffer::CheckGet(int)
0000020a	cmpb	$0x01,%al
0000020c	jne	0x00000253
0000020e	movl	0x0c(%esi),%eax
00000211	movl	%eax,%edx
00000213	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000216	addl	(%esi),%edx
00000218	testb	$0x01,0x34(%esi)
0000021c	jne	0x00000222
0000021e	movl	(%edx),%ecx
00000220	jmp	0x00000248
00000222	leal	0xf0(%ebp),%ecx
00000225	testl	%edx,%edx
00000227	cmovnel	%edx,%ecx
0000022a	movzbl	0x03(%ecx),%edx
0000022e	movzbl	0x02(%ecx),%ebx
00000232	shll	$0x08,%ebx
00000235	orl	%edx,%ebx
00000237	movzbl	0x01(%ecx),%edx
0000023b	shll	$0x10,%edx
0000023e	orl	%ebx,%edx
00000240	movzbl	(%ecx),%ecx
00000243	shll	$0x18,%ecx
00000246	orl	%edx,%ecx
00000248	movl	%ecx,0xf0(%ebp)
0000024b	addl	$0x04,%eax
0000024e	movl	%eax,0x0c(%esi)
00000251	jmp	0x0000025c
00000253	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
0000025a	xorl	%ecx,%ecx
0000025c	movl	%ecx,(%edi)
0000025e	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000262	sete	%cl
00000265	movzbl	%cl,%eax
00000268	addl	$0x1c,%esp
0000026b	popl	%esi
0000026c	popl	%edi
0000026d	popl	%ebx
0000026e	popl	%ebp
0000026f	ret
Serialize(CUtlBuffer&, float const&):
00000270	pushl	%ebp
00000271	movl	%esp,%ebp
00000273	pushl	%ebx
00000274	pushl	%edi
00000275	pushl	%esi
00000276	subl	$0x0000011c,%esp
0000027c	calll	0x00000281
00000281	popl	%eax
00000282	movl	0x1a404-0x281(%eax),%esi
00000288	movl	(%esi),%ecx
0000028a	movl	%ecx,0xf0(%ebp)
0000028d	movl	0x0c(%ebp),%ecx
00000290	movss	(%ecx),%xmm0
00000294	movl	0x08(%ebp),%edi
00000297	testb	$0x01,0x15(%edi)
0000029b	je	0x00000306
0000029d	cvtss2sd	%xmm0,%xmm0
000002a1	movsd	%xmm0,0x0c(%esp)
000002a7	leal	0x172cc-0x281(%eax),%eax
000002ad	movl	%eax,0x08(%esp)
000002b1	leal	0xfffffef0(%ebp),%ebx
000002b7	movl	%ebx,(%esp)
000002ba	movl	$0x00000100,0x04(%esp)
000002c2	calll	V_snprintf(char*, int, char const*, ...)
000002c7	jmp	0x000002e0
000002c9	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
000002d0	cmpb	$0x30,%cl
000002d3	jne	0x000002f8
000002d5	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000002dd	leal	0xff(%eax),%eax
000002e0	testl	%eax,%eax
000002e2	jle	0x000002f8
000002e4	movb	0xfffffeef(%ebp,%eax),%cl
000002eb	cmpb	$0x2e,%cl
000002ee	jne	0x000002d0
000002f0	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000002f8	movl	%ebx,0x04(%esp)
000002fc	movl	%edi,(%esp)
000002ff	calll	CUtlBuffer::PutString(char const*)
00000304	jmp	0x00000356
00000306	movl	%edi,(%esp)
00000309	movl	$0x00000004,0x04(%esp)
00000311	movss	%xmm0,0xfffffeec(%ebp)
00000319	calll	CUtlBuffer::CheckPut(int)
0000031e	movss	0xfffffeec(%ebp),%xmm0
00000326	testb	%al,%al
00000328	je	0x00000356
0000032a	movl	0x10(%edi),%eax
0000032d	subl	SetSerializationArrayDelimiter(char const*)(%edi),%eax
00000330	addl	(%edi),%eax
00000332	testb	$0x01,0x34(%edi)
00000336	je	0x00000346
00000338	testl	%eax,%eax
0000033a	je	0x0000034a
0000033c	movd	%xmm0,%ecx
00000340	bswap	%ecx
00000342	movd	%ecx,%xmm0
00000346	movss	%xmm0,(%eax)
0000034a	addl	$0x04,0x10(%edi)
0000034e	movl	%edi,(%esp)
00000351	calll	CUtlBuffer::AddNullTermination()
00000356	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%edi)
0000035a	sete	%al
0000035d	movl	(%esi),%ecx
0000035f	cmpl	0xf0(%ebp),%ecx
00000362	jne	0x00000372
00000364	movzbl	%al,%eax
00000367	addl	$0x0000011c,%esp
0000036d	popl	%esi
0000036e	popl	%edi
0000036f	popl	%ebx
00000370	popl	%ebp
00000371	ret
00000372	calll	___stack_chk_fail
00000377	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, float&):
00000380	pushl	%ebp
00000381	movl	%esp,%ebp
00000383	pushl	%edi
00000384	pushl	%esi
00000385	subl	$0x10,%esp
00000388	calll	0x0000038d
0000038d	popl	%eax
0000038e	movl	0x0c(%ebp),%edi
00000391	movl	0x08(%ebp),%esi
00000394	testb	$0x01,0x15(%esi)
00000398	je	0x000003b9
0000039a	movl	%edi,0x08(%esp)
0000039e	leal	0x1726d-0x38d(%eax),%eax
000003a4	movl	%eax,0x04(%esp)
000003a8	movl	%esi,(%esp)
000003ab	calll	CUtlBuffer::Scanf(char const*, ...)
000003b0	xorb	%cl,%cl
000003b2	cmpl	$0x01,%eax
000003b5	je	0x0000040b
000003b7	jmp	0x00000412
000003b9	movl	%esi,(%esp)
000003bc	movl	$0x00000004,0x04(%esp)
000003c4	calll	CUtlBuffer::CheckGet(int)
000003c9	cmpb	$0x01,%al
000003cb	jne	0x000003fc
000003cd	movl	(%esi),%ecx
000003cf	movl	0x0c(%esi),%eax
000003d2	movl	%eax,%edx
000003d4	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000003d7	movss	(%ecx,%edx),%xmm0
000003dc	movss	%xmm0,0xf4(%ebp)
000003e1	testb	$0x01,0x34(%esi)
000003e5	je	0x000003f4
000003e7	movd	%xmm0,%ecx
000003eb	bswap	%ecx
000003ed	movl	%ecx,0xf4(%ebp)
000003f0	movd	%ecx,%xmm0
000003f4	addl	$0x04,%eax
000003f7	movl	%eax,0x0c(%esi)
000003fa	jmp	0x00000407
000003fc	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf4(%ebp)
00000403	pxor	%xmm0,%xmm0
00000407	movss	%xmm0,(%edi)
0000040b	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000040f	sete	%cl
00000412	movzbl	%cl,%eax
00000415	addl	$0x10,%esp
00000418	popl	%esi
00000419	popl	%edi
0000041a	popl	%ebp
0000041b	ret
0000041c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Serialize(CUtlBuffer&, Vector2D const&):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x1c,%esp
00000429	calll	0x0000042e
0000042e	popl	%edi
0000042f	movl	0x0c(%ebp),%ebx
00000432	movl	0x08(%ebp),%esi
00000435	testb	$0x01,0x15(%esi)
00000439	je	0x0000044f
0000043b	movl	%ebx,(%esp)
0000043e	movl	%esi,%ecx
00000440	movl	$0x00000002,%edx
00000445	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000044a	jmp	0x00000517
0000044f	movss	(%ebx),%xmm0
00000453	movss	%xmm0,0xf0(%ebp)
00000458	movl	%esi,(%esp)
0000045b	movl	$0x00000004,0x04(%esp)
00000463	calll	CUtlBuffer::CheckPut(int)
00000468	testb	%al,%al
0000046a	je	0x000004a4
0000046c	movl	0x10(%esi),%eax
0000046f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000472	addl	(%esi),%eax
00000474	testb	$0x01,0x34(%esi)
00000478	jne	0x00000481
0000047a	movss	0xf0(%ebp),%xmm0
0000047f	jmp	0x00000494
00000481	testl	%eax,%eax
00000483	je	0x00000498
00000485	movss	0xf0(%ebp),%xmm0
0000048a	movd	%xmm0,%ecx
0000048e	bswap	%ecx
00000490	movd	%ecx,%xmm0
00000494	movss	%xmm0,(%eax)
00000498	addl	$0x04,0x10(%esi)
0000049c	movl	%esi,(%esp)
0000049f	calll	CUtlBuffer::AddNullTermination()
000004a4	movss	0x04(%ebx),%xmm0
000004a9	testb	$0x01,0x15(%esi)
000004ad	jne	0x000004fb
000004af	movl	%esi,(%esp)
000004b2	movl	$0x00000004,0x04(%esp)
000004ba	movss	%xmm0,0xf0(%ebp)
000004bf	calll	CUtlBuffer::CheckPut(int)
000004c4	movss	0xf0(%ebp),%xmm0
000004c9	testb	%al,%al
000004cb	je	0x00000517
000004cd	movl	0x10(%esi),%eax
000004d0	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000004d3	addl	(%esi),%eax
000004d5	testb	$0x01,0x34(%esi)
000004d9	je	0x000004e9
000004db	testl	%eax,%eax
000004dd	je	0x000004ed
000004df	movd	%xmm0,%ecx
000004e3	bswap	%ecx
000004e5	movd	%ecx,%xmm0
000004e9	movss	%xmm0,(%eax)
000004ed	addl	$0x04,0x10(%esi)
000004f1	movl	%esi,(%esp)
000004f4	calll	CUtlBuffer::AddNullTermination()
000004f9	jmp	0x00000517
000004fb	cvtss2sd	%xmm0,%xmm0
000004ff	movsd	%xmm0,0x08(%esp)
00000505	leal	0x1726d-0x42e(%edi),%eax
0000050b	movl	%eax,0x04(%esp)
0000050f	movl	%esi,(%esp)
00000512	calll	CUtlBuffer::Printf(char const*, ...)
00000517	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000051b	sete	%al
0000051e	movzbl	%al,%eax
00000521	addl	$0x1c,%esp
00000524	popl	%esi
00000525	popl	%edi
00000526	popl	%ebx
00000527	popl	%ebp
00000528	ret
00000529	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
SerializeFloats(CUtlBuffer&, int, float const*):
00000530	pushl	%ebp
00000531	movl	%esp,%ebp
00000533	pushl	%ebx
00000534	pushl	%edi
00000535	pushl	%esi
00000536	subl	$0x0000012c,%esp
0000053c	calll	0x00000541
00000541	popl	%eax
00000542	movl	%edx,%esi
00000544	movl	%ecx,%edi
00000546	movl	0x1a404-0x541(%eax),%ecx
0000054c	movl	%ecx,0xfffffee4(%ebp)
00000552	movl	(%ecx),%ecx
00000554	movl	%ecx,0xf0(%ebp)
00000557	testl	%esi,%esi
00000559	jle	0x0000061b
0000055f	leal	0xff(%esi),%ecx
00000562	movl	%ecx,0xfffffeec(%ebp)
00000568	xorl	%ebx,%ebx
0000056a	leal	0x172cc-0x541(%eax),%eax
00000570	movl	%eax,0xfffffee8(%ebp)
00000576	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
00000580	movl	0x08(%ebp),%eax
00000583	movss	(%eax,%ebx,4),%xmm0
00000588	cvtss2sd	%xmm0,%xmm0
0000058c	movsd	%xmm0,0x0c(%esp)
00000592	movl	0xfffffee8(%ebp),%eax
00000598	movl	%eax,0x08(%esp)
0000059c	leal	0xfffffef0(%ebp),%eax
000005a2	movl	%eax,(%esp)
000005a5	movl	$0x00000100,0x04(%esp)
000005ad	calll	V_snprintf(char*, int, char const*, ...)
000005b2	jmp	0x000005d0
000005b4	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
000005c0	cmpb	$0x30,%cl
000005c3	jne	0x000005e8
000005c5	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000005cd	leal	0xff(%eax),%eax
000005d0	testl	%eax,%eax
000005d2	jle	0x000005e8
000005d4	movb	0xfffffeef(%ebp,%eax),%cl
000005db	cmpb	$0x2e,%cl
000005de	jne	0x000005c0
000005e0	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000005e8	leal	0xfffffef0(%ebp),%eax
000005ee	movl	%eax,0x04(%esp)
000005f2	movl	%edi,(%esp)
000005f5	calll	CUtlBuffer::PutString(char const*)
000005fa	cmpl	0xfffffeec(%ebp),%ebx
00000600	je	0x00000612
00000602	movl	%edi,(%esp)
00000605	movl	SetSerializationArrayDelimiter(char const*),0x04(%esp)
0000060d	calll	CUtlBuffer::PutChar(char)
00000612	incl	%ebx
00000613	cmpl	%esi,%ebx
00000615	jne	0x00000580
0000061b	movl	0xfffffee4(%ebp),%eax
00000621	movl	(%eax),%eax
00000623	cmpl	0xf0(%ebp),%eax
00000626	jne	0x00000633
00000628	addl	$0x0000012c,%esp
0000062e	popl	%esi
0000062f	popl	%edi
00000630	popl	%ebx
00000631	popl	%ebp
00000632	ret
00000633	calll	___stack_chk_fail
00000638	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, Vector2D&):
00000640	pushl	%ebp
00000641	movl	%esp,%ebp
00000643	pushl	%ebx
00000644	pushl	%edi
00000645	pushl	%esi
00000646	subl	$0x1c,%esp
00000649	calll	0x0000064e
0000064e	popl	%ebx
0000064f	movl	0x0c(%ebp),%edi
00000652	movl	0x08(%ebp),%esi
00000655	testb	$0x01,0x15(%esi)
00000659	je	0x00000688
0000065b	movl	%edi,0x08(%esp)
0000065f	leal	0x17270-0x64e(%ebx),%eax
00000665	movl	%eax,0x04(%esp)
00000669	movl	%esi,(%esp)
0000066c	addl	$0x04,%edi
0000066f	movl	%edi,0x0c(%esp)
00000673	calll	CUtlBuffer::Scanf(char const*, ...)
00000678	xorb	%cl,%cl
0000067a	cmpl	$0x02,%eax
0000067d	je	0x0000075a
00000683	jmp	0x00000761
00000688	movl	%esi,(%esp)
0000068b	movl	$0x00000004,0x04(%esp)
00000693	calll	CUtlBuffer::CheckGet(int)
00000698	cmpb	$0x01,%al
0000069a	jne	0x000006cb
0000069c	movl	(%esi),%ecx
0000069e	movl	0x0c(%esi),%eax
000006a1	movl	%eax,%edx
000006a3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000006a6	movss	(%ecx,%edx),%xmm0
000006ab	movss	%xmm0,0xf0(%ebp)
000006b0	testb	$0x01,0x34(%esi)
000006b4	je	0x000006c3
000006b6	movd	%xmm0,%ecx
000006ba	bswap	%ecx
000006bc	movl	%ecx,0xf0(%ebp)
000006bf	movd	%ecx,%xmm0
000006c3	addl	$0x04,%eax
000006c6	movl	%eax,0x0c(%esi)
000006c9	jmp	0x000006d6
000006cb	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000006d2	pxor	%xmm0,%xmm0
000006d6	movss	%xmm0,(%edi)
000006da	testb	$0x01,0x15(%esi)
000006de	jne	0x00000730
000006e0	movl	%esi,(%esp)
000006e3	movl	$0x00000004,0x04(%esp)
000006eb	calll	CUtlBuffer::CheckGet(int)
000006f0	cmpb	$0x01,%al
000006f2	jne	0x00000723
000006f4	movl	(%esi),%ecx
000006f6	movl	0x0c(%esi),%eax
000006f9	movl	%eax,%edx
000006fb	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000006fe	movss	(%ecx,%edx),%xmm0
00000703	movss	%xmm0,0xec(%ebp)
00000708	testb	$0x01,0x34(%esi)
0000070c	je	0x0000071b
0000070e	movd	%xmm0,%ecx
00000712	bswap	%ecx
00000714	movl	%ecx,0xec(%ebp)
00000717	movd	%ecx,%xmm0
0000071b	addl	$0x04,%eax
0000071e	movl	%eax,0x0c(%esi)
00000721	jmp	0x00000755
00000723	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
0000072a	pxor	%xmm0,%xmm0
0000072e	jmp	0x00000755
00000730	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000737	leal	0xec(%ebp),%eax
0000073a	movl	%eax,0x08(%esp)
0000073e	leal	0x1726d-0x64e(%ebx),%eax
00000744	movl	%eax,0x04(%esp)
00000748	movl	%esi,(%esp)
0000074b	calll	CUtlBuffer::Scanf(char const*, ...)
00000750	movss	0xec(%ebp),%xmm0
00000755	movss	%xmm0,0x04(%edi)
0000075a	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000075e	sete	%cl
00000761	movzbl	%cl,%eax
00000764	addl	$0x1c,%esp
00000767	popl	%esi
00000768	popl	%edi
00000769	popl	%ebx
0000076a	popl	%ebp
0000076b	ret
0000076c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Serialize(CUtlBuffer&, Vector const&):
00000770	pushl	%ebp
00000771	movl	%esp,%ebp
00000773	pushl	%ebx
00000774	pushl	%edi
00000775	pushl	%esi
00000776	subl	$0x1c,%esp
00000779	calll	0x0000077e
0000077e	popl	%edi
0000077f	movl	0x0c(%ebp),%ebx
00000782	movl	0x08(%ebp),%esi
00000785	testb	$0x01,0x15(%esi)
00000789	je	0x0000079f
0000078b	movl	%ebx,(%esp)
0000078e	movl	%esi,%ecx
00000790	movl	$0x00000003,%edx
00000795	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000079a	jmp	0x000008da
0000079f	movss	(%ebx),%xmm0
000007a3	movss	%xmm0,0xf0(%ebp)
000007a8	movl	%esi,(%esp)
000007ab	movl	$0x00000004,0x04(%esp)
000007b3	calll	CUtlBuffer::CheckPut(int)
000007b8	testb	%al,%al
000007ba	je	0x000007f4
000007bc	movl	0x10(%esi),%eax
000007bf	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000007c2	addl	(%esi),%eax
000007c4	testb	$0x01,0x34(%esi)
000007c8	jne	0x000007d1
000007ca	movss	0xf0(%ebp),%xmm0
000007cf	jmp	0x000007e4
000007d1	testl	%eax,%eax
000007d3	je	0x000007e8
000007d5	movss	0xf0(%ebp),%xmm0
000007da	movd	%xmm0,%ecx
000007de	bswap	%ecx
000007e0	movd	%ecx,%xmm0
000007e4	movss	%xmm0,(%eax)
000007e8	addl	$0x04,0x10(%esi)
000007ec	movl	%esi,(%esp)
000007ef	calll	CUtlBuffer::AddNullTermination()
000007f4	movss	0x04(%ebx),%xmm0
000007f9	testb	$0x01,0x15(%esi)
000007fd	jne	0x0000084b
000007ff	movl	%esi,(%esp)
00000802	movl	$0x00000004,0x04(%esp)
0000080a	movss	%xmm0,0xf0(%ebp)
0000080f	calll	CUtlBuffer::CheckPut(int)
00000814	movss	0xf0(%ebp),%xmm0
00000819	testb	%al,%al
0000081b	je	0x00000867
0000081d	movl	0x10(%esi),%eax
00000820	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000823	addl	(%esi),%eax
00000825	testb	$0x01,0x34(%esi)
00000829	je	0x00000839
0000082b	testl	%eax,%eax
0000082d	je	0x0000083d
0000082f	movd	%xmm0,%ecx
00000833	bswap	%ecx
00000835	movd	%ecx,%xmm0
00000839	movss	%xmm0,(%eax)
0000083d	addl	$0x04,0x10(%esi)
00000841	movl	%esi,(%esp)
00000844	calll	CUtlBuffer::AddNullTermination()
00000849	jmp	0x00000867
0000084b	cvtss2sd	%xmm0,%xmm0
0000084f	movsd	%xmm0,0x08(%esp)
00000855	leal	0x1726d-0x77e(%edi),%eax
0000085b	movl	%eax,0x04(%esp)
0000085f	movl	%esi,(%esp)
00000862	calll	CUtlBuffer::Printf(char const*, ...)
00000867	movss	0x08(%ebx),%xmm0
0000086c	testb	$0x01,0x15(%esi)
00000870	jne	0x000008be
00000872	movl	%esi,(%esp)
00000875	movl	$0x00000004,0x04(%esp)
0000087d	movss	%xmm0,0xf0(%ebp)
00000882	calll	CUtlBuffer::CheckPut(int)
00000887	movss	0xf0(%ebp),%xmm0
0000088c	testb	%al,%al
0000088e	je	0x000008da
00000890	movl	0x10(%esi),%eax
00000893	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000896	addl	(%esi),%eax
00000898	testb	$0x01,0x34(%esi)
0000089c	je	0x000008ac
0000089e	testl	%eax,%eax
000008a0	je	0x000008b0
000008a2	movd	%xmm0,%ecx
000008a6	bswap	%ecx
000008a8	movd	%ecx,%xmm0
000008ac	movss	%xmm0,(%eax)
000008b0	addl	$0x04,0x10(%esi)
000008b4	movl	%esi,(%esp)
000008b7	calll	CUtlBuffer::AddNullTermination()
000008bc	jmp	0x000008da
000008be	cvtss2sd	%xmm0,%xmm0
000008c2	movsd	%xmm0,0x08(%esp)
000008c8	leal	0x1726d-0x77e(%edi),%eax
000008ce	movl	%eax,0x04(%esp)
000008d2	movl	%esi,(%esp)
000008d5	calll	CUtlBuffer::Printf(char const*, ...)
000008da	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000008de	sete	%al
000008e1	movzbl	%al,%eax
000008e4	addl	$0x1c,%esp
000008e7	popl	%esi
000008e8	popl	%edi
000008e9	popl	%ebx
000008ea	popl	%ebp
000008eb	ret
000008ec	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Unserialize(CUtlBuffer&, Vector&):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%ebx
000008f4	pushl	%edi
000008f5	pushl	%esi
000008f6	subl	$0x2c,%esp
000008f9	calll	0x000008fe
000008fe	popl	%ebx
000008ff	movl	0x0c(%ebp),%edi
00000902	movl	0x08(%ebp),%esi
00000905	testb	$0x01,0x15(%esi)
00000909	je	0x0000093f
0000090b	movl	%edi,0x08(%esp)
0000090f	leal	0x17276-0x8fe(%ebx),%eax
00000915	movl	%eax,0x04(%esp)
00000919	movl	%esi,(%esp)
0000091c	leal	0x08(%edi),%eax
0000091f	movl	%eax,0x10(%esp)
00000923	addl	$0x04,%edi
00000926	movl	%edi,0x0c(%esp)
0000092a	calll	CUtlBuffer::Scanf(char const*, ...)
0000092f	xorb	%cl,%cl
00000931	cmpl	$0x03,%eax
00000934	je	0x00000a91
0000093a	jmp	0x00000a98
0000093f	movl	%esi,(%esp)
00000942	movl	$0x00000004,0x04(%esp)
0000094a	calll	CUtlBuffer::CheckGet(int)
0000094f	cmpb	$0x01,%al
00000951	jne	0x00000982
00000953	movl	(%esi),%ecx
00000955	movl	0x0c(%esi),%eax
00000958	movl	%eax,%edx
0000095a	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
0000095d	movss	(%ecx,%edx),%xmm0
00000962	movss	%xmm0,0xec(%ebp)
00000967	testb	$0x01,0x34(%esi)
0000096b	je	0x0000097a
0000096d	movd	%xmm0,%ecx
00000971	bswap	%ecx
00000973	movl	%ecx,0xec(%ebp)
00000976	movd	%ecx,%xmm0
0000097a	addl	$0x04,%eax
0000097d	movl	%eax,0x0c(%esi)
00000980	jmp	0x0000098d
00000982	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000989	pxor	%xmm0,%xmm0
0000098d	movss	%xmm0,(%edi)
00000991	testb	$0x01,0x15(%esi)
00000995	jne	0x000009e7
00000997	movl	%esi,(%esp)
0000099a	movl	$0x00000004,0x04(%esp)
000009a2	calll	CUtlBuffer::CheckGet(int)
000009a7	cmpb	$0x01,%al
000009a9	jne	0x000009da
000009ab	movl	(%esi),%ecx
000009ad	movl	0x0c(%esi),%eax
000009b0	movl	%eax,%edx
000009b2	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000009b5	movss	(%ecx,%edx),%xmm0
000009ba	movss	%xmm0,0xf0(%ebp)
000009bf	testb	$0x01,0x34(%esi)
000009c3	je	0x000009d2
000009c5	movd	%xmm0,%ecx
000009c9	bswap	%ecx
000009cb	movl	%ecx,0xf0(%ebp)
000009ce	movd	%ecx,%xmm0
000009d2	addl	$0x04,%eax
000009d5	movl	%eax,0x0c(%esi)
000009d8	jmp	0x00000a0c
000009da	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000009e1	pxor	%xmm0,%xmm0
000009e5	jmp	0x00000a0c
000009e7	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000009ee	leal	0xf0(%ebp),%eax
000009f1	movl	%eax,0x08(%esp)
000009f5	leal	0x1726d-0x8fe(%ebx),%eax
000009fb	movl	%eax,0x04(%esp)
000009ff	movl	%esi,(%esp)
00000a02	calll	CUtlBuffer::Scanf(char const*, ...)
00000a07	movss	0xf0(%ebp),%xmm0
00000a0c	movss	%xmm0,0x04(%edi)
00000a11	testb	$0x01,0x15(%esi)
00000a15	jne	0x00000a67
00000a17	movl	%esi,(%esp)
00000a1a	movl	$0x00000004,0x04(%esp)
00000a22	calll	CUtlBuffer::CheckGet(int)
00000a27	cmpb	$0x01,%al
00000a29	jne	0x00000a5a
00000a2b	movl	(%esi),%ecx
00000a2d	movl	0x0c(%esi),%eax
00000a30	movl	%eax,%edx
00000a32	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000a35	movss	(%ecx,%edx),%xmm0
00000a3a	movss	%xmm0,0xe8(%ebp)
00000a3f	testb	$0x01,0x34(%esi)
00000a43	je	0x00000a52
00000a45	movd	%xmm0,%ecx
00000a49	bswap	%ecx
00000a4b	movl	%ecx,0xe8(%ebp)
00000a4e	movd	%ecx,%xmm0
00000a52	addl	$0x04,%eax
00000a55	movl	%eax,0x0c(%esi)
00000a58	jmp	0x00000a8c
00000a5a	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000a61	pxor	%xmm0,%xmm0
00000a65	jmp	0x00000a8c
00000a67	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000a6e	leal	0xe8(%ebp),%eax
00000a71	movl	%eax,0x08(%esp)
00000a75	leal	0x1726d-0x8fe(%ebx),%eax
00000a7b	movl	%eax,0x04(%esp)
00000a7f	movl	%esi,(%esp)
00000a82	calll	CUtlBuffer::Scanf(char const*, ...)
00000a87	movss	0xe8(%ebp),%xmm0
00000a8c	movss	%xmm0,0x08(%edi)
00000a91	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000a95	sete	%cl
00000a98	movzbl	%cl,%eax
00000a9b	addl	$0x2c,%esp
00000a9e	popl	%esi
00000a9f	popl	%edi
00000aa0	popl	%ebx
00000aa1	popl	%ebp
00000aa2	ret
00000aa3	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, Vector4D const&):
00000ab0	pushl	%ebp
00000ab1	movl	%esp,%ebp
00000ab3	pushl	%ebx
00000ab4	pushl	%edi
00000ab5	pushl	%esi
00000ab6	subl	$0x1c,%esp
00000ab9	calll	0x00000abe
00000abe	popl	%edi
00000abf	movl	0x0c(%ebp),%ebx
00000ac2	movl	0x08(%ebp),%esi
00000ac5	testb	$0x01,0x15(%esi)
00000ac9	je	0x00000adf
00000acb	movl	%ebx,(%esp)
00000ace	movl	%esi,%ecx
00000ad0	movl	$0x00000004,%edx
00000ad5	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00000ada	jmp	0x00000c8d
00000adf	movss	(%ebx),%xmm0
00000ae3	movss	%xmm0,0xf0(%ebp)
00000ae8	movl	%esi,(%esp)
00000aeb	movl	$0x00000004,0x04(%esp)
00000af3	calll	CUtlBuffer::CheckPut(int)
00000af8	testb	%al,%al
00000afa	je	0x00000b34
00000afc	movl	0x10(%esi),%eax
00000aff	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000b02	addl	(%esi),%eax
00000b04	testb	$0x01,0x34(%esi)
00000b08	jne	0x00000b11
00000b0a	movss	0xf0(%ebp),%xmm0
00000b0f	jmp	0x00000b24
00000b11	testl	%eax,%eax
00000b13	je	0x00000b28
00000b15	movss	0xf0(%ebp),%xmm0
00000b1a	movd	%xmm0,%ecx
00000b1e	bswap	%ecx
00000b20	movd	%ecx,%xmm0
00000b24	movss	%xmm0,(%eax)
00000b28	addl	$0x04,0x10(%esi)
00000b2c	movl	%esi,(%esp)
00000b2f	calll	CUtlBuffer::AddNullTermination()
00000b34	movss	0x04(%ebx),%xmm0
00000b39	testb	$0x01,0x15(%esi)
00000b3d	jne	0x00000b8b
00000b3f	movl	%esi,(%esp)
00000b42	movl	$0x00000004,0x04(%esp)
00000b4a	movss	%xmm0,0xf0(%ebp)
00000b4f	calll	CUtlBuffer::CheckPut(int)
00000b54	movss	0xf0(%ebp),%xmm0
00000b59	testb	%al,%al
00000b5b	je	0x00000ba7
00000b5d	movl	0x10(%esi),%eax
00000b60	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000b63	addl	(%esi),%eax
00000b65	testb	$0x01,0x34(%esi)
00000b69	je	0x00000b79
00000b6b	testl	%eax,%eax
00000b6d	je	0x00000b7d
00000b6f	movd	%xmm0,%ecx
00000b73	bswap	%ecx
00000b75	movd	%ecx,%xmm0
00000b79	movss	%xmm0,(%eax)
00000b7d	addl	$0x04,0x10(%esi)
00000b81	movl	%esi,(%esp)
00000b84	calll	CUtlBuffer::AddNullTermination()
00000b89	jmp	0x00000ba7
00000b8b	cvtss2sd	%xmm0,%xmm0
00000b8f	movsd	%xmm0,0x08(%esp)
00000b95	leal	0x1726d-0xabe(%edi),%eax
00000b9b	movl	%eax,0x04(%esp)
00000b9f	movl	%esi,(%esp)
00000ba2	calll	CUtlBuffer::Printf(char const*, ...)
00000ba7	movss	0x08(%ebx),%xmm0
00000bac	testb	$0x01,0x15(%esi)
00000bb0	jne	0x00000bfe
00000bb2	movl	%esi,(%esp)
00000bb5	movl	$0x00000004,0x04(%esp)
00000bbd	movss	%xmm0,0xf0(%ebp)
00000bc2	calll	CUtlBuffer::CheckPut(int)
00000bc7	movss	0xf0(%ebp),%xmm0
00000bcc	testb	%al,%al
00000bce	je	0x00000c1a
00000bd0	movl	0x10(%esi),%eax
00000bd3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000bd6	addl	(%esi),%eax
00000bd8	testb	$0x01,0x34(%esi)
00000bdc	je	0x00000bec
00000bde	testl	%eax,%eax
00000be0	je	0x00000bf0
00000be2	movd	%xmm0,%ecx
00000be6	bswap	%ecx
00000be8	movd	%ecx,%xmm0
00000bec	movss	%xmm0,(%eax)
00000bf0	addl	$0x04,0x10(%esi)
00000bf4	movl	%esi,(%esp)
00000bf7	calll	CUtlBuffer::AddNullTermination()
00000bfc	jmp	0x00000c1a
00000bfe	cvtss2sd	%xmm0,%xmm0
00000c02	movsd	%xmm0,0x08(%esp)
00000c08	leal	0x1726d-0xabe(%edi),%eax
00000c0e	movl	%eax,0x04(%esp)
00000c12	movl	%esi,(%esp)
00000c15	calll	CUtlBuffer::Printf(char const*, ...)
00000c1a	movss	0x0c(%ebx),%xmm0
00000c1f	testb	$0x01,0x15(%esi)
00000c23	jne	0x00000c71
00000c25	movl	%esi,(%esp)
00000c28	movl	$0x00000004,0x04(%esp)
00000c30	movss	%xmm0,0xf0(%ebp)
00000c35	calll	CUtlBuffer::CheckPut(int)
00000c3a	movss	0xf0(%ebp),%xmm0
00000c3f	testb	%al,%al
00000c41	je	0x00000c8d
00000c43	movl	0x10(%esi),%eax
00000c46	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000c49	addl	(%esi),%eax
00000c4b	testb	$0x01,0x34(%esi)
00000c4f	je	0x00000c5f
00000c51	testl	%eax,%eax
00000c53	je	0x00000c63
00000c55	movd	%xmm0,%ecx
00000c59	bswap	%ecx
00000c5b	movd	%ecx,%xmm0
00000c5f	movss	%xmm0,(%eax)
00000c63	addl	$0x04,0x10(%esi)
00000c67	movl	%esi,(%esp)
00000c6a	calll	CUtlBuffer::AddNullTermination()
00000c6f	jmp	0x00000c8d
00000c71	cvtss2sd	%xmm0,%xmm0
00000c75	movsd	%xmm0,0x08(%esp)
00000c7b	leal	0x1726d-0xabe(%edi),%eax
00000c81	movl	%eax,0x04(%esp)
00000c85	movl	%esi,(%esp)
00000c88	calll	CUtlBuffer::Printf(char const*, ...)
00000c8d	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000c91	sete	%al
00000c94	movzbl	%al,%eax
00000c97	addl	$0x1c,%esp
00000c9a	popl	%esi
00000c9b	popl	%edi
00000c9c	popl	%ebx
00000c9d	popl	%ebp
00000c9e	ret
00000c9f	nop
Unserialize(CUtlBuffer&, Vector4D&):
00000ca0	pushl	%ebp
00000ca1	movl	%esp,%ebp
00000ca3	pushl	%ebx
00000ca4	pushl	%edi
00000ca5	pushl	%esi
00000ca6	subl	$0x2c,%esp
00000ca9	calll	0x00000cae
00000cae	popl	%ebx
00000caf	movl	0x0c(%ebp),%edi
00000cb2	movl	0x08(%ebp),%esi
00000cb5	testb	$0x01,0x15(%esi)
00000cb9	je	0x00000cf6
00000cbb	movl	%edi,0x08(%esp)
00000cbf	leal	0x1727f-0xcae(%ebx),%eax
00000cc5	movl	%eax,0x04(%esp)
00000cc9	movl	%esi,(%esp)
00000ccc	leal	0x0c(%edi),%eax
00000ccf	movl	%eax,0x14(%esp)
00000cd3	leal	0x08(%edi),%eax
00000cd6	movl	%eax,0x10(%esp)
00000cda	addl	$0x04,%edi
00000cdd	movl	%edi,0x0c(%esp)
00000ce1	calll	CUtlBuffer::Scanf(char const*, ...)
00000ce6	xorb	%cl,%cl
00000ce8	cmpl	$0x04,%eax
00000ceb	je	0x00000ec8
00000cf1	jmp	0x00000ecf
00000cf6	movl	%esi,(%esp)
00000cf9	movl	$0x00000004,0x04(%esp)
00000d01	calll	CUtlBuffer::CheckGet(int)
00000d06	cmpb	$0x01,%al
00000d08	jne	0x00000d39
00000d0a	movl	(%esi),%ecx
00000d0c	movl	0x0c(%esi),%eax
00000d0f	movl	%eax,%edx
00000d11	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000d14	movss	(%ecx,%edx),%xmm0
00000d19	movss	%xmm0,0xe8(%ebp)
00000d1e	testb	$0x01,0x34(%esi)
00000d22	je	0x00000d31
00000d24	movd	%xmm0,%ecx
00000d28	bswap	%ecx
00000d2a	movl	%ecx,0xe8(%ebp)
00000d2d	movd	%ecx,%xmm0
00000d31	addl	$0x04,%eax
00000d34	movl	%eax,0x0c(%esi)
00000d37	jmp	0x00000d44
00000d39	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000d40	pxor	%xmm0,%xmm0
00000d44	movss	%xmm0,(%edi)
00000d48	testb	$0x01,0x15(%esi)
00000d4c	jne	0x00000d9e
00000d4e	movl	%esi,(%esp)
00000d51	movl	$0x00000004,0x04(%esp)
00000d59	calll	CUtlBuffer::CheckGet(int)
00000d5e	cmpb	$0x01,%al
00000d60	jne	0x00000d91
00000d62	movl	(%esi),%ecx
00000d64	movl	0x0c(%esi),%eax
00000d67	movl	%eax,%edx
00000d69	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000d6c	movss	(%ecx,%edx),%xmm0
00000d71	movss	%xmm0,0xec(%ebp)
00000d76	testb	$0x01,0x34(%esi)
00000d7a	je	0x00000d89
00000d7c	movd	%xmm0,%ecx
00000d80	bswap	%ecx
00000d82	movl	%ecx,0xec(%ebp)
00000d85	movd	%ecx,%xmm0
00000d89	addl	$0x04,%eax
00000d8c	movl	%eax,0x0c(%esi)
00000d8f	jmp	0x00000dc3
00000d91	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000d98	pxor	%xmm0,%xmm0
00000d9c	jmp	0x00000dc3
00000d9e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000da5	leal	0xec(%ebp),%eax
00000da8	movl	%eax,0x08(%esp)
00000dac	leal	0x1726d-0xcae(%ebx),%eax
00000db2	movl	%eax,0x04(%esp)
00000db6	movl	%esi,(%esp)
00000db9	calll	CUtlBuffer::Scanf(char const*, ...)
00000dbe	movss	0xec(%ebp),%xmm0
00000dc3	movss	%xmm0,0x04(%edi)
00000dc8	testb	$0x01,0x15(%esi)
00000dcc	jne	0x00000e1e
00000dce	movl	%esi,(%esp)
00000dd1	movl	$0x00000004,0x04(%esp)
00000dd9	calll	CUtlBuffer::CheckGet(int)
00000dde	cmpb	$0x01,%al
00000de0	jne	0x00000e11
00000de2	movl	(%esi),%ecx
00000de4	movl	0x0c(%esi),%eax
00000de7	movl	%eax,%edx
00000de9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000dec	movss	(%ecx,%edx),%xmm0
00000df1	movss	%xmm0,0xf0(%ebp)
00000df6	testb	$0x01,0x34(%esi)
00000dfa	je	0x00000e09
00000dfc	movd	%xmm0,%ecx
00000e00	bswap	%ecx
00000e02	movl	%ecx,0xf0(%ebp)
00000e05	movd	%ecx,%xmm0
00000e09	addl	$0x04,%eax
00000e0c	movl	%eax,0x0c(%esi)
00000e0f	jmp	0x00000e43
00000e11	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00000e18	pxor	%xmm0,%xmm0
00000e1c	jmp	0x00000e43
00000e1e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00000e25	leal	0xf0(%ebp),%eax
00000e28	movl	%eax,0x08(%esp)
00000e2c	leal	0x1726d-0xcae(%ebx),%eax
00000e32	movl	%eax,0x04(%esp)
00000e36	movl	%esi,(%esp)
00000e39	calll	CUtlBuffer::Scanf(char const*, ...)
00000e3e	movss	0xf0(%ebp),%xmm0
00000e43	movss	%xmm0,0x08(%edi)
00000e48	testb	$0x01,0x15(%esi)
00000e4c	jne	0x00000e9e
00000e4e	movl	%esi,(%esp)
00000e51	movl	$0x00000004,0x04(%esp)
00000e59	calll	CUtlBuffer::CheckGet(int)
00000e5e	cmpb	$0x01,%al
00000e60	jne	0x00000e91
00000e62	movl	(%esi),%ecx
00000e64	movl	0x0c(%esi),%eax
00000e67	movl	%eax,%edx
00000e69	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000e6c	movss	(%ecx,%edx),%xmm0
00000e71	movss	%xmm0,0xe4(%ebp)
00000e76	testb	$0x01,0x34(%esi)
00000e7a	je	0x00000e89
00000e7c	movd	%xmm0,%ecx
00000e80	bswap	%ecx
00000e82	movl	%ecx,0xe4(%ebp)
00000e85	movd	%ecx,%xmm0
00000e89	addl	$0x04,%eax
00000e8c	movl	%eax,0x0c(%esi)
00000e8f	jmp	0x00000ec3
00000e91	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00000e98	pxor	%xmm0,%xmm0
00000e9c	jmp	0x00000ec3
00000e9e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00000ea5	leal	0xe4(%ebp),%eax
00000ea8	movl	%eax,0x08(%esp)
00000eac	leal	0x1726d-0xcae(%ebx),%eax
00000eb2	movl	%eax,0x04(%esp)
00000eb6	movl	%esi,(%esp)
00000eb9	calll	CUtlBuffer::Scanf(char const*, ...)
00000ebe	movss	0xe4(%ebp),%xmm0
00000ec3	movss	%xmm0,0x0c(%edi)
00000ec8	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000ecc	sete	%cl
00000ecf	movzbl	%cl,%eax
00000ed2	addl	$0x2c,%esp
00000ed5	popl	%esi
00000ed6	popl	%edi
00000ed7	popl	%ebx
00000ed8	popl	%ebp
00000ed9	ret
00000eda	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, QAngle const&):
00000ee0	pushl	%ebp
00000ee1	movl	%esp,%ebp
00000ee3	pushl	%ebx
00000ee4	pushl	%edi
00000ee5	pushl	%esi
00000ee6	subl	$0x1c,%esp
00000ee9	calll	0x00000eee
00000eee	popl	%edi
00000eef	movl	0x0c(%ebp),%ebx
00000ef2	movl	0x08(%ebp),%esi
00000ef5	testb	$0x01,0x15(%esi)
00000ef9	je	0x00000f0f
00000efb	movl	%ebx,(%esp)
00000efe	movl	%esi,%ecx
00000f00	movl	$0x00000003,%edx
00000f05	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00000f0a	jmp	0x0000104a
00000f0f	movss	(%ebx),%xmm0
00000f13	movss	%xmm0,0xf0(%ebp)
00000f18	movl	%esi,(%esp)
00000f1b	movl	$0x00000004,0x04(%esp)
00000f23	calll	CUtlBuffer::CheckPut(int)
00000f28	testb	%al,%al
00000f2a	je	0x00000f64
00000f2c	movl	0x10(%esi),%eax
00000f2f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000f32	addl	(%esi),%eax
00000f34	testb	$0x01,0x34(%esi)
00000f38	jne	0x00000f41
00000f3a	movss	0xf0(%ebp),%xmm0
00000f3f	jmp	0x00000f54
00000f41	testl	%eax,%eax
00000f43	je	0x00000f58
00000f45	movss	0xf0(%ebp),%xmm0
00000f4a	movd	%xmm0,%ecx
00000f4e	bswap	%ecx
00000f50	movd	%ecx,%xmm0
00000f54	movss	%xmm0,(%eax)
00000f58	addl	$0x04,0x10(%esi)
00000f5c	movl	%esi,(%esp)
00000f5f	calll	CUtlBuffer::AddNullTermination()
00000f64	movss	0x04(%ebx),%xmm0
00000f69	testb	$0x01,0x15(%esi)
00000f6d	jne	0x00000fbb
00000f6f	movl	%esi,(%esp)
00000f72	movl	$0x00000004,0x04(%esp)
00000f7a	movss	%xmm0,0xf0(%ebp)
00000f7f	calll	CUtlBuffer::CheckPut(int)
00000f84	movss	0xf0(%ebp),%xmm0
00000f89	testb	%al,%al
00000f8b	je	0x00000fd7
00000f8d	movl	0x10(%esi),%eax
00000f90	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000f93	addl	(%esi),%eax
00000f95	testb	$0x01,0x34(%esi)
00000f99	je	0x00000fa9
00000f9b	testl	%eax,%eax
00000f9d	je	0x00000fad
00000f9f	movd	%xmm0,%ecx
00000fa3	bswap	%ecx
00000fa5	movd	%ecx,%xmm0
00000fa9	movss	%xmm0,(%eax)
00000fad	addl	$0x04,0x10(%esi)
00000fb1	movl	%esi,(%esp)
00000fb4	calll	CUtlBuffer::AddNullTermination()
00000fb9	jmp	0x00000fd7
00000fbb	cvtss2sd	%xmm0,%xmm0
00000fbf	movsd	%xmm0,0x08(%esp)
00000fc5	leal	0x1726d-0xeee(%edi),%eax
00000fcb	movl	%eax,0x04(%esp)
00000fcf	movl	%esi,(%esp)
00000fd2	calll	CUtlBuffer::Printf(char const*, ...)
00000fd7	movss	0x08(%ebx),%xmm0
00000fdc	testb	$0x01,0x15(%esi)
00000fe0	jne	0x0000102e
00000fe2	movl	%esi,(%esp)
00000fe5	movl	$0x00000004,0x04(%esp)
00000fed	movss	%xmm0,0xf0(%ebp)
00000ff2	calll	CUtlBuffer::CheckPut(int)
00000ff7	movss	0xf0(%ebp),%xmm0
00000ffc	testb	%al,%al
00000ffe	je	0x0000104a
00001000	movl	0x10(%esi),%eax
00001003	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001006	addl	(%esi),%eax
00001008	testb	$0x01,0x34(%esi)
0000100c	je	0x0000101c
0000100e	testl	%eax,%eax
00001010	je	0x00001020
00001012	movd	%xmm0,%ecx
00001016	bswap	%ecx
00001018	movd	%ecx,%xmm0
0000101c	movss	%xmm0,(%eax)
00001020	addl	$0x04,0x10(%esi)
00001024	movl	%esi,(%esp)
00001027	calll	CUtlBuffer::AddNullTermination()
0000102c	jmp	0x0000104a
0000102e	cvtss2sd	%xmm0,%xmm0
00001032	movsd	%xmm0,0x08(%esp)
00001038	leal	0x1726d-0xeee(%edi),%eax
0000103e	movl	%eax,0x04(%esp)
00001042	movl	%esi,(%esp)
00001045	calll	CUtlBuffer::Printf(char const*, ...)
0000104a	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000104e	sete	%al
00001051	movzbl	%al,%eax
00001054	addl	$0x1c,%esp
00001057	popl	%esi
00001058	popl	%edi
00001059	popl	%ebx
0000105a	popl	%ebp
0000105b	ret
0000105c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Unserialize(CUtlBuffer&, QAngle&):
00001060	pushl	%ebp
00001061	movl	%esp,%ebp
00001063	pushl	%ebx
00001064	pushl	%edi
00001065	pushl	%esi
00001066	subl	$0x2c,%esp
00001069	calll	0x0000106e
0000106e	popl	%ebx
0000106f	movl	0x0c(%ebp),%edi
00001072	movl	0x08(%ebp),%esi
00001075	testb	$0x01,0x15(%esi)
00001079	je	0x000010af
0000107b	movl	%edi,0x08(%esp)
0000107f	leal	0x17276-0x106e(%ebx),%eax
00001085	movl	%eax,0x04(%esp)
00001089	movl	%esi,(%esp)
0000108c	leal	0x08(%edi),%eax
0000108f	movl	%eax,0x10(%esp)
00001093	addl	$0x04,%edi
00001096	movl	%edi,0x0c(%esp)
0000109a	calll	CUtlBuffer::Scanf(char const*, ...)
0000109f	xorb	%cl,%cl
000010a1	cmpl	$0x03,%eax
000010a4	je	0x00001201
000010aa	jmp	0x00001208
000010af	movl	%esi,(%esp)
000010b2	movl	$0x00000004,0x04(%esp)
000010ba	calll	CUtlBuffer::CheckGet(int)
000010bf	cmpb	$0x01,%al
000010c1	jne	0x000010f2
000010c3	movl	(%esi),%ecx
000010c5	movl	0x0c(%esi),%eax
000010c8	movl	%eax,%edx
000010ca	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000010cd	movss	(%ecx,%edx),%xmm0
000010d2	movss	%xmm0,0xec(%ebp)
000010d7	testb	$0x01,0x34(%esi)
000010db	je	0x000010ea
000010dd	movd	%xmm0,%ecx
000010e1	bswap	%ecx
000010e3	movl	%ecx,0xec(%ebp)
000010e6	movd	%ecx,%xmm0
000010ea	addl	$0x04,%eax
000010ed	movl	%eax,0x0c(%esi)
000010f0	jmp	0x000010fd
000010f2	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
000010f9	pxor	%xmm0,%xmm0
000010fd	movss	%xmm0,(%edi)
00001101	testb	$0x01,0x15(%esi)
00001105	jne	0x00001157
00001107	movl	%esi,(%esp)
0000110a	movl	$0x00000004,0x04(%esp)
00001112	calll	CUtlBuffer::CheckGet(int)
00001117	cmpb	$0x01,%al
00001119	jne	0x0000114a
0000111b	movl	(%esi),%ecx
0000111d	movl	0x0c(%esi),%eax
00001120	movl	%eax,%edx
00001122	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001125	movss	(%ecx,%edx),%xmm0
0000112a	movss	%xmm0,0xf0(%ebp)
0000112f	testb	$0x01,0x34(%esi)
00001133	je	0x00001142
00001135	movd	%xmm0,%ecx
00001139	bswap	%ecx
0000113b	movl	%ecx,0xf0(%ebp)
0000113e	movd	%ecx,%xmm0
00001142	addl	$0x04,%eax
00001145	movl	%eax,0x0c(%esi)
00001148	jmp	0x0000117c
0000114a	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001151	pxor	%xmm0,%xmm0
00001155	jmp	0x0000117c
00001157	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
0000115e	leal	0xf0(%ebp),%eax
00001161	movl	%eax,0x08(%esp)
00001165	leal	0x1726d-0x106e(%ebx),%eax
0000116b	movl	%eax,0x04(%esp)
0000116f	movl	%esi,(%esp)
00001172	calll	CUtlBuffer::Scanf(char const*, ...)
00001177	movss	0xf0(%ebp),%xmm0
0000117c	movss	%xmm0,0x04(%edi)
00001181	testb	$0x01,0x15(%esi)
00001185	jne	0x000011d7
00001187	movl	%esi,(%esp)
0000118a	movl	$0x00000004,0x04(%esp)
00001192	calll	CUtlBuffer::CheckGet(int)
00001197	cmpb	$0x01,%al
00001199	jne	0x000011ca
0000119b	movl	(%esi),%ecx
0000119d	movl	0x0c(%esi),%eax
000011a0	movl	%eax,%edx
000011a2	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000011a5	movss	(%ecx,%edx),%xmm0
000011aa	movss	%xmm0,0xe8(%ebp)
000011af	testb	$0x01,0x34(%esi)
000011b3	je	0x000011c2
000011b5	movd	%xmm0,%ecx
000011b9	bswap	%ecx
000011bb	movl	%ecx,0xe8(%ebp)
000011be	movd	%ecx,%xmm0
000011c2	addl	$0x04,%eax
000011c5	movl	%eax,0x0c(%esi)
000011c8	jmp	0x000011fc
000011ca	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000011d1	pxor	%xmm0,%xmm0
000011d5	jmp	0x000011fc
000011d7	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000011de	leal	0xe8(%ebp),%eax
000011e1	movl	%eax,0x08(%esp)
000011e5	leal	0x1726d-0x106e(%ebx),%eax
000011eb	movl	%eax,0x04(%esp)
000011ef	movl	%esi,(%esp)
000011f2	calll	CUtlBuffer::Scanf(char const*, ...)
000011f7	movss	0xe8(%ebp),%xmm0
000011fc	movss	%xmm0,0x08(%edi)
00001201	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001205	sete	%cl
00001208	movzbl	%cl,%eax
0000120b	addl	$0x2c,%esp
0000120e	popl	%esi
0000120f	popl	%edi
00001210	popl	%ebx
00001211	popl	%ebp
00001212	ret
00001213	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, Quaternion const&):
00001220	pushl	%ebp
00001221	movl	%esp,%ebp
00001223	pushl	%ebx
00001224	pushl	%edi
00001225	pushl	%esi
00001226	subl	$0x1c,%esp
00001229	calll	0x0000122e
0000122e	popl	%edi
0000122f	movl	0x0c(%ebp),%ebx
00001232	movl	0x08(%ebp),%esi
00001235	testb	$0x01,0x15(%esi)
00001239	je	0x0000124f
0000123b	movl	%ebx,(%esp)
0000123e	movl	%esi,%ecx
00001240	movl	$0x00000004,%edx
00001245	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000124a	jmp	0x000013fd
0000124f	movss	(%ebx),%xmm0
00001253	movss	%xmm0,0xf0(%ebp)
00001258	movl	%esi,(%esp)
0000125b	movl	$0x00000004,0x04(%esp)
00001263	calll	CUtlBuffer::CheckPut(int)
00001268	testb	%al,%al
0000126a	je	0x000012a4
0000126c	movl	0x10(%esi),%eax
0000126f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001272	addl	(%esi),%eax
00001274	testb	$0x01,0x34(%esi)
00001278	jne	0x00001281
0000127a	movss	0xf0(%ebp),%xmm0
0000127f	jmp	0x00001294
00001281	testl	%eax,%eax
00001283	je	0x00001298
00001285	movss	0xf0(%ebp),%xmm0
0000128a	movd	%xmm0,%ecx
0000128e	bswap	%ecx
00001290	movd	%ecx,%xmm0
00001294	movss	%xmm0,(%eax)
00001298	addl	$0x04,0x10(%esi)
0000129c	movl	%esi,(%esp)
0000129f	calll	CUtlBuffer::AddNullTermination()
000012a4	movss	0x04(%ebx),%xmm0
000012a9	testb	$0x01,0x15(%esi)
000012ad	jne	0x000012fb
000012af	movl	%esi,(%esp)
000012b2	movl	$0x00000004,0x04(%esp)
000012ba	movss	%xmm0,0xf0(%ebp)
000012bf	calll	CUtlBuffer::CheckPut(int)
000012c4	movss	0xf0(%ebp),%xmm0
000012c9	testb	%al,%al
000012cb	je	0x00001317
000012cd	movl	0x10(%esi),%eax
000012d0	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000012d3	addl	(%esi),%eax
000012d5	testb	$0x01,0x34(%esi)
000012d9	je	0x000012e9
000012db	testl	%eax,%eax
000012dd	je	0x000012ed
000012df	movd	%xmm0,%ecx
000012e3	bswap	%ecx
000012e5	movd	%ecx,%xmm0
000012e9	movss	%xmm0,(%eax)
000012ed	addl	$0x04,0x10(%esi)
000012f1	movl	%esi,(%esp)
000012f4	calll	CUtlBuffer::AddNullTermination()
000012f9	jmp	0x00001317
000012fb	cvtss2sd	%xmm0,%xmm0
000012ff	movsd	%xmm0,0x08(%esp)
00001305	leal	0x1726d-0x122e(%edi),%eax
0000130b	movl	%eax,0x04(%esp)
0000130f	movl	%esi,(%esp)
00001312	calll	CUtlBuffer::Printf(char const*, ...)
00001317	movss	0x08(%ebx),%xmm0
0000131c	testb	$0x01,0x15(%esi)
00001320	jne	0x0000136e
00001322	movl	%esi,(%esp)
00001325	movl	$0x00000004,0x04(%esp)
0000132d	movss	%xmm0,0xf0(%ebp)
00001332	calll	CUtlBuffer::CheckPut(int)
00001337	movss	0xf0(%ebp),%xmm0
0000133c	testb	%al,%al
0000133e	je	0x0000138a
00001340	movl	0x10(%esi),%eax
00001343	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001346	addl	(%esi),%eax
00001348	testb	$0x01,0x34(%esi)
0000134c	je	0x0000135c
0000134e	testl	%eax,%eax
00001350	je	0x00001360
00001352	movd	%xmm0,%ecx
00001356	bswap	%ecx
00001358	movd	%ecx,%xmm0
0000135c	movss	%xmm0,(%eax)
00001360	addl	$0x04,0x10(%esi)
00001364	movl	%esi,(%esp)
00001367	calll	CUtlBuffer::AddNullTermination()
0000136c	jmp	0x0000138a
0000136e	cvtss2sd	%xmm0,%xmm0
00001372	movsd	%xmm0,0x08(%esp)
00001378	leal	0x1726d-0x122e(%edi),%eax
0000137e	movl	%eax,0x04(%esp)
00001382	movl	%esi,(%esp)
00001385	calll	CUtlBuffer::Printf(char const*, ...)
0000138a	movss	0x0c(%ebx),%xmm0
0000138f	testb	$0x01,0x15(%esi)
00001393	jne	0x000013e1
00001395	movl	%esi,(%esp)
00001398	movl	$0x00000004,0x04(%esp)
000013a0	movss	%xmm0,0xf0(%ebp)
000013a5	calll	CUtlBuffer::CheckPut(int)
000013aa	movss	0xf0(%ebp),%xmm0
000013af	testb	%al,%al
000013b1	je	0x000013fd
000013b3	movl	0x10(%esi),%eax
000013b6	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000013b9	addl	(%esi),%eax
000013bb	testb	$0x01,0x34(%esi)
000013bf	je	0x000013cf
000013c1	testl	%eax,%eax
000013c3	je	0x000013d3
000013c5	movd	%xmm0,%ecx
000013c9	bswap	%ecx
000013cb	movd	%ecx,%xmm0
000013cf	movss	%xmm0,(%eax)
000013d3	addl	$0x04,0x10(%esi)
000013d7	movl	%esi,(%esp)
000013da	calll	CUtlBuffer::AddNullTermination()
000013df	jmp	0x000013fd
000013e1	cvtss2sd	%xmm0,%xmm0
000013e5	movsd	%xmm0,0x08(%esp)
000013eb	leal	0x1726d-0x122e(%edi),%eax
000013f1	movl	%eax,0x04(%esp)
000013f5	movl	%esi,(%esp)
000013f8	calll	CUtlBuffer::Printf(char const*, ...)
000013fd	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001401	sete	%al
00001404	movzbl	%al,%eax
00001407	addl	$0x1c,%esp
0000140a	popl	%esi
0000140b	popl	%edi
0000140c	popl	%ebx
0000140d	popl	%ebp
0000140e	ret
0000140f	nop
Unserialize(CUtlBuffer&, Quaternion&):
00001410	pushl	%ebp
00001411	movl	%esp,%ebp
00001413	pushl	%ebx
00001414	pushl	%edi
00001415	pushl	%esi
00001416	subl	$0x2c,%esp
00001419	calll	0x0000141e
0000141e	popl	%ebx
0000141f	movl	0x0c(%ebp),%edi
00001422	movl	0x08(%ebp),%esi
00001425	testb	$0x01,0x15(%esi)
00001429	je	0x00001466
0000142b	movl	%edi,0x08(%esp)
0000142f	leal	0x1727f-0x141e(%ebx),%eax
00001435	movl	%eax,0x04(%esp)
00001439	movl	%esi,(%esp)
0000143c	leal	0x0c(%edi),%eax
0000143f	movl	%eax,0x14(%esp)
00001443	leal	0x08(%edi),%eax
00001446	movl	%eax,0x10(%esp)
0000144a	addl	$0x04,%edi
0000144d	movl	%edi,0x0c(%esp)
00001451	calll	CUtlBuffer::Scanf(char const*, ...)
00001456	xorb	%cl,%cl
00001458	cmpl	$0x04,%eax
0000145b	je	0x00001638
00001461	jmp	0x0000163f
00001466	movl	%esi,(%esp)
00001469	movl	$0x00000004,0x04(%esp)
00001471	calll	CUtlBuffer::CheckGet(int)
00001476	cmpb	$0x01,%al
00001478	jne	0x000014a9
0000147a	movl	(%esi),%ecx
0000147c	movl	0x0c(%esi),%eax
0000147f	movl	%eax,%edx
00001481	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001484	movss	(%ecx,%edx),%xmm0
00001489	movss	%xmm0,0xe8(%ebp)
0000148e	testb	$0x01,0x34(%esi)
00001492	je	0x000014a1
00001494	movd	%xmm0,%ecx
00001498	bswap	%ecx
0000149a	movl	%ecx,0xe8(%ebp)
0000149d	movd	%ecx,%xmm0
000014a1	addl	$0x04,%eax
000014a4	movl	%eax,0x0c(%esi)
000014a7	jmp	0x000014b4
000014a9	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000014b0	pxor	%xmm0,%xmm0
000014b4	movss	%xmm0,(%edi)
000014b8	testb	$0x01,0x15(%esi)
000014bc	jne	0x0000150e
000014be	movl	%esi,(%esp)
000014c1	movl	$0x00000004,0x04(%esp)
000014c9	calll	CUtlBuffer::CheckGet(int)
000014ce	cmpb	$0x01,%al
000014d0	jne	0x00001501
000014d2	movl	(%esi),%ecx
000014d4	movl	0x0c(%esi),%eax
000014d7	movl	%eax,%edx
000014d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000014dc	movss	(%ecx,%edx),%xmm0
000014e1	movss	%xmm0,0xec(%ebp)
000014e6	testb	$0x01,0x34(%esi)
000014ea	je	0x000014f9
000014ec	movd	%xmm0,%ecx
000014f0	bswap	%ecx
000014f2	movl	%ecx,0xec(%ebp)
000014f5	movd	%ecx,%xmm0
000014f9	addl	$0x04,%eax
000014fc	movl	%eax,0x0c(%esi)
000014ff	jmp	0x00001533
00001501	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001508	pxor	%xmm0,%xmm0
0000150c	jmp	0x00001533
0000150e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001515	leal	0xec(%ebp),%eax
00001518	movl	%eax,0x08(%esp)
0000151c	leal	0x1726d-0x141e(%ebx),%eax
00001522	movl	%eax,0x04(%esp)
00001526	movl	%esi,(%esp)
00001529	calll	CUtlBuffer::Scanf(char const*, ...)
0000152e	movss	0xec(%ebp),%xmm0
00001533	movss	%xmm0,0x04(%edi)
00001538	testb	$0x01,0x15(%esi)
0000153c	jne	0x0000158e
0000153e	movl	%esi,(%esp)
00001541	movl	$0x00000004,0x04(%esp)
00001549	calll	CUtlBuffer::CheckGet(int)
0000154e	cmpb	$0x01,%al
00001550	jne	0x00001581
00001552	movl	(%esi),%ecx
00001554	movl	0x0c(%esi),%eax
00001557	movl	%eax,%edx
00001559	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
0000155c	movss	(%ecx,%edx),%xmm0
00001561	movss	%xmm0,0xf0(%ebp)
00001566	testb	$0x01,0x34(%esi)
0000156a	je	0x00001579
0000156c	movd	%xmm0,%ecx
00001570	bswap	%ecx
00001572	movl	%ecx,0xf0(%ebp)
00001575	movd	%ecx,%xmm0
00001579	addl	$0x04,%eax
0000157c	movl	%eax,0x0c(%esi)
0000157f	jmp	0x000015b3
00001581	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001588	pxor	%xmm0,%xmm0
0000158c	jmp	0x000015b3
0000158e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001595	leal	0xf0(%ebp),%eax
00001598	movl	%eax,0x08(%esp)
0000159c	leal	0x1726d-0x141e(%ebx),%eax
000015a2	movl	%eax,0x04(%esp)
000015a6	movl	%esi,(%esp)
000015a9	calll	CUtlBuffer::Scanf(char const*, ...)
000015ae	movss	0xf0(%ebp),%xmm0
000015b3	movss	%xmm0,0x08(%edi)
000015b8	testb	$0x01,0x15(%esi)
000015bc	jne	0x0000160e
000015be	movl	%esi,(%esp)
000015c1	movl	$0x00000004,0x04(%esp)
000015c9	calll	CUtlBuffer::CheckGet(int)
000015ce	cmpb	$0x01,%al
000015d0	jne	0x00001601
000015d2	movl	(%esi),%ecx
000015d4	movl	0x0c(%esi),%eax
000015d7	movl	%eax,%edx
000015d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000015dc	movss	(%ecx,%edx),%xmm0
000015e1	movss	%xmm0,0xe4(%ebp)
000015e6	testb	$0x01,0x34(%esi)
000015ea	je	0x000015f9
000015ec	movd	%xmm0,%ecx
000015f0	bswap	%ecx
000015f2	movl	%ecx,0xe4(%ebp)
000015f5	movd	%ecx,%xmm0
000015f9	addl	$0x04,%eax
000015fc	movl	%eax,0x0c(%esi)
000015ff	jmp	0x00001633
00001601	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00001608	pxor	%xmm0,%xmm0
0000160c	jmp	0x00001633
0000160e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00001615	leal	0xe4(%ebp),%eax
00001618	movl	%eax,0x08(%esp)
0000161c	leal	0x1726d-0x141e(%ebx),%eax
00001622	movl	%eax,0x04(%esp)
00001626	movl	%esi,(%esp)
00001629	calll	CUtlBuffer::Scanf(char const*, ...)
0000162e	movss	0xe4(%ebp),%xmm0
00001633	movss	%xmm0,0x0c(%edi)
00001638	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000163c	sete	%cl
0000163f	movzbl	%cl,%eax
00001642	addl	$0x2c,%esp
00001645	popl	%esi
00001646	popl	%edi
00001647	popl	%ebx
00001648	popl	%ebp
00001649	ret
0000164a	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, VMatrix const&):
00001650	pushl	%ebp
00001651	movl	%esp,%ebp
00001653	pushl	%ebx
00001654	pushl	%edi
00001655	pushl	%esi
00001656	subl	$0x0c,%esp
00001659	calll	0x0000165e
0000165e	popl	%eax
0000165f	movl	0x0c(%ebp),%edi
00001662	movl	0x08(%ebp),%esi
00001665	testb	$0x01,0x15(%esi)
00001669	je	0x000016f8
0000166f	leal	0x1728b-0x165e(%eax),%ebx
00001675	movl	%ebx,0x04(%esp)
00001679	movl	%esi,(%esp)
0000167c	calll	CUtlBuffer::Printf(char const*, ...)
00001681	movl	%edi,(%esp)
00001684	movl	%esi,%ecx
00001686	movl	$0x00000004,%edx
0000168b	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00001690	movl	%ebx,0x04(%esp)
00001694	movl	%esi,(%esp)
00001697	calll	CUtlBuffer::Printf(char const*, ...)
0000169c	leal	0x10(%edi),%eax
0000169f	movl	%eax,(%esp)
000016a2	movl	%esi,%ecx
000016a4	movl	$0x00000004,%edx
000016a9	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016ae	movl	%ebx,0x04(%esp)
000016b2	movl	%esi,(%esp)
000016b5	calll	CUtlBuffer::Printf(char const*, ...)
000016ba	leal	SetSerializationArrayDelimiter(char const*)(%edi),%eax
000016bd	movl	%eax,(%esp)
000016c0	movl	%esi,%ecx
000016c2	movl	$0x00000004,%edx
000016c7	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016cc	movl	%ebx,0x04(%esp)
000016d0	movl	%esi,(%esp)
000016d3	calll	CUtlBuffer::Printf(char const*, ...)
000016d8	addl	$0x30,%edi
000016db	movl	%edi,(%esp)
000016de	movl	%esi,%ecx
000016e0	movl	$0x00000004,%edx
000016e5	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016ea	movl	%ebx,0x04(%esp)
000016ee	movl	%esi,(%esp)
000016f1	calll	CUtlBuffer::Printf(char const*, ...)
000016f6	jmp	0x0000170c
000016f8	movl	%edi,0x04(%esp)
000016fc	movl	%esi,(%esp)
000016ff	movl	Serialize(CUtlBuffer&, bool const&),0x08(%esp)
00001707	calll	CUtlBuffer::Put(void const*, int)
0000170c	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001710	sete	%al
00001713	movzbl	%al,%eax
00001716	addl	$0x0c,%esp
00001719	popl	%esi
0000171a	popl	%edi
0000171b	popl	%ebx
0000171c	popl	%ebp
0000171d	ret
0000171e	nop
Unserialize(CUtlBuffer&, VMatrix&):
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	subl	$0x48,%esp
00001726	calll	0x0000172b
0000172b	popl	%edx
0000172c	xorb	%al,%al
0000172e	movl	0x08(%ebp),%ecx
00001731	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%ecx)
00001735	jne	0x000017e5
0000173b	movl	0x0c(%ebp),%eax
0000173e	testb	$0x01,0x15(%ecx)
00001742	je	0x000017cf
00001748	movl	%eax,0x08(%esp)
0000174c	leal	0x1728d-0x172b(%edx),%edx
00001752	movl	%edx,0x04(%esp)
00001756	movl	%ecx,(%esp)
00001759	leal	0x3c(%eax),%ecx
0000175c	movl	%ecx,0x44(%esp)
00001760	leal	0x38(%eax),%ecx
00001763	movl	%ecx,Serialize(CUtlBuffer&, bool const&)(%esp)
00001767	leal	0x34(%eax),%ecx
0000176a	movl	%ecx,0x3c(%esp)
0000176e	leal	0x30(%eax),%ecx
00001771	movl	%ecx,0x38(%esp)
00001775	leal	0x2c(%eax),%ecx
00001778	movl	%ecx,0x34(%esp)
0000177c	leal	0x28(%eax),%ecx
0000177f	movl	%ecx,0x30(%esp)
00001783	leal	0x24(%eax),%ecx
00001786	movl	%ecx,0x2c(%esp)
0000178a	leal	SetSerializationArrayDelimiter(char const*)(%eax),%ecx
0000178d	movl	%ecx,0x28(%esp)
00001791	leal	0x1c(%eax),%ecx
00001794	movl	%ecx,0x24(%esp)
00001798	leal	0x18(%eax),%ecx
0000179b	movl	%ecx,SetSerializationArrayDelimiter(char const*)(%esp)
0000179f	leal	0x14(%eax),%ecx
000017a2	movl	%ecx,0x1c(%esp)
000017a6	leal	0x10(%eax),%ecx
000017a9	movl	%ecx,0x18(%esp)
000017ad	leal	0x0c(%eax),%ecx
000017b0	movl	%ecx,0x14(%esp)
000017b4	leal	0x08(%eax),%ecx
000017b7	movl	%ecx,0x10(%esp)
000017bb	addl	$0x04,%eax
000017be	movl	%eax,0x0c(%esp)
000017c2	calll	CUtlBuffer::Scanf(char const*, ...)
000017c7	cmpl	$0x10,%eax
000017ca	sete	%al
000017cd	jmp	0x000017e5
000017cf	movl	%eax,0x04(%esp)
000017d3	movl	%ecx,(%esp)
000017d6	movl	Serialize(CUtlBuffer&, bool const&),0x08(%esp)
000017de	calll	CUtlBuffer::Get(void*, int)
000017e3	movb	$0x01,%al
000017e5	movzbl	%al,%eax
000017e8	addl	$0x48,%esp
000017eb	popl	%ebp
000017ec	ret
000017ed	nopl	(%eax)
Serialize(CUtlBuffer&, Color const&):
000017f0	pushl	%ebp
000017f1	movl	%esp,%ebp
000017f3	pushl	%ebx
000017f4	pushl	%edi
000017f5	pushl	%esi
000017f6	subl	$0x1c,%esp
000017f9	calll	0x000017fe
000017fe	popl	%edi
000017ff	movl	0x0c(%ebp),%ecx
00001802	movb	(%ecx),%bl
00001804	movl	0x08(%ebp),%esi
00001807	testb	$0x01,0x15(%esi)
0000180b	je	0x00001839
0000180d	movzbl	%bl,%eax
00001810	movl	%ecx,%ebx
00001812	movzbl	0x01(%ebx),%ecx
00001816	movzbl	0x02(%ebx),%edx
0000181a	movzbl	0x03(%ebx),%ebx
0000181e	movl	%ebx,0x14(%esp)
00001822	movl	%edx,0x10(%esp)
00001826	movl	%ecx,0x0c(%esp)
0000182a	movl	%eax,0x08(%esp)
0000182e	leal	0x172bd-0x17fe(%edi),%eax
00001834	jmp	0x0000194a
00001839	movl	%esi,(%esp)
0000183c	movl	$0x00000001,0x04(%esp)
00001844	calll	CUtlBuffer::CheckPut(int)
00001849	cmpb	$0x01,%al
0000184b	jne	0x00001863
0000184d	movl	(%esi),%eax
0000184f	movl	0x10(%esi),%ecx
00001852	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
00001855	movb	%bl,(%eax,%ecx)
00001858	incl	0x10(%esi)
0000185b	movl	%esi,(%esp)
0000185e	calll	CUtlBuffer::AddNullTermination()
00001863	movl	0x0c(%ebp),%eax
00001866	movb	0x01(%eax),%bl
00001869	testb	$0x01,0x15(%esi)
0000186d	jne	0x0000189b
0000186f	movl	%esi,(%esp)
00001872	movl	$0x00000001,0x04(%esp)
0000187a	calll	CUtlBuffer::CheckPut(int)
0000187f	cmpb	$0x01,%al
00001881	jne	0x000018b4
00001883	movl	(%esi),%eax
00001885	movl	0x10(%esi),%ecx
00001888	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
0000188b	movb	%bl,(%eax,%ecx)
0000188e	incl	0x10(%esi)
00001891	movl	%esi,(%esp)
00001894	calll	CUtlBuffer::AddNullTermination()
00001899	jmp	0x000018b4
0000189b	movzbl	%bl,%eax
0000189e	movl	%eax,0x08(%esp)
000018a2	leal	0x172c9-0x17fe(%edi),%eax
000018a8	movl	%eax,0x04(%esp)
000018ac	movl	%esi,(%esp)
000018af	calll	CUtlBuffer::Printf(char const*, ...)
000018b4	movl	0x0c(%ebp),%eax
000018b7	movb	0x02(%eax),%bl
000018ba	testb	$0x01,0x15(%esi)
000018be	jne	0x000018ec
000018c0	movl	%esi,(%esp)
000018c3	movl	$0x00000001,0x04(%esp)
000018cb	calll	CUtlBuffer::CheckPut(int)
000018d0	cmpb	$0x01,%al
000018d2	jne	0x00001905
000018d4	movl	(%esi),%eax
000018d6	movl	0x10(%esi),%ecx
000018d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
000018dc	movb	%bl,(%eax,%ecx)
000018df	incl	0x10(%esi)
000018e2	movl	%esi,(%esp)
000018e5	calll	CUtlBuffer::AddNullTermination()
000018ea	jmp	0x00001905
000018ec	movzbl	%bl,%eax
000018ef	movl	%eax,0x08(%esp)
000018f3	leal	0x172c9-0x17fe(%edi),%eax
000018f9	movl	%eax,0x04(%esp)
000018fd	movl	%esi,(%esp)
00001900	calll	CUtlBuffer::Printf(char const*, ...)
00001905	movl	0x0c(%ebp),%eax
00001908	movb	0x03(%eax),%bl
0000190b	testb	$0x01,0x15(%esi)
0000190f	jne	0x0000193d
00001911	movl	%esi,(%esp)
00001914	movl	$0x00000001,0x04(%esp)
0000191c	calll	CUtlBuffer::CheckPut(int)
00001921	cmpb	$0x01,%al
00001923	jne	0x00001956
00001925	movl	(%esi),%eax
00001927	movl	0x10(%esi),%ecx
0000192a	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
0000192d	movb	%bl,(%eax,%ecx)
00001930	incl	0x10(%esi)
00001933	movl	%esi,(%esp)
00001936	calll	CUtlBuffer::AddNullTermination()
0000193b	jmp	0x00001956
0000193d	movzbl	%bl,%eax
00001940	movl	%eax,0x08(%esp)
00001944	leal	0x172c9-0x17fe(%edi),%eax
0000194a	movl	%eax,0x04(%esp)
0000194e	movl	%esi,(%esp)
00001951	calll	CUtlBuffer::Printf(char const*, ...)
00001956	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000195a	sete	%al
0000195d	movzbl	%al,%eax
00001960	addl	$0x1c,%esp
00001963	popl	%esi
00001964	popl	%edi
00001965	popl	%ebx
00001966	popl	%ebp
00001967	ret
00001968	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, Color&):
00001970	pushl	%ebp
00001971	movl	%esp,%ebp
00001973	pushl	%ebx
00001974	pushl	%edi
00001975	pushl	%esi
00001976	subl	$0x2c,%esp
00001979	calll	0x0000197e
0000197e	popl	%ebx
0000197f	movl	0x0c(%ebp),%edi
00001982	movl	0x08(%ebp),%esi
00001985	testb	$0x01,0x15(%esi)
00001989	je	0x000019fc
0000198b	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001992	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00001999	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
000019a0	movl	$0x000000ff,0xe0(%ebp)
000019a7	leal	0xe0(%ebp),%eax
000019aa	movl	%eax,0x14(%esp)
000019ae	leal	0xe4(%ebp),%eax
000019b1	movl	%eax,0x10(%esp)
000019b5	leal	0xe8(%ebp),%eax
000019b8	movl	%eax,0x0c(%esp)
000019bc	leal	0xec(%ebp),%eax
000019bf	movl	%eax,0x08(%esp)
000019c3	leal	0x172bd-0x197e(%ebx),%eax
000019c9	movl	%eax,0x04(%esp)
000019cd	movl	%esi,(%esp)
000019d0	calll	CUtlBuffer::Scanf(char const*, ...)
000019d5	movb	0xe0(%ebp),%cl
000019d8	movb	0xe4(%ebp),%dl
000019db	movb	0xe8(%ebp),%ch
000019de	movb	0xec(%ebp),%dh
000019e1	movb	%dh,(%edi)
000019e3	movb	%ch,0x01(%edi)
000019e6	movb	%dl,0x02(%edi)
000019e9	movb	%cl,0x03(%edi)
000019ec	xorb	%cl,%cl
000019ee	cmpl	$0x04,%eax
000019f1	je	0x00001b3f
000019f7	jmp	0x00001b46
000019fc	movl	%esi,(%esp)
000019ff	movl	$0x00000001,0x04(%esp)
00001a07	calll	CUtlBuffer::CheckGet(int)
00001a0c	cmpb	$0x01,%al
00001a0e	jne	0x00001a26
00001a10	movl	(%esi),%eax
00001a12	movl	0x0c(%esi),%ecx
00001a15	movl	%ecx,%edx
00001a17	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001a1a	movb	(%eax,%edx),%al
00001a1d	movb	%al,0xf2(%ebp)
00001a20	incl	%ecx
00001a21	movl	%ecx,0x0c(%esi)
00001a24	jmp	0x00001a2c
00001a26	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001a2a	xorb	%al,%al
00001a2c	movb	%al,(%edi)
00001a2e	testb	$0x01,0x15(%esi)
00001a32	jne	0x00001a66
00001a34	movl	%esi,(%esp)
00001a37	movl	$0x00000001,0x04(%esp)
00001a3f	calll	CUtlBuffer::CheckGet(int)
00001a44	cmpb	$0x01,%al
00001a46	jne	0x00001a5e
00001a48	movl	(%esi),%eax
00001a4a	movl	0x0c(%esi),%ecx
00001a4d	movl	%ecx,%edx
00001a4f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001a52	movb	(%eax,%edx),%al
00001a55	movb	%al,0xf3(%ebp)
00001a58	incl	%ecx
00001a59	movl	%ecx,0x0c(%esi)
00001a5c	jmp	0x00001a86
00001a5e	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001a62	xorb	%al,%al
00001a64	jmp	0x00001a86
00001a66	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001a6a	leal	0xf3(%ebp),%eax
00001a6d	movl	%eax,0x08(%esp)
00001a71	leal	0x172c9-0x197e(%ebx),%eax
00001a77	movl	%eax,0x04(%esp)
00001a7b	movl	%esi,(%esp)
00001a7e	calll	CUtlBuffer::Scanf(char const*, ...)
00001a83	movb	0xf3(%ebp),%al
00001a86	movb	%al,0x01(%edi)
00001a89	testb	$0x01,0x15(%esi)
00001a8d	jne	0x00001ac1
00001a8f	movl	%esi,(%esp)
00001a92	movl	$0x00000001,0x04(%esp)
00001a9a	calll	CUtlBuffer::CheckGet(int)
00001a9f	cmpb	$0x01,%al
00001aa1	jne	0x00001ab9
00001aa3	movl	(%esi),%eax
00001aa5	movl	0x0c(%esi),%ecx
00001aa8	movl	%ecx,%edx
00001aaa	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001aad	movb	(%eax,%edx),%al
00001ab0	movb	%al,0xf1(%ebp)
00001ab3	incl	%ecx
00001ab4	movl	%ecx,0x0c(%esi)
00001ab7	jmp	0x00001ae1
00001ab9	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001abd	xorb	%al,%al
00001abf	jmp	0x00001ae1
00001ac1	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001ac5	leal	0xf1(%ebp),%eax
00001ac8	movl	%eax,0x08(%esp)
00001acc	leal	0x172c9-0x197e(%ebx),%eax
00001ad2	movl	%eax,0x04(%esp)
00001ad6	movl	%esi,(%esp)
00001ad9	calll	CUtlBuffer::Scanf(char const*, ...)
00001ade	movb	0xf1(%ebp),%al
00001ae1	movb	%al,0x02(%edi)
00001ae4	testb	$0x01,0x15(%esi)
00001ae8	jne	0x00001b1c
00001aea	movl	%esi,(%esp)
00001aed	movl	$0x00000001,0x04(%esp)
00001af5	calll	CUtlBuffer::CheckGet(int)
00001afa	cmpb	$0x01,%al
00001afc	jne	0x00001b14
00001afe	movl	(%esi),%eax
00001b00	movl	0x0c(%esi),%ecx
00001b03	movl	%ecx,%edx
00001b05	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001b08	movb	(%eax,%edx),%al
00001b0b	movb	%al,0xf0(%ebp)
00001b0e	incl	%ecx
00001b0f	movl	%ecx,0x0c(%esi)
00001b12	jmp	0x00001b3c
00001b14	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001b18	xorb	%al,%al
00001b1a	jmp	0x00001b3c
00001b1c	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001b20	leal	0xf0(%ebp),%eax
00001b23	movl	%eax,0x08(%esp)
00001b27	leal	0x172c9-0x197e(%ebx),%eax
00001b2d	movl	%eax,0x04(%esp)
00001b31	movl	%esi,(%esp)
00001b34	calll	CUtlBuffer::Scanf(char const*, ...)
00001b39	movb	0xf0(%ebp),%al
00001b3c	movb	%al,0x03(%edi)
00001b3f	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001b43	sete	%cl
00001b46	movzbl	%cl,%eax
00001b49	addl	$0x2c,%esp
00001b4c	popl	%esi
00001b4d	popl	%edi
00001b4e	popl	%ebx
00001b4f	popl	%ebp
00001b50	ret
00001b51	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, CUtlBinaryBlock const&):
00001b60	pushl	%ebp
00001b61	movl	%esp,%ebp
00001b63	pushl	%ebx
00001b64	pushl	%edi
00001b65	pushl	%esi
00001b66	subl	$0x1c,%esp
00001b69	movl	0x0c(%ebp),%eax
00001b6c	movl	0x0c(%eax),%esi
00001b6f	movl	%esi,0xf0(%ebp)
00001b72	movl	0x08(%ebp),%edi
00001b75	testb	$0x01,0x15(%edi)
00001b79	je	0x00001c21
00001b7f	testl	%esi,%esi
00001b81	jle	0x00001c0f
00001b87	xorl	%esi,%esi
00001b89	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
00001b90	movl	%esi,%eax
00001b92	movl	$0x66666667,%ecx
00001b97	imull	%ecx
00001b99	movl	%edx,%eax
00001b9b	shrl	$0x1f,%eax
00001b9e	sarl	$0x04,%edx
00001ba1	addl	%eax,%edx
00001ba3	imull	$0x28,%edx,%eax
00001ba6	movl	%esi,%ecx
00001ba8	subl	%eax,%ecx
00001baa	jne	0x00001bbc
00001bac	movl	%edi,(%esp)
00001baf	movl	$0x0000000a,0x04(%esp)
00001bb7	calll	CUtlBuffer::PutChar(char)
00001bbc	movl	0x0c(%ebp),%eax
00001bbf	movl	(%eax),%eax
00001bc1	movb	(%eax,%esi),%al
00001bc4	movl	%edi,(%esp)
00001bc7	movb	%al,%cl
00001bc9	shrb	$0x04,%cl
00001bcc	movb	%cl,%dl
00001bce	orb	$0x30,%dl
00001bd1	addb	$0x37,%cl
00001bd4	cmpb	Unserialize(CUtlBuffer&, bool&),%al
00001bd6	jb	0x00001bda
00001bd8	movb	%cl,%dl
00001bda	movsbl	%dl,%ecx
00001bdd	movl	%ecx,0x04(%esp)
00001be1	andb	$0x0f,%al
00001be3	movb	%al,%cl
00001be5	orb	$0x30,%cl
00001be8	movb	%al,%dl
00001bea	addb	$0x37,%dl
00001bed	cmpb	$0x0a,%al
00001bef	jb	0x00001bf3
00001bf1	movb	%dl,%cl
00001bf3	movsbl	%cl,%ebx
00001bf6	calll	CUtlBuffer::PutChar(char)
00001bfb	movl	%ebx,0x04(%esp)
00001bff	movl	%edi,(%esp)
00001c02	calll	CUtlBuffer::PutChar(char)
00001c07	incl	%esi
00001c08	movl	0xf0(%ebp),%eax
00001c0b	cmpl	%esi,%eax
00001c0d	jne	0x00001b90
00001c0f	movl	%edi,(%esp)
00001c12	movl	$0x0000000a,0x04(%esp)
00001c1a	calll	CUtlBuffer::PutChar(char)
00001c1f	jmp	0x00001c76
00001c21	movl	%edi,(%esp)
00001c24	movl	$0x00000004,0x04(%esp)
00001c2c	calll	CUtlBuffer::CheckPut(int)
00001c31	cmpb	$0x01,%al
00001c33	jne	0x00001c5d
00001c35	movl	0x10(%edi),%eax
00001c38	subl	SetSerializationArrayDelimiter(char const*)(%edi),%eax
00001c3b	addl	(%edi),%eax
00001c3d	testb	$0x01,0x34(%edi)
00001c41	jne	0x00001c47
00001c43	movl	%esi,(%eax)
00001c45	jmp	0x00001c51
00001c47	testl	%eax,%eax
00001c49	je	0x00001c51
00001c4b	movl	%esi,%ecx
00001c4d	bswap	%ecx
00001c4f	movl	%ecx,(%eax)
00001c51	addl	$0x04,0x10(%edi)
00001c55	movl	%edi,(%esp)
00001c58	calll	CUtlBuffer::AddNullTermination()
00001c5d	testl	%esi,%esi
00001c5f	je	0x00001c76
00001c61	movl	0x0c(%ebp),%eax
00001c64	movl	(%eax),%eax
00001c66	movl	%esi,0x08(%esp)
00001c6a	movl	%eax,0x04(%esp)
00001c6e	movl	%edi,(%esp)
00001c71	calll	CUtlBuffer::Put(void const*, int)
00001c76	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%edi)
00001c7a	sete	%al
00001c7d	movzbl	%al,%eax
00001c80	addl	$0x1c,%esp
00001c83	popl	%esi
00001c84	popl	%edi
00001c85	popl	%ebx
00001c86	popl	%ebp
00001c87	ret
00001c88	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, CUtlBinaryBlock&):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	pushl	%ebx
00001c94	pushl	%edi
00001c95	pushl	%esi
00001c96	subl	$0x2c,%esp
00001c99	calll	0x00001c9e
00001c9e	popl	%eax
00001c9f	movl	%eax,0xe4(%ebp)
00001ca2	movl	0x0c(%ebp),%ebx
00001ca5	movl	0x08(%ebp),%esi
00001ca8	testb	$0x01,0x15(%esi)
00001cac	jne	0x00001d63
00001cb2	movl	%esi,(%esp)
00001cb5	movl	$0x00000004,0x04(%esp)
00001cbd	calll	CUtlBuffer::CheckGet(int)
00001cc2	cmpb	$0x01,%al
00001cc4	jne	0x00001d0b
00001cc6	movl	0x0c(%esi),%eax
00001cc9	movl	%eax,%edx
00001ccb	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001cce	addl	(%esi),%edx
00001cd0	testb	$0x01,0x34(%esi)
00001cd4	jne	0x00001cda
00001cd6	movl	(%edx),%edi
00001cd8	jmp	0x00001d00
00001cda	leal	0xec(%ebp),%ecx
00001cdd	testl	%edx,%edx
00001cdf	cmovnel	%edx,%ecx
00001ce2	movzbl	0x03(%ecx),%edx
00001ce6	movzbl	0x02(%ecx),%edi
00001cea	shll	$0x08,%edi
00001ced	orl	%edx,%edi
00001cef	movzbl	0x01(%ecx),%edx
00001cf3	shll	$0x10,%edx
00001cf6	orl	%edi,%edx
00001cf8	movzbl	(%ecx),%edi
00001cfb	shll	$0x18,%edi
00001cfe	orl	%edx,%edi
00001d00	movl	%edi,0xec(%ebp)
00001d03	addl	$0x04,%eax
00001d06	movl	%eax,0x0c(%esi)
00001d09	jmp	0x00001d14
00001d0b	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001d12	xorl	%edi,%edi
00001d14	movl	%edi,0x04(%esp)
00001d18	movl	%ebx,(%esp)
00001d1b	calll	CUtlBinaryBlock::SetLength(int)
00001d20	movl	0x0c(%ebx),%ecx
00001d23	xorl	%eax,%eax
00001d25	testl	%ecx,%ecx
00001d27	je	0x00001d3e
00001d29	movl	(%ebx),%eax
00001d2b	movl	%ecx,0x08(%esp)
00001d2f	movl	%eax,0x04(%esp)
00001d33	movl	%esi,(%esp)
00001d36	calll	CUtlBuffer::Get(void*, int)
00001d3b	movl	0x0c(%ebx),%eax
00001d3e	cmpl	%eax,%edi
00001d40	je	0x0000202c
00001d46	subl	%eax,%edi
00001d48	movl	%edi,0x08(%esp)
00001d4c	movl	%esi,(%esp)
00001d4f	movl	$0x00000001,0x04(%esp)
00001d57	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00001d5c	xorb	%cl,%cl
00001d5e	jmp	0x00002033
00001d63	movl	0x0c(%esi),%eax
00001d66	movl	%eax,0xdc(%ebp)
00001d69	movl	%esi,(%esp)
00001d6c	calll	CUtlBuffer::EatWhiteSpace()
00001d71	xorl	%edi,%edi
00001d73	jmp	0x00001d89
00001d75	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
00001d80	movl	%esi,(%esp)
00001d83	calll	CUtlBuffer::EatWhiteSpace()
00001d88	incl	%edi
00001d89	movl	0x0c(%esi),%eax
00001d8c	movl	%eax,0xe0(%ebp)
00001d8f	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001d93	jne	0x00001e9d
00001d99	testb	$0x01,0x15(%esi)
00001d9d	jne	0x00001dd1
00001d9f	movl	%esi,(%esp)
00001da2	movl	$0x00000001,0x04(%esp)
00001daa	calll	CUtlBuffer::CheckGet(int)
00001daf	cmpb	$0x01,%al
00001db1	jne	0x00001dc9
00001db3	movl	(%esi),%ecx
00001db5	movl	0x0c(%esi),%eax
00001db8	movl	%eax,%edx
00001dba	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001dbd	movb	(%ecx,%edx),%bl
00001dc0	movb	%bl,0xf3(%ebp)
00001dc3	incl	%eax
00001dc4	movl	%eax,0x0c(%esi)
00001dc7	jmp	0x00001df4
00001dc9	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001dcd	xorb	%bl,%bl
00001dcf	jmp	0x00001df4
00001dd1	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001dd5	leal	0xf3(%ebp),%eax
00001dd8	movl	%eax,0x08(%esp)
00001ddc	movl	0xe4(%ebp),%eax
00001ddf	leal	0x172d2-0x1c9e(%eax),%eax
00001de5	movl	%eax,0x04(%esp)
00001de9	movl	%esi,(%esp)
00001dec	calll	CUtlBuffer::Scanf(char const*, ...)
00001df1	movb	0xf3(%ebp),%bl
00001df4	testb	$0x01,0x15(%esi)
00001df8	jne	0x00001e2c
00001dfa	movl	%esi,(%esp)
00001dfd	movl	$0x00000001,0x04(%esp)
00001e05	calll	CUtlBuffer::CheckGet(int)
00001e0a	cmpb	$0x01,%al
00001e0c	jne	0x00001e24
00001e0e	movl	(%esi),%eax
00001e10	movl	0x0c(%esi),%ecx
00001e13	movl	%ecx,%edx
00001e15	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001e18	movb	(%eax,%edx),%al
00001e1b	movb	%al,0xf2(%ebp)
00001e1e	incl	%ecx
00001e1f	movl	%ecx,0x0c(%esi)
00001e22	jmp	0x00001e4f
00001e24	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001e28	xorb	%al,%al
00001e2a	jmp	0x00001e4f
00001e2c	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001e30	leal	0xf2(%ebp),%eax
00001e33	movl	%eax,0x08(%esp)
00001e37	movl	0xe4(%ebp),%eax
00001e3a	leal	0x172d2-0x1c9e(%eax),%eax
00001e40	movl	%eax,0x04(%esp)
00001e44	movl	%esi,(%esp)
00001e47	calll	CUtlBuffer::Scanf(char const*, ...)
00001e4c	movb	0xf2(%ebp),%al
00001e4f	movb	%bl,%dl
00001e51	addb	$0xbf,%dl
00001e54	movb	$0x01,%cl
00001e56	cmpb	$0x06,%dl
00001e59	movb	$0x01,%dl
00001e5b	jb	0x00001e6a
00001e5d	xorb	%dl,%dl
00001e5f	cmpb	$0x61,%bl
00001e62	jl	0x00001e6a
00001e64	cmpb	$0x67,%bl
00001e67	setl	%dl
00001e6a	movb	%al,%ah
00001e6c	addb	$0xbf,%ah
00001e6f	cmpb	$0x06,%ah
00001e72	jb	0x00001e7f
00001e74	xorb	%cl,%cl
00001e76	cmpb	$0x61,%al
00001e78	jl	0x00001e7f
00001e7a	cmpb	$0x67,%al
00001e7c	setl	%cl
00001e7f	addb	$0xd0,%al
00001e81	addb	$0xd0,%bl
00001e84	cmpb	$0x0a,%al
00001e86	setb	%al
00001e89	cmpb	$0x0a,%bl
00001e8c	setb	%ah
00001e8f	orb	%dl,%ah
00001e91	je	0x00001e9d
00001e93	orb	%cl,%al
00001e95	cmpb	$0x01,%al
00001e97	je	0x00001d80
00001e9d	movl	0xdc(%ebp),%eax
00001ea0	movl	%eax,0x08(%esp)
00001ea4	movl	%esi,(%esp)
00001ea7	movl	SetSerializationDelimiter(CUtlCharConversion*),0x04(%esp)
00001eaf	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00001eb4	xorb	%cl,%cl
00001eb6	testl	%edi,%edi
00001eb8	js	0x00002033
00001ebe	movl	%esi,(%esp)
00001ec1	calll	CUtlBuffer::EatWhiteSpace()
00001ec6	movl	%edi,0x04(%esp)
00001eca	movl	0x0c(%ebp),%eax
00001ecd	movl	%eax,(%esp)
00001ed0	calll	CUtlBinaryBlock::SetLength(int)
00001ed5	xorl	%edi,%edi
00001ed7	jmp	0x00001f19
00001ed9	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
00001ee0	addl	$0x9f,%edx
00001ee3	xorb	%cl,%cl
00001ee5	cmpl	$0x05,%edx
00001ee8	ja	0x00002033
00001eee	addb	$0xa9,%al
00001ef0	xorb	%cl,%cl
00001ef2	cmpb	$0xff,%bl
00001ef5	je	0x00002033
00001efb	cmpb	$0xff,%al
00001efd	je	0x00002033
00001f03	shlb	$0x04,%bl
00001f06	orb	%bl,%al
00001f08	movl	0x0c(%ebp),%ecx
00001f0b	movl	(%ecx),%ecx
00001f0d	movb	%al,(%ecx,%edi)
00001f10	movl	%esi,(%esp)
00001f13	incl	%edi
00001f14	calll	CUtlBuffer::EatWhiteSpace()
00001f19	movb	$0x01,%cl
00001f1b	movl	0xe0(%ebp),%eax
00001f1e	cmpl	%eax,0x0c(%esi)
00001f21	jge	0x00002033
00001f27	testb	$0x01,0x15(%esi)
00001f2b	jne	0x00001f5f
00001f2d	movl	%esi,(%esp)
00001f30	movl	$0x00000001,0x04(%esp)
00001f38	calll	CUtlBuffer::CheckGet(int)
00001f3d	cmpb	$0x01,%al
00001f3f	jne	0x00001f57
00001f41	movl	(%esi),%ecx
00001f43	movl	0x0c(%esi),%eax
00001f46	movl	%eax,%edx
00001f48	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001f4b	movb	(%ecx,%edx),%bl
00001f4e	movb	%bl,0xf1(%ebp)
00001f51	incl	%eax
00001f52	movl	%eax,0x0c(%esi)
00001f55	jmp	0x00001f82
00001f57	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001f5b	xorb	%bl,%bl
00001f5d	jmp	0x00001f82
00001f5f	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001f63	leal	0xf1(%ebp),%eax
00001f66	movl	%eax,0x08(%esp)
00001f6a	movl	0xe4(%ebp),%eax
00001f6d	leal	0x172d2-0x1c9e(%eax),%eax
00001f73	movl	%eax,0x04(%esp)
00001f77	movl	%esi,(%esp)
00001f7a	calll	CUtlBuffer::Scanf(char const*, ...)
00001f7f	movb	0xf1(%ebp),%bl
00001f82	testb	$0x01,0x15(%esi)
00001f86	jne	0x00001fba
00001f88	movl	%esi,(%esp)
00001f8b	movl	$0x00000001,0x04(%esp)
00001f93	calll	CUtlBuffer::CheckGet(int)
00001f98	cmpb	$0x01,%al
00001f9a	jne	0x00001fb2
00001f9c	movl	(%esi),%eax
00001f9e	movl	0x0c(%esi),%ecx
00001fa1	movl	%ecx,%edx
00001fa3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001fa6	movb	(%eax,%edx),%al
00001fa9	movb	%al,0xeb(%ebp)
00001fac	incl	%ecx
00001fad	movl	%ecx,0x0c(%esi)
00001fb0	jmp	0x00001fdd
00001fb2	movb	SetSerializationDelimiter(CUtlCharConversion*),0xeb(%ebp)
00001fb6	xorb	%al,%al
00001fb8	jmp	0x00001fdd
00001fba	movb	SetSerializationDelimiter(CUtlCharConversion*),0xeb(%ebp)
00001fbe	leal	0xeb(%ebp),%eax
00001fc1	movl	%eax,0x08(%esp)
00001fc5	movl	0xe4(%ebp),%eax
00001fc8	leal	0x172d2-0x1c9e(%eax),%eax
00001fce	movl	%eax,0x04(%esp)
00001fd2	movl	%esi,(%esp)
00001fd5	calll	CUtlBuffer::Scanf(char const*, ...)
00001fda	movb	0xeb(%ebp),%al
00001fdd	movsbl	%bl,%ecx
00001fe0	leal	0xd0(%ecx),%edx
00001fe3	cmpl	$0x09,%edx
00001fe6	ja	0x00001fed
00001fe8	addb	$0xd0,%bl
00001feb	jmp	0x00002007
00001fed	leal	0xbf(%ecx),%edx
00001ff0	cmpl	$0x05,%edx
00001ff3	ja	0x00001ffa
00001ff5	addb	$0xc9,%bl
00001ff8	jmp	0x00002007
00001ffa	addb	$0xa9,%bl
00001ffd	addl	$0x9f,%ecx
00002000	cmpl	$0x06,%ecx
00002003	jb	0x00002007
00002005	movb	$0xff,%bl
00002007	movsbl	%al,%edx
0000200a	leal	0xd0(%edx),%ecx
0000200d	cmpl	$0x09,%ecx
00002010	ja	0x00002019
00002012	addb	$0xd0,%al
00002014	jmp	0x00001ef0
00002019	leal	0xbf(%edx),%ecx
0000201c	cmpl	$0x05,%ecx
0000201f	ja	0x00001ee0
00002025	addb	$0xc9,%al
00002027	jmp	0x00001ef0
0000202c	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00002030	sete	%cl
00002033	movzbl	%cl,%eax
00002036	addl	$0x2c,%esp
00002039	popl	%esi
0000203a	popl	%edi
0000203b	popl	%ebx
0000203c	popl	%ebp
0000203d	ret
0000203e	nop
Serialize(CUtlBuffer&, CUtlString const&):
00002040	pushl	%ebp
00002041	movl	%esp,%ebp
00002043	pushl	%esi
00002044	subl	$0x14,%esp
00002047	calll	0x0000204c
0000204c	popl	%eax
0000204d	movl	_s_pConv-0x204c(%eax),%esi
00002053	movl	0x0c(%ebp),%eax
00002056	movl	%eax,(%esp)
00002059	calll	CUtlString::Get() const
0000205e	movl	%eax,0x08(%esp)
00002062	movl	%esi,0x04(%esp)
00002066	movl	0x08(%ebp),%esi
00002069	movl	%esi,(%esp)
0000206c	calll	CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*)
00002071	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00002075	sete	%al
00002078	movzbl	%al,%eax
0000207b	addl	$0x14,%esp
0000207e	popl	%esi
0000207f	popl	%ebp
00002080	ret
00002081	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, CUtlString&):
00002090	pushl	%ebp
00002091	movl	%esp,%ebp
00002093	pushl	%ebx
00002094	pushl	%edi
00002095	pushl	%esi
00002096	subl	$0x1c,%esp
00002099	calll	0x0000209e
0000209e	popl	%ebx
0000209f	movl	_s_pConv-0x209e(%ebx),%eax
000020a5	movl	%eax,0x04(%esp)
000020a9	movl	0x08(%ebp),%eax
000020ac	movl	%eax,(%esp)
000020af	movl	$0x00000001,0x08(%esp)
000020b7	calll	CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
000020bc	movl	%eax,%esi
000020be	leal	0xff(%esi),%eax
000020c1	movl	%eax,0x04(%esp)
000020c5	movl	0x0c(%ebp),%edi
000020c8	movl	%edi,(%esp)
000020cb	calll	CUtlString::SetLength(int)
000020d0	movl	_s_pConv-0x209e(%ebx),%ebx
000020d6	movl	%edi,(%esp)
000020d9	calll	CUtlString::Get()
000020de	movl	%esi,0x0c(%esp)
000020e2	movl	%eax,0x08(%esp)
000020e6	movl	%ebx,0x04(%esp)
000020ea	movl	0x08(%ebp),%esi
000020ed	movl	%esi,(%esp)
000020f0	calll	CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
000020f5	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000020f9	sete	%al
000020fc	movzbl	%al,%eax
000020ff	addl	$0x1c,%esp
00002102	popl	%esi
00002103	popl	%edi
00002104	popl	%ebx
00002105	popl	%ebp
00002106	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(utlstring.o):
(__TEXT,__text) section
CUtlBinaryBlock::CUtlBinaryBlock(int, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%esi
00000004	pushl	%eax
00000005	movl	0x08(%ebp),%esi
00000008	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000000e	movl	0x0c(%ebp),%eax
00000011	movl	%eax,0x08(%esi)
00000014	movl	0x10(%ebp),%eax
00000017	movl	%eax,0x04(%esi)
0000001a	testl	%eax,%eax
0000001c	je	0x00000028
0000001e	movl	%eax,(%esp)
00000021	calll	_malloc
00000026	movl	%eax,(%esi)
00000028	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
0000002f	addl	$0x04,%esp
00000032	popl	%esi
00000033	popl	%ebp
00000034	ret
00000035	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(int, int):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	pushl	%esi
00000044	pushl	%eax
00000045	movl	0x08(%ebp),%esi
00000048	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000004e	movl	0x0c(%ebp),%eax
00000051	movl	%eax,0x08(%esi)
00000054	movl	0x10(%ebp),%eax
00000057	movl	%eax,0x04(%esi)
0000005a	testl	%eax,%eax
0000005c	je	0x00000068
0000005e	movl	%eax,(%esp)
00000061	calll	_malloc
00000066	movl	%eax,(%esi)
00000068	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
0000006f	addl	$0x04,%esp
00000072	popl	%esi
00000073	popl	%ebp
00000074	ret
00000075	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int):
00000080	movl	0x08(%esp),%ecx
00000084	movl	0x04(%esp),%eax
00000088	movl	%ecx,(%eax)
0000008a	movl	0x0c(%esp),%ecx
0000008e	movl	%ecx,0x04(%eax)
00000091	movl	$0xffffffff,0x08(%eax)
00000098	movl	0x10(%esp),%ecx
0000009c	movl	%ecx,0x0c(%eax)
0000009f	ret
CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int):
000000a0	movl	0x08(%esp),%ecx
000000a4	movl	0x04(%esp),%eax
000000a8	movl	%ecx,(%eax)
000000aa	movl	0x0c(%esp),%ecx
000000ae	movl	%ecx,0x04(%eax)
000000b1	movl	$0xffffffff,0x08(%eax)
000000b8	movl	0x10(%esp),%ecx
000000bc	movl	%ecx,0x0c(%eax)
000000bf	ret
CUtlBinaryBlock::CUtlBinaryBlock(void const*, int):
000000c0	movl	0x08(%esp),%ecx
000000c4	movl	0x04(%esp),%eax
000000c8	movl	%ecx,(%eax)
000000ca	movl	0x0c(%esp),%ecx
000000ce	movl	%ecx,0x04(%eax)
000000d1	movl	$0xfffffffe,0x08(%eax)
000000d8	movl	%ecx,0x0c(%eax)
000000db	ret
000000dc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::CUtlBinaryBlock(void const*, int):
000000e0	movl	0x08(%esp),%ecx
000000e4	movl	0x04(%esp),%eax
000000e8	movl	%ecx,(%eax)
000000ea	movl	0x0c(%esp),%ecx
000000ee	movl	%ecx,0x04(%eax)
000000f1	movl	$0xfffffffe,0x08(%eax)
000000f8	movl	%ecx,0x0c(%eax)
000000fb	ret
000000fc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&):
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	pushl	%ebx
00000104	pushl	%edi
00000105	pushl	%esi
00000106	subl	$0x0c,%esp
00000109	movl	0x08(%ebp),%edi
0000010c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00000112	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
00000119	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
00000120	movl	0x0c(%ebp),%eax
00000123	movl	(%eax),%esi
00000125	testl	%esi,%esi
00000127	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
0000012c	cmovnel	0x0c(%eax),%ebx
00000130	movl	%ebx,0x0c(%edi)
00000133	testl	%ebx,%ebx
00000135	movl	%ebx,%eax
00000137	jle	0x00000154
00000139	movl	%ebx,0x04(%esp)
0000013d	movl	%edi,(%esp)
00000140	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000145	movl	0x04(%edi),%eax
00000148	cmpl	%ebx,%eax
0000014a	jge	0x00000151
0000014c	movl	%eax,0x0c(%edi)
0000014f	jmp	0x00000154
00000151	movl	0x0c(%edi),%eax
00000154	testl	%eax,%eax
00000156	je	0x00000189
00000158	addl	%esi,%ebx
0000015a	movl	(%edi),%ecx
0000015c	cmpl	%ebx,%ecx
0000015e	jae	0x00000167
00000160	leal	(%ecx,%eax),%edx
00000163	cmpl	%esi,%edx
00000165	ja	0x00000179
00000167	movl	%eax,0x08(%esp)
0000016b	movl	%esi,0x04(%esp)
0000016f	movl	%ecx,(%esp)
00000172	calll	_memcpy
00000177	jmp	0x00000189
00000179	movl	%eax,0x08(%esp)
0000017d	movl	%esi,0x04(%esp)
00000181	movl	%ecx,(%esp)
00000184	calll	_memmove
00000189	addl	$0x0c,%esp
0000018c	popl	%esi
0000018d	popl	%edi
0000018e	popl	%ebx
0000018f	popl	%ebp
00000190	ret
00000191	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&):
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	pushl	%ebx
000001a4	pushl	%edi
000001a5	pushl	%esi
000001a6	subl	$0x0c,%esp
000001a9	movl	0x08(%ebp),%edi
000001ac	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
000001b2	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
000001b9	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000001c0	movl	0x0c(%ebp),%eax
000001c3	movl	(%eax),%esi
000001c5	testl	%esi,%esi
000001c7	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
000001cc	cmovnel	0x0c(%eax),%ebx
000001d0	movl	%ebx,0x0c(%edi)
000001d3	testl	%ebx,%ebx
000001d5	movl	%ebx,%eax
000001d7	jle	0x000001f4
000001d9	movl	%ebx,0x04(%esp)
000001dd	movl	%edi,(%esp)
000001e0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000001e5	movl	0x04(%edi),%eax
000001e8	cmpl	%ebx,%eax
000001ea	jge	0x000001f1
000001ec	movl	%eax,0x0c(%edi)
000001ef	jmp	0x000001f4
000001f1	movl	0x0c(%edi),%eax
000001f4	testl	%eax,%eax
000001f6	je	0x00000229
000001f8	addl	%esi,%ebx
000001fa	movl	(%edi),%ecx
000001fc	cmpl	%ebx,%ecx
000001fe	jae	0x00000207
00000200	leal	(%ecx,%eax),%edx
00000203	cmpl	%esi,%edx
00000205	ja	0x00000219
00000207	movl	%eax,0x08(%esp)
0000020b	movl	%esi,0x04(%esp)
0000020f	movl	%ecx,(%esp)
00000212	calll	_memcpy
00000217	jmp	0x00000229
00000219	movl	%eax,0x08(%esp)
0000021d	movl	%esi,0x04(%esp)
00000221	movl	%ecx,(%esp)
00000224	calll	_memmove
00000229	addl	$0x0c,%esp
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	popl	%ebp
00000230	ret
00000231	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::Set(void const*, int):
00000240	pushl	%ebp
00000241	movl	%esp,%ebp
00000243	pushl	%ebx
00000244	pushl	%edi
00000245	pushl	%esi
00000246	subl	$0x0c,%esp
00000249	movl	0x0c(%ebp),%esi
0000024c	testl	%esi,%esi
0000024e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%edi
00000253	cmovnel	0x10(%ebp),%edi
00000257	movl	0x08(%ebp),%ebx
0000025a	movl	%edi,0x0c(%ebx)
0000025d	movl	0x04(%ebx),%ecx
00000260	cmpl	%edi,%ecx
00000262	movl	%edi,%eax
00000264	jge	0x00000285
00000266	movl	%edi,%eax
00000268	subl	%ecx,%eax
0000026a	movl	%eax,0x04(%esp)
0000026e	movl	%ebx,(%esp)
00000271	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000276	movl	0x04(%ebx),%eax
00000279	cmpl	%edi,%eax
0000027b	jge	0x00000282
0000027d	movl	%eax,0x0c(%ebx)
00000280	jmp	0x00000285
00000282	movl	0x0c(%ebx),%eax
00000285	testl	%eax,%eax
00000287	je	0x000002ba
00000289	addl	%esi,%edi
0000028b	movl	(%ebx),%ecx
0000028d	cmpl	%edi,%ecx
0000028f	jae	0x00000298
00000291	leal	(%ecx,%eax),%edx
00000294	cmpl	%esi,%edx
00000296	ja	0x000002aa
00000298	movl	%eax,0x08(%esp)
0000029c	movl	%esi,0x04(%esp)
000002a0	movl	%ecx,(%esp)
000002a3	calll	_memcpy
000002a8	jmp	0x000002ba
000002aa	movl	%eax,0x08(%esp)
000002ae	movl	%esi,0x04(%esp)
000002b2	movl	%ecx,(%esp)
000002b5	calll	_memmove
000002ba	addl	$0x0c,%esp
000002bd	popl	%esi
000002be	popl	%edi
000002bf	popl	%ebx
000002c0	popl	%ebp
000002c1	ret
000002c2	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::Get(void*, int) const:
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	subl	$0x18,%esp
000002d6	movl	0x08(%ebp),%ecx
000002d9	movl	0x0c(%ecx),%edx
000002dc	movl	0x10(%ebp),%eax
000002df	cmpl	%eax,%edx
000002e1	cmovll	%edx,%eax
000002e4	testl	%eax,%eax
000002e6	jle	0x000002fd
000002e8	movl	0x0c(%ebp),%edx
000002eb	movl	(%ecx),%ecx
000002ed	movl	%eax,0x08(%esp)
000002f1	movl	%ecx,0x04(%esp)
000002f5	movl	%edx,(%esp)
000002f8	calll	_memcpy
000002fd	addl	$0x18,%esp
00000300	popl	%ebp
00000301	ret
00000302	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::SetLength(int):
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	pushl	%edi
00000314	pushl	%esi
00000315	subl	$0x10,%esp
00000318	movl	0x0c(%ebp),%edi
0000031b	movl	0x08(%ebp),%esi
0000031e	movl	%edi,0x0c(%esi)
00000321	movl	0x04(%esi),%eax
00000324	cmpl	%edi,%eax
00000326	jge	0x00000342
00000328	movl	%edi,%ecx
0000032a	subl	%eax,%ecx
0000032c	movl	%ecx,0x04(%esp)
00000330	movl	%esi,(%esp)
00000333	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000338	movl	0x04(%esi),%eax
0000033b	cmpl	%edi,%eax
0000033d	jge	0x00000342
0000033f	movl	%eax,0x0c(%esi)
00000342	addl	$0x10,%esp
00000345	popl	%esi
00000346	popl	%edi
00000347	popl	%ebp
00000348	ret
00000349	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::operator=(CUtlBinaryBlock const&):
00000350	pushl	%ebp
00000351	movl	%esp,%ebp
00000353	pushl	%ebx
00000354	pushl	%edi
00000355	pushl	%esi
00000356	subl	$0x0c,%esp
00000359	movl	0x0c(%ebp),%eax
0000035c	movl	(%eax),%edi
0000035e	testl	%edi,%edi
00000360	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
00000365	cmovnel	0x0c(%eax),%ebx
00000369	movl	0x08(%ebp),%esi
0000036c	movl	%ebx,0x0c(%esi)
0000036f	movl	0x04(%esi),%ecx
00000372	cmpl	%ebx,%ecx
00000374	movl	%ebx,%eax
00000376	jge	0x00000397
00000378	movl	%ebx,%eax
0000037a	subl	%ecx,%eax
0000037c	movl	%eax,0x04(%esp)
00000380	movl	%esi,(%esp)
00000383	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000388	movl	0x04(%esi),%eax
0000038b	cmpl	%ebx,%eax
0000038d	jge	0x00000394
0000038f	movl	%eax,0x0c(%esi)
00000392	jmp	0x00000397
00000394	movl	0x0c(%esi),%eax
00000397	testl	%eax,%eax
00000399	je	0x000003cc
0000039b	addl	%edi,%ebx
0000039d	movl	(%esi),%ecx
0000039f	cmpl	%ebx,%ecx
000003a1	jae	0x000003aa
000003a3	leal	(%ecx,%eax),%edx
000003a6	cmpl	%edi,%edx
000003a8	ja	0x000003bc
000003aa	movl	%eax,0x08(%esp)
000003ae	movl	%edi,0x04(%esp)
000003b2	movl	%ecx,(%esp)
000003b5	calll	_memcpy
000003ba	jmp	0x000003cc
000003bc	movl	%eax,0x08(%esp)
000003c0	movl	%edi,0x04(%esp)
000003c4	movl	%ecx,(%esp)
000003c7	calll	_memmove
000003cc	movl	%esi,%eax
000003ce	addl	$0x0c,%esp
000003d1	popl	%esi
000003d2	popl	%edi
000003d3	popl	%ebx
000003d4	popl	%ebp
000003d5	ret
000003d6	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::operator==(CUtlBinaryBlock const&) const:
000003e0	pushl	%ebp
000003e1	movl	%esp,%ebp
000003e3	pushl	%esi
000003e4	subl	$0x14,%esp
000003e7	movl	0x08(%ebp),%ecx
000003ea	movl	0x0c(%ecx),%eax
000003ed	xorb	%dl,%dl
000003ef	movl	0x0c(%ebp),%esi
000003f2	cmpl	%eax,0x0c(%esi)
000003f5	jne	0x00000410
000003f7	movl	(%esi),%edx
000003f9	movl	(%ecx),%ecx
000003fb	movl	%eax,0x08(%esp)
000003ff	movl	%ecx,0x04(%esp)
00000403	movl	%edx,(%esp)
00000406	calll	_memcmp
0000040b	testl	%eax,%eax
0000040d	sete	%dl
00000410	movzbl	%dl,%eax
00000413	addl	$0x14,%esp
00000416	popl	%esi
00000417	popl	%ebp
00000418	ret
00000419	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::CUtlString():
00000420	movl	0x04(%esp),%eax
00000424	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%eax)
0000042b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000431	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000438	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%eax)
0000043f	ret
CUtlString::CUtlString():
00000440	movl	0x04(%esp),%eax
00000444	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%eax)
0000044b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000451	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000458	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%eax)
0000045f	ret
CUtlString::CUtlString(char const*):
00000460	pushl	%ebp
00000461	movl	%esp,%ebp
00000463	pushl	%ebx
00000464	pushl	%edi
00000465	pushl	%esi
00000466	subl	$0x0c,%esp
00000469	movl	0x08(%ebp),%ebx
0000046c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000473	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
00000479	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000480	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00000487	movl	0x0c(%ebp),%edi
0000048a	testl	%edi,%edi
0000048c	jne	0x00000497
0000048e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000495	jmp	0x000004fb
00000497	movl	%edi,(%esp)
0000049a	calll	_strlen
0000049f	movl	%eax,%esi
000004a1	incl	%esi
000004a2	movl	%esi,0x0c(%ebx)
000004a5	testl	%esi,%esi
000004a7	movl	%esi,%eax
000004a9	jle	0x000004c6
000004ab	movl	%esi,0x04(%esp)
000004af	movl	%ebx,(%esp)
000004b2	calll	CUtlMemory<unsigned char, int>::Grow(int)
000004b7	movl	0x04(%ebx),%eax
000004ba	cmpl	%esi,%eax
000004bc	jge	0x000004c3
000004be	movl	%eax,0x0c(%ebx)
000004c1	jmp	0x000004c6
000004c3	movl	0x0c(%ebx),%eax
000004c6	testl	%eax,%eax
000004c8	je	0x000004fb
000004ca	addl	%edi,%esi
000004cc	movl	(%ebx),%ecx
000004ce	cmpl	%esi,%ecx
000004d0	jae	0x000004d9
000004d2	leal	(%ecx,%eax),%edx
000004d5	cmpl	%edi,%edx
000004d7	ja	0x000004eb
000004d9	movl	%eax,0x08(%esp)
000004dd	movl	%edi,0x04(%esp)
000004e1	movl	%ecx,(%esp)
000004e4	calll	_memcpy
000004e9	jmp	0x000004fb
000004eb	movl	%eax,0x08(%esp)
000004ef	movl	%edi,0x04(%esp)
000004f3	movl	%ecx,(%esp)
000004f6	calll	_memmove
000004fb	addl	$0x0c,%esp
000004fe	popl	%esi
000004ff	popl	%edi
00000500	popl	%ebx
00000501	popl	%ebp
00000502	ret
00000503	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(char const*):
00000510	pushl	%ebp
00000511	movl	%esp,%ebp
00000513	pushl	%ebx
00000514	pushl	%edi
00000515	pushl	%esi
00000516	subl	$0x0c,%esp
00000519	movl	0x08(%ebp),%ebx
0000051c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000523	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
00000529	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000530	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00000537	movl	0x0c(%ebp),%edi
0000053a	testl	%edi,%edi
0000053c	jne	0x00000547
0000053e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000545	jmp	0x000005ab
00000547	movl	%edi,(%esp)
0000054a	calll	_strlen
0000054f	movl	%eax,%esi
00000551	incl	%esi
00000552	movl	%esi,0x0c(%ebx)
00000555	testl	%esi,%esi
00000557	movl	%esi,%eax
00000559	jle	0x00000576
0000055b	movl	%esi,0x04(%esp)
0000055f	movl	%ebx,(%esp)
00000562	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000567	movl	0x04(%ebx),%eax
0000056a	cmpl	%esi,%eax
0000056c	jge	0x00000573
0000056e	movl	%eax,0x0c(%ebx)
00000571	jmp	0x00000576
00000573	movl	0x0c(%ebx),%eax
00000576	testl	%eax,%eax
00000578	je	0x000005ab
0000057a	addl	%edi,%esi
0000057c	movl	(%ebx),%ecx
0000057e	cmpl	%esi,%ecx
00000580	jae	0x00000589
00000582	leal	(%ecx,%eax),%edx
00000585	cmpl	%edi,%edx
00000587	ja	0x0000059b
00000589	movl	%eax,0x08(%esp)
0000058d	movl	%edi,0x04(%esp)
00000591	movl	%ecx,(%esp)
00000594	calll	_memcpy
00000599	jmp	0x000005ab
0000059b	movl	%eax,0x08(%esp)
0000059f	movl	%edi,0x04(%esp)
000005a3	movl	%ecx,(%esp)
000005a6	calll	_memmove
000005ab	addl	$0x0c,%esp
000005ae	popl	%esi
000005af	popl	%edi
000005b0	popl	%ebx
000005b1	popl	%ebp
000005b2	ret
000005b3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Set(char const*):
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%ebx
000005c4	pushl	%edi
000005c5	pushl	%esi
000005c6	subl	$0x0c,%esp
000005c9	movl	0x0c(%ebp),%edi
000005cc	testl	%edi,%edi
000005ce	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
000005d3	je	0x000005e0
000005d5	movl	%edi,(%esp)
000005d8	calll	_strlen
000005dd	movl	%eax,%esi
000005df	incl	%esi
000005e0	movl	0x08(%ebp),%ebx
000005e3	testl	%edi,%edi
000005e5	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%eax
000005ea	cmovel	%eax,%esi
000005ed	movl	%esi,0x0c(%ebx)
000005f0	movl	0x04(%ebx),%ecx
000005f3	cmpl	%esi,%ecx
000005f5	movl	%esi,%eax
000005f7	jge	0x00000618
000005f9	movl	%esi,%eax
000005fb	subl	%ecx,%eax
000005fd	movl	%eax,0x04(%esp)
00000601	movl	%ebx,(%esp)
00000604	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000609	movl	0x04(%ebx),%eax
0000060c	cmpl	%esi,%eax
0000060e	jge	0x00000615
00000610	movl	%eax,0x0c(%ebx)
00000613	jmp	0x00000618
00000615	movl	0x0c(%ebx),%eax
00000618	testl	%eax,%eax
0000061a	je	0x0000064d
0000061c	addl	%edi,%esi
0000061e	movl	(%ebx),%ecx
00000620	cmpl	%esi,%ecx
00000622	jae	0x0000062b
00000624	leal	(%ecx,%eax),%edx
00000627	cmpl	%edi,%edx
00000629	ja	0x0000063d
0000062b	movl	%eax,0x08(%esp)
0000062f	movl	%edi,0x04(%esp)
00000633	movl	%ecx,(%esp)
00000636	calll	_memcpy
0000063b	jmp	0x0000064d
0000063d	movl	%eax,0x08(%esp)
00000641	movl	%edi,0x04(%esp)
00000645	movl	%ecx,(%esp)
00000648	calll	_memmove
0000064d	addl	$0x0c,%esp
00000650	popl	%esi
00000651	popl	%edi
00000652	popl	%ebx
00000653	popl	%ebp
00000654	ret
00000655	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(CUtlString const&):
00000660	jmp	CUtlString::CUtlString(CUtlString const&)
00000665	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(CUtlString const&):
00000670	pushl	%ebp
00000671	movl	%esp,%ebp
00000673	pushl	%ebx
00000674	pushl	%edi
00000675	pushl	%esi
00000676	subl	$0x0c,%esp
00000679	calll	0x0000067e
0000067e	popl	%eax
0000067f	movl	0x08(%ebp),%ebx
00000682	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000689	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000068f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000696	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000069d	movl	0x0c(%ebp),%ecx
000006a0	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
000006a4	jne	0x000006d8
000006a6	leal	0xc978-0x67e(%eax),%edi
000006ac	movl	%edi,(%esp)
000006af	calll	_strlen
000006b4	movl	%eax,%esi
000006b6	incl	%esi
000006b7	movl	%esi,0x0c(%ebx)
000006ba	testl	%esi,%esi
000006bc	movl	%esi,%eax
000006be	jle	0x000006ea
000006c0	movl	%esi,0x04(%esp)
000006c4	movl	%ebx,(%esp)
000006c7	calll	CUtlMemory<unsigned char, int>::Grow(int)
000006cc	movl	0x04(%ebx),%eax
000006cf	cmpl	%esi,%eax
000006d1	jge	0x000006e7
000006d3	movl	%eax,0x0c(%ebx)
000006d6	jmp	0x000006ea
000006d8	movl	(%ecx),%edi
000006da	testl	%edi,%edi
000006dc	jne	0x000006ac
000006de	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
000006e5	jmp	0x0000071f
000006e7	movl	0x0c(%ebx),%eax
000006ea	testl	%eax,%eax
000006ec	je	0x0000071f
000006ee	addl	%edi,%esi
000006f0	movl	(%ebx),%ecx
000006f2	cmpl	%esi,%ecx
000006f4	jae	0x000006fd
000006f6	leal	(%ecx,%eax),%edx
000006f9	cmpl	%edi,%edx
000006fb	ja	0x0000070f
000006fd	movl	%eax,0x08(%esp)
00000701	movl	%edi,0x04(%esp)
00000705	movl	%ecx,(%esp)
00000708	calll	_memcpy
0000070d	jmp	0x0000071f
0000070f	movl	%eax,0x08(%esp)
00000713	movl	%edi,0x04(%esp)
00000717	movl	%ecx,(%esp)
0000071a	calll	_memmove
0000071f	addl	$0x0c,%esp
00000722	popl	%esi
00000723	popl	%edi
00000724	popl	%ebx
00000725	popl	%ebp
00000726	ret
00000727	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Get() const:
00000730	movl	0x04(%esp),%eax
00000734	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000738	jne	0x00000747
0000073a	calll	0x0000073f
0000073f	popl	%eax
00000740	leal	0xc978-0x73f(%eax),%eax
00000746	ret
00000747	movl	(%eax),%eax
00000749	ret
0000074a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(void*, int, int):
00000750	movl	0x08(%esp),%ecx
00000754	movl	0x04(%esp),%eax
00000758	movl	%ecx,(%eax)
0000075a	movl	0x0c(%esp),%ecx
0000075e	movl	%ecx,0x04(%eax)
00000761	movl	$0xffffffff,0x08(%eax)
00000768	movl	0x10(%esp),%ecx
0000076c	movl	%ecx,0x0c(%eax)
0000076f	ret
CUtlString::CUtlString(void*, int, int):
00000770	movl	0x08(%esp),%ecx
00000774	movl	0x04(%esp),%eax
00000778	movl	%ecx,(%eax)
0000077a	movl	0x0c(%esp),%ecx
0000077e	movl	%ecx,0x04(%eax)
00000781	movl	$0xffffffff,0x08(%eax)
00000788	movl	0x10(%esp),%ecx
0000078c	movl	%ecx,0x0c(%eax)
0000078f	ret
CUtlString::CUtlString(void const*, int):
00000790	movl	0x08(%esp),%ecx
00000794	movl	0x04(%esp),%eax
00000798	movl	%ecx,(%eax)
0000079a	movl	0x0c(%esp),%ecx
0000079e	movl	%ecx,0x04(%eax)
000007a1	movl	$0xfffffffe,0x08(%eax)
000007a8	movl	%ecx,0x0c(%eax)
000007ab	ret
000007ac	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::CUtlString(void const*, int):
000007b0	movl	0x08(%esp),%ecx
000007b4	movl	0x04(%esp),%eax
000007b8	movl	%ecx,(%eax)
000007ba	movl	0x0c(%esp),%ecx
000007be	movl	%ecx,0x04(%eax)
000007c1	movl	$0xfffffffe,0x08(%eax)
000007c8	movl	%ecx,0x0c(%eax)
000007cb	ret
000007cc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::SetDirect(char const*, int):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x0c,%esp
000007d9	movl	0x10(%ebp),%eax
000007dc	leal	0x01(%eax),%eax
000007df	movl	0x0c(%ebp),%ebx
000007e2	testl	%ebx,%ebx
000007e4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
000007e9	cmovnel	%eax,%esi
000007ec	movl	0x08(%ebp),%edi
000007ef	movl	%esi,0x0c(%edi)
000007f2	movl	0x04(%edi),%ecx
000007f5	cmpl	%esi,%ecx
000007f7	movl	%esi,%eax
000007f9	jge	0x0000081a
000007fb	movl	%esi,%eax
000007fd	subl	%ecx,%eax
000007ff	movl	%eax,0x04(%esp)
00000803	movl	%edi,(%esp)
00000806	calll	CUtlMemory<unsigned char, int>::Grow(int)
0000080b	movl	0x04(%edi),%eax
0000080e	cmpl	%esi,%eax
00000810	jge	0x00000817
00000812	movl	%eax,0x0c(%edi)
00000815	jmp	0x0000081a
00000817	movl	0x0c(%edi),%eax
0000081a	testl	%eax,%eax
0000081c	je	0x0000084f
0000081e	addl	%ebx,%esi
00000820	movl	(%edi),%ecx
00000822	cmpl	%esi,%ecx
00000824	jae	0x0000082d
00000826	leal	(%ecx,%eax),%edx
00000829	cmpl	%ebx,%edx
0000082b	ja	0x0000083f
0000082d	movl	%eax,0x08(%esp)
00000831	movl	%ebx,0x04(%esp)
00000835	movl	%ecx,(%esp)
00000838	calll	_memcpy
0000083d	jmp	0x0000084f
0000083f	movl	%eax,0x08(%esp)
00000843	movl	%ebx,0x04(%esp)
00000847	movl	%ecx,(%esp)
0000084a	calll	_memmove
0000084f	movl	(%edi),%eax
00000851	movl	0x10(%ebp),%ecx
00000854	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax,%ecx)
00000858	addl	$0x0c,%esp
0000085b	popl	%esi
0000085c	popl	%edi
0000085d	popl	%ebx
0000085e	popl	%ebp
0000085f	ret
CUtlString::Length() const:
00000860	movl	0x04(%esp),%eax
00000864	movl	0x0c(%eax),%eax
00000867	xorl	%ecx,%ecx
00000869	testl	%eax,%eax
0000086b	leal	0xff(%eax),%eax
0000086e	cmovel	%ecx,%eax
00000871	ret
00000872	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::SetLength(int):
00000880	pushl	%ebp
00000881	movl	%esp,%ebp
00000883	pushl	%edi
00000884	pushl	%esi
00000885	subl	$0x10,%esp
00000888	movl	0x0c(%ebp),%ecx
0000088b	xorl	%eax,%eax
0000088d	testl	%ecx,%ecx
0000088f	leal	0x01(%ecx),%edi
00000892	cmovlel	%eax,%edi
00000895	movl	0x08(%ebp),%esi
00000898	movl	%edi,0x0c(%esi)
0000089b	movl	0x04(%esi),%eax
0000089e	cmpl	%edi,%eax
000008a0	jge	0x000008bc
000008a2	movl	%edi,%ecx
000008a4	subl	%eax,%ecx
000008a6	movl	%ecx,0x04(%esp)
000008aa	movl	%esi,(%esp)
000008ad	calll	CUtlMemory<unsigned char, int>::Grow(int)
000008b2	movl	0x04(%esi),%eax
000008b5	cmpl	%edi,%eax
000008b7	jge	0x000008bc
000008b9	movl	%eax,0x0c(%esi)
000008bc	addl	$0x10,%esp
000008bf	popl	%esi
000008c0	popl	%edi
000008c1	popl	%ebp
000008c2	ret
000008c3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator char const*() const:
000008d0	movl	0x04(%esp),%eax
000008d4	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
000008d8	jne	0x000008e7
000008da	calll	0x000008df
000008df	popl	%eax
000008e0	leal	0xc978-0x8df(%eax),%eax
000008e6	ret
000008e7	movl	(%eax),%eax
000008e9	ret
000008ea	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Get():
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%esi
000008f4	subl	$0x14,%esp
000008f7	movl	0x08(%ebp),%esi
000008fa	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
000008fe	jne	0x00000930
00000900	movl	$0x00000001,0x0c(%esi)
00000907	movl	0x04(%esi),%eax
0000090a	testl	%eax,%eax
0000090c	jg	0x0000092b
0000090e	movl	$0x00000001,%ecx
00000913	subl	%eax,%ecx
00000915	movl	%ecx,0x04(%esp)
00000919	movl	%esi,(%esp)
0000091c	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000921	movl	0x04(%esi),%eax
00000924	testl	%eax,%eax
00000926	jg	0x0000092b
00000928	movl	%eax,0x0c(%esi)
0000092b	movl	(%esi),%eax
0000092d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000930	movl	(%esi),%eax
00000932	addl	$0x14,%esp
00000935	popl	%esi
00000936	popl	%ebp
00000937	ret
00000938	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Purge():
00000940	pushl	%ebp
00000941	movl	%esp,%ebp
00000943	pushl	%esi
00000944	subl	$0x14,%esp
00000947	movl	0x08(%ebp),%esi
0000094a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
00000951	movl	0x04(%esi),%eax
00000954	testl	%eax,%eax
00000956	jns	0x00000970
00000958	negl	%eax
0000095a	movl	%eax,0x04(%esp)
0000095e	movl	%esi,(%esp)
00000961	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000966	movl	0x04(%esi),%eax
00000969	testl	%eax,%eax
0000096b	jns	0x00000970
0000096d	movl	%eax,0x0c(%esi)
00000970	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esi)
00000974	js	0x00000991
00000976	movl	(%esi),%eax
00000978	testl	%eax,%eax
0000097a	je	0x0000098a
0000097c	movl	%eax,(%esp)
0000097f	calll	_free
00000984	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000098a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%esi)
00000991	addl	$0x14,%esp
00000994	popl	%esi
00000995	popl	%ebp
00000996	ret
00000997	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::ToLower():
000009a0	pushl	%ebp
000009a1	movl	%esp,%ebp
000009a3	pushl	%edi
000009a4	pushl	%esi
000009a5	subl	$0x10,%esp
000009a8	movl	0x08(%ebp),%esi
000009ab	movl	0x0c(%esi),%ecx
000009ae	xorl	%eax,%eax
000009b0	testl	%ecx,%ecx
000009b2	leal	0xff(%ecx),%edi
000009b5	cmovel	%eax,%edi
000009b8	jmp	0x000009d6
000009ba	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
000009c0	movl	(%esi),%eax
000009c2	movzbl	0xff(%eax,%edi),%eax
000009c7	movl	%eax,(%esp)
000009ca	calll	___tolower
000009cf	movl	(%esi),%ecx
000009d1	movb	%al,0xff(%ecx,%edi)
000009d5	decl	%edi
000009d6	testl	%edi,%edi
000009d8	jg	0x000009c0
000009da	addl	$0x10,%esp
000009dd	popl	%esi
000009de	popl	%edi
000009df	popl	%ebp
000009e0	ret
000009e1	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::ToUpper():
000009f0	pushl	%ebp
000009f1	movl	%esp,%ebp
000009f3	pushl	%edi
000009f4	pushl	%esi
000009f5	subl	$0x10,%esp
000009f8	movl	0x08(%ebp),%esi
000009fb	movl	0x0c(%esi),%ecx
000009fe	xorl	%eax,%eax
00000a00	testl	%ecx,%ecx
00000a02	leal	0xff(%ecx),%edi
00000a05	cmovel	%eax,%edi
00000a08	jmp	0x00000a26
00000a0a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00000a10	movl	(%esi),%eax
00000a12	movzbl	0xff(%eax,%edi),%eax
00000a17	movl	%eax,(%esp)
00000a1a	calll	___toupper
00000a1f	movl	(%esi),%ecx
00000a21	movb	%al,0xff(%ecx,%edi)
00000a25	decl	%edi
00000a26	testl	%edi,%edi
00000a28	jg	0x00000a10
00000a2a	addl	$0x10,%esp
00000a2d	popl	%esi
00000a2e	popl	%edi
00000a2f	popl	%ebp
00000a30	ret
00000a31	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator=(CUtlString const&):
00000a40	pushl	%ebp
00000a41	movl	%esp,%ebp
00000a43	pushl	%ebx
00000a44	pushl	%edi
00000a45	pushl	%esi
00000a46	subl	$0x0c,%esp
00000a49	movl	0x0c(%ebp),%eax
00000a4c	movl	(%eax),%edi
00000a4e	testl	%edi,%edi
00000a50	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
00000a55	cmovnel	0x0c(%eax),%ebx
00000a59	movl	0x08(%ebp),%esi
00000a5c	movl	%ebx,0x0c(%esi)
00000a5f	movl	0x04(%esi),%ecx
00000a62	cmpl	%ebx,%ecx
00000a64	movl	%ebx,%eax
00000a66	jge	0x00000a87
00000a68	movl	%ebx,%eax
00000a6a	subl	%ecx,%eax
00000a6c	movl	%eax,0x04(%esp)
00000a70	movl	%esi,(%esp)
00000a73	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000a78	movl	0x04(%esi),%eax
00000a7b	cmpl	%ebx,%eax
00000a7d	jge	0x00000a84
00000a7f	movl	%eax,0x0c(%esi)
00000a82	jmp	0x00000a87
00000a84	movl	0x0c(%esi),%eax
00000a87	testl	%eax,%eax
00000a89	je	0x00000abc
00000a8b	addl	%edi,%ebx
00000a8d	movl	(%esi),%ecx
00000a8f	cmpl	%ebx,%ecx
00000a91	jae	0x00000a9a
00000a93	leal	(%ecx,%eax),%edx
00000a96	cmpl	%edi,%edx
00000a98	ja	0x00000aac
00000a9a	movl	%eax,0x08(%esp)
00000a9e	movl	%edi,0x04(%esp)
00000aa2	movl	%ecx,(%esp)
00000aa5	calll	_memcpy
00000aaa	jmp	0x00000abc
00000aac	movl	%eax,0x08(%esp)
00000ab0	movl	%edi,0x04(%esp)
00000ab4	movl	%ecx,(%esp)
00000ab7	calll	_memmove
00000abc	movl	%esi,%eax
00000abe	addl	$0x0c,%esp
00000ac1	popl	%esi
00000ac2	popl	%edi
00000ac3	popl	%ebx
00000ac4	popl	%ebp
00000ac5	ret
00000ac6	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator=(char const*):
00000ad0	pushl	%ebp
00000ad1	movl	%esp,%ebp
00000ad3	pushl	%ebx
00000ad4	pushl	%edi
00000ad5	pushl	%esi
00000ad6	subl	$0x0c,%esp
00000ad9	movl	0x0c(%ebp),%ebx
00000adc	testl	%ebx,%ebx
00000ade	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%edi
00000ae3	je	0x00000af0
00000ae5	movl	%ebx,(%esp)
00000ae8	calll	_strlen
00000aed	movl	%eax,%edi
00000aef	incl	%edi
00000af0	movl	0x08(%ebp),%esi
00000af3	testl	%ebx,%ebx
00000af5	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%eax
00000afa	cmovel	%eax,%edi
00000afd	movl	%edi,0x0c(%esi)
00000b00	movl	0x04(%esi),%ecx
00000b03	cmpl	%edi,%ecx
00000b05	movl	%edi,%eax
00000b07	jge	0x00000b28
00000b09	movl	%edi,%eax
00000b0b	subl	%ecx,%eax
00000b0d	movl	%eax,0x04(%esp)
00000b11	movl	%esi,(%esp)
00000b14	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000b19	movl	0x04(%esi),%eax
00000b1c	cmpl	%edi,%eax
00000b1e	jge	0x00000b25
00000b20	movl	%eax,0x0c(%esi)
00000b23	jmp	0x00000b28
00000b25	movl	0x0c(%esi),%eax
00000b28	testl	%eax,%eax
00000b2a	je	0x00000b5d
00000b2c	addl	%ebx,%edi
00000b2e	movl	(%esi),%ecx
00000b30	cmpl	%edi,%ecx
00000b32	jae	0x00000b3b
00000b34	leal	(%ecx,%eax),%edx
00000b37	cmpl	%ebx,%edx
00000b39	ja	0x00000b4d
00000b3b	movl	%eax,0x08(%esp)
00000b3f	movl	%ebx,0x04(%esp)
00000b43	movl	%ecx,(%esp)
00000b46	calll	_memcpy
00000b4b	jmp	0x00000b5d
00000b4d	movl	%eax,0x08(%esp)
00000b51	movl	%ebx,0x04(%esp)
00000b55	movl	%ecx,(%esp)
00000b58	calll	_memmove
00000b5d	movl	%esi,%eax
00000b5f	addl	$0x0c,%esp
00000b62	popl	%esi
00000b63	popl	%edi
00000b64	popl	%ebx
00000b65	popl	%ebp
00000b66	ret
00000b67	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator==(CUtlString const&) const:
00000b70	pushl	%ebp
00000b71	movl	%esp,%ebp
00000b73	pushl	%esi
00000b74	subl	$0x14,%esp
00000b77	movl	0x08(%ebp),%ecx
00000b7a	movl	0x0c(%ecx),%eax
00000b7d	xorb	%dl,%dl
00000b7f	movl	0x0c(%ebp),%esi
00000b82	cmpl	%eax,0x0c(%esi)
00000b85	jne	0x00000ba0
00000b87	movl	(%esi),%edx
00000b89	movl	(%ecx),%ecx
00000b8b	movl	%eax,0x08(%esp)
00000b8f	movl	%ecx,0x04(%esp)
00000b93	movl	%edx,(%esp)
00000b96	calll	_memcmp
00000b9b	testl	%eax,%eax
00000b9d	sete	%dl
00000ba0	movzbl	%dl,%eax
00000ba3	addl	$0x14,%esp
00000ba6	popl	%esi
00000ba7	popl	%ebp
00000ba8	ret
00000ba9	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::operator==(char const*) const:
00000bb0	pushl	%ebp
00000bb1	movl	%esp,%ebp
00000bb3	subl	$0x08,%esp
00000bb6	calll	0x00000bbb
00000bbb	popl	%eax
00000bbc	movl	0x08(%ebp),%ecx
00000bbf	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00000bc3	jne	0x00000bcd
00000bc5	leal	0xc978-0xbbb(%eax),%eax
00000bcb	jmp	0x00000bcf
00000bcd	movl	(%ecx),%eax
00000bcf	movl	0x0c(%ebp),%ecx
00000bd2	movl	%ecx,0x04(%esp)
00000bd6	movl	%eax,(%esp)
00000bd9	calll	_strcmp
00000bde	testl	%eax,%eax
00000be0	sete	%al
00000be3	movzbl	%al,%eax
00000be6	addl	$0x08,%esp
00000be9	popl	%ebp
00000bea	ret
00000beb	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(CUtlString const&):
00000bf0	pushl	%ebp
00000bf1	movl	%esp,%ebp
00000bf3	pushl	%ebx
00000bf4	pushl	%edi
00000bf5	pushl	%esi
00000bf6	subl	$0x1c,%esp
00000bf9	calll	0x00000bfe
00000bfe	popl	%eax
00000bff	movl	%eax,0xec(%ebp)
00000c02	movl	0x08(%ebp),%edx
00000c05	movl	0x0c(%edx),%eax
00000c08	xorl	%ebx,%ebx
00000c0a	testl	%eax,%eax
00000c0c	leal	0xff(%eax),%ecx
00000c0f	cmovel	%ebx,%ecx
00000c12	movl	%ecx,0xf0(%ebp)
00000c15	movl	0x0c(%ebp),%eax
00000c18	movl	0x0c(%eax),%eax
00000c1b	testl	%eax,%eax
00000c1d	leal	0xff(%eax),%esi
00000c20	cmovel	%ebx,%esi
00000c23	leal	0x01(%esi,%ecx),%edi
00000c27	leal	(%esi,%ecx),%eax
00000c2a	testl	%eax,%eax
00000c2c	cmovlel	%ebx,%edi
00000c2f	movl	%edi,0x0c(%edx)
00000c32	movl	0x04(%edx),%eax
00000c35	cmpl	%edi,%eax
00000c37	jge	0x00000c5e
00000c39	movl	%edi,%ecx
00000c3b	subl	%eax,%ecx
00000c3d	movl	%ecx,0x04(%esp)
00000c41	movl	%edx,(%esp)
00000c44	movl	%edx,%ebx
00000c46	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000c4b	movl	%ebx,%edx
00000c4d	movl	0x04(%edx),%eax
00000c50	cmpl	%edi,%eax
00000c52	jge	0x00000c5b
00000c54	movl	%eax,0x0c(%edx)
00000c57	movl	%eax,%edi
00000c59	jmp	0x00000c5e
00000c5b	movl	0x0c(%edx),%edi
00000c5e	leal	0xff(%edi),%ebx
00000c61	testl	%edi,%edi
00000c63	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ecx
00000c68	cmovel	%ecx,%ebx
00000c6b	movl	%ebx,0xe8(%ebp)
00000c6e	subl	0xf0(%ebp),%ebx
00000c71	cmpl	%esi,%ebx
00000c73	cmovgel	%esi,%ebx
00000c76	testl	%edi,%edi
00000c78	jne	0x00000cab
00000c7a	movl	$0x00000001,0x0c(%edx)
00000c81	testl	%eax,%eax
00000c83	jg	0x00000ca6
00000c85	movl	$0x00000001,%ecx
00000c8a	subl	%eax,%ecx
00000c8c	movl	%ecx,0x04(%esp)
00000c90	movl	%edx,(%esp)
00000c93	movl	%edx,%esi
00000c95	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000c9a	movl	%esi,%edx
00000c9c	movl	0x04(%edx),%eax
00000c9f	testl	%eax,%eax
00000ca1	jg	0x00000ca6
00000ca3	movl	%eax,0x0c(%edx)
00000ca6	movl	(%edx),%eax
00000ca8	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000cab	movl	%edx,%eax
00000cad	movl	%edx,%esi
00000caf	movl	0xf0(%ebp),%ecx
00000cb2	addl	(%eax),%ecx
00000cb4	movl	0x0c(%ebp),%eax
00000cb7	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000cbb	jne	0x00000cc8
00000cbd	movl	0xec(%ebp),%eax
00000cc0	leal	0xc978-0xbfe(%eax),%eax
00000cc6	jmp	0x00000cca
00000cc8	movl	(%eax),%eax
00000cca	movl	%ebx,0x08(%esp)
00000cce	movl	%eax,0x04(%esp)
00000cd2	movl	%ecx,(%esp)
00000cd5	calll	_memcpy
00000cda	movl	%esi,%eax
00000cdc	movl	(%eax),%ecx
00000cde	movl	0xe8(%ebp),%edx
00000ce1	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ecx,%edx)
00000ce5	addl	$0x1c,%esp
00000ce8	popl	%esi
00000ce9	popl	%edi
00000cea	popl	%ebx
00000ceb	popl	%ebp
00000cec	ret
00000ced	nopl	(%eax)
CUtlString::operator+=(char const*):
00000cf0	pushl	%ebp
00000cf1	movl	%esp,%ebp
00000cf3	pushl	%ebx
00000cf4	pushl	%edi
00000cf5	pushl	%esi
00000cf6	subl	$0x1c,%esp
00000cf9	movl	0x08(%ebp),%esi
00000cfc	movl	0x0c(%esi),%eax
00000cff	movl	0x0c(%ebp),%ecx
00000d02	movl	%ecx,(%esp)
00000d05	xorl	%ebx,%ebx
00000d07	testl	%eax,%eax
00000d09	leal	0xff(%eax),%edi
00000d0c	cmovel	%ebx,%edi
00000d0f	movl	%edi,0xf0(%ebp)
00000d12	calll	_strlen
00000d17	movl	%esi,%edx
00000d19	movl	%eax,0xec(%ebp)
00000d1c	leal	0x01(%edi,%eax),%esi
00000d20	leal	(%edi,%eax),%eax
00000d23	testl	%eax,%eax
00000d25	cmovlel	%ebx,%esi
00000d28	movl	%esi,0x0c(%edx)
00000d2b	movl	0x04(%edx),%eax
00000d2e	cmpl	%esi,%eax
00000d30	jge	0x00000d57
00000d32	movl	%esi,%ecx
00000d34	subl	%eax,%ecx
00000d36	movl	%ecx,0x04(%esp)
00000d3a	movl	%edx,(%esp)
00000d3d	movl	%edx,%edi
00000d3f	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000d44	movl	%edi,%edx
00000d46	movl	0x04(%edx),%eax
00000d49	cmpl	%esi,%eax
00000d4b	jge	0x00000d54
00000d4d	movl	%eax,0x0c(%edx)
00000d50	movl	%eax,%esi
00000d52	jmp	0x00000d57
00000d54	movl	0x0c(%edx),%esi
00000d57	leal	0xff(%esi),%edi
00000d5a	testl	%esi,%esi
00000d5c	cmovel	%ebx,%edi
00000d5f	movl	%edi,%ebx
00000d61	subl	0xf0(%ebp),%ebx
00000d64	movl	0xec(%ebp),%ecx
00000d67	cmpl	%ecx,%ebx
00000d69	cmovgel	%ecx,%ebx
00000d6c	testl	%esi,%esi
00000d6e	jne	0x00000da1
00000d70	movl	$0x00000001,0x0c(%edx)
00000d77	testl	%eax,%eax
00000d79	jg	0x00000d9c
00000d7b	movl	$0x00000001,%ecx
00000d80	subl	%eax,%ecx
00000d82	movl	%ecx,0x04(%esp)
00000d86	movl	%edx,(%esp)
00000d89	movl	%edx,%esi
00000d8b	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000d90	movl	%esi,%edx
00000d92	movl	0x04(%edx),%eax
00000d95	testl	%eax,%eax
00000d97	jg	0x00000d9c
00000d99	movl	%eax,0x0c(%edx)
00000d9c	movl	(%edx),%eax
00000d9e	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000da1	movl	(%edx),%eax
00000da3	movl	%ebx,0x08(%esp)
00000da7	movl	0x0c(%ebp),%ecx
00000daa	movl	%ecx,0x04(%esp)
00000dae	addl	0xf0(%ebp),%eax
00000db1	movl	%eax,(%esp)
00000db4	movl	%edx,%esi
00000db6	calll	_memcpy
00000dbb	movl	(%esi),%eax
00000dbd	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax,%edi)
00000dc1	movl	%esi,%eax
00000dc3	addl	$0x1c,%esp
00000dc6	popl	%esi
00000dc7	popl	%edi
00000dc8	popl	%ebx
00000dc9	popl	%ebp
00000dca	ret
00000dcb	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(char):
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	pushl	%ebx
00000dd4	pushl	%edi
00000dd5	pushl	%esi
00000dd6	subl	$0x0c,%esp
00000dd9	movl	0x08(%ebp),%esi
00000ddc	movl	0x0c(%esi),%ecx
00000ddf	xorl	%eax,%eax
00000de1	testl	%ecx,%ecx
00000de3	leal	0xff(%ecx),%edi
00000de6	cmovel	%eax,%edi
00000de9	leal	0x02(%edi),%ebx
00000dec	leal	0x01(%edi),%ecx
00000def	testl	%ecx,%ecx
00000df1	cmovlel	%eax,%ebx
00000df4	movl	%ebx,0x0c(%esi)
00000df7	movl	0x04(%esi),%eax
00000dfa	cmpl	%ebx,%eax
00000dfc	jge	0x00000e18
00000dfe	movl	%ebx,%ecx
00000e00	subl	%eax,%ecx
00000e02	movl	%ecx,0x04(%esp)
00000e06	movl	%esi,(%esp)
00000e09	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000e0e	movl	0x04(%esi),%eax
00000e11	cmpl	%ebx,%eax
00000e13	jge	0x00000e18
00000e15	movl	%eax,0x0c(%esi)
00000e18	movb	0x0c(%ebp),%al
00000e1b	movl	(%esi),%ecx
00000e1d	movb	%al,(%ecx,%edi)
00000e20	movl	(%esi),%eax
00000e22	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x01(%eax,%edi)
00000e27	movl	%esi,%eax
00000e29	addl	$0x0c,%esp
00000e2c	popl	%esi
00000e2d	popl	%edi
00000e2e	popl	%ebx
00000e2f	popl	%ebp
00000e30	ret
00000e31	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(int):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%edi
00000e44	pushl	%esi
00000e45	subl	$0x20,%esp
00000e48	calll	0x00000e4d
00000e4d	popl	%eax
00000e4e	movl	0xf797-0xe4d(%eax),%esi
00000e54	movl	(%esi),%ecx
00000e56	movl	%ecx,0xf4(%ebp)
00000e59	movl	0x0c(%ebp),%ecx
00000e5c	movl	%ecx,0x0c(%esp)
00000e60	leal	0xc979-0xe4d(%eax),%eax
00000e66	movl	%eax,0x08(%esp)
00000e6a	leal	0xe8(%ebp),%edi
00000e6d	movl	%edi,(%esp)
00000e70	movl	$0x0000000c,0x04(%esp)
00000e78	calll	V_snprintf(char*, int, char const*, ...)
00000e7d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xf3(%ebp)
00000e81	movl	%edi,0x04(%esp)
00000e85	movl	0x08(%ebp),%eax
00000e88	movl	%eax,(%esp)
00000e8b	calll	CUtlString::operator+=(char const*)
00000e90	movl	(%esi),%ecx
00000e92	cmpl	0xf4(%ebp),%ecx
00000e95	jne	0x00000e9e
00000e97	addl	$0x20,%esp
00000e9a	popl	%esi
00000e9b	popl	%edi
00000e9c	popl	%ebp
00000e9d	ret
00000e9e	calll	___stack_chk_fail
00000ea3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(double):
00000eb0	pushl	%ebp
00000eb1	movl	%esp,%ebp
00000eb3	pushl	%edi
00000eb4	pushl	%esi
00000eb5	subl	$0x00000120,%esp
00000ebb	calll	0x00000ec0
00000ec0	popl	%eax
00000ec1	movl	0xf797-0xec0(%eax),%esi
00000ec7	movl	(%esi),%ecx
00000ec9	movl	%ecx,0xf4(%ebp)
00000ecc	movsd	0x0c(%ebp),%xmm0
00000ed1	movsd	%xmm0,0x0c(%esp)
00000ed7	leal	0xc97c-0xec0(%eax),%eax
00000edd	movl	%eax,0x08(%esp)
00000ee1	leal	0xfffffef4(%ebp),%edi
00000ee7	movl	%edi,(%esp)
00000eea	movl	CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&),0x04(%esp)
00000ef2	calll	V_snprintf(char*, int, char const*, ...)
00000ef7	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xf3(%ebp)
00000efb	movl	%edi,0x04(%esp)
00000eff	movl	0x08(%ebp),%eax
00000f02	movl	%eax,(%esp)
00000f05	calll	CUtlString::operator+=(char const*)
00000f0a	movl	(%esi),%ecx
00000f0c	cmpl	0xf4(%ebp),%ecx
00000f0f	jne	0x00000f1b
00000f11	addl	$0x00000120,%esp
00000f17	popl	%esi
00000f18	popl	%edi
00000f19	popl	%ebp
00000f1a	ret
00000f1b	calll	___stack_chk_fail
CUtlString::MatchesPattern(CUtlString const&, int):
00000f20	pushl	%ebp
00000f21	pushl	%ebx
00000f22	pushl	%edi
00000f23	pushl	%esi
00000f24	pushl	%eax
00000f25	calll	0x00000f2a
00000f2a	popl	%eax
00000f2b	leal	0xc978-0xf2a(%eax),%ecx
00000f31	movl	0x18(%esp),%edx
00000f35	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edx)
00000f39	movl	%ecx,%eax
00000f3b	je	0x00000f3f
00000f3d	movl	(%edx),%eax
00000f3f	movl	0x1c(%esp),%edx
00000f43	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edx)
00000f47	je	0x00000f4b
00000f49	movl	(%edx),%ecx
00000f4b	movl	0x20(%esp),%edx
00000f4f	movb	(%ecx),%bl
00000f51	andl	$0x01,%edx
00000f54	movl	%edx,(%esp)
00000f57	xorb	%bh,%bh
00000f59	jmp	0x00000fbb
00000f5b	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00000f60	testb	%bl,%bl
00000f62	je	0x00000f8a
00000f64	cmpb	$0x2a,%bl
00000f67	je	0x00000f8a
00000f69	movb	0x01(%edi),%bl
00000f6c	incl	%edi
00000f6d	incl	%esi
00000f6e	jmp	0x00000f60
00000f70	xorb	%dl,%dl
00000f72	testb	$0x01,%bh
00000f75	je	0x00000fce
00000f77	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esp)
00000f7b	je	0x00000f89
00000f7d	cmpb	$0x2f,%bl
00000f80	je	0x00000f89
00000f82	xorb	%dl,%dl
00000f84	cmpb	$0x2f,(%eax)
00000f87	je	0x00000fce
00000f89	incl	%eax
00000f8a	xorl	%ebp,%ebp
00000f8c	jmp	0x00000fa1
00000f8e	movb	0x01(%ecx),%bl
00000f91	incl	%ecx
00000f92	movb	$0x01,%bh
00000f94	testb	%bl,%bl
00000f96	movb	$0x01,%dl
00000f98	jne	0x00000fbb
00000f9a	jmp	0x00000fce
00000f9c	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
00000fa0	incl	%ebp
00000fa1	cmpl	%esi,%ebp
00000fa3	jge	0x00000fb3
00000fa5	movb	(%eax,%ebp),%dh
00000fa8	xorb	%dl,%dl
00000faa	testb	%dh,%dh
00000fac	je	0x00000fce
00000fae	cmpb	(%ecx,%ebp),%dh
00000fb1	je	0x00000fa0
00000fb3	cmpl	%ebp,%esi
00000fb5	jne	0x00000f70
00000fb7	addl	%esi,%eax
00000fb9	movl	%edi,%ecx
00000fbb	cmpb	$0x2a,%bl
00000fbe	je	0x00000f8e
00000fc0	xorl	%esi,%esi
00000fc2	testb	%bl,%bl
00000fc4	movl	%ecx,%edi
00000fc6	jne	0x00000f60
00000fc8	cmpb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000fcb	sete	%dl
00000fce	movzbl	%dl,%eax
00000fd1	addl	$0x04,%esp
00000fd4	popl	%esi
00000fd5	popl	%edi
00000fd6	popl	%ebx
00000fd7	popl	%ebp
00000fd8	ret
00000fd9	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::Format(char const*, ...):
00000fe0	pushl	%ebp
00000fe1	movl	%esp,%ebp
00000fe3	pushl	%ebx
00000fe4	pushl	%edi
00000fe5	pushl	%esi
00000fe6	subl	$0x0000101c,%esp
00000fec	calll	0x00000ff1
00000ff1	popl	%eax
00000ff2	movl	0xf797-0xff1(%eax),%eax
00000ff8	movl	%eax,0xffffefe8(%ebp)
00000ffe	movl	(%eax),%eax
00001000	movl	%eax,0xf0(%ebp)
00001003	leal	0x10(%ebp),%eax
00001006	movl	%eax,0xffffefec(%ebp)
0000100c	movl	%eax,0x0c(%esp)
00001010	movl	0x0c(%ebp),%eax
00001013	movl	%eax,0x08(%esp)
00001017	leal	0xffffeff0(%ebp),%edi
0000101d	movl	%edi,(%esp)
00001020	movl	$0x00000fff,0x04(%esp)
00001028	calll	_vsnprintf
0000102d	movl	%eax,%esi
0000102f	movl	0x08(%ebp),%ebx
00001032	testl	%esi,%esi
00001034	js	0x0000103e
00001036	cmpl	$0x00000fff,%esi
0000103c	jb	0x00001047
0000103e	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xef(%ebp)
00001042	movl	$0x00000fff,%esi
00001047	movl	%edi,(%esp)
0000104a	calll	_strlen
0000104f	movl	%eax,%edi
00001051	incl	%edi
00001052	movl	%edi,0x0c(%ebx)
00001055	movl	0x04(%ebx),%ecx
00001058	cmpl	%edi,%ecx
0000105a	movl	%edi,%eax
0000105c	jge	0x0000107d
0000105e	movl	%edi,%eax
00001060	subl	%ecx,%eax
00001062	movl	%eax,0x04(%esp)
00001066	movl	%ebx,(%esp)
00001069	calll	CUtlMemory<unsigned char, int>::Grow(int)
0000106e	movl	0x04(%ebx),%eax
00001071	cmpl	%edi,%eax
00001073	jge	0x0000107a
00001075	movl	%eax,0x0c(%ebx)
00001078	jmp	0x0000107d
0000107a	movl	0x0c(%ebx),%eax
0000107d	testl	%eax,%eax
0000107f	je	0x000010bd
00001081	movl	(%ebx),%ecx
00001083	leal	0xffffeff0(%ebp,%edi),%edx
0000108a	cmpl	%edx,%ecx
0000108c	leal	0xffffeff0(%ebp),%edi
00001092	jae	0x0000109b
00001094	leal	(%ecx,%eax),%edx
00001097	cmpl	%edi,%edx
00001099	ja	0x000010ad
0000109b	movl	%eax,0x08(%esp)
0000109f	movl	%edi,0x04(%esp)
000010a3	movl	%ecx,(%esp)
000010a6	calll	_memcpy
000010ab	jmp	0x000010bd
000010ad	movl	%eax,0x08(%esp)
000010b1	movl	%edi,0x04(%esp)
000010b5	movl	%ecx,(%esp)
000010b8	calll	_memmove
000010bd	movl	0xffffefe8(%ebp),%eax
000010c3	movl	(%eax),%eax
000010c5	cmpl	0xf0(%ebp),%eax
000010c8	jne	0x000010d7
000010ca	movl	%esi,%eax
000010cc	addl	$0x0000101c,%esp
000010d2	popl	%esi
000010d3	popl	%edi
000010d4	popl	%ebx
000010d5	popl	%ebp
000010d6	ret
000010d7	calll	___stack_chk_fail
000010dc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::StripTrailingSlash():
000010e0	pushl	%ebp
000010e1	movl	%esp,%ebp
000010e3	pushl	%edi
000010e4	pushl	%esi
000010e5	subl	$0x10,%esp
000010e8	movl	0x08(%ebp),%esi
000010eb	movl	0x0c(%esi),%eax
000010ee	cmpl	$0x02,%eax
000010f1	jb	0x00001130
000010f3	movl	(%esi),%ecx
000010f5	movb	0xfe(%eax,%ecx),%dl
000010f9	cmpb	$0x2f,%dl
000010fc	je	0x00001103
000010fe	cmpb	$0x5c,%dl
00001101	jne	0x00001130
00001103	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xfe(%ecx,%eax)
00001108	movl	0x0c(%esi),%edi
0000110b	decl	%edi
0000110c	movl	%edi,0x0c(%esi)
0000110f	movl	0x04(%esi),%eax
00001112	cmpl	%edi,%eax
00001114	jge	0x00001130
00001116	movl	%edi,%ecx
00001118	subl	%eax,%ecx
0000111a	movl	%ecx,0x04(%esp)
0000111e	movl	%esi,(%esp)
00001121	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001126	movl	0x04(%esi),%eax
00001129	cmpl	%edi,%eax
0000112b	jge	0x00001130
0000112d	movl	%eax,0x0c(%esi)
00001130	addl	$0x10,%esp
00001133	popl	%esi
00001134	popl	%edi
00001135	popl	%ebp
00001136	ret
00001137	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Slice(int, int):
00001140	pushl	%ebp
00001141	movl	%esp,%ebp
00001143	pushl	%ebx
00001144	pushl	%edi
00001145	pushl	%esi
00001146	subl	$0x3c,%esp
00001149	calll	0x0000114e
0000114e	popl	%eax
0000114f	movl	%eax,0xd4(%ebp)
00001152	movl	0x0c(%ebp),%eax
00001155	movl	0x0c(%eax),%eax
00001158	movl	%eax,0xd0(%ebp)
0000115b	leal	0xff(%eax),%ecx
0000115e	testl	%eax,%eax
00001160	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
00001165	cmovnel	%ecx,%esi
00001168	movl	0x14(%ebp),%ebx
0000116b	movl	0x10(%ebp),%edi
0000116e	testl	%edi,%edi
00001170	jns	0x0000117f
00001172	negl	%edi
00001174	movl	%edi,%eax
00001176	cltd
00001177	idivl	%ecx
00001179	movl	%esi,%edi
0000117b	subl	%edx,%edi
0000117d	jmp	0x00001185
0000117f	cmpl	%edi,%esi
00001181	jg	0x00001185
00001183	movl	%esi,%edi
00001185	cmpl	$0x7fffffff,%ebx
0000118b	je	0x000011a0
0000118d	testl	%ebx,%ebx
0000118f	jns	0x0000119c
00001191	negl	%ebx
00001193	movl	%ebx,%eax
00001195	cltd
00001196	idivl	%ecx
00001198	subl	%edx,%esi
0000119a	jmp	0x000011a0
0000119c	cmpl	%ebx,%esi
0000119e	jg	0x000011a2
000011a0	movl	%esi,%ebx
000011a2	cmpl	%ebx,%edi
000011a4	jl	0x00001237
000011aa	movl	0x08(%ebp),%esi
000011ad	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%esi)
000011b4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
000011ba	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
000011c1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esi)
000011c8	movl	$0x00000001,0x0c(%esi)
000011cf	movl	%esi,(%esp)
000011d2	movl	$0x00000001,0x04(%esp)
000011da	calll	CUtlMemory<unsigned char, int>::Grow(int)
000011df	movl	0x04(%esi),%eax
000011e2	testl	%eax,%eax
000011e4	jg	0x000011eb
000011e6	movl	%eax,0x0c(%esi)
000011e9	jmp	0x000011ee
000011eb	movl	0x0c(%esi),%eax
000011ee	movl	0xd4(%ebp),%edi
000011f1	testl	%eax,%eax
000011f3	je	0x00001366
000011f9	movl	(%esi),%ecx
000011fb	leal	0xc978-0x114e+0x00000001(%edi),%edx
00001201	cmpl	%edx,%ecx
00001203	jae	0x00001212
00001205	leal	(%ecx,%eax),%esi
00001208	leal	0xc978-0x114e(%edi),%edx
0000120e	cmpl	%edx,%esi
00001210	ja	0x00001222
00001212	movl	%eax,0x08(%esp)
00001216	leal	0xc978-0x114e(%edi),%eax
0000121c	movl	%eax,0x04(%esp)
00001220	jmp	0x0000122a
00001222	movl	%eax,0x08(%esp)
00001226	movl	%edx,0x04(%esp)
0000122a	movl	%ecx,(%esp)
0000122d	calll	_memcpy
00001232	jmp	0x00001366
00001237	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xd0(%ebp)
0000123b	jne	0x00001248
0000123d	movl	0xd4(%ebp),%eax
00001240	leal	0xc978-0x114e(%eax),%eax
00001246	jmp	0x0000124d
00001248	movl	0x0c(%ebp),%eax
0000124b	movl	(%eax),%eax
0000124d	movl	%eax,0xcc(%ebp)
00001250	xorps	%xmm0,%xmm0
00001253	movaps	%xmm0,0xd8(%ebp)
00001257	subl	%edi,%ebx
00001259	leal	0x01(%ebx),%esi
0000125c	movl	%esi,0xe4(%ebp)
0000125f	testl	%esi,%esi
00001261	jle	0x00001283
00001263	movl	%esi,0x04(%esp)
00001267	leal	0xd8(%ebp),%eax
0000126a	movl	%eax,(%esp)
0000126d	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001272	movl	0xdc(%ebp),%eax
00001275	cmpl	%esi,%eax
00001277	jl	0x0000127e
00001279	movl	0xe4(%ebp),%esi
0000127c	jmp	0x00001283
0000127e	movl	%eax,0xe4(%ebp)
00001281	movl	%eax,%esi
00001283	movl	0xd8(%ebp),%eax
00001286	movl	%ebx,0x08(%esp)
0000128a	movl	0xcc(%ebp),%ecx
0000128d	addl	%edi,%ecx
0000128f	movl	%eax,%edi
00001291	movl	%ecx,0x04(%esp)
00001295	movl	%edi,(%esp)
00001298	calll	_memcpy
0000129d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi,%ebx)
000012a1	movl	0x08(%ebp),%ebx
000012a4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
000012ab	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
000012b1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
000012b8	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
000012bf	testl	%esi,%esi
000012c1	jne	0x000012fb
000012c3	movl	%edi,0xd0(%ebp)
000012c6	movl	0xd4(%ebp),%eax
000012c9	leal	0xc978-0x114e(%eax),%edi
000012cf	movl	%edi,(%esp)
000012d2	calll	_strlen
000012d7	movl	%eax,%esi
000012d9	incl	%esi
000012da	movl	%esi,0x0c(%ebx)
000012dd	testl	%esi,%esi
000012df	movl	%esi,%eax
000012e1	jle	0x0000130e
000012e3	movl	%esi,0x04(%esp)
000012e7	movl	%ebx,(%esp)
000012ea	calll	CUtlMemory<unsigned char, int>::Grow(int)
000012ef	movl	0x04(%ebx),%eax
000012f2	cmpl	%esi,%eax
000012f4	jge	0x0000130b
000012f6	movl	%eax,0x0c(%ebx)
000012f9	jmp	0x0000130e
000012fb	testl	%edi,%edi
000012fd	movl	%edi,0xd0(%ebp)
00001300	jne	0x000012cf
00001302	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001309	jmp	0x00001343
0000130b	movl	0x0c(%ebx),%eax
0000130e	testl	%eax,%eax
00001310	je	0x00001343
00001312	addl	%edi,%esi
00001314	movl	(%ebx),%ecx
00001316	cmpl	%esi,%ecx
00001318	jae	0x00001321
0000131a	leal	(%ecx,%eax),%edx
0000131d	cmpl	%edi,%edx
0000131f	ja	0x00001333
00001321	movl	%eax,0x08(%esp)
00001325	movl	%edi,0x04(%esp)
00001329	movl	%ecx,(%esp)
0000132c	calll	_memcpy
00001331	jmp	0x00001343
00001333	movl	%eax,0x08(%esp)
00001337	movl	%edi,0x04(%esp)
0000133b	movl	%ecx,(%esp)
0000133e	calll	_memmove
00001343	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)(%ebp)
00001347	movl	0xd0(%ebp),%eax
0000134a	js	0x00001366
0000134c	testl	%eax,%eax
0000134e	je	0x0000135f
00001350	movl	%eax,(%esp)
00001353	calll	_free
00001358	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xd8(%ebp)
0000135f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xdc(%ebp)
00001366	addl	$0x3c,%esp
00001369	popl	%esi
0000136a	popl	%edi
0000136b	popl	%ebx
0000136c	popl	%ebp
0000136d	retl	$0x0004
CUtlString::Left(int):
00001370	pushl	%ebp
00001371	movl	%esp,%ebp
00001373	subl	$0x18,%esp
00001376	movl	0x10(%ebp),%eax
00001379	movl	%eax,0x0c(%esp)
0000137d	movl	0x0c(%ebp),%eax
00001380	movl	%eax,0x04(%esp)
00001384	movl	0x08(%ebp),%eax
00001387	movl	%eax,(%esp)
0000138a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esp)
00001392	calll	CUtlString::Slice(int, int)
00001397	addl	$0x14,%esp
0000139a	popl	%ebp
0000139b	retl	$0x0004
0000139e	nop
CUtlString::Right(int):
000013a0	pushl	%ebp
000013a1	movl	%esp,%ebp
000013a3	subl	$0x18,%esp
000013a6	xorl	%eax,%eax
000013a8	subl	0x10(%ebp),%eax
000013ab	movl	%eax,0x08(%esp)
000013af	movl	0x0c(%ebp),%eax
000013b2	movl	%eax,0x04(%esp)
000013b6	movl	0x08(%ebp),%eax
000013b9	movl	%eax,(%esp)
000013bc	movl	$0x7fffffff,0x0c(%esp)
000013c4	calll	CUtlString::Slice(int, int)
000013c9	addl	$0x14,%esp
000013cc	popl	%ebp
000013cd	retl	$0x0004
CUtlString::Replace(char, char):
000013d0	pushl	%ebp
000013d1	movl	%esp,%ebp
000013d3	pushl	%ebx
000013d4	pushl	%edi
000013d5	pushl	%esi
000013d6	subl	$0x0c,%esp
000013d9	movl	0x0c(%ebp),%eax
000013dc	movl	%eax,0x04(%esp)
000013e0	movl	0x08(%ebp),%edi
000013e3	movl	%edi,(%esp)
000013e6	calll	CUtlString::CUtlString(CUtlString const&)
000013eb	movl	0x0c(%edi),%ecx
000013ee	xorl	%eax,%eax
000013f0	testl	%ecx,%ecx
000013f2	leal	0xff(%ecx),%ecx
000013f5	cmovel	%eax,%ecx
000013f8	testl	%ecx,%ecx
000013fa	jle	0x00001420
000013fc	movb	0x14(%ebp),%dl
000013ff	movb	0x10(%ebp),%dh
00001402	movsbl	%dh,%esi
00001405	movl	(%edi),%edi
00001407	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00001410	movzbl	(%edi,%eax),%ebx
00001414	cmpl	%esi,%ebx
00001416	jne	0x0000141b
00001418	movb	%dl,(%edi,%eax)
0000141b	incl	%eax
0000141c	cmpl	%ecx,%eax
0000141e	jl	0x00001410
00001420	addl	$0x0c,%esp
00001423	popl	%esi
00001424	popl	%edi
00001425	popl	%ebx
00001426	popl	%ebp
00001427	retl	$0x0004
0000142a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::AbsPath(char const*):
00001430	pushl	%ebp
00001431	movl	%esp,%ebp
00001433	pushl	%ebx
00001434	pushl	%edi
00001435	pushl	%esi
00001436	subl	$0x0000011c,%esp
0000143c	calll	0x00001441
00001441	popl	%eax
00001442	movl	0xf797-0x1441(%eax),%ecx
00001448	movl	%ecx,0xfffffee8(%ebp)
0000144e	movl	(%ecx),%ecx
00001450	movl	%ecx,0xf0(%ebp)
00001453	movl	0x0c(%ebp),%ecx
00001456	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
0000145a	jne	0x00001464
0000145c	leal	0xc978-0x1441(%eax),%eax
00001462	jmp	0x00001466
00001464	movl	(%ecx),%eax
00001466	movl	0x10(%ebp),%ecx
00001469	movl	0x08(%ebp),%edi
0000146c	movl	%ecx,0x0c(%esp)
00001470	movl	%eax,0x08(%esp)
00001474	leal	0xfffffeec(%ebp),%ebx
0000147a	movl	%ebx,(%esp)
0000147d	movl	$0x00000104,0x04(%esp)
00001485	calll	V_MakeAbsolutePath(char*, int, char const*, char const*)
0000148a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
00001491	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00001497	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edi)
0000149e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000014a5	movl	%ebx,(%esp)
000014a8	calll	_strlen
000014ad	movl	%eax,%esi
000014af	incl	%esi
000014b0	movl	%esi,0x0c(%edi)
000014b3	testl	%esi,%esi
000014b5	movl	%esi,%eax
000014b7	jle	0x000014d4
000014b9	movl	%esi,0x04(%esp)
000014bd	movl	%edi,(%esp)
000014c0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000014c5	movl	0x04(%edi),%eax
000014c8	cmpl	%esi,%eax
000014ca	jge	0x000014d1
000014cc	movl	%eax,0x0c(%edi)
000014cf	jmp	0x000014d4
000014d1	movl	0x0c(%edi),%eax
000014d4	testl	%eax,%eax
000014d6	je	0x0000150e
000014d8	movl	(%edi),%ecx
000014da	leal	0xfffffeec(%ebp,%esi),%edx
000014e1	cmpl	%edx,%ecx
000014e3	jae	0x000014ec
000014e5	leal	(%ecx,%eax),%edx
000014e8	cmpl	%ebx,%edx
000014ea	ja	0x000014fe
000014ec	movl	%eax,0x08(%esp)
000014f0	movl	%ebx,0x04(%esp)
000014f4	movl	%ecx,(%esp)
000014f7	calll	_memcpy
000014fc	jmp	0x0000150e
000014fe	movl	%eax,0x08(%esp)
00001502	movl	%ebx,0x04(%esp)
00001506	movl	%ecx,(%esp)
00001509	calll	_memmove
0000150e	movl	0xfffffee8(%ebp),%eax
00001514	movl	(%eax),%eax
00001516	cmpl	0xf0(%ebp),%eax
00001519	jne	0x00001528
0000151b	addl	$0x0000011c,%esp
00001521	popl	%esi
00001522	popl	%edi
00001523	popl	%ebx
00001524	popl	%ebp
00001525	retl	$0x0004
00001528	calll	___stack_chk_fail
0000152d	nopl	(%eax)
CUtlString::UnqualifiedFilename():
00001530	pushl	%ebp
00001531	movl	%esp,%ebp
00001533	pushl	%ebx
00001534	pushl	%edi
00001535	pushl	%esi
00001536	subl	$0x0c,%esp
00001539	calll	0x0000153e
0000153e	popl	%eax
0000153f	movl	0x0c(%ebp),%ecx
00001542	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00001546	jne	0x00001550
00001548	leal	0xc978-0x153e(%eax),%eax
0000154e	jmp	0x00001552
00001550	movl	(%ecx),%eax
00001552	movl	0x08(%ebp),%ebx
00001555	movl	%eax,(%esp)
00001558	calll	V_UnqualifiedFileName(char const*)
0000155d	movl	%eax,%esi
0000155f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001566	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000156c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001573	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000157a	testl	%esi,%esi
0000157c	jne	0x00001587
0000157e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001585	jmp	0x000015eb
00001587	movl	%esi,(%esp)
0000158a	calll	_strlen
0000158f	movl	%eax,%edi
00001591	incl	%edi
00001592	movl	%edi,0x0c(%ebx)
00001595	testl	%edi,%edi
00001597	movl	%edi,%eax
00001599	jle	0x000015b6
0000159b	movl	%edi,0x04(%esp)
0000159f	movl	%ebx,(%esp)
000015a2	calll	CUtlMemory<unsigned char, int>::Grow(int)
000015a7	movl	0x04(%ebx),%eax
000015aa	cmpl	%edi,%eax
000015ac	jge	0x000015b3
000015ae	movl	%eax,0x0c(%ebx)
000015b1	jmp	0x000015b6
000015b3	movl	0x0c(%ebx),%eax
000015b6	testl	%eax,%eax
000015b8	je	0x000015eb
000015ba	addl	%esi,%edi
000015bc	movl	(%ebx),%ecx
000015be	cmpl	%edi,%ecx
000015c0	jae	0x000015c9
000015c2	leal	(%ecx,%eax),%edx
000015c5	cmpl	%esi,%edx
000015c7	ja	0x000015db
000015c9	movl	%eax,0x08(%esp)
000015cd	movl	%esi,0x04(%esp)
000015d1	movl	%ecx,(%esp)
000015d4	calll	_memcpy
000015d9	jmp	0x000015eb
000015db	movl	%eax,0x08(%esp)
000015df	movl	%esi,0x04(%esp)
000015e3	movl	%ecx,(%esp)
000015e6	calll	_memmove
000015eb	addl	$0x0c,%esp
000015ee	popl	%esi
000015ef	popl	%edi
000015f0	popl	%ebx
000015f1	popl	%ebp
000015f2	retl	$0x0004
000015f5	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::DirName():
00001600	pushl	%ebp
00001601	movl	%esp,%ebp
00001603	pushl	%ebx
00001604	pushl	%edi
00001605	pushl	%esi
00001606	subl	$0x1c,%esp
00001609	calll	0x0000160e
0000160e	popl	%eax
0000160f	movl	0x0c(%ebp),%ecx
00001612	movl	0x08(%ebp),%ebx
00001615	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00001619	jne	0x00001644
0000161b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00001622	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001629	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000162f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001636	leal	0x04(%ebx),%ecx
00001639	movl	%ecx,0xec(%ebp)
0000163c	leal	0xc978-0x160e(%eax),%edi
00001642	jmp	0x0000166f
00001644	movl	(%ecx),%edi
00001646	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000164d	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001654	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000165a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001661	leal	0x04(%ebx),%eax
00001664	movl	%eax,0xec(%ebp)
00001667	testl	%edi,%edi
00001669	je	0x00001732
0000166f	movl	%ebx,0xf0(%ebp)
00001672	movl	%edi,(%esp)
00001675	calll	_strlen
0000167a	movl	%eax,%esi
0000167c	incl	%esi
0000167d	movl	%esi,0x0c(%ebx)
00001680	testl	%esi,%esi
00001682	movl	%esi,%eax
00001684	jle	0x000016a1
00001686	movl	%esi,0x04(%esp)
0000168a	movl	%ebx,(%esp)
0000168d	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001692	movl	0x04(%ebx),%eax
00001695	cmpl	%esi,%eax
00001697	jge	0x0000169e
00001699	movl	%eax,0x0c(%ebx)
0000169c	jmp	0x000016a1
0000169e	movl	0x0c(%ebx),%eax
000016a1	testl	%eax,%eax
000016a3	jne	0x000016ab
000016a5	movl	%ebx,%ecx
000016a7	movl	(%ecx),%ebx
000016a9	jmp	0x000016df
000016ab	addl	%edi,%esi
000016ad	movl	(%ebx),%ebx
000016af	cmpl	%esi,%ebx
000016b1	jae	0x000016ba
000016b3	leal	(%ebx,%eax),%ecx
000016b6	cmpl	%edi,%ecx
000016b8	ja	0x000016cc
000016ba	movl	%eax,0x08(%esp)
000016be	movl	%edi,0x04(%esp)
000016c2	movl	%ebx,(%esp)
000016c5	calll	_memcpy
000016ca	jmp	0x000016dc
000016cc	movl	%eax,0x08(%esp)
000016d0	movl	%edi,0x04(%esp)
000016d4	movl	%ebx,(%esp)
000016d7	calll	_memmove
000016dc	movl	0x08(%ebp),%ecx
000016df	movl	0x0c(%ecx),%eax
000016e2	movl	%ecx,%edi
000016e4	movl	%eax,0x04(%esp)
000016e8	movl	%ebx,(%esp)
000016eb	calll	V_StripLastDir(char*, int)
000016f0	movl	%ebx,(%esp)
000016f3	calll	V_StripTrailingSlash(char*)
000016f8	addl	$0x1c,%esp
000016fb	popl	%esi
000016fc	popl	%edi
000016fd	popl	%ebx
000016fe	popl	%ebp
000016ff	retl	$0x0004
00001702	movl	%eax,%esi
00001704	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
00001708	js	0x0000172a
0000170a	movl	0xf0(%ebp),%edi
0000170d	movl	(%edi),%eax
0000170f	testl	%eax,%eax
00001711	je	0x00001721
00001713	movl	%eax,(%esp)
00001716	calll	_free
0000171b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00001721	movl	0xec(%ebp),%eax
00001724	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
0000172a	movl	%esi,(%esp)
0000172d	calll	__Unwind_Resume
00001732	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001739	movl	%ebx,%ecx
0000173b	xorl	%ebx,%ebx
0000173d	movl	%ecx,0xf0(%ebp)
00001740	jmp	0x000016df
00001742	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::PathJoin(char const*, char const*):
00001750	pushl	%ebp
00001751	movl	%esp,%ebp
00001753	pushl	%ebx
00001754	pushl	%edi
00001755	pushl	%esi
00001756	subl	$0x0000011c,%esp
0000175c	calll	0x00001761
00001761	popl	%eax
00001762	movl	0xf797-0x1761(%eax),%eax
00001768	movl	%eax,0xfffffee8(%ebp)
0000176e	movl	(%eax),%eax
00001770	movl	%eax,0xf0(%ebp)
00001773	leal	0xfffffeec(%ebp),%ebx
00001779	movl	%ebx,0x08(%esp)
0000177d	movl	0x10(%ebp),%eax
00001780	movl	%eax,0x04(%esp)
00001784	movl	0x0c(%ebp),%eax
00001787	movl	%eax,(%esp)
0000178a	movl	$0x00000104,0x0c(%esp)
00001792	calll	V_ComposeFileName(char const*, char const*, char*, int)
00001797	movl	0x08(%ebp),%edi
0000179a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
000017a1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
000017a7	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edi)
000017ae	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000017b5	movl	%ebx,(%esp)
000017b8	calll	_strlen
000017bd	movl	%eax,%esi
000017bf	incl	%esi
000017c0	movl	%esi,0x0c(%edi)
000017c3	testl	%esi,%esi
000017c5	movl	%esi,%eax
000017c7	jle	0x000017e4
000017c9	movl	%esi,0x04(%esp)
000017cd	movl	%edi,(%esp)
000017d0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000017d5	movl	0x04(%edi),%eax
000017d8	cmpl	%esi,%eax
000017da	jge	0x000017e1
000017dc	movl	%eax,0x0c(%edi)
000017df	jmp	0x000017e4
000017e1	movl	0x0c(%edi),%eax
000017e4	testl	%eax,%eax
000017e6	je	0x0000181e
000017e8	movl	(%edi),%ecx
000017ea	leal	0xfffffeec(%ebp,%esi),%edx
000017f1	cmpl	%edx,%ecx
000017f3	jae	0x000017fc
000017f5	leal	(%ecx,%eax),%edx
000017f8	cmpl	%ebx,%edx
000017fa	ja	0x0000180e
000017fc	movl	%eax,0x08(%esp)
00001800	movl	%ebx,0x04(%esp)
00001804	movl	%ecx,(%esp)
00001807	calll	_memcpy
0000180c	jmp	0x0000181e
0000180e	movl	%eax,0x08(%esp)
00001812	movl	%ebx,0x04(%esp)
00001816	movl	%ecx,(%esp)
00001819	calll	_memmove
0000181e	movl	0xfffffee8(%ebp),%eax
00001824	movl	(%eax),%eax
00001826	cmpl	0xf0(%ebp),%eax
00001829	jne	0x00001838
0000182b	addl	$0x0000011c,%esp
00001831	popl	%esi
00001832	popl	%edi
00001833	popl	%ebx
00001834	popl	%ebp
00001835	retl	$0x0004
00001838	calll	___stack_chk_fail
0000183d	nopl	(%eax)
CUtlString::Append(char const*):
00001840	jmp	CUtlString::operator+=(char const*)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/choreoobjects.a(utlsymbol.o):
(__TEXT,__text) section
CUtlSymbol::Initialize():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	calll	0x0000000d
0000000d	popl	%edi
0000000e	movb	__ZZN10CUtlSymbol10InitializeEvE18symbolsInitialized.b-0xd(%edi),%al
00000014	testb	%al,%al
00000016	jne	0x000000a3
0000001c	movl	$0x0000012c,(%esp)
00000023	calll	operator new(unsigned long)
00000028	movl	%eax,%esi
0000002a	movl	$0x00000020,0x08(%esi)
00000031	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000038	movl	$0x00000180,(%esp)
0000003f	calll	_malloc
00000044	movl	%eax,0x04(%esi)
00000047	movw	$0xffff,0x10(%esi)
0000004d	movw	CUtlSymbol::Initialize(),0x12(%esi)
00000053	movw	$0xffff,0x14(%esi)
00000059	movw	$0xffff,0x16(%esi)
0000005f	movl	%eax,0x18(%esi)
00000062	movb	CUtlSymbol::Initialize(),0x1c(%esi)
00000066	movl	CUtlSymbol::Initialize(),0x24(%esi)
0000006d	movl	CUtlSymbol::Initialize(),0x28(%esi)
00000074	movl	$0x00000008,0x2c(%esi)
0000007b	movl	CUtlSymbol::Initialize(),0x30(%esi)
00000082	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000089	movl	%esi,%eax
0000008b	addl	$0x38,%eax
0000008e	movl	%eax,(%esp)
00000091	calll	CThreadRWLock::CThreadRWLock()
00000096	movl	%esi,CUtlSymbol::s_pSymbolTable-0xd(%edi)
0000009c	movb	$0x01,__ZZN10CUtlSymbol10InitializeEvE18symbolsInitialized.b-0xd(%edi)
000000a3	addl	$0x10,%esp
000000a6	popl	%esi
000000a7	popl	%edi
000000a8	popl	%ebp
000000a9	ret
000000aa	movl	%eax,%edi
000000ac	movl	%esi,(%esp)
000000af	calll	CUtlSymbolTable::~CUtlSymbolTable()
000000b4	movl	%esi,(%esp)
000000b7	calll	operator delete(void*)
000000bc	movl	%edi,(%esp)
000000bf	calll	__Unwind_Resume
000000c4	calll	std::terminate()
000000c9	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbol::CurrTable():
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%esi
000000d4	pushl	%eax
000000d5	calll	0x000000da
000000da	popl	%esi
000000db	calll	CUtlSymbol::Initialize()
000000e0	movl	CUtlSymbol::s_pSymbolTable-0xda(%esi),%eax
000000e6	addl	$0x04,%esp
000000e9	popl	%esi
000000ea	popl	%ebp
000000eb	ret
000000ec	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbol::CUtlSymbol(char const*):
000000f0	pushl	%ebp
000000f1	movl	%esp,%ebp
000000f3	pushl	%edi
000000f4	pushl	%esi
000000f5	subl	$0x20,%esp
000000f8	calll	0x000000fd
000000fd	popl	%esi
000000fe	calll	CUtlSymbol::Initialize()
00000103	movl	CUtlSymbol::s_pSymbolTable-0xfd(%esi),%edi
00000109	leal	0x38(%edi),%esi
0000010c	movl	%esi,(%esp)
0000010f	calll	CThreadRWLock::LockForWrite()
00000114	movl	0x0c(%ebp),%eax
00000117	movl	%eax,0x08(%esp)
0000011b	movl	%edi,0x04(%esp)
0000011f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000122	movl	%eax,(%esp)
00000125	calll	CUtlSymbolTable::AddString(char const*)
0000012a	subl	$0x04,%esp
0000012d	movl	%esi,(%esp)
00000130	calll	CThreadRWLock::UnlockWrite()
00000135	movl	0x08(%ebp),%eax
00000138	movw	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%cx
0000013c	movw	%cx,(%eax)
0000013f	addl	$0x20,%esp
00000142	popl	%esi
00000143	popl	%edi
00000144	popl	%ebp
00000145	ret
00000146	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::CUtlSymbol(char const*):
00000150	pushl	%ebp
00000151	movl	%esp,%ebp
00000153	pushl	%edi
00000154	pushl	%esi
00000155	subl	$0x20,%esp
00000158	calll	0x0000015d
0000015d	popl	%esi
0000015e	calll	CUtlSymbol::Initialize()
00000163	movl	CUtlSymbol::s_pSymbolTable-0x15d(%esi),%edi
00000169	leal	0x38(%edi),%esi
0000016c	movl	%esi,(%esp)
0000016f	calll	CThreadRWLock::LockForWrite()
00000174	movl	0x0c(%ebp),%eax
00000177	movl	%eax,0x08(%esp)
0000017b	movl	%edi,0x04(%esp)
0000017f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000182	movl	%eax,(%esp)
00000185	calll	CUtlSymbolTable::AddString(char const*)
0000018a	subl	$0x04,%esp
0000018d	movl	%esi,(%esp)
00000190	calll	CThreadRWLock::UnlockWrite()
00000195	movl	0x08(%ebp),%eax
00000198	movw	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%cx
0000019c	movw	%cx,(%eax)
0000019f	addl	$0x20,%esp
000001a2	popl	%esi
000001a3	popl	%edi
000001a4	popl	%ebp
000001a5	ret
000001a6	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::String() const:
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	pushl	%esi
000001b4	subl	$0x14,%esp
000001b7	calll	0x000001bc
000001bc	popl	%esi
000001bd	calll	CUtlSymbol::Initialize()
000001c2	movl	0x08(%ebp),%eax
000001c5	movw	(%eax),%cx
000001c8	movl	CUtlSymbol::s_pSymbolTable-0x1bc(%esi),%eax
000001ce	movw	%cx,0xf8(%ebp)
000001d2	leal	0xf8(%ebp),%ecx
000001d5	movl	%ecx,0x04(%esp)
000001d9	movl	%eax,(%esp)
000001dc	calll	CUtlSymbolTableMT::String(CUtlSymbol) const
000001e1	addl	$0x14,%esp
000001e4	popl	%esi
000001e5	popl	%ebp
000001e6	ret
000001e7	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::DisableStaticSymbolTable():
000001f0	calll	0x000001f5
000001f5	popl	%eax
000001f6	movb	CUtlSymbol::Initialize(),CUtlSymbol::s_bAllowStaticSymbolTable-0x1f5(%eax)
000001fd	ret
000001fe	nop
CUtlSymbol::operator==(char const*) const:
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	pushl	%ebx
00000204	pushl	%edi
00000205	pushl	%esi
00000206	subl	$0x0c,%esp
00000209	calll	0x0000020e
0000020e	popl	%edi
0000020f	xorb	%al,%al
00000211	movl	0x08(%ebp),%ebx
00000214	cmpw	$0xff,(%ebx)
00000218	je	0x0000024f
0000021a	movl	0x0c(%ebp),%esi
0000021d	calll	CUtlSymbol::Initialize()
00000222	movw	(%ebx),%cx
00000225	movl	CUtlSymbol::s_pSymbolTable-0x20e(%edi),%eax
0000022b	movw	%cx,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
0000022f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%ecx
00000232	movl	%ecx,0x04(%esp)
00000236	movl	%eax,(%esp)
00000239	calll	CUtlSymbolTableMT::String(CUtlSymbol) const
0000023e	movl	%esi,0x04(%esp)
00000242	movl	%eax,(%esp)
00000245	calll	_strcmp
0000024a	testl	%eax,%eax
0000024c	sete	%al
0000024f	movzbl	%al,%eax
00000252	addl	$0x0c,%esp
00000255	popl	%esi
00000256	popl	%edi
00000257	popl	%ebx
00000258	popl	%ebp
00000259	ret
0000025a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const:
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x0c,%esp
00000269	movl	0x0c(%ebp),%eax
0000026c	movw	0x02(%eax),%si
00000270	movzwl	(%eax),%edx
00000273	movl	0x10(%ebp),%eax
00000276	movl	0x08(%ebp),%ecx
00000279	cmpl	$0x0000ffff,%edx
0000027f	jne	0x0000028c
00000281	cmpw	$0xff,%si
00000285	jne	0x0000028c
00000287	movl	0x20(%ecx),%edx
0000028a	jmp	0x00000299
0000028c	movzwl	%si,%esi
0000028f	movl	0x24(%ecx),%edi
00000292	movl	(%edi,%edx,4),%edx
00000295	leal	0x08(%edx,%esi),%edx
00000299	movw	0x02(%eax),%si
0000029d	movzwl	(%eax),%eax
000002a0	cmpl	$0x0000ffff,%eax
000002a5	jne	0x000002b2
000002a7	cmpw	$0xff,%si
000002ab	jne	0x000002b2
000002ad	movl	0x20(%ecx),%esi
000002b0	jmp	0x000002bf
000002b2	movzwl	%si,%esi
000002b5	movl	0x24(%ecx),%edi
000002b8	movl	(%edi,%eax,4),%eax
000002bb	leal	0x08(%eax,%esi),%esi
000002bf	testl	%edx,%edx
000002c1	jne	0x000002c9
000002c3	xorb	%al,%al
000002c5	testl	%esi,%esi
000002c7	jne	0x00000304
000002c9	testl	%edx,%edx
000002cb	sete	%bl
000002ce	testl	%esi,%esi
000002d0	jne	0x000002d9
000002d2	movb	$0x01,%al
000002d4	cmpb	$0x01,%bl
000002d7	jne	0x00000304
000002d9	xorb	%al,%al
000002db	movl	%edx,%edi
000002dd	orl	%esi,%edi
000002df	je	0x00000304
000002e1	testb	$0x01,0x1c(%ecx)
000002e5	jne	0x000002f5
000002e7	movl	%esi,0x04(%esp)
000002eb	movl	%edx,(%esp)
000002ee	calll	_strcmp
000002f3	jmp	0x00000301
000002f5	movl	%esi,0x04(%esp)
000002f9	movl	%edx,(%esp)
000002fc	calll	V_stricmp(char const*, char const*)
00000301	shrl	$0x1f,%eax
00000304	movzbl	%al,%eax
00000307	addl	$0x0c,%esp
0000030a	popl	%esi
0000030b	popl	%edi
0000030c	popl	%ebx
0000030d	popl	%ebp
0000030e	ret
0000030f	nop
CUtlSymbolTable::CUtlSymbolTable(int, int, bool):
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	pushl	%esi
00000314	pushl	%eax
00000315	movl	0x08(%ebp),%esi
00000318	movl	CUtlSymbol::Initialize(),0x04(%esi)
0000031f	movl	0x10(%ebp),%eax
00000322	movl	%eax,0x08(%esi)
00000325	movl	0x0c(%ebp),%ecx
00000328	movl	%ecx,0x0c(%esi)
0000032b	testl	%eax,%eax
0000032d	jne	0x00000333
0000032f	xorl	%eax,%eax
00000331	jmp	0x00000341
00000333	imull	$0x0c,%eax,%eax
00000336	movl	%eax,(%esp)
00000339	calll	_malloc
0000033e	movl	%eax,0x04(%esi)
00000341	movb	0x14(%ebp),%cl
00000344	movw	$0xffff,0x10(%esi)
0000034a	movw	CUtlSymbol::Initialize(),0x12(%esi)
00000350	movw	$0xffff,0x14(%esi)
00000356	movw	$0xffff,0x16(%esi)
0000035c	movl	%eax,0x18(%esi)
0000035f	movb	%cl,0x1c(%esi)
00000362	movl	CUtlSymbol::Initialize(),0x24(%esi)
00000369	movl	CUtlSymbol::Initialize(),0x28(%esi)
00000370	movl	$0x00000008,0x2c(%esi)
00000377	movl	CUtlSymbol::Initialize(),0x30(%esi)
0000037e	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000385	addl	$0x04,%esp
00000388	popl	%esi
00000389	popl	%ebp
0000038a	ret
0000038b	nopl	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::CUtlSymbolTable(int, int, bool):
00000390	pushl	%ebp
00000391	movl	%esp,%ebp
00000393	pushl	%esi
00000394	pushl	%eax
00000395	movl	0x08(%ebp),%esi
00000398	movl	CUtlSymbol::Initialize(),0x04(%esi)
0000039f	movl	0x10(%ebp),%eax
000003a2	movl	%eax,0x08(%esi)
000003a5	movl	0x0c(%ebp),%ecx
000003a8	movl	%ecx,0x0c(%esi)
000003ab	testl	%eax,%eax
000003ad	jne	0x000003b3
000003af	xorl	%eax,%eax
000003b1	jmp	0x000003c1
000003b3	imull	$0x0c,%eax,%eax
000003b6	movl	%eax,(%esp)
000003b9	calll	_malloc
000003be	movl	%eax,0x04(%esi)
000003c1	movb	0x14(%ebp),%cl
000003c4	movw	$0xffff,0x10(%esi)
000003ca	movw	CUtlSymbol::Initialize(),0x12(%esi)
000003d0	movw	$0xffff,0x14(%esi)
000003d6	movw	$0xffff,0x16(%esi)
000003dc	movl	%eax,0x18(%esi)
000003df	movb	%cl,0x1c(%esi)
000003e2	movl	CUtlSymbol::Initialize(),0x24(%esi)
000003e9	movl	CUtlSymbol::Initialize(),0x28(%esi)
000003f0	movl	$0x00000008,0x2c(%esi)
000003f7	movl	CUtlSymbol::Initialize(),0x30(%esi)
000003fe	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000405	addl	$0x04,%esp
00000408	popl	%esi
00000409	popl	%ebp
0000040a	ret
0000040b	nopl	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::~CUtlSymbolTable():
00000410	jmp	CUtlSymbolTable::~CUtlSymbolTable()
00000415	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::~CUtlSymbolTable():
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%edi
00000424	pushl	%esi
00000425	subl	$0x10,%esp
00000428	movl	0x08(%ebp),%edi
0000042b	movl	%edi,(%esp)
0000042e	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
00000433	movw	$0xffff,0x14(%edi)
00000439	cmpl	CUtlSymbol::Initialize(),0x0c(%edi)
0000043d	js	0x0000045c
0000043f	movl	0x04(%edi),%eax
00000442	testl	%eax,%eax
00000444	je	0x00000455
00000446	movl	%eax,(%esp)
00000449	calll	_free
0000044e	movl	CUtlSymbol::Initialize(),0x04(%edi)
00000455	movl	CUtlSymbol::Initialize(),0x08(%edi)
0000045c	movw	$0xffff,0x16(%edi)
00000462	cmpl	CUtlSymbol::Initialize(),0x30(%edi)
00000466	jle	0x00000484
00000468	xorl	%esi,%esi
0000046a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
00000470	movl	0x24(%edi),%eax
00000473	movl	(%eax,%esi,4),%eax
00000476	movl	%eax,(%esp)
00000479	calll	_free
0000047e	incl	%esi
0000047f	cmpl	0x30(%edi),%esi
00000482	jl	0x00000470
00000484	movl	CUtlSymbol::Initialize(),0x30(%edi)
0000048b	movl	0x24(%edi),%eax
0000048e	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
00000492	jns	0x00000499
00000494	movl	%eax,0x34(%edi)
00000497	jmp	0x000004d7
00000499	testl	%eax,%eax
0000049b	jne	0x000004ad
0000049d	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004a4	movl	CUtlSymbol::Initialize(),0x34(%edi)
000004ab	jmp	0x000004d0
000004ad	movl	%eax,(%esp)
000004b0	calll	_free
000004b5	movl	CUtlSymbol::Initialize(),0x24(%edi)
000004bc	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
000004c0	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004c7	movl	CUtlSymbol::Initialize(),0x34(%edi)
000004ce	js	0x000004d7
000004d0	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004d7	addl	$0x10,%esp
000004da	popl	%esi
000004db	popl	%edi
000004dc	popl	%ebp
000004dd	jmp	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
000004e2	movl	%eax,%esi
000004e4	movl	CUtlSymbol::Initialize(),0x30(%edi)
000004eb	movl	0x24(%edi),%eax
000004ee	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
000004f2	jns	0x000004f9
000004f4	movl	%eax,0x34(%edi)
000004f7	jmp	0x00000537
000004f9	testl	%eax,%eax
000004fb	jne	0x0000050d
000004fd	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000504	movl	CUtlSymbol::Initialize(),0x34(%edi)
0000050b	jmp	0x00000530
0000050d	movl	%eax,(%esp)
00000510	calll	_free
00000515	movl	CUtlSymbol::Initialize(),0x24(%edi)
0000051c	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
00000520	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000527	movl	CUtlSymbol::Initialize(),0x34(%edi)
0000052e	js	0x00000537
00000530	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000537	movl	%edi,(%esp)
0000053a	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
0000053f	movl	%esi,(%esp)
00000542	calll	__Unwind_Resume
00000547	calll	std::terminate()
0000054c	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbolTable::RemoveAll():
00000550	pushl	%ebp
00000551	movl	%esp,%ebp
00000553	pushl	%edi
00000554	pushl	%esi
00000555	subl	$0x10,%esp
00000558	movl	0x08(%ebp),%esi
0000055b	movl	%esi,(%esp)
0000055e	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
00000563	movw	$0xffff,0x14(%esi)
00000569	cmpl	CUtlSymbol::Initialize(),0x0c(%esi)
0000056d	js	0x0000058c
0000056f	movl	0x04(%esi),%eax
00000572	testl	%eax,%eax
00000574	je	0x00000585
00000576	movl	%eax,(%esp)
00000579	calll	_free
0000057e	movl	CUtlSymbol::Initialize(),0x04(%esi)
00000585	movl	CUtlSymbol::Initialize(),0x08(%esi)
0000058c	movw	$0xffff,0x16(%esi)
00000592	cmpl	CUtlSymbol::Initialize(),0x30(%esi)
00000596	jle	0x000005b4
00000598	xorl	%edi,%edi
0000059a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
000005a0	movl	0x24(%esi),%eax
000005a3	movl	(%eax,%edi,4),%eax
000005a6	movl	%eax,(%esp)
000005a9	calll	_free
000005ae	incl	%edi
000005af	cmpl	0x30(%esi),%edi
000005b2	jl	0x000005a0
000005b4	movl	CUtlSymbol::Initialize(),0x30(%esi)
000005bb	addl	$0x10,%esp
000005be	popl	%esi
000005bf	popl	%edi
000005c0	popl	%ebp
000005c1	ret
000005c2	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::Find(char const*) const:
000005d0	pushl	%ebp
000005d1	movl	%esp,%ebp
000005d3	pushl	%esi
000005d4	subl	$0x14,%esp
000005d7	movl	0x10(%ebp),%ecx
000005da	movl	0x08(%ebp),%esi
000005dd	testl	%ecx,%ecx
000005df	jne	0x000005e8
000005e1	movw	$0xffff,(%esi)
000005e6	jmp	0x0000060c
000005e8	movl	0x0c(%ebp),%eax
000005eb	movl	%ecx,0x20(%eax)
000005ee	movw	$0xffff,0xf8(%ebp)
000005f4	movw	$0xffff,0xfa(%ebp)
000005fa	leal	0xf8(%ebp),%ecx
000005fd	movl	%ecx,0x04(%esp)
00000601	movl	%eax,(%esp)
00000604	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
00000609	movw	%ax,(%esi)
0000060c	addl	$0x14,%esp
0000060f	popl	%esi
00000610	popl	%ebp
00000611	retl	$0x0004
00000614	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::FindPoolWithSpace(int) const:
00000620	pushl	%ebx
00000621	pushl	%edi
00000622	pushl	%esi
00000623	movl	0x10(%esp),%ecx
00000627	movl	0x30(%ecx),%esi
0000062a	xorl	%edx,%edx
0000062c	movl	0x14(%esp),%edi
00000630	jmp	0x00000641
00000632	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000640	incl	%edx
00000641	movl	$0xffffffff,%eax
00000646	cmpl	%esi,%edx
00000648	jge	0x0000065b
0000064a	movl	0x24(%ecx),%eax
0000064d	movl	(%eax,%edx,4),%ebx
00000650	movl	(%ebx),%eax
00000652	subl	0x04(%ebx),%eax
00000655	cmpl	%edi,%eax
00000657	jl	0x00000640
00000659	movl	%edx,%eax
0000065b	popl	%esi
0000065c	popl	%edi
0000065d	popl	%ebx
0000065e	ret
0000065f	nop
CUtlSymbolTable::AddString(char const*):
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x2c,%esp
00000669	movl	0x10(%ebp),%ebx
0000066c	movl	0x08(%ebp),%esi
0000066f	testl	%ebx,%ebx
00000671	jne	0x0000067d
00000673	movw	$0xffff,(%esi)
00000678	jmp	0x000007d4
0000067d	movl	0x0c(%ebp),%edi
00000680	movl	%ebx,0x20(%edi)
00000683	movw	$0xffff,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000689	movw	$0xffff,0xf2(%ebp)
0000068f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000692	movl	%eax,0x04(%esp)
00000696	movl	%edi,(%esp)
00000699	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
0000069e	cmpw	$0xff,%ax
000006a2	je	0x000006ac
000006a4	movw	%ax,(%esi)
000006a7	jmp	0x000007d4
000006ac	movl	%ebx,(%esp)
000006af	calll	_strlen
000006b4	movl	0x30(%edi),%ebx
000006b7	movl	%edi,%esi
000006b9	incl	%eax
000006ba	movl	%eax,0xe4(%ebp)
000006bd	xorl	%edi,%edi
000006bf	jmp	0x000006d1
000006c1	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
000006d0	incl	%edi
000006d1	cmpl	%ebx,%edi
000006d3	jge	0x000006ee
000006d5	movl	0x24(%esi),%eax
000006d8	movl	(%eax,%edi,4),%edx
000006db	movl	(%edx),%ecx
000006dd	subl	0x04(%edx),%ecx
000006e0	cmpl	0xe4(%ebp),%ecx
000006e3	jl	0x000006d0
000006e5	cmpl	$0xff,%edi
000006e8	jne	0x0000078b
000006ee	movl	0xe4(%ebp),%eax
000006f1	movl	%eax,0xe4(%ebp)
000006f4	cmpl	$0x00000800,%eax
000006f9	movl	$0x00000800,%edi
000006fe	cmovgl	%eax,%edi
00000701	leal	0x0b(%edi),%eax
00000704	movl	%eax,(%esp)
00000707	calll	_malloc
0000070c	movl	%eax,0xdc(%ebp)
0000070f	movl	%edi,(%eax)
00000711	movl	CUtlSymbol::Initialize(),0x04(%eax)
00000718	movl	0x28(%esi),%eax
0000071b	leal	0x24(%esi),%edi
0000071e	leal	0x01(%ebx),%edx
00000721	cmpl	%eax,%edx
00000723	movl	%ebx,%ecx
00000725	jle	0x00000744
00000727	movl	%edx,%ecx
00000729	subl	%eax,%ecx
0000072b	movl	%ecx,0x04(%esp)
0000072f	movl	%edi,(%esp)
00000732	movl	%edi,0xe0(%ebp)
00000735	movl	%edx,%edi
00000737	calll	CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::Grow(int)
0000073c	movl	%edi,%edx
0000073e	movl	0xe0(%ebp),%edi
00000741	movl	0x30(%esi),%ecx
00000744	movl	%edi,0xe0(%ebp)
00000747	incl	%ecx
00000748	movl	%ecx,0x30(%esi)
0000074b	movl	0x24(%esi),%eax
0000074e	movl	%eax,0x34(%esi)
00000751	subl	%ebx,%ecx
00000753	decl	%ecx
00000754	testl	%ecx,%ecx
00000756	jle	0x00000776
00000758	shll	$0x02,%ecx
0000075b	movl	%ecx,0x08(%esp)
0000075f	leal	(%eax,%ebx,4),%ecx
00000762	movl	%ecx,0x04(%esp)
00000766	leal	(%eax,%edx,4),%eax
00000769	movl	%eax,(%esp)
0000076c	calll	_memmove
00000771	movl	0xe0(%ebp),%eax
00000774	movl	(%eax),%eax
00000776	leal	CUtlSymbol::Initialize()(,%ebx,4),%ecx
0000077d	addl	%eax,%ecx
0000077f	je	0x00000789
00000781	movl	0xdc(%ebp),%eax
00000784	movl	%eax,(%ecx)
00000786	movl	0x24(%esi),%eax
00000789	movl	%ebx,%edi
0000078b	movl	(%eax,%edi,4),%ebx
0000078e	movl	0x04(%ebx),%ecx
00000791	movl	%ecx,0xe0(%ebp)
00000794	movl	0xe4(%ebp),%eax
00000797	movl	%eax,0x08(%esp)
0000079b	movl	0x10(%ebp),%eax
0000079e	movl	%eax,0x04(%esp)
000007a2	leal	0x08(%ebx,%ecx),%eax
000007a6	movl	%eax,(%esp)
000007a9	calll	_memcpy
000007ae	movl	0xe4(%ebp),%eax
000007b1	addl	%eax,0x04(%ebx)
000007b4	movw	%di,0xe8(%ebp)
000007b8	movl	0xe0(%ebp),%eax
000007bb	movw	%ax,0xea(%ebp)
000007bf	leal	0xe8(%ebp),%eax
000007c2	movl	%eax,0x04(%esp)
000007c6	movl	%esi,(%esp)
000007c9	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
000007ce	movl	0x08(%ebp),%ecx
000007d1	movw	%ax,(%ecx)
000007d4	addl	$0x2c,%esp
000007d7	popl	%esi
000007d8	popl	%edi
000007d9	popl	%ebx
000007da	popl	%ebp
000007db	retl	$0x0004
000007de	nop
CUtlSymbolTable::String(CUtlSymbol) const:
000007e0	pushl	%esi
000007e1	movl	0x0c(%esp),%eax
000007e5	movzwl	(%eax),%eax
000007e8	cmpl	$0x0000ffff,%eax
000007ed	jne	0x000007fd
000007ef	calll	0x000007f4
000007f4	popl	%eax
000007f5	leal	0x2b25b-0x7f4(%eax),%eax
000007fb	popl	%esi
000007fc	ret
000007fd	movl	0x08(%esp),%ecx
00000801	imull	$0x0c,%eax,%eax
00000804	movl	0x04(%ecx),%esi
00000807	movl	0x24(%ecx),%edx
0000080a	movzwl	0x0a(%esi,%eax),%ecx
0000080f	movzwl	0x08(%esi,%eax),%eax
00000814	movl	(%edx,%eax,4),%eax
00000817	leal	0x08(%eax,%ecx),%eax
0000081b	popl	%esi
0000081c	ret
0000081d	nopl	(%eax)
CUtlFilenameSymbolTable::CUtlFilenameSymbolTable():
00000820	pushl	%ebp
00000821	movl	%esp,%ebp
00000823	pushl	%esi
00000824	pushl	%eax
00000825	movl	0x08(%ebp),%esi
00000828	movl	CUtlSymbol::Initialize(),0x10(%esi)
0000082f	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000836	movl	CUtlSymbol::Initialize(),0x08(%esi)
0000083d	movl	CUtlSymbol::Initialize(),0x14(%esi)
00000844	movl	CUtlSymbol::Initialize(),0x10(%esi)
0000084b	movl	$0x00000034,(%esp)
00000852	calll	operator new(unsigned long)
00000857	movl	CUtlSymbol::Initialize(),0x04(%eax)
0000085e	movl	CUtlSymbol::Initialize(),(%eax)
00000864	movl	CUtlSymbol::Initialize(),0x0c(%eax)
0000086b	movl	CUtlSymbol::Initialize(),0x08(%eax)
00000872	movl	$0x00000020,0x10(%eax)
00000879	movb	CUtlSymbol::Initialize(),0x14(%eax)
0000087d	movb	CUtlSymbol::Initialize(),0x15(%eax)
00000881	movb	CUtlSymbol::Initialize(),0x16(%eax)
00000885	movl	CUtlSymbol::Initialize(),0x18(%eax)
0000088c	movl	CUtlSymbol::Initialize(),0x1c(%eax)
00000893	movl	CUtlSymbol::Initialize(),0x20(%eax)
0000089a	movw	$0xffff,0x2e(%eax)
000008a0	movw	$0xffff,0x24(%eax)
000008a6	movw	$0xffff,0x26(%eax)
000008ac	movw	$0xffff,0x28(%eax)
000008b2	movw	CUtlSymbol::Initialize(),0x2a(%eax)
000008b8	movw	CUtlSymbol::Initialize(),0x2c(%eax)
000008be	movl	CUtlSymbol::Initialize(),0x30(%eax)
000008c5	movl	%eax,(%esi)
000008c7	addl	$0x04,%esp
000008ca	popl	%esi
000008cb	popl	%ebp
000008cc	ret
000008cd	nopl	(%eax)
CUtlFilenameSymbolTable::CUtlFilenameSymbolTable():
000008d0	pushl	%ebp
000008d1	movl	%esp,%ebp
000008d3	pushl	%esi
000008d4	pushl	%eax
000008d5	movl	0x08(%ebp),%esi
000008d8	movl	CUtlSymbol::Initialize(),0x10(%esi)
000008df	movl	CUtlSymbol::Initialize(),0x0c(%esi)
000008e6	movl	CUtlSymbol::Initialize(),0x08(%esi)
000008ed	movl	CUtlSymbol::Initialize(),0x14(%esi)
000008f4	movl	CUtlSymbol::Initialize(),0x10(%esi)
000008fb	movl	$0x00000034,(%esp)
00000902	calll	operator new(unsigned long)
00000907	movl	CUtlSymbol::Initialize(),0x04(%eax)
0000090e	movl	CUtlSymbol::Initialize(),(%eax)
00000914	movl	CUtlSymbol::Initialize(),0x0c(%eax)
0000091b	movl	CUtlSymbol::Initialize(),0x08(%eax)
00000922	movl	$0x00000020,0x10(%eax)
00000929	movb	CUtlSymbol::Initialize(),0x14(%eax)
0000092d	movb	CUtlSymbol::Initialize(),0x15(%eax)
00000931	movb	CUtlSymbol::Initialize(),0x16(%eax)
00000935	movl	CUtlSymbol::Initialize(),0x18(%eax)
0000093c	movl	CUtlSymbol::Initialize(),0x1c(%eax)
00000943	movl	CUtlSymbol::Initialize(),0x20(%eax)
0000094a	movw	$0xffff,0x2e(%eax)
00000950	movw	$0xffff,0x24(%eax)
00000956	movw	$0xffff,0x26(%eax)
0000095c	movw	$0xffff,0x28(%eax)
00000962	movw	CUtlSymbol::Initialize(),0x2a(%eax)
00000968	movw	CUtlSymbol::Initialize(),0x2c(%eax)
0000096e	movl	CUtlSymbol::Initialize(),0x30(%eax)
00000975	movl	%eax,(%esi)
00000977	addl	$0x04,%esp
0000097a	popl	%esi
0000097b	popl	%ebp
0000097c	ret
0000097d	nopl	(%eax)
CUtlFilenameSymbolTable::~CUtlFilenameSymbolTable():
00000980	pushl	%ebp
00000981	movl	%esp,%ebp
00000983	pushl	%edi
00000984	pushl	%esi
00000985	subl	$0x10,%esp
00000988	movl	0x08(%ebp),%eax
0000098b	movl	(%eax),%edi
0000098d	testl	%edi,%edi
0000098f	je	0x000009a1
00000991	movl	%edi,(%esp)
00000994	calll	CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::~CUtlStableHashtable()
00000999	movl	%edi,(%esp)
0000099c	calll	operator delete(void*)
000009a1	addl	$0x10,%esp
000009a4	popl	%esi
000009a5	popl	%edi
000009a6	popl	%ebp
000009a7	ret
000009a8	movl	%eax,%esi
000009aa	movl	%edi,(%esp)
000009ad	calll	operator delete(void*)
000009b2	movl	%esi,(%esp)
000009b5	calll	__Unwind_Resume
000009ba	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::~CUtlFilenameSymbolTable():
000009c0	pushl	%ebp
000009c1	movl	%esp,%ebp
000009c3	pushl	%edi
000009c4	pushl	%esi
000009c5	subl	$0x10,%esp
000009c8	movl	0x08(%ebp),%eax
000009cb	movl	(%eax),%edi
000009cd	testl	%edi,%edi
000009cf	je	0x000009e1
000009d1	movl	%edi,(%esp)
000009d4	calll	CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::~CUtlStableHashtable()
000009d9	movl	%edi,(%esp)
000009dc	calll	operator delete(void*)
000009e1	addl	$0x10,%esp
000009e4	popl	%esi
000009e5	popl	%edi
000009e6	popl	%ebp
000009e7	ret
000009e8	movl	%eax,%esi
000009ea	movl	%edi,(%esp)
000009ed	calll	operator delete(void*)
000009f2	movl	%esi,(%esp)
000009f5	calll	__Unwind_Resume
000009fa	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::FindOrAddFileName(char const*):
00000a00	pushl	%ebp
00000a01	movl	%esp,%ebp
00000a03	pushl	%ebx
00000a04	pushl	%edi
00000a05	pushl	%esi
00000a06	subl	$0x0000032c,%esp
00000a0c	calll	0x00000a11
00000a11	popl	%eax
00000a12	movl	0x3146f-0xa11(%eax),%eax
00000a18	movl	%eax,0xfffffce0(%ebp)
00000a1e	movl	(%eax),%eax
00000a20	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000a23	xorl	%esi,%esi
00000a25	movl	0x0c(%ebp),%edi
00000a28	testl	%edi,%edi
00000a2a	je	0x00000b5f
00000a30	movl	0x08(%ebp),%ebx
00000a33	movl	%edi,0x04(%esp)
00000a37	movl	%ebx,(%esp)
00000a3a	calll	CUtlFilenameSymbolTable::FindFileName(char const*)
00000a3f	movl	%eax,%esi
00000a41	testl	%esi,%esi
00000a43	jne	0x00000b5f
00000a49	movl	%edi,0x04(%esp)
00000a4d	leal	0xfffffeec(%ebp),%esi
00000a53	movl	%esi,(%esp)
00000a56	movl	$0x00000104,0x08(%esp)
00000a5e	calll	V_strncpy(char*, char const*, int)
00000a63	movl	%esi,(%esp)
00000a66	movl	$0x00000001,0x08(%esp)
00000a6e	movl	$0x0000002f,0x04(%esp)
00000a76	calll	V_RemoveDotSlashes(char*, char, bool)
00000a7b	leal	0xfffffde8(%ebp),%edi
00000a81	movl	%edi,0x04(%esp)
00000a85	movl	%esi,(%esp)
00000a88	movl	$0x00000104,0x08(%esp)
00000a90	calll	V_ExtractFilePath(char const*, char*, int)
00000a95	movl	%edi,(%esp)
00000a98	calll	_strlen
00000a9d	leal	0xfffffeec(%ebp,%eax),%eax
00000aa4	movl	%eax,0x04(%esp)
00000aa8	leal	0xfffffce4(%ebp),%eax
00000aae	movl	%eax,(%esp)
00000ab1	movl	$0x00000104,0x08(%esp)
00000ab9	calll	V_strncpy(char*, char const*, int)
00000abe	calll	_ThreadGetCurrentId
00000ac3	movl	%eax,%esi
00000ac5	leal	0x10(%ebx),%eax
00000ac8	movl	%eax,(%esp)
00000acb	movl	%ebx,%edi
00000acd	leal	0x08(%edi),%ebx
00000ad0	calll	_ThreadInterlockedIncrement
00000ad5	cmpl	CUtlSymbol::Initialize(),0x0c(%edi)
00000ad9	jg	0x00000b0c
00000adb	cmpl	CUtlSymbol::Initialize(),(%ebx)
00000ade	je	0x00000ae4
00000ae0	cmpl	%esi,(%ebx)
00000ae2	jne	0x00000b0c
00000ae4	movl	%esi,0x04(%esp)
00000ae8	movl	%ebx,(%esp)
00000aeb	movl	CUtlSymbol::Initialize(),0x10(%esp)
00000af3	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000afb	movl	CUtlSymbol::Initialize(),0x08(%esp)
00000b03	calll	_ThreadInterlockedAssignIf64
00000b08	testb	%al,%al
00000b0a	jne	0x00000b1a
00000b0c	pause
00000b0e	movl	%esi,0x04(%esp)
00000b12	movl	%ebx,(%esp)
00000b15	calll	CThreadSpinRWLock::SpinLockForWrite(unsigned int)
00000b1a	movl	%edi,%esi
00000b1c	movl	(%esi),%eax
00000b1e	leal	0xfffffde8(%ebp),%ecx
00000b24	movl	%ecx,0x04(%esp)
00000b28	movl	%eax,(%esp)
00000b2b	calll	unsigned int CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::DoInsert<char const*>(char const*)
00000b30	movl	%eax,%edi
00000b32	movl	(%esi),%eax
00000b34	leal	0xfffffce4(%ebp),%ecx
00000b3a	movl	%ecx,0x04(%esp)
00000b3e	movl	%eax,(%esp)
00000b41	calll	unsigned int CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::DoInsert<char const*>(char const*)
00000b46	movl	%eax,%esi
00000b48	movl	%ebx,(%esp)
00000b4b	incl	%edi
00000b4c	movzwl	%di,%eax
00000b4f	shll	$0x10,%esi
00000b52	addl	$0x00010000,%esi
00000b58	orl	%eax,%esi
00000b5a	calll	CThreadSpinRWLock::UnlockWrite()
00000b5f	movl	0xfffffce0(%ebp),%eax
00000b65	movl	(%eax),%eax
00000b67	cmpl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000b6a	jne	0x00000b79
00000b6c	movl	%esi,%eax
00000b6e	addl	$0x0000032c,%esp
00000b74	popl	%esi
00000b75	popl	%edi
00000b76	popl	%ebx
00000b77	popl	%ebp
00000b78	ret
00000b79	calll	___stack_chk_fail
00000b7e	nop
CUtlFilenameSymbolTable::FindFileName(char const*):
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%ebx
00000b84	pushl	%edi
00000b85	pushl	%esi
00000b86	subl	$0x0000032c,%esp
00000b8c	calll	0x00000b91
00000b91	popl	%eax
00000b92	movl	0x3146f-0xb91(%eax),%eax
00000b98	movl	%eax,0xfffffcdc(%ebp)
00000b9e	movl	(%eax),%eax
00000ba0	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000ba3	xorl	%edi,%edi
00000ba5	movl	0x0c(%ebp),%eax
00000ba8	testl	%eax,%eax
00000baa	je	0x00000d53
00000bb0	movl	0x08(%ebp),%esi
00000bb3	movl	%eax,0x04(%esp)
00000bb7	leal	0xfffffeec(%ebp),%ebx
00000bbd	movl	%ebx,(%esp)
00000bc0	movl	$0x00000104,0x08(%esp)
00000bc8	calll	V_strncpy(char*, char const*, int)
00000bcd	movl	%ebx,(%esp)
00000bd0	movl	$0x00000001,0x08(%esp)
00000bd8	movl	$0x0000002f,0x04(%esp)
00000be0	calll	V_RemoveDotSlashes(char*, char, bool)
00000be5	leal	0xfffffde8(%ebp),%edi
00000beb	movl	%edi,0x04(%esp)
00000bef	movl	%ebx,(%esp)
00000bf2	movl	$0x00000104,0x08(%esp)
00000bfa	calll	V_ExtractFilePath(char const*, char*, int)
00000bff	movl	%edi,(%esp)
00000c02	calll	_strlen
00000c07	leal	0xfffffeec(%ebp,%eax),%eax
00000c0e	movl	%eax,0x04(%esp)
00000c12	leal	0xfffffce4(%ebp),%eax
00000c18	movl	%eax,(%esp)
00000c1b	movl	$0x00000104,0x08(%esp)
00000c23	calll	V_strncpy(char*, char const*, int)
00000c28	leal	0x08(%esi),%eax
00000c2b	movl	%eax,0xfffffcd8(%ebp)
00000c31	movl	%eax,(%esp)
00000c34	calll	CThreadSpinRWLock::LockForRead()
00000c39	movl	(%esi),%ebx
00000c3b	movl	$0x811c9dc5,%eax
00000c40	movb	0xfffffde8(%ebp),%cl
00000c46	testb	%cl,%cl
00000c48	je	0x00000c72
00000c4a	movl	$0x811c9dc5,%eax
00000c4f	leal	0xfffffde9(%ebp),%edx
00000c55	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000c60	movzbl	%cl,%ecx
00000c63	xorl	%eax,%ecx
00000c65	imull	$0x01000193,%ecx,%eax
00000c6b	movb	(%edx),%cl
00000c6d	incl	%edx
00000c6e	testb	%cl,%cl
00000c70	jne	0x00000c60
00000c72	movl	%edi,0x04(%esp)
00000c76	movl	%ebx,(%esp)
00000c79	movl	%eax,%ecx
00000c7b	shll	$0x11,%ecx
00000c7e	xorl	%eax,%ecx
00000c80	shrl	$0x15,%eax
00000c83	addl	%ecx,%eax
00000c85	movl	%eax,0x08(%esp)
00000c89	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000c91	movl	CUtlSymbol::Initialize(),0xfffffce0(%ebp)
00000c9b	calll	unsigned int CUtlHashtable<CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::IndirectIndex, empty_t, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::HashProxy, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::EqualProxy, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
00000ca0	cmpl	$0xff,%eax
00000ca3	je	0x00000cb6
00000ca5	movl	(%ebx),%ecx
00000ca7	movzwl	0x02(%ecx,%eax,4),%eax
00000cac	incl	%eax
00000cad	movzwl	%ax,%eax
00000cb0	movl	%eax,0xfffffce0(%ebp)
00000cb6	movl	(%esi),%ebx
00000cb8	movl	$0x811c9dc5,%eax
00000cbd	movb	0xfffffce4(%ebp),%cl
00000cc3	testb	%cl,%cl
00000cc5	je	0x00000cf2
00000cc7	movl	$0x811c9dc5,%eax
00000ccc	leal	0xfffffce5(%ebp),%edx
00000cd2	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000ce0	movzbl	%cl,%ecx
00000ce3	xorl	%eax,%ecx
00000ce5	imull	$0x01000193,%ecx,%eax
00000ceb	movb	(%edx),%cl
00000ced	incl	%edx
00000cee	testb	%cl,%cl
00000cf0	jne	0x00000ce0
00000cf2	leal	0xfffffce4(%ebp),%ecx
00000cf8	movl	%ecx,0x04(%esp)
00000cfc	movl	%ebx,(%esp)
00000cff	movl	%eax,%ecx
00000d01	shll	$0x11,%ecx
00000d04	xorl	%eax,%ecx
00000d06	shrl	$0x15,%eax
00000d09	addl	%ecx,%eax
00000d0b	movl	%eax,0x08(%esp)
00000d0f	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000d17	xorl	%edi,%edi
00000d19	calll	unsigned int CUtlHashtable<CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::IndirectIndex, empty_t, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::HashProxy, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::EqualProxy, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
00000d1e	cmpl	$0xff,%eax
00000d21	movl	CUtlSymbol::Initialize(),%esi
00000d26	je	0x00000d33
00000d28	movl	(%ebx),%ecx
00000d2a	movzwl	0x02(%ecx,%eax,4),%esi
00000d2f	incl	%esi
00000d30	shll	$0x10,%esi
00000d33	movl	0xfffffcd8(%ebp),%eax
00000d39	movl	%eax,(%esp)
00000d3c	calll	CThreadSpinRWLock::UnlockRead()
00000d41	movl	0xfffffce0(%ebp),%eax
00000d47	testl	%eax,%eax
00000d49	je	0x00000d53
00000d4b	testl	%esi,%esi
00000d4d	je	0x00000d53
00000d4f	orl	%eax,%esi
00000d51	movl	%esi,%edi
00000d53	movl	0xfffffcdc(%ebp),%eax
00000d59	movl	(%eax),%eax
00000d5b	cmpl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000d5e	jne	0x00000d6d
00000d60	movl	%edi,%eax
00000d62	addl	$0x0000032c,%esp
00000d68	popl	%esi
00000d69	popl	%edi
00000d6a	popl	%ebx
00000d6b	popl	%ebp
00000d6c	ret
00000d6d	calll	___stack_chk_fail
00000d72	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::String(void* const&, char*, int):
00000d80	pushl	%ebp
00000d81	movl	%esp,%ebp
00000d83	pushl	%ebx
00000d84	pushl	%edi
00000d85	pushl	%esi
00000d86	subl	$0x1c,%esp
00000d89	calll	0x00000d8e
00000d8e	popl	%eax
00000d8f	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000d92	movl	0x10(%ebp),%eax
00000d95	movb	CUtlSymbol::Initialize(),(%eax)
00000d98	xorb	%al,%al
00000d9a	movl	0x0c(%ebp),%esi
00000d9d	testl	%esi,%esi
00000d9f	je	0x00000e3f
00000da5	xorb	%al,%al
00000da7	cmpw	CUtlSymbol::Initialize(),0x02(%esi)
00000dac	je	0x00000e3f
00000db2	xorb	%al,%al
00000db4	cmpw	CUtlSymbol::Initialize(),(%esi)
00000db8	je	0x00000e3f
00000dbe	movl	0x08(%ebp),%ebx
00000dc1	leal	0x08(%ebx),%edi
00000dc4	movl	%edi,(%esp)
00000dc7	calll	CThreadSpinRWLock::LockForRead()
00000dcc	movl	(%ebx),%eax
00000dce	movl	0x18(%eax),%eax
00000dd1	movzwl	0x02(%esi),%ecx
00000dd5	addl	$0x0000ffff,%ecx
00000ddb	movzwl	%cx,%ecx
00000dde	movl	(%eax,%ecx,8),%ebx
00000de1	movzwl	(%esi),%ecx
00000de4	addl	$0x0000ffff,%ecx
00000dea	movzwl	%cx,%ecx
00000ded	movl	(%eax,%ecx,8),%esi
00000df0	movl	%edi,(%esp)
00000df3	calll	CThreadSpinRWLock::UnlockRead()
00000df8	movl	0x14(%ebp),%edi
00000dfb	movl	%edi,0x08(%esp)
00000dff	movl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000e02	leal	0x2b25b-0xd8e(%eax),%eax
00000e08	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000e0b	testl	%esi,%esi
00000e0d	cmovel	%eax,%esi
00000e10	movl	%esi,0x04(%esp)
00000e14	movl	0x10(%ebp),%esi
00000e17	movl	%esi,(%esp)
00000e1a	calll	V_strncpy(char*, char const*, int)
00000e1f	movl	%edi,0x08(%esp)
00000e23	testl	%ebx,%ebx
00000e25	cmovel	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%ebx
00000e29	movl	%ebx,0x04(%esp)
00000e2d	movl	%esi,(%esp)
00000e30	movl	$0xffffffff,0x0c(%esp)
00000e38	calll	V_strncat(char*, char const*, unsigned long, int)
00000e3d	movb	$0x01,%al
00000e3f	movzbl	%al,%eax
00000e42	addl	$0x1c,%esp
00000e45	popl	%esi
00000e46	popl	%edi
00000e47	popl	%ebx
00000e48	popl	%ebp
00000e49	ret
00000e4a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::RemoveAll():
00000e50	pushl	%ebp
00000e51	movl	%esp,%ebp
00000e53	pushl	%esi
00000e54	pushl	%eax
00000e55	movl	0x08(%ebp),%eax
00000e58	movl	(%eax),%esi
00000e5a	movl	0x0c(%esi),%eax
00000e5d	testl	%eax,%eax
00000e5f	je	0x00000e8f
00000e61	movl	(%esi),%ecx
00000e63	movl	0x04(%esi),%edx
00000e66	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000e70	testl	%edx,%edx
00000e72	jle	0x00000e88
00000e74	cmpw	CUtlSymbol::Initialize(),0xfc(%ecx,%edx,4)
00000e7a	leal	0xff(%edx),%edx
00000e7d	js	0x00000e70
00000e7f	movw	$0x8000,(%ecx,%edx,4)
00000e85	decl	%eax
00000e86	jne	0x00000e70
00000e88	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000e8f	cmpl	CUtlSymbol::Initialize(),0x08(%esi)
00000e93	js	0x00000eb0
00000e95	movl	(%esi),%eax
00000e97	testl	%eax,%eax
00000e99	je	0x00000ea9
00000e9b	movl	%eax,(%esp)
00000e9e	calll	_free
00000ea3	movl	CUtlSymbol::Initialize(),(%esi)
00000ea9	movl	CUtlSymbol::Initialize(),0x04(%esi)
00000eb0	addl	$0x18,%esi
00000eb3	movl	%esi,(%esp)
00000eb6	calll	CUtlLinkedList<CUtlKeyValuePair<CUtlConstStringBase<char>, empty_t>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlKeyValuePair<CUtlConstStringBase<char>, empty_t>, unsigned short>, unsigned short> >::Purge()
00000ebb	addl	$0x04,%esp
00000ebe	popl	%esi
00000ebf	popl	%ebp
00000ec0	ret
