Archive : /Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(assetpicker.o):
(__TEXT,__text) section
CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	movl	0x1c(%ebp),%eax
00000012	movl	%eax,0x18(%esp)
00000016	movl	0x18(%ebp),%eax
00000019	movl	%eax,0x14(%esp)
0000001d	movl	0x14(%ebp),%eax
00000020	movl	%eax,0x10(%esp)
00000024	movl	0x10(%ebp),%eax
00000027	movl	%eax,0x0c(%esp)
0000002b	movl	0x0c(%ebp),%eax
0000002e	movl	%eax,0x08(%esp)
00000032	leal	VTT for CAssetPicker-0xe+0x00000004(%edi),%eax
00000038	movl	%eax,0xf0(%ebp)
0000003b	movl	%eax,0x04(%esp)
0000003f	movl	0x08(%ebp),%ebx
00000042	movl	%ebx,(%esp)
00000045	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
0000004a	leal	vtable for CAssetPicker-0xe+0x0000000c(%edi),%eax
00000050	movl	%eax,(%ebx)
00000052	testb	$0x01,CAssetPicker::ChainToMap()::chained-0xe(%edi)
00000059	jne	0x00000090
0000005b	movb	$0x01,CAssetPicker::ChainToMap()::chained-0xe(%edi)
00000062	leal	0x3609e-0xe(%edi),%eax
00000068	movl	%eax,(%esp)
0000006b	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000070	movl	%eax,%esi
00000072	leal	CAssetPicker::GetPanelClassName()-0xe(%edi),%eax
00000078	movl	%eax,0x1c(%esi)
0000007b	testl	%esi,%esi
0000007d	je	0x00000090
0000007f	leal	0x3608d-0xe(%edi),%eax
00000085	movl	%eax,(%esp)
00000088	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000008d	movl	%eax,0x18(%esi)
00000090	testb	$0x01,CAssetPicker::ChainToAnimationMap()::chained-0xe(%edi)
00000097	jne	0x000000ce
00000099	movb	$0x01,CAssetPicker::ChainToAnimationMap()::chained-0xe(%edi)
000000a0	leal	0x3609e-0xe(%edi),%eax
000000a6	movl	%eax,(%esp)
000000a9	calll	FindOrAddPanelAnimationMap(char const*)
000000ae	movl	%eax,%esi
000000b0	leal	CAssetPicker::GetPanelClassName()-0xe(%edi),%eax
000000b6	movl	%eax,0x18(%esi)
000000b9	testl	%esi,%esi
000000bb	je	0x000000ce
000000bd	leal	0x3608d-0xe(%edi),%eax
000000c3	movl	%eax,(%esp)
000000c6	calll	FindOrAddPanelAnimationMap(char const*)
000000cb	movl	%eax,0x14(%esi)
000000ce	testb	$0x01,CAssetPicker::KB_ChainToMap()::chained-0xe(%edi)
000000d5	jne	0x0000010c
000000d7	movb	$0x01,CAssetPicker::KB_ChainToMap()::chained-0xe(%edi)
000000de	leal	0x3609e-0xe(%edi),%eax
000000e4	movl	%eax,(%esp)
000000e7	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000ec	movl	%eax,%esi
000000ee	leal	CAssetPicker::GetPanelClassName()-0xe(%edi),%eax
000000f4	movl	%eax,0x44(%esi)
000000f7	testl	%esi,%esi
000000f9	je	0x0000010c
000000fb	leal	0x3608d-0xe(%edi),%eax
00000101	movl	%eax,(%esp)
00000104	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000109	movl	%eax,0x18(%esi)
0000010c	movl	%ebx,0x04(%esp)
00000110	movl	%ebx,(%esp)
00000113	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
0000011b	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
00000120	movl	(%ebx),%eax
00000122	movl	0x00000354(%eax),%eax
00000128	leal	0x36056-0xe(%edi),%ecx
0000012e	movl	%ecx,0x04(%esp)
00000132	movl	%ebx,(%esp)
00000135	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
0000013d	call	*%eax
0000013f	addl	$0x2c,%esp
00000142	popl	%esi
00000143	popl	%edi
00000144	popl	%ebx
00000145	popl	%ebp
00000146	ret
00000147	movl	%eax,%esi
00000149	movl	0xf0(%ebp),%eax
0000014c	movl	%eax,0x04(%esp)
00000150	movl	%ebx,(%esp)
00000153	calll	CBaseAssetPicker::~CBaseAssetPicker()
00000158	movl	%esi,(%esp)
0000015b	calll	__Unwind_Resume
00000160	calll	std::terminate()
00000165	nopl	%cs:CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*):
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x2c,%esp
00000179	calll	0x0000017e
0000017e	popl	%ebx
0000017f	movl	0x20(%ebp),%eax
00000182	movl	%eax,0x18(%esp)
00000186	movl	0x1c(%ebp),%eax
00000189	movl	%eax,0x14(%esp)
0000018d	movl	0x18(%ebp),%eax
00000190	movl	%eax,0x10(%esp)
00000194	movl	0x14(%ebp),%eax
00000197	movl	%eax,0x0c(%esp)
0000019b	movl	0x10(%ebp),%eax
0000019e	movl	%eax,0x08(%esp)
000001a2	movl	0x0c(%ebp),%esi
000001a5	leal	0x04(%esi),%eax
000001a8	movl	%eax,0xf0(%ebp)
000001ab	movl	%eax,0x04(%esp)
000001af	movl	0x08(%ebp),%edi
000001b2	movl	%edi,(%esp)
000001b5	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
000001ba	movl	(%esi),%eax
000001bc	movl	%eax,(%edi)
000001be	testb	$0x01,CAssetPicker::ChainToMap()::chained-0x17e(%ebx)
000001c5	jne	0x000001fc
000001c7	movb	$0x01,CAssetPicker::ChainToMap()::chained-0x17e(%ebx)
000001ce	leal	0x3609e-0x17e(%ebx),%eax
000001d4	movl	%eax,(%esp)
000001d7	calll	vgui::FindOrAddPanelMessageMap(char const*)
000001dc	movl	%eax,%esi
000001de	leal	CAssetPicker::GetPanelClassName()-0x17e(%ebx),%eax
000001e4	movl	%eax,0x1c(%esi)
000001e7	testl	%esi,%esi
000001e9	je	0x000001fc
000001eb	leal	0x3608d-0x17e(%ebx),%eax
000001f1	movl	%eax,(%esp)
000001f4	calll	vgui::FindOrAddPanelMessageMap(char const*)
000001f9	movl	%eax,0x18(%esi)
000001fc	testb	$0x01,CAssetPicker::ChainToAnimationMap()::chained-0x17e(%ebx)
00000203	jne	0x0000023a
00000205	movb	$0x01,CAssetPicker::ChainToAnimationMap()::chained-0x17e(%ebx)
0000020c	leal	0x3609e-0x17e(%ebx),%eax
00000212	movl	%eax,(%esp)
00000215	calll	FindOrAddPanelAnimationMap(char const*)
0000021a	movl	%eax,%esi
0000021c	leal	CAssetPicker::GetPanelClassName()-0x17e(%ebx),%eax
00000222	movl	%eax,0x18(%esi)
00000225	testl	%esi,%esi
00000227	je	0x0000023a
00000229	leal	0x3608d-0x17e(%ebx),%eax
0000022f	movl	%eax,(%esp)
00000232	calll	FindOrAddPanelAnimationMap(char const*)
00000237	movl	%eax,0x14(%esi)
0000023a	testb	$0x01,CAssetPicker::KB_ChainToMap()::chained-0x17e(%ebx)
00000241	jne	0x00000278
00000243	movb	$0x01,CAssetPicker::KB_ChainToMap()::chained-0x17e(%ebx)
0000024a	leal	0x3609e-0x17e(%ebx),%eax
00000250	movl	%eax,(%esp)
00000253	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000258	movl	%eax,%esi
0000025a	leal	CAssetPicker::GetPanelClassName()-0x17e(%ebx),%eax
00000260	movl	%eax,0x44(%esi)
00000263	testl	%esi,%esi
00000265	je	0x00000278
00000267	leal	0x3608d-0x17e(%ebx),%eax
0000026d	movl	%eax,(%esp)
00000270	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000275	movl	%eax,0x18(%esi)
00000278	movl	%edi,0x04(%esp)
0000027c	movl	%edi,(%esp)
0000027f	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
00000287	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
0000028c	movl	(%edi),%eax
0000028e	movl	0x00000354(%eax),%eax
00000294	leal	0x36056-0x17e(%ebx),%ecx
0000029a	movl	%ecx,0x04(%esp)
0000029e	movl	%edi,(%esp)
000002a1	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000002a9	call	*%eax
000002ab	addl	$0x2c,%esp
000002ae	popl	%esi
000002af	popl	%edi
000002b0	popl	%ebx
000002b1	popl	%ebp
000002b2	ret
000002b3	movl	%eax,%esi
000002b5	movl	0xf0(%ebp),%eax
000002b8	movl	%eax,0x04(%esp)
000002bc	movl	%edi,(%esp)
000002bf	calll	CBaseAssetPicker::~CBaseAssetPicker()
000002c4	movl	%esi,(%esp)
000002c7	calll	__Unwind_Resume
000002cc	calll	std::terminate()
000002d1	nopl	%cs:CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CAssetPickerFrame::CAssetPickerFrame(vgui::Panel*, char const*, char const*, char const*, char const*, char const*):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%ebx
000002e4	pushl	%edi
000002e5	pushl	%esi
000002e6	subl	$0x1c,%esp
000002e9	calll	0x000002ee
000002ee	popl	%edi
000002ef	movl	0x0c(%ebp),%eax
000002f2	movl	%eax,0x08(%esp)
000002f6	leal	VTT for CAssetPickerFrame-0x2ee+0x00000004(%edi),%eax
000002fc	movl	%eax,0xf0(%ebp)
000002ff	movl	%eax,0x04(%esp)
00000303	movl	0x08(%ebp),%ebx
00000306	movl	%ebx,(%esp)
00000309	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
0000030e	leal	vtable for CAssetPickerFrame-0x2ee+0x0000000c(%edi),%eax
00000314	movl	%eax,(%ebx)
00000316	testb	$0x01,CAssetPickerFrame::ChainToMap()::chained-0x2ee(%edi)
0000031d	jne	0x00000354
0000031f	movb	$0x01,CAssetPickerFrame::ChainToMap()::chained-0x2ee(%edi)
00000326	leal	0x360db-0x2ee(%edi),%eax
0000032c	movl	%eax,(%esp)
0000032f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000334	movl	%eax,%esi
00000336	leal	CAssetPickerFrame::GetPanelClassName()-0x2ee(%edi),%eax
0000033c	movl	%eax,0x1c(%esi)
0000033f	testl	%esi,%esi
00000341	je	0x00000354
00000343	leal	0x360c5-0x2ee(%edi),%eax
00000349	movl	%eax,(%esp)
0000034c	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000351	movl	%eax,0x18(%esi)
00000354	testb	$0x01,CAssetPickerFrame::ChainToAnimationMap()::chained-0x2ee(%edi)
0000035b	jne	0x00000392
0000035d	movb	$0x01,CAssetPickerFrame::ChainToAnimationMap()::chained-0x2ee(%edi)
00000364	leal	0x360db-0x2ee(%edi),%eax
0000036a	movl	%eax,(%esp)
0000036d	calll	FindOrAddPanelAnimationMap(char const*)
00000372	movl	%eax,%esi
00000374	leal	CAssetPickerFrame::GetPanelClassName()-0x2ee(%edi),%eax
0000037a	movl	%eax,0x18(%esi)
0000037d	testl	%esi,%esi
0000037f	je	0x00000392
00000381	leal	0x360c5-0x2ee(%edi),%eax
00000387	movl	%eax,(%esp)
0000038a	calll	FindOrAddPanelAnimationMap(char const*)
0000038f	movl	%eax,0x14(%esi)
00000392	testb	$0x01,CAssetPickerFrame::KB_ChainToMap()::chained-0x2ee(%edi)
00000399	jne	0x000003d0
0000039b	movb	$0x01,CAssetPickerFrame::KB_ChainToMap()::chained-0x2ee(%edi)
000003a2	leal	0x360db-0x2ee(%edi),%eax
000003a8	movl	%eax,(%esp)
000003ab	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000003b0	movl	%eax,%esi
000003b2	leal	CAssetPickerFrame::GetPanelClassName()-0x2ee(%edi),%eax
000003b8	movl	%eax,0x44(%esi)
000003bb	testl	%esi,%esi
000003bd	je	0x000003d0
000003bf	leal	0x360c5-0x2ee(%edi),%eax
000003c5	movl	%eax,(%esp)
000003c8	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000003cd	movl	%eax,0x18(%esi)
000003d0	movl	$0x0000024c,(%esp)
000003d7	calll	operator new(unsigned long)
000003dc	movl	%eax,%esi
000003de	movl	0x20(%ebp),%eax
000003e1	movl	0x1c(%ebp),%ecx
000003e4	movl	0x18(%ebp),%edx
000003e7	movl	%eax,0x14(%esp)
000003eb	movl	%ecx,0x10(%esp)
000003ef	movl	%edx,0x0c(%esp)
000003f3	movl	0x14(%ebp),%eax
000003f6	movl	%eax,0x08(%esp)
000003fa	movl	%ebx,0x04(%esp)
000003fe	movl	%esi,(%esp)
00000401	calll	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000406	movl	%esi,0x04(%esp)
0000040a	movl	%ebx,(%esp)
0000040d	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
00000412	movl	(%ebx),%eax
00000414	movl	0x00000354(%eax),%eax
0000041a	leal	0x3606f-0x2ee(%edi),%ecx
00000420	movl	%ecx,0x04(%esp)
00000424	movl	%ebx,(%esp)
00000427	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
0000042f	call	*%eax
00000431	movl	0x10(%ebp),%ecx
00000434	movl	(%ebx),%eax
00000436	movl	0x000003ac(%eax),%eax
0000043c	movl	%ecx,0x04(%esp)
00000440	movl	%ebx,(%esp)
00000443	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
0000044b	call	*%eax
0000044d	addl	$0x1c,%esp
00000450	popl	%esi
00000451	popl	%edi
00000452	popl	%ebx
00000453	popl	%ebp
00000454	ret
00000455	movl	%eax,%edi
00000457	jmp	0x00000463
00000459	movl	%eax,%edi
0000045b	movl	%esi,(%esp)
0000045e	calll	operator delete(void*)
00000463	movl	0xf0(%ebp),%eax
00000466	movl	%eax,0x04(%esp)
0000046a	movl	%ebx,(%esp)
0000046d	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00000472	movl	%edi,(%esp)
00000475	calll	__Unwind_Resume
0000047a	calll	std::terminate()
0000047f	nop
CAssetPickerFrame::CAssetPickerFrame(vgui::Panel*, char const*, char const*, char const*, char const*, char const*):
00000480	pushl	%ebp
00000481	movl	%esp,%ebp
00000483	pushl	%ebx
00000484	pushl	%edi
00000485	pushl	%esi
00000486	subl	$0x1c,%esp
00000489	calll	0x0000048e
0000048e	popl	%edi
0000048f	movl	0x10(%ebp),%eax
00000492	movl	%eax,0x08(%esp)
00000496	movl	0x0c(%ebp),%esi
00000499	leal	0x04(%esi),%eax
0000049c	movl	%eax,0xf0(%ebp)
0000049f	movl	%eax,0x04(%esp)
000004a3	movl	0x08(%ebp),%ebx
000004a6	movl	%ebx,(%esp)
000004a9	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
000004ae	movl	(%esi),%eax
000004b0	movl	%eax,(%ebx)
000004b2	testb	$0x01,CAssetPickerFrame::ChainToMap()::chained-0x48e(%edi)
000004b9	jne	0x000004f0
000004bb	movb	$0x01,CAssetPickerFrame::ChainToMap()::chained-0x48e(%edi)
000004c2	leal	0x360db-0x48e(%edi),%eax
000004c8	movl	%eax,(%esp)
000004cb	calll	vgui::FindOrAddPanelMessageMap(char const*)
000004d0	movl	%eax,%esi
000004d2	leal	CAssetPickerFrame::GetPanelClassName()-0x48e(%edi),%eax
000004d8	movl	%eax,0x1c(%esi)
000004db	testl	%esi,%esi
000004dd	je	0x000004f0
000004df	leal	0x360c5-0x48e(%edi),%eax
000004e5	movl	%eax,(%esp)
000004e8	calll	vgui::FindOrAddPanelMessageMap(char const*)
000004ed	movl	%eax,0x18(%esi)
000004f0	testb	$0x01,CAssetPickerFrame::ChainToAnimationMap()::chained-0x48e(%edi)
000004f7	jne	0x0000052e
000004f9	movb	$0x01,CAssetPickerFrame::ChainToAnimationMap()::chained-0x48e(%edi)
00000500	leal	0x360db-0x48e(%edi),%eax
00000506	movl	%eax,(%esp)
00000509	calll	FindOrAddPanelAnimationMap(char const*)
0000050e	movl	%eax,%esi
00000510	leal	CAssetPickerFrame::GetPanelClassName()-0x48e(%edi),%eax
00000516	movl	%eax,0x18(%esi)
00000519	testl	%esi,%esi
0000051b	je	0x0000052e
0000051d	leal	0x360c5-0x48e(%edi),%eax
00000523	movl	%eax,(%esp)
00000526	calll	FindOrAddPanelAnimationMap(char const*)
0000052b	movl	%eax,0x14(%esi)
0000052e	testb	$0x01,CAssetPickerFrame::KB_ChainToMap()::chained-0x48e(%edi)
00000535	jne	0x0000056c
00000537	movb	$0x01,CAssetPickerFrame::KB_ChainToMap()::chained-0x48e(%edi)
0000053e	leal	0x360db-0x48e(%edi),%eax
00000544	movl	%eax,(%esp)
00000547	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000054c	movl	%eax,%esi
0000054e	leal	CAssetPickerFrame::GetPanelClassName()-0x48e(%edi),%eax
00000554	movl	%eax,0x44(%esi)
00000557	testl	%esi,%esi
00000559	je	0x0000056c
0000055b	leal	0x360c5-0x48e(%edi),%eax
00000561	movl	%eax,(%esp)
00000564	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000569	movl	%eax,0x18(%esi)
0000056c	movl	$0x0000024c,(%esp)
00000573	calll	operator new(unsigned long)
00000578	movl	%eax,%esi
0000057a	movl	0x24(%ebp),%eax
0000057d	movl	0x20(%ebp),%ecx
00000580	movl	0x1c(%ebp),%edx
00000583	movl	%eax,0x14(%esp)
00000587	movl	%ecx,0x10(%esp)
0000058b	movl	%edx,0x0c(%esp)
0000058f	movl	0x18(%ebp),%eax
00000592	movl	%eax,0x08(%esp)
00000596	movl	%ebx,0x04(%esp)
0000059a	movl	%esi,(%esp)
0000059d	calll	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
000005a2	movl	%esi,0x04(%esp)
000005a6	movl	%ebx,(%esp)
000005a9	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
000005ae	movl	(%ebx),%eax
000005b0	movl	0x00000354(%eax),%eax
000005b6	leal	0x3606f-0x48e(%edi),%ecx
000005bc	movl	%ecx,0x04(%esp)
000005c0	movl	%ebx,(%esp)
000005c3	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000005cb	call	*%eax
000005cd	movl	0x14(%ebp),%ecx
000005d0	movl	(%ebx),%eax
000005d2	movl	0x000003ac(%eax),%eax
000005d8	movl	%ecx,0x04(%esp)
000005dc	movl	%ebx,(%esp)
000005df	movl	CAssetPicker::CAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000005e7	call	*%eax
000005e9	addl	$0x1c,%esp
000005ec	popl	%esi
000005ed	popl	%edi
000005ee	popl	%ebx
000005ef	popl	%ebp
000005f0	ret
000005f1	movl	%eax,%edi
000005f3	jmp	0x000005ff
000005f5	movl	%eax,%edi
000005f7	movl	%esi,(%esp)
000005fa	calll	operator delete(void*)
000005ff	movl	0xf0(%ebp),%eax
00000602	movl	%eax,0x04(%esp)
00000606	movl	%ebx,(%esp)
00000609	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
0000060e	movl	%edi,(%esp)
00000611	calll	__Unwind_Resume
00000616	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(baseassetpicker.o):
(__TEXT,__text) section
AssetTreeViewSortFunc(KeyValues*, KeyValues*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	calll	0x0000000d
0000000d	popl	%eax
0000000e	leal	0xa7cbc-0xd(%eax),%edi
00000014	movl	%edi,0x04(%esp)
00000018	movl	0x08(%ebp),%eax
0000001b	movl	%eax,(%esp)
0000001e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000026	calll	KeyValues::GetString(char const*, char const*)
0000002b	movl	%eax,%esi
0000002d	movl	%edi,0x04(%esp)
00000031	movl	0x0c(%ebp),%eax
00000034	movl	%eax,(%esp)
00000037	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
0000003f	calll	KeyValues::GetString(char const*, char const*)
00000044	movl	%eax,0x04(%esp)
00000048	movl	%esi,(%esp)
0000004b	calll	V_stricmp(char const*, char const*)
00000050	shrl	$0x1f,%eax
00000053	addl	$0x10,%esp
00000056	popl	%esi
00000057	popl	%edi
00000058	popl	%ebp
00000059	ret
0000005a	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*):
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%ebx
00000064	pushl	%edi
00000065	pushl	%esi
00000066	subl	$0x2c,%esp
00000069	calll	0x0000006e
0000006e	popl	%edi
0000006f	movl	0x10(%ebp),%eax
00000072	movl	%eax,0x0c(%esp)
00000076	movl	0x0c(%ebp),%eax
00000079	movl	%eax,0x08(%esp)
0000007d	leal	VTT for CAssetTreeView-0x6e+0x00000004(%edi),%eax
00000083	movl	%eax,0xe0(%ebp)
00000086	movl	%eax,0x04(%esp)
0000008a	movl	0x08(%ebp),%ebx
0000008d	movl	%ebx,(%esp)
00000090	calll	vgui::TreeView::TreeView(vgui::Panel*, char const*)
00000095	leal	vtable for CAssetTreeView-0x6e+0x0000000c(%edi),%eax
0000009b	movl	%eax,(%ebx)
0000009d	testb	$0x01,CAssetTreeView::ChainToMap()::chained-0x6e(%edi)
000000a4	jne	0x000000db
000000a6	movb	$0x01,CAssetTreeView::ChainToMap()::chained-0x6e(%edi)
000000ad	leal	0xa7f7f-0x6e(%edi),%eax
000000b3	movl	%eax,(%esp)
000000b6	calll	vgui::FindOrAddPanelMessageMap(char const*)
000000bb	movl	%eax,%esi
000000bd	leal	CAssetTreeView::GetPanelClassName()-0x6e(%edi),%eax
000000c3	movl	%eax,0x1c(%esi)
000000c6	testl	%esi,%esi
000000c8	je	0x000000db
000000ca	leal	0xa8014-0x6e(%edi),%eax
000000d0	movl	%eax,(%esp)
000000d3	calll	vgui::FindOrAddPanelMessageMap(char const*)
000000d8	movl	%eax,0x18(%esi)
000000db	testb	$0x01,CAssetTreeView::ChainToAnimationMap()::chained-0x6e(%edi)
000000e2	jne	0x00000119
000000e4	movb	$0x01,CAssetTreeView::ChainToAnimationMap()::chained-0x6e(%edi)
000000eb	leal	0xa7f7f-0x6e(%edi),%eax
000000f1	movl	%eax,(%esp)
000000f4	calll	FindOrAddPanelAnimationMap(char const*)
000000f9	movl	%eax,%esi
000000fb	leal	CAssetTreeView::GetPanelClassName()-0x6e(%edi),%eax
00000101	movl	%eax,0x18(%esi)
00000104	testl	%esi,%esi
00000106	je	0x00000119
00000108	leal	0xa8014-0x6e(%edi),%eax
0000010e	movl	%eax,(%esp)
00000111	calll	FindOrAddPanelAnimationMap(char const*)
00000116	movl	%eax,0x14(%esi)
00000119	testb	$0x01,CAssetTreeView::KB_ChainToMap()::chained-0x6e(%edi)
00000120	jne	0x00000157
00000122	movb	$0x01,CAssetTreeView::KB_ChainToMap()::chained-0x6e(%edi)
00000129	leal	0xa7f7f-0x6e(%edi),%eax
0000012f	movl	%eax,(%esp)
00000132	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000137	movl	%eax,%esi
00000139	leal	CAssetTreeView::GetPanelClassName()-0x6e(%edi),%eax
0000013f	movl	%eax,0x44(%esi)
00000142	testl	%esi,%esi
00000144	je	0x00000157
00000146	leal	0xa8014-0x6e(%edi),%eax
0000014c	movl	%eax,(%esp)
0000014f	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000154	movl	%eax,0x18(%esi)
00000157	leal	0x000001e8(%ebx),%esi
0000015d	movl	%esi,(%esp)
00000160	calll	CUtlString::CUtlString()
00000165	leal	0x000001f8(%ebx),%eax
0000016b	movl	%eax,0xf0(%ebp)
0000016e	movl	%eax,(%esp)
00000171	calll	CUtlString::CUtlString()
00000176	leal	0x00000208(%ebx),%eax
0000017c	movl	%eax,0xec(%ebp)
0000017f	movl	%eax,(%esp)
00000182	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
0000018a	calll	vgui::ImageList::ImageList(bool)
0000018f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000220(%ebx)
00000199	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000224(%ebx)
000001a3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
000001ad	movw	$0xffff,0x0000022c(%ebx)
000001b6	movw	$0xffff,0x0000022e(%ebx)
000001bf	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
000001c9	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%ebx)
000001d3	leal	0x00000220(%ebx),%eax
000001d9	movl	%eax,0xe4(%ebp)
000001dc	leal	AssetTreeViewSortFunc(KeyValues*, KeyValues*)-0x6e(%edi),%eax
000001e2	movl	%eax,0x04(%esp)
000001e6	movl	%ebx,(%esp)
000001e9	calll	vgui::TreeView::SetSortFunc(bool (*)(KeyValues*, KeyValues*))
000001ee	movl	0x14(%ebp),%eax
000001f1	movl	%eax,0x04(%esp)
000001f5	movl	%esi,(%esp)
000001f8	calll	CUtlString::operator=(char const*)
000001fd	movl	0x18(%ebp),%eax
00000200	movl	%eax,0x04(%esp)
00000204	movl	0xf0(%ebp),%eax
00000207	movl	%eax,(%esp)
0000020a	calll	CUtlString::operator=(char const*)
0000020f	movl	0xe4(%ebp),%eax
00000212	movl	%eax,(%esp)
00000215	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
0000021a	movw	%ax,0x0000022c(%ebx)
00000221	movl	0x00000220(%ebx),%ecx
00000227	movl	0xf0(%ebp),%edx
0000022a	movl	%edx,0x04(%esp)
0000022e	movzwl	%ax,%eax
00000231	imull	$0x18,%eax,%eax
00000234	addl	%ecx,%eax
00000236	movl	%eax,(%esp)
00000239	calll	CUtlString::operator=(CUtlString const&)
0000023e	movl	0xb6ab5-0x6e(%edi),%eax
00000244	movl	(%eax),%ecx
00000246	movl	(%ecx),%eax
00000248	movl	0x1c(%eax),%eax
0000024b	leal	0xa7cc1-0x6e(%edi),%edx
00000251	movl	%edx,0x04(%esp)
00000255	movl	%ecx,(%esp)
00000258	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000260	call	*%eax
00000262	movl	%eax,0x04(%esp)
00000266	movl	0xec(%ebp),%eax
00000269	movl	%eax,(%esp)
0000026c	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000271	movl	(%ebx),%eax
00000273	movl	0x00000374(%eax),%eax
00000279	movl	0xec(%ebp),%ecx
0000027c	movl	%ecx,0x04(%esp)
00000280	movl	%ebx,(%esp)
00000283	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
0000028b	call	*%eax
0000028d	movl	%ebx,(%esp)
00000290	calll	vgui::Panel::MakeReadyForUse()
00000295	addl	$0x2c,%esp
00000298	popl	%esi
00000299	popl	%edi
0000029a	popl	%ebx
0000029b	popl	%ebp
0000029c	ret
0000029d	movl	%eax,%esi
0000029f	jmp	0x00000359
000002a4	movl	%esi,0xe8(%ebp)
000002a7	movl	%eax,%esi
000002a9	jmp	0x0000032f
000002ae	movl	%esi,0xe8(%ebp)
000002b1	movl	%eax,%esi
000002b3	jmp	0x000002fb
000002b5	movl	%esi,0xe8(%ebp)
000002b8	movl	%eax,0xdc(%ebp)
000002bb	movl	0xe4(%ebp),%esi
000002be	movl	%esi,(%esp)
000002c1	calll	CUtlNTree<CUtlString, unsigned short>::RemoveAll()
000002c6	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
000002cd	js	0x000002ed
000002cf	movl	(%esi),%eax
000002d1	testl	%eax,%eax
000002d3	je	0x000002e3
000002d5	movl	%eax,(%esp)
000002d8	calll	_free
000002dd	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%esi)
000002e3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000224(%ebx)
000002ed	movl	0xec(%ebp),%eax
000002f0	movl	%eax,(%esp)
000002f3	calll	vgui::ImageList::~ImageList()
000002f8	movl	0xdc(%ebp),%esi
000002fb	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000200(%ebx)
00000302	movl	0xf0(%ebp),%eax
00000305	js	0x0000032f
00000307	movl	%esi,%edi
00000309	movl	%ebx,%esi
0000030b	movl	%eax,%ebx
0000030d	movl	(%ebx),%eax
0000030f	testl	%eax,%eax
00000311	je	0x00000321
00000313	movl	%eax,(%esp)
00000316	calll	_free
0000031b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
00000321	movl	%esi,%ebx
00000323	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001fc(%ebx)
0000032d	movl	%edi,%esi
0000032f	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f0(%ebx)
00000336	js	0x00000359
00000338	movl	0xe8(%ebp),%edi
0000033b	movl	(%edi),%eax
0000033d	testl	%eax,%eax
0000033f	je	0x0000034f
00000341	movl	%eax,(%esp)
00000344	calll	_free
00000349	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%edi)
0000034f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%ebx)
00000359	movl	0xe0(%ebp),%eax
0000035c	movl	%eax,0x04(%esp)
00000360	movl	%ebx,(%esp)
00000363	calll	vgui::TreeView::~TreeView()
00000368	movl	%esi,(%esp)
0000036b	calll	__Unwind_Resume
00000370	calll	std::terminate()
00000375	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::AllocateRootNode():
00000380	pushl	%ebp
00000381	movl	%esp,%ebp
00000383	pushl	%esi
00000384	subl	$0x14,%esp
00000387	movl	0x08(%ebp),%esi
0000038a	leal	0x00000220(%esi),%eax
00000390	movl	%eax,(%esp)
00000393	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
00000398	movw	%ax,0x0000022c(%esi)
0000039f	movzwl	%ax,%eax
000003a2	imull	$0x18,%eax,%eax
000003a5	addl	0x00000220(%esi),%eax
000003ab	addl	$0x000001f8,%esi
000003b1	movl	%esi,0x04(%esp)
000003b5	movl	%eax,(%esp)
000003b8	calll	CUtlString::operator=(CUtlString const&)
000003bd	addl	$0x14,%esp
000003c0	popl	%esi
000003c1	popl	%ebp
000003c2	ret
000003c3	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*):
000003d0	pushl	%ebp
000003d1	movl	%esp,%ebp
000003d3	pushl	%ebx
000003d4	pushl	%edi
000003d5	pushl	%esi
000003d6	subl	$0x2c,%esp
000003d9	calll	0x000003de
000003de	popl	%edi
000003df	movl	0x14(%ebp),%eax
000003e2	movl	%eax,0x0c(%esp)
000003e6	movl	0x10(%ebp),%eax
000003e9	movl	%eax,0x08(%esp)
000003ed	movl	0x0c(%ebp),%esi
000003f0	leal	0x04(%esi),%eax
000003f3	movl	%eax,0xe0(%ebp)
000003f6	movl	%eax,0x04(%esp)
000003fa	movl	0x08(%ebp),%ebx
000003fd	movl	%ebx,(%esp)
00000400	calll	vgui::TreeView::TreeView(vgui::Panel*, char const*)
00000405	movl	(%esi),%eax
00000407	movl	%eax,(%ebx)
00000409	testb	$0x01,CAssetTreeView::ChainToMap()::chained-0x3de(%edi)
00000410	jne	0x00000447
00000412	movb	$0x01,CAssetTreeView::ChainToMap()::chained-0x3de(%edi)
00000419	leal	0xa7f7f-0x3de(%edi),%eax
0000041f	movl	%eax,(%esp)
00000422	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000427	movl	%eax,%esi
00000429	leal	CAssetTreeView::GetPanelClassName()-0x3de(%edi),%eax
0000042f	movl	%eax,0x1c(%esi)
00000432	testl	%esi,%esi
00000434	je	0x00000447
00000436	leal	0xa8014-0x3de(%edi),%eax
0000043c	movl	%eax,(%esp)
0000043f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000444	movl	%eax,0x18(%esi)
00000447	testb	$0x01,CAssetTreeView::ChainToAnimationMap()::chained-0x3de(%edi)
0000044e	jne	0x00000485
00000450	movb	$0x01,CAssetTreeView::ChainToAnimationMap()::chained-0x3de(%edi)
00000457	leal	0xa7f7f-0x3de(%edi),%eax
0000045d	movl	%eax,(%esp)
00000460	calll	FindOrAddPanelAnimationMap(char const*)
00000465	movl	%eax,%esi
00000467	leal	CAssetTreeView::GetPanelClassName()-0x3de(%edi),%eax
0000046d	movl	%eax,0x18(%esi)
00000470	testl	%esi,%esi
00000472	je	0x00000485
00000474	leal	0xa8014-0x3de(%edi),%eax
0000047a	movl	%eax,(%esp)
0000047d	calll	FindOrAddPanelAnimationMap(char const*)
00000482	movl	%eax,0x14(%esi)
00000485	testb	$0x01,CAssetTreeView::KB_ChainToMap()::chained-0x3de(%edi)
0000048c	jne	0x000004c3
0000048e	movb	$0x01,CAssetTreeView::KB_ChainToMap()::chained-0x3de(%edi)
00000495	leal	0xa7f7f-0x3de(%edi),%eax
0000049b	movl	%eax,(%esp)
0000049e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000004a3	movl	%eax,%esi
000004a5	leal	CAssetTreeView::GetPanelClassName()-0x3de(%edi),%eax
000004ab	movl	%eax,0x44(%esi)
000004ae	testl	%esi,%esi
000004b0	je	0x000004c3
000004b2	leal	0xa8014-0x3de(%edi),%eax
000004b8	movl	%eax,(%esp)
000004bb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000004c0	movl	%eax,0x18(%esi)
000004c3	leal	0x000001e8(%ebx),%esi
000004c9	movl	%esi,(%esp)
000004cc	calll	CUtlString::CUtlString()
000004d1	leal	0x000001f8(%ebx),%eax
000004d7	movl	%eax,0xf0(%ebp)
000004da	movl	%eax,(%esp)
000004dd	calll	CUtlString::CUtlString()
000004e2	leal	0x00000208(%ebx),%eax
000004e8	movl	%eax,0xec(%ebp)
000004eb	movl	%eax,(%esp)
000004ee	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
000004f6	calll	vgui::ImageList::ImageList(bool)
000004fb	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000220(%ebx)
00000505	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000224(%ebx)
0000050f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
00000519	movw	$0xffff,0x0000022c(%ebx)
00000522	movw	$0xffff,0x0000022e(%ebx)
0000052b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
00000535	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%ebx)
0000053f	leal	0x00000220(%ebx),%eax
00000545	movl	%eax,0xe4(%ebp)
00000548	leal	AssetTreeViewSortFunc(KeyValues*, KeyValues*)-0x3de(%edi),%eax
0000054e	movl	%eax,0x04(%esp)
00000552	movl	%ebx,(%esp)
00000555	calll	vgui::TreeView::SetSortFunc(bool (*)(KeyValues*, KeyValues*))
0000055a	movl	0x18(%ebp),%eax
0000055d	movl	%eax,0x04(%esp)
00000561	movl	%esi,(%esp)
00000564	calll	CUtlString::operator=(char const*)
00000569	movl	0x1c(%ebp),%eax
0000056c	movl	%eax,0x04(%esp)
00000570	movl	0xf0(%ebp),%eax
00000573	movl	%eax,(%esp)
00000576	calll	CUtlString::operator=(char const*)
0000057b	movl	0xe4(%ebp),%eax
0000057e	movl	%eax,(%esp)
00000581	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
00000586	movw	%ax,0x0000022c(%ebx)
0000058d	movl	0x00000220(%ebx),%ecx
00000593	movl	0xf0(%ebp),%edx
00000596	movl	%edx,0x04(%esp)
0000059a	movzwl	%ax,%eax
0000059d	imull	$0x18,%eax,%eax
000005a0	addl	%ecx,%eax
000005a2	movl	%eax,(%esp)
000005a5	calll	CUtlString::operator=(CUtlString const&)
000005aa	movl	0xb6ab5-0x3de(%edi),%eax
000005b0	movl	(%eax),%ecx
000005b2	movl	(%ecx),%eax
000005b4	movl	0x1c(%eax),%eax
000005b7	leal	0xa7cc1-0x3de(%edi),%edx
000005bd	movl	%edx,0x04(%esp)
000005c1	movl	%ecx,(%esp)
000005c4	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000005cc	call	*%eax
000005ce	movl	%eax,0x04(%esp)
000005d2	movl	0xec(%ebp),%eax
000005d5	movl	%eax,(%esp)
000005d8	calll	vgui::ImageList::AddImage(vgui::IImage*)
000005dd	movl	(%ebx),%eax
000005df	movl	0x00000374(%eax),%eax
000005e5	movl	0xec(%ebp),%ecx
000005e8	movl	%ecx,0x04(%esp)
000005ec	movl	%ebx,(%esp)
000005ef	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000005f7	call	*%eax
000005f9	movl	%ebx,(%esp)
000005fc	calll	vgui::Panel::MakeReadyForUse()
00000601	addl	$0x2c,%esp
00000604	popl	%esi
00000605	popl	%edi
00000606	popl	%ebx
00000607	popl	%ebp
00000608	ret
00000609	movl	%eax,%esi
0000060b	jmp	0x000006c5
00000610	movl	%esi,0xe8(%ebp)
00000613	movl	%eax,%esi
00000615	jmp	0x0000069b
0000061a	movl	%esi,0xe8(%ebp)
0000061d	movl	%eax,%esi
0000061f	jmp	0x00000667
00000621	movl	%esi,0xe8(%ebp)
00000624	movl	%eax,0xdc(%ebp)
00000627	movl	0xe4(%ebp),%esi
0000062a	movl	%esi,(%esp)
0000062d	calll	CUtlNTree<CUtlString, unsigned short>::RemoveAll()
00000632	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
00000639	js	0x00000659
0000063b	movl	(%esi),%eax
0000063d	testl	%eax,%eax
0000063f	je	0x0000064f
00000641	movl	%eax,(%esp)
00000644	calll	_free
00000649	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%esi)
0000064f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000224(%ebx)
00000659	movl	0xec(%ebp),%eax
0000065c	movl	%eax,(%esp)
0000065f	calll	vgui::ImageList::~ImageList()
00000664	movl	0xdc(%ebp),%esi
00000667	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000200(%ebx)
0000066e	movl	0xf0(%ebp),%eax
00000671	js	0x0000069b
00000673	movl	%esi,%edi
00000675	movl	%ebx,%esi
00000677	movl	%eax,%ebx
00000679	movl	(%ebx),%eax
0000067b	testl	%eax,%eax
0000067d	je	0x0000068d
0000067f	movl	%eax,(%esp)
00000682	calll	_free
00000687	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
0000068d	movl	%esi,%ebx
0000068f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001fc(%ebx)
00000699	movl	%edi,%esi
0000069b	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f0(%ebx)
000006a2	js	0x000006c5
000006a4	movl	0xe8(%ebp),%edi
000006a7	movl	(%edi),%eax
000006a9	testl	%eax,%eax
000006ab	je	0x000006bb
000006ad	movl	%eax,(%esp)
000006b0	calll	_free
000006b5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%edi)
000006bb	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%ebx)
000006c5	movl	0xe0(%ebp),%eax
000006c8	movl	%eax,0x04(%esp)
000006cc	movl	%ebx,(%esp)
000006cf	calll	vgui::TreeView::~TreeView()
000006d4	movl	%esi,(%esp)
000006d7	calll	__Unwind_Resume
000006dc	calll	std::terminate()
000006e1	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::OpenRoot():
000006f0	pushl	%ebp
000006f1	movl	%esp,%ebp
000006f3	pushl	%ebx
000006f4	pushl	%edi
000006f5	pushl	%esi
000006f6	subl	$0x1c,%esp
000006f9	calll	0x000006fe
000006fe	popl	%edi
000006ff	movl	0x08(%ebp),%ebx
00000702	movl	(%ebx),%eax
00000704	movl	%ebx,(%esp)
00000707	call	*0x00000364(%eax)
0000070d	movzwl	0x0000022c(%ebx),%eax
00000714	imull	$0x18,%eax,%eax
00000717	addl	0x00000220(%ebx),%eax
0000071d	movl	%eax,(%esp)
00000720	calll	CUtlString::operator char const*() const
00000725	movl	%eax,0xf0(%ebp)
00000728	movl	$0x00000020,(%esp)
0000072f	calll	KeyValues::operator new(unsigned long)
00000734	movl	%eax,%esi
00000736	leal	0xa7cd6-0x6fe(%edi),%eax
0000073c	movl	%eax,0x04(%esp)
00000740	movl	%esi,(%esp)
00000743	calll	KeyValues::KeyValues(char const*)
00000748	leal	0x000001e8(%ebx),%eax
0000074e	movl	%eax,(%esp)
00000751	calll	CUtlString::Get()
00000756	movl	%eax,0x08(%esp)
0000075a	leal	0xa7cbc-0x6fe(%edi),%eax
00000760	movl	%eax,0x04(%esp)
00000764	movl	%esi,(%esp)
00000767	calll	KeyValues::SetString(char const*, char const*)
0000076c	leal	0xa7cd6-0x6fe(%edi),%eax
00000772	movl	%eax,0x04(%esp)
00000776	movl	%esi,(%esp)
00000779	movl	$0x00000001,0x08(%esp)
00000781	calll	KeyValues::SetInt(char const*, int)
00000786	leal	0xa7cdb-0x6fe(%edi),%eax
0000078c	movl	%eax,0x04(%esp)
00000790	movl	%esi,(%esp)
00000793	movl	$0x00000001,0x08(%esp)
0000079b	calll	KeyValues::SetInt(char const*, int)
000007a0	movzwl	0x0000022c(%ebx),%eax
000007a7	movl	%eax,0x08(%esp)
000007ab	leal	0xa7ce2-0x6fe(%edi),%eax
000007b1	movl	%eax,0x04(%esp)
000007b5	movl	%esi,(%esp)
000007b8	calll	KeyValues::SetInt(char const*, int)
000007bd	movl	0xf0(%ebp),%eax
000007c0	movl	%eax,0x08(%esp)
000007c4	leal	0xa7cec-0x6fe(%edi),%eax
000007ca	movl	%eax,0x04(%esp)
000007ce	movl	%esi,(%esp)
000007d1	calll	KeyValues::SetString(char const*, char const*)
000007d6	movl	(%ebx),%eax
000007d8	movl	0x00000348(%eax),%edi
000007de	movl	%ebx,(%esp)
000007e1	call	*0x0000034c(%eax)
000007e7	movl	%eax,0x08(%esp)
000007eb	movl	%esi,0x04(%esp)
000007ef	movl	%ebx,(%esp)
000007f2	call	*%edi
000007f4	movl	%eax,%edi
000007f6	movl	%esi,(%esp)
000007f9	calll	KeyValues::deleteThis()
000007fe	movl	(%ebx),%eax
00000800	movl	%edi,0x04(%esp)
00000804	movl	%ebx,(%esp)
00000807	movl	$0x00000001,0x08(%esp)
0000080f	call	*0x000003c0(%eax)
00000815	addl	$0x1c,%esp
00000818	popl	%esi
00000819	popl	%edi
0000081a	popl	%ebx
0000081b	popl	%ebp
0000081c	ret
0000081d	movl	%eax,%edi
0000081f	movl	%esi,(%esp)
00000822	calll	KeyValues::operator delete(void*)
00000827	movl	%edi,(%esp)
0000082a	calll	__Unwind_Resume
0000082f	calll	std::terminate()
00000834	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::GetRootDirectory():
00000840	movl	0x04(%esp),%eax
00000844	movzwl	0x0000022c(%eax),%eax
0000084b	ret
0000084c	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetTreeView::AddSubDirectory(unsigned short, char const*):
00000850	pushl	%ebp
00000851	movl	%esp,%ebp
00000853	pushl	%ebx
00000854	pushl	%edi
00000855	pushl	%esi
00000856	subl	$0x1c,%esp
00000859	movl	0x08(%ebp),%edi
0000085c	leal	0x00000220(%edi),%eax
00000862	movl	%eax,0xf0(%ebp)
00000865	movl	%eax,(%esp)
00000868	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
0000086d	movl	0x00000220(%edi),%ecx
00000873	movl	0x10(%ebp),%edx
00000876	movl	%edx,0x04(%esp)
0000087a	movzwl	%ax,%esi
0000087d	imull	$0x18,%esi,%ebx
00000880	addl	%ebx,%ecx
00000882	movl	%ecx,(%esp)
00000885	calll	CUtlString::operator=(char const*)
0000088a	addl	0x00000220(%edi),%ebx
00000890	movl	%ebx,(%esp)
00000893	calll	CUtlString::Get()
00000898	movl	%eax,(%esp)
0000089b	calll	V_strlower(char*)
000008a0	movzwl	0x0c(%ebp),%eax
000008a4	imull	$0x18,%eax,%ecx
000008a7	movl	0x00000220(%edi),%edx
000008ad	movzwl	0x12(%edx,%ecx),%ecx
000008b2	movl	%esi,0x0c(%esp)
000008b6	movl	%ecx,0x08(%esp)
000008ba	movl	%eax,0x04(%esp)
000008be	movl	0xf0(%ebp),%eax
000008c1	movl	%eax,(%esp)
000008c4	calll	CUtlNTree<CUtlString, unsigned short>::LinkChildBefore(unsigned short, unsigned short, unsigned short)
000008c9	movl	%esi,%eax
000008cb	addl	$0x1c,%esp
000008ce	popl	%esi
000008cf	popl	%edi
000008d0	popl	%ebx
000008d1	popl	%ebp
000008d2	ret
000008d3	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::ClearDirectories():
000008e0	pushl	%ebp
000008e1	movl	%esp,%ebp
000008e3	pushl	%edi
000008e4	pushl	%esi
000008e5	subl	$0x10,%esp
000008e8	movl	0x08(%ebp),%esi
000008eb	leal	0x00000220(%esi),%edi
000008f1	movl	%edi,(%esp)
000008f4	calll	CUtlNTree<CUtlString, unsigned short>::RemoveAll()
000008f9	movl	%edi,(%esp)
000008fc	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
00000901	movw	%ax,0x0000022c(%esi)
00000908	movzwl	%ax,%eax
0000090b	imull	$0x18,%eax,%eax
0000090e	addl	0x00000220(%esi),%eax
00000914	addl	$0x000001f8,%esi
0000091a	movl	%esi,0x04(%esp)
0000091e	movl	%eax,(%esp)
00000921	calll	CUtlString::operator=(CUtlString const&)
00000926	addl	$0x10,%esp
00000929	popl	%esi
0000092a	popl	%edi
0000092b	popl	%ebp
0000092c	ret
0000092d	nopl	(%eax)
CAssetTreeView::SetItemColorForDirectories(int):
00000930	pushl	%ebp
00000931	movl	%esp,%ebp
00000933	subl	$0x18,%esp
00000936	movl	0x08(%ebp),%eax
00000939	movl	(%eax),%ecx
0000093b	movl	0x000003a4(%ecx),%ecx
00000941	movb	$0xe0,0xf8(%ebp)
00000945	movb	$0xc0,0xf9(%ebp)
00000949	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xfa(%ebp)
0000094d	movb	$0xff,0xfb(%ebp)
00000951	leal	0xf8(%ebp),%edx
00000954	movl	%edx,0x08(%esp)
00000958	movl	0x0c(%ebp),%edx
0000095b	movl	%edx,0x04(%esp)
0000095f	movl	%eax,(%esp)
00000962	call	*%ecx
00000964	addl	$0x18,%esp
00000967	popl	%ebp
00000968	ret
00000969	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetTreeView::AddDirectoryToTreeView(int, char const*, unsigned short):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%ebx
00000974	pushl	%edi
00000975	pushl	%esi
00000976	subl	$0x0000012c,%esp
0000097c	calll	0x00000981
00000981	popl	%ebx
00000982	movl	0xb6aa5-0x981(%ebx),%eax
00000988	movl	%eax,0xfffffee4(%ebp)
0000098e	movl	(%eax),%eax
00000990	movl	%eax,0xf0(%ebp)
00000993	movzwl	0x14(%ebp),%eax
00000997	movl	%eax,0xfffffee0(%ebp)
0000099d	imull	$0x18,%eax,%ecx
000009a0	movl	%ecx,0xfffffedc(%ebp)
000009a6	movl	0x08(%ebp),%eax
000009a9	movl	0x00000220(%eax),%eax
000009af	addl	%ecx,%eax
000009b1	movl	%eax,(%esp)
000009b4	calll	CUtlString::Get()
000009b9	movl	%eax,%edi
000009bb	movl	$0x00000020,(%esp)
000009c2	calll	KeyValues::operator new(unsigned long)
000009c7	movl	%eax,%esi
000009c9	movl	%edi,0x0c(%esp)
000009cd	leal	0xa7cbc-0x981(%ebx),%eax
000009d3	movl	%eax,0x08(%esp)
000009d7	leal	0xa7cf1-0x981(%ebx),%eax
000009dd	movl	%eax,0x04(%esp)
000009e1	movl	%esi,(%esp)
000009e4	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000009e9	movl	0x10(%ebp),%eax
000009ec	movl	%edi,0x10(%esp)
000009f0	movl	%eax,0x0c(%esp)
000009f4	leal	0xa7cf6-0x981(%ebx),%eax
000009fa	movl	%eax,0x08(%esp)
000009fe	leal	0xfffffeec(%ebp),%edi
00000a04	movl	%edi,(%esp)
00000a07	movl	$0x00000104,0x04(%esp)
00000a0f	calll	V_snprintf(char*, int, char const*, ...)
00000a14	movl	%edi,(%esp)
00000a17	movl	$0x0000002f,0x04(%esp)
00000a1f	calll	V_FixSlashes(char*, char)
00000a24	movl	%edi,(%esp)
00000a27	calll	V_strlower(char*)
00000a2c	movl	0x08(%ebp),%edi
00000a2f	movl	0x00000220(%edi),%eax
00000a35	movl	0xfffffedc(%ebp),%ecx
00000a3b	cmpw	$0xff,0x12(%eax,%ecx)
00000a41	setne	%al
00000a44	movl	%esi,(%esp)
00000a47	leal	0xa7cec-0x981(%ebx),%ecx
00000a4d	movl	%ecx,0x04(%esp)
00000a51	leal	0xfffffeec(%ebp),%ecx
00000a57	movl	%ecx,0x08(%esp)
00000a5b	movzbl	%al,%eax
00000a5e	movl	%eax,0xfffffedc(%ebp)
00000a64	calll	KeyValues::SetString(char const*, char const*)
00000a69	movl	0xfffffedc(%ebp),%eax
00000a6f	movl	%eax,0x08(%esp)
00000a73	leal	0xa7cdb-0x981(%ebx),%eax
00000a79	movl	%eax,0x04(%esp)
00000a7d	movl	%esi,(%esp)
00000a80	calll	KeyValues::SetInt(char const*, int)
00000a85	leal	0xa7cfc-0x981(%ebx),%eax
00000a8b	movl	%eax,0x04(%esp)
00000a8f	movl	%esi,(%esp)
00000a92	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000a9a	calll	KeyValues::SetInt(char const*, int)
00000a9f	movl	0xfffffee0(%ebp),%eax
00000aa5	movl	%eax,0x08(%esp)
00000aa9	leal	0xa7ce2-0x981(%ebx),%eax
00000aaf	movl	%eax,0x04(%esp)
00000ab3	movl	%esi,(%esp)
00000ab6	calll	KeyValues::SetInt(char const*, int)
00000abb	movl	(%edi),%eax
00000abd	movl	0x0c(%ebp),%ecx
00000ac0	movl	%ecx,0x08(%esp)
00000ac4	movl	%esi,0x04(%esp)
00000ac8	movl	%edi,(%esp)
00000acb	call	*0x00000348(%eax)
00000ad1	movl	%eax,%ebx
00000ad3	movl	%esi,(%esp)
00000ad6	calll	KeyValues::deleteThis()
00000adb	movl	(%edi),%eax
00000add	movl	0x000003a4(%eax),%eax
00000ae3	movb	$0xe0,0xfffffee8(%ebp)
00000aea	movb	$0xc0,0xfffffee9(%ebp)
00000af1	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xfffffeea(%ebp)
00000af8	movb	$0xff,0xfffffeeb(%ebp)
00000aff	leal	0xfffffee8(%ebp),%ecx
00000b05	movl	%ecx,0x08(%esp)
00000b09	movl	%ebx,0x04(%esp)
00000b0d	movl	%edi,(%esp)
00000b10	call	*%eax
00000b12	movl	0xfffffee4(%ebp),%eax
00000b18	movl	(%eax),%eax
00000b1a	cmpl	0xf0(%ebp),%eax
00000b1d	jne	0x00000b3c
00000b1f	addl	$0x0000012c,%esp
00000b25	popl	%esi
00000b26	popl	%edi
00000b27	popl	%ebx
00000b28	popl	%ebp
00000b29	ret
00000b2a	movl	%eax,%edi
00000b2c	movl	%esi,(%esp)
00000b2f	calll	KeyValues::operator delete(void*)
00000b34	movl	%edi,(%esp)
00000b37	calll	__Unwind_Resume
00000b3c	calll	___stack_chk_fail
00000b41	calll	std::terminate()
00000b46	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::GenerateChildrenOfNode(int):
00000b50	pushl	%ebp
00000b51	movl	%esp,%ebp
00000b53	pushl	%ebx
00000b54	pushl	%edi
00000b55	pushl	%esi
00000b56	subl	$0x1c,%esp
00000b59	calll	0x00000b5e
00000b5e	popl	%edi
00000b5f	movl	0x08(%ebp),%ebx
00000b62	movl	(%ebx),%eax
00000b64	movl	0x0c(%ebp),%ecx
00000b67	movl	%ecx,0x04(%esp)
00000b6b	movl	%ebx,(%esp)
00000b6e	call	*0x0000035c(%eax)
00000b74	movl	%eax,0xf0(%ebp)
00000b77	leal	0xa7cec-0xb5e(%edi),%ecx
00000b7d	movl	%ecx,0x04(%esp)
00000b81	movl	%eax,(%esp)
00000b84	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000b8c	calll	KeyValues::GetString(char const*, char const*)
00000b91	movl	%eax,%esi
00000b93	testl	%esi,%esi
00000b95	je	0x00000bfe
00000b97	leal	0xa7ce2-0xb5e(%edi),%eax
00000b9d	movl	%eax,0x04(%esp)
00000ba1	movl	0xf0(%ebp),%eax
00000ba4	movl	%eax,(%esp)
00000ba7	movl	$0x0000ffff,0x08(%esp)
00000baf	calll	KeyValues::GetInt(char const*, int)
00000bb4	movzwl	%ax,%eax
00000bb7	cmpl	$0x0000ffff,%eax
00000bbc	je	0x00000bfe
00000bbe	imull	$0x18,%eax,%eax
00000bc1	movl	0x00000220(%ebx),%ecx
00000bc7	movw	0x12(%ecx,%eax),%ax
00000bcc	jmp	0x00000bf8
00000bce	nop
00000bd0	movzwl	%ax,%edi
00000bd3	movl	%edi,0x0c(%esp)
00000bd7	movl	%esi,0x08(%esp)
00000bdb	movl	0x0c(%ebp),%eax
00000bde	movl	%eax,0x04(%esp)
00000be2	movl	%ebx,(%esp)
00000be5	calll	CAssetTreeView::AddDirectoryToTreeView(int, char const*, unsigned short)
00000bea	imull	$0x18,%edi,%eax
00000bed	movl	0x00000220(%ebx),%ecx
00000bf3	movw	0x16(%ecx,%eax),%ax
00000bf8	cmpw	$0xff,%ax
00000bfc	jne	0x00000bd0
00000bfe	addl	$0x1c,%esp
00000c01	popl	%esi
00000c02	popl	%edi
00000c03	popl	%ebx
00000c04	popl	%ebp
00000c05	ret
00000c06	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::RefreshTreeViewItem(int):
00000c10	pushl	%ebp
00000c11	movl	%esp,%ebp
00000c13	pushl	%ebx
00000c14	pushl	%edi
00000c15	pushl	%esi
00000c16	subl	$0x1c,%esp
00000c19	calll	0x00000c1e
00000c1e	popl	%esi
00000c1f	movl	0xb6aa5-0xc1e(%esi),%eax
00000c25	movl	%eax,0xe0(%ebp)
00000c28	movl	(%eax),%eax
00000c2a	movl	%eax,0xf0(%ebp)
00000c2d	movw	$0xffff,%ax
00000c31	movl	%eax,0xe4(%ebp)
00000c34	movl	0x0c(%ebp),%ecx
00000c37	testl	%ecx,%ecx
00000c39	js	0x00000e57
00000c3f	movl	0x08(%ebp),%edx
00000c42	movl	(%edx),%eax
00000c44	subl	$0x10,%esp
00000c47	movl	%ecx,0x04(%esp)
00000c4b	movl	%edx,(%esp)
00000c4e	call	*0x0000035c(%eax)
00000c54	addl	$0x10,%esp
00000c57	movl	%eax,%ebx
00000c59	subl	$0x10,%esp
00000c5c	leal	0xa7ce2-0xc1e(%esi),%eax
00000c62	movl	%eax,0x04(%esp)
00000c66	movl	%ebx,(%esp)
00000c69	movl	$0x0000ffff,0x08(%esp)
00000c71	calll	KeyValues::GetInt(char const*, int)
00000c76	addl	$0x10,%esp
00000c79	movl	%eax,0xe4(%ebp)
00000c7c	subl	$0x10,%esp
00000c7f	leal	0xa7cec-0xc1e(%esi),%ecx
00000c85	movl	%ecx,0x04(%esp)
00000c89	movl	%ebx,(%esp)
00000c8c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000c94	movzwl	%ax,%eax
00000c97	imull	$0x18,%eax,%edi
00000c9a	movl	%edi,0xdc(%ebp)
00000c9d	calll	KeyValues::GetString(char const*, char const*)
00000ca2	addl	$0x10,%esp
00000ca5	movl	%eax,0xe8(%ebp)
00000ca8	movl	0x08(%ebp),%eax
00000cab	movl	0x00000220(%eax),%eax
00000cb1	movw	0x12(%eax,%edi),%di
00000cb6	subl	$0x10,%esp
00000cb9	leal	0xa7cdb-0xc1e(%esi),%esi
00000cbf	movl	%esi,0x04(%esp)
00000cc3	movl	%ebx,(%esp)
00000cc6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000cce	cmpw	$0xff,%di
00000cd2	setne	0xec(%ebp)
00000cd6	calll	KeyValues::GetInt(char const*, int)
00000cdb	addl	$0x10,%esp
00000cde	testl	%eax,%eax
00000ce0	setne	%al
00000ce3	xorb	0xec(%ebp),%al
00000ce6	je	0x00000d27
00000ce8	subl	$0x10,%esp
00000ceb	movl	%esi,0x04(%esp)
00000cef	movl	%ebx,(%esp)
00000cf2	cmpw	$0xff,%di
00000cf6	setne	%al
00000cf9	movzbl	%al,%eax
00000cfc	movl	%eax,0x08(%esp)
00000d00	calll	KeyValues::SetInt(char const*, int)
00000d05	addl	$0x10,%esp
00000d08	movl	0x08(%ebp),%ecx
00000d0b	movl	(%ecx),%eax
00000d0d	subl	$0x10,%esp
00000d10	movl	%ebx,0x08(%esp)
00000d14	movl	0x0c(%ebp),%edx
00000d17	movl	%edx,0x04(%esp)
00000d1b	movl	%ecx,(%esp)
00000d1e	call	*0x00000368(%eax)
00000d24	addl	$0x10,%esp
00000d27	movl	0x08(%ebp),%edi
00000d2a	movl	(%edi),%eax
00000d2c	subl	$0x10,%esp
00000d2f	movl	0x0c(%ebp),%esi
00000d32	movl	%esi,0x04(%esp)
00000d36	movl	%edi,(%esp)
00000d39	call	*0x000003c4(%eax)
00000d3f	addl	$0x10,%esp
00000d42	cmpb	$0x01,%al
00000d44	movl	%esi,%ecx
00000d46	jne	0x00000e57
00000d4c	movl	(%edi),%eax
00000d4e	subl	$0x10,%esp
00000d51	movl	%ecx,0x04(%esp)
00000d55	movl	%edi,(%esp)
00000d58	call	*0x00000350(%eax)
00000d5e	addl	$0x10,%esp
00000d61	movl	%eax,%ebx
00000d63	leal	0x0f(%ebx,%ebx),%eax
00000d67	andl	$0xf0,%eax
00000d6a	movl	%esp,%ecx
00000d6c	subl	%eax,%ecx
00000d6e	movl	%ecx,0xec(%ebp)
00000d71	movl	%ecx,%esp
00000d73	subl	$0x10,%esp
00000d76	leal	(%ebx,%ebx),%eax
00000d79	movl	%eax,0x08(%esp)
00000d7d	movl	%ecx,(%esp)
00000d80	movl	$0x000000ff,0x04(%esp)
00000d88	calll	_memset
00000d8d	addl	$0x10,%esp
00000d90	testl	%ebx,%ebx
00000d92	jle	0x00000dda
00000d94	xorl	%esi,%esi
00000d96	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00000da0	movl	(%edi),%eax
00000da2	subl	$0x10,%esp
00000da5	movl	%esi,0x08(%esp)
00000da9	movl	0x0c(%ebp),%ecx
00000dac	movl	%ecx,0x04(%esp)
00000db0	movl	%edi,(%esp)
00000db3	call	*0x00000354(%eax)
00000db9	addl	$0x10,%esp
00000dbc	subl	$0x10,%esp
00000dbf	movl	%eax,0x04(%esp)
00000dc3	movl	%edi,(%esp)
00000dc6	calll	CAssetTreeView::RefreshTreeViewItem(int)
00000dcb	addl	$0x10,%esp
00000dce	movl	0xec(%ebp),%ecx
00000dd1	movw	%ax,(%ecx,%esi,2)
00000dd5	incl	%esi
00000dd6	cmpl	%esi,%ebx
00000dd8	jne	0x00000da0
00000dda	movl	0x00000220(%edi),%eax
00000de0	movl	0xdc(%ebp),%ecx
00000de3	movw	0x12(%eax,%ecx),%si
00000de8	jmp	0x00000e2a
00000dea	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00000df0	movl	%edi,0xec(%ebp)
00000df3	subl	$0x10,%esp
00000df6	movzwl	%si,%eax
00000df9	movl	%eax,0x0c(%esp)
00000dfd	movl	0xe8(%ebp),%eax
00000e00	movl	%eax,0x08(%esp)
00000e04	movl	0x0c(%ebp),%eax
00000e07	movl	%eax,0x04(%esp)
00000e0b	movl	0x08(%ebp),%edi
00000e0e	movl	%edi,(%esp)
00000e11	calll	CAssetTreeView::AddDirectoryToTreeView(int, char const*, unsigned short)
00000e16	addl	$0x10,%esp
00000e19	movl	0x00000220(%edi),%eax
00000e1f	movzwl	%si,%ecx
00000e22	imull	$0x18,%ecx,%ecx
00000e25	movw	0x16(%eax,%ecx),%si
00000e2a	cmpw	$0xff,%si
00000e2e	je	0x00000e57
00000e30	xorl	%ecx,%ecx
00000e32	movl	0xec(%ebp),%edi
00000e35	jmp	0x00000e41
00000e37	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00000e40	incl	%ecx
00000e41	cmpl	%ebx,%ecx
00000e43	jge	0x00000df0
00000e45	cmpw	%si,(%edi,%ecx,2)
00000e49	jne	0x00000e40
00000e4b	movw	0xfe(%edi,%ebx,2),%dx
00000e50	movw	%dx,(%edi,%ecx,2)
00000e54	decl	%ebx
00000e55	jmp	0x00000e1f
00000e57	movl	0xe0(%ebp),%eax
00000e5a	movl	(%eax),%eax
00000e5c	cmpl	0xf0(%ebp),%eax
00000e5f	jne	0x00000e6f
00000e61	movl	0xe4(%ebp),%eax
00000e64	movzwl	%ax,%eax
00000e67	leal	0xf4(%ebp),%esp
00000e6a	popl	%esi
00000e6b	popl	%edi
00000e6c	popl	%ebx
00000e6d	popl	%ebp
00000e6e	ret
00000e6f	calll	___stack_chk_fail
00000e74	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::RefreshFileList():
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%esi
00000e84	subl	$0x14,%esp
00000e87	movl	0x08(%ebp),%esi
00000e8a	movl	(%esi),%eax
00000e8c	movl	%esi,(%esp)
00000e8f	call	*0x0000034c(%eax)
00000e95	movl	%eax,0x04(%esp)
00000e99	movl	%esi,(%esp)
00000e9c	calll	CAssetTreeView::RefreshTreeViewItem(int)
00000ea1	movl	(%esi),%eax
00000ea3	movl	%esi,(%esp)
00000ea6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00000eae	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00000eb6	call	*0x0000010c(%eax)
00000ebc	addl	$0x14,%esp
00000ebf	popl	%esi
00000ec0	popl	%ebp
00000ec1	ret
00000ec2	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::SelectFolder_R(int, char const*):
00000ed0	pushl	%ebp
00000ed1	movl	%esp,%ebp
00000ed3	pushl	%ebx
00000ed4	pushl	%edi
00000ed5	pushl	%esi
00000ed6	subl	$0x2c,%esp
00000ed9	calll	0x00000ede
00000ede	popl	%esi
00000edf	xorb	%bl,%bl
00000ee1	movl	0x0c(%ebp),%edi
00000ee4	testl	%edi,%edi
00000ee6	js	0x00001080
00000eec	movl	0x08(%ebp),%ebx
00000eef	movl	(%ebx),%eax
00000ef1	movl	%edi,0x04(%esp)
00000ef5	movl	%ebx,(%esp)
00000ef8	call	*0x0000035c(%eax)
00000efe	leal	0xa7d02-0xede(%esi),%ecx
00000f04	movl	%ecx,0x08(%esp)
00000f08	leal	0xa7cec-0xede(%esi),%ecx
00000f0e	movl	%ecx,0x04(%esp)
00000f12	movl	%eax,(%esp)
00000f15	calll	KeyValues::GetString(char const*, char const*)
00000f1a	movl	%eax,%esi
00000f1c	movl	0x10(%ebp),%eax
00000f1f	movl	%eax,0x04(%esp)
00000f23	movl	%esi,(%esp)
00000f26	calll	V_stricmp(char const*, char const*)
00000f2b	testl	%eax,%eax
00000f2d	jne	0x00000f5d
00000f2f	movl	(%ebx),%eax
00000f31	movl	%edi,0x04(%esp)
00000f35	movl	%ebx,(%esp)
00000f38	movl	$0x00000001,0x10(%esp)
00000f40	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
00000f48	movl	$0x00000001,0x08(%esp)
00000f50	call	*0x0000037c(%eax)
00000f56	movb	$0x01,%bl
00000f58	jmp	0x00001080
00000f5d	movl	%esi,0x04(%esp)
00000f61	leal	0xe0(%ebp),%edi
00000f64	movl	%edi,(%esp)
00000f67	calll	CUtlString::CUtlString(char const*)
00000f6c	movl	%edi,(%esp)
00000f6f	movl	$0x0000005c,0x04(%esp)
00000f77	calll	CUtlString::operator+=(char)
00000f7c	movl	%edi,(%esp)
00000f7f	calll	CUtlString::operator char const*() const
00000f84	movl	%eax,%esi
00000f86	movl	%edi,(%esp)
00000f89	calll	CUtlString::Length() const
00000f8e	movl	%eax,0x08(%esp)
00000f92	movl	0x10(%ebp),%eax
00000f95	movl	%eax,0x04(%esp)
00000f99	movl	%esi,(%esp)
00000f9c	calll	V_strnicmp(char const*, char const*, int)
00000fa1	movl	%ebx,%ecx
00000fa3	xorb	%bl,%bl
00000fa5	testl	%eax,%eax
00000fa7	jne	0x0000105d
00000fad	movl	%ecx,%edi
00000faf	movl	(%edi),%eax
00000fb1	movl	0x000003c0(%eax),%eax
00000fb7	movl	0x0c(%ebp),%ecx
00000fba	movl	%ecx,0x04(%esp)
00000fbe	movl	%edi,(%esp)
00000fc1	movl	$0x00000001,0x08(%esp)
00000fc9	call	*%eax
00000fcb	movl	(%edi),%eax
00000fcd	movl	0x00000350(%eax),%eax
00000fd3	movl	0x0c(%ebp),%ecx
00000fd6	movl	%ecx,0x04(%esp)
00000fda	movl	%edi,(%esp)
00000fdd	call	*%eax
00000fdf	movl	%eax,%esi
00000fe1	movl	%edi,%ecx
00000fe3	xorl	%edi,%edi
00000fe5	jmp	0x00000ff1
00000fe7	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00000ff0	incl	%edi
00000ff1	xorb	%bl,%bl
00000ff3	cmpl	%esi,%edi
00000ff5	jge	0x0000105d
00000ff7	movl	%ecx,%ebx
00000ff9	movl	(%ebx),%eax
00000ffb	movl	0x00000354(%eax),%eax
00001001	movl	%edi,0x08(%esp)
00001005	movl	0x0c(%ebp),%ecx
00001008	movl	%ecx,0x04(%esp)
0000100c	movl	%ebx,(%esp)
0000100f	call	*%eax
00001011	movl	0x10(%ebp),%ecx
00001014	movl	%ecx,0x08(%esp)
00001018	movl	%eax,0x04(%esp)
0000101c	movl	%ebx,(%esp)
0000101f	calll	CAssetTreeView::SelectFolder_R(int, char const*)
00001024	movl	%ebx,%ecx
00001026	movb	$0x01,%bl
00001028	testb	%al,%al
0000102a	jne	0x0000105d
0000102c	jmp	0x00000ff0
0000102e	jmp	0x00001030
00001030	movl	%eax,%esi
00001032	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
00001036	js	0x00001055
00001038	movl	0xe0(%ebp),%eax
0000103b	testl	%eax,%eax
0000103d	je	0x0000104e
0000103f	movl	%eax,(%esp)
00001042	calll	_free
00001047	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
0000104e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
00001055	movl	%esi,(%esp)
00001058	calll	__Unwind_Resume
0000105d	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
00001061	js	0x00001080
00001063	movl	0xe0(%ebp),%eax
00001066	testl	%eax,%eax
00001068	je	0x00001079
0000106a	movl	%eax,(%esp)
0000106d	calll	_free
00001072	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
00001079	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
00001080	movzbl	%bl,%eax
00001083	addl	$0x2c,%esp
00001086	popl	%esi
00001087	popl	%edi
00001088	popl	%ebx
00001089	popl	%ebp
0000108a	ret
0000108b	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::SelectFolder(char const*, char const*):
00001090	pushl	%ebp
00001091	movl	%esp,%ebp
00001093	pushl	%ebx
00001094	pushl	%edi
00001095	pushl	%esi
00001096	subl	$0x0000011c,%esp
0000109c	calll	0x000010a1
000010a1	popl	%eax
000010a2	movl	0xb6aa5-0x10a1(%eax),%esi
000010a8	movl	(%esi),%ecx
000010aa	movl	%ecx,0xf0(%ebp)
000010ad	movl	0x10(%ebp),%ecx
000010b0	movl	%ecx,0x10(%esp)
000010b4	movl	0x0c(%ebp),%ecx
000010b7	movl	%ecx,0x0c(%esp)
000010bb	leal	0xa7d03-0x10a1(%eax),%eax
000010c1	movl	%eax,0x08(%esp)
000010c5	leal	0xfffffeec(%ebp),%edi
000010cb	movl	%edi,(%esp)
000010ce	movl	$0x00000104,0x04(%esp)
000010d6	calll	V_snprintf(char*, int, char const*, ...)
000010db	movl	%edi,(%esp)
000010de	calll	V_StripTrailingSlash(char*)
000010e3	movl	0x08(%ebp),%ebx
000010e6	movl	(%ebx),%eax
000010e8	movl	%ebx,(%esp)
000010eb	call	*0x0000034c(%eax)
000010f1	movl	%edi,0x08(%esp)
000010f5	movl	%eax,0x04(%esp)
000010f9	movl	%ebx,(%esp)
000010fc	calll	CAssetTreeView::SelectFolder_R(int, char const*)
00001101	movl	(%esi),%eax
00001103	cmpl	0xf0(%ebp),%eax
00001106	jne	0x00001113
00001108	addl	$0x0000011c,%esp
0000110e	popl	%esi
0000110f	popl	%edi
00001110	popl	%ebx
00001111	popl	%ebp
00001112	ret
00001113	calll	___stack_chk_fail
00001118	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetTreeView::ApplySchemeSettings(vgui::IScheme*):
00001120	pushl	%ebp
00001121	movl	%esp,%ebp
00001123	pushl	%ebx
00001124	pushl	%edi
00001125	pushl	%esi
00001126	subl	$0x1c,%esp
00001129	calll	0x0000112e
0000112e	popl	%edi
0000112f	movl	0x0c(%ebp),%ebx
00001132	movl	%ebx,0x04(%esp)
00001136	movl	0x08(%ebp),%esi
00001139	movl	%esi,(%esp)
0000113c	calll	vgui::TreeView::ApplySchemeSettings(vgui::IScheme*)
00001141	movl	(%esi),%eax
00001143	movl	0x00000370(%eax),%eax
00001149	movl	%eax,0xec(%ebp)
0000114c	movl	(%ebx),%eax
0000114e	leal	0xa7d09-0x112e(%edi),%ecx
00001154	movl	%ecx,0x04(%esp)
00001158	movl	%ebx,(%esp)
0000115b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00001163	call	*0x10(%eax)
00001166	movl	%eax,0x04(%esp)
0000116a	movl	%esi,(%esp)
0000116d	call	*0xec(%ebp)
00001170	movl	(%esi),%eax
00001172	movl	0x000000f0(%eax),%eax
00001178	movb	$0xd8,0xf0(%ebp)
0000117c	movb	$0xde,0xf1(%ebp)
00001180	movb	$0xd3,0xf2(%ebp)
00001184	movb	$0xff,0xf3(%ebp)
00001188	movl	0xf0(%ebp),%ecx
0000118b	movl	%ecx,0x04(%esp)
0000118f	movl	%esi,(%esp)
00001192	call	*%eax
00001194	addl	$0x1c,%esp
00001197	popl	%esi
00001198	popl	%edi
00001199	popl	%ebx
0000119a	popl	%ebp
0000119b	ret
0000119c	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetCache::CAssetCache():
000011a0	calll	0x000011a5
000011a5	popl	%ecx
000011a6	movl	0x04(%esp),%eax
000011aa	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%eax)
000011b1	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
000011b7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%eax)
000011be	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%eax)
000011c5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%eax)
000011cc	leal	CAssetCache::CachedAssetLessFunc(CAssetCache::CachedAssetList_t const&, CAssetCache::CachedAssetList_t const&)-0x11a5(%ecx),%ecx
000011d2	movl	%ecx,0x14(%eax)
000011d5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%eax)
000011dc	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%eax)
000011e3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x20(%eax)
000011ea	movw	$0xffff,0x24(%eax)
000011f0	movw	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x26(%eax)
000011f6	movw	$0xffff,0x28(%eax)
000011fc	movw	$0xffff,0x2a(%eax)
00001202	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x2c(%eax)
00001209	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x30(%eax)
0000120d	ret
0000120e	nop
CAssetCache::CachedAssetLessFunc(CAssetCache::CachedAssetList_t const&, CAssetCache::CachedAssetList_t const&):
00001210	pushl	%ebp
00001211	movl	%esp,%ebp
00001213	pushl	%ebx
00001214	pushl	%edi
00001215	pushl	%esi
00001216	subl	$0x0c,%esp
00001219	movl	0x08(%ebp),%eax
0000121c	leal	0x18(%eax),%eax
0000121f	movl	%eax,(%esp)
00001222	calll	CUtlString::operator char const*() const
00001227	movl	%eax,%esi
00001229	movl	0x0c(%ebp),%ebx
0000122c	leal	0x18(%ebx),%eax
0000122f	movl	%eax,(%esp)
00001232	calll	CUtlString::operator char const*() const
00001237	movl	%eax,0x04(%esp)
0000123b	movl	%esi,(%esp)
0000123e	calll	V_stricmp(char const*, char const*)
00001243	movb	$0x01,%cl
00001245	testl	%eax,%eax
00001247	jg	0x00001291
00001249	movl	0x34(%ebx),%eax
0000124c	movl	0x08(%ebp),%ecx
0000124f	movl	0x34(%ecx),%esi
00001252	cmpl	%eax,%esi
00001254	jne	0x0000128a
00001256	xorl	%edi,%edi
00001258	jmp	0x00001261
0000125a	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00001260	incl	%edi
00001261	xorb	%cl,%cl
00001263	cmpl	%esi,%edi
00001265	jge	0x00001291
00001267	movl	0x08(%ebp),%eax
0000126a	movl	0x28(%eax),%eax
0000126d	movl	(%eax,%edi,4),%eax
00001270	movl	0x28(%ebx),%ecx
00001273	movl	(%ecx,%edi,4),%ecx
00001276	movl	%ecx,0x04(%esp)
0000127a	movl	%eax,(%esp)
0000127d	calll	V_stricmp(char const*, char const*)
00001282	testl	%eax,%eax
00001284	je	0x00001260
00001286	testl	%eax,%eax
00001288	jmp	0x0000128e
0000128a	subl	%eax,%esi
0000128c	testl	%esi,%esi
0000128e	setg	%cl
00001291	movzbl	%cl,%eax
00001294	addl	$0x0c,%esp
00001297	popl	%esi
00001298	popl	%edi
00001299	popl	%ebx
0000129a	popl	%ebp
0000129b	ret
0000129c	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetCache::CAssetCache():
000012a0	calll	0x000012a5
000012a5	popl	%ecx
000012a6	movl	0x04(%esp),%eax
000012aa	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%eax)
000012b1	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
000012b7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%eax)
000012be	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%eax)
000012c5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%eax)
000012cc	leal	CAssetCache::CachedAssetLessFunc(CAssetCache::CachedAssetList_t const&, CAssetCache::CachedAssetList_t const&)-0x12a5(%ecx),%ecx
000012d2	movl	%ecx,0x14(%eax)
000012d5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%eax)
000012dc	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%eax)
000012e3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x20(%eax)
000012ea	movw	$0xffff,0x24(%eax)
000012f0	movw	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x26(%eax)
000012f6	movw	$0xffff,0x28(%eax)
000012fc	movw	$0xffff,0x2a(%eax)
00001302	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x2c(%eax)
00001309	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x30(%eax)
0000130d	ret
0000130e	nop
CAssetCache::ModCount() const:
00001310	movl	0x04(%esp),%eax
00001314	movl	0x0c(%eax),%eax
00001317	ret
00001318	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::ModInfo(int) const:
00001320	movl	0x08(%esp),%eax
00001324	shll	$0x05,%eax
00001327	movl	0x04(%esp),%ecx
0000132b	addl	(%ecx),%eax
0000132d	ret
0000132e	nop
CAssetCache::BuildModList():
00001330	pushl	%ebp
00001331	movl	%esp,%ebp
00001333	pushl	%ebx
00001334	pushl	%edi
00001335	pushl	%esi
00001336	subl	$0x0000011c,%esp
0000133c	calll	0x00001341
00001341	popl	%esi
00001342	movl	0xb6aa5-0x1341(%esi),%eax
00001348	movl	%eax,0xfffffee0(%ebp)
0000134e	movl	(%eax),%eax
00001350	movl	%eax,0xf0(%ebp)
00001353	movl	0x08(%ebp),%eax
00001356	testb	$0x01,0x30(%eax)
0000135a	jne	0x000014c2
00001360	movb	$0x01,0x30(%eax)
00001364	subl	$0x10,%esp
00001367	movl	%eax,(%esp)
0000136a	calll	CUtlVector<CAssetCache::ModInfo_t, CUtlMemory<CAssetCache::ModInfo_t, int> >::RemoveAll()
0000136f	addl	$0x10,%esp
00001372	movl	0xb6aa9-0x1341(%esi),%edi
00001378	movl	(%edi),%ecx
0000137a	movl	(%ecx),%eax
0000137c	subl	$0x20,%esp
0000137f	leal	0xa7d16-0x1341(%esi),%esi
00001385	movl	%esi,0x04(%esp)
00001389	movl	%ecx,(%esp)
0000138c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%esp)
00001394	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
0000139c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000013a4	call	*0x34(%eax)
000013a7	addl	$0x20,%esp
000013aa	leal	0x0f(%eax),%ecx
000013ad	andl	$0xf0,%ecx
000013b0	movl	%esp,%ebx
000013b2	subl	%ecx,%ebx
000013b4	movl	%ebx,%esp
000013b6	movl	(%edi),%edx
000013b8	movl	(%edx),%ecx
000013ba	subl	$0x20,%esp
000013bd	movl	%eax,0x10(%esp)
000013c1	movl	%ebx,0x0c(%esp)
000013c5	movl	%esi,0x04(%esp)
000013c9	movl	%edx,(%esp)
000013cc	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000013d4	call	*0x34(%ecx)
000013d7	addl	$0x20,%esp
000013da	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
000013e0	subl	$0x10,%esp
000013e3	movl	%ebx,(%esp)
000013e6	movl	$0x0000003b,0x04(%esp)
000013ee	calll	_strchr
000013f3	addl	$0x10,%esp
000013f6	xorb	%cl,%cl
000013f8	testl	%eax,%eax
000013fa	je	0x00001401
000013fc	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
000013ff	movb	$0x01,%cl
00001401	movb	%cl,0xfffffeeb(%ebp)
00001407	subl	$0x10,%esp
0000140a	movl	%ebx,(%esp)
0000140d	movl	%eax,0xfffffee4(%ebp)
00001413	calll	V_StripTrailingSlash(char*)
00001418	addl	$0x10,%esp
0000141b	subl	$0x10,%esp
0000141e	movl	%ebx,(%esp)
00001421	movl	$0x0000002f,0x04(%esp)
00001429	calll	V_FixSlashes(char*, char)
0000142e	addl	$0x10,%esp
00001431	subl	$0x10,%esp
00001434	leal	0xfffffeec(%ebp),%eax
0000143a	movl	%eax,0x04(%esp)
0000143e	movl	%ebx,(%esp)
00001441	movl	$0x00000104,0x08(%esp)
00001449	calll	V_FileBase(char const*, char*, int)
0000144e	addl	$0x10,%esp
00001451	movl	0x08(%ebp),%esi
00001454	movl	0x0c(%esi),%eax
00001457	subl	$0x10,%esp
0000145a	movl	%eax,0x04(%esp)
0000145e	movl	%esi,(%esp)
00001461	calll	CUtlVector<CAssetCache::ModInfo_t, CUtlMemory<CAssetCache::ModInfo_t, int> >::InsertBefore(int)
00001466	addl	$0x10,%esp
00001469	movl	%eax,%edi
0000146b	shll	$0x05,%edi
0000146e	movl	(%esi),%eax
00001470	addl	%edi,%eax
00001472	subl	$0x10,%esp
00001475	leal	0xfffffeec(%ebp),%ecx
0000147b	movl	%ecx,0x04(%esp)
0000147f	movl	%eax,(%esp)
00001482	calll	CUtlString::Set(char const*)
00001487	addl	$0x10,%esp
0000148a	movl	(%esi),%eax
0000148c	subl	$0x10,%esp
0000148f	movl	%ebx,0x04(%esp)
00001493	leal	0x10(%eax,%edi),%eax
00001497	movl	%eax,(%esp)
0000149a	movl	0xfffffee4(%ebp),%eax
000014a0	leal	0x01(%eax),%ebx
000014a3	cmpb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xfffffeeb(%ebp)
000014aa	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),%eax
000014af	cmovel	%eax,%ebx
000014b2	calll	CUtlString::Set(char const*)
000014b7	addl	$0x10,%esp
000014ba	testl	%ebx,%ebx
000014bc	jne	0x000013e0
000014c2	movl	0xfffffee0(%ebp),%eax
000014c8	movl	(%eax),%eax
000014ca	cmpl	0xf0(%ebp),%eax
000014cd	jne	0x000014d7
000014cf	leal	0xf4(%ebp),%esp
000014d2	popl	%esi
000014d3	popl	%edi
000014d4	popl	%ebx
000014d5	popl	%ebp
000014d6	ret
000014d7	calll	___stack_chk_fail
000014dc	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetCache::AddAssetToList(CAssetCache::CachedAssetList_t&, char const*, int):
000014e0	pushl	%ebp
000014e1	movl	%esp,%ebp
000014e3	pushl	%ebx
000014e4	pushl	%edi
000014e5	pushl	%esi
000014e6	subl	$0x1c,%esp
000014e9	movl	0x0c(%ebp),%esi
000014ec	movl	0x04(%esi),%ecx
000014ef	movl	0x0c(%esi),%edi
000014f2	leal	0x01(%edi),%edx
000014f5	cmpl	%ecx,%edx
000014f7	movl	%edi,%eax
000014f9	jle	0x00001512
000014fb	movl	%edx,%eax
000014fd	subl	%ecx,%eax
000014ff	movl	%eax,0x04(%esp)
00001503	movl	%esi,(%esp)
00001506	movl	%edx,%ebx
00001508	calll	CUtlMemory<CAssetCache::CachedAssetInfo_t, int>::Grow(int)
0000150d	movl	%ebx,%edx
0000150f	movl	0x0c(%esi),%eax
00001512	incl	%eax
00001513	movl	%eax,0x0c(%esi)
00001516	movl	(%esi),%ebx
00001518	movl	%ebx,0x10(%esi)
0000151b	subl	%edi,%eax
0000151d	decl	%eax
0000151e	testl	%eax,%eax
00001520	jle	0x00001541
00001522	imull	$0x14,%eax,%eax
00001525	movl	%eax,0x08(%esp)
00001529	imull	$0x14,%edi,%eax
0000152c	addl	%ebx,%eax
0000152e	movl	%eax,0x04(%esp)
00001532	imull	$0x14,%edx,%eax
00001535	addl	%ebx,%eax
00001537	movl	%eax,(%esp)
0000153a	calll	_memmove
0000153f	movl	(%esi),%ebx
00001541	imull	$0x14,%edi,%esi
00001544	movl	%ebx,%eax
00001546	addl	%esi,%eax
00001548	je	0x00001557
0000154a	movl	%eax,(%esp)
0000154d	calll	CUtlString::CUtlString()
00001552	movl	0x0c(%ebp),%eax
00001555	movl	(%eax),%ebx
00001557	movl	0x14(%ebp),%edi
0000155a	movl	0x10(%ebp),%eax
0000155d	movl	%eax,0x04(%esp)
00001561	leal	(%ebx,%esi),%eax
00001564	movl	%eax,(%esp)
00001567	calll	CUtlString::Set(char const*)
0000156c	movl	%edi,0x10(%ebx,%esi)
00001570	addl	$0x1c,%esp
00001573	popl	%esi
00001574	popl	%edi
00001575	popl	%ebx
00001576	popl	%ebp
00001577	ret
00001578	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::DoesExtensionMatch(CAssetCache::CachedAssetList_t&, char const*):
00001580	pushl	%ebp
00001581	movl	%esp,%ebp
00001583	pushl	%ebx
00001584	pushl	%edi
00001585	pushl	%esi
00001586	subl	$0x0000011c,%esp
0000158c	calll	0x00001591
00001591	popl	%eax
00001592	movl	0xb6aa5-0x1591(%eax),%eax
00001598	movl	%eax,0xfffffee8(%ebp)
0000159e	movl	(%eax),%eax
000015a0	movl	%eax,0xf0(%ebp)
000015a3	leal	0xfffffeec(%ebp),%eax
000015a9	movl	%eax,0x04(%esp)
000015ad	movl	0x10(%ebp),%eax
000015b0	movl	%eax,(%esp)
000015b3	movl	$0x00000104,0x08(%esp)
000015bb	calll	V_ExtractFileExtension(char const*, char*, int)
000015c0	movl	0x0c(%ebp),%esi
000015c3	movl	0x34(%esi),%ebx
000015c6	xorl	%edi,%edi
000015c8	jmp	0x000015d1
000015ca	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
000015d0	incl	%edi
000015d1	xorb	%cl,%cl
000015d3	cmpl	%ebx,%edi
000015d5	jge	0x000015f5
000015d7	movl	0x28(%esi),%eax
000015da	movl	(%eax,%edi,4),%eax
000015dd	leal	0xfffffeec(%ebp),%ecx
000015e3	movl	%ecx,0x04(%esp)
000015e7	movl	%eax,(%esp)
000015ea	calll	V_stricmp(char const*, char const*)
000015ef	movb	$0x01,%cl
000015f1	testl	%eax,%eax
000015f3	jne	0x000015d0
000015f5	movl	0xfffffee8(%ebp),%eax
000015fb	movl	(%eax),%eax
000015fd	cmpl	0xf0(%ebp),%eax
00001600	jne	0x00001610
00001602	movzbl	%cl,%eax
00001605	addl	$0x0000011c,%esp
0000160b	popl	%esi
0000160c	popl	%edi
0000160d	popl	%ebx
0000160e	popl	%ebp
0000160f	ret
00001610	calll	___stack_chk_fail
00001615	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::AddFilesInDirectory(CAssetCache::CachedAssetList_t&, char const*, char const*, unsigned short, float, float):
00001620	pushl	%ebp
00001621	movl	%esp,%ebp
00001623	pushl	%ebx
00001624	pushl	%edi
00001625	pushl	%esi
00001626	subl	$0x0000037c,%esp
0000162c	calll	0x00001631
00001631	popl	%esi
00001632	movl	%esi,0xfffffcc8(%ebp)
00001638	movl	0xb6aa5-0x1631(%esi),%eax
0000163e	movl	%eax,0xfffffc98(%ebp)
00001644	movl	(%eax),%eax
00001646	movl	%eax,0xf0(%ebp)
00001649	movb	$0x01,%al
0000164b	movl	0x0c(%ebp),%ebx
0000164e	cmpl	$0xff,0x58(%ebx)
00001652	je	0x00001a74
00001658	movl	0x08(%ebp),%eax
0000165b	movl	0x0c(%eax),%eax
0000165e	movl	%eax,0xfffffcd0(%ebp)
00001664	leal	0x18(%ebx),%edi
00001667	movl	%edi,(%esp)
0000166a	calll	CUtlString::operator char const*() const
0000166f	xorl	%ecx,%ecx
00001671	testl	%eax,%eax
00001673	je	0x00001687
00001675	movl	%edi,(%esp)
00001678	calll	CUtlString::operator char const*() const
0000167d	movl	%eax,(%esp)
00001680	calll	_strlen
00001685	movl	%eax,%ecx
00001687	movl	%ecx,0xfffffcbc(%ebp)
0000168d	movl	%edi,0xfffffcc4(%ebp)
00001693	movzwl	0x18(%ebp),%eax
00001697	movss	0x20(%ebp),%xmm0
0000169c	movss	0x1c(%ebp),%xmm1
000016a1	movl	0x10(%ebp),%edi
000016a4	leal	0xfffffde8(%ebp),%edx
000016aa	leal	0x01(%ecx,%edx),%ecx
000016ae	movl	%ecx,0xfffffcb8(%ebp)
000016b4	cvtss2sd	%xmm0,%xmm0
000016b8	movsd	%xmm0,0xfffffcb0(%ebp)
000016c0	cvtss2sd	%xmm1,%xmm0
000016c4	movsd	%xmm0,0xfffffca8(%ebp)
000016cc	leal	0x3c(%ebx),%ecx
000016cf	movl	%ecx,0xfffffca4(%ebp)
000016d5	movzwl	%ax,%eax
000016d8	movl	%eax,0xfffffca0(%ebp)
000016de	imull	$0x18,%eax,%eax
000016e1	movl	%eax,0xfffffc9c(%ebp)
000016e7	jmp	0x00001709
000016e9	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
000016f0	movl	0xfffffccc(%ebp),%eax
000016f6	movl	(%eax),%ecx
000016f8	movl	(%ecx),%eax
000016fa	movl	0x58(%ebx),%edx
000016fd	movl	%edx,0x04(%esp)
00001701	movl	%ecx,(%esp)
00001704	call	*0x70(%eax)
00001707	movl	%eax,%edi
00001709	movb	$0x01,%al
0000170b	testl	%edi,%edi
0000170d	je	0x00001a74
00001713	movl	%edi,0x10(%esp)
00001717	movl	0x14(%ebp),%eax
0000171a	movl	%eax,0x0c(%esp)
0000171e	leal	0xa7d03-0x1631(%esi),%eax
00001724	movl	%eax,0x08(%esp)
00001728	leal	0xfffffde8(%ebp),%eax
0000172e	movl	%eax,(%esp)
00001731	movl	$0x00000104,0x04(%esp)
00001739	calll	V_snprintf(char*, int, char const*, ...)
0000173e	movl	0xb6aa9-0x1631(%esi),%eax
00001744	movl	%eax,0xfffffccc(%ebp)
0000174a	movl	(%eax),%ecx
0000174c	movl	(%ecx),%eax
0000174e	movl	0x58(%ebx),%edx
00001751	movl	%edx,0x04(%esp)
00001755	movl	%ecx,(%esp)
00001758	call	*0x74(%eax)
0000175b	cmpb	$0x01,%al
0000175d	jne	0x000018bc
00001763	leal	0xa7d1b-0x1631(%esi),%eax
00001769	movl	%eax,0x04(%esp)
0000176d	movl	%edi,(%esp)
00001770	calll	_strstr
00001775	testl	%eax,%eax
00001777	jne	0x000016f0
0000177d	leal	0xa7d20-0x1631(%esi),%eax
00001783	movl	%eax,0x04(%esp)
00001787	movl	%edi,(%esp)
0000178a	movl	$0x00000002,0x08(%esp)
00001792	calll	V_strnicmp(char const*, char const*, int)
00001797	testl	%eax,%eax
00001799	je	0x00001a40
0000179f	movl	0xfffffcc8(%ebp),%eax
000017a5	leal	0xa7d22-0x1631(%eax),%eax
000017ab	movl	%eax,0x04(%esp)
000017af	movl	%edi,(%esp)
000017b2	movl	$0x00000003,0x08(%esp)
000017ba	calll	V_strnicmp(char const*, char const*, int)
000017bf	testl	%eax,%eax
000017c1	je	0x00001a40
000017c7	movl	0x0c(%ebp),%eax
000017ca	movl	0x14(%eax),%ebx
000017cd	leal	0x00000220(%ebx),%eax
000017d3	movl	%eax,0xfffffcc0(%ebp)
000017d9	movl	%eax,(%esp)
000017dc	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
000017e1	movw	%ax,0xfffffcd4(%ebp)
000017e8	movl	0x00000220(%ebx),%ecx
000017ee	movl	%edi,0x04(%esp)
000017f2	movzwl	%ax,%edi
000017f5	imull	$0x18,%edi,%esi
000017f8	addl	%esi,%ecx
000017fa	movl	%ecx,(%esp)
000017fd	calll	CUtlString::operator=(char const*)
00001802	addl	0x00000220(%ebx),%esi
00001808	movl	%esi,(%esp)
0000180b	calll	CUtlString::Get()
00001810	movl	%eax,(%esp)
00001813	calll	V_strlower(char*)
00001818	movl	0x00000220(%ebx),%eax
0000181e	movl	0xfffffc9c(%ebp),%ecx
00001824	movzwl	0x12(%eax,%ecx),%eax
00001829	movl	%edi,0x0c(%esp)
0000182d	movl	%eax,0x08(%esp)
00001831	movl	0xfffffca0(%ebp),%eax
00001837	movl	%eax,0x04(%esp)
0000183b	movl	0xfffffcc0(%ebp),%eax
00001841	movl	%eax,(%esp)
00001844	calll	CUtlNTree<CUtlString, unsigned short>::LinkChildBefore(unsigned short, unsigned short, unsigned short)
00001849	movl	0xfffffca4(%ebp),%edi
0000184f	movl	%edi,(%esp)
00001852	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
0000185a	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::AllocInternal(bool)
0000185f	movl	$0x0000ffff,%esi
00001864	cmpw	$0xff,%ax
00001868	je	0x00001890
0000186a	movzwl	%ax,%esi
0000186d	movl	%esi,0x08(%esp)
00001871	movl	%edi,(%esp)
00001874	movl	$0x0000ffff,0x04(%esp)
0000187c	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
00001881	imull	$0x18,%esi,%eax
00001884	addl	(%edi),%eax
00001886	je	0x00001890
00001888	movl	%eax,(%esp)
0000188b	calll	CUtlString::CUtlString()
00001890	movl	(%edi),%eax
00001892	leal	0xfffffde8(%ebp),%ecx
00001898	movl	%ecx,0x04(%esp)
0000189c	imull	$0x18,%esi,%esi
0000189f	addl	%esi,%eax
000018a1	movl	%eax,(%esp)
000018a4	calll	CUtlString::operator=(char const*)
000018a9	movl	(%edi),%eax
000018ab	movw	0xfffffcd4(%ebp),%cx
000018b2	movw	%cx,0x10(%eax,%esi)
000018b7	jmp	0x00001a40
000018bc	leal	0xfffffeec(%ebp),%esi
000018c2	movl	%esi,0x04(%esp)
000018c6	movl	%edi,(%esp)
000018c9	movl	$0x00000104,0x08(%esp)
000018d1	calll	V_ExtractFileExtension(char const*, char*, int)
000018d6	movl	0x34(%ebx),%edi
000018d9	xorl	%ebx,%ebx
000018db	jmp	0x000018e1
000018dd	nopl	(%eax)
000018e0	incl	%ebx
000018e1	cmpl	%edi,%ebx
000018e3	jge	0x00001a40
000018e9	movl	0x0c(%ebp),%eax
000018ec	movl	0x28(%eax),%eax
000018ef	movl	(%eax,%ebx,4),%eax
000018f2	movl	%esi,0x04(%esp)
000018f6	movl	%eax,(%esp)
000018f9	calll	V_stricmp(char const*, char const*)
000018fe	testl	%eax,%eax
00001900	jne	0x000018e0
00001902	movl	0xfffffccc(%ebp),%eax
00001908	movl	(%eax),%ecx
0000190a	movl	(%ecx),%eax
0000190c	leal	0xfffffce4(%ebp),%edx
00001912	movl	%edx,0x0c(%esp)
00001916	movl	0xfffffcc8(%ebp),%edx
0000191c	leal	0xa7d16-0x1631(%edx),%edx
00001922	movl	%edx,0x08(%esp)
00001926	leal	0xfffffde8(%ebp),%edx
0000192c	movl	%edx,0x04(%esp)
00001930	movl	%ecx,(%esp)
00001933	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
0000193b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00001943	movl	$0x00000104,0x10(%esp)
0000194b	call	*0x30(%eax)
0000194e	xorl	%eax,%eax
00001950	movl	$0x00000010,%esi
00001955	jmp	0x0000196a
00001957	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00001960	addl	$0x20,%esi
00001963	movl	0xfffffcd4(%ebp),%eax
00001969	incl	%eax
0000196a	movl	%eax,0xfffffcd4(%ebp)
00001970	cmpl	0xfffffcd0(%ebp),%eax
00001976	jge	0x00001a40
0000197c	movl	0x08(%ebp),%ebx
0000197f	movl	(%ebx),%eax
00001981	addl	%esi,%eax
00001983	movl	%eax,(%esp)
00001986	calll	CUtlString::operator char const*() const
0000198b	movl	%eax,%edi
0000198d	movl	(%ebx),%eax
0000198f	addl	%esi,%eax
00001991	movl	%eax,(%esp)
00001994	calll	CUtlString::Length() const
00001999	movl	%eax,0x08(%esp)
0000199d	movl	%edi,0x04(%esp)
000019a1	leal	0xfffffce4(%ebp),%eax
000019a7	movl	%eax,(%esp)
000019aa	calll	V_strnicmp(char const*, char const*, int)
000019af	testl	%eax,%eax
000019b1	jne	0x00001960
000019b3	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xfffffcd4(%ebp)
000019ba	js	0x00001a40
000019c0	movl	0xfffffcc4(%ebp),%edi
000019c6	movl	%edi,(%esp)
000019c9	calll	CUtlString::operator char const*() const
000019ce	testl	%eax,%eax
000019d0	leal	0xfffffde8(%ebp),%esi
000019d6	movl	0xfffffcbc(%ebp),%ebx
000019dc	je	0x00001a18
000019de	movl	%edi,(%esp)
000019e1	calll	CUtlString::operator char const*() const
000019e6	movl	%ebx,0x08(%esp)
000019ea	leal	0xfffffde8(%ebp),%esi
000019f0	movl	%esi,0x04(%esp)
000019f4	movl	%eax,(%esp)
000019f7	calll	V_strnicmp(char const*, char const*, int)
000019fc	testl	%eax,%eax
000019fe	jne	0x00001a18
00001a00	cmpb	$0x5c,0xfffffde8(%ebp,%ebx)
00001a08	je	0x00001a12
00001a0a	leal	0xfffffde8(%ebp),%esi
00001a10	jmp	0x00001a18
00001a12	movl	0xfffffcb8(%ebp),%esi
00001a18	movl	%edi,0xfffffcc4(%ebp)
00001a1e	movl	%esi,(%esp)
00001a21	calll	V_strlower(char*)
00001a26	movl	0xfffffcd4(%ebp),%eax
00001a2c	movl	%eax,0x0c(%esp)
00001a30	movl	%esi,0x08(%esp)
00001a34	movl	0x0c(%ebp),%eax
00001a37	movl	%eax,0x04(%esp)
00001a3b	calll	CAssetCache::AddAssetToList(CAssetCache::CachedAssetList_t&, char const*, int)
00001a40	calll	_Plat_FloatTime
00001a45	fstpl	0xfffffcd8(%ebp)
00001a4b	movsd	0xfffffcd8(%ebp),%xmm0
00001a53	subsd	0xfffffca8(%ebp),%xmm0
00001a5b	xorb	%al,%al
00001a5d	ucomisd	0xfffffcb0(%ebp),%xmm0
00001a65	movl	0xfffffcc8(%ebp),%esi
00001a6b	movl	0x0c(%ebp),%ebx
00001a6e	jb	0x000016f0
00001a74	movl	0xfffffc98(%ebp),%ecx
00001a7a	movl	(%ecx),%ecx
00001a7c	cmpl	0xf0(%ebp),%ecx
00001a7f	jne	0x00001a8f
00001a81	movzbl	%al,%eax
00001a84	addl	$0x0000037c,%esp
00001a8a	popl	%esi
00001a8b	popl	%edi
00001a8c	popl	%ebx
00001a8d	popl	%ebp
00001a8e	ret
00001a8f	calll	___stack_chk_fail
00001a94	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::ContinueSearchForAssets(AssetList_t__*, float):
00001aa0	pushl	%ebp
00001aa1	movl	%esp,%ebp
00001aa3	pushl	%ebx
00001aa4	pushl	%edi
00001aa5	pushl	%esi
00001aa6	subl	$0x0000015c,%esp
00001aac	calll	0x00001ab1
00001ab1	popl	%eax
00001ab2	movl	%eax,0xfffffee4(%ebp)
00001ab8	movl	0xb6aa5-0x1ab1(%eax),%eax
00001abe	movl	%eax,0xfffffec8(%ebp)
00001ac4	movl	(%eax),%eax
00001ac6	movl	%eax,0xf0(%ebp)
00001ac9	movl	0x08(%ebp),%eax
00001acc	movl	0x18(%eax),%esi
00001acf	movl	%esi,0xfffffec4(%ebp)
00001ad5	calll	_Plat_FloatTime
00001ada	fstps	0xfffffee8(%ebp)
00001ae0	movzwl	0x0c(%ebp),%eax
00001ae4	imull	$0x68,%eax,%eax
00001ae7	movl	%eax,0xfffffec0(%ebp)
00001aed	leal	CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)(%esi,%eax),%edi
00001af1	leal	0x50(%esi,%eax),%ebx
00001af5	movl	%ebx,0xfffffed8(%ebp)
00001afb	leal	0x56(%esi,%eax),%ecx
00001aff	movl	%ecx,0xfffffed4(%ebp)
00001b05	leal	0x44(%esi,%eax),%ecx
00001b09	movl	%ecx,0xfffffee0(%ebp)
00001b0f	leal	0x08(%esi,%eax),%eax
00001b13	movl	%eax,0xfffffed0(%ebp)
00001b19	movss	0xfffffee8(%ebp),%xmm0
00001b21	movss	%xmm0,0xfffffecc(%ebp)
00001b29	jmp	0x00001bd8
00001b2e	nop
00001b30	movl	0xfffffee4(%ebp),%ecx
00001b36	movl	0xb6aa9-0x1ab1(%ecx),%ecx
00001b3c	movl	%eax,%edi
00001b3e	movl	(%ecx),%edx
00001b40	movl	(%edx),%ecx
00001b42	movl	%esi,0x04(%esp)
00001b46	movl	%edx,(%esp)
00001b49	call	*0x70(%ecx)
00001b4c	movss	0x10(%ebp),%xmm0
00001b51	movss	%xmm0,0x18(%esp)
00001b57	movss	0xfffffecc(%ebp),%xmm0
00001b5f	movss	%xmm0,0x14(%esp)
00001b65	movl	0xfffffedc(%ebp),%ecx
00001b6b	movzwl	%cx,%ecx
00001b6e	movl	%ecx,0x10(%esp)
00001b72	movl	%edi,0x0c(%esp)
00001b76	movl	%eax,0x08(%esp)
00001b7a	movl	0xfffffed0(%ebp),%eax
00001b80	movl	%eax,0x04(%esp)
00001b84	movl	0x08(%ebp),%eax
00001b87	movl	%eax,(%esp)
00001b8a	calll	CAssetCache::AddFilesInDirectory(CAssetCache::CachedAssetList_t&, char const*, char const*, unsigned short, float, float)
00001b8f	xorb	%cl,%cl
00001b91	testb	%al,%al
00001b93	je	0x00001c8c
00001b99	movl	0xfffffee4(%ebp),%eax
00001b9f	movl	0xb6aa9-0x1ab1(%eax),%eax
00001ba5	movl	(%eax),%ecx
00001ba7	movl	(%ecx),%eax
00001ba9	movl	%ebx,%edi
00001bab	movl	(%edi),%edx
00001bad	movl	%edx,0x04(%esp)
00001bb1	movl	%ecx,(%esp)
00001bb4	call	*0x78(%eax)
00001bb7	movl	$0xffffffff,(%edi)
00001bbd	movl	0xfffffed8(%ebp),%ebx
00001bc3	movzwl	(%ebx),%eax
00001bc6	movl	%eax,0x04(%esp)
00001bca	movl	0xfffffee0(%ebp),%eax
00001bd0	movl	%eax,(%esp)
00001bd3	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::Free(unsigned short)
00001bd8	movl	0xfffffed4(%ebp),%eax
00001bde	cmpw	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
00001be2	je	0x00001c79
00001be8	movl	0xfffffee0(%ebp),%esi
00001bee	movl	(%esi),%ecx
00001bf0	movzwl	(%ebx),%eax
00001bf3	imull	$0x18,%eax,%eax
00001bf6	addl	%ecx,%eax
00001bf8	movl	%eax,(%esp)
00001bfb	calll	CUtlString::operator char const*() const
00001c00	movl	(%esi),%edx
00001c02	movzwl	(%ebx),%ecx
00001c05	imull	$0x18,%ecx,%ecx
00001c08	movzwl	0x10(%edx,%ecx),%ecx
00001c0d	movl	%ecx,0xfffffedc(%ebp)
00001c13	movl	(%edi),%esi
00001c15	cmpl	$0xff,%esi
00001c18	movl	%edi,%ebx
00001c1a	jne	0x00001b30
00001c20	movl	%eax,0x0c(%esp)
00001c24	movl	0xfffffee4(%ebp),%esi
00001c2a	leal	0xa7d25-0x1ab1(%esi),%ecx
00001c30	movl	%ecx,0x08(%esp)
00001c34	leal	0xfffffeec(%ebp),%ecx
00001c3a	movl	%ecx,(%esp)
00001c3d	movl	$0x00000104,0x04(%esp)
00001c45	movl	%eax,%edi
00001c47	calll	V_snprintf(char*, int, char const*, ...)
00001c4c	movl	0xb6aa9-0x1ab1(%esi),%eax
00001c52	movl	(%eax),%ecx
00001c54	movl	(%ecx),%eax
00001c56	movl	%ebx,0x0c(%esp)
00001c5a	leal	0xa7d16-0x1ab1(%esi),%edx
00001c60	movl	%edx,0x08(%esp)
00001c64	leal	0xfffffeec(%ebp),%edx
00001c6a	movl	%edx,0x04(%esp)
00001c6e	movl	%ecx,(%esp)
00001c71	call	*0x7c(%eax)
00001c74	jmp	0x00001b4c
00001c79	movl	0xfffffec4(%ebp),%eax
00001c7f	movl	0xfffffec0(%ebp),%ecx
00001c85	movb	$0x01,0x64(%eax,%ecx)
00001c8a	movb	$0x01,%cl
00001c8c	movl	0xfffffec8(%ebp),%eax
00001c92	movl	(%eax),%eax
00001c94	cmpl	0xf0(%ebp),%eax
00001c97	jne	0x00001ca7
00001c99	movzbl	%cl,%eax
00001c9c	addl	$0x0000015c,%esp
00001ca2	popl	%esi
00001ca3	popl	%edi
00001ca4	popl	%ebx
00001ca5	popl	%ebp
00001ca6	ret
00001ca7	calll	___stack_chk_fail
00001cac	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CAssetCache::BeginAssetScan(AssetList_t__*, bool):
00001cb0	pushl	%ebp
00001cb1	movl	%esp,%ebp
00001cb3	pushl	%ebx
00001cb4	pushl	%edi
00001cb5	pushl	%esi
00001cb6	subl	$0x1c,%esp
00001cb9	calll	0x00001cbe
00001cbe	popl	%eax
00001cbf	movzwl	0x0c(%ebp),%ecx
00001cc3	imull	$0x68,%ecx,%ebx
00001cc6	movl	0x08(%ebp),%ecx
00001cc9	movl	0x18(%ecx),%edi
00001ccc	leal	0x64(%edi,%ebx),%edx
00001cd0	movb	0x10(%ebp),%cl
00001cd3	testb	%cl,%cl
00001cd5	je	0x00001d13
00001cd7	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%edx)
00001cda	movl	%edx,0xf0(%ebp)
00001cdd	movl	CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)(%edi,%ebx),%ecx
00001ce1	cmpl	$0xff,%ecx
00001ce4	je	0x00001d04
00001ce6	leal	CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)(%edi,%ebx),%esi
00001cea	movl	0xb6aa9-0x1cbe(%eax),%eax
00001cf0	movl	(%eax),%edx
00001cf2	movl	(%edx),%eax
00001cf4	movl	%ecx,0x04(%esp)
00001cf8	movl	%edx,(%esp)
00001cfb	call	*0x78(%eax)
00001cfe	movl	$0xffffffff,(%esi)
00001d04	leal	0x44(%edi,%ebx),%eax
00001d08	movl	%eax,(%esp)
00001d0b	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::RemoveAll()
00001d10	movl	0xf0(%ebp),%edx
00001d13	xorb	%al,%al
00001d15	testb	$0x01,(%edx)
00001d18	jne	0x00001e60
00001d1e	movb	$0x01,%al
00001d20	cmpl	$0xff,CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)(%edi,%ebx)
00001d25	jne	0x00001e60
00001d2b	movl	%ebx,0xec(%ebp)
00001d2e	movl	0x14(%edi,%ebx),%ebx
00001d32	movl	%edi,0xe8(%ebp)
00001d35	testl	%ebx,%ebx
00001d37	jle	0x00001d87
00001d39	movl	0xec(%ebp),%eax
00001d3c	movl	0xe8(%ebp),%ecx
00001d3f	leal	0x08(%ecx,%eax),%eax
00001d43	movl	%eax,0xf0(%ebp)
00001d46	imull	$0x14,%ebx,%edi
00001d49	addl	$0xf4,%edi
00001d4c	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
00001d50	movl	0xf0(%ebp),%eax
00001d53	movl	(%eax),%esi
00001d55	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%esi,%edi)
00001d59	jns	0x00001d65
00001d5b	decl	%ebx
00001d5c	addl	$0xec,%edi
00001d5f	testl	%ebx,%ebx
00001d61	jg	0x00001d50
00001d63	jmp	0x00001d87
00001d65	movl	0xf8(%esi,%edi),%eax
00001d69	testl	%eax,%eax
00001d6b	je	0x00001d7d
00001d6d	movl	%eax,(%esp)
00001d70	calll	_free
00001d75	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xf8(%esi,%edi)
00001d7d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xfc(%esi,%edi)
00001d85	jmp	0x00001d5b
00001d87	movl	0xec(%ebp),%ebx
00001d8a	movl	0xe8(%ebp),%edi
00001d8d	leal	0x14(%edi,%ebx),%eax
00001d91	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
00001d97	movl	0x1c(%edi,%ebx),%esi
00001d9b	leal	0x00000220(%esi),%eax
00001da1	movl	%eax,0xf0(%ebp)
00001da4	movl	%eax,(%esp)
00001da7	calll	CUtlNTree<CUtlString, unsigned short>::RemoveAll()
00001dac	movl	0xf0(%ebp),%eax
00001daf	movl	%eax,(%esp)
00001db2	calll	CUtlNTree<CUtlString, unsigned short>::Alloc()
00001db7	movw	%ax,0x0000022c(%esi)
00001dbe	movzwl	%ax,%eax
00001dc1	imull	$0x18,%eax,%eax
00001dc4	addl	0x00000220(%esi),%eax
00001dca	addl	$0x000001f8,%esi
00001dd0	movl	%esi,0x04(%esp)
00001dd4	movl	%eax,(%esp)
00001dd7	leal	0x44(%edi,%ebx),%esi
00001ddb	calll	CUtlString::operator=(CUtlString const&)
00001de0	movl	%esi,(%esp)
00001de3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00001deb	leal	0x1c(%edi,%ebx),%eax
00001def	movl	%eax,0xf0(%ebp)
00001df2	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::AllocInternal(bool)
00001df7	cmpw	$0xff,%ax
00001dfb	jne	0x00001e06
00001dfd	movl	$0x0000ffff,%edi
00001e02	movl	%esi,%ebx
00001e04	jmp	0x00001e2e
00001e06	movzwl	%ax,%edi
00001e09	movl	%edi,0x08(%esp)
00001e0d	movl	%esi,(%esp)
00001e10	movl	$0x0000ffff,0x04(%esp)
00001e18	calll	CUtlLinkedList<CAssetCache::DirToCheck_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAssetCache::DirToCheck_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
00001e1d	imull	$0x18,%edi,%eax
00001e20	addl	(%esi),%eax
00001e22	movl	%esi,%ebx
00001e24	je	0x00001e2e
00001e26	movl	%eax,(%esp)
00001e29	calll	CUtlString::CUtlString()
00001e2e	movl	0xe8(%ebp),%eax
00001e31	movl	0xec(%ebp),%ecx
00001e34	leal	0x20(%eax,%ecx),%ecx
00001e38	movl	(%ebx),%eax
00001e3a	movl	%ecx,0x04(%esp)
00001e3e	imull	$0x18,%edi,%esi
00001e41	addl	%esi,%eax
00001e43	movl	%eax,(%esp)
00001e46	calll	CUtlString::operator=(CUtlString const&)
00001e4b	movl	(%ebx),%eax
00001e4d	movl	0xf0(%ebp),%ecx
00001e50	movl	(%ecx),%ecx
00001e52	movw	0x0000022c(%ecx),%cx
00001e59	movw	%cx,0x10(%eax,%esi)
00001e5e	movb	$0x01,%al
00001e60	movzbl	%al,%eax
00001e63	addl	$0x1c,%esp
00001e66	popl	%esi
00001e67	popl	%edi
00001e68	popl	%ebx
00001e69	popl	%ebp
00001e6a	ret
00001e6b	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::FindAssetList(char const*, char const*, int, char const**):
00001e70	pushl	%ebp
00001e71	movl	%esp,%ebp
00001e73	pushl	%ebx
00001e74	pushl	%edi
00001e75	pushl	%esi
00001e76	subl	$0x0000009c,%esp
00001e7c	calll	0x00001e81
00001e81	popl	%eax
00001e82	movl	%eax,0xffffff74(%ebp)
00001e88	movl	0x18(%ebp),%edi
00001e8b	movl	%edi,0x0c(%esp)
00001e8f	movl	0x14(%ebp),%ebx
00001e92	movl	%ebx,0x08(%esp)
00001e96	movl	0x10(%ebp),%eax
00001e99	movl	%eax,0x04(%esp)
00001e9d	leal	0x90(%ebp),%eax
00001ea0	movl	%eax,(%esp)
00001ea3	calll	CAssetCache::CachedAssetList_t::CachedAssetList_t(char const*, int, char const**)
00001ea8	movl	0x08(%ebp),%eax
00001eab	leal	0x14(%eax),%esi
00001eae	leal	0x90(%ebp),%eax
00001eb1	movl	%eax,0x04(%esp)
00001eb5	movl	%esi,(%esp)
00001eb8	calll	CUtlRBTree<CAssetCache::CachedAssetList_t, unsigned short, bool (*)(CAssetCache::CachedAssetList_t const&, CAssetCache::CachedAssetList_t const&), CUtlMemory<UtlRBTreeNode_t<CAssetCache::CachedAssetList_t, unsigned short>, unsigned short> >::Find(CAssetCache::CachedAssetList_t const&) const
00001ebd	movw	%ax,0x8e(%ebp)
00001ec1	cmpw	$0xff,0x8e(%ebp)
00001ec6	jne	0x00002045
00001ecc	leal	0x90(%ebp),%eax
00001ecf	movl	%eax,0x04(%esp)
00001ed3	movl	%esi,(%esp)
00001ed6	calll	CUtlRBTree<CAssetCache::CachedAssetList_t, unsigned short, bool (*)(CAssetCache::CachedAssetList_t const&, CAssetCache::CachedAssetList_t const&), CUtlMemory<UtlRBTreeNode_t<CAssetCache::CachedAssetList_t, unsigned short>, unsigned short> >::Insert(CAssetCache::CachedAssetList_t const&)
00001edb	movw	%ax,0x8e(%ebp)
00001edf	movl	0x08(%ebp),%eax
00001ee2	movl	0x18(%eax),%edx
00001ee5	movl	%edx,0x88(%ebp)
00001ee8	movzwl	0x8e(%ebp),%eax
00001eec	movl	0x10(%ebp),%ecx
00001eef	movl	%ecx,0x04(%esp)
00001ef3	imull	$0x68,%eax,%eax
00001ef6	movl	%eax,0x84(%ebp)
00001ef9	leal	0x20(%edx,%eax),%eax
00001efd	movl	%eax,(%esp)
00001f00	calll	CUtlString::operator=(char const*)
00001f05	testl	%ebx,%ebx
00001f07	je	0x00001fee
00001f0d	movl	0x88(%ebp),%eax
00001f10	movl	0x84(%ebp),%ecx
00001f13	movl	0x3c(%eax,%ecx),%esi
00001f17	leal	0x3c(%eax,%ecx),%edx
00001f1b	movl	%edx,0xffffff78(%ebp)
00001f21	leal	0x30(%eax,%ecx),%edx
00001f25	movl	%edx,0x80(%ebp)
00001f28	leal	(%esi,%ebx),%edx
00001f2b	movl	%edx,0xffffff7c(%ebp)
00001f31	movl	0x80(%ebp),%edx
00001f34	movl	0x34(%eax,%ecx),%ecx
00001f38	cmpl	%ecx,0xffffff7c(%ebp)
00001f3e	movl	%esi,%eax
00001f40	jle	0x00001f61
00001f42	movl	0xffffff7c(%ebp),%eax
00001f48	subl	%ecx,%eax
00001f4a	movl	%eax,0x04(%esp)
00001f4e	movl	%edx,(%esp)
00001f51	calll	CUtlMemory<char const*, int>::Grow(int)
00001f56	movl	0x80(%ebp),%edx
00001f59	movl	0xffffff78(%ebp),%eax
00001f5f	movl	(%eax),%eax
00001f61	movl	%edx,0x80(%ebp)
00001f64	addl	%ebx,%eax
00001f66	movl	%eax,0xffffff70(%ebp)
00001f6c	movl	0xffffff78(%ebp),%ecx
00001f72	movl	%eax,(%ecx)
00001f74	movl	(%edx),%ecx
00001f76	movl	%ecx,0xffffff78(%ebp)
00001f7c	movl	0x88(%ebp),%edx
00001f7f	movl	0x84(%ebp),%ecx
00001f82	movl	0xffffff78(%ebp),%eax
00001f88	movl	%eax,0x40(%edx,%ecx)
00001f8c	movl	0xffffff70(%ebp),%eax
00001f92	movl	0xffffff78(%ebp),%ecx
00001f98	subl	%esi,%eax
00001f9a	subl	%ebx,%eax
00001f9c	testl	%eax,%eax
00001f9e	jle	0x00001fc3
00001fa0	testl	%ebx,%ebx
00001fa2	jle	0x00001fc3
00001fa4	shll	$0x02,%eax
00001fa7	movl	%eax,0x08(%esp)
00001fab	leal	(%ecx,%esi,4),%eax
00001fae	movl	%eax,0x04(%esp)
00001fb2	movl	0xffffff7c(%ebp),%eax
00001fb8	leal	(%ecx,%eax,4),%eax
00001fbb	movl	%eax,(%esp)
00001fbe	calll	_memmove
00001fc3	testl	%ebx,%ebx
00001fc5	setle	%al
00001fc8	testl	%edi,%edi
00001fca	movl	0x80(%ebp),%edx
00001fcd	je	0x00001fee
00001fcf	testb	%al,%al
00001fd1	jne	0x00001fee
00001fd3	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00001fe0	movl	(%edx),%eax
00001fe2	movl	(%edi),%ecx
00001fe4	movl	%ecx,(%eax,%esi,4)
00001fe7	addl	$0x04,%edi
00001fea	incl	%esi
00001feb	decl	%ebx
00001fec	jne	0x00001fe0
00001fee	movl	0x88(%ebp),%eax
00001ff1	movl	0x84(%ebp),%ecx
00001ff4	movl	$0xffffffff,CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)(%eax,%ecx)
00001ffc	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x64(%eax,%ecx)
00002001	movl	%ecx,%ebx
00002003	movl	%eax,%esi
00002005	movl	$0x00000238,(%esp)
0000200c	calll	operator new(unsigned long)
00002011	movl	%eax,%edi
00002013	movl	0x0c(%ebp),%eax
00002016	movl	0x10(%ebp),%ecx
00002019	movl	%ecx,0x10(%esp)
0000201d	movl	%eax,0x0c(%esp)
00002021	movl	0xffffff74(%ebp),%eax
00002027	leal	0xa7d2a-0x1e81(%eax),%eax
0000202d	movl	%eax,0x08(%esp)
00002031	movl	%edi,(%esp)
00002034	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
0000203c	calll	CAssetTreeView::CAssetTreeView(vgui::Panel*, char const*, char const*, char const*)
00002041	movl	%edi,0x1c(%esi,%ebx)
00002045	leal	0x90(%ebp),%eax
00002048	movl	%eax,(%esp)
0000204b	movzwl	0x8e(%ebp),%esi
0000204f	calll	CAssetCache::CachedAssetList_t::~CachedAssetList_t()
00002054	movl	%esi,%eax
00002056	addl	$0x0000009c,%esp
0000205c	popl	%esi
0000205d	popl	%edi
0000205e	popl	%ebx
0000205f	popl	%ebp
00002060	ret
00002061	movl	%eax,%esi
00002063	leal	0x90(%ebp),%eax
00002066	movl	%eax,(%esp)
00002069	calll	CAssetCache::CachedAssetList_t::~CachedAssetList_t()
0000206e	movl	%esi,(%esp)
00002071	calll	__Unwind_Resume
00002076	movl	%eax,%esi
00002078	movl	%edi,(%esp)
0000207b	calll	operator delete(void*)
00002080	jmp	0x00002063
00002082	calll	std::terminate()
00002087	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CAssetCache::GetFileTree(AssetList_t__*):
00002090	movl	0x08(%esp),%eax
00002094	cmpl	$0x0000ffff,%eax
00002099	jne	0x0000209e
0000209b	xorl	%eax,%eax
0000209d	ret
0000209e	movl	0x04(%esp),%ecx
000020a2	movl	0x18(%ecx),%ecx
000020a5	movzwl	%ax,%eax
000020a8	imull	$0x68,%eax,%eax
000020ab	movl	0x1c(%ecx,%eax),%eax
000020af	ret
CAssetCache::GetAssetCount(AssetList_t__*) const:
000020b0	movl	0x08(%esp),%eax
000020b4	cmpl	$0x0000ffff,%eax
000020b9	jne	0x000020be
000020bb	xorl	%eax,%eax
000020bd	ret
000020be	movl	0x04(%esp),%ecx
000020c2	movl	0x18(%ecx),%ecx
000020c5	movzwl	%ax,%eax
000020c8	imull	$0x68,%eax,%eax
000020cb	movl	0x14(%ecx,%eax),%eax
000020cf	ret
CAssetCache::GetAsset(AssetList_t__*, int) const:
000020d0	movzwl	0x08(%esp),%eax
000020d5	imull	$0x68,%eax,%ecx
000020d8	movl	0x04(%esp),%eax
000020dc	movl	0x18(%eax),%edx
000020df	imull	$0x14,0x0c(%esp),%eax
000020e4	addl	0x08(%edx,%ecx),%eax
000020e8	ret
000020e9	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*):
000020f0	pushl	%ebp
000020f1	movl	%esp,%ebp
000020f3	pushl	%ebx
000020f4	pushl	%edi
000020f5	pushl	%esi
000020f6	subl	$0x4c,%esp
000020f9	calll	0x000020fe
000020fe	popl	%ebx
000020ff	leal	0xa7d37-0x20fe(%ebx),%eax
00002105	movl	%eax,0x0c(%esp)
00002109	movl	0x0c(%ebp),%eax
0000210c	movl	%eax,0x08(%esp)
00002110	leal	VTT for CBaseAssetPicker-0x20fe+0x00000004(%ebx),%eax
00002116	movl	%eax,0xcc(%ebp)
00002119	movl	%eax,0x04(%esp)
0000211d	movl	0x08(%ebp),%edi
00002120	movl	%edi,(%esp)
00002123	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00002128	leal	vtable for CBaseAssetPicker-0x20fe+0x0000000c(%ebx),%eax
0000212e	movl	%eax,(%edi)
00002130	testb	$0x01,CBaseAssetPicker::ChainToMap()::chained-0x20fe(%ebx)
00002137	jne	0x0000216e
00002139	movb	$0x01,CBaseAssetPicker::ChainToMap()::chained-0x20fe(%ebx)
00002140	leal	0xa7fa2-0x20fe(%ebx),%eax
00002146	movl	%eax,(%esp)
00002149	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000214e	movl	%eax,%esi
00002150	leal	CBaseAssetPicker::GetPanelClassName()-0x20fe(%ebx),%eax
00002156	movl	%eax,0x1c(%esi)
00002159	testl	%esi,%esi
0000215b	je	0x0000216e
0000215d	leal	0xa8000-0x20fe(%ebx),%eax
00002163	movl	%eax,(%esp)
00002166	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000216b	movl	%eax,0x18(%esi)
0000216e	testb	$0x01,CBaseAssetPicker::ChainToAnimationMap()::chained-0x20fe(%ebx)
00002175	jne	0x000021ac
00002177	movb	$0x01,CBaseAssetPicker::ChainToAnimationMap()::chained-0x20fe(%ebx)
0000217e	leal	0xa7fa2-0x20fe(%ebx),%eax
00002184	movl	%eax,(%esp)
00002187	calll	FindOrAddPanelAnimationMap(char const*)
0000218c	movl	%eax,%esi
0000218e	leal	CBaseAssetPicker::GetPanelClassName()-0x20fe(%ebx),%eax
00002194	movl	%eax,0x18(%esi)
00002197	testl	%esi,%esi
00002199	je	0x000021ac
0000219b	leal	0xa8000-0x20fe(%ebx),%eax
000021a1	movl	%eax,(%esp)
000021a4	calll	FindOrAddPanelAnimationMap(char const*)
000021a9	movl	%eax,0x14(%esi)
000021ac	testb	$0x01,CBaseAssetPicker::KB_ChainToMap()::chained-0x20fe(%ebx)
000021b3	jne	0x000021ea
000021b5	movb	$0x01,CBaseAssetPicker::KB_ChainToMap()::chained-0x20fe(%ebx)
000021bc	leal	0xa7fa2-0x20fe(%ebx),%eax
000021c2	movl	%eax,(%esp)
000021c5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000021ca	movl	%eax,%esi
000021cc	leal	CBaseAssetPicker::GetPanelClassName()-0x20fe(%ebx),%eax
000021d2	movl	%eax,0x44(%esi)
000021d5	testl	%esi,%esi
000021d7	je	0x000021ea
000021d9	leal	0xa8000-0x20fe(%ebx),%eax
000021df	movl	%eax,(%esp)
000021e2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000021e7	movl	%eax,0x18(%esi)
000021ea	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x20fe(%ebx)
000021f1	jne	0x00002249
000021f3	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x20fe(%ebx)
000021fa	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xd4(%ebp)
00002201	movl	$0x000003b9,0xd0(%ebp)
00002208	movsd	0xd0(%ebp),%xmm0
0000220d	movsd	%xmm0,0x04(%esp)
00002213	leal	0xa7ff4-0x20fe(%ebx),%eax
00002219	movl	%eax,(%esp)
0000221c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
00002224	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
0000222c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00002234	movl	$0x00000006,0x10(%esp)
0000223c	movl	$0x00000001,0x0c(%esp)
00002244	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002249	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x20fe(%ebx)
00002250	jne	0x000022a8
00002252	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x20fe(%ebx)
00002259	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xdc(%ebp)
00002260	movl	$0x000003bd,0xd8(%ebp)
00002267	movsd	0xd8(%ebp),%xmm0
0000226c	movsd	%xmm0,0x04(%esp)
00002272	leal	0xa7fe7-0x20fe(%ebx),%eax
00002278	movl	%eax,(%esp)
0000227b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
00002283	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
0000228b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00002293	movl	$0x00000006,0x10(%esp)
0000229b	movl	$0x00000001,0x0c(%esp)
000022a3	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000022a8	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x20fe(%ebx)
000022af	jne	0x00002307
000022b1	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x20fe(%ebx)
000022b8	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
000022bf	movl	$0x000003c1,0xe0(%ebp)
000022c6	movsd	0xe0(%ebp),%xmm0
000022cb	movsd	%xmm0,0x04(%esp)
000022d1	leal	0xa7fd4-0x20fe(%ebx),%eax
000022d7	movl	%eax,(%esp)
000022da	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
000022e2	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
000022ea	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
000022f2	movl	$0x00000006,0x10(%esp)
000022fa	movl	$0x00000001,0x0c(%esp)
00002302	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002307	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x20fe(%ebx)
0000230e	jne	0x00002366
00002310	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x20fe(%ebx)
00002317	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xec(%ebp)
0000231e	movl	$0x000003c5,0xe8(%ebp)
00002325	movsd	0xe8(%ebp),%xmm0
0000232a	movsd	%xmm0,0x04(%esp)
00002330	leal	0xa7fbf-0x20fe(%ebx),%eax
00002336	movl	%eax,(%esp)
00002339	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
00002341	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
00002349	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00002351	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%esp)
00002359	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
00002361	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002366	leal	0x000001d4(%edi),%esi
0000236c	movl	%esi,(%esp)
0000236f	calll	CUtlString::CUtlString()
00002374	movl	%esi,0xc8(%ebp)
00002377	leal	0x000001e4(%edi),%ebx
0000237d	movl	%ebx,(%esp)
00002380	calll	CUtlString::CUtlString()
00002385	leal	0x000001f4(%edi),%eax
0000238b	movl	%eax,(%esp)
0000238e	calll	CUtlString::CUtlString()
00002393	movl	0x1c(%ebp),%ecx
00002396	movl	0x18(%ebp),%eax
00002399	movl	0x14(%ebp),%edx
0000239c	movl	0x10(%ebp),%esi
0000239f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%edi)
000023a9	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000204(%edi)
000023b3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000210(%edi)
000023bd	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%edi)
000023c7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%edi)
000023d1	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%edi)
000023db	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%edi)
000023e5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%edi)
000023ef	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%edi)
000023f9	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%edi)
00002403	movb	0x0000023c(%edi),%bl
00002409	movl	%esi,0x00000218(%edi)
0000240f	movl	%ecx,0x0000021c(%edi)
00002415	movl	%edx,0x00000220(%edi)
0000241b	movl	%eax,0x00000224(%edi)
00002421	andb	$0xf8,%bl
00002424	movb	%bl,0x0000023c(%edi)
0000242a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000244(%edi)
00002434	movb	$0x01,0x00000248(%edi)
0000243b	movl	$0x0000ffff,0x000001d0(%edi)
00002445	addl	$0x4c,%esp
00002448	popl	%esi
00002449	popl	%edi
0000244a	popl	%ebx
0000244b	popl	%ebp
0000244c	ret
0000244d	movl	%eax,%esi
0000244f	jmp	0x000024a8
00002451	movl	%eax,%esi
00002453	jmp	0x0000247e
00002455	movl	%eax,%esi
00002457	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%edi)
0000245e	js	0x0000247e
00002460	movl	(%ebx),%eax
00002462	testl	%eax,%eax
00002464	je	0x00002474
00002466	movl	%eax,(%esp)
00002469	calll	_free
0000246e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
00002474	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e8(%edi)
0000247e	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001dc(%edi)
00002485	js	0x000024a8
00002487	movl	0xc8(%ebp),%ebx
0000248a	movl	(%ebx),%eax
0000248c	testl	%eax,%eax
0000248e	je	0x0000249e
00002490	movl	%eax,(%esp)
00002493	calll	_free
00002498	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
0000249e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d8(%edi)
000024a8	movl	0xcc(%ebp),%eax
000024ab	movl	%eax,0x04(%esp)
000024af	movl	%edi,(%esp)
000024b2	calll	vgui::EditablePanel::~EditablePanel()
000024b7	movl	%esi,(%esp)
000024ba	calll	__Unwind_Resume
000024bf	calll	std::terminate()
000024c4	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*):
000024d0	pushl	%ebp
000024d1	movl	%esp,%ebp
000024d3	pushl	%ebx
000024d4	pushl	%edi
000024d5	pushl	%esi
000024d6	subl	$0x4c,%esp
000024d9	calll	0x000024de
000024de	popl	%ebx
000024df	leal	0xa7d37-0x24de(%ebx),%eax
000024e5	movl	%eax,0x0c(%esp)
000024e9	movl	0x10(%ebp),%eax
000024ec	movl	%eax,0x08(%esp)
000024f0	movl	0x0c(%ebp),%esi
000024f3	leal	0x04(%esi),%eax
000024f6	movl	%eax,0xcc(%ebp)
000024f9	movl	%eax,0x04(%esp)
000024fd	movl	0x08(%ebp),%edi
00002500	movl	%edi,(%esp)
00002503	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00002508	movl	(%esi),%eax
0000250a	movl	%eax,(%edi)
0000250c	testb	$0x01,CBaseAssetPicker::ChainToMap()::chained-0x24de(%ebx)
00002513	jne	0x0000254a
00002515	movb	$0x01,CBaseAssetPicker::ChainToMap()::chained-0x24de(%ebx)
0000251c	leal	0xa7fa2-0x24de(%ebx),%eax
00002522	movl	%eax,(%esp)
00002525	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000252a	movl	%eax,%esi
0000252c	leal	CBaseAssetPicker::GetPanelClassName()-0x24de(%ebx),%eax
00002532	movl	%eax,0x1c(%esi)
00002535	testl	%esi,%esi
00002537	je	0x0000254a
00002539	leal	0xa8000-0x24de(%ebx),%eax
0000253f	movl	%eax,(%esp)
00002542	calll	vgui::FindOrAddPanelMessageMap(char const*)
00002547	movl	%eax,0x18(%esi)
0000254a	testb	$0x01,CBaseAssetPicker::ChainToAnimationMap()::chained-0x24de(%ebx)
00002551	jne	0x00002588
00002553	movb	$0x01,CBaseAssetPicker::ChainToAnimationMap()::chained-0x24de(%ebx)
0000255a	leal	0xa7fa2-0x24de(%ebx),%eax
00002560	movl	%eax,(%esp)
00002563	calll	FindOrAddPanelAnimationMap(char const*)
00002568	movl	%eax,%esi
0000256a	leal	CBaseAssetPicker::GetPanelClassName()-0x24de(%ebx),%eax
00002570	movl	%eax,0x18(%esi)
00002573	testl	%esi,%esi
00002575	je	0x00002588
00002577	leal	0xa8000-0x24de(%ebx),%eax
0000257d	movl	%eax,(%esp)
00002580	calll	FindOrAddPanelAnimationMap(char const*)
00002585	movl	%eax,0x14(%esi)
00002588	testb	$0x01,CBaseAssetPicker::KB_ChainToMap()::chained-0x24de(%ebx)
0000258f	jne	0x000025c6
00002591	movb	$0x01,CBaseAssetPicker::KB_ChainToMap()::chained-0x24de(%ebx)
00002598	leal	0xa7fa2-0x24de(%ebx),%eax
0000259e	movl	%eax,(%esp)
000025a1	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000025a6	movl	%eax,%esi
000025a8	leal	CBaseAssetPicker::GetPanelClassName()-0x24de(%ebx),%eax
000025ae	movl	%eax,0x44(%esi)
000025b1	testl	%esi,%esi
000025b3	je	0x000025c6
000025b5	leal	0xa8000-0x24de(%ebx),%eax
000025bb	movl	%eax,(%esp)
000025be	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000025c3	movl	%eax,0x18(%esi)
000025c6	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x24de(%ebx)
000025cd	jne	0x00002625
000025cf	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x24de(%ebx)
000025d6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xd4(%ebp)
000025dd	movl	$0x000003b9,0xd0(%ebp)
000025e4	movsd	0xd0(%ebp),%xmm0
000025e9	movsd	%xmm0,0x04(%esp)
000025ef	leal	0xa7ff4-0x24de(%ebx),%eax
000025f5	movl	%eax,(%esp)
000025f8	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
00002600	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
00002608	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00002610	movl	$0x00000006,0x10(%esp)
00002618	movl	$0x00000001,0x0c(%esp)
00002620	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002625	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x24de(%ebx)
0000262c	jne	0x00002684
0000262e	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x24de(%ebx)
00002635	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xdc(%ebp)
0000263c	movl	$0x000003bd,0xd8(%ebp)
00002643	movsd	0xd8(%ebp),%xmm0
00002648	movsd	%xmm0,0x04(%esp)
0000264e	leal	0xa7fe7-0x24de(%ebx),%eax
00002654	movl	%eax,(%esp)
00002657	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
0000265f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
00002667	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
0000266f	movl	$0x00000006,0x10(%esp)
00002677	movl	$0x00000001,0x0c(%esp)
0000267f	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002684	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x24de(%ebx)
0000268b	jne	0x000026e3
0000268d	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x24de(%ebx)
00002694	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
0000269b	movl	$0x000003c1,0xe0(%ebp)
000026a2	movsd	0xe0(%ebp),%xmm0
000026a7	movsd	%xmm0,0x04(%esp)
000026ad	leal	0xa7fd4-0x24de(%ebx),%eax
000026b3	movl	%eax,(%esp)
000026b6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
000026be	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
000026c6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
000026ce	movl	$0x00000006,0x10(%esp)
000026d6	movl	$0x00000001,0x0c(%esp)
000026de	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000026e3	testb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x24de(%ebx)
000026ea	jne	0x00002742
000026ec	movb	$0x01,CBaseAssetPicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x24de(%ebx)
000026f3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xec(%ebp)
000026fa	movl	$0x000003c5,0xe8(%ebp)
00002701	movsd	0xe8(%ebp),%xmm0
00002706	movsd	%xmm0,0x04(%esp)
0000270c	leal	0xa7fbf-0x24de(%ebx),%eax
00002712	movl	%eax,(%esp)
00002715	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x1c(%esp)
0000271d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x18(%esp)
00002725	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
0000272d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%esp)
00002735	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
0000273d	calll	CBaseAssetPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002742	leal	0x000001d4(%edi),%esi
00002748	movl	%esi,(%esp)
0000274b	calll	CUtlString::CUtlString()
00002750	movl	%esi,0xc8(%ebp)
00002753	leal	0x000001e4(%edi),%ebx
00002759	movl	%ebx,(%esp)
0000275c	calll	CUtlString::CUtlString()
00002761	leal	0x000001f4(%edi),%eax
00002767	movl	%eax,(%esp)
0000276a	calll	CUtlString::CUtlString()
0000276f	movl	0x20(%ebp),%ecx
00002772	movl	0x1c(%ebp),%eax
00002775	movl	0x18(%ebp),%edx
00002778	movl	0x14(%ebp),%esi
0000277b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%edi)
00002785	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000204(%edi)
0000278f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000210(%edi)
00002799	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%edi)
000027a3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%edi)
000027ad	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%edi)
000027b7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%edi)
000027c1	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%edi)
000027cb	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%edi)
000027d5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%edi)
000027df	movb	0x0000023c(%edi),%bl
000027e5	movl	%esi,0x00000218(%edi)
000027eb	movl	%ecx,0x0000021c(%edi)
000027f1	movl	%edx,0x00000220(%edi)
000027f7	movl	%eax,0x00000224(%edi)
000027fd	andb	$0xf8,%bl
00002800	movb	%bl,0x0000023c(%edi)
00002806	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000244(%edi)
00002810	movb	$0x01,0x00000248(%edi)
00002817	movl	$0x0000ffff,0x000001d0(%edi)
00002821	addl	$0x4c,%esp
00002824	popl	%esi
00002825	popl	%edi
00002826	popl	%ebx
00002827	popl	%ebp
00002828	ret
00002829	movl	%eax,%esi
0000282b	jmp	0x00002884
0000282d	movl	%eax,%esi
0000282f	jmp	0x0000285a
00002831	movl	%eax,%esi
00002833	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%edi)
0000283a	js	0x0000285a
0000283c	movl	(%ebx),%eax
0000283e	testl	%eax,%eax
00002840	je	0x00002850
00002842	movl	%eax,(%esp)
00002845	calll	_free
0000284a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
00002850	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e8(%edi)
0000285a	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001dc(%edi)
00002861	js	0x00002884
00002863	movl	0xc8(%ebp),%ebx
00002866	movl	(%ebx),%eax
00002868	testl	%eax,%eax
0000286a	je	0x0000287a
0000286c	movl	%eax,(%esp)
0000286f	calll	_free
00002874	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%ebx)
0000287a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d8(%edi)
00002884	movl	0xcc(%ebp),%eax
00002887	movl	%eax,0x04(%esp)
0000288b	movl	%edi,(%esp)
0000288e	calll	vgui::EditablePanel::~EditablePanel()
00002893	movl	%esi,(%esp)
00002896	calll	__Unwind_Resume
0000289b	calll	std::terminate()
CBaseAssetPicker::~CBaseAssetPicker():
000028a0	pushl	%ebp
000028a1	movl	%esp,%ebp
000028a3	pushl	%edi
000028a4	pushl	%esi
000028a5	subl	$0x10,%esp
000028a8	calll	0x000028ad
000028ad	popl	%eax
000028ae	movl	0x08(%ebp),%edi
000028b1	leal	VTT for CBaseAssetPicker-0x28ad(%eax),%eax
000028b7	movl	%eax,0x04(%esp)
000028bb	movl	%edi,(%esp)
000028be	calll	CBaseAssetPicker::~CBaseAssetPicker()
000028c3	addl	$0x10,%esp
000028c6	popl	%esi
000028c7	popl	%edi
000028c8	popl	%ebp
000028c9	jmp	operator delete(void*)
000028ce	movl	%eax,%esi
000028d0	movl	%edi,(%esp)
000028d3	calll	operator delete(void*)
000028d8	movl	%esi,(%esp)
000028db	calll	__Unwind_Resume
CBaseAssetPicker::~CBaseAssetPicker():
000028e0	pushl	%ebp
000028e1	movl	%esp,%ebp
000028e3	subl	$0x08,%esp
000028e6	calll	0x000028eb
000028eb	popl	%eax
000028ec	leal	VTT for CBaseAssetPicker-0x28eb(%eax),%eax
000028f2	movl	%eax,0x04(%esp)
000028f6	movl	0x08(%ebp),%eax
000028f9	movl	%eax,(%esp)
000028fc	calll	CBaseAssetPicker::~CBaseAssetPicker()
00002901	addl	$0x08,%esp
00002904	popl	%ebp
00002905	ret
00002906	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::~CBaseAssetPicker():
00002910	pushl	%ebp
00002911	movl	%esp,%ebp
00002913	pushl	%ebx
00002914	pushl	%edi
00002915	pushl	%esi
00002916	subl	$0x0c,%esp
00002919	movl	0x0c(%ebp),%edi
0000291c	movl	(%edi),%eax
0000291e	movl	0x08(%ebp),%ebx
00002921	movl	%eax,(%ebx)
00002923	movl	0x00000350(%eax),%eax
00002929	movl	%ebx,(%esp)
0000292c	call	*%eax
0000292e	movl	0x000001b4(%ebx),%eax
00002934	movl	(%eax),%ecx
00002936	movl	0x000000bc(%ecx),%ecx
0000293c	movl	%ebx,0x04(%esp)
00002940	movl	%eax,(%esp)
00002943	call	*%ecx
00002945	movl	0x000001b4(%ebx),%ecx
0000294b	movl	(%ecx),%eax
0000294d	movl	0x000000a0(%eax),%eax
00002953	movl	%ecx,(%esp)
00002956	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
0000295e	call	*%eax
00002960	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001b4(%ebx)
0000296a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%ebx)
00002974	movl	0x00000228(%ebx),%eax
0000297a	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
00002981	jns	0x0000298b
00002983	movl	%eax,0x00000238(%ebx)
00002989	jmp	0x000029de
0000298b	testl	%eax,%eax
0000298d	jne	0x000029a5
0000298f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
00002999	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%ebx)
000029a3	jmp	0x000029d4
000029a5	movl	%eax,(%esp)
000029a8	calll	_free
000029ad	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
000029b7	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
000029be	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
000029c8	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%ebx)
000029d2	js	0x000029de
000029d4	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
000029de	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000210(%ebx)
000029e8	movl	0x00000204(%ebx),%eax
000029ee	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%ebx)
000029f5	jns	0x000029ff
000029f7	movl	%eax,0x00000214(%ebx)
000029fd	jmp	0x00002a52
000029ff	testl	%eax,%eax
00002a01	jne	0x00002a19
00002a03	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002a0d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%ebx)
00002a17	jmp	0x00002a48
00002a19	movl	%eax,(%esp)
00002a1c	calll	_free
00002a21	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000204(%ebx)
00002a2b	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%ebx)
00002a32	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002a3c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%ebx)
00002a46	js	0x00002a52
00002a48	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002a52	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001fc(%ebx)
00002a59	js	0x00002a81
00002a5b	movl	0x000001f4(%ebx),%eax
00002a61	testl	%eax,%eax
00002a63	je	0x00002a77
00002a65	movl	%eax,(%esp)
00002a68	calll	_free
00002a6d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f4(%ebx)
00002a77	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f8(%ebx)
00002a81	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%ebx)
00002a88	js	0x00002ab0
00002a8a	movl	0x000001e4(%ebx),%eax
00002a90	testl	%eax,%eax
00002a92	je	0x00002aa6
00002a94	movl	%eax,(%esp)
00002a97	calll	_free
00002a9c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e4(%ebx)
00002aa6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e8(%ebx)
00002ab0	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001dc(%ebx)
00002ab7	js	0x00002adf
00002ab9	movl	0x000001d4(%ebx),%eax
00002abf	testl	%eax,%eax
00002ac1	je	0x00002ad5
00002ac3	movl	%eax,(%esp)
00002ac6	calll	_free
00002acb	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d4(%ebx)
00002ad5	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d8(%ebx)
00002adf	addl	$0x04,%edi
00002ae2	movl	%edi,0x04(%esp)
00002ae6	movl	%ebx,(%esp)
00002ae9	calll	vgui::EditablePanel::~EditablePanel()
00002aee	addl	$0x0c,%esp
00002af1	popl	%esi
00002af2	popl	%edi
00002af3	popl	%ebx
00002af4	popl	%ebp
00002af5	ret
00002af6	movl	%eax,%esi
00002af8	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000234(%ebx)
00002b02	movl	0x00000228(%ebx),%eax
00002b08	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
00002b0f	jns	0x00002b19
00002b11	movl	%eax,0x00000238(%ebx)
00002b17	jmp	0x00002b6c
00002b19	testl	%eax,%eax
00002b1b	jne	0x00002b33
00002b1d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
00002b27	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%ebx)
00002b31	jmp	0x00002b62
00002b33	movl	%eax,(%esp)
00002b36	calll	_free
00002b3b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000228(%ebx)
00002b45	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000230(%ebx)
00002b4c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
00002b56	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000238(%ebx)
00002b60	js	0x00002b6c
00002b62	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000022c(%ebx)
00002b6c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000210(%ebx)
00002b76	movl	0x00000204(%ebx),%eax
00002b7c	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%ebx)
00002b83	jns	0x00002b8d
00002b85	movl	%eax,0x00000214(%ebx)
00002b8b	jmp	0x00002be0
00002b8d	testl	%eax,%eax
00002b8f	jne	0x00002ba7
00002b91	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002b9b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%ebx)
00002ba5	jmp	0x00002bd6
00002ba7	movl	%eax,(%esp)
00002baa	calll	_free
00002baf	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000204(%ebx)
00002bb9	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000020c(%ebx)
00002bc0	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002bca	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000214(%ebx)
00002bd4	js	0x00002be0
00002bd6	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000208(%ebx)
00002be0	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001fc(%ebx)
00002be7	js	0x00002c0f
00002be9	movl	0x000001f4(%ebx),%eax
00002bef	testl	%eax,%eax
00002bf1	je	0x00002c05
00002bf3	movl	%eax,(%esp)
00002bf6	calll	_free
00002bfb	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f4(%ebx)
00002c05	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001f8(%ebx)
00002c0f	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001ec(%ebx)
00002c16	js	0x00002c3e
00002c18	movl	0x000001e4(%ebx),%eax
00002c1e	testl	%eax,%eax
00002c20	je	0x00002c34
00002c22	movl	%eax,(%esp)
00002c25	calll	_free
00002c2a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e4(%ebx)
00002c34	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001e8(%ebx)
00002c3e	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001dc(%ebx)
00002c45	js	0x00002c6d
00002c47	movl	0x000001d4(%ebx),%eax
00002c4d	testl	%eax,%eax
00002c4f	je	0x00002c63
00002c51	movl	%eax,(%esp)
00002c54	calll	_free
00002c59	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d4(%ebx)
00002c63	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x000001d8(%ebx)
00002c6d	addl	$0x04,%edi
00002c70	movl	%edi,0x04(%esp)
00002c74	movl	%ebx,(%esp)
00002c77	calll	vgui::EditablePanel::~EditablePanel()
00002c7c	movl	%esi,(%esp)
00002c7f	calll	__Unwind_Resume
00002c84	calll	std::terminate()
00002c89	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool):
00002c90	pushl	%ebp
00002c91	movl	%esp,%ebp
00002c93	pushl	%ebx
00002c94	pushl	%edi
00002c95	pushl	%esi
00002c96	subl	$0x0000021c,%esp
00002c9c	calll	0x00002ca1
00002ca1	popl	%eax
00002ca2	movl	%eax,0xfffffdec(%ebp)
00002ca8	movl	0xb6aa5-0x2ca1(%eax),%eax
00002cae	movl	%eax,0xfffffde4(%ebp)
00002cb4	movl	(%eax),%eax
00002cb6	movl	%eax,0xf0(%ebp)
00002cb9	movl	0x08(%ebp),%esi
00002cbc	movl	0x00000234(%esi),%edi
00002cc2	leal	0x00000013(,%edi,4),%eax
00002cc9	andl	$0xf0,%eax
00002ccc	movl	%esp,%ecx
00002cce	movl	%ecx,%ebx
00002cd0	subl	%eax,%ebx
00002cd2	movl	%ebx,%esp
00002cd4	negl	%eax
00002cd6	movl	0x00000220(%esi),%edx
00002cdc	movl	%edx,(%ecx,%eax)
00002cdf	testl	%edi,%edi
00002ce1	jle	0x00002d02
00002ce3	movl	0x00000228(%esi),%eax
00002ce9	subl	$0x10,%esp
00002cec	movl	%edi,0x08(%esp)
00002cf0	movl	%eax,0x04(%esp)
00002cf4	leal	0x04(%ebx),%eax
00002cf7	movl	%eax,(%esp)
00002cfa	calll	_memcpy
00002cff	addl	$0x10,%esp
00002d02	incl	%edi
00002d03	movl	0x00000218(%esi),%eax
00002d09	movl	0x00000224(%esi),%ecx
00002d0f	subl	$0x20,%esp
00002d12	movl	%ebx,0x10(%esp)
00002d16	movl	%edi,0x0c(%esp)
00002d1a	movl	%ecx,0x08(%esp)
00002d1e	movl	%eax,0x04(%esp)
00002d22	movl	0xfffffdec(%ebp),%ebx
00002d28	leal	s_AssetCache-0x2ca1(%ebx),%eax
00002d2e	movl	%eax,(%esp)
00002d31	calll	CAssetCache::FindAssetList(char const*, char const*, int, char const**)
00002d36	addl	$0x20,%esp
00002d39	movl	%eax,0x000001d0(%esi)
00002d3f	subl	$0x10,%esp
00002d42	movl	$0x000001c4,(%esp)
00002d49	calll	operator new(unsigned long)
00002d4e	addl	$0x10,%esp
00002d51	movl	%eax,%edi
00002d53	subl	$0x20,%esp
00002d56	leal	0xa7d43-0x2ca1(%ebx),%eax
00002d5c	movl	%eax,0x08(%esp)
00002d60	movl	0x0c(%ebp),%eax
00002d63	movl	%eax,0x04(%esp)
00002d67	movl	%edi,(%esp)
00002d6a	movl	$0x00000001,0x10(%esp)
00002d72	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
00002d7a	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
00002d7f	addl	$0x20,%esp
00002d82	movl	%edi,0x000001b0(%esi)
00002d88	subl	$0x10,%esp
00002d8b	movl	%edi,(%esp)
00002d8e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00002d96	calll	vgui::Panel::GetChild(int)
00002d9b	addl	$0x10,%esp
00002d9e	movl	%eax,%edi
00002da0	movl	0x000001b0(%esi),%eax
00002da6	subl	$0x10,%esp
00002da9	movl	%eax,(%esp)
00002dac	movl	$0x00000001,0x04(%esp)
00002db4	calll	vgui::Panel::GetChild(int)
00002db9	addl	$0x10,%esp
00002dbc	movl	%eax,0xfffffde8(%ebp)
00002dc2	subl	$0x10,%esp
00002dc5	movl	$0x000006bc,(%esp)
00002dcc	calll	operator new(unsigned long)
00002dd1	addl	$0x10,%esp
00002dd4	movl	%eax,%ebx
00002dd6	subl	$0x20,%esp
00002dd9	movl	0xfffffdec(%ebp),%eax
00002ddf	leal	0xa7d51-0x2ca1(%eax),%eax
00002de5	movl	%eax,0x08(%esp)
00002de9	movl	%edi,0x04(%esp)
00002ded	movl	%ebx,(%esp)
00002df0	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%esp)
00002df8	movl	$0x00000005,0x0c(%esp)
00002e00	calll	vgui::ComboBox::ComboBox(vgui::Panel*, char const*, int, bool)
00002e05	addl	$0x20,%esp
00002e08	movl	%ebx,0x000001c8(%esi)
00002e0e	movl	(%ebx),%eax
00002e10	subl	$0x10,%esp
00002e13	movl	%esi,0x04(%esp)
00002e17	movl	%ebx,(%esp)
00002e1a	call	*0x000000b4(%eax)
00002e20	addl	$0x10,%esp
00002e23	subl	$0x10,%esp
00002e26	movl	$0x00000224,(%esp)
00002e2d	calll	operator new(unsigned long)
00002e32	addl	$0x10,%esp
00002e35	movl	%eax,%ebx
00002e37	subl	$0x20,%esp
00002e3a	movl	0xfffffdec(%ebp),%ecx
00002e40	leal	0xa7d6f-0x2ca1(%ecx),%eax
00002e46	movl	%eax,0x14(%esp)
00002e4a	movl	%esi,0x10(%esp)
00002e4e	leal	0xa7d68-0x2ca1(%ecx),%eax
00002e54	movl	%eax,0x0c(%esp)
00002e58	leal	0xa7d5b-0x2ca1(%ecx),%eax
00002e5e	movl	%eax,0x08(%esp)
00002e62	movl	%edi,0x04(%esp)
00002e66	movl	%edi,0xfffffde0(%ebp)
00002e6c	movl	%ebx,(%esp)
00002e6f	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00002e74	addl	$0x20,%esp
00002e77	movl	%ebx,0x000001cc(%esi)
00002e7d	movl	0x000001d0(%esi),%ecx
00002e83	xorl	%eax,%eax
00002e85	cmpl	$0x0000ffff,%ecx
00002e8b	je	0x00002ea3
00002e8d	movzwl	%cx,%eax
00002e90	imull	$0x68,%eax,%eax
00002e93	movl	0xfffffdec(%ebp),%ecx
00002e99	movl	s_AssetCache-0x2ca1+0x00000018(%ecx),%ecx
00002e9f	movl	0x1c(%ecx,%eax),%eax
00002ea3	movl	%eax,0x000001b4(%esi)
00002ea9	movl	(%eax),%ecx
00002eab	subl	$0x10,%esp
00002eae	movl	0xfffffde0(%ebp),%edi
00002eb4	movl	%edi,0x04(%esp)
00002eb8	movl	%eax,(%esp)
00002ebb	call	*0x000000a0(%ecx)
00002ec1	addl	$0x10,%esp
00002ec4	movl	0x000001b4(%esi),%ecx
00002eca	movl	(%ecx),%eax
00002ecc	subl	$0x10,%esp
00002ecf	movl	%esi,0x04(%esp)
00002ed3	movl	%ecx,(%esp)
00002ed6	call	*0x000000b4(%eax)
00002edc	addl	$0x10,%esp
00002edf	subl	$0x10,%esp
00002ee2	movl	$0x00000240,(%esp)
00002ee9	calll	operator new(unsigned long)
00002eee	addl	$0x10,%esp
00002ef1	movl	%eax,%ebx
00002ef3	subl	$0x10,%esp
00002ef6	movl	0xfffffdec(%ebp),%ecx
00002efc	leal	0xa7d87-0x2ca1(%ecx),%eax
00002f02	movl	%eax,0x0c(%esp)
00002f06	leal	0xa7d7b-0x2ca1(%ecx),%eax
00002f0c	movl	%eax,0x08(%esp)
00002f10	movl	%edi,0x04(%esp)
00002f14	movl	%ebx,(%esp)
00002f17	calll	vgui::CheckButton::CheckButton(vgui::Panel*, char const*, char const*)
00002f1c	addl	$0x10,%esp
00002f1f	movl	%ebx,0x000001b8(%esi)
00002f25	movl	(%ebx),%eax
00002f27	subl	$0x10,%esp
00002f2a	movl	%ebx,(%esp)
00002f2d	movl	$0x00000001,0x04(%esp)
00002f35	call	*0x000003f0(%eax)
00002f3b	addl	$0x10,%esp
00002f3e	movl	0x000001b8(%esi),%ecx
00002f44	movl	(%ecx),%eax
00002f46	subl	$0x10,%esp
00002f49	movl	%ecx,(%esp)
00002f4c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00002f54	call	*0x000000dc(%eax)
00002f5a	addl	$0x10,%esp
00002f5d	movl	0x000001b8(%esi),%ecx
00002f63	movl	(%ecx),%eax
00002f65	subl	$0x10,%esp
00002f68	movl	%ecx,(%esp)
00002f6b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00002f73	call	*0x00000088(%eax)
00002f79	addl	$0x10,%esp
00002f7c	movl	0x000001b8(%esi),%ecx
00002f82	movl	(%ecx),%eax
00002f84	subl	$0x10,%esp
00002f87	movl	%esi,0x04(%esp)
00002f8b	movl	%ecx,(%esp)
00002f8e	call	*0x000000b4(%eax)
00002f94	addl	$0x10,%esp
00002f97	movl	0x00000220(%esi),%eax
00002f9d	subl	$0x10,%esp
00002fa0	movl	%eax,0x0c(%esp)
00002fa4	movl	0xfffffdec(%ebp),%edi
00002faa	leal	0xa7da3-0x2ca1(%edi),%eax
00002fb0	movl	%eax,0x08(%esp)
00002fb4	leal	0xfffffdf0(%ebp),%eax
00002fba	movl	%eax,(%esp)
00002fbd	movl	$0x00000200,0x04(%esp)
00002fc5	calll	V_snprintf(char*, int, char const*, ...)
00002fca	addl	$0x10,%esp
00002fcd	subl	$0x10,%esp
00002fd0	movl	$0x00000280,(%esp)
00002fd7	calll	operator new(unsigned long)
00002fdc	addl	$0x10,%esp
00002fdf	movl	%edi,%ecx
00002fe1	movl	%eax,%edi
00002fe3	subl	$0x10,%esp
00002fe6	leal	0xa7db0-0x2ca1(%ecx),%eax
00002fec	movl	%ecx,%ebx
00002fee	movl	%eax,0x08(%esp)
00002ff2	movl	0xfffffde8(%ebp),%eax
00002ff8	movl	%eax,0x04(%esp)
00002ffc	movl	%edi,(%esp)
00002fff	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00003004	addl	$0x10,%esp
00003007	movl	%edi,0x000001c0(%esi)
0000300d	movl	(%edi),%eax
0000300f	subl	$0x20,%esp
00003012	leal	0xa7dc1-0x2ca1(%ebx),%ecx
00003018	movl	%ecx,0x0c(%esp)
0000301c	leal	0xa7dbd-0x2ca1(%ebx),%ecx
00003022	movl	%ecx,0x08(%esp)
00003026	movl	%edi,(%esp)
00003029	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x14(%esp)
00003031	movl	$0x00000034,0x10(%esp)
00003039	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003041	call	*0x0000034c(%eax)
00003047	addl	$0x20,%esp
0000304a	movl	0x000001c0(%esi),%ecx
00003050	movl	0x00000218(%esi),%edx
00003056	movl	(%ecx),%eax
00003058	subl	$0x20,%esp
0000305b	movl	%edx,0x0c(%esp)
0000305f	leal	0xa7dc5-0x2ca1(%ebx),%edx
00003065	movl	%ebx,%edi
00003067	movl	%edx,0x08(%esp)
0000306b	movl	%ecx,(%esp)
0000306e	movl	$0x00000002,0x14(%esp)
00003076	movl	$0x00000080,0x10(%esp)
0000307e	movl	$0x00000001,0x04(%esp)
00003086	call	*0x0000034c(%eax)
0000308c	addl	$0x20,%esp
0000308f	movl	0x000001c0(%esi),%ecx
00003095	movl	(%ecx),%eax
00003097	subl	$0x10,%esp
0000309a	movl	%ecx,(%esp)
0000309d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
000030a5	call	*0x00000410(%eax)
000030ab	addl	$0x10,%esp
000030ae	movl	0x000001c0(%esi),%eax
000030b4	subl	$0x10,%esp
000030b7	movzbl	0x10(%ebp),%ecx
000030bb	movl	%esi,%ebx
000030bd	movl	%ecx,0x04(%esp)
000030c1	movl	%eax,(%esp)
000030c4	calll	vgui::ListPanel::SetMultiselectEnabled(bool)
000030c9	addl	$0x10,%esp
000030cc	movl	0x000001c0(%ebx),%ecx
000030d2	movl	(%ecx),%eax
000030d4	subl	$0x10,%esp
000030d7	leal	0xfffffdf0(%ebp),%edx
000030dd	movl	%edx,0x04(%esp)
000030e1	movl	%ecx,(%esp)
000030e4	call	*0x00000420(%eax)
000030ea	addl	$0x10,%esp
000030ed	movl	0x000001c0(%ebx),%ecx
000030f3	movl	(%ecx),%eax
000030f5	subl	$0x10,%esp
000030f8	movl	%ecx,(%esp)
000030fb	movl	$0x00000001,0x04(%esp)
00003103	call	*0x00000240(%eax)
00003109	addl	$0x10,%esp
0000310c	movl	0x000001c0(%ebx),%ecx
00003112	movl	(%ecx),%eax
00003114	subl	$0x10,%esp
00003117	movl	%ebx,0x04(%esp)
0000311b	movl	%ecx,(%esp)
0000311e	call	*0x000000b4(%eax)
00003124	addl	$0x10,%esp
00003127	movl	0x000001c0(%ebx),%ecx
0000312d	movl	(%ecx),%eax
0000312f	subl	$0x10,%esp
00003132	movl	%edi,%esi
00003134	leal	AssetBrowserModSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0x2ca1(%esi),%edx
0000313a	movl	%edx,0x08(%esp)
0000313e	movl	%ecx,(%esp)
00003141	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003149	call	*0x00000378(%eax)
0000314f	addl	$0x10,%esp
00003152	movl	0x000001c0(%ebx),%ecx
00003158	movl	(%ecx),%eax
0000315a	subl	$0x10,%esp
0000315d	leal	AssetBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0x2ca1(%esi),%edx
00003163	movl	%edx,0x08(%esp)
00003167	movl	%ecx,(%esp)
0000316a	movl	$0x00000001,0x04(%esp)
00003172	call	*0x00000378(%eax)
00003178	addl	$0x10,%esp
0000317b	movl	0x000001c0(%ebx),%ecx
00003181	movl	(%ecx),%eax
00003183	subl	$0x10,%esp
00003186	movl	%ecx,(%esp)
00003189	movl	$0x00000001,0x04(%esp)
00003191	call	*0x0000037c(%eax)
00003197	addl	$0x10,%esp
0000319a	subl	$0x10,%esp
0000319d	movl	$0x00000660,(%esp)
000031a4	calll	operator new(unsigned long)
000031a9	addl	$0x10,%esp
000031ac	movl	%eax,%edi
000031ae	subl	$0x10,%esp
000031b1	leal	0xa7dcb-0x2ca1(%esi),%eax
000031b7	movl	%eax,0x08(%esp)
000031bb	movl	0xfffffde8(%ebp),%eax
000031c1	movl	%eax,0x04(%esp)
000031c5	movl	%edi,(%esp)
000031c8	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000031cd	addl	$0x10,%esp
000031d0	movl	%edi,0x000001bc(%ebx)
000031d6	movl	(%edi),%eax
000031d8	subl	$0x10,%esp
000031db	movl	%ebx,0x04(%esp)
000031df	movl	%edi,(%esp)
000031e2	call	*0x000000b4(%eax)
000031e8	addl	$0x10,%esp
000031eb	subl	$0x10,%esp
000031ee	movl	$0x00000660,(%esp)
000031f5	calll	operator new(unsigned long)
000031fa	addl	$0x10,%esp
000031fd	movl	%eax,%edi
000031ff	subl	$0x10,%esp
00003202	leal	0xa7dd6-0x2ca1(%esi),%eax
00003208	movl	%eax,0x08(%esp)
0000320c	movl	0xfffffde8(%ebp),%eax
00003212	movl	%eax,0x04(%esp)
00003216	movl	%edi,(%esp)
00003219	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000321e	addl	$0x10,%esp
00003221	movl	%edi,0x000001c4(%ebx)
00003227	movl	(%edi),%eax
00003229	subl	$0x10,%esp
0000322c	movl	%edi,(%esp)
0000322f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003237	call	*0x000000dc(%eax)
0000323d	addl	$0x10,%esp
00003240	movl	0x000001c4(%ebx),%ecx
00003246	movl	(%ecx),%eax
00003248	subl	$0x10,%esp
0000324b	movl	%ecx,(%esp)
0000324e	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003256	call	*0x000003e0(%eax)
0000325c	addl	$0x10,%esp
0000325f	movl	$0xffffffff,0x00000240(%ebx)
00003269	movl	0xfffffde4(%ebp),%eax
0000326f	movl	(%eax),%eax
00003271	cmpl	0xf0(%ebp),%eax
00003274	jne	0x000032b0
00003276	leal	0xf4(%ebp),%esp
00003279	popl	%esi
0000327a	popl	%edi
0000327b	popl	%ebx
0000327c	popl	%ebp
0000327d	ret
0000327e	jmp	0x00003292
00003280	movl	%eax,%esi
00003282	subl	$0x10,%esp
00003285	movl	%ebx,(%esp)
00003288	jmp	0x0000329a
0000328a	jmp	0x00003280
0000328c	jmp	0x00003280
0000328e	jmp	0x00003292
00003290	jmp	0x00003292
00003292	movl	%eax,%esi
00003294	subl	$0x10,%esp
00003297	movl	%edi,(%esp)
0000329a	calll	operator delete(void*)
0000329f	addl	$0x10,%esp
000032a2	subl	$0x10,%esp
000032a5	movl	%esi,(%esp)
000032a8	calll	__Unwind_Resume
000032ad	addl	$0x10,%esp
000032b0	calll	___stack_chk_fail
000032b5	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
AssetBrowserModSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&):
000032c0	pushl	%ebp
000032c1	movl	%esp,%ebp
000032c3	pushl	%edi
000032c4	pushl	%esi
000032c5	subl	$0x10,%esp
000032c8	calll	0x000032cd
000032cd	popl	%ecx
000032ce	movl	0x0c(%ebp),%eax
000032d1	movl	(%eax),%eax
000032d3	leal	0xa7e07-0x32cd(%ecx),%edi
000032d9	movl	%edi,0x04(%esp)
000032dd	movl	%eax,(%esp)
000032e0	movl	$0xffffffff,0x08(%esp)
000032e8	calll	KeyValues::GetInt(char const*, int)
000032ed	movl	%eax,%esi
000032ef	movl	0x10(%ebp),%eax
000032f2	movl	(%eax),%eax
000032f4	movl	%edi,0x04(%esp)
000032f8	movl	%eax,(%esp)
000032fb	movl	$0xffffffff,0x08(%esp)
00003303	calll	KeyValues::GetInt(char const*, int)
00003308	cmpl	%eax,%esi
0000330a	je	0x00003317
0000330c	subl	%eax,%esi
0000330e	movl	%esi,%eax
00003310	addl	$0x10,%esp
00003313	popl	%esi
00003314	popl	%edi
00003315	popl	%ebp
00003316	ret
00003317	addl	$0x10,%esp
0000331a	popl	%esi
0000331b	popl	%edi
0000331c	popl	%ebp
0000331d	jmp	AssetBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)
00003322	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
AssetBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&):
00003330	pushl	%ebp
00003331	movl	%esp,%ebp
00003333	pushl	%ebx
00003334	pushl	%edi
00003335	pushl	%esi
00003336	subl	$0x0c,%esp
00003339	calll	0x0000333e
0000333e	popl	%edi
0000333f	movl	0x0c(%ebp),%eax
00003342	movl	(%eax),%eax
00003344	leal	0xa7cd6-0x333e(%edi),%ebx
0000334a	movl	%ebx,0x04(%esp)
0000334e	movl	%eax,(%esp)
00003351	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003359	calll	KeyValues::GetInt(char const*, int)
0000335e	movl	%eax,%esi
00003360	movl	0x10(%ebp),%eax
00003363	movl	(%eax),%eax
00003365	movl	%ebx,0x04(%esp)
00003369	movl	%eax,(%esp)
0000336c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003374	testl	%esi,%esi
00003376	setne	%bl
00003379	calll	KeyValues::GetInt(char const*, int)
0000337e	testl	%eax,%eax
00003380	setne	%al
00003383	xorb	%bl,%al
00003385	je	0x00003393
00003387	cmpl	$0x01,%esi
0000338a	sbbl	%eax,%eax
0000338c	notl	%eax
0000338e	orl	$0x01,%eax
00003391	jmp	0x000033d7
00003393	movl	0x0c(%ebp),%eax
00003396	movl	(%eax),%eax
00003398	leal	0xa7d02-0x333e(%edi),%ebx
0000339e	movl	%ebx,0x08(%esp)
000033a2	leal	0xa7dc5-0x333e(%edi),%edi
000033a8	movl	%edi,0x04(%esp)
000033ac	movl	%eax,(%esp)
000033af	calll	KeyValues::GetString(char const*, char const*)
000033b4	movl	%eax,%esi
000033b6	movl	0x10(%ebp),%eax
000033b9	movl	(%eax),%eax
000033bb	movl	%ebx,0x08(%esp)
000033bf	movl	%edi,0x04(%esp)
000033c3	movl	%eax,(%esp)
000033c6	calll	KeyValues::GetString(char const*, char const*)
000033cb	movl	%eax,0x04(%esp)
000033cf	movl	%esi,(%esp)
000033d2	calll	V_stricmp(char const*, char const*)
000033d7	addl	$0x0c,%esp
000033da	popl	%esi
000033db	popl	%edi
000033dc	popl	%ebx
000033dd	popl	%ebp
000033de	ret
000033df	nop
CBaseAssetPicker::ApplyUserConfigSettings(KeyValues*):
000033e0	pushl	%ebp
000033e1	movl	%esp,%ebp
000033e3	pushl	%ebx
000033e4	pushl	%edi
000033e5	pushl	%esi
000033e6	subl	$0x1c,%esp
000033e9	calll	0x000033ee
000033ee	popl	%ebx
000033ef	movl	%ebx,0xf0(%ebp)
000033f2	movl	0x0c(%ebp),%eax
000033f5	movl	%eax,0x04(%esp)
000033f9	movl	%eax,%edi
000033fb	movl	0x08(%ebp),%esi
000033fe	movl	%esi,(%esp)
00003401	calll	vgui::EditablePanel::ApplyUserConfigSettings(KeyValues*)
00003406	movl	%esi,(%esp)
00003409	calll	CBaseAssetPicker::RefreshAssetList()
0000340e	leal	0xa7d02-0x33ee(%ebx),%eax
00003414	movl	%eax,0x08(%esp)
00003418	movl	%eax,%esi
0000341a	leal	0xa7ddf-0x33ee(%ebx),%eax
00003420	movl	%eax,0x04(%esp)
00003424	movl	%edi,(%esp)
00003427	calll	KeyValues::GetString(char const*, char const*)
0000342c	movl	%eax,0xe4(%ebp)
0000342f	movl	%esi,0x08(%esp)
00003433	leal	0xa7de6-0x33ee(%ebx),%eax
00003439	movl	%eax,0x04(%esp)
0000343d	movl	%edi,(%esp)
00003440	calll	KeyValues::GetString(char const*, char const*)
00003445	movl	%eax,0x04(%esp)
00003449	movl	0x08(%ebp),%edi
0000344c	leal	0x000001d4(%edi),%eax
00003452	movl	%eax,(%esp)
00003455	calll	CUtlString::operator=(char const*)
0000345a	movl	%esi,0x08(%esp)
0000345e	leal	0xa7dbd-0x33ee(%ebx),%eax
00003464	movl	%eax,0xe8(%ebp)
00003467	movl	%eax,0x04(%esp)
0000346b	movl	0x0c(%ebp),%eax
0000346e	movl	%eax,(%esp)
00003471	calll	KeyValues::GetString(char const*, char const*)
00003476	movl	%eax,%esi
00003478	movl	%esi,0xec(%ebp)
0000347b	movl	0xe4(%ebp),%ebx
0000347e	movl	%ebx,0x04(%esp)
00003482	leal	0x000001e4(%edi),%eax
00003488	movl	%eax,(%esp)
0000348b	calll	CUtlString::operator=(char const*)
00003490	movl	0x000001bc(%edi),%ecx
00003496	movl	(%ecx),%eax
00003498	movl	%ebx,0x04(%esp)
0000349c	movl	%ecx,(%esp)
0000349f	call	*0x0000034c(%eax)
000034a5	movl	$0xffffffff,0x00000240(%edi)
000034af	testl	%esi,%esi
000034b1	je	0x0000359c
000034b7	movl	0xec(%ebp),%eax
000034ba	cmpb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%eax)
000034bd	je	0x0000359c
000034c3	xorl	%edi,%edi
000034c5	movl	0xf0(%ebp),%eax
000034c8	movl	s_AssetCache-0x33ee+0x0000000c(%eax),%eax
000034ce	movl	%eax,0xe4(%ebp)
000034d1	xorl	%esi,%esi
000034d3	jmp	0x000034e4
000034d5	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
000034e0	addl	$0x20,%edi
000034e3	incl	%esi
000034e4	cmpl	0xe4(%ebp),%esi
000034e7	jge	0x0000359c
000034ed	movl	0xf0(%ebp),%eax
000034f0	movl	s_AssetCache-0x33ee(%eax),%eax
000034f6	addl	%edi,%eax
000034f8	movl	%eax,(%esp)
000034fb	calll	CUtlString::operator char const*() const
00003500	movl	%eax,0x04(%esp)
00003504	movl	0xec(%ebp),%eax
00003507	movl	%eax,(%esp)
0000350a	calll	V_stricmp(char const*, char const*)
0000350f	testl	%eax,%eax
00003511	jne	0x000034e0
00003513	movl	0x08(%ebp),%eax
00003516	movl	0x000001c8(%eax),%ecx
0000351c	movl	(%ecx),%eax
0000351e	movl	%ecx,(%esp)
00003521	call	*0x0000047c(%eax)
00003527	movl	%eax,0xf0(%ebp)
0000352a	xorl	%edi,%edi
0000352c	jmp	0x00003533
0000352e	nop
00003530	movl	%eax,%esi
00003532	incl	%edi
00003533	cmpl	0xf0(%ebp),%edi
00003536	jge	0x0000359c
00003538	movl	0x08(%ebp),%ebx
0000353b	movl	0x000001c8(%ebx),%eax
00003541	movl	%edi,0x04(%esp)
00003545	movl	%eax,(%esp)
00003548	calll	vgui::ComboBox::GetItemIDFromRow(int)
0000354d	movl	0x000001c8(%ebx),%ecx
00003553	movl	%eax,0x04(%esp)
00003557	movl	%eax,%ebx
00003559	movl	%ecx,(%esp)
0000355c	calll	vgui::ComboBox::GetItemUserData(int)
00003561	movl	0xe8(%ebp),%ecx
00003564	movl	%ecx,0x04(%esp)
00003568	movl	%eax,(%esp)
0000356b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003573	calll	KeyValues::GetInt(char const*, int)
00003578	cmpl	%esi,%eax
0000357a	movl	%esi,%eax
0000357c	jne	0x00003530
0000357e	movl	0x08(%ebp),%ecx
00003581	movl	%eax,0x00000240(%ecx)
00003587	movl	0x000001c8(%ecx),%ecx
0000358d	movl	(%ecx),%eax
0000358f	movl	%ebx,0x04(%esp)
00003593	movl	%ecx,(%esp)
00003596	call	*0x000004a0(%eax)
0000359c	addl	$0x1c,%esp
0000359f	popl	%esi
000035a0	popl	%edi
000035a1	popl	%ebx
000035a2	popl	%ebp
000035a3	ret
000035a4	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::RefreshAssetList():
000035b0	pushl	%ebp
000035b1	movl	%esp,%ebp
000035b3	pushl	%ebx
000035b4	pushl	%edi
000035b5	pushl	%esi
000035b6	subl	$0x0000023c,%esp
000035bc	calll	0x000035c1
000035c1	popl	%eax
000035c2	movl	%eax,0xfffffde0(%ebp)
000035c8	movl	0xb6aa5-0x35c1(%eax),%eax
000035ce	movl	%eax,0xfffffde4(%ebp)
000035d4	movl	(%eax),%eax
000035d6	movl	%eax,0xf0(%ebp)
000035d9	movl	0x08(%ebp),%esi
000035dc	movl	%esi,(%esp)
000035df	calll	CBaseAssetPicker::BuildAssetNameList()
000035e4	movl	0x00000210(%esi),%edi
000035ea	movl	%edi,0xfffffde8(%ebp)
000035f0	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000244(%esi)
000035fa	xorl	%eax,%eax
000035fc	testl	%edi,%edi
000035fe	jle	0x00003675
00003600	xorl	%edi,%edi
00003602	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00003610	movl	%edi,0x04(%esp)
00003614	movl	%esi,(%esp)
00003617	calll	CBaseAssetPicker::IsAssetVisible(int)
0000361c	movb	%al,%bl
0000361e	movl	0x000001c0(%esi),%eax
00003624	movl	0x00000204(%esi),%ecx
0000362a	movl	0x04(%ecx,%edi,8),%edx
0000362e	movl	(%eax),%ecx
00003630	movl	%ecx,0xfffffdec(%ebp)
00003636	movl	%esi,%ecx
00003638	movzbl	%bl,%esi
0000363b	movl	%esi,0x08(%esp)
0000363f	movl	%ecx,%esi
00003641	movl	%edx,0x04(%esp)
00003645	movl	%eax,(%esp)
00003648	movl	0xfffffdec(%ebp),%eax
0000364e	call	*0x000003e4(%eax)
00003654	testb	%bl,%bl
00003656	je	0x0000365e
00003658	incl	0x00000244(%esi)
0000365e	incl	%edi
0000365f	movl	0xfffffde8(%ebp),%eax
00003665	cmpl	%edi,%eax
00003667	jne	0x00003610
00003669	movl	0x00000210(%esi),%edi
0000366f	movl	0x00000244(%esi),%eax
00003675	movb	0x0000023c(%esi),%cl
0000367b	movl	0x00000218(%esi),%edx
00003681	movl	%edi,0x14(%esp)
00003685	movl	%eax,0x10(%esp)
00003689	movl	%edx,0x0c(%esp)
0000368d	movl	0xfffffde0(%ebp),%ebx
00003693	leal	0xa7e27-0x35c1(%ebx),%eax
00003699	movl	%eax,0x08(%esp)
0000369d	movl	%esi,%edi
0000369f	leal	0xfffffdf0(%ebp),%esi
000036a5	movl	%esi,(%esp)
000036a8	andb	$0x04,%cl
000036ab	shrb	$0x02,%cl
000036ae	leal	0xa7d02-0x35c1(%ebx),%edx
000036b4	leal	0xa7e34-0x35c1(%ebx),%eax
000036ba	testb	%cl,%cl
000036bc	cmovnel	%edx,%eax
000036bf	movl	%eax,0x18(%esp)
000036c3	movl	$0x00000200,0x04(%esp)
000036cb	calll	V_snprintf(char*, int, char const*, ...)
000036d0	movl	0x000001c0(%edi),%ecx
000036d6	movl	(%ecx),%eax
000036d8	movl	%esi,0x08(%esp)
000036dc	movl	%edi,%esi
000036de	movl	%ecx,(%esp)
000036e1	movl	$0x00000001,0x04(%esp)
000036e9	call	*0x0000035c(%eax)
000036ef	movl	0x000001c0(%esi),%ecx
000036f5	movl	(%ecx),%eax
000036f7	movl	%ecx,(%esp)
000036fa	call	*CAssetTreeView::AllocateRootNode()(%eax)
00003700	movl	0x000001c0(%esi),%ecx
00003706	movl	(%ecx),%eax
00003708	movl	%ecx,(%esp)
0000370b	call	*0x000003f4(%eax)
00003711	testl	%eax,%eax
00003713	jne	0x0000376b
00003715	movl	0x000001c0(%esi),%ecx
0000371b	movl	(%ecx),%eax
0000371d	movl	%ecx,(%esp)
00003720	call	*0x00000394(%eax)
00003726	testl	%eax,%eax
00003728	jle	0x0000376b
0000372a	movl	(%esi),%eax
0000372c	movl	%esi,(%esp)
0000372f	call	*0x000003b4(%eax)
00003735	movl	0x000001c0(%esi),%ecx
0000373b	movl	(%ecx),%eax
0000373d	movl	%ecx,(%esp)
00003740	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003748	call	*0x000003a4(%eax)
0000374e	movl	0x000001c0(%esi),%edx
00003754	movl	(%edx),%ecx
00003756	movl	%eax,0x04(%esp)
0000375a	movl	%edx,(%esp)
0000375d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003765	call	*0x00000414(%ecx)
0000376b	movl	0x000001b4(%esi),%esi
00003771	movl	(%esi),%eax
00003773	movl	%esi,(%esp)
00003776	call	*0x0000034c(%eax)
0000377c	movl	%eax,0x04(%esp)
00003780	movl	%esi,(%esp)
00003783	calll	CAssetTreeView::RefreshTreeViewItem(int)
00003788	movl	(%esi),%eax
0000378a	movl	%esi,(%esp)
0000378d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003795	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
0000379d	call	*0x0000010c(%eax)
000037a3	movl	0xfffffde4(%ebp),%eax
000037a9	movl	(%eax),%eax
000037ab	cmpl	0xf0(%ebp),%eax
000037ae	jne	0x000037bb
000037b0	addl	$0x0000023c,%esp
000037b6	popl	%esi
000037b7	popl	%edi
000037b8	popl	%ebx
000037b9	popl	%ebp
000037ba	ret
000037bb	calll	___stack_chk_fail
CBaseAssetPicker::SetFilter(char const*):
000037c0	pushl	%ebp
000037c1	movl	%esp,%ebp
000037c3	pushl	%edi
000037c4	pushl	%esi
000037c5	subl	$0x10,%esp
000037c8	movl	0x0c(%ebp),%esi
000037cb	movl	%esi,0x04(%esp)
000037cf	movl	0x08(%ebp),%edi
000037d2	leal	0x000001e4(%edi),%eax
000037d8	movl	%eax,(%esp)
000037db	calll	CUtlString::operator=(char const*)
000037e0	movl	0x000001bc(%edi),%ecx
000037e6	movl	(%ecx),%eax
000037e8	movl	%esi,0x04(%esp)
000037ec	movl	%ecx,(%esp)
000037ef	call	*0x0000034c(%eax)
000037f5	addl	$0x10,%esp
000037f8	popl	%esi
000037f9	popl	%edi
000037fa	popl	%ebp
000037fb	ret
000037fc	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::GetUserConfigSettings(KeyValues*):
00003800	pushl	%ebp
00003801	movl	%esp,%ebp
00003803	pushl	%ebx
00003804	pushl	%edi
00003805	pushl	%esi
00003806	subl	$0x2c,%esp
00003809	calll	0x0000380e
0000380e	popl	%esi
0000380f	movl	0x0c(%ebp),%edi
00003812	movl	%edi,0x04(%esp)
00003816	movl	0x08(%ebp),%ebx
00003819	movl	%ebx,(%esp)
0000381c	calll	vgui::EditablePanel::GetUserConfigSettings(KeyValues*)
00003821	leal	0x000001e4(%ebx),%eax
00003827	movl	%eax,(%esp)
0000382a	calll	CUtlString::operator char const*() const
0000382f	movl	%eax,0x08(%esp)
00003833	leal	0xa7ddf-0x380e(%esi),%eax
00003839	movl	%eax,0x04(%esp)
0000383d	movl	%edi,(%esp)
00003840	calll	KeyValues::SetString(char const*, char const*)
00003845	leal	0x000001d4(%ebx),%eax
0000384b	movl	%eax,(%esp)
0000384e	calll	CUtlString::operator char const*() const
00003853	movl	%eax,0x08(%esp)
00003857	leal	0xa7de6-0x380e(%esi),%eax
0000385d	movl	%eax,0x04(%esp)
00003861	movl	%edi,(%esp)
00003864	calll	KeyValues::SetString(char const*, char const*)
00003869	movl	0x00000240(%ebx),%eax
0000386f	testl	%eax,%eax
00003871	js	0x00003893
00003873	shll	$0x05,%eax
00003876	movl	s_AssetCache-0x380e(%esi),%ecx
0000387c	addl	%eax,%ecx
0000387e	movl	%ecx,0x04(%esp)
00003882	leal	0xe0(%ebp),%eax
00003885	movl	%eax,(%esp)
00003888	calll	CUtlString::CUtlString(CUtlString const&)
0000388d	xorb	%bh,%bh
0000388f	movb	$0x01,%bl
00003891	jmp	0x000038ac
00003893	leal	0xa7d02-0x380e(%esi),%eax
00003899	movl	%eax,0x04(%esp)
0000389d	leal	0xe0(%ebp),%eax
000038a0	movl	%eax,(%esp)
000038a3	calll	CUtlString::CUtlString(char const*)
000038a8	xorb	%bl,%bl
000038aa	movb	$0x01,%bh
000038ac	leal	0xe0(%ebp),%eax
000038af	movl	%eax,(%esp)
000038b2	calll	CUtlString::operator char const*() const
000038b7	movl	%eax,0x08(%esp)
000038bb	leal	0xa7dbd-0x380e(%esi),%eax
000038c1	movl	%eax,0x04(%esp)
000038c5	movl	%edi,(%esp)
000038c8	calll	KeyValues::SetString(char const*, char const*)
000038cd	cmpb	$0x01,%bh
000038d0	jne	0x000038f5
000038d2	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
000038d6	js	0x000038f5
000038d8	movl	0xe0(%ebp),%eax
000038db	testl	%eax,%eax
000038dd	je	0x000038ee
000038df	movl	%eax,(%esp)
000038e2	calll	_free
000038e7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
000038ee	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
000038f5	cmpb	$0x01,%bl
000038f8	jne	0x0000391d
000038fa	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
000038fe	js	0x0000391d
00003900	movl	0xe0(%ebp),%eax
00003903	testl	%eax,%eax
00003905	je	0x00003916
00003907	movl	%eax,(%esp)
0000390a	calll	_free
0000390f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
00003916	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
0000391d	addl	$0x2c,%esp
00003920	popl	%esi
00003921	popl	%edi
00003922	popl	%ebx
00003923	popl	%ebp
00003924	ret
00003925	movl	%eax,%esi
00003927	movl	%esi,(%esp)
0000392a	calll	__Unwind_Resume
0000392f	movl	%eax,%esi
00003931	cmpb	$0x01,%bh
00003934	jne	0x0000395f
00003936	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
0000393a	js	0x0000395f
0000393c	movl	0xe0(%ebp),%eax
0000393f	testl	%eax,%eax
00003941	je	0x00003952
00003943	movl	%eax,(%esp)
00003946	calll	_free
0000394b	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
00003952	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
00003959	testb	%bl,%bl
0000395b	jne	0x00003964
0000395d	jmp	0x00003987
0000395f	cmpb	$0x01,%bl
00003962	jne	0x00003987
00003964	cmpl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe8(%ebp)
00003968	js	0x00003987
0000396a	movl	0xe0(%ebp),%eax
0000396d	testl	%eax,%eax
0000396f	je	0x00003980
00003971	movl	%eax,(%esp)
00003974	calll	_free
00003979	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe0(%ebp)
00003980	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0xe4(%ebp)
00003987	movl	%esi,(%esp)
0000398a	calll	__Unwind_Resume
0000398f	nop
CBaseAssetPicker::HasUserConfigSettings():
00003990	movl	$0x00000001,%eax
00003995	ret
00003996	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::AddExtension(char const*):
000039a0	pushl	%ebp
000039a1	movl	%esp,%ebp
000039a3	pushl	%ebx
000039a4	pushl	%edi
000039a5	pushl	%esi
000039a6	subl	$0x1c,%esp
000039a9	movl	0x08(%ebp),%edi
000039ac	movl	0x0000022c(%edi),%eax
000039b2	movl	0x00000234(%edi),%esi
000039b8	leal	0x00000228(%edi),%ebx
000039be	leal	0x01(%esi),%edx
000039c1	cmpl	%eax,%edx
000039c3	movl	%esi,%ecx
000039c5	jle	0x000039e7
000039c7	movl	%edx,%ecx
000039c9	subl	%eax,%ecx
000039cb	movl	%ecx,0x04(%esp)
000039cf	movl	%ebx,(%esp)
000039d2	movl	%ebx,0xf0(%ebp)
000039d5	movl	%edx,%ebx
000039d7	calll	CUtlMemory<char const*, int>::Grow(int)
000039dc	movl	%ebx,%edx
000039de	movl	0xf0(%ebp),%ebx
000039e1	movl	0x00000234(%edi),%ecx
000039e7	movl	%ebx,0xf0(%ebp)
000039ea	incl	%ecx
000039eb	movl	%ecx,0x00000234(%edi)
000039f1	movl	0x00000228(%edi),%eax
000039f7	movl	%eax,0x00000238(%edi)
000039fd	subl	%esi,%ecx
000039ff	decl	%ecx
00003a00	testl	%ecx,%ecx
00003a02	jle	0x00003a22
00003a04	shll	$0x02,%ecx
00003a07	movl	%ecx,0x08(%esp)
00003a0b	leal	(%eax,%esi,4),%ecx
00003a0e	movl	%ecx,0x04(%esp)
00003a12	leal	(%eax,%edx,4),%eax
00003a15	movl	%eax,(%esp)
00003a18	calll	_memmove
00003a1d	movl	0xf0(%ebp),%eax
00003a20	movl	(%eax),%eax
00003a22	shll	$0x02,%esi
00003a25	addl	%eax,%esi
00003a27	je	0x00003a2e
00003a29	movl	0x0c(%ebp),%eax
00003a2c	movl	%eax,(%esi)
00003a2e	addl	$0x1c,%esp
00003a31	popl	%esi
00003a32	popl	%edi
00003a33	popl	%ebx
00003a34	popl	%ebp
00003a35	ret
00003a36	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::IsMultiselectEnabled() const:
00003a40	pushl	%ebp
00003a41	movl	%esp,%ebp
00003a43	subl	$0x08,%esp
00003a46	movl	0x08(%ebp),%eax
00003a49	movl	0x000001c0(%eax),%eax
00003a4f	movl	%eax,(%esp)
00003a52	calll	vgui::ListPanel::IsMultiselectEnabled() const
00003a57	movzbl	%al,%eax
00003a5a	addl	$0x08,%esp
00003a5d	popl	%ebp
00003a5e	ret
00003a5f	nop
CBaseAssetPicker::SetInitialSelection(char const*):
00003a60	pushl	%ebp
00003a61	movl	%esp,%ebp
00003a63	pushl	%ebx
00003a64	pushl	%edi
00003a65	pushl	%esi
00003a66	subl	$0x0c,%esp
00003a69	calll	0x00003a6e
00003a6e	popl	%edi
00003a6f	movl	0x0c(%ebp),%esi
00003a72	movl	%esi,0x04(%esp)
00003a76	movl	0x08(%ebp),%eax
00003a79	leal	0x000001f4(%eax),%eax
00003a7f	movl	%eax,(%esp)
00003a82	calll	CUtlString::operator=(char const*)
00003a87	testl	%esi,%esi
00003a89	je	0x00003b24
00003a8f	movl	0x08(%ebp),%eax
00003a92	movl	0x000001c0(%eax),%ecx
00003a98	movl	(%ecx),%eax
00003a9a	movl	%ecx,(%esp)
00003a9d	call	*0x00000394(%eax)
00003aa3	movl	%eax,%esi
00003aa5	xorl	%ebx,%ebx
00003aa7	jmp	0x00003ab1
00003aa9	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
00003ab0	incl	%ebx
00003ab1	cmpl	%esi,%ebx
00003ab3	jge	0x00003b24
00003ab5	movl	0x08(%ebp),%eax
00003ab8	movl	0x000001c0(%eax),%ecx
00003abe	movl	(%ecx),%eax
00003ac0	movl	%ebx,0x04(%esp)
00003ac4	movl	%ecx,(%esp)
00003ac7	call	*0x0000039c(%eax)
00003acd	testl	%eax,%eax
00003acf	je	0x00003ab0
00003ad1	leal	0xa7d02-0x3a6e(%edi),%ecx
00003ad7	movl	%ecx,0x08(%esp)
00003adb	leal	0xa7dc5-0x3a6e(%edi),%ecx
00003ae1	movl	%ecx,0x04(%esp)
00003ae5	movl	%eax,(%esp)
00003ae8	calll	KeyValues::GetString(char const*, char const*)
00003aed	testl	%eax,%eax
00003aef	je	0x00003ab0
00003af1	movl	0x0c(%ebp),%ecx
00003af4	movl	%ecx,0x04(%esp)
00003af8	movl	%eax,(%esp)
00003afb	calll	V_stricmp(char const*, char const*)
00003b00	testl	%eax,%eax
00003b02	jne	0x00003ab0
00003b04	movl	0x08(%ebp),%eax
00003b07	movl	0x000001c0(%eax),%ecx
00003b0d	movl	(%ecx),%eax
00003b0f	movl	%ebx,0x04(%esp)
00003b13	movl	%ecx,(%esp)
00003b16	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003b1e	call	*0x00000414(%eax)
00003b24	addl	$0x0c,%esp
00003b27	popl	%esi
00003b28	popl	%edi
00003b29	popl	%ebx
00003b2a	popl	%ebp
00003b2b	ret
00003b2c	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::GetFilter():
00003b30	pushl	%ebp
00003b31	movl	%esp,%ebp
00003b33	subl	$0x08,%esp
00003b36	movl	$0x000001e4,%eax
00003b3b	addl	0x08(%ebp),%eax
00003b3e	movl	%eax,(%esp)
00003b41	calll	CUtlString::operator char const*() const
00003b46	addl	$0x08,%esp
00003b49	popl	%ebp
00003b4a	ret
00003b4b	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::Activate():
00003b50	pushl	%ebp
00003b51	movl	%esp,%ebp
00003b53	pushl	%esi
00003b54	subl	$0x14,%esp
00003b57	movl	0x08(%ebp),%esi
00003b5a	movl	%esi,(%esp)
00003b5d	calll	CBaseAssetPicker::RefreshAssetList()
00003b62	leal	0x000001e4(%esi),%eax
00003b68	movl	%eax,(%esp)
00003b6b	calll	CUtlString::Length() const
00003b70	testl	%eax,%eax
00003b72	je	0x00003b8a
00003b74	movl	0x000001bc(%esi),%eax
00003b7a	movl	%eax,(%esp)
00003b7d	movl	$0x00000001,0x04(%esp)
00003b85	calll	vgui::TextEntry::SelectAllOnFirstFocus(bool)
00003b8a	movl	0x000001bc(%esi),%ecx
00003b90	movl	(%ecx),%eax
00003b92	movl	%ecx,(%esp)
00003b95	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003b9d	call	*0x30(%eax)
00003ba0	addl	$0x14,%esp
00003ba3	popl	%esi
00003ba4	popl	%ebp
00003ba5	ret
00003ba6	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::RequestFilterFocus():
00003bb0	pushl	%ebp
00003bb1	movl	%esp,%ebp
00003bb3	pushl	%esi
00003bb4	subl	$0x14,%esp
00003bb7	movl	0x08(%ebp),%esi
00003bba	leal	0x000001e4(%esi),%eax
00003bc0	movl	%eax,(%esp)
00003bc3	calll	CUtlString::Length() const
00003bc8	testl	%eax,%eax
00003bca	je	0x00003be2
00003bcc	movl	0x000001bc(%esi),%eax
00003bd2	movl	%eax,(%esp)
00003bd5	movl	$0x00000001,0x04(%esp)
00003bdd	calll	vgui::TextEntry::SelectAllOnFirstFocus(bool)
00003be2	movl	0x000001bc(%esi),%ecx
00003be8	movl	(%ecx),%eax
00003bea	movl	%ecx,(%esp)
00003bed	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00003bf5	call	*0x30(%eax)
00003bf8	addl	$0x14,%esp
00003bfb	popl	%esi
00003bfc	popl	%ebp
00003bfd	ret
00003bfe	nop
CBaseAssetPicker::OnKeyCodePressed(ButtonCode_t):
00003c00	pushl	%ebp
00003c01	movl	%esp,%ebp
00003c03	pushl	%ebx
00003c04	pushl	%edi
00003c05	pushl	%esi
00003c06	subl	$0x1c,%esp
00003c09	calll	0x00003c0e
00003c0e	popl	%edi
00003c0f	movl	0x0c(%ebp),%ebx
00003c12	leal	0xb4(%ebx),%eax
00003c15	cmpl	$0x0e,%eax
00003c18	ja	0x00003cb0
00003c1e	movl	$0x00005003,%ecx
00003c23	btl	%eax,%ecx
00003c26	jae	0x00003cb0
00003c2c	movl	$0x00000020,(%esp)
00003c33	calll	KeyValues::operator new(unsigned long)
00003c38	movl	%eax,%esi
00003c3a	movl	%ebx,0x0c(%esp)
00003c3e	leal	0xa7e02-0x3c0e(%edi),%eax
00003c44	movl	%eax,0x08(%esp)
00003c48	leal	0xa7df3-0x3c0e(%edi),%eax
00003c4e	movl	%eax,0x04(%esp)
00003c52	movl	%esi,(%esp)
00003c55	calll	KeyValues::KeyValues(char const*, char const*, int)
00003c5a	movl	0x08(%ebp),%edx
00003c5d	movl	0xb6ab1-0x3c0e(%edi),%eax
00003c63	movl	(%eax),%ebx
00003c65	movl	(%ebx),%eax
00003c67	movl	0x0000009c(%eax),%eax
00003c6d	movl	%eax,0xf0(%ebp)
00003c70	movl	0x000001c0(%edx),%ecx
00003c76	movl	%edx,%edi
00003c78	movl	(%ecx),%eax
00003c7a	movl	%ecx,(%esp)
00003c7d	call	(%eax)
00003c7f	movl	%eax,0xec(%ebp)
00003c82	movl	%edi,%ecx
00003c84	movl	(%ecx),%eax
00003c86	movl	%ecx,(%esp)
00003c89	call	(%eax)
00003c8b	movl	%eax,0x0c(%esp)
00003c8f	movl	%esi,0x08(%esp)
00003c93	movl	0xec(%ebp),%eax
00003c96	movl	%eax,0x04(%esp)
00003c9a	movl	%ebx,(%esp)
00003c9d	call	*0xf0(%ebp)
00003ca0	movl	%esi,(%esp)
00003ca3	calll	KeyValues::deleteThis()
00003ca8	addl	$0x1c,%esp
00003cab	popl	%esi
00003cac	popl	%edi
00003cad	popl	%ebx
00003cae	popl	%ebp
00003caf	ret
00003cb0	addl	$0x1c,%esp
00003cb3	popl	%esi
00003cb4	popl	%edi
00003cb5	popl	%ebx
00003cb6	popl	%ebp
00003cb7	jmp	vgui::EditablePanel::OnKeyCodePressed(ButtonCode_t)
00003cbc	movl	%eax,%edi
00003cbe	movl	%esi,(%esp)
00003cc1	calll	KeyValues::operator delete(void*)
00003cc6	movl	%edi,(%esp)
00003cc9	calll	__Unwind_Resume
00003cce	calll	std::terminate()
00003cd3	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::IsAssetVisible(int):
00003ce0	pushl	%ebp
00003ce1	movl	%esp,%ebp
00003ce3	pushl	%ebx
00003ce4	pushl	%edi
00003ce5	pushl	%esi
00003ce6	subl	$0x0c,%esp
00003ce9	calll	0x00003cee
00003cee	popl	%eax
00003cef	movl	0x08(%ebp),%edx
00003cf2	movzwl	0x000001d0(%edx),%ecx
00003cf9	imull	$0x68,%ecx,%ecx
00003cfc	movl	s_AssetCache-0x3cee+0x00000018(%eax),%eax
00003d02	movl	0x08(%eax,%ecx),%eax
00003d06	movl	0x00000240(%edx),%esi
00003d0c	movl	0x0c(%ebp),%edx
00003d0f	testl	%esi,%esi
00003d11	js	0x00003d22
00003d13	imull	$0x14,%edx,%edi
00003d16	xorb	%cl,%cl
00003d18	cmpl	0x10(%eax,%edi),%esi
00003d1c	jne	0x00003df2
00003d22	imull	$0x14,%edx,%ecx
00003d25	addl	%ecx,%eax
00003d27	movl	%eax,(%esp)
00003d2a	calll	CUtlString::operator char const*() const
00003d2f	movl	%eax,%esi
00003d31	movl	0x08(%ebp),%eax
00003d34	leal	0x000001f4(%eax),%eax
00003d3a	movl	%eax,(%esp)
00003d3d	calll	CUtlString::operator char const*() const
00003d42	movl	%eax,0x04(%esp)
00003d46	movl	%esi,(%esp)
00003d49	calll	_strcmp
00003d4e	movb	$0x01,%cl
00003d50	testl	%eax,%eax
00003d52	je	0x00003df2
00003d58	movl	0x08(%ebp),%eax
00003d5b	leal	0x000001e4(%eax),%edi
00003d61	movl	%edi,(%esp)
00003d64	calll	CUtlString::Length() const
00003d69	testl	%eax,%eax
00003d6b	je	0x00003d87
00003d6d	movl	%edi,(%esp)
00003d70	calll	CUtlString::Get()
00003d75	movl	%eax,0x04(%esp)
00003d79	movl	%esi,(%esp)
00003d7c	calll	V_stristr(char const*, char const*)
00003d81	xorb	%cl,%cl
00003d83	testl	%eax,%eax
00003d85	je	0x00003df2
00003d87	movl	0x08(%ebp),%eax
00003d8a	leal	0x000001d4(%eax),%ebx
00003d90	movl	%ebx,(%esp)
00003d93	calll	CUtlString::Length() const
00003d98	testl	%eax,%eax
00003d9a	je	0x00003dc4
00003d9c	movl	%ebx,(%esp)
00003d9f	calll	CUtlString::Get()
00003da4	movl	%eax,%edi
00003da6	movl	%ebx,(%esp)
00003da9	calll	CUtlString::Length() const
00003dae	movl	%eax,0x08(%esp)
00003db2	movl	%edi,0x04(%esp)
00003db6	movl	%esi,(%esp)
00003db9	calll	V_strnicmp(char const*, char const*, int)
00003dbe	xorb	%cl,%cl
00003dc0	testl	%eax,%eax
00003dc2	jne	0x00003df2
00003dc4	movl	0x08(%ebp),%eax
00003dc7	testb	$0x01,0x00000248(%eax)
00003dce	jne	0x00003df0
00003dd0	movl	%ebx,(%esp)
00003dd3	calll	CUtlString::Length() const
00003dd8	addl	%eax,%esi
00003dda	movl	%esi,(%esp)
00003ddd	movl	$0x0000005c,0x04(%esp)
00003de5	calll	_strchr
00003dea	xorb	%cl,%cl
00003dec	testl	%eax,%eax
00003dee	jne	0x00003df2
00003df0	movb	$0x01,%cl
00003df2	movzbl	%cl,%eax
00003df5	addl	$0x0c,%esp
00003df8	popl	%esi
00003df9	popl	%edi
00003dfa	popl	%ebx
00003dfb	popl	%ebp
00003dfc	ret
00003dfd	nopl	(%eax)
CBaseAssetPicker::AddAssetToList(int):
00003e00	pushl	%ebp
00003e01	movl	%esp,%ebp
00003e03	pushl	%ebx
00003e04	pushl	%edi
00003e05	pushl	%esi
00003e06	subl	$0x2c,%esp
00003e09	calll	0x00003e0e
00003e0e	popl	%ebx
00003e0f	movl	0x08(%ebp),%ecx
00003e12	movl	$0x0000ffff,%eax
00003e17	andl	0x000001d0(%ecx),%eax
00003e1d	imull	$0x68,%eax,%eax
00003e20	movl	s_AssetCache-0x3e0e+0x00000018(%ebx),%ecx
00003e26	movl	0x08(%ecx,%eax),%eax
00003e2a	movl	%eax,0xf0(%ebp)
00003e2d	imull	$0x14,0x0c(%ebp),%ecx
00003e31	movl	%ecx,0xe8(%ebp)
00003e34	leal	(%eax,%ecx),%edi
00003e37	movl	%edi,(%esp)
00003e3a	calll	CUtlString::operator char const*() const
00003e3f	movl	%eax,(%esp)
00003e42	movl	$0x0000005c,0x04(%esp)
00003e4a	calll	_strchr
00003e4f	xorb	%cl,%cl
00003e51	testl	%eax,%eax
00003e53	jne	0x00003e72
00003e55	movl	%edi,(%esp)
00003e58	calll	CUtlString::operator char const*() const
00003e5d	movl	%eax,(%esp)
00003e60	movl	$0x0000002f,0x04(%esp)
00003e68	calll	_strchr
00003e6d	testl	%eax,%eax
00003e6f	sete	%cl
00003e72	movb	%cl,0xe7(%ebp)
00003e75	movl	$0x00000020,(%esp)
00003e7c	calll	KeyValues::operator new(unsigned long)
00003e81	movl	%edi,%ecx
00003e83	movl	%ecx,0xec(%ebp)
00003e86	movl	%eax,%edi
00003e88	movl	%ecx,(%esp)
00003e8b	calll	CUtlString::operator char const*() const
00003e90	movl	%eax,0x0c(%esp)
00003e94	leal	0xa7dc5-0x3e0e(%ebx),%eax
00003e9a	movl	%eax,0x08(%esp)
00003e9e	leal	0xa7cf1-0x3e0e(%ebx),%eax
00003ea4	movl	%eax,0x04(%esp)
00003ea8	movl	%edi,(%esp)
00003eab	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00003eb0	movl	0xe8(%ebp),%esi
00003eb3	movl	0xf0(%ebp),%eax
00003eb6	movl	0x10(%eax,%esi),%ecx
00003eba	shll	$0x05,%ecx
00003ebd	movl	s_AssetCache-0x3e0e(%ebx),%eax
00003ec3	addl	%ecx,%eax
00003ec5	movl	%eax,(%esp)
00003ec8	calll	CUtlString::operator char const*() const
00003ecd	movl	%eax,0x08(%esp)
00003ed1	leal	0xa7dbd-0x3e0e(%ebx),%eax
00003ed7	movl	%eax,0x04(%esp)
00003edb	movl	%edi,(%esp)
00003ede	calll	KeyValues::SetString(char const*, char const*)
00003ee3	movl	0xf0(%ebp),%eax
00003ee6	movl	0x10(%eax,%esi),%eax
00003eea	movl	%eax,0x08(%esp)
00003eee	leal	0xa7e07-0x3e0e(%ebx),%eax
00003ef4	movl	%eax,0x04(%esp)
00003ef8	movl	%edi,(%esp)
00003efb	calll	KeyValues::SetInt(char const*, int)
00003f00	movzbl	0xe7(%ebp),%eax
00003f04	movl	%eax,0x08(%esp)
00003f08	leal	0xa7cd6-0x3e0e(%ebx),%eax
00003f0e	movl	%eax,0x04(%esp)
00003f12	movl	%edi,(%esp)
00003f15	calll	KeyValues::SetInt(char const*, int)
00003f1a	movl	0x08(%ebp),%esi
00003f1d	movl	0x000001c0(%esi),%ecx
00003f23	movl	(%ecx),%eax
00003f25	movl	%edi,0x04(%esp)
00003f29	movl	%ecx,(%esp)
00003f2c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x10(%esp)
00003f34	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0c(%esp)
00003f3c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003f44	call	*0x00000390(%eax)
00003f4a	movl	%eax,0xf0(%ebp)
00003f4d	movl	%edi,(%esp)
00003f50	calll	KeyValues::deleteThis()
00003f55	movl	0x000001c0(%esi),%ecx
00003f5b	movl	(%ecx),%eax
00003f5d	movl	%ecx,(%esp)
00003f60	call	*0x000003f4(%eax)
00003f66	testl	%eax,%eax
00003f68	jne	0x00003fb5
00003f6a	leal	0x000001f4(%esi),%eax
00003f70	movl	%eax,(%esp)
00003f73	calll	CUtlString::operator char const*() const
00003f78	movl	%eax,%edi
00003f7a	movl	0xec(%ebp),%eax
00003f7d	movl	%eax,(%esp)
00003f80	calll	CUtlString::operator char const*() const
00003f85	movl	%eax,0x04(%esp)
00003f89	movl	%edi,(%esp)
00003f8c	calll	_strcmp
00003f91	testl	%eax,%eax
00003f93	jne	0x00003fb5
00003f95	movl	0x000001c0(%esi),%ecx
00003f9b	movl	(%ecx),%eax
00003f9d	movl	0xf0(%ebp),%edx
00003fa0	movl	%edx,0x04(%esp)
00003fa4	movl	%ecx,(%esp)
00003fa7	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00003faf	call	*0x00000414(%eax)
00003fb5	movl	$0x00000020,(%esp)
00003fbc	calll	KeyValues::operator new(unsigned long)
00003fc1	movl	%eax,%edi
00003fc3	movl	0xec(%ebp),%eax
00003fc6	movl	%eax,(%esp)
00003fc9	calll	CUtlString::operator char const*() const
00003fce	movl	%eax,0x0c(%esp)
00003fd2	leal	0xa7cbc-0x3e0e(%ebx),%eax
00003fd8	movl	%eax,0x08(%esp)
00003fdc	leal	0xa7e10-0x3e0e(%ebx),%eax
00003fe2	movl	%eax,0x04(%esp)
00003fe6	movl	%edi,(%esp)
00003fe9	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00003fee	movl	0x0000021c(%esi),%eax
00003ff4	testl	%eax,%eax
00003ff6	je	0x0000400e
00003ff8	movl	%eax,0x08(%esp)
00003ffc	leal	0xa7e15-0x3e0e(%ebx),%eax
00004002	movl	%eax,0x04(%esp)
00004006	movl	%edi,(%esp)
00004009	calll	KeyValues::SetString(char const*, char const*)
0000400e	movl	0x000001c0(%esi),%eax
00004014	movl	%edi,0x08(%esp)
00004018	movl	0xf0(%ebp),%ecx
0000401b	movl	%ecx,0x04(%esp)
0000401f	movl	%eax,(%esp)
00004022	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
00004027	movl	0x00000208(%esi),%eax
0000402d	movl	0x00000210(%esi),%edi
00004033	leal	0x00000204(%esi),%ebx
00004039	leal	0x01(%edi),%edx
0000403c	cmpl	%eax,%edx
0000403e	movl	%edi,%ecx
00004040	jle	0x00004062
00004042	movl	%edx,%ecx
00004044	subl	%eax,%ecx
00004046	movl	%ecx,0x04(%esp)
0000404a	movl	%ebx,(%esp)
0000404d	movl	%ebx,0xec(%ebp)
00004050	movl	%edx,%ebx
00004052	calll	CUtlMemory<CBaseAssetPicker::AssetInfo_t, int>::Grow(int)
00004057	movl	%ebx,%edx
00004059	movl	0xec(%ebp),%ebx
0000405c	movl	0x00000210(%esi),%ecx
00004062	movl	%ebx,0xec(%ebp)
00004065	incl	%ecx
00004066	movl	%ecx,0x00000210(%esi)
0000406c	movl	0x00000204(%esi),%eax
00004072	movl	%eax,0x00000214(%esi)
00004078	subl	%edi,%ecx
0000407a	decl	%ecx
0000407b	testl	%ecx,%ecx
0000407d	jle	0x0000409d
0000407f	shll	$0x03,%ecx
00004082	movl	%ecx,0x08(%esp)
00004086	leal	(%eax,%edi,8),%ecx
00004089	movl	%ecx,0x04(%esp)
0000408d	leal	(%eax,%edx,8),%eax
00004090	movl	%eax,(%esp)
00004093	calll	_memmove
00004098	movl	0xec(%ebp),%eax
0000409b	movl	(%eax),%eax
0000409d	movl	0x0c(%ebp),%ecx
000040a0	movl	%ecx,(%eax,%edi,8)
000040a3	movl	0x08(%ebp),%ecx
000040a6	movl	0x00000204(%ecx),%eax
000040ac	movl	0xf0(%ebp),%edx
000040af	movl	%edx,0x04(%eax,%edi,8)
000040b3	movl	%edi,0x04(%esp)
000040b7	movl	%ecx,%esi
000040b9	movl	%esi,(%esp)
000040bc	calll	CBaseAssetPicker::IsAssetVisible(int)
000040c1	movb	%al,%bl
000040c3	movl	0x000001c0(%esi),%ecx
000040c9	movl	(%ecx),%eax
000040cb	movzbl	%bl,%edx
000040ce	movl	%edx,0x08(%esp)
000040d2	movl	0xf0(%ebp),%edx
000040d5	movl	%edx,0x04(%esp)
000040d9	movl	%ecx,(%esp)
000040dc	call	*0x000003e4(%eax)
000040e2	testb	%bl,%bl
000040e4	je	0x000040ec
000040e6	incl	0x00000244(%esi)
000040ec	addl	$0x2c,%esp
000040ef	popl	%esi
000040f0	popl	%edi
000040f1	popl	%ebx
000040f2	popl	%ebp
000040f3	ret
000040f4	movl	%eax,%esi
000040f6	movl	%edi,(%esp)
000040f9	calll	KeyValues::operator delete(void*)
000040fe	movl	%esi,(%esp)
00004101	calll	__Unwind_Resume
00004106	movl	%eax,%esi
00004108	movl	%edi,(%esp)
0000410b	calll	KeyValues::operator delete(void*)
00004110	jmp	0x000040fe
00004112	calll	std::terminate()
00004117	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::OnTick():
00004120	pushl	%ebp
00004121	movl	%esp,%ebp
00004123	pushl	%ebx
00004124	pushl	%edi
00004125	pushl	%esi
00004126	subl	$0x0000033c,%esp
0000412c	calll	0x00004131
00004131	popl	%esi
00004132	movl	0xb6aa5-0x4131(%esi),%eax
00004138	movl	%eax,0xfffffce4(%ebp)
0000413e	movl	(%eax),%eax
00004140	movl	%eax,0xf0(%ebp)
00004143	movl	0x08(%ebp),%edi
00004146	movl	%edi,(%esp)
00004149	calll	vgui::Panel::OnTick()
0000414e	movl	0x000001d0(%edi),%eax
00004154	xorl	%ebx,%ebx
00004156	cmpl	$0x0000ffff,%eax
0000415b	je	0x0000416d
0000415d	movzwl	%ax,%ecx
00004160	imull	$0x68,%ecx,%ecx
00004163	movl	s_AssetCache-0x4131+0x00000018(%esi),%edx
00004169	movl	0x14(%edx,%ecx),%ebx
0000416d	movb	0x0000023c(%edi),%cl
00004173	movl	%eax,0x04(%esp)
00004177	leal	s_AssetCache-0x4131(%esi),%eax
0000417d	movl	%eax,(%esp)
00004180	andb	$0x02,%cl
00004183	shrb	%cl
00004185	movzbl	%cl,%eax
00004188	movss	0xa7bc8-0x4131(%esi,%eax,4),%xmm0
00004191	movl	%esi,0xfffffce8(%ebp)
00004197	movss	%xmm0,0x08(%esp)
0000419d	calll	CAssetCache::ContinueSearchForAssets(AssetList_t__*, float)
000041a2	movb	%al,0xfffffce3(%ebp)
000041a8	movb	0x0000023c(%edi),%al
000041ae	testb	$0x02,%al
000041b0	je	0x000041c6
000041b2	movl	0x000001b4(%edi),%eax
000041b8	movl	%eax,(%esp)
000041bb	calll	CAssetTreeView::OpenRoot()
000041c0	movb	0x0000023c(%edi),%al
000041c6	andb	$0xfd,%al
000041c8	movb	%al,0x0000023c(%edi)
000041ce	movl	0x000001d0(%edi),%eax
000041d4	xorl	%esi,%esi
000041d6	cmpl	$0x0000ffff,%eax
000041db	je	0x000041f3
000041dd	movzwl	%ax,%eax
000041e0	imull	$0x68,%eax,%eax
000041e3	movl	0xfffffce8(%ebp),%ecx
000041e9	movl	s_AssetCache-0x4131+0x00000018(%ecx),%ecx
000041ef	movl	0x14(%ecx,%eax),%esi
000041f3	cmpl	%esi,%ebx
000041f5	jge	0x00004211
000041f7	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00004200	movl	%ebx,0x04(%esp)
00004204	movl	%edi,(%esp)
00004207	calll	CBaseAssetPicker::AddAssetToList(int)
0000420c	incl	%ebx
0000420d	cmpl	%ebx,%esi
0000420f	jne	0x00004200
00004211	cmpb	$0x01,0xfffffce3(%ebp)
00004218	jne	0x000042c0
0000421e	movl	0xfffffce8(%ebp),%eax
00004224	movl	0xb6aad-0x4131(%eax),%eax
0000422a	movl	(%eax),%esi
0000422c	movl	(%esi),%eax
0000422e	movl	0x4c(%eax),%ebx
00004231	movl	(%edi),%eax
00004233	movl	%edi,(%esp)
00004236	call	(%eax)
00004238	movl	%eax,0x04(%esp)
0000423c	movl	%esi,(%esp)
0000423f	call	*%ebx
00004241	orb	$0x04,0x0000023c(%edi)
00004248	movl	0x000001b4(%edi),%ebx
0000424e	movl	0x00000224(%edi),%esi
00004254	leal	0x000001d4(%edi),%eax
0000425a	movl	%eax,(%esp)
0000425d	calll	CUtlString::operator char const*() const
00004262	movl	%eax,0x10(%esp)
00004266	movl	%esi,0x0c(%esp)
0000426a	movl	0xfffffce8(%ebp),%eax
00004270	leal	0xa7d03-0x4131(%eax),%eax
00004276	movl	%eax,0x08(%esp)
0000427a	leal	0xfffffeec(%ebp),%esi
00004280	movl	%esi,(%esp)
00004283	movl	$0x00000104,0x04(%esp)
0000428b	calll	V_snprintf(char*, int, char const*, ...)
00004290	movl	%esi,(%esp)
00004293	calll	V_StripTrailingSlash(char*)
00004298	movl	(%ebx),%eax
0000429a	movl	%ebx,(%esp)
0000429d	call	*0x0000034c(%eax)
000042a3	movl	%esi,0x08(%esp)
000042a7	movl	%eax,0x04(%esp)
000042ab	movl	%ebx,(%esp)
000042ae	calll	CAssetTreeView::SelectFolder_R(int, char const*)
000042b3	movl	%edi,(%esp)
000042b6	calll	CBaseAssetPicker::RefreshAssetList()
000042bb	jmp	0x00004341
000042c0	movb	0x0000023c(%edi),%al
000042c6	movl	0x00000244(%edi),%ecx
000042cc	movl	0x00000210(%edi),%esi
000042d2	movl	0x00000218(%edi),%edx
000042d8	movl	%esi,0x14(%esp)
000042dc	movl	%ecx,0x10(%esp)
000042e0	movl	%edx,0x0c(%esp)
000042e4	movl	0xfffffce8(%ebp),%ebx
000042ea	leal	0xa7e27-0x4131(%ebx),%ecx
000042f0	movl	%ecx,0x08(%esp)
000042f4	leal	0xfffffcec(%ebp),%esi
000042fa	movl	%esi,(%esp)
000042fd	andb	$0x04,%al
000042ff	shrb	$0x02,%al
00004302	leal	0xa7d02-0x4131(%ebx),%edx
00004308	leal	0xa7e34-0x4131(%ebx),%ecx
0000430e	testb	%al,%al
00004310	cmovnel	%edx,%ecx
00004313	movl	%ecx,0x18(%esp)
00004317	movl	$0x00000200,0x04(%esp)
0000431f	calll	V_snprintf(char*, int, char const*, ...)
00004324	movl	0x000001c0(%edi),%ecx
0000432a	movl	(%ecx),%eax
0000432c	movl	%esi,0x08(%esp)
00004330	movl	%ecx,(%esp)
00004333	movl	$0x00000001,0x04(%esp)
0000433b	call	*0x0000035c(%eax)
00004341	movl	0xfffffce4(%ebp),%eax
00004347	movl	(%eax),%eax
00004349	cmpl	0xf0(%ebp),%eax
0000434c	jne	0x00004359
0000434e	addl	$0x0000033c,%esp
00004354	popl	%esi
00004355	popl	%edi
00004356	popl	%ebx
00004357	popl	%ebp
00004358	ret
00004359	calll	___stack_chk_fail
0000435e	nop
CBaseAssetPicker::UpdateAssetColumnHeader():
00004360	pushl	%ebp
00004361	movl	%esp,%ebp
00004363	pushl	%ebx
00004364	pushl	%edi
00004365	pushl	%esi
00004366	subl	$0x0000022c,%esp
0000436c	calll	0x00004371
00004371	popl	%eax
00004372	movl	0xb6aa5-0x4371(%eax),%ecx
00004378	movl	%ecx,0xfffffdec(%ebp)
0000437e	movl	(%ecx),%ecx
00004380	movl	%ecx,0xf0(%ebp)
00004383	movl	0x08(%ebp),%edi
00004386	movb	0x0000023c(%edi),%cl
0000438c	movl	0x00000244(%edi),%edx
00004392	movl	0x00000210(%edi),%esi
00004398	movl	0x00000218(%edi),%ebx
0000439e	movl	%esi,0x14(%esp)
000043a2	movl	%edx,0x10(%esp)
000043a6	movl	%ebx,0x0c(%esp)
000043aa	leal	0xa7e27-0x4371(%eax),%edx
000043b0	movl	%edx,0x08(%esp)
000043b4	leal	0xfffffdf0(%ebp),%ebx
000043ba	movl	%ebx,(%esp)
000043bd	andb	$0x04,%cl
000043c0	shrb	$0x02,%cl
000043c3	leal	0xa7d02-0x4371(%eax),%edx
000043c9	leal	0xa7e34-0x4371(%eax),%eax
000043cf	testb	%cl,%cl
000043d1	cmovnel	%edx,%eax
000043d4	movl	%eax,0x18(%esp)
000043d8	movl	$0x00000200,0x04(%esp)
000043e0	calll	V_snprintf(char*, int, char const*, ...)
000043e5	movl	0x000001c0(%edi),%ecx
000043eb	movl	(%ecx),%eax
000043ed	movl	%ebx,0x08(%esp)
000043f1	movl	%ecx,(%esp)
000043f4	movl	$0x00000001,0x04(%esp)
000043fc	call	*0x0000035c(%eax)
00004402	movl	0xfffffdec(%ebp),%eax
00004408	movl	(%eax),%eax
0000440a	cmpl	0xf0(%ebp),%eax
0000440d	jne	0x0000441a
0000440f	addl	$0x0000022c,%esp
00004415	popl	%esi
00004416	popl	%edi
00004417	popl	%ebx
00004418	popl	%ebp
00004419	ret
0000441a	calll	___stack_chk_fail
0000441f	nop
CBaseAssetPicker::BuildAssetNameList():
00004420	pushl	%ebp
00004421	movl	%esp,%ebp
00004423	pushl	%ebx
00004424	pushl	%edi
00004425	pushl	%esi
00004426	subl	$0x3c,%esp
00004429	calll	0x0000442e
0000442e	popl	%edi
0000442f	movl	0x08(%ebp),%esi
00004432	movb	0x0000023c(%esi),%al
00004438	testb	$0x01,%al
0000443a	jne	0x00004631
00004440	orb	$0x01,%al
00004442	movb	%al,0x0000023c(%esi)
00004448	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000244(%esi)
00004452	movl	$0xffffffff,0x00000240(%esi)
0000445c	leal	s_AssetCache-0x442e(%edi),%eax
00004462	movl	%eax,0xd4(%ebp)
00004465	movl	%eax,(%esp)
00004468	calll	CAssetCache::BuildModList()
0000446d	movl	0x000001c8(%esi),%eax
00004473	movl	%eax,(%esp)
00004476	calll	vgui::ComboBox::RemoveAll()
0000447b	movl	0x000001c8(%esi),%esi
00004481	movl	(%esi),%eax
00004483	movl	0x00000474(%eax),%eax
00004489	movl	%eax,0xf0(%ebp)
0000448c	movl	$0x00000020,(%esp)
00004493	calll	KeyValues::operator new(unsigned long)
00004498	movl	%eax,%ebx
0000449a	leal	0xa7dbd-0x442e(%edi),%eax
000044a0	movl	%eax,0xe0(%ebp)
000044a3	movl	%eax,0x08(%esp)
000044a7	leal	0xa7dc1-0x442e(%edi),%eax
000044ad	movl	%eax,0xdc(%ebp)
000044b0	movl	%eax,0x04(%esp)
000044b4	movl	%ebx,(%esp)
000044b7	movl	$0xffffffff,0x0c(%esp)
000044bf	calll	KeyValues::KeyValues(char const*, char const*, int)
000044c4	movl	%ebx,0x08(%esp)
000044c8	leal	0xa7e1e-0x442e(%edi),%eax
000044ce	movl	%eax,0x04(%esp)
000044d2	movl	%esi,(%esp)
000044d5	call	*0xf0(%ebp)
000044d8	xorl	%esi,%esi
000044da	movl	s_AssetCache-0x442e+0x0000000c(%edi),%eax
000044e0	movl	%eax,0xd8(%ebp)
000044e3	xorl	%eax,%eax
000044e5	movl	%edi,0xe4(%ebp)
000044e8	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
000044f0	cmpl	0xd8(%ebp),%eax
000044f3	movl	0x08(%ebp),%ebx
000044f6	jge	0x00004576
000044f8	movl	%eax,0xf0(%ebp)
000044fb	movl	s_AssetCache-0x442e(%edi),%eax
00004501	addl	%esi,%eax
00004503	movl	%eax,(%esp)
00004506	calll	CUtlString::operator char const*() const
0000450b	movl	%eax,0xec(%ebp)
0000450e	movl	0x000001c8(%ebx),%ebx
00004514	movl	(%ebx),%eax
00004516	movl	0x00000474(%eax),%eax
0000451c	movl	%eax,0xe8(%ebp)
0000451f	movl	$0x00000020,(%esp)
00004526	calll	KeyValues::operator new(unsigned long)
0000452b	movl	%eax,%edi
0000452d	movl	0xf0(%ebp),%eax
00004530	movl	%eax,0x0c(%esp)
00004534	movl	0xe0(%ebp),%eax
00004537	movl	%eax,0x08(%esp)
0000453b	movl	0xdc(%ebp),%eax
0000453e	movl	%eax,0x04(%esp)
00004542	movl	%edi,(%esp)
00004545	calll	KeyValues::KeyValues(char const*, char const*, int)
0000454a	movl	%edi,0x08(%esp)
0000454e	movl	0xec(%ebp),%eax
00004551	movl	%eax,0x04(%esp)
00004555	movl	%ebx,(%esp)
00004558	call	*0xe8(%ebp)
0000455b	addl	$0x20,%esi
0000455e	movl	0xf0(%ebp),%eax
00004561	incl	%eax
00004562	movl	0xe4(%ebp),%edi
00004565	jmp	0x000044f0
00004567	movl	%eax,%esi
00004569	movl	%edi,(%esp)
0000456c	calll	KeyValues::operator delete(void*)
00004571	jmp	0x00004643
00004576	movl	0x000001c8(%ebx),%eax
0000457c	movl	%eax,(%esp)
0000457f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00004587	calll	vgui::ComboBox::ActivateItemByRow(int)
0000458c	movl	0x000001d0(%ebx),%eax
00004592	movl	%eax,0x04(%esp)
00004596	movl	0xd4(%ebp),%eax
00004599	movl	%eax,(%esp)
0000459c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000045a4	calll	CAssetCache::BeginAssetScan(AssetList_t__*, bool)
000045a9	movb	0x0000023c(%ebx),%cl
000045af	andb	$0xf9,%cl
000045b2	testb	%al,%al
000045b4	je	0x000045ec
000045b6	orb	$0x02,%cl
000045b9	movb	%cl,0x0000023c(%ebx)
000045bf	movl	0xb6aad-0x442e(%edi),%eax
000045c5	movl	%edi,0xe4(%ebp)
000045c8	movl	(%eax),%edi
000045ca	movl	(%edi),%eax
000045cc	movl	0x48(%eax),%esi
000045cf	movl	(%ebx),%eax
000045d1	movl	%ebx,(%esp)
000045d4	call	(%eax)
000045d6	movl	%eax,0x04(%esp)
000045da	movl	%edi,(%esp)
000045dd	movl	0xe4(%ebp),%edi
000045e0	movl	$0x0000000a,0x08(%esp)
000045e8	call	*%esi
000045ea	jmp	0x000045f5
000045ec	orb	$0x04,%cl
000045ef	movb	%cl,0x0000023c(%ebx)
000045f5	movl	0x000001d0(%ebx),%eax
000045fb	cmpl	$0x0000ffff,%eax
00004600	je	0x00004631
00004602	movzwl	%ax,%eax
00004605	imull	$0x68,%eax,%eax
00004608	movl	s_AssetCache-0x442e+0x00000018(%edi),%ecx
0000460e	movl	0x14(%ecx,%eax),%esi
00004612	testl	%esi,%esi
00004614	jle	0x00004631
00004616	xorl	%edi,%edi
00004618	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00004620	movl	%edi,0x04(%esp)
00004624	movl	%ebx,(%esp)
00004627	calll	CBaseAssetPicker::AddAssetToList(int)
0000462c	incl	%edi
0000462d	cmpl	%edi,%esi
0000462f	jne	0x00004620
00004631	addl	$0x3c,%esp
00004634	popl	%esi
00004635	popl	%edi
00004636	popl	%ebx
00004637	popl	%ebp
00004638	ret
00004639	movl	%eax,%esi
0000463b	movl	%ebx,(%esp)
0000463e	calll	KeyValues::operator delete(void*)
00004643	movl	%esi,(%esp)
00004646	calll	__Unwind_Resume
0000464b	calll	std::terminate()
CBaseAssetPicker::RescanAssets():
00004650	pushl	%ebp
00004651	movl	%esp,%ebp
00004653	pushl	%ebx
00004654	pushl	%edi
00004655	pushl	%esi
00004656	subl	$0x0c,%esp
00004659	calll	0x0000465e
0000465e	popl	%edi
0000465f	movl	0x08(%ebp),%esi
00004662	movl	0x000001c0(%esi),%ecx
00004668	movl	(%ecx),%eax
0000466a	movl	%ecx,(%esp)
0000466d	call	*0x000003c4(%eax)
00004673	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000210(%esi)
0000467d	movl	0x000001d0(%esi),%eax
00004683	movl	%eax,0x04(%esp)
00004687	leal	s_AssetCache-0x465e(%edi),%eax
0000468d	movl	%eax,(%esp)
00004690	movl	$0x00000001,0x08(%esp)
00004698	calll	CAssetCache::BeginAssetScan(AssetList_t__*, bool)
0000469d	movb	0x0000023c(%esi),%cl
000046a3	movb	%cl,%al
000046a5	orb	$0x02,%al
000046a7	movb	%al,0x0000023c(%esi)
000046ad	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x00000244(%esi)
000046b7	testb	$0x04,%cl
000046ba	je	0x000046e9
000046bc	andb	$0xfb,%al
000046be	movb	%al,0x0000023c(%esi)
000046c4	movl	0xb6aad-0x465e(%edi),%eax
000046ca	movl	(%eax),%ebx
000046cc	movl	(%ebx),%eax
000046ce	movl	0x48(%eax),%edi
000046d1	movl	(%esi),%eax
000046d3	movl	%esi,(%esp)
000046d6	call	(%eax)
000046d8	movl	%eax,0x04(%esp)
000046dc	movl	%ebx,(%esp)
000046df	movl	$0x0000000a,0x08(%esp)
000046e7	call	*%edi
000046e9	addl	$0x0c,%esp
000046ec	popl	%esi
000046ed	popl	%edi
000046ee	popl	%ebx
000046ef	popl	%ebp
000046f0	ret
000046f1	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::GetModPath(int):
00004700	pushl	%ebp
00004701	movl	%esp,%ebp
00004703	subl	$0x08,%esp
00004706	calll	0x0000470b
0000470b	popl	%ecx
0000470c	movl	0x0c(%ebp),%eax
0000470f	shll	$0x05,%eax
00004712	movl	s_AssetCache-0x470b(%ecx),%ecx
00004718	leal	0x10(%ecx,%eax),%eax
0000471c	movl	%eax,(%esp)
0000471f	calll	CUtlString::Get() const
00004724	addl	$0x08,%esp
00004727	popl	%ebp
00004728	ret
00004729	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::OnCommand(char const*):
00004730	pushl	%ebp
00004731	movl	%esp,%ebp
00004733	subl	$0x08,%esp
00004736	calll	0x0000473b
0000473b	popl	%eax
0000473c	leal	0xa7d6f-0x473b(%eax),%eax
00004742	movl	%eax,0x04(%esp)
00004746	movl	0x0c(%ebp),%eax
00004749	movl	%eax,(%esp)
0000474c	calll	V_stricmp(char const*, char const*)
00004751	addl	$0x08,%esp
00004754	testl	%eax,%eax
00004756	jne	0x0000475e
00004758	popl	%ebp
00004759	jmp	CBaseAssetPicker::RescanAssets()
0000475e	popl	%ebp
0000475f	jmp	vgui::Panel::OnCommand(char const*)
00004764	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::OnFileSelected():
00004770	pushl	%ebp
00004771	movl	%esp,%ebp
00004773	pushl	%ebx
00004774	pushl	%edi
00004775	pushl	%esi
00004776	subl	$0x0c,%esp
00004779	calll	0x0000477e
0000477e	popl	%esi
0000477f	movl	0x08(%ebp),%ebx
00004782	movl	0x000001b4(%ebx),%ecx
00004788	movl	(%ecx),%eax
0000478a	movl	%ecx,(%esp)
0000478d	call	*0x00000398(%eax)
00004793	testl	%eax,%eax
00004795	jns	0x0000479f
00004797	leal	0xa7d02-0x477e(%esi),%esi
0000479d	jmp	0x000047ee
0000479f	movl	0x000001b4(%ebx),%edx
000047a5	movl	(%edx),%ecx
000047a7	movl	%eax,0x04(%esp)
000047ab	movl	%edx,(%esp)
000047ae	call	*0x0000035c(%ecx)
000047b4	leal	0xa7d02-0x477e(%esi),%ecx
000047ba	movl	%ecx,0x08(%esp)
000047be	leal	0xa7cec-0x477e(%esi),%ecx
000047c4	movl	%ecx,0x04(%esp)
000047c8	movl	%eax,(%esp)
000047cb	calll	KeyValues::GetString(char const*, char const*)
000047d0	movl	%eax,%esi
000047d2	movl	0x00000224(%ebx),%eax
000047d8	movl	%eax,(%esp)
000047db	calll	_strlen
000047e0	cmpb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%esi,%eax)
000047e4	jne	0x000047ea
000047e6	addl	%eax,%esi
000047e8	jmp	0x000047ee
000047ea	leal	0x01(%eax,%esi),%esi
000047ee	addl	$0x000001d4,%ebx
000047f4	movl	%ebx,(%esp)
000047f7	calll	CUtlString::Get()
000047fc	movl	%eax,0x04(%esp)
00004800	movl	%esi,(%esp)
00004803	calll	V_stricmp(char const*, char const*)
00004808	testl	%eax,%eax
0000480a	je	0x00004842
0000480c	movl	%esi,(%esp)
0000480f	calll	_strlen
00004814	movl	%eax,%edi
00004816	movl	%esi,0x04(%esp)
0000481a	movl	%ebx,(%esp)
0000481d	calll	CUtlString::operator=(char const*)
00004822	testl	%edi,%edi
00004824	jle	0x00004836
00004826	movl	%ebx,(%esp)
00004829	movl	$0x0000005c,0x04(%esp)
00004831	calll	CUtlString::operator+=(char)
00004836	addl	$0x0c,%esp
00004839	popl	%esi
0000483a	popl	%edi
0000483b	popl	%ebx
0000483c	popl	%ebp
0000483d	jmp	CBaseAssetPicker::RefreshAssetList()
00004842	addl	$0x0c,%esp
00004845	popl	%esi
00004846	popl	%edi
00004847	popl	%ebx
00004848	popl	%ebp
00004849	ret
0000484a	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::OnTextChanged(KeyValues*):
00004850	pushl	%ebp
00004851	movl	%esp,%ebp
00004853	pushl	%ebx
00004854	pushl	%edi
00004855	pushl	%esi
00004856	subl	$0x0c,%esp
00004859	calll	0x0000485e
0000485e	popl	%esi
0000485f	movl	0xb6aa5-0x485e(%esi),%eax
00004865	movl	%eax,0xec(%ebp)
00004868	movl	(%eax),%eax
0000486a	movl	%eax,0xf0(%ebp)
0000486d	subl	$0x10,%esp
00004870	leal	0xa7e39-0x485e(%esi),%eax
00004876	movl	%eax,0x04(%esp)
0000487a	movl	0x0c(%ebp),%eax
0000487d	movl	%eax,(%esp)
00004880	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00004888	calll	KeyValues::GetPtr(char const*, void*)
0000488d	addl	$0x10,%esp
00004890	movl	0x08(%ebp),%ebx
00004893	movl	0x000001bc(%ebx),%ecx
00004899	cmpl	%ecx,%eax
0000489b	jne	0x00004944
000048a1	movl	(%ecx),%eax
000048a3	subl	$0x10,%esp
000048a6	movl	%ecx,(%esp)
000048a9	call	*0x00000358(%eax)
000048af	addl	$0x10,%esp
000048b2	movl	%eax,%esi
000048b4	leal	0x10(%esi),%eax
000048b7	andl	$0xf0,%eax
000048ba	movl	%esp,%edi
000048bc	subl	%eax,%edi
000048be	movl	%edi,%esp
000048c0	testl	%esi,%esi
000048c2	jle	0x000048e8
000048c4	movl	%esi,%edx
000048c6	incl	%edx
000048c7	movl	0x000001bc(%ebx),%ecx
000048cd	movl	(%ecx),%eax
000048cf	subl	$0x10,%esp
000048d2	movl	%edx,0x08(%esp)
000048d6	movl	%edi,0x04(%esp)
000048da	movl	%ecx,(%esp)
000048dd	call	*0x00000350(%eax)
000048e3	addl	$0x10,%esp
000048e6	jmp	0x000048eb
000048e8	movb	AssetTreeViewSortFunc(KeyValues*, KeyValues*),(%edi)
000048eb	subl	$0x10,%esp
000048ee	leal	0x000001e4(%ebx),%ebx
000048f4	movl	%ebx,(%esp)
000048f7	calll	CUtlString::Get()
000048fc	addl	$0x10,%esp
000048ff	subl	$0x10,%esp
00004902	movl	%eax,0x04(%esp)
00004906	movl	%edi,(%esp)
00004909	calll	V_stricmp(char const*, char const*)
0000490e	addl	$0x10,%esp
00004911	testl	%eax,%eax
00004913	je	0x00004994
00004915	subl	$0x10,%esp
00004918	movl	%esi,0x04(%esp)
0000491c	movl	%ebx,(%esp)
0000491f	calll	CUtlString::SetLength(int)
00004924	addl	$0x10,%esp
00004927	subl	$0x10,%esp
0000492a	movl	%edi,0x04(%esp)
0000492e	movl	%ebx,(%esp)
00004931	calll	CUtlString::operator=(char const*)
00004936	addl	$0x10,%esp
00004939	subl	$0x10,%esp
0000493c	movl	0x08(%ebp),%eax
0000493f	movl	%eax,(%esp)
00004942	jmp	0x0000498c
00004944	movl	0x000001c8(%ebx),%ecx
0000494a	cmpl	%ecx,%eax
0000494c	jne	0x00004994
0000494e	subl	$0x10,%esp
00004951	movl	%ecx,(%esp)
00004954	calll	vgui::ComboBox::GetActiveItemUserData()
00004959	addl	$0x10,%esp
0000495c	testl	%eax,%eax
0000495e	je	0x00004994
00004960	subl	$0x10,%esp
00004963	leal	0xa7dbd-0x485e(%esi),%ecx
00004969	movl	%ecx,0x04(%esp)
0000496d	movl	%eax,(%esp)
00004970	movl	$0xffffffff,0x08(%esp)
00004978	calll	KeyValues::GetInt(char const*, int)
0000497d	addl	$0x10,%esp
00004980	movl	%eax,0x00000240(%ebx)
00004986	subl	$0x10,%esp
00004989	movl	%ebx,(%esp)
0000498c	calll	CBaseAssetPicker::RefreshAssetList()
00004991	addl	$0x10,%esp
00004994	movl	0xec(%ebp),%eax
00004997	movl	(%eax),%eax
00004999	cmpl	0xf0(%ebp),%eax
0000499c	jne	0x000049a6
0000499e	leal	0xf4(%ebp),%esp
000049a1	popl	%esi
000049a2	popl	%edi
000049a3	popl	%ebx
000049a4	popl	%ebp
000049a5	ret
000049a6	calll	___stack_chk_fail
000049ab	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::OnItemSelected(KeyValues*):
000049b0	pushl	%ebp
000049b1	movl	%esp,%ebp
000049b3	pushl	%ebx
000049b4	pushl	%edi
000049b5	pushl	%esi
000049b6	subl	$0x0000012c,%esp
000049bc	calll	0x000049c1
000049c1	popl	%ebx
000049c2	movl	0xb6aa5-0x49c1(%ebx),%eax
000049c8	movl	%eax,0xfffffee8(%ebp)
000049ce	movl	(%eax),%eax
000049d0	movl	%eax,0xf0(%ebp)
000049d3	leal	0xa7e39-0x49c1(%ebx),%eax
000049d9	movl	%eax,0x04(%esp)
000049dd	movl	0x0c(%ebp),%eax
000049e0	movl	%eax,(%esp)
000049e3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
000049eb	calll	KeyValues::GetPtr(char const*, void*)
000049f0	movl	0x08(%ebp),%edi
000049f3	movl	0x000001c0(%edi),%ecx
000049f9	cmpl	%ecx,%eax
000049fb	jne	0x00004b1e
00004a01	movl	(%ecx),%eax
00004a03	movl	%ecx,(%esp)
00004a06	call	*0x000003f4(%eax)
00004a0c	decl	%eax
00004a0d	movl	%eax,0x04(%esp)
00004a11	movl	%edi,(%esp)
00004a14	calll	CBaseAssetPicker::GetSelectedAsset(int)
00004a19	movl	%eax,%esi
00004a1b	movl	0x000001c0(%edi),%ecx
00004a21	movl	(%ecx),%eax
00004a23	movl	%ecx,(%esp)
00004a26	call	*0x000003f4(%eax)
00004a2c	movl	%eax,%ecx
00004a2e	xorl	%eax,%eax
00004a30	testl	%ecx,%ecx
00004a32	je	0x00004a7c
00004a34	movl	0x000001c0(%edi),%ecx
00004a3a	movl	(%ecx),%eax
00004a3c	movl	%ecx,(%esp)
00004a3f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00004a47	call	*0x000003f8(%eax)
00004a4d	movl	0x000001c0(%edi),%edx
00004a53	movl	(%edx),%ecx
00004a55	movl	%eax,0x04(%esp)
00004a59	movl	%edx,(%esp)
00004a5c	call	*0x0000039c(%ecx)
00004a62	leal	0xa7e07-0x49c1(%ebx),%ecx
00004a68	movl	%ecx,0x04(%esp)
00004a6c	movl	%eax,(%esp)
00004a6f	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00004a77	calll	KeyValues::GetInt(char const*, int)
00004a7c	shll	$0x05,%eax
00004a7f	movl	s_AssetCache-0x49c1(%ebx),%ecx
00004a85	leal	0x10(%ecx,%eax),%eax
00004a89	movl	%eax,(%esp)
00004a8c	calll	CUtlString::Get() const
00004a91	movl	0x00000224(%edi),%ecx
00004a97	movl	%esi,0x14(%esp)
00004a9b	movl	%ecx,0x10(%esp)
00004a9f	movl	%eax,0x0c(%esp)
00004aa3	leal	0xa7e3f-0x49c1(%ebx),%eax
00004aa9	movl	%eax,0x08(%esp)
00004aad	movl	%esi,0xfffffee4(%ebp)
00004ab3	leal	0xfffffeec(%ebp),%esi
00004ab9	movl	%esi,(%esp)
00004abc	movl	$0x00000104,0x04(%esp)
00004ac4	calll	V_snprintf(char*, int, char const*, ...)
00004ac9	movl	%esi,(%esp)
00004acc	movl	$0x0000002f,0x04(%esp)
00004ad4	calll	V_FixSlashes(char*, char)
00004ad9	movl	0x000001c4(%edi),%ecx
00004adf	movl	(%ecx),%eax
00004ae1	movl	%esi,0x04(%esp)
00004ae5	movl	%ecx,(%esp)
00004ae8	call	*0x0000034c(%eax)
00004aee	movl	0xb6ab9-0x49c1(%ebx),%eax
00004af4	movl	(%eax),%ecx
00004af6	movl	(%ecx),%eax
00004af8	movl	%ecx,(%esp)
00004afb	movl	$0x00000005,0x04(%esp)
00004b03	call	*0x000000cc(%eax)
00004b09	movl	(%edi),%eax
00004b0b	movl	0xfffffee4(%ebp),%ecx
00004b11	movl	%ecx,0x04(%esp)
00004b15	movl	%edi,(%esp)
00004b18	call	*0x000003b0(%eax)
00004b1e	movl	0xfffffee8(%ebp),%eax
00004b24	movl	(%eax),%eax
00004b26	cmpl	0xf0(%ebp),%eax
00004b29	jne	0x00004b36
00004b2b	addl	$0x0000012c,%esp
00004b31	popl	%esi
00004b32	popl	%edi
00004b33	popl	%ebx
00004b34	popl	%ebp
00004b35	ret
00004b36	calll	___stack_chk_fail
00004b3b	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::GetSelectedAssetCount():
00004b40	pushl	%ebp
00004b41	movl	%esp,%ebp
00004b43	subl	$0x08,%esp
00004b46	movl	0x08(%ebp),%eax
00004b49	movl	0x000001c0(%eax),%ecx
00004b4f	movl	(%ecx),%eax
00004b51	movl	%ecx,(%esp)
00004b54	call	*0x000003f4(%eax)
00004b5a	addl	$0x08,%esp
00004b5d	popl	%ebp
00004b5e	ret
00004b5f	nop
CBaseAssetPicker::GetSelectedAsset(int):
00004b60	pushl	%ebp
00004b61	movl	%esp,%ebp
00004b63	pushl	%edi
00004b64	pushl	%esi
00004b65	subl	$0x10,%esp
00004b68	calll	0x00004b6d
00004b6d	popl	%esi
00004b6e	movl	0x08(%ebp),%edi
00004b71	movl	0x000001c0(%edi),%ecx
00004b77	movl	(%ecx),%eax
00004b79	movl	%ecx,(%esp)
00004b7c	call	*0x000003f4(%eax)
00004b82	leal	0xff(%eax),%ecx
00004b85	movl	0x0c(%ebp),%edx
00004b88	testl	%edx,%edx
00004b8a	cmovnsl	%edx,%ecx
00004b8d	cmpl	%ecx,%eax
00004b8f	jle	0x00004bdd
00004b91	testl	%ecx,%ecx
00004b93	js	0x00004bdd
00004b95	movl	0x000001c0(%edi),%edx
00004b9b	movl	(%edx),%eax
00004b9d	movl	%ecx,0x04(%esp)
00004ba1	movl	%edx,(%esp)
00004ba4	call	*0x000003f8(%eax)
00004baa	movl	0x000001c0(%edi),%edx
00004bb0	movl	(%edx),%ecx
00004bb2	movl	%eax,0x04(%esp)
00004bb6	movl	%edx,(%esp)
00004bb9	call	*0x0000039c(%ecx)
00004bbf	leal	0xa7d02-0x4b6d(%esi),%ecx
00004bc5	movl	%ecx,0x08(%esp)
00004bc9	leal	0xa7dc5-0x4b6d(%esi),%ecx
00004bcf	movl	%ecx,0x04(%esp)
00004bd3	movl	%eax,(%esp)
00004bd6	calll	KeyValues::GetString(char const*, char const*)
00004bdb	jmp	0x00004bdf
00004bdd	xorl	%eax,%eax
00004bdf	addl	$0x10,%esp
00004be2	popl	%esi
00004be3	popl	%edi
00004be4	popl	%ebp
00004be5	ret
00004be6	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPicker::GetSelectedAssetModIndex():
00004bf0	pushl	%ebp
00004bf1	movl	%esp,%ebp
00004bf3	pushl	%edi
00004bf4	pushl	%esi
00004bf5	subl	$0x10,%esp
00004bf8	calll	0x00004bfd
00004bfd	popl	%esi
00004bfe	movl	0x08(%ebp),%edi
00004c01	movl	0x000001c0(%edi),%ecx
00004c07	movl	(%ecx),%eax
00004c09	movl	%ecx,(%esp)
00004c0c	call	*0x000003f4(%eax)
00004c12	testl	%eax,%eax
00004c14	je	0x00004c60
00004c16	movl	0x000001c0(%edi),%ecx
00004c1c	movl	(%ecx),%eax
00004c1e	movl	%ecx,(%esp)
00004c21	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x04(%esp)
00004c29	call	*0x000003f8(%eax)
00004c2f	movl	0x000001c0(%edi),%edx
00004c35	movl	(%edx),%ecx
00004c37	movl	%eax,0x04(%esp)
00004c3b	movl	%edx,(%esp)
00004c3e	call	*0x0000039c(%ecx)
00004c44	leal	0xa7e07-0x4bfd(%esi),%ecx
00004c4a	movl	%ecx,0x04(%esp)
00004c4e	movl	%eax,(%esp)
00004c51	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00004c59	calll	KeyValues::GetInt(char const*, int)
00004c5e	jmp	0x00004c62
00004c60	xorl	%eax,%eax
00004c62	addl	$0x10,%esp
00004c65	popl	%esi
00004c66	popl	%edi
00004c67	popl	%ebp
00004c68	ret
00004c69	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPicker::OnCheckButtonChecked(KeyValues*):
00004c70	pushl	%ebp
00004c71	movl	%esp,%ebp
00004c73	pushl	%esi
00004c74	subl	$0x14,%esp
00004c77	calll	0x00004c7c
00004c7c	popl	%eax
00004c7d	leal	0xa7e39-0x4c7c(%eax),%eax
00004c83	movl	%eax,0x04(%esp)
00004c87	movl	0x0c(%ebp),%eax
00004c8a	movl	%eax,(%esp)
00004c8d	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x08(%esp)
00004c95	calll	KeyValues::GetPtr(char const*, void*)
00004c9a	movl	0x08(%ebp),%esi
00004c9d	movl	0x000001b8(%esi),%ecx
00004ca3	cmpl	%ecx,%eax
00004ca5	je	0x00004cad
00004ca7	addl	$0x14,%esp
00004caa	popl	%esi
00004cab	popl	%ebp
00004cac	ret
00004cad	movl	(%ecx),%eax
00004caf	movl	%ecx,(%esp)
00004cb2	call	*0x000003f4(%eax)
00004cb8	movb	%al,0x00000248(%esi)
00004cbe	addl	$0x14,%esp
00004cc1	popl	%esi
00004cc2	popl	%ebp
00004cc3	jmp	CBaseAssetPicker::RefreshAssetList()
00004cc8	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*):
00004cd0	pushl	%ebp
00004cd1	movl	%esp,%ebp
00004cd3	pushl	%ebx
00004cd4	pushl	%edi
00004cd5	pushl	%esi
00004cd6	subl	$0x2c,%esp
00004cd9	calll	0x00004cde
00004cde	popl	%ebx
00004cdf	leal	0xa7e48-0x4cde(%ebx),%eax
00004ce5	movl	%eax,0x0c(%esp)
00004ce9	movl	0x0c(%ebp),%eax
00004cec	movl	%eax,0x08(%esp)
00004cf0	leal	VTT for CBaseAssetPickerFrame-0x4cde+0x00000004(%ebx),%eax
00004cf6	movl	%eax,0xf0(%ebp)
00004cf9	movl	%eax,0x04(%esp)
00004cfd	movl	0x08(%ebp),%esi
00004d00	movl	%esi,(%esp)
00004d03	movl	$0x00000001,0x14(%esp)
00004d0b	movl	$0x00000001,0x10(%esp)
00004d13	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00004d18	leal	vtable for CBaseAssetPickerFrame-0x4cde+0x0000000c(%ebx),%eax
00004d1e	movl	%eax,(%esi)
00004d20	testb	$0x01,CBaseAssetPickerFrame::ChainToMap()::chained-0x4cde(%ebx)
00004d27	jne	0x00004d5e
00004d29	movb	$0x01,CBaseAssetPickerFrame::ChainToMap()::chained-0x4cde(%ebx)
00004d30	leal	0xa7f60-0x4cde(%ebx),%eax
00004d36	movl	%eax,(%esp)
00004d39	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004d3e	movl	%eax,%esi
00004d40	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4cde(%ebx),%eax
00004d46	movl	%eax,0x1c(%esi)
00004d49	testl	%esi,%esi
00004d4b	je	0x00004d5e
00004d4d	leal	0xa7fb3-0x4cde(%ebx),%eax
00004d53	movl	%eax,(%esp)
00004d56	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004d5b	movl	%eax,0x18(%esi)
00004d5e	testb	$0x01,CBaseAssetPickerFrame::ChainToAnimationMap()::chained-0x4cde(%ebx)
00004d65	jne	0x00004d9c
00004d67	movb	$0x01,CBaseAssetPickerFrame::ChainToAnimationMap()::chained-0x4cde(%ebx)
00004d6e	leal	0xa7f60-0x4cde(%ebx),%eax
00004d74	movl	%eax,(%esp)
00004d77	calll	FindOrAddPanelAnimationMap(char const*)
00004d7c	movl	%eax,%esi
00004d7e	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4cde(%ebx),%eax
00004d84	movl	%eax,0x18(%esi)
00004d87	testl	%esi,%esi
00004d89	je	0x00004d9c
00004d8b	leal	0xa7fb3-0x4cde(%ebx),%eax
00004d91	movl	%eax,(%esp)
00004d94	calll	FindOrAddPanelAnimationMap(char const*)
00004d99	movl	%eax,0x14(%esi)
00004d9c	testb	$0x01,CBaseAssetPickerFrame::KB_ChainToMap()::chained-0x4cde(%ebx)
00004da3	jne	0x00004dda
00004da5	movb	$0x01,CBaseAssetPickerFrame::KB_ChainToMap()::chained-0x4cde(%ebx)
00004dac	leal	0xa7f60-0x4cde(%ebx),%eax
00004db2	movl	%eax,(%esp)
00004db5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004dba	movl	%eax,%esi
00004dbc	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4cde(%ebx),%eax
00004dc2	movl	%eax,0x44(%esi)
00004dc5	testl	%esi,%esi
00004dc7	je	0x00004dda
00004dc9	leal	0xa7fb3-0x4cde(%ebx),%eax
00004dcf	movl	%eax,(%esp)
00004dd2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004dd7	movl	%eax,0x18(%esi)
00004dda	movl	0x08(%ebp),%ecx
00004ddd	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%ecx)
00004de7	movl	(%ecx),%eax
00004de9	movl	0x000003c4(%eax),%eax
00004def	movl	%ecx,(%esp)
00004df2	movl	$0x00000001,0x04(%esp)
00004dfa	call	*%eax
00004dfc	movl	$0x00000224,(%esp)
00004e03	calll	operator new(unsigned long)
00004e08	movl	%eax,%edi
00004e0a	leal	0xa7e79-0x4cde(%ebx),%eax
00004e10	movl	%eax,0x14(%esp)
00004e14	movl	0x08(%ebp),%esi
00004e17	movl	%esi,0x10(%esp)
00004e1b	leal	0xa7e64-0x4cde(%ebx),%eax
00004e21	movl	%eax,0x0c(%esp)
00004e25	leal	0xa7e59-0x4cde(%ebx),%eax
00004e2b	movl	%eax,0x08(%esp)
00004e2f	movl	%esi,0x04(%esp)
00004e33	movl	%edi,(%esp)
00004e36	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00004e3b	movl	%edi,0x00000244(%esi)
00004e41	movl	$0x00000224,(%esp)
00004e48	calll	operator new(unsigned long)
00004e4d	movl	%eax,%edi
00004e4f	leal	0xa7ea2-0x4cde(%ebx),%eax
00004e55	movl	%eax,0x14(%esp)
00004e59	movl	0x08(%ebp),%esi
00004e5c	movl	%esi,0x10(%esp)
00004e60	leal	0xa7e8b-0x4cde(%ebx),%eax
00004e66	movl	%eax,0x0c(%esp)
00004e6a	leal	0xa7e7e-0x4cde(%ebx),%eax
00004e70	movl	%eax,0x08(%esp)
00004e74	movl	%esi,0x04(%esp)
00004e78	movl	%edi,(%esp)
00004e7b	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00004e80	movl	%edi,0x00000248(%esi)
00004e86	movl	(%esi),%eax
00004e88	movl	0x00000250(%eax),%eax
00004e8e	movl	%esi,(%esp)
00004e91	movl	$0x00000001,0x04(%esp)
00004e99	call	*%eax
00004e9b	addl	$0x2c,%esp
00004e9e	popl	%esi
00004e9f	popl	%edi
00004ea0	popl	%ebx
00004ea1	popl	%ebp
00004ea2	ret
00004ea3	movl	%eax,%esi
00004ea5	jmp	0x00004eb3
00004ea7	jmp	0x00004ea9
00004ea9	movl	%eax,%esi
00004eab	movl	%edi,(%esp)
00004eae	calll	operator delete(void*)
00004eb3	movl	0xf0(%ebp),%eax
00004eb6	movl	%eax,0x04(%esp)
00004eba	movl	0x08(%ebp),%eax
00004ebd	movl	%eax,(%esp)
00004ec0	calll	vgui::Frame::~Frame()
00004ec5	movl	%esi,(%esp)
00004ec8	calll	__Unwind_Resume
00004ecd	calll	std::terminate()
00004ed2	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*):
00004ee0	pushl	%ebp
00004ee1	movl	%esp,%ebp
00004ee3	pushl	%ebx
00004ee4	pushl	%edi
00004ee5	pushl	%esi
00004ee6	subl	$0x2c,%esp
00004ee9	calll	0x00004eee
00004eee	popl	%ebx
00004eef	leal	0xa7e48-0x4eee(%ebx),%eax
00004ef5	movl	%eax,0x0c(%esp)
00004ef9	movl	0x10(%ebp),%eax
00004efc	movl	%eax,0x08(%esp)
00004f00	movl	0x0c(%ebp),%esi
00004f03	leal	0x04(%esi),%eax
00004f06	movl	%eax,0xf0(%ebp)
00004f09	movl	%eax,0x04(%esp)
00004f0d	movl	0x08(%ebp),%edi
00004f10	movl	%edi,(%esp)
00004f13	movl	$0x00000001,0x14(%esp)
00004f1b	movl	$0x00000001,0x10(%esp)
00004f23	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00004f28	movl	(%esi),%eax
00004f2a	movl	%eax,(%edi)
00004f2c	testb	$0x01,CBaseAssetPickerFrame::ChainToMap()::chained-0x4eee(%ebx)
00004f33	jne	0x00004f6a
00004f35	movb	$0x01,CBaseAssetPickerFrame::ChainToMap()::chained-0x4eee(%ebx)
00004f3c	leal	0xa7f60-0x4eee(%ebx),%eax
00004f42	movl	%eax,(%esp)
00004f45	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004f4a	movl	%eax,%esi
00004f4c	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4eee(%ebx),%eax
00004f52	movl	%eax,0x1c(%esi)
00004f55	testl	%esi,%esi
00004f57	je	0x00004f6a
00004f59	leal	0xa7fb3-0x4eee(%ebx),%eax
00004f5f	movl	%eax,(%esp)
00004f62	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004f67	movl	%eax,0x18(%esi)
00004f6a	testb	$0x01,CBaseAssetPickerFrame::ChainToAnimationMap()::chained-0x4eee(%ebx)
00004f71	jne	0x00004fa8
00004f73	movb	$0x01,CBaseAssetPickerFrame::ChainToAnimationMap()::chained-0x4eee(%ebx)
00004f7a	leal	0xa7f60-0x4eee(%ebx),%eax
00004f80	movl	%eax,(%esp)
00004f83	calll	FindOrAddPanelAnimationMap(char const*)
00004f88	movl	%eax,%esi
00004f8a	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4eee(%ebx),%eax
00004f90	movl	%eax,0x18(%esi)
00004f93	testl	%esi,%esi
00004f95	je	0x00004fa8
00004f97	leal	0xa7fb3-0x4eee(%ebx),%eax
00004f9d	movl	%eax,(%esp)
00004fa0	calll	FindOrAddPanelAnimationMap(char const*)
00004fa5	movl	%eax,0x14(%esi)
00004fa8	testb	$0x01,CBaseAssetPickerFrame::KB_ChainToMap()::chained-0x4eee(%ebx)
00004faf	jne	0x00004fe6
00004fb1	movb	$0x01,CBaseAssetPickerFrame::KB_ChainToMap()::chained-0x4eee(%ebx)
00004fb8	leal	0xa7f60-0x4eee(%ebx),%eax
00004fbe	movl	%eax,(%esp)
00004fc1	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004fc6	movl	%eax,%esi
00004fc8	leal	CBaseAssetPickerFrame::GetPanelClassName()-0x4eee(%ebx),%eax
00004fce	movl	%eax,0x44(%esi)
00004fd1	testl	%esi,%esi
00004fd3	je	0x00004fe6
00004fd5	leal	0xa7fb3-0x4eee(%ebx),%eax
00004fdb	movl	%eax,(%esp)
00004fde	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004fe3	movl	%eax,0x18(%esi)
00004fe6	movl	0x08(%ebp),%ecx
00004fe9	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%ecx)
00004ff3	movl	(%ecx),%eax
00004ff5	movl	0x000003c4(%eax),%eax
00004ffb	movl	%ecx,(%esp)
00004ffe	movl	$0x00000001,0x04(%esp)
00005006	call	*%eax
00005008	movl	$0x00000224,(%esp)
0000500f	calll	operator new(unsigned long)
00005014	movl	%eax,%edi
00005016	leal	0xa7e79-0x4eee(%ebx),%eax
0000501c	movl	%eax,0x14(%esp)
00005020	movl	0x08(%ebp),%esi
00005023	movl	%esi,0x10(%esp)
00005027	leal	0xa7e64-0x4eee(%ebx),%eax
0000502d	movl	%eax,0x0c(%esp)
00005031	leal	0xa7e59-0x4eee(%ebx),%eax
00005037	movl	%eax,0x08(%esp)
0000503b	movl	%esi,0x04(%esp)
0000503f	movl	%edi,(%esp)
00005042	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00005047	movl	%edi,0x00000244(%esi)
0000504d	movl	$0x00000224,(%esp)
00005054	calll	operator new(unsigned long)
00005059	movl	%eax,%edi
0000505b	leal	0xa7ea2-0x4eee(%ebx),%eax
00005061	movl	%eax,0x14(%esp)
00005065	movl	0x08(%ebp),%esi
00005068	movl	%esi,0x10(%esp)
0000506c	leal	0xa7e8b-0x4eee(%ebx),%eax
00005072	movl	%eax,0x0c(%esp)
00005076	leal	0xa7e7e-0x4eee(%ebx),%eax
0000507c	movl	%eax,0x08(%esp)
00005080	movl	%esi,0x04(%esp)
00005084	movl	%edi,(%esp)
00005087	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000508c	movl	%edi,0x00000248(%esi)
00005092	movl	(%esi),%eax
00005094	movl	0x00000250(%eax),%eax
0000509a	movl	%esi,(%esp)
0000509d	movl	$0x00000001,0x04(%esp)
000050a5	call	*%eax
000050a7	addl	$0x2c,%esp
000050aa	popl	%esi
000050ab	popl	%edi
000050ac	popl	%ebx
000050ad	popl	%ebp
000050ae	ret
000050af	movl	%eax,%esi
000050b1	jmp	0x000050bf
000050b3	jmp	0x000050b5
000050b5	movl	%eax,%esi
000050b7	movl	%edi,(%esp)
000050ba	calll	operator delete(void*)
000050bf	movl	0xf0(%ebp),%eax
000050c2	movl	%eax,0x04(%esp)
000050c6	movl	0x08(%ebp),%eax
000050c9	movl	%eax,(%esp)
000050cc	calll	vgui::Frame::~Frame()
000050d1	movl	%esi,(%esp)
000050d4	calll	__Unwind_Resume
000050d9	calll	std::terminate()
000050de	nop
CBaseAssetPickerFrame::~CBaseAssetPickerFrame():
000050e0	pushl	%ebp
000050e1	movl	%esp,%ebp
000050e3	pushl	%ebx
000050e4	pushl	%edi
000050e5	pushl	%esi
000050e6	subl	$0x0c,%esp
000050e9	calll	0x000050ee
000050ee	popl	%ebx
000050ef	leal	vtable for CBaseAssetPickerFrame-0x50ee+0x0000000c(%ebx),%eax
000050f5	movl	0x08(%ebp),%edi
000050f8	movl	%eax,(%edi)
000050fa	movl	0x0000024c(%edi),%eax
00005100	testl	%eax,%eax
00005102	je	0x00005116
00005104	movl	%eax,(%esp)
00005107	calll	KeyValues::deleteThis()
0000510c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%edi)
00005116	leal	VTT for CBaseAssetPickerFrame-0x50ee+0x00000004(%ebx),%eax
0000511c	movl	%eax,0x04(%esp)
00005120	movl	%edi,(%esp)
00005123	calll	vgui::Frame::~Frame()
00005128	addl	$0x0c,%esp
0000512b	popl	%esi
0000512c	popl	%edi
0000512d	popl	%ebx
0000512e	popl	%ebp
0000512f	jmp	operator delete(void*)
00005134	movl	%eax,%esi
00005136	leal	VTT for CBaseAssetPickerFrame-0x50ee+0x00000004(%ebx),%eax
0000513c	movl	%eax,0x04(%esp)
00005140	movl	%edi,(%esp)
00005143	calll	vgui::Frame::~Frame()
00005148	jmp	0x00005151
0000514a	calll	std::terminate()
0000514f	movl	%eax,%esi
00005151	movl	%edi,(%esp)
00005154	calll	operator delete(void*)
00005159	movl	%esi,(%esp)
0000515c	calll	__Unwind_Resume
00005161	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::~CBaseAssetPickerFrame():
00005170	pushl	%ebp
00005171	movl	%esp,%ebp
00005173	pushl	%ebx
00005174	pushl	%edi
00005175	pushl	%esi
00005176	subl	$0x0c,%esp
00005179	calll	0x0000517e
0000517e	popl	%ebx
0000517f	leal	vtable for CBaseAssetPickerFrame-0x517e+0x0000000c(%ebx),%eax
00005185	movl	0x08(%ebp),%edi
00005188	movl	%eax,(%edi)
0000518a	movl	0x0000024c(%edi),%eax
00005190	testl	%eax,%eax
00005192	je	0x000051a6
00005194	movl	%eax,(%esp)
00005197	calll	KeyValues::deleteThis()
0000519c	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%edi)
000051a6	leal	VTT for CBaseAssetPickerFrame-0x517e+0x00000004(%ebx),%eax
000051ac	movl	%eax,0x04(%esp)
000051b0	movl	%edi,(%esp)
000051b3	calll	vgui::Frame::~Frame()
000051b8	addl	$0x0c,%esp
000051bb	popl	%esi
000051bc	popl	%edi
000051bd	popl	%ebx
000051be	popl	%ebp
000051bf	ret
000051c0	movl	%eax,%esi
000051c2	leal	VTT for CBaseAssetPickerFrame-0x517e+0x00000004(%ebx),%eax
000051c8	movl	%eax,0x04(%esp)
000051cc	movl	%edi,(%esp)
000051cf	calll	vgui::Frame::~Frame()
000051d4	movl	%esi,(%esp)
000051d7	calll	__Unwind_Resume
000051dc	calll	std::terminate()
000051e1	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::~CBaseAssetPickerFrame():
000051f0	pushl	%ebp
000051f1	movl	%esp,%ebp
000051f3	pushl	%ebx
000051f4	pushl	%edi
000051f5	pushl	%esi
000051f6	subl	$0x0c,%esp
000051f9	movl	0x0c(%ebp),%edi
000051fc	movl	(%edi),%eax
000051fe	movl	0x08(%ebp),%ebx
00005201	movl	%eax,(%ebx)
00005203	movl	0x0000024c(%ebx),%eax
00005209	testl	%eax,%eax
0000520b	je	0x0000521f
0000520d	movl	%eax,(%esp)
00005210	calll	KeyValues::deleteThis()
00005215	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%ebx)
0000521f	addl	$0x04,%edi
00005222	movl	%edi,0x04(%esp)
00005226	movl	%ebx,(%esp)
00005229	calll	vgui::Frame::~Frame()
0000522e	addl	$0x0c,%esp
00005231	popl	%esi
00005232	popl	%edi
00005233	popl	%ebx
00005234	popl	%ebp
00005235	ret
00005236	movl	%eax,%esi
00005238	addl	$0x04,%edi
0000523b	movl	%edi,0x04(%esp)
0000523f	movl	%ebx,(%esp)
00005242	calll	vgui::Frame::~Frame()
00005247	movl	%esi,(%esp)
0000524a	calll	__Unwind_Resume
0000524f	calll	std::terminate()
00005254	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::CleanUpMessage():
00005260	pushl	%ebp
00005261	movl	%esp,%ebp
00005263	pushl	%esi
00005264	pushl	%eax
00005265	movl	0x08(%ebp),%esi
00005268	movl	0x0000024c(%esi),%eax
0000526e	testl	%eax,%eax
00005270	je	0x00005284
00005272	movl	%eax,(%esp)
00005275	calll	KeyValues::deleteThis()
0000527a	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%esi)
00005284	addl	$0x04,%esp
00005287	popl	%esi
00005288	popl	%ebp
00005289	ret
0000528a	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*):
00005290	pushl	%ebp
00005291	movl	%esp,%ebp
00005293	subl	$0x08,%esp
00005296	movl	0x0c(%ebp),%eax
00005299	movl	0x08(%ebp),%edx
0000529c	movl	%eax,0x00000240(%edx)
000052a2	movl	(%eax),%ecx
000052a4	movl	%edx,0x04(%esp)
000052a8	movl	%eax,(%esp)
000052ab	call	*0x000000b4(%ecx)
000052b1	addl	$0x08,%esp
000052b4	popl	%ebp
000052b5	ret
000052b6	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::SetInitialSelection(char const*):
000052c0	pushl	%ebp
000052c1	movl	%esp,%ebp
000052c3	subl	$0x08,%esp
000052c6	movl	0x08(%ebp),%eax
000052c9	movl	0x00000240(%eax),%eax
000052cf	movl	0x0c(%ebp),%ecx
000052d2	movl	%ecx,0x04(%esp)
000052d6	movl	%eax,(%esp)
000052d9	calll	CBaseAssetPicker::SetInitialSelection(char const*)
000052de	addl	$0x08,%esp
000052e1	popl	%ebp
000052e2	ret
000052e3	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::SetFilter(char const*):
000052f0	pushl	%ebp
000052f1	movl	%esp,%ebp
000052f3	pushl	%edi
000052f4	pushl	%esi
000052f5	subl	$0x10,%esp
000052f8	movl	0x08(%ebp),%eax
000052fb	movl	0x00000240(%eax),%edi
00005301	movl	0x0c(%ebp),%esi
00005304	movl	%esi,0x04(%esp)
00005308	leal	0x000001e4(%edi),%eax
0000530e	movl	%eax,(%esp)
00005311	calll	CUtlString::operator=(char const*)
00005316	movl	0x000001bc(%edi),%ecx
0000531c	movl	(%ecx),%eax
0000531e	movl	%esi,0x04(%esp)
00005322	movl	%ecx,(%esp)
00005325	call	*0x0000034c(%eax)
0000532b	addl	$0x10,%esp
0000532e	popl	%esi
0000532f	popl	%edi
00005330	popl	%ebp
00005331	ret
00005332	nopw	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::GetFilter():
00005340	pushl	%ebp
00005341	movl	%esp,%ebp
00005343	subl	$0x08,%esp
00005346	movl	0x08(%ebp),%eax
00005349	movl	0x00000240(%eax),%eax
0000534f	addl	$0x000001e4,%eax
00005354	movl	%eax,(%esp)
00005357	calll	CUtlString::operator char const*() const
0000535c	addl	$0x08,%esp
0000535f	popl	%ebp
00005360	ret
00005361	nopl	%cs:AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::DoModal(KeyValues*):
00005370	pushl	%ebp
00005371	movl	%esp,%ebp
00005373	pushl	%esi
00005374	pushl	%eax
00005375	movl	0x08(%ebp),%esi
00005378	movl	%esi,(%esp)
0000537b	calll	vgui::Frame::DoModal()
00005380	movl	0x0000024c(%esi),%eax
00005386	testl	%eax,%eax
00005388	je	0x0000539c
0000538a	movl	%eax,(%esp)
0000538d	calll	KeyValues::deleteThis()
00005392	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%esi)
0000539c	movl	0x0c(%ebp),%eax
0000539f	movl	%eax,0x0000024c(%esi)
000053a5	movl	0x00000240(%esi),%ecx
000053ab	movl	(%ecx),%eax
000053ad	movl	%ecx,(%esp)
000053b0	call	*0x000003ac(%eax)
000053b6	addl	$0x04,%esp
000053b9	popl	%esi
000053ba	popl	%ebp
000053bb	ret
000053bc	nopl	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax)
CBaseAssetPickerFrame::PostMessageAndClose(KeyValues*):
000053c0	pushl	%ebp
000053c1	movl	%esp,%ebp
000053c3	pushl	%esi
000053c4	subl	$0x14,%esp
000053c7	movl	0x08(%ebp),%esi
000053ca	movl	0x0000024c(%esi),%eax
000053d0	testl	%eax,%eax
000053d2	je	0x000053ed
000053d4	movl	0x0c(%ebp),%ecx
000053d7	movl	%eax,0x04(%esp)
000053db	movl	%ecx,(%esp)
000053de	calll	KeyValues::AddSubKey(KeyValues*)
000053e3	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%esi)
000053ed	movl	(%esi),%eax
000053ef	movl	%esi,(%esp)
000053f2	call	*0x000003c0(%eax)
000053f8	movl	(%esi),%eax
000053fa	movl	0x000000c0(%eax),%eax
00005400	addl	$0x14,%esp
00005403	popl	%esi
00005404	popl	%ebp
00005405	jmp	*%eax
00005407	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
CBaseAssetPickerFrame::OnCommand(char const*):
00005410	pushl	%ebp
00005411	movl	%esp,%ebp
00005413	pushl	%ebx
00005414	pushl	%edi
00005415	pushl	%esi
00005416	subl	$0x0000022c,%esp
0000541c	calll	0x00005421
00005421	popl	%ebx
00005422	movl	0xb6aa5-0x5421(%ebx),%eax
00005428	movl	%eax,0xfffffde0(%ebp)
0000542e	movl	(%eax),%eax
00005430	movl	%eax,0xf0(%ebp)
00005433	leal	0xa7e79-0x5421(%ebx),%eax
00005439	movl	%eax,0x04(%esp)
0000543d	movl	0x0c(%ebp),%esi
00005440	movl	%esi,(%esp)
00005443	calll	V_stricmp(char const*, char const*)
00005448	movl	0x08(%ebp),%edi
0000544b	testl	%eax,%eax
0000544d	jne	0x000055b9
00005453	movl	$0x00000020,(%esp)
0000545a	calll	KeyValues::operator new(unsigned long)
0000545f	movl	%eax,%esi
00005461	leal	0xa7ea9-0x5421(%ebx),%eax
00005467	movl	%eax,0x04(%esp)
0000546b	movl	%esi,(%esp)
0000546e	calll	KeyValues::KeyValues(char const*)
00005473	movl	0x00000240(%edi),%eax
00005479	movl	0x000001c0(%eax),%eax
0000547f	movl	%eax,(%esp)
00005482	calll	vgui::ListPanel::IsMultiselectEnabled() const
00005487	testb	%al,%al
00005489	jne	0x000054c2
0000548b	movl	0x00000240(%edi),%eax
00005491	movl	%eax,(%esp)
00005494	movl	$0xffffffff,0x04(%esp)
0000549c	calll	CBaseAssetPicker::GetSelectedAsset(int)
000054a1	movl	%eax,0x08(%esp)
000054a5	leal	0xa7dc5-0x5421(%ebx),%eax
000054ab	movl	%eax,0x04(%esp)
000054af	movl	%esi,(%esp)
000054b2	movl	%esi,0xfffffde4(%ebp)
000054b8	calll	KeyValues::SetString(char const*, char const*)
000054bd	jmp	0x00005572
000054c2	leal	0xa7eb7-0x5421(%ebx),%eax
000054c8	movl	%eax,0x04(%esp)
000054cc	movl	%esi,(%esp)
000054cf	movl	%esi,0xfffffde4(%ebp)
000054d5	movl	$0x00000001,0x08(%esp)
000054dd	calll	KeyValues::FindKey(char const*, bool)
000054e2	movl	%eax,0xfffffdec(%ebp)
000054e8	movl	0x00000240(%edi),%eax
000054ee	movl	0x000001c0(%eax),%ecx
000054f4	movl	(%ecx),%eax
000054f6	movl	%ecx,(%esp)
000054f9	call	*0x000003f4(%eax)
000054ff	testl	%eax,%eax
00005501	jle	0x00005572
00005503	xorl	%esi,%esi
00005505	leal	0xa7ebe-0x5421(%ebx),%ecx
0000550b	movl	%ecx,0xfffffde8(%ebp)
00005511	leal	0xfffffdf0(%ebp),%ebx
00005517	nopw	AssetTreeViewSortFunc(KeyValues*, KeyValues*)(%eax,%eax)
00005520	movl	%esi,0x0c(%esp)
00005524	movl	0xfffffde8(%ebp),%ecx
0000552a	movl	%ecx,0x08(%esp)
0000552e	movl	%ebx,(%esp)
00005531	movl	$0x00000200,0x04(%esp)
00005539	movl	%eax,%edi
0000553b	calll	V_snprintf(char*, int, char const*, ...)
00005540	movl	0x08(%ebp),%eax
00005543	movl	0x00000240(%eax),%eax
00005549	movl	%esi,0x04(%esp)
0000554d	movl	%eax,(%esp)
00005550	calll	CBaseAssetPicker::GetSelectedAsset(int)
00005555	movl	%eax,0x08(%esp)
00005559	movl	%ebx,0x04(%esp)
0000555d	movl	0xfffffdec(%ebp),%eax
00005563	movl	%eax,(%esp)
00005566	calll	KeyValues::SetString(char const*, char const*)
0000556b	movl	%edi,%eax
0000556d	incl	%esi
0000556e	cmpl	%esi,%eax
00005570	jne	0x00005520
00005572	movl	0x08(%ebp),%ecx
00005575	movl	0x0000024c(%ecx),%eax
0000557b	testl	%eax,%eax
0000557d	movl	%ecx,%edi
0000557f	movl	0xfffffde4(%ebp),%esi
00005585	je	0x0000559d
00005587	movl	%eax,0x04(%esp)
0000558b	movl	%esi,(%esp)
0000558e	calll	KeyValues::AddSubKey(KeyValues*)
00005593	movl	AssetTreeViewSortFunc(KeyValues*, KeyValues*),0x0000024c(%edi)
0000559d	movl	(%edi),%eax
0000559f	movl	%edi,(%esp)
000055a2	call	*0x000003c0(%eax)
000055a8	movl	(%edi),%eax
000055aa	movl	%esi,0x04(%esp)
000055ae	movl	%edi,(%esp)
000055b1	call	*0x000000c0(%eax)
000055b7	jmp	0x000055e8
000055b9	leal	0xa7ea2-0x5421(%ebx),%eax
000055bf	movl	%eax,0x04(%esp)
000055c3	movl	%esi,(%esp)
000055c6	calll	V_stricmp(char const*, char const*)
000055cb	testl	%eax,%eax
000055cd	jne	0x000055dc
000055cf	movl	(%edi),%eax
000055d1	movl	%edi,(%esp)
000055d4	call	*0x000003c0(%eax)
000055da	jmp	0x000055e8
000055dc	movl	%esi,0x04(%esp)
000055e0	movl	%edi,(%esp)
000055e3	calll	vgui::Frame::OnCommand(char const*)
000055e8	movl	0xfffffde0(%ebp),%eax
000055ee	movl	(%eax),%eax
000055f0	cmpl	0xf0(%ebp),%eax
000055f3	jne	0x00005612
000055f5	addl	$0x0000022c,%esp
000055fb	popl	%esi
000055fc	popl	%edi
000055fd	popl	%ebx
000055fe	popl	%ebp
000055ff	ret
00005600	movl	%eax,%edi
00005602	movl	%esi,(%esp)
00005605	calll	KeyValues::operator delete(void*)
0000560a	movl	%edi,(%esp)
0000560d	calll	__Unwind_Resume
00005612	calll	___stack_chk_fail
00005617	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(colorpickerpanel.o):
(__TEXT,__text) section
CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CColorXYPreview-0xe+0x00000004(%ebx),%eax
00000023	movl	%eax,0xf0(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
00000035	leal	vtable for CColorXYPreview-0xe+0x0000000c(%ebx),%eax
0000003b	movl	%eax,(%edi)
0000003d	leal	vtable for CColorXYPreview-0xe+0x000003d0(%ebx),%eax
00000043	movl	%eax,0x000001ac(%edi)
00000049	testb	$0x01,CColorXYPreview::ChainToMap()::chained-0xe(%ebx)
00000050	jne	0x00000087
00000052	movb	$0x01,CColorXYPreview::ChainToMap()::chained-0xe(%ebx)
00000059	leal	0x652db-0xe(%ebx),%eax
0000005f	movl	%eax,(%esp)
00000062	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000067	movl	%eax,%esi
00000069	leal	CColorXYPreview::GetPanelClassName()-0xe(%ebx),%eax
0000006f	movl	%eax,0x1c(%esi)
00000072	testl	%esi,%esi
00000074	je	0x00000087
00000076	leal	0x652c3-0xe(%ebx),%eax
0000007c	movl	%eax,(%esp)
0000007f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000084	movl	%eax,0x18(%esi)
00000087	testb	$0x01,CColorXYPreview::ChainToAnimationMap()::chained-0xe(%ebx)
0000008e	jne	0x000000c5
00000090	movb	$0x01,CColorXYPreview::ChainToAnimationMap()::chained-0xe(%ebx)
00000097	leal	0x652db-0xe(%ebx),%eax
0000009d	movl	%eax,(%esp)
000000a0	calll	FindOrAddPanelAnimationMap(char const*)
000000a5	movl	%eax,%esi
000000a7	leal	CColorXYPreview::GetPanelClassName()-0xe(%ebx),%eax
000000ad	movl	%eax,0x18(%esi)
000000b0	testl	%esi,%esi
000000b2	je	0x000000c5
000000b4	leal	0x652c3-0xe(%ebx),%eax
000000ba	movl	%eax,(%esp)
000000bd	calll	FindOrAddPanelAnimationMap(char const*)
000000c2	movl	%eax,0x14(%esi)
000000c5	testb	$0x01,CColorXYPreview::KB_ChainToMap()::chained-0xe(%ebx)
000000cc	jne	0x00000103
000000ce	movb	$0x01,CColorXYPreview::KB_ChainToMap()::chained-0xe(%ebx)
000000d5	leal	0x652db-0xe(%ebx),%eax
000000db	movl	%eax,(%esp)
000000de	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000e3	movl	%eax,%esi
000000e5	leal	CColorXYPreview::GetPanelClassName()-0xe(%ebx),%eax
000000eb	movl	%eax,0x44(%esi)
000000ee	testl	%esi,%esi
000000f0	je	0x00000103
000000f2	leal	0x652c3-0xe(%ebx),%eax
000000f8	movl	%eax,(%esp)
000000fb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000100	movl	%eax,0x18(%esi)
00000103	movl	(%edi),%eax
00000105	movl	0x000003b4(%eax),%eax
0000010b	movl	%edi,(%esp)
0000010e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00000116	movl	$0x00000100,0x08(%esp)
0000011e	movl	$0x00000100,0x04(%esp)
00000126	call	*%eax
00000128	movb	$0xff,0x000001fe(%edi)
0000012f	movb	$0xff,0x000001fd(%edi)
00000136	movb	$0xff,0x000001fc(%edi)
0000013d	cmpl	$0x01,0x000001f4(%edi)
00000144	jne	0x0000014f
00000146	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%edi)
0000014d	je	0x0000016b
0000014f	movl	$0x00000001,0x000001f4(%edi)
00000159	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%edi)
00000163	movl	%edi,(%esp)
00000166	calll	CProceduralTexturePanel::DownloadTexture()
0000016b	movl	(%edi),%eax
0000016d	movl	0x0000021c(%eax),%eax
00000173	movl	%edi,(%esp)
00000176	movl	$0x00000001,0x04(%esp)
0000017e	call	*%eax
00000180	movl	0x6bd1c-0xe(%ebx),%eax
00000186	movl	(%eax),%ecx
00000188	movl	(%ecx),%eax
0000018a	movl	0x000001c0(%eax),%eax
00000190	leal	0x65084-0xe(%ebx),%edx
00000196	movl	%edx,0x04(%esp)
0000019a	movl	%ecx,(%esp)
0000019d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
000001a5	call	*%eax
000001a7	movl	%eax,0x0000020c(%edi)
000001ad	movl	(%edi),%ecx
000001af	movl	0x000000fc(%ecx),%ecx
000001b5	movl	%eax,0x04(%esp)
000001b9	movl	%edi,(%esp)
000001bc	call	*%ecx
000001be	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x00000210(%edi)
000001c5	addl	$0x1c,%esp
000001c8	popl	%esi
000001c9	popl	%edi
000001ca	popl	%ebx
000001cb	popl	%ebp
000001cc	ret
000001cd	movl	%eax,%esi
000001cf	movl	0xf0(%ebp),%eax
000001d2	movl	%eax,0x04(%esp)
000001d6	movl	%edi,(%esp)
000001d9	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
000001de	movl	%esi,(%esp)
000001e1	calll	__Unwind_Resume
000001e6	calll	std::terminate()
000001eb	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::SetMode(ColorType_t, ColorChannel_t):
000001f0	movl	0x0c(%esp),%eax
000001f4	movl	0x08(%esp),%ecx
000001f8	movl	0x04(%esp),%edx
000001fc	cmpl	%ecx,0x000001f4(%edx)
00000202	jne	0x0000020d
00000204	cmpl	%eax,0x000001f8(%edx)
0000020a	jne	0x0000020d
0000020c	ret
0000020d	movl	%ecx,0x000001f4(%edx)
00000213	movl	%eax,0x000001f8(%edx)
00000219	jmp	CProceduralTexturePanel::DownloadTexture()
0000021e	nop
CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*):
00000220	pushl	%ebp
00000221	movl	%esp,%ebp
00000223	pushl	%ebx
00000224	pushl	%edi
00000225	pushl	%esi
00000226	subl	$0x1c,%esp
00000229	calll	0x0000022e
0000022e	popl	%ebx
0000022f	movl	0x14(%ebp),%eax
00000232	movl	%eax,0x0c(%esp)
00000236	movl	0x10(%ebp),%eax
00000239	movl	%eax,0x08(%esp)
0000023d	movl	0x0c(%ebp),%esi
00000240	leal	0x04(%esi),%eax
00000243	movl	%eax,0xf0(%ebp)
00000246	movl	%eax,0x04(%esp)
0000024a	movl	0x08(%ebp),%edi
0000024d	movl	%edi,(%esp)
00000250	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
00000255	movl	(%esi),%eax
00000257	movl	%eax,(%edi)
00000259	leal	vtable for CColorXYPreview-0x22e+0x000003d0(%ebx),%eax
0000025f	movl	%eax,0x000001ac(%edi)
00000265	testb	$0x01,CColorXYPreview::ChainToMap()::chained-0x22e(%ebx)
0000026c	jne	0x000002a3
0000026e	movb	$0x01,CColorXYPreview::ChainToMap()::chained-0x22e(%ebx)
00000275	leal	0x652db-0x22e(%ebx),%eax
0000027b	movl	%eax,(%esp)
0000027e	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000283	movl	%eax,%esi
00000285	leal	CColorXYPreview::GetPanelClassName()-0x22e(%ebx),%eax
0000028b	movl	%eax,0x1c(%esi)
0000028e	testl	%esi,%esi
00000290	je	0x000002a3
00000292	leal	0x652c3-0x22e(%ebx),%eax
00000298	movl	%eax,(%esp)
0000029b	calll	vgui::FindOrAddPanelMessageMap(char const*)
000002a0	movl	%eax,0x18(%esi)
000002a3	testb	$0x01,CColorXYPreview::ChainToAnimationMap()::chained-0x22e(%ebx)
000002aa	jne	0x000002e1
000002ac	movb	$0x01,CColorXYPreview::ChainToAnimationMap()::chained-0x22e(%ebx)
000002b3	leal	0x652db-0x22e(%ebx),%eax
000002b9	movl	%eax,(%esp)
000002bc	calll	FindOrAddPanelAnimationMap(char const*)
000002c1	movl	%eax,%esi
000002c3	leal	CColorXYPreview::GetPanelClassName()-0x22e(%ebx),%eax
000002c9	movl	%eax,0x18(%esi)
000002cc	testl	%esi,%esi
000002ce	je	0x000002e1
000002d0	leal	0x652c3-0x22e(%ebx),%eax
000002d6	movl	%eax,(%esp)
000002d9	calll	FindOrAddPanelAnimationMap(char const*)
000002de	movl	%eax,0x14(%esi)
000002e1	testb	$0x01,CColorXYPreview::KB_ChainToMap()::chained-0x22e(%ebx)
000002e8	jne	0x0000031f
000002ea	movb	$0x01,CColorXYPreview::KB_ChainToMap()::chained-0x22e(%ebx)
000002f1	leal	0x652db-0x22e(%ebx),%eax
000002f7	movl	%eax,(%esp)
000002fa	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000002ff	movl	%eax,%esi
00000301	leal	CColorXYPreview::GetPanelClassName()-0x22e(%ebx),%eax
00000307	movl	%eax,0x44(%esi)
0000030a	testl	%esi,%esi
0000030c	je	0x0000031f
0000030e	leal	0x652c3-0x22e(%ebx),%eax
00000314	movl	%eax,(%esp)
00000317	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000031c	movl	%eax,0x18(%esi)
0000031f	movl	(%edi),%eax
00000321	movl	0x000003b4(%eax),%eax
00000327	movl	%edi,(%esp)
0000032a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00000332	movl	$0x00000100,0x08(%esp)
0000033a	movl	$0x00000100,0x04(%esp)
00000342	call	*%eax
00000344	movb	$0xff,0x000001fe(%edi)
0000034b	movb	$0xff,0x000001fd(%edi)
00000352	movb	$0xff,0x000001fc(%edi)
00000359	cmpl	$0x01,0x000001f4(%edi)
00000360	jne	0x0000036b
00000362	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%edi)
00000369	je	0x00000387
0000036b	movl	$0x00000001,0x000001f4(%edi)
00000375	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%edi)
0000037f	movl	%edi,(%esp)
00000382	calll	CProceduralTexturePanel::DownloadTexture()
00000387	movl	(%edi),%eax
00000389	movl	0x0000021c(%eax),%eax
0000038f	movl	%edi,(%esp)
00000392	movl	$0x00000001,0x04(%esp)
0000039a	call	*%eax
0000039c	movl	0x6bd1c-0x22e(%ebx),%eax
000003a2	movl	(%eax),%ecx
000003a4	movl	(%ecx),%eax
000003a6	movl	0x000001c0(%eax),%eax
000003ac	leal	0x65084-0x22e(%ebx),%edx
000003b2	movl	%edx,0x04(%esp)
000003b6	movl	%ecx,(%esp)
000003b9	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
000003c1	call	*%eax
000003c3	movl	%eax,0x0000020c(%edi)
000003c9	movl	(%edi),%ecx
000003cb	movl	0x000000fc(%ecx),%ecx
000003d1	movl	%eax,0x04(%esp)
000003d5	movl	%edi,(%esp)
000003d8	call	*%ecx
000003da	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x00000210(%edi)
000003e1	addl	$0x1c,%esp
000003e4	popl	%esi
000003e5	popl	%edi
000003e6	popl	%ebx
000003e7	popl	%ebp
000003e8	ret
000003e9	movl	%eax,%esi
000003eb	movl	0xf0(%ebp),%eax
000003ee	movl	%eax,0x04(%esp)
000003f2	movl	%edi,(%esp)
000003f5	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
000003fa	movl	%esi,(%esp)
000003fd	calll	__Unwind_Resume
00000402	calll	std::terminate()
00000407	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::SetColor(RGB888_t const&, Vector const&):
00000410	pushl	%ebx
00000411	pushl	%esi
00000412	movl	0x0c(%esp),%eax
00000416	movl	0x10(%esp),%edx
0000041a	movb	(%edx),%bl
0000041c	movl	0x14(%esp),%ecx
00000420	cmpb	0x000001fc(%eax),%bl
00000426	jne	0x0000046d
00000428	movb	0x01(%edx),%bl
0000042b	cmpb	0x000001fd(%eax),%bl
00000431	jne	0x0000046d
00000433	movb	0x02(%edx),%bl
00000436	cmpb	0x000001fe(%eax),%bl
0000043c	jne	0x0000046d
0000043e	movss	(%ecx),%xmm0
00000442	ucomiss	0x00000200(%eax),%xmm0
00000449	jne	0x0000046d
0000044b	jp	0x0000046d
0000044d	movss	0x04(%ecx),%xmm0
00000452	ucomiss	0x00000204(%eax),%xmm0
00000459	jne	0x0000046d
0000045b	jp	0x0000046d
0000045d	movss	0x08(%ecx),%xmm0
00000462	ucomiss	0x00000208(%eax),%xmm0
00000469	jne	0x0000046d
0000046b	jnp	0x000004ac
0000046d	leal	0x000001fc(%eax),%esi
00000473	movb	0x02(%edx),%bl
00000476	movb	%bl,0x02(%esi)
00000479	movw	(%edx),%dx
0000047c	movw	%dx,(%esi)
0000047f	movss	(%ecx),%xmm0
00000483	movss	%xmm0,0x00000200(%eax)
0000048b	movss	0x04(%ecx),%xmm0
00000490	movss	%xmm0,0x00000204(%eax)
00000498	movss	0x08(%ecx),%xmm0
0000049d	movss	%xmm0,0x00000208(%eax)
000004a5	popl	%esi
000004a6	popl	%ebx
000004a7	jmp	CProceduralTexturePanel::DownloadTexture()
000004ac	popl	%esi
000004ad	popl	%ebx
000004ae	ret
000004af	nop
CColorXYPreview::ComputeColorForPoint(int, int, RGB888_t&):
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%ebx
000004b4	pushl	%edi
000004b5	pushl	%esi
000004b6	subl	$0x0c,%esp
000004b9	calll	0x000004be
000004be	popl	%esi
000004bf	movl	0x08(%ebp),%ebx
000004c2	movb	0x000001fe(%ebx),%al
000004c8	movl	0x14(%ebp),%edx
000004cb	movb	%al,0x02(%edx)
000004ce	movw	0x000001fc(%ebx),%ax
000004d5	movw	%ax,(%edx)
000004d8	movl	0x000001f8(%ebx),%eax
000004de	movl	CColorXYPreview::s_pRGBRemapX-0x4be(%esi,%eax,4),%eax
000004e5	movb	0x0c(%ebp),%cl
000004e8	movb	%cl,(%edx,%eax)
000004eb	movl	%ebx,(%esp)
000004ee	movl	$0x000000ff,%edi
000004f3	subl	0x10(%ebp),%edi
000004f6	calll	CProceduralTexturePanel::GetImageHeight() const
000004fb	addl	%edi,%eax
000004fd	movl	0x000001f8(%ebx),%ecx
00000503	movl	CColorXYPreview::s_pRGBRemapY-0x4be(%esi,%ecx,4),%ecx
0000050a	movl	0x14(%ebp),%edx
0000050d	movb	%al,(%edx,%ecx)
00000510	addl	$0x0c,%esp
00000513	popl	%esi
00000514	popl	%edi
00000515	popl	%ebx
00000516	popl	%ebp
00000517	ret
00000518	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::ComputeHSVColorForPoint(int, int, Vector&):
00000520	pushl	%ebp
00000521	movl	%esp,%ebp
00000523	pushl	%ebx
00000524	pushl	%edi
00000525	pushl	%esi
00000526	subl	$0x0c,%esp
00000529	calll	0x0000052e
0000052e	popl	%edi
0000052f	movl	0x08(%ebp),%ecx
00000532	movss	0x00000200(%ecx),%xmm0
0000053a	movl	0x14(%ebp),%esi
0000053d	movss	%xmm0,(%esi)
00000541	movss	0x00000204(%ecx),%xmm0
00000549	movss	%xmm0,0x04(%esi)
0000054e	movss	0x00000208(%ecx),%xmm0
00000556	movss	%xmm0,0x08(%esi)
0000055b	cvtsi2ss	0x0c(%ebp),%xmm0
00000560	divss	0x5f650-0x52e(%edi),%xmm0
00000568	movl	0x000001f8(%ecx),%eax
0000056e	movl	CColorXYPreview::s_pHSVRemapX-0x52e(%edi,%eax,4),%eax
00000575	movss	%xmm0,(%esi,%eax,4)
0000057a	movl	%ecx,(%esp)
0000057d	movl	0x10(%ebp),%ebx
00000580	notl	%ebx
00000582	calll	CProceduralTexturePanel::GetImageHeight() const
00000587	movl	0x08(%ebp),%ecx
0000058a	addl	%ebx,%eax
0000058c	cvtsi2ss	%eax,%xmm0
00000590	divss	0x5f650-0x52e(%edi),%xmm0
00000598	movl	0x000001f8(%ecx),%eax
0000059e	movl	CColorXYPreview::s_pHSVRemapY-0x52e(%edi,%eax,4),%eax
000005a5	movss	%xmm0,(%esi,%eax,4)
000005aa	movl	%esi,%eax
000005ac	pxor	%xmm0,%xmm0
000005b0	ucomiss	0x04(%eax),%xmm0
000005b4	jne	0x000005be
000005b6	jp	0x000005be
000005b8	movl	$0xbf800000,(%eax)
000005be	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ecx)
000005c5	je	0x000005e2
000005c7	movss	(%eax),%xmm0
000005cb	ucomiss	0x5f654-0x52e(%edi),%xmm0
000005d2	jne	0x000005d6
000005d4	jnp	0x000005e2
000005d6	mulss	0x5f658-0x52e(%edi),%xmm0
000005de	movss	%xmm0,(%eax)
000005e2	addl	$0x0c,%esp
000005e5	popl	%esi
000005e6	popl	%edi
000005e7	popl	%ebx
000005e8	popl	%ebp
000005e9	ret
000005ea	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*):
000005f0	pushl	%ebp
000005f1	movl	%esp,%ebp
000005f3	pushl	%ebx
000005f4	pushl	%edi
000005f5	pushl	%esi
000005f6	subl	$0x000000ac,%esp
000005fc	calll	0x00000601
00000601	popl	%edi
00000602	movl	%edi,0xb0(%ebp)
00000605	movl	0x10(%ebp),%esi
00000608	movl	(%esi),%eax
0000060a	leal	0xdc(%ebp),%ecx
0000060d	movl	%ecx,0x10(%esp)
00000611	leal	0xe0(%ebp),%ecx
00000614	movl	%ecx,0x0c(%esp)
00000618	leal	0xe4(%ebp),%ecx
0000061b	movl	%ecx,0x08(%esp)
0000061f	movl	%esi,(%esp)
00000622	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000062a	call	*0x00000084(%eax)
00000630	movl	(%esi),%eax
00000632	movl	%esi,(%esp)
00000635	call	*0x54(%eax)
00000638	movl	%eax,%ebx
0000063a	movl	(%esi),%eax
0000063c	movl	%esi,(%esp)
0000063f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00000647	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
0000064f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00000657	call	*0x0000009c(%eax)
0000065d	movl	%eax,0xffffff6c(%ebp)
00000663	movl	(%esi),%eax
00000665	movl	%esi,(%esp)
00000668	movl	%edi,%esi
0000066a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00000672	call	*0x4c(%eax)
00000675	movl	%ebx,%ecx
00000677	movzwl	%ax,%edx
0000067a	movl	0x08(%ebp),%edi
0000067d	cmpl	$0x1d,%ecx
00000680	ja	0x000008e1
00000686	movl	0x0000076f(%esi,%ecx,4),%eax
0000068d	addl	%esi,%eax
0000068f	jmp	*%eax
00000691	orl	$0x01040000,%edx
00000697	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
0000069e	movl	$0xffffffff,0x80(%ebp)
000006a5	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb4(%ebp)
000006ac	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x9c(%ebp)
000006b3	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x98(%ebp)
000006ba	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa0(%ebp)
000006c1	jmp	0x00000938
000006c6	orl	$0x01100000,%edx
000006cc	movl	$0xffffffff,0x80(%ebp)
000006d3	movl	$0x00600040,0xb4(%ebp)
000006da	movl	$0x00200000,0xb8(%ebp)
000006e1	movl	$0xffffffff,0x9c(%ebp)
000006e8	movl	$0xffffffff,0x98(%ebp)
000006ef	movl	$0xffffffff,0xa0(%ebp)
000006f6	jmp	0x00000938
000006fb	orl	$0x03080000,%edx
00000701	movl	$0x0000ffff,0x80(%ebp)
00000708	movl	$0x00300020,0xb4(%ebp)
0000070f	movl	$0x00100000,0xb8(%ebp)
00000716	movl	$0x0000ffff,0x9c(%ebp)
0000071d	movl	$0x0000ffff,0x98(%ebp)
00000724	movl	$0x0000ffff,0xa0(%ebp)
0000072b	jmp	0x00000938
00000730	orl	$0x00040000,%edx
00000736	movl	$0x000000ff,0x80(%ebp)
0000073d	movl	$0x00180010,0xb4(%ebp)
00000744	movl	$0x00080000,0xb8(%ebp)
0000074b	movl	$0x000000ff,0x9c(%ebp)
00000752	movl	$0x000000ff,0x98(%ebp)
00000759	movl	$0x000000ff,0xa0(%ebp)
00000760	jmp	0x00000938
00000765	orl	$0x00040000,%edx
0000076b	movl	$0x000000ff,0x80(%ebp)
00000772	movl	$0x00180000,0xb4(%ebp)
00000779	movl	$0x00080010,0xb8(%ebp)
00000780	jmp	0x0000074b
00000782	orl	$0x00040000,%edx
00000788	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa0(%ebp)
0000078f	movl	$0x000000ff,0x80(%ebp)
00000796	movl	$0x00180000,0xb4(%ebp)
0000079d	movl	$0x00080010,0xb8(%ebp)
000007a4	movl	$0x000000ff,0x9c(%ebp)
000007ab	movl	$0x000000ff,0x98(%ebp)
000007b2	jmp	0x00000938
000007b7	orl	$0x00020000,%edx
000007bd	movl	$0x000000f0,0x80(%ebp)
000007c4	movl	$0x0008fffc,0xb4(%ebp)
000007cb	movl	$0x00000004,0xb8(%ebp)
000007d2	movl	$0x000000f0,0x9c(%ebp)
000007d9	movl	$0x000000f0,0x98(%ebp)
000007e0	movl	$0x000000f0,0xa0(%ebp)
000007e7	jmp	0x00000938
000007ec	orl	$0x00030000,%edx
000007f2	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb4(%ebp)
000007f9	movl	$0x000000ff,0x80(%ebp)
00000800	movl	$0x00080010,0xb8(%ebp)
00000807	movl	$0x000000ff,0x9c(%ebp)
0000080e	movl	$0x000000ff,0x98(%ebp)
00000815	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa0(%ebp)
0000081c	jmp	0x00000938
00000821	orl	$0x00020000,%edx
00000827	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa0(%ebp)
0000082e	movl	$0x000000f8,0x80(%ebp)
00000835	movl	$0x000000fc,0x9c(%ebp)
0000083c	movl	$0x0000fffd,0xb4(%ebp)
00000843	movl	$0x00030008,0xb8(%ebp)
0000084a	movl	$0x000000f8,0x98(%ebp)
00000851	jmp	0x00000938
00000856	orl	$0x00020000,%edx
0000085c	movl	$0x00000080,0xa0(%ebp)
00000863	movl	$0x000000f8,0x80(%ebp)
0000086a	movl	$0x0008fffd,0xb4(%ebp)
00000871	movl	$0x00020007,0xb8(%ebp)
00000878	movl	$0x000000f8,0x9c(%ebp)
0000087f	movl	$0x000000f8,0x98(%ebp)
00000886	jmp	0x00000938
0000088b	orl	$0x00010000,%edx
00000891	movl	$0x000000ff,0xa0(%ebp)
00000898	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
0000089f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb4(%ebp)
000008a6	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x80(%ebp)
000008ad	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x9c(%ebp)
000008b4	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x98(%ebp)
000008bb	jmp	0x00000938
000008bd	orl	$0x00080000,%edx
000008c3	jmp	0x00000701
000008c8	orl	$0x00010000,%edx
000008ce	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
000008d5	movl	$0x000000ff,0x80(%ebp)
000008dc	jmp	0x000006a5
000008e1	movl	%edx,%edi
000008e3	testb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x601(%esi,%ecx)
000008eb	jne	0x00000909
000008ed	movl	%ecx,0x04(%esp)
000008f1	leal	0x6537d-0x601(%esi),%eax
000008f7	movl	%eax,(%esp)
000008fa	movl	%ecx,%ebx
000008fc	calll	_Msg
00000901	movb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x601(%ebx,%esi)
00000909	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
00000910	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb4(%ebp)
00000917	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x80(%ebp)
0000091e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x9c(%ebp)
00000925	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x98(%ebp)
0000092c	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa0(%ebp)
00000933	movl	%edi,%edx
00000935	movl	0x08(%ebp),%edi
00000938	movl	0xe0(%ebp),%ecx
0000093b	testl	%ecx,%ecx
0000093d	jle	0x00000d63
00000943	leal	0x000001fc(%edi),%eax
00000949	movl	%eax,0xffffff74(%ebp)
0000094f	movl	0xe4(%ebp),%eax
00000952	movl	%esi,0xb0(%ebp)
00000955	movss	0x5f65c-0x601(%esi),%xmm0
0000095d	movss	%xmm0,0xac(%ebp)
00000962	movss	0x5f668-0x601(%esi),%xmm0
0000096a	movss	%xmm0,0xa8(%ebp)
0000096f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xffffff70(%ebp)
00000979	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
00000980	testl	%eax,%eax
00000982	jle	0x00000d4e
00000988	movzwl	%dx,%eax
0000098b	movl	%edx,0x84(%ebp)
0000098e	movl	0xffffff70(%ebp),%ecx
00000994	imull	%ecx,%eax
00000997	movl	0xffffff6c(%ebp),%edx
0000099d	addl	%eax,%edx
0000099f	movl	%edx,0xc4(%ebp)
000009a2	movl	$0x000000ff,%eax
000009a7	subl	%ecx,%eax
000009a9	movl	%eax,0xffffff7c(%ebp)
000009af	notl	%ecx
000009b1	movl	%ecx,0xffffff78(%ebp)
000009b7	xorl	%edx,%edx
000009b9	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
000009c0	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%edi)
000009c7	je	0x00000b02
000009cd	movss	0x00000200(%edi),%xmm0
000009d5	movss	%xmm0,0xc8(%ebp)
000009da	movss	0x00000204(%edi),%xmm0
000009e2	movss	%xmm0,0xcc(%ebp)
000009e7	movss	0x00000208(%edi),%xmm0
000009ef	movss	%xmm0,0xd0(%ebp)
000009f4	cvtsi2ss	%edx,%xmm0
000009f8	movl	%edx,0xa4(%ebp)
000009fb	divss	0xac(%ebp),%xmm0
00000a00	movl	0x000001f8(%edi),%eax
00000a06	movl	0xb0(%ebp),%esi
00000a09	movl	CColorXYPreview::s_pHSVRemapX-0x601(%esi,%eax,4),%eax
00000a10	movss	%xmm0,0xc8(%ebp,%eax,4)
00000a16	movl	%edi,(%esp)
00000a19	calll	CProceduralTexturePanel::GetImageHeight() const
00000a1e	addl	0xffffff78(%ebp),%eax
00000a24	cvtsi2ss	%eax,%xmm0
00000a28	divss	0xac(%ebp),%xmm0
00000a2d	movl	0x000001f8(%edi),%eax
00000a33	movl	CColorXYPreview::s_pHSVRemapY-0x601(%esi,%eax,4),%ecx
00000a3a	movss	%xmm0,0xc8(%ebp,%ecx,4)
00000a40	pxor	%xmm0,%xmm0
00000a44	ucomiss	0xcc(%ebp),%xmm0
00000a48	jne	0x00000a53
00000a4a	jp	0x00000a53
00000a4c	movl	$0xbf800000,0xc8(%ebp)
00000a53	testl	%eax,%eax
00000a55	je	0x00000a74
00000a57	movss	0xc8(%ebp),%xmm0
00000a5c	ucomiss	0x5f660-0x601(%esi),%xmm0
00000a63	jne	0x00000a67
00000a65	jnp	0x00000a74
00000a67	mulss	0x5f664-0x601(%esi),%xmm0
00000a6f	movss	%xmm0,0xc8(%ebp)
00000a74	leal	0xe8(%ebp),%eax
00000a77	movl	%eax,0x04(%esp)
00000a7b	leal	0xc8(%ebp),%eax
00000a7e	movl	%eax,(%esp)
00000a81	calll	HSVtoRGB(Vector const&, Vector&)
00000a86	movss	0xf0(%ebp),%xmm0
00000a8b	movss	0xac(%ebp),%xmm3
00000a90	mulss	%xmm3,%xmm0
00000a94	movss	0xec(%ebp),%xmm1
00000a99	mulss	%xmm3,%xmm1
00000a9d	movss	0xe8(%ebp),%xmm2
00000aa2	mulss	%xmm3,%xmm2
00000aa6	addss	0xa8(%ebp),%xmm2
00000aab	cvttss2si	%xmm2,%edx
00000aaf	xorb	%al,%al
00000ab1	testl	%edx,%edx
00000ab3	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
00000ab5	js	0x00000ac3
00000ab7	movb	$0xff,%cl
00000ab9	cmpl	$0x000000ff,%edx
00000abf	jg	0x00000ac3
00000ac1	movb	%dl,%cl
00000ac3	addss	0xa8(%ebp),%xmm1
00000ac8	cvttss2si	%xmm1,%edx
00000acc	movb	%cl,0xd8(%ebp)
00000acf	testl	%edx,%edx
00000ad1	js	0x00000adf
00000ad3	movb	$0xff,%al
00000ad5	cmpl	$0x000000ff,%edx
00000adb	jg	0x00000adf
00000add	movb	%dl,%al
00000adf	addss	0xa8(%ebp),%xmm0
00000ae4	cvttss2si	%xmm0,%edx
00000ae8	movb	%al,0xd9(%ebp)
00000aeb	xorb	%cl,%cl
00000aed	testl	%edx,%edx
00000aef	js	0x00000afd
00000af1	movb	$0xff,%cl
00000af3	cmpl	$0x000000ff,%edx
00000af9	jg	0x00000afd
00000afb	movb	%dl,%cl
00000afd	movb	%cl,0xda(%ebp)
00000b00	jmp	0x00000b51
00000b02	movl	0xffffff74(%ebp),%ecx
00000b08	movb	0x02(%ecx),%al
00000b0b	movb	%al,0xda(%ebp)
00000b0e	movw	(%ecx),%ax
00000b11	movw	%ax,0xd8(%ebp)
00000b15	movl	0x000001f8(%edi),%eax
00000b1b	movl	0xb0(%ebp),%esi
00000b1e	movl	CColorXYPreview::s_pRGBRemapX-0x601(%esi,%eax,4),%eax
00000b25	movb	%dl,0xd8(%ebp,%eax)
00000b29	movl	%edx,0xa4(%ebp)
00000b2c	movl	%edi,(%esp)
00000b2f	calll	CProceduralTexturePanel::GetImageHeight() const
00000b34	addl	0xffffff7c(%ebp),%eax
00000b3a	movl	0x000001f8(%edi),%ecx
00000b40	movl	CColorXYPreview::s_pRGBRemapY-0x601(%esi,%ecx,4),%ecx
00000b47	movb	%al,0xd8(%ebp,%ecx)
00000b4b	movb	0xd9(%ebp),%al
00000b4e	movb	0xda(%ebp),%cl
00000b51	movl	0x84(%ebp),%edx
00000b54	shrl	$0x10,%edx
00000b57	movl	0xb8(%ebp),%ebx
00000b5a	shll	$0x10,%ebx
00000b5d	orl	%edx,%ebx
00000b5f	testb	%dl,%dl
00000b61	jne	0x00000b6b
00000b63	movzbl	%bl,%eax
00000b66	jmp	0x00000d33
00000b6b	movl	%ebx,%edi
00000b6d	movzbl	%cl,%ecx
00000b70	movl	%ecx,0xc0(%ebp)
00000b73	movzbl	%al,%ebx
00000b76	movzbl	0xd8(%ebp),%esi
00000b7a	andl	0x80(%ebp),%esi
00000b7d	cmpb	$0x04,%dl
00000b80	ja	0x00000c2f
00000b86	movl	%edi,0xbc(%ebp)
00000b89	movl	%edi,%ecx
00000b8b	shrl	$0x10,%ecx
00000b8e	shll	%cl,%esi
00000b90	movl	%esi,%edi
00000b92	movl	0xc0(%ebp),%edx
00000b95	andl	0x98(%ebp),%edx
00000b98	andl	0x9c(%ebp),%ebx
00000b9b	movl	0xb8(%ebp),%ecx
00000b9e	shrl	$0x10,%ecx
00000ba1	shll	%cl,%ebx
00000ba3	movl	0xb4(%ebp),%eax
00000ba6	movswl	%ax,%ecx
00000ba9	testw	%cx,%cx
00000bac	movl	%edx,%esi
00000bae	jle	0x00000bb4
00000bb0	shll	%cl,%esi
00000bb2	jmp	0x00000bb8
00000bb4	negl	%ecx
00000bb6	shrl	%cl,%esi
00000bb8	shrl	$0x10,%eax
00000bbb	movl	0xa0(%ebp),%ecx
00000bbe	movzbl	%cl,%edx
00000bc1	movb	%al,%cl
00000bc3	shll	%cl,%edx
00000bc5	movl	0xbc(%ebp),%eax
00000bc8	movzbl	%al,%eax
00000bcb	leal	0xff(%eax),%ecx
00000bce	cmpl	$0x03,%ecx
00000bd1	ja	0x00000d33
00000bd7	orl	%edx,%ebx
00000bd9	orl	%edi,%ebx
00000bdb	orl	%esi,%ebx
00000bdd	movl	0xb0(%ebp),%edx
00000be0	movl	0x000007e7(%edx,%ecx,4),%eax
00000be7	addl	%edx,%eax
00000be9	jmp	*%eax
00000beb	movl	0xc4(%ebp),%eax
00000bee	movb	%bl,(%eax)
00000bf0	movl	$0x00000001,%eax
00000bf5	jmp	0x00000d33
00000bfa	movl	0xc4(%ebp),%eax
00000bfd	movw	%bx,(%eax)
00000c00	movl	$0x00000002,%eax
00000c05	jmp	0x00000d33
00000c0a	movl	0xc4(%ebp),%eax
00000c0d	movw	%bx,(%eax)
00000c10	shrl	$0x10,%ebx
00000c13	movb	%bl,0x02(%eax)
00000c16	movl	$0x00000003,%eax
00000c1b	jmp	0x00000d33
00000c20	movl	0xc4(%ebp),%eax
00000c23	movl	%ebx,(%eax)
00000c25	movl	$0x00000004,%eax
00000c2a	jmp	0x00000d33
00000c2f	movl	%edi,0xbc(%ebp)
00000c32	movl	%edi,%eax
00000c34	shrl	$0x10,%eax
00000c37	movb	%al,%cl
00000c39	xorl	%edx,%edx
00000c3b	shldl	%cl,%esi,%edx
00000c3e	movb	%al,%cl
00000c40	shll	%cl,%esi
00000c42	testb	$0x20,%al
00000c44	cmovnel	%esi,%edx
00000c47	movl	%edx,0x90(%ebp)
00000c4a	movl	%esi,%eax
00000c4c	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%edx
00000c51	cmovnel	%edx,%eax
00000c54	movl	%eax,0x94(%ebp)
00000c57	andl	0x9c(%ebp),%ebx
00000c5a	movl	0xb8(%ebp),%eax
00000c5d	shrl	$0x10,%eax
00000c60	movb	%al,%cl
00000c62	xorl	%edi,%edi
00000c64	shldl	%cl,%ebx,%edi
00000c67	movb	%al,%cl
00000c69	shll	%cl,%ebx
00000c6b	testb	$0x20,%al
00000c6d	cmovnel	%ebx,%edi
00000c70	cmovnel	%edx,%ebx
00000c73	movl	%ebx,0x88(%ebp)
00000c76	movl	0xc0(%ebp),%eax
00000c79	andl	0x98(%ebp),%eax
00000c7c	movl	%eax,0xc0(%ebp)
00000c7f	movl	0xb4(%ebp),%eax
00000c82	movswl	%ax,%edx
00000c85	movl	%eax,0x8c(%ebp)
00000c88	testw	%dx,%dx
00000c8b	jle	0x00000cae
00000c8d	movb	%dl,%cl
00000c8f	xorl	%eax,%eax
00000c91	movl	0xc0(%ebp),%esi
00000c94	shldl	%cl,%esi,%eax
00000c97	movb	%dl,%cl
00000c99	shll	%cl,%esi
00000c9b	testb	$0x20,%dl
00000c9e	cmovnel	%esi,%eax
00000ca1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%ecx
00000ca6	cmovnel	%ecx,%esi
00000ca9	movl	%esi,0xc0(%ebp)
00000cac	jmp	0x00000ccf
00000cae	negl	%edx
00000cb0	movb	%dl,%cl
00000cb2	movl	0xc0(%ebp),%esi
00000cb5	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%ebx
00000cba	shrdl	%cl,%ebx,%esi
00000cbd	movb	%dl,%cl
00000cbf	xorl	%eax,%eax
00000cc1	shrl	%cl,%eax
00000cc3	testb	$0x20,%dl
00000cc6	cmovnel	%eax,%esi
00000cc9	movl	%esi,0xc0(%ebp)
00000ccc	cmovnel	%ebx,%eax
00000ccf	movl	0x8c(%ebp),%ebx
00000cd2	shrl	$0x10,%ebx
00000cd5	movl	0xa0(%ebp),%ecx
00000cd8	movzbl	%cl,%edx
00000cdb	movb	%bl,%cl
00000cdd	xorl	%esi,%esi
00000cdf	shldl	%cl,%edx,%esi
00000ce2	movb	%bl,%cl
00000ce4	shll	%cl,%edx
00000ce6	testb	$0x20,%bl
00000ce9	cmovnel	%edx,%esi
00000cec	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%ecx
00000cf1	cmovnel	%ecx,%edx
00000cf4	orl	%esi,%edi
00000cf6	orl	0x90(%ebp),%edi
00000cf9	orl	%eax,%edi
00000cfb	movl	0x88(%ebp),%ecx
00000cfe	orl	%edx,%ecx
00000d00	orl	0x94(%ebp),%ecx
00000d03	orl	0xc0(%ebp),%ecx
00000d06	movl	0xbc(%ebp),%eax
00000d09	movzbl	%al,%eax
00000d0c	cmpl	$0x08,%eax
00000d0f	je	0x00000d26
00000d11	cmpl	$0x06,%eax
00000d14	jne	0x00000d33
00000d16	movl	0xc4(%ebp),%eax
00000d19	movl	%ecx,(%eax)
00000d1b	movw	%di,0x04(%eax)
00000d1f	movl	$0x00000006,%eax
00000d24	jmp	0x00000d33
00000d26	movl	0xc4(%ebp),%eax
00000d29	movl	%ecx,(%eax)
00000d2b	movl	%edi,0x04(%eax)
00000d2e	movl	$0x00000008,%eax
00000d33	addl	%eax,0xc4(%ebp)
00000d36	movl	0xa4(%ebp),%edx
00000d39	incl	%edx
00000d3a	movl	0xe4(%ebp),%eax
00000d3d	cmpl	%eax,%edx
00000d3f	movl	0x08(%ebp),%edi
00000d42	jl	0x000009c0
00000d48	movl	0xe0(%ebp),%ecx
00000d4b	movl	0x84(%ebp),%edx
00000d4e	movl	0xffffff70(%ebp),%ebx
00000d54	incl	%ebx
00000d55	movl	%ebx,0xffffff70(%ebp)
00000d5b	cmpl	%ecx,%ebx
00000d5d	jl	0x00000980
00000d63	addl	$0x000000ac,%esp
00000d69	popl	%esi
00000d6a	popl	%edi
00000d6b	popl	%ebx
00000d6c	popl	%ebp
00000d6d	ret
00000d6e	nop
00000d70	das
00000d71	addl	%eax,(%eax)
00000d73	addb	%ah,%al
00000d75	addb	(%eax),%al
00000d77	addb	%ah,%al
00000d79	addb	(%eax),%al
00000d7b	addb	%ch,%bl
00000d7d	addl	%eax,(%eax)
00000d7f	addb	%ah,%al
00000d81	addb	(%eax),%al
00000d83	addb	%al,%bh
00000d85	addb	(%eax),%al
00000d87	addb	%ah,%al
00000d89	addb	(%eax),%al
00000d8b	addb	%ah,%al
00000d8d	addb	(%eax),%al
00000d8f	addb	%cl,0xe0000002(%edx)
00000d95	addb	(%eax),%al
00000d97	addb	%ah,%al
00000d99	addb	(%eax),%al
00000d9b	addb	%ah,%al
00000d9d	addb	(%eax),%al
00000d9f	addb	%ah,CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%ecx,%eax)
00000da3	addb	%ah,%al
00000da5	addb	(%eax),%al
00000da7	addb	%ah,%al
00000da9	addb	(%eax),%al
00000dab	addb	%ah,%al
00000dad	addb	(%eax),%al
00000daf	addb	%al,0x20000001(%ecx)
00000db5	addb	(%eax),%al
00000db7	addb	%dl,0x02(%ebp)
00000dba	addb	%al,(%eax)
00000dbc	movb	$0x01,%dh
00000dbe	addb	%al,(%eax)
00000dc0	loopnz	0x00000dc4
00000dc2	addb	%al,(%eax)
00000dc4	pushl	%ebp
00000dc5	addb	(%eax),%al
00000dc7	addb	%ah,%al
00000dc9	addb	(%eax),%al
00000dcb	addb	%ch,(%edi)
00000dcd	addl	%eax,(%eax)
00000dcf	addb	%bh,%dl
00000dd1	addb	%al,(%eax)
00000dd3	addb	%bh,0x02e00000(%edx,%eax)
00000dda	addb	%al,(%eax)
00000ddc	nop
00000ddd	addb	%al,(%eax)
00000ddf	addb	%ah,%al
00000de1	addb	(%eax),%al
00000de3	addb	%al,%ch
00000de5	addb	%al,(%eax)
00000de7	addb	%ch,%dl
00000de9	addl	$0x05f90000,%eax
00000dee	addb	%al,(%eax)
00000df0	orl	%eax,(%esi)
00000df2	addb	%al,(%eax)
00000df4	popl	%ds
00000df5	pushl	%es
00000df6	addb	%al,(%eax)
00000df8	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
non-virtual thunk to CColorXYPreview::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*):
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	subl	$0x18,%esp
00000e06	movl	0x10(%ebp),%eax
00000e09	movl	%eax,0x08(%esp)
00000e0d	movl	$0xfffffe54,%eax
00000e12	addl	0x08(%ebp),%eax
00000e15	movl	%eax,(%esp)
00000e18	calll	CColorXYPreview::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*)
00000e1d	addl	$0x18,%esp
00000e20	popl	%ebp
00000e21	ret
00000e22	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::Paint():
00000e30	pushl	%ebp
00000e31	movl	%esp,%ebp
00000e33	pushl	%ebx
00000e34	pushl	%edi
00000e35	pushl	%esi
00000e36	subl	$0x3c,%esp
00000e39	calll	0x00000e3e
00000e3e	popl	%esi
00000e3f	movl	0x08(%ebp),%edi
00000e42	movl	%edi,(%esp)
00000e45	calll	CProceduralTexturePanel::Paint()
00000e4a	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%edi)
00000e51	je	0x00000f01
00000e57	movl	0x00000208(%edi),%eax
00000e5d	movl	%eax,0xf0(%ebp)
00000e60	movsd	0x00000200(%edi),%xmm0
00000e68	movsd	%xmm0,0xe8(%ebp)
00000e6d	movss	0xe8(%ebp),%xmm0
00000e72	ucomiss	0x5f66c-0xe3e(%esi),%xmm0
00000e79	jne	0x00000e7d
00000e7b	jnp	0x00000e8a
00000e7d	mulss	0x5f670-0xe3e(%esi),%xmm0
00000e85	movss	%xmm0,0xe8(%ebp)
00000e8a	movss	0x5f674-0xe3e(%esi),%xmm0
00000e92	movss	0xec(%ebp),%xmm1
00000e97	mulss	%xmm0,%xmm1
00000e9b	movss	%xmm1,0xec(%ebp)
00000ea0	mulss	0xf0(%ebp),%xmm0
00000ea5	movss	%xmm0,0xf0(%ebp)
00000eaa	movl	0x000001f8(%edi),%eax
00000eb0	movl	CColorXYPreview::s_pHSVRemapX-0xe3e(%esi,%eax,4),%eax
00000eb7	movss	0xe8(%ebp,%eax,4),%xmm0
00000ebd	addss	0x5f678-0xe3e(%esi),%xmm0
00000ec5	movss	%xmm0,0xdc(%ebp)
00000eca	movl	%edi,(%esp)
00000ecd	calll	CProceduralTexturePanel::GetImageHeight() const
00000ed2	movl	0x000001f8(%edi),%ecx
00000ed8	movl	CColorXYPreview::s_pHSVRemapY-0xe3e(%esi,%ecx,4),%ecx
00000edf	movss	0x5f678-0xe3e(%esi),%xmm0
00000ee7	addss	0xe8(%ebp,%ecx,4),%xmm0
00000eed	cvttss2si	%xmm0,%ecx
00000ef1	negl	%ecx
00000ef3	leal	0xff(%eax,%ecx),%ebx
00000ef7	cvttss2si	0xdc(%ebp),%eax
00000efc	movl	%eax,0xdc(%ebp)
00000eff	jmp	0x00000f3c
00000f01	movl	0x000001f8(%edi),%eax
00000f07	movl	CColorXYPreview::s_pRGBRemapX-0xe3e(%esi,%eax,4),%eax
00000f0e	movzbl	0x000001fc(%edi,%eax),%eax
00000f16	movl	%eax,0xdc(%ebp)
00000f19	movl	%edi,(%esp)
00000f1c	calll	CProceduralTexturePanel::GetImageHeight() const
00000f21	movl	0x000001f8(%edi),%ecx
00000f27	movl	CColorXYPreview::s_pRGBRemapY-0xe3e(%esi,%ecx,4),%ecx
00000f2e	movzbl	0x000001fc(%edi,%ecx),%ecx
00000f36	negl	%ecx
00000f38	leal	0xff(%eax,%ecx),%ebx
00000f3c	leal	0xe0(%ebp),%eax
00000f3f	movl	%eax,0x08(%esp)
00000f43	leal	0xe4(%ebp),%eax
00000f46	movl	%eax,0x04(%esp)
00000f4a	movl	%edi,(%esp)
00000f4d	calll	vgui::Panel::GetSize(int&, int&)
00000f52	movl	0x6bd1c-0xe3e(%esi),%edi
00000f58	movl	(%edi),%ecx
00000f5a	movl	(%ecx),%eax
00000f5c	cvtsi2ss	0xe4(%ebp),%xmm0
00000f61	movss	%xmm0,0xd8(%ebp)
00000f66	cvtsi2ss	0xe0(%ebp),%xmm0
00000f6b	movss	%xmm0,0xd4(%ebp)
00000f70	movl	%ecx,(%esp)
00000f73	movl	$0x000000ff,0x10(%esp)
00000f7b	movl	$0x000000ff,0x0c(%esp)
00000f83	movl	$0x000000ff,0x08(%esp)
00000f8b	movl	$0x000000ff,0x04(%esp)
00000f93	call	*0x28(%eax)
00000f96	cvtsi2ss	%ebx,%xmm2
00000f9a	mulss	0xd4(%ebp),%xmm2
00000f9f	movss	0x5f674-0xe3e(%esi),%xmm0
00000fa7	divss	%xmm0,%xmm2
00000fab	movss	0x5f678-0xe3e(%esi),%xmm1
00000fb3	addss	%xmm1,%xmm2
00000fb7	cvttss2si	%xmm2,%esi
00000fbb	movl	(%edi),%ecx
00000fbd	movl	(%ecx),%eax
00000fbf	movl	%esi,0x08(%esp)
00000fc3	cvtsi2ss	0xdc(%ebp),%xmm2
00000fc8	mulss	0xd8(%ebp),%xmm2
00000fcd	divss	%xmm0,%xmm2
00000fd1	addss	%xmm1,%xmm2
00000fd5	cvttss2si	%xmm2,%ebx
00000fd9	movl	%ebx,0x04(%esp)
00000fdd	movl	%ecx,(%esp)
00000fe0	movl	$0x00000008,0x10(%esp)
00000fe8	movl	$0x00000005,0x0c(%esp)
00000ff0	call	*0x0000018c(%eax)
00000ff6	movl	(%edi),%ecx
00000ff8	movl	(%ecx),%eax
00000ffa	movl	%ecx,(%esp)
00000ffd	movl	$0x000000ff,0x10(%esp)
00001005	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
0000100d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00001015	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000101d	call	*0x28(%eax)
00001020	movl	(%edi),%ecx
00001022	movl	(%ecx),%eax
00001024	movl	%esi,0x08(%esp)
00001028	movl	%ebx,0x04(%esp)
0000102c	movl	%ecx,(%esp)
0000102f	movl	$0x00000008,0x10(%esp)
00001037	movl	$0x00000006,0x0c(%esp)
0000103f	call	*0x0000018c(%eax)
00001045	addl	$0x3c,%esp
00001048	popl	%esi
00001049	popl	%edi
0000104a	popl	%ebx
0000104b	popl	%ebp
0000104c	ret
0000104d	nopl	(%eax)
CColorXYPreview::UpdateColorFromMouse(int, int):
00001050	pushl	%ebp
00001051	movl	%esp,%ebp
00001053	pushl	%ebx
00001054	pushl	%edi
00001055	pushl	%esi
00001056	subl	$0x7c,%esp
00001059	calll	0x0000105e
0000105e	popl	%ebx
0000105f	leal	0xd0(%ebp),%eax
00001062	movl	%eax,0x08(%esp)
00001066	leal	0xd4(%ebp),%eax
00001069	movl	%eax,0x04(%esp)
0000106d	movl	0x08(%ebp),%esi
00001070	movl	%esi,(%esp)
00001073	calll	vgui::Panel::GetSize(int&, int&)
00001078	movl	0xd0(%ebp),%eax
0000107b	movl	%eax,0x88(%ebp)
0000107e	movl	0xd4(%ebp),%edi
00001081	movl	%esi,(%esp)
00001084	calll	CProceduralTexturePanel::GetImageWidth() const
00001089	movl	%esi,(%esp)
0000108c	decl	%edi
0000108d	cvtsi2ss	%edi,%xmm0
00001091	movl	%esi,%edi
00001093	cvtsi2ss	0x0c(%ebp),%xmm1
00001098	divss	%xmm0,%xmm1
0000109c	xorps	%xmm0,%xmm0
0000109f	maxss	%xmm0,%xmm1
000010a3	minss	0x5f67c-0x105e(%ebx),%xmm1
000010ab	decl	%eax
000010ac	cvtsi2ss	%eax,%xmm2
000010b0	mulss	%xmm1,%xmm2
000010b4	movss	0x5f680-0x105e(%ebx),%xmm1
000010bc	movss	%xmm1,0xa4(%ebp)
000010c1	addss	%xmm1,%xmm2
000010c5	cvttss2si	%xmm2,%eax
000010c9	movl	%eax,0xa0(%ebp)
000010cc	movl	0x88(%ebp),%eax
000010cf	decl	%eax
000010d0	cvtsi2ss	%eax,%xmm1
000010d4	cvtsi2ss	0x10(%ebp),%xmm2
000010d9	divss	%xmm1,%xmm2
000010dd	maxss	%xmm0,%xmm2
000010e1	minss	0x5f67c-0x105e(%ebx),%xmm2
000010e9	movaps	%xmm2,0x88(%ebp)
000010ed	calll	CProceduralTexturePanel::GetImageHeight() const
000010f2	decl	%eax
000010f3	cvtsi2ss	%eax,%xmm0
000010f7	movaps	0x88(%ebp),%xmm1
000010fb	mulss	%xmm1,%xmm0
000010ff	addss	0x5f680-0x105e(%ebx),%xmm0
00001107	cvttss2si	%xmm0,%esi
0000110b	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%edi)
00001112	je	0x0000135d
00001118	movss	0x00000200(%edi),%xmm0
00001120	movss	%xmm0,0xc0(%ebp)
00001125	movss	0x00000204(%edi),%xmm0
0000112d	movss	%xmm0,0xc4(%ebp)
00001132	movss	0x00000208(%edi),%xmm0
0000113a	movss	%xmm0,0xc8(%ebp)
0000113f	cvtsi2ss	0xa0(%ebp),%xmm0
00001144	movss	0x5f684-0x105e(%ebx),%xmm1
0000114c	movss	%xmm1,0xa0(%ebp)
00001151	divss	%xmm1,%xmm0
00001155	movl	0x000001f8(%edi),%eax
0000115b	movl	CColorXYPreview::s_pHSVRemapX-0x105e(%ebx,%eax,4),%eax
00001162	movss	%xmm0,0xc0(%ebp,%eax,4)
00001168	movl	%edi,(%esp)
0000116b	notl	%esi
0000116d	calll	CProceduralTexturePanel::GetImageHeight() const
00001172	addl	%esi,%eax
00001174	cvtsi2ss	%eax,%xmm0
00001178	divss	0x5f684-0x105e(%ebx),%xmm0
00001180	movl	0x000001f8(%edi),%eax
00001186	movl	CColorXYPreview::s_pHSVRemapY-0x105e(%ebx,%eax,4),%ecx
0000118d	movss	%xmm0,0xc0(%ebp,%ecx,4)
00001193	pxor	%xmm0,%xmm0
00001197	ucomiss	0xc4(%ebp),%xmm0
0000119b	jne	0x000011a6
0000119d	jp	0x000011a6
0000119f	movl	$0xbf800000,0xc0(%ebp)
000011a6	testl	%eax,%eax
000011a8	je	0x000011c7
000011aa	movss	0xc0(%ebp),%xmm0
000011af	ucomiss	0x5f688-0x105e(%ebx),%xmm0
000011b6	jne	0x000011ba
000011b8	jnp	0x000011c7
000011ba	mulss	0x5f68c-0x105e(%ebx),%xmm0
000011c2	movss	%xmm0,0xc0(%ebp)
000011c7	movl	$0x00000020,(%esp)
000011ce	calll	KeyValues::operator new(unsigned long)
000011d3	movl	%eax,%esi
000011d5	leal	0x6509d-0x105e(%ebx),%eax
000011db	movl	%eax,0x04(%esp)
000011df	movl	%esi,(%esp)
000011e2	calll	KeyValues::KeyValues(char const*)
000011e7	movss	0xc0(%ebp),%xmm0
000011ec	movss	%xmm0,0x08(%esp)
000011f2	leal	0x650a9-0x105e(%ebx),%eax
000011f8	movl	%eax,0x04(%esp)
000011fc	movl	%esi,(%esp)
000011ff	calll	KeyValues::SetFloat(char const*, float)
00001204	movss	0xc4(%ebp),%xmm0
00001209	movss	%xmm0,0x08(%esp)
0000120f	leal	0x650ad-0x105e(%ebx),%eax
00001215	movl	%eax,0x04(%esp)
00001219	movl	%esi,(%esp)
0000121c	calll	KeyValues::SetFloat(char const*, float)
00001221	movss	0xc8(%ebp),%xmm0
00001226	movss	%xmm0,0x08(%esp)
0000122c	leal	0x650b8-0x105e(%ebx),%eax
00001232	movl	%eax,0x04(%esp)
00001236	movl	%esi,(%esp)
00001239	calll	KeyValues::SetFloat(char const*, float)
0000123e	movl	(%edi),%eax
00001240	movl	%esi,0x04(%esp)
00001244	movl	%edi,(%esp)
00001247	call	*0x000000c0(%eax)
0000124d	leal	0xe8(%ebp),%eax
00001250	movl	%eax,0x04(%esp)
00001254	leal	0xc0(%ebp),%eax
00001257	movl	%eax,(%esp)
0000125a	calll	HSVtoRGB(Vector const&, Vector&)
0000125f	movss	0xf0(%ebp),%xmm0
00001264	movss	0xa0(%ebp),%xmm2
00001269	mulss	%xmm2,%xmm0
0000126d	movss	0xec(%ebp),%xmm1
00001272	mulss	%xmm2,%xmm1
00001276	mulss	0xe8(%ebp),%xmm2
0000127b	addss	0xa4(%ebp),%xmm2
00001280	cvttss2si	%xmm2,%edx
00001284	xorb	%al,%al
00001286	testl	%edx,%edx
00001288	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
0000128a	js	0x00001298
0000128c	movb	$0xff,%cl
0000128e	cmpl	$0x000000ff,%edx
00001294	jg	0x00001298
00001296	movb	%dl,%cl
00001298	addss	0xa4(%ebp),%xmm1
0000129d	cvttss2si	%xmm1,%edx
000012a1	testl	%edx,%edx
000012a3	js	0x000012b1
000012a5	movb	$0xff,%al
000012a7	cmpl	$0x000000ff,%edx
000012ad	jg	0x000012b1
000012af	movb	%dl,%al
000012b1	addss	0xa4(%ebp),%xmm0
000012b6	cvttss2si	%xmm0,%ebx
000012ba	xorb	%dl,%dl
000012bc	testl	%ebx,%ebx
000012be	js	0x000012cc
000012c0	movb	$0xff,%dl
000012c2	cmpl	$0x000000ff,%ebx
000012c8	jg	0x000012cc
000012ca	movb	%bl,%dl
000012cc	cmpb	0x000001fc(%edi),%cl
000012d2	jne	0x00001314
000012d4	cmpb	0x000001fd(%edi),%al
000012da	jne	0x00001314
000012dc	cmpb	0x000001fe(%edi),%dl
000012e2	jne	0x00001314
000012e4	movss	0xc0(%ebp),%xmm0
000012e9	ucomiss	0x00000200(%edi),%xmm0
000012f0	jne	0x00001314
000012f2	jp	0x00001314
000012f4	movss	0xc4(%ebp),%xmm0
000012f9	ucomiss	0x00000204(%edi),%xmm0
00001300	jne	0x00001314
00001302	jp	0x00001314
00001304	movss	0xc8(%ebp),%xmm0
00001309	ucomiss	0x00000208(%edi),%xmm0
00001310	jne	0x00001314
00001312	jnp	0x00001355
00001314	movb	%cl,0x000001fc(%edi)
0000131a	movb	%al,0x000001fd(%edi)
00001320	movb	%dl,0x000001fe(%edi)
00001326	movss	0xc0(%ebp),%xmm0
0000132b	movss	%xmm0,0x00000200(%edi)
00001333	movss	0xc4(%ebp),%xmm0
00001338	movss	%xmm0,0x00000204(%edi)
00001340	movss	0xc8(%ebp),%xmm0
00001345	movss	%xmm0,0x00000208(%edi)
0000134d	movl	%edi,(%esp)
00001350	calll	CProceduralTexturePanel::DownloadTexture()
00001355	addl	$0x7c,%esp
00001358	popl	%esi
00001359	popl	%edi
0000135a	popl	%ebx
0000135b	popl	%ebp
0000135c	ret
0000135d	movb	0x000001fe(%edi),%al
00001363	movb	%al,0xba(%ebp)
00001366	movw	0x000001fc(%edi),%ax
0000136d	movw	%ax,0xb8(%ebp)
00001371	movl	0xa0(%ebp),%eax
00001374	movl	0x000001f8(%edi),%ecx
0000137a	movl	CColorXYPreview::s_pRGBRemapX-0x105e(%ebx,%ecx,4),%ecx
00001381	movb	%al,0xb8(%ebp,%ecx)
00001385	movl	%edi,(%esp)
00001388	movl	$0x000000ff,%edi
0000138d	subl	%esi,%edi
0000138f	calll	CProceduralTexturePanel::GetImageHeight() const
00001394	addl	%edi,%eax
00001396	movl	0x08(%ebp),%edi
00001399	movl	0x000001f8(%edi),%ecx
0000139f	movl	CColorXYPreview::s_pRGBRemapY-0x105e(%ebx,%ecx,4),%ecx
000013a6	movb	%al,0xb8(%ebp,%ecx)
000013aa	movzbl	0xba(%ebp),%eax
000013ae	movl	%eax,0xa0(%ebp)
000013b1	movl	%ebx,%esi
000013b3	movl	%esi,0x84(%ebp)
000013b6	movzbl	0xb9(%ebp),%eax
000013ba	movl	%eax,0xa4(%ebp)
000013bd	movzbl	0xb8(%ebp),%eax
000013c1	movl	%eax,0x88(%ebp)
000013c4	movl	$0x00000020,(%esp)
000013cb	calll	KeyValues::operator new(unsigned long)
000013d0	movl	%eax,%ebx
000013d2	leal	0x650be-0x105e(%esi),%eax
000013d8	movl	%eax,0x04(%esp)
000013dc	movl	%ebx,(%esp)
000013df	calll	KeyValues::KeyValues(char const*)
000013e4	movl	0xa4(%ebp),%eax
000013e7	shll	$0x08,%eax
000013ea	addl	0x88(%ebp),%eax
000013ed	movl	0xa0(%ebp),%ecx
000013f0	shll	$0x10,%ecx
000013f3	orl	%eax,%ecx
000013f5	orl	$0xff000000,%ecx
000013fb	movl	%ecx,0xb4(%ebp)
000013fe	movl	0xb4(%ebp),%eax
00001401	movl	%eax,0x08(%esp)
00001405	movl	0x84(%ebp),%esi
00001408	leal	0x650cc-0x105e(%esi),%eax
0000140e	movl	%eax,0x04(%esp)
00001412	movl	%ebx,(%esp)
00001415	calll	KeyValues::SetColor(char const*, Color)
0000141a	movl	(%edi),%eax
0000141c	movl	%ebx,0x04(%esp)
00001420	movl	%edi,(%esp)
00001423	call	*0x000000c0(%eax)
00001429	movl	0x88(%ebp),%ebx
0000142c	cvtsi2ss	%ebx,%xmm1
00001430	movss	0x5f684-0x105e(%esi),%xmm0
00001438	divss	%xmm0,%xmm1
0000143c	movss	%xmm1,0xd8(%ebp)
00001441	cvtsi2ss	0xa4(%ebp),%xmm1
00001446	divss	%xmm0,%xmm1
0000144a	movss	%xmm1,0xdc(%ebp)
0000144f	movl	0xa0(%ebp),%esi
00001452	cvtsi2ss	%esi,%xmm1
00001456	divss	%xmm0,%xmm1
0000145a	movss	%xmm1,0xe0(%ebp)
0000145f	leal	0xa8(%ebp),%eax
00001462	movl	%eax,0x04(%esp)
00001466	leal	0xd8(%ebp),%eax
00001469	movl	%eax,(%esp)
0000146c	calll	RGBtoHSV(Vector const&, Vector&)
00001471	cmpb	0x000001fc(%edi),%bl
00001477	movl	%esi,%eax
00001479	jne	0x000014c2
0000147b	movl	0xa4(%ebp),%ecx
0000147e	cmpb	0x000001fd(%edi),%cl
00001484	jne	0x000014c2
00001486	cmpb	0x000001fe(%edi),%al
0000148c	jne	0x000014c2
0000148e	movss	0xa8(%ebp),%xmm0
00001493	ucomiss	0x00000200(%edi),%xmm0
0000149a	jne	0x000014c2
0000149c	jp	0x000014c2
0000149e	movss	0xac(%ebp),%xmm0
000014a3	ucomiss	0x00000204(%edi),%xmm0
000014aa	jne	0x000014c2
000014ac	jp	0x000014c2
000014ae	movss	0xb0(%ebp),%xmm0
000014b3	ucomiss	0x00000208(%edi),%xmm0
000014ba	jne	0x000014c2
000014bc	jnp	0x00001355
000014c2	leal	0x000001fc(%edi),%eax
000014c8	movb	0xba(%ebp),%cl
000014cb	movb	%cl,0x02(%eax)
000014ce	movw	0xb8(%ebp),%cx
000014d2	movw	%cx,(%eax)
000014d5	movss	0xa8(%ebp),%xmm0
000014da	movss	%xmm0,0x00000200(%edi)
000014e2	movss	0xac(%ebp),%xmm0
000014e7	movss	%xmm0,0x00000204(%edi)
000014ef	movss	0xb0(%ebp),%xmm0
000014f4	jmp	0x00001345
000014f9	movl	%eax,%edi
000014fb	movl	%ebx,(%esp)
000014fe	calll	KeyValues::operator delete(void*)
00001503	jmp	0x0000150f
00001505	movl	%eax,%edi
00001507	movl	%esi,(%esp)
0000150a	calll	KeyValues::operator delete(void*)
0000150f	movl	%edi,(%esp)
00001512	calll	__Unwind_Resume
00001517	calll	std::terminate()
0000151c	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorXYPreview::OnMousePressed(ButtonCode_t):
00001520	pushl	%ebp
00001521	movl	%esp,%ebp
00001523	pushl	%ebx
00001524	pushl	%edi
00001525	pushl	%esi
00001526	subl	$0x1c,%esp
00001529	calll	0x0000152e
0000152e	popl	%edi
0000152f	movl	0x0c(%ebp),%esi
00001532	movl	%esi,0x04(%esp)
00001536	movl	0x08(%ebp),%ebx
00001539	movl	%ebx,(%esp)
0000153c	calll	vgui::Panel::OnMousePressed(ButtonCode_t)
00001541	cmpl	$0x6b,%esi
00001544	jne	0x000015b7
00001546	testb	$0x01,0x00000210(%ebx)
0000154d	jne	0x000015b7
0000154f	movb	$0x01,0x00000210(%ebx)
00001556	movl	0x6bd18-0x152e(%edi),%edi
0000155c	movl	%ebx,%esi
0000155e	movl	(%edi),%ebx
00001560	movl	(%ebx),%eax
00001562	movl	0x0c(%eax),%eax
00001565	movl	%eax,0xe8(%ebp)
00001568	movl	(%esi),%eax
0000156a	movl	%esi,(%esp)
0000156d	call	(%eax)
0000156f	movl	%eax,0x04(%esp)
00001573	movl	%ebx,(%esp)
00001576	call	*0xe8(%ebp)
00001579	movl	(%edi),%ecx
0000157b	movl	(%ecx),%eax
0000157d	leal	0xec(%ebp),%ebx
00001580	movl	%ebx,0x08(%esp)
00001584	leal	0xf0(%ebp),%edi
00001587	movl	%edi,0x04(%esp)
0000158b	movl	%ecx,(%esp)
0000158e	call	*0x24(%eax)
00001591	movl	%ebx,0x08(%esp)
00001595	movl	%edi,0x04(%esp)
00001599	movl	%esi,(%esp)
0000159c	calll	vgui::Panel::ScreenToLocal(int&, int&)
000015a1	movl	0xf0(%ebp),%eax
000015a4	movl	0xec(%ebp),%ecx
000015a7	movl	%ecx,0x08(%esp)
000015ab	movl	%eax,0x04(%esp)
000015af	movl	%esi,(%esp)
000015b2	calll	CColorXYPreview::UpdateColorFromMouse(int, int)
000015b7	addl	$0x1c,%esp
000015ba	popl	%esi
000015bb	popl	%edi
000015bc	popl	%ebx
000015bd	popl	%ebp
000015be	ret
000015bf	nop
CColorXYPreview::OnMouseReleased(ButtonCode_t):
000015c0	pushl	%ebp
000015c1	movl	%esp,%ebp
000015c3	pushl	%ebx
000015c4	pushl	%edi
000015c5	pushl	%esi
000015c6	subl	$0x0c,%esp
000015c9	calll	0x000015ce
000015ce	popl	%esi
000015cf	movl	0x0c(%ebp),%ebx
000015d2	movl	%ebx,0x04(%esp)
000015d6	movl	0x08(%ebp),%edi
000015d9	movl	%edi,(%esp)
000015dc	calll	vgui::Panel::OnMouseReleased(ButtonCode_t)
000015e1	cmpl	$0x6b,%ebx
000015e4	jne	0x0000160e
000015e6	testb	$0x01,0x00000210(%edi)
000015ed	je	0x0000160e
000015ef	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x00000210(%edi)
000015f6	movl	0x6bd18-0x15ce(%esi),%eax
000015fc	movl	(%eax),%ecx
000015fe	movl	(%ecx),%eax
00001600	movl	%ecx,(%esp)
00001603	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000160b	call	*0x0c(%eax)
0000160e	addl	$0x0c,%esp
00001611	popl	%esi
00001612	popl	%edi
00001613	popl	%ebx
00001614	popl	%ebp
00001615	ret
00001616	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorXYPreview::OnCursorMoved(int, int):
00001620	pushl	%ebp
00001621	movl	%esp,%ebp
00001623	pushl	%esi
00001624	subl	$0x14,%esp
00001627	movl	0x10(%ebp),%eax
0000162a	movl	%eax,0x08(%esp)
0000162e	movl	0x0c(%ebp),%eax
00001631	movl	%eax,0x04(%esp)
00001635	movl	0x08(%ebp),%esi
00001638	movl	%esi,(%esp)
0000163b	calll	vgui::Panel::OnCursorMoved(int, int)
00001640	testb	$0x01,0x00000210(%esi)
00001647	jne	0x0000164f
00001649	addl	$0x14,%esp
0000164c	popl	%esi
0000164d	popl	%ebp
0000164e	ret
0000164f	addl	$0x14,%esp
00001652	popl	%esi
00001653	popl	%ebp
00001654	jmp	CColorXYPreview::UpdateColorFromMouse(int, int)
00001659	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorZPreview::CColorZPreview(vgui::Panel*, char const*):
00001660	pushl	%ebp
00001661	movl	%esp,%ebp
00001663	pushl	%ebx
00001664	pushl	%edi
00001665	pushl	%esi
00001666	subl	$0x2c,%esp
00001669	calll	0x0000166e
0000166e	popl	%edi
0000166f	movl	0x10(%ebp),%eax
00001672	movl	%eax,0x0c(%esp)
00001676	movl	0x0c(%ebp),%eax
00001679	movl	%eax,0x08(%esp)
0000167d	leal	VTT for CColorZPreview-0x166e+0x00000004(%edi),%eax
00001683	movl	%eax,0xe4(%ebp)
00001686	movl	%eax,0x04(%esp)
0000168a	movl	0x08(%ebp),%ebx
0000168d	movl	%ebx,(%esp)
00001690	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
00001695	leal	vtable for CColorZPreview-0x166e+0x0000000c(%edi),%eax
0000169b	movl	%eax,(%ebx)
0000169d	leal	vtable for CColorZPreview-0x166e+0x000003d0(%edi),%eax
000016a3	movl	%eax,0x000001ac(%ebx)
000016a9	testb	$0x01,CColorZPreview::ChainToMap()::chained-0x166e(%edi)
000016b0	jne	0x000016e7
000016b2	movb	$0x01,CColorZPreview::ChainToMap()::chained-0x166e(%edi)
000016b9	leal	0x652b4-0x166e(%edi),%eax
000016bf	movl	%eax,(%esp)
000016c2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000016c7	movl	%eax,%esi
000016c9	leal	CColorZPreview::GetPanelClassName()-0x166e(%edi),%eax
000016cf	movl	%eax,0x1c(%esi)
000016d2	testl	%esi,%esi
000016d4	je	0x000016e7
000016d6	leal	0x652c3-0x166e(%edi),%eax
000016dc	movl	%eax,(%esp)
000016df	calll	vgui::FindOrAddPanelMessageMap(char const*)
000016e4	movl	%eax,0x18(%esi)
000016e7	testb	$0x01,CColorZPreview::ChainToAnimationMap()::chained-0x166e(%edi)
000016ee	jne	0x00001725
000016f0	movb	$0x01,CColorZPreview::ChainToAnimationMap()::chained-0x166e(%edi)
000016f7	leal	0x652b4-0x166e(%edi),%eax
000016fd	movl	%eax,(%esp)
00001700	calll	FindOrAddPanelAnimationMap(char const*)
00001705	movl	%eax,%esi
00001707	leal	CColorZPreview::GetPanelClassName()-0x166e(%edi),%eax
0000170d	movl	%eax,0x18(%esi)
00001710	testl	%esi,%esi
00001712	je	0x00001725
00001714	leal	0x652c3-0x166e(%edi),%eax
0000171a	movl	%eax,(%esp)
0000171d	calll	FindOrAddPanelAnimationMap(char const*)
00001722	movl	%eax,0x14(%esi)
00001725	testb	$0x01,CColorZPreview::KB_ChainToMap()::chained-0x166e(%edi)
0000172c	jne	0x00001763
0000172e	movb	$0x01,CColorZPreview::KB_ChainToMap()::chained-0x166e(%edi)
00001735	leal	0x652b4-0x166e(%edi),%eax
0000173b	movl	%eax,(%esp)
0000173e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001743	movl	%eax,%esi
00001745	leal	CColorZPreview::GetPanelClassName()-0x166e(%edi),%eax
0000174b	movl	%eax,0x44(%esi)
0000174e	testl	%esi,%esi
00001750	je	0x00001763
00001752	leal	0x652c3-0x166e(%edi),%eax
00001758	movl	%eax,(%esp)
0000175b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001760	movl	%eax,0x18(%esi)
00001763	movl	(%ebx),%eax
00001765	movl	0x000003b4(%eax),%eax
0000176b	movl	%ebx,(%esp)
0000176e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00001776	movl	$0x00000100,0x08(%esp)
0000177e	movl	$0x00000008,0x04(%esp)
00001786	call	*%eax
00001788	movb	$0xff,0x000001fe(%ebx)
0000178f	movb	$0xff,0x000001fd(%ebx)
00001796	movb	$0xff,0x000001fc(%ebx)
0000179d	movl	$0x3f800000,0xe8(%ebp)
000017a4	movl	$0x3f800000,0xec(%ebp)
000017ab	movl	$0x3f800000,0xf0(%ebp)
000017b2	leal	0x00000200(%ebx),%eax
000017b8	movl	%eax,0x04(%esp)
000017bc	leal	0xe8(%ebp),%eax
000017bf	movl	%eax,(%esp)
000017c2	calll	RGBtoHSV(Vector const&, Vector&)
000017c7	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000020c(%ebx)
000017ce	movl	(%ebx),%eax
000017d0	movl	0x0000021c(%eax),%eax
000017d6	movl	%ebx,(%esp)
000017d9	movl	$0x00000001,0x04(%esp)
000017e1	call	*%eax
000017e3	cmpl	$0x01,0x000001f4(%ebx)
000017ea	jne	0x000017f5
000017ec	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ebx)
000017f3	je	0x00001811
000017f5	movl	$0x00000001,0x000001f4(%ebx)
000017ff	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ebx)
00001809	movl	%ebx,(%esp)
0000180c	calll	CProceduralTexturePanel::DownloadTexture()
00001811	addl	$0x2c,%esp
00001814	popl	%esi
00001815	popl	%edi
00001816	popl	%ebx
00001817	popl	%ebp
00001818	ret
00001819	movl	%eax,%esi
0000181b	movl	0xe4(%ebp),%eax
0000181e	movl	%eax,0x04(%esp)
00001822	movl	%ebx,(%esp)
00001825	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
0000182a	movl	%esi,(%esp)
0000182d	calll	__Unwind_Resume
00001832	calll	std::terminate()
00001837	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::SetMode(ColorType_t, ColorChannel_t):
00001840	movl	0x0c(%esp),%eax
00001844	movl	0x08(%esp),%ecx
00001848	movl	0x04(%esp),%edx
0000184c	cmpl	%ecx,0x000001f4(%edx)
00001852	jne	0x0000185d
00001854	cmpl	%eax,0x000001f8(%edx)
0000185a	jne	0x0000185d
0000185c	ret
0000185d	movl	%ecx,0x000001f4(%edx)
00001863	movl	%eax,0x000001f8(%edx)
00001869	jmp	CProceduralTexturePanel::DownloadTexture()
0000186e	nop
CColorZPreview::CColorZPreview(vgui::Panel*, char const*):
00001870	pushl	%ebp
00001871	movl	%esp,%ebp
00001873	pushl	%ebx
00001874	pushl	%edi
00001875	pushl	%esi
00001876	subl	$0x2c,%esp
00001879	calll	0x0000187e
0000187e	popl	%edi
0000187f	movl	0x14(%ebp),%eax
00001882	movl	%eax,0x0c(%esp)
00001886	movl	0x10(%ebp),%eax
00001889	movl	%eax,0x08(%esp)
0000188d	movl	0x0c(%ebp),%esi
00001890	leal	0x04(%esi),%eax
00001893	movl	%eax,0xe4(%ebp)
00001896	movl	%eax,0x04(%esp)
0000189a	movl	0x08(%ebp),%ebx
0000189d	movl	%ebx,(%esp)
000018a0	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
000018a5	movl	(%esi),%eax
000018a7	movl	%eax,(%ebx)
000018a9	leal	vtable for CColorZPreview-0x187e+0x000003d0(%edi),%eax
000018af	movl	%eax,0x000001ac(%ebx)
000018b5	testb	$0x01,CColorZPreview::ChainToMap()::chained-0x187e(%edi)
000018bc	jne	0x000018f3
000018be	movb	$0x01,CColorZPreview::ChainToMap()::chained-0x187e(%edi)
000018c5	leal	0x652b4-0x187e(%edi),%eax
000018cb	movl	%eax,(%esp)
000018ce	calll	vgui::FindOrAddPanelMessageMap(char const*)
000018d3	movl	%eax,%esi
000018d5	leal	CColorZPreview::GetPanelClassName()-0x187e(%edi),%eax
000018db	movl	%eax,0x1c(%esi)
000018de	testl	%esi,%esi
000018e0	je	0x000018f3
000018e2	leal	0x652c3-0x187e(%edi),%eax
000018e8	movl	%eax,(%esp)
000018eb	calll	vgui::FindOrAddPanelMessageMap(char const*)
000018f0	movl	%eax,0x18(%esi)
000018f3	testb	$0x01,CColorZPreview::ChainToAnimationMap()::chained-0x187e(%edi)
000018fa	jne	0x00001931
000018fc	movb	$0x01,CColorZPreview::ChainToAnimationMap()::chained-0x187e(%edi)
00001903	leal	0x652b4-0x187e(%edi),%eax
00001909	movl	%eax,(%esp)
0000190c	calll	FindOrAddPanelAnimationMap(char const*)
00001911	movl	%eax,%esi
00001913	leal	CColorZPreview::GetPanelClassName()-0x187e(%edi),%eax
00001919	movl	%eax,0x18(%esi)
0000191c	testl	%esi,%esi
0000191e	je	0x00001931
00001920	leal	0x652c3-0x187e(%edi),%eax
00001926	movl	%eax,(%esp)
00001929	calll	FindOrAddPanelAnimationMap(char const*)
0000192e	movl	%eax,0x14(%esi)
00001931	testb	$0x01,CColorZPreview::KB_ChainToMap()::chained-0x187e(%edi)
00001938	jne	0x0000196f
0000193a	movb	$0x01,CColorZPreview::KB_ChainToMap()::chained-0x187e(%edi)
00001941	leal	0x652b4-0x187e(%edi),%eax
00001947	movl	%eax,(%esp)
0000194a	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000194f	movl	%eax,%esi
00001951	leal	CColorZPreview::GetPanelClassName()-0x187e(%edi),%eax
00001957	movl	%eax,0x44(%esi)
0000195a	testl	%esi,%esi
0000195c	je	0x0000196f
0000195e	leal	0x652c3-0x187e(%edi),%eax
00001964	movl	%eax,(%esp)
00001967	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000196c	movl	%eax,0x18(%esi)
0000196f	movl	(%ebx),%eax
00001971	movl	0x000003b4(%eax),%eax
00001977	movl	%ebx,(%esp)
0000197a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00001982	movl	$0x00000100,0x08(%esp)
0000198a	movl	$0x00000008,0x04(%esp)
00001992	call	*%eax
00001994	movb	$0xff,0x000001fe(%ebx)
0000199b	movb	$0xff,0x000001fd(%ebx)
000019a2	movb	$0xff,0x000001fc(%ebx)
000019a9	movl	$0x3f800000,0xe8(%ebp)
000019b0	movl	$0x3f800000,0xec(%ebp)
000019b7	movl	$0x3f800000,0xf0(%ebp)
000019be	leal	0x00000200(%ebx),%eax
000019c4	movl	%eax,0x04(%esp)
000019c8	leal	0xe8(%ebp),%eax
000019cb	movl	%eax,(%esp)
000019ce	calll	RGBtoHSV(Vector const&, Vector&)
000019d3	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000020c(%ebx)
000019da	movl	(%ebx),%eax
000019dc	movl	0x0000021c(%eax),%eax
000019e2	movl	%ebx,(%esp)
000019e5	movl	$0x00000001,0x04(%esp)
000019ed	call	*%eax
000019ef	cmpl	$0x01,0x000001f4(%ebx)
000019f6	jne	0x00001a01
000019f8	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ebx)
000019ff	je	0x00001a1d
00001a01	movl	$0x00000001,0x000001f4(%ebx)
00001a0b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ebx)
00001a15	movl	%ebx,(%esp)
00001a18	calll	CProceduralTexturePanel::DownloadTexture()
00001a1d	addl	$0x2c,%esp
00001a20	popl	%esi
00001a21	popl	%edi
00001a22	popl	%ebx
00001a23	popl	%ebp
00001a24	ret
00001a25	movl	%eax,%esi
00001a27	movl	0xe4(%ebp),%eax
00001a2a	movl	%eax,0x04(%esp)
00001a2e	movl	%ebx,(%esp)
00001a31	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
00001a36	movl	%esi,(%esp)
00001a39	calll	__Unwind_Resume
00001a3e	calll	std::terminate()
00001a43	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::SetColor(RGB888_t const&, Vector const&):
00001a50	pushl	%ebx
00001a51	pushl	%esi
00001a52	movl	0x0c(%esp),%eax
00001a56	movl	0x10(%esp),%edx
00001a5a	movb	(%edx),%bl
00001a5c	movl	0x14(%esp),%ecx
00001a60	cmpb	0x000001fc(%eax),%bl
00001a66	jne	0x00001aad
00001a68	movb	0x01(%edx),%bl
00001a6b	cmpb	0x000001fd(%eax),%bl
00001a71	jne	0x00001aad
00001a73	movb	0x02(%edx),%bl
00001a76	cmpb	0x000001fe(%eax),%bl
00001a7c	jne	0x00001aad
00001a7e	movss	(%ecx),%xmm0
00001a82	ucomiss	0x00000200(%eax),%xmm0
00001a89	jne	0x00001aad
00001a8b	jp	0x00001aad
00001a8d	movss	0x04(%ecx),%xmm0
00001a92	ucomiss	0x00000204(%eax),%xmm0
00001a99	jne	0x00001aad
00001a9b	jp	0x00001aad
00001a9d	movss	0x08(%ecx),%xmm0
00001aa2	ucomiss	0x00000208(%eax),%xmm0
00001aa9	jne	0x00001aad
00001aab	jnp	0x00001aec
00001aad	leal	0x000001fc(%eax),%esi
00001ab3	movb	0x02(%edx),%bl
00001ab6	movb	%bl,0x02(%esi)
00001ab9	movw	(%edx),%dx
00001abc	movw	%dx,(%esi)
00001abf	movss	(%ecx),%xmm0
00001ac3	movss	%xmm0,0x00000200(%eax)
00001acb	movss	0x04(%ecx),%xmm0
00001ad0	movss	%xmm0,0x00000204(%eax)
00001ad8	movss	0x08(%ecx),%xmm0
00001add	movss	%xmm0,0x00000208(%eax)
00001ae5	popl	%esi
00001ae6	popl	%ebx
00001ae7	jmp	CProceduralTexturePanel::DownloadTexture()
00001aec	popl	%esi
00001aed	popl	%ebx
00001aee	ret
00001aef	nop
CColorZPreview::PerformLayout():
00001af0	pushl	%ebp
00001af1	movl	%esp,%ebp
00001af3	pushl	%esi
00001af4	subl	$0x34,%esp
00001af7	movl	0x08(%ebp),%esi
00001afa	movl	%esi,(%esp)
00001afd	calll	vgui::Panel::PerformLayout()
00001b02	leal	0xf4(%ebp),%eax
00001b05	movl	%eax,0x08(%esp)
00001b09	leal	0xf8(%ebp),%eax
00001b0c	movl	%eax,0x04(%esp)
00001b10	movl	%esi,(%esp)
00001b13	calll	vgui::Panel::GetSize(int&, int&)
00001b18	movl	$0x00000006,0xe0(%ebp)
00001b1f	movl	$0x00000006,0xe4(%ebp)
00001b26	movl	0xf8(%ebp),%eax
00001b29	addl	$0xf4,%eax
00001b2c	movl	%eax,0xe8(%ebp)
00001b2f	movl	0xf4(%ebp),%eax
00001b32	addl	$0xf4,%eax
00001b35	movl	%eax,0xec(%ebp)
00001b38	leal	0xe0(%ebp),%eax
00001b3b	movl	%eax,0x04(%esp)
00001b3f	movl	%esi,(%esp)
00001b42	calll	CProceduralTexturePanel::SetPaintRect(Rect_t const*)
00001b47	addl	$0x34,%esp
00001b4a	popl	%esi
00001b4b	popl	%ebp
00001b4c	ret
00001b4d	nopl	(%eax)
CColorZPreview::ComputeColorForPoint(int, RGB888_t&):
00001b50	pushl	%ebp
00001b51	movl	%esp,%ebp
00001b53	pushl	%ebx
00001b54	pushl	%edi
00001b55	pushl	%esi
00001b56	subl	$0x0c,%esp
00001b59	movl	0x08(%ebp),%esi
00001b5c	movb	0x000001fe(%esi),%al
00001b62	movl	0x10(%ebp),%edi
00001b65	movb	%al,0x02(%edi)
00001b68	movw	0x000001fc(%esi),%ax
00001b6f	movw	%ax,(%edi)
00001b72	movl	%esi,(%esp)
00001b75	movl	$0x000000ff,%ebx
00001b7a	subl	0x0c(%ebp),%ebx
00001b7d	calll	CProceduralTexturePanel::GetImageHeight() const
00001b82	addl	%ebx,%eax
00001b84	movl	0x000001f8(%esi),%ecx
00001b8a	movb	%al,(%edi,%ecx)
00001b8d	addl	$0x0c,%esp
00001b90	popl	%esi
00001b91	popl	%edi
00001b92	popl	%ebx
00001b93	popl	%ebp
00001b94	ret
00001b95	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::ComputeHSVColorForPoint(int, bool, Vector&):
00001ba0	pushl	%ebp
00001ba1	movl	%esp,%ebp
00001ba3	pushl	%ebx
00001ba4	pushl	%edi
00001ba5	pushl	%esi
00001ba6	subl	$0x0c,%esp
00001ba9	calll	0x00001bae
00001bae	popl	%eax
00001baf	movl	%eax,0xf0(%ebp)
00001bb2	movl	0x08(%ebp),%ebx
00001bb5	movss	0x00000200(%ebx),%xmm0
00001bbd	movl	0x14(%ebp),%esi
00001bc0	movss	%xmm0,(%esi)
00001bc4	movss	0x00000204(%ebx),%xmm0
00001bcc	movss	%xmm0,0x04(%esi)
00001bd1	movss	0x00000208(%ebx),%xmm0
00001bd9	movss	%xmm0,0x08(%esi)
00001bde	movl	%ebx,(%esp)
00001be1	movl	0x0c(%ebp),%edi
00001be4	notl	%edi
00001be6	calll	CProceduralTexturePanel::GetImageHeight() const
00001beb	movl	0xf0(%ebp),%ecx
00001bee	addl	%edi,%eax
00001bf0	cvtsi2ss	%eax,%xmm0
00001bf4	divss	0x5f690-0x1bae(%ecx),%xmm0
00001bfc	movl	0x000001f8(%ebx),%eax
00001c02	movss	%xmm0,(%esi,%eax,4)
00001c07	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%ebx)
00001c0e	jne	0x00001c40
00001c10	movss	(%esi),%xmm0
00001c14	ucomiss	0x5f694-0x1bae(%ecx),%xmm0
00001c1b	jne	0x00001c1f
00001c1d	jnp	0x00001c2b
00001c1f	mulss	0x5f698-0x1bae(%ecx),%xmm0
00001c27	movss	%xmm0,(%esi)
00001c2b	movb	0x10(%ebp),%al
00001c2e	cmpb	$0x01,%al
00001c30	jne	0x00001c40
00001c32	movl	$0x3f800000,0x04(%esi)
00001c39	movl	$0x3f800000,0x08(%esi)
00001c40	addl	$0x0c,%esp
00001c43	popl	%esi
00001c44	popl	%edi
00001c45	popl	%ebx
00001c46	popl	%ebp
00001c47	ret
00001c48	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*):
00001c50	pushl	%ebp
00001c51	movl	%esp,%ebp
00001c53	pushl	%ebx
00001c54	pushl	%edi
00001c55	pushl	%esi
00001c56	subl	$0x000000ac,%esp
00001c5c	calll	0x00001c61
00001c61	popl	%ebx
00001c62	movl	%ebx,0x88(%ebp)
00001c65	movl	0x10(%ebp),%esi
00001c68	movl	(%esi),%eax
00001c6a	leal	0xdc(%ebp),%ecx
00001c6d	movl	%ecx,0x10(%esp)
00001c71	leal	0xe0(%ebp),%ecx
00001c74	movl	%ecx,0x0c(%esp)
00001c78	leal	0xe4(%ebp),%ecx
00001c7b	movl	%ecx,0x08(%esp)
00001c7f	movl	%esi,(%esp)
00001c82	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00001c8a	call	*0x00000084(%eax)
00001c90	movl	(%esi),%eax
00001c92	movl	%esi,(%esp)
00001c95	call	*0x54(%eax)
00001c98	movl	%eax,%edi
00001c9a	movl	(%esi),%eax
00001c9c	movl	%esi,(%esp)
00001c9f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00001ca7	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00001caf	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00001cb7	call	*0x0000009c(%eax)
00001cbd	movl	%eax,0xffffff78(%ebp)
00001cc3	movl	(%esi),%eax
00001cc5	movl	%esi,(%esp)
00001cc8	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00001cd0	call	*0x4c(%eax)
00001cd3	movzwl	%ax,%ecx
00001cd6	cmpl	$0x1d,%edi
00001cd9	ja	0x00001f39
00001cdf	movl	0x000006f3(%ebx,%edi,4),%eax
00001ce6	addl	%ebx,%eax
00001ce8	jmp	*%eax
00001cea	orl	$0x01040000,%ecx
00001cf0	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xbc(%ebp)
00001cf7	movl	$0xffffffff,0x8c(%ebp)
00001cfe	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
00001d05	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xac(%ebp)
00001d0c	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa8(%ebp)
00001d13	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb0(%ebp)
00001d1a	movl	%ecx,%eax
00001d1c	jmp	0x00001f8b
00001d21	orl	$0x01100000,%ecx
00001d27	movl	$0xffffffff,0x8c(%ebp)
00001d2e	movl	$0x00600040,0xb8(%ebp)
00001d35	movl	$0x00200000,0xbc(%ebp)
00001d3c	movl	$0xffffffff,0xac(%ebp)
00001d43	movl	$0xffffffff,0xa8(%ebp)
00001d4a	movl	$0xffffffff,0xb0(%ebp)
00001d51	movl	%ecx,%eax
00001d53	jmp	0x00001f8b
00001d58	orl	$0x03080000,%ecx
00001d5e	movl	$0x0000ffff,0x8c(%ebp)
00001d65	movl	$0x00300020,0xb8(%ebp)
00001d6c	movl	$0x00100000,0xbc(%ebp)
00001d73	movl	$0x0000ffff,0xac(%ebp)
00001d7a	movl	$0x0000ffff,0xa8(%ebp)
00001d81	movl	$0x0000ffff,0xb0(%ebp)
00001d88	movl	%ecx,%eax
00001d8a	jmp	0x00001f8b
00001d8f	orl	$0x00040000,%ecx
00001d95	movl	$0x000000ff,0x8c(%ebp)
00001d9c	movl	$0x00180010,0xb8(%ebp)
00001da3	movl	$0x00080000,0xbc(%ebp)
00001daa	movl	$0x000000ff,0xac(%ebp)
00001db1	movl	$0x000000ff,0xa8(%ebp)
00001db8	movl	$0x000000ff,0xb0(%ebp)
00001dbf	movl	%ecx,%eax
00001dc1	jmp	0x00001f8b
00001dc6	orl	$0x00040000,%ecx
00001dcc	movl	$0x000000ff,0x8c(%ebp)
00001dd3	movl	$0x00180000,0xb8(%ebp)
00001dda	movl	$0x00080010,0xbc(%ebp)
00001de1	jmp	0x00001daa
00001de3	orl	$0x00040000,%ecx
00001de9	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb0(%ebp)
00001df0	movl	$0x000000ff,0x8c(%ebp)
00001df7	movl	$0x00180000,0xb8(%ebp)
00001dfe	movl	$0x00080010,0xbc(%ebp)
00001e05	movl	$0x000000ff,0xac(%ebp)
00001e0c	movl	$0x000000ff,0xa8(%ebp)
00001e13	movl	%ecx,%eax
00001e15	jmp	0x00001f8b
00001e1a	orl	$0x00020000,%ecx
00001e20	movl	$0x000000f0,0x8c(%ebp)
00001e27	movl	$0x0008fffc,0xb8(%ebp)
00001e2e	movl	$0x00000004,0xbc(%ebp)
00001e35	movl	$0x000000f0,0xac(%ebp)
00001e3c	movl	$0x000000f0,0xa8(%ebp)
00001e43	movl	$0x000000f0,0xb0(%ebp)
00001e4a	movl	%ecx,%eax
00001e4c	jmp	0x00001f8b
00001e51	orl	$0x00030000,%ecx
00001e57	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
00001e5e	movl	$0x000000ff,0x8c(%ebp)
00001e65	movl	$0x00080010,0xbc(%ebp)
00001e6c	movl	$0x000000ff,0xac(%ebp)
00001e73	movl	$0x000000ff,0xa8(%ebp)
00001e7a	jmp	0x00001d13
00001e7f	orl	$0x00020000,%ecx
00001e85	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb0(%ebp)
00001e8c	movl	$0x000000f8,0x8c(%ebp)
00001e93	movl	$0x000000fc,0xac(%ebp)
00001e9a	movl	$0x0000fffd,0xb8(%ebp)
00001ea1	movl	$0x00030008,0xbc(%ebp)
00001ea8	movl	$0x000000f8,0xa8(%ebp)
00001eaf	movl	%ecx,%eax
00001eb1	jmp	0x00001f8b
00001eb6	orl	$0x00020000,%ecx
00001ebc	movl	$0x00000080,0xb0(%ebp)
00001ec3	movl	$0x000000f8,0x8c(%ebp)
00001eca	movl	$0x0008fffd,0xb8(%ebp)
00001ed1	movl	$0x00020007,0xbc(%ebp)
00001ed8	movl	$0x000000f8,0xac(%ebp)
00001edf	jmp	0x00001ea8
00001ee1	orl	$0x00010000,%ecx
00001ee7	movl	$0x000000ff,0xb0(%ebp)
00001eee	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xbc(%ebp)
00001ef5	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
00001efc	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x8c(%ebp)
00001f03	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xac(%ebp)
00001f0a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa8(%ebp)
00001f11	movl	%ecx,%eax
00001f13	jmp	0x00001f8b
00001f15	orl	$0x00080000,%ecx
00001f1b	jmp	0x00001d5e
00001f20	orl	$0x00010000,%ecx
00001f26	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xbc(%ebp)
00001f2d	movl	$0x000000ff,0x8c(%ebp)
00001f34	jmp	0x00001cfe
00001f39	movl	%ecx,%esi
00001f3b	testb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x1c61(%ebx,%edi)
00001f43	jne	0x00001f5f
00001f45	movl	%edi,0x04(%esp)
00001f49	leal	0x6537d-0x1c61(%ebx),%eax
00001f4f	movl	%eax,(%esp)
00001f52	calll	_Msg
00001f57	movb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x1c61(%edi,%ebx)
00001f5f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xbc(%ebp)
00001f66	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb8(%ebp)
00001f6d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x8c(%ebp)
00001f74	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xac(%ebp)
00001f7b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xa8(%ebp)
00001f82	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xb0(%ebp)
00001f89	movl	%esi,%eax
00001f8b	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe0(%ebp)
00001f8f	jle	0x00002348
00001f95	movl	0x08(%ebp),%ecx
00001f98	leal	0x000001fc(%ecx),%ecx
00001f9e	movl	%ecx,0xffffff74(%ebp)
00001fa4	movss	0x5f69c-0x1c61(%ebx),%xmm0
00001fac	movss	%xmm0,0xffffff7c(%ebp)
00001fb4	movss	0x5f6a4-0x1c61(%ebx),%xmm0
00001fbc	movss	%xmm0,0xffffff70(%ebp)
00001fc4	movss	0x5f6a8-0x1c61(%ebx),%xmm0
00001fcc	movss	%xmm0,0x84(%ebp)
00001fd1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%edx
00001fd6	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
00001fe0	movl	%eax,0xb4(%ebp)
00001fe3	movzwl	%ax,%eax
00001fe6	imull	%edx,%eax
00001fe9	addl	0xffffff78(%ebp),%eax
00001fef	movl	%eax,0xc4(%ebp)
00001ff2	movl	0x08(%ebp),%eax
00001ff5	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00001ffc	je	0x00002114
00002002	movss	0x00000200(%eax),%xmm0
0000200a	movss	%xmm0,0xc8(%ebp)
0000200f	movss	0x00000204(%eax),%xmm0
00002017	movss	%xmm0,0xcc(%ebp)
0000201c	movss	0x00000208(%eax),%xmm0
00002024	movss	%xmm0,0xd0(%ebp)
00002029	movl	%eax,(%esp)
0000202c	movl	%edx,%esi
0000202e	movl	%edx,0x80(%ebp)
00002031	notl	%esi
00002033	movl	%eax,%edi
00002035	calll	CProceduralTexturePanel::GetImageHeight() const
0000203a	addl	%esi,%eax
0000203c	cvtsi2ss	%eax,%xmm0
00002040	divss	0xffffff7c(%ebp),%xmm0
00002048	movl	0x000001f8(%edi),%eax
0000204e	movss	%xmm0,0xc8(%ebp,%eax,4)
00002054	testl	%eax,%eax
00002056	jne	0x00002083
00002058	movss	0xc8(%ebp),%xmm0
0000205d	ucomiss	0x5f6a0-0x1c61(%ebx),%xmm0
00002064	jne	0x00002068
00002066	jnp	0x00002075
00002068	mulss	0xffffff70(%ebp),%xmm0
00002070	movss	%xmm0,0xc8(%ebp)
00002075	movl	$0x3f800000,0xcc(%ebp)
0000207c	movl	$0x3f800000,0xd0(%ebp)
00002083	leal	0xe8(%ebp),%eax
00002086	movl	%eax,0x04(%esp)
0000208a	leal	0xc8(%ebp),%eax
0000208d	movl	%eax,(%esp)
00002090	calll	HSVtoRGB(Vector const&, Vector&)
00002095	movss	0xf0(%ebp),%xmm0
0000209a	movss	0xffffff7c(%ebp),%xmm3
000020a2	mulss	%xmm3,%xmm0
000020a6	movss	0xec(%ebp),%xmm1
000020ab	mulss	%xmm3,%xmm1
000020af	movss	0xe8(%ebp),%xmm2
000020b4	mulss	%xmm3,%xmm2
000020b8	addss	0x84(%ebp),%xmm2
000020bd	cvttss2si	%xmm2,%edx
000020c1	xorb	%al,%al
000020c3	testl	%edx,%edx
000020c5	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
000020c7	js	0x000020d5
000020c9	movb	$0xff,%cl
000020cb	cmpl	$0x000000ff,%edx
000020d1	jg	0x000020d5
000020d3	movb	%dl,%cl
000020d5	addss	0x84(%ebp),%xmm1
000020da	cvttss2si	%xmm1,%edx
000020de	movb	%cl,0xd8(%ebp)
000020e1	testl	%edx,%edx
000020e3	js	0x000020f1
000020e5	movb	$0xff,%al
000020e7	cmpl	$0x000000ff,%edx
000020ed	jg	0x000020f1
000020ef	movb	%dl,%al
000020f1	addss	0x84(%ebp),%xmm0
000020f6	cvttss2si	%xmm0,%ecx
000020fa	movb	%al,0xd9(%ebp)
000020fd	xorb	%al,%al
000020ff	testl	%ecx,%ecx
00002101	js	0x0000210f
00002103	movb	$0xff,%al
00002105	cmpl	$0x000000ff,%ecx
0000210b	jg	0x0000210f
0000210d	movb	%cl,%al
0000210f	movb	%al,0xda(%ebp)
00002112	jmp	0x00002147
00002114	movl	%eax,%ebx
00002116	movl	0xffffff74(%ebp),%ecx
0000211c	movb	0x02(%ecx),%al
0000211f	movb	%al,0xda(%ebp)
00002122	movw	(%ecx),%ax
00002125	movw	%ax,0xd8(%ebp)
00002129	movl	%ebx,(%esp)
0000212c	movl	$0x000000ff,%esi
00002131	subl	%edx,%esi
00002133	movl	%edx,0x80(%ebp)
00002136	calll	CProceduralTexturePanel::GetImageHeight() const
0000213b	addl	%esi,%eax
0000213d	movl	0x000001f8(%ebx),%ecx
00002143	movb	%al,0xd8(%ebp,%ecx)
00002147	xorl	%ecx,%ecx
00002149	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe4(%ebp)
0000214d	movl	0xb4(%ebp),%eax
00002150	jle	0x00002338
00002156	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
00002160	movl	%ecx,0xa4(%ebp)
00002163	movl	%eax,0xb4(%ebp)
00002166	shrl	$0x10,%eax
00002169	movl	0xbc(%ebp),%ecx
0000216c	shll	$0x10,%ecx
0000216f	orl	%eax,%ecx
00002171	testb	%al,%al
00002173	jne	0x0000217d
00002175	movzbl	%cl,%eax
00002178	jmp	0x00002325
0000217d	movzbl	0xda(%ebp),%edx
00002181	movzbl	0xd9(%ebp),%ebx
00002185	movzbl	0xd8(%ebp),%esi
00002189	andl	0x8c(%ebp),%esi
0000218c	cmpb	$0x04,%al
0000218e	ja	0x00002236
00002194	movl	%ecx,0xc0(%ebp)
00002197	shrl	$0x10,%ecx
0000219a	shll	%cl,%esi
0000219c	andl	0xa8(%ebp),%edx
0000219f	andl	0xac(%ebp),%ebx
000021a2	movl	0xbc(%ebp),%ecx
000021a5	shrl	$0x10,%ecx
000021a8	shll	%cl,%ebx
000021aa	movl	0xb8(%ebp),%eax
000021ad	movswl	%ax,%ecx
000021b0	testw	%cx,%cx
000021b3	jle	0x000021b9
000021b5	shll	%cl,%edx
000021b7	jmp	0x000021bd
000021b9	negl	%ecx
000021bb	shrl	%cl,%edx
000021bd	movl	%edx,%edi
000021bf	shrl	$0x10,%eax
000021c2	movl	0xb0(%ebp),%ecx
000021c5	movzbl	%cl,%edx
000021c8	movb	%al,%cl
000021ca	shll	%cl,%edx
000021cc	movl	0xc0(%ebp),%eax
000021cf	movzbl	%al,%eax
000021d2	leal	0xff(%eax),%ecx
000021d5	cmpl	$0x03,%ecx
000021d8	ja	0x00002325
000021de	orl	%edx,%ebx
000021e0	orl	%esi,%ebx
000021e2	orl	%edi,%ebx
000021e4	movl	0x88(%ebp),%edx
000021e7	movl	0x0000076b(%edx,%ecx,4),%eax
000021ee	addl	%edx,%eax
000021f0	jmp	*%eax
000021f2	movl	0xc4(%ebp),%eax
000021f5	movb	%bl,(%eax)
000021f7	movl	$0x00000001,%eax
000021fc	jmp	0x00002325
00002201	movl	0xc4(%ebp),%eax
00002204	movw	%bx,(%eax)
00002207	movl	$0x00000002,%eax
0000220c	jmp	0x00002325
00002211	movl	0xc4(%ebp),%eax
00002214	movw	%bx,(%eax)
00002217	shrl	$0x10,%ebx
0000221a	movb	%bl,0x02(%eax)
0000221d	movl	$0x00000003,%eax
00002222	jmp	0x00002325
00002227	movl	0xc4(%ebp),%eax
0000222a	movl	%ebx,(%eax)
0000222c	movl	$0x00000004,%eax
00002231	jmp	0x00002325
00002236	movl	%ecx,%eax
00002238	movl	%ecx,0xc0(%ebp)
0000223b	shrl	$0x10,%eax
0000223e	movb	%al,%cl
00002240	xorl	%edi,%edi
00002242	shldl	%cl,%esi,%edi
00002245	movb	%al,%cl
00002247	shll	%cl,%esi
00002249	testb	$0x20,%al
0000224b	cmovnel	%esi,%edi
0000224e	movl	%edi,0x98(%ebp)
00002251	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%eax
00002256	cmovnel	%eax,%esi
00002259	movl	%esi,0xa0(%ebp)
0000225c	movl	%eax,%esi
0000225e	andl	0xac(%ebp),%ebx
00002261	movl	0xbc(%ebp),%eax
00002264	shrl	$0x10,%eax
00002267	movb	%al,%cl
00002269	xorl	%edi,%edi
0000226b	shldl	%cl,%ebx,%edi
0000226e	movb	%al,%cl
00002270	shll	%cl,%ebx
00002272	testb	$0x20,%al
00002274	cmovnel	%ebx,%edi
00002277	movl	%edi,0x9c(%ebp)
0000227a	cmovnel	%esi,%ebx
0000227d	movl	%ebx,0x90(%ebp)
00002280	andl	0xa8(%ebp),%edx
00002283	movl	0xb8(%ebp),%eax
00002286	movl	%edx,%edi
00002288	movswl	%ax,%edx
0000228b	movl	%eax,0x94(%ebp)
0000228e	testw	%dx,%dx
00002291	jle	0x000022a9
00002293	movb	%dl,%cl
00002295	xorl	%eax,%eax
00002297	shldl	%cl,%edi,%eax
0000229a	movb	%dl,%cl
0000229c	shll	%cl,%edi
0000229e	testb	$0x20,%dl
000022a1	cmovnel	%edi,%eax
000022a4	cmovnel	%esi,%edi
000022a7	jmp	0x000022bf
000022a9	negl	%edx
000022ab	movb	%dl,%cl
000022ad	shrdl	%cl,%esi,%edi
000022b0	movb	%dl,%cl
000022b2	xorl	%eax,%eax
000022b4	shrl	%cl,%eax
000022b6	testb	$0x20,%dl
000022b9	cmovnel	%eax,%edi
000022bc	cmovnel	%esi,%eax
000022bf	movl	0x94(%ebp),%ebx
000022c2	shrl	$0x10,%ebx
000022c5	movl	0xb0(%ebp),%ecx
000022c8	movzbl	%cl,%edx
000022cb	movb	%bl,%cl
000022cd	xorl	%esi,%esi
000022cf	shldl	%cl,%edx,%esi
000022d2	movb	%bl,%cl
000022d4	shll	%cl,%edx
000022d6	testb	$0x20,%bl
000022d9	cmovnel	%edx,%esi
000022dc	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%ecx
000022e1	cmovnel	%ecx,%edx
000022e4	movl	0x9c(%ebp),%ecx
000022e7	orl	%esi,%ecx
000022e9	orl	0x98(%ebp),%ecx
000022ec	orl	%eax,%ecx
000022ee	movl	0x90(%ebp),%esi
000022f1	orl	%edx,%esi
000022f3	orl	0xa0(%ebp),%esi
000022f6	orl	%edi,%esi
000022f8	movl	0xc0(%ebp),%eax
000022fb	movzbl	%al,%eax
000022fe	cmpl	$0x08,%eax
00002301	je	0x00002318
00002303	cmpl	$0x06,%eax
00002306	jne	0x00002325
00002308	movl	0xc4(%ebp),%eax
0000230b	movl	%esi,(%eax)
0000230d	movw	%cx,0x04(%eax)
00002311	movl	$0x00000006,%eax
00002316	jmp	0x00002325
00002318	movl	0xc4(%ebp),%eax
0000231b	movl	%esi,(%eax)
0000231d	movl	%ecx,0x04(%eax)
00002320	movl	$0x00000008,%eax
00002325	addl	%eax,0xc4(%ebp)
00002328	movl	0xa4(%ebp),%ecx
0000232b	incl	%ecx
0000232c	cmpl	0xe4(%ebp),%ecx
0000232f	movl	0xb4(%ebp),%eax
00002332	jl	0x00002160
00002338	movl	0x80(%ebp),%edx
0000233b	incl	%edx
0000233c	cmpl	0xe0(%ebp),%edx
0000233f	movl	0x88(%ebp),%ebx
00002342	jl	0x00001fe0
00002348	addl	$0x000000ac,%esp
0000234e	popl	%esi
0000234f	popl	%edi
00002350	popl	%ebx
00002351	popl	%ebp
00002352	ret
00002353	nop
00002354	addl	%eax,%cs:(%eax)
00002357	addb	%bl,%al
00002359	addb	(%eax),%al
0000235b	addb	%bl,%al
0000235d	addb	(%eax),%al
0000235f	addb	%dh,%al
00002361	addl	%eax,(%eax)
00002363	addb	%bl,%al
00002365	addb	(%eax),%al
00002367	addb	%bh,0xd8000002(%edi)
0000236d	addb	(%eax),%al
0000236f	addb	%bl,%al
00002371	addb	(%eax),%al
00002373	addb	%al,0xd8000002(%eax)
00002379	addb	(%eax),%al
0000237b	addb	%bl,%al
0000237d	addb	(%eax),%al
0000237f	addb	%bl,%al
00002381	addb	(%eax),%al
00002383	addb	%ah,0x01(%ebp)
00002386	addb	%al,(%eax)
00002388	fadds	(%edx)
0000238a	addb	%al,(%eax)
0000238c	fadds	(%edx)
0000238e	addb	%al,(%eax)
00002390	fadds	(%edx)
00002392	addb	%al,(%eax)
00002394	addb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),(%ecx)
00002397	addb	%bl,(%esi)
00002399	addb	(%eax),%al
0000239b	addb	%dl,0x02(%ebp)
0000239e	addb	%al,(%eax)
000023a0	movl	$0xd8000001,%ecx
000023a5	addb	(%eax),%al
000023a7	addb	%dl,0x02(%ebp)
000023aa	addb	%al,(%eax)
000023ac	fadds	(%edx)
000023ae	addb	%al,(%eax)
000023b0	addl	%eax,%cs:(%eax)
000023b3	addb	%dh,%bh
000023b5	addb	%al,(%eax)
000023b7	addb	%dh,0x02d80000(%edx,%eax)
000023be	addb	%al,(%eax)
000023c0	movl	%eax,(%eax)
000023c2	addb	%al,(%eax)
000023c4	fadds	(%edx)
000023c6	addb	%al,(%eax)
000023c8	rolb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),(%eax)
000023cb	addb	%dl,0xa0000005(%ecx)
000023d1	addl	$0x05b00000,%eax
000023d6	addb	%al,(%eax)
000023d8	movb	$0x40,0x1f0f0000
000023df	addb	%dl,0x89(%ebp)
000023e2	inl	$0x83,%eax
000023e4	inb	%dx,%al
000023e5	sbbb	%cl,0x44891045(%ebx)
000023eb	andb	$0x08,%al
000023ed	movl	$0xfffffe54,%eax
000023f2	addl	0x08(%ebp),%eax
000023f5	movl	%eax,(%esp)
000023f8	calll	CColorZPreview::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*)
000023fd	addl	$0x18,%esp
00002400	popl	%ebp
00002401	ret
00002402	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::UpdateColorFromMouse(int, int):
00002410	pushl	%ebp
00002411	movl	%esp,%ebp
00002413	pushl	%ebx
00002414	pushl	%edi
00002415	pushl	%esi
00002416	subl	$0x7c,%esp
00002419	calll	0x0000241e
0000241e	popl	%ebx
0000241f	leal	0xd0(%ebp),%eax
00002422	movl	%eax,0x08(%esp)
00002426	leal	0xd4(%ebp),%eax
00002429	movl	%eax,0x04(%esp)
0000242d	movl	0x08(%ebp),%edi
00002430	movl	%edi,(%esp)
00002433	calll	vgui::Panel::GetSize(int&, int&)
00002438	movl	0xd0(%ebp),%eax
0000243b	leal	0xf4(%eax),%ecx
0000243e	movl	%ecx,0xd0(%ebp)
00002441	movl	%edi,(%esp)
00002444	movl	0x10(%ebp),%ecx
00002447	addl	$0xfa,%ecx
0000244a	cvtsi2ss	%ecx,%xmm1
0000244e	addl	$0xf3,%eax
00002451	cvtsi2ss	%eax,%xmm0
00002455	divss	%xmm0,%xmm1
00002459	xorps	%xmm0,%xmm0
0000245c	maxss	%xmm0,%xmm1
00002460	minss	0x5f6ac-0x241e(%ebx),%xmm1
00002468	movaps	%xmm1,0x98(%ebp)
0000246c	calll	CProceduralTexturePanel::GetImageHeight() const
00002471	decl	%eax
00002472	cvtsi2ss	%eax,%xmm0
00002476	movaps	0x98(%ebp),%xmm1
0000247a	mulss	%xmm1,%xmm0
0000247e	addss	0x5f6b0-0x241e(%ebx),%xmm0
00002486	cvttss2si	%xmm0,%esi
0000248a	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%edi)
00002491	je	0x000026a1
00002497	movss	0x00000200(%edi),%xmm0
0000249f	movss	%xmm0,0xc0(%ebp)
000024a4	movss	0x00000204(%edi),%xmm0
000024ac	movss	%xmm0,0xc4(%ebp)
000024b1	movss	0x00000208(%edi),%xmm0
000024b9	movss	%xmm0,0xc8(%ebp)
000024be	movl	%edi,(%esp)
000024c1	notl	%esi
000024c3	calll	CProceduralTexturePanel::GetImageHeight() const
000024c8	addl	%esi,%eax
000024ca	cvtsi2ss	%eax,%xmm0
000024ce	divss	0x5f6b4-0x241e(%ebx),%xmm0
000024d6	movl	0x000001f8(%edi),%eax
000024dc	movss	%xmm0,0xc0(%ebp,%eax,4)
000024e2	testl	%eax,%eax
000024e4	jne	0x00002503
000024e6	movss	0xc0(%ebp),%xmm0
000024eb	ucomiss	0x5f6b8-0x241e(%ebx),%xmm0
000024f2	jne	0x000024f6
000024f4	jnp	0x00002503
000024f6	mulss	0x5f6bc-0x241e(%ebx),%xmm0
000024fe	movss	%xmm0,0xc0(%ebp)
00002503	movl	$0x00000020,(%esp)
0000250a	calll	KeyValues::operator new(unsigned long)
0000250f	movl	%eax,%esi
00002511	leal	0x6509d-0x241e(%ebx),%eax
00002517	movl	%eax,0x04(%esp)
0000251b	movl	%esi,(%esp)
0000251e	calll	KeyValues::KeyValues(char const*)
00002523	movss	0xc0(%ebp),%xmm0
00002528	movss	%xmm0,0x08(%esp)
0000252e	leal	0x650a9-0x241e(%ebx),%eax
00002534	movl	%eax,0x04(%esp)
00002538	movl	%esi,(%esp)
0000253b	calll	KeyValues::SetFloat(char const*, float)
00002540	movss	0xc4(%ebp),%xmm0
00002545	movss	%xmm0,0x08(%esp)
0000254b	leal	0x650ad-0x241e(%ebx),%eax
00002551	movl	%eax,0x04(%esp)
00002555	movl	%esi,(%esp)
00002558	calll	KeyValues::SetFloat(char const*, float)
0000255d	movss	0xc8(%ebp),%xmm0
00002562	movss	%xmm0,0x08(%esp)
00002568	leal	0x650b8-0x241e(%ebx),%eax
0000256e	movl	%eax,0x04(%esp)
00002572	movl	%esi,(%esp)
00002575	calll	KeyValues::SetFloat(char const*, float)
0000257a	movl	(%edi),%eax
0000257c	movl	%esi,0x04(%esp)
00002580	movl	%edi,(%esp)
00002583	call	*0x000000c0(%eax)
00002589	leal	0xe8(%ebp),%eax
0000258c	movl	%eax,0x04(%esp)
00002590	leal	0xc0(%ebp),%eax
00002593	movl	%eax,(%esp)
00002596	calll	HSVtoRGB(Vector const&, Vector&)
0000259b	movss	0x5f6b4-0x241e(%ebx),%xmm3
000025a3	movss	0xf0(%ebp),%xmm0
000025a8	mulss	%xmm3,%xmm0
000025ac	movss	0x5f6b0-0x241e(%ebx),%xmm1
000025b4	movss	0xec(%ebp),%xmm2
000025b9	mulss	%xmm3,%xmm2
000025bd	mulss	0xe8(%ebp),%xmm3
000025c2	addss	%xmm1,%xmm3
000025c6	cvttss2si	%xmm3,%edx
000025ca	xorb	%al,%al
000025cc	testl	%edx,%edx
000025ce	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
000025d0	js	0x000025de
000025d2	movb	$0xff,%cl
000025d4	cmpl	$0x000000ff,%edx
000025da	jg	0x000025de
000025dc	movb	%dl,%cl
000025de	addss	%xmm1,%xmm2
000025e2	cvttss2si	%xmm2,%edx
000025e6	testl	%edx,%edx
000025e8	js	0x000025f6
000025ea	movb	$0xff,%al
000025ec	cmpl	$0x000000ff,%edx
000025f2	jg	0x000025f6
000025f4	movb	%dl,%al
000025f6	addss	%xmm1,%xmm0
000025fa	cvttss2si	%xmm0,%ebx
000025fe	xorb	%dl,%dl
00002600	testl	%ebx,%ebx
00002602	js	0x00002610
00002604	movb	$0xff,%dl
00002606	cmpl	$0x000000ff,%ebx
0000260c	jg	0x00002610
0000260e	movb	%bl,%dl
00002610	cmpb	0x000001fc(%edi),%cl
00002616	jne	0x00002658
00002618	cmpb	0x000001fd(%edi),%al
0000261e	jne	0x00002658
00002620	cmpb	0x000001fe(%edi),%dl
00002626	jne	0x00002658
00002628	movss	0xc0(%ebp),%xmm0
0000262d	ucomiss	0x00000200(%edi),%xmm0
00002634	jne	0x00002658
00002636	jp	0x00002658
00002638	movss	0xc4(%ebp),%xmm0
0000263d	ucomiss	0x00000204(%edi),%xmm0
00002644	jne	0x00002658
00002646	jp	0x00002658
00002648	movss	0xc8(%ebp),%xmm0
0000264d	ucomiss	0x00000208(%edi),%xmm0
00002654	jne	0x00002658
00002656	jnp	0x00002699
00002658	movb	%cl,0x000001fc(%edi)
0000265e	movb	%al,0x000001fd(%edi)
00002664	movb	%dl,0x000001fe(%edi)
0000266a	movss	0xc0(%ebp),%xmm0
0000266f	movss	%xmm0,0x00000200(%edi)
00002677	movss	0xc4(%ebp),%xmm0
0000267c	movss	%xmm0,0x00000204(%edi)
00002684	movss	0xc8(%ebp),%xmm0
00002689	movss	%xmm0,0x00000208(%edi)
00002691	movl	%edi,(%esp)
00002694	calll	CProceduralTexturePanel::DownloadTexture()
00002699	addl	$0x7c,%esp
0000269c	popl	%esi
0000269d	popl	%edi
0000269e	popl	%ebx
0000269f	popl	%ebp
000026a0	ret
000026a1	movb	0x000001fe(%edi),%al
000026a7	movb	%al,0xba(%ebp)
000026aa	movw	0x000001fc(%edi),%ax
000026b1	movw	%ax,0xb8(%ebp)
000026b5	movl	%edi,(%esp)
000026b8	movl	$0x000000ff,%edi
000026bd	subl	%esi,%edi
000026bf	calll	CProceduralTexturePanel::GetImageHeight() const
000026c4	addl	%edi,%eax
000026c6	movl	0x08(%ebp),%edi
000026c9	movl	0x000001f8(%edi),%ecx
000026cf	movb	%al,0xb8(%ebp,%ecx)
000026d3	movzbl	0xba(%ebp),%eax
000026d7	movl	%eax,0x94(%ebp)
000026da	movl	%ebx,%esi
000026dc	movl	%esi,0x8c(%ebp)
000026df	movzbl	0xb9(%ebp),%eax
000026e3	movl	%eax,0x98(%ebp)
000026e6	movzbl	0xb8(%ebp),%eax
000026ea	movl	%eax,0x90(%ebp)
000026ed	movl	$0x00000020,(%esp)
000026f4	calll	KeyValues::operator new(unsigned long)
000026f9	movl	%eax,%ebx
000026fb	leal	0x650be-0x241e(%esi),%eax
00002701	movl	%eax,0x04(%esp)
00002705	movl	%ebx,(%esp)
00002708	calll	KeyValues::KeyValues(char const*)
0000270d	movl	0x98(%ebp),%eax
00002710	shll	$0x08,%eax
00002713	addl	0x90(%ebp),%eax
00002716	movl	0x94(%ebp),%ecx
00002719	shll	$0x10,%ecx
0000271c	orl	%eax,%ecx
0000271e	orl	$0xff000000,%ecx
00002724	movl	%ecx,0xb4(%ebp)
00002727	movl	0xb4(%ebp),%eax
0000272a	movl	%eax,0x08(%esp)
0000272e	movl	0x8c(%ebp),%esi
00002731	leal	0x650cc-0x241e(%esi),%eax
00002737	movl	%eax,0x04(%esp)
0000273b	movl	%ebx,(%esp)
0000273e	calll	KeyValues::SetColor(char const*, Color)
00002743	movl	(%edi),%eax
00002745	movl	%ebx,0x04(%esp)
00002749	movl	%edi,(%esp)
0000274c	call	*0x000000c0(%eax)
00002752	movl	0x90(%ebp),%ebx
00002755	cvtsi2ss	%ebx,%xmm1
00002759	movss	0x5f6b4-0x241e(%esi),%xmm0
00002761	divss	%xmm0,%xmm1
00002765	movss	%xmm1,0xd8(%ebp)
0000276a	cvtsi2ss	0x98(%ebp),%xmm1
0000276f	divss	%xmm0,%xmm1
00002773	movss	%xmm1,0xdc(%ebp)
00002778	movl	0x94(%ebp),%esi
0000277b	cvtsi2ss	%esi,%xmm1
0000277f	divss	%xmm0,%xmm1
00002783	movss	%xmm1,0xe0(%ebp)
00002788	leal	0xa8(%ebp),%eax
0000278b	movl	%eax,0x04(%esp)
0000278f	leal	0xd8(%ebp),%eax
00002792	movl	%eax,(%esp)
00002795	calll	RGBtoHSV(Vector const&, Vector&)
0000279a	cmpb	0x000001fc(%edi),%bl
000027a0	movl	%esi,%eax
000027a2	jne	0x000027eb
000027a4	movl	0x98(%ebp),%ecx
000027a7	cmpb	0x000001fd(%edi),%cl
000027ad	jne	0x000027eb
000027af	cmpb	0x000001fe(%edi),%al
000027b5	jne	0x000027eb
000027b7	movss	0xa8(%ebp),%xmm0
000027bc	ucomiss	0x00000200(%edi),%xmm0
000027c3	jne	0x000027eb
000027c5	jp	0x000027eb
000027c7	movss	0xac(%ebp),%xmm0
000027cc	ucomiss	0x00000204(%edi),%xmm0
000027d3	jne	0x000027eb
000027d5	jp	0x000027eb
000027d7	movss	0xb0(%ebp),%xmm0
000027dc	ucomiss	0x00000208(%edi),%xmm0
000027e3	jne	0x000027eb
000027e5	jnp	0x00002699
000027eb	leal	0x000001fc(%edi),%eax
000027f1	movb	0xba(%ebp),%cl
000027f4	movb	%cl,0x02(%eax)
000027f7	movw	0xb8(%ebp),%cx
000027fb	movw	%cx,(%eax)
000027fe	movss	0xa8(%ebp),%xmm0
00002803	movss	%xmm0,0x00000200(%edi)
0000280b	movss	0xac(%ebp),%xmm0
00002810	movss	%xmm0,0x00000204(%edi)
00002818	movss	0xb0(%ebp),%xmm0
0000281d	jmp	0x00002689
00002822	movl	%eax,%edi
00002824	movl	%ebx,(%esp)
00002827	calll	KeyValues::operator delete(void*)
0000282c	jmp	0x00002838
0000282e	movl	%eax,%edi
00002830	movl	%esi,(%esp)
00002833	calll	KeyValues::operator delete(void*)
00002838	movl	%edi,(%esp)
0000283b	calll	__Unwind_Resume
00002840	calll	std::terminate()
00002845	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::OnMousePressed(ButtonCode_t):
00002850	pushl	%ebp
00002851	movl	%esp,%ebp
00002853	pushl	%ebx
00002854	pushl	%edi
00002855	pushl	%esi
00002856	subl	$0x1c,%esp
00002859	calll	0x0000285e
0000285e	popl	%edi
0000285f	movl	0x0c(%ebp),%esi
00002862	movl	%esi,0x04(%esp)
00002866	movl	0x08(%ebp),%ebx
00002869	movl	%ebx,(%esp)
0000286c	calll	vgui::Panel::OnMousePressed(ButtonCode_t)
00002871	cmpl	$0x6b,%esi
00002874	jne	0x000028e0
00002876	testb	$0x01,0x0000020c(%ebx)
0000287d	jne	0x000028e0
0000287f	movb	$0x01,0x0000020c(%ebx)
00002886	movl	0x6bd18-0x285e(%edi),%edi
0000288c	movl	%ebx,%esi
0000288e	movl	(%edi),%ebx
00002890	movl	(%ebx),%eax
00002892	movl	0x0c(%eax),%eax
00002895	movl	%eax,0xe8(%ebp)
00002898	movl	(%esi),%eax
0000289a	movl	%esi,(%esp)
0000289d	call	(%eax)
0000289f	movl	%eax,0x04(%esp)
000028a3	movl	%ebx,(%esp)
000028a6	call	*0xe8(%ebp)
000028a9	movl	(%edi),%ecx
000028ab	movl	(%ecx),%eax
000028ad	leal	0xec(%ebp),%ebx
000028b0	movl	%ebx,0x08(%esp)
000028b4	leal	0xf0(%ebp),%edi
000028b7	movl	%edi,0x04(%esp)
000028bb	movl	%ecx,(%esp)
000028be	call	*0x24(%eax)
000028c1	movl	%ebx,0x08(%esp)
000028c5	movl	%edi,0x04(%esp)
000028c9	movl	%esi,(%esp)
000028cc	calll	vgui::Panel::ScreenToLocal(int&, int&)
000028d1	movl	0xec(%ebp),%eax
000028d4	movl	%eax,0x08(%esp)
000028d8	movl	%esi,(%esp)
000028db	calll	CColorZPreview::UpdateColorFromMouse(int, int)
000028e0	addl	$0x1c,%esp
000028e3	popl	%esi
000028e4	popl	%edi
000028e5	popl	%ebx
000028e6	popl	%ebp
000028e7	ret
000028e8	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::OnMouseReleased(ButtonCode_t):
000028f0	pushl	%ebp
000028f1	movl	%esp,%ebp
000028f3	pushl	%ebx
000028f4	pushl	%edi
000028f5	pushl	%esi
000028f6	subl	$0x0c,%esp
000028f9	calll	0x000028fe
000028fe	popl	%esi
000028ff	movl	0x0c(%ebp),%ebx
00002902	movl	%ebx,0x04(%esp)
00002906	movl	0x08(%ebp),%edi
00002909	movl	%edi,(%esp)
0000290c	calll	vgui::Panel::OnMouseReleased(ButtonCode_t)
00002911	cmpl	$0x6b,%ebx
00002914	jne	0x0000293e
00002916	testb	$0x01,0x0000020c(%edi)
0000291d	je	0x0000293e
0000291f	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000020c(%edi)
00002926	movl	0x6bd18-0x28fe(%esi),%eax
0000292c	movl	(%eax),%ecx
0000292e	movl	(%ecx),%eax
00002930	movl	%ecx,(%esp)
00002933	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000293b	call	*0x0c(%eax)
0000293e	addl	$0x0c,%esp
00002941	popl	%esi
00002942	popl	%edi
00002943	popl	%ebx
00002944	popl	%ebp
00002945	ret
00002946	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorZPreview::OnCursorMoved(int, int):
00002950	pushl	%ebp
00002951	movl	%esp,%ebp
00002953	pushl	%edi
00002954	pushl	%esi
00002955	subl	$0x10,%esp
00002958	movl	0x10(%ebp),%esi
0000295b	movl	%esi,0x08(%esp)
0000295f	movl	0x0c(%ebp),%eax
00002962	movl	%eax,0x04(%esp)
00002966	movl	0x08(%ebp),%edi
00002969	movl	%edi,(%esp)
0000296c	calll	vgui::Panel::OnCursorMoved(int, int)
00002971	testb	$0x01,0x0000020c(%edi)
00002978	je	0x00002986
0000297a	movl	%esi,0x08(%esp)
0000297e	movl	%edi,(%esp)
00002981	calll	CColorZPreview::UpdateColorFromMouse(int, int)
00002986	addl	$0x10,%esp
00002989	popl	%esi
0000298a	popl	%edi
0000298b	popl	%ebp
0000298c	ret
0000298d	nopl	(%eax)
CColorZPreview::Paint():
00002990	pushl	%ebp
00002991	movl	%esp,%ebp
00002993	pushl	%ebx
00002994	pushl	%edi
00002995	pushl	%esi
00002996	subl	$0x5c,%esp
00002999	calll	0x0000299e
0000299e	popl	%edi
0000299f	movl	0x6bd14-0x299e(%edi),%eax
000029a5	movl	%eax,0xb8(%ebp)
000029a8	movl	(%eax),%eax
000029aa	movl	%eax,0xf0(%ebp)
000029ad	movl	0x08(%ebp),%ebx
000029b0	movl	%ebx,(%esp)
000029b3	calll	CProceduralTexturePanel::Paint()
000029b8	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%ebx)
000029bf	je	0x00002a36
000029c1	movl	0x00000208(%ebx),%eax
000029c7	movl	%eax,0xe8(%ebp)
000029ca	movsd	0x00000200(%ebx),%xmm0
000029d2	movsd	%xmm0,0xe0(%ebp)
000029d7	movss	0xe0(%ebp),%xmm0
000029dc	ucomiss	0x5f6c0-0x299e(%edi),%xmm0
000029e3	jne	0x000029e7
000029e5	jnp	0x000029f4
000029e7	mulss	0x5f6c4-0x299e(%edi),%xmm0
000029ef	movss	%xmm0,0xe0(%ebp)
000029f4	movss	0x5f6c8-0x299e(%edi),%xmm0
000029fc	movss	0xe4(%ebp),%xmm1
00002a01	mulss	%xmm0,%xmm1
00002a05	movss	%xmm1,0xe4(%ebp)
00002a0a	mulss	0xe8(%ebp),%xmm0
00002a0f	movss	%xmm0,0xe8(%ebp)
00002a14	movl	%ebx,(%esp)
00002a17	calll	CProceduralTexturePanel::GetImageHeight() const
00002a1c	movl	0x000001f8(%ebx),%ecx
00002a22	movss	0xe0(%ebp,%ecx,4),%xmm0
00002a28	addss	0x5f6cc-0x299e(%edi),%xmm0
00002a30	cvttss2si	%xmm0,%ecx
00002a34	jmp	0x00002a4c
00002a36	movl	%ebx,(%esp)
00002a39	calll	CProceduralTexturePanel::GetImageHeight() const
00002a3e	movl	0x000001f8(%ebx),%ecx
00002a44	movzbl	0x000001fc(%ebx,%ecx),%ecx
00002a4c	negl	%ecx
00002a4e	leal	0xff(%eax,%ecx),%eax
00002a52	movl	%eax,0xbc(%ebp)
00002a55	leal	0xd8(%ebp),%eax
00002a58	movl	%eax,0x08(%esp)
00002a5c	leal	0xdc(%ebp),%eax
00002a5f	movl	%eax,0x04(%esp)
00002a63	movl	%ebx,(%esp)
00002a66	calll	vgui::Panel::GetSize(int&, int&)
00002a6b	movl	0xd8(%ebp),%esi
00002a6e	addl	$0xf4,%esi
00002a71	movl	%esi,0xd8(%ebp)
00002a74	movl	0x6bd1c-0x299e(%edi),%ebx
00002a7a	movl	(%ebx),%ecx
00002a7c	movl	(%ecx),%eax
00002a7e	movl	%ecx,(%esp)
00002a81	movl	$0x000000ff,0x10(%esp)
00002a89	movl	$0x000000ff,0x0c(%esp)
00002a91	movl	$0x000000ff,0x08(%esp)
00002a99	movl	$0x000000ff,0x04(%esp)
00002aa1	call	*0x28(%eax)
00002aa4	movl	0x653c0-0x299e+0x00000008(%edi),%eax
00002aaa	movl	%eax,0xd4(%ebp)
00002aad	movsd	0x653c0-0x299e(%edi),%xmm0
00002ab5	movsd	%xmm0,0xcc(%ebp)
00002aba	cvtsi2ss	0xbc(%ebp),%xmm1
00002abf	cvtsi2ss	%esi,%xmm0
00002ac3	mulss	%xmm1,%xmm0
00002ac7	divss	0x5f6c8-0x299e(%edi),%xmm0
00002acf	addss	0x5f6cc-0x299e(%edi),%xmm0
00002ad7	cvttss2si	%xmm0,%eax
00002adb	movl	%eax,0xc0(%ebp)
00002ade	leal	0x0c(%eax),%ecx
00002ae1	movl	%ecx,0xc4(%ebp)
00002ae4	addl	$0x06,%eax
00002ae7	movl	%eax,0xc8(%ebp)
00002aea	movl	(%ebx),%ecx
00002aec	movl	(%ecx),%eax
00002aee	leal	0xc0(%ebp),%esi
00002af1	movl	%esi,0x08(%esp)
00002af5	leal	0xcc(%ebp),%edi
00002af8	movl	%edi,0x04(%esp)
00002afc	movl	%ecx,(%esp)
00002aff	movl	$0x00000003,0x0c(%esp)
00002b07	call	*0x40(%eax)
00002b0a	movl	0xdc(%ebp),%eax
00002b0d	leal	0xff(%eax),%ecx
00002b10	movl	%ecx,0xd0(%ebp)
00002b13	movl	%ecx,0xcc(%ebp)
00002b16	addl	$0xf9,%eax
00002b19	movl	%eax,0xd4(%ebp)
00002b1c	movl	(%ebx),%ecx
00002b1e	movl	(%ecx),%eax
00002b20	movl	%esi,0x08(%esp)
00002b24	movl	%edi,0x04(%esp)
00002b28	movl	%ecx,(%esp)
00002b2b	movl	$0x00000003,0x0c(%esp)
00002b33	call	*0x40(%eax)
00002b36	movl	0xb8(%ebp),%eax
00002b39	movl	(%eax),%eax
00002b3b	cmpl	0xf0(%ebp),%eax
00002b3e	jne	0x00002b48
00002b40	addl	$0x5c,%esp
00002b43	popl	%esi
00002b44	popl	%edi
00002b45	popl	%ebx
00002b46	popl	%ebp
00002b47	ret
00002b48	calll	___stack_chk_fail
00002b4d	nopl	(%eax)
CColorPickerPanel::CColorPickerPanel(vgui::Panel*, char const*):
00002b50	pushl	%ebp
00002b51	movl	%esp,%ebp
00002b53	pushl	%ebx
00002b54	pushl	%edi
00002b55	pushl	%esi
00002b56	subl	$0x4c,%esp
00002b59	calll	0x00002b5e
00002b5e	popl	%esi
00002b5f	movl	0x10(%ebp),%eax
00002b62	movl	%eax,0x0c(%esp)
00002b66	movl	0x0c(%ebp),%eax
00002b69	movl	%eax,0x08(%esp)
00002b6d	leal	VTT for CColorPickerPanel-0x2b5e+0x00000004(%esi),%eax
00002b73	movl	%eax,0xc8(%ebp)
00002b76	movl	%eax,0x04(%esp)
00002b7a	movl	0x08(%ebp),%ebx
00002b7d	movl	%ebx,(%esp)
00002b80	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00002b85	movl	%esi,%ecx
00002b87	leal	vtable for CColorPickerPanel-0x2b5e+0x0000000c(%ecx),%eax
00002b8d	movl	%eax,(%ebx)
00002b8f	testb	$0x01,CColorPickerPanel::ChainToMap()::chained-0x2b5e(%ecx)
00002b96	jne	0x00002bd5
00002b98	movb	$0x01,CColorPickerPanel::ChainToMap()::chained-0x2b5e(%ecx)
00002b9f	leal	0x6531f-0x2b5e(%ecx),%eax
00002ba5	movl	%ecx,%edi
00002ba7	movl	%eax,(%esp)
00002baa	calll	vgui::FindOrAddPanelMessageMap(char const*)
00002baf	movl	%eax,%esi
00002bb1	movl	%edi,%ecx
00002bb3	leal	CColorPickerPanel::GetPanelClassName()-0x2b5e(%ecx),%eax
00002bb9	movl	%eax,0x1c(%esi)
00002bbc	testl	%esi,%esi
00002bbe	je	0x00002bd5
00002bc0	leal	0x65369-0x2b5e(%ecx),%eax
00002bc6	movl	%ecx,%edi
00002bc8	movl	%eax,(%esp)
00002bcb	calll	vgui::FindOrAddPanelMessageMap(char const*)
00002bd0	movl	%eax,0x18(%esi)
00002bd3	movl	%edi,%ecx
00002bd5	testb	$0x01,CColorPickerPanel::ChainToAnimationMap()::chained-0x2b5e(%ecx)
00002bdc	jne	0x00002c1b
00002bde	movb	$0x01,CColorPickerPanel::ChainToAnimationMap()::chained-0x2b5e(%ecx)
00002be5	leal	0x6531f-0x2b5e(%ecx),%eax
00002beb	movl	%ecx,%edi
00002bed	movl	%eax,(%esp)
00002bf0	calll	FindOrAddPanelAnimationMap(char const*)
00002bf5	movl	%eax,%esi
00002bf7	movl	%edi,%ecx
00002bf9	leal	CColorPickerPanel::GetPanelClassName()-0x2b5e(%ecx),%eax
00002bff	movl	%eax,0x18(%esi)
00002c02	testl	%esi,%esi
00002c04	je	0x00002c1b
00002c06	leal	0x65369-0x2b5e(%ecx),%eax
00002c0c	movl	%ecx,%edi
00002c0e	movl	%eax,(%esp)
00002c11	calll	FindOrAddPanelAnimationMap(char const*)
00002c16	movl	%eax,0x14(%esi)
00002c19	movl	%edi,%ecx
00002c1b	testb	$0x01,CColorPickerPanel::KB_ChainToMap()::chained-0x2b5e(%ecx)
00002c22	jne	0x00002c61
00002c24	movb	$0x01,CColorPickerPanel::KB_ChainToMap()::chained-0x2b5e(%ecx)
00002c2b	leal	0x6531f-0x2b5e(%ecx),%eax
00002c31	movl	%ecx,%edi
00002c33	movl	%eax,(%esp)
00002c36	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00002c3b	movl	%eax,%esi
00002c3d	movl	%edi,%ecx
00002c3f	leal	CColorPickerPanel::GetPanelClassName()-0x2b5e(%ecx),%eax
00002c45	movl	%eax,0x44(%esi)
00002c48	testl	%esi,%esi
00002c4a	je	0x00002c61
00002c4c	leal	0x65369-0x2b5e(%ecx),%eax
00002c52	movl	%ecx,%edi
00002c54	movl	%eax,(%esp)
00002c57	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00002c5c	movl	%eax,0x18(%esi)
00002c5f	movl	%edi,%ecx
00002c61	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnRadioButtonChecked::InitVar()::bAdded-0x2b5e(%ecx)
00002c68	movl	%ecx,%esi
00002c6a	jne	0x00002cc2
00002c6c	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnRadioButtonChecked::InitVar()::bAdded-0x2b5e(%esi)
00002c73	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xd4(%ebp)
00002c7a	movl	$0x000003ad,0xd0(%ebp)
00002c81	movsd	0xd0(%ebp),%xmm0
00002c86	movsd	%xmm0,0x04(%esp)
00002c8c	leal	0x65356-0x2b5e(%esi),%eax
00002c92	movl	%eax,(%esp)
00002c95	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00002c9d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00002ca5	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00002cad	movl	$0x00000006,0x10(%esp)
00002cb5	movl	$0x00000001,0x0c(%esp)
00002cbd	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002cc2	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x2b5e(%esi)
00002cc9	jne	0x00002d21
00002ccb	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x2b5e(%esi)
00002cd2	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xdc(%ebp)
00002cd9	movl	$0x000003b1,0xd8(%ebp)
00002ce0	movsd	0xd8(%ebp),%xmm0
00002ce5	movsd	%xmm0,0x04(%esp)
00002ceb	leal	0x6534a-0x2b5e(%esi),%eax
00002cf1	movl	%eax,(%esp)
00002cf4	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00002cfc	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00002d04	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00002d0c	movl	$0x00000006,0x10(%esp)
00002d14	movl	$0x00000001,0x0c(%esp)
00002d1c	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002d21	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnHSVSelected::InitVar()::bAdded-0x2b5e(%esi)
00002d28	jne	0x00002d80
00002d2a	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnHSVSelected::InitVar()::bAdded-0x2b5e(%esi)
00002d31	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe4(%ebp)
00002d38	movl	$0x000003b5,0xe0(%ebp)
00002d3f	movsd	0xe0(%ebp),%xmm0
00002d44	movsd	%xmm0,0x04(%esp)
00002d4a	leal	0x6509d-0x2b5e(%esi),%eax
00002d50	movl	%eax,(%esp)
00002d53	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00002d5b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00002d63	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00002d6b	movl	$0x00000006,0x10(%esp)
00002d73	movl	$0x00000001,0x0c(%esp)
00002d7b	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002d80	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnColorSelected::InitVar()::bAdded-0x2b5e(%esi)
00002d87	jne	0x00002ddf
00002d89	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnColorSelected::InitVar()::bAdded-0x2b5e(%esi)
00002d90	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xec(%ebp)
00002d97	movl	$0x000003b9,0xe8(%ebp)
00002d9e	movsd	0xe8(%ebp),%xmm0
00002da3	movsd	%xmm0,0x04(%esp)
00002da9	leal	0x650be-0x2b5e(%esi),%eax
00002daf	movl	%eax,(%esp)
00002db2	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00002dba	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00002dc2	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00002dca	movl	$0x00000006,0x10(%esp)
00002dd2	movl	$0x00000001,0x0c(%esp)
00002dda	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002ddf	movl	$0x00000214,(%esp)
00002de6	calll	operator new(unsigned long)
00002deb	movl	%eax,%edi
00002ded	leal	0x650d2-0x2b5e(%esi),%eax
00002df3	movl	%eax,0x08(%esp)
00002df7	movl	%ebx,0x04(%esp)
00002dfb	movl	%edi,(%esp)
00002dfe	calll	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)
00002e03	movl	%edi,0x000001b0(%ebx)
00002e09	movl	$0x00000210,(%esp)
00002e10	calll	operator new(unsigned long)
00002e15	movl	%eax,%edi
00002e17	leal	0x650e1-0x2b5e(%esi),%eax
00002e1d	movl	%eax,0x08(%esp)
00002e21	movl	%ebx,0x04(%esp)
00002e25	movl	%edi,(%esp)
00002e28	calll	CColorZPreview::CColorZPreview(vgui::Panel*, char const*)
00002e2d	movl	%edi,0x000001b4(%ebx)
00002e33	movl	0x000001b0(%ebx),%eax
00002e39	movl	(%eax),%ecx
00002e3b	movl	0x000000b4(%ecx),%ecx
00002e41	movl	%ebx,0x04(%esp)
00002e45	movl	%eax,(%esp)
00002e48	call	*%ecx
00002e4a	movl	$0x00000240,(%esp)
00002e51	calll	operator new(unsigned long)
00002e56	movl	%eax,%edi
00002e58	leal	0x650f8-0x2b5e(%esi),%eax
00002e5e	movl	%eax,0x0c(%esp)
00002e62	leal	0x650ef-0x2b5e(%esi),%eax
00002e68	movl	%eax,0x08(%esp)
00002e6c	movl	%ebx,0x04(%esp)
00002e70	movl	%edi,(%esp)
00002e73	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002e78	movl	%edi,0x000001b8(%ebx)
00002e7e	movl	$0x00000240,(%esp)
00002e85	calll	operator new(unsigned long)
00002e8a	movl	%eax,%edi
00002e8c	leal	0x6510a-0x2b5e(%esi),%eax
00002e92	movl	%eax,0x0c(%esp)
00002e96	leal	0x650fa-0x2b5e(%esi),%eax
00002e9c	movl	%eax,0x08(%esp)
00002ea0	movl	%ebx,0x04(%esp)
00002ea4	movl	%edi,(%esp)
00002ea7	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002eac	movl	%edi,0x000001bc(%ebx)
00002eb2	movl	$0x00000240,(%esp)
00002eb9	calll	operator new(unsigned long)
00002ebe	movl	%eax,%edi
00002ec0	leal	0x65117-0x2b5e(%esi),%eax
00002ec6	movl	%eax,0x0c(%esp)
00002eca	leal	0x6510c-0x2b5e(%esi),%eax
00002ed0	movl	%eax,0x08(%esp)
00002ed4	movl	%ebx,0x04(%esp)
00002ed8	movl	%edi,(%esp)
00002edb	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002ee0	movl	%edi,0x000001c0(%ebx)
00002ee6	movl	$0x00000240,(%esp)
00002eed	calll	operator new(unsigned long)
00002ef2	movl	%eax,%edi
00002ef4	leal	0x65122-0x2b5e(%esi),%eax
00002efa	movl	%eax,0x0c(%esp)
00002efe	leal	0x65119-0x2b5e(%esi),%eax
00002f04	movl	%eax,0x08(%esp)
00002f08	movl	%ebx,0x04(%esp)
00002f0c	movl	%edi,(%esp)
00002f0f	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002f14	movl	%edi,0x000001c4(%ebx)
00002f1a	movl	$0x00000240,(%esp)
00002f21	calll	operator new(unsigned long)
00002f26	movl	%eax,%edi
00002f28	leal	0x6512f-0x2b5e(%esi),%eax
00002f2e	movl	%eax,0x0c(%esp)
00002f32	leal	0x65124-0x2b5e(%esi),%eax
00002f38	movl	%eax,0x08(%esp)
00002f3c	movl	%ebx,0x04(%esp)
00002f40	movl	%edi,(%esp)
00002f43	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002f48	movl	%edi,0x000001c8(%ebx)
00002f4e	movl	$0x00000240,(%esp)
00002f55	calll	operator new(unsigned long)
00002f5a	movl	%eax,%edi
00002f5c	leal	0x6513b-0x2b5e(%esi),%eax
00002f62	movl	%eax,0x0c(%esp)
00002f66	leal	0x65131-0x2b5e(%esi),%eax
00002f6c	movl	%eax,0x08(%esp)
00002f70	movl	%ebx,0x04(%esp)
00002f74	movl	%edi,(%esp)
00002f77	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00002f7c	movl	%edi,0x000001cc(%ebx)
00002f82	movl	$0x00000660,(%esp)
00002f89	calll	operator new(unsigned long)
00002f8e	movl	%eax,%edi
00002f90	leal	0x6513d-0x2b5e(%esi),%eax
00002f96	movl	%eax,0x08(%esp)
00002f9a	movl	%ebx,0x04(%esp)
00002f9e	movl	%edi,(%esp)
00002fa1	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00002fa6	movl	%edi,0x000001d0(%ebx)
00002fac	movl	$0x00000660,(%esp)
00002fb3	calll	operator new(unsigned long)
00002fb8	movl	%eax,%edi
00002fba	leal	0x65145-0x2b5e(%esi),%eax
00002fc0	movl	%eax,0x08(%esp)
00002fc4	movl	%ebx,0x04(%esp)
00002fc8	movl	%edi,(%esp)
00002fcb	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00002fd0	movl	%edi,0x000001d4(%ebx)
00002fd6	movl	$0x00000660,(%esp)
00002fdd	calll	operator new(unsigned long)
00002fe2	movl	%eax,%edi
00002fe4	leal	0x65154-0x2b5e(%esi),%eax
00002fea	movl	%eax,0x08(%esp)
00002fee	movl	%ebx,0x04(%esp)
00002ff2	movl	%edi,(%esp)
00002ff5	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00002ffa	movl	%edi,0x000001d8(%ebx)
00003000	movl	$0x00000660,(%esp)
00003007	calll	operator new(unsigned long)
0000300c	movl	%eax,%edi
0000300e	leal	0x6515e-0x2b5e(%esi),%eax
00003014	movl	%eax,0x08(%esp)
00003018	movl	%ebx,0x04(%esp)
0000301c	movl	%edi,(%esp)
0000301f	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00003024	movl	%edi,0x000001dc(%ebx)
0000302a	movl	$0x00000660,(%esp)
00003031	calll	operator new(unsigned long)
00003036	movl	%eax,%edi
00003038	leal	0x65166-0x2b5e(%esi),%eax
0000303e	movl	%eax,0x08(%esp)
00003042	movl	%ebx,0x04(%esp)
00003046	movl	%edi,(%esp)
00003049	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000304e	movl	%edi,0x000001e0(%ebx)
00003054	movl	$0x00000660,(%esp)
0000305b	calll	operator new(unsigned long)
00003060	movl	%eax,%edi
00003062	leal	0x65170-0x2b5e(%esi),%eax
00003068	movl	%eax,0x08(%esp)
0000306c	movl	%ebx,0x04(%esp)
00003070	movl	%edi,(%esp)
00003073	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00003078	movl	%edi,0x000001e4(%ebx)
0000307e	movl	$0x00000660,(%esp)
00003085	calll	operator new(unsigned long)
0000308a	movl	%eax,%edi
0000308c	leal	0x65179-0x2b5e(%esi),%eax
00003092	movl	%eax,0x08(%esp)
00003096	movl	%ebx,0x04(%esp)
0000309a	movl	%edi,(%esp)
0000309d	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000030a2	movl	%edi,CColorXYPreview::SetMode(ColorType_t, ColorChannel_t)(%ebx)
000030a8	movl	$0x0000017c,(%esp)
000030af	calll	operator new(unsigned long)
000030b4	movl	%eax,%edi
000030b6	leal	0x65183-0x2b5e(%esi),%eax
000030bc	movl	%eax,0x08(%esp)
000030c0	movl	%ebx,0x04(%esp)
000030c4	movl	%edi,(%esp)
000030c7	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
000030cc	movl	%edi,0x000001e8(%ebx)
000030d2	movl	$0x0000017c,(%esp)
000030d9	calll	operator new(unsigned long)
000030de	movl	%eax,%edi
000030e0	leal	0x65190-0x2b5e(%esi),%eax
000030e6	movl	%eax,0x08(%esp)
000030ea	movl	%ebx,0x04(%esp)
000030ee	movl	%edi,(%esp)
000030f1	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
000030f6	movl	%edi,0x000001ec(%ebx)
000030fc	movl	0x000001e8(%ebx),%ecx
00003102	movl	(%ecx),%eax
00003104	movl	0x00000088(%eax),%eax
0000310a	movl	%ecx,(%esp)
0000310d	movl	$0x00000001,0x04(%esp)
00003115	call	*%eax
00003117	movl	0x000001ec(%ebx),%ecx
0000311d	movl	(%ecx),%eax
0000311f	movl	0x00000088(%eax),%eax
00003125	movl	%ecx,(%esp)
00003128	movl	$0x00000001,0x04(%esp)
00003130	call	*%eax
00003132	movl	0x000001e8(%ebx),%ecx
00003138	movl	(%ecx),%eax
0000313a	movl	0x00000120(%eax),%eax
00003140	movl	%ecx,(%esp)
00003143	movl	$0x00000001,0x04(%esp)
0000314b	call	*%eax
0000314d	movl	0x000001ec(%ebx),%ecx
00003153	movl	(%ecx),%eax
00003155	movl	0x00000120(%eax),%eax
0000315b	movl	%ecx,(%esp)
0000315e	movl	$0x00000001,0x04(%esp)
00003166	call	*%eax
00003168	movl	0x000001e8(%ebx),%ecx
0000316e	movl	(%ecx),%eax
00003170	movl	0x0000021c(%eax),%eax
00003176	movl	%ecx,(%esp)
00003179	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00003181	call	*%eax
00003183	movl	(%ebx),%eax
00003185	movl	0x0000021c(%eax),%eax
0000318b	movl	%ebx,(%esp)
0000318e	movl	$0x00000001,0x04(%esp)
00003196	call	*%eax
00003198	movl	$0xffffffff,0xcc(%ebp)
0000319f	movl	0xcc(%ebp),%eax
000031a2	movl	%eax,0x04(%esp)
000031a6	movl	%ebx,(%esp)
000031a9	calll	CColorPickerPanel::SetInitialColor(Color)
000031ae	movl	(%ebx),%eax
000031b0	movl	0x00000348(%eax),%eax
000031b6	leal	0x6519d-0x2b5e(%esi),%ecx
000031bc	movl	%ecx,0x04(%esp)
000031c0	movl	%ebx,(%esp)
000031c3	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
000031cb	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
000031d3	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
000031db	call	*%eax
000031dd	addl	$0x4c,%esp
000031e0	popl	%esi
000031e1	popl	%edi
000031e2	popl	%ebx
000031e3	popl	%ebp
000031e4	ret
000031e5	movl	%eax,%esi
000031e7	jmp	0x00003213
000031e9	jmp	0x00003209
000031eb	jmp	0x00003209
000031ed	jmp	0x00003209
000031ef	jmp	0x00003209
000031f1	jmp	0x00003209
000031f3	jmp	0x00003209
000031f5	jmp	0x00003209
000031f7	jmp	0x00003209
000031f9	jmp	0x00003209
000031fb	jmp	0x00003209
000031fd	jmp	0x00003209
000031ff	jmp	0x00003209
00003201	jmp	0x00003209
00003203	jmp	0x00003209
00003205	jmp	0x00003209
00003207	jmp	0x00003209
00003209	movl	%eax,%esi
0000320b	movl	%edi,(%esp)
0000320e	calll	operator delete(void*)
00003213	movl	0xc8(%ebp),%eax
00003216	movl	%eax,0x04(%esp)
0000321a	movl	%ebx,(%esp)
0000321d	calll	vgui::EditablePanel::~EditablePanel()
00003222	movl	%esi,(%esp)
00003225	calll	__Unwind_Resume
0000322a	calll	std::terminate()
0000322f	nop
CColorPickerPanel::SetInitialColor(Color):
00003230	pushl	%ebp
00003231	movl	%esp,%ebp
00003233	pushl	%ebx
00003234	pushl	%edi
00003235	pushl	%esi
00003236	subl	$0x1c,%esp
00003239	calll	0x0000323e
0000323e	popl	%edi
0000323f	movl	0x0c(%ebp),%eax
00003242	movl	0x08(%ebp),%esi
00003245	movb	%al,0x000001f4(%esi)
0000324b	movb	%ah,0x000001f5(%esi)
00003251	movl	%eax,%ecx
00003253	shrl	$0x10,%ecx
00003256	movb	%cl,0x000001f6(%esi)
0000325c	shrl	$0x18,%eax
0000325f	movb	%al,0x000001fb(%esi)
00003265	movb	%al,0x000001fa(%esi)
0000326b	movb	0x000001f6(%esi),%al
00003271	movb	%al,0x000001f9(%esi)
00003277	movw	0x000001f4(%esi),%ax
0000327e	movw	%ax,0x000001f7(%esi)
00003285	movzbl	0x000001f7(%esi),%eax
0000328c	cvtsi2ss	%eax,%xmm1
00003290	movss	0x5f6d0-0x323e(%edi),%xmm0
00003298	divss	%xmm0,%xmm1
0000329c	movzbl	0x000001f9(%esi),%eax
000032a3	movzbl	0x000001f8(%esi),%ecx
000032aa	movss	%xmm1,0xe8(%ebp)
000032af	cvtsi2ss	%ecx,%xmm1
000032b3	divss	%xmm0,%xmm1
000032b7	movss	%xmm1,0xec(%ebp)
000032bc	cvtsi2ss	%eax,%xmm1
000032c0	divss	%xmm0,%xmm1
000032c4	movss	%xmm1,0xf0(%ebp)
000032c9	leal	0x000001fc(%esi),%ebx
000032cf	movl	%ebx,0x04(%esp)
000032d3	leal	0xe8(%ebp),%eax
000032d6	movl	%eax,(%esp)
000032d9	calll	RGBtoHSV(Vector const&, Vector&)
000032de	movss	0x000001fc(%esi),%xmm0
000032e6	ucomiss	0x5f6d4-0x323e(%edi),%xmm0
000032ed	jne	0x000032f7
000032ef	jp	0x000032f7
000032f1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),(%ebx)
000032f7	movl	%esi,(%esp)
000032fa	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00003302	calll	CColorPickerPanel::OnColorChanged(vgui::TextEntry*)
00003307	addl	$0x1c,%esp
0000330a	popl	%esi
0000330b	popl	%edi
0000330c	popl	%ebx
0000330d	popl	%ebp
0000330e	ret
0000330f	nop
CColorPickerPanel::CColorPickerPanel(vgui::Panel*, char const*):
00003310	pushl	%ebp
00003311	movl	%esp,%ebp
00003313	pushl	%ebx
00003314	pushl	%edi
00003315	pushl	%esi
00003316	subl	$0x4c,%esp
00003319	calll	0x0000331e
0000331e	popl	%edi
0000331f	movl	0x14(%ebp),%eax
00003322	movl	%eax,0x0c(%esp)
00003326	movl	0x10(%ebp),%eax
00003329	movl	%eax,0x08(%esp)
0000332d	movl	0x0c(%ebp),%esi
00003330	leal	0x04(%esi),%eax
00003333	movl	%eax,0xc8(%ebp)
00003336	movl	%eax,0x04(%esp)
0000333a	movl	0x08(%ebp),%ebx
0000333d	movl	%ebx,(%esp)
00003340	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00003345	movl	%edi,%ecx
00003347	movl	(%esi),%eax
00003349	movl	%eax,(%ebx)
0000334b	testb	$0x01,CColorPickerPanel::ChainToMap()::chained-0x331e(%ecx)
00003352	jne	0x00003391
00003354	movb	$0x01,CColorPickerPanel::ChainToMap()::chained-0x331e(%ecx)
0000335b	leal	0x6531f-0x331e(%ecx),%eax
00003361	movl	%ecx,%edi
00003363	movl	%eax,(%esp)
00003366	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000336b	movl	%eax,%esi
0000336d	movl	%edi,%ecx
0000336f	leal	CColorPickerPanel::GetPanelClassName()-0x331e(%ecx),%eax
00003375	movl	%eax,0x1c(%esi)
00003378	testl	%esi,%esi
0000337a	je	0x00003391
0000337c	leal	0x65369-0x331e(%ecx),%eax
00003382	movl	%ecx,%edi
00003384	movl	%eax,(%esp)
00003387	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000338c	movl	%eax,0x18(%esi)
0000338f	movl	%edi,%ecx
00003391	testb	$0x01,CColorPickerPanel::ChainToAnimationMap()::chained-0x331e(%ecx)
00003398	jne	0x000033d7
0000339a	movb	$0x01,CColorPickerPanel::ChainToAnimationMap()::chained-0x331e(%ecx)
000033a1	leal	0x6531f-0x331e(%ecx),%eax
000033a7	movl	%ecx,%edi
000033a9	movl	%eax,(%esp)
000033ac	calll	FindOrAddPanelAnimationMap(char const*)
000033b1	movl	%eax,%esi
000033b3	movl	%edi,%ecx
000033b5	leal	CColorPickerPanel::GetPanelClassName()-0x331e(%ecx),%eax
000033bb	movl	%eax,0x18(%esi)
000033be	testl	%esi,%esi
000033c0	je	0x000033d7
000033c2	leal	0x65369-0x331e(%ecx),%eax
000033c8	movl	%ecx,%edi
000033ca	movl	%eax,(%esp)
000033cd	calll	FindOrAddPanelAnimationMap(char const*)
000033d2	movl	%eax,0x14(%esi)
000033d5	movl	%edi,%ecx
000033d7	testb	$0x01,CColorPickerPanel::KB_ChainToMap()::chained-0x331e(%ecx)
000033de	jne	0x0000341d
000033e0	movb	$0x01,CColorPickerPanel::KB_ChainToMap()::chained-0x331e(%ecx)
000033e7	leal	0x6531f-0x331e(%ecx),%eax
000033ed	movl	%ecx,%edi
000033ef	movl	%eax,(%esp)
000033f2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000033f7	movl	%eax,%esi
000033f9	movl	%edi,%ecx
000033fb	leal	CColorPickerPanel::GetPanelClassName()-0x331e(%ecx),%eax
00003401	movl	%eax,0x44(%esi)
00003404	testl	%esi,%esi
00003406	je	0x0000341d
00003408	leal	0x65369-0x331e(%ecx),%eax
0000340e	movl	%ecx,%edi
00003410	movl	%eax,(%esp)
00003413	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00003418	movl	%eax,0x18(%esi)
0000341b	movl	%edi,%ecx
0000341d	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnRadioButtonChecked::InitVar()::bAdded-0x331e(%ecx)
00003424	movl	%ecx,%esi
00003426	jne	0x0000347e
00003428	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnRadioButtonChecked::InitVar()::bAdded-0x331e(%esi)
0000342f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xd4(%ebp)
00003436	movl	$0x000003ad,0xd0(%ebp)
0000343d	movsd	0xd0(%ebp),%xmm0
00003442	movsd	%xmm0,0x04(%esp)
00003448	leal	0x65356-0x331e(%esi),%eax
0000344e	movl	%eax,(%esp)
00003451	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00003459	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00003461	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00003469	movl	$0x00000006,0x10(%esp)
00003471	movl	$0x00000001,0x0c(%esp)
00003479	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000347e	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x331e(%esi)
00003485	jne	0x000034dd
00003487	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x331e(%esi)
0000348e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xdc(%ebp)
00003495	movl	$0x000003b1,0xd8(%ebp)
0000349c	movsd	0xd8(%ebp),%xmm0
000034a1	movsd	%xmm0,0x04(%esp)
000034a7	leal	0x6534a-0x331e(%esi),%eax
000034ad	movl	%eax,(%esp)
000034b0	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
000034b8	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
000034c0	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
000034c8	movl	$0x00000006,0x10(%esp)
000034d0	movl	$0x00000001,0x0c(%esp)
000034d8	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000034dd	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnHSVSelected::InitVar()::bAdded-0x331e(%esi)
000034e4	jne	0x0000353c
000034e6	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnHSVSelected::InitVar()::bAdded-0x331e(%esi)
000034ed	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe4(%ebp)
000034f4	movl	$0x000003b5,0xe0(%ebp)
000034fb	movsd	0xe0(%ebp),%xmm0
00003500	movsd	%xmm0,0x04(%esp)
00003506	leal	0x6509d-0x331e(%esi),%eax
0000350c	movl	%eax,(%esp)
0000350f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00003517	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
0000351f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00003527	movl	$0x00000006,0x10(%esp)
0000352f	movl	$0x00000001,0x0c(%esp)
00003537	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000353c	testb	$0x01,CColorPickerPanel::PanelMessageFunc_OnColorSelected::InitVar()::bAdded-0x331e(%esi)
00003543	jne	0x0000359b
00003545	movb	$0x01,CColorPickerPanel::PanelMessageFunc_OnColorSelected::InitVar()::bAdded-0x331e(%esi)
0000354c	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xec(%ebp)
00003553	movl	$0x000003b9,0xe8(%ebp)
0000355a	movsd	0xe8(%ebp),%xmm0
0000355f	movsd	%xmm0,0x04(%esp)
00003565	leal	0x650be-0x331e(%esi),%eax
0000356b	movl	%eax,(%esp)
0000356e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00003576	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
0000357e	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00003586	movl	$0x00000006,0x10(%esp)
0000358e	movl	$0x00000001,0x0c(%esp)
00003596	calll	CColorPickerPanel::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000359b	movl	$0x00000214,(%esp)
000035a2	calll	operator new(unsigned long)
000035a7	movl	%eax,%edi
000035a9	leal	0x650d2-0x331e(%esi),%eax
000035af	movl	%eax,0x08(%esp)
000035b3	movl	%ebx,0x04(%esp)
000035b7	movl	%edi,(%esp)
000035ba	calll	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)
000035bf	movl	%edi,0x000001b0(%ebx)
000035c5	movl	$0x00000210,(%esp)
000035cc	calll	operator new(unsigned long)
000035d1	movl	%eax,%edi
000035d3	leal	0x650e1-0x331e(%esi),%eax
000035d9	movl	%eax,0x08(%esp)
000035dd	movl	%ebx,0x04(%esp)
000035e1	movl	%edi,(%esp)
000035e4	calll	CColorZPreview::CColorZPreview(vgui::Panel*, char const*)
000035e9	movl	%edi,0x000001b4(%ebx)
000035ef	movl	0x000001b0(%ebx),%eax
000035f5	movl	(%eax),%ecx
000035f7	movl	0x000000b4(%ecx),%ecx
000035fd	movl	%ebx,0x04(%esp)
00003601	movl	%eax,(%esp)
00003604	call	*%ecx
00003606	movl	$0x00000240,(%esp)
0000360d	calll	operator new(unsigned long)
00003612	movl	%eax,%edi
00003614	leal	0x650f8-0x331e(%esi),%eax
0000361a	movl	%eax,0x0c(%esp)
0000361e	leal	0x650ef-0x331e(%esi),%eax
00003624	movl	%eax,0x08(%esp)
00003628	movl	%ebx,0x04(%esp)
0000362c	movl	%edi,(%esp)
0000362f	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00003634	movl	%edi,0x000001b8(%ebx)
0000363a	movl	$0x00000240,(%esp)
00003641	calll	operator new(unsigned long)
00003646	movl	%eax,%edi
00003648	leal	0x6510a-0x331e(%esi),%eax
0000364e	movl	%eax,0x0c(%esp)
00003652	leal	0x650fa-0x331e(%esi),%eax
00003658	movl	%eax,0x08(%esp)
0000365c	movl	%ebx,0x04(%esp)
00003660	movl	%edi,(%esp)
00003663	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00003668	movl	%edi,0x000001bc(%ebx)
0000366e	movl	$0x00000240,(%esp)
00003675	calll	operator new(unsigned long)
0000367a	movl	%eax,%edi
0000367c	leal	0x65117-0x331e(%esi),%eax
00003682	movl	%eax,0x0c(%esp)
00003686	leal	0x6510c-0x331e(%esi),%eax
0000368c	movl	%eax,0x08(%esp)
00003690	movl	%ebx,0x04(%esp)
00003694	movl	%edi,(%esp)
00003697	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
0000369c	movl	%edi,0x000001c0(%ebx)
000036a2	movl	$0x00000240,(%esp)
000036a9	calll	operator new(unsigned long)
000036ae	movl	%eax,%edi
000036b0	leal	0x65122-0x331e(%esi),%eax
000036b6	movl	%eax,0x0c(%esp)
000036ba	leal	0x65119-0x331e(%esi),%eax
000036c0	movl	%eax,0x08(%esp)
000036c4	movl	%ebx,0x04(%esp)
000036c8	movl	%edi,(%esp)
000036cb	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
000036d0	movl	%edi,0x000001c4(%ebx)
000036d6	movl	$0x00000240,(%esp)
000036dd	calll	operator new(unsigned long)
000036e2	movl	%eax,%edi
000036e4	leal	0x6512f-0x331e(%esi),%eax
000036ea	movl	%eax,0x0c(%esp)
000036ee	leal	0x65124-0x331e(%esi),%eax
000036f4	movl	%eax,0x08(%esp)
000036f8	movl	%ebx,0x04(%esp)
000036fc	movl	%edi,(%esp)
000036ff	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00003704	movl	%edi,0x000001c8(%ebx)
0000370a	movl	$0x00000240,(%esp)
00003711	calll	operator new(unsigned long)
00003716	movl	%eax,%edi
00003718	leal	0x6513b-0x331e(%esi),%eax
0000371e	movl	%eax,0x0c(%esp)
00003722	leal	0x65131-0x331e(%esi),%eax
00003728	movl	%eax,0x08(%esp)
0000372c	movl	%ebx,0x04(%esp)
00003730	movl	%edi,(%esp)
00003733	calll	vgui::RadioButton::RadioButton(vgui::Panel*, char const*, char const*)
00003738	movl	%edi,0x000001cc(%ebx)
0000373e	movl	$0x00000660,(%esp)
00003745	calll	operator new(unsigned long)
0000374a	movl	%eax,%edi
0000374c	leal	0x6513d-0x331e(%esi),%eax
00003752	movl	%eax,0x08(%esp)
00003756	movl	%ebx,0x04(%esp)
0000375a	movl	%edi,(%esp)
0000375d	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00003762	movl	%edi,0x000001d0(%ebx)
00003768	movl	$0x00000660,(%esp)
0000376f	calll	operator new(unsigned long)
00003774	movl	%eax,%edi
00003776	leal	0x65145-0x331e(%esi),%eax
0000377c	movl	%eax,0x08(%esp)
00003780	movl	%ebx,0x04(%esp)
00003784	movl	%edi,(%esp)
00003787	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000378c	movl	%edi,0x000001d4(%ebx)
00003792	movl	$0x00000660,(%esp)
00003799	calll	operator new(unsigned long)
0000379e	movl	%eax,%edi
000037a0	leal	0x65154-0x331e(%esi),%eax
000037a6	movl	%eax,0x08(%esp)
000037aa	movl	%ebx,0x04(%esp)
000037ae	movl	%edi,(%esp)
000037b1	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000037b6	movl	%edi,0x000001d8(%ebx)
000037bc	movl	$0x00000660,(%esp)
000037c3	calll	operator new(unsigned long)
000037c8	movl	%eax,%edi
000037ca	leal	0x6515e-0x331e(%esi),%eax
000037d0	movl	%eax,0x08(%esp)
000037d4	movl	%ebx,0x04(%esp)
000037d8	movl	%edi,(%esp)
000037db	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000037e0	movl	%edi,0x000001dc(%ebx)
000037e6	movl	$0x00000660,(%esp)
000037ed	calll	operator new(unsigned long)
000037f2	movl	%eax,%edi
000037f4	leal	0x65166-0x331e(%esi),%eax
000037fa	movl	%eax,0x08(%esp)
000037fe	movl	%ebx,0x04(%esp)
00003802	movl	%edi,(%esp)
00003805	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000380a	movl	%edi,0x000001e0(%ebx)
00003810	movl	$0x00000660,(%esp)
00003817	calll	operator new(unsigned long)
0000381c	movl	%eax,%edi
0000381e	leal	0x65170-0x331e(%esi),%eax
00003824	movl	%eax,0x08(%esp)
00003828	movl	%ebx,0x04(%esp)
0000382c	movl	%edi,(%esp)
0000382f	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
00003834	movl	%edi,0x000001e4(%ebx)
0000383a	movl	$0x00000660,(%esp)
00003841	calll	operator new(unsigned long)
00003846	movl	%eax,%edi
00003848	leal	0x65179-0x331e(%esi),%eax
0000384e	movl	%eax,0x08(%esp)
00003852	movl	%ebx,0x04(%esp)
00003856	movl	%edi,(%esp)
00003859	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000385e	movl	%edi,CColorXYPreview::SetMode(ColorType_t, ColorChannel_t)(%ebx)
00003864	movl	$0x0000017c,(%esp)
0000386b	calll	operator new(unsigned long)
00003870	movl	%eax,%edi
00003872	leal	0x65183-0x331e(%esi),%eax
00003878	movl	%eax,0x08(%esp)
0000387c	movl	%ebx,0x04(%esp)
00003880	movl	%edi,(%esp)
00003883	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
00003888	movl	%edi,0x000001e8(%ebx)
0000388e	movl	$0x0000017c,(%esp)
00003895	calll	operator new(unsigned long)
0000389a	movl	%eax,%edi
0000389c	leal	0x65190-0x331e(%esi),%eax
000038a2	movl	%eax,0x08(%esp)
000038a6	movl	%ebx,0x04(%esp)
000038aa	movl	%edi,(%esp)
000038ad	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
000038b2	movl	%edi,0x000001ec(%ebx)
000038b8	movl	0x000001e8(%ebx),%ecx
000038be	movl	(%ecx),%eax
000038c0	movl	0x00000088(%eax),%eax
000038c6	movl	%ecx,(%esp)
000038c9	movl	$0x00000001,0x04(%esp)
000038d1	call	*%eax
000038d3	movl	0x000001ec(%ebx),%ecx
000038d9	movl	(%ecx),%eax
000038db	movl	0x00000088(%eax),%eax
000038e1	movl	%ecx,(%esp)
000038e4	movl	$0x00000001,0x04(%esp)
000038ec	call	*%eax
000038ee	movl	0x000001e8(%ebx),%ecx
000038f4	movl	(%ecx),%eax
000038f6	movl	0x00000120(%eax),%eax
000038fc	movl	%ecx,(%esp)
000038ff	movl	$0x00000001,0x04(%esp)
00003907	call	*%eax
00003909	movl	0x000001ec(%ebx),%ecx
0000390f	movl	(%ecx),%eax
00003911	movl	0x00000120(%eax),%eax
00003917	movl	%ecx,(%esp)
0000391a	movl	$0x00000001,0x04(%esp)
00003922	call	*%eax
00003924	movl	0x000001e8(%ebx),%ecx
0000392a	movl	(%ecx),%eax
0000392c	movl	0x0000021c(%eax),%eax
00003932	movl	%ecx,(%esp)
00003935	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000393d	call	*%eax
0000393f	movl	(%ebx),%eax
00003941	movl	0x0000021c(%eax),%eax
00003947	movl	%ebx,(%esp)
0000394a	movl	$0x00000001,0x04(%esp)
00003952	call	*%eax
00003954	movl	$0xffffffff,0xcc(%ebp)
0000395b	movl	0xcc(%ebp),%eax
0000395e	movl	%eax,0x04(%esp)
00003962	movl	%ebx,(%esp)
00003965	calll	CColorPickerPanel::SetInitialColor(Color)
0000396a	movl	(%ebx),%eax
0000396c	movl	0x00000348(%eax),%eax
00003972	leal	0x6519d-0x331e(%esi),%ecx
00003978	movl	%ecx,0x04(%esp)
0000397c	movl	%ebx,(%esp)
0000397f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
00003987	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
0000398f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00003997	call	*%eax
00003999	addl	$0x4c,%esp
0000399c	popl	%esi
0000399d	popl	%edi
0000399e	popl	%ebx
0000399f	popl	%ebp
000039a0	ret
000039a1	movl	%eax,%esi
000039a3	jmp	0x000039cf
000039a5	jmp	0x000039c5
000039a7	jmp	0x000039c5
000039a9	jmp	0x000039c5
000039ab	jmp	0x000039c5
000039ad	jmp	0x000039c5
000039af	jmp	0x000039c5
000039b1	jmp	0x000039c5
000039b3	jmp	0x000039c5
000039b5	jmp	0x000039c5
000039b7	jmp	0x000039c5
000039b9	jmp	0x000039c5
000039bb	jmp	0x000039c5
000039bd	jmp	0x000039c5
000039bf	jmp	0x000039c5
000039c1	jmp	0x000039c5
000039c3	jmp	0x000039c5
000039c5	movl	%eax,%esi
000039c7	movl	%edi,(%esp)
000039ca	calll	operator delete(void*)
000039cf	movl	0xc8(%ebp),%eax
000039d2	movl	%eax,0x04(%esp)
000039d6	movl	%ebx,(%esp)
000039d9	calll	vgui::EditablePanel::~EditablePanel()
000039de	movl	%esi,(%esp)
000039e1	calll	__Unwind_Resume
000039e6	calll	std::terminate()
000039eb	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::OnColorChanged(vgui::TextEntry*):
000039f0	pushl	%ebp
000039f1	movl	%esp,%ebp
000039f3	pushl	%ebx
000039f4	pushl	%edi
000039f5	pushl	%esi
000039f6	subl	$0x0000012c,%esp
000039fc	calll	0x00003a01
00003a01	popl	%edi
00003a02	movl	0x6bd14-0x3a01(%edi),%eax
00003a08	movl	%eax,0xfffffee4(%ebp)
00003a0e	movl	(%eax),%eax
00003a10	movl	%eax,0xf0(%ebp)
00003a13	movl	0x0c(%ebp),%eax
00003a16	movl	0x08(%ebp),%ebx
00003a19	cmpl	%eax,0x000001dc(%ebx)
00003a1f	je	0x00003a61
00003a21	movzbl	0x000001f7(%ebx),%eax
00003a28	movl	%eax,0x0c(%esp)
00003a2c	leal	0x651bc-0x3a01(%edi),%eax
00003a32	movl	%eax,0x08(%esp)
00003a36	leal	0xfffffef0(%ebp),%esi
00003a3c	movl	%esi,(%esp)
00003a3f	movl	$0x00000100,0x04(%esp)
00003a47	calll	V_snprintf(char*, int, char const*, ...)
00003a4c	movl	0x000001dc(%ebx),%ecx
00003a52	movl	(%ecx),%eax
00003a54	movl	%esi,0x04(%esp)
00003a58	movl	%ecx,(%esp)
00003a5b	call	*0x0000034c(%eax)
00003a61	movl	0x0c(%ebp),%eax
00003a64	cmpl	%eax,0x000001e0(%ebx)
00003a6a	je	0x00003aac
00003a6c	movzbl	0x000001f8(%ebx),%eax
00003a73	movl	%eax,0x0c(%esp)
00003a77	leal	0x651bc-0x3a01(%edi),%eax
00003a7d	movl	%eax,0x08(%esp)
00003a81	leal	0xfffffef0(%ebp),%esi
00003a87	movl	%esi,(%esp)
00003a8a	movl	$0x00000100,0x04(%esp)
00003a92	calll	V_snprintf(char*, int, char const*, ...)
00003a97	movl	0x000001e0(%ebx),%ecx
00003a9d	movl	(%ecx),%eax
00003a9f	movl	%esi,0x04(%esp)
00003aa3	movl	%ecx,(%esp)
00003aa6	call	*0x0000034c(%eax)
00003aac	movl	0x0c(%ebp),%eax
00003aaf	cmpl	%eax,0x000001e4(%ebx)
00003ab5	je	0x00003af7
00003ab7	movzbl	0x000001f9(%ebx),%eax
00003abe	movl	%eax,0x0c(%esp)
00003ac2	leal	0x651bc-0x3a01(%edi),%eax
00003ac8	movl	%eax,0x08(%esp)
00003acc	leal	0xfffffef0(%ebp),%esi
00003ad2	movl	%esi,(%esp)
00003ad5	movl	$0x00000100,0x04(%esp)
00003add	calll	V_snprintf(char*, int, char const*, ...)
00003ae2	movl	0x000001e4(%ebx),%ecx
00003ae8	movl	(%ecx),%eax
00003aea	movl	%esi,0x04(%esp)
00003aee	movl	%ecx,(%esp)
00003af1	call	*0x0000034c(%eax)
00003af7	movl	0x0c(%ebp),%eax
00003afa	cmpl	%eax,CColorXYPreview::SetMode(ColorType_t, ColorChannel_t)(%ebx)
00003b00	je	0x00003b42
00003b02	movzbl	0x000001fb(%ebx),%eax
00003b09	movl	%eax,0x0c(%esp)
00003b0d	leal	0x651bc-0x3a01(%edi),%eax
00003b13	movl	%eax,0x08(%esp)
00003b17	leal	0xfffffef0(%ebp),%esi
00003b1d	movl	%esi,(%esp)
00003b20	movl	$0x00000100,0x04(%esp)
00003b28	calll	V_snprintf(char*, int, char const*, ...)
00003b2d	movl	CColorXYPreview::SetMode(ColorType_t, ColorChannel_t)(%ebx),%ecx
00003b33	movl	(%ecx),%eax
00003b35	movl	%esi,0x04(%esp)
00003b39	movl	%ecx,(%esp)
00003b3c	call	*0x0000034c(%eax)
00003b42	movl	0x0c(%ebp),%eax
00003b45	cmpl	%eax,0x000001d0(%ebx)
00003b4b	je	0x00003b9a
00003b4d	movss	0x000001fc(%ebx),%xmm0
00003b55	addss	0x5f6d8-0x3a01(%edi),%xmm0
00003b5d	cvttss2si	%xmm0,%eax
00003b61	movl	%eax,0x0c(%esp)
00003b65	leal	0x651bc-0x3a01(%edi),%eax
00003b6b	movl	%eax,0x08(%esp)
00003b6f	leal	0xfffffef0(%ebp),%esi
00003b75	movl	%esi,(%esp)
00003b78	movl	$0x00000100,0x04(%esp)
00003b80	calll	V_snprintf(char*, int, char const*, ...)
00003b85	movl	0x000001d0(%ebx),%ecx
00003b8b	movl	(%ecx),%eax
00003b8d	movl	%esi,0x04(%esp)
00003b91	movl	%ecx,(%esp)
00003b94	call	*0x0000034c(%eax)
00003b9a	movl	0x0c(%ebp),%eax
00003b9d	cmpl	%eax,0x000001d4(%ebx)
00003ba3	je	0x00003bfa
00003ba5	movss	0x00000200(%ebx),%xmm0
00003bad	leal	0x651bc-0x3a01(%edi),%eax
00003bb3	movl	%eax,0x08(%esp)
00003bb7	leal	0xfffffef0(%ebp),%esi
00003bbd	movl	%esi,(%esp)
00003bc0	mulss	0x5f6dc-0x3a01(%edi),%xmm0
00003bc8	addss	0x5f6d8-0x3a01(%edi),%xmm0
00003bd0	cvttss2si	%xmm0,%eax
00003bd4	movl	%eax,0x0c(%esp)
00003bd8	movl	$0x00000100,0x04(%esp)
00003be0	calll	V_snprintf(char*, int, char const*, ...)
00003be5	movl	0x000001d4(%ebx),%ecx
00003beb	movl	(%ecx),%eax
00003bed	movl	%esi,0x04(%esp)
00003bf1	movl	%ecx,(%esp)
00003bf4	call	*0x0000034c(%eax)
00003bfa	movl	0x0c(%ebp),%eax
00003bfd	cmpl	%eax,0x000001d8(%ebx)
00003c03	je	0x00003c5a
00003c05	movss	0x00000204(%ebx),%xmm0
00003c0d	leal	0x651bc-0x3a01(%edi),%eax
00003c13	movl	%eax,0x08(%esp)
00003c17	leal	0xfffffef0(%ebp),%esi
00003c1d	movl	%esi,(%esp)
00003c20	mulss	0x5f6dc-0x3a01(%edi),%xmm0
00003c28	addss	0x5f6d8-0x3a01(%edi),%xmm0
00003c30	cvttss2si	%xmm0,%eax
00003c34	movl	%eax,0x0c(%esp)
00003c38	movl	$0x00000100,0x04(%esp)
00003c40	calll	V_snprintf(char*, int, char const*, ...)
00003c45	movl	0x000001d8(%ebx),%ecx
00003c4b	movl	(%ecx),%eax
00003c4d	movl	%esi,0x04(%esp)
00003c51	movl	%ecx,(%esp)
00003c54	call	*0x0000034c(%eax)
00003c5a	movb	0x000001f7(%ebx),%cl
00003c60	movl	0x000001b0(%ebx),%eax
00003c66	leal	0x000001f7(%ebx),%esi
00003c6c	cmpb	0x000001fc(%eax),%cl
00003c72	jne	0x00003cc9
00003c74	movb	0x000001f8(%ebx),%dl
00003c7a	cmpb	0x000001fd(%eax),%dl
00003c80	jne	0x00003cc9
00003c82	movb	0x000001f9(%ebx),%dl
00003c88	cmpb	0x000001fe(%eax),%dl
00003c8e	jne	0x00003cc9
00003c90	movss	0x000001fc(%ebx),%xmm0
00003c98	ucomiss	0x00000200(%eax),%xmm0
00003c9f	jne	0x00003cc9
00003ca1	jp	0x00003cc9
00003ca3	movss	0x00000200(%ebx),%xmm0
00003cab	ucomiss	0x00000204(%eax),%xmm0
00003cb2	jne	0x00003cc9
00003cb4	jp	0x00003cc9
00003cb6	movss	0x00000204(%ebx),%xmm0
00003cbe	ucomiss	0x00000208(%eax),%xmm0
00003cc5	jne	0x00003cc9
00003cc7	jnp	0x00003d19
00003cc9	leal	0x000001fc(%eax),%ecx
00003ccf	movb	0x02(%esi),%dl
00003cd2	movb	%dl,0x02(%ecx)
00003cd5	movw	(%esi),%dx
00003cd8	movw	%dx,(%ecx)
00003cdb	movss	0x000001fc(%ebx),%xmm0
00003ce3	movss	%xmm0,0x00000200(%eax)
00003ceb	movss	0x00000200(%ebx),%xmm0
00003cf3	movss	%xmm0,0x00000204(%eax)
00003cfb	movss	0x00000204(%ebx),%xmm0
00003d03	movss	%xmm0,0x00000208(%eax)
00003d0b	movl	%eax,(%esp)
00003d0e	calll	CProceduralTexturePanel::DownloadTexture()
00003d13	movb	0x000001f7(%ebx),%cl
00003d19	movl	0x000001b4(%ebx),%eax
00003d1f	cmpb	0x000001fc(%eax),%cl
00003d25	jne	0x00003d7c
00003d27	movb	0x000001f8(%ebx),%cl
00003d2d	cmpb	0x000001fd(%eax),%cl
00003d33	jne	0x00003d7c
00003d35	movb	0x000001f9(%ebx),%cl
00003d3b	cmpb	0x000001fe(%eax),%cl
00003d41	jne	0x00003d7c
00003d43	movss	0x000001fc(%ebx),%xmm0
00003d4b	ucomiss	0x00000200(%eax),%xmm0
00003d52	jne	0x00003d7c
00003d54	jp	0x00003d7c
00003d56	movss	0x00000200(%ebx),%xmm0
00003d5e	ucomiss	0x00000204(%eax),%xmm0
00003d65	jne	0x00003d7c
00003d67	jp	0x00003d7c
00003d69	movss	0x00000204(%ebx),%xmm0
00003d71	ucomiss	0x00000208(%eax),%xmm0
00003d78	jne	0x00003d7c
00003d7a	jnp	0x00003dc6
00003d7c	leal	0x000001fc(%eax),%ecx
00003d82	movb	0x02(%esi),%dl
00003d85	movb	%dl,0x02(%ecx)
00003d88	movw	(%esi),%dx
00003d8b	movw	%dx,(%ecx)
00003d8e	movss	0x000001fc(%ebx),%xmm0
00003d96	movss	%xmm0,0x00000200(%eax)
00003d9e	movss	0x00000200(%ebx),%xmm0
00003da6	movss	%xmm0,0x00000204(%eax)
00003dae	movss	0x00000204(%ebx),%xmm0
00003db6	movss	%xmm0,0x00000208(%eax)
00003dbe	movl	%eax,(%esp)
00003dc1	calll	CProceduralTexturePanel::DownloadTexture()
00003dc6	movzbl	0x000001f4(%ebx),%eax
00003dcd	movzbl	0x000001f5(%ebx),%ecx
00003dd4	shll	$0x08,%ecx
00003dd7	orl	%eax,%ecx
00003dd9	movzbl	0x000001f6(%ebx),%eax
00003de0	shll	$0x10,%eax
00003de3	orl	%ecx,%eax
00003de5	orl	$0xff000000,%eax
00003dea	movl	0x000001e8(%ebx),%ecx
00003df0	movl	(%ecx),%edx
00003df2	movl	0x000000ec(%edx),%edx
00003df8	movl	%eax,0xfffffeec(%ebp)
00003dfe	movl	0xfffffeec(%ebp),%eax
00003e04	movl	%eax,0x04(%esp)
00003e08	movl	%ecx,(%esp)
00003e0b	call	*%edx
00003e0d	movzbl	0x000001f7(%ebx),%eax
00003e14	movzbl	0x000001f8(%ebx),%ecx
00003e1b	shll	$0x08,%ecx
00003e1e	orl	%eax,%ecx
00003e20	movzbl	0x000001f9(%ebx),%eax
00003e27	shll	$0x10,%eax
00003e2a	orl	%ecx,%eax
00003e2c	orl	$0xff000000,%eax
00003e31	movl	0x000001ec(%ebx),%ecx
00003e37	movl	(%ecx),%edx
00003e39	movl	0x000000ec(%edx),%edx
00003e3f	movl	%eax,0xfffffee8(%ebp)
00003e45	movl	0xfffffee8(%ebp),%eax
00003e4b	movl	%eax,0x04(%esp)
00003e4f	movl	%ecx,(%esp)
00003e52	call	*%edx
00003e54	movl	(%ebx),%eax
00003e56	movl	0x000000c0(%eax),%eax
00003e5c	movl	%eax,0xfffffee0(%ebp)
00003e62	movl	$0x00000020,(%esp)
00003e69	calll	KeyValues::operator new(unsigned long)
00003e6e	movl	%eax,%esi
00003e70	leal	0x651c7-0x3a01(%edi),%eax
00003e76	movl	%eax,0x0c(%esp)
00003e7a	leal	0x651bf-0x3a01(%edi),%eax
00003e80	movl	%eax,0x08(%esp)
00003e84	movl	%eax,0x04(%esp)
00003e88	movl	%esi,(%esp)
00003e8b	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00003e90	movl	%esi,0x04(%esp)
00003e94	movl	%ebx,(%esp)
00003e97	call	*0xfffffee0(%ebp)
00003e9d	movl	0xfffffee4(%ebp),%eax
00003ea3	movl	(%eax),%eax
00003ea5	cmpl	0xf0(%ebp),%eax
00003ea8	jne	0x00003ec7
00003eaa	addl	$0x0000012c,%esp
00003eb0	popl	%esi
00003eb1	popl	%edi
00003eb2	popl	%ebx
00003eb3	popl	%ebp
00003eb4	ret
00003eb5	movl	%eax,%edi
00003eb7	movl	%esi,(%esp)
00003eba	calll	KeyValues::operator delete(void*)
00003ebf	movl	%edi,(%esp)
00003ec2	calll	__Unwind_Resume
00003ec7	calll	___stack_chk_fail
00003ecc	calll	std::terminate()
00003ed1	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::OnMousePressed(ButtonCode_t):
00003ee0	pushl	%ebp
00003ee1	movl	%esp,%ebp
00003ee3	pushl	%ebx
00003ee4	pushl	%edi
00003ee5	pushl	%esi
00003ee6	subl	$0x3c,%esp
00003ee9	calll	0x00003eee
00003eee	popl	%eax
00003eef	movl	%eax,0xcc(%ebp)
00003ef2	movl	0x0c(%ebp),%edi
00003ef5	movl	%edi,0x04(%esp)
00003ef9	movl	0x08(%ebp),%esi
00003efc	movl	%esi,(%esp)
00003eff	calll	vgui::Panel::OnMousePressed(ButtonCode_t)
00003f04	cmpl	$0x6b,%edi
00003f07	jne	0x00004045
00003f0d	movl	0xcc(%ebp),%eax
00003f10	movl	0x6bd18-0x3eee(%eax),%eax
00003f16	movl	(%eax),%ecx
00003f18	movl	(%ecx),%eax
00003f1a	leal	0xe0(%ebp),%ebx
00003f1d	movl	%ebx,0x08(%esp)
00003f21	leal	0xe4(%ebp),%edi
00003f24	movl	%edi,0x04(%esp)
00003f28	movl	%ecx,(%esp)
00003f2b	call	*0x24(%eax)
00003f2e	movl	%ebx,0x08(%esp)
00003f32	movl	%edi,0x04(%esp)
00003f36	movl	%esi,(%esp)
00003f39	calll	vgui::Panel::ScreenToLocal(int&, int&)
00003f3e	movl	0x000001e8(%esi),%eax
00003f44	leal	0xd0(%ebp),%ecx
00003f47	movl	%ecx,0x10(%esp)
00003f4b	leal	0xd4(%ebp),%ecx
00003f4e	movl	%ecx,0x0c(%esp)
00003f52	leal	0xd8(%ebp),%ecx
00003f55	movl	%ecx,0x08(%esp)
00003f59	leal	0xdc(%ebp),%ecx
00003f5c	movl	%ecx,0x04(%esp)
00003f60	movl	%eax,(%esp)
00003f63	calll	vgui::Panel::GetBounds(int&, int&, int&, int&)
00003f68	movl	0xe4(%ebp),%eax
00003f6b	movl	0xdc(%ebp),%ecx
00003f6e	cmpl	%eax,%ecx
00003f70	jg	0x00004045
00003f76	addl	0xd4(%ebp),%ecx
00003f79	cmpl	%eax,%ecx
00003f7b	jle	0x00004045
00003f81	movl	0xe0(%ebp),%eax
00003f84	movl	0xd8(%ebp),%ecx
00003f87	cmpl	%eax,%ecx
00003f89	jg	0x00004045
00003f8f	addl	0xd0(%ebp),%ecx
00003f92	cmpl	%eax,%ecx
00003f94	jle	0x00004045
00003f9a	movb	0x000001f6(%esi),%al
00003fa0	movb	%al,0x000001f9(%esi)
00003fa6	movw	0x000001f4(%esi),%ax
00003fad	movw	%ax,0x000001f7(%esi)
00003fb4	movb	0x000001fa(%esi),%al
00003fba	movb	%al,0x000001fb(%esi)
00003fc0	movzbl	0x000001f7(%esi),%eax
00003fc7	cvtsi2ss	%eax,%xmm1
00003fcb	movl	0xcc(%ebp),%edi
00003fce	movss	0x5f6e0-0x3eee(%edi),%xmm0
00003fd6	divss	%xmm0,%xmm1
00003fda	movzbl	0x000001f9(%esi),%eax
00003fe1	movzbl	0x000001f8(%esi),%ecx
00003fe8	movss	%xmm1,0xe8(%ebp)
00003fed	cvtsi2ss	%ecx,%xmm1
00003ff1	divss	%xmm0,%xmm1
00003ff5	movss	%xmm1,0xec(%ebp)
00003ffa	cvtsi2ss	%eax,%xmm1
00003ffe	divss	%xmm0,%xmm1
00004002	movss	%xmm1,0xf0(%ebp)
00004007	leal	0x000001fc(%esi),%ebx
0000400d	movl	%ebx,0x04(%esp)
00004011	leal	0xe8(%ebp),%eax
00004014	movl	%eax,(%esp)
00004017	calll	RGBtoHSV(Vector const&, Vector&)
0000401c	movss	0x000001fc(%esi),%xmm0
00004024	ucomiss	0x5f6e4-0x3eee(%edi),%xmm0
0000402b	jne	0x00004035
0000402d	jp	0x00004035
0000402f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),(%ebx)
00004035	movl	%esi,(%esp)
00004038	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00004040	calll	CColorPickerPanel::OnColorChanged(vgui::TextEntry*)
00004045	addl	$0x3c,%esp
00004048	popl	%esi
00004049	popl	%edi
0000404a	popl	%ebx
0000404b	popl	%ebp
0000404c	ret
0000404d	nopl	(%eax)
CColorPickerPanel::GetCurrentColor(Color*):
00004050	movl	0x04(%esp),%edx
00004054	movb	0x000001fb(%edx),%al
0000405a	movb	0x000001f9(%edx),%cl
00004060	movb	0x000001f7(%edx),%ch
00004066	movb	0x000001f8(%edx),%ah
0000406c	movl	0x08(%esp),%edx
00004070	movb	%ch,(%edx)
00004072	movb	%ah,0x01(%edx)
00004075	movb	%cl,0x02(%edx)
00004078	movb	%al,0x03(%edx)
0000407b	ret
0000407c	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorPickerPanel::GetInitialColor(Color*):
00004080	movl	0x04(%esp),%edx
00004084	movb	0x000001fa(%edx),%al
0000408a	movb	0x000001f6(%edx),%cl
00004090	movb	0x000001f4(%edx),%ch
00004096	movb	0x000001f5(%edx),%ah
0000409c	movl	0x08(%esp),%edx
000040a0	movb	%ch,(%edx)
000040a2	movb	%ah,0x01(%edx)
000040a5	movb	%cl,0x02(%edx)
000040a8	movb	%al,0x03(%edx)
000040ab	ret
000040ac	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorPickerPanel::UpdatePreviewColors():
000040b0	pushl	%ebp
000040b1	movl	%esp,%ebp
000040b3	pushl	%esi
000040b4	subl	$0x14,%esp
000040b7	movl	0x08(%ebp),%esi
000040ba	movzbl	0x000001f4(%esi),%eax
000040c1	movzbl	0x000001f5(%esi),%ecx
000040c8	shll	$0x08,%ecx
000040cb	orl	%eax,%ecx
000040cd	movzbl	0x000001f6(%esi),%eax
000040d4	shll	$0x10,%eax
000040d7	orl	%ecx,%eax
000040d9	orl	$0xff000000,%eax
000040de	movl	0x000001e8(%esi),%ecx
000040e4	movl	(%ecx),%edx
000040e6	movl	0x000000ec(%edx),%edx
000040ec	movl	%eax,0xf8(%ebp)
000040ef	movl	0xf8(%ebp),%eax
000040f2	movl	%eax,0x04(%esp)
000040f6	movl	%ecx,(%esp)
000040f9	call	*%edx
000040fb	movzbl	0x000001f7(%esi),%eax
00004102	movzbl	0x000001f8(%esi),%ecx
00004109	shll	$0x08,%ecx
0000410c	orl	%eax,%ecx
0000410e	movzbl	0x000001f9(%esi),%eax
00004115	shll	$0x10,%eax
00004118	orl	%ecx,%eax
0000411a	orl	$0xff000000,%eax
0000411f	movl	0x000001ec(%esi),%ecx
00004125	movl	(%ecx),%edx
00004127	movl	0x000000ec(%edx),%edx
0000412d	movl	%eax,0xf4(%ebp)
00004130	movl	0xf4(%ebp),%eax
00004133	movl	%eax,0x04(%esp)
00004137	movl	%ecx,(%esp)
0000413a	call	*%edx
0000413c	addl	$0x14,%esp
0000413f	popl	%esi
00004140	popl	%ebp
00004141	ret
00004142	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::ApplySchemeSettings(vgui::IScheme*):
00004150	pushl	%ebp
00004151	movl	%esp,%ebp
00004153	pushl	%esi
00004154	subl	$0x14,%esp
00004157	movl	0x0c(%ebp),%eax
0000415a	movl	%eax,0x04(%esp)
0000415e	movl	0x08(%ebp),%esi
00004161	movl	%esi,(%esp)
00004164	calll	vgui::Panel::ApplySchemeSettings(vgui::IScheme*)
00004169	movzbl	0x000001f4(%esi),%eax
00004170	movzbl	0x000001f5(%esi),%ecx
00004177	shll	$0x08,%ecx
0000417a	orl	%eax,%ecx
0000417c	movzbl	0x000001f6(%esi),%eax
00004183	shll	$0x10,%eax
00004186	orl	%ecx,%eax
00004188	orl	$0xff000000,%eax
0000418d	movl	0x000001e8(%esi),%ecx
00004193	movl	(%ecx),%edx
00004195	movl	0x000000ec(%edx),%edx
0000419b	movl	%eax,0xf8(%ebp)
0000419e	movl	0xf8(%ebp),%eax
000041a1	movl	%eax,0x04(%esp)
000041a5	movl	%ecx,(%esp)
000041a8	call	*%edx
000041aa	movzbl	0x000001f7(%esi),%eax
000041b1	movzbl	0x000001f8(%esi),%ecx
000041b8	shll	$0x08,%ecx
000041bb	orl	%eax,%ecx
000041bd	movzbl	0x000001f9(%esi),%eax
000041c4	shll	$0x10,%eax
000041c7	orl	%ecx,%eax
000041c9	orl	$0xff000000,%eax
000041ce	movl	0x000001ec(%esi),%ecx
000041d4	movl	(%ecx),%edx
000041d6	movl	0x000000ec(%edx),%edx
000041dc	movl	%eax,0xf4(%ebp)
000041df	movl	0xf4(%ebp),%eax
000041e2	movl	%eax,0x04(%esp)
000041e6	movl	%ecx,(%esp)
000041e9	call	*%edx
000041eb	addl	$0x14,%esp
000041ee	popl	%esi
000041ef	popl	%ebp
000041f0	ret
000041f1	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::OnHSVSelected(KeyValues*):
00004200	pushl	%ebp
00004201	movl	%esp,%ebp
00004203	pushl	%ebx
00004204	pushl	%edi
00004205	pushl	%esi
00004206	subl	$0x1c,%esp
00004209	calll	0x0000420e
0000420e	popl	%edi
0000420f	leal	0x650a9-0x420e(%edi),%eax
00004215	movl	%eax,0x04(%esp)
00004219	movl	0x0c(%ebp),%ebx
0000421c	movl	%ebx,(%esp)
0000421f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00004227	calll	KeyValues::GetFloat(char const*, float)
0000422c	movl	0x08(%ebp),%esi
0000422f	fstps	0x000001fc(%esi)
00004235	leal	0x650ad-0x420e(%edi),%eax
0000423b	movl	%eax,0x04(%esp)
0000423f	movl	%ebx,(%esp)
00004242	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
0000424a	calll	KeyValues::GetFloat(char const*, float)
0000424f	fstps	0x00000200(%esi)
00004255	leal	0x650b8-0x420e(%edi),%eax
0000425b	movl	%eax,0x04(%esp)
0000425f	movl	%ebx,(%esp)
00004262	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
0000426a	calll	KeyValues::GetFloat(char const*, float)
0000426f	fstps	0x00000204(%esi)
00004275	leal	0xe8(%ebp),%eax
00004278	movl	%eax,0x04(%esp)
0000427c	leal	0x000001fc(%esi),%eax
00004282	movl	%eax,(%esp)
00004285	calll	HSVtoRGB(Vector const&, Vector&)
0000428a	movss	0x5f6e8-0x420e(%edi),%xmm3
00004292	movss	0xf0(%ebp),%xmm0
00004297	mulss	%xmm3,%xmm0
0000429b	movss	0x5f6ec-0x420e(%edi),%xmm1
000042a3	movss	0xec(%ebp),%xmm2
000042a8	mulss	%xmm3,%xmm2
000042ac	mulss	0xe8(%ebp),%xmm3
000042b1	addss	%xmm1,%xmm3
000042b5	cvttss2si	%xmm3,%edx
000042b9	xorb	%al,%al
000042bb	testl	%edx,%edx
000042bd	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
000042bf	js	0x000042cd
000042c1	movb	$0xff,%cl
000042c3	cmpl	$0x000000ff,%edx
000042c9	jg	0x000042cd
000042cb	movb	%dl,%cl
000042cd	addss	%xmm1,%xmm2
000042d1	cvttss2si	%xmm2,%edx
000042d5	movb	%cl,0x000001f7(%esi)
000042db	testl	%edx,%edx
000042dd	js	0x000042eb
000042df	movb	$0xff,%al
000042e1	cmpl	$0x000000ff,%edx
000042e7	jg	0x000042eb
000042e9	movb	%dl,%al
000042eb	addss	%xmm1,%xmm0
000042ef	cvttss2si	%xmm0,%ecx
000042f3	movb	%al,0x000001f8(%esi)
000042f9	xorb	%al,%al
000042fb	testl	%ecx,%ecx
000042fd	js	0x0000430b
000042ff	movb	$0xff,%al
00004301	cmpl	$0x000000ff,%ecx
00004307	jg	0x0000430b
00004309	movb	%cl,%al
0000430b	movb	%al,0x000001f9(%esi)
00004311	movl	%esi,(%esp)
00004314	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
0000431c	calll	CColorPickerPanel::OnColorChanged(vgui::TextEntry*)
00004321	addl	$0x1c,%esp
00004324	popl	%esi
00004325	popl	%edi
00004326	popl	%ebx
00004327	popl	%ebp
00004328	ret
00004329	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorPickerPanel::OnColorSelected(KeyValues*):
00004330	pushl	%ebp
00004331	movl	%esp,%ebp
00004333	pushl	%edi
00004334	pushl	%esi
00004335	subl	$0x20,%esp
00004338	calll	0x0000433d
0000433d	popl	%edi
0000433e	leal	0x650cc-0x433d(%edi),%eax
00004344	movl	%eax,0x04(%esp)
00004348	movl	0x0c(%ebp),%eax
0000434b	movl	%eax,(%esp)
0000434e	calll	KeyValues::GetColor(char const*)
00004353	movl	0x08(%ebp),%esi
00004356	movb	%al,0x000001f7(%esi)
0000435c	movl	%eax,%edx
0000435e	shrl	$0x08,%edx
00004361	movb	%dl,0x000001f8(%esi)
00004367	movl	%eax,%ecx
00004369	shrl	$0x10,%ecx
0000436c	movb	%cl,0x000001f9(%esi)
00004372	movzbl	%al,%eax
00004375	cvtsi2ss	%eax,%xmm1
00004379	movss	0x5f6f0-0x433d(%edi),%xmm0
00004381	divss	%xmm0,%xmm1
00004385	movss	%xmm1,0xe8(%ebp)
0000438a	movzbl	%dl,%eax
0000438d	cvtsi2ss	%eax,%xmm1
00004391	divss	%xmm0,%xmm1
00004395	movss	%xmm1,0xec(%ebp)
0000439a	movzbl	%cl,%eax
0000439d	cvtsi2ss	%eax,%xmm1
000043a1	divss	%xmm0,%xmm1
000043a5	movss	%xmm1,0xf0(%ebp)
000043aa	leal	0x000001fc(%esi),%eax
000043b0	movl	%eax,0x04(%esp)
000043b4	leal	0xe8(%ebp),%eax
000043b7	movl	%eax,(%esp)
000043ba	calll	RGBtoHSV(Vector const&, Vector&)
000043bf	movl	%esi,(%esp)
000043c2	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
000043ca	calll	CColorPickerPanel::OnColorChanged(vgui::TextEntry*)
000043cf	addl	$0x20,%esp
000043d2	popl	%esi
000043d3	popl	%edi
000043d4	popl	%ebp
000043d5	ret
000043d6	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::OnRadioButtonChecked(KeyValues*):
000043e0	pushl	%ebp
000043e1	movl	%esp,%ebp
000043e3	pushl	%esi
000043e4	subl	$0x14,%esp
000043e7	calll	0x000043ec
000043ec	popl	%eax
000043ed	leal	0x651b6-0x43ec(%eax),%eax
000043f3	movl	%eax,0x04(%esp)
000043f7	movl	0x0c(%ebp),%eax
000043fa	movl	%eax,(%esp)
000043fd	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00004405	calll	KeyValues::GetPtr(char const*, void*)
0000440a	movl	0x08(%ebp),%esi
0000440d	cmpl	0x000001c4(%esi),%eax
00004413	jne	0x00004483
00004415	movl	0x000001b0(%esi),%eax
0000441b	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004422	jne	0x0000442d
00004424	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
0000442b	je	0x00004449
0000442d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004437	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
00004441	movl	%eax,(%esp)
00004444	calll	CProceduralTexturePanel::DownloadTexture()
00004449	movl	0x000001b4(%esi),%eax
0000444f	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004456	jne	0x00004461
00004458	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
0000445f	je	0x0000447d
00004461	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
0000446b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
00004475	movl	%eax,(%esp)
00004478	calll	CProceduralTexturePanel::DownloadTexture()
0000447d	addl	$0x14,%esp
00004480	popl	%esi
00004481	popl	%ebp
00004482	ret
00004483	cmpl	0x000001c8(%esi),%eax
00004489	jne	0x000044ed
0000448b	movl	0x000001b0(%esi),%eax
00004491	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004498	jne	0x000044a3
0000449a	cmpl	$0x01,0x000001f8(%eax)
000044a1	je	0x000044bf
000044a3	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
000044ad	movl	$0x00000001,0x000001f8(%eax)
000044b7	movl	%eax,(%esp)
000044ba	calll	CProceduralTexturePanel::DownloadTexture()
000044bf	movl	0x000001b4(%esi),%eax
000044c5	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
000044cc	jne	0x000044d7
000044ce	cmpl	$0x01,0x000001f8(%eax)
000044d5	je	0x0000447d
000044d7	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
000044e1	movl	$0x00000001,0x000001f8(%eax)
000044eb	jmp	0x00004475
000044ed	cmpl	0x000001cc(%esi),%eax
000044f3	jne	0x0000455e
000044f5	movl	0x000001b0(%esi),%eax
000044fb	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004502	jne	0x0000450d
00004504	cmpl	$0x02,0x000001f8(%eax)
0000450b	je	0x00004529
0000450d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004517	movl	$0x00000002,0x000001f8(%eax)
00004521	movl	%eax,(%esp)
00004524	calll	CProceduralTexturePanel::DownloadTexture()
00004529	movl	0x000001b4(%esi),%eax
0000452f	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
00004536	jne	0x00004545
00004538	cmpl	$0x02,0x000001f8(%eax)
0000453f	je	0x0000447d
00004545	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f4(%eax)
0000454f	movl	$0x00000002,0x000001f8(%eax)
00004559	jmp	0x00004475
0000455e	cmpl	0x000001b8(%esi),%eax
00004564	jne	0x000045c5
00004566	movl	0x000001b0(%esi),%eax
0000456c	cmpl	$0x01,0x000001f4(%eax)
00004573	jne	0x0000457e
00004575	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
0000457c	je	0x0000459a
0000457e	movl	$0x00000001,0x000001f4(%eax)
00004588	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
00004592	movl	%eax,(%esp)
00004595	calll	CProceduralTexturePanel::DownloadTexture()
0000459a	movl	0x000001b4(%esi),%eax
000045a0	cmpl	$0x01,0x000001f4(%eax)
000045a7	jne	0x000045b6
000045a9	cmpl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x000001f8(%eax)
000045b0	je	0x0000447d
000045b6	movl	$0x00000001,0x000001f4(%eax)
000045c0	jmp	0x0000446b
000045c5	cmpl	0x000001bc(%esi),%eax
000045cb	jne	0x00004636
000045cd	movl	0x000001b0(%esi),%eax
000045d3	cmpl	$0x01,0x000001f4(%eax)
000045da	jne	0x000045e5
000045dc	cmpl	$0x01,0x000001f8(%eax)
000045e3	je	0x00004601
000045e5	movl	$0x00000001,0x000001f4(%eax)
000045ef	movl	$0x00000001,0x000001f8(%eax)
000045f9	movl	%eax,(%esp)
000045fc	calll	CProceduralTexturePanel::DownloadTexture()
00004601	movl	0x000001b4(%esi),%eax
00004607	cmpl	$0x01,0x000001f4(%eax)
0000460e	jne	0x0000461d
00004610	cmpl	$0x01,0x000001f8(%eax)
00004617	je	0x0000447d
0000461d	movl	$0x00000001,0x000001f4(%eax)
00004627	movl	$0x00000001,0x000001f8(%eax)
00004631	jmp	0x00004475
00004636	cmpl	0x000001c0(%esi),%eax
0000463c	jne	0x0000447d
00004642	movl	0x000001b0(%esi),%eax
00004648	cmpl	$0x01,0x000001f4(%eax)
0000464f	jne	0x0000465a
00004651	cmpl	$0x02,0x000001f8(%eax)
00004658	je	0x00004676
0000465a	movl	$0x00000001,0x000001f4(%eax)
00004664	movl	$0x00000002,0x000001f8(%eax)
0000466e	movl	%eax,(%esp)
00004671	calll	CProceduralTexturePanel::DownloadTexture()
00004676	movl	0x000001b4(%esi),%eax
0000467c	cmpl	$0x01,0x000001f4(%eax)
00004683	jne	0x00004692
00004685	cmpl	$0x02,0x000001f8(%eax)
0000468c	je	0x0000447d
00004692	movl	$0x00000001,0x000001f4(%eax)
0000469c	movl	$0x00000002,0x000001f8(%eax)
000046a6	jmp	0x00004475
000046ab	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerPanel::OnTextChanged(KeyValues*):
000046b0	pushl	%ebp
000046b1	movl	%esp,%ebp
000046b3	pushl	%ebx
000046b4	pushl	%edi
000046b5	pushl	%esi
000046b6	subl	$0x0000018c,%esp
000046bc	calll	0x000046c1
000046c1	popl	%ecx
000046c2	movl	%ecx,0xfffffe8c(%ebp)
000046c8	movl	0x6bd14-0x46c1(%ecx),%eax
000046ce	movl	%eax,0xfffffe80(%ebp)
000046d4	movl	(%eax),%eax
000046d6	movl	%eax,0xf0(%ebp)
000046d9	leal	0x651b6-0x46c1(%ecx),%eax
000046df	movl	%eax,0x04(%esp)
000046e3	movl	0x0c(%ebp),%eax
000046e6	movl	%eax,(%esp)
000046e9	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
000046f1	calll	KeyValues::GetPtr(char const*, void*)
000046f6	movl	0x08(%ebp),%ebx
000046f9	movss	0x000001fc(%ebx),%xmm0
00004701	movss	%xmm0,0xfffffe7c(%ebp)
00004709	movl	0x000001dc(%ebx),%edx
0000470f	leal	0x000001fc(%ebx),%edi
00004715	cmpl	%edx,%eax
00004717	jne	0x000047c7
0000471d	movl	%eax,0xfffffe88(%ebp)
00004723	movl	(%edx),%ecx
00004725	leal	0xfffffef0(%ebp),%esi
0000472b	movl	%esi,0x04(%esp)
0000472f	movl	%edx,(%esp)
00004732	movl	$0x00000100,0x08(%esp)
0000473a	call	*0x00000350(%ecx)
00004740	movl	%esi,(%esp)
00004743	calll	_atoi
00004748	xorb	%cl,%cl
0000474a	testl	%eax,%eax
0000474c	js	0x00004759
0000474e	movb	$0xff,%cl
00004750	cmpl	$0x000000ff,%eax
00004755	jg	0x00004759
00004757	movb	%al,%cl
00004759	movb	%cl,0x000001f7(%ebx)
0000475f	movzbl	%cl,%eax
00004762	cvtsi2ss	%eax,%xmm1
00004766	movl	0xfffffe8c(%ebp),%eax
0000476c	movss	0x5f6f8-0x46c1(%eax),%xmm0
00004774	divss	%xmm0,%xmm1
00004778	movzbl	0x000001f9(%ebx),%eax
0000477f	movzbl	0x000001f8(%ebx),%ecx
00004786	movss	%xmm1,0xfffffe90(%ebp)
0000478e	cvtsi2ss	%ecx,%xmm1
00004792	divss	%xmm0,%xmm1
00004796	movss	%xmm1,0xfffffe94(%ebp)
0000479e	cvtsi2ss	%eax,%xmm1
000047a2	divss	%xmm0,%xmm1
000047a6	movss	%xmm1,0xfffffe98(%ebp)
000047ae	movl	%edi,%esi
000047b0	movl	%esi,0x04(%esp)
000047b4	leal	0xfffffe90(%ebp),%eax
000047ba	movl	%eax,(%esp)
000047bd	calll	RGBtoHSV(Vector const&, Vector&)
000047c2	jmp	0x00004c12
000047c7	movl	0x000001e0(%ebx),%edx
000047cd	cmpl	%edx,%eax
000047cf	jne	0x00004877
000047d5	movl	%eax,0xfffffe88(%ebp)
000047db	movl	(%edx),%ecx
000047dd	leal	0xfffffef0(%ebp),%esi
000047e3	movl	%esi,0x04(%esp)
000047e7	movl	%edx,(%esp)
000047ea	movl	$0x00000100,0x08(%esp)
000047f2	call	*0x00000350(%ecx)
000047f8	movl	%esi,(%esp)
000047fb	calll	_atoi
00004800	xorb	%cl,%cl
00004802	testl	%eax,%eax
00004804	js	0x00004811
00004806	movb	$0xff,%cl
00004808	cmpl	$0x000000ff,%eax
0000480d	jg	0x00004811
0000480f	movb	%al,%cl
00004811	movb	%cl,0x000001f8(%ebx)
00004817	movzbl	0x000001f7(%ebx),%eax
0000481e	cvtsi2ss	%eax,%xmm1
00004822	movl	0xfffffe8c(%ebp),%eax
00004828	movss	0x5f6f8-0x46c1(%eax),%xmm0
00004830	divss	%xmm0,%xmm1
00004834	movzbl	0x000001f9(%ebx),%eax
0000483b	movss	%xmm1,0xfffffeb0(%ebp)
00004843	movzbl	%cl,%ecx
00004846	cvtsi2ss	%ecx,%xmm1
0000484a	divss	%xmm0,%xmm1
0000484e	movss	%xmm1,0xfffffeb4(%ebp)
00004856	cvtsi2ss	%eax,%xmm1
0000485a	divss	%xmm0,%xmm1
0000485e	movss	%xmm1,0xfffffeb8(%ebp)
00004866	movl	%edi,%esi
00004868	movl	%esi,0x04(%esp)
0000486c	leal	0xfffffeb0(%ebp),%eax
00004872	jmp	0x000047ba
00004877	movl	0x000001e4(%ebx),%edx
0000487d	cmpl	%edx,%eax
0000487f	jne	0x00004927
00004885	movl	%eax,0xfffffe88(%ebp)
0000488b	movl	(%edx),%ecx
0000488d	leal	0xfffffef0(%ebp),%esi
00004893	movl	%esi,0x04(%esp)
00004897	movl	%edx,(%esp)
0000489a	movl	$0x00000100,0x08(%esp)
000048a2	call	*0x00000350(%ecx)
000048a8	movl	%esi,(%esp)
000048ab	calll	_atoi
000048b0	xorb	%cl,%cl
000048b2	testl	%eax,%eax
000048b4	js	0x000048c1
000048b6	movb	$0xff,%cl
000048b8	cmpl	$0x000000ff,%eax
000048bd	jg	0x000048c1
000048bf	movb	%al,%cl
000048c1	movb	%cl,0x000001f9(%ebx)
000048c7	movzbl	0x000001f7(%ebx),%eax
000048ce	cvtsi2ss	%eax,%xmm1
000048d2	movl	0xfffffe8c(%ebp),%eax
000048d8	movss	0x5f6f8-0x46c1(%eax),%xmm0
000048e0	divss	%xmm0,%xmm1
000048e4	movzbl	0x000001f8(%ebx),%eax
000048eb	movss	%xmm1,0xfffffec0(%ebp)
000048f3	cvtsi2ss	%eax,%xmm1
000048f7	divss	%xmm0,%xmm1
000048fb	movss	%xmm1,0xfffffec4(%ebp)
00004903	movzbl	%cl,%eax
00004906	cvtsi2ss	%eax,%xmm1
0000490a	divss	%xmm0,%xmm1
0000490e	movss	%xmm1,0xfffffec8(%ebp)
00004916	movl	%edi,%esi
00004918	movl	%esi,0x04(%esp)
0000491c	leal	0xfffffec0(%ebp),%eax
00004922	jmp	0x000047ba
00004927	movl	%edi,0xfffffe84(%ebp)
0000492d	movl	CColorXYPreview::SetMode(ColorType_t, ColorChannel_t)(%ebx),%edx
00004933	cmpl	%edx,%eax
00004935	jne	0x00004984
00004937	movl	%eax,0xfffffe88(%ebp)
0000493d	movl	(%edx),%ecx
0000493f	leal	0xfffffef0(%ebp),%esi
00004945	movl	%esi,0x04(%esp)
00004949	movl	%edx,(%esp)
0000494c	movl	$0x00000100,0x08(%esp)
00004954	call	*0x00000350(%ecx)
0000495a	movl	%esi,(%esp)
0000495d	calll	_atoi
00004962	xorb	%cl,%cl
00004964	testl	%eax,%eax
00004966	js	0x00004973
00004968	movb	$0xff,%cl
0000496a	cmpl	$0x000000ff,%eax
0000496f	jg	0x00004973
00004971	movb	%al,%cl
00004973	movb	%cl,0x000001fb(%ebx)
00004979	movl	0xfffffe84(%ebp),%esi
0000497f	jmp	0x00004c12
00004984	movl	0x000001d0(%ebx),%edx
0000498a	cmpl	%edx,%eax
0000498c	jne	0x00004a37
00004992	movl	%eax,0xfffffe88(%ebp)
00004998	movl	(%edx),%ecx
0000499a	leal	0xfffffef0(%ebp),%esi
000049a0	movl	%esi,0x04(%esp)
000049a4	movl	%edx,(%esp)
000049a7	movl	$0x00000100,0x08(%esp)
000049af	call	*0x00000350(%ecx)
000049b5	movl	%esi,(%esp)
000049b8	calll	_atoi
000049bd	pxor	%xmm0,%xmm0
000049c1	testl	%eax,%eax
000049c3	js	0x000049e0
000049c5	cmpl	$0x00000168,%eax
000049ca	jle	0x000049dc
000049cc	movl	0xfffffe8c(%ebp),%eax
000049d2	movss	0x5f700-0x46c1(%eax),%xmm0
000049da	jmp	0x000049e0
000049dc	cvtsi2ss	%eax,%xmm0
000049e0	movl	0xfffffe84(%ebp),%esi
000049e6	movss	%xmm0,(%esi)
000049ea	leal	0xfffffee0(%ebp),%eax
000049f0	movl	%eax,0x04(%esp)
000049f4	movl	%esi,(%esp)
000049f7	calll	HSVtoRGB(Vector const&, Vector&)
000049fc	movl	0xfffffe8c(%ebp),%eax
00004a02	movss	0x5f6f8-0x46c1(%eax),%xmm3
00004a0a	movss	0xfffffee8(%ebp),%xmm0
00004a12	mulss	%xmm3,%xmm0
00004a16	movss	0x5f6fc-0x46c1(%eax),%xmm1
00004a1e	movss	0xfffffee4(%ebp),%xmm2
00004a26	mulss	%xmm3,%xmm2
00004a2a	mulss	0xfffffee0(%ebp),%xmm3
00004a32	jmp	0x00004bb2
00004a37	movl	0x000001d4(%ebx),%edx
00004a3d	cmpl	%edx,%eax
00004a3f	jne	0x00004af4
00004a45	movl	%eax,0xfffffe88(%ebp)
00004a4b	movl	(%edx),%ecx
00004a4d	leal	0xfffffef0(%ebp),%esi
00004a53	movl	%esi,0x04(%esp)
00004a57	movl	%edx,(%esp)
00004a5a	movl	$0x00000100,0x08(%esp)
00004a62	call	*0x00000350(%ecx)
00004a68	movl	%esi,(%esp)
00004a6b	calll	_atoi
00004a70	pxor	%xmm0,%xmm0
00004a74	testl	%eax,%eax
00004a76	js	0x00004a91
00004a78	cmpl	$0x64,%eax
00004a7b	jle	0x00004a8d
00004a7d	movl	0xfffffe8c(%ebp),%eax
00004a83	movss	0x5f6f4-0x46c1(%eax),%xmm0
00004a8b	jmp	0x00004a91
00004a8d	cvtsi2ss	%eax,%xmm0
00004a91	movl	0xfffffe8c(%ebp),%edi
00004a97	divss	0x5f6f4-0x46c1(%edi),%xmm0
00004a9f	movss	%xmm0,0x00000200(%ebx)
00004aa7	leal	0xfffffed0(%ebp),%eax
00004aad	movl	%eax,0x04(%esp)
00004ab1	movl	0xfffffe84(%ebp),%esi
00004ab7	movl	%esi,(%esp)
00004aba	calll	HSVtoRGB(Vector const&, Vector&)
00004abf	movss	0x5f6f8-0x46c1(%edi),%xmm3
00004ac7	movss	0xfffffed8(%ebp),%xmm0
00004acf	mulss	%xmm3,%xmm0
00004ad3	movss	0x5f6fc-0x46c1(%edi),%xmm1
00004adb	movss	0xfffffed4(%ebp),%xmm2
00004ae3	mulss	%xmm3,%xmm2
00004ae7	mulss	0xfffffed0(%ebp),%xmm3
00004aef	jmp	0x00004bb2
00004af4	movl	0x000001d8(%ebx),%edx
00004afa	cmpl	%edx,%eax
00004afc	movl	%eax,0xfffffe88(%ebp)
00004b02	movl	0xfffffe84(%ebp),%esi
00004b08	jne	0x00004c12
00004b0e	movl	(%edx),%ecx
00004b10	leal	0xfffffef0(%ebp),%esi
00004b16	movl	%esi,0x04(%esp)
00004b1a	movl	%edx,(%esp)
00004b1d	movl	$0x00000100,0x08(%esp)
00004b25	call	*0x00000350(%ecx)
00004b2b	movl	%esi,(%esp)
00004b2e	calll	_atoi
00004b33	pxor	%xmm0,%xmm0
00004b37	testl	%eax,%eax
00004b39	js	0x00004b54
00004b3b	cmpl	$0x64,%eax
00004b3e	jle	0x00004b50
00004b40	movl	0xfffffe8c(%ebp),%eax
00004b46	movss	0x5f6f4-0x46c1(%eax),%xmm0
00004b4e	jmp	0x00004b54
00004b50	cvtsi2ss	%eax,%xmm0
00004b54	movl	0xfffffe8c(%ebp),%edi
00004b5a	divss	0x5f6f4-0x46c1(%edi),%xmm0
00004b62	movss	%xmm0,0x00000204(%ebx)
00004b6a	leal	0xfffffea0(%ebp),%eax
00004b70	movl	%eax,0x04(%esp)
00004b74	movl	0xfffffe84(%ebp),%esi
00004b7a	movl	%esi,(%esp)
00004b7d	calll	HSVtoRGB(Vector const&, Vector&)
00004b82	movss	0x5f6f8-0x46c1(%edi),%xmm3
00004b8a	movss	0xfffffea8(%ebp),%xmm0
00004b92	mulss	%xmm3,%xmm0
00004b96	movss	0x5f6fc-0x46c1(%edi),%xmm1
00004b9e	movss	0xfffffea4(%ebp),%xmm2
00004ba6	mulss	%xmm3,%xmm2
00004baa	mulss	0xfffffea0(%ebp),%xmm3
00004bb2	addss	%xmm1,%xmm3
00004bb6	cvttss2si	%xmm3,%edx
00004bba	xorb	%al,%al
00004bbc	testl	%edx,%edx
00004bbe	movb	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),%cl
00004bc0	js	0x00004bce
00004bc2	movb	$0xff,%cl
00004bc4	cmpl	$0x000000ff,%edx
00004bca	jg	0x00004bce
00004bcc	movb	%dl,%cl
00004bce	addss	%xmm1,%xmm2
00004bd2	cvttss2si	%xmm2,%edx
00004bd6	movb	%cl,0x000001f7(%ebx)
00004bdc	testl	%edx,%edx
00004bde	js	0x00004bec
00004be0	movb	$0xff,%al
00004be2	cmpl	$0x000000ff,%edx
00004be8	jg	0x00004bec
00004bea	movb	%dl,%al
00004bec	addss	%xmm1,%xmm0
00004bf0	cvttss2si	%xmm0,%ecx
00004bf4	movb	%al,0x000001f8(%ebx)
00004bfa	xorb	%al,%al
00004bfc	testl	%ecx,%ecx
00004bfe	js	0x00004c0c
00004c00	movb	$0xff,%al
00004c02	cmpl	$0x000000ff,%ecx
00004c08	jg	0x00004c0c
00004c0a	movb	%cl,%al
00004c0c	movb	%al,0x000001f9(%ebx)
00004c12	movss	(%esi),%xmm0
00004c16	movl	0xfffffe8c(%ebp),%eax
00004c1c	ucomiss	0x5f704-0x46c1(%eax),%xmm0
00004c23	movl	0xfffffe88(%ebp),%eax
00004c29	jne	0x00004c39
00004c2b	jp	0x00004c39
00004c2d	movss	0xfffffe7c(%ebp),%xmm0
00004c35	movss	%xmm0,(%esi)
00004c39	movl	%eax,0x04(%esp)
00004c3d	movl	%ebx,(%esp)
00004c40	calll	CColorPickerPanel::OnColorChanged(vgui::TextEntry*)
00004c45	movl	0xfffffe80(%ebp),%eax
00004c4b	movl	(%eax),%eax
00004c4d	cmpl	0xf0(%ebp),%eax
00004c50	jne	0x00004c5d
00004c52	addl	$0x0000018c,%esp
00004c58	popl	%esi
00004c59	popl	%edi
00004c5a	popl	%ebx
00004c5b	popl	%ebp
00004c5c	ret
00004c5d	calll	___stack_chk_fail
00004c62	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::CColorPickerFrame(vgui::Panel*, char const*):
00004c70	pushl	%ebp
00004c71	movl	%esp,%ebp
00004c73	pushl	%ebx
00004c74	pushl	%edi
00004c75	pushl	%esi
00004c76	subl	$0x2c,%esp
00004c79	calll	0x00004c7e
00004c7e	popl	%ebx
00004c7f	leal	0x651cf-0x4c7e(%ebx),%eax
00004c85	movl	%eax,0x0c(%esp)
00004c89	movl	0x0c(%ebp),%eax
00004c8c	movl	%eax,0x08(%esp)
00004c90	leal	VTT for CColorPickerFrame-0x4c7e+0x00000004(%ebx),%eax
00004c96	movl	%eax,0xe8(%ebp)
00004c99	movl	%eax,0x04(%esp)
00004c9d	movl	0x08(%ebp),%esi
00004ca0	movl	%esi,(%esp)
00004ca3	movl	$0x00000001,0x14(%esp)
00004cab	movl	$0x00000001,0x10(%esp)
00004cb3	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00004cb8	leal	vtable for CColorPickerFrame-0x4c7e+0x0000000c(%ebx),%eax
00004cbe	movl	%eax,(%esi)
00004cc0	testb	$0x01,CColorPickerFrame::ChainToMap()::chained-0x4c7e(%ebx)
00004cc7	jne	0x00004cfe
00004cc9	movb	$0x01,CColorPickerFrame::ChainToMap()::chained-0x4c7e(%ebx)
00004cd0	leal	0x652a2-0x4c7e(%ebx),%eax
00004cd6	movl	%eax,(%esp)
00004cd9	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004cde	movl	%eax,%esi
00004ce0	leal	CColorPickerFrame::GetPanelClassName()-0x4c7e(%ebx),%eax
00004ce6	movl	%eax,0x1c(%esi)
00004ce9	testl	%esi,%esi
00004ceb	je	0x00004cfe
00004ced	leal	0x6533e-0x4c7e(%ebx),%eax
00004cf3	movl	%eax,(%esp)
00004cf6	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004cfb	movl	%eax,0x18(%esi)
00004cfe	testb	$0x01,CColorPickerFrame::ChainToAnimationMap()::chained-0x4c7e(%ebx)
00004d05	jne	0x00004d3c
00004d07	movb	$0x01,CColorPickerFrame::ChainToAnimationMap()::chained-0x4c7e(%ebx)
00004d0e	leal	0x652a2-0x4c7e(%ebx),%eax
00004d14	movl	%eax,(%esp)
00004d17	calll	FindOrAddPanelAnimationMap(char const*)
00004d1c	movl	%eax,%esi
00004d1e	leal	CColorPickerFrame::GetPanelClassName()-0x4c7e(%ebx),%eax
00004d24	movl	%eax,0x18(%esi)
00004d27	testl	%esi,%esi
00004d29	je	0x00004d3c
00004d2b	leal	0x6533e-0x4c7e(%ebx),%eax
00004d31	movl	%eax,(%esp)
00004d34	calll	FindOrAddPanelAnimationMap(char const*)
00004d39	movl	%eax,0x14(%esi)
00004d3c	testb	$0x01,CColorPickerFrame::KB_ChainToMap()::chained-0x4c7e(%ebx)
00004d43	jne	0x00004d7a
00004d45	movb	$0x01,CColorPickerFrame::KB_ChainToMap()::chained-0x4c7e(%ebx)
00004d4c	leal	0x652a2-0x4c7e(%ebx),%eax
00004d52	movl	%eax,(%esp)
00004d55	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004d5a	movl	%eax,%esi
00004d5c	leal	CColorPickerFrame::GetPanelClassName()-0x4c7e(%ebx),%eax
00004d62	movl	%eax,0x44(%esi)
00004d65	testl	%esi,%esi
00004d67	je	0x00004d7a
00004d69	leal	0x6533e-0x4c7e(%ebx),%eax
00004d6f	movl	%eax,(%esp)
00004d72	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00004d77	movl	%eax,0x18(%esi)
00004d7a	movl	0x08(%ebp),%ecx
00004d7d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%ecx)
00004d87	movl	(%ecx),%eax
00004d89	movl	0x000003c4(%eax),%eax
00004d8f	movl	%ecx,(%esp)
00004d92	movl	$0x00000001,0x04(%esp)
00004d9a	call	*%eax
00004d9c	movl	$0x00000208,(%esp)
00004da3	calll	operator new(unsigned long)
00004da8	movl	%eax,%edi
00004daa	leal	0x651e0-0x4c7e(%ebx),%eax
00004db0	movl	%eax,0x08(%esp)
00004db4	movl	0x08(%ebp),%esi
00004db7	movl	%esi,0x04(%esp)
00004dbb	movl	%edi,(%esp)
00004dbe	calll	CColorPickerPanel::CColorPickerPanel(vgui::Panel*, char const*)
00004dc3	movl	%edi,0x00000240(%esi)
00004dc9	movl	(%edi),%eax
00004dcb	movl	0x000000b4(%eax),%eax
00004dd1	movl	%esi,0x04(%esp)
00004dd5	movl	%edi,(%esp)
00004dd8	call	*%eax
00004dda	movl	$0x00000224,(%esp)
00004de1	calll	operator new(unsigned long)
00004de6	movl	%eax,%edi
00004de8	leal	0x651f5-0x4c7e(%ebx),%eax
00004dee	movl	%eax,0x14(%esp)
00004df2	movl	0x08(%ebp),%esi
00004df5	movl	%esi,0x10(%esp)
00004df9	movl	%eax,0x0c(%esp)
00004dfd	leal	0x651ec-0x4c7e(%ebx),%eax
00004e03	movl	%eax,0x08(%esp)
00004e07	movl	%esi,0x04(%esp)
00004e0b	movl	%edi,(%esp)
00004e0e	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00004e13	movl	%edi,0x00000244(%esi)
00004e19	movl	$0x00000224,(%esp)
00004e20	calll	operator new(unsigned long)
00004e25	movl	%eax,%edi
00004e27	leal	0x6521c-0x4c7e(%ebx),%eax
00004e2d	movl	%eax,0x14(%esp)
00004e31	movl	0x08(%ebp),%esi
00004e34	movl	%esi,0x10(%esp)
00004e38	leal	0x65205-0x4c7e(%ebx),%eax
00004e3e	movl	%eax,0x0c(%esp)
00004e42	leal	0x651f8-0x4c7e(%ebx),%eax
00004e48	movl	%eax,0x08(%esp)
00004e4c	movl	%esi,0x04(%esp)
00004e50	movl	%edi,(%esp)
00004e53	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00004e58	movl	%edi,0x00000248(%esi)
00004e5e	movl	(%esi),%eax
00004e60	movl	0x00000250(%eax),%eax
00004e66	movl	%esi,(%esp)
00004e69	movl	$0x00000001,0x04(%esp)
00004e71	call	*%eax
00004e73	movl	0x08(%ebp),%edx
00004e76	movl	(%edx),%eax
00004e78	movl	0x00000348(%eax),%eax
00004e7e	leal	0x65223-0x4c7e(%ebx),%ecx
00004e84	movl	%ecx,0x04(%esp)
00004e88	movl	%edx,(%esp)
00004e8b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
00004e93	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00004e9b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00004ea3	call	*%eax
00004ea5	leal	0xec(%ebp),%eax
00004ea8	movl	%eax,0x08(%esp)
00004eac	leal	0xf0(%ebp),%eax
00004eaf	movl	%eax,0x04(%esp)
00004eb3	movl	0x08(%ebp),%eax
00004eb6	movl	%eax,(%esp)
00004eb9	calll	vgui::Panel::GetSize(int&, int&)
00004ebe	movl	0xf0(%ebp),%eax
00004ec1	movl	0xec(%ebp),%ecx
00004ec4	movl	%ecx,0x08(%esp)
00004ec8	movl	%eax,0x04(%esp)
00004ecc	movl	0x08(%ebp),%eax
00004ecf	movl	%eax,(%esp)
00004ed2	calll	vgui::Panel::SetMinimumSize(int, int)
00004ed7	movl	0x10(%ebp),%ecx
00004eda	movl	0x08(%ebp),%edx
00004edd	movl	(%edx),%eax
00004edf	movl	0x000003ac(%eax),%eax
00004ee5	movl	%ecx,0x04(%esp)
00004ee9	movl	%edx,(%esp)
00004eec	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
00004ef4	call	*%eax
00004ef6	addl	$0x2c,%esp
00004ef9	popl	%esi
00004efa	popl	%edi
00004efb	popl	%ebx
00004efc	popl	%ebp
00004efd	ret
00004efe	movl	%eax,%esi
00004f00	jmp	0x00004f10
00004f02	jmp	0x00004f06
00004f04	jmp	0x00004f06
00004f06	movl	%eax,%esi
00004f08	movl	%edi,(%esp)
00004f0b	calll	operator delete(void*)
00004f10	movl	0xe8(%ebp),%eax
00004f13	movl	%eax,0x04(%esp)
00004f17	movl	0x08(%ebp),%eax
00004f1a	movl	%eax,(%esp)
00004f1d	calll	vgui::Frame::~Frame()
00004f22	movl	%esi,(%esp)
00004f25	calll	__Unwind_Resume
00004f2a	calll	std::terminate()
00004f2f	nop
CColorPickerFrame::CColorPickerFrame(vgui::Panel*, char const*):
00004f30	pushl	%ebp
00004f31	movl	%esp,%ebp
00004f33	pushl	%ebx
00004f34	pushl	%edi
00004f35	pushl	%esi
00004f36	subl	$0x2c,%esp
00004f39	calll	0x00004f3e
00004f3e	popl	%ebx
00004f3f	leal	0x651cf-0x4f3e(%ebx),%eax
00004f45	movl	%eax,0x0c(%esp)
00004f49	movl	0x10(%ebp),%eax
00004f4c	movl	%eax,0x08(%esp)
00004f50	movl	0x0c(%ebp),%esi
00004f53	leal	0x04(%esi),%eax
00004f56	movl	%eax,0xe8(%ebp)
00004f59	movl	%eax,0x04(%esp)
00004f5d	movl	0x08(%ebp),%edi
00004f60	movl	%edi,(%esp)
00004f63	movl	$0x00000001,0x14(%esp)
00004f6b	movl	$0x00000001,0x10(%esp)
00004f73	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00004f78	movl	(%esi),%eax
00004f7a	movl	%eax,(%edi)
00004f7c	testb	$0x01,CColorPickerFrame::ChainToMap()::chained-0x4f3e(%ebx)
00004f83	jne	0x00004fba
00004f85	movb	$0x01,CColorPickerFrame::ChainToMap()::chained-0x4f3e(%ebx)
00004f8c	leal	0x652a2-0x4f3e(%ebx),%eax
00004f92	movl	%eax,(%esp)
00004f95	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004f9a	movl	%eax,%esi
00004f9c	leal	CColorPickerFrame::GetPanelClassName()-0x4f3e(%ebx),%eax
00004fa2	movl	%eax,0x1c(%esi)
00004fa5	testl	%esi,%esi
00004fa7	je	0x00004fba
00004fa9	leal	0x6533e-0x4f3e(%ebx),%eax
00004faf	movl	%eax,(%esp)
00004fb2	calll	vgui::FindOrAddPanelMessageMap(char const*)
00004fb7	movl	%eax,0x18(%esi)
00004fba	testb	$0x01,CColorPickerFrame::ChainToAnimationMap()::chained-0x4f3e(%ebx)
00004fc1	jne	0x00004ff8
00004fc3	movb	$0x01,CColorPickerFrame::ChainToAnimationMap()::chained-0x4f3e(%ebx)
00004fca	leal	0x652a2-0x4f3e(%ebx),%eax
00004fd0	movl	%eax,(%esp)
00004fd3	calll	FindOrAddPanelAnimationMap(char const*)
00004fd8	movl	%eax,%esi
00004fda	leal	CColorPickerFrame::GetPanelClassName()-0x4f3e(%ebx),%eax
00004fe0	movl	%eax,0x18(%esi)
00004fe3	testl	%esi,%esi
00004fe5	je	0x00004ff8
00004fe7	leal	0x6533e-0x4f3e(%ebx),%eax
00004fed	movl	%eax,(%esp)
00004ff0	calll	FindOrAddPanelAnimationMap(char const*)
00004ff5	movl	%eax,0x14(%esi)
00004ff8	testb	$0x01,CColorPickerFrame::KB_ChainToMap()::chained-0x4f3e(%ebx)
00004fff	jne	0x00005036
00005001	movb	$0x01,CColorPickerFrame::KB_ChainToMap()::chained-0x4f3e(%ebx)
00005008	leal	0x652a2-0x4f3e(%ebx),%eax
0000500e	movl	%eax,(%esp)
00005011	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00005016	movl	%eax,%esi
00005018	leal	CColorPickerFrame::GetPanelClassName()-0x4f3e(%ebx),%eax
0000501e	movl	%eax,0x44(%esi)
00005021	testl	%esi,%esi
00005023	je	0x00005036
00005025	leal	0x6533e-0x4f3e(%ebx),%eax
0000502b	movl	%eax,(%esp)
0000502e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00005033	movl	%eax,0x18(%esi)
00005036	movl	0x08(%ebp),%ecx
00005039	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%ecx)
00005043	movl	(%ecx),%eax
00005045	movl	0x000003c4(%eax),%eax
0000504b	movl	%ecx,(%esp)
0000504e	movl	$0x00000001,0x04(%esp)
00005056	call	*%eax
00005058	movl	$0x00000208,(%esp)
0000505f	calll	operator new(unsigned long)
00005064	movl	%eax,%edi
00005066	leal	0x651e0-0x4f3e(%ebx),%eax
0000506c	movl	%eax,0x08(%esp)
00005070	movl	0x08(%ebp),%esi
00005073	movl	%esi,0x04(%esp)
00005077	movl	%edi,(%esp)
0000507a	calll	CColorPickerPanel::CColorPickerPanel(vgui::Panel*, char const*)
0000507f	movl	%edi,0x00000240(%esi)
00005085	movl	(%edi),%eax
00005087	movl	0x000000b4(%eax),%eax
0000508d	movl	%esi,0x04(%esp)
00005091	movl	%edi,(%esp)
00005094	call	*%eax
00005096	movl	$0x00000224,(%esp)
0000509d	calll	operator new(unsigned long)
000050a2	movl	%eax,%edi
000050a4	leal	0x651f5-0x4f3e(%ebx),%eax
000050aa	movl	%eax,0x14(%esp)
000050ae	movl	0x08(%ebp),%esi
000050b1	movl	%esi,0x10(%esp)
000050b5	movl	%eax,0x0c(%esp)
000050b9	leal	0x651ec-0x4f3e(%ebx),%eax
000050bf	movl	%eax,0x08(%esp)
000050c3	movl	%esi,0x04(%esp)
000050c7	movl	%edi,(%esp)
000050ca	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
000050cf	movl	%edi,0x00000244(%esi)
000050d5	movl	$0x00000224,(%esp)
000050dc	calll	operator new(unsigned long)
000050e1	movl	%eax,%edi
000050e3	leal	0x6521c-0x4f3e(%ebx),%eax
000050e9	movl	%eax,0x14(%esp)
000050ed	movl	0x08(%ebp),%esi
000050f0	movl	%esi,0x10(%esp)
000050f4	leal	0x65205-0x4f3e(%ebx),%eax
000050fa	movl	%eax,0x0c(%esp)
000050fe	leal	0x651f8-0x4f3e(%ebx),%eax
00005104	movl	%eax,0x08(%esp)
00005108	movl	%esi,0x04(%esp)
0000510c	movl	%edi,(%esp)
0000510f	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00005114	movl	%edi,0x00000248(%esi)
0000511a	movl	(%esi),%eax
0000511c	movl	0x00000250(%eax),%eax
00005122	movl	%esi,(%esp)
00005125	movl	$0x00000001,0x04(%esp)
0000512d	call	*%eax
0000512f	movl	0x08(%ebp),%edx
00005132	movl	(%edx),%eax
00005134	movl	0x00000348(%eax),%eax
0000513a	leal	0x65223-0x4f3e(%ebx),%ecx
00005140	movl	%ecx,0x04(%esp)
00005144	movl	%edx,(%esp)
00005147	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
0000514f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00005157	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
0000515f	call	*%eax
00005161	leal	0xec(%ebp),%eax
00005164	movl	%eax,0x08(%esp)
00005168	leal	0xf0(%ebp),%eax
0000516b	movl	%eax,0x04(%esp)
0000516f	movl	0x08(%ebp),%eax
00005172	movl	%eax,(%esp)
00005175	calll	vgui::Panel::GetSize(int&, int&)
0000517a	movl	0xf0(%ebp),%eax
0000517d	movl	0xec(%ebp),%ecx
00005180	movl	%ecx,0x08(%esp)
00005184	movl	%eax,0x04(%esp)
00005188	movl	0x08(%ebp),%eax
0000518b	movl	%eax,(%esp)
0000518e	calll	vgui::Panel::SetMinimumSize(int, int)
00005193	movl	0x14(%ebp),%ecx
00005196	movl	0x08(%ebp),%edx
00005199	movl	(%edx),%eax
0000519b	movl	0x000003ac(%eax),%eax
000051a1	movl	%ecx,0x04(%esp)
000051a5	movl	%edx,(%esp)
000051a8	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x08(%esp)
000051b0	call	*%eax
000051b2	addl	$0x2c,%esp
000051b5	popl	%esi
000051b6	popl	%edi
000051b7	popl	%ebx
000051b8	popl	%ebp
000051b9	ret
000051ba	movl	%eax,%esi
000051bc	jmp	0x000051cc
000051be	jmp	0x000051c2
000051c0	jmp	0x000051c2
000051c2	movl	%eax,%esi
000051c4	movl	%edi,(%esp)
000051c7	calll	operator delete(void*)
000051cc	movl	0xe8(%ebp),%eax
000051cf	movl	%eax,0x04(%esp)
000051d3	movl	0x08(%ebp),%eax
000051d6	movl	%eax,(%esp)
000051d9	calll	vgui::Frame::~Frame()
000051de	movl	%esi,(%esp)
000051e1	calll	__Unwind_Resume
000051e6	calll	std::terminate()
000051eb	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::~CColorPickerFrame():
000051f0	pushl	%ebp
000051f1	movl	%esp,%ebp
000051f3	pushl	%ebx
000051f4	pushl	%edi
000051f5	pushl	%esi
000051f6	subl	$0x0c,%esp
000051f9	calll	0x000051fe
000051fe	popl	%ebx
000051ff	leal	vtable for CColorPickerFrame-0x51fe+0x0000000c(%ebx),%eax
00005205	movl	0x08(%ebp),%edi
00005208	movl	%eax,(%edi)
0000520a	movl	0x0000024c(%edi),%eax
00005210	testl	%eax,%eax
00005212	je	0x00005226
00005214	movl	%eax,(%esp)
00005217	calll	KeyValues::deleteThis()
0000521c	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%edi)
00005226	leal	VTT for CColorPickerFrame-0x51fe+0x00000004(%ebx),%eax
0000522c	movl	%eax,0x04(%esp)
00005230	movl	%edi,(%esp)
00005233	calll	vgui::Frame::~Frame()
00005238	addl	$0x0c,%esp
0000523b	popl	%esi
0000523c	popl	%edi
0000523d	popl	%ebx
0000523e	popl	%ebp
0000523f	jmp	operator delete(void*)
00005244	movl	%eax,%esi
00005246	leal	VTT for CColorPickerFrame-0x51fe+0x00000004(%ebx),%eax
0000524c	movl	%eax,0x04(%esp)
00005250	movl	%edi,(%esp)
00005253	calll	vgui::Frame::~Frame()
00005258	jmp	0x00005261
0000525a	calll	std::terminate()
0000525f	movl	%eax,%esi
00005261	movl	%edi,(%esp)
00005264	calll	operator delete(void*)
00005269	movl	%esi,(%esp)
0000526c	calll	__Unwind_Resume
00005271	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::~CColorPickerFrame():
00005280	pushl	%ebp
00005281	movl	%esp,%ebp
00005283	pushl	%ebx
00005284	pushl	%edi
00005285	pushl	%esi
00005286	subl	$0x0c,%esp
00005289	calll	0x0000528e
0000528e	popl	%ebx
0000528f	leal	vtable for CColorPickerFrame-0x528e+0x0000000c(%ebx),%eax
00005295	movl	0x08(%ebp),%edi
00005298	movl	%eax,(%edi)
0000529a	movl	0x0000024c(%edi),%eax
000052a0	testl	%eax,%eax
000052a2	je	0x000052b6
000052a4	movl	%eax,(%esp)
000052a7	calll	KeyValues::deleteThis()
000052ac	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%edi)
000052b6	leal	VTT for CColorPickerFrame-0x528e+0x00000004(%ebx),%eax
000052bc	movl	%eax,0x04(%esp)
000052c0	movl	%edi,(%esp)
000052c3	calll	vgui::Frame::~Frame()
000052c8	addl	$0x0c,%esp
000052cb	popl	%esi
000052cc	popl	%edi
000052cd	popl	%ebx
000052ce	popl	%ebp
000052cf	ret
000052d0	movl	%eax,%esi
000052d2	leal	VTT for CColorPickerFrame-0x528e+0x00000004(%ebx),%eax
000052d8	movl	%eax,0x04(%esp)
000052dc	movl	%edi,(%esp)
000052df	calll	vgui::Frame::~Frame()
000052e4	movl	%esi,(%esp)
000052e7	calll	__Unwind_Resume
000052ec	calll	std::terminate()
000052f1	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::~CColorPickerFrame():
00005300	pushl	%ebp
00005301	movl	%esp,%ebp
00005303	pushl	%ebx
00005304	pushl	%edi
00005305	pushl	%esi
00005306	subl	$0x0c,%esp
00005309	movl	0x0c(%ebp),%edi
0000530c	movl	(%edi),%eax
0000530e	movl	0x08(%ebp),%ebx
00005311	movl	%eax,(%ebx)
00005313	movl	0x0000024c(%ebx),%eax
00005319	testl	%eax,%eax
0000531b	je	0x0000532f
0000531d	movl	%eax,(%esp)
00005320	calll	KeyValues::deleteThis()
00005325	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%ebx)
0000532f	addl	$0x04,%edi
00005332	movl	%edi,0x04(%esp)
00005336	movl	%ebx,(%esp)
00005339	calll	vgui::Frame::~Frame()
0000533e	addl	$0x0c,%esp
00005341	popl	%esi
00005342	popl	%edi
00005343	popl	%ebx
00005344	popl	%ebp
00005345	ret
00005346	movl	%eax,%esi
00005348	addl	$0x04,%edi
0000534b	movl	%edi,0x04(%esp)
0000534f	movl	%ebx,(%esp)
00005352	calll	vgui::Frame::~Frame()
00005357	movl	%esi,(%esp)
0000535a	calll	__Unwind_Resume
0000535f	calll	std::terminate()
00005364	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::CleanUpMessage():
00005370	pushl	%ebp
00005371	movl	%esp,%ebp
00005373	pushl	%esi
00005374	pushl	%eax
00005375	movl	0x08(%ebp),%esi
00005378	movl	0x0000024c(%esi),%eax
0000537e	testl	%eax,%eax
00005380	je	0x00005394
00005382	movl	%eax,(%esp)
00005385	calll	KeyValues::deleteThis()
0000538a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%esi)
00005394	addl	$0x04,%esp
00005397	popl	%esi
00005398	popl	%ebp
00005399	ret
0000539a	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::DoModal(Color, KeyValues*):
000053a0	pushl	%ebp
000053a1	movl	%esp,%ebp
000053a3	pushl	%edi
000053a4	pushl	%esi
000053a5	subl	$0x10,%esp
000053a8	movl	0x08(%ebp),%esi
000053ab	movl	0x0000024c(%esi),%eax
000053b1	testl	%eax,%eax
000053b3	je	0x000053c7
000053b5	movl	%eax,(%esp)
000053b8	calll	KeyValues::deleteThis()
000053bd	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%esi)
000053c7	movl	0x10(%ebp),%edi
000053ca	leal	0x0c(%ebp),%ecx
000053cd	movl	0x00000240(%esi),%eax
000053d3	movl	(%ecx),%ecx
000053d5	movl	%ecx,0xf4(%ebp)
000053d8	movl	0xf4(%ebp),%ecx
000053db	movl	%ecx,0x04(%esp)
000053df	movl	%eax,(%esp)
000053e2	calll	CColorPickerPanel::SetInitialColor(Color)
000053e7	movl	%edi,0x0000024c(%esi)
000053ed	movl	%esi,(%esp)
000053f0	calll	vgui::Frame::DoModal()
000053f5	addl	$0x10,%esp
000053f8	popl	%esi
000053f9	popl	%edi
000053fa	popl	%ebp
000053fb	ret
000053fc	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax)
CColorPickerFrame::GetInitialColor(Color*):
00005400	movl	0x04(%esp),%eax
00005404	movl	0x00000240(%eax),%edx
0000540a	movb	0x000001fa(%edx),%al
00005410	movb	0x000001f6(%edx),%cl
00005416	movb	0x000001f4(%edx),%ch
0000541c	movb	0x000001f5(%edx),%ah
00005422	movl	0x08(%esp),%edx
00005426	movb	%ch,(%edx)
00005428	movb	%ah,0x01(%edx)
0000542b	movb	%cl,0x02(%edx)
0000542e	movb	%al,0x03(%edx)
00005431	ret
00005432	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerFrame::OnCommand(char const*):
00005440	pushl	%ebp
00005441	movl	%esp,%ebp
00005443	pushl	%ebx
00005444	pushl	%edi
00005445	pushl	%esi
00005446	subl	$0x2c,%esp
00005449	calll	0x0000544e
0000544e	popl	%eax
0000544f	movl	%eax,0xe8(%ebp)
00005452	leal	0x651f5-0x544e(%eax),%eax
00005458	movl	%eax,0x04(%esp)
0000545c	movl	0x0c(%ebp),%esi
0000545f	movl	%esi,(%esp)
00005462	calll	V_stricmp(char const*, char const*)
00005467	movl	0x08(%ebp),%edi
0000546a	testl	%eax,%eax
0000546c	jne	0x00005524
00005472	movl	0x00000240(%edi),%eax
00005478	movzbl	0x000001fb(%eax),%edi
0000547f	movzbl	0x000001f9(%eax),%ebx
00005486	movzbl	0x000001f8(%eax),%esi
0000548d	movzbl	0x000001f7(%eax),%eax
00005494	movl	%eax,0xe0(%ebp)
00005497	movl	$0x00000020,(%esp)
0000549e	calll	KeyValues::operator new(unsigned long)
000054a3	movl	%eax,%ecx
000054a5	movl	%ecx,0xe4(%ebp)
000054a8	movl	0xe8(%ebp),%eax
000054ab	leal	0x65241-0x544e(%eax),%eax
000054b1	movl	%eax,0x04(%esp)
000054b5	movl	%ecx,(%esp)
000054b8	calll	KeyValues::KeyValues(char const*)
000054bd	shll	$0x08,%esi
000054c0	addl	0xe0(%ebp),%esi
000054c3	shll	$0x10,%ebx
000054c6	orl	%esi,%ebx
000054c8	shll	$0x18,%edi
000054cb	orl	%ebx,%edi
000054cd	movl	%edi,0xf0(%ebp)
000054d0	movl	0xf0(%ebp),%eax
000054d3	movl	%eax,0x08(%esp)
000054d7	movl	0xe8(%ebp),%eax
000054da	leal	0x650cc-0x544e(%eax),%eax
000054e0	movl	%eax,0x04(%esp)
000054e4	movl	0xe4(%ebp),%edi
000054e7	movl	%edi,(%esp)
000054ea	calll	KeyValues::SetColor(char const*, Color)
000054ef	movl	0x08(%ebp),%ecx
000054f2	movl	0x0000024c(%ecx),%eax
000054f8	testl	%eax,%eax
000054fa	movl	%ecx,%esi
000054fc	je	0x00005514
000054fe	movl	%eax,0x04(%esp)
00005502	movl	%edi,(%esp)
00005505	calll	KeyValues::AddSubKey(KeyValues*)
0000550a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%esi)
00005514	movl	(%esi),%eax
00005516	movl	%esi,(%esp)
00005519	call	*0x000003c0(%eax)
0000551f	jmp	0x0000566c
00005524	movl	0xe8(%ebp),%eax
00005527	leal	0x6521c-0x544e(%eax),%eax
0000552d	movl	%eax,0x04(%esp)
00005531	movl	%esi,(%esp)
00005534	calll	V_stricmp(char const*, char const*)
00005539	testl	%eax,%eax
0000553b	jne	0x000055af
0000553d	movl	0xe8(%ebp),%ebx
00005540	movl	0x6bd18-0x544e(%ebx),%eax
00005546	movl	(%eax),%ecx
00005548	movl	(%ecx),%eax
0000554a	movl	%ecx,(%esp)
0000554d	call	*0x58(%eax)
00005550	movl	$0x00000020,(%esp)
00005557	calll	KeyValues::operator new(unsigned long)
0000555c	movl	%eax,%esi
0000555e	leal	0x65253-0x544e(%ebx),%eax
00005564	movl	%eax,0x04(%esp)
00005568	movl	%esi,(%esp)
0000556b	calll	KeyValues::KeyValues(char const*)
00005570	movl	0x0000024c(%edi),%eax
00005576	testl	%eax,%eax
00005578	je	0x00005590
0000557a	movl	%eax,0x04(%esp)
0000557e	movl	%esi,(%esp)
00005581	calll	KeyValues::AddSubKey(KeyValues*)
00005586	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%edi)
00005590	movl	(%edi),%eax
00005592	movl	%edi,(%esp)
00005595	call	*0x000003c0(%eax)
0000559b	movl	(%edi),%eax
0000559d	movl	%esi,0x04(%esp)
000055a1	movl	%edi,(%esp)
000055a4	call	*0x000000c0(%eax)
000055aa	jmp	0x00005689
000055af	movl	0xe8(%ebp),%eax
000055b2	leal	0x65265-0x544e(%eax),%eax
000055b8	movl	%eax,0x04(%esp)
000055bc	movl	%esi,(%esp)
000055bf	calll	V_stricmp(char const*, char const*)
000055c4	testl	%eax,%eax
000055c6	jne	0x0000567d
000055cc	movl	0x00000240(%edi),%eax
000055d2	movzbl	0x000001fb(%eax),%edi
000055d9	movzbl	0x000001f9(%eax),%ebx
000055e0	movzbl	0x000001f8(%eax),%esi
000055e7	movzbl	0x000001f7(%eax),%eax
000055ee	movl	%eax,0xe0(%ebp)
000055f1	movl	$0x00000020,(%esp)
000055f8	calll	KeyValues::operator new(unsigned long)
000055fd	movl	%eax,%ecx
000055ff	movl	%ecx,0xe4(%ebp)
00005602	movl	0xe8(%ebp),%eax
00005605	leal	0x6526d-0x544e(%eax),%eax
0000560b	movl	%eax,0x04(%esp)
0000560f	movl	%ecx,(%esp)
00005612	calll	KeyValues::KeyValues(char const*)
00005617	shll	$0x08,%esi
0000561a	addl	0xe0(%ebp),%esi
0000561d	shll	$0x10,%ebx
00005620	orl	%esi,%ebx
00005622	shll	$0x18,%edi
00005625	orl	%ebx,%edi
00005627	movl	%edi,0xec(%ebp)
0000562a	movl	0xec(%ebp),%eax
0000562d	movl	%eax,0x08(%esp)
00005631	movl	0xe8(%ebp),%eax
00005634	leal	0x650cc-0x544e(%eax),%eax
0000563a	movl	%eax,0x04(%esp)
0000563e	movl	0xe4(%ebp),%edi
00005641	movl	%edi,(%esp)
00005644	calll	KeyValues::SetColor(char const*, Color)
00005649	movl	0x08(%ebp),%ecx
0000564c	movl	0x0000024c(%ecx),%eax
00005652	testl	%eax,%eax
00005654	movl	%ecx,%esi
00005656	je	0x0000566c
00005658	movl	%eax,(%esp)
0000565b	calll	KeyValues::MakeCopy() const
00005660	movl	%eax,0x04(%esp)
00005664	movl	%edi,(%esp)
00005667	calll	KeyValues::AddSubKey(KeyValues*)
0000566c	movl	(%esi),%eax
0000566e	movl	%edi,0x04(%esp)
00005672	movl	%esi,(%esp)
00005675	call	*0x000000c0(%eax)
0000567b	jmp	0x00005689
0000567d	movl	%esi,0x04(%esp)
00005681	movl	%edi,(%esp)
00005684	calll	vgui::Frame::OnCommand(char const*)
00005689	addl	$0x2c,%esp
0000568c	popl	%esi
0000568d	popl	%edi
0000568e	popl	%ebx
0000568f	popl	%ebp
00005690	ret
00005691	movl	%eax,%edi
00005693	movl	0xe4(%ebp),%eax
00005696	movl	%eax,(%esp)
00005699	calll	KeyValues::operator delete(void*)
0000569e	movl	%edi,(%esp)
000056a1	calll	__Unwind_Resume
000056a6	movl	%eax,%edi
000056a8	movl	%esi,(%esp)
000056ab	calll	KeyValues::operator delete(void*)
000056b0	jmp	0x0000569e
000056b2	calll	std::terminate()
000056b7	movl	%eax,%edi
000056b9	movl	0xe4(%ebp),%eax
000056bc	movl	%eax,(%esp)
000056bf	calll	KeyValues::operator delete(void*)
000056c4	jmp	0x0000569e
000056c6	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::CColorPickerButton(vgui::Panel*, char const*, vgui::Panel*):
000056d0	pushl	%ebp
000056d1	movl	%esp,%ebp
000056d3	pushl	%ebx
000056d4	pushl	%edi
000056d5	pushl	%esi
000056d6	subl	$0x4c,%esp
000056d9	calll	0x000056de
000056de	popl	%edi
000056df	leal	0x65280-0x56de(%edi),%eax
000056e5	movl	%eax,0x10(%esp)
000056e9	movl	0x10(%ebp),%eax
000056ec	movl	%eax,0x0c(%esp)
000056f0	movl	0x0c(%ebp),%eax
000056f3	movl	%eax,0x08(%esp)
000056f7	leal	VTT for CColorPickerButton-0x56de+0x00000004(%edi),%eax
000056fd	movl	%eax,0xd4(%ebp)
00005700	movl	%eax,0x04(%esp)
00005704	movl	0x08(%ebp),%ebx
00005707	movl	%ebx,(%esp)
0000570a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005712	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
0000571a	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000571f	leal	vtable for CColorPickerButton-0x56de+0x0000000c(%edi),%eax
00005725	movl	%eax,(%ebx)
00005727	testb	$0x01,CColorPickerButton::ChainToMap()::chained-0x56de(%edi)
0000572e	jne	0x00005765
00005730	movb	$0x01,CColorPickerButton::ChainToMap()::chained-0x56de(%edi)
00005737	leal	0x652f8-0x56de(%edi),%eax
0000573d	movl	%eax,(%esp)
00005740	calll	vgui::FindOrAddPanelMessageMap(char const*)
00005745	movl	%eax,%esi
00005747	leal	CColorPickerButton::GetPanelClassName()-0x56de(%edi),%eax
0000574d	movl	%eax,0x1c(%esi)
00005750	testl	%esi,%esi
00005752	je	0x00005765
00005754	leal	0x65331-0x56de(%edi),%eax
0000575a	movl	%eax,(%esp)
0000575d	calll	vgui::FindOrAddPanelMessageMap(char const*)
00005762	movl	%eax,0x18(%esi)
00005765	testb	$0x01,CColorPickerButton::ChainToAnimationMap()::chained-0x56de(%edi)
0000576c	jne	0x000057a3
0000576e	movb	$0x01,CColorPickerButton::ChainToAnimationMap()::chained-0x56de(%edi)
00005775	leal	0x652f8-0x56de(%edi),%eax
0000577b	movl	%eax,(%esp)
0000577e	calll	FindOrAddPanelAnimationMap(char const*)
00005783	movl	%eax,%esi
00005785	leal	CColorPickerButton::GetPanelClassName()-0x56de(%edi),%eax
0000578b	movl	%eax,0x18(%esi)
0000578e	testl	%esi,%esi
00005790	je	0x000057a3
00005792	leal	0x65331-0x56de(%edi),%eax
00005798	movl	%eax,(%esp)
0000579b	calll	FindOrAddPanelAnimationMap(char const*)
000057a0	movl	%eax,0x14(%esi)
000057a3	testb	$0x01,CColorPickerButton::KB_ChainToMap()::chained-0x56de(%edi)
000057aa	jne	0x000057e1
000057ac	movb	$0x01,CColorPickerButton::KB_ChainToMap()::chained-0x56de(%edi)
000057b3	leal	0x652f8-0x56de(%edi),%eax
000057b9	movl	%eax,(%esp)
000057bc	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000057c1	movl	%eax,%esi
000057c3	leal	CColorPickerButton::GetPanelClassName()-0x56de(%edi),%eax
000057c9	movl	%eax,0x44(%esi)
000057cc	testl	%esi,%esi
000057ce	je	0x000057e1
000057d0	leal	0x65331-0x56de(%edi),%eax
000057d6	movl	%eax,(%esp)
000057d9	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000057de	movl	%eax,0x18(%esi)
000057e1	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnPicked::InitVar()::bAdded-0x56de(%edi)
000057e8	jne	0x00005840
000057ea	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnPicked::InitVar()::bAdded-0x56de(%edi)
000057f1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xdc(%ebp)
000057f8	movl	$0x00000471,0xd8(%ebp)
000057ff	movsd	0xd8(%ebp),%xmm0
00005804	movsd	%xmm0,0x04(%esp)
0000580a	leal	0x65241-0x56de(%edi),%eax
00005810	movl	%eax,(%esp)
00005813	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
0000581b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005823	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
0000582b	movl	$0x00000006,0x10(%esp)
00005833	movl	$0x00000001,0x0c(%esp)
0000583b	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00005840	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnPreview::InitVar()::bAdded-0x56de(%edi)
00005847	jne	0x0000589f
00005849	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnPreview::InitVar()::bAdded-0x56de(%edi)
00005850	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe4(%ebp)
00005857	movl	$0x00000475,0xe0(%ebp)
0000585e	movsd	0xe0(%ebp),%xmm0
00005863	movsd	%xmm0,0x04(%esp)
00005869	leal	0x6526d-0x56de(%edi),%eax
0000586f	movl	%eax,(%esp)
00005872	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
0000587a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005882	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
0000588a	movl	$0x00000006,0x10(%esp)
00005892	movl	$0x00000001,0x0c(%esp)
0000589a	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000589f	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnCancelled::InitVar()::bAdded-0x56de(%edi)
000058a6	jne	0x000058fe
000058a8	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnCancelled::InitVar()::bAdded-0x56de(%edi)
000058af	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xec(%ebp)
000058b6	movl	$0x00000479,0xe8(%ebp)
000058bd	movsd	0xe8(%ebp),%xmm0
000058c2	movsd	%xmm0,0x04(%esp)
000058c8	leal	0x65253-0x56de(%edi),%eax
000058ce	movl	%eax,(%esp)
000058d1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
000058d9	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
000058e1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
000058e9	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
000058f1	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
000058f9	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000058fe	movl	0x14(%ebp),%eax
00005901	movl	$0xffffffff,0x00000228(%ebx)
0000590b	testl	%eax,%eax
0000590d	je	0x00005920
0000590f	movl	(%ebx),%ecx
00005911	movl	0x000000b4(%ecx),%ecx
00005917	movl	%eax,0x04(%esp)
0000591b	movl	%ebx,(%esp)
0000591e	call	*%ecx
00005920	addl	$0x4c,%esp
00005923	popl	%esi
00005924	popl	%edi
00005925	popl	%ebx
00005926	popl	%ebp
00005927	ret
00005928	movl	%eax,%esi
0000592a	movl	0xd4(%ebp),%eax
0000592d	movl	%eax,0x04(%esp)
00005931	movl	%ebx,(%esp)
00005934	calll	vgui::Button::~Button()
00005939	movl	%esi,(%esp)
0000593c	calll	__Unwind_Resume
00005941	calll	std::terminate()
00005946	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::CColorPickerButton(vgui::Panel*, char const*, vgui::Panel*):
00005950	pushl	%ebp
00005951	movl	%esp,%ebp
00005953	pushl	%ebx
00005954	pushl	%edi
00005955	pushl	%esi
00005956	subl	$0x4c,%esp
00005959	calll	0x0000595e
0000595e	popl	%edi
0000595f	leal	0x65280-0x595e(%edi),%eax
00005965	movl	%eax,0x10(%esp)
00005969	movl	0x14(%ebp),%eax
0000596c	movl	%eax,0x0c(%esp)
00005970	movl	0x10(%ebp),%eax
00005973	movl	%eax,0x08(%esp)
00005977	movl	0x0c(%ebp),%esi
0000597a	leal	0x04(%esi),%eax
0000597d	movl	%eax,0xd4(%ebp)
00005980	movl	%eax,0x04(%esp)
00005984	movl	0x08(%ebp),%ebx
00005987	movl	%ebx,(%esp)
0000598a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005992	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
0000599a	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000599f	movl	(%esi),%eax
000059a1	movl	%eax,(%ebx)
000059a3	testb	$0x01,CColorPickerButton::ChainToMap()::chained-0x595e(%edi)
000059aa	jne	0x000059e1
000059ac	movb	$0x01,CColorPickerButton::ChainToMap()::chained-0x595e(%edi)
000059b3	leal	0x652f8-0x595e(%edi),%eax
000059b9	movl	%eax,(%esp)
000059bc	calll	vgui::FindOrAddPanelMessageMap(char const*)
000059c1	movl	%eax,%esi
000059c3	leal	CColorPickerButton::GetPanelClassName()-0x595e(%edi),%eax
000059c9	movl	%eax,0x1c(%esi)
000059cc	testl	%esi,%esi
000059ce	je	0x000059e1
000059d0	leal	0x65331-0x595e(%edi),%eax
000059d6	movl	%eax,(%esp)
000059d9	calll	vgui::FindOrAddPanelMessageMap(char const*)
000059de	movl	%eax,0x18(%esi)
000059e1	testb	$0x01,CColorPickerButton::ChainToAnimationMap()::chained-0x595e(%edi)
000059e8	jne	0x00005a1f
000059ea	movb	$0x01,CColorPickerButton::ChainToAnimationMap()::chained-0x595e(%edi)
000059f1	leal	0x652f8-0x595e(%edi),%eax
000059f7	movl	%eax,(%esp)
000059fa	calll	FindOrAddPanelAnimationMap(char const*)
000059ff	movl	%eax,%esi
00005a01	leal	CColorPickerButton::GetPanelClassName()-0x595e(%edi),%eax
00005a07	movl	%eax,0x18(%esi)
00005a0a	testl	%esi,%esi
00005a0c	je	0x00005a1f
00005a0e	leal	0x65331-0x595e(%edi),%eax
00005a14	movl	%eax,(%esp)
00005a17	calll	FindOrAddPanelAnimationMap(char const*)
00005a1c	movl	%eax,0x14(%esi)
00005a1f	testb	$0x01,CColorPickerButton::KB_ChainToMap()::chained-0x595e(%edi)
00005a26	jne	0x00005a5d
00005a28	movb	$0x01,CColorPickerButton::KB_ChainToMap()::chained-0x595e(%edi)
00005a2f	leal	0x652f8-0x595e(%edi),%eax
00005a35	movl	%eax,(%esp)
00005a38	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00005a3d	movl	%eax,%esi
00005a3f	leal	CColorPickerButton::GetPanelClassName()-0x595e(%edi),%eax
00005a45	movl	%eax,0x44(%esi)
00005a48	testl	%esi,%esi
00005a4a	je	0x00005a5d
00005a4c	leal	0x65331-0x595e(%edi),%eax
00005a52	movl	%eax,(%esp)
00005a55	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00005a5a	movl	%eax,0x18(%esi)
00005a5d	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnPicked::InitVar()::bAdded-0x595e(%edi)
00005a64	jne	0x00005abc
00005a66	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnPicked::InitVar()::bAdded-0x595e(%edi)
00005a6d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xdc(%ebp)
00005a74	movl	$0x00000471,0xd8(%ebp)
00005a7b	movsd	0xd8(%ebp),%xmm0
00005a80	movsd	%xmm0,0x04(%esp)
00005a86	leal	0x65241-0x595e(%edi),%eax
00005a8c	movl	%eax,(%esp)
00005a8f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00005a97	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005a9f	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00005aa7	movl	$0x00000006,0x10(%esp)
00005aaf	movl	$0x00000001,0x0c(%esp)
00005ab7	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00005abc	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnPreview::InitVar()::bAdded-0x595e(%edi)
00005ac3	jne	0x00005b1b
00005ac5	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnPreview::InitVar()::bAdded-0x595e(%edi)
00005acc	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xe4(%ebp)
00005ad3	movl	$0x00000475,0xe0(%ebp)
00005ada	movsd	0xe0(%ebp),%xmm0
00005adf	movsd	%xmm0,0x04(%esp)
00005ae5	leal	0x6526d-0x595e(%edi),%eax
00005aeb	movl	%eax,(%esp)
00005aee	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00005af6	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005afe	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00005b06	movl	$0x00000006,0x10(%esp)
00005b0e	movl	$0x00000001,0x0c(%esp)
00005b16	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00005b1b	testb	$0x01,CColorPickerButton::PanelMessageFunc_OnCancelled::InitVar()::bAdded-0x595e(%edi)
00005b22	jne	0x00005b7a
00005b24	movb	$0x01,CColorPickerButton::PanelMessageFunc_OnCancelled::InitVar()::bAdded-0x595e(%edi)
00005b2b	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0xec(%ebp)
00005b32	movl	$0x00000479,0xe8(%ebp)
00005b39	movsd	0xe8(%ebp),%xmm0
00005b3e	movsd	%xmm0,0x04(%esp)
00005b44	leal	0x65253-0x595e(%edi),%eax
00005b4a	movl	%eax,(%esp)
00005b4d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x1c(%esp)
00005b55	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x18(%esp)
00005b5d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x14(%esp)
00005b65	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x10(%esp)
00005b6d	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0c(%esp)
00005b75	calll	CColorPickerButton::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00005b7a	movl	0x18(%ebp),%eax
00005b7d	movl	$0xffffffff,0x00000228(%ebx)
00005b87	testl	%eax,%eax
00005b89	je	0x00005b9c
00005b8b	movl	(%ebx),%ecx
00005b8d	movl	0x000000b4(%ecx),%ecx
00005b93	movl	%eax,0x04(%esp)
00005b97	movl	%ebx,(%esp)
00005b9a	call	*%ecx
00005b9c	addl	$0x4c,%esp
00005b9f	popl	%esi
00005ba0	popl	%edi
00005ba1	popl	%ebx
00005ba2	popl	%ebp
00005ba3	ret
00005ba4	movl	%eax,%esi
00005ba6	movl	0xd4(%ebp),%eax
00005ba9	movl	%eax,0x04(%esp)
00005bad	movl	%ebx,(%esp)
00005bb0	calll	vgui::Button::~Button()
00005bb5	movl	%esi,(%esp)
00005bb8	calll	__Unwind_Resume
00005bbd	calll	std::terminate()
00005bc2	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::~CColorPickerButton():
00005bd0	pushl	%ebp
00005bd1	movl	%esp,%ebp
00005bd3	pushl	%edi
00005bd4	pushl	%esi
00005bd5	subl	$0x10,%esp
00005bd8	calll	0x00005bdd
00005bdd	popl	%eax
00005bde	movl	0x08(%ebp),%edi
00005be1	leal	VTT for CColorPickerButton-0x5bdd+0x00000004(%eax),%eax
00005be7	movl	%eax,0x04(%esp)
00005beb	movl	%edi,(%esp)
00005bee	calll	vgui::Button::~Button()
00005bf3	addl	$0x10,%esp
00005bf6	popl	%esi
00005bf7	popl	%edi
00005bf8	popl	%ebp
00005bf9	jmp	operator delete(void*)
00005bfe	movl	%eax,%esi
00005c00	movl	%edi,(%esp)
00005c03	calll	operator delete(void*)
00005c08	movl	%esi,(%esp)
00005c0b	calll	__Unwind_Resume
CColorPickerButton::~CColorPickerButton():
00005c10	pushl	%ebp
00005c11	movl	%esp,%ebp
00005c13	subl	$0x08,%esp
00005c16	calll	0x00005c1b
00005c1b	popl	%eax
00005c1c	leal	VTT for CColorPickerButton-0x5c1b+0x00000004(%eax),%eax
00005c22	movl	%eax,0x04(%esp)
00005c26	movl	0x08(%ebp),%eax
00005c29	movl	%eax,(%esp)
00005c2c	calll	vgui::Button::~Button()
00005c31	addl	$0x08,%esp
00005c34	popl	%ebp
00005c35	ret
00005c36	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::~CColorPickerButton():
00005c40	pushl	%ebp
00005c41	movl	%esp,%ebp
00005c43	subl	$0x08,%esp
00005c46	movl	0x0c(%ebp),%eax
00005c49	addl	$0x04,%eax
00005c4c	movl	%eax,0x04(%esp)
00005c50	movl	0x08(%ebp),%eax
00005c53	movl	%eax,(%esp)
00005c56	calll	vgui::Button::~Button()
00005c5b	addl	$0x08,%esp
00005c5e	popl	%ebp
00005c5f	ret
CColorPickerButton::ApplySchemeSettings(vgui::IScheme*):
00005c60	pushl	%ebp
00005c61	movl	%esp,%ebp
00005c63	pushl	%esi
00005c64	subl	$0x24,%esp
00005c67	movl	0x0c(%ebp),%eax
00005c6a	movl	%eax,0x04(%esp)
00005c6e	movl	0x08(%ebp),%esi
00005c71	movl	%esi,(%esp)
00005c74	calll	vgui::Button::ApplySchemeSettings(vgui::IScheme*)
00005c79	movl	(%esi),%eax
00005c7b	movl	0x00000430(%eax),%eax
00005c81	movl	0x00000228(%esi),%ecx
00005c87	movl	%ecx,0xf8(%ebp)
00005c8a	movl	%ecx,0xf4(%ebp)
00005c8d	movl	0xf4(%ebp),%ecx
00005c90	movl	%ecx,0x08(%esp)
00005c94	movl	0xf8(%ebp),%ecx
00005c97	movl	%ecx,0x04(%esp)
00005c9b	movl	%esi,(%esp)
00005c9e	call	*%eax
00005ca0	movl	(%esi),%eax
00005ca2	movl	0x00000434(%eax),%eax
00005ca8	movl	0x00000228(%esi),%ecx
00005cae	movl	%ecx,0xf0(%ebp)
00005cb1	movl	%ecx,0xec(%ebp)
00005cb4	movl	0xec(%ebp),%ecx
00005cb7	movl	%ecx,0x08(%esp)
00005cbb	movl	0xf0(%ebp),%ecx
00005cbe	movl	%ecx,0x04(%esp)
00005cc2	movl	%esi,(%esp)
00005cc5	call	*%eax
00005cc7	movl	(%esi),%eax
00005cc9	movl	0x0000043c(%eax),%eax
00005ccf	movl	0x00000228(%esi),%ecx
00005cd5	movl	%ecx,0xe8(%ebp)
00005cd8	movl	%ecx,0xe4(%ebp)
00005cdb	movl	0xe4(%ebp),%ecx
00005cde	movl	%ecx,0x08(%esp)
00005ce2	movl	0xe8(%ebp),%ecx
00005ce5	movl	%ecx,0x04(%esp)
00005ce9	movl	%esi,(%esp)
00005cec	call	*%eax
00005cee	addl	$0x24,%esp
00005cf1	popl	%esi
00005cf2	popl	%ebp
00005cf3	ret
00005cf4	nopw	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::UpdateButtonColor():
00005d00	pushl	%ebp
00005d01	movl	%esp,%ebp
00005d03	pushl	%esi
00005d04	subl	$0x24,%esp
00005d07	movl	0x08(%ebp),%esi
00005d0a	movl	(%esi),%eax
00005d0c	movl	0x00000430(%eax),%eax
00005d12	movl	0x00000228(%esi),%ecx
00005d18	movl	%ecx,0xf8(%ebp)
00005d1b	movl	%ecx,0xf4(%ebp)
00005d1e	movl	0xf4(%ebp),%ecx
00005d21	movl	%ecx,0x08(%esp)
00005d25	movl	0xf8(%ebp),%ecx
00005d28	movl	%ecx,0x04(%esp)
00005d2c	movl	%esi,(%esp)
00005d2f	call	*%eax
00005d31	movl	(%esi),%eax
00005d33	movl	0x00000434(%eax),%eax
00005d39	movl	0x00000228(%esi),%ecx
00005d3f	movl	%ecx,0xf0(%ebp)
00005d42	movl	%ecx,0xec(%ebp)
00005d45	movl	0xec(%ebp),%ecx
00005d48	movl	%ecx,0x08(%esp)
00005d4c	movl	0xf0(%ebp),%ecx
00005d4f	movl	%ecx,0x04(%esp)
00005d53	movl	%esi,(%esp)
00005d56	call	*%eax
00005d58	movl	(%esi),%eax
00005d5a	movl	0x0000043c(%eax),%eax
00005d60	movl	0x00000228(%esi),%ecx
00005d66	movl	%ecx,0xe8(%ebp)
00005d69	movl	%ecx,0xe4(%ebp)
00005d6c	movl	0xe4(%ebp),%ecx
00005d6f	movl	%ecx,0x08(%esp)
00005d73	movl	0xe8(%ebp),%ecx
00005d76	movl	%ecx,0x04(%esp)
00005d7a	movl	%esi,(%esp)
00005d7d	call	*%eax
00005d7f	addl	$0x24,%esp
00005d82	popl	%esi
00005d83	popl	%ebp
00005d84	ret
00005d85	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::OnPicked(KeyValues*):
00005d90	pushl	%ebp
00005d91	movl	%esp,%ebp
00005d93	pushl	%ebx
00005d94	pushl	%edi
00005d95	pushl	%esi
00005d96	subl	$0x2c,%esp
00005d99	calll	0x00005d9e
00005d9e	popl	%ebx
00005d9f	leal	0x650cc-0x5d9e(%ebx),%eax
00005da5	movl	%eax,0xd4(%ebp)
00005da8	movl	%eax,0x04(%esp)
00005dac	movl	0x0c(%ebp),%eax
00005daf	movl	%eax,(%esp)
00005db2	calll	KeyValues::GetColor(char const*)
00005db7	movl	0x08(%ebp),%edi
00005dba	movl	%eax,0x00000228(%edi)
00005dc0	movl	(%edi),%ecx
00005dc2	movl	0x00000430(%ecx),%ecx
00005dc8	movl	%eax,0xf0(%ebp)
00005dcb	movl	%eax,0xec(%ebp)
00005dce	movl	0xec(%ebp),%eax
00005dd1	movl	%eax,0x08(%esp)
00005dd5	movl	0xf0(%ebp),%eax
00005dd8	movl	%eax,0x04(%esp)
00005ddc	movl	%edi,(%esp)
00005ddf	call	*%ecx
00005de1	movl	(%edi),%eax
00005de3	movl	0x00000434(%eax),%eax
00005de9	movl	0x00000228(%edi),%ecx
00005def	movl	%ecx,0xe8(%ebp)
00005df2	movl	%ecx,0xe4(%ebp)
00005df5	movl	0xe4(%ebp),%ecx
00005df8	movl	%ecx,0x08(%esp)
00005dfc	movl	0xe8(%ebp),%ecx
00005dff	movl	%ecx,0x04(%esp)
00005e03	movl	%edi,(%esp)
00005e06	call	*%eax
00005e08	movl	(%edi),%eax
00005e0a	movl	0x0000043c(%eax),%eax
00005e10	movl	0x00000228(%edi),%ecx
00005e16	movl	%ecx,0xe0(%ebp)
00005e19	movl	%ecx,0xdc(%ebp)
00005e1c	movl	0xdc(%ebp),%ecx
00005e1f	movl	%ecx,0x08(%esp)
00005e23	movl	0xe0(%ebp),%ecx
00005e26	movl	%ecx,0x04(%esp)
00005e2a	movl	%edi,(%esp)
00005e2d	call	*%eax
00005e2f	movl	$0x00000020,(%esp)
00005e36	calll	KeyValues::operator new(unsigned long)
00005e3b	movl	%eax,%esi
00005e3d	leal	0x65241-0x5d9e(%ebx),%eax
00005e43	movl	%eax,0x04(%esp)
00005e47	movl	%esi,(%esp)
00005e4a	calll	KeyValues::KeyValues(char const*)
00005e4f	movl	0x00000228(%edi),%eax
00005e55	movl	%eax,0xd8(%ebp)
00005e58	movl	0xd8(%ebp),%eax
00005e5b	movl	%eax,0x08(%esp)
00005e5f	movl	0xd4(%ebp),%eax
00005e62	movl	%eax,0x04(%esp)
00005e66	movl	%esi,(%esp)
00005e69	calll	KeyValues::SetColor(char const*, Color)
00005e6e	movl	(%edi),%eax
00005e70	movl	%esi,0x04(%esp)
00005e74	movl	%edi,(%esp)
00005e77	call	*0x000000c0(%eax)
00005e7d	movl	%edi,(%esp)
00005e80	calll	vgui::Button::PlayButtonReleasedSound()
00005e85	movl	(%edi),%eax
00005e87	movl	%edi,(%esp)
00005e8a	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00005e92	call	*0x000003f0(%eax)
00005e98	addl	$0x2c,%esp
00005e9b	popl	%esi
00005e9c	popl	%edi
00005e9d	popl	%ebx
00005e9e	popl	%ebp
00005e9f	ret
00005ea0	movl	%eax,%edi
00005ea2	movl	%esi,(%esp)
00005ea5	calll	KeyValues::operator delete(void*)
00005eaa	movl	%edi,(%esp)
00005ead	calll	__Unwind_Resume
00005eb2	calll	std::terminate()
00005eb7	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::SetColor(Color const&):
00005ec0	pushl	%ebp
00005ec1	movl	%esp,%ebp
00005ec3	pushl	%esi
00005ec4	subl	$0x24,%esp
00005ec7	movl	0x0c(%ebp),%eax
00005eca	movl	(%eax),%ecx
00005ecc	movl	0x08(%ebp),%esi
00005ecf	movl	%ecx,0x00000228(%esi)
00005ed5	movl	(%esi),%eax
00005ed7	movl	0x00000430(%eax),%eax
00005edd	movl	%ecx,0xf8(%ebp)
00005ee0	movl	%ecx,0xf4(%ebp)
00005ee3	movl	0xf4(%ebp),%ecx
00005ee6	movl	%ecx,0x08(%esp)
00005eea	movl	0xf8(%ebp),%ecx
00005eed	movl	%ecx,0x04(%esp)
00005ef1	movl	%esi,(%esp)
00005ef4	call	*%eax
00005ef6	movl	(%esi),%eax
00005ef8	movl	0x00000434(%eax),%eax
00005efe	movl	0x00000228(%esi),%ecx
00005f04	movl	%ecx,0xf0(%ebp)
00005f07	movl	%ecx,0xec(%ebp)
00005f0a	movl	0xec(%ebp),%ecx
00005f0d	movl	%ecx,0x08(%esp)
00005f11	movl	0xf0(%ebp),%ecx
00005f14	movl	%ecx,0x04(%esp)
00005f18	movl	%esi,(%esp)
00005f1b	call	*%eax
00005f1d	movl	(%esi),%eax
00005f1f	movl	0x0000043c(%eax),%eax
00005f25	movl	0x00000228(%esi),%ecx
00005f2b	movl	%ecx,0xe8(%ebp)
00005f2e	movl	%ecx,0xe4(%ebp)
00005f31	movl	0xe4(%ebp),%ecx
00005f34	movl	%ecx,0x08(%esp)
00005f38	movl	0xe8(%ebp),%ecx
00005f3b	movl	%ecx,0x04(%esp)
00005f3f	movl	%esi,(%esp)
00005f42	call	*%eax
00005f44	addl	$0x24,%esp
00005f47	popl	%esi
00005f48	popl	%ebp
00005f49	ret
00005f4a	nopw	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::OnPreview(KeyValues*):
00005f50	pushl	%ebp
00005f51	movl	%esp,%ebp
00005f53	pushl	%ebx
00005f54	pushl	%edi
00005f55	pushl	%esi
00005f56	subl	$0x1c,%esp
00005f59	calll	0x00005f5e
00005f5e	popl	%edi
00005f5f	movl	$0x00000020,(%esp)
00005f66	calll	KeyValues::operator new(unsigned long)
00005f6b	movl	%eax,%esi
00005f6d	leal	0x6526d-0x5f5e(%edi),%eax
00005f73	movl	%eax,0x04(%esp)
00005f77	movl	%esi,(%esp)
00005f7a	calll	KeyValues::KeyValues(char const*)
00005f7f	movl	0x0c(%ebp),%eax
00005f82	movl	0x08(%ebp),%ebx
00005f85	leal	0x650cc-0x5f5e(%edi),%edi
00005f8b	movl	%edi,0x04(%esp)
00005f8f	movl	%eax,(%esp)
00005f92	calll	KeyValues::GetColor(char const*)
00005f97	movl	%eax,0xf0(%ebp)
00005f9a	movl	0xf0(%ebp),%eax
00005f9d	movl	%eax,0x08(%esp)
00005fa1	movl	%edi,0x04(%esp)
00005fa5	movl	%esi,(%esp)
00005fa8	calll	KeyValues::SetColor(char const*, Color)
00005fad	movl	(%ebx),%eax
00005faf	movl	%esi,0x04(%esp)
00005fb3	movl	%ebx,(%esp)
00005fb6	call	*0x000000c0(%eax)
00005fbc	addl	$0x1c,%esp
00005fbf	popl	%esi
00005fc0	popl	%edi
00005fc1	popl	%ebx
00005fc2	popl	%ebp
00005fc3	ret
00005fc4	movl	%eax,%edi
00005fc6	movl	%esi,(%esp)
00005fc9	calll	KeyValues::operator delete(void*)
00005fce	movl	%edi,(%esp)
00005fd1	calll	__Unwind_Resume
00005fd6	calll	std::terminate()
00005fdb	nopl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::OnCancelled():
00005fe0	pushl	%ebp
00005fe1	movl	%esp,%ebp
00005fe3	pushl	%ebx
00005fe4	pushl	%edi
00005fe5	pushl	%esi
00005fe6	subl	$0x1c,%esp
00005fe9	calll	0x00005fee
00005fee	popl	%ebx
00005fef	movl	0x08(%ebp),%edi
00005ff2	movl	(%edi),%eax
00005ff4	movl	%edi,(%esp)
00005ff7	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x04(%esp)
00005fff	call	*0x000003f0(%eax)
00006005	movl	$0x00000020,(%esp)
0000600c	calll	KeyValues::operator new(unsigned long)
00006011	movl	%eax,%esi
00006013	leal	0x65253-0x5fee(%ebx),%eax
00006019	movl	%eax,0x04(%esp)
0000601d	movl	%esi,(%esp)
00006020	calll	KeyValues::KeyValues(char const*)
00006025	movl	0x00000228(%edi),%eax
0000602b	movl	%eax,0xf0(%ebp)
0000602e	movl	0xf0(%ebp),%eax
00006031	movl	%eax,0x08(%esp)
00006035	leal	0x65281-0x5fee(%ebx),%eax
0000603b	movl	%eax,0x04(%esp)
0000603f	movl	%esi,(%esp)
00006042	calll	KeyValues::SetColor(char const*, Color)
00006047	movl	(%edi),%eax
00006049	movl	%esi,0x04(%esp)
0000604d	movl	%edi,(%esp)
00006050	call	*0x000000c0(%eax)
00006056	addl	$0x1c,%esp
00006059	popl	%esi
0000605a	popl	%edi
0000605b	popl	%ebx
0000605c	popl	%ebp
0000605d	ret
0000605e	movl	%eax,%edi
00006060	movl	%esi,(%esp)
00006063	calll	KeyValues::operator delete(void*)
00006068	movl	%edi,(%esp)
0000606b	calll	__Unwind_Resume
00006070	calll	std::terminate()
00006075	nopl	%cs:CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*)(%eax,%eax)
CColorPickerButton::DoClick():
00006080	pushl	%ebp
00006081	movl	%esp,%ebp
00006083	pushl	%ebx
00006084	pushl	%edi
00006085	pushl	%esi
00006086	subl	$0x1c,%esp
00006089	calll	0x0000608e
0000608e	popl	%ebx
0000608f	movl	0x08(%ebp),%edi
00006092	movl	(%edi),%eax
00006094	movl	%edi,(%esp)
00006097	movl	$0x00000001,0x04(%esp)
0000609f	call	*0x000003f0(%eax)
000060a5	movl	$0x00000250,(%esp)
000060ac	calll	operator new(unsigned long)
000060b1	movl	%eax,%esi
000060b3	leal	0x6528f-0x608e(%ebx),%eax
000060b9	movl	%eax,0x08(%esp)
000060bd	movl	%edi,0x04(%esp)
000060c1	movl	%esi,(%esp)
000060c4	calll	CColorPickerFrame::CColorPickerFrame(vgui::Panel*, char const*)
000060c9	movl	(%esi),%eax
000060cb	movl	%edi,0x04(%esp)
000060cf	movl	%esi,(%esp)
000060d2	call	*0x000000b4(%eax)
000060d8	movl	0x00000228(%edi),%edi
000060de	movl	0x0000024c(%esi),%eax
000060e4	testl	%eax,%eax
000060e6	je	0x000060fa
000060e8	movl	%eax,(%esp)
000060eb	calll	KeyValues::deleteThis()
000060f0	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%esi)
000060fa	movl	0x00000240(%esi),%eax
00006100	movl	%edi,0xf0(%ebp)
00006103	movl	0xf0(%ebp),%ecx
00006106	movl	%ecx,0x04(%esp)
0000610a	movl	%eax,(%esp)
0000610d	calll	CColorPickerPanel::SetInitialColor(Color)
00006112	movl	CColorXYPreview::CColorXYPreview(vgui::Panel*, char const*),0x0000024c(%esi)
0000611c	movl	%esi,(%esp)
0000611f	calll	vgui::Frame::DoModal()
00006124	addl	$0x1c,%esp
00006127	popl	%esi
00006128	popl	%edi
00006129	popl	%ebx
0000612a	popl	%ebp
0000612b	ret
0000612c	movl	%eax,%edi
0000612e	movl	%esi,(%esp)
00006131	calll	operator delete(void*)
00006136	movl	%edi,(%esp)
00006139	calll	__Unwind_Resume
0000613e	nop
CColorPickerButton::SetColor(int, int, int, int):
00006140	pushl	%ebp
00006141	movl	%esp,%ebp
00006143	pushl	%esi
00006144	subl	$0x24,%esp
00006147	movb	0x0c(%ebp),%al
0000614a	movl	0x08(%ebp),%esi
0000614d	movb	%al,0x00000228(%esi)
00006153	movb	0x10(%ebp),%al
00006156	movb	%al,0x00000229(%esi)
0000615c	movb	0x14(%ebp),%al
0000615f	movb	%al,0x0000022a(%esi)
00006165	movb	0x18(%ebp),%al
00006168	movb	%al,0x0000022b(%esi)
0000616e	movl	(%esi),%eax
00006170	movl	0x00000430(%eax),%eax
00006176	movl	0x00000228(%esi),%ecx
0000617c	movl	%ecx,0xf8(%ebp)
0000617f	movl	%ecx,0xf4(%ebp)
00006182	movl	0xf4(%ebp),%ecx
00006185	movl	%ecx,0x08(%esp)
00006189	movl	0xf8(%ebp),%ecx
0000618c	movl	%ecx,0x04(%esp)
00006190	movl	%esi,(%esp)
00006193	call	*%eax
00006195	movl	(%esi),%eax
00006197	movl	0x00000434(%eax),%eax
0000619d	movl	0x00000228(%esi),%ecx
000061a3	movl	%ecx,0xf0(%ebp)
000061a6	movl	%ecx,0xec(%ebp)
000061a9	movl	0xec(%ebp),%ecx
000061ac	movl	%ecx,0x08(%esp)
000061b0	movl	0xf0(%ebp),%ecx
000061b3	movl	%ecx,0x04(%esp)
000061b7	movl	%esi,(%esp)
000061ba	call	*%eax
000061bc	movl	(%esi),%eax
000061be	movl	0x0000043c(%eax),%eax
000061c4	movl	0x00000228(%esi),%ecx
000061ca	movl	%ecx,0xe8(%ebp)
000061cd	movl	%ecx,0xe4(%ebp)
000061d0	movl	0xe4(%ebp),%ecx
000061d3	movl	%ecx,0x08(%esp)
000061d7	movl	0xe8(%ebp),%ecx
000061da	movl	%ecx,0x04(%esp)
000061de	movl	%esi,(%esp)
000061e1	call	*%eax
000061e3	addl	$0x24,%esp
000061e6	popl	%esi
000061e7	popl	%ebp
000061e8	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(curveeditorpanel.o):
(__TEXT,__text) section
CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x14(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x10(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	movl	0x0c(%ebp),%esi
00000020	leal	0x04(%esi),%eax
00000023	movl	%eax,0xf0(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
00000035	movl	(%esi),%eax
00000037	movl	%eax,(%edi)
00000039	testb	$0x01,CCurveEditorPanel::ChainToMap()::chained-0xe(%ebx)
00000040	jne	0x00000077
00000042	movb	$0x01,CCurveEditorPanel::ChainToMap()::chained-0xe(%ebx)
00000049	leal	0x33ef1-0xe(%ebx),%eax
0000004f	movl	%eax,(%esp)
00000052	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000057	movl	%eax,%esi
00000059	leal	CCurveEditorPanel::GetPanelClassName()-0xe(%ebx),%eax
0000005f	movl	%eax,0x1c(%esi)
00000062	testl	%esi,%esi
00000064	je	0x00000077
00000066	leal	0x33f03-0xe(%ebx),%eax
0000006c	movl	%eax,(%esp)
0000006f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000074	movl	%eax,0x18(%esi)
00000077	testb	$0x01,CCurveEditorPanel::ChainToAnimationMap()::chained-0xe(%ebx)
0000007e	jne	0x000000b5
00000080	movb	$0x01,CCurveEditorPanel::ChainToAnimationMap()::chained-0xe(%ebx)
00000087	leal	0x33ef1-0xe(%ebx),%eax
0000008d	movl	%eax,(%esp)
00000090	calll	FindOrAddPanelAnimationMap(char const*)
00000095	movl	%eax,%esi
00000097	leal	CCurveEditorPanel::GetPanelClassName()-0xe(%ebx),%eax
0000009d	movl	%eax,0x18(%esi)
000000a0	testl	%esi,%esi
000000a2	je	0x000000b5
000000a4	leal	0x33f03-0xe(%ebx),%eax
000000aa	movl	%eax,(%esp)
000000ad	calll	FindOrAddPanelAnimationMap(char const*)
000000b2	movl	%eax,0x14(%esi)
000000b5	testb	$0x01,CCurveEditorPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000bc	jne	0x000000f3
000000be	movb	$0x01,CCurveEditorPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c5	leal	0x33ef1-0xe(%ebx),%eax
000000cb	movl	%eax,(%esp)
000000ce	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000d3	movl	%eax,%esi
000000d5	leal	CCurveEditorPanel::GetPanelClassName()-0xe(%ebx),%eax
000000db	movl	%eax,0x44(%esi)
000000de	testl	%esi,%esi
000000e0	je	0x000000f3
000000e2	leal	0x33f03-0xe(%ebx),%eax
000000e8	movl	%eax,(%esp)
000000eb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f0	movl	%eax,0x18(%esi)
000000f3	movl	$0xffffffff,0x0000017c(%edi)
000000fd	movl	(%edi),%eax
000000ff	movl	0x0000021c(%eax),%eax
00000105	movl	%edi,(%esp)
00000108	movl	$0x00000001,0x04(%esp)
00000110	call	*%eax
00000112	movl	(%edi),%eax
00000114	movl	0x00000220(%eax),%eax
0000011a	movl	%edi,(%esp)
0000011d	movl	$0x00000001,0x04(%esp)
00000125	call	*%eax
00000127	movl	$0xffffffff,0x00000180(%edi)
00000131	addl	$0x1c,%esp
00000134	popl	%esi
00000135	popl	%edi
00000136	popl	%ebx
00000137	popl	%ebp
00000138	ret
00000139	movl	%eax,%esi
0000013b	movl	0xf0(%ebp),%eax
0000013e	movl	%eax,0x04(%esp)
00000142	movl	%edi,(%esp)
00000145	calll	vgui::Panel::~Panel()
0000014a	movl	%esi,(%esp)
0000014d	calll	__Unwind_Resume
00000152	calll	std::terminate()
00000157	nopw	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::~CCurveEditorPanel():
00000160	pushl	%ebp
00000161	movl	%esp,%ebp
00000163	pushl	%edi
00000164	pushl	%esi
00000165	subl	$0x10,%esp
00000168	calll	0x0000016d
0000016d	popl	%eax
0000016e	movl	0x08(%ebp),%edi
00000171	leal	VTT for CCurveEditorPanel-0x16d+0x00000004(%eax),%eax
00000177	movl	%eax,0x04(%esp)
0000017b	movl	%edi,(%esp)
0000017e	calll	vgui::Panel::~Panel()
00000183	addl	$0x10,%esp
00000186	popl	%esi
00000187	popl	%edi
00000188	popl	%ebp
00000189	jmp	operator delete(void*)
0000018e	movl	%eax,%esi
00000190	movl	%edi,(%esp)
00000193	calll	operator delete(void*)
00000198	movl	%esi,(%esp)
0000019b	calll	__Unwind_Resume
CCurveEditorPanel::~CCurveEditorPanel():
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	subl	$0x08,%esp
000001a6	calll	0x000001ab
000001ab	popl	%eax
000001ac	leal	VTT for CCurveEditorPanel-0x1ab+0x00000004(%eax),%eax
000001b2	movl	%eax,0x04(%esp)
000001b6	movl	0x08(%ebp),%eax
000001b9	movl	%eax,(%esp)
000001bc	calll	vgui::Panel::~Panel()
000001c1	addl	$0x08,%esp
000001c4	popl	%ebp
000001c5	ret
000001c6	nopw	%cs:CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::~CCurveEditorPanel():
000001d0	pushl	%ebp
000001d1	movl	%esp,%ebp
000001d3	subl	$0x08,%esp
000001d6	movl	0x0c(%ebp),%eax
000001d9	addl	$0x04,%eax
000001dc	movl	%eax,0x04(%esp)
000001e0	movl	0x08(%ebp),%eax
000001e3	movl	%eax,(%esp)
000001e6	calll	vgui::Panel::~Panel()
000001eb	addl	$0x08,%esp
000001ee	popl	%ebp
000001ef	ret
CCurveEditorPanel::ScreenToValue(int, int, float*, float*):
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	pushl	%esi
000001f4	subl	$0x14,%esp
000001f7	calll	0x000001fc
000001fc	popl	%esi
000001fd	leal	0xf4(%ebp),%eax
00000200	movl	%eax,0x08(%esp)
00000204	leal	0xf8(%ebp),%eax
00000207	movl	%eax,0x04(%esp)
0000020b	movl	0x08(%ebp),%eax
0000020e	movl	%eax,(%esp)
00000211	calll	vgui::Panel::GetSize(int&, int&)
00000216	movl	0xf8(%ebp),%eax
00000219	decl	%eax
0000021a	cvtsi2ss	%eax,%xmm1
0000021e	cvtsi2ss	0x0c(%ebp),%xmm0
00000223	divss	%xmm1,%xmm0
00000227	movl	0x14(%ebp),%eax
0000022a	movss	%xmm0,(%eax)
0000022e	movl	0xf4(%ebp),%eax
00000231	decl	%eax
00000232	cvtsi2ss	%eax,%xmm1
00000236	cvtsi2ss	0x10(%ebp),%xmm0
0000023b	divss	%xmm1,%xmm0
0000023f	movss	0x334e0-0x1fc(%esi),%xmm1
00000247	subss	%xmm0,%xmm1
0000024b	movl	0x18(%ebp),%eax
0000024e	movss	%xmm1,(%eax)
00000252	addl	$0x14,%esp
00000255	popl	%esi
00000256	popl	%ebp
00000257	ret
00000258	nopl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::ValueToScreen(float, float, int*, int*):
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%esi
00000264	subl	$0x14,%esp
00000267	calll	0x0000026c
0000026c	popl	%esi
0000026d	leal	0xf4(%ebp),%eax
00000270	movl	%eax,0x08(%esp)
00000274	leal	0xf8(%ebp),%eax
00000277	movl	%eax,0x04(%esp)
0000027b	movl	0x08(%ebp),%eax
0000027e	movl	%eax,(%esp)
00000281	calll	vgui::Panel::GetSize(int&, int&)
00000286	movl	0xf8(%ebp),%eax
00000289	decl	%eax
0000028a	cvtsi2ss	%eax,%xmm1
0000028e	mulss	0x0c(%ebp),%xmm1
00000293	movss	0x334e4-0x26c(%esi),%xmm0
0000029b	addss	%xmm0,%xmm1
0000029f	cvttss2si	%xmm1,%eax
000002a3	movl	0x14(%ebp),%ecx
000002a6	movl	%eax,(%ecx)
000002a8	movl	0xf4(%ebp),%eax
000002ab	leal	0xff(%eax),%ecx
000002ae	cvtsi2ss	%ecx,%xmm1
000002b2	mulss	0x10(%ebp),%xmm1
000002b7	addss	%xmm0,%xmm1
000002bb	cvttss2si	%xmm1,%ecx
000002bf	negl	%ecx
000002c1	leal	0xff(%eax,%ecx),%eax
000002c5	movl	0x18(%ebp),%ecx
000002c8	movl	%eax,(%ecx)
000002ca	addl	$0x14,%esp
000002cd	popl	%esi
000002ce	popl	%ebp
000002cf	ret
CCurveEditorPanel::OnMousePressed(ButtonCode_t):
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	pushl	%ebx
000002d4	pushl	%edi
000002d5	pushl	%esi
000002d6	subl	$0x3c,%esp
000002d9	calll	0x000002de
000002de	popl	%esi
000002df	movl	%esi,0xd0(%ebp)
000002e2	movl	0x0c(%ebp),%eax
000002e5	movl	%eax,0x04(%esp)
000002e9	movl	0x08(%ebp),%ebx
000002ec	movl	%ebx,(%esp)
000002ef	calll	vgui::Panel::OnMousePressed(ButtonCode_t)
000002f4	movl	0x35ca6-0x2de(%esi),%eax
000002fa	movl	(%eax),%ecx
000002fc	movl	(%ecx),%eax
000002fe	leal	0xe4(%ebp),%edi
00000301	movl	%edi,0x08(%esp)
00000305	leal	0xe8(%ebp),%esi
00000308	movl	%esi,0x04(%esp)
0000030c	movl	%ecx,(%esp)
0000030f	call	*0x24(%eax)
00000312	movl	%edi,0x08(%esp)
00000316	movl	%esi,0x04(%esp)
0000031a	movl	%ebx,(%esp)
0000031d	calll	vgui::Panel::ScreenToLocal(int&, int&)
00000322	cmpl	$0x6b,0x0c(%ebp)
00000326	jne	0x000003d4
0000032c	leal	0xdc(%ebp),%eax
0000032f	movl	%eax,0x08(%esp)
00000333	leal	0xe0(%ebp),%eax
00000336	movl	%eax,0x04(%esp)
0000033a	movl	%ebx,(%esp)
0000033d	calll	vgui::Panel::GetSize(int&, int&)
00000342	cvtsi2ss	0xe4(%ebp),%xmm0
00000347	movss	%xmm0,0xd8(%ebp)
0000034c	cvtsi2ss	0xe8(%ebp),%xmm0
00000351	movss	%xmm0,0xd4(%ebp)
00000356	leal	0xec(%ebp),%eax
00000359	movl	%eax,0x08(%esp)
0000035d	leal	0xf0(%ebp),%eax
00000360	movl	%eax,0x04(%esp)
00000364	movl	%ebx,(%esp)
00000367	calll	vgui::Panel::GetSize(int&, int&)
0000036c	movl	(%ebx),%eax
0000036e	movl	0xec(%ebp),%ecx
00000371	movl	0xf0(%ebp),%edx
00000374	movl	0xe0(%ebp),%esi
00000377	movl	%ebx,(%esp)
0000037a	decl	%esi
0000037b	cvtsi2ss	%esi,%xmm1
0000037f	movl	0xd0(%ebp),%esi
00000382	movss	0x334e8-0x2de(%esi),%xmm0
0000038a	divss	%xmm1,%xmm0
0000038e	movss	%xmm0,0x08(%esp)
00000394	decl	%edx
00000395	cvtsi2ss	%edx,%xmm0
00000399	movss	0xd4(%ebp),%xmm1
0000039e	divss	%xmm0,%xmm1
000003a2	movss	%xmm1,0x04(%esp)
000003a8	decl	%ecx
000003a9	cvtsi2ss	%ecx,%xmm0
000003ad	movss	0xd8(%ebp),%xmm1
000003b2	divss	%xmm0,%xmm1
000003b6	movss	0x334ec-0x2de(%esi),%xmm0
000003be	subss	%xmm1,%xmm0
000003c2	movss	%xmm0,0x0c(%esp)
000003c8	call	*0x00000348(%eax)
000003ce	movl	%eax,0x0000017c(%ebx)
000003d4	addl	$0x3c,%esp
000003d7	popl	%esi
000003d8	popl	%edi
000003d9	popl	%ebx
000003da	popl	%ebp
000003db	ret
000003dc	nopl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax)
CCurveEditorPanel::OnMouseReleased(ButtonCode_t):
000003e0	pushl	%ebp
000003e1	movl	%esp,%ebp
000003e3	pushl	%edi
000003e4	pushl	%esi
000003e5	subl	$0x10,%esp
000003e8	movl	0x0c(%ebp),%edi
000003eb	movl	%edi,0x04(%esp)
000003ef	movl	0x08(%ebp),%esi
000003f2	movl	%esi,(%esp)
000003f5	calll	vgui::Panel::OnMouseReleased(ButtonCode_t)
000003fa	cmpl	$0x6b,%edi
000003fd	jne	0x00000409
000003ff	movl	$0xffffffff,0x0000017c(%esi)
00000409	addl	$0x10,%esp
0000040c	popl	%esi
0000040d	popl	%edi
0000040e	popl	%ebp
0000040f	ret
CCurveEditorPanel::OnCursorMoved(int, int):
00000410	pushl	%ebp
00000411	movl	%esp,%ebp
00000413	pushl	%ebx
00000414	pushl	%edi
00000415	pushl	%esi
00000416	subl	$0x2c,%esp
00000419	calll	0x0000041e
0000041e	popl	%eax
0000041f	movl	%eax,0xdc(%ebp)
00000422	movl	0x10(%ebp),%eax
00000425	movl	%eax,0x08(%esp)
00000429	movl	0x0c(%ebp),%esi
0000042c	movl	%esi,0x04(%esp)
00000430	movl	0x08(%ebp),%edi
00000433	movl	%edi,(%esp)
00000436	calll	vgui::Panel::OnCursorMoved(int, int)
0000043b	leal	0xec(%ebp),%eax
0000043e	movl	%eax,0x08(%esp)
00000442	leal	0xf0(%ebp),%eax
00000445	movl	%eax,0x04(%esp)
00000449	movl	%edi,(%esp)
0000044c	calll	vgui::Panel::GetSize(int&, int&)
00000451	movl	0xec(%ebp),%ebx
00000454	movl	0xf0(%ebp),%eax
00000457	leal	0xe4(%ebp),%ecx
0000045a	movl	%ecx,0x08(%esp)
0000045e	leal	0xe8(%ebp),%ecx
00000461	movl	%ecx,0x04(%esp)
00000465	movl	%edi,(%esp)
00000468	cvtsi2ss	%esi,%xmm1
0000046c	movl	0xdc(%ebp),%esi
0000046f	decl	%eax
00000470	cvtsi2ss	%eax,%xmm0
00000474	divss	%xmm0,%xmm1
00000478	movss	%xmm1,0xe0(%ebp)
0000047d	calll	vgui::Panel::GetSize(int&, int&)
00000482	movl	(%edi),%eax
00000484	movl	0xe8(%ebp),%ecx
00000487	movss	0xe0(%ebp),%xmm0
0000048c	movss	%xmm0,0x04(%esp)
00000492	movl	%edi,(%esp)
00000495	decl	%ecx
00000496	cvtsi2ss	%ecx,%xmm1
0000049a	movss	0x334f0-0x41e(%esi),%xmm0
000004a2	divss	%xmm1,%xmm0
000004a6	movss	%xmm0,0x08(%esp)
000004ac	call	*0x0000034c(%eax)
000004b2	movl	%eax,0x00000180(%edi)
000004b8	movl	0x0000017c(%edi),%ecx
000004be	testl	%ecx,%ecx
000004c0	js	0x00000502
000004c2	movl	(%edi),%eax
000004c4	movss	0xe0(%ebp),%xmm0
000004c9	movss	%xmm0,0x08(%esp)
000004cf	movl	%ecx,0x04(%esp)
000004d3	movl	%edi,(%esp)
000004d6	cvtsi2ss	0x10(%ebp),%xmm0
000004db	decl	%ebx
000004dc	cvtsi2ss	%ebx,%xmm1
000004e0	divss	%xmm1,%xmm0
000004e4	movss	0x334f4-0x41e(%esi),%xmm1
000004ec	subss	%xmm0,%xmm1
000004f0	movss	%xmm1,0x0c(%esp)
000004f6	call	*0x00000350(%eax)
000004fc	movl	%eax,0x0000017c(%edi)
00000502	addl	$0x2c,%esp
00000505	popl	%esi
00000506	popl	%edi
00000507	popl	%ebx
00000508	popl	%ebp
00000509	ret
0000050a	nopw	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::OnKeyCodePressed(ButtonCode_t):
00000510	pushl	%ebp
00000511	movl	%esp,%ebp
00000513	pushl	%esi
00000514	subl	$0x14,%esp
00000517	movl	0x0c(%ebp),%eax
0000051a	movl	%eax,0x04(%esp)
0000051e	movl	0x08(%ebp),%esi
00000521	movl	%esi,(%esp)
00000524	calll	vgui::Panel::OnKeyCodePressed(ButtonCode_t)
00000529	movl	0x0000017c(%esi),%eax
0000052f	testl	%eax,%eax
00000531	js	0x0000054c
00000533	movl	(%esi),%ecx
00000535	movl	%eax,0x04(%esp)
00000539	movl	%esi,(%esp)
0000053c	call	*0x00000354(%ecx)
00000542	movl	$0xffffffff,0x0000017c(%esi)
0000054c	addl	$0x14,%esp
0000054f	popl	%esi
00000550	popl	%ebp
00000551	ret
00000552	nopw	%cs:CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::PaintBackground():
00000560	pushl	%ebp
00000561	movl	%esp,%ebp
00000563	pushl	%edi
00000564	pushl	%esi
00000565	subl	$0x20,%esp
00000568	calll	0x0000056d
0000056d	popl	%esi
0000056e	leal	0xf0(%ebp),%eax
00000571	movl	%eax,0x08(%esp)
00000575	leal	0xf4(%ebp),%eax
00000578	movl	%eax,0x04(%esp)
0000057c	movl	0x08(%ebp),%eax
0000057f	movl	%eax,(%esp)
00000582	calll	vgui::Panel::GetSize(int&, int&)
00000587	movl	0x35caa-0x56d(%esi),%esi
0000058d	movl	(%esi),%ecx
0000058f	movl	(%ecx),%eax
00000591	movl	%ecx,(%esp)
00000594	movl	$0x000000ff,0x10(%esp)
0000059c	movl	$0x000000ff,0x0c(%esp)
000005a4	movl	$0x000000ff,0x08(%esp)
000005ac	movl	$0x000000ff,0x04(%esp)
000005b4	call	*0x28(%eax)
000005b7	movl	(%esi),%ecx
000005b9	movl	(%ecx),%eax
000005bb	movl	0xf4(%ebp),%edx
000005be	movl	0xf0(%ebp),%edi
000005c1	movl	%edi,0x10(%esp)
000005c5	movl	%edx,0x0c(%esp)
000005c9	movl	%ecx,(%esp)
000005cc	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
000005d4	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
000005dc	call	*0x30(%eax)
000005df	movl	(%esi),%ecx
000005e1	movl	(%ecx),%eax
000005e3	movl	%ecx,(%esp)
000005e6	movl	$0x000000ff,0x10(%esp)
000005ee	movl	$0x00000080,0x0c(%esp)
000005f6	movl	$0x00000080,0x08(%esp)
000005fe	movl	$0x00000080,0x04(%esp)
00000606	call	*0x28(%eax)
00000609	movl	(%esi),%edx
0000060b	movl	(%edx),%eax
0000060d	movl	0xf0(%ebp),%ecx
00000610	movl	0xf4(%ebp),%edi
00000613	movl	%edi,0x0c(%esp)
00000617	movl	%edx,(%esp)
0000061a	movl	%ecx,%edx
0000061c	sarl	$0x1f,%edx
0000061f	shrl	$0x1e,%edx
00000622	addl	%ecx,%edx
00000624	sarl	$0x02,%edx
00000627	movl	%edx,0x10(%esp)
0000062b	movl	%edx,0x08(%esp)
0000062f	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000637	call	*0x3c(%eax)
0000063a	movl	0xf0(%ebp),%ecx
0000063d	movl	%ecx,%eax
0000063f	shrl	$0x1f,%eax
00000642	addl	%ecx,%eax
00000644	sarl	%eax
00000646	movl	(%esi),%edx
00000648	movl	(%edx),%ecx
0000064a	movl	0xf4(%ebp),%edi
0000064d	movl	%eax,0x10(%esp)
00000651	movl	%edi,0x0c(%esp)
00000655	movl	%eax,0x08(%esp)
00000659	movl	%edx,(%esp)
0000065c	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000664	call	*0x3c(%ecx)
00000667	movl	(%esi),%edx
00000669	movl	(%edx),%eax
0000066b	imull	$0x03,0xf0(%ebp),%ecx
0000066f	movl	0xf4(%ebp),%edi
00000672	movl	%edi,0x0c(%esp)
00000676	movl	%edx,(%esp)
00000679	movl	%ecx,%edx
0000067b	sarl	$0x1f,%edx
0000067e	shrl	$0x1e,%edx
00000681	addl	%ecx,%edx
00000683	sarl	$0x02,%edx
00000686	movl	%edx,0x10(%esp)
0000068a	movl	%edx,0x08(%esp)
0000068e	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000696	call	*0x3c(%eax)
00000699	movl	(%esi),%edx
0000069b	movl	(%edx),%eax
0000069d	movl	0xf4(%ebp),%ecx
000006a0	movl	0xf0(%ebp),%edi
000006a3	movl	%edi,0x10(%esp)
000006a7	movl	%edx,(%esp)
000006aa	movl	%ecx,%edx
000006ac	sarl	$0x1f,%edx
000006af	shrl	$0x1e,%edx
000006b2	addl	%ecx,%edx
000006b4	sarl	$0x02,%edx
000006b7	movl	%edx,0x0c(%esp)
000006bb	movl	%edx,0x04(%esp)
000006bf	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
000006c7	call	*0x3c(%eax)
000006ca	movl	(%esi),%ecx
000006cc	movl	(%ecx),%eax
000006ce	movl	0xf4(%ebp),%edx
000006d1	movl	0xf0(%ebp),%edi
000006d4	movl	%edi,0x10(%esp)
000006d8	movl	%edx,%edi
000006da	shrl	$0x1f,%edi
000006dd	addl	%edx,%edi
000006df	sarl	%edi
000006e1	movl	%edi,0x0c(%esp)
000006e5	movl	%edi,0x04(%esp)
000006e9	movl	%ecx,(%esp)
000006ec	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
000006f4	call	*0x3c(%eax)
000006f7	movl	(%esi),%edx
000006f9	movl	(%edx),%eax
000006fb	imull	$0x03,0xf4(%ebp),%ecx
000006ff	movl	0xf0(%ebp),%edi
00000702	movl	%edi,0x10(%esp)
00000706	movl	%edx,(%esp)
00000709	movl	%ecx,%edx
0000070b	sarl	$0x1f,%edx
0000070e	shrl	$0x1e,%edx
00000711	addl	%ecx,%edx
00000713	sarl	$0x02,%edx
00000716	movl	%edx,0x0c(%esp)
0000071a	movl	%edx,0x04(%esp)
0000071e	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000726	call	*0x3c(%eax)
00000729	movl	(%esi),%ecx
0000072b	movl	(%ecx),%eax
0000072d	movl	%ecx,(%esp)
00000730	movl	$0x000000ff,0x10(%esp)
00000738	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
00000740	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000748	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000750	call	*0x28(%eax)
00000753	movl	(%esi),%ecx
00000755	movl	(%ecx),%eax
00000757	movl	0xf4(%ebp),%edx
0000075a	movl	%edx,0x0c(%esp)
0000075e	movl	%ecx,(%esp)
00000761	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x10(%esp)
00000769	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000771	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000779	call	*0x3c(%eax)
0000077c	movl	(%esi),%ecx
0000077e	movl	(%ecx),%eax
00000780	movl	0xf4(%ebp),%edx
00000783	movl	0xf0(%ebp),%edi
00000786	movl	%edi,0x10(%esp)
0000078a	movl	%edx,0x0c(%esp)
0000078e	movl	%edx,0x04(%esp)
00000792	movl	%ecx,(%esp)
00000795	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
0000079d	call	*0x3c(%eax)
000007a0	movl	(%esi),%ecx
000007a2	movl	(%ecx),%eax
000007a4	movl	0xf4(%ebp),%edx
000007a7	movl	0xf0(%ebp),%edi
000007aa	movl	%edi,0x10(%esp)
000007ae	movl	%edi,0x08(%esp)
000007b2	movl	%edx,0x04(%esp)
000007b6	movl	%ecx,(%esp)
000007b9	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
000007c1	call	*0x3c(%eax)
000007c4	movl	(%esi),%ecx
000007c6	movl	(%ecx),%eax
000007c8	movl	0xf0(%ebp),%edx
000007cb	movl	%edx,0x08(%esp)
000007cf	movl	%ecx,(%esp)
000007d2	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x10(%esp)
000007da	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
000007e2	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
000007ea	call	*0x3c(%eax)
000007ed	addl	$0x20,%esp
000007f0	popl	%esi
000007f1	popl	%edi
000007f2	popl	%ebp
000007f3	ret
000007f4	nopw	%cs:CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
CCurveEditorPanel::Paint():
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	pushl	%ebx
00000804	pushl	%edi
00000805	pushl	%esi
00000806	subl	$0x4c,%esp
00000809	calll	0x0000080e
0000080e	popl	%esi
0000080f	movl	%esi,0xc8(%ebp)
00000812	leal	0xe4(%ebp),%eax
00000815	movl	%eax,0x08(%esp)
00000819	leal	0xe8(%ebp),%eax
0000081c	movl	%eax,0x04(%esp)
00000820	movl	0x08(%ebp),%eax
00000823	movl	%eax,(%esp)
00000826	calll	vgui::Panel::GetSize(int&, int&)
0000082b	movl	0x35caa-0x80e(%esi),%eax
00000831	movl	%eax,0xd4(%ebp)
00000834	movl	(%eax),%ecx
00000836	movl	(%ecx),%eax
00000838	movl	%ecx,(%esp)
0000083b	movl	$0x000000ff,0x10(%esp)
00000843	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
0000084b	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000853	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
0000085b	call	*0x28(%eax)
0000085e	movl	0xe8(%ebp),%eax
00000861	testl	%eax,%eax
00000863	jle	0x0000091c
00000869	xorl	%esi,%esi
0000086b	movl	0xc8(%ebp),%ecx
0000086e	movss	0x334f8-0x80e(%ecx),%xmm0
00000876	movss	%xmm0,0xcc(%ebp)
0000087b	xorl	%ebx,%ebx
0000087d	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0xd0(%ebp)
00000884	nopw	%cs:CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
00000890	cvtsi2ss	%esi,%xmm0
00000894	decl	%eax
00000895	cvtsi2ss	%eax,%xmm1
00000899	divss	%xmm1,%xmm0
0000089d	movl	0x08(%ebp),%ecx
000008a0	movl	(%ecx),%eax
000008a2	movss	%xmm0,0x04(%esp)
000008a8	movl	%ecx,(%esp)
000008ab	call	*0x00000358(%eax)
000008b1	fstps	0xd8(%ebp)
000008b4	movl	0xe4(%ebp),%eax
000008b7	decl	%eax
000008b8	testl	%eax,%eax
000008ba	jns	0x000008c0
000008bc	movl	%eax,%edi
000008be	jmp	0x000008e3
000008c0	cvtsi2ss	%eax,%xmm0
000008c4	mulss	0xd8(%ebp),%xmm0
000008c9	addss	0xcc(%ebp),%xmm0
000008ce	cvttss2si	%xmm0,%edx
000008d2	movl	%eax,%ecx
000008d4	subl	%edx,%ecx
000008d6	xorl	%edi,%edi
000008d8	testl	%ecx,%ecx
000008da	js	0x000008e3
000008dc	cmpl	%eax,%ecx
000008de	cmovgl	%eax,%ecx
000008e1	movl	%ecx,%edi
000008e3	testl	%esi,%esi
000008e5	je	0x00000907
000008e7	movl	0xd4(%ebp),%eax
000008ea	movl	(%eax),%ecx
000008ec	movl	(%ecx),%eax
000008ee	movl	%edi,0x10(%esp)
000008f2	movl	%esi,0x0c(%esp)
000008f6	movl	%ebx,0x08(%esp)
000008fa	movl	0xd0(%ebp),%edx
000008fd	movl	%edx,0x04(%esp)
00000901	movl	%ecx,(%esp)
00000904	call	*0x3c(%eax)
00000907	leal	0x01(%esi),%ecx
0000090a	movl	0xe8(%ebp),%eax
0000090d	cmpl	%eax,%ecx
0000090f	movl	%esi,0xd0(%ebp)
00000912	movl	%edi,%ebx
00000914	movl	%ecx,%esi
00000916	jl	0x00000890
0000091c	movl	0x08(%ebp),%ecx
0000091f	movl	(%ecx),%eax
00000921	movl	%ecx,(%esp)
00000924	call	*0x0000035c(%eax)
0000092a	testl	%eax,%eax
0000092c	jle	0x00000aa3
00000932	movl	0xc8(%ebp),%ecx
00000935	movss	0x334f8-0x80e(%ecx),%xmm0
0000093d	movss	%xmm0,0xc8(%ebp)
00000942	nopw	%cs:CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*)(%eax,%eax)
00000950	movl	0x08(%ebp),%esi
00000953	movl	(%esi),%ecx
00000955	leal	0xdc(%ebp),%edx
00000958	movl	%edx,0x0c(%esp)
0000095c	leal	0xe0(%ebp),%edx
0000095f	movl	%edx,0x08(%esp)
00000963	decl	%eax
00000964	movl	%eax,0x04(%esp)
00000968	movl	%esi,(%esp)
0000096b	movl	%eax,%edi
0000096d	call	*0x00000360(%ecx)
00000973	movss	0xe0(%ebp),%xmm0
00000978	movss	%xmm0,0xd0(%ebp)
0000097d	movss	0xdc(%ebp),%xmm0
00000982	movss	%xmm0,0xcc(%ebp)
00000987	leal	0xec(%ebp),%eax
0000098a	movl	%eax,0x08(%esp)
0000098e	leal	0xf0(%ebp),%eax
00000991	movl	%eax,0x04(%esp)
00000995	movl	%esi,(%esp)
00000998	calll	vgui::Panel::GetSize(int&, int&)
0000099d	movl	%edi,%ecx
0000099f	movl	0xec(%ebp),%edi
000009a2	decl	%edi
000009a3	cvtsi2ss	%edi,%xmm0
000009a7	mulss	0xcc(%ebp),%xmm0
000009ac	movss	0xc8(%ebp),%xmm1
000009b1	addss	%xmm1,%xmm0
000009b5	cvttss2si	%xmm0,%eax
000009b9	subl	%eax,%edi
000009bb	movl	0xf0(%ebp),%eax
000009be	decl	%eax
000009bf	cvtsi2ss	%eax,%xmm0
000009c3	mulss	0xd0(%ebp),%xmm0
000009c8	addss	%xmm1,%xmm0
000009cc	cvttss2si	%xmm0,%ebx
000009d0	movl	0x0000017c(%esi),%eax
000009d6	cmpl	%eax,%ecx
000009d8	je	0x000009ea
000009da	cmpl	$0xff,%eax
000009dd	jne	0x00000a42
000009df	movl	0x08(%ebp),%eax
000009e2	cmpl	0x00000180(%eax),%ecx
000009e8	jne	0x00000a42
000009ea	movl	%ecx,0xd0(%ebp)
000009ed	movl	0xd4(%ebp),%esi
000009f0	movl	(%esi),%ecx
000009f2	movl	(%ecx),%eax
000009f4	movl	%ecx,(%esp)
000009f7	movl	$0x000000ff,0x10(%esp)
000009ff	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
00000a07	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000a0f	movl	$0x000000ff,0x04(%esp)
00000a17	call	*0x28(%eax)
00000a1a	movl	(%esi),%ecx
00000a1c	movl	(%ecx),%eax
00000a1e	leal	0x03(%edi),%edx
00000a21	movl	%edx,0x10(%esp)
00000a25	leal	0x03(%ebx),%edx
00000a28	movl	%edx,0x0c(%esp)
00000a2c	addl	$0xfd,%edi
00000a2f	movl	%edi,0x08(%esp)
00000a33	addl	$0xfd,%ebx
00000a36	movl	%ebx,0x04(%esp)
00000a3a	movl	%ecx,(%esp)
00000a3d	call	*0x30(%eax)
00000a40	jmp	0x00000a98
00000a42	movl	%ecx,0xd0(%ebp)
00000a45	movl	0xd4(%ebp),%esi
00000a48	movl	(%esi),%ecx
00000a4a	movl	(%ecx),%eax
00000a4c	movl	%ecx,(%esp)
00000a4f	movl	$0x000000ff,0x10(%esp)
00000a57	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x0c(%esp)
00000a5f	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x08(%esp)
00000a67	movl	CCurveEditorPanel::CCurveEditorPanel(vgui::Panel*, char const*),0x04(%esp)
00000a6f	call	*0x28(%eax)
00000a72	movl	(%esi),%ecx
00000a74	movl	(%ecx),%eax
00000a76	leal	0x03(%edi),%edx
00000a79	movl	%edx,0x10(%esp)
00000a7d	leal	0x03(%ebx),%edx
00000a80	movl	%edx,0x0c(%esp)
00000a84	addl	$0xfd,%edi
00000a87	movl	%edi,0x08(%esp)
00000a8b	addl	$0xfd,%ebx
00000a8e	movl	%ebx,0x04(%esp)
00000a92	movl	%ecx,(%esp)
00000a95	call	*0x38(%eax)
00000a98	movl	0xd0(%ebp),%eax
00000a9b	testl	%eax,%eax
00000a9d	jg	0x00000950
00000aa3	addl	$0x4c,%esp
00000aa6	popl	%esi
00000aa7	popl	%edi
00000aa8	popl	%ebx
00000aa9	popl	%ebp
00000aaa	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(gamefiletreeview.o):
(__TEXT,__text) section
CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CGameFileTreeView-0xe+0x00000004(%edi),%eax
00000023	movl	%eax,0xe4(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%ebx
0000002d	movl	%ebx,(%esp)
00000030	calll	vgui::TreeView::TreeView(vgui::Panel*, char const*)
00000035	leal	vtable for CGameFileTreeView-0xe+0x0000000c(%edi),%eax
0000003b	movl	%eax,(%ebx)
0000003d	testb	$0x01,CGameFileTreeView::ChainToMap()::chained-0xe(%edi)
00000044	jne	0x0000007b
00000046	movb	$0x01,CGameFileTreeView::ChainToMap()::chained-0xe(%edi)
0000004d	leal	0x4292f-0xe(%edi),%eax
00000053	movl	%eax,(%esp)
00000056	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005b	movl	%eax,%esi
0000005d	leal	CGameFileTreeView::GetPanelClassName()-0xe(%edi),%eax
00000063	movl	%eax,0x1c(%esi)
00000066	testl	%esi,%esi
00000068	je	0x0000007b
0000006a	leal	0x42941-0xe(%edi),%eax
00000070	movl	%eax,(%esp)
00000073	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000078	movl	%eax,0x18(%esi)
0000007b	testb	$0x01,CGameFileTreeView::ChainToAnimationMap()::chained-0xe(%edi)
00000082	jne	0x000000b9
00000084	movb	$0x01,CGameFileTreeView::ChainToAnimationMap()::chained-0xe(%edi)
0000008b	leal	0x4292f-0xe(%edi),%eax
00000091	movl	%eax,(%esp)
00000094	calll	FindOrAddPanelAnimationMap(char const*)
00000099	movl	%eax,%esi
0000009b	leal	CGameFileTreeView::GetPanelClassName()-0xe(%edi),%eax
000000a1	movl	%eax,0x18(%esi)
000000a4	testl	%esi,%esi
000000a6	je	0x000000b9
000000a8	leal	0x42941-0xe(%edi),%eax
000000ae	movl	%eax,(%esp)
000000b1	calll	FindOrAddPanelAnimationMap(char const*)
000000b6	movl	%eax,0x14(%esi)
000000b9	testb	$0x01,CGameFileTreeView::KB_ChainToMap()::chained-0xe(%edi)
000000c0	jne	0x000000f7
000000c2	movb	$0x01,CGameFileTreeView::KB_ChainToMap()::chained-0xe(%edi)
000000c9	leal	0x4292f-0xe(%edi),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000d7	movl	%eax,%esi
000000d9	leal	CGameFileTreeView::GetPanelClassName()-0xe(%edi),%eax
000000df	movl	%eax,0x44(%esi)
000000e2	testl	%esi,%esi
000000e4	je	0x000000f7
000000e6	leal	0x42941-0xe(%edi),%eax
000000ec	movl	%eax,(%esp)
000000ef	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f4	movl	%eax,0x18(%esi)
000000f7	leal	0x000001e8(%ebx),%eax
000000fd	movl	%eax,0xf0(%ebp)
00000100	movl	%eax,(%esp)
00000103	calll	CUtlString::CUtlString()
00000108	leal	0x000001f8(%ebx),%esi
0000010e	movl	%esi,(%esp)
00000111	calll	CUtlString::CUtlString()
00000116	movl	%esi,0xe8(%ebp)
00000119	leal	0x00000208(%ebx),%esi
0000011f	movl	%esi,(%esp)
00000122	calll	CUtlString::CUtlString()
00000127	leal	0x00000218(%ebx),%ebx
0000012d	movl	%ebx,(%esp)
00000130	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x04(%esp)
00000138	calll	vgui::ImageList::ImageList(bool)
0000013d	movl	%esi,0xec(%ebp)
00000140	movl	0x18(%ebp),%eax
00000143	movl	%eax,0x04(%esp)
00000147	movl	0xf0(%ebp),%eax
0000014a	movl	%eax,(%esp)
0000014d	calll	CUtlString::operator=(char const*)
00000152	movl	0x1c(%ebp),%esi
00000155	movl	%esi,0x04(%esp)
00000159	movl	0xe8(%ebp),%eax
0000015c	movl	%eax,(%esp)
0000015f	calll	CUtlString::operator=(char const*)
00000164	movl	0x14(%ebp),%eax
00000167	testl	%esi,%esi
00000169	movl	0x08(%ebp),%ecx
0000016c	setne	0x00000230(%ecx)
00000173	movl	%eax,0x04(%esp)
00000177	movl	0xec(%ebp),%eax
0000017a	movl	%eax,(%esp)
0000017d	calll	CUtlString::operator=(char const*)
00000182	movl	0x45330-0xe(%edi),%esi
00000188	movl	(%esi),%ecx
0000018a	movl	(%ecx),%eax
0000018c	movl	0x1c(%eax),%eax
0000018f	leal	0x42884-0xe(%edi),%edx
00000195	movl	%edx,0x04(%esp)
00000199	movl	%ecx,(%esp)
0000019c	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000001a4	call	*%eax
000001a6	movl	%eax,0x04(%esp)
000001aa	movl	%ebx,(%esp)
000001ad	calll	vgui::ImageList::AddImage(vgui::IImage*)
000001b2	movl	(%esi),%ecx
000001b4	movl	(%ecx),%eax
000001b6	movl	0x1c(%eax),%eax
000001b9	leal	0x42899-0xe(%edi),%edx
000001bf	movl	%edx,0x04(%esp)
000001c3	movl	%ecx,(%esp)
000001c6	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000001ce	call	*%eax
000001d0	movl	%eax,0x04(%esp)
000001d4	movl	%ebx,(%esp)
000001d7	calll	vgui::ImageList::AddImage(vgui::IImage*)
000001dc	movl	(%esi),%ecx
000001de	movl	(%ecx),%eax
000001e0	movl	0x1c(%eax),%eax
000001e3	leal	0x428b7-0xe(%edi),%edx
000001e9	movl	%edx,0x04(%esp)
000001ed	movl	%ecx,(%esp)
000001f0	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000001f8	call	*%eax
000001fa	movl	%eax,0x04(%esp)
000001fe	movl	%ebx,(%esp)
00000201	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000206	movl	0x08(%ebp),%ecx
00000209	movl	(%ecx),%eax
0000020b	movl	0x00000374(%eax),%eax
00000211	movl	%ebx,0x04(%esp)
00000215	movl	%ecx,(%esp)
00000218	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
00000220	call	*%eax
00000222	addl	$0x2c,%esp
00000225	popl	%esi
00000226	popl	%edi
00000227	popl	%ebx
00000228	popl	%ebp
00000229	ret
0000022a	movl	%eax,%esi
0000022c	jmp	0x000002d7
00000231	movl	%eax,0xec(%ebp)
00000234	movl	0xf0(%ebp),%edi
00000237	jmp	0x000002ad
00000239	movl	%eax,%edi
0000023b	jmp	0x00000278
0000023d	movl	%eax,%edi
0000023f	jmp	0x0000024e
00000241	movl	%eax,%edi
00000243	movl	%ebx,(%esp)
00000246	calll	vgui::ImageList::~ImageList()
0000024b	movl	0xec(%ebp),%esi
0000024e	movl	0x08(%ebp),%ebx
00000251	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x00000210(%ebx)
00000258	js	0x00000278
0000025a	movl	(%esi),%eax
0000025c	testl	%eax,%eax
0000025e	je	0x0000026e
00000260	movl	%eax,(%esp)
00000263	calll	_free
00000268	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%esi)
0000026e	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x0000020c(%ebx)
00000278	movl	%edi,0xec(%ebp)
0000027b	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x00000200(%ebx)
00000282	jns	0x00000289
00000284	movl	0xf0(%ebp),%edi
00000287	jmp	0x000002ad
00000289	movl	0xe8(%ebp),%esi
0000028c	movl	(%esi),%eax
0000028e	testl	%eax,%eax
00000290	movl	0xf0(%ebp),%edi
00000293	je	0x000002a3
00000295	movl	%eax,(%esp)
00000298	calll	_free
0000029d	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%esi)
000002a3	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001fc(%ebx)
000002ad	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001f0(%ebx)
000002b4	js	0x000002d4
000002b6	movl	(%edi),%eax
000002b8	testl	%eax,%eax
000002ba	je	0x000002ca
000002bc	movl	%eax,(%esp)
000002bf	calll	_free
000002c4	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%edi)
000002ca	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001ec(%ebx)
000002d4	movl	0xec(%ebp),%esi
000002d7	movl	0xe4(%ebp),%eax
000002da	movl	%eax,0x04(%esp)
000002de	movl	%ebx,(%esp)
000002e1	calll	vgui::TreeView::~TreeView()
000002e6	movl	%esi,(%esp)
000002e9	calll	__Unwind_Resume
000002ee	calll	std::terminate()
000002f3	nopl	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*):
00000300	pushl	%ebp
00000301	movl	%esp,%ebp
00000303	pushl	%ebx
00000304	pushl	%edi
00000305	pushl	%esi
00000306	subl	$0x2c,%esp
00000309	calll	0x0000030e
0000030e	popl	%edi
0000030f	movl	0x14(%ebp),%eax
00000312	movl	%eax,0x0c(%esp)
00000316	movl	0x10(%ebp),%eax
00000319	movl	%eax,0x08(%esp)
0000031d	movl	0x0c(%ebp),%esi
00000320	leal	0x04(%esi),%eax
00000323	movl	%eax,0xe4(%ebp)
00000326	movl	%eax,0x04(%esp)
0000032a	movl	0x08(%ebp),%ebx
0000032d	movl	%ebx,(%esp)
00000330	calll	vgui::TreeView::TreeView(vgui::Panel*, char const*)
00000335	movl	(%esi),%eax
00000337	movl	%eax,(%ebx)
00000339	testb	$0x01,CGameFileTreeView::ChainToMap()::chained-0x30e(%edi)
00000340	jne	0x00000377
00000342	movb	$0x01,CGameFileTreeView::ChainToMap()::chained-0x30e(%edi)
00000349	leal	0x4292f-0x30e(%edi),%eax
0000034f	movl	%eax,(%esp)
00000352	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000357	movl	%eax,%esi
00000359	leal	CGameFileTreeView::GetPanelClassName()-0x30e(%edi),%eax
0000035f	movl	%eax,0x1c(%esi)
00000362	testl	%esi,%esi
00000364	je	0x00000377
00000366	leal	0x42941-0x30e(%edi),%eax
0000036c	movl	%eax,(%esp)
0000036f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000374	movl	%eax,0x18(%esi)
00000377	testb	$0x01,CGameFileTreeView::ChainToAnimationMap()::chained-0x30e(%edi)
0000037e	jne	0x000003b5
00000380	movb	$0x01,CGameFileTreeView::ChainToAnimationMap()::chained-0x30e(%edi)
00000387	leal	0x4292f-0x30e(%edi),%eax
0000038d	movl	%eax,(%esp)
00000390	calll	FindOrAddPanelAnimationMap(char const*)
00000395	movl	%eax,%esi
00000397	leal	CGameFileTreeView::GetPanelClassName()-0x30e(%edi),%eax
0000039d	movl	%eax,0x18(%esi)
000003a0	testl	%esi,%esi
000003a2	je	0x000003b5
000003a4	leal	0x42941-0x30e(%edi),%eax
000003aa	movl	%eax,(%esp)
000003ad	calll	FindOrAddPanelAnimationMap(char const*)
000003b2	movl	%eax,0x14(%esi)
000003b5	testb	$0x01,CGameFileTreeView::KB_ChainToMap()::chained-0x30e(%edi)
000003bc	jne	0x000003f3
000003be	movb	$0x01,CGameFileTreeView::KB_ChainToMap()::chained-0x30e(%edi)
000003c5	leal	0x4292f-0x30e(%edi),%eax
000003cb	movl	%eax,(%esp)
000003ce	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000003d3	movl	%eax,%esi
000003d5	leal	CGameFileTreeView::GetPanelClassName()-0x30e(%edi),%eax
000003db	movl	%eax,0x44(%esi)
000003de	testl	%esi,%esi
000003e0	je	0x000003f3
000003e2	leal	0x42941-0x30e(%edi),%eax
000003e8	movl	%eax,(%esp)
000003eb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000003f0	movl	%eax,0x18(%esi)
000003f3	leal	0x000001e8(%ebx),%eax
000003f9	movl	%eax,0xf0(%ebp)
000003fc	movl	%eax,(%esp)
000003ff	calll	CUtlString::CUtlString()
00000404	leal	0x000001f8(%ebx),%esi
0000040a	movl	%esi,(%esp)
0000040d	calll	CUtlString::CUtlString()
00000412	movl	%esi,0xe8(%ebp)
00000415	leal	0x00000208(%ebx),%esi
0000041b	movl	%esi,(%esp)
0000041e	calll	CUtlString::CUtlString()
00000423	leal	0x00000218(%ebx),%ebx
00000429	movl	%ebx,(%esp)
0000042c	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x04(%esp)
00000434	calll	vgui::ImageList::ImageList(bool)
00000439	movl	%esi,0xec(%ebp)
0000043c	movl	0x1c(%ebp),%eax
0000043f	movl	%eax,0x04(%esp)
00000443	movl	0xf0(%ebp),%eax
00000446	movl	%eax,(%esp)
00000449	calll	CUtlString::operator=(char const*)
0000044e	movl	0x20(%ebp),%esi
00000451	movl	%esi,0x04(%esp)
00000455	movl	0xe8(%ebp),%eax
00000458	movl	%eax,(%esp)
0000045b	calll	CUtlString::operator=(char const*)
00000460	movl	0x18(%ebp),%eax
00000463	testl	%esi,%esi
00000465	movl	0x08(%ebp),%ecx
00000468	setne	0x00000230(%ecx)
0000046f	movl	%eax,0x04(%esp)
00000473	movl	0xec(%ebp),%eax
00000476	movl	%eax,(%esp)
00000479	calll	CUtlString::operator=(char const*)
0000047e	movl	0x45330-0x30e(%edi),%esi
00000484	movl	(%esi),%ecx
00000486	movl	(%ecx),%eax
00000488	movl	0x1c(%eax),%eax
0000048b	leal	0x42884-0x30e(%edi),%edx
00000491	movl	%edx,0x04(%esp)
00000495	movl	%ecx,(%esp)
00000498	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000004a0	call	*%eax
000004a2	movl	%eax,0x04(%esp)
000004a6	movl	%ebx,(%esp)
000004a9	calll	vgui::ImageList::AddImage(vgui::IImage*)
000004ae	movl	(%esi),%ecx
000004b0	movl	(%ecx),%eax
000004b2	movl	0x1c(%eax),%eax
000004b5	leal	0x42899-0x30e(%edi),%edx
000004bb	movl	%edx,0x04(%esp)
000004bf	movl	%ecx,(%esp)
000004c2	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000004ca	call	*%eax
000004cc	movl	%eax,0x04(%esp)
000004d0	movl	%ebx,(%esp)
000004d3	calll	vgui::ImageList::AddImage(vgui::IImage*)
000004d8	movl	(%esi),%ecx
000004da	movl	(%ecx),%eax
000004dc	movl	0x1c(%eax),%eax
000004df	leal	0x428b7-0x30e(%edi),%edx
000004e5	movl	%edx,0x04(%esp)
000004e9	movl	%ecx,(%esp)
000004ec	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000004f4	call	*%eax
000004f6	movl	%eax,0x04(%esp)
000004fa	movl	%ebx,(%esp)
000004fd	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000502	movl	0x08(%ebp),%ecx
00000505	movl	(%ecx),%eax
00000507	movl	0x00000374(%eax),%eax
0000050d	movl	%ebx,0x04(%esp)
00000511	movl	%ecx,(%esp)
00000514	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
0000051c	call	*%eax
0000051e	addl	$0x2c,%esp
00000521	popl	%esi
00000522	popl	%edi
00000523	popl	%ebx
00000524	popl	%ebp
00000525	ret
00000526	movl	%eax,%esi
00000528	jmp	0x000005d3
0000052d	movl	%eax,0xec(%ebp)
00000530	movl	0xf0(%ebp),%edi
00000533	jmp	0x000005a9
00000535	movl	%eax,%edi
00000537	jmp	0x00000574
00000539	movl	%eax,%edi
0000053b	jmp	0x0000054a
0000053d	movl	%eax,%edi
0000053f	movl	%ebx,(%esp)
00000542	calll	vgui::ImageList::~ImageList()
00000547	movl	0xec(%ebp),%esi
0000054a	movl	0x08(%ebp),%ebx
0000054d	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x00000210(%ebx)
00000554	js	0x00000574
00000556	movl	(%esi),%eax
00000558	testl	%eax,%eax
0000055a	je	0x0000056a
0000055c	movl	%eax,(%esp)
0000055f	calll	_free
00000564	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%esi)
0000056a	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x0000020c(%ebx)
00000574	movl	%edi,0xec(%ebp)
00000577	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x00000200(%ebx)
0000057e	jns	0x00000585
00000580	movl	0xf0(%ebp),%edi
00000583	jmp	0x000005a9
00000585	movl	0xe8(%ebp),%esi
00000588	movl	(%esi),%eax
0000058a	testl	%eax,%eax
0000058c	movl	0xf0(%ebp),%edi
0000058f	je	0x0000059f
00000591	movl	%eax,(%esp)
00000594	calll	_free
00000599	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%esi)
0000059f	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001fc(%ebx)
000005a9	cmpl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001f0(%ebx)
000005b0	js	0x000005d0
000005b2	movl	(%edi),%eax
000005b4	testl	%eax,%eax
000005b6	je	0x000005c6
000005b8	movl	%eax,(%esp)
000005bb	calll	_free
000005c0	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%edi)
000005c6	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x000001ec(%ebx)
000005d0	movl	0xec(%ebp),%esi
000005d3	movl	0xe4(%ebp),%eax
000005d6	movl	%eax,0x04(%esp)
000005da	movl	%ebx,(%esp)
000005dd	calll	vgui::TreeView::~TreeView()
000005e2	movl	%esi,(%esp)
000005e5	calll	__Unwind_Resume
000005ea	calll	std::terminate()
000005ef	nop
CGameFileTreeView::RefreshFileList():
000005f0	pushl	%ebp
000005f1	movl	%esp,%ebp
000005f3	pushl	%ebx
000005f4	pushl	%edi
000005f5	pushl	%esi
000005f6	subl	$0x1c,%esp
000005f9	calll	0x000005fe
000005fe	popl	%edi
000005ff	movl	0x08(%ebp),%ebx
00000602	movl	(%ebx),%eax
00000604	movl	%ebx,(%esp)
00000607	call	*0x00000364(%eax)
0000060d	movl	(%ebx),%eax
0000060f	movl	0x000000f0(%eax),%eax
00000615	movb	$0xd8,0xf0(%ebp)
00000619	movb	$0xde,0xf1(%ebp)
0000061d	movb	$0xd3,0xf2(%ebp)
00000621	movb	$0xff,0xf3(%ebp)
00000625	movl	0xf0(%ebp),%ecx
00000628	movl	%ecx,0x04(%esp)
0000062c	movl	%ebx,(%esp)
0000062f	call	*%eax
00000631	movl	$0x00000020,(%esp)
00000638	calll	KeyValues::operator new(unsigned long)
0000063d	movl	%eax,%esi
0000063f	leal	0x428ca-0x5fe(%edi),%eax
00000645	movl	%eax,0x04(%esp)
00000649	movl	%esi,(%esp)
0000064c	calll	KeyValues::KeyValues(char const*)
00000651	leal	0x00000208(%ebx),%eax
00000657	movl	%eax,(%esp)
0000065a	calll	CUtlString::operator char const*() const
0000065f	movl	%eax,0x08(%esp)
00000663	leal	0x428cf-0x5fe(%edi),%eax
00000669	movl	%eax,0x04(%esp)
0000066d	movl	%esi,(%esp)
00000670	calll	KeyValues::SetString(char const*, char const*)
00000675	leal	0x428ca-0x5fe(%edi),%eax
0000067b	movl	%eax,0x04(%esp)
0000067f	movl	%esi,(%esp)
00000682	movl	$0x00000001,0x08(%esp)
0000068a	calll	KeyValues::SetInt(char const*, int)
0000068f	leal	0x428d4-0x5fe(%edi),%eax
00000695	movl	%eax,0x04(%esp)
00000699	movl	%esi,(%esp)
0000069c	movl	$0x00000001,0x08(%esp)
000006a4	calll	KeyValues::SetInt(char const*, int)
000006a9	movl	(%ebx),%eax
000006ab	movl	0x00000348(%eax),%edi
000006b1	movl	%ebx,(%esp)
000006b4	call	*0x0000034c(%eax)
000006ba	movl	%eax,0x08(%esp)
000006be	movl	%esi,0x04(%esp)
000006c2	movl	%ebx,(%esp)
000006c5	call	*%edi
000006c7	movl	%eax,%edi
000006c9	movl	%esi,(%esp)
000006cc	calll	KeyValues::deleteThis()
000006d1	movl	(%ebx),%eax
000006d3	movl	%edi,0x04(%esp)
000006d7	movl	%ebx,(%esp)
000006da	movl	$0x00000001,0x08(%esp)
000006e2	call	*0x000003c0(%eax)
000006e8	addl	$0x1c,%esp
000006eb	popl	%esi
000006ec	popl	%edi
000006ed	popl	%ebx
000006ee	popl	%ebp
000006ef	ret
000006f0	movl	%eax,%edi
000006f2	movl	%esi,(%esp)
000006f5	calll	KeyValues::operator delete(void*)
000006fa	movl	%edi,(%esp)
000006fd	calll	__Unwind_Resume
00000702	calll	std::terminate()
00000707	nopw	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::SelectRoot():
00000710	pushl	%ebp
00000711	movl	%esp,%ebp
00000713	pushl	%edi
00000714	pushl	%esi
00000715	subl	$0x20,%esp
00000718	movl	0x08(%ebp),%edi
0000071b	movl	(%edi),%eax
0000071d	movl	0x0000037c(%eax),%esi
00000723	movl	%edi,(%esp)
00000726	call	*0x0000034c(%eax)
0000072c	movl	%eax,0x04(%esp)
00000730	movl	%edi,(%esp)
00000733	movl	$0x00000001,0x10(%esp)
0000073b	movl	$0x00000001,0x0c(%esp)
00000743	movl	$0x00000001,0x08(%esp)
0000074b	call	*%esi
0000074d	addl	$0x20,%esp
00000750	popl	%esi
00000751	popl	%edi
00000752	popl	%ebp
00000753	ret
00000754	nopw	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::GetRootDirectoryCount():
00000760	pushl	%ebp
00000761	movl	%esp,%ebp
00000763	pushl	%edi
00000764	pushl	%esi
00000765	subl	$0x10,%esp
00000768	movl	0x08(%ebp),%esi
0000076b	movl	(%esi),%eax
0000076d	movl	0x00000350(%eax),%edi
00000773	movl	%esi,(%esp)
00000776	call	*0x0000034c(%eax)
0000077c	movl	%eax,0x04(%esp)
00000780	movl	%esi,(%esp)
00000783	call	*%edi
00000785	addl	$0x10,%esp
00000788	popl	%esi
00000789	popl	%edi
0000078a	popl	%ebp
0000078b	ret
0000078c	nopl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax)
CGameFileTreeView::GetRootDirectory(int):
00000790	pushl	%ebp
00000791	movl	%esp,%ebp
00000793	pushl	%ebx
00000794	pushl	%edi
00000795	pushl	%esi
00000796	subl	$0x0c,%esp
00000799	calll	0x0000079e
0000079e	popl	%esi
0000079f	movl	0x08(%ebp),%edi
000007a2	movl	(%edi),%eax
000007a4	movl	0x00000354(%eax),%ebx
000007aa	movl	%edi,(%esp)
000007ad	call	*0x0000034c(%eax)
000007b3	movl	0x0c(%ebp),%ecx
000007b6	movl	%ecx,0x08(%esp)
000007ba	movl	%eax,0x04(%esp)
000007be	movl	%edi,(%esp)
000007c1	call	*%ebx
000007c3	movl	(%edi),%ecx
000007c5	movl	%eax,0x04(%esp)
000007c9	movl	%edi,(%esp)
000007cc	call	*0x0000035c(%ecx)
000007d2	testl	%eax,%eax
000007d4	je	0x000007f2
000007d6	leal	0x428db-0x79e(%esi),%ecx
000007dc	movl	%ecx,0x04(%esp)
000007e0	movl	%eax,(%esp)
000007e3	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
000007eb	calll	KeyValues::GetString(char const*, char const*)
000007f0	jmp	0x000007f4
000007f2	xorl	%eax,%eax
000007f4	addl	$0x0c,%esp
000007f7	popl	%esi
000007f8	popl	%edi
000007f9	popl	%ebx
000007fa	popl	%ebp
000007fb	ret
000007fc	nopl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax)
CGameFileTreeView::PopulateRootNode(int):
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	pushl	%ebx
00000804	pushl	%edi
00000805	pushl	%esi
00000806	subl	$0x1c,%esp
00000809	movl	0x08(%ebp),%edi
0000080c	leal	0x000001e8(%edi),%esi
00000812	movl	%esi,(%esp)
00000815	calll	CUtlString::operator char const*() const
0000081a	movl	%eax,0x08(%esp)
0000081e	movl	0x0c(%ebp),%ebx
00000821	movl	%ebx,0x04(%esp)
00000825	movl	%edi,(%esp)
00000828	calll	CGameFileTreeView::AddDirectoriesOfNode(int, char const*)
0000082d	testb	$0x01,0x00000230(%edi)
00000834	je	0x00000862
00000836	movl	%esi,(%esp)
00000839	calll	CUtlString::operator char const*() const
0000083e	movl	%eax,%esi
00000840	leal	0x000001f8(%edi),%eax
00000846	movl	%eax,(%esp)
00000849	calll	CUtlString::operator char const*() const
0000084e	movl	%eax,0x0c(%esp)
00000852	movl	%esi,0x08(%esp)
00000856	movl	%ebx,0x04(%esp)
0000085a	movl	%edi,(%esp)
0000085d	calll	CGameFileTreeView::AddFilesOfNode(int, char const*, char const*)
00000862	addl	$0x1c,%esp
00000865	popl	%esi
00000866	popl	%edi
00000867	popl	%ebx
00000868	popl	%ebp
00000869	ret
0000086a	nopw	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::AddDirectoriesOfNode(int, char const*):
00000870	pushl	%ebp
00000871	movl	%esp,%ebp
00000873	pushl	%ebx
00000874	pushl	%edi
00000875	pushl	%esi
00000876	subl	$0x0000024c,%esp
0000087c	calll	0x00000881
00000881	popl	%ebx
00000882	movl	%ebx,0xfffffdd8(%ebp)
00000888	movl	0x45328-0x881(%ebx),%eax
0000088e	movl	%eax,0xfffffdcc(%ebp)
00000894	movl	(%eax),%eax
00000896	movl	%eax,0xf0(%ebp)
00000899	movl	0x10(%ebp),%eax
0000089c	movl	%eax,0x0c(%esp)
000008a0	leal	0x428e0-0x881(%ebx),%eax
000008a6	movl	%eax,0x08(%esp)
000008aa	leal	0xfffffeec(%ebp),%esi
000008b0	movl	%esi,(%esp)
000008b3	movl	$0x00000104,0x04(%esp)
000008bb	calll	V_snprintf(char*, int, char const*, ...)
000008c0	movl	0x4532c-0x881(%ebx),%edi
000008c6	movl	%edi,0xfffffdd0(%ebp)
000008cc	movl	(%edi),%ecx
000008ce	movl	(%ecx),%eax
000008d0	leal	0xfffffddc(%ebp),%edx
000008d6	movl	%edx,0x0c(%esp)
000008da	leal	0x428e5-0x881(%ebx),%edx
000008e0	movl	%edx,0x08(%esp)
000008e4	movl	%esi,0x04(%esp)
000008e8	movl	%edi,%esi
000008ea	movl	%ecx,(%esp)
000008ed	call	*0x7c(%eax)
000008f0	jmp	0x0000091a
000008f2	nopw	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
00000900	movl	0xfffffdd0(%ebp),%esi
00000906	movl	(%esi),%ecx
00000908	movl	(%ecx),%eax
0000090a	movl	0xfffffddc(%ebp),%edx
00000910	movl	%edx,0x04(%esp)
00000914	movl	%ecx,(%esp)
00000917	call	*0x70(%eax)
0000091a	movl	%eax,%edi
0000091c	movl	(%esi),%eax
0000091e	testl	%edi,%edi
00000920	je	0x00000ad6
00000926	movl	(%eax),%ecx
00000928	movl	0xfffffddc(%ebp),%edx
0000092e	movl	%edx,0x04(%esp)
00000932	movl	%eax,(%esp)
00000935	call	*0x74(%ecx)
00000938	cmpb	$0x01,%al
0000093a	jne	0x00000900
0000093c	movl	0xfffffdd8(%ebp),%eax
00000942	leal	0x428ea-0x881(%eax),%eax
00000948	movl	%eax,0x04(%esp)
0000094c	movl	%edi,(%esp)
0000094f	movl	$0x00000002,0x08(%esp)
00000957	calll	V_strnicmp(char const*, char const*, int)
0000095c	testl	%eax,%eax
0000095e	je	0x00000900
00000960	movl	0xfffffdd8(%ebp),%eax
00000966	leal	0x428ec-0x881(%eax),%eax
0000096c	movl	%eax,0x04(%esp)
00000970	movl	%edi,(%esp)
00000973	movl	$0x00000003,0x08(%esp)
0000097b	calll	V_strnicmp(char const*, char const*, int)
00000980	testl	%eax,%eax
00000982	je	0x00000900
00000988	movl	$0x00000020,(%esp)
0000098f	calll	KeyValues::operator new(unsigned long)
00000994	movl	%eax,%esi
00000996	movl	%edi,0x0c(%esp)
0000099a	movl	0xfffffdd8(%ebp),%ecx
000009a0	leal	0x428cf-0x881(%ecx),%eax
000009a6	movl	%eax,0x08(%esp)
000009aa	leal	0x428ef-0x881(%ecx),%eax
000009b0	movl	%ecx,%ebx
000009b2	movl	%eax,0x04(%esp)
000009b6	movl	%esi,(%esp)
000009b9	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000009be	movl	%edi,0x10(%esp)
000009c2	movl	0x10(%ebp),%eax
000009c5	movl	%eax,0x0c(%esp)
000009c9	leal	0x428f4-0x881(%ebx),%eax
000009cf	movl	%eax,0x08(%esp)
000009d3	leal	0xfffffde8(%ebp),%edi
000009d9	movl	%edi,(%esp)
000009dc	movl	$0x00000104,0x04(%esp)
000009e4	calll	V_snprintf(char*, int, char const*, ...)
000009e9	movl	%edi,(%esp)
000009ec	movl	$0x0000002f,0x04(%esp)
000009f4	calll	V_FixSlashes(char*, char)
000009f9	movl	%edi,(%esp)
000009fc	calll	V_strlower(char*)
00000a01	movl	%edi,0x04(%esp)
00000a05	calll	CGameFileTreeView::DoesDirectoryHaveSubdirectories(char const*)
00000a0a	movb	%al,0xfffffdd7(%ebp)
00000a10	movl	%edi,0x08(%esp)
00000a14	leal	0x428db-0x881(%ebx),%eax
00000a1a	movl	%eax,0x04(%esp)
00000a1e	movl	%esi,(%esp)
00000a21	calll	KeyValues::SetString(char const*, char const*)
00000a26	movzbl	0xfffffdd7(%ebp),%eax
00000a2d	movl	%eax,0x08(%esp)
00000a31	leal	0x428d4-0x881(%ebx),%eax
00000a37	movl	%eax,0x04(%esp)
00000a3b	movl	%esi,(%esp)
00000a3e	calll	KeyValues::SetInt(char const*, int)
00000a43	leal	0x428fa-0x881(%ebx),%eax
00000a49	movl	%eax,0x04(%esp)
00000a4d	movl	%esi,(%esp)
00000a50	movl	$0x00000001,0x08(%esp)
00000a58	calll	KeyValues::SetInt(char const*, int)
00000a5d	leal	0x428fe-0x881(%ebx),%eax
00000a63	movl	%eax,0x04(%esp)
00000a67	movl	%esi,(%esp)
00000a6a	movl	$0x00000001,0x08(%esp)
00000a72	calll	KeyValues::SetInt(char const*, int)
00000a77	movl	0x08(%ebp),%edi
00000a7a	movl	(%edi),%eax
00000a7c	movl	0x0c(%ebp),%ecx
00000a7f	movl	%ecx,0x08(%esp)
00000a83	movl	%esi,0x04(%esp)
00000a87	movl	%edi,(%esp)
00000a8a	call	*0x00000348(%eax)
00000a90	movl	%eax,%ebx
00000a92	movl	%esi,(%esp)
00000a95	calll	KeyValues::deleteThis()
00000a9a	movl	(%edi),%eax
00000a9c	movl	0x000003a4(%eax),%eax
00000aa2	movb	$0xe0,0xfffffde0(%ebp)
00000aa9	movb	$0xc0,0xfffffde1(%ebp)
00000ab0	movb	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0xfffffde2(%ebp)
00000ab7	movb	$0xff,0xfffffde3(%ebp)
00000abe	leal	0xfffffde0(%ebp),%ecx
00000ac4	movl	%ecx,0x08(%esp)
00000ac8	movl	%ebx,0x04(%esp)
00000acc	movl	%edi,(%esp)
00000acf	call	*%eax
00000ad1	jmp	0x00000900
00000ad6	movl	(%eax),%ecx
00000ad8	movl	0xfffffddc(%ebp),%edx
00000ade	movl	%edx,0x04(%esp)
00000ae2	movl	%eax,(%esp)
00000ae5	call	*0x78(%ecx)
00000ae8	movl	0xfffffdcc(%ebp),%eax
00000aee	movl	(%eax),%eax
00000af0	cmpl	0xf0(%ebp),%eax
00000af3	jne	0x00000b12
00000af5	addl	$0x0000024c,%esp
00000afb	popl	%esi
00000afc	popl	%edi
00000afd	popl	%ebx
00000afe	popl	%ebp
00000aff	ret
00000b00	movl	%eax,%edi
00000b02	movl	%esi,(%esp)
00000b05	calll	KeyValues::operator delete(void*)
00000b0a	movl	%edi,(%esp)
00000b0d	calll	__Unwind_Resume
00000b12	calll	___stack_chk_fail
00000b17	calll	std::terminate()
00000b1c	nopl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax)
CGameFileTreeView::AddFilesOfNode(int, char const*, char const*):
00000b20	pushl	%ebp
00000b21	movl	%esp,%ebp
00000b23	pushl	%ebx
00000b24	pushl	%edi
00000b25	pushl	%esi
00000b26	subl	$0x0000023c,%esp
00000b2c	calll	0x00000b31
00000b31	popl	%ebx
00000b32	movl	0x45328-0xb31(%ebx),%eax
00000b38	movl	%eax,0xfffffddc(%ebp)
00000b3e	movl	(%eax),%eax
00000b40	movl	%eax,0xf0(%ebp)
00000b43	movl	0x14(%ebp),%eax
00000b46	movl	%eax,0x10(%esp)
00000b4a	movl	0x10(%ebp),%eax
00000b4d	movl	%eax,0x0c(%esp)
00000b51	leal	0x42904-0xb31(%ebx),%eax
00000b57	movl	%eax,0x08(%esp)
00000b5b	leal	0xfffffeec(%ebp),%esi
00000b61	movl	%esi,(%esp)
00000b64	movl	$0x00000104,0x04(%esp)
00000b6c	calll	V_snprintf(char*, int, char const*, ...)
00000b71	movl	0x4532c-0xb31(%ebx),%edi
00000b77	movl	%edi,0xfffffde0(%ebp)
00000b7d	movl	(%edi),%ecx
00000b7f	movl	(%ecx),%eax
00000b81	leal	0xfffffde4(%ebp),%edx
00000b87	movl	%edx,0x08(%esp)
00000b8b	movl	%esi,0x04(%esp)
00000b8f	movl	%edi,%esi
00000b91	movl	%ecx,(%esp)
00000b94	call	*0x6c(%eax)
00000b97	jmp	0x00000bba
00000b99	nopl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax)
00000ba0	movl	0xfffffde0(%ebp),%esi
00000ba6	movl	(%esi),%ecx
00000ba8	movl	(%ecx),%eax
00000baa	movl	0xfffffde4(%ebp),%edx
00000bb0	movl	%edx,0x04(%esp)
00000bb4	movl	%ecx,(%esp)
00000bb7	call	*0x70(%eax)
00000bba	movl	%eax,%edi
00000bbc	movl	(%esi),%eax
00000bbe	testl	%edi,%edi
00000bc0	je	0x00000c8b
00000bc6	movl	(%eax),%ecx
00000bc8	movl	0xfffffde4(%ebp),%edx
00000bce	movl	%edx,0x04(%esp)
00000bd2	movl	%eax,(%esp)
00000bd5	call	*0x74(%ecx)
00000bd8	testb	%al,%al
00000bda	jne	0x00000ba0
00000bdc	movl	$0x00000020,(%esp)
00000be3	calll	KeyValues::operator new(unsigned long)
00000be8	movl	%eax,%esi
00000bea	movl	%edi,0x0c(%esp)
00000bee	leal	0x428cf-0xb31(%ebx),%eax
00000bf4	movl	%eax,0x08(%esp)
00000bf8	leal	0x428ef-0xb31(%ebx),%eax
00000bfe	movl	%eax,0x04(%esp)
00000c02	movl	%esi,(%esp)
00000c05	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00000c0a	movl	%edi,0x10(%esp)
00000c0e	movl	0x10(%ebp),%eax
00000c11	movl	%eax,0x0c(%esp)
00000c15	leal	0x4290c-0xb31(%ebx),%eax
00000c1b	movl	%eax,0x08(%esp)
00000c1f	leal	0xfffffde8(%ebp),%edi
00000c25	movl	%edi,(%esp)
00000c28	movl	$0x00000104,0x04(%esp)
00000c30	calll	V_snprintf(char*, int, char const*, ...)
00000c35	movl	%edi,0x08(%esp)
00000c39	leal	0x428db-0xb31(%ebx),%eax
00000c3f	movl	%eax,0x04(%esp)
00000c43	movl	%esi,(%esp)
00000c46	calll	KeyValues::SetString(char const*, char const*)
00000c4b	leal	0x428fe-0xb31(%ebx),%eax
00000c51	movl	%eax,0x04(%esp)
00000c55	movl	%esi,(%esp)
00000c58	movl	$0x00000003,0x08(%esp)
00000c60	calll	KeyValues::SetInt(char const*, int)
00000c65	movl	0x08(%ebp),%edx
00000c68	movl	(%edx),%eax
00000c6a	movl	0x0c(%ebp),%ecx
00000c6d	movl	%ecx,0x08(%esp)
00000c71	movl	%esi,0x04(%esp)
00000c75	movl	%edx,(%esp)
00000c78	call	*0x00000348(%eax)
00000c7e	movl	%esi,(%esp)
00000c81	calll	KeyValues::deleteThis()
00000c86	jmp	0x00000ba0
00000c8b	movl	(%eax),%ecx
00000c8d	movl	0xfffffde4(%ebp),%edx
00000c93	movl	%edx,0x04(%esp)
00000c97	movl	%eax,(%esp)
00000c9a	call	*0x78(%ecx)
00000c9d	movl	0xfffffddc(%ebp),%eax
00000ca3	movl	(%eax),%eax
00000ca5	cmpl	0xf0(%ebp),%eax
00000ca8	jne	0x00000cc7
00000caa	addl	$0x0000023c,%esp
00000cb0	popl	%esi
00000cb1	popl	%edi
00000cb2	popl	%ebx
00000cb3	popl	%ebp
00000cb4	ret
00000cb5	movl	%eax,%edi
00000cb7	movl	%esi,(%esp)
00000cba	calll	KeyValues::operator delete(void*)
00000cbf	movl	%edi,(%esp)
00000cc2	calll	__Unwind_Resume
00000cc7	calll	___stack_chk_fail
00000ccc	calll	std::terminate()
00000cd1	nopl	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::DoesDirectoryHaveSubdirectories(char const*):
00000ce0	pushl	%ebp
00000ce1	movl	%esp,%ebp
00000ce3	pushl	%ebx
00000ce4	pushl	%edi
00000ce5	pushl	%esi
00000ce6	subl	$0x0000012c,%esp
00000cec	calll	0x00000cf1
00000cf1	popl	%ebx
00000cf2	movl	0x45328-0xcf1(%ebx),%eax
00000cf8	movl	%eax,0xfffffee4(%ebp)
00000cfe	movl	(%eax),%eax
00000d00	movl	%eax,0xf0(%ebp)
00000d03	movl	0x0c(%ebp),%eax
00000d06	movl	%eax,0x0c(%esp)
00000d0a	leal	0x428e0-0xcf1(%ebx),%eax
00000d10	movl	%eax,0x08(%esp)
00000d14	leal	0xfffffeec(%ebp),%esi
00000d1a	movl	%esi,(%esp)
00000d1d	movl	$0x00000104,0x04(%esp)
00000d25	calll	V_snprintf(char*, int, char const*, ...)
00000d2a	movl	0x4532c-0xcf1(%ebx),%edi
00000d30	movl	(%edi),%ecx
00000d32	movl	(%ecx),%eax
00000d34	leal	0xfffffee8(%ebp),%edx
00000d3a	movl	%edx,0x0c(%esp)
00000d3e	leal	0x428e5-0xcf1(%ebx),%edx
00000d44	movl	%edx,0x08(%esp)
00000d48	movl	%esi,0x04(%esp)
00000d4c	movl	%ecx,(%esp)
00000d4f	call	*0x7c(%eax)
00000d52	jmp	0x00000dc8
00000d54	nopw	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
00000d60	movl	(%eax),%ecx
00000d62	movl	0xfffffee8(%ebp),%edx
00000d68	movl	%edx,0x04(%esp)
00000d6c	movl	%eax,(%esp)
00000d6f	call	*0x74(%ecx)
00000d72	cmpb	$0x01,%al
00000d74	jne	0x00000db4
00000d76	leal	0x428ea-0xcf1(%ebx),%eax
00000d7c	movl	%eax,0x04(%esp)
00000d80	movl	%esi,(%esp)
00000d83	movl	$0x00000002,0x08(%esp)
00000d8b	calll	V_strnicmp(char const*, char const*, int)
00000d90	testl	%eax,%eax
00000d92	je	0x00000db4
00000d94	leal	0x428ec-0xcf1(%ebx),%eax
00000d9a	movl	%eax,0x04(%esp)
00000d9e	movl	%esi,(%esp)
00000da1	movl	$0x00000003,0x08(%esp)
00000da9	calll	V_strnicmp(char const*, char const*, int)
00000dae	movb	$0x01,%cl
00000db0	testl	%eax,%eax
00000db2	jne	0x00000de4
00000db4	movl	(%edi),%ecx
00000db6	movl	(%ecx),%eax
00000db8	movl	0xfffffee8(%ebp),%edx
00000dbe	movl	%edx,0x04(%esp)
00000dc2	movl	%ecx,(%esp)
00000dc5	call	*0x70(%eax)
00000dc8	movl	%eax,%esi
00000dca	movl	(%edi),%eax
00000dcc	testl	%esi,%esi
00000dce	jne	0x00000d60
00000dd0	movl	(%eax),%ecx
00000dd2	movl	0xfffffee8(%ebp),%edx
00000dd8	movl	%edx,0x04(%esp)
00000ddc	movl	%eax,(%esp)
00000ddf	call	*0x78(%ecx)
00000de2	xorb	%cl,%cl
00000de4	movl	0xfffffee4(%ebp),%eax
00000dea	movl	(%eax),%eax
00000dec	cmpl	0xf0(%ebp),%eax
00000def	jne	0x00000dff
00000df1	movzbl	%cl,%eax
00000df4	addl	$0x0000012c,%esp
00000dfa	popl	%esi
00000dfb	popl	%edi
00000dfc	popl	%ebx
00000dfd	popl	%ebp
00000dfe	ret
00000dff	calll	___stack_chk_fail
00000e04	nopw	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::SetItemColorForDirectories(int):
00000e10	pushl	%ebp
00000e11	movl	%esp,%ebp
00000e13	subl	$0x18,%esp
00000e16	movl	0x08(%ebp),%eax
00000e19	movl	(%eax),%ecx
00000e1b	movl	0x000003a4(%ecx),%ecx
00000e21	movb	$0xe0,0xf8(%ebp)
00000e25	movb	$0xc0,0xf9(%ebp)
00000e29	movb	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0xfa(%ebp)
00000e2d	movb	$0xff,0xfb(%ebp)
00000e31	leal	0xf8(%ebp),%edx
00000e34	movl	%edx,0x08(%esp)
00000e38	movl	0x0c(%ebp),%edx
00000e3b	movl	%edx,0x04(%esp)
00000e3f	movl	%eax,(%esp)
00000e42	call	*%ecx
00000e44	addl	$0x18,%esp
00000e47	popl	%ebp
00000e48	ret
00000e49	nopl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax)
CGameFileTreeView::GenerateChildrenOfNode(int):
00000e50	pushl	%ebp
00000e51	movl	%esp,%ebp
00000e53	pushl	%ebx
00000e54	pushl	%edi
00000e55	pushl	%esi
00000e56	subl	$0x1c,%esp
00000e59	calll	0x00000e5e
00000e5e	popl	%ebx
00000e5f	movl	0x08(%ebp),%edi
00000e62	movl	(%edi),%eax
00000e64	movl	0x0c(%ebp),%ecx
00000e67	movl	%ecx,0x04(%esp)
00000e6b	movl	%edi,(%esp)
00000e6e	call	*0x0000035c(%eax)
00000e74	movl	%eax,%esi
00000e76	leal	0x428ca-0xe5e(%ebx),%eax
00000e7c	movl	%eax,0x04(%esp)
00000e80	movl	%esi,(%esp)
00000e83	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
00000e8b	calll	KeyValues::GetInt(char const*, int)
00000e90	testl	%eax,%eax
00000e92	je	0x00000eed
00000e94	leal	0x000001e8(%edi),%esi
00000e9a	movl	%esi,(%esp)
00000e9d	calll	CUtlString::operator char const*() const
00000ea2	movl	%eax,0x08(%esp)
00000ea6	movl	0x0c(%ebp),%eax
00000ea9	movl	%eax,0x04(%esp)
00000ead	movl	%eax,%ebx
00000eaf	movl	%edi,(%esp)
00000eb2	calll	CGameFileTreeView::AddDirectoriesOfNode(int, char const*)
00000eb7	testb	$0x01,0x00000230(%edi)
00000ebe	je	0x00000f92
00000ec4	movl	%esi,(%esp)
00000ec7	calll	CUtlString::operator char const*() const
00000ecc	movl	%eax,%esi
00000ece	leal	0x000001f8(%edi),%eax
00000ed4	movl	%eax,(%esp)
00000ed7	calll	CUtlString::operator char const*() const
00000edc	movl	%eax,0x0c(%esp)
00000ee0	movl	%esi,0x08(%esp)
00000ee4	movl	%ebx,0x04(%esp)
00000ee8	jmp	0x00000f8a
00000eed	leal	0x428fa-0xe5e(%ebx),%eax
00000ef3	movl	%eax,0x04(%esp)
00000ef7	movl	%esi,(%esp)
00000efa	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
00000f02	calll	KeyValues::GetInt(char const*, int)
00000f07	testl	%eax,%eax
00000f09	je	0x00000f92
00000f0f	leal	0x42912-0xe5e(%ebx),%eax
00000f15	movl	%eax,0x08(%esp)
00000f19	leal	0x428db-0xe5e(%ebx),%eax
00000f1f	movl	%eax,0x04(%esp)
00000f23	movl	%esi,(%esp)
00000f26	calll	KeyValues::GetString(char const*, char const*)
00000f2b	movl	%eax,%esi
00000f2d	cmpb	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),(%esi)
00000f30	je	0x00000f92
00000f32	movl	0x45334-0xe5e(%ebx),%eax
00000f38	movl	(%eax),%ecx
00000f3a	movl	(%ecx),%eax
00000f3c	movl	%ecx,(%esp)
00000f3f	movl	$0x00000005,0x04(%esp)
00000f47	call	*0x000000cc(%eax)
00000f4d	movl	%esi,0x08(%esp)
00000f51	movl	0x0c(%ebp),%eax
00000f54	movl	%eax,0x04(%esp)
00000f58	movl	%edi,(%esp)
00000f5b	calll	CGameFileTreeView::AddDirectoriesOfNode(int, char const*)
00000f60	testb	$0x01,0x00000230(%edi)
00000f67	movl	%edi,%eax
00000f69	je	0x00000f92
00000f6b	movl	%eax,%edi
00000f6d	leal	0x000001f8(%edi),%eax
00000f73	movl	%eax,(%esp)
00000f76	calll	CUtlString::operator char const*() const
00000f7b	movl	%eax,0x0c(%esp)
00000f7f	movl	%esi,0x08(%esp)
00000f83	movl	0x0c(%ebp),%eax
00000f86	movl	%eax,0x04(%esp)
00000f8a	movl	%edi,(%esp)
00000f8d	calll	CGameFileTreeView::AddFilesOfNode(int, char const*, char const*)
00000f92	addl	$0x1c,%esp
00000f95	popl	%esi
00000f96	popl	%edi
00000f97	popl	%ebx
00000f98	popl	%ebp
00000f99	ret
00000f9a	nopw	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::GenerateContextMenu(int, int, int):
00000fa0	ret
00000fa1	nopl	%cs:CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)(%eax,%eax)
CGameFileTreeView::ApplySchemeSettings(vgui::IScheme*):
00000fb0	pushl	%ebp
00000fb1	movl	%esp,%ebp
00000fb3	pushl	%ebx
00000fb4	pushl	%edi
00000fb5	pushl	%esi
00000fb6	subl	$0x1c,%esp
00000fb9	calll	0x00000fbe
00000fbe	popl	%esi
00000fbf	movl	0x0c(%ebp),%ebx
00000fc2	movl	%ebx,0x04(%esp)
00000fc6	movl	0x08(%ebp),%edi
00000fc9	movl	%edi,(%esp)
00000fcc	calll	vgui::TreeView::ApplySchemeSettings(vgui::IScheme*)
00000fd1	movl	(%edi),%eax
00000fd3	movl	0x00000370(%eax),%eax
00000fd9	movl	%eax,0xf0(%ebp)
00000fdc	movl	(%ebx),%eax
00000fde	leal	0x42913-0xfbe(%esi),%ecx
00000fe4	movl	%ecx,0x04(%esp)
00000fe8	movl	%ebx,(%esp)
00000feb	movl	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*),0x08(%esp)
00000ff3	call	*0x10(%eax)
00000ff6	movl	%eax,0x04(%esp)
00000ffa	movl	%edi,(%esp)
00000ffd	call	*0xf0(%ebp)
00001000	addl	$0x1c,%esp
00001003	popl	%esi
00001004	popl	%edi
00001005	popl	%ebx
00001006	popl	%ebp
00001007	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(manipulator.o):
(__TEXT,__text) section
CTransformManipulator::CTransformManipulator(matrix3x4_t*):
00000000	calll	0x00000005
00000005	popl	%ecx
00000006	movl	0x04(%esp),%eax
0000000a	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x08(%eax)
00000011	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x04(%eax)
00000018	leal	vtable for CTransformManipulator-0x5+0x00000008(%ecx),%ecx
0000001e	movl	%ecx,(%eax)
00000020	movl	0x08(%esp),%ecx
00000024	movl	%ecx,0x0c(%eax)
00000027	ret
00000028	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CTransformManipulator::CTransformManipulator(matrix3x4_t*):
00000030	calll	0x00000035
00000035	popl	%ecx
00000036	movl	0x04(%esp),%eax
0000003a	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x08(%eax)
00000041	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x04(%eax)
00000048	leal	vtable for CTransformManipulator-0x35+0x00000008(%ecx),%ecx
0000004e	movl	%ecx,(%eax)
00000050	movl	0x08(%esp),%ecx
00000054	movl	%ecx,0x0c(%eax)
00000057	ret
00000058	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CTransformManipulator::SetTransform(matrix3x4_t*):
00000060	movl	0x08(%esp),%eax
00000064	movl	0x04(%esp),%ecx
00000068	movl	%eax,0x0c(%ecx)
0000006b	ret
0000006c	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
CTransformManipulator::GetTransform():
00000070	movl	0x04(%esp),%eax
00000074	movl	0x0c(%eax),%eax
00000077	ret
00000078	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*):
00000080	calll	0x00000085
00000085	popl	%ecx
00000086	movl	0x04(%esp),%eax
0000008a	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x08(%eax)
00000091	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x04(%eax)
00000098	movl	0x08(%esp),%edx
0000009c	movl	%edx,0x0c(%eax)
0000009f	leal	vtable for CPotteryWheelManip-0x85+0x00000008(%ecx),%ecx
000000a5	movl	%ecx,(%eax)
000000a7	movl	$0xffffffff,0x10(%eax)
000000ae	movl	$0xffffffff,0x14(%eax)
000000b5	movl	$0x42c80000,0x18(%eax)
000000bc	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x1c(%eax)
000000c3	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x20(%eax)
000000ca	movl	$0x42c80000,0x24(%eax)
000000d1	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x34(%eax)
000000d8	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
000000df	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x2c(%eax)
000000e6	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x28(%eax)
000000ed	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%eax)
000000f1	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%eax)
000000f8	ret
000000f9	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*):
00000100	calll	0x00000105
00000105	popl	%ecx
00000106	movl	0x04(%esp),%eax
0000010a	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x08(%eax)
00000111	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x04(%eax)
00000118	movl	0x08(%esp),%edx
0000011c	movl	%edx,0x0c(%eax)
0000011f	leal	vtable for CPotteryWheelManip-0x105+0x00000008(%ecx),%ecx
00000125	movl	%ecx,(%eax)
00000127	movl	$0xffffffff,0x10(%eax)
0000012e	movl	$0xffffffff,0x14(%eax)
00000135	movl	$0x42c80000,0x18(%eax)
0000013c	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x1c(%eax)
00000143	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x20(%eax)
0000014a	movl	$0x42c80000,0x24(%eax)
00000151	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x34(%eax)
00000158	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
0000015f	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x2c(%eax)
00000166	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x28(%eax)
0000016d	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%eax)
00000171	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%eax)
00000178	ret
00000179	nopl	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
CPotteryWheelManip::OnBeginManipulation():
00000180	pushl	%ebp
00000181	movl	%esp,%ebp
00000183	pushl	%esi
00000184	subl	$0x14,%esp
00000187	calll	0x0000018c
0000018c	popl	%eax
0000018d	movl	0x08(%ebp),%esi
00000190	movss	0x18(%esi),%xmm0
00000195	movss	%xmm0,0x24(%esi)
0000019a	movss	0x1c(%esi),%xmm0
0000019f	movss	%xmm0,0x28(%esi)
000001a4	movss	0x20(%esi),%xmm0
000001a9	movss	%xmm0,0x2c(%esi)
000001ae	movl	0xb773-0x18c(%eax),%eax
000001b4	movl	(%eax),%ecx
000001b6	movl	(%ecx),%eax
000001b8	movl	%ecx,(%esp)
000001bb	call	*0x14(%eax)
000001be	fstps	0xf8(%ebp)
000001c1	movss	0xf8(%ebp),%xmm0
000001c6	movss	%xmm0,0x34(%esi)
000001cb	movss	%xmm0,CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%esi)
000001d0	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%esi)
000001d7	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%esi)
000001db	addl	$0x14,%esp
000001de	popl	%esi
000001df	popl	%ebp
000001e0	ret
000001e1	nopl	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::SetZoom(float):
000001f0	movss	0x08(%esp),%xmm0
000001f6	movl	0x04(%esp),%eax
000001fa	movss	%xmm0,0x18(%eax)
000001ff	movss	%xmm0,0x24(%eax)
00000204	ret
00000205	nopl	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::OnAcceptManipulation():
00000210	movl	0x04(%esp),%eax
00000214	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%eax)
0000021b	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%eax)
0000021f	ret
CPotteryWheelManip::OnCancelManipulation():
00000220	pushl	%ebp
00000221	movl	%esp,%ebp
00000223	pushl	%edi
00000224	pushl	%esi
00000225	subl	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*),%esp
0000022b	calll	0x00000230
00000230	popl	%esi
00000231	movl	0x08(%ebp),%eax
00000234	movss	0x24(%eax),%xmm0
00000239	movss	%xmm0,0xac(%ebp)
0000023e	movss	%xmm0,0x18(%eax)
00000243	movss	0x28(%eax),%xmm0
00000248	movss	%xmm0,0x1c(%eax)
0000024d	movss	0x2c(%eax),%xmm1
00000252	movss	%xmm1,0xb4(%ebp)
00000257	movss	%xmm1,0x20(%eax)
0000025c	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%eax)
00000263	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%eax)
00000267	movl	0x0c(%eax),%edi
0000026a	testl	%edi,%edi
0000026c	je	0x00000358
00000272	cvtss2sd	%xmm0,%xmm1
00000276	movsd	%xmm1,0x90(%ebp)
0000027b	movsd	%xmm1,(%esp)
00000280	movss	%xmm0,0xb0(%ebp)
00000285	calll	_cos
0000028a	fstpt	0xa0(%ebp)
0000028d	movsd	0x90(%ebp),%xmm0
00000292	movsd	%xmm0,(%esp)
00000297	calll	_sin
0000029c	fstpt	0x90(%ebp)
0000029f	movss	0xb4(%ebp),%xmm0
000002a4	cvtss2sd	%xmm0,%xmm0
000002a8	movsd	%xmm0,0x88(%ebp)
000002ad	movsd	%xmm0,(%esp)
000002b2	calll	_cos
000002b7	movsd	0x88(%ebp),%xmm0
000002bc	movsd	%xmm0,(%esp)
000002c1	fldt	0xa0(%ebp)
000002c4	fstpl	0xd0(%ebp)
000002c7	fldt	0x90(%ebp)
000002ca	fstpl	0xc8(%ebp)
000002cd	fstpl	0xc0(%ebp)
000002d0	calll	_sin
000002d5	fstpl	0xb8(%ebp)
000002d8	movss	0xac(%ebp),%xmm0
000002dd	cvtss2sd	%xmm0,%xmm0
000002e1	movsd	0xd0(%ebp),%xmm1
000002e6	mulsd	%xmm0,%xmm1
000002ea	cvtsd2ss	%xmm1,%xmm1
000002ee	cvtss2sd	%xmm1,%xmm1
000002f2	movsd	0xb8(%ebp),%xmm2
000002f7	mulsd	%xmm1,%xmm2
000002fb	cvtsd2ss	%xmm2,%xmm2
000002ff	movss	%xmm2,0xe8(%ebp)
00000304	mulsd	0xc8(%ebp),%xmm0
00000309	cvtsd2ss	%xmm0,%xmm0
0000030d	movss	%xmm0,0xec(%ebp)
00000312	mulsd	0xc0(%ebp),%xmm1
00000317	cvtsd2ss	%xmm1,%xmm0
0000031b	movss	%xmm0,0xf0(%ebp)
00000320	movss	0xb0(%ebp),%xmm0
00000325	xorps	0xa7b0-0x230(%esi),%xmm0
0000032c	movss	%xmm0,0xd8(%ebp)
00000331	movss	0xb4(%ebp),%xmm0
00000336	movss	%xmm0,0xdc(%ebp)
0000033b	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0xe0(%ebp)
00000342	movl	%edi,0x08(%esp)
00000346	leal	0xe8(%ebp),%eax
00000349	movl	%eax,0x04(%esp)
0000034d	leal	0xd8(%ebp),%eax
00000350	movl	%eax,(%esp)
00000353	calll	AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
00000358	addl	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*),%esp
0000035e	popl	%esi
0000035f	popl	%edi
00000360	popl	%ebp
00000361	ret
00000362	nopw	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::UpdateTransform():
00000370	pushl	%ebp
00000371	movl	%esp,%ebp
00000373	pushl	%ebx
00000374	pushl	%edi
00000375	pushl	%esi
00000376	subl	$0x0000008c,%esp
0000037c	calll	0x00000381
00000381	popl	%edi
00000382	movl	0x08(%ebp),%ebx
00000385	movl	0x0c(%ebx),%esi
00000388	testl	%esi,%esi
0000038a	je	0x0000048a
00000390	movss	0x20(%ebx),%xmm0
00000395	movss	%xmm0,0xb4(%ebp)
0000039a	cvtss2sd	%xmm0,%xmm0
0000039e	movsd	%xmm0,0xa8(%ebp)
000003a3	movsd	%xmm0,(%esp)
000003a8	calll	_cos
000003ad	fstpt	0x9c(%ebp)
000003b0	movsd	0xa8(%ebp),%xmm0
000003b5	movsd	%xmm0,(%esp)
000003ba	calll	_sin
000003bf	fstpt	0x8c(%ebp)
000003c2	movss	0x18(%ebx),%xmm0
000003c7	movss	%xmm0,0x98(%ebp)
000003cc	movss	0x1c(%ebx),%xmm0
000003d1	movss	%xmm0,0xa8(%ebp)
000003d6	cvtss2sd	%xmm0,%xmm0
000003da	movsd	%xmm0,CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp)
000003df	movsd	%xmm0,(%esp)
000003e4	calll	_cos
000003e9	movsd	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp),%xmm0
000003ee	movsd	%xmm0,(%esp)
000003f3	fldt	0x9c(%ebp)
000003f6	fstpl	0xd0(%ebp)
000003f9	fldt	0x8c(%ebp)
000003fc	fstpl	0xc8(%ebp)
000003ff	fstpl	0xc0(%ebp)
00000402	calll	_sin
00000407	fstpl	0xb8(%ebp)
0000040a	movss	0x98(%ebp),%xmm0
0000040f	cvtss2sd	%xmm0,%xmm0
00000413	movsd	0xc0(%ebp),%xmm1
00000418	mulsd	%xmm0,%xmm1
0000041c	cvtsd2ss	%xmm1,%xmm1
00000420	cvtss2sd	%xmm1,%xmm1
00000424	movsd	0xc8(%ebp),%xmm2
00000429	mulsd	%xmm1,%xmm2
0000042d	cvtsd2ss	%xmm2,%xmm2
00000431	movss	%xmm2,0xe8(%ebp)
00000436	mulsd	0xb8(%ebp),%xmm0
0000043b	cvtsd2ss	%xmm0,%xmm0
0000043f	movss	%xmm0,0xec(%ebp)
00000444	mulsd	0xd0(%ebp),%xmm1
00000449	cvtsd2ss	%xmm1,%xmm0
0000044d	movss	%xmm0,0xf0(%ebp)
00000452	movss	0xa8(%ebp),%xmm0
00000457	xorps	0xa7c0-0x381(%edi),%xmm0
0000045e	movss	%xmm0,0xd8(%ebp)
00000463	movss	0xb4(%ebp),%xmm0
00000468	movss	%xmm0,0xdc(%ebp)
0000046d	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0xe0(%ebp)
00000474	movl	%esi,0x08(%esp)
00000478	leal	0xe8(%ebp),%eax
0000047b	movl	%eax,0x04(%esp)
0000047f	leal	0xd8(%ebp),%eax
00000482	movl	%eax,(%esp)
00000485	calll	AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
0000048a	addl	$0x0000008c,%esp
00000490	popl	%esi
00000491	popl	%edi
00000492	popl	%ebx
00000493	popl	%ebp
00000494	ret
00000495	nopl	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::OnTick():
000004a0	pushl	%ebp
000004a1	movl	%esp,%ebp
000004a3	pushl	%ebx
000004a4	pushl	%edi
000004a5	pushl	%esi
000004a6	subl	$0x0000008c,%esp
000004ac	calll	0x000004b1
000004b1	popl	%esi
000004b2	movl	0xb773-0x4b1(%esi),%eax
000004b8	movl	(%eax),%ecx
000004ba	movl	(%ecx),%eax
000004bc	movl	%ecx,(%esp)
000004bf	call	*0x14(%eax)
000004c2	fstps	0xd4(%ebp)
000004c5	movl	0x08(%ebp),%ebx
000004c8	movss	0x34(%ebx),%xmm0
000004cd	movss	0xd4(%ebp),%xmm1
000004d2	movss	%xmm1,0x34(%ebx)
000004d7	testb	$0x01,0x3c(%ebx)
000004db	je	0x000005fa
000004e1	subss	%xmm0,%xmm1
000004e5	mulss	0x38(%ebx),%xmm1
000004ea	addss	0x20(%ebx),%xmm1
000004ef	movss	%xmm1,0x20(%ebx)
000004f4	movl	0x0c(%ebx),%edi
000004f7	testl	%edi,%edi
000004f9	je	0x000005fa
000004ff	cvtss2sd	%xmm1,%xmm0
00000503	movsd	%xmm0,0xa0(%ebp)
00000508	movsd	%xmm0,(%esp)
0000050d	movss	%xmm1,0xac(%ebp)
00000512	calll	_cos
00000517	fstpt	0x94(%ebp)
0000051a	movsd	0xa0(%ebp),%xmm0
0000051f	movsd	%xmm0,(%esp)
00000524	calll	_sin
00000529	fstpt	0x84(%ebp)
0000052c	movss	0x18(%ebx),%xmm0
00000531	movss	%xmm0,0x90(%ebp)
00000536	movss	0x1c(%ebx),%xmm0
0000053b	movss	%xmm0,0xa0(%ebp)
00000540	cvtss2sd	%xmm0,%xmm0
00000544	movsd	%xmm0,0xffffff78(%ebp)
0000054c	movsd	%xmm0,(%esp)
00000551	calll	_cos
00000556	movsd	0xffffff78(%ebp),%xmm0
0000055e	movsd	%xmm0,(%esp)
00000563	fldt	0x94(%ebp)
00000566	fstpl	0xc8(%ebp)
00000569	fldt	0x84(%ebp)
0000056c	fstpl	0xc0(%ebp)
0000056f	fstpl	0xb8(%ebp)
00000572	calll	_sin
00000577	fstpl	0xb0(%ebp)
0000057a	movss	0x90(%ebp),%xmm0
0000057f	cvtss2sd	%xmm0,%xmm0
00000583	movsd	0xb8(%ebp),%xmm1
00000588	mulsd	%xmm0,%xmm1
0000058c	cvtsd2ss	%xmm1,%xmm1
00000590	cvtss2sd	%xmm1,%xmm1
00000594	movsd	0xc0(%ebp),%xmm2
00000599	mulsd	%xmm1,%xmm2
0000059d	cvtsd2ss	%xmm2,%xmm2
000005a1	movss	%xmm2,0xe8(%ebp)
000005a6	mulsd	0xb0(%ebp),%xmm0
000005ab	cvtsd2ss	%xmm0,%xmm0
000005af	movss	%xmm0,0xec(%ebp)
000005b4	mulsd	0xc8(%ebp),%xmm1
000005b9	cvtsd2ss	%xmm1,%xmm0
000005bd	movss	%xmm0,0xf0(%ebp)
000005c2	movss	0xa0(%ebp),%xmm0
000005c7	xorps	0xa7d0-0x4b1(%esi),%xmm0
000005ce	movss	%xmm0,0xd8(%ebp)
000005d3	movss	0xac(%ebp),%xmm0
000005d8	movss	%xmm0,0xdc(%ebp)
000005dd	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0xe0(%ebp)
000005e4	movl	%edi,0x08(%esp)
000005e8	leal	0xe8(%ebp),%eax
000005eb	movl	%eax,0x04(%esp)
000005ef	leal	0xd8(%ebp),%eax
000005f2	movl	%eax,(%esp)
000005f5	calll	AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
000005fa	addl	$0x0000008c,%esp
00000600	popl	%esi
00000601	popl	%edi
00000602	popl	%ebx
00000603	popl	%ebp
00000604	ret
00000605	nopl	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::OnCursorMoved(int, int):
00000610	pushl	%ebp
00000611	movl	%esp,%ebp
00000613	pushl	%ebx
00000614	pushl	%edi
00000615	pushl	%esi
00000616	subl	$0x0000009c,%esp
0000061c	calll	0x00000621
00000621	popl	%esi
00000622	movl	0xb773-0x621(%esi),%eax
00000628	movl	(%eax),%ecx
0000062a	movl	(%ecx),%eax
0000062c	movl	%ecx,(%esp)
0000062f	call	*0x14(%eax)
00000632	fstps	0xd4(%ebp)
00000635	movl	0x08(%ebp),%edi
00000638	movss	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%edi),%xmm0
0000063d	movss	%xmm0,0x8c(%ebp)
00000642	movss	0xd4(%ebp),%xmm0
00000647	movss	%xmm0,CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%edi)
0000064c	movl	0x10(%ebp),%eax
0000064f	movl	0x0c(%ebp),%ecx
00000652	testb	$0x01,0x3c(%edi)
00000656	je	0x00000663
00000658	movl	%ecx,0x10(%edi)
0000065b	movl	%eax,0x14(%edi)
0000065e	jmp	0x000008d4
00000663	movss	%xmm0,0x98(%ebp)
00000668	movl	0xb76f-0x621(%esi),%eax
0000066e	movl	(%eax),%ecx
00000670	movl	(%ecx),%eax
00000672	movl	%ecx,(%esp)
00000675	movl	$0x0000006d,0x04(%esp)
0000067d	call	*CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
00000680	cmpb	$0x01,%al
00000682	jne	0x0000073f
00000688	movl	%esi,0xa4(%ebp)
0000068b	movl	0x0c(%ebp),%eax
0000068e	subl	0x10(%edi),%eax
00000691	movl	%eax,%ecx
00000693	sarl	$0x1f,%ecx
00000696	leal	(%eax,%ecx),%edx
00000699	xorl	%ecx,%edx
0000069b	movl	0x10(%ebp),%esi
0000069e	subl	0x14(%edi),%esi
000006a1	movl	%esi,%ecx
000006a3	sarl	$0x1f,%ecx
000006a6	leal	(%esi,%ecx),%ebx
000006a9	xorl	%ecx,%ebx
000006ab	addl	%ebx,%ebx
000006ad	cmpl	%ebx,%edx
000006af	movss	0x98(%ebp),%xmm2
000006b4	jge	0x00000705
000006b6	movl	0xa4(%ebp),%eax
000006b9	movsd	0xa838-0x621(%eax),%xmm0
000006c1	movsd	%xmm0,(%esp)
000006c6	cvtsi2ss	%esi,%xmm0
000006ca	movl	%eax,%esi
000006cc	mulss	0xa81c-0x621(%esi),%xmm0
000006d4	cvtss2sd	%xmm0,%xmm0
000006d8	movsd	%xmm0,0x08(%esp)
000006de	calll	_pow
000006e3	fstpl	0xc8(%ebp)
000006e6	movss	0x18(%edi),%xmm0
000006eb	cvtss2sd	%xmm0,%xmm0
000006ef	mulsd	0xc8(%ebp),%xmm0
000006f4	cvtsd2ss	%xmm0,%xmm0
000006f8	movss	%xmm0,0x18(%edi)
000006fd	movl	0x10(%ebp),%ecx
00000700	jmp	0x000007ba
00000705	subss	0x8c(%ebp),%xmm2
0000070a	cvtsi2ss	%eax,%xmm0
0000070e	movl	0xa4(%ebp),%esi
00000711	mulss	0xa810-0x621(%esi),%xmm0
00000719	pxor	%xmm1,%xmm1
0000071d	ucomiss	%xmm1,%xmm2
00000720	jne	0x00000724
00000722	jnp	0x0000072b
00000724	movaps	%xmm0,%xmm1
00000727	divss	%xmm2,%xmm1
0000072b	movss	%xmm1,0x38(%edi)
00000730	addss	0x20(%edi),%xmm0
00000735	movss	%xmm0,0x20(%edi)
0000073a	movl	0x10(%ebp),%ecx
0000073d	jmp	0x000007ba
0000073f	movl	0x0c(%ebp),%eax
00000742	subl	0x10(%edi),%eax
00000745	cvtsi2ss	%eax,%xmm1
00000749	movss	0xa810-0x621(%esi),%xmm0
00000751	mulss	%xmm0,%xmm1
00000755	addss	0x20(%edi),%xmm1
0000075a	movss	%xmm1,0x20(%edi)
0000075f	movl	0x10(%ebp),%ecx
00000762	movl	%ecx,%eax
00000764	subl	0x14(%edi),%eax
00000767	cvtsi2ss	%eax,%xmm1
0000076b	mulss	%xmm0,%xmm1
0000076f	movss	0x1c(%edi),%xmm0
00000774	subss	%xmm1,%xmm0
00000778	movss	%xmm0,0x1c(%edi)
0000077d	cvtss2sd	%xmm0,%xmm1
00000781	ucomisd	0xa828-0x621(%esi),%xmm1
00000789	ja	0x000007a3
0000078b	movsd	0xa830-0x621(%esi),%xmm2
00000793	ucomisd	%xmm1,%xmm2
00000797	jbe	0x000007a3
00000799	movss	0xa814-0x621(%esi),%xmm0
000007a1	jmp	0x000007b5
000007a3	ucomisd	0xa828-0x621(%esi),%xmm1
000007ab	jbe	0x000007b5
000007ad	movss	0xa818-0x621(%esi),%xmm0
000007b5	movss	%xmm0,0x1c(%edi)
000007ba	movl	0x0c(%ebp),%eax
000007bd	movl	%eax,0x10(%edi)
000007c0	movl	%ecx,0x14(%edi)
000007c3	movl	0x0c(%edi),%ebx
000007c6	testl	%ebx,%ebx
000007c8	je	0x000008d4
000007ce	movss	0x20(%edi),%xmm0
000007d3	movss	%xmm0,0xa4(%ebp)
000007d8	cvtss2sd	%xmm0,%xmm0
000007dc	movsd	%xmm0,0x98(%ebp)
000007e1	movsd	%xmm0,(%esp)
000007e6	calll	_cos
000007eb	fstpt	0x8c(%ebp)
000007ee	movsd	0x98(%ebp),%xmm0
000007f3	movsd	%xmm0,(%esp)
000007f8	calll	_sin
000007fd	fstpt	0xffffff7c(%ebp)
00000803	movss	0x18(%edi),%xmm0
00000808	movss	%xmm0,0x88(%ebp)
0000080d	movss	0x1c(%edi),%xmm0
00000812	movss	%xmm0,0x98(%ebp)
00000817	cvtss2sd	%xmm0,%xmm0
0000081b	movsd	%xmm0,0xffffff70(%ebp)
00000823	movsd	%xmm0,(%esp)
00000828	calll	_cos
0000082d	movsd	0xffffff70(%ebp),%xmm0
00000835	movsd	%xmm0,(%esp)
0000083a	fldt	0x8c(%ebp)
0000083d	fstpl	0xc0(%ebp)
00000840	fldt	0xffffff7c(%ebp)
00000846	fstpl	0xb8(%ebp)
00000849	fstpl	0xb0(%ebp)
0000084c	calll	_sin
00000851	fstpl	0xa8(%ebp)
00000854	movss	0x88(%ebp),%xmm0
00000859	cvtss2sd	%xmm0,%xmm0
0000085d	movsd	0xb0(%ebp),%xmm1
00000862	mulsd	%xmm0,%xmm1
00000866	cvtsd2ss	%xmm1,%xmm1
0000086a	cvtss2sd	%xmm1,%xmm1
0000086e	movsd	0xb8(%ebp),%xmm2
00000873	mulsd	%xmm1,%xmm2
00000877	cvtsd2ss	%xmm2,%xmm2
0000087b	movss	%xmm2,0xe8(%ebp)
00000880	mulsd	0xa8(%ebp),%xmm0
00000885	cvtsd2ss	%xmm0,%xmm0
00000889	movss	%xmm0,0xec(%ebp)
0000088e	mulsd	0xc0(%ebp),%xmm1
00000893	cvtsd2ss	%xmm1,%xmm0
00000897	movss	%xmm0,0xf0(%ebp)
0000089c	movss	0x98(%ebp),%xmm0
000008a1	xorps	0xa7e0-0x621(%esi),%xmm0
000008a8	movss	%xmm0,0xd8(%ebp)
000008ad	movss	0xa4(%ebp),%xmm0
000008b2	movss	%xmm0,0xdc(%ebp)
000008b7	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0xe0(%ebp)
000008be	movl	%ebx,0x08(%esp)
000008c2	leal	0xe8(%ebp),%eax
000008c5	movl	%eax,0x04(%esp)
000008c9	leal	0xd8(%ebp),%eax
000008cc	movl	%eax,(%esp)
000008cf	calll	AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
000008d4	addl	$0x0000009c,%esp
000008da	popl	%esi
000008db	popl	%edi
000008dc	popl	%ebx
000008dd	popl	%ebp
000008de	ret
000008df	nop
CPotteryWheelManip::UpdateZoom(float):
000008e0	pushl	%ebp
000008e1	movl	%esp,%ebp
000008e3	subl	$0x18,%esp
000008e6	calll	0x000008eb
000008eb	popl	%eax
000008ec	movss	0x0c(%ebp),%xmm0
000008f1	cvtss2sd	%xmm0,%xmm0
000008f5	movsd	%xmm0,0x08(%esp)
000008fb	movsd	0xa840-0x8eb(%eax),%xmm0
00000903	movsd	%xmm0,(%esp)
00000908	calll	_pow
0000090d	fstpl	0xf8(%ebp)
00000910	movl	0x08(%ebp),%eax
00000913	movss	0x18(%eax),%xmm0
00000918	cvtss2sd	%xmm0,%xmm0
0000091c	mulsd	0xf8(%ebp),%xmm0
00000921	cvtsd2ss	%xmm0,%xmm0
00000925	movss	%xmm0,0x18(%eax)
0000092a	addl	$0x18,%esp
0000092d	popl	%ebp
0000092e	ret
0000092f	nop
CPotteryWheelManip::OnMousePressed(ButtonCode_t, int, int):
00000930	pushl	%ebp
00000931	movl	%esp,%ebp
00000933	subl	$0x08,%esp
00000936	calll	0x0000093b
0000093b	popl	%eax
0000093c	movl	0xb773-0x93b(%eax),%eax
00000942	movl	(%eax),%ecx
00000944	movl	(%ecx),%eax
00000946	movl	%ecx,(%esp)
00000949	call	*0x14(%eax)
0000094c	movl	0x08(%ebp),%eax
0000094f	fstps	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
00000952	movl	0x10(%ebp),%ecx
00000955	movl	%ecx,0x10(%eax)
00000958	movl	0x14(%ebp),%ecx
0000095b	movl	%ecx,0x14(%eax)
0000095e	movb	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x3c(%eax)
00000962	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0x38(%eax)
00000969	addl	$0x08,%esp
0000096c	popl	%ebp
0000096d	ret
0000096e	nop
CPotteryWheelManip::OnMouseReleased(ButtonCode_t, int, int):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%esi
00000974	pushl	%eax
00000975	calll	0x0000097a
0000097a	popl	%esi
0000097b	movl	0xb773-0x97a(%esi),%eax
00000981	movl	(%eax),%ecx
00000983	movl	(%ecx),%eax
00000985	movl	%ecx,(%esp)
00000988	call	*0x14(%eax)
0000098b	movl	0x08(%ebp),%eax
0000098e	fstps	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
00000991	cmpl	$0x6d,0x0c(%ebp)
00000995	jne	0x000009b4
00000997	movss	0x38(%eax),%xmm0
0000099c	cvtss2sd	%xmm0,%xmm0
000009a0	andpd	0xa7f0-0x97a(%esi),%xmm0
000009a8	ucomisd	0xa848-0x97a(%esi),%xmm0
000009b0	seta	0x3c(%eax)
000009b4	movl	0x14(%ebp),%ecx
000009b7	movl	0x10(%ebp),%edx
000009ba	movl	%edx,0x10(%eax)
000009bd	movl	%ecx,0x14(%eax)
000009c0	addl	$0x04,%esp
000009c3	popl	%esi
000009c4	popl	%ebp
000009c5	ret
000009c6	nopw	%cs:CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelManip::OnMouseWheeled(int):
000009d0	pushl	%ebp
000009d1	movl	%esp,%ebp
000009d3	pushl	%ebx
000009d4	pushl	%edi
000009d5	pushl	%esi
000009d6	subl	$0x0000008c,%esp
000009dc	calll	0x000009e1
000009e1	popl	%esi
000009e2	movsd	0xa850-0x9e1(%esi),%xmm0
000009ea	movsd	%xmm0,(%esp)
000009ef	cvtsi2ss	0x0c(%ebp),%xmm0
000009f4	mulss	0xa820-0x9e1(%esi),%xmm0
000009fc	cvtss2sd	%xmm0,%xmm0
00000a00	movsd	%xmm0,0x08(%esp)
00000a06	movl	0xb773-0x9e1(%esi),%eax
00000a0c	movl	(%eax),%ebx
00000a0e	movl	(%ebx),%edi
00000a10	calll	_pow
00000a15	fstpt	0xa4(%ebp)
00000a18	movl	%ebx,(%esp)
00000a1b	call	*0x14(%edi)
00000a1e	movl	0x08(%ebp),%eax
00000a21	fstps	CTransformManipulator::CTransformManipulator(matrix3x4_t*)(%eax)
00000a24	fldt	0xa4(%ebp)
00000a27	fstpl	0xd0(%ebp)
00000a2a	movss	0x18(%eax),%xmm0
00000a2f	cvtss2sd	%xmm0,%xmm0
00000a33	mulsd	0xd0(%ebp),%xmm0
00000a38	cvtsd2ss	%xmm0,%xmm0
00000a3c	movss	%xmm0,0x9c(%ebp)
00000a41	movss	%xmm0,0x18(%eax)
00000a46	movl	0x0c(%eax),%edi
00000a49	testl	%edi,%edi
00000a4b	je	0x00000b4c
00000a51	movss	0x1c(%eax),%xmm0
00000a56	movss	%xmm0,0xa4(%ebp)
00000a5b	movss	0x20(%eax),%xmm0
00000a60	movss	%xmm0,0xa0(%ebp)
00000a65	cvtss2sd	%xmm0,%xmm0
00000a69	movsd	%xmm0,CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp)
00000a6e	movsd	%xmm0,(%esp)
00000a73	calll	_cos
00000a78	fstpt	0x90(%ebp)
00000a7b	movsd	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp),%xmm0
00000a80	movsd	%xmm0,(%esp)
00000a85	calll	_sin
00000a8a	fstpt	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp)
00000a8d	movss	0xa4(%ebp),%xmm0
00000a92	cvtss2sd	%xmm0,%xmm0
00000a96	movsd	%xmm0,0xffffff78(%ebp)
00000a9e	movsd	%xmm0,(%esp)
00000aa3	calll	_cos
00000aa8	movsd	0xffffff78(%ebp),%xmm0
00000ab0	movsd	%xmm0,(%esp)
00000ab5	fldt	0x90(%ebp)
00000ab8	fstpl	0xc8(%ebp)
00000abb	fldt	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)(%ebp)
00000abe	fstpl	0xc0(%ebp)
00000ac1	fstpl	0xb8(%ebp)
00000ac4	calll	_sin
00000ac9	fstpl	0xb0(%ebp)
00000acc	movss	0x9c(%ebp),%xmm0
00000ad1	cvtss2sd	%xmm0,%xmm0
00000ad5	movsd	0xb8(%ebp),%xmm1
00000ada	mulsd	%xmm0,%xmm1
00000ade	cvtsd2ss	%xmm1,%xmm1
00000ae2	cvtss2sd	%xmm1,%xmm1
00000ae6	movsd	0xc0(%ebp),%xmm2
00000aeb	mulsd	%xmm1,%xmm2
00000aef	cvtsd2ss	%xmm2,%xmm2
00000af3	movss	%xmm2,0xe8(%ebp)
00000af8	mulsd	0xb0(%ebp),%xmm0
00000afd	cvtsd2ss	%xmm0,%xmm0
00000b01	movss	%xmm0,0xec(%ebp)
00000b06	mulsd	0xc8(%ebp),%xmm1
00000b0b	cvtsd2ss	%xmm1,%xmm0
00000b0f	movss	%xmm0,0xf0(%ebp)
00000b14	movss	0xa4(%ebp),%xmm0
00000b19	xorps	0xa800-0x9e1(%esi),%xmm0
00000b20	movss	%xmm0,0xd8(%ebp)
00000b25	movss	0xa0(%ebp),%xmm0
00000b2a	movss	%xmm0,0xdc(%ebp)
00000b2f	movl	CTransformManipulator::CTransformManipulator(matrix3x4_t*),0xe0(%ebp)
00000b36	movl	%edi,0x08(%esp)
00000b3a	leal	0xe8(%ebp),%eax
00000b3d	movl	%eax,0x04(%esp)
00000b41	leal	0xd8(%ebp),%eax
00000b44	movl	%eax,(%esp)
00000b47	calll	AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
00000b4c	addl	$0x0000008c,%esp
00000b52	popl	%esi
00000b53	popl	%edi
00000b54	popl	%ebx
00000b55	popl	%ebp
00000b56	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(matsyscontrols.o):
(__TEXT,__text) section
vgui::MaterialSystem():
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	vgui::g_pMaterialSystem-0x5(%eax),%eax
0000000c	ret
0000000d	nopl	(%eax)
vgui::MaterialSystemHardwareConfig():
00000010	calll	0x00000015
00000015	popl	%eax
00000016	movl	vgui::g_pMaterialSystemHardwareConfig-0x15(%eax),%eax
0000001c	ret
0000001d	nopl	(%eax)
vgui::MDLCache():
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movl	vgui::g_pMDLCache-0x25(%eax),%eax
0000002c	ret
0000002d	nopl	(%eax)
vgui::MatSystemSurface():
00000030	calll	0x00000035
00000035	popl	%eax
00000036	movl	vgui::g_pMatSystemSurface-0x35(%eax),%eax
0000003c	ret
0000003d	nopl	(%eax)
vgui::StudioRender():
00000040	calll	0x00000045
00000045	popl	%eax
00000046	movl	vgui::g_pStudioRender-0x45(%eax),%eax
0000004c	ret
0000004d	nopl	(%eax)
vgui::VGui_InitMatSysInterfacesList(char const*, void* (**)(char const*, int*), int):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%ebx
00000054	pushl	%edi
00000055	pushl	%esi
00000056	subl	$0x0c,%esp
00000059	calll	0x0000005e
0000005e	popl	%esi
0000005f	movl	vgui::MaterialSystemHardwareConfig()(%ebp),%eax
00000062	movl	%eax,0x08(%esp)
00000066	movl	0x0c(%ebp),%eax
00000069	movl	%eax,0x04(%esp)
0000006d	movl	0x08(%ebp),%eax
00000070	movl	%eax,(%esp)
00000073	calll	vgui::VGui_InitInterfacesList(char const*, void* (**)(char const*, int*), int)
00000078	xorb	%cl,%cl
0000007a	testb	%al,%al
0000007c	je	0x000001dc
00000082	xorl	%edi,%edi
00000084	jmp	0x00000091
00000086	nopw	%cs:vgui::MaterialSystem()(%eax,%eax)
00000090	incl	%edi
00000091	xorl	%ebx,%ebx
00000093	cmpl	vgui::MaterialSystemHardwareConfig()(%ebp),%edi
00000096	movl	vgui::MaterialSystem(),%eax
0000009b	jge	0x000000be
0000009d	movl	0x0c(%ebp),%eax
000000a0	movl	(%eax,%edi,4),%eax
000000a3	testl	%eax,%eax
000000a5	je	0x00000090
000000a7	leal	0x3078-0x5e(%esi),%ecx
000000ad	movl	%ecx,(%esp)
000000b0	movl	vgui::MaterialSystem(),0x04(%esp)
000000b8	call	*%eax
000000ba	testl	%eax,%eax
000000bc	je	0x00000090
000000be	movl	%eax,vgui::g_pMaterialSystem-0x5e(%esi)
000000c4	jmp	0x000000d1
000000c6	nopw	%cs:vgui::MaterialSystem()(%eax,%eax)
000000d0	incl	%ebx
000000d1	xorl	%edi,%edi
000000d3	cmpl	vgui::MaterialSystemHardwareConfig()(%ebp),%ebx
000000d6	movl	vgui::MaterialSystem(),%eax
000000db	jge	0x000000fe
000000dd	movl	0x0c(%ebp),%eax
000000e0	movl	(%eax,%ebx,4),%eax
000000e3	testl	%eax,%eax
000000e5	je	0x000000d0
000000e7	leal	0x308b-0x5e(%esi),%ecx
000000ed	movl	%ecx,(%esp)
000000f0	movl	vgui::MaterialSystem(),0x04(%esp)
000000f8	call	*%eax
000000fa	testl	%eax,%eax
000000fc	je	0x000000d0
000000fe	movl	%eax,vgui::g_pMatSystemSurface-0x5e(%esi)
00000104	jmp	0x00000111
00000106	nopw	%cs:vgui::MaterialSystem()(%eax,%eax)
00000110	incl	%edi
00000111	xorl	%ebx,%ebx
00000113	cmpl	vgui::MaterialSystemHardwareConfig()(%ebp),%edi
00000116	movl	vgui::MaterialSystem(),%eax
0000011b	jge	0x0000013e
0000011d	movl	0x0c(%ebp),%eax
00000120	movl	(%eax,%edi,4),%eax
00000123	testl	%eax,%eax
00000125	je	0x00000110
00000127	leal	0x309f-0x5e(%esi),%ecx
0000012d	movl	%ecx,(%esp)
00000130	movl	vgui::MaterialSystem(),0x04(%esp)
00000138	call	*%eax
0000013a	testl	%eax,%eax
0000013c	je	0x00000110
0000013e	movl	%eax,vgui::g_pMDLCache-0x5e(%esi)
00000144	jmp	0x00000151
00000146	nopw	%cs:vgui::MaterialSystem()(%eax,%eax)
00000150	incl	%ebx
00000151	xorl	%edi,%edi
00000153	cmpl	vgui::MaterialSystemHardwareConfig()(%ebp),%ebx
00000156	movl	vgui::MaterialSystem(),%eax
0000015b	jge	0x0000017e
0000015d	movl	0x0c(%ebp),%eax
00000160	movl	(%eax,%ebx,4),%eax
00000163	testl	%eax,%eax
00000165	je	0x00000150
00000167	leal	0x30ab-0x5e(%esi),%ecx
0000016d	movl	%ecx,(%esp)
00000170	movl	vgui::MaterialSystem(),0x04(%esp)
00000178	call	*%eax
0000017a	testl	%eax,%eax
0000017c	je	0x00000150
0000017e	movl	%eax,vgui::g_pStudioRender-0x5e(%esi)
00000184	jmp	0x00000191
00000186	nopw	%cs:vgui::MaterialSystem()(%eax,%eax)
00000190	incl	%edi
00000191	xorl	%eax,%eax
00000193	cmpl	vgui::MaterialSystemHardwareConfig()(%ebp),%edi
00000196	jge	0x000001b9
00000198	movl	0x0c(%ebp),%eax
0000019b	movl	(%eax,%edi,4),%eax
0000019e	testl	%eax,%eax
000001a0	je	0x00000190
000001a2	leal	0x30bc-0x5e(%esi),%ecx
000001a8	movl	%ecx,(%esp)
000001ab	movl	vgui::MaterialSystem(),0x04(%esp)
000001b3	call	*%eax
000001b5	testl	%eax,%eax
000001b7	je	0x00000190
000001b9	movl	%eax,vgui::g_pMaterialSystemHardwareConfig-0x5e(%esi)
000001bf	xorb	%cl,%cl
000001c1	cmpl	vgui::MaterialSystem(),vgui::g_pMaterialSystem-0x5e(%esi)
000001cb	je	0x000001dc
000001cd	movl	vgui::g_pMatSystemSurface-0x5e(%esi),%edx
000001d3	testl	%edx,%edx
000001d5	je	0x000001dc
000001d7	testl	%eax,%eax
000001d9	setne	%cl
000001dc	movzbl	%cl,%eax
000001df	addl	$0x0c,%esp
000001e2	popl	%esi
000001e3	popl	%edi
000001e4	popl	%ebx
000001e5	popl	%ebp
000001e6	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(mdlpanel.o):
(__TEXT,__text) section
Create_CMDLPanel():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	$0x00000c90,(%esp)
0000000f	calll	operator new(unsigned long)
00000014	movl	%eax,%esi
00000016	movl	%esi,(%esp)
00000019	movl	Create_CMDLPanel(),0x08(%esp)
00000021	movl	Create_CMDLPanel(),0x04(%esp)
00000029	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
0000002e	movl	%esi,%eax
00000030	addl	$0x10,%esp
00000033	popl	%esi
00000034	popl	%edi
00000035	popl	%ebp
00000036	ret
00000037	movl	%eax,%edi
00000039	movl	%esi,(%esp)
0000003c	calll	operator delete(void*)
00000041	movl	%edi,(%esp)
00000044	calll	__Unwind_Resume
00000049	nopl	Create_CMDLPanel()(%eax)
CMDLPanel::CMDLPanel(vgui::Panel*, char const*):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%ebx
00000054	pushl	%edi
00000055	pushl	%esi
00000056	subl	$0x2c,%esp
00000059	calll	0x0000005e
0000005e	popl	%ebx
0000005f	movl	0x10(%ebp),%eax
00000062	movl	%eax,0x0c(%esp)
00000066	movl	0x0c(%ebp),%eax
00000069	movl	%eax,0x08(%esp)
0000006d	leal	VTT for CMDLPanel-0x5e+0x00000004(%ebx),%eax
00000073	movl	%eax,0xe8(%ebp)
00000076	movl	%eax,0x04(%esp)
0000007a	movl	0x08(%ebp),%edi
0000007d	movl	%edi,(%esp)
00000080	calll	CPotteryWheelPanel::CPotteryWheelPanel(vgui::Panel*, char const*)
00000085	leal	vtable for CMDLPanel-0x5e+0x0000000c(%ebx),%eax
0000008b	movl	%eax,(%edi)
0000008d	testb	$0x01,CMDLPanel::ChainToMap()::chained-0x5e(%ebx)
00000094	jne	0x000000cb
00000096	movb	$0x01,CMDLPanel::ChainToMap()::chained-0x5e(%ebx)
0000009d	leal	0x79568-0x5e(%ebx),%eax
000000a3	movl	%eax,(%esp)
000000a6	calll	vgui::FindOrAddPanelMessageMap(char const*)
000000ab	movl	%eax,%esi
000000ad	leal	CMDLPanel::GetPanelClassName()-0x5e(%ebx),%eax
000000b3	movl	%eax,0x1c(%esi)
000000b6	testl	%esi,%esi
000000b8	je	0x000000cb
000000ba	leal	0x796b2-0x5e(%ebx),%eax
000000c0	movl	%eax,(%esp)
000000c3	calll	vgui::FindOrAddPanelMessageMap(char const*)
000000c8	movl	%eax,0x18(%esi)
000000cb	testb	$0x01,CMDLPanel::ChainToAnimationMap()::chained-0x5e(%ebx)
000000d2	jne	0x00000109
000000d4	movb	$0x01,CMDLPanel::ChainToAnimationMap()::chained-0x5e(%ebx)
000000db	leal	0x79568-0x5e(%ebx),%eax
000000e1	movl	%eax,(%esp)
000000e4	calll	FindOrAddPanelAnimationMap(char const*)
000000e9	movl	%eax,%esi
000000eb	leal	CMDLPanel::GetPanelClassName()-0x5e(%ebx),%eax
000000f1	movl	%eax,0x18(%esi)
000000f4	testl	%esi,%esi
000000f6	je	0x00000109
000000f8	leal	0x796b2-0x5e(%ebx),%eax
000000fe	movl	%eax,(%esp)
00000101	calll	FindOrAddPanelAnimationMap(char const*)
00000106	movl	%eax,0x14(%esi)
00000109	testb	$0x01,CMDLPanel::KB_ChainToMap()::chained-0x5e(%ebx)
00000110	jne	0x00000147
00000112	movb	$0x01,CMDLPanel::KB_ChainToMap()::chained-0x5e(%ebx)
00000119	leal	0x79568-0x5e(%ebx),%eax
0000011f	movl	%eax,(%esp)
00000122	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000127	movl	%eax,%esi
00000129	leal	CMDLPanel::GetPanelClassName()-0x5e(%ebx),%eax
0000012f	movl	%eax,0x44(%esi)
00000132	testl	%esi,%esi
00000134	je	0x00000147
00000136	leal	0x796b2-0x5e(%ebx),%eax
0000013c	movl	%eax,(%esp)
0000013f	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000144	movl	%eax,0x18(%esi)
00000147	leal	0x000004dc(%edi),%eax
0000014d	movl	%eax,0xe4(%ebp)
00000150	movl	%eax,(%esp)
00000153	calll	CMDL::CMDL()
00000158	movl	Create_CMDLPanel(),0x00000b54(%edi)
00000162	movl	Create_CMDLPanel(),0x00000b4c(%edi)
0000016c	movl	Create_CMDLPanel(),0x00000b50(%edi)
00000176	movl	Create_CMDLPanel(),0x00000b44(%edi)
00000180	movl	Create_CMDLPanel(),0x00000b48(%edi)
0000018a	leal	0x00000c24(%edi),%ecx
00000190	movl	%ecx,0xf0(%ebp)
00000193	leal	0x00000b44(%edi),%eax
00000199	movl	%eax,0xe0(%ebp)
0000019c	movl	%ecx,(%esp)
0000019f	calll	CTextureReference::CTextureReference()
000001a4	leal	0x00000c28(%edi),%eax
000001aa	movl	%eax,0xec(%ebp)
000001ad	movl	%eax,(%esp)
000001b0	calll	CTextureReference::CTextureReference()
000001b5	movl	(%edi),%eax
000001b7	movl	0x00000088(%eax),%eax
000001bd	movl	%edi,(%esp)
000001c0	movl	$0x00000001,0x04(%esp)
000001c8	call	*%eax
000001ca	movl	0x80d56-0x5e(%ebx),%eax
000001d0	movl	(%eax),%edi
000001d2	movl	(%edi),%eax
000001d4	movl	0x48(%eax),%esi
000001d7	movl	0x08(%ebp),%ecx
000001da	movl	(%ecx),%eax
000001dc	movl	(%eax),%eax
000001de	movl	%ecx,(%esp)
000001e1	call	*%eax
000001e3	movl	%eax,0x04(%esp)
000001e7	movl	%edi,(%esp)
000001ea	movl	Create_CMDLPanel(),0x08(%esp)
000001f2	call	*%esi
000001f4	calll	vgui::MaterialSystem()
000001f9	movl	(%eax),%ecx
000001fb	movl	0x0000013c(%ecx),%ecx
00000201	leal	0x79572-0x5e(%ebx),%edx
00000207	movl	%edx,0x04(%esp)
0000020b	movl	%eax,(%esp)
0000020e	movl	Create_CMDLPanel(),0x10(%esp)
00000216	movl	$0x00000001,0x0c(%esp)
0000021e	movl	Create_CMDLPanel(),0x08(%esp)
00000226	call	*%ecx
00000228	movl	%eax,0x04(%esp)
0000022c	movl	0xf0(%ebp),%eax
0000022f	movl	%eax,(%esp)
00000232	calll	CTextureReference::Init(ITexture*)
00000237	calll	vgui::MaterialSystem()
0000023c	movl	(%eax),%ecx
0000023e	movl	0x0000013c(%ecx),%ecx
00000244	leal	0x79581-0x5e(%ebx),%edx
0000024a	movl	%edx,0x04(%esp)
0000024e	movl	%eax,(%esp)
00000251	movl	Create_CMDLPanel(),0x10(%esp)
00000259	movl	$0x00000001,0x0c(%esp)
00000261	movl	Create_CMDLPanel(),0x08(%esp)
00000269	call	*%ecx
0000026b	movl	%eax,0x04(%esp)
0000026f	movl	0xec(%ebp),%eax
00000272	movl	%eax,(%esp)
00000275	calll	CTextureReference::Init(ITexture*)
0000027a	movl	0x08(%ebp),%eax
0000027d	leal	0x00000b10(%eax),%eax
00000283	movl	%eax,(%esp)
00000286	calll	SetIdentityMatrix(matrix3x4_t&)
0000028b	movl	0x08(%ebp),%ecx
0000028e	movb	0x00000c2c(%ecx),%al
00000294	andb	$0xe0,%al
00000296	orb	$0x10,%al
00000298	movb	%al,0x00000c2c(%ecx)
0000029e	movl	Create_CMDLPanel(),0x00000b58(%ecx)
000002a8	movl	$0xffffffff,0x00000bdc(%ecx)
000002b2	movl	$0xbc23d70a,0x00000be0(%ecx)
000002bc	addl	$0x2c,%esp
000002bf	popl	%esi
000002c0	popl	%edi
000002c1	popl	%ebx
000002c2	popl	%ebp
000002c3	ret
000002c4	movl	%eax,%esi
000002c6	jmp	0x00000301
000002c8	movl	%eax,%esi
000002ca	jmp	0x000002eb
000002cc	movl	%eax,%esi
000002ce	jmp	0x000002e0
000002d0	movl	%eax,%esi
000002d2	movl	0xec(%ebp),%eax
000002d5	movl	%eax,(%esp)
000002d8	calll	CTextureReference::~CTextureReference()
000002dd	movl	0x08(%ebp),%edi
000002e0	movl	0xf0(%ebp),%eax
000002e3	movl	%eax,(%esp)
000002e6	calll	CTextureReference::~CTextureReference()
000002eb	movl	0xe0(%ebp),%eax
000002ee	movl	%eax,(%esp)
000002f1	calll	CUtlVector<CMDLPanel::MDLData_t, CUtlMemory<CMDLPanel::MDLData_t, int> >::~CUtlVector()
000002f6	movl	0xe4(%ebp),%eax
000002f9	movl	%eax,(%esp)
000002fc	calll	CMDL::~CMDL()
00000301	movl	0xe8(%ebp),%eax
00000304	movl	%eax,0x04(%esp)
00000308	movl	%edi,(%esp)
0000030b	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000310	movl	%esi,(%esp)
00000313	calll	__Unwind_Resume
00000318	calll	std::terminate()
0000031d	nopl	(%eax)
CMDLPanel::ResetAnimationEventState(MDLAnimEventState_t*):
00000320	movl	0x08(%esp),%eax
00000324	movl	$0xffffffff,(%eax)
0000032a	movl	$0xbc23d70a,0x04(%eax)
00000331	ret
00000332	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::CMDLPanel(vgui::Panel*, char const*):
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%edi
00000345	pushl	%esi
00000346	subl	$0x2c,%esp
00000349	calll	0x0000034e
0000034e	popl	%ebx
0000034f	movl	0x14(%ebp),%eax
00000352	movl	%eax,0x0c(%esp)
00000356	movl	0x10(%ebp),%eax
00000359	movl	%eax,0x08(%esp)
0000035d	movl	0x0c(%ebp),%esi
00000360	leal	0x04(%esi),%eax
00000363	movl	%eax,0xe8(%ebp)
00000366	movl	%eax,0x04(%esp)
0000036a	movl	0x08(%ebp),%edi
0000036d	movl	%edi,(%esp)
00000370	calll	CPotteryWheelPanel::CPotteryWheelPanel(vgui::Panel*, char const*)
00000375	movl	(%esi),%eax
00000377	movl	%eax,(%edi)
00000379	testb	$0x01,CMDLPanel::ChainToMap()::chained-0x34e(%ebx)
00000380	jne	0x000003b7
00000382	movb	$0x01,CMDLPanel::ChainToMap()::chained-0x34e(%ebx)
00000389	leal	0x79568-0x34e(%ebx),%eax
0000038f	movl	%eax,(%esp)
00000392	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000397	movl	%eax,%esi
00000399	leal	CMDLPanel::GetPanelClassName()-0x34e(%ebx),%eax
0000039f	movl	%eax,0x1c(%esi)
000003a2	testl	%esi,%esi
000003a4	je	0x000003b7
000003a6	leal	0x796b2-0x34e(%ebx),%eax
000003ac	movl	%eax,(%esp)
000003af	calll	vgui::FindOrAddPanelMessageMap(char const*)
000003b4	movl	%eax,0x18(%esi)
000003b7	testb	$0x01,CMDLPanel::ChainToAnimationMap()::chained-0x34e(%ebx)
000003be	jne	0x000003f5
000003c0	movb	$0x01,CMDLPanel::ChainToAnimationMap()::chained-0x34e(%ebx)
000003c7	leal	0x79568-0x34e(%ebx),%eax
000003cd	movl	%eax,(%esp)
000003d0	calll	FindOrAddPanelAnimationMap(char const*)
000003d5	movl	%eax,%esi
000003d7	leal	CMDLPanel::GetPanelClassName()-0x34e(%ebx),%eax
000003dd	movl	%eax,0x18(%esi)
000003e0	testl	%esi,%esi
000003e2	je	0x000003f5
000003e4	leal	0x796b2-0x34e(%ebx),%eax
000003ea	movl	%eax,(%esp)
000003ed	calll	FindOrAddPanelAnimationMap(char const*)
000003f2	movl	%eax,0x14(%esi)
000003f5	testb	$0x01,CMDLPanel::KB_ChainToMap()::chained-0x34e(%ebx)
000003fc	jne	0x00000433
000003fe	movb	$0x01,CMDLPanel::KB_ChainToMap()::chained-0x34e(%ebx)
00000405	leal	0x79568-0x34e(%ebx),%eax
0000040b	movl	%eax,(%esp)
0000040e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000413	movl	%eax,%esi
00000415	leal	CMDLPanel::GetPanelClassName()-0x34e(%ebx),%eax
0000041b	movl	%eax,0x44(%esi)
0000041e	testl	%esi,%esi
00000420	je	0x00000433
00000422	leal	0x796b2-0x34e(%ebx),%eax
00000428	movl	%eax,(%esp)
0000042b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000430	movl	%eax,0x18(%esi)
00000433	leal	0x000004dc(%edi),%eax
00000439	movl	%eax,0xe4(%ebp)
0000043c	movl	%eax,(%esp)
0000043f	calll	CMDL::CMDL()
00000444	movl	Create_CMDLPanel(),0x00000b54(%edi)
0000044e	movl	Create_CMDLPanel(),0x00000b4c(%edi)
00000458	movl	Create_CMDLPanel(),0x00000b50(%edi)
00000462	movl	Create_CMDLPanel(),0x00000b44(%edi)
0000046c	movl	Create_CMDLPanel(),0x00000b48(%edi)
00000476	leal	0x00000c24(%edi),%ecx
0000047c	movl	%ecx,0xf0(%ebp)
0000047f	leal	0x00000b44(%edi),%eax
00000485	movl	%eax,0xe0(%ebp)
00000488	movl	%ecx,(%esp)
0000048b	calll	CTextureReference::CTextureReference()
00000490	leal	0x00000c28(%edi),%eax
00000496	movl	%eax,0xec(%ebp)
00000499	movl	%eax,(%esp)
0000049c	calll	CTextureReference::CTextureReference()
000004a1	movl	(%edi),%eax
000004a3	movl	0x00000088(%eax),%eax
000004a9	movl	%edi,(%esp)
000004ac	movl	$0x00000001,0x04(%esp)
000004b4	call	*%eax
000004b6	movl	0x80d56-0x34e(%ebx),%eax
000004bc	movl	(%eax),%edi
000004be	movl	(%edi),%eax
000004c0	movl	0x48(%eax),%esi
000004c3	movl	0x08(%ebp),%ecx
000004c6	movl	(%ecx),%eax
000004c8	movl	(%eax),%eax
000004ca	movl	%ecx,(%esp)
000004cd	call	*%eax
000004cf	movl	%eax,0x04(%esp)
000004d3	movl	%edi,(%esp)
000004d6	movl	Create_CMDLPanel(),0x08(%esp)
000004de	call	*%esi
000004e0	calll	vgui::MaterialSystem()
000004e5	movl	(%eax),%ecx
000004e7	movl	0x0000013c(%ecx),%ecx
000004ed	leal	0x79572-0x34e(%ebx),%edx
000004f3	movl	%edx,0x04(%esp)
000004f7	movl	%eax,(%esp)
000004fa	movl	Create_CMDLPanel(),0x10(%esp)
00000502	movl	$0x00000001,0x0c(%esp)
0000050a	movl	Create_CMDLPanel(),0x08(%esp)
00000512	call	*%ecx
00000514	movl	%eax,0x04(%esp)
00000518	movl	0xf0(%ebp),%eax
0000051b	movl	%eax,(%esp)
0000051e	calll	CTextureReference::Init(ITexture*)
00000523	calll	vgui::MaterialSystem()
00000528	movl	(%eax),%ecx
0000052a	movl	0x0000013c(%ecx),%ecx
00000530	leal	0x79581-0x34e(%ebx),%edx
00000536	movl	%edx,0x04(%esp)
0000053a	movl	%eax,(%esp)
0000053d	movl	Create_CMDLPanel(),0x10(%esp)
00000545	movl	$0x00000001,0x0c(%esp)
0000054d	movl	Create_CMDLPanel(),0x08(%esp)
00000555	call	*%ecx
00000557	movl	%eax,0x04(%esp)
0000055b	movl	0xec(%ebp),%eax
0000055e	movl	%eax,(%esp)
00000561	calll	CTextureReference::Init(ITexture*)
00000566	movl	0x08(%ebp),%eax
00000569	leal	0x00000b10(%eax),%eax
0000056f	movl	%eax,(%esp)
00000572	calll	SetIdentityMatrix(matrix3x4_t&)
00000577	movl	0x08(%ebp),%ecx
0000057a	movb	0x00000c2c(%ecx),%al
00000580	andb	$0xe0,%al
00000582	orb	$0x10,%al
00000584	movb	%al,0x00000c2c(%ecx)
0000058a	movl	Create_CMDLPanel(),0x00000b58(%ecx)
00000594	movl	$0xffffffff,0x00000bdc(%ecx)
0000059e	movl	$0xbc23d70a,0x00000be0(%ecx)
000005a8	addl	$0x2c,%esp
000005ab	popl	%esi
000005ac	popl	%edi
000005ad	popl	%ebx
000005ae	popl	%ebp
000005af	ret
000005b0	movl	%eax,%esi
000005b2	jmp	0x000005ed
000005b4	movl	%eax,%esi
000005b6	jmp	0x000005d7
000005b8	movl	%eax,%esi
000005ba	jmp	0x000005cc
000005bc	movl	%eax,%esi
000005be	movl	0xec(%ebp),%eax
000005c1	movl	%eax,(%esp)
000005c4	calll	CTextureReference::~CTextureReference()
000005c9	movl	0x08(%ebp),%edi
000005cc	movl	0xf0(%ebp),%eax
000005cf	movl	%eax,(%esp)
000005d2	calll	CTextureReference::~CTextureReference()
000005d7	movl	0xe0(%ebp),%eax
000005da	movl	%eax,(%esp)
000005dd	calll	CUtlVector<CMDLPanel::MDLData_t, CUtlMemory<CMDLPanel::MDLData_t, int> >::~CUtlVector()
000005e2	movl	0xe4(%ebp),%eax
000005e5	movl	%eax,(%esp)
000005e8	calll	CMDL::~CMDL()
000005ed	movl	0xe8(%ebp),%eax
000005f0	movl	%eax,0x04(%esp)
000005f4	movl	%edi,(%esp)
000005f7	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
000005fc	movl	%esi,(%esp)
000005ff	calll	__Unwind_Resume
00000604	calll	std::terminate()
00000609	nopl	Create_CMDLPanel()(%eax)
CMDLPanel::~CMDLPanel():
00000610	pushl	%ebp
00000611	movl	%esp,%ebp
00000613	pushl	%edi
00000614	pushl	%esi
00000615	subl	$0x10,%esp
00000618	calll	0x0000061d
0000061d	popl	%eax
0000061e	movl	0x08(%ebp),%edi
00000621	leal	VTT for CMDLPanel-0x61d(%eax),%eax
00000627	movl	%eax,0x04(%esp)
0000062b	movl	%edi,(%esp)
0000062e	calll	CMDLPanel::~CMDLPanel()
00000633	addl	$0x10,%esp
00000636	popl	%esi
00000637	popl	%edi
00000638	popl	%ebp
00000639	jmp	operator delete(void*)
0000063e	movl	%eax,%esi
00000640	movl	%edi,(%esp)
00000643	calll	operator delete(void*)
00000648	movl	%esi,(%esp)
0000064b	calll	__Unwind_Resume
CMDLPanel::~CMDLPanel():
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	subl	$0x08,%esp
00000656	calll	0x0000065b
0000065b	popl	%eax
0000065c	leal	VTT for CMDLPanel-0x65b(%eax),%eax
00000662	movl	%eax,0x04(%esp)
00000666	movl	0x08(%ebp),%eax
00000669	movl	%eax,(%esp)
0000066c	calll	CMDLPanel::~CMDLPanel()
00000671	addl	$0x08,%esp
00000674	popl	%ebp
00000675	ret
00000676	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::~CMDLPanel():
00000680	pushl	%ebp
00000681	movl	%esp,%ebp
00000683	pushl	%ebx
00000684	pushl	%edi
00000685	pushl	%esi
00000686	subl	$0x0c,%esp
00000689	movl	0x0c(%ebp),%eax
0000068c	movl	(%eax),%eax
0000068e	movl	0x08(%ebp),%ecx
00000691	movl	%eax,(%ecx)
00000693	movl	0x00000b50(%ecx),%esi
00000699	leal	0x00000b44(%ecx),%edi
0000069f	testl	%esi,%esi
000006a1	jle	0x000006c7
000006a3	imull	$0x00000668,%esi,%ebx
000006a9	addl	$0xfffff998,%ebx
000006af	nop
000006b0	movl	(%edi),%eax
000006b2	addl	%ebx,%eax
000006b4	movl	%eax,(%esp)
000006b7	calll	CMDL::~CMDL()
000006bc	decl	%esi
000006bd	addl	$0xfffff998,%ebx
000006c3	testl	%esi,%esi
000006c5	jg	0x000006b0
000006c7	movl	0x08(%ebp),%esi
000006ca	movl	Create_CMDLPanel(),0x00000b50(%esi)
000006d4	movl	0x00000b44(%esi),%eax
000006da	cmpl	Create_CMDLPanel(),0x00000b4c(%esi)
000006e1	js	0x00000701
000006e3	testl	%eax,%eax
000006e5	je	0x000006f5
000006e7	movl	%eax,(%esp)
000006ea	calll	_free
000006ef	movl	Create_CMDLPanel(),(%edi)
000006f5	movl	Create_CMDLPanel(),0x00000b48(%esi)
000006ff	xorl	%eax,%eax
00000701	movl	%eax,0x00000b54(%esi)
00000707	leal	0x00000c24(%esi),%eax
0000070d	movl	%eax,0xf0(%ebp)
00000710	movl	%esi,%ebx
00000712	movl	%eax,(%esp)
00000715	movl	Create_CMDLPanel(),0x04(%esp)
0000071d	calll	CTextureReference::Shutdown(bool)
00000722	leal	0x00000c28(%ebx),%esi
00000728	movl	%esi,(%esp)
0000072b	movl	Create_CMDLPanel(),0x04(%esp)
00000733	calll	CTextureReference::Shutdown(bool)
00000738	movl	%esi,(%esp)
0000073b	calll	CTextureReference::~CTextureReference()
00000740	movl	0xf0(%ebp),%eax
00000743	movl	%eax,(%esp)
00000746	calll	CTextureReference::~CTextureReference()
0000074b	movl	%edi,(%esp)
0000074e	calll	CUtlVector<CMDLPanel::MDLData_t, CUtlMemory<CMDLPanel::MDLData_t, int> >::~CUtlVector()
00000753	leal	0x000004dc(%ebx),%eax
00000759	movl	%eax,(%esp)
0000075c	calll	CMDL::~CMDL()
00000761	movl	0x0c(%ebp),%eax
00000764	addl	$0x04,%eax
00000767	movl	%eax,0x04(%esp)
0000076b	movl	%ebx,(%esp)
0000076e	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000773	addl	$0x0c,%esp
00000776	popl	%esi
00000777	popl	%edi
00000778	popl	%ebx
00000779	popl	%ebp
0000077a	ret
0000077b	movl	%eax,%esi
0000077d	movl	0x08(%ebp),%ebx
00000780	jmp	0x00000784
00000782	movl	%eax,%esi
00000784	leal	0x00000c28(%ebx),%eax
0000078a	movl	%eax,(%esp)
0000078d	calll	CTextureReference::~CTextureReference()
00000792	leal	0x00000c24(%ebx),%eax
00000798	jmp	0x0000079f
0000079a	movl	%eax,%esi
0000079c	movl	0xf0(%ebp),%eax
0000079f	movl	%eax,(%esp)
000007a2	calll	CTextureReference::~CTextureReference()
000007a7	jmp	0x000007ab
000007a9	movl	%eax,%esi
000007ab	movl	%edi,(%esp)
000007ae	calll	CUtlVector<CMDLPanel::MDLData_t, CUtlMemory<CMDLPanel::MDLData_t, int> >::~CUtlVector()
000007b3	jmp	0x000007bb
000007b5	movl	%eax,%esi
000007b7	jmp	0x000007c9
000007b9	movl	%eax,%esi
000007bb	leal	0x000004dc(%ebx),%eax
000007c1	movl	%eax,(%esp)
000007c4	calll	CMDL::~CMDL()
000007c9	movl	0x0c(%ebp),%eax
000007cc	addl	$0x04,%eax
000007cf	movl	%eax,0x04(%esp)
000007d3	movl	%ebx,(%esp)
000007d6	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
000007db	movl	%esi,(%esp)
000007de	calll	__Unwind_Resume
000007e3	calll	std::terminate()
000007e8	nopl	Create_CMDLPanel()(%eax,%eax)
CMDLPanel::ApplySchemeSettings(vgui::IScheme*):
000007f0	pushl	%ebp
000007f1	movl	%esp,%ebp
000007f3	pushl	%ebx
000007f4	pushl	%edi
000007f5	pushl	%esi
000007f6	subl	$0x1c,%esp
000007f9	calll	0x000007fe
000007fe	popl	%eax
000007ff	movl	%eax,0xec(%ebp)
00000802	movl	0x0c(%ebp),%ebx
00000805	movl	%ebx,0x04(%esp)
00000809	movl	0x08(%ebp),%esi
0000080c	movl	%esi,(%esp)
0000080f	calll	vgui::Panel::ApplySchemeSettings(vgui::IScheme*)
00000814	movl	(%esi),%eax
00000816	movl	%esi,(%esp)
00000819	call	*0x000000f4(%eax)
0000081f	movl	%eax,0xf0(%ebp)
00000822	leal	0xf0(%ebp),%eax
00000825	movl	%eax,0x04(%esp)
00000829	movl	%esi,(%esp)
0000082c	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00000831	movl	(%esi),%eax
00000833	movl	0x00000114(%eax),%edi
00000839	movl	(%ebx),%eax
0000083b	movl	0xec(%ebp),%ecx
0000083e	leal	0x79594-0x7fe(%ecx),%ecx
00000844	movl	%ecx,0x04(%esp)
00000848	movl	%ebx,(%esp)
0000084b	call	*0x0c(%eax)
0000084e	movl	%eax,0x04(%esp)
00000852	movl	%esi,(%esp)
00000855	call	*%edi
00000857	addl	$0x1c,%esp
0000085a	popl	%esi
0000085b	popl	%edi
0000085c	popl	%ebx
0000085d	popl	%ebp
0000085e	ret
0000085f	nop
CMDLPanel::SetCollsionModel(bool):
00000860	movl	0x04(%esp),%eax
00000864	movb	0x00000c2c(%eax),%cl
0000086a	andb	$0xfe,%cl
0000086d	movb	0x08(%esp),%dl
00000871	orb	%cl,%dl
00000873	movb	%dl,0x00000c2c(%eax)
00000879	ret
0000087a	nopw	Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetGroundGrid(bool):
00000880	movb	0x08(%esp),%al
00000884	addb	%al,%al
00000886	movl	0x04(%esp),%ecx
0000088a	movb	0x00000c2c(%ecx),%dl
00000890	andb	$0xfd,%dl
00000893	orb	%al,%dl
00000895	movb	%dl,0x00000c2c(%ecx)
0000089b	ret
0000089c	nopl	Create_CMDLPanel()(%eax)
CMDLPanel::SetWireFrame(bool):
000008a0	movb	0x08(%esp),%al
000008a4	shlb	$0x03,%al
000008a7	movl	0x04(%esp),%ecx
000008ab	movb	0x00000c2c(%ecx),%dl
000008b1	andb	$0xf7,%dl
000008b4	orb	%al,%dl
000008b6	movb	%dl,0x00000c2c(%ecx)
000008bc	ret
000008bd	nopl	(%eax)
CMDLPanel::SetLockView(bool):
000008c0	movb	0x08(%esp),%al
000008c4	shlb	$0x02,%al
000008c7	movl	0x04(%esp),%ecx
000008cb	movb	0x00000c2c(%ecx),%dl
000008d1	andb	$0xfb,%dl
000008d4	orb	%al,%dl
000008d6	movb	%dl,0x00000c2c(%ecx)
000008dc	ret
000008dd	nopl	(%eax)
CMDLPanel::SetLookAtCamera(bool):
000008e0	movb	0x08(%esp),%al
000008e4	shlb	$0x04,%al
000008e7	movl	0x04(%esp),%ecx
000008eb	movb	0x00000c2c(%ecx),%dl
000008f1	andb	$0xef,%dl
000008f4	orb	%al,%dl
000008f6	movb	%dl,0x00000c2c(%ecx)
000008fc	ret
000008fd	nopl	(%eax)
CMDLPanel::SetIgnoreDoubleClick(bool):
00000900	movb	0x08(%esp),%al
00000904	shlb	$0x05,%al
00000907	movl	0x04(%esp),%ecx
0000090b	movb	0x00000c2c(%ecx),%dl
00000911	andb	$0xdf,%dl
00000914	orb	%al,%dl
00000916	movb	%dl,0x00000c2c(%ecx)
0000091c	ret
0000091d	nopl	(%eax)
CMDLPanel::SetMDL(unsigned short, void*):
00000920	pushl	%ebp
00000921	movl	%esp,%ebp
00000923	pushl	%edi
00000924	pushl	%esi
00000925	subl	$0x30,%esp
00000928	movzwl	0x0c(%ebp),%edi
0000092c	movl	%edi,0x04(%esp)
00000930	movl	0x08(%ebp),%esi
00000933	leal	0x000004dc(%esi),%eax
00000939	movl	%eax,(%esp)
0000093c	calll	CMDL::SetMDL(unsigned short)
00000941	movl	0x10(%ebp),%eax
00000944	movl	%eax,0x00000b0c(%esi)
0000094a	movl	0x000004ec(%esi),%eax
00000950	movl	%eax,0x0c(%esp)
00000954	movl	%edi,0x08(%esp)
00000958	leal	0xd8(%ebp),%eax
0000095b	movl	%eax,0x04(%esp)
0000095f	leal	0xe8(%ebp),%eax
00000962	movl	%eax,(%esp)
00000965	calll	GetMDLBoundingBox(Vector*, Vector*, unsigned short, int)
0000096a	movb	Create_CMDLPanel(),0x00000b08(%esi)
00000971	movss	0xe0(%ebp),%xmm0
00000976	movl	$0x42c80000,0x00000afc(%esi)
00000980	movl	Create_CMDLPanel(),0x00000b00(%esi)
0000098a	movss	%xmm0,0x00000b04(%esi)
00000992	movl	%esi,(%esp)
00000995	movl	Create_CMDLPanel(),0x08(%esp)
0000099d	movl	Create_CMDLPanel(),0x04(%esp)
000009a5	calll	CMDLPanel::SetPoseParameters(float const*, int)
000009aa	leal	0x00000b58(%esi),%eax
000009b0	movl	%eax,(%esp)
000009b3	movl	$0x00000084,0x08(%esp)
000009bb	movl	Create_CMDLPanel(),0x04(%esp)
000009c3	calll	_memset
000009c8	movl	$0xffffffff,0x00000bdc(%esi)
000009d2	movl	$0xbc23d70a,0x00000be0(%esi)
000009dc	addl	$0x30,%esp
000009df	popl	%esi
000009e0	popl	%edi
000009e1	popl	%ebp
000009e2	ret
000009e3	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetPoseParameters(float const*, int):
000009f0	pushl	%ebp
000009f1	movl	%esp,%ebp
000009f3	pushl	%ebx
000009f4	pushl	%edi
000009f5	pushl	%esi
000009f6	subl	$0x000000ac,%esp
000009fc	calll	0x00000a01
00000a01	popl	%edi
00000a02	movl	0x0c(%ebp),%eax
00000a05	movl	0x08(%ebp),%esi
00000a08	testl	%eax,%eax
00000a0a	je	0x00000a46
00000a0c	movl	0x10(%ebp),%edx
00000a0f	testl	%edx,%edx
00000a11	jle	0x00000acb
00000a17	notl	%edx
00000a19	cmpl	$0xe7,%edx
00000a1c	movl	$0xffffffe7,%ecx
00000a21	cmovgl	%edx,%ecx
00000a24	notl	%ecx
00000a26	addl	$0x00000c30,%esi
00000a2c	nopl	Create_CMDLPanel()(%eax)
00000a30	movss	(%eax),%xmm0
00000a34	movss	%xmm0,(%esi)
00000a38	addl	$0x04,%eax
00000a3b	addl	$0x04,%esi
00000a3e	decl	%ecx
00000a3f	jne	0x00000a30
00000a41	jmp	0x00000acb
00000a46	leal	0x000004dc(%esi),%ebx
00000a4c	movl	%ebx,(%esp)
00000a4f	calll	CMDL::GetMDL() const
00000a54	cmpw	$0xff,%ax
00000a58	je	0x00000acb
00000a5a	movl	0x80d46-0xa01(%edi),%eax
00000a60	movl	%eax,0xffffff5c(%ebp)
00000a66	movl	(%eax),%edi
00000a68	movl	(%edi),%eax
00000a6a	movl	0x28(%eax),%eax
00000a6d	movl	%eax,0xffffff58(%ebp)
00000a73	movl	%ebx,(%esp)
00000a76	calll	CMDL::GetMDL() const
00000a7b	movzwl	%ax,%eax
00000a7e	movl	%eax,0x04(%esp)
00000a82	movl	%edi,(%esp)
00000a85	call	*0xffffff58(%ebp)
00000a8b	movl	0xffffff5c(%ebp),%ecx
00000a91	movl	(%ecx),%ecx
00000a93	movl	%ecx,0x08(%esp)
00000a97	movl	%eax,0x04(%esp)
00000a9b	leal	0xffffff60(%ebp),%edi
00000aa1	movl	%edi,(%esp)
00000aa4	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
00000aa9	addl	$0x00000c30,%esi
00000aaf	movl	%esi,0x04(%esp)
00000ab3	movl	%edi,(%esp)
00000ab6	movl	$0x00000018,0x08(%esp)
00000abe	calll	Studio_CalcDefaultPoseParameters(CStudioHdr const*, float*, int)
00000ac3	movl	%edi,(%esp)
00000ac6	calll	CStudioHdr::~CStudioHdr()
00000acb	addl	$0x000000ac,%esp
00000ad1	popl	%esi
00000ad2	popl	%edi
00000ad3	popl	%ebx
00000ad4	popl	%ebp
00000ad5	ret
00000ad6	movl	%eax,%esi
00000ad8	movl	%edi,(%esp)
00000adb	calll	CStudioHdr::~CStudioHdr()
00000ae0	movl	%esi,(%esp)
00000ae3	calll	__Unwind_Resume
00000ae8	calll	std::terminate()
00000aed	nopl	(%eax)
CMDLPanel::SetSequenceLayers(MDLSquenceLayer_t const*, int):
00000af0	pushl	%ebp
00000af1	movl	%esp,%ebp
00000af3	pushl	%edi
00000af4	pushl	%esi
00000af5	subl	$0x10,%esp
00000af8	movl	0x0c(%ebp),%ecx
00000afb	movl	0x08(%ebp),%eax
00000afe	testl	%ecx,%ecx
00000b00	je	0x00000b6a
00000b02	movl	0x10(%ebp),%esi
00000b05	cmpl	$0x08,%esi
00000b08	movl	$0x00000008,%edx
00000b0d	cmovlel	%esi,%edx
00000b10	movl	%edx,0x00000b58(%eax)
00000b16	testl	%edx,%edx
00000b18	jle	0x00000b87
00000b1a	leal	0x00000b5c(%eax),%edx
00000b20	xorl	%esi,%esi
00000b22	movl	%esi,%edi
00000b24	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
00000b30	movsd	(%ecx,%esi),%xmm0
00000b35	movsd	0x08(%ecx,%esi),%xmm1
00000b3b	movsd	%xmm1,0x08(%edx,%esi)
00000b41	movsd	%xmm0,(%edx,%esi)
00000b46	movl	$0xffffffff,0x00000be4(%eax,%edi,8)
00000b51	movl	$0xbc23d70a,0x00000be8(%eax,%edi,8)
00000b5c	addl	$0x10,%esi
00000b5f	incl	%edi
00000b60	cmpl	0x00000b58(%eax),%edi
00000b66	jl	0x00000b30
00000b68	jmp	0x00000b87
00000b6a	addl	$0x00000b58,%eax
00000b6f	movl	%eax,(%esp)
00000b72	movl	$0x00000084,0x08(%esp)
00000b7a	movl	Create_CMDLPanel(),0x04(%esp)
00000b82	calll	_memset
00000b87	addl	$0x10,%esp
00000b8a	popl	%esi
00000b8b	popl	%edi
00000b8c	popl	%ebp
00000b8d	ret
00000b8e	nop
CMDLPanel::SetMDL(char const*, void*):
00000b90	pushl	%ebp
00000b91	movl	%esp,%ebp
00000b93	pushl	%ebx
00000b94	pushl	%edi
00000b95	pushl	%esi
00000b96	subl	$0x0c,%esp
00000b99	calll	vgui::MDLCache()
00000b9e	movl	(%eax),%ecx
00000ba0	movl	0x0c(%ebp),%edi
00000ba3	movl	%edi,0x04(%esp)
00000ba7	movl	%eax,(%esp)
00000baa	call	*0x18(%ecx)
00000bad	movw	%ax,%si
00000bb0	cmpl	$0x01,%edi
00000bb3	sbbl	%eax,%eax
00000bb5	orl	%esi,%eax
00000bb7	movzwl	%ax,%edi
00000bba	calll	vgui::MDLCache()
00000bbf	movl	(%eax),%ecx
00000bc1	movl	%edi,0x04(%esp)
00000bc5	movl	%eax,(%esp)
00000bc8	call	*CMDLPanel::CMDLPanel(vgui::Panel*, char const*)(%ecx)
00000bcb	movl	0x08(%ebp),%edx
00000bce	movl	(%edx),%ecx
00000bd0	movl	0x10(%ebp),%ebx
00000bd3	movl	%ebx,0x08(%esp)
00000bd7	movw	$0xffff,%bx
00000bdb	testb	%al,%al
00000bdd	cmovnew	%bx,%di
00000be1	movzwl	%di,%eax
00000be4	movl	%eax,0x04(%esp)
00000be8	movl	%edx,(%esp)
00000beb	call	*0x000003b4(%ecx)
00000bf1	calll	vgui::MDLCache()
00000bf6	movl	(%eax),%ecx
00000bf8	movzwl	%si,%edx
00000bfb	movl	%edx,0x04(%esp)
00000bff	movl	%eax,(%esp)
00000c02	call	*0x20(%ecx)
00000c05	addl	$0x0c,%esp
00000c08	popl	%esi
00000c09	popl	%edi
00000c0a	popl	%ebx
00000c0b	popl	%ebp
00000c0c	ret
00000c0d	nopl	(%eax)
CMDLPanel::GetBoundingBox(Vector&, Vector&):
00000c10	pushl	%ebp
00000c11	movl	%esp,%ebp
00000c13	pushl	%ebx
00000c14	pushl	%edi
00000c15	pushl	%esi
00000c16	subl	$0x1c,%esp
00000c19	movl	0x08(%ebp),%esi
00000c1c	leal	0x000004dc(%esi),%edi
00000c22	movl	%edi,(%esp)
00000c25	calll	CMDL::GetMDL() const
00000c2a	cmpw	$0xff,%ax
00000c2e	jne	0x00000c34
00000c30	xorb	%al,%al
00000c32	jmp	0x00000c61
00000c34	movl	0x0c(%ebp),%ebx
00000c37	movl	%edi,(%esp)
00000c3a	calll	CMDL::GetMDL() const
00000c3f	movl	0x000004ec(%esi),%ecx
00000c45	movl	%ecx,0x0c(%esp)
00000c49	movzwl	%ax,%eax
00000c4c	movl	%eax,0x08(%esp)
00000c50	movl	0x10(%ebp),%eax
00000c53	movl	%eax,0x04(%esp)
00000c57	movl	%ebx,(%esp)
00000c5a	calll	GetMDLBoundingBox(Vector*, Vector*, unsigned short, int)
00000c5f	movb	$0x01,%al
00000c61	movzbl	%al,%eax
00000c64	addl	$0x1c,%esp
00000c67	popl	%esi
00000c68	popl	%edi
00000c69	popl	%ebx
00000c6a	popl	%ebp
00000c6b	ret
00000c6c	nopl	Create_CMDLPanel()(%eax)
CMDLPanel::GetBoundingSphere(Vector&, float&):
00000c70	pushl	%ebp
00000c71	movl	%esp,%ebp
00000c73	pushl	%ebx
00000c74	pushl	%edi
00000c75	pushl	%esi
00000c76	subl	$0x1c,%esp
00000c79	movl	0x08(%ebp),%esi
00000c7c	leal	0x000004dc(%esi),%edi
00000c82	movl	%edi,(%esp)
00000c85	calll	CMDL::GetMDL() const
00000c8a	cmpw	$0xff,%ax
00000c8e	jne	0x00000c94
00000c90	xorb	%al,%al
00000c92	jmp	0x00000cda
00000c94	movl	0x10(%ebp),%ebx
00000c97	movl	%edi,(%esp)
00000c9a	calll	CMDL::GetMDL() const
00000c9f	movl	0x000004ec(%esi),%ecx
00000ca5	movl	%ecx,0x0c(%esp)
00000ca9	movzwl	%ax,%eax
00000cac	movl	%eax,0x08(%esp)
00000cb0	movl	%ebx,0x04(%esp)
00000cb4	leal	0xe8(%ebp),%edi
00000cb7	movl	%edi,(%esp)
00000cba	calll	GetMDLBoundingSphere(Vector*, float*, unsigned short, int)
00000cbf	movl	0x0c(%ebp),%eax
00000cc2	movl	%eax,0x08(%esp)
00000cc6	addl	$0x00000b10,%esi
00000ccc	movl	%esi,0x04(%esp)
00000cd0	movl	%edi,(%esp)
00000cd3	calll	VectorTransform(float const*, matrix3x4_t const&, float*)
00000cd8	movb	$0x01,%al
00000cda	movzbl	%al,%eax
00000cdd	addl	$0x1c,%esp
00000ce0	popl	%esi
00000ce1	popl	%edi
00000ce2	popl	%ebx
00000ce3	popl	%ebp
00000ce4	ret
00000ce5	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetModelAnglesAndPosition(QAngle const&, Vector const&):
00000cf0	pushl	%ebp
00000cf1	movl	%esp,%ebp
00000cf3	pushl	%esi
00000cf4	subl	$0x14,%esp
00000cf7	movl	$0x00000b10,%esi
00000cfc	addl	0x08(%ebp),%esi
00000cff	movl	%esi,(%esp)
00000d02	calll	SetIdentityMatrix(matrix3x4_t&)
00000d07	movl	%esi,0x08(%esp)
00000d0b	movl	0x10(%ebp),%eax
00000d0e	movl	%eax,0x04(%esp)
00000d12	movl	0x0c(%ebp),%eax
00000d15	movl	%eax,(%esp)
00000d18	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
00000d1d	addl	$0x14,%esp
00000d20	popl	%esi
00000d21	popl	%ebp
00000d22	ret
00000d23	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::LookAtMDL():
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%edi
00000d34	pushl	%esi
00000d35	subl	$0x30,%esp
00000d38	movl	0x08(%ebp),%esi
00000d3b	leal	0x000004dc(%esi),%edi
00000d41	movl	%edi,(%esp)
00000d44	calll	CMDL::GetMDL() const
00000d49	cmpw	$0xff,%ax
00000d4d	je	0x00000dc4
00000d4f	testb	$0x04,0x00000c2c(%esi)
00000d56	jne	0x00000dc4
00000d58	movl	%edi,(%esp)
00000d5b	calll	CMDL::GetMDL() const
00000d60	cmpw	$0xff,%ax
00000d64	je	0x00000daa
00000d66	movl	%edi,(%esp)
00000d69	calll	CMDL::GetMDL() const
00000d6e	movl	0x000004ec(%esi),%ecx
00000d74	movl	%ecx,0x0c(%esp)
00000d78	movzwl	%ax,%eax
00000d7b	movl	%eax,0x08(%esp)
00000d7f	leal	0xe4(%ebp),%eax
00000d82	movl	%eax,0x04(%esp)
00000d86	leal	0xe8(%ebp),%edi
00000d89	movl	%edi,(%esp)
00000d8c	calll	GetMDLBoundingSphere(Vector*, float*, unsigned short, int)
00000d91	leal	0xd8(%ebp),%eax
00000d94	movl	%eax,0x08(%esp)
00000d98	leal	0x00000b10(%esi),%eax
00000d9e	movl	%eax,0x04(%esp)
00000da2	movl	%edi,(%esp)
00000da5	calll	VectorTransform(float const*, matrix3x4_t const&, float*)
00000daa	movss	0xe4(%ebp),%xmm0
00000daf	movss	%xmm0,0x08(%esp)
00000db5	leal	0xd8(%ebp),%eax
00000db8	movl	%eax,0x04(%esp)
00000dbc	movl	%esi,(%esp)
00000dbf	calll	CPotteryWheelPanel::LookAt(Vector const&, float)
00000dc4	addl	$0x30,%esp
00000dc7	popl	%esi
00000dc8	popl	%edi
00000dc9	popl	%ebp
00000dca	ret
00000dcb	nopl	Create_CMDLPanel()(%eax,%eax)
CMDLPanel::UpdateStudioRenderConfig():
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	pushl	%ebx
00000dd4	pushl	%edi
00000dd5	pushl	%esi
00000dd6	subl	$0x0c,%esp
00000dd9	calll	0x00000dde
00000dde	popl	%esi
00000ddf	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000004(%esi)
00000de9	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde(%esi)
00000df3	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x0000000c(%esi)
00000dfd	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000008(%esi)
00000e07	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000014(%esi)
00000e11	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000010(%esi)
00000e1b	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x0000001c(%esi)
00000e25	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000018(%esi)
00000e2f	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000e39	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000020(%esi)
00000e43	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x0000002c(%esi)
00000e4d	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000028(%esi)
00000e57	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000034(%esi)
00000e61	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000030(%esi)
00000e6b	movl	r_eyemove-0xdde+0x0000001c(%esi),%eax
00000e71	cmpl	Create_CMDLPanel(),0x30(%eax)
00000e75	setne	s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000e7c	movl	r_eyeshift_x-0xdde+0x0000001c(%esi),%eax
00000e82	movss	0x2c(%eax),%xmm0
00000e87	movss	%xmm0,s_StudioRenderConfig-0xdde(%esi)
00000e8f	movl	r_eyeshift_y-0xdde+0x0000001c(%esi),%eax
00000e95	movss	0x2c(%eax),%xmm0
00000e9a	movss	%xmm0,s_StudioRenderConfig-0xdde+0x00000004(%esi)
00000ea2	movl	r_eyeshift_z-0xdde+0x0000001c(%esi),%eax
00000ea8	movss	0x2c(%eax),%xmm0
00000ead	movss	%xmm0,s_StudioRenderConfig-0xdde+0x00000008(%esi)
00000eb5	movl	r_eyesize-0xdde+0x0000001c(%esi),%eax
00000ebb	movss	0x2c(%eax),%xmm0
00000ec0	movss	%xmm0,s_StudioRenderConfig-0xdde+0x0000000c(%esi)
00000ec8	setne	%dl
00000ecb	movl	0x08(%ebp),%ecx
00000ece	movl	mat_softwareskin-0xdde+0x0000001c(%esi),%eax
00000ed4	cmpl	Create_CMDLPanel(),0x30(%eax)
00000ed8	jne	0x00000ee5
00000eda	xorb	%al,%al
00000edc	testb	$0x08,0x00000c2c(%ecx)
00000ee3	je	0x00000ef3
00000ee5	movzwl	s_StudioRenderConfig-0xdde+0x00000024(%esi),%edx
00000eec	movb	%dh,%al
00000eee	andb	$0xfe,%al
00000ef0	orb	$0x02,%dl
00000ef3	movb	%dl,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000ef9	andb	$0xfb,%dl
00000efc	movl	r_nohw-0xdde+0x0000001c(%esi),%edi
00000f02	cmpl	Create_CMDLPanel(),0x30(%edi)
00000f06	setne	%bl
00000f09	shlb	$0x02,%bl
00000f0c	orb	%dl,%bl
00000f0e	movb	%bl,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000f14	andb	$0xf7,%bl
00000f17	movl	r_nosw-0xdde+0x0000001c(%esi),%edx
00000f1d	cmpl	Create_CMDLPanel(),0x30(%edx)
00000f21	setne	%ah
00000f24	shlb	$0x03,%ah
00000f27	orb	%bl,%ah
00000f29	movb	%ah,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000f2f	andb	$0xef,%ah
00000f32	movl	r_teeth-0xdde+0x0000001c(%esi),%edx
00000f38	cmpl	Create_CMDLPanel(),0x30(%edx)
00000f3c	setne	%dl
00000f3f	shlb	$0x04,%dl
00000f42	orb	%ah,%dl
00000f44	movb	%dl,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000f4a	movl	r_drawentities-0xdde+0x0000001c(%esi),%edi
00000f50	movl	0x30(%edi),%edi
00000f53	movl	%edi,s_StudioRenderConfig-0xdde+0x00000018(%esi)
00000f59	andb	$0xbf,%dl
00000f5c	movl	r_flex-0xdde+0x0000001c(%esi),%edi
00000f62	cmpl	Create_CMDLPanel(),0x30(%edi)
00000f66	setne	%ah
00000f69	shlb	$0x06,%ah
00000f6c	orb	%dl,%ah
00000f6e	movb	%ah,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000f74	andb	$0xdf,%ah
00000f77	movl	r_eyes-0xdde+0x0000001c(%esi),%edx
00000f7d	cmpl	Create_CMDLPanel(),0x30(%edx)
00000f81	setne	%dl
00000f84	shlb	$0x05,%dl
00000f87	orb	%ah,%dl
00000f89	movb	%dl,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000f8f	andb	$0x7f,%dl
00000f92	movb	0x00000c2c(%ecx),%cl
00000f98	shlb	$0x04,%cl
00000f9b	andb	$0x80,%cl
00000f9e	orb	%dl,%cl
00000fa0	movb	%cl,s_StudioRenderConfig-0xdde+0x00000024(%esi)
00000fa6	movl	mat_normals-0xdde+0x0000001c(%esi),%ecx
00000fac	cmpl	Create_CMDLPanel(),0x30(%ecx)
00000fb0	setne	%cl
00000fb3	orb	%al,%cl
00000fb5	movb	%cl,s_StudioRenderConfig-0xdde+0x00000025(%esi)
00000fbb	movl	r_skin-0xdde+0x0000001c(%esi),%eax
00000fc1	movl	0x30(%eax),%eax
00000fc4	movl	%eax,s_StudioRenderConfig-0xdde+0x0000001c(%esi)
00000fca	movl	r_maxmodeldecal-0xdde+0x0000001c(%esi),%eax
00000fd0	movl	0x30(%eax),%eax
00000fd3	movl	%eax,s_StudioRenderConfig-0xdde+0x00000014(%esi)
00000fd9	andb	$0xdf,%cl
00000fdc	movl	r_modelwireframedecal-0xdde+0x0000001c(%esi),%eax
00000fe2	cmpl	Create_CMDLPanel(),0x30(%eax)
00000fe6	setne	%al
00000fe9	shlb	$0x05,%al
00000fec	orb	%cl,%al
00000fee	movb	%al,%cl
00000ff0	andb	$0xf7,%cl
00000ff3	movl	Create_CMDLPanel(),s_StudioRenderConfig-0xdde+0x00000020(%esi)
00000ffd	movb	%cl,s_StudioRenderConfig-0xdde+0x00000025(%esi)
00001003	andb	$0xe7,%al
00001005	movl	r_showenvcubemap-0xdde+0x0000001c(%esi),%ecx
0000100b	cmpl	Create_CMDLPanel(),0x30(%ecx)
0000100f	setne	%cl
00001012	shlb	$0x04,%cl
00001015	orb	%al,%cl
00001017	movb	%cl,s_StudioRenderConfig-0xdde+0x00000025(%esi)
0000101d	movl	r_eyeglintlodpixels-0xdde+0x0000001c(%esi),%eax
00001023	movss	0x2c(%eax),%xmm0
00001028	movss	%xmm0,s_StudioRenderConfig-0xdde+0x00000010(%esi)
00001030	calll	vgui::StudioRender()
00001035	movl	(%eax),%ecx
00001037	leal	s_StudioRenderConfig-0xdde(%esi),%edx
0000103d	movl	%edx,0x04(%esp)
00001041	movl	%eax,(%esp)
00001044	call	*0x20(%ecx)
00001047	addl	$0x0c,%esp
0000104a	popl	%esi
0000104b	popl	%edi
0000104c	popl	%ebx
0000104d	popl	%ebp
0000104e	ret
0000104f	nop
CMDLPanel::DrawCollisionModel():
00001050	pushl	%ebp
00001051	movl	%esp,%ebp
00001053	pushl	%ebx
00001054	pushl	%edi
00001055	pushl	%esi
00001056	subl	$0x0000214c,%esp
0000105c	calll	0x00001061
00001061	popl	%edi
00001062	movl	0x80d42-0x1061(%edi),%eax
00001068	movl	%eax,0xffffded0(%ebp)
0000106e	movl	(%eax),%eax
00001070	movl	%eax,0xf0(%ebp)
00001073	calll	vgui::MDLCache()
00001078	movl	%eax,%esi
0000107a	movl	(%esi),%eax
0000107c	movl	0x30(%eax),%ebx
0000107f	movl	0x08(%ebp),%eax
00001082	leal	0x000004dc(%eax),%eax
00001088	movl	%eax,0xffffdee4(%ebp)
0000108e	movl	%eax,(%esp)
00001091	calll	CMDL::GetMDL() const
00001096	movzwl	%ax,%eax
00001099	movl	%eax,0x04(%esp)
0000109d	movl	%esi,(%esp)
000010a0	call	*%ebx
000010a2	testl	%eax,%eax
000010a4	je	0x000018c0
000010aa	movzwl	(%eax),%ecx
000010ad	testw	$0x7fff,%cx
000010b2	je	0x000018c0
000010b8	movl	%edi,0xffffdeec(%ebp)
000010be	movl	0x80d4e-0x1061(%edi),%ecx
000010c4	movl	%ecx,0xffffdee8(%ebp)
000010ca	movl	(%ecx),%ecx
000010cc	movl	(%ecx),%esi
000010ce	movl	%eax,0xffffded4(%ebp)
000010d4	movl	0x08(%eax),%edx
000010d7	movl	%edx,0x04(%esp)
000010db	movl	%ecx,(%esp)
000010de	call	*0x0000009c(%esi)
000010e4	movl	%eax,0xffffded8(%ebp)
000010ea	movl	0x80d46-0x1061(%edi),%esi
000010f0	movl	(%esi),%ebx
000010f2	movl	(%ebx),%eax
000010f4	movl	0x28(%eax),%eax
000010f7	movl	%eax,0xffffdee0(%ebp)
000010fd	movl	0xffffdee4(%ebp),%edi
00001103	movl	%edi,(%esp)
00001106	calll	CMDL::GetMDL() const
0000110b	movzwl	%ax,%eax
0000110e	movl	%eax,0x04(%esp)
00001112	movl	%ebx,(%esp)
00001115	call	*0xffffdee0(%ebp)
0000111b	movl	(%esi),%ecx
0000111d	movl	%ecx,0x08(%esp)
00001121	movl	%eax,0x04(%esp)
00001125	leal	0xffffff60(%ebp),%eax
0000112b	movl	%eax,(%esp)
0000112e	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
00001133	leal	0xffffe760(%ebp),%eax
00001139	movl	%eax,0x0c(%esp)
0000113d	movl	0x08(%ebp),%eax
00001140	leal	0x00000b10(%eax),%eax
00001146	movl	%eax,0x04(%esp)
0000114a	movl	%edi,(%esp)
0000114d	movl	Create_CMDLPanel(),0x18(%esp)
00001155	movl	Create_CMDLPanel(),0x14(%esp)
0000115d	movl	Create_CMDLPanel(),0x10(%esp)
00001165	movl	$0x00000080,0x08(%esp)
0000116d	calll	CMDL::SetUpBones(matrix3x4_t const&, int, matrix3x4_t*, float const*, MDLSquenceLayer_t*, int)
00001172	movl	0xffffded8(%ebp),%ebx
00001178	nopl	Create_CMDLPanel()(%eax,%eax)
00001180	movl	(%ebx),%eax
00001182	movl	0x0c(%eax),%eax
00001185	movl	%ebx,(%esp)
00001188	call	*%eax
0000118a	testb	%al,%al
0000118c	jne	0x00001899
00001192	movl	(%ebx),%eax
00001194	movl	0x08(%eax),%eax
00001197	movl	%ebx,(%esp)
0000119a	call	*%eax
0000119c	movl	0xffffdeec(%ebp),%ecx
000011a2	leal	0x79698-0x1061(%ecx),%ecx
000011a8	movl	%ecx,0x04(%esp)
000011ac	movl	%eax,(%esp)
000011af	calll	_strcasecmp
000011b4	testl	%eax,%eax
000011b6	jne	0x0000188a
000011bc	movl	(%ebx),%eax
000011be	movl	0x10(%eax),%eax
000011c1	leal	0xffffe120(%ebp),%ecx
000011c7	movl	%ecx,0x04(%esp)
000011cb	movl	%ebx,(%esp)
000011ce	movl	Create_CMDLPanel(),0x08(%esp)
000011d6	call	*%eax
000011d8	leal	0xffffe124(%ebp),%eax
000011de	movl	%eax,0x04(%esp)
000011e2	leal	0xffffff60(%ebp),%eax
000011e8	movl	%eax,(%esp)
000011eb	calll	Studio_BoneIndexByName(CStudioHdr const*, char const*)
000011f0	movl	%eax,0xffffdee0(%ebp)
000011f6	movl	0xffffded4(%ebp),%eax
000011fc	movl	0x04(%eax),%eax
000011ff	movl	0xffffe120(%ebp),%ecx
00001205	movl	(%eax,%ecx,4),%ecx
00001208	movl	0xffffdee8(%ebp),%eax
0000120e	movl	(%eax),%eax
00001210	movl	(%eax),%edx
00001212	movl	0x000000a4(%edx),%edx
00001218	leal	0xffffe11c(%ebp),%esi
0000121e	movl	%esi,0x08(%esp)
00001222	movl	%ecx,0x04(%esp)
00001226	movl	%eax,(%esp)
00001229	call	*%edx
0000122b	movl	%eax,%edi
0000122d	testl	%edi,%edi
0000122f	je	0x0000180c
00001235	movl	0xffffdeec(%ebp),%eax
0000123b	movl	0x80d4a-0x1061(%eax),%eax
00001241	movl	(%eax),%eax
00001243	movl	(%eax),%ecx
00001245	movl	0x00000188(%ecx),%ecx
0000124b	movl	%eax,(%esp)
0000124e	call	*%ecx
00001250	movl	%eax,%esi
00001252	testl	%esi,%esi
00001254	je	0x00001260
00001256	movl	(%esi),%eax
00001258	movl	0x08(%eax),%eax
0000125b	movl	%esi,(%esp)
0000125e	call	*%eax
00001260	movl	(%esi),%eax
00001262	movl	0x000000a0(%eax),%eax
00001268	movl	%esi,(%esp)
0000126b	movl	Create_CMDLPanel(),0x04(%esp)
00001273	call	*%eax
00001275	movl	0xffffdee0(%ebp),%ebx
0000127b	leal	0xffffe0e8(%ebp),%eax
00001281	movl	%eax,(%esp)
00001284	calll	SetIdentityMatrix(matrix3x4_t&)
00001289	testl	%ebx,%ebx
0000128b	js	0x000012a9
0000128d	leal	0xffffe0e8(%ebp),%eax
00001293	movl	%eax,0x04(%esp)
00001297	imull	$0x30,%ebx,%eax
0000129a	leal	0xffffe760(%ebp,%eax),%eax
000012a1	movl	%eax,(%esp)
000012a4	calll	MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
000012a9	movl	(%esi),%eax
000012ab	movl	0x000000e0(%eax),%eax
000012b1	movl	0x08(%ebp),%ecx
000012b4	movl	0x000001b8(%ecx),%ecx
000012ba	movl	%ecx,0x10(%esp)
000012be	movl	%esi,(%esp)
000012c1	movl	Create_CMDLPanel(),0x0c(%esp)
000012c9	movl	Create_CMDLPanel(),0x08(%esp)
000012d1	movl	$0x00000001,0x04(%esp)
000012d9	call	*%eax
000012db	movl	%eax,%edx
000012dd	movl	%esi,0xffffdee4(%ebp)
000012e3	movl	Create_CMDLPanel(),0xffffdfd0(%ebp)
000012ed	movl	Create_CMDLPanel(),0xffffdfd4(%ebp)
000012f7	movl	Create_CMDLPanel(),0xffffdfd8(%ebp)
00001301	movl	Create_CMDLPanel(),0xffffdfe0(%ebp)
0000130b	movl	Create_CMDLPanel(),0xffffdfe4(%ebp)
00001315	movl	$0xffffffff,0xffffdfe8(%ebp)
0000131f	movl	Create_CMDLPanel(),0xffffdfec(%ebp)
00001329	movl	Create_CMDLPanel(),0xffffe098(%ebp)
00001333	movl	$0xffffffff,0xffffe0dc(%ebp)
0000133d	movl	Create_CMDLPanel(),0xffffe0e0(%ebp)
00001347	movl	Create_CMDLPanel(),0xffffe0a4(%ebp)
00001351	movl	Create_CMDLPanel(),0xffffe0a8(%ebp)
0000135b	movl	Create_CMDLPanel(),0xffffe0a0(%ebp)
00001365	movl	Create_CMDLPanel(),0xffffe0d8(%ebp)
0000136f	movl	$0xffffffff,0xffffe040(%ebp)
00001379	movl	%edx,0xffffdfb4(%ebp)
0000137f	movl	%edi,%eax
00001381	movl	$0x55555556,%ecx
00001386	movl	%edx,%ebx
00001388	imull	%ecx
0000138a	movl	%edx,%esi
0000138c	movb	$0x01,0xffffdfbc(%ebp)
00001393	movl	$0x00000002,0xffffdfb8(%ebp)
0000139d	movl	(%ebx),%eax
0000139f	movl	0x30(%eax),%eax
000013a2	movl	%ebx,(%esp)
000013a5	movl	$0x00000002,0x04(%esp)
000013ad	call	*%eax
000013af	movl	%esi,%eax
000013b1	shrl	$0x1f,%eax
000013b4	addl	%esi,%eax
000013b6	leal	(%eax,%eax,2),%esi
000013b9	movl	0xffffdfb4(%ebp),%eax
000013bf	movl	(%eax),%ecx
000013c1	movl	0x4c(%ecx),%ecx
000013c4	leal	0xffffdf00(%ebp),%edx
000013ca	movl	%edx,0x0c(%esp)
000013ce	movl	%esi,0x08(%esp)
000013d2	movl	%esi,0x04(%esp)
000013d6	movl	%eax,(%esp)
000013d9	call	*%ecx
000013db	movl	%edi,0xffffdee0(%ebp)
000013e1	movl	%ebx,%edx
000013e3	movl	%edx,0xffffdedc(%ebp)
000013e9	leal	0x04(%edx),%eax
000013ec	testl	%edx,%edx
000013ee	movl	Create_CMDLPanel(),%ecx
000013f3	cmovel	%ecx,%eax
000013f6	movl	%eax,0xffffdfd0(%ebp)
000013fc	movl	Create_CMDLPanel(),0xffffdfd8(%ebp)
00001406	movl	%esi,0xffffdfd4(%ebp)
0000140c	movb	Create_CMDLPanel(),0xffffdff0(%ebp)
00001413	movl	0xffffdf9c(%ebp),%ebx
00001419	movl	%ebx,0xffffdfdc(%ebp)
0000141f	movl	0xffffdfa4(%ebp),%eax
00001425	movl	%eax,0xffffdfc0(%ebp)
0000142b	movb	0xffffdfb0(%ebp),%al
00001431	movb	%al,0xffffdfcc(%ebp)
00001437	movl	Create_CMDLPanel(),0xffffdfe0(%ebp)
00001441	movl	0xffffe040(%ebp),%edi
00001447	movl	%edx,0xffffe098(%ebp)
0000144d	leal	0xffffdf00(%ebp),%eax
00001453	movl	%eax,0x04(%esp)
00001457	leal	0xffffdff4(%ebp),%eax
0000145d	movl	%eax,(%esp)
00001460	movl	$0x000000a4,0x08(%esp)
00001468	calll	_memcpy
0000146d	movl	%esi,0xffffe0a0(%ebp)
00001473	cmpl	Create_CMDLPanel(),0xffffe044(%ebp)
0000147a	setne	%al
0000147d	movzbl	%al,%eax
00001480	addl	%eax,%eax
00001482	movl	%eax,0xffffe044(%ebp)
00001488	movl	Create_CMDLPanel(),0xffffe0a4(%ebp)
00001492	movb	Create_CMDLPanel(),0xffffe09c(%ebp)
00001499	cmpl	$0xff,%edi
0000149c	je	0x000014a4
0000149e	movl	%edi,0xffffe040(%ebp)
000014a4	cmpl	$0xff,0xffffe0dc(%ebp)
000014ab	movl	0xffffdee0(%ebp),%edi
000014b1	jne	0x000014cf
000014b3	movl	Create_CMDLPanel(),0xffffe0d8(%ebp)
000014bd	movl	0xffffdfa0(%ebp),%eax
000014c3	movl	%eax,0xffffe0dc(%ebp)
000014c9	movl	%ebx,0xffffe0e0(%ebp)
000014cf	movl	Create_CMDLPanel(),0xffffdfe0(%ebp)
000014d9	movl	Create_CMDLPanel(),0xffffe0a8(%ebp)
000014e3	movl	0xffffe048(%ebp),%eax
000014e9	movl	%eax,0xffffe0ac(%ebp)
000014ef	movl	0xffffe054(%ebp),%eax
000014f5	movl	%eax,0xffffe0b0(%ebp)
000014fb	movl	0xffffe060(%ebp),%eax
00001501	movl	%eax,0xffffe0b4(%ebp)
00001507	movl	0xffffe064(%ebp),%eax
0000150d	movl	%eax,0xffffe0b8(%ebp)
00001513	movl	0xffffe068(%ebp),%eax
00001519	movl	%eax,0xffffe0bc(%ebp)
0000151f	movl	0xffffe06c(%ebp),%eax
00001525	movl	%eax,0xffffe0c0(%ebp)
0000152b	movl	0xffffe070(%ebp),%eax
00001531	movl	%eax,0xffffe0c4(%ebp)
00001537	movl	0xffffe074(%ebp),%eax
0000153d	movl	%eax,0xffffe0c8(%ebp)
00001543	movl	0xffffe078(%ebp),%eax
00001549	movl	%eax,0xffffe0cc(%ebp)
0000154f	movl	0xffffe07c(%ebp),%eax
00001555	movl	%eax,0xffffe0d0(%ebp)
0000155b	movl	0xffffe058(%ebp),%eax
00001561	movl	%eax,0xffffe0d4(%ebp)
00001567	xorl	%esi,%esi
00001569	movl	$0xffffffff,%ebx
0000156e	movl	%esi,%eax
00001570	jmp	0x0000160f
00001575	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
00001580	movl	%ecx,0xffffe0a4(%ebp)
00001586	movl	%ecx,%eax
00001588	addl	$0x0c,%esi
0000158b	movl	0xffffdff4(%ebp),%ecx
00001591	addl	%ecx,0xffffe0ac(%ebp)
00001597	movl	0xffffe000(%ebp),%ecx
0000159d	addl	%ecx,0xffffe0b0(%ebp)
000015a3	movl	0xffffe004(%ebp),%ecx
000015a9	addl	%ecx,0xffffe0d4(%ebp)
000015af	movl	0xffffe00c(%ebp),%ecx
000015b5	addl	%ecx,0xffffe0b4(%ebp)
000015bb	movl	0xffffe010(%ebp),%ecx
000015c1	addl	%ecx,0xffffe0b8(%ebp)
000015c7	movl	0xffffe014(%ebp),%ecx
000015cd	addl	%ecx,0xffffe0bc(%ebp)
000015d3	movl	0xffffe018(%ebp),%ecx
000015d9	addl	%ecx,0xffffe0c0(%ebp)
000015df	movl	0xffffe01c(%ebp),%ecx
000015e5	addl	%ecx,0xffffe0c4(%ebp)
000015eb	movl	0xffffe020(%ebp),%ecx
000015f1	addl	%ecx,0xffffe0c8(%ebp)
000015f7	movl	0xffffe024(%ebp),%ecx
000015fd	addl	%ecx,0xffffe0cc(%ebp)
00001603	movl	0xffffe028(%ebp),%ecx
00001609	addl	%ecx,0xffffe0d0(%ebp)
0000160f	incl	%ebx
00001610	cmpl	%edi,%ebx
00001612	jge	0x000016e4
00001618	movl	0xffffe11c(%ebp),%eax
0000161e	leal	0xffffdef0(%ebp),%ecx
00001624	movl	%ecx,0x08(%esp)
00001628	leal	0xffffe0e8(%ebp),%ecx
0000162e	movl	%ecx,0x04(%esp)
00001632	addl	%esi,%eax
00001634	movl	%eax,(%esp)
00001637	calll	VectorTransform(float const*, matrix3x4_t const&, float*)
0000163c	movss	0xffffdef0(%ebp),%xmm0
00001644	movl	0xffffe0ac(%ebp),%eax
0000164a	movss	%xmm0,(%eax)
0000164e	movss	0xffffdef4(%ebp),%xmm0
00001656	movss	%xmm0,0x04(%eax)
0000165b	movss	0xffffdef8(%ebp),%xmm0
00001663	movss	%xmm0,0x08(%eax)
00001668	movl	0xffffe0d4(%ebp),%eax
0000166e	movl	$0x000000ff,(%eax)
00001674	movl	0xffffe0b4(%ebp),%eax
0000167a	movl	Create_CMDLPanel(),(%eax)
00001680	movl	Create_CMDLPanel(),0x04(%eax)
00001687	movl	0xffffe0a8(%ebp),%ecx
0000168d	incl	%ecx
0000168e	movl	%ecx,0xffffe0a8(%ebp)
00001694	movl	0xffffe0a4(%ebp),%eax
0000169a	cmpl	%eax,%ecx
0000169c	jle	0x00001588
000016a2	jmp	0x00001580
000016a7	movl	%esi,%ecx
000016a9	movl	%eax,%esi
000016ab	movl	(%ecx),%eax
000016ad	movl	0x04(%eax),%eax
000016b0	movl	%ecx,(%esp)
000016b3	call	*%eax
000016b5	jmp	0x0000186f
000016ba	calll	std::terminate()
000016bf	movl	%eax,%esi
000016c1	jmp	0x0000186f
000016c6	movl	%eax,%esi
000016c8	jmp	0x0000186f
000016cd	jmp	0x000016cf
000016cf	movl	%eax,%esi
000016d1	leal	0xffffdf00(%ebp),%eax
000016d7	movl	%eax,(%esp)
000016da	calll	CMeshBuilder::~CMeshBuilder()
000016df	jmp	0x00001851
000016e4	testb	$0x01,0xffffdfbc(%ebp)
000016eb	je	0x00001756
000016ed	movl	%edi,%ebx
000016ef	movl	0xffffdfb8(%ebp),%ecx
000016f5	leal	0xfc(%ecx),%esi
000016f8	cmpl	$0x04,%esi
000016fb	ja	0x00001736
000016fd	xorl	%edx,%edx
000016ff	movl	0xffffdeec(%ebp),%edi
00001705	movl	0x0000088f(%edi,%esi,4),%esi
0000170c	addl	%edi,%esi
0000170e	movl	%ebx,%edi
00001710	jmp	*%esi
00001712	imull	$0x06,%eax,%eax
00001715	movl	%eax,%edx
00001717	sarl	$0x1f,%edx
0000171a	shrl	$0x1e,%edx
0000171d	addl	%eax,%edx
0000171f	sarl	$0x02,%edx
00001722	jmp	0x0000173a
00001724	leal	0xfa(%eax,%eax,2),%edx
00001728	jmp	0x0000173a
0000172a	leal	0xfe(%eax,%eax),%edx
0000172e	jmp	0x0000173a
00001730	addl	%eax,%eax
00001732	movl	%eax,%edx
00001734	jmp	0x0000173a
00001736	movl	%eax,%edx
00001738	movl	%ebx,%edi
0000173a	movl	%edx,0x08(%esp)
0000173e	movl	%ecx,0x04(%esp)
00001742	leal	0xffffdfc0(%ebp),%eax
00001748	movl	%eax,(%esp)
0000174b	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
00001750	movl	0xffffe0a4(%ebp),%eax
00001756	movl	0xffffdfb4(%ebp),%ecx
0000175c	movl	0xffffdfd8(%ebp),%esi
00001762	movl	(%ecx),%edx
00001764	movl	0x58(%edx),%edx
00001767	leal	0xffffdf00(%ebp),%ebx
0000176d	movl	%ebx,0x0c(%esp)
00001771	movl	%esi,0x08(%esp)
00001775	movl	%eax,0x04(%esp)
00001779	movl	%ecx,(%esp)
0000177c	call	*%edx
0000177e	movl	Create_CMDLPanel(),0xffffdfd0(%ebp)
00001788	movl	Create_CMDLPanel(),0xffffdfd4(%ebp)
00001792	movl	Create_CMDLPanel(),0xffffe0a0(%ebp)
0000179c	movl	Create_CMDLPanel(),0xffffe098(%ebp)
000017a6	movl	$0xffffffff,0xffffe040(%ebp)
000017b0	movl	Create_CMDLPanel(),0xffffdfb4(%ebp)
000017ba	movl	0xffffdedc(%ebp),%ecx
000017c0	movl	(%ecx),%eax
000017c2	movl	0x34(%eax),%eax
000017c5	movl	%ecx,(%esp)
000017c8	movl	Create_CMDLPanel(),0x08(%esp)
000017d0	movl	$0xffffffff,0x04(%esp)
000017d8	call	*%eax
000017da	leal	0xffffdf00(%ebp),%eax
000017e0	movl	%eax,(%esp)
000017e3	movl	0xffffdee4(%ebp),%esi
000017e9	calll	CMeshBuilder::~CMeshBuilder()
000017ee	movl	0xffffded8(%ebp),%ebx
000017f4	testl	%esi,%esi
000017f6	je	0x0000180c
000017f8	movl	(%esi),%eax
000017fa	movl	0x0c(%eax),%eax
000017fd	movl	%esi,(%esp)
00001800	call	*%eax
00001802	movl	(%esi),%eax
00001804	movl	0x04(%eax),%eax
00001807	movl	%esi,(%esp)
0000180a	call	*%eax
0000180c	movl	0xffffdee8(%ebp),%eax
00001812	movl	(%eax),%eax
00001814	movl	(%eax),%ecx
00001816	movl	0x000000a8(%ecx),%ecx
0000181c	movl	0xffffe11c(%ebp),%edx
00001822	movl	%edx,0x08(%esp)
00001826	movl	%edi,0x04(%esp)
0000182a	movl	%eax,(%esp)
0000182d	call	*%ecx
0000182f	jmp	0x00001180
00001834	movl	%esi,%ecx
00001836	movl	%eax,%esi
00001838	movl	(%ecx),%eax
0000183a	movl	0x04(%eax),%eax
0000183d	movl	%ecx,(%esp)
00001840	call	*%eax
00001842	jmp	0x0000186f
00001844	calll	std::terminate()
00001849	movl	%esi,0xffffdee4(%ebp)
0000184f	movl	%eax,%esi
00001851	movl	0xffffdee4(%ebp),%edi
00001857	testl	%edi,%edi
00001859	je	0x0000186f
0000185b	movl	(%edi),%eax
0000185d	movl	0x0c(%eax),%eax
00001860	movl	%edi,(%esp)
00001863	call	*%eax
00001865	movl	(%edi),%eax
00001867	movl	0x04(%eax),%eax
0000186a	movl	%edi,(%esp)
0000186d	call	*%eax
0000186f	leal	0xffffff60(%ebp),%eax
00001875	movl	%eax,(%esp)
00001878	calll	CStudioHdr::~CStudioHdr()
0000187d	movl	%esi,(%esp)
00001880	calll	__Unwind_Resume
00001885	calll	std::terminate()
0000188a	movl	(%ebx),%eax
0000188c	movl	0x28(%eax),%eax
0000188f	movl	%ebx,(%esp)
00001892	call	*%eax
00001894	jmp	0x00001180
00001899	movl	0xffffdee8(%ebp),%eax
0000189f	movl	(%eax),%eax
000018a1	movl	(%eax),%ecx
000018a3	movl	0x000000a0(%ecx),%ecx
000018a9	movl	%ebx,0x04(%esp)
000018ad	movl	%eax,(%esp)
000018b0	call	*%ecx
000018b2	leal	0xffffff60(%ebp),%eax
000018b8	movl	%eax,(%esp)
000018bb	calll	CStudioHdr::~CStudioHdr()
000018c0	movl	0xffffded0(%ebp),%eax
000018c6	movl	(%eax),%eax
000018c8	cmpl	0xf0(%ebp),%eax
000018cb	jne	0x000018dd
000018cd	addl	$0x0000214c,%esp
000018d3	popl	%esi
000018d4	popl	%edi
000018d5	popl	%ebx
000018d6	popl	%ebp
000018d7	ret
000018d8	calll	std::terminate()
000018dd	calll	___stack_chk_fail
000018e2	movl	(%edi),%eax
000018e4	movl	0x04(%eax),%eax
000018e7	movl	%edi,(%esp)
000018ea	call	*%eax
000018ec	jmp	0x000018d8
000018ee	nop
000018f0	leave
000018f1	pushl	%es
000018f2	addb	%al,(%eax)
000018f4	iret
000018f5	pushl	%es
000018f6	addb	%al,(%eax)
000018f8	ret
000018f9	pushl	%es
000018fa	addb	%al,(%eax)
000018fc	movb	$0x06,%cl
000018fe	addb	%al,(%eax)
00001900	flds	(%esi)
00001902	addb	%al,(%eax)
00001904	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::OnPaint3D():
00001910	pushl	%ebp
00001911	movl	%esp,%ebp
00001913	pushl	%ebx
00001914	pushl	%edi
00001915	pushl	%esi
00001916	subl	$0x000019dc,%esp
0000191c	calll	0x00001921
00001921	popl	%eax
00001922	movl	%eax,0xffffe648(%ebp)
00001928	movl	0x80d42-0x1921(%eax),%eax
0000192e	movl	%eax,0xffffe638(%ebp)
00001934	movl	(%eax),%eax
00001936	movl	%eax,0xf0(%ebp)
00001939	movl	0x08(%ebp),%ebx
0000193c	leal	0x000004dc(%ebx),%eax
00001942	movl	%eax,0xffffe64c(%ebp)
00001948	movl	%eax,(%esp)
0000194b	calll	CMDL::GetMDL() const
00001950	cmpw	$0xff,%ax
00001954	je	0x00001dec
0000195a	calll	vgui::StudioRender()
0000195f	movl	(%eax),%ecx
00001961	leal	0xb8(%ebp),%edx
00001964	movl	%edx,0x04(%esp)
00001968	movl	%eax,(%esp)
0000196b	call	*0x24(%ecx)
0000196e	movl	%ebx,(%esp)
00001971	calll	CMDLPanel::UpdateStudioRenderConfig()
00001976	calll	vgui::MaterialSystem()
0000197b	movl	(%eax),%ecx
0000197d	movl	%eax,(%esp)
00001980	call	*0x00000188(%ecx)
00001986	movl	%eax,%esi
00001988	testl	%esi,%esi
0000198a	je	0x00001996
0000198c	movl	(%esi),%eax
0000198e	movl	0x08(%eax),%eax
00001991	movl	%esi,(%esp)
00001994	call	*%eax
00001996	movl	%esi,0xffffe654(%ebp)
0000199c	calll	vgui::MaterialSystemHardwareConfig()
000019a1	movl	(%eax),%ecx
000019a3	movl	0x000000d8(%ecx),%ecx
000019a9	movl	%eax,(%esp)
000019ac	call	*%ecx
000019ae	testl	%eax,%eax
000019b0	jne	0x00001a12
000019b2	movl	%ebx,(%esp)
000019b5	calll	CPotteryWheelPanel::HasLightProbe() const
000019ba	cmpb	$0x01,%al
000019bc	jne	0x000019e9
000019be	movl	%ebx,(%esp)
000019c1	movl	Create_CMDLPanel(),0x04(%esp)
000019c9	calll	CPotteryWheelPanel::GetLightProbeCubemap(bool)
000019ce	jmp	0x000019ef
000019d0	movl	%eax,%edi
000019d2	movl	(%esi),%eax
000019d4	movl	0x04(%eax),%eax
000019d7	movl	%esi,(%esp)
000019da	call	*%eax
000019dc	movl	%edi,(%esp)
000019df	calll	__Unwind_Resume
000019e4	calll	std::terminate()
000019e9	movl	0x00000c24(%ebx),%eax
000019ef	movl	0xffffe654(%ebp),%edx
000019f5	movl	(%edx),%ecx
000019f7	movl	0x14(%ecx),%ecx
000019fa	movl	%eax,0x04(%esp)
000019fe	movl	%edx,(%esp)
00001a01	call	*%ecx
00001a03	jmp	0x00001a4a
00001a05	movl	%eax,%edi
00001a07	movl	0xffffe654(%ebp),%esi
00001a0d	jmp	0x00001e3e
00001a12	movl	%ebx,(%esp)
00001a15	calll	CPotteryWheelPanel::HasLightProbe() const
00001a1a	cmpb	$0x01,%al
00001a1c	jne	0x00001a30
00001a1e	movl	%ebx,(%esp)
00001a21	movl	$0x00000001,0x04(%esp)
00001a29	calll	CPotteryWheelPanel::GetLightProbeCubemap(bool)
00001a2e	jmp	0x00001a36
00001a30	movl	0x00000c28(%ebx),%eax
00001a36	movl	0xffffe654(%ebp),%edx
00001a3c	movl	(%edx),%ecx
00001a3e	movl	0x14(%ecx),%ecx
00001a41	movl	%eax,0x04(%esp)
00001a45	movl	%edx,(%esp)
00001a48	call	*%ecx
00001a4a	movl	(%ebx),%eax
00001a4c	movl	0x000003c8(%eax),%eax
00001a52	movl	0xffffe654(%ebp),%ecx
00001a58	movl	%ecx,0x04(%esp)
00001a5c	movl	%ebx,(%esp)
00001a5f	call	*%eax
00001a61	movl	%ebx,%ecx
00001a63	movb	0x00000c2c(%ecx),%al
00001a69	testb	$0x02,%al
00001a6b	je	0x00001a7f
00001a6d	movl	%ecx,(%esp)
00001a70	movl	%ecx,%esi
00001a72	calll	CPotteryWheelPanel::DrawGrid()
00001a77	movl	%esi,%ecx
00001a79	movb	0x00000c2c(%ecx),%al
00001a7f	testb	$0x10,%al
00001a81	je	0x00001ae4
00001a83	leal	0x88(%ebp),%esi
00001a86	movl	%esi,0x04(%esp)
00001a8a	movl	%ecx,(%esp)
00001a8d	movl	%ecx,%edi
00001a8f	calll	CPotteryWheelPanel::ComputeCameraTransform(matrix3x4_t*)
00001a94	leal	0xffffff78(%ebp),%eax
00001a9a	movl	%eax,0x08(%esp)
00001a9e	movl	%esi,(%esp)
00001aa1	movl	$0x00000003,0x04(%esp)
00001aa9	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00001aae	movl	%edi,%ecx
00001ab0	movb	$0x01,0x00000b08(%ecx)
00001ab7	movss	0xffffff78(%ebp),%xmm0
00001abf	movss	%xmm0,0x00000afc(%ecx)
00001ac7	movss	0xffffff7c(%ebp),%xmm0
00001acf	movss	%xmm0,0x00000b00(%ecx)
00001ad7	movss	0x80(%ebp),%xmm0
00001adc	movss	%xmm0,0x00000b04(%ecx)
00001ae4	movl	%ecx,%edi
00001ae6	movl	0xffffe648(%ebp),%eax
00001aec	movl	0x80d46-0x1921(%eax),%eax
00001af2	movl	%eax,0xffffe650(%ebp)
00001af8	movl	(%eax),%esi
00001afa	movl	(%esi),%eax
00001afc	movl	0x28(%eax),%ebx
00001aff	movl	0xffffe64c(%ebp),%eax
00001b05	movl	%eax,(%esp)
00001b08	calll	CMDL::GetMDL() const
00001b0d	movzwl	%ax,%eax
00001b10	movl	%eax,0x04(%esp)
00001b14	movl	%esi,(%esp)
00001b17	call	*%ebx
00001b19	movl	0xffffe650(%ebp),%ecx
00001b1f	movl	(%ecx),%ecx
00001b21	movl	%ecx,0x08(%esp)
00001b25	movl	%eax,0x04(%esp)
00001b29	leal	0xfffffee8(%ebp),%eax
00001b2f	movl	%eax,(%esp)
00001b32	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
00001b37	movl	%edi,%ebx
00001b39	movl	(%ebx),%eax
00001b3b	movl	0x000003c0(%eax),%eax
00001b41	movl	%ebx,(%esp)
00001b44	call	*%eax
00001b46	movl	0xffffe648(%ebp),%eax
00001b4c	movl	0x80d52-0x1921(%eax),%esi
00001b52	movl	(%esi),%eax
00001b54	movl	(%eax),%ecx
00001b56	movl	0x58(%ecx),%ecx
00001b59	movl	0xfffffee8(%ebp),%edx
00001b5f	movl	0x0000009c(%edx),%edx
00001b65	movl	%edx,0x04(%esp)
00001b69	movl	%eax,(%esp)
00001b6c	call	*%ecx
00001b6e	movl	%eax,0xffffe644(%ebp)
00001b74	movl	0x00000b58(%ebx),%ecx
00001b7a	leal	0x00000b10(%ebx),%edx
00001b80	movl	%edx,0xffffe640(%ebp)
00001b86	movl	0xfffffee8(%ebp),%eax
00001b8c	movl	0x0000009c(%eax),%eax
00001b92	movl	%ecx,0x18(%esp)
00001b96	leal	0x00000b5c(%ebx),%ecx
00001b9c	movl	%ecx,0x14(%esp)
00001ba0	leal	0x00000c30(%ebx),%ecx
00001ba6	movl	%ecx,0x10(%esp)
00001baa	movl	0xffffe644(%ebp),%ecx
00001bb0	movl	%ecx,0x0c(%esp)
00001bb4	movl	%eax,0x08(%esp)
00001bb8	movl	%edx,0x04(%esp)
00001bbc	movl	0xffffe64c(%ebp),%eax
00001bc2	movl	%eax,(%esp)
00001bc5	calll	CMDL::SetUpBones(matrix3x4_t const&, int, matrix3x4_t*, float const*, MDLSquenceLayer_t*, int)
00001bca	movl	(%esi),%eax
00001bcc	movl	(%eax),%ecx
00001bce	movl	0x5c(%ecx),%ecx
00001bd1	movl	%eax,(%esp)
00001bd4	call	*%ecx
00001bd6	movl	0xffffe644(%ebp),%eax
00001bdc	movl	%eax,0x08(%esp)
00001be0	movl	0xffffe640(%ebp),%eax
00001be6	movl	%eax,0x04(%esp)
00001bea	movl	0xffffe64c(%ebp),%eax
00001bf0	movl	%eax,(%esp)
00001bf3	calll	CMDL::Draw(matrix3x4_t const&, matrix3x4_t const*)
00001bf8	movl	0x00000b50(%ebx),%eax
00001bfe	movl	%eax,0xffffe63c(%ebp)
00001c04	movl	Create_CMDLPanel(),0xffffe648(%ebp)
00001c0e	movl	$0xffffffff,0xffffe64c(%ebp)
00001c18	nopl	Create_CMDLPanel()(%eax,%eax)
00001c20	movl	0xffffe648(%ebp),%esi
00001c26	movl	0xffffe64c(%ebp),%eax
00001c2c	incl	%eax
00001c2d	movl	%eax,0xffffe64c(%ebp)
00001c33	cmpl	0xffffe63c(%ebp),%eax
00001c39	jge	0x00001d69
00001c3f	leal	0x00000668(%esi),%eax
00001c45	movl	%eax,0xffffe648(%ebp)
00001c4b	movl	0x08(%ebp),%eax
00001c4e	movl	0x00000b44(%eax),%eax
00001c54	testb	$0x01,0x00000664(%eax,%esi)
00001c5c	jne	0x00001c20
00001c5e	addl	%esi,%eax
00001c60	movl	0xffffe650(%ebp),%ecx
00001c66	movl	(%ecx),%edi
00001c68	movl	(%edi),%ecx
00001c6a	movl	0x28(%ecx),%ebx
00001c6d	movl	%eax,(%esp)
00001c70	calll	CMDL::GetMDL() const
00001c75	movzwl	%ax,%eax
00001c78	movl	%eax,0x04(%esp)
00001c7c	movl	%edi,(%esp)
00001c7f	call	*%ebx
00001c81	testl	%eax,%eax
00001c83	je	0x00001c20
00001c85	movl	0xffffe650(%ebp),%ecx
00001c8b	movl	(%ecx),%ecx
00001c8d	movl	%ecx,0x08(%esp)
00001c91	movl	%eax,0x04(%esp)
00001c95	leal	0xffffe658(%ebp),%edi
00001c9b	movl	%edi,(%esp)
00001c9e	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
00001ca3	movl	0x08(%ebp),%ebx
00001ca6	movl	0x00000b44(%ebx),%eax
00001cac	movl	0xffffe640(%ebp),%ecx
00001cb2	movl	%ecx,0x14(%esp)
00001cb6	movl	0xffffe644(%ebp),%ecx
00001cbc	movl	%ecx,0x10(%esp)
00001cc0	leal	0xfffffee8(%ebp),%ecx
00001cc6	movl	%ecx,0x0c(%esp)
00001cca	leal	0xffffe6e8(%ebp),%ecx
00001cd0	movl	%ecx,0x08(%esp)
00001cd4	movl	%edi,0x04(%esp)
00001cd8	addl	%esi,%eax
00001cda	movl	%eax,(%esp)
00001cdd	calll	CMDL::SetupBonesWithBoneMerge(CStudioHdr const*, matrix3x4_t*, CStudioHdr const*, matrix3x4_t const*, matrix3x4_t const&)
00001ce2	movl	0x00000b44(%ebx),%eax
00001ce8	leal	0xffffe6e8(%ebp),%ecx
00001cee	movl	%ecx,0x08(%esp)
00001cf2	leal	0x00000634(%eax,%esi),%ecx
00001cf9	movl	%ecx,0x04(%esp)
00001cfd	addl	%esi,%eax
00001cff	movl	%eax,(%esp)
00001d02	calll	CMDL::Draw(matrix3x4_t const&, matrix3x4_t const*)
00001d07	addl	0x00000b44(%ebx),%esi
00001d0d	movl	(%ebx),%eax
00001d0f	movl	0x000003d0(%eax),%edi
00001d15	movl	%esi,(%esp)
00001d18	calll	CMDL::GetMDL() const
00001d1d	leal	0xffffe6e8(%ebp),%ecx
00001d23	movl	%ecx,0x10(%esp)
00001d27	movzwl	%ax,%eax
00001d2a	movl	%eax,0x0c(%esp)
00001d2e	leal	0xffffe658(%ebp),%eax
00001d34	movl	%eax,0x08(%esp)
00001d38	movl	0xffffe654(%ebp),%eax
00001d3e	movl	%eax,0x04(%esp)
00001d42	movl	%ebx,(%esp)
00001d45	call	*%edi
00001d47	leal	0xffffe658(%ebp),%eax
00001d4d	movl	%eax,(%esp)
00001d50	calll	CStudioHdr::~CStudioHdr()
00001d55	jmp	0x00001c20
00001d5a	jmp	0x00001d5c
00001d5c	movl	%eax,%edi
00001d5e	movl	0xffffe654(%ebp),%esi
00001d64	jmp	0x00001e30
00001d69	movl	0x08(%ebp),%esi
00001d6c	movl	(%esi),%eax
00001d6e	movl	0x000003cc(%eax),%eax
00001d74	movl	0xffffe654(%ebp),%ecx
00001d7a	movl	%ecx,0x04(%esp)
00001d7e	movl	%esi,(%esp)
00001d81	call	*%eax
00001d83	testb	$0x01,0x00000c2c(%esi)
00001d8a	je	0x00001d94
00001d8c	movl	%esi,(%esp)
00001d8f	calll	CMDLPanel::DrawCollisionModel()
00001d94	movl	0xffffe654(%ebp),%ecx
00001d9a	movl	(%ecx),%eax
00001d9c	movl	0x10(%eax),%eax
00001d9f	movl	%ecx,(%esp)
00001da2	movl	Create_CMDLPanel(),0x04(%esp)
00001daa	call	*%eax
00001dac	calll	vgui::StudioRender()
00001db1	movl	(%eax),%ecx
00001db3	movl	0x20(%ecx),%ecx
00001db6	leal	0xb8(%ebp),%edx
00001db9	movl	%edx,0x04(%esp)
00001dbd	movl	%eax,(%esp)
00001dc0	call	*%ecx
00001dc2	leal	0xfffffee8(%ebp),%eax
00001dc8	movl	%eax,(%esp)
00001dcb	calll	CStudioHdr::~CStudioHdr()
00001dd0	movl	0xffffe654(%ebp),%esi
00001dd6	testl	%esi,%esi
00001dd8	je	0x00001dec
00001dda	movl	(%esi),%eax
00001ddc	movl	0x0c(%eax),%eax
00001ddf	movl	%esi,(%esp)
00001de2	call	*%eax
00001de4	movl	(%esi),%eax
00001de6	movl	%esi,(%esp)
00001de9	call	*0x04(%eax)
00001dec	movl	0xffffe638(%ebp),%eax
00001df2	movl	(%eax),%eax
00001df4	cmpl	0xf0(%ebp),%eax
00001df7	jne	0x00001e64
00001df9	addl	$0x000019dc,%esp
00001dff	popl	%esi
00001e00	popl	%edi
00001e01	popl	%ebx
00001e02	popl	%ebp
00001e03	ret
00001e04	movl	%eax,%edi
00001e06	movl	(%esi),%eax
00001e08	movl	0x04(%eax),%eax
00001e0b	movl	%esi,(%esp)
00001e0e	call	*%eax
00001e10	jmp	0x000019dc
00001e15	calll	std::terminate()
00001e1a	movl	%eax,%edi
00001e1c	leal	0xffffe658(%ebp),%eax
00001e22	movl	%eax,(%esp)
00001e25	calll	CStudioHdr::~CStudioHdr()
00001e2a	movl	0xffffe654(%ebp),%esi
00001e30	leal	0xfffffee8(%ebp),%eax
00001e36	movl	%eax,(%esp)
00001e39	calll	CStudioHdr::~CStudioHdr()
00001e3e	testl	%esi,%esi
00001e40	je	0x000019dc
00001e46	movl	(%esi),%eax
00001e48	movl	0x0c(%eax),%eax
00001e4b	movl	%esi,(%esp)
00001e4e	call	*%eax
00001e50	movl	(%esi),%eax
00001e52	movl	0x04(%eax),%eax
00001e55	movl	%esi,(%esp)
00001e58	call	*%eax
00001e5a	jmp	0x000019dc
00001e5f	calll	std::terminate()
00001e64	calll	___stack_chk_fail
00001e69	movl	(%esi),%eax
00001e6b	movl	0x04(%eax),%eax
00001e6e	movl	%esi,(%esp)
00001e71	call	*%eax
00001e73	jmp	0x00001e5f
00001e75	calll	std::terminate()
00001e7a	nopw	Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetLOD(int):
00001e80	pushl	%edi
00001e81	pushl	%esi
00001e82	movl	0x10(%esp),%eax
00001e86	movl	0x0c(%esp),%ecx
00001e8a	movl	%eax,0x000004f0(%ecx)
00001e90	movl	0x00000b50(%ecx),%edx
00001e96	testl	%edx,%edx
00001e98	jle	0x00001eb2
00001e9a	movl	$0x00000014,%esi
00001e9f	nop
00001ea0	movl	0x00000b44(%ecx),%edi
00001ea6	movl	%eax,(%edi,%esi)
00001ea9	addl	$0x00000668,%esi
00001eaf	decl	%edx
00001eb0	jne	0x00001ea0
00001eb2	popl	%esi
00001eb3	popl	%edi
00001eb4	ret
00001eb5	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetSequence(int):
00001ec0	movl	0x08(%esp),%eax
00001ec4	movl	0x04(%esp),%ecx
00001ec8	movl	%eax,0x000004ec(%ecx)
00001ece	ret
00001ecf	nop
CMDLPanel::SetPoseParameterByName(char const*, float):
00001ed0	pushl	%ebp
00001ed1	movl	%esp,%ebp
00001ed3	pushl	%ebx
00001ed4	pushl	%edi
00001ed5	pushl	%esi
00001ed6	subl	$0x000000ac,%esp
00001edc	calll	0x00001ee1
00001ee1	popl	%eax
00001ee2	movl	0x80d46-0x1ee1(%eax),%esi
00001ee8	movl	(%esi),%edi
00001eea	movl	(%edi),%eax
00001eec	movl	0x28(%eax),%ebx
00001eef	movl	0x08(%ebp),%eax
00001ef2	leal	0x000004dc(%eax),%eax
00001ef8	movl	%eax,(%esp)
00001efb	calll	CMDL::GetMDL() const
00001f00	movzwl	%ax,%eax
00001f03	movl	%eax,0x04(%esp)
00001f07	movl	%edi,(%esp)
00001f0a	call	*%ebx
00001f0c	movl	(%esi),%ecx
00001f0e	movl	%ecx,0x08(%esp)
00001f12	movl	%eax,0x04(%esp)
00001f16	leal	0xffffff60(%ebp),%esi
00001f1c	movl	%esi,(%esp)
00001f1f	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
00001f24	movl	%esi,(%esp)
00001f27	calll	CStudioHdr::GetNumPoseParameters() const
00001f2c	movl	%eax,%esi
00001f2e	xorl	%edi,%edi
00001f30	xorb	%bl,%bl
00001f32	jmp	0x00001f41
00001f34	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
00001f40	incl	%edi
00001f41	cmpl	%esi,%edi
00001f43	jge	0x00001f81
00001f45	movl	%edi,0x04(%esp)
00001f49	leal	0xffffff60(%ebp),%eax
00001f4f	movl	%eax,(%esp)
00001f52	calll	CStudioHdr::pPoseParameter(int)
00001f57	movl	(%eax),%ecx
00001f59	addl	%eax,%ecx
00001f5b	movl	%ecx,0x04(%esp)
00001f5f	movl	0x0c(%ebp),%eax
00001f62	movl	%eax,(%esp)
00001f65	calll	V_stricmp(char const*, char const*)
00001f6a	testl	%eax,%eax
00001f6c	jne	0x00001f40
00001f6e	movl	0x08(%ebp),%eax
00001f71	movss	0x10(%ebp),%xmm0
00001f76	movss	%xmm0,0x00000c30(%eax,%edi,4)
00001f7f	movb	$0x01,%bl
00001f81	leal	0xffffff60(%ebp),%eax
00001f87	movl	%eax,(%esp)
00001f8a	calll	CStudioHdr::~CStudioHdr()
00001f8f	movzbl	%bl,%eax
00001f92	addl	$0x000000ac,%esp
00001f98	popl	%esi
00001f99	popl	%edi
00001f9a	popl	%ebx
00001f9b	popl	%ebp
00001f9c	ret
00001f9d	jmp	0x00001f9f
00001f9f	movl	%eax,%esi
00001fa1	leal	0xffffff60(%ebp),%eax
00001fa7	movl	%eax,(%esp)
00001faa	calll	CStudioHdr::~CStudioHdr()
00001faf	movl	%esi,(%esp)
00001fb2	calll	__Unwind_Resume
00001fb7	calll	std::terminate()
00001fbc	nopl	Create_CMDLPanel()(%eax)
CMDLPanel::SetSkin(int):
00001fc0	movl	0x08(%esp),%eax
00001fc4	movl	0x04(%esp),%ecx
00001fc8	movl	%eax,0x000004e4(%ecx)
00001fce	ret
00001fcf	nop
CMDLPanel::OnTick():
00001fd0	pushl	%ebp
00001fd1	movl	%esp,%ebp
00001fd3	pushl	%edi
00001fd4	pushl	%esi
00001fd5	subl	$0x10,%esp
00001fd8	calll	0x00001fdd
00001fdd	popl	%esi
00001fde	movl	0x08(%ebp),%edi
00001fe1	movl	%edi,(%esp)
00001fe4	calll	CPotteryWheelPanel::OnTick()
00001fe9	leal	0x000004dc(%edi),%eax
00001fef	movl	%eax,(%esp)
00001ff2	calll	CMDL::GetMDL() const
00001ff7	cmpw	$0xff,%ax
00001ffb	je	0x0000204d
00001ffd	calll	_Plat_MSTime
00002002	movl	GetAutoPlayTime()::g_prevTicks-0x1fdd(%esi),%ecx
00002008	testl	%ecx,%ecx
0000200a	jne	0x00002014
0000200c	movl	%eax,GetAutoPlayTime()::g_prevTicks-0x1fdd(%esi)
00002012	movl	%eax,%ecx
00002014	movl	%eax,%edx
00002016	subl	%ecx,%edx
00002018	cvtsi2ss	%edx,%xmm0
0000201c	divss	0x783cc-0x1fdd(%esi),%xmm0
00002024	addss	GetAutoPlayTime()::g_time-0x1fdd(%esi),%xmm0
0000202c	movss	%xmm0,GetAutoPlayTime()::g_time-0x1fdd(%esi)
00002034	movl	%eax,GetAutoPlayTime()::g_prevTicks-0x1fdd(%esi)
0000203a	movss	%xmm0,0x000004f8(%edi)
00002042	addl	$0x10,%esp
00002045	popl	%esi
00002046	popl	%edi
00002047	popl	%ebp
00002048	jmp	CMDLPanel::DoAnimationEvents()
0000204d	addl	$0x10,%esp
00002050	popl	%esi
00002051	popl	%edi
00002052	popl	%ebp
00002053	ret
00002054	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::DoAnimationEvents():
00002060	pushl	%ebp
00002061	movl	%esp,%ebp
00002063	pushl	%ebx
00002064	pushl	%edi
00002065	pushl	%esi
00002066	subl	$0x000000bc,%esp
0000206c	calll	0x00002071
00002071	popl	%eax
00002072	movl	0x80d46-0x2071(%eax),%edi
00002078	movl	(%edi),%ebx
0000207a	movl	(%ebx),%eax
0000207c	movl	0x28(%eax),%eax
0000207f	movl	%eax,0xffffff5c(%ebp)
00002085	movl	0x08(%ebp),%esi
00002088	leal	0x000004dc(%esi),%eax
0000208e	movl	%eax,(%esp)
00002091	calll	CMDL::GetMDL() const
00002096	movzwl	%ax,%eax
00002099	movl	%eax,0x04(%esp)
0000209d	movl	%ebx,(%esp)
000020a0	call	*0xffffff5c(%ebp)
000020a6	movl	(%edi),%ecx
000020a8	movl	%ecx,0x08(%esp)
000020ac	movl	%eax,0x04(%esp)
000020b0	leal	0xffffff60(%ebp),%edi
000020b6	movl	%edi,(%esp)
000020b9	calll	CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
000020be	movl	%edi,(%esp)
000020c1	calll	CStudioHdr::GetNumSeq() const
000020c6	testl	%eax,%eax
000020c8	jle	0x00002192
000020ce	movl	0x000004ec(%esi),%eax
000020d4	movss	0x000004f8(%esi),%xmm0
000020dc	movl	%esi,(%esp)
000020df	movss	%xmm0,0x0c(%esp)
000020e5	movl	%eax,0x08(%esp)
000020e9	leal	0xffffff60(%ebp),%eax
000020ef	movl	%eax,0x04(%esp)
000020f3	leal	0x00000bdc(%esi),%eax
000020f9	movl	%eax,0x14(%esp)
000020fd	movl	Create_CMDLPanel(),0x10(%esp)
00002105	calll	CMDLPanel::DoAnimationEvents(CStudioHdr*, int, float, bool, MDLAnimEventState_t*)
0000210a	xorl	%ebx,%ebx
0000210c	movl	$0x00000be4,%edi
00002111	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
00002120	cmpl	0x00000b58(%esi),%ebx
00002126	jge	0x00002192
00002128	movss	0x000004f8(%esi),%xmm0
00002130	subss	0xfffff3a0(%esi,%edi,2),%xmm0
00002139	movl	0xfffff394(%esi,%edi,2),%eax
00002140	movzbl	0xfffff39c(%esi,%edi,2),%ecx
00002148	movl	%esi,(%esp)
0000214b	andl	$0x01,%ecx
0000214e	movl	%ecx,0x10(%esp)
00002152	movss	%xmm0,0x0c(%esp)
00002158	movl	%eax,0x08(%esp)
0000215c	leal	0xffffff60(%ebp),%eax
00002162	movl	%eax,0x04(%esp)
00002166	leal	(%esi,%edi),%eax
00002169	movl	%eax,0x14(%esp)
0000216d	calll	CMDLPanel::DoAnimationEvents(CStudioHdr*, int, float, bool, MDLAnimEventState_t*)
00002172	addl	$0x08,%edi
00002175	incl	%ebx
00002176	jmp	0x00002120
00002178	jmp	0x0000217a
0000217a	movl	%eax,%esi
0000217c	leal	0xffffff60(%ebp),%eax
00002182	movl	%eax,(%esp)
00002185	calll	CStudioHdr::~CStudioHdr()
0000218a	movl	%esi,(%esp)
0000218d	calll	__Unwind_Resume
00002192	leal	0xffffff60(%ebp),%eax
00002198	movl	%eax,(%esp)
0000219b	calll	CStudioHdr::~CStudioHdr()
000021a0	addl	$0x000000bc,%esp
000021a6	popl	%esi
000021a7	popl	%edi
000021a8	popl	%ebx
000021a9	popl	%ebp
000021aa	ret
000021ab	calll	std::terminate()
CMDLPanel::DoAnimationEvents(CStudioHdr*, int, float, bool, MDLAnimEventState_t*):
000021b0	pushl	%ebp
000021b1	movl	%esp,%ebp
000021b3	pushl	%ebx
000021b4	pushl	%edi
000021b5	pushl	%esi
000021b6	subl	$0x2c,%esp
000021b9	calll	0x000021be
000021be	popl	%eax
000021bf	movl	%eax,0xec(%ebp)
000021c2	movl	0x10(%ebp),%eax
000021c5	testl	%eax,%eax
000021c7	js	0x0000238b
000021cd	movl	0x0c(%ebp),%esi
000021d0	movl	%esi,(%esp)
000021d3	movl	%eax,%edi
000021d5	calll	CStudioHdr::GetNumSeq() const
000021da	movl	%edi,%ecx
000021dc	cmpl	%ecx,%eax
000021de	jle	0x0000238b
000021e4	movl	%ecx,0x04(%esp)
000021e8	movl	%esi,(%esp)
000021eb	movl	%ecx,%edi
000021ed	calll	CStudioHdr::pSeqdesc(int)
000021f2	movl	%edi,%edx
000021f4	movl	%eax,0xf0(%ebp)
000021f7	cmpl	Create_CMDLPanel(),0x18(%eax)
000021fb	je	0x0000238b
00002201	movl	0x08(%ebp),%ecx
00002204	movl	0xf0(%ebp),%eax
00002207	movl	0x1c(%eax),%edi
0000220a	leal	0x00000c30(%ecx),%eax
00002210	movl	%eax,0x08(%esp)
00002214	movl	%edx,0x04(%esp)
00002218	movl	%edx,%ebx
0000221a	movl	%esi,(%esp)
0000221d	calll	Studio_MaxFrame(CStudioHdr const*, int, float const*)
00002222	testl	%eax,%eax
00002224	jne	0x00002233
00002226	movl	0xec(%ebp),%eax
00002229	movss	0x783d0-0x21be(%eax),%xmm0
00002231	jmp	0x00002237
00002233	cvtsi2ss	%eax,%xmm0
00002237	movl	0x08(%ebp),%eax
0000223a	movss	0x14(%ebp),%xmm1
0000223f	mulss	0x000004f4(%eax),%xmm1
00002247	divss	%xmm0,%xmm1
0000224b	movaps	%xmm1,%xmm0
0000224e	cmpb	$0x01,0x18(%ebp)
00002252	movl	0x1c(%ebp),%ecx
00002255	movl	%ebx,%edx
00002257	jne	0x00002269
00002259	movl	0xec(%ebp),%eax
0000225c	minss	0x783d0-0x21be(%eax),%xmm0
00002264	movaps	%xmm0,%xmm1
00002267	jmp	0x00002278
00002269	cvttss2si	%xmm0,%eax
0000226d	movaps	%xmm0,%xmm1
00002270	cvtsi2ss	%eax,%xmm0
00002274	subss	%xmm0,%xmm1
00002278	movl	%edi,0xe4(%ebp)
0000227b	cmpl	%edx,(%ecx)
0000227d	movl	%edi,%ebx
0000227f	je	0x0000229b
00002281	movl	%edx,(%ecx)
00002283	movl	$0xbc23d70a,0x04(%ecx)
0000228a	addl	$0x04,%ecx
0000228d	pxor	%xmm0,%xmm0
00002291	movss	%xmm0,0xe8(%ebp)
00002296	jmp	0x00002324
0000229b	movss	0x04(%ecx),%xmm0
000022a0	ucomiss	%xmm0,%xmm1
000022a3	jne	0x000022ab
000022a5	jnp	0x0000238b
000022ab	addl	$0x04,%ecx
000022ae	ucomiss	%xmm1,%xmm0
000022b1	movaps	%xmm1,%xmm0
000022b4	ja	0x000022bd
000022b6	movss	%xmm0,0xe8(%ebp)
000022bb	jmp	0x00002324
000022bd	movss	%xmm0,0xe8(%ebp)
000022c2	movl	%ecx,0xec(%ebp)
000022c5	movl	0xf0(%ebp),%eax
000022c8	movl	0x18(%eax),%eax
000022cb	testl	%eax,%eax
000022cd	jle	0x0000231b
000022cf	movl	0xf0(%ebp),%ecx
000022d2	leal	(%ecx,%ebx),%esi
000022d5	xorl	%edi,%edi
000022d7	nopw	Create_CMDLPanel()(%eax,%eax)
000022e0	movl	0xec(%ebp),%ecx
000022e3	movss	(%ecx),%xmm0
000022e7	ucomiss	(%esi),%xmm0
000022ea	jae	0x00002310
000022ec	movl	0x08(%ebp),%ebx
000022ef	movl	(%ebx),%eax
000022f1	movl	0x4c(%esi),%ecx
000022f4	addl	%esi,%ecx
000022f6	leal	0x0c(%esi),%edx
000022f9	movl	%edx,0x08(%esp)
000022fd	movl	%ecx,0x04(%esp)
00002301	movl	%ebx,(%esp)
00002304	call	*0x000003c4(%eax)
0000230a	movl	0xf0(%ebp),%eax
0000230d	movl	0x18(%eax),%eax
00002310	addl	CMDLPanel::CMDLPanel(vgui::Panel*, char const*),%esi
00002313	incl	%edi
00002314	cmpl	%eax,%edi
00002316	movl	0xe4(%ebp),%ebx
00002319	jl	0x000022e0
0000231b	movl	0xec(%ebp),%ecx
0000231e	movl	$0xbc23d70a,(%ecx)
00002324	movl	%ecx,0xec(%ebp)
00002327	movl	0xf0(%ebp),%eax
0000232a	movl	0x18(%eax),%eax
0000232d	testl	%eax,%eax
0000232f	jle	0x00002382
00002331	addl	0xf0(%ebp),%ebx
00002334	xorl	%esi,%esi
00002336	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
00002340	movss	(%ebx),%xmm0
00002344	ucomiss	(%ecx),%xmm0
00002347	jbe	0x0000237a
00002349	movss	0xe8(%ebp),%xmm1
0000234e	ucomiss	%xmm0,%xmm1
00002351	jb	0x0000237a
00002353	movl	0x08(%ebp),%edi
00002356	movl	(%edi),%eax
00002358	movl	0x4c(%ebx),%ecx
0000235b	addl	%ebx,%ecx
0000235d	leal	0x0c(%ebx),%edx
00002360	movl	%edx,0x08(%esp)
00002364	movl	%ecx,0x04(%esp)
00002368	movl	%edi,(%esp)
0000236b	call	*0x000003c4(%eax)
00002371	movl	0xec(%ebp),%ecx
00002374	movl	0xf0(%ebp),%eax
00002377	movl	0x18(%eax),%eax
0000237a	addl	CMDLPanel::CMDLPanel(vgui::Panel*, char const*),%ebx
0000237d	incl	%esi
0000237e	cmpl	%eax,%esi
00002380	jl	0x00002340
00002382	movss	0xe8(%ebp),%xmm0
00002387	movss	%xmm0,(%ecx)
0000238b	addl	$0x2c,%esp
0000238e	popl	%esi
0000238f	popl	%edi
00002390	popl	%ebx
00002391	popl	%ebp
00002392	ret
00002393	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::OnMouseDoublePressed(ButtonCode_t):
000023a0	pushl	%ebp
000023a1	movl	%esp,%ebp
000023a3	pushl	%edi
000023a4	pushl	%esi
000023a5	subl	$0x30,%esp
000023a8	movl	0x08(%ebp),%esi
000023ab	testb	$0x20,0x00000c2c(%esi)
000023b2	jne	0x00002439
000023b8	leal	0x000004dc(%esi),%edi
000023be	movl	%edi,(%esp)
000023c1	calll	CMDL::GetMDL() const
000023c6	cmpw	$0xff,%ax
000023ca	je	0x00002410
000023cc	movl	%edi,(%esp)
000023cf	calll	CMDL::GetMDL() const
000023d4	movl	0x000004ec(%esi),%ecx
000023da	movl	%ecx,0x0c(%esp)
000023de	movzwl	%ax,%eax
000023e1	movl	%eax,0x08(%esp)
000023e5	leal	0xe4(%ebp),%eax
000023e8	movl	%eax,0x04(%esp)
000023ec	leal	0xe8(%ebp),%edi
000023ef	movl	%edi,(%esp)
000023f2	calll	GetMDLBoundingSphere(Vector*, float*, unsigned short, int)
000023f7	leal	0xd8(%ebp),%eax
000023fa	movl	%eax,0x08(%esp)
000023fe	leal	0x00000b10(%esi),%eax
00002404	movl	%eax,0x04(%esp)
00002408	movl	%edi,(%esp)
0000240b	calll	VectorTransform(float const*, matrix3x4_t const&, float*)
00002410	movl	0x0c(%ebp),%edi
00002413	movss	0xe4(%ebp),%xmm0
00002418	movss	%xmm0,0x08(%esp)
0000241e	leal	0xd8(%ebp),%eax
00002421	movl	%eax,0x04(%esp)
00002425	movl	%esi,(%esp)
00002428	calll	CPotteryWheelPanel::LookAt(Vector const&, float)
0000242d	movl	%edi,0x04(%esp)
00002431	movl	%esi,(%esp)
00002434	calll	vgui::Panel::OnMouseDoublePressed(ButtonCode_t)
00002439	addl	$0x30,%esp
0000243c	popl	%esi
0000243d	popl	%edi
0000243e	popl	%ebp
0000243f	ret
CMDLPanel::SetMergeMDL(unsigned short, void*, int):
00002440	pushl	%ebp
00002441	movl	%esp,%ebp
00002443	pushl	%ebx
00002444	pushl	%edi
00002445	pushl	%esi
00002446	subl	$0x1c,%esp
00002449	movl	0x08(%ebp),%edi
0000244c	leal	0x000004dc(%edi),%eax
00002452	movl	%eax,(%esp)
00002455	calll	CMDL::GetMDL() const
0000245a	cmpw	$0xff,%ax
0000245e	je	0x00002599
00002464	movl	0x00000b48(%edi),%eax
0000246a	movl	0x00000b50(%edi),%ebx
00002470	leal	0x00000b44(%edi),%esi
00002476	leal	0x01(%ebx),%edx
00002479	cmpl	%eax,%edx
0000247b	movl	%ebx,%ecx
0000247d	jle	0x0000249f
0000247f	movl	%edx,%ecx
00002481	subl	%eax,%ecx
00002483	movl	%ecx,0x04(%esp)
00002487	movl	%esi,(%esp)
0000248a	movl	%esi,0xf0(%ebp)
0000248d	movl	%edx,%esi
0000248f	calll	CUtlMemory<CMDLPanel::MDLData_t, int>::Grow(int)
00002494	movl	%esi,%edx
00002496	movl	0xf0(%ebp),%esi
00002499	movl	0x00000b50(%edi),%ecx
0000249f	movl	%esi,0xf0(%ebp)
000024a2	incl	%ecx
000024a3	movl	%ecx,0x00000b50(%edi)
000024a9	movl	0x00000b44(%edi),%eax
000024af	movl	%eax,0x00000b54(%edi)
000024b5	subl	%ebx,%ecx
000024b7	decl	%ecx
000024b8	testl	%ecx,%ecx
000024ba	movl	%edi,%esi
000024bc	jle	0x000024e9
000024be	imull	$0x00000668,%ecx,%ecx
000024c4	movl	%ecx,0x08(%esp)
000024c8	imull	$0x00000668,%ebx,%ecx
000024ce	addl	%eax,%ecx
000024d0	movl	%ecx,0x04(%esp)
000024d4	imull	$0x00000668,%edx,%ecx
000024da	addl	%eax,%ecx
000024dc	movl	%ecx,(%esp)
000024df	calll	_memmove
000024e4	movl	0xf0(%ebp),%eax
000024e7	movl	(%eax),%eax
000024e9	imull	$0x00000668,%ebx,%edi
000024ef	addl	%edi,%eax
000024f1	je	0x000024fb
000024f3	movl	%eax,(%esp)
000024f6	calll	CMDL::CMDL()
000024fb	testl	%ebx,%ebx
000024fd	movl	0xf0(%ebp),%eax
00002500	js	0x00002599
00002506	cmpl	%ebx,0x00000b50(%esi)
0000250c	jle	0x00002599
00002512	movl	%esi,%ebx
00002514	movzwl	0x0c(%ebp),%ecx
00002518	movl	%eax,%esi
0000251a	movl	(%esi),%eax
0000251c	movzwl	%cx,%ecx
0000251f	movl	%ecx,0x04(%esp)
00002523	addl	%edi,%eax
00002525	movl	%eax,(%esp)
00002528	calll	CMDL::SetMDL(unsigned short)
0000252d	movl	0x14(%ebp),%ecx
00002530	cmpl	$0xff,%ecx
00002533	je	0x0000253b
00002535	movl	(%esi),%eax
00002537	movl	%ecx,0x08(%eax,%edi)
0000253b	movl	0x10(%ebp),%eax
0000253e	movl	0x00000b44(%ebx),%ecx
00002544	movl	0x000004f0(%ebx),%edx
0000254a	movl	%edx,0x14(%ecx,%edi)
0000254e	movl	0x00000b44(%ebx),%ecx
00002554	movl	%eax,0x00000630(%ecx,%edi)
0000255b	movl	0x00000b44(%ebx),%eax
00002561	leal	0x00000634(%eax,%edi),%eax
00002568	movl	%eax,(%esp)
0000256b	calll	SetIdentityMatrix(matrix3x4_t&)
00002570	movl	0x00000b44(%ebx),%eax
00002576	movb	Create_CMDLPanel(),0x00000664(%eax,%edi)
0000257e	movl	(%ebx),%eax
00002580	movl	%ebx,(%esp)
00002583	movl	Create_CMDLPanel(),0x08(%esp)
0000258b	movl	Create_CMDLPanel(),0x04(%esp)
00002593	call	*0x0000010c(%eax)
00002599	addl	$0x1c,%esp
0000259c	popl	%esi
0000259d	popl	%edi
0000259e	popl	%ebx
0000259f	popl	%ebp
000025a0	ret
000025a1	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::SetMergeMDL(char const*, void*, int):
000025b0	pushl	%ebp
000025b1	movl	%esp,%ebp
000025b3	pushl	%edi
000025b4	pushl	%esi
000025b5	subl	$0x10,%esp
000025b8	calll	vgui::MDLCache()
000025bd	movl	(%eax),%ecx
000025bf	movl	0x0c(%ebp),%edi
000025c2	movl	%edi,0x04(%esp)
000025c6	movl	%eax,(%esp)
000025c9	call	*0x18(%ecx)
000025cc	movw	%ax,%si
000025cf	cmpl	$0x01,%edi
000025d2	sbbl	%eax,%eax
000025d4	orl	%esi,%eax
000025d6	movzwl	%ax,%edi
000025d9	calll	vgui::MDLCache()
000025de	movl	(%eax),%ecx
000025e0	movl	%edi,0x04(%esp)
000025e4	movl	%eax,(%esp)
000025e7	call	*CMDLPanel::CMDLPanel(vgui::Panel*, char const*)(%ecx)
000025ea	movl	0x14(%ebp),%ecx
000025ed	movl	%ecx,0x0c(%esp)
000025f1	movl	0x10(%ebp),%ecx
000025f4	movl	%ecx,0x08(%esp)
000025f8	movl	0x08(%ebp),%ecx
000025fb	movl	%ecx,(%esp)
000025fe	movw	$0xffff,%cx
00002602	testb	%al,%al
00002604	cmovnew	%cx,%di
00002608	movzwl	%di,%edi
0000260b	movl	%edi,0x04(%esp)
0000260f	calll	CMDLPanel::SetMergeMDL(unsigned short, void*, int)
00002614	calll	vgui::MDLCache()
00002619	movl	(%eax),%ecx
0000261b	movzwl	%si,%edx
0000261e	movl	%edx,0x04(%esp)
00002622	movl	%eax,(%esp)
00002625	call	*0x20(%ecx)
00002628	movl	%edi,%eax
0000262a	addl	$0x10,%esp
0000262d	popl	%esi
0000262e	popl	%edi
0000262f	popl	%ebp
00002630	ret
00002631	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::GetMergeMDLIndex(void*):
00002640	pushl	%ebx
00002641	pushl	%edi
00002642	pushl	%esi
00002643	movl	0x10(%esp),%ecx
00002647	movl	0x00000b50(%ecx),%esi
0000264d	xorl	%edx,%edx
0000264f	movl	$0x00000630,%edi
00002654	movl	0x14(%esp),%ebx
00002658	jmp	0x00002667
0000265a	nopw	Create_CMDLPanel()(%eax,%eax)
00002660	addl	$0x00000668,%edi
00002666	incl	%edx
00002667	movl	$0xffffffff,%eax
0000266c	cmpl	%esi,%edx
0000266e	jge	0x0000267d
00002670	movl	0x00000b44(%ecx),%eax
00002676	cmpl	%ebx,(%eax,%edi)
00002679	jne	0x00002660
0000267b	movl	%edx,%eax
0000267d	popl	%esi
0000267e	popl	%edi
0000267f	popl	%ebx
00002680	ret
00002681	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::GetMergeMDLIndex(unsigned short):
00002690	pushl	%ebp
00002691	movl	%esp,%ebp
00002693	pushl	%ebx
00002694	pushl	%edi
00002695	pushl	%esi
00002696	subl	$0x0c,%esp
00002699	movl	0x08(%ebp),%ebx
0000269c	movl	0x00000b50(%ebx),%eax
000026a2	movl	%eax,0xf0(%ebp)
000026a5	movzwl	0x0c(%ebp),%eax
000026a9	movl	%eax,0xec(%ebp)
000026ac	xorl	%esi,%esi
000026ae	xorl	%edi,%edi
000026b0	jmp	0x000026c7
000026b2	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
000026c0	addl	$0x00000668,%esi
000026c6	incl	%edi
000026c7	movl	$0xffffffff,%eax
000026cc	cmpl	0xf0(%ebp),%edi
000026cf	jge	0x000026eb
000026d1	movl	0x00000b44(%ebx),%eax
000026d7	addl	%esi,%eax
000026d9	movl	%eax,(%esp)
000026dc	calll	CMDL::GetMDL() const
000026e1	movl	0xec(%ebp),%ecx
000026e4	cmpw	%cx,%ax
000026e7	jne	0x000026c0
000026e9	movl	%edi,%eax
000026eb	addl	$0x0c,%esp
000026ee	popl	%esi
000026ef	popl	%edi
000026f0	popl	%ebx
000026f1	popl	%ebp
000026f2	ret
000026f3	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
CMDLPanel::GetMergeMDL(unsigned short):
00002700	pushl	%ebp
00002701	movl	%esp,%ebp
00002703	pushl	%ebx
00002704	pushl	%edi
00002705	pushl	%esi
00002706	subl	$0x0c,%esp
00002709	movl	0x08(%ebp),%eax
0000270c	movl	0x00000b50(%eax),%eax
00002712	movl	%eax,0xf0(%ebp)
00002715	movzwl	0x0c(%ebp),%eax
00002719	movl	%eax,0xec(%ebp)
0000271c	xorl	%edi,%edi
0000271e	movl	$0xffffffff,%ebx
00002723	nopl	%cs:Create_CMDLPanel()(%eax,%eax)
00002730	movl	%edi,%esi
00002732	incl	%ebx
00002733	cmpl	0xf0(%ebp),%ebx
00002736	jge	0x0000276c
00002738	leal	0x00000668(%esi),%edi
0000273e	movl	0x08(%ebp),%eax
00002741	movl	0x00000b44(%eax),%eax
00002747	addl	%esi,%eax
00002749	movl	%eax,(%esp)
0000274c	calll	CMDL::GetMDL() const
00002751	movl	0xec(%ebp),%ecx
00002754	cmpw	%cx,%ax
00002757	jne	0x00002730
00002759	movl	0x08(%ebp),%eax
0000275c	addl	0x00000b44(%eax),%esi
00002762	movl	%esi,%eax
00002764	addl	$0x0c,%esp
00002767	popl	%esi
00002768	popl	%edi
00002769	popl	%ebx
0000276a	popl	%ebp
0000276b	ret
0000276c	xorl	%esi,%esi
0000276e	jmp	0x00002762
CMDLPanel::ClearMergeMDLs():
00002770	pushl	%ebp
00002771	movl	%esp,%ebp
00002773	pushl	%ebx
00002774	pushl	%edi
00002775	pushl	%esi
00002776	subl	$0x0c,%esp
00002779	movl	0x08(%ebp),%esi
0000277c	movl	0x00000b50(%esi),%edi
00002782	testl	%edi,%edi
00002784	jle	0x000027bb
00002786	imull	$0x00000668,%edi,%ebx
0000278c	addl	$0xfffff998,%ebx
00002792	nopw	%cs:Create_CMDLPanel()(%eax,%eax)
000027a0	movl	0x00000b44(%esi),%eax
000027a6	addl	%ebx,%eax
000027a8	movl	%eax,(%esp)
000027ab	calll	CMDL::~CMDL()
000027b0	addl	$0xfffff998,%ebx
000027b6	decl	%edi
000027b7	testl	%edi,%edi
000027b9	jg	0x000027a0
000027bb	movl	Create_CMDLPanel(),0x00000b50(%esi)
000027c5	movl	0x00000b44(%esi),%eax
000027cb	cmpl	Create_CMDLPanel(),0x00000b4c(%esi)
000027d2	js	0x000027f6
000027d4	testl	%eax,%eax
000027d6	je	0x000027ea
000027d8	movl	%eax,(%esp)
000027db	calll	_free
000027e0	movl	Create_CMDLPanel(),0x00000b44(%esi)
000027ea	movl	Create_CMDLPanel(),0x00000b48(%esi)
000027f4	xorl	%eax,%eax
000027f6	movl	%eax,0x00000b54(%esi)
000027fc	addl	$0x0c,%esp
000027ff	popl	%esi
00002800	popl	%edi
00002801	popl	%ebx
00002802	popl	%ebp
00002803	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(mdlpicker.o):
(__TEXT,__text) section
CMDLPicker::CMDLPicker(vgui::Panel*, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0000008c,%esp
0000000c	calll	0x00000011
00000011	popl	%edi
00000012	movl	0xe0869-0x11(%edi),%eax
00000018	movl	%eax,0x98(%ebp)
0000001b	movl	(%eax),%eax
0000001d	movl	%eax,0xf0(%ebp)
00000020	leal	0xd67a9-0x11(%edi),%eax
00000026	movl	%eax,0x18(%esp)
0000002a	leal	0xd67a2-0x11(%edi),%eax
00000030	movl	%eax,0x14(%esp)
00000034	leal	0xd679e-0x11(%edi),%eax
0000003a	movl	%eax,0x10(%esp)
0000003e	leal	0xd6794-0x11(%edi),%eax
00000044	movl	%eax,0x0c(%esp)
00000048	movl	0x0c(%ebp),%eax
0000004b	movl	%eax,0x08(%esp)
0000004f	leal	VTT for CMDLPicker-0x11+0x00000004(%edi),%eax
00000055	movl	%eax,0x9c(%ebp)
00000058	movl	%eax,0x04(%esp)
0000005c	movl	0x08(%ebp),%esi
0000005f	movl	%esi,(%esp)
00000062	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000067	movl	%edi,%ecx
00000069	leal	vtable for CMDLPicker-0x11+0x0000000c(%ecx),%eax
0000006f	movl	%eax,(%esi)
00000071	testb	$0x01,CMDLPicker::ChainToMap()::chained-0x11(%ecx)
00000078	jne	0x000000b7
0000007a	movb	$0x01,CMDLPicker::ChainToMap()::chained-0x11(%ecx)
00000081	leal	0xd6fca-0x11(%ecx),%eax
00000087	movl	%ecx,%edi
00000089	movl	%eax,(%esp)
0000008c	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000091	movl	%eax,%esi
00000093	movl	%edi,%ecx
00000095	leal	CMDLPicker::GetPanelClassName()-0x11(%ecx),%eax
0000009b	movl	%eax,0x1c(%esi)
0000009e	testl	%esi,%esi
000000a0	je	0x000000b7
000000a2	leal	0xd6fb9-0x11(%ecx),%eax
000000a8	movl	%ecx,%edi
000000aa	movl	%eax,(%esp)
000000ad	calll	vgui::FindOrAddPanelMessageMap(char const*)
000000b2	movl	%eax,0x18(%esi)
000000b5	movl	%edi,%ecx
000000b7	testb	$0x01,CMDLPicker::ChainToAnimationMap()::chained-0x11(%ecx)
000000be	jne	0x000000fd
000000c0	movb	$0x01,CMDLPicker::ChainToAnimationMap()::chained-0x11(%ecx)
000000c7	leal	0xd6fca-0x11(%ecx),%eax
000000cd	movl	%ecx,%edi
000000cf	movl	%eax,(%esp)
000000d2	calll	FindOrAddPanelAnimationMap(char const*)
000000d7	movl	%eax,%esi
000000d9	movl	%edi,%ecx
000000db	leal	CMDLPicker::GetPanelClassName()-0x11(%ecx),%eax
000000e1	movl	%eax,0x18(%esi)
000000e4	testl	%esi,%esi
000000e6	je	0x000000fd
000000e8	leal	0xd6fb9-0x11(%ecx),%eax
000000ee	movl	%ecx,%edi
000000f0	movl	%eax,(%esp)
000000f3	calll	FindOrAddPanelAnimationMap(char const*)
000000f8	movl	%eax,0x14(%esi)
000000fb	movl	%edi,%ecx
000000fd	testb	$0x01,CMDLPicker::KB_ChainToMap()::chained-0x11(%ecx)
00000104	jne	0x00000143
00000106	movb	$0x01,CMDLPicker::KB_ChainToMap()::chained-0x11(%ecx)
0000010d	leal	0xd6fca-0x11(%ecx),%eax
00000113	movl	%ecx,%edi
00000115	movl	%eax,(%esp)
00000118	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000011d	movl	%eax,%esi
0000011f	movl	%edi,%ecx
00000121	leal	CMDLPicker::GetPanelClassName()-0x11(%ecx),%eax
00000127	movl	%eax,0x44(%esi)
0000012a	testl	%esi,%esi
0000012c	je	0x00000143
0000012e	leal	0xd6fb9-0x11(%ecx),%eax
00000134	movl	%ecx,%edi
00000136	movl	%eax,(%esp)
00000139	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000013e	movl	%eax,0x18(%esi)
00000141	movl	%edi,%ecx
00000143	movl	%ecx,0xa4(%ebp)
00000146	testb	$0x01,CMDLPicker::PanelMessageFunc_OnAssetSelected::InitVar()::bAdded-0x11(%ecx)
0000014d	jne	0x000001a8
0000014f	movl	0xa4(%ebp),%eax
00000152	movb	$0x01,CMDLPicker::PanelMessageFunc_OnAssetSelected::InitVar()::bAdded-0x11(%eax)
00000159	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xcc(%ebp)
00000160	movl	$0x000003c9,0xc8(%ebp)
00000167	movsd	0xc8(%ebp),%xmm0
0000016c	movsd	%xmm0,0x04(%esp)
00000172	leal	0xd703d-0x11(%eax),%eax
00000178	movl	%eax,(%esp)
0000017b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
00000183	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
0000018b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00000193	movl	$0x00000006,0x10(%esp)
0000019b	movl	$0x00000001,0x0c(%esp)
000001a3	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000001a8	movl	0xa4(%ebp),%eax
000001ab	testb	$0x01,CMDLPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x11(%eax)
000001b2	jne	0x0000020d
000001b4	movl	0xa4(%ebp),%eax
000001b7	movb	$0x01,CMDLPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x11(%eax)
000001be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xd4(%ebp)
000001c5	movl	$0x000003c1,0xd0(%ebp)
000001cc	movsd	0xd0(%ebp),%xmm0
000001d1	movsd	%xmm0,0x04(%esp)
000001d7	leal	0xd702a-0x11(%eax),%eax
000001dd	movl	%eax,(%esp)
000001e0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
000001e8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000001f0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000001f8	movl	$0x00000006,0x10(%esp)
00000200	movl	$0x00000001,0x0c(%esp)
00000208	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000020d	movl	0xa4(%ebp),%eax
00000210	testb	$0x01,CMDLPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x11(%eax)
00000217	jne	0x00000272
00000219	movl	0xa4(%ebp),%eax
0000021c	movb	$0x01,CMDLPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x11(%eax)
00000223	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xdc(%ebp)
0000022a	movl	$0x000003bd,0xd8(%ebp)
00000231	movsd	0xd8(%ebp),%xmm0
00000236	movsd	%xmm0,0x04(%esp)
0000023c	leal	0xd701d-0x11(%eax),%eax
00000242	movl	%eax,(%esp)
00000245	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
0000024d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
00000255	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
0000025d	movl	$0x00000006,0x10(%esp)
00000265	movl	$0x00000001,0x0c(%esp)
0000026d	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000272	movl	0xa4(%ebp),%eax
00000275	testb	$0x01,CMDLPicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x11(%eax)
0000027c	jne	0x000002d7
0000027e	movl	0xa4(%ebp),%eax
00000281	movb	$0x01,CMDLPicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x11(%eax)
00000288	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xe4(%ebp)
0000028f	movl	$0x000003cd,0xe0(%ebp)
00000296	movsd	0xe0(%ebp),%xmm0
0000029b	movsd	%xmm0,0x04(%esp)
000002a1	leal	0xd7011-0x11(%eax),%eax
000002a7	movl	%eax,(%esp)
000002aa	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
000002b2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000002ba	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000002c2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000002ca	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000002d2	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000002d7	movl	0xa4(%ebp),%eax
000002da	testb	$0x01,CMDLPicker::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x11(%eax)
000002e1	jne	0x0000033e
000002e3	movl	0xa4(%ebp),%ecx
000002e6	movb	$0x01,CMDLPicker::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x11(%ecx)
000002ed	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xec(%ebp)
000002f4	movl	$0x000003d1,0xe8(%ebp)
000002fb	leal	0xd700d-0x11(%ecx),%eax
00000301	movl	%eax,0x14(%esp)
00000305	movsd	0xe8(%ebp),%xmm0
0000030a	movsd	%xmm0,0x04(%esp)
00000310	leal	0xd6ffb-0x11(%ecx),%eax
00000316	movl	%eax,(%esp)
00000319	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
00000321	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
00000329	movl	$0x00000001,0x10(%esp)
00000331	movl	$0x00000001,0x0c(%esp)
00000339	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000033e	movl	0x10(%ebp),%ecx
00000341	movl	0x08(%ebp),%eax
00000344	movl	$0xffffffff,0x00000290(%eax)
0000034e	movl	$0xffffffff,0x0000028c(%eax)
00000358	movl	%ecx,0x00000294(%eax)
0000035e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000027c(%eax)
00000368	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000280(%eax)
00000372	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000274(%eax)
0000037c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000278(%eax)
00000386	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%eax)
00000390	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000270(%eax)
0000039a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000264(%eax)
000003a4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%eax)
000003ae	leal	0x00000290(%eax),%eax
000003b4	movl	%eax,(%esp)
000003b7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000003bf	calll	vgui::PHandle::Set(vgui::Panel*)
000003c4	movl	$0x000001c4,(%esp)
000003cb	calll	operator new(unsigned long)
000003d0	movl	%eax,%edi
000003d2	movl	0xa4(%ebp),%eax
000003d5	leal	0xd67b1-0x11(%eax),%eax
000003db	movl	%eax,0x08(%esp)
000003df	movl	0x08(%ebp),%esi
000003e2	movl	%esi,0x04(%esp)
000003e6	movl	%edi,(%esp)
000003e9	movl	$0x00000001,0x10(%esp)
000003f1	movl	$0x00000001,0x0c(%esp)
000003f9	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000003fe	movl	%edi,0x00000258(%esi)
00000404	movl	$0x3f2b851f,0xc4(%ebp)
0000040b	movl	$0x3ea8f5c3,0xc0(%ebp)
00000412	leal	0xc0(%ebp),%eax
00000415	movl	%eax,0x04(%esp)
00000419	movl	%edi,(%esp)
0000041c	calll	vgui::Splitter::RespaceSplitters(float*)
00000421	movl	0x08(%ebp),%eax
00000424	movl	0x00000258(%eax),%eax
0000042a	movl	%eax,(%esp)
0000042d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000435	calll	vgui::Panel::GetChild(int)
0000043a	movl	%eax,%edi
0000043c	movl	0x08(%ebp),%eax
0000043f	movl	0x00000258(%eax),%eax
00000445	movl	%eax,(%esp)
00000448	movl	$0x00000001,0x04(%esp)
00000450	calll	vgui::Panel::GetChild(int)
00000455	movl	%eax,%esi
00000457	movl	(%edi),%eax
00000459	movl	0x30(%eax),%eax
0000045c	movl	%edi,(%esp)
0000045f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000467	call	*%eax
00000469	movl	%edi,0x04(%esp)
0000046d	movl	0x08(%ebp),%eax
00000470	movl	%eax,(%esp)
00000473	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000047b	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
00000480	movl	$0x000001c4,(%esp)
00000487	calll	operator new(unsigned long)
0000048c	movl	%eax,%edi
0000048e	movl	0xa4(%ebp),%eax
00000491	leal	0xd67c5-0x11(%eax),%eax
00000497	movl	%eax,0x08(%esp)
0000049b	movl	%esi,0x04(%esp)
0000049f	movl	%edi,(%esp)
000004a2	movl	$0x00000001,0x10(%esp)
000004aa	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000004b2	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000004b7	movl	0x08(%ebp),%eax
000004ba	movl	%edi,0x0000025c(%eax)
000004c0	movl	%edi,(%esp)
000004c3	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000004cb	calll	vgui::Panel::GetChild(int)
000004d0	movl	%eax,%edi
000004d2	movl	0x08(%ebp),%eax
000004d5	movl	0x0000025c(%eax),%eax
000004db	movl	%eax,(%esp)
000004de	movl	$0x00000001,0x04(%esp)
000004e6	calll	vgui::Panel::GetChild(int)
000004eb	movl	%eax,%esi
000004ed	movl	$0x00000c90,(%esp)
000004f4	calll	operator new(unsigned long)
000004f9	movl	%eax,%ebx
000004fb	movl	0xa4(%ebp),%eax
000004fe	leal	0xd67d5-0x11(%eax),%eax
00000504	movl	%eax,0x08(%esp)
00000508	movl	%edi,0x04(%esp)
0000050c	movl	%ebx,(%esp)
0000050f	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00000514	movl	0x08(%ebp),%ecx
00000517	movl	%ebx,0x00000254(%ecx)
0000051d	movl	(%ecx),%eax
0000051f	movl	0x000002b8(%eax),%eax
00000525	movl	%ebx,0x04(%esp)
00000529	movl	%ecx,(%esp)
0000052c	call	*%eax
0000052e	movl	$0x00000230,(%esp)
00000535	calll	operator new(unsigned long)
0000053a	movl	%eax,%edi
0000053c	movl	0xa4(%ebp),%eax
0000053f	leal	0xd67e0-0x11(%eax),%eax
00000545	movl	%eax,0x08(%esp)
00000549	movl	%esi,0x04(%esp)
0000054d	movl	%edi,(%esp)
00000550	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00000558	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
0000055d	movl	0x08(%ebp),%ecx
00000560	movl	%edi,0x00000260(%ecx)
00000566	movl	(%edi),%eax
00000568	movl	0x000000b4(%eax),%eax
0000056e	movl	%ecx,0x04(%esp)
00000572	movl	%edi,(%esp)
00000575	call	*%eax
00000577	movl	0x08(%ebp),%eax
0000057a	leal	0x00000264(%eax),%eax
00000580	movl	%eax,0xa0(%ebp)
00000583	movl	0x10(%ebp),%eax
00000586	testb	$0x01,%al
00000588	movl	%eax,%ebx
0000058a	je	0x0000063f
00000590	movl	$0x000001b8,(%esp)
00000597	calll	operator new(unsigned long)
0000059c	movl	%eax,%edi
0000059e	movl	0x08(%ebp),%esi
000005a1	movl	0x00000260(%esi),%eax
000005a7	movl	0xa4(%ebp),%ecx
000005aa	leal	0xd67eb-0x11(%ecx),%ecx
000005b0	movl	%ecx,0x08(%esp)
000005b4	movl	%eax,0x04(%esp)
000005b8	movl	%edi,(%esp)
000005bb	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000005c0	movl	%edi,0x00000264(%esi)
000005c6	movl	(%edi),%eax
000005c8	movl	0x000000b4(%eax),%eax
000005ce	movl	%esi,0x04(%esp)
000005d2	movl	%edi,(%esp)
000005d5	call	*%eax
000005d7	movl	0xa0(%ebp),%eax
000005da	movl	(%eax),%ecx
000005dc	movl	(%ecx),%eax
000005de	movl	0x00000354(%eax),%eax
000005e4	movl	0xa4(%ebp),%edx
000005e7	leal	0xd67f6-0x11(%edx),%edx
000005ed	movl	%edx,0x04(%esp)
000005f1	movl	%ecx,(%esp)
000005f4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000005fc	call	*%eax
000005fe	movl	0x08(%ebp),%eax
00000601	movl	%eax,(%esp)
00000604	calll	CMDLPicker::RefreshRenderSettings()
00000609	movl	0xa0(%ebp),%eax
0000060c	movl	(%eax),%eax
0000060e	movl	0xa4(%ebp),%ecx
00000611	leal	0xd6813-0x11(%ecx),%ecx
00000617	movl	%ecx,0x04(%esp)
0000061b	movl	%eax,(%esp)
0000061e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000626	calll	vgui::Panel::FindChildByName(char const*, bool)
0000062b	movl	(%eax),%ecx
0000062d	movl	0x000000b4(%ecx),%ecx
00000633	movl	0x08(%ebp),%edx
00000636	movl	%edx,0x04(%esp)
0000063a	movl	%eax,(%esp)
0000063d	call	*%ecx
0000063f	testb	$0x02,%bl
00000642	je	0x000007a1
00000648	movl	$0x000001b8,(%esp)
0000064f	calll	operator new(unsigned long)
00000654	movl	%eax,%edi
00000656	movl	0x08(%ebp),%esi
00000659	movl	0x00000260(%esi),%eax
0000065f	movl	0xa4(%ebp),%ecx
00000662	leal	0xd6824-0x11(%ecx),%ecx
00000668	movl	%ecx,0x08(%esp)
0000066c	movl	%eax,0x04(%esp)
00000670	movl	%edi,(%esp)
00000673	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000678	movl	%edi,0x00000268(%esi)
0000067e	movl	$0x00000280,(%esp)
00000685	calll	operator new(unsigned long)
0000068a	movl	%eax,%edi
0000068c	movl	0x08(%ebp),%esi
0000068f	movl	0x00000268(%esi),%eax
00000695	movl	0xa4(%ebp),%ebx
00000698	leal	0xd6832-0x11(%ebx),%ecx
0000069e	movl	%ecx,0x08(%esp)
000006a2	movl	%eax,0x04(%esp)
000006a6	movl	%edi,(%esp)
000006a9	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
000006ae	movl	%edi,0x0000027c(%esi)
000006b4	movl	(%edi),%eax
000006b6	movl	0x0000034c(%eax),%eax
000006bc	leal	0xd6840-0x11(%ebx),%ecx
000006c2	movl	%ecx,0x0c(%esp)
000006c6	movl	%ecx,0x08(%esp)
000006ca	movl	%edi,(%esp)
000006cd	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000006d5	movl	$0x00000034,0x10(%esp)
000006dd	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000006e5	call	*%eax
000006e7	movl	0x08(%ebp),%edx
000006ea	movl	0x0000027c(%edx),%eax
000006f0	movl	(%eax),%ecx
000006f2	movl	0x000000b4(%ecx),%ecx
000006f8	movl	%edx,0x04(%esp)
000006fc	movl	%eax,(%esp)
000006ff	call	*%ecx
00000701	movl	0x08(%ebp),%eax
00000704	movl	0x0000027c(%eax),%ecx
0000070a	movl	(%ecx),%eax
0000070c	movl	0x00000410(%eax),%eax
00000712	movl	%ecx,(%esp)
00000715	movl	$0x00000001,0x04(%esp)
0000071d	call	*%eax
0000071f	movl	0x08(%ebp),%eax
00000722	movl	0x0000027c(%eax),%eax
00000728	movl	(%eax),%ecx
0000072a	movl	0x00000420(%ecx),%ecx
00000730	movl	0xa4(%ebp),%edx
00000733	leal	0xd6849-0x11(%edx),%edx
00000739	movl	%edx,0x04(%esp)
0000073d	movl	%eax,(%esp)
00000740	call	*%ecx
00000742	movl	0x08(%ebp),%eax
00000745	movl	0x0000027c(%eax),%ecx
0000074b	movl	(%ecx),%eax
0000074d	movl	0x00000240(%eax),%eax
00000753	movl	%ecx,(%esp)
00000756	movl	$0x00000001,0x04(%esp)
0000075e	call	*%eax
00000760	movl	0x08(%ebp),%eax
00000763	movl	0x0000027c(%eax),%eax
00000769	movl	%eax,(%esp)
0000076c	movl	$0xfffffffa,0x18(%esp)
00000774	movl	$0xfffffffa,0x14(%esp)
0000077c	movl	$0x00000006,0x10(%esp)
00000784	movl	$0x00000006,0x0c(%esp)
0000078c	movl	$0x00000003,0x08(%esp)
00000794	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000079c	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
000007a1	movl	0x10(%ebp),%eax
000007a4	testb	$0x04,%al
000007a6	je	0x00000905
000007ac	movl	$0x000001b8,(%esp)
000007b3	calll	operator new(unsigned long)
000007b8	movl	%eax,%edi
000007ba	movl	0x08(%ebp),%esi
000007bd	movl	0x00000260(%esi),%eax
000007c3	movl	0xa4(%ebp),%ecx
000007c6	leal	0xd686a-0x11(%ecx),%ecx
000007cc	movl	%ecx,0x08(%esp)
000007d0	movl	%eax,0x04(%esp)
000007d4	movl	%edi,(%esp)
000007d7	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000007dc	movl	%edi,0x0000026c(%esi)
000007e2	movl	$0x00000280,(%esp)
000007e9	calll	operator new(unsigned long)
000007ee	movl	%eax,%edi
000007f0	movl	0x08(%ebp),%esi
000007f3	movl	0x0000026c(%esi),%eax
000007f9	movl	0xa4(%ebp),%ebx
000007fc	leal	0xd6879-0x11(%ebx),%ecx
00000802	movl	%ecx,0x08(%esp)
00000806	movl	%eax,0x04(%esp)
0000080a	movl	%edi,(%esp)
0000080d	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000812	movl	%edi,0x00000280(%esi)
00000818	movl	(%edi),%eax
0000081a	movl	0x0000034c(%eax),%eax
00000820	leal	0xd6888-0x11(%ebx),%ecx
00000826	movl	%ecx,0x0c(%esp)
0000082a	movl	%ecx,0x08(%esp)
0000082e	movl	%edi,(%esp)
00000831	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00000839	movl	$0x00000034,0x10(%esp)
00000841	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000849	call	*%eax
0000084b	movl	0x08(%ebp),%edx
0000084e	movl	0x00000280(%edx),%eax
00000854	movl	(%eax),%ecx
00000856	movl	0x000000b4(%ecx),%ecx
0000085c	movl	%edx,0x04(%esp)
00000860	movl	%eax,(%esp)
00000863	call	*%ecx
00000865	movl	0x08(%ebp),%eax
00000868	movl	0x00000280(%eax),%ecx
0000086e	movl	(%ecx),%eax
00000870	movl	0x00000410(%eax),%eax
00000876	movl	%ecx,(%esp)
00000879	movl	$0x00000001,0x04(%esp)
00000881	call	*%eax
00000883	movl	0x08(%ebp),%eax
00000886	movl	0x00000280(%eax),%eax
0000088c	movl	(%eax),%ecx
0000088e	movl	0x00000420(%ecx),%ecx
00000894	movl	0xa4(%ebp),%edx
00000897	leal	0xd6849-0x11(%edx),%edx
0000089d	movl	%edx,0x04(%esp)
000008a1	movl	%eax,(%esp)
000008a4	call	*%ecx
000008a6	movl	0x08(%ebp),%eax
000008a9	movl	0x00000280(%eax),%ecx
000008af	movl	(%ecx),%eax
000008b1	movl	0x00000240(%eax),%eax
000008b7	movl	%ecx,(%esp)
000008ba	movl	$0x00000001,0x04(%esp)
000008c2	call	*%eax
000008c4	movl	0x08(%ebp),%eax
000008c7	movl	0x00000280(%eax),%eax
000008cd	movl	%eax,(%esp)
000008d0	movl	$0xfffffffa,0x18(%esp)
000008d8	movl	$0xfffffffa,0x14(%esp)
000008e0	movl	$0x00000006,0x10(%esp)
000008e8	movl	$0x00000006,0x0c(%esp)
000008f0	movl	$0x00000003,0x08(%esp)
000008f8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000900	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000905	movl	0x10(%ebp),%eax
00000908	testb	$0x08,%al
0000090a	je	0x00000a69
00000910	movl	$0x000001b8,(%esp)
00000917	calll	operator new(unsigned long)
0000091c	movl	%eax,%edi
0000091e	movl	0x08(%ebp),%esi
00000921	movl	0x00000260(%esi),%eax
00000927	movl	0xa4(%ebp),%ecx
0000092a	leal	0xd6891-0x11(%ecx),%ecx
00000930	movl	%ecx,0x08(%esp)
00000934	movl	%eax,0x04(%esp)
00000938	movl	%edi,(%esp)
0000093b	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000940	movl	%edi,0x00000270(%esi)
00000946	movl	$0x00000280,(%esp)
0000094d	calll	operator new(unsigned long)
00000952	movl	%eax,%edi
00000954	movl	0x08(%ebp),%esi
00000957	movl	0x00000270(%esi),%eax
0000095d	movl	0xa4(%ebp),%ebx
00000960	leal	0xd689b-0x11(%ebx),%ecx
00000966	movl	%ecx,0x08(%esp)
0000096a	movl	%eax,0x04(%esp)
0000096e	movl	%edi,(%esp)
00000971	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000976	movl	%edi,0x00000284(%esi)
0000097c	movl	(%edi),%eax
0000097e	movl	0x0000034c(%eax),%eax
00000984	leal	0xd68a5-0x11(%ebx),%ecx
0000098a	movl	%ecx,0x0c(%esp)
0000098e	movl	%ecx,0x08(%esp)
00000992	movl	%edi,(%esp)
00000995	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
0000099d	movl	$0x00000034,0x10(%esp)
000009a5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000009ad	call	*%eax
000009af	movl	0x08(%ebp),%edx
000009b2	movl	0x00000284(%edx),%eax
000009b8	movl	(%eax),%ecx
000009ba	movl	0x000000b4(%ecx),%ecx
000009c0	movl	%edx,0x04(%esp)
000009c4	movl	%eax,(%esp)
000009c7	call	*%ecx
000009c9	movl	0x08(%ebp),%eax
000009cc	movl	0x00000284(%eax),%ecx
000009d2	movl	(%ecx),%eax
000009d4	movl	0x00000410(%eax),%eax
000009da	movl	%ecx,(%esp)
000009dd	movl	$0x00000001,0x04(%esp)
000009e5	call	*%eax
000009e7	movl	0x08(%ebp),%eax
000009ea	movl	0x00000284(%eax),%eax
000009f0	movl	(%eax),%ecx
000009f2	movl	0x00000420(%ecx),%ecx
000009f8	movl	0xa4(%ebp),%edx
000009fb	leal	0xd6849-0x11(%edx),%edx
00000a01	movl	%edx,0x04(%esp)
00000a05	movl	%eax,(%esp)
00000a08	call	*%ecx
00000a0a	movl	0x08(%ebp),%eax
00000a0d	movl	0x00000284(%eax),%ecx
00000a13	movl	(%ecx),%eax
00000a15	movl	0x00000240(%eax),%eax
00000a1b	movl	%ecx,(%esp)
00000a1e	movl	$0x00000001,0x04(%esp)
00000a26	call	*%eax
00000a28	movl	0x08(%ebp),%eax
00000a2b	movl	0x00000284(%eax),%eax
00000a31	movl	%eax,(%esp)
00000a34	movl	$0xfffffffa,0x18(%esp)
00000a3c	movl	$0xfffffffa,0x14(%esp)
00000a44	movl	$0x00000006,0x10(%esp)
00000a4c	movl	$0x00000006,0x0c(%esp)
00000a54	movl	$0x00000003,0x08(%esp)
00000a5c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000a64	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000a69	movl	0x10(%ebp),%eax
00000a6c	testb	$0x10,%al
00000a6e	je	0x00000d97
00000a74	movl	$0x000001b8,(%esp)
00000a7b	calll	operator new(unsigned long)
00000a80	movl	%eax,%edi
00000a82	movl	0x08(%ebp),%esi
00000a85	movl	0x00000260(%esi),%eax
00000a8b	movl	0xa4(%ebp),%ecx
00000a8e	leal	0xd68aa-0x11(%ecx),%ecx
00000a94	movl	%ecx,0x08(%esp)
00000a98	movl	%eax,0x04(%esp)
00000a9c	movl	%edi,(%esp)
00000a9f	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000aa4	movl	%edi,0x00000274(%esi)
00000aaa	movl	(%edi),%eax
00000aac	movl	0x000000b4(%eax),%eax
00000ab2	movl	%esi,0x04(%esp)
00000ab6	movl	%edi,(%esp)
00000ab9	call	*%eax
00000abb	movl	0x08(%ebp),%eax
00000abe	movl	0x00000274(%eax),%ecx
00000ac4	movl	(%ecx),%eax
00000ac6	movl	0x00000354(%eax),%eax
00000acc	movl	0xa4(%ebp),%edx
00000acf	leal	0xd68b3-0x11(%edx),%edx
00000ad5	movl	%edx,0x04(%esp)
00000ad9	movl	%ecx,(%esp)
00000adc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000ae4	call	*%eax
00000ae6	movl	0x08(%ebp),%eax
00000ae9	movl	0x00000274(%eax),%eax
00000aef	movl	0xa4(%ebp),%ecx
00000af2	leal	0xd68ce-0x11(%ecx),%ecx
00000af8	movl	%ecx,0x04(%esp)
00000afc	movl	%eax,(%esp)
00000aff	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000b07	calll	vgui::Panel::FindChildByName(char const*, bool)
00000b0c	movl	%eax,%esi
00000b0e	movl	(%esi),%eax
00000b10	movl	0x00000368(%eax),%edi
00000b16	movl	0x000000f8(%eax),%eax
00000b1c	movl	%esi,(%esp)
00000b1f	call	*%eax
00000b21	movl	%eax,0xbc(%ebp)
00000b24	movl	0xbc(%ebp),%eax
00000b27	movl	%eax,0x04(%esp)
00000b2b	movl	%esi,(%esp)
00000b2e	call	*%edi
00000b30	movl	(%esi),%eax
00000b32	movl	0x0000036c(%eax),%edi
00000b38	movl	0x000000f8(%eax),%eax
00000b3e	movl	%esi,(%esp)
00000b41	call	*%eax
00000b43	movl	%eax,0xb8(%ebp)
00000b46	movl	0xb8(%ebp),%eax
00000b49	movl	%eax,0x04(%esp)
00000b4d	movl	%esi,(%esp)
00000b50	call	*%edi
00000b52	movl	0x08(%ebp),%eax
00000b55	movl	0x00000274(%eax),%eax
00000b5b	movl	0xa4(%ebp),%ecx
00000b5e	leal	0xd68dc-0x11(%ecx),%ecx
00000b64	movl	%ecx,0x04(%esp)
00000b68	movl	%eax,(%esp)
00000b6b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000b73	calll	vgui::Panel::FindChildByName(char const*, bool)
00000b78	movl	%eax,%esi
00000b7a	movl	(%esi),%eax
00000b7c	movl	0x00000368(%eax),%edi
00000b82	movl	0x000000f8(%eax),%eax
00000b88	movl	%esi,(%esp)
00000b8b	call	*%eax
00000b8d	movl	%eax,0xb4(%ebp)
00000b90	movl	0xb4(%ebp),%eax
00000b93	movl	%eax,0x04(%esp)
00000b97	movl	%esi,(%esp)
00000b9a	call	*%edi
00000b9c	movl	(%esi),%eax
00000b9e	movl	0x0000036c(%eax),%edi
00000ba4	movl	0x000000f8(%eax),%eax
00000baa	movl	%esi,(%esp)
00000bad	call	*%eax
00000baf	movl	%eax,0xb0(%ebp)
00000bb2	movl	0xb0(%ebp),%eax
00000bb5	movl	%eax,0x04(%esp)
00000bb9	movl	%esi,(%esp)
00000bbc	call	*%edi
00000bbe	movl	0x08(%ebp),%eax
00000bc1	movl	0x00000274(%eax),%eax
00000bc7	movl	0xa4(%ebp),%ecx
00000bca	leal	0xd68e9-0x11(%ecx),%ecx
00000bd0	movl	%ecx,0x04(%esp)
00000bd4	movl	%eax,(%esp)
00000bd7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000bdf	calll	vgui::Panel::FindChildByName(char const*, bool)
00000be4	movl	%eax,%esi
00000be6	movl	(%esi),%eax
00000be8	movl	0x00000368(%eax),%edi
00000bee	movl	0x000000f8(%eax),%eax
00000bf4	movl	%esi,(%esp)
00000bf7	call	*%eax
00000bf9	movl	%eax,0xac(%ebp)
00000bfc	movl	0xac(%ebp),%eax
00000bff	movl	%eax,0x04(%esp)
00000c03	movl	%esi,(%esp)
00000c06	call	*%edi
00000c08	movl	(%esi),%eax
00000c0a	movl	0x0000036c(%eax),%edi
00000c10	movl	0x000000f8(%eax),%eax
00000c16	movl	%esi,(%esp)
00000c19	call	*%eax
00000c1b	movl	%eax,0xa8(%ebp)
00000c1e	movl	0xa8(%ebp),%eax
00000c21	movl	%eax,0x04(%esp)
00000c25	movl	%esi,(%esp)
00000c28	call	*%edi
00000c2a	movl	$0x00000280,(%esp)
00000c31	calll	operator new(unsigned long)
00000c36	movl	%eax,%edi
00000c38	movl	0x08(%ebp),%esi
00000c3b	movl	0x00000274(%esi),%eax
00000c41	movl	0xa4(%ebp),%ebx
00000c44	leal	0xd68f7-0x11(%ebx),%ecx
00000c4a	movl	%ecx,0x08(%esp)
00000c4e	movl	%eax,0x04(%esp)
00000c52	movl	%edi,(%esp)
00000c55	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000c5a	movl	%edi,0x00000288(%esi)
00000c60	movl	(%edi),%eax
00000c62	movl	0x0000034c(%eax),%eax
00000c68	leal	0xd6900-0x11(%ebx),%ecx
00000c6e	movl	%ecx,0x0c(%esp)
00000c72	movl	%ecx,0x08(%esp)
00000c76	movl	%edi,(%esp)
00000c79	movl	$0x00000001,0x14(%esp)
00000c81	movl	$0x000000fa,0x10(%esp)
00000c89	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000c91	call	*%eax
00000c93	movl	0x08(%ebp),%eax
00000c96	movl	0x00000288(%eax),%ecx
00000c9c	movl	(%ecx),%eax
00000c9e	movl	0x0000034c(%eax),%eax
00000ca4	movl	0xa4(%ebp),%edx
00000ca7	leal	0xd6904-0x11(%edx),%edx
00000cad	movl	%edx,0x0c(%esp)
00000cb1	movl	%edx,0x08(%esp)
00000cb5	movl	%ecx,(%esp)
00000cb8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00000cc0	movl	$0x00000034,0x10(%esp)
00000cc8	movl	$0x00000001,0x04(%esp)
00000cd0	call	*%eax
00000cd2	movl	0x08(%ebp),%edx
00000cd5	movl	0x00000288(%edx),%eax
00000cdb	movl	(%eax),%ecx
00000cdd	movl	0x000000b4(%ecx),%ecx
00000ce3	movl	%edx,0x04(%esp)
00000ce7	movl	%eax,(%esp)
00000cea	call	*%ecx
00000cec	movl	0x08(%ebp),%eax
00000cef	movl	0x00000288(%eax),%ecx
00000cf5	movl	(%ecx),%eax
00000cf7	movl	0x00000410(%eax),%eax
00000cfd	movl	%ecx,(%esp)
00000d00	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000d08	call	*%eax
00000d0a	movl	0x08(%ebp),%eax
00000d0d	movl	0x00000288(%eax),%eax
00000d13	movl	(%eax),%ecx
00000d15	movl	0x00000420(%ecx),%ecx
00000d1b	movl	0xa4(%ebp),%edx
00000d1e	leal	0xd690a-0x11(%edx),%edx
00000d24	movl	%edx,0x04(%esp)
00000d28	movl	%eax,(%esp)
00000d2b	call	*%ecx
00000d2d	movl	0x08(%ebp),%eax
00000d30	movl	0x00000288(%eax),%ecx
00000d36	movl	(%ecx),%eax
00000d38	movl	0x00000240(%eax),%eax
00000d3e	movl	%ecx,(%esp)
00000d41	movl	$0x00000001,0x04(%esp)
00000d49	call	*%eax
00000d4b	movl	0x08(%ebp),%eax
00000d4e	movl	0x00000288(%eax),%eax
00000d54	movl	%eax,(%esp)
00000d57	movl	$0xfffffffa,0x18(%esp)
00000d5f	movl	$0xfffffffa,0x14(%esp)
00000d67	movl	$0x00000048,0x10(%esp)
00000d6f	movl	$0x00000006,0x0c(%esp)
00000d77	movl	$0x00000003,0x08(%esp)
00000d7f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00000d87	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000d8c	movl	0x08(%ebp),%eax
00000d8f	movl	%eax,(%esp)
00000d92	calll	CMDLPicker::RefreshRenderSettings()
00000d97	movl	0x10(%ebp),%eax
00000d9a	testb	$0x20,%al
00000d9c	je	0x00001032
00000da2	movl	$0x000001b8,(%esp)
00000da9	calll	operator new(unsigned long)
00000dae	movl	%eax,%edi
00000db0	movl	0x08(%ebp),%esi
00000db3	movl	0x00000260(%esi),%eax
00000db9	movl	0xa4(%ebp),%ecx
00000dbc	leal	0xd6922-0x11(%ecx),%ecx
00000dc2	movl	%ecx,0x08(%esp)
00000dc6	movl	%eax,0x04(%esp)
00000dca	movl	%edi,(%esp)
00000dcd	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000dd2	movl	%edi,0x00000278(%esi)
00000dd8	movl	$0x0000022c,(%esp)
00000ddf	calll	operator new(unsigned long)
00000de4	movl	%eax,%edi
00000de6	movl	0x08(%ebp),%esi
00000de9	movl	0x00000278(%esi),%eax
00000def	movl	%esi,0x0c(%esp)
00000df3	movl	0xa4(%ebp),%ebx
00000df6	leal	0xd6931-0x11(%ebx),%ecx
00000dfc	movl	%ecx,0x08(%esp)
00000e00	movl	%eax,0x04(%esp)
00000e04	movl	%edi,(%esp)
00000e07	calll	CColorPickerButton::CColorPickerButton(vgui::Panel*, char const*, vgui::Panel*)
00000e0c	movl	0x00000278(%esi),%ecx
00000e12	movl	(%ecx),%eax
00000e14	movl	0x00000354(%eax),%eax
00000e1a	leal	0xd6941-0x11(%ebx),%edx
00000e20	movl	%edx,0x04(%esp)
00000e24	movl	%ecx,(%esp)
00000e27	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000e2f	call	*%eax
00000e31	movl	0x08(%ebp),%eax
00000e34	movl	0x00000278(%eax),%eax
00000e3a	movl	0xa4(%ebp),%ecx
00000e3d	leal	0xd6962-0x11(%ecx),%ecx
00000e43	movl	%ecx,0x04(%esp)
00000e47	movl	%eax,(%esp)
00000e4a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000e52	calll	vgui::Panel::FindChildByName(char const*, bool)
00000e57	movl	(%eax),%ecx
00000e59	movl	0x0000034c(%ecx),%ecx
00000e5f	movl	0xa4(%ebp),%edx
00000e62	leal	0xd696c-0x11(%edx),%esi
00000e68	movl	%esi,0x04(%esp)
00000e6c	movl	%eax,(%esp)
00000e6f	call	*%ecx
00000e71	movl	0x08(%ebp),%eax
00000e74	movl	0x00000278(%eax),%eax
00000e7a	movl	0xa4(%ebp),%ecx
00000e7d	leal	0xd6970-0x11(%ecx),%ecx
00000e83	movl	%ecx,0x04(%esp)
00000e87	movl	%eax,(%esp)
00000e8a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000e92	calll	vgui::Panel::FindChildByName(char const*, bool)
00000e97	movl	(%eax),%ecx
00000e99	movl	0x0000034c(%ecx),%ecx
00000e9f	movl	%esi,0x04(%esp)
00000ea3	movl	%eax,(%esp)
00000ea6	call	*%ecx
00000ea8	movl	%edi,(%esp)
00000eab	movl	$0x000000ff,0x10(%esp)
00000eb3	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00000ebb	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000ec3	movl	$0x000000ff,0x04(%esp)
00000ecb	calll	CColorPickerButton::SetColor(int, int, int, int)
00000ed0	movl	0x08(%ebp),%eax
00000ed3	movl	0x00000278(%eax),%eax
00000ed9	movl	0xa4(%ebp),%ecx
00000edc	leal	0xd697b-0x11(%ecx),%ecx
00000ee2	movl	%ecx,0x04(%esp)
00000ee6	movl	%eax,(%esp)
00000ee9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000ef1	calll	vgui::Panel::FindChildByName(char const*, bool)
00000ef6	movl	(%eax),%ecx
00000ef8	movl	0x00000348(%ecx),%ecx
00000efe	movl	0xa4(%ebp),%edx
00000f01	leal	0xd698b-0x11(%edx),%edx
00000f07	movl	%edx,0x04(%esp)
00000f0b	movl	%eax,(%esp)
00000f0e	call	*%ecx
00000f10	movl	0x08(%ebp),%eax
00000f13	movl	0x00000278(%eax),%eax
00000f19	movl	0xa4(%ebp),%ecx
00000f1c	leal	0xd698f-0x11(%ecx),%ecx
00000f22	movl	%ecx,0x04(%esp)
00000f26	movl	%eax,(%esp)
00000f29	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000f31	calll	vgui::Panel::FindChildByName(char const*, bool)
00000f36	movl	(%eax),%ecx
00000f38	movl	0x000000b4(%ecx),%ecx
00000f3e	movl	0x08(%ebp),%edx
00000f41	movl	%edx,0x04(%esp)
00000f45	movl	%eax,(%esp)
00000f48	call	*%ecx
00000f4a	movl	0x08(%ebp),%eax
00000f4d	movl	0x00000278(%eax),%eax
00000f53	movl	0xa4(%ebp),%ecx
00000f56	leal	0xd6997-0x11(%ecx),%ecx
00000f5c	movl	%ecx,0x04(%esp)
00000f60	movl	%eax,(%esp)
00000f63	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000f6b	calll	vgui::Panel::FindChildByName(char const*, bool)
00000f70	movl	(%eax),%ecx
00000f72	movl	0x000000b4(%ecx),%ecx
00000f78	movl	0x08(%ebp),%edx
00000f7b	movl	%edx,0x04(%esp)
00000f7f	movl	%eax,(%esp)
00000f82	call	*%ecx
00000f84	movl	0x08(%ebp),%eax
00000f87	movl	0x00000278(%eax),%eax
00000f8d	movl	0xa4(%ebp),%ecx
00000f90	leal	0xd69ad-0x11(%ecx),%ecx
00000f96	movl	%ecx,0x04(%esp)
00000f9a	movl	%eax,(%esp)
00000f9d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000fa5	calll	vgui::Panel::FindChildByName(char const*, bool)
00000faa	movl	(%eax),%ecx
00000fac	movl	0x000000b4(%ecx),%ecx
00000fb2	movl	0x08(%ebp),%edx
00000fb5	movl	%edx,0x04(%esp)
00000fb9	movl	%eax,(%esp)
00000fbc	call	*%ecx
00000fbe	movl	0x08(%ebp),%eax
00000fc1	movl	0x00000278(%eax),%eax
00000fc7	movl	0xa4(%ebp),%ecx
00000fca	leal	0xd69b6-0x11(%ecx),%ecx
00000fd0	movl	%ecx,0x04(%esp)
00000fd4	movl	%eax,(%esp)
00000fd7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00000fdf	calll	vgui::Panel::FindChildByName(char const*, bool)
00000fe4	movl	(%eax),%ecx
00000fe6	movl	0x000000b4(%ecx),%ecx
00000fec	movl	0x08(%ebp),%edx
00000fef	movl	%edx,0x04(%esp)
00000ff3	movl	%eax,(%esp)
00000ff6	call	*%ecx
00000ff8	movl	0x08(%ebp),%eax
00000ffb	movl	0x00000278(%eax),%eax
00001001	movl	0xa4(%ebp),%ecx
00001004	leal	0xd69c2-0x11(%ecx),%ecx
0000100a	movl	%ecx,0x04(%esp)
0000100e	movl	%eax,(%esp)
00001011	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001019	calll	vgui::Panel::FindChildByName(char const*, bool)
0000101e	movl	(%eax),%ecx
00001020	movl	0x000000b4(%ecx),%ecx
00001026	movl	0x08(%ebp),%edx
00001029	movl	%edx,0x04(%esp)
0000102d	movl	%eax,(%esp)
00001030	call	*%ecx
00001032	movl	0x08(%ebp),%edx
00001035	movl	(%edx),%eax
00001037	movl	0x00000354(%eax),%eax
0000103d	movl	0xa4(%ebp),%ecx
00001040	leal	0xd69d8-0x11(%ecx),%ecx
00001046	movl	%ecx,0x04(%esp)
0000104a	movl	%edx,(%esp)
0000104d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001055	call	*%eax
00001057	movl	0xa0(%ebp),%eax
0000105a	movl	(%eax),%eax
0000105c	testl	%eax,%eax
0000105e	je	0x00001097
00001060	movl	0x08(%ebp),%ecx
00001063	movl	0x00000260(%ecx),%edx
00001069	movl	(%edx),%ecx
0000106b	movl	0x000003b0(%ecx),%ecx
00001071	movl	0xa4(%ebp),%esi
00001074	leal	0xd69ef-0x11(%esi),%esi
0000107a	movl	%esi,0x08(%esp)
0000107e	movl	%eax,0x04(%esp)
00001082	movl	%edx,(%esp)
00001085	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
0000108d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00001095	call	*%ecx
00001097	movl	0x08(%ebp),%eax
0000109a	movl	0x00000268(%eax),%eax
000010a0	testl	%eax,%eax
000010a2	je	0x000010db
000010a4	movl	0x08(%ebp),%ecx
000010a7	movl	0x00000260(%ecx),%edx
000010ad	movl	(%edx),%ecx
000010af	movl	0x000003b0(%ecx),%ecx
000010b5	movl	0xa4(%ebp),%esi
000010b8	leal	0xd69f6-0x11(%esi),%esi
000010be	movl	%esi,0x08(%esp)
000010c2	movl	%eax,0x04(%esp)
000010c6	movl	%edx,(%esp)
000010c9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000010d1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000010d9	call	*%ecx
000010db	movl	0x08(%ebp),%eax
000010de	movl	0x0000026c(%eax),%eax
000010e4	testl	%eax,%eax
000010e6	je	0x0000111f
000010e8	movl	0x08(%ebp),%ecx
000010eb	movl	0x00000260(%ecx),%edx
000010f1	movl	(%edx),%ecx
000010f3	movl	0x000003b0(%ecx),%ecx
000010f9	movl	0xa4(%ebp),%esi
000010fc	leal	0xd6a00-0x11(%esi),%esi
00001102	movl	%esi,0x08(%esp)
00001106	movl	%eax,0x04(%esp)
0000110a	movl	%edx,(%esp)
0000110d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00001115	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
0000111d	call	*%ecx
0000111f	movl	0x08(%ebp),%eax
00001122	movl	0x00000270(%eax),%eax
00001128	testl	%eax,%eax
0000112a	je	0x00001163
0000112c	movl	0x08(%ebp),%ecx
0000112f	movl	0x00000260(%ecx),%edx
00001135	movl	(%edx),%ecx
00001137	movl	0x000003b0(%ecx),%ecx
0000113d	movl	0xa4(%ebp),%esi
00001140	leal	0xd6a0b-0x11(%esi),%esi
00001146	movl	%esi,0x08(%esp)
0000114a	movl	%eax,0x04(%esp)
0000114e	movl	%edx,(%esp)
00001151	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00001159	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00001161	call	*%ecx
00001163	movl	0x08(%ebp),%eax
00001166	movl	0x00000274(%eax),%eax
0000116c	testl	%eax,%eax
0000116e	je	0x000011a7
00001170	movl	0x08(%ebp),%ecx
00001173	movl	0x00000260(%ecx),%edx
00001179	movl	(%edx),%ecx
0000117b	movl	0x000003b0(%ecx),%ecx
00001181	movl	0xa4(%ebp),%esi
00001184	leal	0xd6a11-0x11(%esi),%esi
0000118a	movl	%esi,0x08(%esp)
0000118e	movl	%eax,0x04(%esp)
00001192	movl	%edx,(%esp)
00001195	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
0000119d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000011a5	call	*%ecx
000011a7	movl	0x08(%ebp),%eax
000011aa	movl	0x00000278(%eax),%eax
000011b0	testl	%eax,%eax
000011b2	je	0x000011eb
000011b4	movl	0x08(%ebp),%ecx
000011b7	movl	0x00000260(%ecx),%edx
000011bd	movl	(%edx),%ecx
000011bf	movl	0x000003b0(%ecx),%ecx
000011c5	movl	0xa4(%ebp),%esi
000011c8	leal	0xd6a16-0x11(%esi),%esi
000011ce	movl	%esi,0x08(%esp)
000011d2	movl	%eax,0x04(%esp)
000011d6	movl	%edx,(%esp)
000011d9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000011e1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000011e9	call	*%ecx
000011eb	movl	0x98(%ebp),%eax
000011ee	movl	(%eax),%eax
000011f0	cmpl	0xf0(%ebp),%eax
000011f3	jne	0x0000124e
000011f5	addl	$0x0000008c,%esp
000011fb	popl	%esi
000011fc	popl	%edi
000011fd	popl	%ebx
000011fe	popl	%ebp
000011ff	ret
00001200	movl	%eax,%esi
00001202	movl	%edi,(%esp)
00001205	calll	operator delete(void*)
0000120a	jmp	0x00001234
0000120c	jmp	0x00001200
0000120e	movl	%eax,%esi
00001210	movl	%ebx,(%esp)
00001213	calll	operator delete(void*)
00001218	jmp	0x00001234
0000121a	jmp	0x00001200
0000121c	jmp	0x00001200
0000121e	jmp	0x00001200
00001220	jmp	0x00001200
00001222	jmp	0x00001200
00001224	jmp	0x00001200
00001226	jmp	0x00001200
00001228	jmp	0x00001200
0000122a	jmp	0x00001200
0000122c	jmp	0x00001200
0000122e	jmp	0x00001200
00001230	jmp	0x00001200
00001232	movl	%eax,%esi
00001234	movl	0x9c(%ebp),%eax
00001237	movl	%eax,0x04(%esp)
0000123b	movl	0x08(%ebp),%eax
0000123e	movl	%eax,(%esp)
00001241	calll	CBaseAssetPicker::~CBaseAssetPicker()
00001246	movl	%esi,(%esp)
00001249	calll	__Unwind_Resume
0000124e	calll	___stack_chk_fail
00001253	calll	std::terminate()
00001258	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::RefreshRenderSettings():
00001260	pushl	%ebp
00001261	movl	%esp,%ebp
00001263	pushl	%ebx
00001264	pushl	%edi
00001265	pushl	%esi
00001266	subl	$0x1c,%esp
00001269	calll	0x0000126e
0000126e	popl	%ecx
0000126f	movl	0x08(%ebp),%ebx
00001272	movl	0x00000264(%ebx),%eax
00001278	testl	%eax,%eax
0000127a	je	0x00001423
00001280	movl	%ecx,0xf0(%ebp)
00001283	leal	0xd6a22-0x126e(%ecx),%ecx
00001289	movl	%ecx,0x04(%esp)
0000128d	movl	%eax,(%esp)
00001290	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001298	calll	vgui::Panel::FindChildByName(char const*, bool)
0000129d	movl	%eax,%esi
0000129f	movl	(%esi),%eax
000012a1	movl	%ebx,0x04(%esp)
000012a5	movl	%esi,(%esp)
000012a8	call	*0x000000b4(%eax)
000012ae	movl	0x00000254(%ebx),%edi
000012b4	movl	(%esi),%eax
000012b6	movl	%esi,(%esp)
000012b9	call	*0x000003f4(%eax)
000012bf	xorb	$0x01,%al
000012c1	movzbl	%al,%eax
000012c4	movl	%eax,0x04(%esp)
000012c8	movl	%edi,(%esp)
000012cb	calll	CMDLPanel::SetGroundGrid(bool)
000012d0	movl	0x00000264(%ebx),%eax
000012d6	movl	0xf0(%ebp),%edi
000012d9	leal	0xd6a2b-0x126e(%edi),%ecx
000012df	movl	%ecx,0x04(%esp)
000012e3	movl	%eax,(%esp)
000012e6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000012ee	calll	vgui::Panel::FindChildByName(char const*, bool)
000012f3	movl	%eax,%esi
000012f5	movl	(%esi),%eax
000012f7	movl	%ebx,0x04(%esp)
000012fb	movl	%esi,(%esp)
000012fe	call	*0x000000b4(%eax)
00001304	movl	0x00000254(%ebx),%eax
0000130a	movl	%eax,0xec(%ebp)
0000130d	movl	(%esi),%eax
0000130f	movl	%esi,(%esp)
00001312	call	*0x000003f4(%eax)
00001318	movzbl	%al,%eax
0000131b	movl	%eax,0x04(%esp)
0000131f	movl	0xec(%ebp),%eax
00001322	movl	%eax,(%esp)
00001325	calll	CMDLPanel::SetCollsionModel(bool)
0000132a	movl	0x00000264(%ebx),%eax
00001330	leal	0xd6a35-0x126e(%edi),%ecx
00001336	movl	%ecx,0x04(%esp)
0000133a	movl	%eax,(%esp)
0000133d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001345	calll	vgui::Panel::FindChildByName(char const*, bool)
0000134a	movl	%eax,%esi
0000134c	movl	(%esi),%eax
0000134e	movl	%ebx,0x04(%esp)
00001352	movl	%esi,(%esp)
00001355	call	*0x000000b4(%eax)
0000135b	movl	0x00000254(%ebx),%edi
00001361	movl	(%esi),%eax
00001363	movl	%esi,(%esp)
00001366	call	*0x000003f4(%eax)
0000136c	movzbl	%al,%eax
0000136f	movl	%eax,0x04(%esp)
00001373	movl	%edi,(%esp)
00001376	calll	CMDLPanel::SetWireFrame(bool)
0000137b	movl	0x00000264(%ebx),%eax
00001381	movl	0xf0(%ebp),%ecx
00001384	leal	0xd6a3f-0x126e(%ecx),%ecx
0000138a	movl	%ecx,0x04(%esp)
0000138e	movl	%eax,(%esp)
00001391	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001399	calll	vgui::Panel::FindChildByName(char const*, bool)
0000139e	movl	%eax,%esi
000013a0	movl	(%esi),%eax
000013a2	movl	%ebx,0x04(%esp)
000013a6	movl	%esi,(%esp)
000013a9	call	*0x000000b4(%eax)
000013af	movl	0x00000254(%ebx),%edi
000013b5	movl	(%esi),%eax
000013b7	movl	%esi,(%esp)
000013ba	call	*0x000003f4(%eax)
000013c0	movzbl	%al,%eax
000013c3	movl	%eax,0x04(%esp)
000013c7	movl	%edi,(%esp)
000013ca	calll	CMDLPanel::SetLockView(bool)
000013cf	movl	0x00000264(%ebx),%eax
000013d5	movl	0xf0(%ebp),%ecx
000013d8	leal	0xd6a48-0x126e(%ecx),%ecx
000013de	movl	%ecx,0x04(%esp)
000013e2	movl	%eax,(%esp)
000013e5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000013ed	calll	vgui::Panel::FindChildByName(char const*, bool)
000013f2	movl	%eax,%esi
000013f4	movl	(%esi),%eax
000013f6	movl	%ebx,0x04(%esp)
000013fa	movl	%esi,(%esp)
000013fd	call	*0x000000b4(%eax)
00001403	movl	0x00000254(%ebx),%edi
00001409	movl	(%esi),%eax
0000140b	movl	%esi,(%esp)
0000140e	call	*0x000003f4(%eax)
00001414	movzbl	%al,%eax
00001417	movl	%eax,0x04(%esp)
0000141b	movl	%edi,(%esp)
0000141e	calll	CMDLPanel::SetLookAtCamera(bool)
00001423	addl	$0x1c,%esp
00001426	popl	%esi
00001427	popl	%edi
00001428	popl	%ebx
00001429	popl	%ebp
0000142a	ret
0000142b	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::CMDLPicker(vgui::Panel*, int):
00001430	pushl	%ebp
00001431	movl	%esp,%ebp
00001433	pushl	%ebx
00001434	pushl	%edi
00001435	pushl	%esi
00001436	subl	$0x0000008c,%esp
0000143c	calll	0x00001441
00001441	popl	%ebx
00001442	movl	0xe0869-0x1441(%ebx),%eax
00001448	movl	%eax,0x98(%ebp)
0000144b	movl	(%eax),%eax
0000144d	movl	%eax,0xf0(%ebp)
00001450	leal	0xd67a9-0x1441(%ebx),%eax
00001456	movl	%eax,0x18(%esp)
0000145a	leal	0xd67a2-0x1441(%ebx),%eax
00001460	movl	%eax,0x14(%esp)
00001464	leal	0xd679e-0x1441(%ebx),%eax
0000146a	movl	%eax,0x10(%esp)
0000146e	leal	0xd6794-0x1441(%ebx),%eax
00001474	movl	%eax,0x0c(%esp)
00001478	movl	0x10(%ebp),%eax
0000147b	movl	%eax,0x08(%esp)
0000147f	movl	0x0c(%ebp),%esi
00001482	leal	0x04(%esi),%eax
00001485	movl	%eax,0x9c(%ebp)
00001488	movl	%eax,0x04(%esp)
0000148c	movl	0x08(%ebp),%edi
0000148f	movl	%edi,(%esp)
00001492	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00001497	movl	%ebx,%ecx
00001499	movl	(%esi),%eax
0000149b	movl	%eax,(%edi)
0000149d	testb	$0x01,CMDLPicker::ChainToMap()::chained-0x1441(%ecx)
000014a4	jne	0x000014e3
000014a6	movb	$0x01,CMDLPicker::ChainToMap()::chained-0x1441(%ecx)
000014ad	leal	0xd6fca-0x1441(%ecx),%eax
000014b3	movl	%ecx,%edi
000014b5	movl	%eax,(%esp)
000014b8	calll	vgui::FindOrAddPanelMessageMap(char const*)
000014bd	movl	%eax,%esi
000014bf	movl	%edi,%ecx
000014c1	leal	CMDLPicker::GetPanelClassName()-0x1441(%ecx),%eax
000014c7	movl	%eax,0x1c(%esi)
000014ca	testl	%esi,%esi
000014cc	je	0x000014e3
000014ce	leal	0xd6fb9-0x1441(%ecx),%eax
000014d4	movl	%ecx,%edi
000014d6	movl	%eax,(%esp)
000014d9	calll	vgui::FindOrAddPanelMessageMap(char const*)
000014de	movl	%eax,0x18(%esi)
000014e1	movl	%edi,%ecx
000014e3	testb	$0x01,CMDLPicker::ChainToAnimationMap()::chained-0x1441(%ecx)
000014ea	jne	0x00001529
000014ec	movb	$0x01,CMDLPicker::ChainToAnimationMap()::chained-0x1441(%ecx)
000014f3	leal	0xd6fca-0x1441(%ecx),%eax
000014f9	movl	%ecx,%edi
000014fb	movl	%eax,(%esp)
000014fe	calll	FindOrAddPanelAnimationMap(char const*)
00001503	movl	%eax,%esi
00001505	movl	%edi,%ecx
00001507	leal	CMDLPicker::GetPanelClassName()-0x1441(%ecx),%eax
0000150d	movl	%eax,0x18(%esi)
00001510	testl	%esi,%esi
00001512	je	0x00001529
00001514	leal	0xd6fb9-0x1441(%ecx),%eax
0000151a	movl	%ecx,%edi
0000151c	movl	%eax,(%esp)
0000151f	calll	FindOrAddPanelAnimationMap(char const*)
00001524	movl	%eax,0x14(%esi)
00001527	movl	%edi,%ecx
00001529	testb	$0x01,CMDLPicker::KB_ChainToMap()::chained-0x1441(%ecx)
00001530	jne	0x0000156f
00001532	movb	$0x01,CMDLPicker::KB_ChainToMap()::chained-0x1441(%ecx)
00001539	leal	0xd6fca-0x1441(%ecx),%eax
0000153f	movl	%ecx,%edi
00001541	movl	%eax,(%esp)
00001544	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001549	movl	%eax,%esi
0000154b	movl	%edi,%ecx
0000154d	leal	CMDLPicker::GetPanelClassName()-0x1441(%ecx),%eax
00001553	movl	%eax,0x44(%esi)
00001556	testl	%esi,%esi
00001558	je	0x0000156f
0000155a	leal	0xd6fb9-0x1441(%ecx),%eax
00001560	movl	%ecx,%edi
00001562	movl	%eax,(%esp)
00001565	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000156a	movl	%eax,0x18(%esi)
0000156d	movl	%edi,%ecx
0000156f	movl	%ecx,0xa4(%ebp)
00001572	testb	$0x01,CMDLPicker::PanelMessageFunc_OnAssetSelected::InitVar()::bAdded-0x1441(%ecx)
00001579	jne	0x000015d4
0000157b	movl	0xa4(%ebp),%eax
0000157e	movb	$0x01,CMDLPicker::PanelMessageFunc_OnAssetSelected::InitVar()::bAdded-0x1441(%eax)
00001585	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xcc(%ebp)
0000158c	movl	$0x000003c9,0xc8(%ebp)
00001593	movsd	0xc8(%ebp),%xmm0
00001598	movsd	%xmm0,0x04(%esp)
0000159e	leal	0xd703d-0x1441(%eax),%eax
000015a4	movl	%eax,(%esp)
000015a7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
000015af	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000015b7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000015bf	movl	$0x00000006,0x10(%esp)
000015c7	movl	$0x00000001,0x0c(%esp)
000015cf	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000015d4	movl	0xa4(%ebp),%eax
000015d7	testb	$0x01,CMDLPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x1441(%eax)
000015de	jne	0x00001639
000015e0	movl	0xa4(%ebp),%eax
000015e3	movb	$0x01,CMDLPicker::PanelMessageFunc_OnCheckButtonChecked::InitVar()::bAdded-0x1441(%eax)
000015ea	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xd4(%ebp)
000015f1	movl	$0x000003c1,0xd0(%ebp)
000015f8	movsd	0xd0(%ebp),%xmm0
000015fd	movsd	%xmm0,0x04(%esp)
00001603	leal	0xd702a-0x1441(%eax),%eax
00001609	movl	%eax,(%esp)
0000160c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
00001614	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
0000161c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00001624	movl	$0x00000006,0x10(%esp)
0000162c	movl	$0x00000001,0x0c(%esp)
00001634	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001639	movl	0xa4(%ebp),%eax
0000163c	testb	$0x01,CMDLPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x1441(%eax)
00001643	jne	0x0000169e
00001645	movl	0xa4(%ebp),%eax
00001648	movb	$0x01,CMDLPicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x1441(%eax)
0000164f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xdc(%ebp)
00001656	movl	$0x000003bd,0xd8(%ebp)
0000165d	movsd	0xd8(%ebp),%xmm0
00001662	movsd	%xmm0,0x04(%esp)
00001668	leal	0xd701d-0x1441(%eax),%eax
0000166e	movl	%eax,(%esp)
00001671	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
00001679	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
00001681	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00001689	movl	$0x00000006,0x10(%esp)
00001691	movl	$0x00000001,0x0c(%esp)
00001699	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000169e	movl	0xa4(%ebp),%eax
000016a1	testb	$0x01,CMDLPicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x1441(%eax)
000016a8	jne	0x00001703
000016aa	movl	0xa4(%ebp),%eax
000016ad	movb	$0x01,CMDLPicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x1441(%eax)
000016b4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xe4(%ebp)
000016bb	movl	$0x000003cd,0xe0(%ebp)
000016c2	movsd	0xe0(%ebp),%xmm0
000016c7	movsd	%xmm0,0x04(%esp)
000016cd	leal	0xd7011-0x1441(%eax),%eax
000016d3	movl	%eax,(%esp)
000016d6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
000016de	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000016e6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000016ee	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000016f6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000016fe	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001703	movl	0xa4(%ebp),%eax
00001706	testb	$0x01,CMDLPicker::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x1441(%eax)
0000170d	jne	0x0000176a
0000170f	movl	0xa4(%ebp),%ecx
00001712	movb	$0x01,CMDLPicker::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x1441(%ecx)
00001719	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xec(%ebp)
00001720	movl	$0x000003d1,0xe8(%ebp)
00001727	leal	0xd700d-0x1441(%ecx),%eax
0000172d	movl	%eax,0x14(%esp)
00001731	movsd	0xe8(%ebp),%xmm0
00001736	movsd	%xmm0,0x04(%esp)
0000173c	leal	0xd6ffb-0x1441(%ecx),%eax
00001742	movl	%eax,(%esp)
00001745	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%esp)
0000174d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
00001755	movl	$0x00000001,0x10(%esp)
0000175d	movl	$0x00000001,0x0c(%esp)
00001765	calll	CMDLPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000176a	movl	0x14(%ebp),%ecx
0000176d	movl	0x08(%ebp),%eax
00001770	movl	$0xffffffff,0x00000290(%eax)
0000177a	movl	$0xffffffff,0x0000028c(%eax)
00001784	movl	%ecx,0x00000294(%eax)
0000178a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000027c(%eax)
00001794	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000280(%eax)
0000179e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000274(%eax)
000017a8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000278(%eax)
000017b2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%eax)
000017bc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000270(%eax)
000017c6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000264(%eax)
000017d0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%eax)
000017da	leal	0x00000290(%eax),%eax
000017e0	movl	%eax,(%esp)
000017e3	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000017eb	calll	vgui::PHandle::Set(vgui::Panel*)
000017f0	movl	$0x000001c4,(%esp)
000017f7	calll	operator new(unsigned long)
000017fc	movl	%eax,%edi
000017fe	movl	0xa4(%ebp),%eax
00001801	leal	0xd67b1-0x1441(%eax),%eax
00001807	movl	%eax,0x08(%esp)
0000180b	movl	0x08(%ebp),%esi
0000180e	movl	%esi,0x04(%esp)
00001812	movl	%edi,(%esp)
00001815	movl	$0x00000001,0x10(%esp)
0000181d	movl	$0x00000001,0x0c(%esp)
00001825	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
0000182a	movl	%edi,0x00000258(%esi)
00001830	movl	$0x3f2b851f,0xc4(%ebp)
00001837	movl	$0x3ea8f5c3,0xc0(%ebp)
0000183e	leal	0xc0(%ebp),%eax
00001841	movl	%eax,0x04(%esp)
00001845	movl	%edi,(%esp)
00001848	calll	vgui::Splitter::RespaceSplitters(float*)
0000184d	movl	0x08(%ebp),%eax
00001850	movl	0x00000258(%eax),%eax
00001856	movl	%eax,(%esp)
00001859	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001861	calll	vgui::Panel::GetChild(int)
00001866	movl	%eax,%edi
00001868	movl	0x08(%ebp),%eax
0000186b	movl	0x00000258(%eax),%eax
00001871	movl	%eax,(%esp)
00001874	movl	$0x00000001,0x04(%esp)
0000187c	calll	vgui::Panel::GetChild(int)
00001881	movl	%eax,%esi
00001883	movl	(%edi),%eax
00001885	movl	0x30(%eax),%eax
00001888	movl	%edi,(%esp)
0000188b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001893	call	*%eax
00001895	movl	%edi,0x04(%esp)
00001899	movl	0x08(%ebp),%eax
0000189c	movl	%eax,(%esp)
0000189f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000018a7	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
000018ac	movl	$0x000001c4,(%esp)
000018b3	calll	operator new(unsigned long)
000018b8	movl	%eax,%edi
000018ba	movl	0xa4(%ebp),%eax
000018bd	leal	0xd67c5-0x1441(%eax),%eax
000018c3	movl	%eax,0x08(%esp)
000018c7	movl	%esi,0x04(%esp)
000018cb	movl	%edi,(%esp)
000018ce	movl	$0x00000001,0x10(%esp)
000018d6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000018de	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000018e3	movl	0x08(%ebp),%eax
000018e6	movl	%edi,0x0000025c(%eax)
000018ec	movl	%edi,(%esp)
000018ef	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000018f7	calll	vgui::Panel::GetChild(int)
000018fc	movl	%eax,%edi
000018fe	movl	0x08(%ebp),%eax
00001901	movl	0x0000025c(%eax),%eax
00001907	movl	%eax,(%esp)
0000190a	movl	$0x00000001,0x04(%esp)
00001912	calll	vgui::Panel::GetChild(int)
00001917	movl	%eax,%esi
00001919	movl	$0x00000c90,(%esp)
00001920	calll	operator new(unsigned long)
00001925	movl	%eax,%ebx
00001927	movl	0xa4(%ebp),%eax
0000192a	leal	0xd67d5-0x1441(%eax),%eax
00001930	movl	%eax,0x08(%esp)
00001934	movl	%edi,0x04(%esp)
00001938	movl	%ebx,(%esp)
0000193b	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00001940	movl	0x08(%ebp),%ecx
00001943	movl	%ebx,0x00000254(%ecx)
00001949	movl	(%ecx),%eax
0000194b	movl	0x000002b8(%eax),%eax
00001951	movl	%ebx,0x04(%esp)
00001955	movl	%ecx,(%esp)
00001958	call	*%eax
0000195a	movl	$0x00000230,(%esp)
00001961	calll	operator new(unsigned long)
00001966	movl	%eax,%edi
00001968	movl	0xa4(%ebp),%eax
0000196b	leal	0xd67e0-0x1441(%eax),%eax
00001971	movl	%eax,0x08(%esp)
00001975	movl	%esi,0x04(%esp)
00001979	movl	%edi,(%esp)
0000197c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00001984	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
00001989	movl	0x08(%ebp),%ecx
0000198c	movl	%edi,0x00000260(%ecx)
00001992	movl	(%edi),%eax
00001994	movl	0x000000b4(%eax),%eax
0000199a	movl	%ecx,0x04(%esp)
0000199e	movl	%edi,(%esp)
000019a1	call	*%eax
000019a3	movl	0x08(%ebp),%eax
000019a6	leal	0x00000264(%eax),%eax
000019ac	movl	%eax,0xa0(%ebp)
000019af	movl	0x14(%ebp),%eax
000019b2	testb	$0x01,%al
000019b4	movl	%eax,%ebx
000019b6	je	0x00001a6b
000019bc	movl	$0x000001b8,(%esp)
000019c3	calll	operator new(unsigned long)
000019c8	movl	%eax,%edi
000019ca	movl	0x08(%ebp),%esi
000019cd	movl	0x00000260(%esi),%eax
000019d3	movl	0xa4(%ebp),%ecx
000019d6	leal	0xd67eb-0x1441(%ecx),%ecx
000019dc	movl	%ecx,0x08(%esp)
000019e0	movl	%eax,0x04(%esp)
000019e4	movl	%edi,(%esp)
000019e7	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000019ec	movl	%edi,0x00000264(%esi)
000019f2	movl	(%edi),%eax
000019f4	movl	0x000000b4(%eax),%eax
000019fa	movl	%esi,0x04(%esp)
000019fe	movl	%edi,(%esp)
00001a01	call	*%eax
00001a03	movl	0xa0(%ebp),%eax
00001a06	movl	(%eax),%ecx
00001a08	movl	(%ecx),%eax
00001a0a	movl	0x00000354(%eax),%eax
00001a10	movl	0xa4(%ebp),%edx
00001a13	leal	0xd67f6-0x1441(%edx),%edx
00001a19	movl	%edx,0x04(%esp)
00001a1d	movl	%ecx,(%esp)
00001a20	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001a28	call	*%eax
00001a2a	movl	0x08(%ebp),%eax
00001a2d	movl	%eax,(%esp)
00001a30	calll	CMDLPicker::RefreshRenderSettings()
00001a35	movl	0xa0(%ebp),%eax
00001a38	movl	(%eax),%eax
00001a3a	movl	0xa4(%ebp),%ecx
00001a3d	leal	0xd6813-0x1441(%ecx),%ecx
00001a43	movl	%ecx,0x04(%esp)
00001a47	movl	%eax,(%esp)
00001a4a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001a52	calll	vgui::Panel::FindChildByName(char const*, bool)
00001a57	movl	(%eax),%ecx
00001a59	movl	0x000000b4(%ecx),%ecx
00001a5f	movl	0x08(%ebp),%edx
00001a62	movl	%edx,0x04(%esp)
00001a66	movl	%eax,(%esp)
00001a69	call	*%ecx
00001a6b	testb	$0x02,%bl
00001a6e	je	0x00001bcd
00001a74	movl	$0x000001b8,(%esp)
00001a7b	calll	operator new(unsigned long)
00001a80	movl	%eax,%edi
00001a82	movl	0x08(%ebp),%esi
00001a85	movl	0x00000260(%esi),%eax
00001a8b	movl	0xa4(%ebp),%ecx
00001a8e	leal	0xd6824-0x1441(%ecx),%ecx
00001a94	movl	%ecx,0x08(%esp)
00001a98	movl	%eax,0x04(%esp)
00001a9c	movl	%edi,(%esp)
00001a9f	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00001aa4	movl	%edi,0x00000268(%esi)
00001aaa	movl	$0x00000280,(%esp)
00001ab1	calll	operator new(unsigned long)
00001ab6	movl	%eax,%edi
00001ab8	movl	0x08(%ebp),%esi
00001abb	movl	0x00000268(%esi),%eax
00001ac1	movl	0xa4(%ebp),%ebx
00001ac4	leal	0xd6832-0x1441(%ebx),%ecx
00001aca	movl	%ecx,0x08(%esp)
00001ace	movl	%eax,0x04(%esp)
00001ad2	movl	%edi,(%esp)
00001ad5	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00001ada	movl	%edi,0x0000027c(%esi)
00001ae0	movl	(%edi),%eax
00001ae2	movl	0x0000034c(%eax),%eax
00001ae8	leal	0xd6840-0x1441(%ebx),%ecx
00001aee	movl	%ecx,0x0c(%esp)
00001af2	movl	%ecx,0x08(%esp)
00001af6	movl	%edi,(%esp)
00001af9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00001b01	movl	$0x00000034,0x10(%esp)
00001b09	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001b11	call	*%eax
00001b13	movl	0x08(%ebp),%edx
00001b16	movl	0x0000027c(%edx),%eax
00001b1c	movl	(%eax),%ecx
00001b1e	movl	0x000000b4(%ecx),%ecx
00001b24	movl	%edx,0x04(%esp)
00001b28	movl	%eax,(%esp)
00001b2b	call	*%ecx
00001b2d	movl	0x08(%ebp),%eax
00001b30	movl	0x0000027c(%eax),%ecx
00001b36	movl	(%ecx),%eax
00001b38	movl	0x00000410(%eax),%eax
00001b3e	movl	%ecx,(%esp)
00001b41	movl	$0x00000001,0x04(%esp)
00001b49	call	*%eax
00001b4b	movl	0x08(%ebp),%eax
00001b4e	movl	0x0000027c(%eax),%eax
00001b54	movl	(%eax),%ecx
00001b56	movl	0x00000420(%ecx),%ecx
00001b5c	movl	0xa4(%ebp),%edx
00001b5f	leal	0xd6849-0x1441(%edx),%edx
00001b65	movl	%edx,0x04(%esp)
00001b69	movl	%eax,(%esp)
00001b6c	call	*%ecx
00001b6e	movl	0x08(%ebp),%eax
00001b71	movl	0x0000027c(%eax),%ecx
00001b77	movl	(%ecx),%eax
00001b79	movl	0x00000240(%eax),%eax
00001b7f	movl	%ecx,(%esp)
00001b82	movl	$0x00000001,0x04(%esp)
00001b8a	call	*%eax
00001b8c	movl	0x08(%ebp),%eax
00001b8f	movl	0x0000027c(%eax),%eax
00001b95	movl	%eax,(%esp)
00001b98	movl	$0xfffffffa,0x18(%esp)
00001ba0	movl	$0xfffffffa,0x14(%esp)
00001ba8	movl	$0x00000006,0x10(%esp)
00001bb0	movl	$0x00000006,0x0c(%esp)
00001bb8	movl	$0x00000003,0x08(%esp)
00001bc0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001bc8	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00001bcd	movl	0x14(%ebp),%eax
00001bd0	testb	$0x04,%al
00001bd2	je	0x00001d31
00001bd8	movl	$0x000001b8,(%esp)
00001bdf	calll	operator new(unsigned long)
00001be4	movl	%eax,%edi
00001be6	movl	0x08(%ebp),%esi
00001be9	movl	0x00000260(%esi),%eax
00001bef	movl	0xa4(%ebp),%ecx
00001bf2	leal	0xd686a-0x1441(%ecx),%ecx
00001bf8	movl	%ecx,0x08(%esp)
00001bfc	movl	%eax,0x04(%esp)
00001c00	movl	%edi,(%esp)
00001c03	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00001c08	movl	%edi,0x0000026c(%esi)
00001c0e	movl	$0x00000280,(%esp)
00001c15	calll	operator new(unsigned long)
00001c1a	movl	%eax,%edi
00001c1c	movl	0x08(%ebp),%esi
00001c1f	movl	0x0000026c(%esi),%eax
00001c25	movl	0xa4(%ebp),%ebx
00001c28	leal	0xd6879-0x1441(%ebx),%ecx
00001c2e	movl	%ecx,0x08(%esp)
00001c32	movl	%eax,0x04(%esp)
00001c36	movl	%edi,(%esp)
00001c39	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00001c3e	movl	%edi,0x00000280(%esi)
00001c44	movl	(%edi),%eax
00001c46	movl	0x0000034c(%eax),%eax
00001c4c	leal	0xd6888-0x1441(%ebx),%ecx
00001c52	movl	%ecx,0x0c(%esp)
00001c56	movl	%ecx,0x08(%esp)
00001c5a	movl	%edi,(%esp)
00001c5d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00001c65	movl	$0x00000034,0x10(%esp)
00001c6d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001c75	call	*%eax
00001c77	movl	0x08(%ebp),%edx
00001c7a	movl	0x00000280(%edx),%eax
00001c80	movl	(%eax),%ecx
00001c82	movl	0x000000b4(%ecx),%ecx
00001c88	movl	%edx,0x04(%esp)
00001c8c	movl	%eax,(%esp)
00001c8f	call	*%ecx
00001c91	movl	0x08(%ebp),%eax
00001c94	movl	0x00000280(%eax),%ecx
00001c9a	movl	(%ecx),%eax
00001c9c	movl	0x00000410(%eax),%eax
00001ca2	movl	%ecx,(%esp)
00001ca5	movl	$0x00000001,0x04(%esp)
00001cad	call	*%eax
00001caf	movl	0x08(%ebp),%eax
00001cb2	movl	0x00000280(%eax),%eax
00001cb8	movl	(%eax),%ecx
00001cba	movl	0x00000420(%ecx),%ecx
00001cc0	movl	0xa4(%ebp),%edx
00001cc3	leal	0xd6849-0x1441(%edx),%edx
00001cc9	movl	%edx,0x04(%esp)
00001ccd	movl	%eax,(%esp)
00001cd0	call	*%ecx
00001cd2	movl	0x08(%ebp),%eax
00001cd5	movl	0x00000280(%eax),%ecx
00001cdb	movl	(%ecx),%eax
00001cdd	movl	0x00000240(%eax),%eax
00001ce3	movl	%ecx,(%esp)
00001ce6	movl	$0x00000001,0x04(%esp)
00001cee	call	*%eax
00001cf0	movl	0x08(%ebp),%eax
00001cf3	movl	0x00000280(%eax),%eax
00001cf9	movl	%eax,(%esp)
00001cfc	movl	$0xfffffffa,0x18(%esp)
00001d04	movl	$0xfffffffa,0x14(%esp)
00001d0c	movl	$0x00000006,0x10(%esp)
00001d14	movl	$0x00000006,0x0c(%esp)
00001d1c	movl	$0x00000003,0x08(%esp)
00001d24	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001d2c	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00001d31	movl	0x14(%ebp),%eax
00001d34	testb	$0x08,%al
00001d36	je	0x00001e95
00001d3c	movl	$0x000001b8,(%esp)
00001d43	calll	operator new(unsigned long)
00001d48	movl	%eax,%edi
00001d4a	movl	0x08(%ebp),%esi
00001d4d	movl	0x00000260(%esi),%eax
00001d53	movl	0xa4(%ebp),%ecx
00001d56	leal	0xd6891-0x1441(%ecx),%ecx
00001d5c	movl	%ecx,0x08(%esp)
00001d60	movl	%eax,0x04(%esp)
00001d64	movl	%edi,(%esp)
00001d67	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00001d6c	movl	%edi,0x00000270(%esi)
00001d72	movl	$0x00000280,(%esp)
00001d79	calll	operator new(unsigned long)
00001d7e	movl	%eax,%edi
00001d80	movl	0x08(%ebp),%esi
00001d83	movl	0x00000270(%esi),%eax
00001d89	movl	0xa4(%ebp),%ebx
00001d8c	leal	0xd689b-0x1441(%ebx),%ecx
00001d92	movl	%ecx,0x08(%esp)
00001d96	movl	%eax,0x04(%esp)
00001d9a	movl	%edi,(%esp)
00001d9d	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00001da2	movl	%edi,0x00000284(%esi)
00001da8	movl	(%edi),%eax
00001daa	movl	0x0000034c(%eax),%eax
00001db0	leal	0xd68a5-0x1441(%ebx),%ecx
00001db6	movl	%ecx,0x0c(%esp)
00001dba	movl	%ecx,0x08(%esp)
00001dbe	movl	%edi,(%esp)
00001dc1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
00001dc9	movl	$0x00000034,0x10(%esp)
00001dd1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001dd9	call	*%eax
00001ddb	movl	0x08(%ebp),%edx
00001dde	movl	0x00000284(%edx),%eax
00001de4	movl	(%eax),%ecx
00001de6	movl	0x000000b4(%ecx),%ecx
00001dec	movl	%edx,0x04(%esp)
00001df0	movl	%eax,(%esp)
00001df3	call	*%ecx
00001df5	movl	0x08(%ebp),%eax
00001df8	movl	0x00000284(%eax),%ecx
00001dfe	movl	(%ecx),%eax
00001e00	movl	0x00000410(%eax),%eax
00001e06	movl	%ecx,(%esp)
00001e09	movl	$0x00000001,0x04(%esp)
00001e11	call	*%eax
00001e13	movl	0x08(%ebp),%eax
00001e16	movl	0x00000284(%eax),%eax
00001e1c	movl	(%eax),%ecx
00001e1e	movl	0x00000420(%ecx),%ecx
00001e24	movl	0xa4(%ebp),%edx
00001e27	leal	0xd6849-0x1441(%edx),%edx
00001e2d	movl	%edx,0x04(%esp)
00001e31	movl	%eax,(%esp)
00001e34	call	*%ecx
00001e36	movl	0x08(%ebp),%eax
00001e39	movl	0x00000284(%eax),%ecx
00001e3f	movl	(%ecx),%eax
00001e41	movl	0x00000240(%eax),%eax
00001e47	movl	%ecx,(%esp)
00001e4a	movl	$0x00000001,0x04(%esp)
00001e52	call	*%eax
00001e54	movl	0x08(%ebp),%eax
00001e57	movl	0x00000284(%eax),%eax
00001e5d	movl	%eax,(%esp)
00001e60	movl	$0xfffffffa,0x18(%esp)
00001e68	movl	$0xfffffffa,0x14(%esp)
00001e70	movl	$0x00000006,0x10(%esp)
00001e78	movl	$0x00000006,0x0c(%esp)
00001e80	movl	$0x00000003,0x08(%esp)
00001e88	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00001e90	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00001e95	movl	0x14(%ebp),%eax
00001e98	testb	$0x10,%al
00001e9a	je	0x000021c3
00001ea0	movl	$0x000001b8,(%esp)
00001ea7	calll	operator new(unsigned long)
00001eac	movl	%eax,%edi
00001eae	movl	0x08(%ebp),%esi
00001eb1	movl	0x00000260(%esi),%eax
00001eb7	movl	0xa4(%ebp),%ecx
00001eba	leal	0xd68aa-0x1441(%ecx),%ecx
00001ec0	movl	%ecx,0x08(%esp)
00001ec4	movl	%eax,0x04(%esp)
00001ec8	movl	%edi,(%esp)
00001ecb	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00001ed0	movl	%edi,0x00000274(%esi)
00001ed6	movl	(%edi),%eax
00001ed8	movl	0x000000b4(%eax),%eax
00001ede	movl	%esi,0x04(%esp)
00001ee2	movl	%edi,(%esp)
00001ee5	call	*%eax
00001ee7	movl	0x08(%ebp),%eax
00001eea	movl	0x00000274(%eax),%ecx
00001ef0	movl	(%ecx),%eax
00001ef2	movl	0x00000354(%eax),%eax
00001ef8	movl	0xa4(%ebp),%edx
00001efb	leal	0xd68b3-0x1441(%edx),%edx
00001f01	movl	%edx,0x04(%esp)
00001f05	movl	%ecx,(%esp)
00001f08	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001f10	call	*%eax
00001f12	movl	0x08(%ebp),%eax
00001f15	movl	0x00000274(%eax),%eax
00001f1b	movl	0xa4(%ebp),%ecx
00001f1e	leal	0xd68ce-0x1441(%ecx),%ecx
00001f24	movl	%ecx,0x04(%esp)
00001f28	movl	%eax,(%esp)
00001f2b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001f33	calll	vgui::Panel::FindChildByName(char const*, bool)
00001f38	movl	%eax,%esi
00001f3a	movl	(%esi),%eax
00001f3c	movl	0x00000368(%eax),%edi
00001f42	movl	0x000000f8(%eax),%eax
00001f48	movl	%esi,(%esp)
00001f4b	call	*%eax
00001f4d	movl	%eax,0xbc(%ebp)
00001f50	movl	0xbc(%ebp),%eax
00001f53	movl	%eax,0x04(%esp)
00001f57	movl	%esi,(%esp)
00001f5a	call	*%edi
00001f5c	movl	(%esi),%eax
00001f5e	movl	0x0000036c(%eax),%edi
00001f64	movl	0x000000f8(%eax),%eax
00001f6a	movl	%esi,(%esp)
00001f6d	call	*%eax
00001f6f	movl	%eax,0xb8(%ebp)
00001f72	movl	0xb8(%ebp),%eax
00001f75	movl	%eax,0x04(%esp)
00001f79	movl	%esi,(%esp)
00001f7c	call	*%edi
00001f7e	movl	0x08(%ebp),%eax
00001f81	movl	0x00000274(%eax),%eax
00001f87	movl	0xa4(%ebp),%ecx
00001f8a	leal	0xd68dc-0x1441(%ecx),%ecx
00001f90	movl	%ecx,0x04(%esp)
00001f94	movl	%eax,(%esp)
00001f97	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00001f9f	calll	vgui::Panel::FindChildByName(char const*, bool)
00001fa4	movl	%eax,%esi
00001fa6	movl	(%esi),%eax
00001fa8	movl	0x00000368(%eax),%edi
00001fae	movl	0x000000f8(%eax),%eax
00001fb4	movl	%esi,(%esp)
00001fb7	call	*%eax
00001fb9	movl	%eax,0xb4(%ebp)
00001fbc	movl	0xb4(%ebp),%eax
00001fbf	movl	%eax,0x04(%esp)
00001fc3	movl	%esi,(%esp)
00001fc6	call	*%edi
00001fc8	movl	(%esi),%eax
00001fca	movl	0x0000036c(%eax),%edi
00001fd0	movl	0x000000f8(%eax),%eax
00001fd6	movl	%esi,(%esp)
00001fd9	call	*%eax
00001fdb	movl	%eax,0xb0(%ebp)
00001fde	movl	0xb0(%ebp),%eax
00001fe1	movl	%eax,0x04(%esp)
00001fe5	movl	%esi,(%esp)
00001fe8	call	*%edi
00001fea	movl	0x08(%ebp),%eax
00001fed	movl	0x00000274(%eax),%eax
00001ff3	movl	0xa4(%ebp),%ecx
00001ff6	leal	0xd68e9-0x1441(%ecx),%ecx
00001ffc	movl	%ecx,0x04(%esp)
00002000	movl	%eax,(%esp)
00002003	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000200b	calll	vgui::Panel::FindChildByName(char const*, bool)
00002010	movl	%eax,%esi
00002012	movl	(%esi),%eax
00002014	movl	0x00000368(%eax),%edi
0000201a	movl	0x000000f8(%eax),%eax
00002020	movl	%esi,(%esp)
00002023	call	*%eax
00002025	movl	%eax,0xac(%ebp)
00002028	movl	0xac(%ebp),%eax
0000202b	movl	%eax,0x04(%esp)
0000202f	movl	%esi,(%esp)
00002032	call	*%edi
00002034	movl	(%esi),%eax
00002036	movl	0x0000036c(%eax),%edi
0000203c	movl	0x000000f8(%eax),%eax
00002042	movl	%esi,(%esp)
00002045	call	*%eax
00002047	movl	%eax,0xa8(%ebp)
0000204a	movl	0xa8(%ebp),%eax
0000204d	movl	%eax,0x04(%esp)
00002051	movl	%esi,(%esp)
00002054	call	*%edi
00002056	movl	$0x00000280,(%esp)
0000205d	calll	operator new(unsigned long)
00002062	movl	%eax,%edi
00002064	movl	0x08(%ebp),%esi
00002067	movl	0x00000274(%esi),%eax
0000206d	movl	0xa4(%ebp),%ebx
00002070	leal	0xd68f7-0x1441(%ebx),%ecx
00002076	movl	%ecx,0x08(%esp)
0000207a	movl	%eax,0x04(%esp)
0000207e	movl	%edi,(%esp)
00002081	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00002086	movl	%edi,0x00000288(%esi)
0000208c	movl	(%edi),%eax
0000208e	movl	0x0000034c(%eax),%eax
00002094	leal	0xd6900-0x1441(%ebx),%ecx
0000209a	movl	%ecx,0x0c(%esp)
0000209e	movl	%ecx,0x08(%esp)
000020a2	movl	%edi,(%esp)
000020a5	movl	$0x00000001,0x14(%esp)
000020ad	movl	$0x000000fa,0x10(%esp)
000020b5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000020bd	call	*%eax
000020bf	movl	0x08(%ebp),%eax
000020c2	movl	0x00000288(%eax),%ecx
000020c8	movl	(%ecx),%eax
000020ca	movl	0x0000034c(%eax),%eax
000020d0	movl	0xa4(%ebp),%edx
000020d3	leal	0xd6904-0x1441(%edx),%edx
000020d9	movl	%edx,0x0c(%esp)
000020dd	movl	%edx,0x08(%esp)
000020e1	movl	%ecx,(%esp)
000020e4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000020ec	movl	$0x00000034,0x10(%esp)
000020f4	movl	$0x00000001,0x04(%esp)
000020fc	call	*%eax
000020fe	movl	0x08(%ebp),%edx
00002101	movl	0x00000288(%edx),%eax
00002107	movl	(%eax),%ecx
00002109	movl	0x000000b4(%ecx),%ecx
0000210f	movl	%edx,0x04(%esp)
00002113	movl	%eax,(%esp)
00002116	call	*%ecx
00002118	movl	0x08(%ebp),%eax
0000211b	movl	0x00000288(%eax),%ecx
00002121	movl	(%ecx),%eax
00002123	movl	0x00000410(%eax),%eax
00002129	movl	%ecx,(%esp)
0000212c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002134	call	*%eax
00002136	movl	0x08(%ebp),%eax
00002139	movl	0x00000288(%eax),%eax
0000213f	movl	(%eax),%ecx
00002141	movl	0x00000420(%ecx),%ecx
00002147	movl	0xa4(%ebp),%edx
0000214a	leal	0xd690a-0x1441(%edx),%edx
00002150	movl	%edx,0x04(%esp)
00002154	movl	%eax,(%esp)
00002157	call	*%ecx
00002159	movl	0x08(%ebp),%eax
0000215c	movl	0x00000288(%eax),%ecx
00002162	movl	(%ecx),%eax
00002164	movl	0x00000240(%eax),%eax
0000216a	movl	%ecx,(%esp)
0000216d	movl	$0x00000001,0x04(%esp)
00002175	call	*%eax
00002177	movl	0x08(%ebp),%eax
0000217a	movl	0x00000288(%eax),%eax
00002180	movl	%eax,(%esp)
00002183	movl	$0xfffffffa,0x18(%esp)
0000218b	movl	$0xfffffffa,0x14(%esp)
00002193	movl	$0x00000048,0x10(%esp)
0000219b	movl	$0x00000006,0x0c(%esp)
000021a3	movl	$0x00000003,0x08(%esp)
000021ab	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000021b3	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
000021b8	movl	0x08(%ebp),%eax
000021bb	movl	%eax,(%esp)
000021be	calll	CMDLPicker::RefreshRenderSettings()
000021c3	movl	0x14(%ebp),%eax
000021c6	testb	$0x20,%al
000021c8	je	0x0000245e
000021ce	movl	$0x000001b8,(%esp)
000021d5	calll	operator new(unsigned long)
000021da	movl	%eax,%edi
000021dc	movl	0x08(%ebp),%esi
000021df	movl	0x00000260(%esi),%eax
000021e5	movl	0xa4(%ebp),%ecx
000021e8	leal	0xd6922-0x1441(%ecx),%ecx
000021ee	movl	%ecx,0x08(%esp)
000021f2	movl	%eax,0x04(%esp)
000021f6	movl	%edi,(%esp)
000021f9	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000021fe	movl	%edi,0x00000278(%esi)
00002204	movl	$0x0000022c,(%esp)
0000220b	calll	operator new(unsigned long)
00002210	movl	%eax,%edi
00002212	movl	0x08(%ebp),%esi
00002215	movl	0x00000278(%esi),%eax
0000221b	movl	%esi,0x0c(%esp)
0000221f	movl	0xa4(%ebp),%ebx
00002222	leal	0xd6931-0x1441(%ebx),%ecx
00002228	movl	%ecx,0x08(%esp)
0000222c	movl	%eax,0x04(%esp)
00002230	movl	%edi,(%esp)
00002233	calll	CColorPickerButton::CColorPickerButton(vgui::Panel*, char const*, vgui::Panel*)
00002238	movl	0x00000278(%esi),%ecx
0000223e	movl	(%ecx),%eax
00002240	movl	0x00000354(%eax),%eax
00002246	leal	0xd6941-0x1441(%ebx),%edx
0000224c	movl	%edx,0x04(%esp)
00002250	movl	%ecx,(%esp)
00002253	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000225b	call	*%eax
0000225d	movl	0x08(%ebp),%eax
00002260	movl	0x00000278(%eax),%eax
00002266	movl	0xa4(%ebp),%ecx
00002269	leal	0xd6962-0x1441(%ecx),%ecx
0000226f	movl	%ecx,0x04(%esp)
00002273	movl	%eax,(%esp)
00002276	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000227e	calll	vgui::Panel::FindChildByName(char const*, bool)
00002283	movl	(%eax),%ecx
00002285	movl	0x0000034c(%ecx),%ecx
0000228b	movl	0xa4(%ebp),%edx
0000228e	leal	0xd696c-0x1441(%edx),%esi
00002294	movl	%esi,0x04(%esp)
00002298	movl	%eax,(%esp)
0000229b	call	*%ecx
0000229d	movl	0x08(%ebp),%eax
000022a0	movl	0x00000278(%eax),%eax
000022a6	movl	0xa4(%ebp),%ecx
000022a9	leal	0xd6970-0x1441(%ecx),%ecx
000022af	movl	%ecx,0x04(%esp)
000022b3	movl	%eax,(%esp)
000022b6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000022be	calll	vgui::Panel::FindChildByName(char const*, bool)
000022c3	movl	(%eax),%ecx
000022c5	movl	0x0000034c(%ecx),%ecx
000022cb	movl	%esi,0x04(%esp)
000022cf	movl	%eax,(%esp)
000022d2	call	*%ecx
000022d4	movl	%edi,(%esp)
000022d7	movl	$0x000000ff,0x10(%esp)
000022df	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000022e7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000022ef	movl	$0x000000ff,0x04(%esp)
000022f7	calll	CColorPickerButton::SetColor(int, int, int, int)
000022fc	movl	0x08(%ebp),%eax
000022ff	movl	0x00000278(%eax),%eax
00002305	movl	0xa4(%ebp),%ecx
00002308	leal	0xd697b-0x1441(%ecx),%ecx
0000230e	movl	%ecx,0x04(%esp)
00002312	movl	%eax,(%esp)
00002315	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000231d	calll	vgui::Panel::FindChildByName(char const*, bool)
00002322	movl	(%eax),%ecx
00002324	movl	0x00000348(%ecx),%ecx
0000232a	movl	0xa4(%ebp),%edx
0000232d	leal	0xd698b-0x1441(%edx),%edx
00002333	movl	%edx,0x04(%esp)
00002337	movl	%eax,(%esp)
0000233a	call	*%ecx
0000233c	movl	0x08(%ebp),%eax
0000233f	movl	0x00000278(%eax),%eax
00002345	movl	0xa4(%ebp),%ecx
00002348	leal	0xd698f-0x1441(%ecx),%ecx
0000234e	movl	%ecx,0x04(%esp)
00002352	movl	%eax,(%esp)
00002355	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000235d	calll	vgui::Panel::FindChildByName(char const*, bool)
00002362	movl	(%eax),%ecx
00002364	movl	0x000000b4(%ecx),%ecx
0000236a	movl	0x08(%ebp),%edx
0000236d	movl	%edx,0x04(%esp)
00002371	movl	%eax,(%esp)
00002374	call	*%ecx
00002376	movl	0x08(%ebp),%eax
00002379	movl	0x00000278(%eax),%eax
0000237f	movl	0xa4(%ebp),%ecx
00002382	leal	0xd6997-0x1441(%ecx),%ecx
00002388	movl	%ecx,0x04(%esp)
0000238c	movl	%eax,(%esp)
0000238f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002397	calll	vgui::Panel::FindChildByName(char const*, bool)
0000239c	movl	(%eax),%ecx
0000239e	movl	0x000000b4(%ecx),%ecx
000023a4	movl	0x08(%ebp),%edx
000023a7	movl	%edx,0x04(%esp)
000023ab	movl	%eax,(%esp)
000023ae	call	*%ecx
000023b0	movl	0x08(%ebp),%eax
000023b3	movl	0x00000278(%eax),%eax
000023b9	movl	0xa4(%ebp),%ecx
000023bc	leal	0xd69ad-0x1441(%ecx),%ecx
000023c2	movl	%ecx,0x04(%esp)
000023c6	movl	%eax,(%esp)
000023c9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000023d1	calll	vgui::Panel::FindChildByName(char const*, bool)
000023d6	movl	(%eax),%ecx
000023d8	movl	0x000000b4(%ecx),%ecx
000023de	movl	0x08(%ebp),%edx
000023e1	movl	%edx,0x04(%esp)
000023e5	movl	%eax,(%esp)
000023e8	call	*%ecx
000023ea	movl	0x08(%ebp),%eax
000023ed	movl	0x00000278(%eax),%eax
000023f3	movl	0xa4(%ebp),%ecx
000023f6	leal	0xd69b6-0x1441(%ecx),%ecx
000023fc	movl	%ecx,0x04(%esp)
00002400	movl	%eax,(%esp)
00002403	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000240b	calll	vgui::Panel::FindChildByName(char const*, bool)
00002410	movl	(%eax),%ecx
00002412	movl	0x000000b4(%ecx),%ecx
00002418	movl	0x08(%ebp),%edx
0000241b	movl	%edx,0x04(%esp)
0000241f	movl	%eax,(%esp)
00002422	call	*%ecx
00002424	movl	0x08(%ebp),%eax
00002427	movl	0x00000278(%eax),%eax
0000242d	movl	0xa4(%ebp),%ecx
00002430	leal	0xd69c2-0x1441(%ecx),%ecx
00002436	movl	%ecx,0x04(%esp)
0000243a	movl	%eax,(%esp)
0000243d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002445	calll	vgui::Panel::FindChildByName(char const*, bool)
0000244a	movl	(%eax),%ecx
0000244c	movl	0x000000b4(%ecx),%ecx
00002452	movl	0x08(%ebp),%edx
00002455	movl	%edx,0x04(%esp)
00002459	movl	%eax,(%esp)
0000245c	call	*%ecx
0000245e	movl	0x08(%ebp),%edx
00002461	movl	(%edx),%eax
00002463	movl	0x00000354(%eax),%eax
00002469	movl	0xa4(%ebp),%ecx
0000246c	leal	0xd69d8-0x1441(%ecx),%ecx
00002472	movl	%ecx,0x04(%esp)
00002476	movl	%edx,(%esp)
00002479	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002481	call	*%eax
00002483	movl	0xa0(%ebp),%eax
00002486	movl	(%eax),%eax
00002488	testl	%eax,%eax
0000248a	je	0x000024c3
0000248c	movl	0x08(%ebp),%ecx
0000248f	movl	0x00000260(%ecx),%edx
00002495	movl	(%edx),%ecx
00002497	movl	0x000003b0(%ecx),%ecx
0000249d	movl	0xa4(%ebp),%esi
000024a0	leal	0xd69ef-0x1441(%esi),%esi
000024a6	movl	%esi,0x08(%esp)
000024aa	movl	%eax,0x04(%esp)
000024ae	movl	%edx,(%esp)
000024b1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000024b9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000024c1	call	*%ecx
000024c3	movl	0x08(%ebp),%eax
000024c6	movl	0x00000268(%eax),%eax
000024cc	testl	%eax,%eax
000024ce	je	0x00002507
000024d0	movl	0x08(%ebp),%ecx
000024d3	movl	0x00000260(%ecx),%edx
000024d9	movl	(%edx),%ecx
000024db	movl	0x000003b0(%ecx),%ecx
000024e1	movl	0xa4(%ebp),%esi
000024e4	leal	0xd69f6-0x1441(%esi),%esi
000024ea	movl	%esi,0x08(%esp)
000024ee	movl	%eax,0x04(%esp)
000024f2	movl	%edx,(%esp)
000024f5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000024fd	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00002505	call	*%ecx
00002507	movl	0x08(%ebp),%eax
0000250a	movl	0x0000026c(%eax),%eax
00002510	testl	%eax,%eax
00002512	je	0x0000254b
00002514	movl	0x08(%ebp),%ecx
00002517	movl	0x00000260(%ecx),%edx
0000251d	movl	(%edx),%ecx
0000251f	movl	0x000003b0(%ecx),%ecx
00002525	movl	0xa4(%ebp),%esi
00002528	leal	0xd6a00-0x1441(%esi),%esi
0000252e	movl	%esi,0x08(%esp)
00002532	movl	%eax,0x04(%esp)
00002536	movl	%edx,(%esp)
00002539	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00002541	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00002549	call	*%ecx
0000254b	movl	0x08(%ebp),%eax
0000254e	movl	0x00000270(%eax),%eax
00002554	testl	%eax,%eax
00002556	je	0x0000258f
00002558	movl	0x08(%ebp),%ecx
0000255b	movl	0x00000260(%ecx),%edx
00002561	movl	(%edx),%ecx
00002563	movl	0x000003b0(%ecx),%ecx
00002569	movl	0xa4(%ebp),%esi
0000256c	leal	0xd6a0b-0x1441(%esi),%esi
00002572	movl	%esi,0x08(%esp)
00002576	movl	%eax,0x04(%esp)
0000257a	movl	%edx,(%esp)
0000257d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00002585	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
0000258d	call	*%ecx
0000258f	movl	0x08(%ebp),%eax
00002592	movl	0x00000274(%eax),%eax
00002598	testl	%eax,%eax
0000259a	je	0x000025d3
0000259c	movl	0x08(%ebp),%ecx
0000259f	movl	0x00000260(%ecx),%edx
000025a5	movl	(%edx),%ecx
000025a7	movl	0x000003b0(%ecx),%ecx
000025ad	movl	0xa4(%ebp),%esi
000025b0	leal	0xd6a11-0x1441(%esi),%esi
000025b6	movl	%esi,0x08(%esp)
000025ba	movl	%eax,0x04(%esp)
000025be	movl	%edx,(%esp)
000025c1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000025c9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000025d1	call	*%ecx
000025d3	movl	0x08(%ebp),%eax
000025d6	movl	0x00000278(%eax),%eax
000025dc	testl	%eax,%eax
000025de	je	0x00002617
000025e0	movl	0x08(%ebp),%ecx
000025e3	movl	0x00000260(%ecx),%edx
000025e9	movl	(%edx),%ecx
000025eb	movl	0x000003b0(%ecx),%ecx
000025f1	movl	0xa4(%ebp),%esi
000025f4	leal	0xd6a16-0x1441(%esi),%esi
000025fa	movl	%esi,0x08(%esp)
000025fe	movl	%eax,0x04(%esp)
00002602	movl	%edx,(%esp)
00002605	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
0000260d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00002615	call	*%ecx
00002617	movl	0x98(%ebp),%eax
0000261a	movl	(%eax),%eax
0000261c	cmpl	0xf0(%ebp),%eax
0000261f	jne	0x0000267a
00002621	addl	$0x0000008c,%esp
00002627	popl	%esi
00002628	popl	%edi
00002629	popl	%ebx
0000262a	popl	%ebp
0000262b	ret
0000262c	movl	%eax,%esi
0000262e	movl	%edi,(%esp)
00002631	calll	operator delete(void*)
00002636	jmp	0x00002660
00002638	jmp	0x0000262c
0000263a	movl	%eax,%esi
0000263c	movl	%ebx,(%esp)
0000263f	calll	operator delete(void*)
00002644	jmp	0x00002660
00002646	jmp	0x0000262c
00002648	jmp	0x0000262c
0000264a	jmp	0x0000262c
0000264c	jmp	0x0000262c
0000264e	jmp	0x0000262c
00002650	jmp	0x0000262c
00002652	jmp	0x0000262c
00002654	jmp	0x0000262c
00002656	jmp	0x0000262c
00002658	jmp	0x0000262c
0000265a	jmp	0x0000262c
0000265c	jmp	0x0000262c
0000265e	movl	%eax,%esi
00002660	movl	0x9c(%ebp),%eax
00002663	movl	%eax,0x04(%esp)
00002667	movl	0x08(%ebp),%eax
0000266a	movl	%eax,(%esp)
0000266d	calll	CBaseAssetPicker::~CBaseAssetPicker()
00002672	movl	%esi,(%esp)
00002675	calll	__Unwind_Resume
0000267a	calll	___stack_chk_fail
0000267f	calll	std::terminate()
00002684	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::~CMDLPicker():
00002690	pushl	%ebp
00002691	movl	%esp,%ebp
00002693	pushl	%edi
00002694	pushl	%esi
00002695	subl	$0x10,%esp
00002698	calll	0x0000269d
0000269d	popl	%eax
0000269e	movl	0x08(%ebp),%edi
000026a1	leal	VTT for CMDLPicker-0x269d+0x00000004(%eax),%eax
000026a7	movl	%eax,0x04(%esp)
000026ab	movl	%edi,(%esp)
000026ae	calll	CBaseAssetPicker::~CBaseAssetPicker()
000026b3	addl	$0x10,%esp
000026b6	popl	%esi
000026b7	popl	%edi
000026b8	popl	%ebp
000026b9	jmp	operator delete(void*)
000026be	movl	%eax,%esi
000026c0	movl	%edi,(%esp)
000026c3	calll	operator delete(void*)
000026c8	movl	%esi,(%esp)
000026cb	calll	__Unwind_Resume
CMDLPicker::~CMDLPicker():
000026d0	pushl	%ebp
000026d1	movl	%esp,%ebp
000026d3	subl	$0x08,%esp
000026d6	calll	0x000026db
000026db	popl	%eax
000026dc	leal	VTT for CMDLPicker-0x26db+0x00000004(%eax),%eax
000026e2	movl	%eax,0x04(%esp)
000026e6	movl	0x08(%ebp),%eax
000026e9	movl	%eax,(%esp)
000026ec	calll	CBaseAssetPicker::~CBaseAssetPicker()
000026f1	addl	$0x08,%esp
000026f4	popl	%ebp
000026f5	ret
000026f6	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::~CMDLPicker():
00002700	pushl	%ebp
00002701	movl	%esp,%ebp
00002703	subl	$0x08,%esp
00002706	movl	0x0c(%ebp),%eax
00002709	addl	$0x04,%eax
0000270c	movl	%eax,0x04(%esp)
00002710	movl	0x08(%ebp),%eax
00002713	movl	%eax,(%esp)
00002716	calll	CBaseAssetPicker::~CBaseAssetPicker()
0000271b	addl	$0x08,%esp
0000271e	popl	%ebp
0000271f	ret
CMDLPicker::PerformLayout():
00002720	pushl	%ebp
00002721	movl	%esp,%ebp
00002723	pushl	%esi
00002724	subl	$0x24,%esp
00002727	movl	0x08(%ebp),%esi
0000272a	movl	%esi,(%esp)
0000272d	calll	vgui::Panel::PerformLayout()
00002732	leal	0xf4(%ebp),%eax
00002735	movl	%eax,0x08(%esp)
00002739	leal	0xf8(%ebp),%eax
0000273c	movl	%eax,0x04(%esp)
00002740	movl	%esi,(%esp)
00002743	calll	vgui::Panel::GetSize(int&, int&)
00002748	movl	0x00000258(%esi),%eax
0000274e	movl	0xf8(%ebp),%ecx
00002751	movl	0xf4(%ebp),%edx
00002754	movl	%edx,0x10(%esp)
00002758	movl	%ecx,0x0c(%esp)
0000275c	movl	%eax,(%esp)
0000275f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002767	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000276f	calll	vgui::Panel::SetBounds(int, int, int, int)
00002774	addl	$0x24,%esp
00002777	popl	%esi
00002778	popl	%ebp
00002779	ret
0000277a	nopw	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::OnAssetSelected(KeyValues*):
00002780	pushl	%ebp
00002781	movl	%esp,%ebp
00002783	pushl	%ebx
00002784	pushl	%edi
00002785	pushl	%esi
00002786	subl	$0x0000052c,%esp
0000278c	calll	0x00002791
00002791	popl	%edi
00002792	movl	0xe0869-0x2791(%edi),%eax
00002798	movl	%eax,0xfffffae4(%ebp)
0000279e	movl	(%eax),%eax
000027a0	movl	%eax,0xf0(%ebp)
000027a3	leal	0xd6a5b-0x2791(%edi),%eax
000027a9	movl	%eax,0x08(%esp)
000027ad	leal	0xd6a55-0x2791(%edi),%eax
000027b3	movl	%eax,0x04(%esp)
000027b7	movl	0x0c(%ebp),%eax
000027ba	movl	%eax,(%esp)
000027bd	calll	KeyValues::GetString(char const*, char const*)
000027c2	movl	%eax,0x0c(%esp)
000027c6	leal	0xd6a5c-0x2791(%edi),%eax
000027cc	movl	%eax,0x08(%esp)
000027d0	leal	0xfffffeec(%ebp),%esi
000027d6	movl	%esi,(%esp)
000027d9	movl	$0x00000104,0x04(%esp)
000027e1	calll	V_snprintf(char*, int, char const*, ...)
000027e6	calll	BeginDMXContext()
000027eb	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffae8(%ebp)
000027f5	leal	0xfffffae8(%ebp),%eax
000027fb	movl	%eax,0x0c(%esp)
000027ff	leal	0xd6a75-0x2791(%edi),%eax
00002805	movl	%eax,0x04(%esp)
00002809	movl	%esi,(%esp)
0000280c	movl	$0x00000001,0x08(%esp)
00002814	calll	UnserializeDMX(char const*, char const*, bool, CDmxElement**)
00002819	movl	0x08(%ebp),%edx
0000281c	movl	0xfffffae8(%ebp),%ecx
00002822	testl	%ecx,%ecx
00002824	je	0x0000282c
00002826	xorb	$0x01,%al
00002828	cmpb	$0x01,%al
0000282a	jne	0x000028a2
0000282c	movl	%esi,0x0c(%esp)
00002830	leal	0xd6a7a-0x2791(%edi),%eax
00002836	movl	%eax,0x08(%esp)
0000283a	leal	0xfffffaec(%ebp),%eax
00002840	movl	%eax,(%esp)
00002843	movl	$0x00000400,0x04(%esp)
0000284b	movl	%edx,%ebx
0000284d	calll	V_snprintf(char*, int, char const*, ...)
00002852	movl	$0x00000260,(%esp)
00002859	calll	operator new(unsigned long)
0000285e	movl	%eax,%esi
00002860	movl	(%ebx),%eax
00002862	movl	0x00000098(%eax),%eax
00002868	movl	%ebx,(%esp)
0000286b	call	*%eax
0000286d	movl	%eax,0x0c(%esp)
00002871	leal	0xfffffaec(%ebp),%eax
00002877	movl	%eax,0x08(%esp)
0000287b	leal	0xd6a9f-0x2791(%edi),%eax
00002881	movl	%eax,0x04(%esp)
00002885	movl	%esi,(%esp)
00002888	calll	vgui::MessageBox::MessageBox(char const*, char const*, vgui::Panel*)
0000288d	movl	(%esi),%eax
0000288f	movl	%esi,(%esp)
00002892	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000289a	call	*0x00000450(%eax)
000028a0	jmp	0x000028b4
000028a2	movl	0x00000254(%edx),%eax
000028a8	movl	%ecx,0x04(%esp)
000028ac	movl	%eax,(%esp)
000028af	calll	CPotteryWheelPanel::SetLightProbe(CDmxElement*)
000028b4	movl	$0x00000001,(%esp)
000028bb	calll	EndDMXContext(bool)
000028c0	movl	0xfffffae4(%ebp),%eax
000028c6	movl	(%eax),%eax
000028c8	cmpl	0xf0(%ebp),%eax
000028cb	jne	0x000028ea
000028cd	addl	$0x0000052c,%esp
000028d3	popl	%esi
000028d4	popl	%edi
000028d5	popl	%ebx
000028d6	popl	%ebp
000028d7	ret
000028d8	movl	%eax,%edi
000028da	movl	%esi,(%esp)
000028dd	calll	operator delete(void*)
000028e2	movl	%edi,(%esp)
000028e5	calll	__Unwind_Resume
000028ea	calll	___stack_chk_fail
000028ef	nop
CMDLPicker::OnCommand(char const*):
000028f0	pushl	%ebp
000028f1	movl	%esp,%ebp
000028f3	pushl	%ebx
000028f4	pushl	%edi
000028f5	pushl	%esi
000028f6	subl	$0x0000093c,%esp
000028fc	calll	0x00002901
00002901	popl	%ebx
00002902	movl	0xe0869-0x2901(%ebx),%eax
00002908	movl	%eax,0xfffff6e8(%ebp)
0000290e	movl	(%eax),%eax
00002910	movl	%eax,0xf0(%ebp)
00002913	leal	0xd6813-0x2901(%ebx),%eax
00002919	movl	%eax,0x04(%esp)
0000291d	movl	0x0c(%ebp),%esi
00002920	movl	%esi,(%esp)
00002923	calll	V_stricmp(char const*, char const*)
00002928	movl	0x08(%ebp),%edi
0000292b	testl	%eax,%eax
0000292d	jne	0x000029a2
0000292f	movl	$0x00000254,(%esp)
00002936	calll	operator new(unsigned long)
0000293b	movl	%eax,%esi
0000293d	leal	0xd6af9-0x2901(%ebx),%eax
00002943	movl	%eax,0x18(%esp)
00002947	leal	0xd6ae3-0x2901(%ebx),%eax
0000294d	movl	%eax,0x14(%esp)
00002951	leal	0xd6adf-0x2901(%ebx),%eax
00002957	movl	%eax,0x10(%esp)
0000295b	leal	0xd6ad3-0x2901(%ebx),%eax
00002961	movl	%eax,0x0c(%esp)
00002965	leal	0xd6ab4-0x2901(%ebx),%eax
0000296b	movl	%eax,0x08(%esp)
0000296f	movl	%edi,0x04(%esp)
00002973	movl	%esi,(%esp)
00002976	calll	CAssetPickerFrame::CAssetPickerFrame(vgui::Panel*, char const*, char const*, char const*, char const*, char const*)
0000297b	movl	%esi,(%esp)
0000297e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002986	calll	CBaseAssetPickerFrame::DoModal(KeyValues*)
0000298b	jmp	0x00002d1d
00002990	movl	%eax,%edi
00002992	movl	%esi,(%esp)
00002995	calll	operator delete(void*)
0000299a	movl	%edi,(%esp)
0000299d	calll	__Unwind_Resume
000029a2	leal	0xd6997-0x2901(%ebx),%eax
000029a8	movl	%eax,0x04(%esp)
000029ac	movl	%esi,(%esp)
000029af	calll	V_stricmp(char const*, char const*)
000029b4	testl	%eax,%eax
000029b6	jne	0x00002a83
000029bc	leal	0x00000290(%edi),%esi
000029c2	movl	%esi,(%esp)
000029c5	calll	vgui::PHandle::Get()
000029ca	testl	%eax,%eax
000029cc	jne	0x00002a0a
000029ce	movl	%esi,0xfffff6e4(%ebp)
000029d4	movl	$0x000004a8,(%esp)
000029db	calll	operator new(unsigned long)
000029e0	movl	%eax,%esi
000029e2	leal	0xd6b04-0x2901(%ebx),%eax
000029e8	movl	%eax,0x08(%esp)
000029ec	movl	%edi,0x04(%esp)
000029f0	movl	%esi,(%esp)
000029f3	calll	vgui::DirectorySelectDialog::DirectorySelectDialog(vgui::Panel*, char const*)
000029f8	movl	%esi,0x04(%esp)
000029fc	movl	0xfffff6e4(%ebp),%esi
00002a02	movl	%esi,(%esp)
00002a05	calll	vgui::PHandle::Set(vgui::Panel*)
00002a0a	movl	0x00000278(%edi),%eax
00002a10	leal	0xd697b-0x2901(%ebx),%ecx
00002a16	movl	%ecx,0x04(%esp)
00002a1a	movl	%eax,(%esp)
00002a1d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002a25	calll	vgui::Panel::FindChildByName(char const*, bool)
00002a2a	movl	(%eax),%ecx
00002a2c	leal	0xfffffeec(%ebp),%edi
00002a32	movl	%edi,0x04(%esp)
00002a36	movl	%eax,(%esp)
00002a39	movl	$0x00000104,0x08(%esp)
00002a41	call	*0x00000350(%ecx)
00002a47	movl	%esi,(%esp)
00002a4a	calll	vgui::PHandle::Get()
00002a4f	movl	%eax,(%esp)
00002a52	calll	vgui::Panel::MakeReadyForUse()
00002a57	movl	%esi,(%esp)
00002a5a	calll	vgui::PHandle::Get()
00002a5f	movl	%edi,0x04(%esp)
00002a63	movl	%eax,(%esp)
00002a66	calll	vgui::DirectorySelectDialog::SetStartDirectory(char const*)
00002a6b	movl	%esi,(%esp)
00002a6e	calll	vgui::PHandle::Get()
00002a73	movl	(%eax),%ecx
00002a75	movl	%eax,(%esp)
00002a78	call	*0x00000428(%ecx)
00002a7e	jmp	0x00002d1d
00002a83	leal	0xd698f-0x2901(%ebx),%eax
00002a89	movl	%eax,0x04(%esp)
00002a8d	movl	%esi,(%esp)
00002a90	calll	V_stricmp(char const*, char const*)
00002a95	testl	%eax,%eax
00002a97	jne	0x00002aa6
00002a99	movl	%edi,(%esp)
00002a9c	calll	CMDLPicker::CaptureScreenCaps()
00002aa1	jmp	0x00002d1d
00002aa6	leal	0xd69c2-0x2901(%ebx),%eax
00002aac	movl	%eax,0x04(%esp)
00002ab0	movl	%esi,(%esp)
00002ab3	calll	V_stricmp(char const*, char const*)
00002ab8	testl	%eax,%eax
00002aba	jne	0x00002b24
00002abc	movl	0x00000264(%edi),%eax
00002ac2	leal	0xd6a22-0x2901(%ebx),%ecx
00002ac8	movl	%ecx,0x04(%esp)
00002acc	movl	%eax,(%esp)
00002acf	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002ad7	calll	vgui::Panel::FindChildByName(char const*, bool)
00002adc	movl	(%eax),%ecx
00002ade	movl	%eax,(%esp)
00002ae1	call	*0x000003f4(%ecx)
00002ae7	movb	%al,%bl
00002ae9	movl	0x00000254(%edi),%eax
00002aef	movl	%eax,(%esp)
00002af2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002afa	calll	CMDLPanel::SetGroundGrid(bool)
00002aff	movl	%edi,(%esp)
00002b02	calll	CMDLPicker::GenerateBackpackIcons()
00002b07	movl	0x00000254(%edi),%eax
00002b0d	xorb	$0x01,%bl
00002b10	movzbl	%bl,%ecx
00002b13	movl	%ecx,0x04(%esp)
00002b17	movl	%eax,(%esp)
00002b1a	calll	CMDLPanel::SetGroundGrid(bool)
00002b1f	jmp	0x00002d1d
00002b24	leal	0xd69ad-0x2901(%ebx),%eax
00002b2a	movl	%eax,0x04(%esp)
00002b2e	movl	%esi,(%esp)
00002b31	calll	V_stricmp(char const*, char const*)
00002b36	testl	%eax,%eax
00002b38	jne	0x00002b4f
00002b3a	movl	%edi,(%esp)
00002b3d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002b45	calll	CMDLPicker::SaveCaps(char const*)
00002b4a	jmp	0x00002d1d
00002b4f	leal	0xd69b6-0x2901(%ebx),%eax
00002b55	movl	%eax,0x04(%esp)
00002b59	movl	%esi,(%esp)
00002b5c	calll	V_stricmp(char const*, char const*)
00002b61	testl	%eax,%eax
00002b63	jne	0x00002d11
00002b69	movl	0xe087d-0x2901(%ebx),%esi
00002b6f	movl	(%esi),%ecx
00002b71	movl	(%ecx),%eax
00002b73	movl	%ecx,(%esp)
00002b76	movl	$0x00000054,0x04(%esp)
00002b7e	call	*0x44(%eax)
00002b81	testb	%al,%al
00002b83	jne	0x00002b9f
00002b85	movl	(%esi),%ecx
00002b87	movl	(%ecx),%eax
00002b89	movl	%ecx,(%esp)
00002b8c	movl	$0x00000053,0x04(%esp)
00002b94	call	*0x44(%eax)
00002b97	cmpb	$0x01,%al
00002b99	jne	0x00002cff
00002b9f	movl	%ebx,0xfffff6e4(%ebp)
00002ba5	movl	0x00000210(%edi),%ebx
00002bab	xorl	%esi,%esi
00002bad	jmp	0x00002bb1
00002baf	nop
00002bb0	incl	%esi
00002bb1	cmpl	%ebx,%esi
00002bb3	jge	0x00002d1d
00002bb9	movl	0x000001c0(%edi),%eax
00002bbf	movl	0x00000204(%edi),%ecx
00002bc5	movl	0x04(%ecx,%esi,8),%ecx
00002bc9	movl	%ecx,0x04(%esp)
00002bcd	movl	%eax,(%esp)
00002bd0	calll	vgui::ListPanel::IsItemVisible(int)
00002bd5	cmpb	$0x01,%al
00002bd7	jne	0x00002bb0
00002bd9	movl	0x000001c0(%edi),%eax
00002bdf	movl	0x00000204(%edi),%ecx
00002be5	movl	0x04(%ecx,%esi,8),%edx
00002be9	movl	(%eax),%ecx
00002beb	movl	%edx,0x04(%esp)
00002bef	movl	%eax,(%esp)
00002bf2	call	*0x00000400(%ecx)
00002bf8	cmpb	$0x01,%al
00002bfa	jne	0x00002bb0
00002bfc	movl	0x000001c0(%edi),%eax
00002c02	movl	0x00000204(%edi),%ecx
00002c08	movl	0x04(%ecx,%esi,8),%edx
00002c0c	movl	(%eax),%ecx
00002c0e	movl	%edx,0x04(%esp)
00002c12	movl	%eax,(%esp)
00002c15	call	*0x0000039c(%ecx)
00002c1b	movl	0xfffff6e4(%ebp),%ebx
00002c21	leal	0xd6a5b-0x2901(%ebx),%ecx
00002c27	movl	%ecx,0x08(%esp)
00002c2b	leal	0xd6a55-0x2901(%ebx),%ecx
00002c31	movl	%ecx,0x04(%esp)
00002c35	movl	%eax,(%esp)
00002c38	calll	KeyValues::GetString(char const*, char const*)
00002c3d	movl	%eax,0xfffff6e0(%ebp)
00002c43	movl	0x00000278(%edi),%eax
00002c49	leal	0xd697b-0x2901(%ebx),%ecx
00002c4f	movl	%ecx,0x04(%esp)
00002c53	movl	%eax,(%esp)
00002c56	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002c5e	calll	vgui::Panel::FindChildByName(char const*, bool)
00002c63	movl	(%eax),%ecx
00002c65	leal	0xfffffaec(%ebp),%esi
00002c6b	movl	%esi,0x04(%esp)
00002c6f	movl	%eax,(%esp)
00002c72	movl	$0x00000400,0x08(%esp)
00002c7a	call	*0x00000350(%ecx)
00002c80	movl	0xfffff6e0(%ebp),%eax
00002c86	movl	%eax,0x0c(%esp)
00002c8a	movl	%esi,0x08(%esp)
00002c8e	leal	0xd6b25-0x2901(%ebx),%eax
00002c94	movl	%eax,0x04(%esp)
00002c98	leal	0xfffff6ec(%ebp),%eax
00002c9e	movl	%eax,(%esp)
00002ca1	calll	_sprintf
00002ca6	movl	0x00000278(%edi),%eax
00002cac	leal	0xd6b2a-0x2901(%ebx),%ecx
00002cb2	movl	%ecx,0x04(%esp)
00002cb6	movl	%eax,(%esp)
00002cb9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002cc1	calll	vgui::Panel::FindChildByName(char const*, bool)
00002cc6	movl	%eax,%esi
00002cc8	leal	0xfffff6ec(%ebp),%eax
00002cce	movl	%eax,0x04(%esp)
00002cd2	movl	%edi,(%esp)
00002cd5	calll	CMDLPicker::RestoreCaps(char const*)
00002cda	movl	(%esi),%ecx
00002cdc	movl	0x00000348(%ecx),%ecx
00002ce2	testb	%al,%al
00002ce4	je	0x00002cf7
00002ce6	leal	0xd6b39-0x2901(%ebx),%eax
00002cec	movl	%eax,0x04(%esp)
00002cf0	movl	%esi,(%esp)
00002cf3	call	*%ecx
00002cf5	jmp	0x00002d1d
00002cf7	leal	0xd6b48-0x2901(%ebx),%eax
00002cfd	jmp	0x00002cec
00002cff	movl	%edi,(%esp)
00002d02	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002d0a	calll	CMDLPicker::RestoreCaps(char const*)
00002d0f	jmp	0x00002d1d
00002d11	movl	%esi,0x04(%esp)
00002d15	movl	%edi,(%esp)
00002d18	calll	CBaseAssetPicker::OnCommand(char const*)
00002d1d	movl	0xfffff6e8(%ebp),%eax
00002d23	movl	(%eax),%eax
00002d25	cmpl	0xf0(%ebp),%eax
00002d28	je	0x00002d34
00002d2a	calll	___stack_chk_fail
00002d2f	jmp	0x00002990
00002d34	addl	$0x0000093c,%esp
00002d3a	popl	%esi
00002d3b	popl	%edi
00002d3c	popl	%ebx
00002d3d	popl	%ebp
00002d3e	ret
00002d3f	nop
CMDLPicker::CaptureScreenCaps():
00002d40	pushl	%ebp
00002d41	movl	%esp,%ebp
00002d43	pushl	%ebx
00002d44	pushl	%edi
00002d45	pushl	%esi
00002d46	subl	$0x0000056c,%esp
00002d4c	calll	0x00002d51
00002d51	popl	%esi
00002d52	movl	%esi,0xfffffac4(%ebp)
00002d58	movl	0xe0869-0x2d51(%esi),%eax
00002d5e	movl	%eax,0xfffffab4(%ebp)
00002d64	movl	(%eax),%eax
00002d66	movl	%eax,0xf0(%ebp)
00002d69	movl	0x08(%ebp),%ebx
00002d6c	movl	0x00000278(%ebx),%eax
00002d72	leal	0xd697b-0x2d51(%esi),%ecx
00002d78	movl	%ecx,0x04(%esp)
00002d7c	movl	%eax,(%esp)
00002d7f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002d87	calll	vgui::Panel::FindChildByName(char const*, bool)
00002d8c	movl	(%eax),%ecx
00002d8e	leal	0xfffffaf0(%ebp),%edx
00002d94	movl	%edx,0x04(%esp)
00002d98	movl	%eax,(%esp)
00002d9b	movl	$0x00000400,0x08(%esp)
00002da3	call	*0x00000350(%ecx)
00002da9	movl	0x00000278(%ebx),%eax
00002daf	leal	0xd6962-0x2d51(%esi),%ecx
00002db5	movl	%ecx,0x04(%esp)
00002db9	movl	%eax,(%esp)
00002dbc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002dc4	calll	vgui::Panel::FindChildByName(char const*, bool)
00002dc9	movl	(%eax),%ecx
00002dcb	leal	0xfffffef0(%ebp),%edi
00002dd1	movl	%edi,0x04(%esp)
00002dd5	movl	%eax,(%esp)
00002dd8	movl	$0x00000100,0x08(%esp)
00002de0	call	*0x00000350(%ecx)
00002de6	movl	%edi,(%esp)
00002de9	calll	_atoi
00002dee	movl	%eax,0xfffffac0(%ebp)
00002df4	movl	0x00000278(%ebx),%eax
00002dfa	leal	0xd6970-0x2d51(%esi),%ecx
00002e00	movl	%ecx,0x04(%esp)
00002e04	movl	%eax,(%esp)
00002e07	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002e0f	calll	vgui::Panel::FindChildByName(char const*, bool)
00002e14	movl	(%eax),%ecx
00002e16	movl	%edi,0x04(%esp)
00002e1a	movl	%eax,(%esp)
00002e1d	movl	$0x00000100,0x08(%esp)
00002e25	call	*0x00000350(%ecx)
00002e2b	movl	%edi,(%esp)
00002e2e	calll	_atoi
00002e33	movl	%eax,%edi
00002e35	movl	%edi,0xfffffabc(%ebp)
00002e3b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffadc(%ebp)
00002e45	movl	0x00000254(%ebx),%ecx
00002e4b	movl	(%ecx),%eax
00002e4d	movl	%ecx,(%esp)
00002e50	call	*0x00000098(%eax)
00002e56	movl	%eax,0xfffffab0(%ebp)
00002e5c	movl	0x00000254(%ebx),%eax
00002e62	leal	0xfffffae8(%ebp),%ecx
00002e68	movl	%ecx,0x08(%esp)
00002e6c	leal	0xfffffaec(%ebp),%ecx
00002e72	movl	%ecx,0x04(%esp)
00002e76	movl	%eax,(%esp)
00002e79	calll	vgui::Panel::GetPos(int&, int&)
00002e7e	movl	0x00000254(%ebx),%eax
00002e84	leal	0xfffffae0(%ebp),%ecx
00002e8a	movl	%ecx,0x08(%esp)
00002e8e	leal	0xfffffae4(%ebp),%ecx
00002e94	movl	%ecx,0x04(%esp)
00002e98	movl	%eax,(%esp)
00002e9b	calll	vgui::Panel::GetSize(int&, int&)
00002ea0	movl	0x00000254(%ebx),%eax
00002ea6	movl	%eax,(%esp)
00002ea9	calll	CPotteryWheelPanel::GetBackgroundColor() const
00002eae	movl	(%eax),%eax
00002eb0	movl	%eax,0xfffffadc(%ebp)
00002eb6	movl	0x00000254(%ebx),%ecx
00002ebc	movl	(%ecx),%eax
00002ebe	movl	%ecx,(%esp)
00002ec1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002ec9	call	*0x000000a0(%eax)
00002ecf	movl	0x00000254(%ebx),%eax
00002ed5	movl	%eax,(%esp)
00002ed8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002ee0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00002ee8	calll	vgui::Panel::SetPos(int, int)
00002eed	movl	0x00000254(%ebx),%eax
00002ef3	movl	%edi,0x08(%esp)
00002ef7	movl	0xfffffac0(%ebp),%ecx
00002efd	movl	%ecx,0x04(%esp)
00002f01	movl	%eax,(%esp)
00002f04	calll	vgui::Panel::SetSize(int, int)
00002f09	movl	0x00000278(%ebx),%eax
00002f0f	leal	0xd6931-0x2d51(%esi),%ecx
00002f15	movl	%ecx,0x04(%esp)
00002f19	movl	%eax,(%esp)
00002f1c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00002f24	calll	vgui::Panel::FindChildByName(char const*, bool)
00002f29	movl	0x00000228(%eax),%eax
00002f2f	movl	%eax,0xfffffad8(%ebp)
00002f35	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffadb(%ebp)
00002f3c	movl	0x00000254(%ebx),%eax
00002f42	leal	0xfffffad8(%ebp),%ecx
00002f48	movl	%ecx,0x04(%esp)
00002f4c	movl	%eax,(%esp)
00002f4f	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00002f54	movl	0x00000254(%ebx),%ecx
00002f5a	movl	(%ecx),%eax
00002f5c	movl	%ecx,(%esp)
00002f5f	call	(%eax)
00002f61	movl	(%eax),%ecx
00002f63	movl	%eax,(%esp)
00002f66	call	*0x58(%ecx)
00002f69	movl	0xe087d-0x2d51(%esi),%esi
00002f6f	movl	(%esi),%ecx
00002f71	movl	(%ecx),%eax
00002f73	movl	%ecx,(%esp)
00002f76	movl	$0x00000054,0x04(%esp)
00002f7e	call	*0x44(%eax)
00002f81	testb	%al,%al
00002f83	jne	0x00002fa2
00002f85	movl	(%esi),%ecx
00002f87	movl	(%ecx),%eax
00002f89	movl	%ecx,(%esp)
00002f8c	movl	$0x00000053,0x04(%esp)
00002f94	call	*0x44(%eax)
00002f97	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffad3(%ebp)
00002f9e	testb	%al,%al
00002fa0	je	0x00002fa9
00002fa2	movb	$0x01,0xfffffad3(%ebp)
00002fa9	movl	0x00000210(%ebx),%eax
00002faf	movl	%eax,0xfffffab8(%ebp)
00002fb5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffac8(%ebp)
00002fbf	testl	%eax,%eax
00002fc1	jle	0x00003102
00002fc7	xorl	%edi,%edi
00002fc9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffac8(%ebp)
00002fd3	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00002fe0	movl	0x000001c0(%ebx),%eax
00002fe6	movl	0x00000204(%ebx),%ecx
00002fec	movl	0x04(%ecx,%edi,8),%ecx
00002ff0	movl	%ecx,0x04(%esp)
00002ff4	movl	%eax,(%esp)
00002ff7	calll	vgui::ListPanel::IsItemVisible(int)
00002ffc	cmpb	$0x01,%al
00002ffe	jne	0x000030f5
00003004	cmpb	$0x01,0xfffffad3(%ebp)
0000300b	jne	0x00003034
0000300d	movl	0x000001c0(%ebx),%eax
00003013	movl	0x00000204(%ebx),%ecx
00003019	movl	0x04(%ecx,%edi,8),%edx
0000301d	movl	(%eax),%ecx
0000301f	movl	%edx,0x04(%esp)
00003023	movl	%eax,(%esp)
00003026	call	*0x00000400(%ecx)
0000302c	cmpb	$0x01,%al
0000302e	jne	0x000030f5
00003034	movl	0x000001c0(%ebx),%eax
0000303a	movl	0x00000204(%ebx),%ecx
00003040	movl	0x04(%ecx,%edi,8),%edx
00003044	movl	(%eax),%ecx
00003046	movl	%edx,0x04(%esp)
0000304a	movl	%eax,(%esp)
0000304d	call	*0x0000039c(%ecx)
00003053	movl	%eax,%esi
00003055	movl	0xfffffac4(%ebp),%ebx
0000305b	leal	0xd6a5b-0x2d51(%ebx),%eax
00003061	movl	%eax,0x08(%esp)
00003065	leal	0xd6a55-0x2d51(%ebx),%eax
0000306b	movl	%eax,0x04(%esp)
0000306f	movl	%esi,(%esp)
00003072	calll	KeyValues::GetString(char const*, char const*)
00003077	movl	%eax,0xfffffacc(%ebp)
0000307d	leal	0xd6b66-0x2d51(%ebx),%eax
00003083	movl	0x08(%ebp),%ebx
00003086	movl	%eax,0x04(%esp)
0000308a	movl	%esi,(%esp)
0000308d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00003095	calll	KeyValues::GetInt(char const*, int)
0000309a	movl	0xfffffad8(%ebp),%ecx
000030a0	movl	%ecx,0xfffffad4(%ebp)
000030a6	movzbl	0xfffffad3(%ebp),%ecx
000030ad	movl	%ecx,0x1c(%esp)
000030b1	movl	0xfffffad4(%ebp),%ecx
000030b7	movl	%ecx,0x18(%esp)
000030bb	movl	0xfffffabc(%ebp),%ecx
000030c1	movl	%ecx,0x14(%esp)
000030c5	movl	0xfffffac0(%ebp),%ecx
000030cb	movl	%ecx,0x10(%esp)
000030cf	leal	0xfffffaf0(%ebp),%ecx
000030d5	movl	%ecx,0x0c(%esp)
000030d9	movl	0xfffffacc(%ebp),%ecx
000030df	movl	%ecx,0x08(%esp)
000030e3	movl	%eax,0x04(%esp)
000030e7	movl	%ebx,(%esp)
000030ea	calll	CMDLPicker::CaptureModel(int, char const*, char const*, int, int, Color, bool)
000030ef	incl	0xfffffac8(%ebp)
000030f5	incl	%edi
000030f6	cmpl	%edi,0xfffffab8(%ebp)
000030fc	jne	0x00002fe0
00003102	movl	0x00000254(%ebx),%ecx
00003108	movl	(%ecx),%eax
0000310a	movl	0xfffffab0(%ebp),%edx
00003110	movl	%edx,0x04(%esp)
00003114	movl	%ecx,(%esp)
00003117	call	*0x000000a0(%eax)
0000311d	movl	0x00000254(%ebx),%eax
00003123	movl	0xfffffaec(%ebp),%ecx
00003129	movl	0xfffffae8(%ebp),%edx
0000312f	movl	%edx,0x08(%esp)
00003133	movl	%ecx,0x04(%esp)
00003137	movl	%eax,(%esp)
0000313a	calll	vgui::Panel::SetPos(int, int)
0000313f	movl	0x00000254(%ebx),%eax
00003145	movl	0xfffffae4(%ebp),%ecx
0000314b	movl	0xfffffae0(%ebp),%edx
00003151	movl	%edx,0x08(%esp)
00003155	movl	%ecx,0x04(%esp)
00003159	movl	%eax,(%esp)
0000315c	calll	vgui::Panel::SetSize(int, int)
00003161	movl	0x00000254(%ebx),%eax
00003167	leal	0xfffffadc(%ebp),%ecx
0000316d	movl	%ecx,0x04(%esp)
00003171	movl	%eax,(%esp)
00003174	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00003179	movl	0x00000254(%ebx),%ecx
0000317f	movl	(%ecx),%eax
00003181	movl	%ecx,(%esp)
00003184	call	(%eax)
00003186	movl	(%eax),%ecx
00003188	movl	%eax,(%esp)
0000318b	call	*0x58(%ecx)
0000318e	movl	0xfffffac8(%ebp),%eax
00003194	movl	%eax,0x08(%esp)
00003198	movl	0xfffffac4(%ebp),%esi
0000319e	leal	0xd6b6f-0x2d51(%esi),%eax
000031a4	movl	%eax,0x04(%esp)
000031a8	leal	0xfffffef0(%ebp),%edi
000031ae	movl	%edi,(%esp)
000031b1	calll	_sprintf
000031b6	movl	0x00000278(%ebx),%eax
000031bc	leal	0xd6b2a-0x2d51(%esi),%ecx
000031c2	movl	%ecx,0x04(%esp)
000031c6	movl	%eax,(%esp)
000031c9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000031d1	calll	vgui::Panel::FindChildByName(char const*, bool)
000031d6	movl	(%eax),%ecx
000031d8	movl	%edi,0x04(%esp)
000031dc	movl	%eax,(%esp)
000031df	call	*0x00000348(%ecx)
000031e5	movl	0xfffffab4(%ebp),%eax
000031eb	movl	(%eax),%eax
000031ed	cmpl	0xf0(%ebp),%eax
000031f0	jne	0x000031fd
000031f2	addl	$0x0000056c,%esp
000031f8	popl	%esi
000031f9	popl	%edi
000031fa	popl	%ebx
000031fb	popl	%ebp
000031fc	ret
000031fd	calll	___stack_chk_fail
00003202	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GenerateBackpackIcons():
00003210	pushl	%ebp
00003211	movl	%esp,%ebp
00003213	pushl	%ebx
00003214	pushl	%edi
00003215	pushl	%esi
00003216	subl	$0x0000084c,%esp
0000321c	calll	0x00003221
00003221	popl	%ebx
00003222	movl	0xe0869-0x3221(%ebx),%eax
00003228	movl	%eax,0xfffff7e8(%ebp)
0000322e	movl	(%eax),%eax
00003230	movl	%eax,0xf0(%ebp)
00003233	movl	0xe0885-0x3221(%ebx),%eax
00003239	movl	%eax,0xfffff7f4(%ebp)
0000323f	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),(%eax)
00003242	je	0x000039b8
00003248	movl	0x08(%ebp),%esi
0000324b	xorl	%edi,%edi
0000324d	jmp	0x00003261
0000324f	calll	___stack_chk_fail
00003254	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00003260	incl	%edi
00003261	movl	0x00000210(%esi),%eax
00003267	cmpl	%eax,%edi
00003269	jge	0x000032b4
0000326b	movl	0x000001c0(%esi),%eax
00003271	movl	0x00000204(%esi),%ecx
00003277	movl	0x04(%ecx,%edi,8),%ecx
0000327b	movl	%ecx,0x04(%esp)
0000327f	movl	%eax,(%esp)
00003282	calll	vgui::ListPanel::IsItemVisible(int)
00003287	cmpb	$0x01,%al
00003289	jne	0x00003260
0000328b	movl	0x000001c0(%esi),%eax
00003291	movl	0x00000204(%esi),%ecx
00003297	movl	0x04(%ecx,%edi,8),%edx
0000329b	movl	(%eax),%ecx
0000329d	movl	%edx,0x04(%esp)
000032a1	movl	%eax,(%esp)
000032a4	call	*0x00000400(%ecx)
000032aa	cmpb	$0x01,%al
000032ac	jne	0x00003260
000032ae	movl	0x00000210(%esi),%eax
000032b4	cmpl	%eax,%edi
000032b6	jge	0x000039b8
000032bc	leal	0xd6c39-0x3221(%ebx),%eax
000032c2	movl	%eax,(%esp)
000032c5	calll	_getenv
000032ca	movl	%eax,0xfffff800(%ebp)
000032d0	testl	%eax,%eax
000032d2	jne	0x000032e7
000032d4	leal	0xd6c42-0x3221(%ebx),%eax
000032da	movl	%eax,(%esp)
000032dd	calll	_Error
000032e2	jmp	0x000039b8
000032e7	leal	0xd6c68-0x3221(%ebx),%eax
000032ed	movl	%eax,(%esp)
000032f0	calll	_getenv
000032f5	movl	%eax,0xfffff7f8(%ebp)
000032fb	testl	%eax,%eax
000032fd	jne	0x00003307
000032ff	leal	0xd6c6d-0x3221(%ebx),%eax
00003305	jmp	0x000032da
00003307	leal	0xd6b81-0x3221(%ebx),%eax
0000330d	movl	%eax,(%esp)
00003310	calll	_getenv
00003315	movl	%eax,0xfffff7fc(%ebp)
0000331b	testl	%eax,%eax
0000331d	jne	0x00003327
0000331f	leal	0xd6c8f-0x3221(%ebx),%eax
00003325	jmp	0x000032da
00003327	movl	0x000001c0(%esi),%eax
0000332d	movl	0x00000204(%esi),%ecx
00003333	movl	0x04(%ecx,%edi,8),%edx
00003337	movl	(%eax),%ecx
00003339	movl	%edx,0x04(%esp)
0000333d	movl	%eax,(%esp)
00003340	call	*0x0000039c(%ecx)
00003346	movl	%eax,0xfffff7e0(%ebp)
0000334c	leal	0xd6a5b-0x3221(%ebx),%ecx
00003352	movl	%ecx,0xfffff7f0(%ebp)
00003358	movl	%ecx,0x08(%esp)
0000335c	leal	0xd6a55-0x3221(%ebx),%ecx
00003362	movl	%ecx,0x04(%esp)
00003366	movl	%eax,(%esp)
00003369	calll	KeyValues::GetString(char const*, char const*)
0000336e	movl	%eax,0xfffff7dc(%ebp)
00003374	movl	%eax,0x04(%esp)
00003378	movl	%esi,%edi
0000337a	leal	0xfffffeec(%ebp),%esi
00003380	movl	%esi,(%esp)
00003383	calll	_strcpy
00003388	movl	%esi,0x04(%esp)
0000338c	movl	%esi,(%esp)
0000338f	movl	$0x00000104,0x08(%esp)
00003397	calll	V_FileBase(char const*, char*, int)
0000339c	leal	0xd6cb5-0x3221(%ebx),%eax
000033a2	movl	%eax,0x04(%esp)
000033a6	movl	%esi,(%esp)
000033a9	movl	$0xffffffff,0x0c(%esp)
000033b1	movl	$0x00000104,0x08(%esp)
000033b9	calll	V_strncat(char*, char const*, unsigned long, int)
000033be	movl	0xe086d-0x3221(%ebx),%eax
000033c4	movl	%eax,0xfffff7ec(%ebp)
000033ca	movl	(%eax),%eax
000033cc	movl	%esi,0x04(%esp)
000033d0	movl	%eax,(%esp)
000033d3	calll	CP4Factory::SetOpenFileChangeList(char const*)
000033d8	movl	0xfffff7dc(%ebp),%esi
000033de	movl	%esi,0x04(%esp)
000033e2	calll	CMDLPicker::WriteBackbackVMTFiles(char const*)
000033e7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff9c4(%ebp)
000033f1	movl	0x00000254(%edi),%ecx
000033f7	movl	(%ecx),%eax
000033f9	movl	%ecx,(%esp)
000033fc	call	*0x00000098(%eax)
00003402	movl	%eax,0xfffff7e4(%ebp)
00003408	movl	0x00000254(%edi),%eax
0000340e	leal	0xfffff9d0(%ebp),%ecx
00003414	movl	%ecx,0x08(%esp)
00003418	leal	0xfffff9d4(%ebp),%ecx
0000341e	movl	%ecx,0x04(%esp)
00003422	movl	%eax,(%esp)
00003425	calll	vgui::Panel::GetPos(int&, int&)
0000342a	movl	0x00000254(%edi),%eax
00003430	leal	0xfffff9c8(%ebp),%ecx
00003436	movl	%ecx,0x08(%esp)
0000343a	leal	0xfffff9cc(%ebp),%ecx
00003440	movl	%ecx,0x04(%esp)
00003444	movl	%eax,(%esp)
00003447	calll	vgui::Panel::GetSize(int&, int&)
0000344c	movl	0x00000254(%edi),%eax
00003452	movl	%eax,(%esp)
00003455	calll	CPotteryWheelPanel::GetBackgroundColor() const
0000345a	movl	(%eax),%eax
0000345c	movl	%eax,0xfffff9c4(%ebp)
00003462	movl	0x00000254(%edi),%ecx
00003468	movl	(%ecx),%eax
0000346a	movl	%ecx,(%esp)
0000346d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00003475	call	*0x000000a0(%eax)
0000347b	movl	0x00000254(%edi),%eax
00003481	movl	%eax,(%esp)
00003484	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000348c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00003494	calll	vgui::Panel::SetPos(int, int)
00003499	movl	0x00000254(%edi),%eax
0000349f	movl	%eax,(%esp)
000034a2	movl	$0x00000200,0x08(%esp)
000034aa	movl	$0x00000200,0x04(%esp)
000034b2	calll	vgui::Panel::SetSize(int, int)
000034b7	movl	0x00000278(%edi),%eax
000034bd	leal	0xd6931-0x3221(%ebx),%ecx
000034c3	movl	%ecx,0x04(%esp)
000034c7	movl	%eax,(%esp)
000034ca	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000034d2	calll	vgui::Panel::FindChildByName(char const*, bool)
000034d7	movl	0x00000228(%eax),%eax
000034dd	movl	%eax,0xfffff9c0(%ebp)
000034e3	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff9c3(%ebp)
000034ea	movl	0x00000254(%edi),%eax
000034f0	leal	0xfffff9c0(%ebp),%ecx
000034f6	movl	%ecx,0x04(%esp)
000034fa	movl	%eax,(%esp)
000034fd	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00003502	movl	0x00000254(%edi),%ecx
00003508	movl	(%ecx),%eax
0000350a	movl	%ecx,(%esp)
0000350d	call	(%eax)
0000350f	movl	(%eax),%ecx
00003511	movl	%eax,(%esp)
00003514	call	*0x58(%ecx)
00003517	movl	%esi,0x04(%esp)
0000351b	leal	0xfffffde8(%ebp),%esi
00003521	movl	%esi,(%esp)
00003524	calll	_strcpy
00003529	leal	0xd6cc4-0x3221(%ebx),%eax
0000352f	movl	%eax,0x04(%esp)
00003533	movl	%esi,(%esp)
00003536	movl	$0x00000104,0x08(%esp)
0000353e	calll	V_SetExtension(char*, char const*, int)
00003543	movl	0xfffff7f8(%ebp),%eax
00003549	movl	%eax,0x10(%esp)
0000354d	movl	0xfffff800(%ebp),%eax
00003553	movl	%eax,0x0c(%esp)
00003557	leal	0xd6ccf-0x3221(%ebx),%eax
0000355d	movl	%eax,0x08(%esp)
00003561	leal	0xfffffce4(%ebp),%esi
00003567	movl	%esi,(%esp)
0000356a	movl	$0x00000104,0x04(%esp)
00003572	calll	V_snprintf(char*, int, char const*, ...)
00003577	movl	%esi,(%esp)
0000357a	movl	$0x0000002f,0x04(%esp)
00003582	calll	V_FixSlashes(char*, char)
00003587	leal	0xd6b66-0x3221(%ebx),%eax
0000358d	movl	%eax,0x04(%esp)
00003591	movl	0xfffff7e0(%ebp),%eax
00003597	movl	%eax,(%esp)
0000359a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000035a2	calll	KeyValues::GetInt(char const*, int)
000035a7	movl	0xfffff9c0(%ebp),%ecx
000035ad	movl	%ecx,0xfffff9bc(%ebp)
000035b3	movl	0xfffff9bc(%ebp),%ecx
000035b9	movl	%ecx,0x18(%esp)
000035bd	movl	%esi,0x0c(%esp)
000035c1	leal	0xfffffde8(%ebp),%ecx
000035c7	movl	%ecx,0x08(%esp)
000035cb	movl	%eax,0x04(%esp)
000035cf	movl	%edi,(%esp)
000035d2	movl	$0x00000001,0x1c(%esp)
000035da	movl	$0x00000200,0x14(%esp)
000035e2	movl	$0x00000200,0x10(%esp)
000035ea	calll	CMDLPicker::CaptureModel(int, char const*, char const*, int, int, Color, bool)
000035ef	testl	%eax,%eax
000035f1	je	0x000039b8
000035f7	movl	%eax,0x04(%esp)
000035fb	movl	%eax,0xfffff7f8(%ebp)
00003601	leal	0xfffffbe0(%ebp),%esi
00003607	movl	%esi,(%esp)
0000360a	calll	_strcpy
0000360f	leal	0xd6ceb-0x3221(%ebx),%eax
00003615	movl	%eax,0xfffff7dc(%ebp)
0000361b	movl	%eax,0x04(%esp)
0000361f	movl	%esi,(%esp)
00003622	movl	$0x00000104,0x08(%esp)
0000362a	calll	V_SetExtension(char*, char const*, int)
0000362f	movl	0xfffff7ec(%ebp),%eax
00003635	movl	(%eax),%eax
00003637	movl	%esi,0x04(%esp)
0000363b	movl	%eax,(%esp)
0000363e	calll	CP4Factory::AccessFile(char const*) const
00003643	movl	%eax,%edi
00003645	movl	(%edi),%eax
00003647	movl	0x08(%eax),%eax
0000364a	movl	%edi,(%esp)
0000364d	call	*%eax
0000364f	movl	0xe0871-0x3221(%ebx),%eax
00003655	movl	%eax,0xfffff800(%ebp)
0000365b	movl	(%eax),%eax
0000365d	movl	0x04(%eax),%ecx
00003660	movl	0x08(%ecx),%ecx
00003663	leal	0xd6bb3-0x3221(%ebx),%edx
00003669	movl	%edx,0xfffff7e0(%ebp)
0000366f	movl	%edx,0x08(%esp)
00003673	movl	%esi,0x04(%esp)
00003677	addl	$0x04,%eax
0000367a	movl	%eax,(%esp)
0000367d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00003685	call	*%ecx
00003687	movl	%eax,%esi
00003689	testl	%esi,%esi
0000368b	je	0x000036e7
0000368d	movl	0xfffff800(%ebp),%eax
00003693	movl	(%eax),%eax
00003695	movl	(%eax),%ecx
00003697	movl	0x60(%ecx),%ecx
0000369a	leal	0xd6cf0-0x3221(%ebx),%edx
000036a0	movl	%edx,0x08(%esp)
000036a4	movl	%esi,0x04(%esp)
000036a8	movl	%eax,(%esp)
000036ab	call	*%ecx
000036ad	movl	0xfffff800(%ebp),%eax
000036b3	movl	(%eax),%eax
000036b5	movl	(%eax),%ecx
000036b7	movl	0x60(%ecx),%ecx
000036ba	leal	0xd6cf9-0x3221(%ebx),%edx
000036c0	movl	%edx,0x08(%esp)
000036c4	movl	%esi,0x04(%esp)
000036c8	movl	%eax,(%esp)
000036cb	call	*%ecx
000036cd	movl	0xfffff800(%ebp),%eax
000036d3	movl	(%eax),%eax
000036d5	movl	0x04(%eax),%ecx
000036d8	movl	0x0c(%ecx),%ecx
000036db	movl	%esi,0x04(%esp)
000036df	addl	$0x04,%eax
000036e2	movl	%eax,(%esp)
000036e5	call	*%ecx
000036e7	movl	(%edi),%eax
000036e9	movl	0x0c(%eax),%eax
000036ec	movl	%edi,(%esp)
000036ef	call	*%eax
000036f1	movl	(%edi),%eax
000036f3	movl	%edi,(%esp)
000036f6	call	*0x04(%eax)
000036f9	movl	0xfffff7fc(%ebp),%eax
000036ff	movl	%eax,0x04(%esp)
00003703	leal	0xfffffadc(%ebp),%edi
00003709	movl	%edi,(%esp)
0000370c	movl	$0x00000104,0x08(%esp)
00003714	calll	V_strncpy(char*, char const*, int)
00003719	movl	%edi,(%esp)
0000371c	calll	V_StripTrailingSlash(char*)
00003721	leal	0xd6d02-0x3221(%ebx),%eax
00003727	movl	%eax,0x04(%esp)
0000372b	movl	%edi,(%esp)
0000372e	movl	$0xffffffff,0x0c(%esp)
00003736	movl	$0x00000104,0x08(%esp)
0000373e	calll	V_strncat(char*, char const*, unsigned long, int)
00003743	leal	0xd6d0e-0x3221(%ebx),%eax
00003749	movl	%ebx,%esi
0000374b	movl	%eax,0x04(%esp)
0000374f	movl	0xfffff7f8(%ebp),%ebx
00003755	movl	%ebx,(%esp)
00003758	calll	V_stristr(char const*, char const*)
0000375d	testl	%eax,%eax
0000375f	je	0x00003785
00003761	movl	%eax,0x04(%esp)
00003765	movl	%edi,(%esp)
00003768	movl	$0xffffffff,0x0c(%esp)
00003770	movl	$0x00000104,0x08(%esp)
00003778	calll	V_strncat(char*, char const*, unsigned long, int)
0000377d	movl	%edi,(%esp)
00003780	calll	V_StripFilename(char*)
00003785	movl	%edi,(%esp)
00003788	movl	$0x0000002f,0x04(%esp)
00003790	calll	V_FixSlashes(char*, char)
00003795	movl	0xfffff7f0(%ebp),%eax
0000379b	movl	%eax,0xfffff8bc(%ebp)
000037a1	movl	%esi,0xfffff804(%ebp)
000037a7	leal	0xd6d17-0x3221(%esi),%eax
000037ad	movl	%eax,0xfffff7d8(%ebp)
000037b3	movl	%eax,0xfffff8c0(%ebp)
000037b9	leal	0xd6d1e-0x3221(%esi),%eax
000037bf	movl	%eax,0xfffff7d4(%ebp)
000037c5	movl	%eax,0xfffff8c4(%ebp)
000037cb	leal	0xd6d30-0x3221(%esi),%eax
000037d1	movl	%eax,0xfffff7d0(%ebp)
000037d7	movl	%eax,0xfffff8c8(%ebp)
000037dd	leal	0xd6d42-0x3221(%esi),%eax
000037e3	movl	%eax,0xfffff7cc(%ebp)
000037e9	movl	%eax,0xfffff8cc(%ebp)
000037ef	leal	0xd6d4a-0x3221(%esi),%eax
000037f5	movl	%eax,0xfffff7c8(%ebp)
000037fb	movl	%eax,0xfffff8d0(%ebp)
00003801	movl	%edi,0xfffff8d4(%ebp)
00003807	movl	%ebx,%edi
00003809	movl	%edi,0xfffff8d8(%ebp)
0000380f	movl	0xfffff7f4(%ebp),%eax
00003815	movl	(%eax),%ecx
00003817	movl	(%ecx),%eax
00003819	leal	0xfffff8bc(%ebp),%edx
0000381f	movl	%edx,0x08(%esp)
00003823	movl	%ecx,(%esp)
00003826	movl	$0x00000008,0x04(%esp)
0000382e	call	*0x14(%eax)
00003831	movl	%edi,0x04(%esp)
00003835	leal	0xfffff9d8(%ebp),%ebx
0000383b	movl	%ebx,(%esp)
0000383e	calll	_strcpy
00003843	leal	0xd6d52-0x3221(%esi),%eax
00003849	movl	%eax,0x04(%esp)
0000384d	movl	%ebx,(%esp)
00003850	calll	V_stristr(char*, char const*)
00003855	movl	%eax,(%esp)
00003858	addl	$0x06,%eax
0000385b	movl	%eax,0x04(%esp)
0000385f	calll	_strcpy
00003864	leal	0xfffff870(%ebp),%ebx
0000386a	movl	%ebx,(%esp)
0000386d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00003875	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000387d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00003885	calll	CUtlBuffer::CUtlBuffer(int, int, int)
0000388a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff860(%ebp)
00003894	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff864(%ebp)
0000389e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff868(%ebp)
000038a8	movl	0xfffff800(%ebp),%eax
000038ae	movl	(%eax),%ecx
000038b0	movl	0x04(%ecx),%eax
000038b3	movl	0x38(%eax),%eax
000038b6	movl	%ebx,0x0c(%esp)
000038ba	movl	%edi,0x04(%esp)
000038be	addl	$0x04,%ecx
000038c1	movl	%ecx,(%esp)
000038c4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000038cc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000038d4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000038dc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000038e4	call	*%eax
000038e6	cmpb	$0x01,%al
000038e8	jne	0x0000393c
000038ea	leal	0xfffff8ac(%ebp),%eax
000038f0	movl	%eax,0x10(%esp)
000038f4	leal	0xfffff8b0(%ebp),%eax
000038fa	movl	%eax,0x0c(%esp)
000038fe	leal	0xfffff8b4(%ebp),%edi
00003904	movl	%edi,0x08(%esp)
00003908	leal	0xfffff8b8(%ebp),%esi
0000390e	movl	%esi,0x04(%esp)
00003912	movl	%ebx,(%esp)
00003915	calll	TGALoader::GetInfo(CUtlBuffer&, int*, int*, ImageFormat*, float*)
0000391a	cmpl	$0x00000200,0xfffff8b8(%ebp)
00003924	sete	%cl
00003927	testb	%cl,%al
00003929	je	0x0000393c
0000392b	movl	0xfffff8b4(%ebp),%eax
00003931	cmpl	$0x00000200,%eax
00003936	je	0x00003a43
0000393c	movl	0xfffff7f8(%ebp),%eax
00003942	movl	%eax,0x04(%esp)
00003946	movl	0xfffff804(%ebp),%eax
0000394c	leal	0xd6d59-0x3221(%eax),%eax
00003952	movl	%eax,(%esp)
00003955	calll	_Error
0000395a	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff868(%ebp)
00003961	js	0x00003989
00003963	movl	0xfffff860(%ebp),%eax
00003969	testl	%eax,%eax
0000396b	je	0x0000397f
0000396d	movl	%eax,(%esp)
00003970	calll	_free
00003975	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff860(%ebp)
0000397f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff864(%ebp)
00003989	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff878(%ebp)
00003990	js	0x000039b8
00003992	movl	0xfffff870(%ebp),%eax
00003998	testl	%eax,%eax
0000399a	je	0x000039ae
0000399c	movl	%eax,(%esp)
0000399f	calll	_free
000039a4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff870(%ebp)
000039ae	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff874(%ebp)
000039b8	movl	0xfffff7e8(%ebp),%eax
000039be	movl	(%eax),%eax
000039c0	cmpl	0xf0(%ebp),%eax
000039c3	jne	0x0000324f
000039c9	addl	$0x0000084c,%esp
000039cf	popl	%esi
000039d0	popl	%edi
000039d1	popl	%ebx
000039d2	popl	%ebp
000039d3	ret
000039d4	movl	%eax,%esi
000039d6	testl	%edi,%edi
000039d8	je	0x000039e4
000039da	movl	(%edi),%eax
000039dc	movl	0x04(%eax),%eax
000039df	movl	%edi,(%esp)
000039e2	call	*%eax
000039e4	movl	%esi,(%esp)
000039e7	calll	__Unwind_Resume
000039ec	calll	std::terminate()
000039f1	movl	%eax,%esi
000039f3	movl	(%edi),%eax
000039f5	movl	0x0c(%eax),%eax
000039f8	movl	%edi,(%esp)
000039fb	call	*%eax
000039fd	testl	%edi,%edi
000039ff	je	0x000039e4
00003a01	movl	(%edi),%eax
00003a03	movl	0x04(%eax),%eax
00003a06	movl	%edi,(%esp)
00003a09	call	*%eax
00003a0b	jmp	0x000039e4
00003a0d	testl	%edi,%edi
00003a0f	je	0x00003f31
00003a15	movl	(%edi),%eax
00003a17	movl	0x04(%eax),%eax
00003a1a	movl	%edi,(%esp)
00003a1d	call	*%eax
00003a1f	jmp	0x00003f31
00003a24	calll	std::terminate()
00003a29	movl	%eax,%esi
00003a2b	movl	(%edi),%eax
00003a2d	movl	0x04(%eax),%eax
00003a30	movl	%edi,(%esp)
00003a33	call	*%eax
00003a35	jmp	0x000039e4
00003a37	calll	std::terminate()
00003a3c	movl	%eax,%esi
00003a3e	jmp	0x00003ec7
00003a43	movl	%ebx,(%esp)
00003a46	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00003a4e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00003a56	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00003a5b	movl	%edi,0x0c(%esp)
00003a5f	movl	%esi,0x08(%esp)
00003a63	leal	0xfffff860(%ebp),%eax
00003a69	movl	%eax,0x04(%esp)
00003a6d	movl	%ebx,(%esp)
00003a70	calll	TGALoader::LoadRGBA8888(CUtlBuffer&, CUtlMemory<unsigned char, int>&, int&, int&)
00003a75	cmpl	$0x00000200,0xfffff8b8(%ebp)
00003a7f	sete	%cl
00003a82	testb	%cl,%al
00003a84	movl	0x08(%ebp),%esi
00003a87	leal	0xfffffbe0(%ebp),%edi
00003a8d	je	0x00003a9c
00003a8f	movl	0xfffff8b4(%ebp),%eax
00003a95	cmpl	$0x00000200,%eax
00003a9a	je	0x00003abf
00003a9c	movl	0xfffff7f8(%ebp),%eax
00003aa2	movl	%eax,0x04(%esp)
00003aa6	movl	0xfffff804(%ebp),%eax
00003aac	leal	0xd6d7a-0x3221(%eax),%eax
00003ab2	movl	%eax,(%esp)
00003ab5	calll	_Error
00003aba	jmp	0x0000395a
00003abf	movl	$0x00010000,(%esp)
00003ac6	calll	_malloc
00003acb	movl	%eax,0xfffff7fc(%ebp)
00003ad1	movl	$0x00000001,0xfffff818(%ebp)
00003adb	movl	$0x00000001,0xfffff824(%ebp)
00003ae5	movl	$0x3ecccccd,0xfffff850(%ebp)
00003aef	movl	$0x3ecccccd,0xfffff854(%ebp)
00003af9	movl	$0x3f800000,0xfffff830(%ebp)
00003b03	movl	$0x3f800000,0xfffff834(%ebp)
00003b0d	movl	$0x3f800000,0xfffff838(%ebp)
00003b17	movl	$0x3f800000,0xfffff83c(%ebp)
00003b21	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff84c(%ebp)
00003b2b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff848(%ebp)
00003b35	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff844(%ebp)
00003b3f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff840(%ebp)
00003b49	movl	$0x00000200,0xfffff810(%ebp)
00003b53	movl	$0x00000200,0xfffff814(%ebp)
00003b5d	movss	0xfffff8ac(%ebp),%xmm0
00003b65	movss	%xmm0,0xfffff828(%ebp)
00003b6d	movl	0xfffff860(%ebp),%ecx
00003b73	movl	%ecx,0xfffff808(%ebp)
00003b79	movl	$0x00000080,0xfffff81c(%ebp)
00003b83	movl	$0x00000080,0xfffff820(%ebp)
00003b8d	movss	%xmm0,0xfffff82c(%ebp)
00003b95	movl	%eax,0xfffff80c(%ebp)
00003b9b	movl	$0x00000018,0xfffff858(%ebp)
00003ba5	leal	0xfffff808(%ebp),%eax
00003bab	movl	%eax,(%esp)
00003bae	calll	ImageLoader::ResampleRGBA8888(ImageLoader::ResampleInfo_t const&)
00003bb3	testb	%al,%al
00003bb5	jne	0x00003bfd
00003bb7	movl	0xfffff7f8(%ebp),%eax
00003bbd	movl	%eax,0x04(%esp)
00003bc1	movl	0xfffff804(%ebp),%eax
00003bc7	leal	0xd6d99-0x3221(%eax),%eax
00003bcd	movl	%eax,(%esp)
00003bd0	calll	_Error
00003bd5	movl	0xfffff7fc(%ebp),%eax
00003bdb	testl	%eax,%eax
00003bdd	je	0x0000395a
00003be3	movl	%eax,(%esp)
00003be6	calll	_free
00003beb	jmp	0x0000395a
00003bf0	movl	%eax,%esi
00003bf2	movl	0xfffff7fc(%ebp),%eax
00003bf8	jmp	0x00003ebb
00003bfd	movl	0xfffff80c(%ebp),%ecx
00003c03	movl	0xfffff81c(%ebp),%eax
00003c09	movl	0xfffff820(%ebp),%edx
00003c0f	leal	0xfffff9d8(%ebp),%ebx
00003c15	movl	%ebx,0x08(%esp)
00003c19	movl	%edx,0x04(%esp)
00003c1d	movl	%eax,(%esp)
00003c20	xorl	%edx,%edx
00003c22	calll	SaveTgaAndAddToP4(unsigned char*, ImageFormat, int, int, char const*)
00003c27	cmpb	$0x01,%al
00003c29	jne	0x00003bd5
00003c2b	leal	0xfffff9d8(%ebp),%eax
00003c31	movl	%eax,0x04(%esp)
00003c35	movl	%esi,(%esp)
00003c38	calll	CMDLPicker::SaveCaps(char const*)
00003c3d	leal	0xfffff9d8(%ebp),%eax
00003c43	movl	%eax,0x04(%esp)
00003c47	movl	%edi,(%esp)
00003c4a	calll	_strcpy
00003c4f	movl	0xfffff7dc(%ebp),%eax
00003c55	movl	%eax,0x04(%esp)
00003c59	movl	%edi,(%esp)
00003c5c	movl	$0x00000104,0x08(%esp)
00003c64	calll	V_SetExtension(char*, char const*, int)
00003c69	movl	0xfffff7ec(%ebp),%eax
00003c6f	movl	(%eax),%eax
00003c71	movl	%edi,0x04(%esp)
00003c75	movl	%eax,(%esp)
00003c78	calll	CP4Factory::AccessFile(char const*) const
00003c7d	movl	%eax,%ebx
00003c7f	movl	(%ebx),%eax
00003c81	movl	0x08(%eax),%eax
00003c84	movl	%ebx,(%esp)
00003c87	call	*%eax
00003c89	movl	%edi,%edx
00003c8b	movl	0xfffff800(%ebp),%edi
00003c91	movl	(%edi),%eax
00003c93	movl	0x04(%eax),%ecx
00003c96	movl	0x08(%ecx),%ecx
00003c99	movl	0xfffff7e0(%ebp),%esi
00003c9f	movl	%esi,0x08(%esp)
00003ca3	movl	%edx,0x04(%esp)
00003ca7	addl	$0x04,%eax
00003caa	movl	%eax,(%esp)
00003cad	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00003cb5	call	*%ecx
00003cb7	movl	%eax,%esi
00003cb9	testl	%esi,%esi
00003cbb	je	0x00003d11
00003cbd	movl	(%edi),%eax
00003cbf	movl	(%eax),%ecx
00003cc1	movl	0x60(%ecx),%ecx
00003cc4	movl	0xfffff804(%ebp),%edx
00003cca	leal	0xd6cf0-0x3221(%edx),%edx
00003cd0	movl	%edx,0x08(%esp)
00003cd4	movl	%esi,0x04(%esp)
00003cd8	movl	%eax,(%esp)
00003cdb	call	*%ecx
00003cdd	movl	(%edi),%eax
00003cdf	movl	(%eax),%ecx
00003ce1	movl	0x60(%ecx),%ecx
00003ce4	movl	0xfffff804(%ebp),%edx
00003cea	leal	0xd6cf9-0x3221(%edx),%edx
00003cf0	movl	%edx,0x08(%esp)
00003cf4	movl	%esi,0x04(%esp)
00003cf8	movl	%eax,(%esp)
00003cfb	call	*%ecx
00003cfd	movl	(%edi),%eax
00003cff	movl	0x04(%eax),%ecx
00003d02	movl	0x0c(%ecx),%ecx
00003d05	movl	%esi,0x04(%esp)
00003d09	addl	$0x04,%eax
00003d0c	movl	%eax,(%esp)
00003d0f	call	*%ecx
00003d11	movl	(%ebx),%eax
00003d13	movl	0x0c(%eax),%eax
00003d16	movl	%ebx,(%esp)
00003d19	call	*%eax
00003d1b	movl	0x08(%ebp),%esi
00003d1e	movl	(%ebx),%eax
00003d20	movl	0x04(%eax),%eax
00003d23	movl	%ebx,(%esp)
00003d26	call	*%eax
00003d28	movl	0xfffff7f0(%ebp),%eax
00003d2e	movl	%eax,0xfffff8bc(%ebp)
00003d34	movl	0xfffff7d8(%ebp),%eax
00003d3a	movl	%eax,0xfffff8c0(%ebp)
00003d40	movl	0xfffff7d4(%ebp),%eax
00003d46	movl	%eax,0xfffff8c4(%ebp)
00003d4c	movl	0xfffff7d0(%ebp),%eax
00003d52	movl	%eax,0xfffff8c8(%ebp)
00003d58	movl	0xfffff7cc(%ebp),%eax
00003d5e	movl	%eax,0xfffff8cc(%ebp)
00003d64	movl	0xfffff7c8(%ebp),%eax
00003d6a	movl	%eax,0xfffff8d0(%ebp)
00003d70	leal	0xfffffadc(%ebp),%eax
00003d76	movl	%eax,0xfffff8d4(%ebp)
00003d7c	leal	0xfffff9d8(%ebp),%eax
00003d82	movl	%eax,0xfffff8d8(%ebp)
00003d88	movl	0xfffff7f4(%ebp),%eax
00003d8e	movl	(%eax),%ecx
00003d90	movl	(%ecx),%eax
00003d92	movl	0x14(%eax),%eax
00003d95	leal	0xfffff8bc(%ebp),%edx
00003d9b	movl	%edx,0x08(%esp)
00003d9f	movl	%ecx,(%esp)
00003da2	movl	$0x00000008,0x04(%esp)
00003daa	call	*%eax
00003dac	movl	0x00000254(%esi),%eax
00003db2	movl	(%eax),%ecx
00003db4	movl	0x000000a0(%ecx),%ecx
00003dba	movl	0xfffff7e4(%ebp),%edx
00003dc0	movl	%edx,0x04(%esp)
00003dc4	movl	%eax,(%esp)
00003dc7	call	*%ecx
00003dc9	movl	0x00000254(%esi),%eax
00003dcf	movl	0xfffff9d4(%ebp),%ecx
00003dd5	movl	0xfffff9d0(%ebp),%edx
00003ddb	movl	%edx,0x08(%esp)
00003ddf	movl	%ecx,0x04(%esp)
00003de3	movl	%eax,(%esp)
00003de6	calll	vgui::Panel::SetPos(int, int)
00003deb	movl	0x00000254(%esi),%eax
00003df1	movl	0xfffff9cc(%ebp),%ecx
00003df7	movl	0xfffff9c8(%ebp),%edx
00003dfd	movl	%edx,0x08(%esp)
00003e01	movl	%ecx,0x04(%esp)
00003e05	movl	%eax,(%esp)
00003e08	calll	vgui::Panel::SetSize(int, int)
00003e0d	movl	0x00000254(%esi),%eax
00003e13	leal	0xfffff9c4(%ebp),%ecx
00003e19	movl	%ecx,0x04(%esp)
00003e1d	movl	%eax,(%esp)
00003e20	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00003e25	movl	0x00000254(%esi),%eax
00003e2b	movl	(%eax),%ecx
00003e2d	movl	(%ecx),%ecx
00003e2f	movl	%eax,(%esp)
00003e32	call	*%ecx
00003e34	movl	(%eax),%ecx
00003e36	movl	0x58(%ecx),%ecx
00003e39	movl	%eax,(%esp)
00003e3c	call	*%ecx
00003e3e	jmp	0x00003bd5
00003e43	movl	%eax,%esi
00003e45	testl	%ebx,%ebx
00003e47	je	0x00003bf2
00003e4d	movl	(%ebx),%eax
00003e4f	movl	0x04(%eax),%eax
00003e52	movl	%ebx,(%esp)
00003e55	call	*%eax
00003e57	jmp	0x00003bf2
00003e5c	calll	std::terminate()
00003e61	movl	%eax,%esi
00003e63	movl	(%ebx),%eax
00003e65	movl	0x0c(%eax),%eax
00003e68	movl	%ebx,(%esp)
00003e6b	call	*%eax
00003e6d	testl	%ebx,%ebx
00003e6f	jne	0x00003eab
00003e71	movl	0xfffff7fc(%ebp),%eax
00003e77	jmp	0x00003ebb
00003e79	testl	%ebx,%ebx
00003e7b	je	0x00003f31
00003e81	movl	(%ebx),%eax
00003e83	movl	0x04(%eax),%eax
00003e86	movl	%ebx,(%esp)
00003e89	call	*%eax
00003e8b	jmp	0x00003f31
00003e90	calll	std::terminate()
00003e95	movl	%eax,%esi
00003e97	movl	(%ebx),%eax
00003e99	movl	0x04(%eax),%eax
00003e9c	movl	%ebx,(%esp)
00003e9f	call	*%eax
00003ea1	jmp	0x00003bf2
00003ea6	calll	std::terminate()
00003eab	movl	(%ebx),%eax
00003ead	movl	0x04(%eax),%eax
00003eb0	movl	%ebx,(%esp)
00003eb3	call	*%eax
00003eb5	movl	0xfffff7fc(%ebp),%eax
00003ebb	testl	%eax,%eax
00003ebd	je	0x00003ec7
00003ebf	movl	%eax,(%esp)
00003ec2	calll	_free
00003ec7	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff868(%ebp)
00003ece	js	0x00003ef6
00003ed0	movl	0xfffff860(%ebp),%eax
00003ed6	testl	%eax,%eax
00003ed8	je	0x00003eec
00003eda	movl	%eax,(%esp)
00003edd	calll	_free
00003ee2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff860(%ebp)
00003eec	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff864(%ebp)
00003ef6	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff878(%ebp)
00003efd	js	0x000039e4
00003f03	movl	0xfffff870(%ebp),%eax
00003f09	testl	%eax,%eax
00003f0b	je	0x00003f1f
00003f0d	movl	%eax,(%esp)
00003f10	calll	_free
00003f15	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff870(%ebp)
00003f1f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffff874(%ebp)
00003f29	movl	%esi,(%esp)
00003f2c	calll	__Unwind_Resume
00003f31	calll	std::terminate()
00003f36	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::SaveCaps(char const*):
00003f40	pushl	%ebp
00003f41	movl	%esp,%ebp
00003f43	pushl	%ebx
00003f44	pushl	%edi
00003f45	pushl	%esi
00003f46	subl	$0x0000046c,%esp
00003f4c	calll	0x00003f51
00003f51	popl	%edi
00003f52	movl	0xe0869-0x3f51(%edi),%eax
00003f58	movl	%eax,0xfffffbb0(%ebp)
00003f5e	movl	(%eax),%eax
00003f60	movl	%eax,0xf0(%ebp)
00003f63	movl	$0x00000020,(%esp)
00003f6a	calll	KeyValues::operator new(unsigned long)
00003f6f	movl	%eax,%esi
00003f71	leal	0xd6daf-0x3f51(%edi),%eax
00003f77	movl	%eax,0x04(%esp)
00003f7b	movl	%esi,(%esp)
00003f7e	calll	KeyValues::KeyValues(char const*)
00003f83	movl	0x08(%ebp),%eax
00003f86	movl	0x00000254(%eax),%eax
00003f8c	leal	0xfffffbd0(%ebp),%ecx
00003f92	movl	%ecx,0x08(%esp)
00003f96	leal	0xfffffbe0(%ebp),%ecx
00003f9c	movl	%ecx,0x04(%esp)
00003fa0	movl	%eax,(%esp)
00003fa3	calll	CPotteryWheelPanel::GetCameraPositionAndAngles(Vector&, QAngle&)
00003fa8	movss	0xfffffbe0(%ebp),%xmm0
00003fb0	movss	0xfffffbe4(%ebp),%xmm1
00003fb8	movss	0xfffffbe8(%ebp),%xmm2
00003fc0	cvtss2sd	%xmm2,%xmm2
00003fc4	movsd	%xmm2,0x18(%esp)
00003fca	cvtss2sd	%xmm1,%xmm1
00003fce	movsd	%xmm1,0x10(%esp)
00003fd4	cvtss2sd	%xmm0,%xmm0
00003fd8	movsd	%xmm0,0x08(%esp)
00003fde	movl	%edi,%ebx
00003fe0	movl	%ebx,0xfffffbb4(%ebp)
00003fe6	leal	0xd6dba-0x3f51(%ebx),%eax
00003fec	movl	%eax,0xfffffbb8(%ebp)
00003ff2	movl	%eax,0x04(%esp)
00003ff6	movl	%esi,%edi
00003ff8	movl	%edi,0xfffffbbc(%ebp)
00003ffe	leal	0xfffffbf0(%ebp),%esi
00004004	movl	%esi,(%esp)
00004007	calll	_sprintf
0000400c	movl	%esi,0x08(%esp)
00004010	leal	0xd6dc3-0x3f51(%ebx),%eax
00004016	movl	%eax,0x04(%esp)
0000401a	movl	%edi,(%esp)
0000401d	calll	KeyValues::SetString(char const*, char const*)
00004022	movss	0xfffffbd0(%ebp),%xmm0
0000402a	movss	0xfffffbd4(%ebp),%xmm1
00004032	movss	0xfffffbd8(%ebp),%xmm2
0000403a	cvtss2sd	%xmm2,%xmm2
0000403e	movsd	%xmm2,0x18(%esp)
00004044	cvtss2sd	%xmm1,%xmm1
00004048	movsd	%xmm1,0x10(%esp)
0000404e	cvtss2sd	%xmm0,%xmm0
00004052	movsd	%xmm0,0x08(%esp)
00004058	movl	0xfffffbb8(%ebp),%eax
0000405e	movl	%eax,0x04(%esp)
00004062	movl	%esi,(%esp)
00004065	calll	_sprintf
0000406a	movl	%esi,0x08(%esp)
0000406e	leal	0xd6dd2-0x3f51(%ebx),%eax
00004074	movl	%eax,0x04(%esp)
00004078	movl	%edi,(%esp)
0000407b	calll	KeyValues::SetString(char const*, char const*)
00004080	movl	0x08(%ebp),%edi
00004083	movl	0x00000254(%edi),%eax
00004089	leal	0xfffffbc0(%ebp),%ecx
0000408f	movl	%ecx,0x04(%esp)
00004093	movl	%eax,(%esp)
00004096	calll	CPotteryWheelPanel::GetCameraOffset(Vector&)
0000409b	movss	0xfffffbc0(%ebp),%xmm0
000040a3	movss	0xfffffbc4(%ebp),%xmm1
000040ab	movss	0xfffffbc8(%ebp),%xmm2
000040b3	cvtss2sd	%xmm2,%xmm2
000040b7	movsd	%xmm2,0x18(%esp)
000040bd	cvtss2sd	%xmm1,%xmm1
000040c1	movsd	%xmm1,0x10(%esp)
000040c7	cvtss2sd	%xmm0,%xmm0
000040cb	movsd	%xmm0,0x08(%esp)
000040d1	movl	0xfffffbb8(%ebp),%eax
000040d7	movl	%eax,0x04(%esp)
000040db	movl	%esi,(%esp)
000040de	calll	_sprintf
000040e3	movl	%esi,0x08(%esp)
000040e7	leal	0xd6ddf-0x3f51(%ebx),%eax
000040ed	movl	%eax,0x04(%esp)
000040f1	movl	0xfffffbbc(%ebp),%eax
000040f7	movl	%eax,(%esp)
000040fa	calll	KeyValues::SetString(char const*, char const*)
000040ff	movl	0x00000278(%edi),%eax
00004105	leal	0xd6931-0x3f51(%ebx),%ecx
0000410b	movl	%ecx,0xfffffbb8(%ebp)
00004111	movl	%ecx,0x04(%esp)
00004115	movl	%eax,(%esp)
00004118	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004120	calll	vgui::Panel::FindChildByName(char const*, bool)
00004125	movl	0x00000228(%eax),%eax
0000412b	movl	%eax,%ecx
0000412d	shrl	$0x18,%ecx
00004130	movl	%ecx,0x14(%esp)
00004134	leal	0xd6dec-0x3f51(%ebx),%ecx
0000413a	movl	%ecx,0x04(%esp)
0000413e	movl	%esi,(%esp)
00004141	movzbl	%ah,%ecx
00004144	movl	%ecx,0x0c(%esp)
00004148	movzbl	%al,%ecx
0000414b	movl	%ecx,0x08(%esp)
0000414f	shrl	$0x10,%eax
00004152	movzbl	%al,%eax
00004155	movl	%eax,0x10(%esp)
00004159	calll	_sprintf
0000415e	movl	%esi,0x08(%esp)
00004162	movl	%esi,%edi
00004164	movl	0xfffffbb8(%ebp),%eax
0000416a	movl	%eax,0x04(%esp)
0000416e	movl	0xfffffbbc(%ebp),%ebx
00004174	movl	%ebx,(%esp)
00004177	calll	KeyValues::SetString(char const*, char const*)
0000417c	movl	0x08(%ebp),%ecx
0000417f	movl	%ecx,%eax
00004181	movl	0x00000278(%eax),%eax
00004187	movl	0xfffffbb4(%ebp),%esi
0000418d	leal	0xd6962-0x3f51(%esi),%ecx
00004193	movl	%ecx,0x04(%esp)
00004197	movl	%eax,(%esp)
0000419a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000041a2	calll	vgui::Panel::FindChildByName(char const*, bool)
000041a7	movl	(%eax),%ecx
000041a9	movl	%edi,0x04(%esp)
000041ad	movl	%eax,(%esp)
000041b0	movl	$0x00000400,0x08(%esp)
000041b8	call	*0x00000350(%ecx)
000041be	movl	%edi,0x08(%esp)
000041c2	leal	0xd6df8-0x3f51(%esi),%eax
000041c8	movl	%eax,0x04(%esp)
000041cc	movl	%ebx,(%esp)
000041cf	calll	KeyValues::SetString(char const*, char const*)
000041d4	movl	0x08(%ebp),%edi
000041d7	movl	0x00000278(%edi),%eax
000041dd	leal	0xd6970-0x3f51(%esi),%ecx
000041e3	movl	%esi,%ebx
000041e5	movl	%ecx,0x04(%esp)
000041e9	movl	%eax,(%esp)
000041ec	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000041f4	calll	vgui::Panel::FindChildByName(char const*, bool)
000041f9	movl	(%eax),%ecx
000041fb	leal	0xfffffbf0(%ebp),%esi
00004201	movl	%esi,0x04(%esp)
00004205	movl	%eax,(%esp)
00004208	movl	$0x00000400,0x08(%esp)
00004210	call	*0x00000350(%ecx)
00004216	movl	%esi,0x08(%esp)
0000421a	leal	0xd6dfe-0x3f51(%ebx),%eax
00004220	movl	%eax,0x04(%esp)
00004224	movl	0xfffffbbc(%ebp),%esi
0000422a	movl	%esi,(%esp)
0000422d	calll	KeyValues::SetString(char const*, char const*)
00004232	movl	0x00000264(%edi),%eax
00004238	movl	%ebx,%edi
0000423a	leal	0xd6a22-0x3f51(%edi),%ebx
00004240	movl	%ebx,0x04(%esp)
00004244	movl	%eax,(%esp)
00004247	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000424f	calll	vgui::Panel::FindChildByName(char const*, bool)
00004254	movl	(%eax),%ecx
00004256	movl	%eax,(%esp)
00004259	call	*0x000003f4(%ecx)
0000425f	movzbl	%al,%eax
00004262	movl	%eax,0x08(%esp)
00004266	movl	%ebx,0x04(%esp)
0000426a	movl	%esi,(%esp)
0000426d	calll	KeyValues::SetInt(char const*, int)
00004272	movl	0x08(%ebp),%ecx
00004275	movl	0x00000264(%ecx),%eax
0000427b	movl	%ecx,%ebx
0000427d	leal	0xd6a2b-0x3f51(%edi),%esi
00004283	movl	%esi,0x04(%esp)
00004287	movl	%eax,(%esp)
0000428a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004292	calll	vgui::Panel::FindChildByName(char const*, bool)
00004297	movl	(%eax),%ecx
00004299	movl	%eax,(%esp)
0000429c	call	*0x000003f4(%ecx)
000042a2	movzbl	%al,%eax
000042a5	movl	%eax,0x08(%esp)
000042a9	movl	%esi,0x04(%esp)
000042ad	movl	0xfffffbbc(%ebp),%esi
000042b3	movl	%esi,(%esp)
000042b6	calll	KeyValues::SetInt(char const*, int)
000042bb	movl	0x00000264(%ebx),%eax
000042c1	leal	0xd6a35-0x3f51(%edi),%ecx
000042c7	movl	%ecx,0x04(%esp)
000042cb	movl	%eax,(%esp)
000042ce	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000042d6	calll	vgui::Panel::FindChildByName(char const*, bool)
000042db	movl	(%eax),%ecx
000042dd	movl	%eax,(%esp)
000042e0	call	*0x000003f4(%ecx)
000042e6	movzbl	%al,%eax
000042e9	movl	%eax,0x08(%esp)
000042ed	leal	0xd6e05-0x3f51(%edi),%eax
000042f3	movl	%eax,0x04(%esp)
000042f7	movl	%esi,(%esp)
000042fa	calll	KeyValues::SetInt(char const*, int)
000042ff	movl	0x00000264(%ebx),%eax
00004305	leal	0xd6a3f-0x3f51(%edi),%ecx
0000430b	movl	%ecx,0x04(%esp)
0000430f	movl	%ecx,%edi
00004311	movl	%eax,(%esp)
00004314	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000431c	calll	vgui::Panel::FindChildByName(char const*, bool)
00004321	movl	(%eax),%ecx
00004323	movl	%eax,(%esp)
00004326	call	*0x000003f4(%ecx)
0000432c	movzbl	%al,%eax
0000432f	movl	%eax,0x08(%esp)
00004333	movl	%edi,0x04(%esp)
00004337	movl	%esi,(%esp)
0000433a	calll	KeyValues::SetInt(char const*, int)
0000433f	movl	0x00000264(%ebx),%eax
00004345	movl	0xfffffbb4(%ebp),%ecx
0000434b	leal	0xd6a48-0x3f51(%ecx),%edi
00004351	movl	%ecx,%ebx
00004353	movl	%edi,0x04(%esp)
00004357	movl	%eax,(%esp)
0000435a	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004362	calll	vgui::Panel::FindChildByName(char const*, bool)
00004367	movl	(%eax),%ecx
00004369	movl	%eax,(%esp)
0000436c	call	*0x000003f4(%ecx)
00004372	movzbl	%al,%eax
00004375	movl	%eax,0x08(%esp)
00004379	movl	%edi,0x04(%esp)
0000437d	movl	%esi,(%esp)
00004380	calll	KeyValues::SetInt(char const*, int)
00004385	movl	0x08(%ebp),%eax
00004388	cmpw	$0xff,0x0000028e(%eax)
00004390	je	0x000043e9
00004392	calll	vgui::MDLCache()
00004397	movl	(%eax),%ecx
00004399	movl	0x08(%ebp),%edx
0000439c	movzwl	0x0000028e(%edx),%edx
000043a3	movl	%edx,0x04(%esp)
000043a7	movl	%eax,(%esp)
000043aa	call	*0x5c(%ecx)
000043ad	movl	%eax,%edi
000043af	leal	0xd6e0f-0x3f51(%ebx),%eax
000043b5	movl	%eax,0x04(%esp)
000043b9	movl	%ebx,%esi
000043bb	leal	0xfffffbf0(%ebp),%ebx
000043c1	movl	%ebx,(%esp)
000043c4	movl	$0x00000001,0x08(%esp)
000043cc	calll	_sprintf
000043d1	movl	%edi,0x08(%esp)
000043d5	movl	%ebx,0x04(%esp)
000043d9	movl	%esi,%ebx
000043db	movl	0xfffffbbc(%ebp),%eax
000043e1	movl	%eax,(%esp)
000043e4	calll	KeyValues::SetString(char const*, char const*)
000043e9	movl	0x08(%ebp),%ecx
000043ec	leal	0xfffffbf0(%ebp),%edi
000043f2	movl	0x0c(%ebp),%eax
000043f5	testl	%eax,%eax
000043f7	je	0x00004421
000043f9	movl	%eax,0x04(%esp)
000043fd	movl	%edi,(%esp)
00004400	calll	_strcpy
00004405	leal	0xd6e19-0x3f51(%ebx),%eax
0000440b	movl	%eax,0x04(%esp)
0000440f	movl	%edi,(%esp)
00004412	movl	$0x00000400,0x08(%esp)
0000441a	calll	V_SetExtension(char*, char const*, int)
0000441f	jmp	0x00004493
00004421	movl	0x00000278(%ecx),%eax
00004427	leal	0xd697b-0x3f51(%ebx),%ecx
0000442d	movl	%ecx,0x04(%esp)
00004431	movl	%eax,(%esp)
00004434	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000443c	calll	vgui::Panel::FindChildByName(char const*, bool)
00004441	movl	(%eax),%ecx
00004443	movl	%edi,0x04(%esp)
00004447	movl	%eax,(%esp)
0000444a	movl	$0x00000400,0x08(%esp)
00004452	call	*0x00000350(%ecx)
00004458	movl	%edi,(%esp)
0000445b	calll	_strlen
00004460	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbfe(%ebp,%eax)
00004468	movw	$0x6766,0xfffffbfc(%ebp,%eax)
00004472	movl	$0x632e7370,0xfffffbf8(%ebp,%eax)
0000447d	movl	$0x61436e65,0xfffffbf4(%ebp,%eax)
00004488	movl	$0x65726353,0xfffffbf0(%ebp,%eax)
00004493	movl	0xfffffbbc(%ebp),%edx
00004499	movl	0xe0871-0x3f51(%ebx),%eax
0000449f	movl	(%eax),%eax
000044a1	movl	%edi,0x08(%esp)
000044a5	xorl	%ecx,%ecx
000044a7	testl	%eax,%eax
000044a9	leal	0x04(%eax),%eax
000044ac	cmovel	%ecx,%eax
000044af	movl	%eax,0x04(%esp)
000044b3	movl	%edx,(%esp)
000044b6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000044be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000044c6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000044ce	calll	KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*, bool, bool)
000044d3	movl	0xe086d-0x3f51(%ebx),%eax
000044d9	movl	(%eax),%eax
000044db	movl	%edi,0x04(%esp)
000044df	movl	%eax,(%esp)
000044e2	calll	CP4Factory::AccessFile(char const*) const
000044e7	movl	%eax,%esi
000044e9	movl	(%esi),%eax
000044eb	movl	0x0c(%eax),%eax
000044ee	movl	%esi,(%esp)
000044f1	call	*%eax
000044f3	testl	%esi,%esi
000044f5	je	0x000044ff
000044f7	movl	(%esi),%eax
000044f9	movl	%esi,(%esp)
000044fc	call	*0x04(%eax)
000044ff	movl	0xfffffbb0(%ebp),%eax
00004505	movl	(%eax),%eax
00004507	cmpl	0xf0(%ebp),%eax
0000450a	jne	0x00004540
0000450c	addl	$0x0000046c,%esp
00004512	popl	%esi
00004513	popl	%edi
00004514	popl	%ebx
00004515	popl	%ebp
00004516	ret
00004517	movl	%eax,%edi
00004519	testl	%esi,%esi
0000451b	je	0x00004538
0000451d	movl	(%esi),%eax
0000451f	movl	0x04(%eax),%eax
00004522	movl	%esi,(%esp)
00004525	call	*%eax
00004527	jmp	0x00004538
00004529	calll	std::terminate()
0000452e	movl	%eax,%edi
00004530	movl	%esi,(%esp)
00004533	calll	KeyValues::operator delete(void*)
00004538	movl	%edi,(%esp)
0000453b	calll	__Unwind_Resume
00004540	calll	___stack_chk_fail
00004545	calll	std::terminate()
0000454a	nopw	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::RestoreCaps(char const*):
00004550	pushl	%ebp
00004551	movl	%esp,%ebp
00004553	pushl	%ebx
00004554	pushl	%edi
00004555	pushl	%esi
00004556	subl	$0x0000047c,%esp
0000455c	calll	0x00004561
00004561	popl	%edi
00004562	movl	0xe0869-0x4561(%edi),%eax
00004568	movl	%eax,0xfffffb9c(%ebp)
0000456e	movl	(%eax),%eax
00004570	movl	%eax,0xf0(%ebp)
00004573	movl	0x0c(%ebp),%eax
00004576	movl	0x08(%ebp),%ecx
00004579	testl	%eax,%eax
0000457b	je	0x000045ab
0000457d	movl	%eax,0x04(%esp)
00004581	leal	0xfffffbf0(%ebp),%esi
00004587	movl	%esi,(%esp)
0000458a	calll	_strcpy
0000458f	leal	0xd6e19-0x4561(%edi),%eax
00004595	movl	%eax,0x04(%esp)
00004599	movl	%esi,(%esp)
0000459c	movl	$0x00000400,0x08(%esp)
000045a4	calll	V_SetExtension(char*, char const*, int)
000045a9	jmp	0x00004623
000045ab	movl	0x00000278(%ecx),%eax
000045b1	leal	0xd697b-0x4561(%edi),%ecx
000045b7	movl	%ecx,0x04(%esp)
000045bb	movl	%eax,(%esp)
000045be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000045c6	calll	vgui::Panel::FindChildByName(char const*, bool)
000045cb	movl	(%eax),%ecx
000045cd	leal	0xfffffbf0(%ebp),%esi
000045d3	movl	%esi,0x04(%esp)
000045d7	movl	%eax,(%esp)
000045da	movl	$0x00000400,0x08(%esp)
000045e2	call	*0x00000350(%ecx)
000045e8	movl	%esi,(%esp)
000045eb	calll	_strlen
000045f0	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbfe(%ebp,%eax)
000045f8	movw	$0x6766,0xfffffbfc(%ebp,%eax)
00004602	movl	$0x632e7370,0xfffffbf8(%ebp,%eax)
0000460d	movl	$0x61436e65,0xfffffbf4(%ebp,%eax)
00004618	movl	$0x65726353,0xfffffbf0(%ebp,%eax)
00004623	movl	$0x00000020,(%esp)
0000462a	calll	KeyValues::operator new(unsigned long)
0000462f	movl	%eax,%esi
00004631	leal	0xd6daf-0x4561(%edi),%eax
00004637	movl	%eax,0x04(%esp)
0000463b	movl	%esi,(%esp)
0000463e	calll	KeyValues::KeyValues(char const*)
00004643	movl	0xe0871-0x4561(%edi),%eax
00004649	movl	(%eax),%eax
0000464b	leal	0xfffffbf0(%ebp),%ecx
00004651	movl	%ecx,0x08(%esp)
00004655	xorl	%ecx,%ecx
00004657	testl	%eax,%eax
00004659	leal	0x04(%eax),%eax
0000465c	cmovel	%ecx,%eax
0000465f	movl	%eax,0x04(%esp)
00004663	movl	%esi,(%esp)
00004666	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
0000466e	calll	KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*)
00004673	xorb	%cl,%cl
00004675	testb	%al,%al
00004677	je	0x00004b80
0000467d	leal	0xd6a5b-0x4561(%edi),%eax
00004683	movl	%eax,0xfffffba8(%ebp)
00004689	movl	%eax,0x08(%esp)
0000468d	leal	0xd6dc3-0x4561(%edi),%eax
00004693	movl	%eax,0x04(%esp)
00004697	movl	%esi,(%esp)
0000469a	calll	KeyValues::GetString(char const*, char const*)
0000469f	leal	0xfffffbe8(%ebp),%ecx
000046a5	movl	%ecx,0x10(%esp)
000046a9	leal	0xfffffbe4(%ebp),%ecx
000046af	movl	%ecx,0x0c(%esp)
000046b3	leal	0xfffffbe0(%ebp),%ecx
000046b9	movl	%ecx,0x08(%esp)
000046bd	movl	%edi,%ebx
000046bf	movl	%ebx,0xfffffba4(%ebp)
000046c5	leal	0xd6dba-0x4561(%ebx),%ecx
000046cb	movl	%ecx,0xfffffba0(%ebp)
000046d1	movl	%ecx,0x04(%esp)
000046d5	movl	%eax,(%esp)
000046d8	calll	_sscanf
000046dd	movl	0xfffffba8(%ebp),%edi
000046e3	movl	%edi,0x08(%esp)
000046e7	leal	0xd6dd2-0x4561(%ebx),%eax
000046ed	movl	%eax,0x04(%esp)
000046f1	movl	%esi,(%esp)
000046f4	calll	KeyValues::GetString(char const*, char const*)
000046f9	leal	0xfffffbd8(%ebp),%ecx
000046ff	movl	%ecx,0x10(%esp)
00004703	leal	0xfffffbd4(%ebp),%ecx
00004709	movl	%ecx,0x0c(%esp)
0000470d	leal	0xfffffbd0(%ebp),%ecx
00004713	movl	%ecx,0x08(%esp)
00004717	movl	0xfffffba0(%ebp),%ecx
0000471d	movl	%ecx,0x04(%esp)
00004721	movl	%eax,(%esp)
00004724	calll	_sscanf
00004729	movl	%edi,0x08(%esp)
0000472d	leal	0xd6ddf-0x4561(%ebx),%eax
00004733	movl	%eax,0x04(%esp)
00004737	movl	%esi,(%esp)
0000473a	calll	KeyValues::GetString(char const*, char const*)
0000473f	leal	0xfffffbc8(%ebp),%ecx
00004745	movl	%ecx,0x10(%esp)
00004749	leal	0xfffffbc4(%ebp),%ecx
0000474f	movl	%ecx,0x0c(%esp)
00004753	movl	%esi,0xfffffbac(%ebp)
00004759	leal	0xfffffbc0(%ebp),%ebx
0000475f	movl	%ebx,0x08(%esp)
00004763	movl	0xfffffba0(%ebp),%ecx
00004769	movl	%ecx,0x04(%esp)
0000476d	movl	%eax,(%esp)
00004770	calll	_sscanf
00004775	movl	0x08(%ebp),%eax
00004778	movl	%eax,%edi
0000477a	movl	0x00000254(%edi),%eax
00004780	movl	%ebx,0x04(%esp)
00004784	movl	%eax,(%esp)
00004787	calll	CPotteryWheelPanel::SetCameraOffset(Vector const&)
0000478c	movl	0x00000254(%edi),%eax
00004792	leal	0xfffffbd0(%ebp),%ecx
00004798	movl	%ecx,0x08(%esp)
0000479c	leal	0xfffffbe0(%ebp),%ecx
000047a2	movl	%ecx,0x04(%esp)
000047a6	movl	%eax,(%esp)
000047a9	movl	$0x00000001,0x0c(%esp)
000047b1	calll	CPotteryWheelPanel::SetCameraPositionAndAngles(Vector const&, QAngle const&, bool)
000047b6	movl	0x00000278(%edi),%eax
000047bc	movl	0xfffffba4(%ebp),%edi
000047c2	leal	0xd6931-0x4561(%edi),%ebx
000047c8	movl	%ebx,0x04(%esp)
000047cc	movl	%eax,(%esp)
000047cf	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000047d7	calll	vgui::Panel::FindChildByName(char const*, bool)
000047dc	movl	%eax,0xfffffba0(%ebp)
000047e2	movl	0xfffffba8(%ebp),%eax
000047e8	movl	%eax,0x08(%esp)
000047ec	movl	%ebx,0x04(%esp)
000047f0	movl	%esi,(%esp)
000047f3	calll	KeyValues::GetString(char const*, char const*)
000047f8	leal	0xfffffbb0(%ebp),%ecx
000047fe	movl	%ecx,0x14(%esp)
00004802	leal	0xfffffbb4(%ebp),%ecx
00004808	movl	%ecx,0x10(%esp)
0000480c	leal	0xfffffbb8(%ebp),%ecx
00004812	movl	%ecx,0x0c(%esp)
00004816	leal	0xfffffbbc(%ebp),%ecx
0000481c	movl	%ecx,0x08(%esp)
00004820	leal	0xd6dec-0x4561(%edi),%ecx
00004826	movl	%ecx,0x04(%esp)
0000482a	movl	%eax,(%esp)
0000482d	calll	_sscanf
00004832	movl	0xfffffbbc(%ebp),%eax
00004838	movl	0xfffffbb8(%ebp),%ecx
0000483e	movl	0xfffffbb4(%ebp),%edx
00004844	movl	0xfffffbb0(%ebp),%esi
0000484a	movl	%esi,0x10(%esp)
0000484e	movl	%edx,0x0c(%esp)
00004852	movl	%ecx,0x08(%esp)
00004856	movl	%eax,0x04(%esp)
0000485a	movl	0xfffffba0(%ebp),%eax
00004860	movl	%eax,(%esp)
00004863	calll	CColorPickerButton::SetColor(int, int, int, int)
00004868	movl	0x08(%ebp),%ecx
0000486b	movl	%ecx,%eax
0000486d	movl	0x00000278(%eax),%eax
00004873	leal	0xd6962-0x4561(%edi),%ecx
00004879	movl	%ecx,0x04(%esp)
0000487d	movl	%eax,(%esp)
00004880	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004888	calll	vgui::Panel::FindChildByName(char const*, bool)
0000488d	movl	%eax,%esi
0000488f	movl	(%esi),%eax
00004891	movl	0x0000034c(%eax),%eax
00004897	movl	%eax,0xfffffba0(%ebp)
0000489d	movl	0xfffffba8(%ebp),%eax
000048a3	movl	%eax,0x08(%esp)
000048a7	leal	0xd6df8-0x4561(%edi),%eax
000048ad	movl	%eax,0x04(%esp)
000048b1	movl	0xfffffbac(%ebp),%ebx
000048b7	movl	%ebx,(%esp)
000048ba	calll	KeyValues::GetString(char const*, char const*)
000048bf	movl	%eax,0x04(%esp)
000048c3	movl	%esi,(%esp)
000048c6	call	*0xfffffba0(%ebp)
000048cc	movl	0x08(%ebp),%esi
000048cf	movl	0x00000278(%esi),%eax
000048d5	leal	0xd6970-0x4561(%edi),%ecx
000048db	movl	%ecx,0x04(%esp)
000048df	movl	%eax,(%esp)
000048e2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000048ea	calll	vgui::Panel::FindChildByName(char const*, bool)
000048ef	movl	%eax,0xfffffb98(%ebp)
000048f5	movl	(%eax),%ecx
000048f7	movl	0x0000034c(%ecx),%eax
000048fd	movl	%eax,0xfffffba0(%ebp)
00004903	movl	0xfffffba8(%ebp),%eax
00004909	movl	%eax,0x08(%esp)
0000490d	leal	0xd6dfe-0x4561(%edi),%eax
00004913	movl	%eax,0x04(%esp)
00004917	movl	%ebx,(%esp)
0000491a	calll	KeyValues::GetString(char const*, char const*)
0000491f	movl	%eax,0x04(%esp)
00004923	movl	0xfffffb98(%ebp),%eax
00004929	movl	%eax,(%esp)
0000492c	call	*0xfffffba0(%ebp)
00004932	movl	0x00000264(%esi),%eax
00004938	movl	%edi,%ebx
0000493a	leal	0xd6a22-0x4561(%ebx),%esi
00004940	movl	%esi,0x04(%esp)
00004944	movl	%eax,(%esp)
00004947	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000494f	calll	vgui::Panel::FindChildByName(char const*, bool)
00004954	movl	%eax,%edi
00004956	movl	(%edi),%eax
00004958	movl	0x000003f0(%eax),%eax
0000495e	movl	%eax,0xfffffba8(%ebp)
00004964	movl	%esi,0x04(%esp)
00004968	movl	0xfffffbac(%ebp),%esi
0000496e	movl	%esi,(%esp)
00004971	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004979	calll	KeyValues::GetInt(char const*, int)
0000497e	movl	%edi,(%esp)
00004981	cmpl	$0x01,%eax
00004984	sete	%al
00004987	movzbl	%al,%eax
0000498a	movl	%eax,0x04(%esp)
0000498e	call	*0xfffffba8(%ebp)
00004994	movl	0x08(%ebp),%eax
00004997	movl	0x00000264(%eax),%eax
0000499d	leal	0xd6a2b-0x4561(%ebx),%ecx
000049a3	movl	%ecx,0x04(%esp)
000049a7	movl	%ecx,%ebx
000049a9	movl	%eax,(%esp)
000049ac	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000049b4	calll	vgui::Panel::FindChildByName(char const*, bool)
000049b9	movl	%eax,%edi
000049bb	movl	(%edi),%eax
000049bd	movl	0x000003f0(%eax),%eax
000049c3	movl	%eax,0xfffffba8(%ebp)
000049c9	movl	%ebx,0x04(%esp)
000049cd	movl	%esi,(%esp)
000049d0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000049d8	calll	KeyValues::GetInt(char const*, int)
000049dd	movl	%edi,(%esp)
000049e0	cmpl	$0x01,%eax
000049e3	sete	%al
000049e6	movzbl	%al,%eax
000049e9	movl	%eax,0x04(%esp)
000049ed	call	*0xfffffba8(%ebp)
000049f3	movl	0x08(%ebp),%esi
000049f6	movl	0x00000264(%esi),%eax
000049fc	movl	0xfffffba4(%ebp),%ecx
00004a02	leal	0xd6a35-0x4561(%ecx),%ebx
00004a08	movl	%ebx,0x04(%esp)
00004a0c	movl	%eax,(%esp)
00004a0f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004a17	calll	vgui::Panel::FindChildByName(char const*, bool)
00004a1c	movl	%eax,%edi
00004a1e	movl	(%edi),%eax
00004a20	movl	0x000003f0(%eax),%eax
00004a26	movl	%eax,0xfffffba8(%ebp)
00004a2c	movl	%ebx,0x04(%esp)
00004a30	movl	0xfffffbac(%ebp),%eax
00004a36	movl	%eax,(%esp)
00004a39	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004a41	calll	KeyValues::GetInt(char const*, int)
00004a46	movl	%edi,(%esp)
00004a49	cmpl	$0x01,%eax
00004a4c	sete	%al
00004a4f	movzbl	%al,%eax
00004a52	movl	%eax,0x04(%esp)
00004a56	call	*0xfffffba8(%ebp)
00004a5c	movl	0x00000264(%esi),%eax
00004a62	movl	0xfffffba4(%ebp),%esi
00004a68	leal	0xd6a3f-0x4561(%esi),%ebx
00004a6e	movl	%ebx,0x04(%esp)
00004a72	movl	%eax,(%esp)
00004a75	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004a7d	calll	vgui::Panel::FindChildByName(char const*, bool)
00004a82	movl	%eax,%edi
00004a84	movl	(%edi),%eax
00004a86	movl	0x000003f0(%eax),%eax
00004a8c	movl	%eax,0xfffffba8(%ebp)
00004a92	movl	%ebx,0x04(%esp)
00004a96	movl	0xfffffbac(%ebp),%ebx
00004a9c	movl	%ebx,(%esp)
00004a9f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004aa7	calll	KeyValues::GetInt(char const*, int)
00004aac	movl	%edi,(%esp)
00004aaf	cmpl	$0x01,%eax
00004ab2	sete	%al
00004ab5	movzbl	%al,%eax
00004ab8	movl	%eax,0x04(%esp)
00004abc	call	*0xfffffba8(%ebp)
00004ac2	movl	0x08(%ebp),%eax
00004ac5	movl	0x00000264(%eax),%eax
00004acb	leal	0xd6a48-0x4561(%esi),%esi
00004ad1	movl	%esi,0x04(%esp)
00004ad5	movl	%eax,(%esp)
00004ad8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004ae0	calll	vgui::Panel::FindChildByName(char const*, bool)
00004ae5	movl	%eax,%edi
00004ae7	movl	(%edi),%eax
00004ae9	movl	0x000003f0(%eax),%eax
00004aef	movl	%eax,0xfffffba8(%ebp)
00004af5	movl	%esi,0x04(%esp)
00004af9	movl	%ebx,(%esp)
00004afc	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004b04	calll	KeyValues::GetInt(char const*, int)
00004b09	movl	%edi,(%esp)
00004b0c	cmpl	$0x01,%eax
00004b0f	sete	%al
00004b12	movzbl	%al,%eax
00004b15	movl	%eax,0x04(%esp)
00004b19	call	*0xfffffba8(%ebp)
00004b1f	movl	0xfffffba4(%ebp),%eax
00004b25	leal	0xd6e0f-0x4561(%eax),%eax
00004b2b	movl	%eax,0x04(%esp)
00004b2f	leal	0xfffffbf0(%ebp),%esi
00004b35	movl	%esi,(%esp)
00004b38	movl	$0x00000001,0x08(%esp)
00004b40	calll	_sprintf
00004b45	movl	%esi,0x04(%esp)
00004b49	movl	%ebx,(%esp)
00004b4c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004b54	calll	KeyValues::GetString(char const*, char const*)
00004b59	movb	$0x01,%cl
00004b5b	testl	%eax,%eax
00004b5d	je	0x00004b80
00004b5f	movl	%eax,0x04(%esp)
00004b63	movl	0x08(%ebp),%eax
00004b66	movl	%eax,(%esp)
00004b69	movl	$0x00000001,0x0c(%esp)
00004b71	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004b79	calll	CMDLPicker::SelectMDL(char const*, bool, int)
00004b7e	movb	$0x01,%cl
00004b80	movl	0xfffffb9c(%ebp),%eax
00004b86	movl	(%eax),%eax
00004b88	cmpl	0xf0(%ebp),%eax
00004b8b	jne	0x00004bad
00004b8d	movzbl	%cl,%eax
00004b90	addl	$0x0000047c,%esp
00004b96	popl	%esi
00004b97	popl	%edi
00004b98	popl	%ebx
00004b99	popl	%ebp
00004b9a	ret
00004b9b	movl	%eax,%edi
00004b9d	movl	%esi,(%esp)
00004ba0	calll	KeyValues::operator delete(void*)
00004ba5	movl	%edi,(%esp)
00004ba8	calll	__Unwind_Resume
00004bad	calll	___stack_chk_fail
00004bb2	calll	std::terminate()
00004bb7	nopw	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::OnDirectorySelected(char const*):
00004bc0	pushl	%ebp
00004bc1	movl	%esp,%ebp
00004bc3	pushl	%ebx
00004bc4	pushl	%edi
00004bc5	pushl	%esi
00004bc6	subl	$0x0c,%esp
00004bc9	calll	0x00004bce
00004bce	popl	%esi
00004bcf	movl	0x08(%ebp),%edi
00004bd2	leal	0x00000290(%edi),%ebx
00004bd8	movl	%ebx,(%esp)
00004bdb	calll	vgui::PHandle::Get()
00004be0	testl	%eax,%eax
00004be2	je	0x00004bf7
00004be4	movl	%ebx,(%esp)
00004be7	calll	vgui::PHandle::Get()
00004bec	movl	(%eax),%ecx
00004bee	movl	%eax,(%esp)
00004bf1	call	*0x00000144(%ecx)
00004bf7	movl	0x0c(%ebp),%ebx
00004bfa	movl	0x00000278(%edi),%eax
00004c00	leal	0xd697b-0x4bce(%esi),%ecx
00004c06	movl	%ecx,0x04(%esp)
00004c0a	movl	%eax,(%esp)
00004c0d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004c15	calll	vgui::Panel::FindChildByName(char const*, bool)
00004c1a	movl	(%eax),%ecx
00004c1c	movl	%ebx,0x04(%esp)
00004c20	movl	%eax,(%esp)
00004c23	call	*0x00000348(%ecx)
00004c29	addl	$0x0c,%esp
00004c2c	popl	%esi
00004c2d	popl	%edi
00004c2e	popl	%ebx
00004c2f	popl	%ebp
00004c30	ret
00004c31	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::CaptureModel(int, char const*, char const*, int, int, Color, bool):
00004c40	pushl	%ebp
00004c41	movl	%esp,%ebp
00004c43	pushl	%ebx
00004c44	pushl	%edi
00004c45	pushl	%esi
00004c46	subl	$0x0000014c,%esp
00004c4c	calll	0x00004c51
00004c51	popl	%esi
00004c52	movl	%esi,0xfffffed4(%ebp)
00004c58	movl	0xe0869-0x4c51(%esi),%eax
00004c5e	movl	%eax,0xfffffec8(%ebp)
00004c64	movl	(%eax),%eax
00004c66	movl	%eax,0xf0(%ebp)
00004c69	movl	0x0c(%ebp),%eax
00004c6c	movl	%eax,0x04(%esp)
00004c70	movl	0x08(%ebp),%edi
00004c73	movl	%edi,(%esp)
00004c76	calll	CBaseAssetPicker::GetModPath(int)
00004c7b	movl	0x00000224(%edi),%ecx
00004c81	movl	0x10(%ebp),%edx
00004c84	movl	%edx,0x14(%esp)
00004c88	movl	%ecx,0x10(%esp)
00004c8c	movl	%eax,0x0c(%esp)
00004c90	leal	0xd6b58-0x4c51(%esi),%eax
00004c96	movl	%eax,0x08(%esp)
00004c9a	leal	0xfffffeec(%ebp),%esi
00004ca0	movl	%esi,(%esp)
00004ca3	movl	$0x00000104,0x04(%esp)
00004cab	calll	V_snprintf(char*, int, char const*, ...)
00004cb0	movl	%esi,(%esp)
00004cb3	movl	$0x0000002f,0x04(%esp)
00004cbb	calll	V_FixSlashes(char*, char)
00004cc0	cmpb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x24(%ebp)
00004cc4	jne	0x00004ce2
00004cc6	movl	%esi,0x04(%esp)
00004cca	movl	%edi,(%esp)
00004ccd	movl	$0xffffffff,0x0c(%esp)
00004cd5	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004cdd	calll	CMDLPicker::SelectMDL(char const*, bool, int)
00004ce2	movl	0xfffffed4(%ebp),%eax
00004ce8	movl	0xe0889-0x4c51(%eax),%eax
00004cee	movl	(%eax),%ecx
00004cf0	movl	(%ecx),%eax
00004cf2	movl	%ecx,(%esp)
00004cf5	call	*0x00000188(%eax)
00004cfb	movl	%eax,%esi
00004cfd	testl	%esi,%esi
00004cff	je	0x00004d0b
00004d01	movl	(%esi),%eax
00004d03	movl	0x08(%eax),%eax
00004d06	movl	%esi,(%esp)
00004d09	call	*%eax
00004d0b	movl	%esi,0xfffffed8(%ebp)
00004d11	movl	0xfffffed4(%ebp),%eax
00004d17	movl	0xe0875-0x4c51(%eax),%eax
00004d1d	movl	%eax,0xfffffee4(%ebp)
00004d23	movl	(%eax),%ecx
00004d25	movl	(%ecx),%eax
00004d27	movl	0x00000094(%eax),%eax
00004d2d	movl	%ecx,(%esp)
00004d30	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00004d38	call	*%eax
00004d3a	movl	0xfffffed4(%ebp),%eax
00004d40	movl	0xe0879-0x4c51(%eax),%eax
00004d46	movl	%eax,0xfffffee0(%ebp)
00004d4c	movl	(%eax),%eax
00004d4e	movl	(%eax),%ecx
00004d50	movl	0x14(%ecx),%ecx
00004d53	movl	%eax,(%esp)
00004d56	call	*%ecx
00004d58	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffee8(%ebp)
00004d62	movl	0x08(%ebp),%eax
00004d65	movl	0x00000254(%eax),%eax
00004d6b	leal	0xfffffee8(%ebp),%ecx
00004d71	movl	%ecx,0x04(%esp)
00004d75	movl	%eax,(%esp)
00004d78	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00004d7d	movl	0xfffffed4(%ebp),%eax
00004d83	movl	0xe0881-0x4c51(%eax),%eax
00004d89	movl	%eax,0xfffffedc(%ebp)
00004d8f	movl	(%eax),%edi
00004d91	movl	(%edi),%eax
00004d93	movl	0x000001c8(%eax),%esi
00004d99	movl	0x08(%ebp),%eax
00004d9c	movl	0x00000254(%eax),%eax
00004da2	movl	(%eax),%ecx
00004da4	movl	(%ecx),%ecx
00004da6	movl	%eax,(%esp)
00004da9	call	*%ecx
00004dab	movl	%eax,0x04(%esp)
00004daf	movl	%edi,(%esp)
00004db2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004dba	call	*%esi
00004dbc	movl	0xfffffee0(%ebp),%eax
00004dc2	movl	(%eax),%eax
00004dc4	movl	(%eax),%ecx
00004dc6	movl	0x18(%ecx),%ecx
00004dc9	movl	%eax,(%esp)
00004dcc	call	*%ecx
00004dce	movl	0xfffffee4(%ebp),%eax
00004dd4	movl	(%eax),%eax
00004dd6	movl	(%eax),%ecx
00004dd8	movl	0x00000098(%ecx),%ecx
00004dde	movl	%eax,(%esp)
00004de1	call	*%ecx
00004de3	movl	0x1c(%ebp),%esi
00004de6	movl	0x18(%ebp),%edi
00004de9	movl	%edi,%ebx
00004deb	imull	%esi,%ebx
00004dee	shll	$0x02,%ebx
00004df1	movl	%ebx,(%esp)
00004df4	calll	_malloc
00004df9	movl	%eax,0xfffffed0(%ebp)
00004dff	movl	0xfffffed8(%ebp),%ecx
00004e05	movl	(%ecx),%edx
00004e07	movl	0x34(%edx),%edx
00004e0a	movl	%eax,0x14(%esp)
00004e0e	movl	%esi,0x10(%esp)
00004e12	movl	%edi,0x0c(%esp)
00004e16	movl	%ecx,(%esp)
00004e19	movl	$0x0000000c,0x18(%esp)
00004e21	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004e29	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00004e31	call	*%edx
00004e33	movl	0xfffffee4(%ebp),%eax
00004e39	movl	(%eax),%ecx
00004e3b	movl	(%ecx),%eax
00004e3d	movl	0x00000094(%eax),%eax
00004e43	movl	%ecx,(%esp)
00004e46	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00004e4e	call	*%eax
00004e50	movl	0xfffffee0(%ebp),%eax
00004e56	movl	(%eax),%eax
00004e58	movl	(%eax),%ecx
00004e5a	movl	0x14(%ecx),%ecx
00004e5d	movl	%eax,(%esp)
00004e60	call	*%ecx
00004e62	movb	$0xff,0xfffffee8(%ebp)
00004e69	movb	$0xff,0xfffffee9(%ebp)
00004e70	movb	$0xff,0xfffffeea(%ebp)
00004e77	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffeeb(%ebp)
00004e7e	movl	0x08(%ebp),%eax
00004e81	movl	0x00000254(%eax),%eax
00004e87	leal	0xfffffee8(%ebp),%ecx
00004e8d	movl	%ecx,0x04(%esp)
00004e91	movl	%eax,(%esp)
00004e94	calll	CPotteryWheelPanel::SetBackgroundColor(Color const&)
00004e99	movl	0xfffffedc(%ebp),%eax
00004e9f	movl	(%eax),%edi
00004ea1	movl	(%edi),%eax
00004ea3	movl	0x000001c8(%eax),%esi
00004ea9	movl	0x08(%ebp),%eax
00004eac	movl	0x00000254(%eax),%eax
00004eb2	movl	(%eax),%ecx
00004eb4	movl	(%ecx),%ecx
00004eb6	movl	%eax,(%esp)
00004eb9	call	*%ecx
00004ebb	movl	%eax,0x04(%esp)
00004ebf	movl	%edi,(%esp)
00004ec2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004eca	call	*%esi
00004ecc	movl	0xfffffee0(%ebp),%eax
00004ed2	movl	(%eax),%eax
00004ed4	movl	(%eax),%ecx
00004ed6	movl	0x18(%ecx),%ecx
00004ed9	movl	%eax,(%esp)
00004edc	call	*%ecx
00004ede	movl	0xfffffee4(%ebp),%eax
00004ee4	movl	(%eax),%eax
00004ee6	movl	(%eax),%ecx
00004ee8	movl	0x00000098(%ecx),%ecx
00004eee	movl	%eax,(%esp)
00004ef1	call	*%ecx
00004ef3	movl	%ebx,(%esp)
00004ef6	calll	_malloc
00004efb	movl	%eax,0xfffffecc(%ebp)
00004f01	movl	0xfffffed8(%ebp),%ecx
00004f07	movl	(%ecx),%edx
00004f09	movl	0x34(%edx),%esi
00004f0c	movl	%eax,0x14(%esp)
00004f10	movl	0x1c(%ebp),%edx
00004f13	movl	%edx,0x10(%esp)
00004f17	movl	0x18(%ebp),%edx
00004f1a	movl	%edx,0x0c(%esp)
00004f1e	movl	%ecx,(%esp)
00004f21	movl	$0x0000000c,0x18(%esp)
00004f29	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00004f31	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00004f39	call	*%esi
00004f3b	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x1c(%ebp)
00004f3f	movl	0x18(%ebp),%eax
00004f42	jle	0x00005027
00004f48	leal	CMDLPicker::CMDLPicker(vgui::Panel*, int)(,%eax,4),%ecx
00004f4f	movl	%ecx,0xfffffedc(%ebp)
00004f55	xorl	%edi,%edi
00004f57	movl	0xfffffecc(%ebp),%ebx
00004f5d	movl	0xfffffed0(%ebp),%edx
00004f63	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00004f70	testl	%eax,%eax
00004f72	jle	0x0000501d
00004f78	leal	(%ebx,%ecx),%ecx
00004f7b	movl	%ecx,0xfffffee0(%ebp)
00004f81	leal	0x03(%edx),%esi
00004f84	movl	%edx,0xfffffee4(%ebp)
00004f8a	addl	$0x02,%ebx
00004f8d	nopl	(%eax)
00004f90	movb	0xfd(%esi),%dh
00004f93	movb	0xfe(%esi),%dl
00004f96	cmpb	0xfe(%ebx),%dh
00004f99	jne	0x00004fa7
00004f9b	cmpb	0xff(%ebx),%dl
00004f9e	jne	0x00004fa7
00004fa0	movb	0xff(%esi),%cl
00004fa3	cmpb	(%ebx),%cl
00004fa5	je	0x00004ffa
00004fa7	cmpb	%dh,%dl
00004fa9	ja	0x00004fad
00004fab	movb	%dh,%dl
00004fad	movb	0xff(%esi),%dh
00004fb0	cmpb	%dl,%dh
00004fb2	ja	0x00004fb6
00004fb4	movb	%dl,%dh
00004fb6	movb	%dh,(%esi)
00004fb8	jmp	0x00004ffd
00004fba	movl	%eax,%edi
00004fbc	movl	(%esi),%eax
00004fbe	movl	0x04(%eax),%eax
00004fc1	movl	%esi,(%esp)
00004fc4	call	*%eax
00004fc6	movl	%edi,(%esp)
00004fc9	calll	__Unwind_Resume
00004fce	calll	std::terminate()
00004fd3	movl	%eax,%edi
00004fd5	movl	0xfffffed8(%ebp),%esi
00004fdb	testl	%esi,%esi
00004fdd	je	0x00004fc6
00004fdf	movl	(%esi),%eax
00004fe1	movl	0x0c(%eax),%eax
00004fe4	movl	%esi,(%esp)
00004fe7	call	*%eax
00004fe9	movl	(%esi),%eax
00004feb	movl	0x04(%eax),%eax
00004fee	movl	%esi,(%esp)
00004ff1	call	*%eax
00004ff3	jmp	0x00004fc6
00004ff5	calll	std::terminate()
00004ffa	movb	$0xff,(%esi)
00004ffd	addl	$0x04,%esi
00005000	addl	$0x04,%ebx
00005003	decl	%eax
00005004	jne	0x00004f90
00005006	movl	0xfffffedc(%ebp),%ecx
0000500c	movl	0xfffffee4(%ebp),%edx
00005012	addl	%ecx,%edx
00005014	movl	0xfffffee0(%ebp),%ebx
0000501a	movl	0x18(%ebp),%eax
0000501d	incl	%edi
0000501e	cmpl	0x1c(%ebp),%edi
00005021	jne	0x00004f70
00005027	movl	%eax,%ebx
00005029	movl	0x14(%ebp),%eax
0000502c	movl	0x10(%ebp),%ecx
0000502f	movl	%ecx,0x0c(%esp)
00005033	movl	%eax,0x08(%esp)
00005037	movl	0xfffffed4(%ebp),%esi
0000503d	leal	0xd6b25-0x4c51(%esi),%eax
00005043	movl	%eax,0x04(%esp)
00005047	leal	CMDLPicker::CaptureModel(int, char const*, char const*, int, int, Color, bool)::szPathedFileName-0x4c51(%esi),%edi
0000504d	movl	%edi,(%esp)
00005050	calll	_sprintf
00005055	leal	0xd6b61-0x4c51(%esi),%eax
0000505b	movl	%eax,0x04(%esp)
0000505f	movl	%edi,(%esp)
00005062	movl	$0x00000400,0x08(%esp)
0000506a	calll	V_SetExtension(char*, char const*, int)
0000506f	movl	%edi,0x08(%esp)
00005073	movl	0x1c(%ebp),%eax
00005076	movl	%eax,0x04(%esp)
0000507a	movl	%ebx,(%esp)
0000507d	movl	0xfffffed0(%ebp),%ecx
00005083	movl	$0x0000000c,%edx
00005088	calll	SaveTgaAndAddToP4(unsigned char*, ImageFormat, int, int, char const*)
0000508d	movb	%al,%bl
0000508f	movl	0xfffffed0(%ebp),%eax
00005095	movl	%eax,(%esp)
00005098	calll	_free
0000509d	movl	0xfffffecc(%ebp),%eax
000050a3	movl	%eax,(%esp)
000050a6	testb	%bl,%bl
000050a8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),%esi
000050ad	cmovnel	%edi,%esi
000050b0	movb	0x24(%ebp),%bh
000050b3	andb	%bl,%bh
000050b5	calll	_free
000050ba	cmpb	$0x01,%bh
000050bd	jne	0x000050d0
000050bf	movl	%edi,0x04(%esp)
000050c3	movl	0x08(%ebp),%eax
000050c6	movl	%eax,(%esp)
000050c9	calll	CMDLPicker::SaveCaps(char const*)
000050ce	movl	%edi,%esi
000050d0	movl	0xfffffed8(%ebp),%ebx
000050d6	testl	%ebx,%ebx
000050d8	je	0x000050ec
000050da	movl	(%ebx),%eax
000050dc	movl	0x0c(%eax),%eax
000050df	movl	%ebx,(%esp)
000050e2	call	*%eax
000050e4	movl	(%ebx),%eax
000050e6	movl	%ebx,(%esp)
000050e9	call	*0x04(%eax)
000050ec	movl	0xfffffec8(%ebp),%eax
000050f2	movl	(%eax),%eax
000050f4	cmpl	0xf0(%ebp),%eax
000050f7	jne	0x00005121
000050f9	movl	%esi,%eax
000050fb	addl	$0x0000014c,%esp
00005101	popl	%esi
00005102	popl	%edi
00005103	popl	%ebx
00005104	popl	%ebp
00005105	ret
00005106	movl	%eax,%edi
00005108	movl	(%ebx),%eax
0000510a	movl	0x04(%eax),%eax
0000510d	movl	%ebx,(%esp)
00005110	call	*%eax
00005112	jmp	0x00004fc6
00005117	calll	std::terminate()
0000511c	calll	std::terminate()
00005121	calll	___stack_chk_fail
00005126	movl	(%esi),%eax
00005128	movl	0x04(%eax),%eax
0000512b	movl	%esi,(%esp)
0000512e	call	*%eax
00005130	jmp	0x0000511c
00005132	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::SelectMDL(char const*, bool, int):
00005140	pushl	%ebp
00005141	movl	%esp,%ebp
00005143	pushl	%ebx
00005144	pushl	%edi
00005145	pushl	%esi
00005146	subl	$0x1c,%esp
00005149	calll	0x0000514e
0000514e	popl	%eax
0000514f	movl	%eax,0xf0(%ebp)
00005152	movw	$0xffff,%ax
00005156	movl	0x0c(%ebp),%edi
00005159	testl	%edi,%edi
0000515b	je	0x0000516e
0000515d	calll	vgui::MDLCache()
00005162	movl	(%eax),%ecx
00005164	movl	%edi,0x04(%esp)
00005168	movl	%eax,(%esp)
0000516b	call	*0x18(%ecx)
0000516e	movl	0x14(%ebp),%esi
00005171	movl	0x08(%ebp),%ebx
00005174	testl	%esi,%esi
00005176	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),%edi
0000517b	cmovgl	%esi,%edi
0000517e	cmpw	0x0000028c(%ebx,%edi,2),%ax
00005186	jne	0x000051ae
00005188	cmpw	$0xff,%ax
0000518c	je	0x00005310
00005192	movw	%ax,%si
00005195	calll	vgui::MDLCache()
0000519a	movl	(%eax),%ecx
0000519c	movzwl	%si,%edx
0000519f	movl	%edx,0x04(%esp)
000051a3	movl	%eax,(%esp)
000051a6	call	*0x20(%ecx)
000051a9	jmp	0x00005310
000051ae	movw	%ax,0x0000028c(%ebx,%edi,2)
000051b6	movw	%ax,0xec(%ebp)
000051ba	calll	vgui::MDLCache()
000051bf	movzwl	0x0000028c(%ebx,%edi,2),%edx
000051c7	movl	(%eax),%ecx
000051c9	movl	%edx,0x04(%esp)
000051cd	movl	%eax,(%esp)
000051d0	call	*0x50(%ecx)
000051d3	cmpb	$0x01,%al
000051d5	jne	0x000051e1
000051d7	movw	$0xffff,0x0000028c(%ebx,%edi,2)
000051e1	cmpl	$0xff,%esi
000051e4	je	0x00005202
000051e6	movl	0x00000254(%ebx),%eax
000051ec	movl	%eax,(%esp)
000051ef	calll	CMDLPanel::ClearMergeMDLs()
000051f4	cmpl	$0x01,%edi
000051f7	je	0x00005202
000051f9	movw	$0xffff,0x0000028e(%ebx)
00005202	movl	0x00000254(%ebx),%eax
00005208	testl	%esi,%esi
0000520a	jle	0x00005232
0000520c	movzwl	0x0000028c(%ebx,%edi,2),%ecx
00005214	movl	%ecx,0x04(%esp)
00005218	movl	%eax,(%esp)
0000521b	movl	$0xffffffff,0x0c(%esp)
00005223	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000522b	calll	CMDLPanel::SetMergeMDL(unsigned short, void*, int)
00005230	jmp	0x0000529b
00005232	movzwl	0x0000028c(%ebx,%edi,2),%edx
0000523a	movl	(%eax),%ecx
0000523c	movl	%edx,0x04(%esp)
00005240	movl	%eax,(%esp)
00005243	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000524b	call	*0x000003b4(%ecx)
00005251	cmpb	$0x01,0x10(%ebp)
00005255	jne	0x00005265
00005257	movl	0x00000254(%ebx),%eax
0000525d	movl	%eax,(%esp)
00005260	calll	CMDLPanel::LookAtMDL()
00005265	movl	0x00000294(%ebx),%eax
0000526b	testb	$0x08,%al
0000526d	je	0x0000527d
0000526f	movl	%ebx,(%esp)
00005272	calll	CMDLPicker::UpdateSkinsList()
00005277	movl	0x00000294(%ebx),%eax
0000527d	testb	$0x10,%al
0000527f	je	0x0000528f
00005281	movl	%ebx,(%esp)
00005284	calll	CMDLPicker::UpdateInfoTab()
00005289	movl	0x00000294(%ebx),%eax
0000528f	testb	$0x06,%al
00005291	je	0x0000529b
00005293	movl	%ebx,(%esp)
00005296	calll	CMDLPicker::RefreshActivitiesAndSequencesList()
0000529b	movw	0xec(%ebp),%si
0000529f	cmpw	$0xff,%si
000052a3	je	0x000052b9
000052a5	calll	vgui::MDLCache()
000052aa	movl	(%eax),%ecx
000052ac	movzwl	%si,%edx
000052af	movl	%edx,0x04(%esp)
000052b3	movl	%eax,(%esp)
000052b6	call	*0x20(%ecx)
000052b9	movl	(%ebx),%eax
000052bb	movl	0x000000c0(%eax),%eax
000052c1	movl	%eax,0xec(%ebp)
000052c4	movl	$0x00000020,(%esp)
000052cb	movl	0xf0(%ebp),%ebx
000052ce	leal	0xd6a5b-0x514e(%ebx),%edi
000052d4	movl	0x0c(%ebp),%eax
000052d7	testl	%eax,%eax
000052d9	cmovnel	%eax,%edi
000052dc	calll	KeyValues::operator new(unsigned long)
000052e1	movl	%eax,%esi
000052e3	movl	%edi,0x0c(%esp)
000052e7	leal	0xd679e-0x514e(%ebx),%eax
000052ed	movl	%eax,0x08(%esp)
000052f1	leal	0xd6eca-0x514e(%ebx),%eax
000052f7	movl	%eax,0x04(%esp)
000052fb	movl	%esi,(%esp)
000052fe	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00005303	movl	%esi,0x04(%esp)
00005307	movl	0x08(%ebp),%eax
0000530a	movl	%eax,(%esp)
0000530d	call	*0xec(%ebp)
00005310	addl	$0x1c,%esp
00005313	popl	%esi
00005314	popl	%edi
00005315	popl	%ebx
00005316	popl	%ebp
00005317	ret
00005318	movl	%eax,%edi
0000531a	movl	%esi,(%esp)
0000531d	calll	KeyValues::operator delete(void*)
00005322	movl	%edi,(%esp)
00005325	calll	__Unwind_Resume
0000532a	calll	std::terminate()
0000532f	nop
SaveTgaAndAddToP4(unsigned char*, ImageFormat, int, int, char const*):
00005330	pushl	%ebp
00005331	movl	%esp,%ebp
00005333	pushl	%ebx
00005334	pushl	%edi
00005335	pushl	%esi
00005336	subl	$0x0000046c,%esp
0000533c	calll	0x00005341
00005341	popl	%edi
00005342	movl	%edx,0xfffffbac(%ebp)
00005348	movl	%ecx,0xfffffbb0(%ebp)
0000534e	movl	0xe0869-0x5341(%edi),%eax
00005354	movl	%eax,0xfffffbb4(%ebp)
0000535a	movl	(%eax),%eax
0000535c	movl	%eax,0xf0(%ebp)
0000535f	movl	0x0c(%ebp),%ebx
00005362	movl	0x08(%ebp),%eax
00005365	imull	%ebx,%eax
00005368	leal	0x00000400(,%eax,4),%esi
0000536f	movl	%esi,(%esp)
00005372	calll	_malloc
00005377	movl	%esi,0x08(%esp)
0000537b	movl	%eax,0x04(%esp)
0000537f	leal	0xfffffbb8(%ebp),%esi
00005385	movl	%esi,(%esp)
00005388	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00005390	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
00005395	movl	0xfffffbac(%ebp),%eax
0000539b	movl	%eax,0x10(%esp)
0000539f	movl	%ebx,0x0c(%esp)
000053a3	movl	0x08(%ebp),%eax
000053a6	movl	%eax,0x08(%esp)
000053aa	movl	%esi,0x04(%esp)
000053ae	movl	0xfffffbb0(%ebp),%eax
000053b4	movl	%eax,(%esp)
000053b7	movl	$0x0000000c,0x14(%esp)
000053bf	calll	TGAWriter::WriteToBuffer(unsigned char*, CUtlBuffer&, int, int, ImageFormat, ImageFormat)
000053c4	testb	%al,%al
000053c6	jne	0x0000542d
000053c8	xorb	%bl,%bl
000053ca	leal	0xd6fd5-0x5341(%edi),%eax
000053d0	movl	%eax,(%esp)
000053d3	calll	_Error
000053d8	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbc0(%ebp)
000053df	js	0x00005407
000053e1	movl	0xfffffbb8(%ebp),%eax
000053e7	testl	%eax,%eax
000053e9	je	0x000053fd
000053eb	movl	%eax,(%esp)
000053ee	calll	_free
000053f3	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbb8(%ebp)
000053fd	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbbc(%ebp)
00005407	movl	0xfffffbb4(%ebp),%eax
0000540d	movl	(%eax),%eax
0000540f	cmpl	0xf0(%ebp),%eax
00005412	jne	0x0000558e
00005418	movzbl	%bl,%eax
0000541b	addl	$0x0000046c,%esp
00005421	popl	%esi
00005422	popl	%edi
00005423	popl	%ebx
00005424	popl	%ebp
00005425	ret
00005426	movl	%eax,%edi
00005428	jmp	0x00005541
0000542d	movl	0x10(%ebp),%ebx
00005430	movl	0xe086d-0x5341(%edi),%eax
00005436	movl	(%eax),%eax
00005438	movl	%ebx,0x04(%esp)
0000543c	movl	%eax,(%esp)
0000543f	calll	CP4Factory::AccessFile(char const*) const
00005444	movl	%eax,%esi
00005446	movl	%edi,0xfffffbb0(%ebp)
0000544c	movl	(%esi),%eax
0000544e	movl	0x08(%eax),%eax
00005451	movl	%esi,(%esp)
00005454	call	*%eax
00005456	movl	%ebx,0x04(%esp)
0000545a	leal	0xfffffbf0(%ebp),%edi
00005460	movl	%edi,(%esp)
00005463	calll	_strcpy
00005468	movl	%edi,(%esp)
0000546b	calll	V_StripFilename(char*)
00005470	movl	0xfffffbb0(%ebp),%edx
00005476	movl	0xe0871-0x5341(%edx),%ebx
0000547c	movl	(%ebx),%eax
0000547e	movl	(%eax),%ecx
00005480	movl	0x44(%ecx),%ecx
00005483	leal	0xd6a5b-0x5341(%edx),%edx
00005489	movl	%edx,0x08(%esp)
0000548d	movl	%edi,0x04(%esp)
00005491	movl	%eax,(%esp)
00005494	call	*%ecx
00005496	movl	(%ebx),%ecx
00005498	movl	(%ecx),%eax
0000549a	movl	0x0000013c(%eax),%eax
000054a0	movl	0xfffffbb8(%ebp),%edx
000054a6	movl	0xfffffbc8(%ebp),%edi
000054ac	movl	%edi,0x0c(%esp)
000054b0	movl	%edx,0x08(%esp)
000054b4	movl	0x10(%ebp),%edx
000054b7	movl	%edx,0x04(%esp)
000054bb	movl	%ecx,(%esp)
000054be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x18(%esp)
000054c6	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x14(%esp)
000054ce	movl	$0x00000001,0x10(%esp)
000054d6	call	*%eax
000054d8	movl	(%esi),%eax
000054da	movl	0x0c(%eax),%eax
000054dd	movl	%esi,(%esp)
000054e0	call	*%eax
000054e2	movb	$0x01,%bl
000054e4	testl	%esi,%esi
000054e6	je	0x000053d8
000054ec	movl	(%esi),%eax
000054ee	movl	0x04(%eax),%eax
000054f1	movb	$0x01,%bl
000054f3	movl	%esi,(%esp)
000054f6	call	*%eax
000054f8	jmp	0x000053d8
000054fd	movl	%eax,%edi
000054ff	testl	%esi,%esi
00005501	je	0x00005541
00005503	movl	(%esi),%eax
00005505	movl	0x04(%eax),%eax
00005508	movl	%esi,(%esp)
0000550b	call	*%eax
0000550d	jmp	0x00005541
0000550f	calll	std::terminate()
00005514	movl	%eax,%edi
00005516	testl	%esi,%esi
00005518	je	0x00005541
0000551a	movl	(%esi),%eax
0000551c	movl	0x04(%eax),%eax
0000551f	movl	%esi,(%esp)
00005522	call	*%eax
00005524	jmp	0x00005541
00005526	calll	std::terminate()
0000552b	movl	%eax,%edi
0000552d	movl	(%esi),%eax
0000552f	movl	0x0c(%eax),%eax
00005532	movl	%esi,(%esp)
00005535	call	*%eax
00005537	movl	(%esi),%eax
00005539	movl	0x04(%eax),%eax
0000553c	movl	%esi,(%esp)
0000553f	call	*%eax
00005541	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbc0(%ebp)
00005548	js	0x00005570
0000554a	movl	0xfffffbb8(%ebp),%eax
00005550	testl	%eax,%eax
00005552	je	0x00005566
00005554	movl	%eax,(%esp)
00005557	calll	_free
0000555c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbb8(%ebp)
00005566	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffbbc(%ebp)
00005570	movl	%edi,(%esp)
00005573	calll	__Unwind_Resume
00005578	movl	(%esi),%eax
0000557a	movl	0x04(%eax),%eax
0000557d	movl	%esi,(%esp)
00005580	call	*%eax
00005582	jmp	0x00005589
00005584	calll	std::terminate()
00005589	calll	std::terminate()
0000558e	calll	___stack_chk_fail
00005593	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::WriteBackbackVMTFiles(char const*):
000055a0	pushl	%ebp
000055a1	movl	%esp,%ebp
000055a3	pushl	%ebx
000055a4	pushl	%edi
000055a5	pushl	%esi
000055a6	subl	$0x0000033c,%esp
000055ac	calll	0x000055b1
000055b1	popl	%esi
000055b2	movl	0xe0869-0x55b1(%esi),%eax
000055b8	movl	%eax,0xfffffcd8(%ebp)
000055be	movl	(%eax),%eax
000055c0	movl	%eax,0xf0(%ebp)
000055c3	leal	0xd6b81-0x55b1(%esi),%eax
000055c9	movl	%eax,(%esp)
000055cc	calll	_getenv
000055d1	movl	%eax,%ebx
000055d3	testl	%ebx,%ebx
000055d5	je	0x00005988
000055db	movl	0x0c(%ebp),%eax
000055de	leal	0xfffffeec(%ebp),%edi
000055e4	movl	%edi,0x04(%esp)
000055e8	movl	%eax,(%esp)
000055eb	movl	$0x00000104,0x08(%esp)
000055f3	calll	V_StripExtension(char const*, char*, int)
000055f8	movl	%edi,0x10(%esp)
000055fc	movl	%ebx,0x0c(%esp)
00005600	movl	%ebx,0xfffffcdc(%ebp)
00005606	leal	0xd6b8a-0x55b1(%esi),%eax
0000560c	movl	%eax,0x08(%esp)
00005610	leal	0xfffffde8(%ebp),%ebx
00005616	movl	%ebx,(%esp)
00005619	movl	$0x00000104,0x04(%esp)
00005621	calll	V_snprintf(char*, int, char const*, ...)
00005626	movl	%ebx,(%esp)
00005629	movl	$0x0000002f,0x04(%esp)
00005631	calll	V_FixSlashes(char*, char)
00005636	movl	%edi,0x0c(%esp)
0000563a	leal	0xd6ba7-0x55b1(%esi),%eax
00005640	movl	%eax,0x08(%esp)
00005644	leal	0xfffffce4(%ebp),%edi
0000564a	movl	%edi,(%esp)
0000564d	movl	$0x00000104,0x04(%esp)
00005655	calll	V_snprintf(char*, int, char const*, ...)
0000565a	movl	%edi,(%esp)
0000565d	movl	$0x0000002f,0x04(%esp)
00005665	calll	V_FixSlashes(char*, char)
0000566a	movl	0xe086d-0x55b1(%esi),%eax
00005670	movl	%eax,0xfffffcd4(%ebp)
00005676	movl	(%eax),%eax
00005678	movl	%ebx,0x04(%esp)
0000567c	movl	%eax,(%esp)
0000567f	calll	CP4Factory::AccessFile(char const*) const
00005684	movl	%eax,%edi
00005686	movl	(%edi),%eax
00005688	movl	0x08(%eax),%eax
0000568b	movl	%edi,(%esp)
0000568e	call	*%eax
00005690	movl	0xe0871-0x55b1(%esi),%eax
00005696	movl	%eax,0xfffffce0(%ebp)
0000569c	movl	(%eax),%eax
0000569e	movl	0x04(%eax),%ecx
000056a1	movl	0x08(%ecx),%ecx
000056a4	leal	0xd6bb3-0x55b1(%esi),%edx
000056aa	movl	%edx,0xfffffcd0(%ebp)
000056b0	movl	%edx,0x08(%esp)
000056b4	movl	%ebx,0x04(%esp)
000056b8	addl	$0x04,%eax
000056bb	movl	%eax,(%esp)
000056be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000056c6	call	*%ecx
000056c8	movl	%eax,%ebx
000056ca	testl	%ebx,%ebx
000056cc	je	0x000057b6
000056d2	movl	0xfffffce0(%ebp),%eax
000056d8	movl	(%eax),%eax
000056da	movl	(%eax),%ecx
000056dc	movl	0x60(%ecx),%ecx
000056df	leal	0xd6bb5-0x55b1(%esi),%edx
000056e5	movl	%edx,0x08(%esp)
000056e9	movl	%ebx,0x04(%esp)
000056ed	movl	%eax,(%esp)
000056f0	call	*%ecx
000056f2	movl	0xfffffce0(%ebp),%eax
000056f8	movl	(%eax),%eax
000056fa	movl	(%eax),%ecx
000056fc	movl	0x60(%ecx),%ecx
000056ff	leal	0xd6bc5-0x55b1(%esi),%edx
00005705	movl	%edx,0x08(%esp)
00005709	movl	%ebx,0x04(%esp)
0000570d	movl	%eax,(%esp)
00005710	call	*%ecx
00005712	movl	0xfffffce0(%ebp),%eax
00005718	movl	(%eax),%eax
0000571a	movl	(%eax),%ecx
0000571c	movl	0x60(%ecx),%ecx
0000571f	leal	0xfffffce4(%ebp),%edx
00005725	movl	%edx,0x0c(%esp)
00005729	leal	0xd6bc8-0x55b1(%esi),%edx
0000572f	movl	%edx,0x08(%esp)
00005733	movl	%ebx,0x04(%esp)
00005737	movl	%eax,(%esp)
0000573a	call	*%ecx
0000573c	movl	0xfffffce0(%ebp),%eax
00005742	movl	(%eax),%eax
00005744	movl	(%eax),%ecx
00005746	movl	0x60(%ecx),%ecx
00005749	leal	0xd6bde-0x55b1(%esi),%edx
0000574f	movl	%edx,0x08(%esp)
00005753	movl	%ebx,0x04(%esp)
00005757	movl	%eax,(%esp)
0000575a	call	*%ecx
0000575c	movl	0xfffffce0(%ebp),%eax
00005762	movl	(%eax),%eax
00005764	movl	(%eax),%ecx
00005766	movl	0x60(%ecx),%ecx
00005769	leal	0xd6bef-0x55b1(%esi),%edx
0000576f	movl	%edx,0x08(%esp)
00005773	movl	%ebx,0x04(%esp)
00005777	movl	%eax,(%esp)
0000577a	call	*%ecx
0000577c	movl	0xfffffce0(%ebp),%eax
00005782	movl	(%eax),%eax
00005784	movl	(%eax),%ecx
00005786	movl	0x60(%ecx),%ecx
00005789	leal	0xd6c00-0x55b1(%esi),%edx
0000578f	movl	%edx,0x08(%esp)
00005793	movl	%ebx,0x04(%esp)
00005797	movl	%eax,(%esp)
0000579a	call	*%ecx
0000579c	movl	0xfffffce0(%ebp),%eax
000057a2	movl	(%eax),%eax
000057a4	movl	0x04(%eax),%ecx
000057a7	movl	0x0c(%ecx),%ecx
000057aa	movl	%ebx,0x04(%esp)
000057ae	addl	$0x04,%eax
000057b1	movl	%eax,(%esp)
000057b4	call	*%ecx
000057b6	movl	(%edi),%eax
000057b8	movl	0x0c(%eax),%eax
000057bb	movl	%edi,(%esp)
000057be	call	*%eax
000057c0	movl	(%edi),%eax
000057c2	movl	%edi,(%esp)
000057c5	call	*0x04(%eax)
000057c8	leal	0xfffffeec(%ebp),%ebx
000057ce	movl	%ebx,0x10(%esp)
000057d2	movl	0xfffffcdc(%ebp),%eax
000057d8	movl	%eax,0x0c(%esp)
000057dc	leal	0xd6c03-0x55b1(%esi),%eax
000057e2	movl	%eax,0x08(%esp)
000057e6	leal	0xfffffde8(%ebp),%edi
000057ec	movl	%edi,(%esp)
000057ef	movl	$0x00000104,0x04(%esp)
000057f7	calll	V_snprintf(char*, int, char const*, ...)
000057fc	leal	0xd6c22-0x55b1(%esi),%eax
00005802	movl	%eax,0x04(%esp)
00005806	movl	%edi,(%esp)
00005809	movl	$0x00000104,0x08(%esp)
00005811	calll	V_SetExtension(char*, char const*, int)
00005816	movl	%edi,(%esp)
00005819	movl	$0x0000002f,0x04(%esp)
00005821	calll	V_FixSlashes(char*, char)
00005826	movl	%ebx,0x0c(%esp)
0000582a	movl	%esi,%ebx
0000582c	leal	0xd6c27-0x55b1(%ebx),%eax
00005832	movl	%eax,0x08(%esp)
00005836	leal	0xfffffce4(%ebp),%esi
0000583c	movl	%esi,(%esp)
0000583f	movl	$0x00000104,0x04(%esp)
00005847	calll	V_snprintf(char*, int, char const*, ...)
0000584c	movl	%esi,(%esp)
0000584f	movl	$0x0000002f,0x04(%esp)
00005857	calll	V_FixSlashes(char*, char)
0000585c	movl	0xfffffcd4(%ebp),%eax
00005862	movl	(%eax),%eax
00005864	movl	%edi,0x04(%esp)
00005868	movl	%eax,(%esp)
0000586b	calll	CP4Factory::AccessFile(char const*) const
00005870	movl	%eax,%esi
00005872	movl	(%esi),%eax
00005874	movl	0x08(%eax),%eax
00005877	movl	%esi,(%esp)
0000587a	call	*%eax
0000587c	movl	%ebx,0xfffffcdc(%ebp)
00005882	movl	0xfffffce0(%ebp),%ebx
00005888	movl	(%ebx),%eax
0000588a	movl	0x04(%eax),%ecx
0000588d	movl	0x08(%ecx),%ecx
00005890	movl	0xfffffcd0(%ebp),%edx
00005896	movl	%edx,0x08(%esp)
0000589a	movl	%edi,0x04(%esp)
0000589e	addl	$0x04,%eax
000058a1	movl	%eax,(%esp)
000058a4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000058ac	call	*%ecx
000058ae	movl	%eax,%edi
000058b0	testl	%edi,%edi
000058b2	je	0x00005976
000058b8	movl	(%ebx),%eax
000058ba	movl	(%eax),%ecx
000058bc	movl	0x60(%ecx),%ecx
000058bf	movl	0xfffffcdc(%ebp),%edx
000058c5	leal	0xd6bb5-0x55b1(%edx),%edx
000058cb	movl	%edx,0x08(%esp)
000058cf	movl	%edi,0x04(%esp)
000058d3	movl	%eax,(%esp)
000058d6	call	*%ecx
000058d8	movl	(%ebx),%eax
000058da	movl	(%eax),%ecx
000058dc	movl	0x60(%ecx),%ecx
000058df	movl	0xfffffcdc(%ebp),%edx
000058e5	leal	0xd6bc5-0x55b1(%edx),%edx
000058eb	movl	%edx,0x08(%esp)
000058ef	movl	%edi,0x04(%esp)
000058f3	movl	%eax,(%esp)
000058f6	call	*%ecx
000058f8	movl	(%ebx),%eax
000058fa	movl	(%eax),%ecx
000058fc	movl	0x60(%ecx),%ecx
000058ff	leal	0xfffffce4(%ebp),%edx
00005905	movl	%edx,0x0c(%esp)
00005909	movl	0xfffffcdc(%ebp),%edx
0000590f	leal	0xd6bc8-0x55b1(%edx),%edx
00005915	movl	%edx,0x08(%esp)
00005919	movl	%edi,0x04(%esp)
0000591d	movl	%eax,(%esp)
00005920	call	*%ecx
00005922	movl	(%ebx),%eax
00005924	movl	(%eax),%ecx
00005926	movl	0x60(%ecx),%ecx
00005929	movl	0xfffffcdc(%ebp),%edx
0000592f	leal	0xd6bde-0x55b1(%edx),%edx
00005935	movl	%edx,0x08(%esp)
00005939	movl	%edi,0x04(%esp)
0000593d	movl	%eax,(%esp)
00005940	call	*%ecx
00005942	movl	(%ebx),%eax
00005944	movl	(%eax),%ecx
00005946	movl	0x60(%ecx),%ecx
00005949	movl	0xfffffcdc(%ebp),%edx
0000594f	leal	0xd6c00-0x55b1(%edx),%edx
00005955	movl	%edx,0x08(%esp)
00005959	movl	%edi,0x04(%esp)
0000595d	movl	%eax,(%esp)
00005960	call	*%ecx
00005962	movl	(%ebx),%eax
00005964	movl	0x04(%eax),%ecx
00005967	movl	0x0c(%ecx),%ecx
0000596a	movl	%edi,0x04(%esp)
0000596e	addl	$0x04,%eax
00005971	movl	%eax,(%esp)
00005974	call	*%ecx
00005976	movl	(%esi),%eax
00005978	movl	0x0c(%eax),%eax
0000597b	movl	%esi,(%esp)
0000597e	call	*%eax
00005980	movl	(%esi),%eax
00005982	movl	%esi,(%esp)
00005985	call	*0x04(%eax)
00005988	movl	0xfffffcd8(%ebp),%eax
0000598e	movl	(%eax),%eax
00005990	cmpl	0xf0(%ebp),%eax
00005993	jne	0x00005a6f
00005999	addl	$0x0000033c,%esp
0000599f	popl	%esi
000059a0	popl	%edi
000059a1	popl	%ebx
000059a2	popl	%ebp
000059a3	ret
000059a4	movl	%eax,%ebx
000059a6	testl	%edi,%edi
000059a8	je	0x000059b4
000059aa	movl	(%edi),%eax
000059ac	movl	0x04(%eax),%eax
000059af	movl	%edi,(%esp)
000059b2	call	*%eax
000059b4	movl	%ebx,(%esp)
000059b7	calll	__Unwind_Resume
000059bc	calll	std::terminate()
000059c1	movl	%eax,%ebx
000059c3	movl	(%edi),%eax
000059c5	movl	0x0c(%eax),%eax
000059c8	movl	%edi,(%esp)
000059cb	call	*%eax
000059cd	testl	%edi,%edi
000059cf	je	0x000059b4
000059d1	movl	(%edi),%eax
000059d3	movl	0x04(%eax),%eax
000059d6	movl	%edi,(%esp)
000059d9	call	*%eax
000059db	jmp	0x000059b4
000059dd	testl	%edi,%edi
000059df	je	0x00005a6a
000059e5	movl	(%edi),%eax
000059e7	movl	0x04(%eax),%eax
000059ea	movl	%edi,(%esp)
000059ed	call	*%eax
000059ef	jmp	0x00005a6a
000059f1	calll	std::terminate()
000059f6	movl	%eax,%ebx
000059f8	movl	(%edi),%eax
000059fa	movl	0x04(%eax),%eax
000059fd	movl	%edi,(%esp)
00005a00	call	*%eax
00005a02	jmp	0x000059b4
00005a04	calll	std::terminate()
00005a09	movl	%eax,%ebx
00005a0b	testl	%esi,%esi
00005a0d	je	0x000059b4
00005a0f	movl	(%esi),%eax
00005a11	movl	0x04(%eax),%eax
00005a14	movl	%esi,(%esp)
00005a17	call	*%eax
00005a19	jmp	0x000059b4
00005a1b	calll	std::terminate()
00005a20	movl	%eax,%ebx
00005a22	movl	(%esi),%eax
00005a24	movl	0x0c(%eax),%eax
00005a27	movl	%esi,(%esp)
00005a2a	call	*%eax
00005a2c	testl	%esi,%esi
00005a2e	je	0x000059b4
00005a30	movl	(%esi),%eax
00005a32	movl	0x04(%eax),%eax
00005a35	movl	%esi,(%esp)
00005a38	call	*%eax
00005a3a	jmp	0x000059b4
00005a3f	testl	%esi,%esi
00005a41	je	0x00005a6a
00005a43	movl	(%esi),%eax
00005a45	movl	0x04(%eax),%eax
00005a48	movl	%esi,(%esp)
00005a4b	call	*%eax
00005a4d	jmp	0x00005a6a
00005a4f	calll	std::terminate()
00005a54	movl	%eax,%ebx
00005a56	movl	(%esi),%eax
00005a58	movl	0x04(%eax),%eax
00005a5b	movl	%esi,(%esp)
00005a5e	call	*%eax
00005a60	jmp	0x000059b4
00005a65	calll	std::terminate()
00005a6a	calll	std::terminate()
00005a6f	calll	___stack_chk_fail
00005a74	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
VTexFilesystemFactory(char const*, int*):
00005a80	calll	0x00005a85
00005a85	popl	%eax
00005a86	movl	0xe0871-0x5a85(%eax),%eax
00005a8c	movl	(%eax),%eax
00005a8e	ret
00005a8f	nop
CMDLPicker::RefreshActivitiesAndSequencesList():
00005a90	pushl	%ebp
00005a91	movl	%esp,%ebp
00005a93	pushl	%ebx
00005a94	pushl	%edi
00005a95	pushl	%esi
00005a96	subl	$0x5c,%esp
00005a99	calll	0x00005a9e
00005a9e	popl	%ebx
00005a9f	movl	0x08(%ebp),%esi
00005aa2	movl	0x00000280(%esi),%ecx
00005aa8	movl	(%ecx),%eax
00005aaa	movl	%ecx,(%esp)
00005aad	call	*0x000003c4(%eax)
00005ab3	movl	0x0000027c(%esi),%ecx
00005ab9	movl	(%ecx),%eax
00005abb	movl	%ecx,(%esp)
00005abe	call	*0x000003c4(%eax)
00005ac4	movl	0x00000254(%esi),%eax
00005aca	movl	%eax,(%esp)
00005acd	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00005ad5	calll	CMDLPanel::SetSequence(int)
00005ada	movl	0x00000280(%esi),%ecx
00005ae0	movl	(%ecx),%eax
00005ae2	movl	0x00000420(%eax),%eax
00005ae8	cmpw	$0xff,0x0000028c(%esi)
00005af0	jne	0x00005b1d
00005af2	movl	%esi,%edi
00005af4	leal	0xd6e2d-0x5a9e(%ebx),%esi
00005afa	movl	%esi,0x04(%esp)
00005afe	movl	%ecx,(%esp)
00005b01	call	*%eax
00005b03	movl	0x0000027c(%edi),%ecx
00005b09	movl	(%ecx),%eax
00005b0b	movl	%esi,0x04(%esp)
00005b0f	movl	%ecx,(%esp)
00005b12	call	*0x00000420(%eax)
00005b18	jmp	0x00005ee0
00005b1d	leal	0xd6e4d-0x5a9e(%ebx),%edx
00005b23	movl	%edx,0x04(%esp)
00005b27	movl	%ecx,(%esp)
00005b2a	call	*%eax
00005b2c	movl	0x0000027c(%esi),%ecx
00005b32	movl	(%ecx),%eax
00005b34	leal	0xd6e6e-0x5a9e(%ebx),%edx
00005b3a	movl	%ebx,0xbc(%ebp)
00005b3d	movl	%edx,0x04(%esp)
00005b41	movl	%ecx,(%esp)
00005b44	call	*0x00000420(%eax)
00005b4a	calll	vgui::MDLCache()
00005b4f	movl	(%eax),%ecx
00005b51	movzwl	0x0000028c(%esi),%edx
00005b58	movl	%edx,0x04(%esp)
00005b5c	movl	%eax,(%esp)
00005b5f	call	*0x28(%ecx)
00005b62	movl	%eax,0xb4(%ebp)
00005b65	movl	%eax,(%esp)
00005b68	calll	studiohdr_t::GetNumSeq() const
00005b6d	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xc0(%ebp)
00005b74	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xc4(%ebp)
00005b7b	movl	%eax,0xc8(%ebp)
00005b7e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xcc(%ebp)
00005b85	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xb8(%ebp)
00005b8c	testl	%eax,%eax
00005b8e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),%ecx
00005b93	je	0x00005ba5
00005b95	shll	$0x04,%eax
00005b98	movl	%eax,(%esp)
00005b9b	calll	_malloc
00005ba0	movl	%eax,%ecx
00005ba2	movl	%ecx,0xc4(%ebp)
00005ba5	movw	$0xffff,0xd0(%ebp)
00005bab	movw	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xd2(%ebp)
00005bb1	movw	$0xffff,0xd4(%ebp)
00005bb7	movw	$0xffff,0xd6(%ebp)
00005bbd	movl	%ecx,0xd8(%ebp)
00005bc0	movl	0xbc(%ebp),%eax
00005bc3	leal	CaselessStringLessThan(char const* const&, char const* const&)-0x5a9e(%eax),%eax
00005bc9	movl	%eax,0xc0(%ebp)
00005bcc	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax)
00005bd0	movl	0xb4(%ebp),%eax
00005bd3	movl	%eax,(%esp)
00005bd6	calll	studiohdr_t::GetNumSeq() const
00005bdb	movl	0xb8(%ebp),%ecx
00005bde	cmpl	%eax,%ecx
00005be0	movl	%ecx,%eax
00005be2	jge	0x00005ed5
00005be8	movl	%eax,0x04(%esp)
00005bec	movl	0xb4(%ebp),%eax
00005bef	movl	%eax,(%esp)
00005bf2	calll	studiohdr_t::pSeqdesc(int) const
00005bf7	testb	$0x04,0x0d(%eax)
00005bfb	jne	0x00005e9d
00005c01	movl	0xb8(%ebp),%eax
00005c04	movl	%eax,0x04(%esp)
00005c08	movl	0xb4(%ebp),%eax
00005c0b	movl	%eax,(%esp)
00005c0e	calll	studiohdr_t::pSeqdesc(int) const
00005c13	movl	%eax,%edi
00005c15	addl	0x08(%edi),%edi
00005c18	je	0x00005d70
00005c1e	cmpb	CMDLPicker::CMDLPicker(vgui::Panel*, int),(%edi)
00005c21	je	0x00005d70
00005c27	movl	%edi,0xe0(%ebp)
00005c2a	leal	0xe0(%ebp),%eax
00005c2d	movl	%eax,0x04(%esp)
00005c31	leal	0xc0(%ebp),%eax
00005c34	movl	%eax,(%esp)
00005c37	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
00005c3c	cmpw	$0xff,%ax
00005c40	jne	0x00005d70
00005c46	movl	$0x00000020,(%esp)
00005c4d	calll	KeyValues::operator new(unsigned long)
00005c52	movl	%eax,%esi
00005c54	movl	%edi,0x0c(%esp)
00005c58	movl	0xbc(%ebp),%ecx
00005c5b	leal	0xd6888-0x5a9e(%ecx),%eax
00005c61	movl	%eax,0x08(%esp)
00005c65	leal	0xd6e8e-0x5a9e(%ecx),%eax
00005c6b	movl	%ecx,%ebx
00005c6d	movl	%eax,0x04(%esp)
00005c71	movl	%esi,(%esp)
00005c74	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00005c79	movl	0x08(%ebp),%eax
00005c7c	movl	0x00000280(%eax),%ecx
00005c82	movl	(%ecx),%eax
00005c84	movl	0x00000390(%eax),%eax
00005c8a	movl	%esi,0x04(%esp)
00005c8e	movl	%ecx,(%esp)
00005c91	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00005c99	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00005ca1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00005ca9	call	*%eax
00005cab	movl	%eax,0xb0(%ebp)
00005cae	movl	$0x00000020,(%esp)
00005cb5	calll	KeyValues::operator new(unsigned long)
00005cba	movl	%eax,%esi
00005cbc	movl	%edi,0x0c(%esp)
00005cc0	leal	0xd6e98-0x5a9e(%ebx),%eax
00005cc6	movl	%eax,0x08(%esp)
00005cca	leal	0xd6e93-0x5a9e(%ebx),%eax
00005cd0	movl	%eax,0x04(%esp)
00005cd4	movl	%esi,(%esp)
00005cd7	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00005cdc	leal	0xd6ea6-0x5a9e(%ebx),%eax
00005ce2	movl	%eax,0x08(%esp)
00005ce6	leal	0xd6e9d-0x5a9e(%ebx),%eax
00005cec	movl	%ebx,0xbc(%ebp)
00005cef	movl	%eax,0x04(%esp)
00005cf3	movl	%esi,(%esp)
00005cf6	calll	KeyValues::SetString(char const*, char const*)
00005cfb	calll	vgui::MDLCache()
00005d00	movl	(%eax),%ecx
00005d02	movl	0x5c(%ecx),%ecx
00005d05	movl	0x08(%ebp),%edx
00005d08	movzwl	0x0000028c(%edx),%edx
00005d0f	movl	%edx,0x04(%esp)
00005d13	movl	%eax,(%esp)
00005d16	call	*%ecx
00005d18	movl	%eax,0x08(%esp)
00005d1c	movl	0xbc(%ebp),%eax
00005d1f	leal	0xd679e-0x5a9e(%eax),%eax
00005d25	movl	%eax,0x04(%esp)
00005d29	movl	%esi,(%esp)
00005d2c	calll	KeyValues::SetString(char const*, char const*)
00005d31	movl	0x08(%ebp),%eax
00005d34	movl	0x00000280(%eax),%eax
00005d3a	movl	%esi,0x08(%esp)
00005d3e	movl	0xb0(%ebp),%ecx
00005d41	movl	%ecx,0x04(%esp)
00005d45	movl	%eax,(%esp)
00005d48	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
00005d4d	movl	%edi,(%esp)
00005d50	calll	_strdup
00005d55	movl	%eax,0xe8(%ebp)
00005d58	movl	0xb8(%ebp),%eax
00005d5b	movl	%eax,0xec(%ebp)
00005d5e	leal	0xe8(%ebp),%eax
00005d61	movl	%eax,0x04(%esp)
00005d65	leal	0xc0(%ebp),%eax
00005d68	movl	%eax,(%esp)
00005d6b	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
00005d70	movl	0xb8(%ebp),%eax
00005d73	movl	%eax,0x04(%esp)
00005d77	movl	0xb4(%ebp),%eax
00005d7a	movl	%eax,(%esp)
00005d7d	calll	studiohdr_t::pSeqdesc(int) const
00005d82	movl	%eax,%esi
00005d84	addl	0x04(%esi),%esi
00005d87	je	0x00005e9d
00005d8d	cmpb	CMDLPicker::CMDLPicker(vgui::Panel*, int),(%esi)
00005d90	je	0x00005e9d
00005d96	movl	$0x00000020,(%esp)
00005d9d	calll	KeyValues::operator new(unsigned long)
00005da2	movl	%eax,%ebx
00005da4	movl	%esi,0x0c(%esp)
00005da8	movl	0xbc(%ebp),%ecx
00005dab	leal	0xd6840-0x5a9e(%ecx),%eax
00005db1	movl	%eax,0x08(%esp)
00005db5	leal	0xd6e8e-0x5a9e(%ecx),%eax
00005dbb	movl	%ecx,%edi
00005dbd	movl	%eax,0x04(%esp)
00005dc1	movl	%ebx,(%esp)
00005dc4	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00005dc9	movl	0x08(%ebp),%eax
00005dcc	movl	0x0000027c(%eax),%ecx
00005dd2	movl	(%ecx),%eax
00005dd4	movl	0x00000390(%eax),%eax
00005dda	movl	%ebx,0x04(%esp)
00005dde	movl	%ecx,(%esp)
00005de1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00005de9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00005df1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00005df9	call	*%eax
00005dfb	movl	%eax,0xb0(%ebp)
00005dfe	movl	$0x00000020,(%esp)
00005e05	calll	KeyValues::operator new(unsigned long)
00005e0a	movl	%eax,%ebx
00005e0c	movl	%esi,0x0c(%esp)
00005e10	leal	0xd6e98-0x5a9e(%edi),%eax
00005e16	movl	%eax,0x08(%esp)
00005e1a	leal	0xd6e93-0x5a9e(%edi),%eax
00005e20	movl	%eax,0x04(%esp)
00005e24	movl	%ebx,(%esp)
00005e27	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00005e2c	leal	0xd6eb3-0x5a9e(%edi),%eax
00005e32	movl	%eax,0x08(%esp)
00005e36	leal	0xd6e9d-0x5a9e(%edi),%eax
00005e3c	movl	%edi,0xbc(%ebp)
00005e3f	movl	%eax,0x04(%esp)
00005e43	movl	%ebx,(%esp)
00005e46	calll	KeyValues::SetString(char const*, char const*)
00005e4b	calll	vgui::MDLCache()
00005e50	movl	(%eax),%ecx
00005e52	movl	0x5c(%ecx),%ecx
00005e55	movl	0x08(%ebp),%edx
00005e58	movzwl	0x0000028c(%edx),%edx
00005e5f	movl	%edx,0x04(%esp)
00005e63	movl	%eax,(%esp)
00005e66	call	*%ecx
00005e68	movl	%eax,0x08(%esp)
00005e6c	movl	0xbc(%ebp),%eax
00005e6f	leal	0xd679e-0x5a9e(%eax),%eax
00005e75	movl	%eax,0x04(%esp)
00005e79	movl	%ebx,(%esp)
00005e7c	calll	KeyValues::SetString(char const*, char const*)
00005e81	movl	0x08(%ebp),%eax
00005e84	movl	0x0000027c(%eax),%eax
00005e8a	movl	%ebx,0x08(%esp)
00005e8e	movl	0xb0(%ebp),%ecx
00005e91	movl	%ecx,0x04(%esp)
00005e95	movl	%eax,(%esp)
00005e98	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
00005e9d	incl	0xb8(%ebp)
00005ea0	jmp	0x00005bd0
00005ea5	movl	%eax,%edi
00005ea7	movl	%esi,(%esp)
00005eaa	calll	KeyValues::operator delete(void*)
00005eaf	jmp	0x00005eea
00005eb1	movl	%eax,%edi
00005eb3	movl	%esi,(%esp)
00005eb6	calll	KeyValues::operator delete(void*)
00005ebb	jmp	0x00005eea
00005ebd	movl	%eax,%edi
00005ebf	movl	%ebx,(%esp)
00005ec2	calll	KeyValues::operator delete(void*)
00005ec7	jmp	0x00005eea
00005ec9	movl	%eax,%edi
00005ecb	movl	%ebx,(%esp)
00005ece	calll	KeyValues::operator delete(void*)
00005ed3	jmp	0x00005eea
00005ed5	leal	0xc0(%ebp),%eax
00005ed8	movl	%eax,(%esp)
00005edb	calll	CUtlDict<int, unsigned short>::~CUtlDict()
00005ee0	addl	$0x5c,%esp
00005ee3	popl	%esi
00005ee4	popl	%edi
00005ee5	popl	%ebx
00005ee6	popl	%ebp
00005ee7	ret
00005ee8	movl	%eax,%edi
00005eea	leal	0xc0(%ebp),%eax
00005eed	movl	%eax,(%esp)
00005ef0	calll	CUtlDict<int, unsigned short>::~CUtlDict()
00005ef5	movl	%edi,(%esp)
00005ef8	calll	__Unwind_Resume
00005efd	calll	std::terminate()
00005f02	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::OnSelectedAssetPicked(char const*):
00005f10	pushl	%ebp
00005f11	movl	%esp,%ebp
00005f13	pushl	%ebx
00005f14	pushl	%edi
00005f15	pushl	%esi
00005f16	subl	$0x0000011c,%esp
00005f1c	calll	0x00005f21
00005f21	popl	%edi
00005f22	movl	0xe0869-0x5f21(%edi),%eax
00005f28	movl	%eax,0xfffffee8(%ebp)
00005f2e	movl	(%eax),%eax
00005f30	movl	%eax,0xf0(%ebp)
00005f33	movl	0xe087d-0x5f21(%edi),%esi
00005f39	movl	(%esi),%ecx
00005f3b	movl	(%ecx),%eax
00005f3d	movl	%ecx,(%esp)
00005f40	movl	$0x00000054,0x04(%esp)
00005f48	call	*0x44(%eax)
00005f4b	xorl	%ebx,%ebx
00005f4d	testb	%al,%al
00005f4f	jne	0x00005f89
00005f51	movl	(%esi),%ecx
00005f53	movl	(%ecx),%eax
00005f55	movl	%ecx,(%esp)
00005f58	movl	$0x00000053,0x04(%esp)
00005f60	call	*0x44(%eax)
00005f63	xorl	%ebx,%ebx
00005f65	testb	%al,%al
00005f67	jne	0x00005f89
00005f69	movl	(%esi),%ecx
00005f6b	movl	(%ecx),%eax
00005f6d	movl	%ecx,(%esp)
00005f70	movl	$0x0000006c,0x04(%esp)
00005f78	call	*0x30(%eax)
00005f7b	movl	$0xffffffff,%ebx
00005f80	testb	%al,%al
00005f82	je	0x00005f89
00005f84	movl	$0x00000001,%ebx
00005f89	movl	0x0c(%ebp),%eax
00005f8c	movl	0x08(%ebp),%esi
00005f8f	testl	%eax,%eax
00005f91	je	0x00005fcc
00005f93	movl	%eax,0x0c(%esp)
00005f97	leal	0xd6ec0-0x5f21(%edi),%eax
00005f9d	movl	%eax,0x08(%esp)
00005fa1	leal	0xfffffeec(%ebp),%edi
00005fa7	movl	%edi,(%esp)
00005faa	movl	$0x00000104,0x04(%esp)
00005fb2	calll	V_snprintf(char*, int, char const*, ...)
00005fb7	movl	%ebx,0x0c(%esp)
00005fbb	movl	%edi,0x04(%esp)
00005fbf	movl	%esi,(%esp)
00005fc2	movl	$0x00000001,0x08(%esp)
00005fca	jmp	0x00005fe3
00005fcc	movl	%ebx,0x0c(%esp)
00005fd0	movl	%esi,(%esp)
00005fd3	movl	$0x00000001,0x08(%esp)
00005fdb	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00005fe3	calll	CMDLPicker::SelectMDL(char const*, bool, int)
00005fe8	movl	0xfffffee8(%ebp),%eax
00005fee	movl	(%eax),%eax
00005ff0	cmpl	0xf0(%ebp),%eax
00005ff3	jne	0x00006000
00005ff5	addl	$0x0000011c,%esp
00005ffb	popl	%esi
00005ffc	popl	%edi
00005ffd	popl	%ebx
00005ffe	popl	%ebp
00005fff	ret
00006000	calll	___stack_chk_fail
00006005	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::UpdateSkinsList():
00006010	pushl	%ebp
00006011	movl	%esp,%ebp
00006013	pushl	%ebx
00006014	pushl	%edi
00006015	pushl	%esi
00006016	subl	$0x4c,%esp
00006019	calll	0x0000601e
0000601e	popl	%ebx
0000601f	movl	0xe0869-0x601e(%ebx),%eax
00006025	movl	%eax,0xc0(%ebp)
00006028	movl	(%eax),%eax
0000602a	movl	%eax,0xf0(%ebp)
0000602d	movl	0x08(%ebp),%esi
00006030	movl	0x00000284(%esi),%eax
00006036	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xc4(%ebp)
0000603d	testl	%eax,%eax
0000603f	je	0x00006132
00006045	movl	(%eax),%ecx
00006047	movl	%eax,(%esp)
0000604a	call	*0x000003c4(%ecx)
00006050	calll	vgui::MDLCache()
00006055	movl	(%eax),%ecx
00006057	movzwl	0x0000028c(%esi),%edx
0000605e	movl	%edx,0x04(%esp)
00006062	movl	%eax,(%esp)
00006065	call	*0x28(%ecx)
00006068	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xc4(%ebp)
0000606f	testl	%eax,%eax
00006071	je	0x00006132
00006077	movl	0x000000e0(%eax),%eax
0000607d	movl	%eax,0xc4(%ebp)
00006080	xorl	%esi,%esi
00006082	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00006090	cmpl	0xc4(%ebp),%esi
00006093	jge	0x00006132
00006099	xorps	%xmm0,%xmm0
0000609c	movaps	%xmm0,0xc8(%ebp)
000060a0	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xe0(%ebp)
000060a4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xdc(%ebp)
000060ab	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xd8(%ebp)
000060b2	movl	%esi,0x08(%esp)
000060b6	leal	0xd6f2c-0x601e(%ebx),%eax
000060bc	movl	%eax,0x04(%esp)
000060c0	leal	0xc8(%ebp),%eax
000060c3	movl	%eax,(%esp)
000060c6	calll	_sprintf
000060cb	movl	$0x00000020,(%esp)
000060d2	calll	KeyValues::operator new(unsigned long)
000060d7	movl	%eax,%edi
000060d9	leal	0xc8(%ebp),%eax
000060dc	movl	%eax,0x0c(%esp)
000060e0	leal	0xd68a5-0x601e(%ebx),%eax
000060e6	movl	%eax,0x08(%esp)
000060ea	leal	0xd6e8e-0x601e(%ebx),%eax
000060f0	movl	%eax,0x04(%esp)
000060f4	movl	%edi,(%esp)
000060f7	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000060fc	movl	0x08(%ebp),%eax
000060ff	movl	0x00000284(%eax),%ecx
00006105	movl	(%ecx),%eax
00006107	movl	%edi,0x04(%esp)
0000610b	movl	%ecx,(%esp)
0000610e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
00006116	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
0000611e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006126	call	*0x00000390(%eax)
0000612c	incl	%esi
0000612d	jmp	0x00006090
00006132	movl	0xc0(%ebp),%eax
00006135	movl	(%eax),%eax
00006137	cmpl	0xf0(%ebp),%eax
0000613a	jne	0x00006159
0000613c	movl	0xc4(%ebp),%eax
0000613f	addl	$0x4c,%esp
00006142	popl	%esi
00006143	popl	%edi
00006144	popl	%ebx
00006145	popl	%ebp
00006146	ret
00006147	movl	%eax,%esi
00006149	movl	%edi,(%esp)
0000614c	calll	KeyValues::operator delete(void*)
00006151	movl	%esi,(%esp)
00006154	calll	__Unwind_Resume
00006159	calll	___stack_chk_fail
0000615e	calll	std::terminate()
00006163	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::UpdateInfoTab():
00006170	pushl	%ebp
00006171	movl	%esp,%ebp
00006173	pushl	%ebx
00006174	pushl	%edi
00006175	pushl	%esi
00006176	subl	$0x2c,%esp
00006179	calll	0x0000617e
0000617e	popl	%ebx
0000617f	movl	0xe0869-0x617e(%ebx),%eax
00006185	movl	%eax,0xdc(%ebp)
00006188	movl	(%eax),%eax
0000618a	movl	%eax,0xf0(%ebp)
0000618d	calll	vgui::MDLCache()
00006192	movl	(%eax),%ecx
00006194	movl	0x08(%ebp),%edi
00006197	movzwl	0x0000028c(%edi),%edx
0000619e	movl	%edx,0x04(%esp)
000061a2	movl	%eax,(%esp)
000061a5	call	*0x28(%ecx)
000061a8	movl	%eax,%esi
000061aa	testl	%esi,%esi
000061ac	je	0x000063d9
000061b2	cvttss2si	0x00000148(%esi),%eax
000061ba	movl	%eax,0xd8(%ebp)
000061bd	movl	0x00000274(%edi),%eax
000061c3	leal	0xd6f33-0x617e(%ebx),%ecx
000061c9	movl	%ecx,0x04(%esp)
000061cd	movl	%eax,(%esp)
000061d0	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000061d8	calll	vgui::Panel::FindChildByName(char const*, bool)
000061dd	movl	%eax,%edi
000061df	movl	0xd8(%ebp),%eax
000061e2	movl	%eax,0x0c(%esp)
000061e6	leal	0xd6f3d-0x617e(%ebx),%eax
000061ec	movl	%ebx,0xe0(%ebp)
000061ef	movl	%eax,0x08(%esp)
000061f3	leal	0xe6(%ebp),%ebx
000061f6	movl	%ebx,(%esp)
000061f9	movl	$0x0000000a,0x04(%esp)
00006201	calll	V_snprintf(char*, int, char const*, ...)
00006206	movl	(%edi),%eax
00006208	movl	%ebx,0x04(%esp)
0000620c	movl	%edi,(%esp)
0000620f	call	*0x00000348(%eax)
00006215	movb	0x00000098(%esi),%al
0000621b	shrb	$0x04,%al
0000621e	andb	$0x01,%al
00006220	movb	%al,0xe5(%ebp)
00006223	xorl	%edi,%edi
00006225	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000013c(%esi)
0000622c	je	0x00006236
0000622e	addl	0x00000138(%esi),%esi
00006234	movl	%esi,%edi
00006236	movl	0x08(%ebp),%esi
00006239	movl	0x00000274(%esi),%eax
0000623f	movl	0xe0(%ebp),%ebx
00006242	leal	0xd6f40-0x617e(%ebx),%ecx
00006248	movl	%ecx,0x04(%esp)
0000624c	movl	%eax,(%esp)
0000624f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006257	calll	vgui::Panel::FindChildByName(char const*, bool)
0000625c	movl	(%eax),%ecx
0000625e	movl	%eax,(%esp)
00006261	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006269	call	*0x00000088(%ecx)
0000626f	testl	%edi,%edi
00006271	je	0x000062a6
00006273	leal	0xd6f4b-0x617e(%ebx),%eax
00006279	movl	%eax,0x04(%esp)
0000627d	movl	%edi,(%esp)
00006280	calll	_strstr
00006285	testl	%eax,%eax
00006287	je	0x000062a6
00006289	leal	0xe5(%ebp),%ecx
0000628c	movl	%ecx,0x08(%esp)
00006290	movl	%eax,0x04(%esp)
00006294	movl	%esi,(%esp)
00006297	calll	CMDLPicker::UpdatePropDataList(char const*, bool&)
0000629c	xorb	%bl,%bl
0000629e	testl	%eax,%eax
000062a0	je	0x000062b9
000062a2	movb	$0x01,%bl
000062a4	jmp	0x000062b9
000062a6	movl	0x00000288(%esi),%ecx
000062ac	movl	(%ecx),%eax
000062ae	movl	%ecx,(%esp)
000062b1	call	*0x000003c4(%eax)
000062b7	xorb	%bl,%bl
000062b9	movl	0x00000274(%esi),%eax
000062bf	movl	0xe0(%ebp),%esi
000062c2	leal	0xd68dc-0x617e(%esi),%ecx
000062c8	movl	%ecx,0x04(%esp)
000062cc	movl	%eax,(%esp)
000062cf	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000062d7	calll	vgui::Panel::FindChildByName(char const*, bool)
000062dc	movl	%esi,%edi
000062de	movl	%eax,%esi
000062e0	movl	(%esi),%eax
000062e2	movl	%esi,(%esp)
000062e5	movl	$0x00000001,0x04(%esp)
000062ed	call	*0x00000470(%eax)
000062f3	movl	(%esi),%eax
000062f5	movzbl	0xe5(%ebp),%ecx
000062f9	andl	$0x01,%ecx
000062fc	movl	%ecx,0x04(%esp)
00006300	movl	%esi,(%esp)
00006303	call	*0x000003f0(%eax)
00006309	movl	(%esi),%eax
0000630b	movl	%esi,(%esp)
0000630e	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006316	call	*0x00000470(%eax)
0000631c	movl	0x08(%ebp),%eax
0000631f	movl	0x00000274(%eax),%eax
00006325	leal	0xd68ce-0x617e(%edi),%ecx
0000632b	movl	%ecx,0x04(%esp)
0000632f	movl	%eax,(%esp)
00006332	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000633a	calll	vgui::Panel::FindChildByName(char const*, bool)
0000633f	movl	%eax,%esi
00006341	movl	(%esi),%eax
00006343	movl	%esi,(%esp)
00006346	movl	$0x00000001,0x04(%esp)
0000634e	call	*0x00000470(%eax)
00006354	movl	(%esi),%eax
00006356	movzbl	%bl,%ecx
00006359	movl	%ecx,0x04(%esp)
0000635d	movl	%esi,(%esp)
00006360	call	*0x000003f0(%eax)
00006366	movl	(%esi),%eax
00006368	movl	%esi,(%esp)
0000636b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006373	call	*0x00000470(%eax)
00006379	movl	0x08(%ebp),%eax
0000637c	movl	0x00000274(%eax),%eax
00006382	leal	0xd68e9-0x617e(%edi),%ecx
00006388	movl	%ecx,0x04(%esp)
0000638c	movl	%eax,(%esp)
0000638f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006397	calll	vgui::Panel::FindChildByName(char const*, bool)
0000639c	movl	%eax,%esi
0000639e	movl	(%esi),%eax
000063a0	movl	%esi,(%esp)
000063a3	movl	$0x00000001,0x04(%esp)
000063ab	call	*0x00000470(%eax)
000063b1	movl	(%esi),%eax
000063b3	xorb	$0x01,%bl
000063b6	movzbl	%bl,%ecx
000063b9	movl	%ecx,0x04(%esp)
000063bd	movl	%esi,(%esp)
000063c0	call	*0x000003f0(%eax)
000063c6	movl	(%esi),%eax
000063c8	movl	%esi,(%esp)
000063cb	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000063d3	call	*0x00000470(%eax)
000063d9	movl	0xdc(%ebp),%eax
000063dc	movl	(%eax),%eax
000063de	cmpl	0xf0(%ebp),%eax
000063e1	jne	0x000063eb
000063e3	addl	$0x2c,%esp
000063e6	popl	%esi
000063e7	popl	%edi
000063e8	popl	%ebx
000063e9	popl	%ebp
000063ea	ret
000063eb	calll	___stack_chk_fail
CMDLPicker::OnCheckButtonChecked(KeyValues*):
000063f0	pushl	%ebp
000063f1	movl	%esp,%ebp
000063f3	subl	$0x08,%esp
000063f6	movl	0x0c(%ebp),%eax
000063f9	movl	%eax,0x04(%esp)
000063fd	movl	0x08(%ebp),%eax
00006400	movl	%eax,(%esp)
00006403	calll	CBaseAssetPicker::OnCheckButtonChecked(KeyValues*)
00006408	addl	$0x08,%esp
0000640b	popl	%ebp
0000640c	jmp	CMDLPicker::RefreshRenderSettings()
00006411	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GetSelectedMDLName(char*, int):
00006420	pushl	%ebp
00006421	movl	%esp,%ebp
00006423	pushl	%ebx
00006424	pushl	%edi
00006425	pushl	%esi
00006426	subl	$0x1c,%esp
00006429	calll	0x0000642e
0000642e	popl	%esi
0000642f	movl	0x08(%ebp),%ebx
00006432	movl	%ebx,(%esp)
00006435	calll	CBaseAssetPicker::GetSelectedAssetCount()
0000643a	movl	0x0c(%ebp),%edi
0000643d	testl	%eax,%eax
0000643f	jle	0x00006470
00006441	movl	%ebx,(%esp)
00006444	movl	$0xffffffff,0x04(%esp)
0000644c	calll	CBaseAssetPicker::GetSelectedAsset(int)
00006451	movl	%eax,0x0c(%esp)
00006455	leal	0xd6ec0-0x642e(%esi),%eax
0000645b	movl	%eax,0x08(%esp)
0000645f	movl	0x10(%ebp),%eax
00006462	movl	%eax,0x04(%esp)
00006466	movl	%edi,(%esp)
00006469	calll	V_snprintf(char*, int, char const*, ...)
0000646e	jmp	0x00006473
00006470	movb	CMDLPicker::CMDLPicker(vgui::Panel*, int),(%edi)
00006473	addl	$0x1c,%esp
00006476	popl	%esi
00006477	popl	%edi
00006478	popl	%ebx
00006479	popl	%ebp
0000647a	ret
0000647b	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GetSelectedPage():
00006480	pushl	%ebp
00006481	movl	%esp,%ebp
00006483	pushl	%esi
00006484	pushl	%eax
00006485	movl	0x08(%ebp),%esi
00006488	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%esi)
0000648f	je	0x000064b1
00006491	movl	0x00000260(%esi),%ecx
00006497	movl	(%ecx),%eax
00006499	movl	%ecx,(%esp)
0000649c	call	*0x000003bc(%eax)
000064a2	movl	%eax,%ecx
000064a4	movl	$0x00000002,%eax
000064a9	cmpl	0x00000268(%esi),%ecx
000064af	je	0x000064dc
000064b1	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%esi)
000064b8	je	0x000064da
000064ba	movl	0x00000260(%esi),%ecx
000064c0	movl	(%ecx),%eax
000064c2	movl	%ecx,(%esp)
000064c5	call	*0x000003bc(%eax)
000064cb	movl	%eax,%ecx
000064cd	movl	$0x00000004,%eax
000064d2	cmpl	0x0000026c(%esi),%ecx
000064d8	je	0x000064dc
000064da	xorl	%eax,%eax
000064dc	addl	$0x04,%esp
000064df	popl	%esi
000064e0	popl	%ebp
000064e1	ret
000064e2	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GetSelectedSequenceName():
000064f0	pushl	%ebp
000064f1	movl	%esp,%ebp
000064f3	pushl	%edi
000064f4	pushl	%esi
000064f5	subl	$0x10,%esp
000064f8	calll	0x000064fd
000064fd	popl	%esi
000064fe	movl	0x08(%ebp),%edi
00006501	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%edi)
00006508	je	0x00006558
0000650a	movl	0x0000027c(%edi),%ecx
00006510	movl	(%ecx),%eax
00006512	movl	%ecx,(%esp)
00006515	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000651d	call	*0x000003f8(%eax)
00006523	testl	%eax,%eax
00006525	js	0x00006558
00006527	movl	0x0000027c(%edi),%edx
0000652d	movl	(%edx),%ecx
0000652f	movl	%eax,0x04(%esp)
00006533	movl	%edx,(%esp)
00006536	call	*0x0000039c(%ecx)
0000653c	leal	0xd6840-0x64fd(%esi),%ecx
00006542	movl	%ecx,0x04(%esp)
00006546	movl	%eax,(%esp)
00006549	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006551	calll	KeyValues::GetString(char const*, char const*)
00006556	jmp	0x0000655a
00006558	xorl	%eax,%eax
0000655a	addl	$0x10,%esp
0000655d	popl	%esi
0000655e	popl	%edi
0000655f	popl	%ebp
00006560	ret
00006561	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GetSelectedActivityName():
00006570	pushl	%ebp
00006571	movl	%esp,%ebp
00006573	pushl	%edi
00006574	pushl	%esi
00006575	subl	$0x10,%esp
00006578	calll	0x0000657d
0000657d	popl	%esi
0000657e	movl	0x08(%ebp),%edi
00006581	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%edi)
00006588	je	0x000065d8
0000658a	movl	0x00000280(%edi),%ecx
00006590	movl	(%ecx),%eax
00006592	movl	%ecx,(%esp)
00006595	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000659d	call	*0x000003f8(%eax)
000065a3	testl	%eax,%eax
000065a5	js	0x000065d8
000065a7	movl	0x00000280(%edi),%edx
000065ad	movl	(%edx),%ecx
000065af	movl	%eax,0x04(%esp)
000065b3	movl	%edx,(%esp)
000065b6	call	*0x0000039c(%ecx)
000065bc	leal	0xd6888-0x657d(%esi),%ecx
000065c2	movl	%ecx,0x04(%esp)
000065c6	movl	%eax,(%esp)
000065c9	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000065d1	calll	KeyValues::GetString(char const*, char const*)
000065d6	jmp	0x000065da
000065d8	xorl	%eax,%eax
000065da	addl	$0x10,%esp
000065dd	popl	%esi
000065de	popl	%edi
000065df	popl	%ebp
000065e0	ret
000065e1	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::GetSelectedSkin():
000065f0	pushl	%ebp
000065f1	movl	%esp,%ebp
000065f3	subl	$0x08,%esp
000065f6	xorl	%eax,%eax
000065f8	movl	0x08(%ebp),%ecx
000065fb	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000270(%ecx)
00006602	je	0x00006629
00006604	movl	0x00000284(%ecx),%ecx
0000660a	movl	(%ecx),%eax
0000660c	movl	%ecx,(%esp)
0000660f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006617	call	*0x000003f8(%eax)
0000661d	movl	%eax,%ecx
0000661f	testl	%ecx,%ecx
00006621	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),%eax
00006626	cmovnsl	%ecx,%eax
00006629	addl	$0x08,%esp
0000662c	popl	%ebp
0000662d	ret
0000662e	nop
CMDLPicker::SelectActivity(char const*):
00006630	pushl	%ebp
00006631	movl	%esp,%ebp
00006633	pushl	%ebx
00006634	pushl	%edi
00006635	pushl	%esi
00006636	subl	$0x1c,%esp
00006639	calll	0x0000663e
0000663e	popl	%eax
0000663f	movl	%eax,0xf0(%ebp)
00006642	calll	vgui::MDLCache()
00006647	movl	(%eax),%ecx
00006649	movl	0x08(%ebp),%edx
0000664c	movzwl	0x0000028c(%edx),%edx
00006653	movl	%edx,0x04(%esp)
00006657	movl	%eax,(%esp)
0000665a	call	*0x28(%ecx)
0000665d	movl	%eax,%esi
0000665f	xorl	%ebx,%ebx
00006661	movl	0x0c(%ebp),%edi
00006664	jmp	0x00006671
00006666	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00006670	incl	%ebx
00006671	movl	%esi,(%esp)
00006674	calll	studiohdr_t::GetNumSeq() const
00006679	cmpl	%eax,%ebx
0000667b	jge	0x000066b1
0000667d	movl	%ebx,0x04(%esp)
00006681	movl	%esi,(%esp)
00006684	calll	studiohdr_t::pSeqdesc(int) const
00006689	addl	0x08(%eax),%eax
0000668c	movl	%edi,0x04(%esp)
00006690	movl	%eax,(%esp)
00006693	calll	_strcasecmp
00006698	testl	%eax,%eax
0000669a	jne	0x00006670
0000669c	movl	0x08(%ebp),%eax
0000669f	movl	0x00000254(%eax),%eax
000066a5	movl	%ebx,0x04(%esp)
000066a9	movl	%eax,(%esp)
000066ac	calll	CMDLPanel::SetSequence(int)
000066b1	movl	0x08(%ebp),%ebx
000066b4	movl	(%ebx),%eax
000066b6	movl	0x000000c0(%eax),%eax
000066bc	movl	%eax,0xec(%ebp)
000066bf	movl	$0x00000020,(%esp)
000066c6	calll	KeyValues::operator new(unsigned long)
000066cb	movl	%eax,%esi
000066cd	movl	%edi,0x0c(%esp)
000066d1	movl	0xf0(%ebp),%ecx
000066d4	leal	0xd6888-0x663e(%ecx),%eax
000066da	movl	%eax,0x08(%esp)
000066de	leal	0xd6edc-0x663e(%ecx),%eax
000066e4	movl	%eax,0x04(%esp)
000066e8	movl	%esi,(%esp)
000066eb	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000066f0	movl	%esi,0x04(%esp)
000066f4	movl	%ebx,(%esp)
000066f7	call	*0xec(%ebp)
000066fa	addl	$0x1c,%esp
000066fd	popl	%esi
000066fe	popl	%edi
000066ff	popl	%ebx
00006700	popl	%ebp
00006701	ret
00006702	movl	%eax,%edi
00006704	movl	%esi,(%esp)
00006707	calll	KeyValues::operator delete(void*)
0000670c	movl	%edi,(%esp)
0000670f	calll	__Unwind_Resume
00006714	calll	std::terminate()
00006719	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax)
CMDLPicker::SelectSequence(char const*):
00006720	pushl	%ebp
00006721	movl	%esp,%ebp
00006723	pushl	%ebx
00006724	pushl	%edi
00006725	pushl	%esi
00006726	subl	$0x1c,%esp
00006729	calll	0x0000672e
0000672e	popl	%eax
0000672f	movl	%eax,0xf0(%ebp)
00006732	calll	vgui::MDLCache()
00006737	movl	(%eax),%ecx
00006739	movl	0x08(%ebp),%edx
0000673c	movzwl	0x0000028c(%edx),%edx
00006743	movl	%edx,0x04(%esp)
00006747	movl	%eax,(%esp)
0000674a	call	*0x28(%ecx)
0000674d	movl	%eax,%esi
0000674f	xorl	%ebx,%ebx
00006751	movl	0x0c(%ebp),%edi
00006754	jmp	0x00006761
00006756	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00006760	incl	%ebx
00006761	movl	%esi,(%esp)
00006764	calll	studiohdr_t::GetNumSeq() const
00006769	cmpl	%eax,%ebx
0000676b	jge	0x000067a1
0000676d	movl	%ebx,0x04(%esp)
00006771	movl	%esi,(%esp)
00006774	calll	studiohdr_t::pSeqdesc(int) const
00006779	addl	0x04(%eax),%eax
0000677c	movl	%edi,0x04(%esp)
00006780	movl	%eax,(%esp)
00006783	calll	V_stricmp(char const*, char const*)
00006788	testl	%eax,%eax
0000678a	jne	0x00006760
0000678c	movl	0x08(%ebp),%eax
0000678f	movl	0x00000254(%eax),%eax
00006795	movl	%ebx,0x04(%esp)
00006799	movl	%eax,(%esp)
0000679c	calll	CMDLPanel::SetSequence(int)
000067a1	movl	0x08(%ebp),%ebx
000067a4	movl	(%ebx),%eax
000067a6	movl	0x000000c0(%eax),%eax
000067ac	movl	%eax,0xec(%ebp)
000067af	movl	$0x00000020,(%esp)
000067b6	calll	KeyValues::operator new(unsigned long)
000067bb	movl	%eax,%esi
000067bd	movl	%edi,0x0c(%esp)
000067c1	movl	0xf0(%ebp),%ecx
000067c4	leal	0xd6840-0x672e(%ecx),%eax
000067ca	movl	%eax,0x08(%esp)
000067ce	leal	0xd6edc-0x672e(%ecx),%eax
000067d4	movl	%eax,0x04(%esp)
000067d8	movl	%esi,(%esp)
000067db	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000067e0	movl	%esi,0x04(%esp)
000067e4	movl	%ebx,(%esp)
000067e7	call	*0xec(%ebp)
000067ea	addl	$0x1c,%esp
000067ed	popl	%esi
000067ee	popl	%edi
000067ef	popl	%ebx
000067f0	popl	%ebp
000067f1	ret
000067f2	movl	%eax,%edi
000067f4	movl	%esi,(%esp)
000067f7	calll	KeyValues::operator delete(void*)
000067fc	movl	%edi,(%esp)
000067ff	calll	__Unwind_Resume
00006804	calll	std::terminate()
00006809	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax)
CMDLPicker::SelectSkin(int):
00006810	pushl	%ebp
00006811	movl	%esp,%ebp
00006813	pushl	%ebx
00006814	pushl	%edi
00006815	pushl	%esi
00006816	subl	$0x1c,%esp
00006819	calll	0x0000681e
0000681e	popl	%edi
0000681f	movl	0x08(%ebp),%ebx
00006822	movl	0x00000254(%ebx),%eax
00006828	movl	0x0c(%ebp),%ecx
0000682b	movl	%ecx,0x04(%esp)
0000682f	movl	%eax,(%esp)
00006832	calll	CMDLPanel::SetSkin(int)
00006837	movl	(%ebx),%eax
00006839	movl	0x000000c0(%eax),%eax
0000683f	movl	%eax,0xf0(%ebp)
00006842	movl	$0x00000020,(%esp)
00006849	calll	KeyValues::operator new(unsigned long)
0000684e	movl	%eax,%esi
00006850	movl	0x0c(%ebp),%eax
00006853	movl	%eax,0x0c(%esp)
00006857	leal	0xd68a5-0x681e(%edi),%eax
0000685d	movl	%eax,0x08(%esp)
00006861	leal	0xd6ef5-0x681e(%edi),%eax
00006867	movl	%eax,0x04(%esp)
0000686b	movl	%esi,(%esp)
0000686e	calll	KeyValues::KeyValues(char const*, char const*, int)
00006873	movl	%esi,0x04(%esp)
00006877	movl	%ebx,(%esp)
0000687a	call	*0xf0(%ebp)
0000687d	addl	$0x1c,%esp
00006880	popl	%esi
00006881	popl	%edi
00006882	popl	%ebx
00006883	popl	%ebp
00006884	ret
00006885	movl	%eax,%edi
00006887	movl	%esi,(%esp)
0000688a	calll	KeyValues::operator delete(void*)
0000688f	movl	%edi,(%esp)
00006892	calll	__Unwind_Resume
00006897	calll	std::terminate()
0000689c	nopl	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax)
CMDLPicker::OnItemSelected(KeyValues*):
000068a0	pushl	%ebp
000068a1	movl	%esp,%ebp
000068a3	pushl	%edi
000068a4	pushl	%esi
000068a5	subl	$0x10,%esp
000068a8	calll	0x000068ad
000068ad	popl	%edi
000068ae	leal	0xd6f0a-0x68ad(%edi),%eax
000068b4	movl	%eax,0x04(%esp)
000068b8	movl	0x0c(%ebp),%eax
000068bb	movl	%eax,(%esp)
000068be	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000068c6	calll	KeyValues::GetPtr(char const*, void*)
000068cb	movl	0x08(%ebp),%esi
000068ce	movl	0x0000027c(%esi),%ecx
000068d4	testl	%ecx,%ecx
000068d6	je	0x0000694c
000068d8	cmpl	%ecx,%eax
000068da	jne	0x0000694c
000068dc	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%esi)
000068e3	je	0x00006a05
000068e9	movl	(%ecx),%eax
000068eb	movl	%ecx,(%esp)
000068ee	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000068f6	call	*0x000003f8(%eax)
000068fc	testl	%eax,%eax
000068fe	js	0x00006a05
00006904	movl	0x0000027c(%esi),%edx
0000690a	movl	(%edx),%ecx
0000690c	movl	%eax,0x04(%esp)
00006910	movl	%edx,(%esp)
00006913	call	*0x0000039c(%ecx)
00006919	leal	0xd6840-0x68ad(%edi),%ecx
0000691f	movl	%ecx,0x04(%esp)
00006923	movl	%eax,(%esp)
00006926	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000692e	calll	KeyValues::GetString(char const*, char const*)
00006933	testl	%eax,%eax
00006935	je	0x00006a05
0000693b	movl	%eax,0x04(%esp)
0000693f	movl	%esi,(%esp)
00006942	calll	CMDLPicker::SelectSequence(char const*)
00006947	jmp	0x00006a05
0000694c	movl	0x00000280(%esi),%ecx
00006952	testl	%ecx,%ecx
00006954	je	0x000069c3
00006956	cmpl	%ecx,%eax
00006958	jne	0x000069c3
0000695a	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%esi)
00006961	je	0x00006a05
00006967	movl	(%ecx),%eax
00006969	movl	%ecx,(%esp)
0000696c	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006974	call	*0x000003f8(%eax)
0000697a	testl	%eax,%eax
0000697c	js	0x00006a05
00006982	movl	0x00000280(%esi),%edx
00006988	movl	(%edx),%ecx
0000698a	movl	%eax,0x04(%esp)
0000698e	movl	%edx,(%esp)
00006991	call	*0x0000039c(%ecx)
00006997	leal	0xd6888-0x68ad(%edi),%ecx
0000699d	movl	%ecx,0x04(%esp)
000069a1	movl	%eax,(%esp)
000069a4	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000069ac	calll	KeyValues::GetString(char const*, char const*)
000069b1	testl	%eax,%eax
000069b3	je	0x00006a05
000069b5	movl	%eax,0x04(%esp)
000069b9	movl	%esi,(%esp)
000069bc	calll	CMDLPicker::SelectActivity(char const*)
000069c1	jmp	0x00006a05
000069c3	movl	0x00000284(%esi),%ecx
000069c9	testl	%ecx,%ecx
000069cb	je	0x00006a0c
000069cd	cmpl	%ecx,%eax
000069cf	jne	0x00006a0c
000069d1	xorl	%edx,%edx
000069d3	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000270(%esi)
000069da	je	0x000069f9
000069dc	movl	(%ecx),%eax
000069de	movl	%ecx,(%esp)
000069e1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
000069e9	call	*0x000003f8(%eax)
000069ef	testl	%eax,%eax
000069f1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),%edx
000069f6	cmovnsl	%eax,%edx
000069f9	movl	%edx,0x04(%esp)
000069fd	movl	%esi,(%esp)
00006a00	calll	CMDLPicker::SelectSkin(int)
00006a05	addl	$0x10,%esp
00006a08	popl	%esi
00006a09	popl	%edi
00006a0a	popl	%ebp
00006a0b	ret
00006a0c	addl	$0x10,%esp
00006a0f	popl	%esi
00006a10	popl	%edi
00006a11	popl	%ebp
00006a12	jmp	CBaseAssetPicker::OnItemSelected(KeyValues*)
00006a17	nopw	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::OnPageChanged():
00006a20	pushl	%ebp
00006a21	movl	%esp,%ebp
00006a23	pushl	%edi
00006a24	pushl	%esi
00006a25	subl	$0x10,%esp
00006a28	calll	0x00006a2d
00006a2d	popl	%edi
00006a2e	movl	0x08(%ebp),%esi
00006a31	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%esi)
00006a38	je	0x00006ae7
00006a3e	movl	0x00000260(%esi),%ecx
00006a44	movl	(%ecx),%eax
00006a46	movl	%ecx,(%esp)
00006a49	call	*0x000003bc(%eax)
00006a4f	cmpl	0x00000268(%esi),%eax
00006a55	jne	0x00006ae7
00006a5b	movl	0x0000027c(%esi),%ecx
00006a61	movl	(%ecx),%eax
00006a63	movl	%ecx,(%esp)
00006a66	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006a6e	call	*0x30(%eax)
00006a71	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x00000268(%esi)
00006a78	je	0x00006b88
00006a7e	movl	0x0000027c(%esi),%ecx
00006a84	movl	(%ecx),%eax
00006a86	movl	%ecx,(%esp)
00006a89	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006a91	call	*0x000003f8(%eax)
00006a97	testl	%eax,%eax
00006a99	js	0x00006b88
00006a9f	movl	0x0000027c(%esi),%edx
00006aa5	movl	(%edx),%ecx
00006aa7	movl	%eax,0x04(%esp)
00006aab	movl	%edx,(%esp)
00006aae	call	*0x0000039c(%ecx)
00006ab4	leal	0xd6840-0x6a2d(%edi),%ecx
00006aba	movl	%ecx,0x04(%esp)
00006abe	movl	%eax,(%esp)
00006ac1	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006ac9	calll	KeyValues::GetString(char const*, char const*)
00006ace	testl	%eax,%eax
00006ad0	je	0x00006b88
00006ad6	movl	%eax,0x04(%esp)
00006ada	movl	%esi,(%esp)
00006add	calll	CMDLPicker::SelectSequence(char const*)
00006ae2	jmp	0x00006b88
00006ae7	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%esi)
00006aee	je	0x00006b88
00006af4	movl	0x00000260(%esi),%ecx
00006afa	movl	(%ecx),%eax
00006afc	movl	%ecx,(%esp)
00006aff	call	*0x000003bc(%eax)
00006b05	cmpl	0x0000026c(%esi),%eax
00006b0b	jne	0x00006b88
00006b0d	movl	0x00000280(%esi),%ecx
00006b13	movl	(%ecx),%eax
00006b15	movl	%ecx,(%esp)
00006b18	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006b20	call	*0x30(%eax)
00006b23	cmpl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0000026c(%esi)
00006b2a	je	0x00006b88
00006b2c	movl	0x00000280(%esi),%ecx
00006b32	movl	(%ecx),%eax
00006b34	movl	%ecx,(%esp)
00006b37	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00006b3f	call	*0x000003f8(%eax)
00006b45	testl	%eax,%eax
00006b47	js	0x00006b88
00006b49	movl	0x00000280(%esi),%edx
00006b4f	movl	(%edx),%ecx
00006b51	movl	%eax,0x04(%esp)
00006b55	movl	%edx,(%esp)
00006b58	call	*0x0000039c(%ecx)
00006b5e	leal	0xd6888-0x6a2d(%edi),%ecx
00006b64	movl	%ecx,0x04(%esp)
00006b68	movl	%eax,(%esp)
00006b6b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006b73	calll	KeyValues::GetString(char const*, char const*)
00006b78	testl	%eax,%eax
00006b7a	je	0x00006b88
00006b7c	movl	%eax,0x04(%esp)
00006b80	movl	%esi,(%esp)
00006b83	calll	CMDLPicker::SelectActivity(char const*)
00006b88	addl	$0x10,%esp
00006b8b	popl	%esi
00006b8c	popl	%edi
00006b8d	popl	%ebp
00006b8e	ret
00006b8f	nop
CMDLPickerFrame::CMDLPickerFrame(vgui::Panel*, char const*, int):
00006b90	pushl	%ebp
00006b91	movl	%esp,%ebp
00006b93	pushl	%ebx
00006b94	pushl	%edi
00006b95	pushl	%esi
00006b96	subl	$0x1c,%esp
00006b99	calll	0x00006b9e
00006b9e	popl	%ebx
00006b9f	movl	0x0c(%ebp),%eax
00006ba2	movl	%eax,0x08(%esp)
00006ba6	leal	VTT for CMDLPickerFrame-0x6b9e+0x00000004(%ebx),%eax
00006bac	movl	%eax,0xf0(%ebp)
00006baf	movl	%eax,0x04(%esp)
00006bb3	movl	0x08(%ebp),%esi
00006bb6	movl	%esi,(%esp)
00006bb9	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
00006bbe	leal	vtable for CMDLPickerFrame-0x6b9e+0x0000000c(%ebx),%eax
00006bc4	movl	%eax,(%esi)
00006bc6	testb	$0x01,CMDLPickerFrame::ChainToMap()::chained-0x6b9e(%ebx)
00006bcd	jne	0x00006c04
00006bcf	movb	$0x01,CMDLPickerFrame::ChainToMap()::chained-0x6b9e(%ebx)
00006bd6	leal	0xd6f95-0x6b9e(%ebx),%eax
00006bdc	movl	%eax,(%esp)
00006bdf	calll	vgui::FindOrAddPanelMessageMap(char const*)
00006be4	movl	%eax,%esi
00006be6	leal	CMDLPickerFrame::GetPanelClassName()-0x6b9e(%ebx),%eax
00006bec	movl	%eax,0x1c(%esi)
00006bef	testl	%esi,%esi
00006bf1	je	0x00006c04
00006bf3	leal	0xd6f7f-0x6b9e(%ebx),%eax
00006bf9	movl	%eax,(%esp)
00006bfc	calll	vgui::FindOrAddPanelMessageMap(char const*)
00006c01	movl	%eax,0x18(%esi)
00006c04	testb	$0x01,CMDLPickerFrame::ChainToAnimationMap()::chained-0x6b9e(%ebx)
00006c0b	jne	0x00006c42
00006c0d	movb	$0x01,CMDLPickerFrame::ChainToAnimationMap()::chained-0x6b9e(%ebx)
00006c14	leal	0xd6f95-0x6b9e(%ebx),%eax
00006c1a	movl	%eax,(%esp)
00006c1d	calll	FindOrAddPanelAnimationMap(char const*)
00006c22	movl	%eax,%esi
00006c24	leal	CMDLPickerFrame::GetPanelClassName()-0x6b9e(%ebx),%eax
00006c2a	movl	%eax,0x18(%esi)
00006c2d	testl	%esi,%esi
00006c2f	je	0x00006c42
00006c31	leal	0xd6f7f-0x6b9e(%ebx),%eax
00006c37	movl	%eax,(%esp)
00006c3a	calll	FindOrAddPanelAnimationMap(char const*)
00006c3f	movl	%eax,0x14(%esi)
00006c42	testb	$0x01,CMDLPickerFrame::KB_ChainToMap()::chained-0x6b9e(%ebx)
00006c49	jne	0x00006c80
00006c4b	movb	$0x01,CMDLPickerFrame::KB_ChainToMap()::chained-0x6b9e(%ebx)
00006c52	leal	0xd6f95-0x6b9e(%ebx),%eax
00006c58	movl	%eax,(%esp)
00006c5b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00006c60	movl	%eax,%esi
00006c62	leal	CMDLPickerFrame::GetPanelClassName()-0x6b9e(%ebx),%eax
00006c68	movl	%eax,0x44(%esi)
00006c6b	testl	%esi,%esi
00006c6d	je	0x00006c80
00006c6f	leal	0xd6f7f-0x6b9e(%ebx),%eax
00006c75	movl	%eax,(%esp)
00006c78	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00006c7d	movl	%eax,0x18(%esi)
00006c80	movl	$0x00000298,(%esp)
00006c87	calll	operator new(unsigned long)
00006c8c	movl	%eax,%edi
00006c8e	movl	0x14(%ebp),%eax
00006c91	movl	%eax,0x08(%esp)
00006c95	movl	0x08(%ebp),%esi
00006c98	movl	%esi,0x04(%esp)
00006c9c	movl	%edi,(%esp)
00006c9f	calll	CMDLPicker::CMDLPicker(vgui::Panel*, int)
00006ca4	movl	%edi,0x04(%esp)
00006ca8	movl	%esi,(%esp)
00006cab	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
00006cb0	movl	0x08(%ebp),%edx
00006cb3	movl	(%edx),%eax
00006cb5	movl	0x00000354(%eax),%eax
00006cbb	leal	0xd6f10-0x6b9e(%ebx),%ecx
00006cc1	movl	%ecx,0x04(%esp)
00006cc5	movl	%edx,(%esp)
00006cc8	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006cd0	call	*%eax
00006cd2	movl	0x10(%ebp),%ecx
00006cd5	movl	0x08(%ebp),%edx
00006cd8	movl	(%edx),%eax
00006cda	movl	0x000003ac(%eax),%eax
00006ce0	movl	%ecx,0x04(%esp)
00006ce4	movl	%edx,(%esp)
00006ce7	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006cef	call	*%eax
00006cf1	addl	$0x1c,%esp
00006cf4	popl	%esi
00006cf5	popl	%edi
00006cf6	popl	%ebx
00006cf7	popl	%ebp
00006cf8	ret
00006cf9	movl	%eax,%esi
00006cfb	jmp	0x00006d07
00006cfd	movl	%eax,%esi
00006cff	movl	%edi,(%esp)
00006d02	calll	operator delete(void*)
00006d07	movl	0xf0(%ebp),%eax
00006d0a	movl	%eax,0x04(%esp)
00006d0e	movl	0x08(%ebp),%eax
00006d11	movl	%eax,(%esp)
00006d14	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00006d19	movl	%esi,(%esp)
00006d1c	calll	__Unwind_Resume
00006d21	calll	std::terminate()
00006d26	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPickerFrame::CMDLPickerFrame(vgui::Panel*, char const*, int):
00006d30	pushl	%ebp
00006d31	movl	%esp,%ebp
00006d33	pushl	%ebx
00006d34	pushl	%edi
00006d35	pushl	%esi
00006d36	subl	$0x1c,%esp
00006d39	calll	0x00006d3e
00006d3e	popl	%ebx
00006d3f	movl	0x10(%ebp),%eax
00006d42	movl	%eax,0x08(%esp)
00006d46	movl	0x0c(%ebp),%esi
00006d49	leal	0x04(%esi),%eax
00006d4c	movl	%eax,0xf0(%ebp)
00006d4f	movl	%eax,0x04(%esp)
00006d53	movl	0x08(%ebp),%edi
00006d56	movl	%edi,(%esp)
00006d59	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
00006d5e	movl	(%esi),%eax
00006d60	movl	%eax,(%edi)
00006d62	testb	$0x01,CMDLPickerFrame::ChainToMap()::chained-0x6d3e(%ebx)
00006d69	jne	0x00006da0
00006d6b	movb	$0x01,CMDLPickerFrame::ChainToMap()::chained-0x6d3e(%ebx)
00006d72	leal	0xd6f95-0x6d3e(%ebx),%eax
00006d78	movl	%eax,(%esp)
00006d7b	calll	vgui::FindOrAddPanelMessageMap(char const*)
00006d80	movl	%eax,%esi
00006d82	leal	CMDLPickerFrame::GetPanelClassName()-0x6d3e(%ebx),%eax
00006d88	movl	%eax,0x1c(%esi)
00006d8b	testl	%esi,%esi
00006d8d	je	0x00006da0
00006d8f	leal	0xd6f7f-0x6d3e(%ebx),%eax
00006d95	movl	%eax,(%esp)
00006d98	calll	vgui::FindOrAddPanelMessageMap(char const*)
00006d9d	movl	%eax,0x18(%esi)
00006da0	testb	$0x01,CMDLPickerFrame::ChainToAnimationMap()::chained-0x6d3e(%ebx)
00006da7	jne	0x00006dde
00006da9	movb	$0x01,CMDLPickerFrame::ChainToAnimationMap()::chained-0x6d3e(%ebx)
00006db0	leal	0xd6f95-0x6d3e(%ebx),%eax
00006db6	movl	%eax,(%esp)
00006db9	calll	FindOrAddPanelAnimationMap(char const*)
00006dbe	movl	%eax,%esi
00006dc0	leal	CMDLPickerFrame::GetPanelClassName()-0x6d3e(%ebx),%eax
00006dc6	movl	%eax,0x18(%esi)
00006dc9	testl	%esi,%esi
00006dcb	je	0x00006dde
00006dcd	leal	0xd6f7f-0x6d3e(%ebx),%eax
00006dd3	movl	%eax,(%esp)
00006dd6	calll	FindOrAddPanelAnimationMap(char const*)
00006ddb	movl	%eax,0x14(%esi)
00006dde	testb	$0x01,CMDLPickerFrame::KB_ChainToMap()::chained-0x6d3e(%ebx)
00006de5	jne	0x00006e1c
00006de7	movb	$0x01,CMDLPickerFrame::KB_ChainToMap()::chained-0x6d3e(%ebx)
00006dee	leal	0xd6f95-0x6d3e(%ebx),%eax
00006df4	movl	%eax,(%esp)
00006df7	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00006dfc	movl	%eax,%esi
00006dfe	leal	CMDLPickerFrame::GetPanelClassName()-0x6d3e(%ebx),%eax
00006e04	movl	%eax,0x44(%esi)
00006e07	testl	%esi,%esi
00006e09	je	0x00006e1c
00006e0b	leal	0xd6f7f-0x6d3e(%ebx),%eax
00006e11	movl	%eax,(%esp)
00006e14	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00006e19	movl	%eax,0x18(%esi)
00006e1c	movl	$0x00000298,(%esp)
00006e23	calll	operator new(unsigned long)
00006e28	movl	%eax,%edi
00006e2a	movl	0x18(%ebp),%eax
00006e2d	movl	%eax,0x08(%esp)
00006e31	movl	0x08(%ebp),%esi
00006e34	movl	%esi,0x04(%esp)
00006e38	movl	%edi,(%esp)
00006e3b	calll	CMDLPicker::CMDLPicker(vgui::Panel*, int)
00006e40	movl	%edi,0x04(%esp)
00006e44	movl	%esi,(%esp)
00006e47	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
00006e4c	movl	0x08(%ebp),%edx
00006e4f	movl	(%edx),%eax
00006e51	movl	0x00000354(%eax),%eax
00006e57	leal	0xd6f10-0x6d3e(%ebx),%ecx
00006e5d	movl	%ecx,0x04(%esp)
00006e61	movl	%edx,(%esp)
00006e64	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006e6c	call	*%eax
00006e6e	movl	0x14(%ebp),%ecx
00006e71	movl	0x08(%ebp),%edx
00006e74	movl	(%edx),%eax
00006e76	movl	0x000003ac(%eax),%eax
00006e7c	movl	%ecx,0x04(%esp)
00006e80	movl	%edx,(%esp)
00006e83	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
00006e8b	call	*%eax
00006e8d	addl	$0x1c,%esp
00006e90	popl	%esi
00006e91	popl	%edi
00006e92	popl	%ebx
00006e93	popl	%ebp
00006e94	ret
00006e95	movl	%eax,%esi
00006e97	jmp	0x00006ea3
00006e99	movl	%eax,%esi
00006e9b	movl	%edi,(%esp)
00006e9e	calll	operator delete(void*)
00006ea3	movl	0xf0(%ebp),%eax
00006ea6	movl	%eax,0x04(%esp)
00006eaa	movl	0x08(%ebp),%eax
00006ead	movl	%eax,(%esp)
00006eb0	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00006eb5	movl	%esi,(%esp)
00006eb8	calll	__Unwind_Resume
00006ebd	calll	std::terminate()
00006ec2	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPickerFrame::~CMDLPickerFrame():
00006ed0	pushl	%ebp
00006ed1	movl	%esp,%ebp
00006ed3	pushl	%edi
00006ed4	pushl	%esi
00006ed5	subl	$0x10,%esp
00006ed8	calll	0x00006edd
00006edd	popl	%eax
00006ede	movl	0x08(%ebp),%edi
00006ee1	leal	VTT for CMDLPickerFrame-0x6edd+0x00000004(%eax),%eax
00006ee7	movl	%eax,0x04(%esp)
00006eeb	movl	%edi,(%esp)
00006eee	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00006ef3	addl	$0x10,%esp
00006ef6	popl	%esi
00006ef7	popl	%edi
00006ef8	popl	%ebp
00006ef9	jmp	operator delete(void*)
00006efe	movl	%eax,%esi
00006f00	movl	%edi,(%esp)
00006f03	calll	operator delete(void*)
00006f08	movl	%esi,(%esp)
00006f0b	calll	__Unwind_Resume
CMDLPickerFrame::~CMDLPickerFrame():
00006f10	pushl	%ebp
00006f11	movl	%esp,%ebp
00006f13	subl	$0x08,%esp
00006f16	calll	0x00006f1b
00006f1b	popl	%eax
00006f1c	leal	VTT for CMDLPickerFrame-0x6f1b+0x00000004(%eax),%eax
00006f22	movl	%eax,0x04(%esp)
00006f26	movl	0x08(%ebp),%eax
00006f29	movl	%eax,(%esp)
00006f2c	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00006f31	addl	$0x08,%esp
00006f34	popl	%ebp
00006f35	ret
00006f36	nopw	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPickerFrame::~CMDLPickerFrame():
00006f40	pushl	%ebp
00006f41	movl	%esp,%ebp
00006f43	subl	$0x08,%esp
00006f46	movl	0x0c(%ebp),%eax
00006f49	addl	$0x04,%eax
00006f4c	movl	%eax,0x04(%esp)
00006f50	movl	0x08(%ebp),%eax
00006f53	movl	%eax,(%esp)
00006f56	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00006f5b	addl	$0x08,%esp
00006f5e	popl	%ebp
00006f5f	ret
CMDLPickerFrame::SelectMDL(char const*):
00006f60	pushl	%ebp
00006f61	movl	%esp,%ebp
00006f63	subl	$0x18,%esp
00006f66	movl	0x08(%ebp),%eax
00006f69	movl	0x00000240(%eax),%eax
00006f6f	movl	0x0c(%ebp),%ecx
00006f72	movl	%ecx,0x04(%esp)
00006f76	movl	%eax,(%esp)
00006f79	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
00006f81	movl	$0x00000001,0x08(%esp)
00006f89	calll	CMDLPicker::SelectMDL(char const*, bool, int)
00006f8e	addl	$0x18,%esp
00006f91	popl	%ebp
00006f92	ret
00006f93	nopl	%cs:CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
CMDLPicker::UpdatePropDataList(char const*, bool&):
00006fa0	pushl	%ebp
00006fa1	movl	%esp,%ebp
00006fa3	pushl	%ebx
00006fa4	pushl	%edi
00006fa5	pushl	%esi
00006fa6	subl	$0x0000023c,%esp
00006fac	calll	0x00006fb1
00006fb1	popl	%eax
00006fb2	movl	%eax,0xfffffdec(%ebp)
00006fb8	movl	0xe0869-0x6fb1(%eax),%eax
00006fbe	movl	%eax,0xfffffddc(%ebp)
00006fc4	movl	(%eax),%eax
00006fc6	movl	%eax,0xf0(%ebp)
00006fc9	movl	0x08(%ebp),%eax
00006fcc	movl	0x00000288(%eax),%eax
00006fd2	xorl	%esi,%esi
00006fd4	testl	%eax,%eax
00006fd6	je	0x00007260
00006fdc	movl	0x0c(%ebp),%esi
00006fdf	movl	(%eax),%ecx
00006fe1	movl	%eax,(%esp)
00006fe4	call	*0x000003c4(%ecx)
00006fea	movl	%esi,(%esp)
00006fed	movl	$0x0000007d,0x04(%esp)
00006ff5	calll	_strchr
00006ffa	movl	%eax,0xfffffde0(%ebp)
00007000	leal	0xfffffef1(%ebp),%edi
00007006	movl	%edi,(%esp)
00007009	movl	$0x000000ff,0x08(%esp)
00007011	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00007019	calll	_memset
0000701e	leal	0xfffffdf2(%ebp),%eax
00007024	movl	%eax,(%esp)
00007027	movl	$0x000000ff,0x08(%esp)
0000702f	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00007037	calll	_memset
0000703c	movl	%esi,(%esp)
0000703f	movl	$0x00000022,0x04(%esp)
00007047	xorl	%esi,%esi
00007049	calll	_strchr
0000704e	movl	%eax,%ebx
00007050	testl	%ebx,%ebx
00007052	je	0x00007260
00007058	incl	%ebx
00007059	movl	%ebx,(%esp)
0000705c	movl	$0x00000022,0x04(%esp)
00007064	calll	_strchr
00007069	movl	%eax,%esi
0000706b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0xfffffde8(%ebp)
00007075	jmp	0x00007179
0000707a	nopw	CMDLPicker::CMDLPicker(vgui::Panel*, int)(%eax,%eax)
00007080	movl	%esi,%eax
00007082	subl	%ebx,%eax
00007084	movl	%eax,0x08(%esp)
00007088	movl	%ebx,0x04(%esp)
0000708c	movl	%edi,(%esp)
0000708f	calll	_memcpy
00007094	incl	%esi
00007095	movl	%esi,(%esp)
00007098	movl	$0x00000022,0x04(%esp)
000070a0	calll	_strchr
000070a5	movl	%eax,%esi
000070a7	incl	%esi
000070a8	movl	%esi,(%esp)
000070ab	movl	$0x00000022,0x04(%esp)
000070b3	calll	_strchr
000070b8	movl	%eax,0xfffffde4(%ebp)
000070be	subl	%esi,%eax
000070c0	movl	%eax,0x08(%esp)
000070c4	movl	%esi,0x04(%esp)
000070c8	leal	0xfffffdf2(%ebp),%esi
000070ce	movl	%esi,(%esp)
000070d1	calll	_memcpy
000070d6	movl	0xfffffdec(%ebp),%eax
000070dc	leal	0xd6f55-0x6fb1(%eax),%eax
000070e2	movl	%eax,0x04(%esp)
000070e6	movl	%edi,(%esp)
000070e9	calll	_strcmp
000070ee	testl	%eax,%eax
000070f0	jne	0x0000718c
000070f6	movl	0xfffffdec(%ebp),%eax
000070fc	leal	0xd6f61-0x6fb1(%eax),%eax
00007102	movl	%eax,0x04(%esp)
00007106	movl	%esi,(%esp)
00007109	calll	_strcmp
0000710e	testl	%eax,%eax
00007110	jne	0x0000718c
00007112	movl	0x10(%ebp),%ebx
00007115	movb	(%ebx),%al
00007117	testb	$0x01,%al
00007119	jne	0x00007159
0000711b	movl	0x08(%ebp),%eax
0000711e	movl	0x00000274(%eax),%eax
00007124	movl	0xfffffdec(%ebp),%ecx
0000712a	leal	0xd6f40-0x6fb1(%ecx),%ecx
00007130	movl	%ecx,0x04(%esp)
00007134	movl	%eax,(%esp)
00007137	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
0000713f	calll	vgui::Panel::FindChildByName(char const*, bool)
00007144	movl	(%eax),%ecx
00007146	movl	%eax,(%esp)
00007149	movl	$0x00000001,0x04(%esp)
00007151	call	*0x00000088(%ecx)
00007157	movb	(%ebx),%al
00007159	andb	$0x01,%al
0000715b	movb	%al,(%ebx)
0000715d	jmp	0x0000718c
0000715f	incl	%esi
00007160	movl	%esi,0xfffffde8(%ebp)
00007166	incl	%ebx
00007167	movl	%ebx,(%esp)
0000716a	movl	$0x00000022,0x04(%esp)
00007172	calll	_strchr
00007177	movl	%eax,%esi
00007179	testl	%esi,%esi
0000717b	jne	0x00007080
00007181	movl	0xfffffde8(%ebp),%esi
00007187	jmp	0x00007260
0000718c	movl	$0x00000020,(%esp)
00007193	calll	KeyValues::operator new(unsigned long)
00007198	movl	%esi,%ebx
0000719a	movl	%eax,%esi
0000719c	movl	%ebx,0x14(%esp)
000071a0	movl	0xfffffdec(%ebp),%ecx
000071a6	leal	0xd6904-0x6fb1(%ecx),%eax
000071ac	movl	%eax,0x10(%esp)
000071b0	movl	%edi,0x0c(%esp)
000071b4	leal	0xd6900-0x6fb1(%ecx),%eax
000071ba	movl	%eax,0x08(%esp)
000071be	leal	0xd6e8e-0x6fb1(%ecx),%eax
000071c4	movl	%eax,0x04(%esp)
000071c8	movl	%esi,(%esp)
000071cb	calll	KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*)
000071d0	movl	0x08(%ebp),%eax
000071d3	movl	0x00000288(%eax),%ecx
000071d9	movl	(%ecx),%eax
000071db	movl	%esi,0x04(%esp)
000071df	movl	%ecx,(%esp)
000071e2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x10(%esp)
000071ea	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x0c(%esp)
000071f2	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x08(%esp)
000071fa	call	*0x00000390(%eax)
00007200	movl	%edi,(%esp)
00007203	movl	$0x000000ff,0x08(%esp)
0000720b	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
00007213	calll	_memset
00007218	movl	%ebx,(%esp)
0000721b	movl	$0x000000ff,0x08(%esp)
00007223	movl	CMDLPicker::CMDLPicker(vgui::Panel*, int),0x04(%esp)
0000722b	calll	_memset
00007230	movl	0xfffffde4(%ebp),%eax
00007236	incl	%eax
00007237	movl	%eax,(%esp)
0000723a	movl	$0x00000022,0x04(%esp)
00007242	calll	_strchr
00007247	movl	%eax,%ebx
00007249	testl	%ebx,%ebx
0000724b	movl	0xfffffde8(%ebp),%esi
00007251	je	0x0000725f
00007253	cmpl	0xfffffde0(%ebp),%ebx
00007259	jbe	0x0000715f
0000725f	incl	%esi
00007260	movl	0xfffffddc(%ebp),%eax
00007266	movl	(%eax),%eax
00007268	cmpl	0xf0(%ebp),%eax
0000726b	jne	0x0000728c
0000726d	movl	%esi,%eax
0000726f	addl	$0x0000023c,%esp
00007275	popl	%esi
00007276	popl	%edi
00007277	popl	%ebx
00007278	popl	%ebp
00007279	ret
0000727a	movl	%eax,%edi
0000727c	movl	%esi,(%esp)
0000727f	calll	KeyValues::operator delete(void*)
00007284	movl	%edi,(%esp)
00007287	calll	__Unwind_Resume
0000728c	calll	___stack_chk_fail
00007291	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(mdlsequencepicker.o):
(__TEXT,__text) section
CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x5c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	leal	0xaccc4-0xe(%edi),%eax
00000015	movl	%eax,0x0c(%esp)
00000019	movl	0x0c(%ebp),%eax
0000001c	movl	%eax,0x08(%esp)
00000020	leal	VTT for CMDLSequencePicker-0xe+0x00000004(%edi),%eax
00000026	movl	%eax,0xc4(%ebp)
00000029	movl	%eax,0x04(%esp)
0000002d	movl	0x08(%ebp),%ebx
00000030	movl	%ebx,(%esp)
00000033	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000038	leal	vtable for CMDLSequencePicker-0xe+0x0000000c(%edi),%eax
0000003e	movl	%eax,(%ebx)
00000040	testb	$0x01,CMDLSequencePicker::ChainToMap()::chained-0xe(%edi)
00000047	jne	0x0000007e
00000049	movb	$0x01,CMDLSequencePicker::ChainToMap()::chained-0xe(%edi)
00000050	leal	0xacf8b-0xe(%edi),%eax
00000056	movl	%eax,(%esp)
00000059	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005e	movl	%eax,%esi
00000060	leal	CMDLSequencePicker::GetPanelClassName()-0xe(%edi),%eax
00000066	movl	%eax,0x1c(%esi)
00000069	testl	%esi,%esi
0000006b	je	0x0000007e
0000006d	leal	0xacfe4-0xe(%edi),%eax
00000073	movl	%eax,(%esp)
00000076	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000007b	movl	%eax,0x18(%esi)
0000007e	testb	$0x01,CMDLSequencePicker::ChainToAnimationMap()::chained-0xe(%edi)
00000085	jne	0x000000bc
00000087	movb	$0x01,CMDLSequencePicker::ChainToAnimationMap()::chained-0xe(%edi)
0000008e	leal	0xacf8b-0xe(%edi),%eax
00000094	movl	%eax,(%esp)
00000097	calll	FindOrAddPanelAnimationMap(char const*)
0000009c	movl	%eax,%esi
0000009e	leal	CMDLSequencePicker::GetPanelClassName()-0xe(%edi),%eax
000000a4	movl	%eax,0x18(%esi)
000000a7	testl	%esi,%esi
000000a9	je	0x000000bc
000000ab	leal	0xacfe4-0xe(%edi),%eax
000000b1	movl	%eax,(%esp)
000000b4	calll	FindOrAddPanelAnimationMap(char const*)
000000b9	movl	%eax,0x14(%esi)
000000bc	testb	$0x01,CMDLSequencePicker::KB_ChainToMap()::chained-0xe(%edi)
000000c3	jne	0x000000fa
000000c5	movb	$0x01,CMDLSequencePicker::KB_ChainToMap()::chained-0xe(%edi)
000000cc	leal	0xacf8b-0xe(%edi),%eax
000000d2	movl	%eax,(%esp)
000000d5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000da	movl	%eax,%esi
000000dc	leal	CMDLSequencePicker::GetPanelClassName()-0xe(%edi),%eax
000000e2	movl	%eax,0x44(%esi)
000000e5	testl	%esi,%esi
000000e7	je	0x000000fa
000000e9	leal	0xacfe4-0xe(%edi),%eax
000000ef	movl	%eax,(%esp)
000000f2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f7	movl	%eax,0x18(%esi)
000000fa	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0xe(%edi)
00000101	jne	0x00000159
00000103	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0xe(%edi)
0000010a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xd4(%ebp)
00000111	movl	$0x000003b1,0xd0(%ebp)
00000118	movsd	0xd0(%ebp),%xmm0
0000011d	movsd	%xmm0,0x04(%esp)
00000123	leal	0xacfcf-0xe(%edi),%eax
00000129	movl	%eax,(%esp)
0000012c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00000134	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000013c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000144	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000014c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000154	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000159	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0xe(%edi)
00000160	jne	0x000001bc
00000162	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0xe(%edi)
00000169	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xdc(%ebp)
00000170	movl	$0x000003b5,0xd8(%ebp)
00000177	leal	0xace84-0xe(%edi),%eax
0000017d	movl	%eax,0x1c(%esp)
00000181	leal	0xacf77-0xe(%edi),%eax
00000187	movl	%eax,0x14(%esp)
0000018b	movsd	0xd8(%ebp),%xmm0
00000190	movsd	%xmm0,0x04(%esp)
00000196	leal	0xacfc3-0xe(%edi),%eax
0000019c	movl	%eax,(%esp)
0000019f	movl	$0x00000001,0x18(%esp)
000001a7	movl	$0x00000004,0x10(%esp)
000001af	movl	$0x00000002,0x0c(%esp)
000001b7	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000001bc	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0xe(%edi)
000001c3	jne	0x0000021b
000001c5	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0xe(%edi)
000001cc	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xe4(%ebp)
000001d3	movl	$0x000003b9,0xe0(%ebp)
000001da	movsd	0xe0(%ebp),%xmm0
000001df	movsd	%xmm0,0x04(%esp)
000001e5	leal	0xacfb6-0xe(%edi),%eax
000001eb	movl	%eax,(%esp)
000001ee	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
000001f6	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
000001fe	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000206	movl	$0x00000006,0x10(%esp)
0000020e	movl	$0x00000001,0x0c(%esp)
00000216	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000021b	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0xe(%edi)
00000222	jne	0x0000027a
00000224	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0xe(%edi)
0000022b	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xec(%ebp)
00000232	movl	$0x000003bd,0xe8(%ebp)
00000239	movsd	0xe8(%ebp),%xmm0
0000023e	movsd	%xmm0,0x04(%esp)
00000244	leal	0xacfaa-0xe(%edi),%eax
0000024a	movl	%eax,(%esp)
0000024d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00000255	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000025d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000265	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000026d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000275	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000027a	leal	0x000001bc(%ebx),%eax
00000280	movl	%eax,0xcc(%ebp)
00000283	movl	%eax,(%esp)
00000286	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000028e	calll	vgui::ImageList::ImageList(bool)
00000293	movl	0xb44d7-0xe(%edi),%eax
00000299	movl	%edi,0xc8(%ebp)
0000029c	movl	(%eax),%edi
0000029e	movl	(%edi),%eax
000002a0	movl	0x48(%eax),%esi
000002a3	movl	(%ebx),%eax
000002a5	movl	(%eax),%eax
000002a7	movl	%ebx,(%esp)
000002aa	call	*%eax
000002ac	movl	%eax,0x04(%esp)
000002b0	movl	%edi,(%esp)
000002b3	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000002bb	call	*%esi
000002bd	movl	0x08(%ebp),%eax
000002c0	movw	$0xffff,0x000001f0(%eax)
000002c9	movl	$0x000001c4,(%esp)
000002d0	calll	operator new(unsigned long)
000002d5	movl	%eax,%edi
000002d7	movl	0xc8(%ebp),%eax
000002da	leal	0xaccd6-0xe(%eax),%eax
000002e0	movl	%eax,0x08(%esp)
000002e4	movl	0x08(%ebp),%ebx
000002e7	movl	%ebx,0x04(%esp)
000002eb	movl	%edi,(%esp)
000002ee	movl	$0x00000001,0x10(%esp)
000002f6	movl	$0x00000001,0x0c(%esp)
000002fe	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
00000303	movl	%edi,0x000001d4(%ebx)
00000309	movl	%edi,(%esp)
0000030c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000314	calll	vgui::Panel::GetChild(int)
00000319	movl	%eax,%edi
0000031b	movl	0x08(%ebp),%eax
0000031e	movl	0x000001d4(%eax),%eax
00000324	movl	%eax,(%esp)
00000327	movl	$0x00000001,0x04(%esp)
0000032f	calll	vgui::Panel::GetChild(int)
00000334	movl	%eax,0xc0(%ebp)
00000337	movl	$0x000006bc,(%esp)
0000033e	calll	operator new(unsigned long)
00000343	movl	%eax,%ebx
00000345	movl	0xc8(%ebp),%eax
00000348	leal	0xacce2-0xe(%eax),%eax
0000034e	movl	%eax,0x08(%esp)
00000352	movl	%edi,0x04(%esp)
00000356	movl	%ebx,(%esp)
00000359	movl	$0x00000001,0x10(%esp)
00000361	movl	$0x00000010,0x0c(%esp)
00000369	calll	vgui::ComboBox::ComboBox(vgui::Panel*, char const*, int, bool)
0000036e	movl	0x08(%ebp),%ecx
00000371	movl	%ebx,0x000001b4(%ecx)
00000377	movl	(%ebx),%eax
00000379	movl	0x000000b4(%eax),%eax
0000037f	movl	%ecx,0x04(%esp)
00000383	movl	%ebx,(%esp)
00000386	call	*%eax
00000388	movl	$0x00000234,(%esp)
0000038f	calll	operator new(unsigned long)
00000394	movl	%eax,%ebx
00000396	movl	0xc8(%ebp),%esi
00000399	leal	0xacd07-0xe(%esi),%eax
0000039f	movl	%eax,0x14(%esp)
000003a3	leal	0xacd00-0xe(%esi),%eax
000003a9	movl	%eax,0x10(%esp)
000003ad	leal	0xaccf6-0xe(%esi),%eax
000003b3	movl	%eax,0x0c(%esp)
000003b7	leal	0xacced-0xe(%esi),%eax
000003bd	movl	%eax,0x08(%esp)
000003c1	movl	%edi,0x04(%esp)
000003c5	movl	%ebx,(%esp)
000003c8	calll	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)
000003cd	movl	0x08(%ebp),%eax
000003d0	movl	%ebx,0x000001b8(%eax)
000003d6	movl	0xb44db-0xe(%esi),%edi
000003dc	movl	(%edi),%ecx
000003de	movl	(%ecx),%eax
000003e0	movl	0x1c(%eax),%eax
000003e3	leal	0xacd0b-0xe(%esi),%edx
000003e9	movl	%edx,0x04(%esp)
000003ed	movl	%ecx,(%esp)
000003f0	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000003f8	call	*%eax
000003fa	movl	%eax,0x04(%esp)
000003fe	movl	0xcc(%ebp),%eax
00000401	movl	%eax,(%esp)
00000404	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000409	movl	(%edi),%ecx
0000040b	movl	(%ecx),%eax
0000040d	movl	0x1c(%eax),%eax
00000410	leal	0xacd20-0xe(%esi),%edx
00000416	movl	%edx,0x04(%esp)
0000041a	movl	%ecx,(%esp)
0000041d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000425	call	*%eax
00000427	movl	%eax,0x04(%esp)
0000042b	movl	0xcc(%ebp),%eax
0000042e	movl	%eax,(%esp)
00000431	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000436	movl	(%edi),%ecx
00000438	movl	(%ecx),%eax
0000043a	movl	0x1c(%eax),%eax
0000043d	leal	0xacd3e-0xe(%esi),%edx
00000443	movl	%edx,0x04(%esp)
00000447	movl	%ecx,(%esp)
0000044a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000452	call	*%eax
00000454	movl	%eax,0x04(%esp)
00000458	movl	0xcc(%ebp),%eax
0000045b	movl	%eax,(%esp)
0000045e	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000463	movl	0x08(%ebp),%eax
00000466	movl	0x000001b8(%eax),%ecx
0000046c	movl	(%ecx),%eax
0000046e	movl	0x00000374(%eax),%eax
00000474	movl	0xcc(%ebp),%edx
00000477	movl	%edx,0x04(%esp)
0000047b	movl	%ecx,(%esp)
0000047e	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000486	call	*%eax
00000488	movl	0x08(%ebp),%edx
0000048b	movl	0x000001b8(%edx),%eax
00000491	movl	(%eax),%ecx
00000493	movl	0x000000b4(%ecx),%ecx
00000499	movl	%edx,0x04(%esp)
0000049d	movl	%eax,(%esp)
000004a0	call	*%ecx
000004a2	movl	$0x000001c4,(%esp)
000004a9	calll	operator new(unsigned long)
000004ae	movl	%eax,%edi
000004b0	leal	0xacd51-0xe(%esi),%eax
000004b6	movl	%eax,0x08(%esp)
000004ba	movl	0xc0(%ebp),%eax
000004bd	movl	%eax,0x04(%esp)
000004c1	movl	%edi,(%esp)
000004c4	movl	$0x00000001,0x10(%esp)
000004cc	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000004d4	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000004d9	movl	0x08(%ebp),%eax
000004dc	movl	%edi,0x000001d8(%eax)
000004e2	movl	%edi,(%esp)
000004e5	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000004ed	calll	vgui::Panel::GetChild(int)
000004f2	movl	%eax,%edi
000004f4	movl	0x08(%ebp),%eax
000004f7	movl	0x000001d8(%eax),%eax
000004fd	movl	%eax,(%esp)
00000500	movl	$0x00000001,0x04(%esp)
00000508	calll	vgui::Panel::GetChild(int)
0000050d	movl	%eax,0xc0(%ebp)
00000510	movl	$0x00000c90,(%esp)
00000517	calll	operator new(unsigned long)
0000051c	movl	%eax,%ebx
0000051e	leal	0xacd62-0xe(%esi),%eax
00000524	movl	%eax,0x08(%esp)
00000528	movl	%edi,0x04(%esp)
0000052c	movl	%ebx,(%esp)
0000052f	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00000534	movl	0x08(%ebp),%ecx
00000537	movl	%ebx,0x000001b0(%ecx)
0000053d	movl	(%ecx),%eax
0000053f	movl	0x000002b8(%eax),%eax
00000545	movl	%ebx,0x04(%esp)
00000549	movl	%ecx,(%esp)
0000054c	call	*%eax
0000054e	movl	$0x00000230,(%esp)
00000555	calll	operator new(unsigned long)
0000055a	movl	%eax,%edi
0000055c	leal	0xacd6d-0xe(%esi),%eax
00000562	movl	%eax,0x08(%esp)
00000566	movl	0xc0(%ebp),%eax
00000569	movl	%eax,0x04(%esp)
0000056d	movl	%edi,(%esp)
00000570	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000578	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
0000057d	movl	0x08(%ebp),%ecx
00000580	movl	%edi,0x000001dc(%ecx)
00000586	movl	(%edi),%eax
00000588	movl	0x000000b4(%eax),%eax
0000058e	movl	%ecx,0x04(%esp)
00000592	movl	%edi,(%esp)
00000595	call	*%eax
00000597	movl	$0x000001b8,(%esp)
0000059e	calll	operator new(unsigned long)
000005a3	movl	%eax,%edi
000005a5	movl	0x08(%ebp),%ebx
000005a8	movl	0x000001dc(%ebx),%eax
000005ae	leal	0xacd78-0xe(%esi),%ecx
000005b4	movl	%ecx,0x08(%esp)
000005b8	movl	%eax,0x04(%esp)
000005bc	movl	%edi,(%esp)
000005bf	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000005c4	movl	%edi,0x000001e0(%ebx)
000005ca	movl	0x000001dc(%ebx),%ecx
000005d0	movl	(%ecx),%eax
000005d2	movl	0x000003b0(%eax),%eax
000005d8	leal	0xacd86-0xe(%esi),%edx
000005de	movl	%edx,0x08(%esp)
000005e2	movl	%edi,0x04(%esp)
000005e6	movl	%ecx,(%esp)
000005e9	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000005f1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000005f9	call	*%eax
000005fb	movl	$0x00000280,(%esp)
00000602	calll	operator new(unsigned long)
00000607	movl	%eax,%edi
00000609	movl	0x08(%ebp),%ebx
0000060c	movl	0x000001e0(%ebx),%eax
00000612	leal	0xacd90-0xe(%esi),%ecx
00000618	movl	%ecx,0x08(%esp)
0000061c	movl	%eax,0x04(%esp)
00000620	movl	%edi,(%esp)
00000623	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000628	movl	%edi,0x000001e8(%ebx)
0000062e	movl	(%edi),%eax
00000630	movl	0x0000034c(%eax),%eax
00000636	leal	0xacd9e-0xe(%esi),%ecx
0000063c	movl	%ecx,0x0c(%esp)
00000640	movl	%ecx,0x08(%esp)
00000644	movl	%edi,(%esp)
00000647	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
0000064f	movl	$0x00000034,0x10(%esp)
00000657	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000065f	call	*%eax
00000661	movl	0x08(%ebp),%edx
00000664	movl	0x000001e8(%edx),%eax
0000066a	movl	(%eax),%ecx
0000066c	movl	0x000000b4(%ecx),%ecx
00000672	movl	%edx,0x04(%esp)
00000676	movl	%eax,(%esp)
00000679	call	*%ecx
0000067b	movl	0x08(%ebp),%eax
0000067e	movl	0x000001e8(%eax),%ecx
00000684	movl	(%ecx),%eax
00000686	movl	0x00000410(%eax),%eax
0000068c	movl	%ecx,(%esp)
0000068f	movl	$0x00000001,0x04(%esp)
00000697	call	*%eax
00000699	movl	0x08(%ebp),%eax
0000069c	movl	0x000001e8(%eax),%eax
000006a2	movl	(%eax),%ecx
000006a4	movl	0x00000420(%ecx),%ecx
000006aa	leal	0xacda7-0xe(%esi),%edx
000006b0	movl	%edx,0xc0(%ebp)
000006b3	movl	%edx,0x04(%esp)
000006b7	movl	%eax,(%esp)
000006ba	call	*%ecx
000006bc	movl	0x08(%ebp),%eax
000006bf	movl	0x000001e8(%eax),%ecx
000006c5	movl	(%ecx),%eax
000006c7	movl	0x00000240(%eax),%eax
000006cd	movl	%ecx,(%esp)
000006d0	movl	$0x00000001,0x04(%esp)
000006d8	call	*%eax
000006da	movl	0x08(%ebp),%eax
000006dd	movl	0x000001e8(%eax),%eax
000006e3	movl	%eax,(%esp)
000006e6	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
000006ee	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000006f6	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000006fe	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000706	movl	$0x00000003,0x08(%esp)
0000070e	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000716	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
0000071b	movl	$0x000001b8,(%esp)
00000722	calll	operator new(unsigned long)
00000727	movl	%eax,%edi
00000729	movl	0x08(%ebp),%ebx
0000072c	movl	0x000001dc(%ebx),%eax
00000732	leal	0xacdc8-0xe(%esi),%ecx
00000738	movl	%ecx,0x08(%esp)
0000073c	movl	%eax,0x04(%esp)
00000740	movl	%edi,(%esp)
00000743	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000748	movl	%edi,0x000001e4(%ebx)
0000074e	movl	0x000001dc(%ebx),%ecx
00000754	movl	(%ecx),%eax
00000756	movl	0x000003b0(%eax),%eax
0000075c	leal	0xacdd7-0xe(%esi),%edx
00000762	movl	%edx,0x08(%esp)
00000766	movl	%edi,0x04(%esp)
0000076a	movl	%ecx,(%esp)
0000076d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00000775	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
0000077d	call	*%eax
0000077f	movl	$0x00000280,(%esp)
00000786	calll	operator new(unsigned long)
0000078b	movl	%eax,%edi
0000078d	movl	0x08(%ebp),%ebx
00000790	movl	0x000001e4(%ebx),%eax
00000796	leal	0xacde2-0xe(%esi),%ecx
0000079c	movl	%ecx,0x08(%esp)
000007a0	movl	%eax,0x04(%esp)
000007a4	movl	%edi,(%esp)
000007a7	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
000007ac	movl	%edi,0x000001ec(%ebx)
000007b2	movl	(%edi),%eax
000007b4	movl	0x0000034c(%eax),%eax
000007ba	leal	0xacdf1-0xe(%esi),%ecx
000007c0	movl	%ecx,0x0c(%esp)
000007c4	movl	%ecx,0x08(%esp)
000007c8	movl	%edi,(%esp)
000007cb	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000007d3	movl	$0x00000034,0x10(%esp)
000007db	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000007e3	call	*%eax
000007e5	movl	0x08(%ebp),%edx
000007e8	movl	0x000001ec(%edx),%eax
000007ee	movl	(%eax),%ecx
000007f0	movl	0x000000b4(%ecx),%ecx
000007f6	movl	%edx,0x04(%esp)
000007fa	movl	%eax,(%esp)
000007fd	call	*%ecx
000007ff	movl	0x08(%ebp),%eax
00000802	movl	0x000001ec(%eax),%ecx
00000808	movl	(%ecx),%eax
0000080a	movl	0x00000410(%eax),%eax
00000810	movl	%ecx,(%esp)
00000813	movl	$0x00000001,0x04(%esp)
0000081b	call	*%eax
0000081d	movl	0x08(%ebp),%eax
00000820	movl	0x000001ec(%eax),%eax
00000826	movl	(%eax),%ecx
00000828	movl	0x00000420(%ecx),%ecx
0000082e	movl	0xc0(%ebp),%edx
00000831	movl	%edx,0x04(%esp)
00000835	movl	%eax,(%esp)
00000838	call	*%ecx
0000083a	movl	0x08(%ebp),%eax
0000083d	movl	0x000001ec(%eax),%ecx
00000843	movl	(%ecx),%eax
00000845	movl	0x00000240(%eax),%eax
0000084b	movl	%ecx,(%esp)
0000084e	movl	$0x00000001,0x04(%esp)
00000856	call	*%eax
00000858	movl	0x08(%ebp),%eax
0000085b	movl	0x000001ec(%eax),%eax
00000861	movl	%eax,(%esp)
00000864	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000086c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000874	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000087c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000884	movl	$0x00000003,0x08(%esp)
0000088c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000894	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000899	movl	0x08(%ebp),%edx
0000089c	movl	(%edx),%eax
0000089e	movl	0x00000354(%eax),%eax
000008a4	leal	0xacdfa-0xe(%esi),%ecx
000008aa	movl	%ecx,0x04(%esp)
000008ae	movl	%edx,(%esp)
000008b1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000008b9	call	*%eax
000008bb	addl	$0x5c,%esp
000008be	popl	%esi
000008bf	popl	%edi
000008c0	popl	%ebx
000008c1	popl	%ebp
000008c2	ret
000008c3	movl	%eax,%esi
000008c5	jmp	0x00000907
000008c7	movl	%eax,%esi
000008c9	movl	0x08(%ebp),%ebx
000008cc	jmp	0x000008fc
000008ce	jmp	0x000008f2
000008d0	movl	%eax,%esi
000008d2	movl	%ebx,(%esp)
000008d5	calll	operator delete(void*)
000008da	movl	0x08(%ebp),%ebx
000008dd	jmp	0x000008fc
000008df	jmp	0x000008d0
000008e1	movl	%eax,%esi
000008e3	movl	%edi,(%esp)
000008e6	jmp	0x000008d5
000008e8	jmp	0x000008d0
000008ea	jmp	0x000008e1
000008ec	jmp	0x000008f2
000008ee	jmp	0x000008f2
000008f0	jmp	0x000008f2
000008f2	movl	%eax,%esi
000008f4	movl	%edi,(%esp)
000008f7	calll	operator delete(void*)
000008fc	movl	0xcc(%ebp),%eax
000008ff	movl	%eax,(%esp)
00000902	calll	vgui::ImageList::~ImageList()
00000907	movl	0xc4(%ebp),%eax
0000090a	movl	%eax,0x04(%esp)
0000090e	movl	%ebx,(%esp)
00000911	calll	vgui::EditablePanel::~EditablePanel()
00000916	movl	%esi,(%esp)
00000919	calll	__Unwind_Resume
0000091e	calll	std::terminate()
00000923	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*):
00000930	pushl	%ebp
00000931	movl	%esp,%ebp
00000933	pushl	%ebx
00000934	pushl	%edi
00000935	pushl	%esi
00000936	subl	$0x5c,%esp
00000939	calll	0x0000093e
0000093e	popl	%edi
0000093f	leal	0xaccc4-0x93e(%edi),%eax
00000945	movl	%eax,0x0c(%esp)
00000949	movl	0x10(%ebp),%eax
0000094c	movl	%eax,0x08(%esp)
00000950	movl	0x0c(%ebp),%esi
00000953	leal	0x04(%esi),%eax
00000956	movl	%eax,0xc4(%ebp)
00000959	movl	%eax,0x04(%esp)
0000095d	movl	0x08(%ebp),%ebx
00000960	movl	%ebx,(%esp)
00000963	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000968	movl	(%esi),%eax
0000096a	movl	%eax,(%ebx)
0000096c	testb	$0x01,CMDLSequencePicker::ChainToMap()::chained-0x93e(%edi)
00000973	jne	0x000009aa
00000975	movb	$0x01,CMDLSequencePicker::ChainToMap()::chained-0x93e(%edi)
0000097c	leal	0xacf8b-0x93e(%edi),%eax
00000982	movl	%eax,(%esp)
00000985	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000098a	movl	%eax,%esi
0000098c	leal	CMDLSequencePicker::GetPanelClassName()-0x93e(%edi),%eax
00000992	movl	%eax,0x1c(%esi)
00000995	testl	%esi,%esi
00000997	je	0x000009aa
00000999	leal	0xacfe4-0x93e(%edi),%eax
0000099f	movl	%eax,(%esp)
000009a2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000009a7	movl	%eax,0x18(%esi)
000009aa	testb	$0x01,CMDLSequencePicker::ChainToAnimationMap()::chained-0x93e(%edi)
000009b1	jne	0x000009e8
000009b3	movb	$0x01,CMDLSequencePicker::ChainToAnimationMap()::chained-0x93e(%edi)
000009ba	leal	0xacf8b-0x93e(%edi),%eax
000009c0	movl	%eax,(%esp)
000009c3	calll	FindOrAddPanelAnimationMap(char const*)
000009c8	movl	%eax,%esi
000009ca	leal	CMDLSequencePicker::GetPanelClassName()-0x93e(%edi),%eax
000009d0	movl	%eax,0x18(%esi)
000009d3	testl	%esi,%esi
000009d5	je	0x000009e8
000009d7	leal	0xacfe4-0x93e(%edi),%eax
000009dd	movl	%eax,(%esp)
000009e0	calll	FindOrAddPanelAnimationMap(char const*)
000009e5	movl	%eax,0x14(%esi)
000009e8	testb	$0x01,CMDLSequencePicker::KB_ChainToMap()::chained-0x93e(%edi)
000009ef	jne	0x00000a26
000009f1	movb	$0x01,CMDLSequencePicker::KB_ChainToMap()::chained-0x93e(%edi)
000009f8	leal	0xacf8b-0x93e(%edi),%eax
000009fe	movl	%eax,(%esp)
00000a01	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000a06	movl	%eax,%esi
00000a08	leal	CMDLSequencePicker::GetPanelClassName()-0x93e(%edi),%eax
00000a0e	movl	%eax,0x44(%esi)
00000a11	testl	%esi,%esi
00000a13	je	0x00000a26
00000a15	leal	0xacfe4-0x93e(%edi),%eax
00000a1b	movl	%eax,(%esp)
00000a1e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000a23	movl	%eax,0x18(%esi)
00000a26	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x93e(%edi)
00000a2d	jne	0x00000a85
00000a2f	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x93e(%edi)
00000a36	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xd4(%ebp)
00000a3d	movl	$0x000003b1,0xd0(%ebp)
00000a44	movsd	0xd0(%ebp),%xmm0
00000a49	movsd	%xmm0,0x04(%esp)
00000a4f	leal	0xacfcf-0x93e(%edi),%eax
00000a55	movl	%eax,(%esp)
00000a58	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00000a60	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
00000a68	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000a70	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00000a78	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000a80	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000a85	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x93e(%edi)
00000a8c	jne	0x00000ae8
00000a8e	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x93e(%edi)
00000a95	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xdc(%ebp)
00000a9c	movl	$0x000003b5,0xd8(%ebp)
00000aa3	leal	0xace84-0x93e(%edi),%eax
00000aa9	movl	%eax,0x1c(%esp)
00000aad	leal	0xacf77-0x93e(%edi),%eax
00000ab3	movl	%eax,0x14(%esp)
00000ab7	movsd	0xd8(%ebp),%xmm0
00000abc	movsd	%xmm0,0x04(%esp)
00000ac2	leal	0xacfc3-0x93e(%edi),%eax
00000ac8	movl	%eax,(%esp)
00000acb	movl	$0x00000001,0x18(%esp)
00000ad3	movl	$0x00000004,0x10(%esp)
00000adb	movl	$0x00000002,0x0c(%esp)
00000ae3	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000ae8	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x93e(%edi)
00000aef	jne	0x00000b47
00000af1	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x93e(%edi)
00000af8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xe4(%ebp)
00000aff	movl	$0x000003b9,0xe0(%ebp)
00000b06	movsd	0xe0(%ebp),%xmm0
00000b0b	movsd	%xmm0,0x04(%esp)
00000b11	leal	0xacfb6-0x93e(%edi),%eax
00000b17	movl	%eax,(%esp)
00000b1a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00000b22	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
00000b2a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000b32	movl	$0x00000006,0x10(%esp)
00000b3a	movl	$0x00000001,0x0c(%esp)
00000b42	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000b47	testb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x93e(%edi)
00000b4e	jne	0x00000ba6
00000b50	movb	$0x01,CMDLSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x93e(%edi)
00000b57	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xec(%ebp)
00000b5e	movl	$0x000003bd,0xe8(%ebp)
00000b65	movsd	0xe8(%ebp),%xmm0
00000b6a	movsd	%xmm0,0x04(%esp)
00000b70	leal	0xacfaa-0x93e(%edi),%eax
00000b76	movl	%eax,(%esp)
00000b79	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00000b81	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
00000b89	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000b91	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00000b99	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000ba1	calll	CMDLSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000ba6	leal	0x000001bc(%ebx),%eax
00000bac	movl	%eax,0xcc(%ebp)
00000baf	movl	%eax,(%esp)
00000bb2	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000bba	calll	vgui::ImageList::ImageList(bool)
00000bbf	movl	0xb44d7-0x93e(%edi),%eax
00000bc5	movl	%edi,0xc8(%ebp)
00000bc8	movl	(%eax),%edi
00000bca	movl	(%edi),%eax
00000bcc	movl	0x48(%eax),%esi
00000bcf	movl	(%ebx),%eax
00000bd1	movl	(%eax),%eax
00000bd3	movl	%ebx,(%esp)
00000bd6	call	*%eax
00000bd8	movl	%eax,0x04(%esp)
00000bdc	movl	%edi,(%esp)
00000bdf	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000be7	call	*%esi
00000be9	movl	0x08(%ebp),%eax
00000bec	movw	$0xffff,0x000001f0(%eax)
00000bf5	movl	$0x000001c4,(%esp)
00000bfc	calll	operator new(unsigned long)
00000c01	movl	%eax,%edi
00000c03	movl	0xc8(%ebp),%eax
00000c06	leal	0xaccd6-0x93e(%eax),%eax
00000c0c	movl	%eax,0x08(%esp)
00000c10	movl	0x08(%ebp),%ebx
00000c13	movl	%ebx,0x04(%esp)
00000c17	movl	%edi,(%esp)
00000c1a	movl	$0x00000001,0x10(%esp)
00000c22	movl	$0x00000001,0x0c(%esp)
00000c2a	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
00000c2f	movl	%edi,0x000001d4(%ebx)
00000c35	movl	%edi,(%esp)
00000c38	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000c40	calll	vgui::Panel::GetChild(int)
00000c45	movl	%eax,%edi
00000c47	movl	0x08(%ebp),%eax
00000c4a	movl	0x000001d4(%eax),%eax
00000c50	movl	%eax,(%esp)
00000c53	movl	$0x00000001,0x04(%esp)
00000c5b	calll	vgui::Panel::GetChild(int)
00000c60	movl	%eax,0xc0(%ebp)
00000c63	movl	$0x000006bc,(%esp)
00000c6a	calll	operator new(unsigned long)
00000c6f	movl	%eax,%ebx
00000c71	movl	0xc8(%ebp),%eax
00000c74	leal	0xacce2-0x93e(%eax),%eax
00000c7a	movl	%eax,0x08(%esp)
00000c7e	movl	%edi,0x04(%esp)
00000c82	movl	%ebx,(%esp)
00000c85	movl	$0x00000001,0x10(%esp)
00000c8d	movl	$0x00000010,0x0c(%esp)
00000c95	calll	vgui::ComboBox::ComboBox(vgui::Panel*, char const*, int, bool)
00000c9a	movl	0x08(%ebp),%ecx
00000c9d	movl	%ebx,0x000001b4(%ecx)
00000ca3	movl	(%ebx),%eax
00000ca5	movl	0x000000b4(%eax),%eax
00000cab	movl	%ecx,0x04(%esp)
00000caf	movl	%ebx,(%esp)
00000cb2	call	*%eax
00000cb4	movl	$0x00000234,(%esp)
00000cbb	calll	operator new(unsigned long)
00000cc0	movl	%eax,%ebx
00000cc2	movl	0xc8(%ebp),%esi
00000cc5	leal	0xacd07-0x93e(%esi),%eax
00000ccb	movl	%eax,0x14(%esp)
00000ccf	leal	0xacd00-0x93e(%esi),%eax
00000cd5	movl	%eax,0x10(%esp)
00000cd9	leal	0xaccf6-0x93e(%esi),%eax
00000cdf	movl	%eax,0x0c(%esp)
00000ce3	leal	0xacced-0x93e(%esi),%eax
00000ce9	movl	%eax,0x08(%esp)
00000ced	movl	%edi,0x04(%esp)
00000cf1	movl	%ebx,(%esp)
00000cf4	calll	CGameFileTreeView::CGameFileTreeView(vgui::Panel*, char const*, char const*, char const*, char const*)
00000cf9	movl	0x08(%ebp),%eax
00000cfc	movl	%ebx,0x000001b8(%eax)
00000d02	movl	0xb44db-0x93e(%esi),%edi
00000d08	movl	(%edi),%ecx
00000d0a	movl	(%ecx),%eax
00000d0c	movl	0x1c(%eax),%eax
00000d0f	leal	0xacd0b-0x93e(%esi),%edx
00000d15	movl	%edx,0x04(%esp)
00000d19	movl	%ecx,(%esp)
00000d1c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000d24	call	*%eax
00000d26	movl	%eax,0x04(%esp)
00000d2a	movl	0xcc(%ebp),%eax
00000d2d	movl	%eax,(%esp)
00000d30	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000d35	movl	(%edi),%ecx
00000d37	movl	(%ecx),%eax
00000d39	movl	0x1c(%eax),%eax
00000d3c	leal	0xacd20-0x93e(%esi),%edx
00000d42	movl	%edx,0x04(%esp)
00000d46	movl	%ecx,(%esp)
00000d49	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000d51	call	*%eax
00000d53	movl	%eax,0x04(%esp)
00000d57	movl	0xcc(%ebp),%eax
00000d5a	movl	%eax,(%esp)
00000d5d	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000d62	movl	(%edi),%ecx
00000d64	movl	(%ecx),%eax
00000d66	movl	0x1c(%eax),%eax
00000d69	leal	0xacd3e-0x93e(%esi),%edx
00000d6f	movl	%edx,0x04(%esp)
00000d73	movl	%ecx,(%esp)
00000d76	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000d7e	call	*%eax
00000d80	movl	%eax,0x04(%esp)
00000d84	movl	0xcc(%ebp),%eax
00000d87	movl	%eax,(%esp)
00000d8a	calll	vgui::ImageList::AddImage(vgui::IImage*)
00000d8f	movl	0x08(%ebp),%eax
00000d92	movl	0x000001b8(%eax),%ecx
00000d98	movl	(%ecx),%eax
00000d9a	movl	0x00000374(%eax),%eax
00000da0	movl	0xcc(%ebp),%edx
00000da3	movl	%edx,0x04(%esp)
00000da7	movl	%ecx,(%esp)
00000daa	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00000db2	call	*%eax
00000db4	movl	0x08(%ebp),%edx
00000db7	movl	0x000001b8(%edx),%eax
00000dbd	movl	(%eax),%ecx
00000dbf	movl	0x000000b4(%ecx),%ecx
00000dc5	movl	%edx,0x04(%esp)
00000dc9	movl	%eax,(%esp)
00000dcc	call	*%ecx
00000dce	movl	$0x000001c4,(%esp)
00000dd5	calll	operator new(unsigned long)
00000dda	movl	%eax,%edi
00000ddc	leal	0xacd51-0x93e(%esi),%eax
00000de2	movl	%eax,0x08(%esp)
00000de6	movl	0xc0(%ebp),%eax
00000de9	movl	%eax,0x04(%esp)
00000ded	movl	%edi,(%esp)
00000df0	movl	$0x00000001,0x10(%esp)
00000df8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000e00	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
00000e05	movl	0x08(%ebp),%eax
00000e08	movl	%edi,0x000001d8(%eax)
00000e0e	movl	%edi,(%esp)
00000e11	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000e19	calll	vgui::Panel::GetChild(int)
00000e1e	movl	%eax,%edi
00000e20	movl	0x08(%ebp),%eax
00000e23	movl	0x000001d8(%eax),%eax
00000e29	movl	%eax,(%esp)
00000e2c	movl	$0x00000001,0x04(%esp)
00000e34	calll	vgui::Panel::GetChild(int)
00000e39	movl	%eax,0xc0(%ebp)
00000e3c	movl	$0x00000c90,(%esp)
00000e43	calll	operator new(unsigned long)
00000e48	movl	%eax,%ebx
00000e4a	leal	0xacd62-0x93e(%esi),%eax
00000e50	movl	%eax,0x08(%esp)
00000e54	movl	%edi,0x04(%esp)
00000e58	movl	%ebx,(%esp)
00000e5b	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00000e60	movl	0x08(%ebp),%ecx
00000e63	movl	%ebx,0x000001b0(%ecx)
00000e69	movl	(%ecx),%eax
00000e6b	movl	0x000002b8(%eax),%eax
00000e71	movl	%ebx,0x04(%esp)
00000e75	movl	%ecx,(%esp)
00000e78	call	*%eax
00000e7a	movl	$0x00000230,(%esp)
00000e81	calll	operator new(unsigned long)
00000e86	movl	%eax,%edi
00000e88	leal	0xacd6d-0x93e(%esi),%eax
00000e8e	movl	%eax,0x08(%esp)
00000e92	movl	0xc0(%ebp),%eax
00000e95	movl	%eax,0x04(%esp)
00000e99	movl	%edi,(%esp)
00000e9c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000ea4	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
00000ea9	movl	0x08(%ebp),%ecx
00000eac	movl	%edi,0x000001dc(%ecx)
00000eb2	movl	(%edi),%eax
00000eb4	movl	0x000000b4(%eax),%eax
00000eba	movl	%ecx,0x04(%esp)
00000ebe	movl	%edi,(%esp)
00000ec1	call	*%eax
00000ec3	movl	$0x000001b8,(%esp)
00000eca	calll	operator new(unsigned long)
00000ecf	movl	%eax,%edi
00000ed1	movl	0x08(%ebp),%ebx
00000ed4	movl	0x000001dc(%ebx),%eax
00000eda	leal	0xacd78-0x93e(%esi),%ecx
00000ee0	movl	%ecx,0x08(%esp)
00000ee4	movl	%eax,0x04(%esp)
00000ee8	movl	%edi,(%esp)
00000eeb	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000ef0	movl	%edi,0x000001e0(%ebx)
00000ef6	movl	0x000001dc(%ebx),%ecx
00000efc	movl	(%ecx),%eax
00000efe	movl	0x000003b0(%eax),%eax
00000f04	leal	0xacd86-0x93e(%esi),%edx
00000f0a	movl	%edx,0x08(%esp)
00000f0e	movl	%edi,0x04(%esp)
00000f12	movl	%ecx,(%esp)
00000f15	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00000f1d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00000f25	call	*%eax
00000f27	movl	$0x00000280,(%esp)
00000f2e	calll	operator new(unsigned long)
00000f33	movl	%eax,%edi
00000f35	movl	0x08(%ebp),%ebx
00000f38	movl	0x000001e0(%ebx),%eax
00000f3e	leal	0xacd90-0x93e(%esi),%ecx
00000f44	movl	%ecx,0x08(%esp)
00000f48	movl	%eax,0x04(%esp)
00000f4c	movl	%edi,(%esp)
00000f4f	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000f54	movl	%edi,0x000001e8(%ebx)
00000f5a	movl	(%edi),%eax
00000f5c	movl	0x0000034c(%eax),%eax
00000f62	leal	0xacd9e-0x93e(%esi),%ecx
00000f68	movl	%ecx,0x0c(%esp)
00000f6c	movl	%ecx,0x08(%esp)
00000f70	movl	%edi,(%esp)
00000f73	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00000f7b	movl	$0x00000034,0x10(%esp)
00000f83	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00000f8b	call	*%eax
00000f8d	movl	0x08(%ebp),%edx
00000f90	movl	0x000001e8(%edx),%eax
00000f96	movl	(%eax),%ecx
00000f98	movl	0x000000b4(%ecx),%ecx
00000f9e	movl	%edx,0x04(%esp)
00000fa2	movl	%eax,(%esp)
00000fa5	call	*%ecx
00000fa7	movl	0x08(%ebp),%eax
00000faa	movl	0x000001e8(%eax),%ecx
00000fb0	movl	(%ecx),%eax
00000fb2	movl	0x00000410(%eax),%eax
00000fb8	movl	%ecx,(%esp)
00000fbb	movl	$0x00000001,0x04(%esp)
00000fc3	call	*%eax
00000fc5	movl	0x08(%ebp),%eax
00000fc8	movl	0x000001e8(%eax),%eax
00000fce	movl	(%eax),%ecx
00000fd0	movl	0x00000420(%ecx),%ecx
00000fd6	leal	0xacda7-0x93e(%esi),%edx
00000fdc	movl	%edx,0xc0(%ebp)
00000fdf	movl	%edx,0x04(%esp)
00000fe3	movl	%eax,(%esp)
00000fe6	call	*%ecx
00000fe8	movl	0x08(%ebp),%eax
00000feb	movl	0x000001e8(%eax),%ecx
00000ff1	movl	(%ecx),%eax
00000ff3	movl	0x00000240(%eax),%eax
00000ff9	movl	%ecx,(%esp)
00000ffc	movl	$0x00000001,0x04(%esp)
00001004	call	*%eax
00001006	movl	0x08(%ebp),%eax
00001009	movl	0x000001e8(%eax),%eax
0000100f	movl	%eax,(%esp)
00001012	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000101a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00001022	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000102a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00001032	movl	$0x00000003,0x08(%esp)
0000103a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00001042	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00001047	movl	$0x000001b8,(%esp)
0000104e	calll	operator new(unsigned long)
00001053	movl	%eax,%edi
00001055	movl	0x08(%ebp),%ebx
00001058	movl	0x000001dc(%ebx),%eax
0000105e	leal	0xacdc8-0x93e(%esi),%ecx
00001064	movl	%ecx,0x08(%esp)
00001068	movl	%eax,0x04(%esp)
0000106c	movl	%edi,(%esp)
0000106f	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00001074	movl	%edi,0x000001e4(%ebx)
0000107a	movl	0x000001dc(%ebx),%ecx
00001080	movl	(%ecx),%eax
00001082	movl	0x000003b0(%eax),%eax
00001088	leal	0xacdd7-0x93e(%esi),%edx
0000108e	movl	%edx,0x08(%esp)
00001092	movl	%edi,0x04(%esp)
00001096	movl	%ecx,(%esp)
00001099	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000010a1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000010a9	call	*%eax
000010ab	movl	$0x00000280,(%esp)
000010b2	calll	operator new(unsigned long)
000010b7	movl	%eax,%edi
000010b9	movl	0x08(%ebp),%ebx
000010bc	movl	0x000001e4(%ebx),%eax
000010c2	leal	0xacde2-0x93e(%esi),%ecx
000010c8	movl	%ecx,0x08(%esp)
000010cc	movl	%eax,0x04(%esp)
000010d0	movl	%edi,(%esp)
000010d3	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
000010d8	movl	%edi,0x000001ec(%ebx)
000010de	movl	(%edi),%eax
000010e0	movl	0x0000034c(%eax),%eax
000010e6	leal	0xacdf1-0x93e(%esi),%ecx
000010ec	movl	%ecx,0x0c(%esp)
000010f0	movl	%ecx,0x08(%esp)
000010f4	movl	%edi,(%esp)
000010f7	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000010ff	movl	$0x00000034,0x10(%esp)
00001107	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000110f	call	*%eax
00001111	movl	0x08(%ebp),%edx
00001114	movl	0x000001ec(%edx),%eax
0000111a	movl	(%eax),%ecx
0000111c	movl	0x000000b4(%ecx),%ecx
00001122	movl	%edx,0x04(%esp)
00001126	movl	%eax,(%esp)
00001129	call	*%ecx
0000112b	movl	0x08(%ebp),%eax
0000112e	movl	0x000001ec(%eax),%ecx
00001134	movl	(%ecx),%eax
00001136	movl	0x00000410(%eax),%eax
0000113c	movl	%ecx,(%esp)
0000113f	movl	$0x00000001,0x04(%esp)
00001147	call	*%eax
00001149	movl	0x08(%ebp),%eax
0000114c	movl	0x000001ec(%eax),%eax
00001152	movl	(%eax),%ecx
00001154	movl	0x00000420(%ecx),%ecx
0000115a	movl	0xc0(%ebp),%edx
0000115d	movl	%edx,0x04(%esp)
00001161	movl	%eax,(%esp)
00001164	call	*%ecx
00001166	movl	0x08(%ebp),%eax
00001169	movl	0x000001ec(%eax),%ecx
0000116f	movl	(%ecx),%eax
00001171	movl	0x00000240(%eax),%eax
00001177	movl	%ecx,(%esp)
0000117a	movl	$0x00000001,0x04(%esp)
00001182	call	*%eax
00001184	movl	0x08(%ebp),%eax
00001187	movl	0x000001ec(%eax),%eax
0000118d	movl	%eax,(%esp)
00001190	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
00001198	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000011a0	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000011a8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000011b0	movl	$0x00000003,0x08(%esp)
000011b8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000011c0	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
000011c5	movl	0x08(%ebp),%edx
000011c8	movl	(%edx),%eax
000011ca	movl	0x00000354(%eax),%eax
000011d0	leal	0xacdfa-0x93e(%esi),%ecx
000011d6	movl	%ecx,0x04(%esp)
000011da	movl	%edx,(%esp)
000011dd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000011e5	call	*%eax
000011e7	addl	$0x5c,%esp
000011ea	popl	%esi
000011eb	popl	%edi
000011ec	popl	%ebx
000011ed	popl	%ebp
000011ee	ret
000011ef	movl	%eax,%esi
000011f1	jmp	0x00001233
000011f3	movl	%eax,%esi
000011f5	movl	0x08(%ebp),%ebx
000011f8	jmp	0x00001228
000011fa	jmp	0x0000121e
000011fc	movl	%eax,%esi
000011fe	movl	%ebx,(%esp)
00001201	calll	operator delete(void*)
00001206	movl	0x08(%ebp),%ebx
00001209	jmp	0x00001228
0000120b	jmp	0x000011fc
0000120d	movl	%eax,%esi
0000120f	movl	%edi,(%esp)
00001212	jmp	0x00001201
00001214	jmp	0x000011fc
00001216	jmp	0x0000120d
00001218	jmp	0x0000121e
0000121a	jmp	0x0000121e
0000121c	jmp	0x0000121e
0000121e	movl	%eax,%esi
00001220	movl	%edi,(%esp)
00001223	calll	operator delete(void*)
00001228	movl	0xcc(%ebp),%eax
0000122b	movl	%eax,(%esp)
0000122e	calll	vgui::ImageList::~ImageList()
00001233	movl	0xc4(%ebp),%eax
00001236	movl	%eax,0x04(%esp)
0000123a	movl	%ebx,(%esp)
0000123d	calll	vgui::EditablePanel::~EditablePanel()
00001242	movl	%esi,(%esp)
00001245	calll	__Unwind_Resume
0000124a	calll	std::terminate()
0000124f	nop
CMDLSequencePicker::~CMDLSequencePicker():
00001250	pushl	%ebp
00001251	movl	%esp,%ebp
00001253	pushl	%ebx
00001254	pushl	%edi
00001255	pushl	%esi
00001256	subl	$0x0c,%esp
00001259	calll	0x0000125e
0000125e	popl	%ebx
0000125f	leal	vtable for CMDLSequencePicker-0x125e+0x0000000c(%ebx),%eax
00001265	movl	0x08(%ebp),%edi
00001268	movl	%eax,(%edi)
0000126a	leal	0x000001bc(%edi),%eax
00001270	movl	%eax,(%esp)
00001273	calll	vgui::ImageList::~ImageList()
00001278	leal	VTT for CMDLSequencePicker-0x125e+0x00000004(%ebx),%eax
0000127e	movl	%eax,0x04(%esp)
00001282	movl	%edi,(%esp)
00001285	calll	vgui::EditablePanel::~EditablePanel()
0000128a	addl	$0x0c,%esp
0000128d	popl	%esi
0000128e	popl	%edi
0000128f	popl	%ebx
00001290	popl	%ebp
00001291	jmp	operator delete(void*)
00001296	movl	%eax,%esi
00001298	leal	VTT for CMDLSequencePicker-0x125e+0x00000004(%ebx),%eax
0000129e	movl	%eax,0x04(%esp)
000012a2	movl	%edi,(%esp)
000012a5	calll	vgui::EditablePanel::~EditablePanel()
000012aa	jmp	0x000012b3
000012ac	calll	std::terminate()
000012b1	movl	%eax,%esi
000012b3	movl	%edi,(%esp)
000012b6	calll	operator delete(void*)
000012bb	movl	%esi,(%esp)
000012be	calll	__Unwind_Resume
000012c3	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::~CMDLSequencePicker():
000012d0	pushl	%ebp
000012d1	movl	%esp,%ebp
000012d3	pushl	%ebx
000012d4	pushl	%edi
000012d5	pushl	%esi
000012d6	subl	$0x0c,%esp
000012d9	calll	0x000012de
000012de	popl	%ebx
000012df	leal	vtable for CMDLSequencePicker-0x12de+0x0000000c(%ebx),%eax
000012e5	movl	0x08(%ebp),%edi
000012e8	movl	%eax,(%edi)
000012ea	leal	0x000001bc(%edi),%eax
000012f0	movl	%eax,(%esp)
000012f3	calll	vgui::ImageList::~ImageList()
000012f8	leal	VTT for CMDLSequencePicker-0x12de+0x00000004(%ebx),%eax
000012fe	movl	%eax,0x04(%esp)
00001302	movl	%edi,(%esp)
00001305	calll	vgui::EditablePanel::~EditablePanel()
0000130a	addl	$0x0c,%esp
0000130d	popl	%esi
0000130e	popl	%edi
0000130f	popl	%ebx
00001310	popl	%ebp
00001311	ret
00001312	movl	%eax,%esi
00001314	leal	VTT for CMDLSequencePicker-0x12de+0x00000004(%ebx),%eax
0000131a	movl	%eax,0x04(%esp)
0000131e	movl	%edi,(%esp)
00001321	calll	vgui::EditablePanel::~EditablePanel()
00001326	movl	%esi,(%esp)
00001329	calll	__Unwind_Resume
0000132e	calll	std::terminate()
00001333	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::~CMDLSequencePicker():
00001340	pushl	%ebp
00001341	movl	%esp,%ebp
00001343	pushl	%ebx
00001344	pushl	%edi
00001345	pushl	%esi
00001346	subl	$0x0c,%esp
00001349	movl	0x0c(%ebp),%edi
0000134c	movl	(%edi),%eax
0000134e	movl	0x08(%ebp),%ebx
00001351	movl	%eax,(%ebx)
00001353	leal	0x000001bc(%ebx),%eax
00001359	movl	%eax,(%esp)
0000135c	calll	vgui::ImageList::~ImageList()
00001361	addl	$0x04,%edi
00001364	movl	%edi,0x04(%esp)
00001368	movl	%ebx,(%esp)
0000136b	calll	vgui::EditablePanel::~EditablePanel()
00001370	addl	$0x0c,%esp
00001373	popl	%esi
00001374	popl	%edi
00001375	popl	%ebx
00001376	popl	%ebp
00001377	ret
00001378	movl	%eax,%esi
0000137a	addl	$0x04,%edi
0000137d	movl	%edi,0x04(%esp)
00001381	movl	%ebx,(%esp)
00001384	calll	vgui::EditablePanel::~EditablePanel()
00001389	movl	%esi,(%esp)
0000138c	calll	__Unwind_Resume
00001391	calll	std::terminate()
00001396	nopw	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::OnTick():
000013a0	pushl	%ebp
000013a1	movl	%esp,%ebp
000013a3	pushl	%ebx
000013a4	pushl	%edi
000013a5	pushl	%esi
000013a6	subl	$0x1c,%esp
000013a9	calll	0x000013ae
000013ae	popl	%esi
000013af	movl	0x08(%ebp),%edi
000013b2	movl	%edi,(%esp)
000013b5	calll	vgui::Panel::OnTick()
000013ba	movl	(%edi),%eax
000013bc	movl	%edi,(%esp)
000013bf	call	*0x00000098(%eax)
000013c5	testl	%eax,%eax
000013c7	je	0x00001435
000013c9	movl	(%edi),%eax
000013cb	movl	%edi,(%esp)
000013ce	call	*0x00000098(%eax)
000013d4	movl	(%eax),%ecx
000013d6	movl	%eax,(%esp)
000013d9	call	*0x00000098(%ecx)
000013df	testl	%eax,%eax
000013e1	je	0x00001435
000013e3	movl	0xb44c3-0x13ae(%esi),%ecx
000013e9	movl	%ecx,0x08(%esp)
000013ed	movl	0xb44c7-0x13ae(%esi),%ecx
000013f3	movl	%ecx,0x04(%esp)
000013f7	movl	%eax,(%esp)
000013fa	movl	$0xffffffff,0x0c(%esp)
00001402	calll	___dynamic_cast
00001407	movl	%eax,%esi
00001409	testl	%esi,%esi
0000140b	je	0x00001435
0000140d	movl	(%esi),%eax
0000140f	movl	0x000002b8(%eax),%ebx
00001415	movl	(%edi),%eax
00001417	movl	%edi,(%esp)
0000141a	call	*0x0000008c(%eax)
00001420	xorl	%ecx,%ecx
00001422	testb	%al,%al
00001424	je	0x0000142c
00001426	movl	0x000001b0(%edi),%ecx
0000142c	movl	%ecx,0x04(%esp)
00001430	movl	%esi,(%esp)
00001433	call	*%ebx
00001435	addl	$0x1c,%esp
00001438	popl	%esi
00001439	popl	%edi
0000143a	popl	%ebx
0000143b	popl	%ebp
0000143c	ret
0000143d	nopl	(%eax)
CMDLSequencePicker::OnClose():
00001440	jmp	vgui::EditablePanel::OnClose()
00001445	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::Activate():
00001450	pushl	%ebp
00001451	movl	%esp,%ebp
00001453	subl	$0x08,%esp
00001456	movl	0x08(%ebp),%eax
00001459	movl	0x000001b8(%eax),%eax
0000145f	movl	%eax,(%esp)
00001462	calll	CGameFileTreeView::RefreshFileList()
00001467	addl	$0x08,%esp
0000146a	popl	%ebp
0000146b	jmp	CMDLSequencePicker::RefreshActivitiesAndSequencesList()
CMDLSequencePicker::RefreshFileList():
00001470	pushl	%ebp
00001471	movl	%esp,%ebp
00001473	subl	$0x08,%esp
00001476	movl	0x08(%ebp),%eax
00001479	movl	0x000001b8(%eax),%eax
0000147f	movl	%eax,(%esp)
00001482	calll	CGameFileTreeView::RefreshFileList()
00001487	addl	$0x08,%esp
0000148a	popl	%ebp
0000148b	ret
0000148c	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::RefreshActivitiesAndSequencesList():
00001490	pushl	%ebp
00001491	movl	%esp,%ebp
00001493	pushl	%ebx
00001494	pushl	%edi
00001495	pushl	%esi
00001496	subl	$0x5c,%esp
00001499	calll	0x0000149e
0000149e	popl	%edi
0000149f	movl	0x08(%ebp),%esi
000014a2	movl	0x000001ec(%esi),%ecx
000014a8	movl	(%ecx),%eax
000014aa	movl	%ecx,(%esp)
000014ad	call	*0x000003c4(%eax)
000014b3	movl	0x000001e8(%esi),%ecx
000014b9	movl	(%ecx),%eax
000014bb	movl	%ecx,(%esp)
000014be	call	*0x000003c4(%eax)
000014c4	movl	0x000001b0(%esi),%eax
000014ca	movl	%eax,(%esp)
000014cd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000014d5	calll	CMDLPanel::SetSequence(int)
000014da	movl	0x000001ec(%esi),%ecx
000014e0	movl	(%ecx),%eax
000014e2	movl	0x00000420(%eax),%eax
000014e8	cmpw	$0xff,0x000001f0(%esi)
000014f0	jne	0x0000151f
000014f2	movl	%edi,%edx
000014f4	movl	%esi,%edi
000014f6	leal	0xace19-0x149e(%edx),%esi
000014fc	movl	%esi,0x04(%esp)
00001500	movl	%ecx,(%esp)
00001503	call	*%eax
00001505	movl	0x000001e8(%edi),%ecx
0000150b	movl	(%ecx),%eax
0000150d	movl	%esi,0x04(%esp)
00001511	movl	%ecx,(%esp)
00001514	call	*0x00000420(%eax)
0000151a	jmp	0x000018f7
0000151f	leal	0xace39-0x149e(%edi),%edx
00001525	movl	%edx,0x04(%esp)
00001529	movl	%ecx,(%esp)
0000152c	call	*%eax
0000152e	movl	0x000001e8(%esi),%ecx
00001534	movl	(%ecx),%eax
00001536	leal	0xace5a-0x149e(%edi),%edx
0000153c	movl	%edx,0x04(%esp)
00001540	movl	%ecx,(%esp)
00001543	call	*0x00000420(%eax)
00001549	calll	vgui::MDLCache()
0000154e	movl	(%eax),%ecx
00001550	movzwl	0x000001f0(%esi),%edx
00001557	movl	%edx,0x04(%esp)
0000155b	movl	%eax,(%esp)
0000155e	call	*0x28(%ecx)
00001561	movl	%eax,0xb4(%ebp)
00001564	movl	%eax,(%esp)
00001567	calll	studiohdr_t::GetNumSeq() const
0000156c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xc0(%ebp)
00001573	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xc4(%ebp)
0000157a	movl	%eax,0xc8(%ebp)
0000157d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xcc(%ebp)
00001584	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xb8(%ebp)
0000158b	testl	%eax,%eax
0000158d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),%ecx
00001592	je	0x000015a4
00001594	shll	$0x04,%eax
00001597	movl	%eax,(%esp)
0000159a	calll	_malloc
0000159f	movl	%eax,%ecx
000015a1	movl	%ecx,0xc4(%ebp)
000015a4	movw	$0xffff,0xd0(%ebp)
000015aa	movw	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xd2(%ebp)
000015b0	movw	$0xffff,0xd4(%ebp)
000015b6	movw	$0xffff,0xd6(%ebp)
000015bc	movl	%ecx,0xd8(%ebp)
000015bf	leal	CaselessStringLessThan(char const* const&, char const* const&)-0x149e(%edi),%eax
000015c5	movl	%edi,0xbc(%ebp)
000015c8	movl	%eax,0xc0(%ebp)
000015cb	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
000015d0	movl	0xb4(%ebp),%eax
000015d3	movl	%eax,(%esp)
000015d6	calll	studiohdr_t::GetNumSeq() const
000015db	movl	0xb8(%ebp),%ecx
000015de	cmpl	%eax,%ecx
000015e0	movl	%ecx,%eax
000015e2	jge	0x000018ec
000015e8	movl	%eax,0x04(%esp)
000015ec	movl	0xb4(%ebp),%eax
000015ef	movl	%eax,(%esp)
000015f2	calll	studiohdr_t::pSeqdesc(int) const
000015f7	testb	$0x04,0x0d(%eax)
000015fb	jne	0x000018b4
00001601	movl	0xb8(%ebp),%eax
00001604	movl	%eax,0x04(%esp)
00001608	movl	0xb4(%ebp),%eax
0000160b	movl	%eax,(%esp)
0000160e	calll	studiohdr_t::pSeqdesc(int) const
00001613	movl	%eax,%edi
00001615	addl	0x08(%edi),%edi
00001618	je	0x00001770
0000161e	cmpb	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),(%edi)
00001621	je	0x00001770
00001627	movl	%edi,0xe0(%ebp)
0000162a	leal	0xe0(%ebp),%eax
0000162d	movl	%eax,0x04(%esp)
00001631	leal	0xc0(%ebp),%eax
00001634	movl	%eax,(%esp)
00001637	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
0000163c	cmpw	$0xff,%ax
00001640	jne	0x00001770
00001646	movl	$0x00000020,(%esp)
0000164d	calll	KeyValues::operator new(unsigned long)
00001652	movl	%eax,%esi
00001654	movl	%edi,0x0c(%esp)
00001658	movl	0xbc(%ebp),%ecx
0000165b	leal	0xacdf1-0x149e(%ecx),%eax
00001661	movl	%eax,0x08(%esp)
00001665	leal	0xace7a-0x149e(%ecx),%eax
0000166b	movl	%ecx,%ebx
0000166d	movl	%eax,0x04(%esp)
00001671	movl	%esi,(%esp)
00001674	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00001679	movl	0x08(%ebp),%eax
0000167c	movl	0x000001ec(%eax),%ecx
00001682	movl	(%ecx),%eax
00001684	movl	0x00000390(%eax),%eax
0000168a	movl	%esi,0x04(%esp)
0000168e	movl	%ecx,(%esp)
00001691	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00001699	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000016a1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000016a9	call	*%eax
000016ab	movl	%eax,0xb0(%ebp)
000016ae	movl	$0x00000020,(%esp)
000016b5	calll	KeyValues::operator new(unsigned long)
000016ba	movl	%eax,%esi
000016bc	movl	%edi,0x0c(%esp)
000016c0	leal	0xace84-0x149e(%ebx),%eax
000016c6	movl	%eax,0x08(%esp)
000016ca	leal	0xace7f-0x149e(%ebx),%eax
000016d0	movl	%eax,0x04(%esp)
000016d4	movl	%esi,(%esp)
000016d7	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000016dc	leal	0xace92-0x149e(%ebx),%eax
000016e2	movl	%eax,0x08(%esp)
000016e6	leal	0xace89-0x149e(%ebx),%eax
000016ec	movl	%ebx,0xbc(%ebp)
000016ef	movl	%eax,0x04(%esp)
000016f3	movl	%esi,(%esp)
000016f6	calll	KeyValues::SetString(char const*, char const*)
000016fb	calll	vgui::MDLCache()
00001700	movl	(%eax),%ecx
00001702	movl	0x5c(%ecx),%ecx
00001705	movl	0x08(%ebp),%edx
00001708	movzwl	0x000001f0(%edx),%edx
0000170f	movl	%edx,0x04(%esp)
00001713	movl	%eax,(%esp)
00001716	call	*%ecx
00001718	movl	%eax,0x08(%esp)
0000171c	movl	0xbc(%ebp),%eax
0000171f	leal	0xacd07-0x149e(%eax),%eax
00001725	movl	%eax,0x04(%esp)
00001729	movl	%esi,(%esp)
0000172c	calll	KeyValues::SetString(char const*, char const*)
00001731	movl	0x08(%ebp),%eax
00001734	movl	0x000001ec(%eax),%eax
0000173a	movl	%esi,0x08(%esp)
0000173e	movl	0xb0(%ebp),%ecx
00001741	movl	%ecx,0x04(%esp)
00001745	movl	%eax,(%esp)
00001748	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
0000174d	movl	%edi,(%esp)
00001750	calll	_strdup
00001755	movl	%eax,0xe8(%ebp)
00001758	movl	0xb8(%ebp),%eax
0000175b	movl	%eax,0xec(%ebp)
0000175e	leal	0xe8(%ebp),%eax
00001761	movl	%eax,0x04(%esp)
00001765	leal	0xc0(%ebp),%eax
00001768	movl	%eax,(%esp)
0000176b	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
00001770	movl	0xb8(%ebp),%eax
00001773	movl	%eax,0x04(%esp)
00001777	movl	0xb4(%ebp),%eax
0000177a	movl	%eax,(%esp)
0000177d	calll	studiohdr_t::pSeqdesc(int) const
00001782	movl	%eax,%ebx
00001784	addl	0x04(%ebx),%ebx
00001787	je	0x000018b4
0000178d	cmpb	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),(%ebx)
00001790	je	0x000018b4
00001796	movl	$0x00000020,(%esp)
0000179d	calll	KeyValues::operator new(unsigned long)
000017a2	movl	%eax,%esi
000017a4	movl	%ebx,0x0c(%esp)
000017a8	movl	0xbc(%ebp),%edi
000017ab	leal	0xacd9e-0x149e(%edi),%eax
000017b1	movl	%eax,0x08(%esp)
000017b5	leal	0xace7a-0x149e(%edi),%eax
000017bb	movl	%eax,0x04(%esp)
000017bf	movl	%esi,(%esp)
000017c2	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000017c7	movl	0xb8(%ebp),%eax
000017ca	movl	%eax,0x08(%esp)
000017ce	leal	0xace9f-0x149e(%edi),%eax
000017d4	movl	%eax,0x04(%esp)
000017d8	movl	%esi,(%esp)
000017db	calll	KeyValues::SetInt(char const*, int)
000017e0	movl	0x08(%ebp),%eax
000017e3	movl	0x000001e8(%eax),%ecx
000017e9	movl	(%ecx),%eax
000017eb	movl	0x00000390(%eax),%eax
000017f1	movl	%esi,0x04(%esp)
000017f5	movl	%ecx,(%esp)
000017f8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
00001800	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00001808	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001810	call	*%eax
00001812	movl	%eax,0xb0(%ebp)
00001815	movl	$0x00000020,(%esp)
0000181c	calll	KeyValues::operator new(unsigned long)
00001821	movl	%eax,%esi
00001823	movl	%ebx,0x0c(%esp)
00001827	leal	0xace84-0x149e(%edi),%eax
0000182d	movl	%eax,0x08(%esp)
00001831	leal	0xace7f-0x149e(%edi),%eax
00001837	movl	%eax,0x04(%esp)
0000183b	movl	%esi,(%esp)
0000183e	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00001843	leal	0xacea8-0x149e(%edi),%eax
00001849	movl	%eax,0x08(%esp)
0000184d	leal	0xace89-0x149e(%edi),%eax
00001853	movl	%edi,0xbc(%ebp)
00001856	movl	%eax,0x04(%esp)
0000185a	movl	%esi,(%esp)
0000185d	calll	KeyValues::SetString(char const*, char const*)
00001862	calll	vgui::MDLCache()
00001867	movl	(%eax),%ecx
00001869	movl	0x5c(%ecx),%ecx
0000186c	movl	0x08(%ebp),%edx
0000186f	movzwl	0x000001f0(%edx),%edx
00001876	movl	%edx,0x04(%esp)
0000187a	movl	%eax,(%esp)
0000187d	call	*%ecx
0000187f	movl	%eax,0x08(%esp)
00001883	movl	0xbc(%ebp),%eax
00001886	leal	0xacd07-0x149e(%eax),%eax
0000188c	movl	%eax,0x04(%esp)
00001890	movl	%esi,(%esp)
00001893	calll	KeyValues::SetString(char const*, char const*)
00001898	movl	0x08(%ebp),%eax
0000189b	movl	0x000001e8(%eax),%eax
000018a1	movl	%esi,0x08(%esp)
000018a5	movl	0xb0(%ebp),%ecx
000018a8	movl	%ecx,0x04(%esp)
000018ac	movl	%eax,(%esp)
000018af	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
000018b4	incl	0xb8(%ebp)
000018b7	jmp	0x000015d0
000018bc	movl	%eax,%edi
000018be	movl	%esi,(%esp)
000018c1	calll	KeyValues::operator delete(void*)
000018c6	jmp	0x00001901
000018c8	movl	%eax,%edi
000018ca	movl	%esi,(%esp)
000018cd	calll	KeyValues::operator delete(void*)
000018d2	jmp	0x00001901
000018d4	movl	%eax,%edi
000018d6	movl	%esi,(%esp)
000018d9	calll	KeyValues::operator delete(void*)
000018de	jmp	0x00001901
000018e0	movl	%eax,%edi
000018e2	movl	%esi,(%esp)
000018e5	calll	KeyValues::operator delete(void*)
000018ea	jmp	0x00001901
000018ec	leal	0xc0(%ebp),%eax
000018ef	movl	%eax,(%esp)
000018f2	calll	CUtlDict<int, unsigned short>::~CUtlDict()
000018f7	addl	$0x5c,%esp
000018fa	popl	%esi
000018fb	popl	%edi
000018fc	popl	%ebx
000018fd	popl	%ebp
000018fe	ret
000018ff	movl	%eax,%edi
00001901	leal	0xc0(%ebp),%eax
00001904	movl	%eax,(%esp)
00001907	calll	CUtlDict<int, unsigned short>::~CUtlDict()
0000190c	movl	%edi,(%esp)
0000190f	calll	__Unwind_Resume
00001914	calll	std::terminate()
00001919	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::PerformLayout():
00001920	pushl	%ebp
00001921	movl	%esp,%ebp
00001923	pushl	%esi
00001924	subl	$0x24,%esp
00001927	movl	0x08(%ebp),%esi
0000192a	movl	%esi,(%esp)
0000192d	calll	vgui::Panel::PerformLayout()
00001932	leal	0xf4(%ebp),%eax
00001935	movl	%eax,0x08(%esp)
00001939	leal	0xf8(%ebp),%eax
0000193c	movl	%eax,0x04(%esp)
00001940	movl	%esi,(%esp)
00001943	calll	vgui::Panel::GetSize(int&, int&)
00001948	movl	0x000001d4(%esi),%eax
0000194e	movl	0xf8(%ebp),%ecx
00001951	movl	0xf4(%ebp),%edx
00001954	movl	%edx,0x10(%esp)
00001958	movl	%ecx,0x0c(%esp)
0000195c	movl	%eax,(%esp)
0000195f	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001967	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000196f	calll	vgui::Panel::SetBounds(int, int, int, int)
00001974	addl	$0x24,%esp
00001977	popl	%esi
00001978	popl	%ebp
00001979	ret
0000197a	nopw	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::OnTextChanged(vgui::Panel*, char const*):
00001980	pushl	%ebp
00001981	movl	%esp,%ebp
00001983	subl	$0x08,%esp
00001986	movl	0x08(%ebp),%eax
00001989	movl	0x000001b8(%eax),%eax
0000198f	movl	%eax,(%esp)
00001992	calll	CGameFileTreeView::RefreshFileList()
00001997	addl	$0x08,%esp
0000199a	popl	%ebp
0000199b	ret
0000199c	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::PlaySelectedActivity():
000019a0	pushl	%ebp
000019a1	movl	%esp,%ebp
000019a3	pushl	%ebx
000019a4	pushl	%edi
000019a5	pushl	%esi
000019a6	subl	$0x0c,%esp
000019a9	calll	0x000019ae
000019ae	popl	%esi
000019af	movl	0x08(%ebp),%eax
000019b2	movl	0x000001ec(%eax),%ecx
000019b8	movl	(%ecx),%eax
000019ba	movl	%ecx,(%esp)
000019bd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000019c5	call	*0x000003f8(%eax)
000019cb	testl	%eax,%eax
000019cd	js	0x00001a71
000019d3	movl	0x08(%ebp),%ecx
000019d6	movl	0x000001ec(%ecx),%edx
000019dc	movl	(%edx),%ecx
000019de	movl	%eax,0x04(%esp)
000019e2	movl	%edx,(%esp)
000019e5	call	*0x0000039c(%ecx)
000019eb	leal	0xacdf1-0x19ae(%esi),%ecx
000019f1	movl	%ecx,0x04(%esp)
000019f5	movl	%eax,(%esp)
000019f8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001a00	calll	KeyValues::GetString(char const*, char const*)
00001a05	movl	%eax,%esi
00001a07	testl	%esi,%esi
00001a09	je	0x00001a71
00001a0b	calll	vgui::MDLCache()
00001a10	movl	(%eax),%ecx
00001a12	movl	0x08(%ebp),%edx
00001a15	movzwl	0x000001f0(%edx),%edx
00001a1c	movl	%edx,0x04(%esp)
00001a20	movl	%eax,(%esp)
00001a23	call	*0x28(%ecx)
00001a26	movl	%eax,%edi
00001a28	xorl	%ebx,%ebx
00001a2a	jmp	0x00001a31
00001a2c	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
00001a30	incl	%ebx
00001a31	movl	%edi,(%esp)
00001a34	calll	studiohdr_t::GetNumSeq() const
00001a39	cmpl	%eax,%ebx
00001a3b	jge	0x00001a71
00001a3d	movl	%ebx,0x04(%esp)
00001a41	movl	%edi,(%esp)
00001a44	calll	studiohdr_t::pSeqdesc(int) const
00001a49	addl	0x08(%eax),%eax
00001a4c	movl	%esi,0x04(%esp)
00001a50	movl	%eax,(%esp)
00001a53	calll	_strcasecmp
00001a58	testl	%eax,%eax
00001a5a	jne	0x00001a30
00001a5c	movl	0x08(%ebp),%eax
00001a5f	movl	0x000001b0(%eax),%eax
00001a65	movl	%ebx,0x04(%esp)
00001a69	movl	%eax,(%esp)
00001a6c	calll	CMDLPanel::SetSequence(int)
00001a71	addl	$0x0c,%esp
00001a74	popl	%esi
00001a75	popl	%edi
00001a76	popl	%ebx
00001a77	popl	%ebp
00001a78	ret
00001a79	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::PlaySelectedSequence():
00001a80	pushl	%ebp
00001a81	movl	%esp,%ebp
00001a83	pushl	%ebx
00001a84	pushl	%edi
00001a85	pushl	%esi
00001a86	subl	$0x0c,%esp
00001a89	calll	0x00001a8e
00001a8e	popl	%esi
00001a8f	movl	0x08(%ebp),%eax
00001a92	movl	0x000001e8(%eax),%ecx
00001a98	movl	(%ecx),%eax
00001a9a	movl	%ecx,(%esp)
00001a9d	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00001aa5	call	*0x000003f8(%eax)
00001aab	testl	%eax,%eax
00001aad	js	0x00001b51
00001ab3	movl	0x08(%ebp),%ecx
00001ab6	movl	0x000001e8(%ecx),%edx
00001abc	movl	(%edx),%ecx
00001abe	movl	%eax,0x04(%esp)
00001ac2	movl	%edx,(%esp)
00001ac5	call	*0x0000039c(%ecx)
00001acb	leal	0xacd9e-0x1a8e(%esi),%ecx
00001ad1	movl	%ecx,0x04(%esp)
00001ad5	movl	%eax,(%esp)
00001ad8	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001ae0	calll	KeyValues::GetString(char const*, char const*)
00001ae5	movl	%eax,%esi
00001ae7	testl	%esi,%esi
00001ae9	je	0x00001b51
00001aeb	calll	vgui::MDLCache()
00001af0	movl	(%eax),%ecx
00001af2	movl	0x08(%ebp),%edx
00001af5	movzwl	0x000001f0(%edx),%edx
00001afc	movl	%edx,0x04(%esp)
00001b00	movl	%eax,(%esp)
00001b03	call	*0x28(%ecx)
00001b06	movl	%eax,%edi
00001b08	xorl	%ebx,%ebx
00001b0a	jmp	0x00001b11
00001b0c	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
00001b10	incl	%ebx
00001b11	movl	%edi,(%esp)
00001b14	calll	studiohdr_t::GetNumSeq() const
00001b19	cmpl	%eax,%ebx
00001b1b	jge	0x00001b51
00001b1d	movl	%ebx,0x04(%esp)
00001b21	movl	%edi,(%esp)
00001b24	calll	studiohdr_t::pSeqdesc(int) const
00001b29	addl	0x04(%eax),%eax
00001b2c	movl	%esi,0x04(%esp)
00001b30	movl	%eax,(%esp)
00001b33	calll	V_stricmp(char const*, char const*)
00001b38	testl	%eax,%eax
00001b3a	jne	0x00001b10
00001b3c	movl	0x08(%ebp),%eax
00001b3f	movl	0x000001b0(%eax),%eax
00001b45	movl	%ebx,0x04(%esp)
00001b49	movl	%eax,(%esp)
00001b4c	calll	CMDLPanel::SetSequence(int)
00001b51	addl	$0x0c,%esp
00001b54	popl	%esi
00001b55	popl	%edi
00001b56	popl	%ebx
00001b57	popl	%ebp
00001b58	ret
00001b59	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::OnPageChanged():
00001b60	pushl	%ebp
00001b61	movl	%esp,%ebp
00001b63	pushl	%esi
00001b64	pushl	%eax
00001b65	movl	0x08(%ebp),%esi
00001b68	movl	0x000001dc(%esi),%ecx
00001b6e	movl	(%ecx),%eax
00001b70	movl	%ecx,(%esp)
00001b73	call	*0x000003bc(%eax)
00001b79	cmpl	0x000001e0(%esi),%eax
00001b7f	je	0x00001ba0
00001b81	movl	0x000001dc(%esi),%ecx
00001b87	movl	(%ecx),%eax
00001b89	movl	%ecx,(%esp)
00001b8c	call	*0x000003bc(%eax)
00001b92	cmpl	0x000001e4(%esi),%eax
00001b98	je	0x00001baa
00001b9a	addl	$0x04,%esp
00001b9d	popl	%esi
00001b9e	popl	%ebp
00001b9f	ret
00001ba0	addl	$0x04,%esp
00001ba3	popl	%esi
00001ba4	popl	%ebp
00001ba5	jmp	CMDLSequencePicker::PlaySelectedSequence()
00001baa	addl	$0x04,%esp
00001bad	popl	%esi
00001bae	popl	%ebp
00001baf	jmp	CMDLSequencePicker::PlaySelectedActivity()
00001bb4	nopw	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::OnItemSelected(KeyValues*):
00001bc0	pushl	%ebp
00001bc1	movl	%esp,%ebp
00001bc3	subl	$0x18,%esp
00001bc6	calll	0x00001bcb
00001bcb	popl	%eax
00001bcc	leal	0xaceb5-0x1bcb(%eax),%eax
00001bd2	movl	%eax,0x04(%esp)
00001bd6	movl	0x0c(%ebp),%eax
00001bd9	movl	%eax,(%esp)
00001bdc	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001be4	calll	KeyValues::GetPtr(char const*, void*)
00001be9	movl	0x08(%ebp),%ecx
00001bec	cmpl	0x000001e8(%ecx),%eax
00001bf2	je	0x00001c01
00001bf4	cmpl	0x000001ec(%ecx),%eax
00001bfa	je	0x00001c0a
00001bfc	addl	$0x18,%esp
00001bff	popl	%ebp
00001c00	ret
00001c01	addl	$0x18,%esp
00001c04	popl	%ebp
00001c05	jmp	CMDLSequencePicker::PlaySelectedSequence()
00001c0a	addl	$0x18,%esp
00001c0d	popl	%ebp
00001c0e	jmp	CMDLSequencePicker::PlaySelectedActivity()
00001c13	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::SelectMDL(char const*):
00001c20	pushl	%ebp
00001c21	movl	%esp,%ebp
00001c23	pushl	%esi
00001c24	subl	$0x14,%esp
00001c27	movw	$0xffff,%ax
00001c2b	movl	0x0c(%ebp),%esi
00001c2e	testl	%esi,%esi
00001c30	je	0x00001c43
00001c32	calll	vgui::MDLCache()
00001c37	movl	(%eax),%ecx
00001c39	movl	%esi,0x04(%esp)
00001c3d	movl	%eax,(%esp)
00001c40	call	*0x18(%ecx)
00001c43	movl	0x08(%ebp),%esi
00001c46	movw	%ax,0x000001f0(%esi)
00001c4d	calll	vgui::MDLCache()
00001c52	movl	(%eax),%ecx
00001c54	movzwl	0x000001f0(%esi),%edx
00001c5b	movl	%edx,0x04(%esp)
00001c5f	movl	%eax,(%esp)
00001c62	call	*0x50(%ecx)
00001c65	testb	%al,%al
00001c67	jne	0x00001c72
00001c69	movzwl	0x000001f0(%esi),%eax
00001c70	jmp	0x00001c7f
00001c72	movw	$0xffff,0x000001f0(%esi)
00001c7b	movw	$0xffff,%ax
00001c7f	movl	0x000001b0(%esi),%edx
00001c85	movl	(%edx),%ecx
00001c87	movzwl	%ax,%eax
00001c8a	movl	%eax,0x04(%esp)
00001c8e	movl	%edx,(%esp)
00001c91	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001c99	call	*0x000003b4(%ecx)
00001c9f	movl	0x000001b0(%esi),%eax
00001ca5	movl	%eax,(%esp)
00001ca8	calll	CMDLPanel::LookAtMDL()
00001cad	addl	$0x14,%esp
00001cb0	popl	%esi
00001cb1	popl	%ebp
00001cb2	jmp	CMDLSequencePicker::RefreshActivitiesAndSequencesList()
00001cb7	nopw	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePicker::OnFileSelected():
00001cc0	pushl	%ebp
00001cc1	movl	%esp,%ebp
00001cc3	pushl	%ebx
00001cc4	pushl	%edi
00001cc5	pushl	%esi
00001cc6	subl	$0x0000011c,%esp
00001ccc	calll	0x00001cd1
00001cd1	popl	%ebx
00001cd2	movl	0xb44cf-0x1cd1(%ebx),%eax
00001cd8	movl	%eax,0xfffffee8(%ebp)
00001cde	movl	(%eax),%eax
00001ce0	movl	%eax,0xf0(%ebp)
00001ce3	movl	0x08(%ebp),%edi
00001ce6	movl	0x000001b8(%edi),%ecx
00001cec	movl	(%ecx),%eax
00001cee	movl	%ecx,(%esp)
00001cf1	call	*0x00000398(%eax)
00001cf7	testl	%eax,%eax
00001cf9	js	0x00001dc2
00001cff	movl	0x000001b8(%edi),%edx
00001d05	movl	(%edx),%ecx
00001d07	movl	%eax,0x04(%esp)
00001d0b	movl	%edx,(%esp)
00001d0e	call	*0x0000035c(%ecx)
00001d14	movl	%eax,%esi
00001d16	leal	0xacebb-0x1cd1(%ebx),%eax
00001d1c	movl	%eax,0x04(%esp)
00001d20	movl	%esi,(%esp)
00001d23	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001d2b	calll	KeyValues::GetInt(char const*, int)
00001d30	testl	%eax,%eax
00001d32	jne	0x00001dc2
00001d38	leal	0xacebf-0x1cd1(%ebx),%eax
00001d3e	movl	%eax,0x04(%esp)
00001d42	movl	%esi,(%esp)
00001d45	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001d4d	calll	KeyValues::GetInt(char const*, int)
00001d52	testl	%eax,%eax
00001d54	jne	0x00001dc2
00001d56	movl	0xb44df-0x1cd1(%ebx),%eax
00001d5c	movl	(%eax),%ecx
00001d5e	movl	(%ecx),%eax
00001d60	movl	%ecx,(%esp)
00001d63	movl	$0x00000005,0x04(%esp)
00001d6b	call	*0x000000cc(%eax)
00001d71	leal	0xacec9-0x1cd1(%ebx),%eax
00001d77	movl	%eax,0x08(%esp)
00001d7b	leal	0xacec4-0x1cd1(%ebx),%eax
00001d81	movl	%eax,0x04(%esp)
00001d85	movl	%esi,(%esp)
00001d88	calll	KeyValues::GetString(char const*, char const*)
00001d8d	movl	0xb44d3-0x1cd1(%ebx),%ecx
00001d93	movl	(%ecx),%edx
00001d95	movl	(%edx),%ecx
00001d97	leal	0xfffffeec(%ebp),%esi
00001d9d	movl	%esi,0x08(%esp)
00001da1	movl	%eax,0x04(%esp)
00001da5	movl	%edx,(%esp)
00001da8	movl	$0x00000104,0x0c(%esp)
00001db0	call	*0x00000084(%ecx)
00001db6	movl	%esi,0x04(%esp)
00001dba	movl	%edi,(%esp)
00001dbd	calll	CMDLSequencePicker::SelectMDL(char const*)
00001dc2	movl	0xfffffee8(%ebp),%eax
00001dc8	movl	(%eax),%eax
00001dca	cmpl	0xf0(%ebp),%eax
00001dcd	jne	0x00001dda
00001dcf	addl	$0x0000011c,%esp
00001dd5	popl	%esi
00001dd6	popl	%edi
00001dd7	popl	%ebx
00001dd8	popl	%ebp
00001dd9	ret
00001dda	calll	___stack_chk_fail
00001ddf	nop
CMDLSequencePicker::GetModelName():
00001de0	pushl	%ebp
00001de1	movl	%esp,%ebp
00001de3	pushl	%esi
00001de4	subl	$0x14,%esp
00001de7	calll	0x00001dec
00001dec	popl	%eax
00001ded	movl	0x08(%ebp),%esi
00001df0	cmpw	$0xff,0x000001f0(%esi)
00001df8	je	0x00001e14
00001dfa	calll	vgui::MDLCache()
00001dff	movl	(%eax),%ecx
00001e01	movzwl	0x000001f0(%esi),%edx
00001e08	movl	%edx,0x04(%esp)
00001e0c	movl	%eax,(%esp)
00001e0f	call	*0x5c(%ecx)
00001e12	jmp	0x00001e1a
00001e14	leal	0xacec9-0x1dec(%eax),%eax
00001e1a	addl	$0x14,%esp
00001e1d	popl	%esi
00001e1e	popl	%ebp
00001e1f	ret
CMDLSequencePicker::GetSequenceName():
00001e20	pushl	%ebp
00001e21	movl	%esp,%ebp
00001e23	pushl	%edi
00001e24	pushl	%esi
00001e25	subl	$0x10,%esp
00001e28	calll	0x00001e2d
00001e2d	popl	%esi
00001e2e	movl	0x08(%ebp),%edi
00001e31	movl	0x000001e8(%edi),%ecx
00001e37	movl	(%ecx),%eax
00001e39	movl	%ecx,(%esp)
00001e3c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00001e44	call	*0x000003f8(%eax)
00001e4a	testl	%eax,%eax
00001e4c	jns	0x00001e56
00001e4e	leal	0xacec9-0x1e2d(%esi),%eax
00001e54	jmp	0x00001e92
00001e56	movl	0x000001e8(%edi),%edx
00001e5c	movl	(%edx),%ecx
00001e5e	movl	%eax,0x04(%esp)
00001e62	movl	%edx,(%esp)
00001e65	call	*0x0000039c(%ecx)
00001e6b	leal	0xacd9e-0x1e2d(%esi),%ecx
00001e71	movl	%ecx,0x04(%esp)
00001e75	movl	%eax,(%esp)
00001e78	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00001e80	calll	KeyValues::GetString(char const*, char const*)
00001e85	movl	%eax,%ecx
00001e87	leal	0xacec9-0x1e2d(%esi),%eax
00001e8d	testl	%ecx,%ecx
00001e8f	cmovnel	%ecx,%eax
00001e92	addl	$0x10,%esp
00001e95	popl	%esi
00001e96	popl	%edi
00001e97	popl	%ebp
00001e98	ret
00001e99	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax)
CMDLSequencePicker::GetSequenceNumber():
00001ea0	pushl	%ebp
00001ea1	movl	%esp,%ebp
00001ea3	pushl	%edi
00001ea4	pushl	%esi
00001ea5	subl	$0x10,%esp
00001ea8	calll	0x00001ead
00001ead	popl	%esi
00001eae	movl	0x08(%ebp),%edi
00001eb1	movl	0x000001e8(%edi),%ecx
00001eb7	movl	(%ecx),%eax
00001eb9	movl	%ecx,(%esp)
00001ebc	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00001ec4	call	*0x000003f8(%eax)
00001eca	testl	%eax,%eax
00001ecc	js	0x00001eff
00001ece	movl	0x000001e8(%edi),%edx
00001ed4	movl	(%edx),%ecx
00001ed6	movl	%eax,0x04(%esp)
00001eda	movl	%edx,(%esp)
00001edd	call	*0x0000039c(%ecx)
00001ee3	leal	0xace9f-0x1ead(%esi),%ecx
00001ee9	movl	%ecx,0x04(%esp)
00001eed	movl	%eax,(%esp)
00001ef0	movl	$0xffffffff,0x08(%esp)
00001ef8	calll	KeyValues::GetInt(char const*, int)
00001efd	jmp	0x00001f04
00001eff	movl	$0xffffffff,%eax
00001f04	addl	$0x10,%esp
00001f07	popl	%esi
00001f08	popl	%edi
00001f09	popl	%ebp
00001f0a	ret
00001f0b	nopl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::CMDLSequencePickerFrame(vgui::Panel*, char const*):
00001f10	pushl	%ebp
00001f11	movl	%esp,%ebp
00001f13	pushl	%ebx
00001f14	pushl	%edi
00001f15	pushl	%esi
00001f16	subl	$0x3c,%esp
00001f19	calll	0x00001f1e
00001f1e	popl	%edi
00001f1f	leal	0xaceca-0x1f1e(%edi),%eax
00001f25	movl	%eax,0x0c(%esp)
00001f29	movl	0x0c(%ebp),%eax
00001f2c	movl	%eax,0x08(%esp)
00001f30	leal	VTT for CMDLSequencePickerFrame-0x1f1e+0x00000004(%edi),%eax
00001f36	movl	%eax,0xd8(%ebp)
00001f39	movl	%eax,0x04(%esp)
00001f3d	movl	0x08(%ebp),%esi
00001f40	movl	%esi,(%esp)
00001f43	movl	$0x00000001,0x14(%esp)
00001f4b	movl	$0x00000001,0x10(%esp)
00001f53	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00001f58	leal	vtable for CMDLSequencePickerFrame-0x1f1e+0x0000000c(%edi),%eax
00001f5e	movl	%eax,(%esi)
00001f60	testb	$0x01,CMDLSequencePickerFrame::ChainToMap()::chained-0x1f1e(%edi)
00001f67	jne	0x00001f9e
00001f69	movb	$0x01,CMDLSequencePickerFrame::ChainToMap()::chained-0x1f1e(%edi)
00001f70	leal	0xacf5f-0x1f1e(%edi),%eax
00001f76	movl	%eax,(%esp)
00001f79	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001f7e	movl	%eax,%esi
00001f80	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x1f1e(%edi),%eax
00001f86	movl	%eax,0x1c(%esi)
00001f89	testl	%esi,%esi
00001f8b	je	0x00001f9e
00001f8d	leal	0xacf9e-0x1f1e(%edi),%eax
00001f93	movl	%eax,(%esp)
00001f96	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001f9b	movl	%eax,0x18(%esi)
00001f9e	testb	$0x01,CMDLSequencePickerFrame::ChainToAnimationMap()::chained-0x1f1e(%edi)
00001fa5	jne	0x00001fdc
00001fa7	movb	$0x01,CMDLSequencePickerFrame::ChainToAnimationMap()::chained-0x1f1e(%edi)
00001fae	leal	0xacf5f-0x1f1e(%edi),%eax
00001fb4	movl	%eax,(%esp)
00001fb7	calll	FindOrAddPanelAnimationMap(char const*)
00001fbc	movl	%eax,%esi
00001fbe	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x1f1e(%edi),%eax
00001fc4	movl	%eax,0x18(%esi)
00001fc7	testl	%esi,%esi
00001fc9	je	0x00001fdc
00001fcb	leal	0xacf9e-0x1f1e(%edi),%eax
00001fd1	movl	%eax,(%esp)
00001fd4	calll	FindOrAddPanelAnimationMap(char const*)
00001fd9	movl	%eax,0x14(%esi)
00001fdc	testb	$0x01,CMDLSequencePickerFrame::KB_ChainToMap()::chained-0x1f1e(%edi)
00001fe3	jne	0x0000201a
00001fe5	movb	$0x01,CMDLSequencePickerFrame::KB_ChainToMap()::chained-0x1f1e(%edi)
00001fec	leal	0xacf5f-0x1f1e(%edi),%eax
00001ff2	movl	%eax,(%esp)
00001ff5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001ffa	movl	%eax,%esi
00001ffc	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x1f1e(%edi),%eax
00002002	movl	%eax,0x44(%esi)
00002005	testl	%esi,%esi
00002007	je	0x0000201a
00002009	leal	0xacf9e-0x1f1e(%edi),%eax
0000200f	movl	%eax,(%esp)
00002012	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00002017	movl	%eax,0x18(%esi)
0000201a	testb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnOK::InitVar()::bAdded-0x1f1e(%edi)
00002021	movl	%edi,%esi
00002023	jne	0x0000207b
00002025	movb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnOK::InitVar()::bAdded-0x1f1e(%esi)
0000202c	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xe4(%ebp)
00002033	movl	$0x00000451,0xe0(%ebp)
0000203a	movsd	0xe0(%ebp),%xmm0
0000203f	movsd	%xmm0,0x04(%esp)
00002045	leal	0xaceed-0x1f1e(%esi),%eax
0000204b	movl	%eax,(%esp)
0000204e	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00002056	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000205e	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00002066	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000206e	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00002076	calll	CMDLSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000207b	testb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnCancel::InitVar()::bAdded-0x1f1e(%esi)
00002082	jne	0x000020da
00002084	movb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnCancel::InitVar()::bAdded-0x1f1e(%esi)
0000208b	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xec(%ebp)
00002092	movl	$0x00000455,0xe8(%ebp)
00002099	movsd	0xe8(%ebp),%xmm0
0000209e	movsd	%xmm0,0x04(%esp)
000020a4	leal	0xacf06-0x1f1e(%esi),%eax
000020aa	movl	%eax,(%esp)
000020ad	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
000020b5	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
000020bd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000020c5	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000020cd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000020d5	calll	CMDLSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000020da	movl	$0x000001f4,(%esp)
000020e1	calll	operator new(unsigned long)
000020e6	movl	%eax,%edi
000020e8	movl	0x08(%ebp),%ebx
000020eb	movl	%ebx,0x04(%esp)
000020ef	movl	%edi,(%esp)
000020f2	calll	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)
000020f7	movl	0x10(%ebp),%ecx
000020fa	movl	%edi,0x00000244(%ebx)
00002100	movl	(%ebx),%eax
00002102	movl	0x000003ac(%eax),%eax
00002108	movl	%ecx,0x04(%esp)
0000210c	movl	%ebx,(%esp)
0000210f	movl	$0x00000001,0x08(%esp)
00002117	call	*%eax
00002119	movl	0x08(%ebp),%ecx
0000211c	movl	(%ecx),%eax
0000211e	movl	0x000003d4(%eax),%eax
00002124	movl	%ecx,(%esp)
00002127	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000212f	call	*%eax
00002131	movl	0x08(%ebp),%ecx
00002134	movl	(%ecx),%eax
00002136	movl	0x000003ec(%eax),%eax
0000213c	movl	%ecx,(%esp)
0000213f	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00002147	call	*%eax
00002149	movl	0x08(%ebp),%ecx
0000214c	movl	(%ecx),%eax
0000214e	movl	0x000003cc(%eax),%eax
00002154	movl	%ecx,(%esp)
00002157	movl	$0x00000001,0x04(%esp)
0000215f	call	*%eax
00002161	movl	0x08(%ebp),%eax
00002164	movl	%eax,(%esp)
00002167	movl	$0x000001e0,0x08(%esp)
0000216f	movl	$0x00000280,0x04(%esp)
00002177	calll	vgui::Panel::SetMinimumSize(int, int)
0000217c	movl	0x08(%ebp),%ecx
0000217f	movl	(%ecx),%eax
00002181	movl	0x000003b4(%eax),%eax
00002187	movl	%ecx,(%esp)
0000218a	call	*%eax
0000218c	movl	0x08(%ebp),%eax
0000218f	movl	0x00000244(%eax),%eax
00002195	movl	(%eax),%ecx
00002197	movl	0x000003ac(%ecx),%ecx
0000219d	movl	%eax,(%esp)
000021a0	call	*%ecx
000021a2	movl	$0x00000224,(%esp)
000021a9	calll	operator new(unsigned long)
000021ae	movl	%eax,%edi
000021b0	movl	0x08(%ebp),%ebx
000021b3	movl	%ebx,0x10(%esp)
000021b7	movl	%esi,0xdc(%ebp)
000021ba	leal	0xacee4-0x1f1e(%esi),%eax
000021c0	movl	%eax,0x0c(%esp)
000021c4	leal	0xacee1-0x1f1e(%esi),%eax
000021ca	movl	%eax,0x08(%esp)
000021ce	movl	%ebx,0x04(%esp)
000021d2	movl	%edi,(%esp)
000021d5	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000021dd	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
000021e2	movl	%edi,0x00000248(%ebx)
000021e8	movl	(%edi),%eax
000021ea	movl	0x0000045c(%eax),%esi
000021f0	movl	$0x00000020,(%esp)
000021f7	calll	KeyValues::operator new(unsigned long)
000021fc	movl	%eax,%ebx
000021fe	movl	0xdc(%ebp),%eax
00002201	leal	0xaceed-0x1f1e(%eax),%eax
00002207	movl	%eax,0x04(%esp)
0000220b	movl	%ebx,(%esp)
0000220e	calll	KeyValues::KeyValues(char const*)
00002213	movl	%ebx,0x04(%esp)
00002217	movl	%edi,(%esp)
0000221a	call	*%esi
0000221c	movl	$0x00000224,(%esp)
00002223	calll	operator new(unsigned long)
00002228	movl	%eax,%edi
0000222a	movl	0x08(%ebp),%ebx
0000222d	movl	%ebx,0x10(%esp)
00002231	movl	0xdc(%ebp),%ecx
00002234	leal	0xacef9-0x1f1e(%ecx),%eax
0000223a	movl	%eax,0x0c(%esp)
0000223e	leal	0xacef2-0x1f1e(%ecx),%eax
00002244	movl	%eax,0x08(%esp)
00002248	movl	%ebx,0x04(%esp)
0000224c	movl	%edi,(%esp)
0000224f	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00002257	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000225c	movl	%edi,0x0000024c(%ebx)
00002262	movl	0x00000248(%ebx),%esi
00002268	movl	(%esi),%eax
0000226a	movl	0x0000045c(%eax),%ebx
00002270	movl	$0x00000020,(%esp)
00002277	calll	KeyValues::operator new(unsigned long)
0000227c	movl	%eax,%edi
0000227e	movl	0xdc(%ebp),%eax
00002281	leal	0xacf06-0x1f1e(%eax),%eax
00002287	movl	%eax,0x04(%esp)
0000228b	movl	%edi,(%esp)
0000228e	calll	KeyValues::KeyValues(char const*)
00002293	movl	%edi,0x04(%esp)
00002297	movl	%esi,(%esp)
0000229a	call	*%ebx
0000229c	movl	0x08(%ebp),%eax
0000229f	movl	0x00000248(%eax),%ecx
000022a5	movl	(%ecx),%eax
000022a7	movl	0x000000dc(%eax),%eax
000022ad	movl	%ecx,(%esp)
000022b0	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000022b8	call	*%eax
000022ba	movl	0xdc(%ebp),%eax
000022bd	movl	0xb44d7-0x1f1e(%eax),%eax
000022c3	movl	(%eax),%edi
000022c5	movl	(%edi),%eax
000022c7	movl	0x48(%eax),%esi
000022ca	movl	0x08(%ebp),%ecx
000022cd	movl	(%ecx),%eax
000022cf	movl	(%eax),%eax
000022d1	movl	%ecx,(%esp)
000022d4	call	*%eax
000022d6	movl	%eax,0x04(%esp)
000022da	movl	%edi,(%esp)
000022dd	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
000022e5	call	*%esi
000022e7	addl	$0x3c,%esp
000022ea	popl	%esi
000022eb	popl	%edi
000022ec	popl	%ebx
000022ed	popl	%ebp
000022ee	ret
000022ef	movl	%eax,%esi
000022f1	movl	0x08(%ebp),%ebx
000022f4	jmp	0x00002322
000022f6	movl	%eax,%esi
000022f8	movl	%edi,(%esp)
000022fb	calll	operator delete(void*)
00002300	jmp	0x00002322
00002302	jmp	0x000022f6
00002304	movl	%eax,%esi
00002306	movl	%ebx,(%esp)
00002309	calll	KeyValues::operator delete(void*)
0000230e	movl	0x08(%ebp),%ebx
00002311	jmp	0x00002322
00002313	jmp	0x000022f6
00002315	movl	%eax,%esi
00002317	movl	%edi,(%esp)
0000231a	calll	KeyValues::operator delete(void*)
0000231f	movl	0x08(%ebp),%ebx
00002322	movl	0xd8(%ebp),%eax
00002325	movl	%eax,0x04(%esp)
00002329	movl	%ebx,(%esp)
0000232c	calll	vgui::Frame::~Frame()
00002331	movl	%esi,(%esp)
00002334	calll	__Unwind_Resume
00002339	calll	std::terminate()
0000233e	nop
CMDLSequencePickerFrame::CMDLSequencePickerFrame(vgui::Panel*, char const*):
00002340	pushl	%ebp
00002341	movl	%esp,%ebp
00002343	pushl	%ebx
00002344	pushl	%edi
00002345	pushl	%esi
00002346	subl	$0x3c,%esp
00002349	calll	0x0000234e
0000234e	popl	%ebx
0000234f	leal	0xaceca-0x234e(%ebx),%eax
00002355	movl	%eax,0x0c(%esp)
00002359	movl	0x10(%ebp),%eax
0000235c	movl	%eax,0x08(%esp)
00002360	movl	0x0c(%ebp),%esi
00002363	leal	0x04(%esi),%eax
00002366	movl	%eax,0xd8(%ebp)
00002369	movl	%eax,0x04(%esp)
0000236d	movl	0x08(%ebp),%edi
00002370	movl	%edi,(%esp)
00002373	movl	$0x00000001,0x14(%esp)
0000237b	movl	$0x00000001,0x10(%esp)
00002383	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00002388	movl	(%esi),%eax
0000238a	movl	%eax,(%edi)
0000238c	testb	$0x01,CMDLSequencePickerFrame::ChainToMap()::chained-0x234e(%ebx)
00002393	jne	0x000023ca
00002395	movb	$0x01,CMDLSequencePickerFrame::ChainToMap()::chained-0x234e(%ebx)
0000239c	leal	0xacf5f-0x234e(%ebx),%eax
000023a2	movl	%eax,(%esp)
000023a5	calll	vgui::FindOrAddPanelMessageMap(char const*)
000023aa	movl	%eax,%esi
000023ac	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x234e(%ebx),%eax
000023b2	movl	%eax,0x1c(%esi)
000023b5	testl	%esi,%esi
000023b7	je	0x000023ca
000023b9	leal	0xacf9e-0x234e(%ebx),%eax
000023bf	movl	%eax,(%esp)
000023c2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000023c7	movl	%eax,0x18(%esi)
000023ca	testb	$0x01,CMDLSequencePickerFrame::ChainToAnimationMap()::chained-0x234e(%ebx)
000023d1	jne	0x00002408
000023d3	movb	$0x01,CMDLSequencePickerFrame::ChainToAnimationMap()::chained-0x234e(%ebx)
000023da	leal	0xacf5f-0x234e(%ebx),%eax
000023e0	movl	%eax,(%esp)
000023e3	calll	FindOrAddPanelAnimationMap(char const*)
000023e8	movl	%eax,%esi
000023ea	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x234e(%ebx),%eax
000023f0	movl	%eax,0x18(%esi)
000023f3	testl	%esi,%esi
000023f5	je	0x00002408
000023f7	leal	0xacf9e-0x234e(%ebx),%eax
000023fd	movl	%eax,(%esp)
00002400	calll	FindOrAddPanelAnimationMap(char const*)
00002405	movl	%eax,0x14(%esi)
00002408	testb	$0x01,CMDLSequencePickerFrame::KB_ChainToMap()::chained-0x234e(%ebx)
0000240f	jne	0x00002446
00002411	movb	$0x01,CMDLSequencePickerFrame::KB_ChainToMap()::chained-0x234e(%ebx)
00002418	leal	0xacf5f-0x234e(%ebx),%eax
0000241e	movl	%eax,(%esp)
00002421	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00002426	movl	%eax,%esi
00002428	leal	CMDLSequencePickerFrame::GetPanelClassName()-0x234e(%ebx),%eax
0000242e	movl	%eax,0x44(%esi)
00002431	testl	%esi,%esi
00002433	je	0x00002446
00002435	leal	0xacf9e-0x234e(%ebx),%eax
0000243b	movl	%eax,(%esp)
0000243e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00002443	movl	%eax,0x18(%esi)
00002446	testb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnOK::InitVar()::bAdded-0x234e(%ebx)
0000244d	movl	%ebx,%esi
0000244f	jne	0x000024a7
00002451	movb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnOK::InitVar()::bAdded-0x234e(%esi)
00002458	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xe4(%ebp)
0000245f	movl	$0x00000451,0xe0(%ebp)
00002466	movsd	0xe0(%ebp),%xmm0
0000246b	movsd	%xmm0,0x04(%esp)
00002471	leal	0xaceed-0x234e(%esi),%eax
00002477	movl	%eax,(%esp)
0000247a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
00002482	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
0000248a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00002492	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
0000249a	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
000024a2	calll	CMDLSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000024a7	testb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnCancel::InitVar()::bAdded-0x234e(%esi)
000024ae	jne	0x00002506
000024b0	movb	$0x01,CMDLSequencePickerFrame::PanelMessageFunc_OnCancel::InitVar()::bAdded-0x234e(%esi)
000024b7	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xec(%ebp)
000024be	movl	$0x00000455,0xe8(%ebp)
000024c5	movsd	0xe8(%ebp),%xmm0
000024ca	movsd	%xmm0,0x04(%esp)
000024d0	leal	0xacf06-0x234e(%esi),%eax
000024d6	movl	%eax,(%esp)
000024d9	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x1c(%esp)
000024e1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x18(%esp)
000024e9	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
000024f1	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x10(%esp)
000024f9	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x0c(%esp)
00002501	calll	CMDLSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002506	movl	$0x000001f4,(%esp)
0000250d	calll	operator new(unsigned long)
00002512	movl	%eax,%edi
00002514	movl	0x08(%ebp),%ebx
00002517	movl	%ebx,0x04(%esp)
0000251b	movl	%edi,(%esp)
0000251e	calll	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)
00002523	movl	0x14(%ebp),%ecx
00002526	movl	%edi,0x00000244(%ebx)
0000252c	movl	(%ebx),%eax
0000252e	movl	0x000003ac(%eax),%eax
00002534	movl	%ecx,0x04(%esp)
00002538	movl	%ebx,(%esp)
0000253b	movl	$0x00000001,0x08(%esp)
00002543	call	*%eax
00002545	movl	0x08(%ebp),%ecx
00002548	movl	(%ecx),%eax
0000254a	movl	0x000003d4(%eax),%eax
00002550	movl	%ecx,(%esp)
00002553	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
0000255b	call	*%eax
0000255d	movl	0x08(%ebp),%ecx
00002560	movl	(%ecx),%eax
00002562	movl	0x000003ec(%eax),%eax
00002568	movl	%ecx,(%esp)
0000256b	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00002573	call	*%eax
00002575	movl	0x08(%ebp),%ecx
00002578	movl	(%ecx),%eax
0000257a	movl	0x000003cc(%eax),%eax
00002580	movl	%ecx,(%esp)
00002583	movl	$0x00000001,0x04(%esp)
0000258b	call	*%eax
0000258d	movl	0x08(%ebp),%eax
00002590	movl	%eax,(%esp)
00002593	movl	$0x000001e0,0x08(%esp)
0000259b	movl	$0x00000280,0x04(%esp)
000025a3	calll	vgui::Panel::SetMinimumSize(int, int)
000025a8	movl	0x08(%ebp),%ecx
000025ab	movl	(%ecx),%eax
000025ad	movl	0x000003b4(%eax),%eax
000025b3	movl	%ecx,(%esp)
000025b6	call	*%eax
000025b8	movl	0x08(%ebp),%eax
000025bb	movl	0x00000244(%eax),%eax
000025c1	movl	(%eax),%ecx
000025c3	movl	0x000003ac(%ecx),%ecx
000025c9	movl	%eax,(%esp)
000025cc	call	*%ecx
000025ce	movl	$0x00000224,(%esp)
000025d5	calll	operator new(unsigned long)
000025da	movl	%eax,%edi
000025dc	movl	0x08(%ebp),%ebx
000025df	movl	%ebx,0x10(%esp)
000025e3	movl	%esi,0xdc(%ebp)
000025e6	leal	0xacee4-0x234e(%esi),%eax
000025ec	movl	%eax,0x0c(%esp)
000025f0	leal	0xacee1-0x234e(%esi),%eax
000025f6	movl	%eax,0x08(%esp)
000025fa	movl	%ebx,0x04(%esp)
000025fe	movl	%edi,(%esp)
00002601	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00002609	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000260e	movl	%edi,0x00000248(%ebx)
00002614	movl	(%edi),%eax
00002616	movl	0x0000045c(%eax),%esi
0000261c	movl	$0x00000020,(%esp)
00002623	calll	KeyValues::operator new(unsigned long)
00002628	movl	%eax,%ebx
0000262a	movl	0xdc(%ebp),%eax
0000262d	leal	0xaceed-0x234e(%eax),%eax
00002633	movl	%eax,0x04(%esp)
00002637	movl	%ebx,(%esp)
0000263a	calll	KeyValues::KeyValues(char const*)
0000263f	movl	%ebx,0x04(%esp)
00002643	movl	%edi,(%esp)
00002646	call	*%esi
00002648	movl	$0x00000224,(%esp)
0000264f	calll	operator new(unsigned long)
00002654	movl	%eax,%edi
00002656	movl	0x08(%ebp),%ebx
00002659	movl	%ebx,0x10(%esp)
0000265d	movl	0xdc(%ebp),%ecx
00002660	leal	0xacef9-0x234e(%ecx),%eax
00002666	movl	%eax,0x0c(%esp)
0000266a	leal	0xacef2-0x234e(%ecx),%eax
00002670	movl	%eax,0x08(%esp)
00002674	movl	%ebx,0x04(%esp)
00002678	movl	%edi,(%esp)
0000267b	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x14(%esp)
00002683	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00002688	movl	%edi,0x0000024c(%ebx)
0000268e	movl	0x00000248(%ebx),%esi
00002694	movl	(%esi),%eax
00002696	movl	0x0000045c(%eax),%ebx
0000269c	movl	$0x00000020,(%esp)
000026a3	calll	KeyValues::operator new(unsigned long)
000026a8	movl	%eax,%edi
000026aa	movl	0xdc(%ebp),%eax
000026ad	leal	0xacf06-0x234e(%eax),%eax
000026b3	movl	%eax,0x04(%esp)
000026b7	movl	%edi,(%esp)
000026ba	calll	KeyValues::KeyValues(char const*)
000026bf	movl	%edi,0x04(%esp)
000026c3	movl	%esi,(%esp)
000026c6	call	*%ebx
000026c8	movl	0x08(%ebp),%eax
000026cb	movl	0x00000248(%eax),%ecx
000026d1	movl	(%ecx),%eax
000026d3	movl	0x000000dc(%eax),%eax
000026d9	movl	%ecx,(%esp)
000026dc	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
000026e4	call	*%eax
000026e6	movl	0xdc(%ebp),%eax
000026e9	movl	0xb44d7-0x234e(%eax),%eax
000026ef	movl	(%eax),%edi
000026f1	movl	(%edi),%eax
000026f3	movl	0x48(%eax),%esi
000026f6	movl	0x08(%ebp),%ecx
000026f9	movl	(%ecx),%eax
000026fb	movl	(%eax),%eax
000026fd	movl	%ecx,(%esp)
00002700	call	*%eax
00002702	movl	%eax,0x04(%esp)
00002706	movl	%edi,(%esp)
00002709	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00002711	call	*%esi
00002713	addl	$0x3c,%esp
00002716	popl	%esi
00002717	popl	%edi
00002718	popl	%ebx
00002719	popl	%ebp
0000271a	ret
0000271b	movl	%eax,%esi
0000271d	movl	0x08(%ebp),%ebx
00002720	jmp	0x0000274e
00002722	movl	%eax,%esi
00002724	movl	%edi,(%esp)
00002727	calll	operator delete(void*)
0000272c	jmp	0x0000274e
0000272e	jmp	0x00002722
00002730	movl	%eax,%esi
00002732	movl	%ebx,(%esp)
00002735	calll	KeyValues::operator delete(void*)
0000273a	movl	0x08(%ebp),%ebx
0000273d	jmp	0x0000274e
0000273f	jmp	0x00002722
00002741	movl	%eax,%esi
00002743	movl	%edi,(%esp)
00002746	calll	KeyValues::operator delete(void*)
0000274b	movl	0x08(%ebp),%ebx
0000274e	movl	0xd8(%ebp),%eax
00002751	movl	%eax,0x04(%esp)
00002755	movl	%ebx,(%esp)
00002758	calll	vgui::Frame::~Frame()
0000275d	movl	%esi,(%esp)
00002760	calll	__Unwind_Resume
00002765	calll	std::terminate()
0000276a	nopw	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::~CMDLSequencePickerFrame():
00002770	pushl	%ebp
00002771	movl	%esp,%ebp
00002773	pushl	%edi
00002774	pushl	%esi
00002775	subl	$0x10,%esp
00002778	calll	0x0000277d
0000277d	popl	%eax
0000277e	movl	0x08(%ebp),%edi
00002781	leal	VTT for CMDLSequencePickerFrame-0x277d+0x00000004(%eax),%eax
00002787	movl	%eax,0x04(%esp)
0000278b	movl	%edi,(%esp)
0000278e	calll	vgui::Frame::~Frame()
00002793	addl	$0x10,%esp
00002796	popl	%esi
00002797	popl	%edi
00002798	popl	%ebp
00002799	jmp	operator delete(void*)
0000279e	movl	%eax,%esi
000027a0	movl	%edi,(%esp)
000027a3	calll	operator delete(void*)
000027a8	movl	%esi,(%esp)
000027ab	calll	__Unwind_Resume
CMDLSequencePickerFrame::~CMDLSequencePickerFrame():
000027b0	pushl	%ebp
000027b1	movl	%esp,%ebp
000027b3	subl	$0x08,%esp
000027b6	calll	0x000027bb
000027bb	popl	%eax
000027bc	leal	VTT for CMDLSequencePickerFrame-0x27bb+0x00000004(%eax),%eax
000027c2	movl	%eax,0x04(%esp)
000027c6	movl	0x08(%ebp),%eax
000027c9	movl	%eax,(%esp)
000027cc	calll	vgui::Frame::~Frame()
000027d1	addl	$0x08,%esp
000027d4	popl	%ebp
000027d5	ret
000027d6	nopw	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::~CMDLSequencePickerFrame():
000027e0	pushl	%ebp
000027e1	movl	%esp,%ebp
000027e3	subl	$0x08,%esp
000027e6	movl	0x0c(%ebp),%eax
000027e9	addl	$0x04,%eax
000027ec	movl	%eax,0x04(%esp)
000027f0	movl	0x08(%ebp),%eax
000027f3	movl	%eax,(%esp)
000027f6	calll	vgui::Frame::~Frame()
000027fb	addl	$0x08,%esp
000027fe	popl	%ebp
000027ff	ret
CMDLSequencePickerFrame::OnTick():
00002800	pushl	%ebp
00002801	movl	%esp,%ebp
00002803	pushl	%ebx
00002804	pushl	%edi
00002805	pushl	%esi
00002806	subl	$0x1c,%esp
00002809	calll	0x0000280e
0000280e	popl	%edi
0000280f	movl	0x08(%ebp),%ebx
00002812	movl	%ebx,(%esp)
00002815	calll	vgui::Panel::OnTick()
0000281a	movl	0x00000244(%ebx),%esi
00002820	cmpw	$0xff,0x000001f0(%esi)
00002828	jne	0x00002832
0000282a	leal	0xacec9-0x280e(%edi),%eax
00002830	jmp	0x00002850
00002832	calll	vgui::MDLCache()
00002837	movl	(%eax),%ecx
00002839	movzwl	0x000001f0(%esi),%edx
00002840	movl	%edx,0x04(%esp)
00002844	movl	%eax,(%esp)
00002847	call	*0x5c(%ecx)
0000284a	movl	0x00000244(%ebx),%esi
00002850	movb	(%eax),%al
00002852	movb	%al,0xf3(%ebp)
00002855	movl	0x000001e8(%esi),%ecx
0000285b	movl	(%ecx),%eax
0000285d	movl	%ecx,(%esp)
00002860	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00002868	call	*0x000003f8(%eax)
0000286e	xorb	%cl,%cl
00002870	testl	%eax,%eax
00002872	js	0x000028a9
00002874	movl	0x000001e8(%esi),%edx
0000287a	movl	(%edx),%ecx
0000287c	movl	%eax,0x04(%esp)
00002880	movl	%edx,(%esp)
00002883	call	*0x0000039c(%ecx)
00002889	leal	0xace9f-0x280e(%edi),%ecx
0000288f	movl	%ecx,0x04(%esp)
00002893	movl	%eax,(%esp)
00002896	movl	$0xffffffff,0x08(%esp)
0000289e	calll	KeyValues::GetInt(char const*, int)
000028a3	cmpl	$0xff,%eax
000028a6	setne	%cl
000028a9	cmpb	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0xf3(%ebp)
000028ad	setne	%al
000028b0	andb	%cl,%al
000028b2	movzbl	%al,%edx
000028b5	movl	0x00000248(%ebx),%ecx
000028bb	movl	(%ecx),%eax
000028bd	movl	%edx,0x04(%esp)
000028c1	movl	%ecx,(%esp)
000028c4	call	*0x000000dc(%eax)
000028ca	addl	$0x1c,%esp
000028cd	popl	%esi
000028ce	popl	%edi
000028cf	popl	%ebx
000028d0	popl	%ebp
000028d1	ret
000028d2	nopw	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::PerformLayout():
000028e0	pushl	%ebp
000028e1	movl	%esp,%ebp
000028e3	pushl	%ebx
000028e4	pushl	%edi
000028e5	pushl	%esi
000028e6	subl	$0x2c,%esp
000028e9	movl	0x08(%ebp),%esi
000028ec	movl	%esi,(%esp)
000028ef	calll	vgui::Frame::PerformLayout()
000028f4	movl	(%esi),%eax
000028f6	leal	0xe4(%ebp),%ecx
000028f9	movl	%ecx,0x10(%esp)
000028fd	leal	0xe8(%ebp),%ecx
00002900	movl	%ecx,0x0c(%esp)
00002904	leal	0xec(%ebp),%ecx
00002907	movl	%ecx,0x08(%esp)
0000290b	leal	0xf0(%ebp),%ecx
0000290e	movl	%ecx,0x04(%esp)
00002912	movl	%esi,(%esp)
00002915	call	*0x00000440(%eax)
0000291b	movl	0xe4(%ebp),%ecx
0000291e	addl	$0xe8,%ecx
00002921	movl	%ecx,0xe4(%ebp)
00002924	movl	0x00000244(%esi),%eax
0000292a	movl	0xf0(%ebp),%edx
0000292d	movl	0xec(%ebp),%edi
00002930	movl	0xe8(%ebp),%ebx
00002933	movl	%ecx,0x10(%esp)
00002937	movl	%ebx,0x0c(%esp)
0000293b	movl	%edi,0x08(%esp)
0000293f	movl	%edx,0x04(%esp)
00002943	movl	%eax,(%esp)
00002946	calll	vgui::Panel::SetBounds(int, int, int, int)
0000294b	movl	0xe4(%ebp),%eax
0000294e	addl	$0x05,%eax
00002951	movl	%eax,0xe4(%ebp)
00002954	movl	0xe8(%ebp),%ecx
00002957	leal	0xffffff06(%ecx),%edx
0000295d	shrl	$0x1f,%edx
00002960	leal	0xffffff06(%ecx,%edx),%ecx
00002967	sarl	%ecx
00002969	movl	%ecx,0xf0(%ebp)
0000296c	movl	0x00000248(%esi),%edx
00002972	addl	0xec(%ebp),%eax
00002975	movl	%eax,0x08(%esp)
00002979	movl	%ecx,0x04(%esp)
0000297d	movl	%edx,(%esp)
00002980	movl	$0x00000010,0x10(%esp)
00002988	movl	$0x00000078,0x0c(%esp)
00002990	calll	vgui::Panel::SetBounds(int, int, int, int)
00002995	movl	$0x00000082,%eax
0000299a	addl	0xf0(%ebp),%eax
0000299d	movl	%eax,0xf0(%ebp)
000029a0	movl	0x0000024c(%esi),%ecx
000029a6	movl	0xe4(%ebp),%edx
000029a9	addl	0xec(%ebp),%edx
000029ac	movl	%edx,0x08(%esp)
000029b0	movl	%eax,0x04(%esp)
000029b4	movl	%ecx,(%esp)
000029b7	movl	$0x00000010,0x10(%esp)
000029bf	movl	$0x00000078,0x0c(%esp)
000029c7	calll	vgui::Panel::SetBounds(int, int, int, int)
000029cc	addl	$0x2c,%esp
000029cf	popl	%esi
000029d0	popl	%edi
000029d1	popl	%ebx
000029d2	popl	%ebp
000029d3	ret
000029d4	nopw	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::OnCancel():
000029e0	pushl	%ebp
000029e1	movl	%esp,%ebp
000029e3	pushl	%ebx
000029e4	pushl	%edi
000029e5	pushl	%esi
000029e6	subl	$0x1c,%esp
000029e9	calll	0x000029ee
000029ee	popl	%edi
000029ef	movl	$0x00000020,(%esp)
000029f6	calll	KeyValues::operator new(unsigned long)
000029fb	movl	%eax,%esi
000029fd	leal	0xacf0f-0x29ee(%edi),%eax
00002a03	movl	%eax,0x04(%esp)
00002a07	movl	%esi,(%esp)
00002a0a	calll	KeyValues::KeyValues(char const*)
00002a0f	movl	%esi,0xf0(%ebp)
00002a12	movl	0x08(%ebp),%eax
00002a15	movl	0x00000244(%eax),%esi
00002a1b	leal	0xacec9-0x29ee(%edi),%ebx
00002a21	cmpw	$0xff,0x000001f0(%esi)
00002a29	movl	%ebx,%eax
00002a2b	je	0x00002a45
00002a2d	calll	vgui::MDLCache()
00002a32	movl	(%eax),%ecx
00002a34	movzwl	0x000001f0(%esi),%edx
00002a3b	movl	%edx,0x04(%esp)
00002a3f	movl	%eax,(%esp)
00002a42	call	*0x5c(%ecx)
00002a45	movl	%eax,0x08(%esp)
00002a49	leal	0xacf1d-0x29ee(%edi),%eax
00002a4f	movl	%eax,0x04(%esp)
00002a53	movl	0xf0(%ebp),%eax
00002a56	movl	%eax,(%esp)
00002a59	calll	KeyValues::SetString(char const*, char const*)
00002a5e	movl	0x08(%ebp),%eax
00002a61	movl	0x00000244(%eax),%esi
00002a67	movl	0x000001e8(%esi),%ecx
00002a6d	movl	(%ecx),%eax
00002a6f	movl	%ecx,(%esp)
00002a72	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00002a7a	call	*0x000003f8(%eax)
00002a80	testl	%eax,%eax
00002a82	js	0x00002abe
00002a84	movl	0x000001e8(%esi),%edx
00002a8a	movl	(%edx),%ecx
00002a8c	movl	%eax,0x04(%esp)
00002a90	movl	%edx,(%esp)
00002a93	call	*0x0000039c(%ecx)
00002a99	leal	0xacd9e-0x29ee(%edi),%ecx
00002a9f	movl	%ecx,0x04(%esp)
00002aa3	movl	%eax,(%esp)
00002aa6	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x08(%esp)
00002aae	calll	KeyValues::GetString(char const*, char const*)
00002ab3	leal	0xacec9-0x29ee(%edi),%ebx
00002ab9	testl	%eax,%eax
00002abb	cmovnel	%eax,%ebx
00002abe	movl	%ebx,0x08(%esp)
00002ac2	leal	0xacf27-0x29ee(%edi),%eax
00002ac8	movl	%eax,0x04(%esp)
00002acc	movl	0xf0(%ebp),%esi
00002acf	movl	%esi,(%esp)
00002ad2	calll	KeyValues::SetString(char const*, char const*)
00002ad7	movl	0x08(%ebp),%eax
00002ada	movl	0x00000244(%eax),%ebx
00002ae0	movl	0x000001e8(%ebx),%ecx
00002ae6	movl	(%ecx),%eax
00002ae8	movl	%ecx,(%esp)
00002aeb	movl	CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*),0x04(%esp)
00002af3	call	*0x000003f8(%eax)
00002af9	movl	$0xffffffff,%ecx
00002afe	testl	%eax,%eax
00002b00	js	0x00002b33
00002b02	movl	0x000001e8(%ebx),%edx
00002b08	movl	(%edx),%ecx
00002b0a	movl	%eax,0x04(%esp)
00002b0e	movl	%edx,(%esp)
00002b11	call	*0x0000039c(%ecx)
00002b17	leal	0xace9f-0x29ee(%edi),%ecx
00002b1d	movl	%ecx,0x04(%esp)
00002b21	movl	%eax,(%esp)
00002b24	movl	$0xffffffff,0x08(%esp)
00002b2c	calll	KeyValues::GetInt(char const*, int)
00002b31	movl	%eax,%ecx
00002b33	movl	%ecx,0x08(%esp)
00002b37	leal	0xacf34-0x29ee(%edi),%eax
00002b3d	movl	%eax,0x04(%esp)
00002b41	movl	%esi,(%esp)
00002b44	calll	KeyValues::SetInt(char const*, int)
00002b49	movl	0x08(%ebp),%edi
00002b4c	movl	(%edi),%eax
00002b4e	movl	%esi,0x04(%esp)
00002b52	movl	%edi,(%esp)
00002b55	call	*0x000000c0(%eax)
00002b5b	movl	(%edi),%eax
00002b5d	movl	0x000003c0(%eax),%eax
00002b63	addl	$0x1c,%esp
00002b66	popl	%esi
00002b67	popl	%edi
00002b68	popl	%ebx
00002b69	popl	%ebp
00002b6a	jmp	*%eax
00002b6c	movl	%eax,%edi
00002b6e	movl	%esi,(%esp)
00002b71	calll	KeyValues::operator delete(void*)
00002b76	movl	%edi,(%esp)
00002b79	calll	__Unwind_Resume
00002b7e	calll	std::terminate()
00002b83	nopl	%cs:CMDLSequencePicker::CMDLSequencePicker(vgui::Panel*)(%eax,%eax)
CMDLSequencePickerFrame::OnOK():
00002b90	movl	0x04(%esp),%eax
00002b94	movl	(%eax),%eax
00002b96	movl	0x000003c0(%eax),%eax
00002b9c	jmp	*%eax
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(picker.o):
(__TEXT,__text) section
CPicker::CPicker(vgui::Panel*, char const*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x3c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	leal	0x53f34-0xe(%ebx),%eax
00000015	movl	%eax,0x0c(%esp)
00000019	movl	0x0c(%ebp),%eax
0000001c	movl	%eax,0x08(%esp)
00000020	leal	VTT for CPicker-0xe+0x00000004(%ebx),%eax
00000026	movl	%eax,0xe4(%ebp)
00000029	movl	%eax,0x04(%esp)
0000002d	movl	0x08(%ebp),%esi
00000030	movl	%esi,(%esp)
00000033	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000038	leal	vtable for CPicker-0xe+0x0000000c(%ebx),%eax
0000003e	movl	%eax,(%esi)
00000040	testb	$0x01,CPicker::ChainToMap()::chained-0xe(%ebx)
00000047	jne	0x0000007e
00000049	movb	$0x01,CPicker::ChainToMap()::chained-0xe(%ebx)
00000050	leal	0x54066-0xe(%ebx),%eax
00000056	movl	%eax,(%esp)
00000059	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005e	movl	%eax,%esi
00000060	leal	CPicker::GetPanelClassName()-0xe(%ebx),%eax
00000066	movl	%eax,0x1c(%esi)
00000069	testl	%esi,%esi
0000006b	je	0x0000007e
0000006d	leal	0x54086-0xe(%ebx),%eax
00000073	movl	%eax,(%esp)
00000076	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000007b	movl	%eax,0x18(%esi)
0000007e	testb	$0x01,CPicker::ChainToAnimationMap()::chained-0xe(%ebx)
00000085	jne	0x000000bc
00000087	movb	$0x01,CPicker::ChainToAnimationMap()::chained-0xe(%ebx)
0000008e	leal	0x54066-0xe(%ebx),%eax
00000094	movl	%eax,(%esp)
00000097	calll	FindOrAddPanelAnimationMap(char const*)
0000009c	movl	%eax,%esi
0000009e	leal	CPicker::GetPanelClassName()-0xe(%ebx),%eax
000000a4	movl	%eax,0x18(%esi)
000000a7	testl	%esi,%esi
000000a9	je	0x000000bc
000000ab	leal	0x54086-0xe(%ebx),%eax
000000b1	movl	%eax,(%esp)
000000b4	calll	FindOrAddPanelAnimationMap(char const*)
000000b9	movl	%eax,0x14(%esi)
000000bc	testb	$0x01,CPicker::KB_ChainToMap()::chained-0xe(%ebx)
000000c3	jne	0x000000fa
000000c5	movb	$0x01,CPicker::KB_ChainToMap()::chained-0xe(%ebx)
000000cc	leal	0x54066-0xe(%ebx),%eax
000000d2	movl	%eax,(%esp)
000000d5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000da	movl	%eax,%esi
000000dc	leal	CPicker::GetPanelClassName()-0xe(%ebx),%eax
000000e2	movl	%eax,0x44(%esi)
000000e5	testl	%esi,%esi
000000e7	je	0x000000fa
000000e9	leal	0x54086-0xe(%ebx),%eax
000000ef	movl	%eax,(%esp)
000000f2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f7	movl	%eax,0x18(%esi)
000000fa	testb	$0x01,CPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0xe(%ebx)
00000101	jne	0x00000159
00000103	movb	$0x01,CPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0xe(%ebx)
0000010a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0xec(%ebp)
00000111	movl	$0x000003ad,0xe8(%ebp)
00000118	movsd	0xe8(%ebp),%xmm0
0000011d	movsd	%xmm0,0x04(%esp)
00000123	leal	0x5407a-0xe(%ebx),%eax
00000129	movl	%eax,(%esp)
0000012c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x1c(%esp)
00000134	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x18(%esp)
0000013c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x14(%esp)
00000144	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x10(%esp)
0000014c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0c(%esp)
00000154	calll	CPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000159	movl	0x08(%ebp),%eax
0000015c	leal	0x000001b8(%eax),%eax
00000162	movl	%eax,0xe0(%ebp)
00000165	movl	%eax,(%esp)
00000168	calll	CUtlString::CUtlString()
0000016d	movl	0x14(%ebp),%eax
00000170	movl	0x10(%ebp),%ecx
00000173	movl	0x08(%ebp),%esi
00000176	movl	%ecx,0x000001c8(%esi)
0000017c	movl	%eax,0x000001cc(%esi)
00000182	movl	$0x00000280,(%esp)
00000189	calll	operator new(unsigned long)
0000018e	movl	%eax,%edi
00000190	leal	0x53f3b-0xe(%ebx),%eax
00000196	movl	%eax,0x08(%esp)
0000019a	movl	%esi,0x04(%esp)
0000019e	movl	%edi,(%esp)
000001a1	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
000001a6	movl	%edi,0x000001b4(%esi)
000001ac	movl	(%edi),%eax
000001ae	movl	0x0000034c(%eax),%eax
000001b4	movl	0x000001c8(%esi),%ecx
000001ba	movl	%ecx,0x0c(%esp)
000001be	leal	0x53f43-0xe(%ebx),%ecx
000001c4	movl	%ecx,0x08(%esp)
000001c8	movl	%edi,(%esp)
000001cb	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x14(%esp)
000001d3	movl	$0x00000034,0x10(%esp)
000001db	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
000001e3	call	*%eax
000001e5	movl	0x000001b4(%esi),%ecx
000001eb	movl	(%ecx),%eax
000001ed	movl	0x00000410(%eax),%eax
000001f3	movl	%ecx,(%esp)
000001f6	movl	$0x00000001,0x04(%esp)
000001fe	call	*%eax
00000200	movl	0x000001b4(%esi),%eax
00000206	movl	(%eax),%ecx
00000208	movl	0x00000420(%ecx),%ecx
0000020e	leal	0x53f4a-0xe(%ebx),%edx
00000214	movl	%edx,0x04(%esp)
00000218	movl	%eax,(%esp)
0000021b	call	*%ecx
0000021d	movl	0x000001b4(%esi),%ecx
00000223	movl	(%ecx),%eax
00000225	movl	0x00000240(%eax),%eax
0000022b	movl	%ecx,(%esp)
0000022e	movl	$0x00000001,0x04(%esp)
00000236	call	*%eax
00000238	movl	0x000001b4(%esi),%eax
0000023e	movl	(%eax),%ecx
00000240	movl	0x000000b4(%ecx),%ecx
00000246	movl	%esi,0x04(%esp)
0000024a	movl	%eax,(%esp)
0000024d	call	*%ecx
0000024f	movl	0x000001b4(%esi),%ecx
00000255	movl	(%ecx),%eax
00000257	movl	0x00000378(%eax),%eax
0000025d	leal	PickerBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0xe(%ebx),%edx
00000263	movl	%edx,0x08(%esp)
00000267	movl	%ecx,(%esp)
0000026a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000272	call	*%eax
00000274	movl	0x000001b4(%esi),%ecx
0000027a	movl	(%ecx),%eax
0000027c	movl	0x0000037c(%eax),%eax
00000282	movl	%ecx,(%esp)
00000285	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
0000028d	call	*%eax
0000028f	movl	$0x00000660,(%esp)
00000296	calll	operator new(unsigned long)
0000029b	movl	%eax,%edi
0000029d	leal	0x53f5a-0xe(%ebx),%eax
000002a3	movl	%eax,0x08(%esp)
000002a7	movl	%esi,0x04(%esp)
000002ab	movl	%edi,(%esp)
000002ae	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000002b3	movl	%edi,0x000001b0(%esi)
000002b9	movl	(%edi),%eax
000002bb	movl	0x000000b4(%eax),%eax
000002c1	movl	%esi,0x04(%esp)
000002c5	movl	%edi,(%esp)
000002c8	call	*%eax
000002ca	movl	0x000001b0(%esi),%ecx
000002d0	movl	(%ecx),%eax
000002d2	movl	0x30(%eax),%eax
000002d5	movl	%ecx,(%esp)
000002d8	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
000002e0	call	*%eax
000002e2	movl	(%esi),%eax
000002e4	movl	0x00000354(%eax),%eax
000002ea	leal	0x53f65-0xe(%ebx),%ecx
000002f0	movl	%ecx,0x04(%esp)
000002f4	movl	%esi,(%esp)
000002f7	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
000002ff	call	*%eax
00000301	addl	$0x3c,%esp
00000304	popl	%esi
00000305	popl	%edi
00000306	popl	%ebx
00000307	popl	%ebp
00000308	ret
00000309	movl	%eax,%esi
0000030b	jmp	0x0000034f
0000030d	movl	%eax,%esi
0000030f	jmp	0x0000031d
00000311	jmp	0x00000313
00000313	movl	%eax,%esi
00000315	movl	%edi,(%esp)
00000318	calll	operator delete(void*)
0000031d	movl	0x08(%ebp),%eax
00000320	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001c0(%eax)
00000327	movl	0xe0(%ebp),%ecx
0000032a	js	0x0000034f
0000032c	movl	(%ecx),%eax
0000032e	testl	%eax,%eax
00000330	movl	%ecx,%edi
00000332	je	0x00000342
00000334	movl	%eax,(%esp)
00000337	calll	_free
0000033c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),(%edi)
00000342	movl	0x08(%ebp),%eax
00000345	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001bc(%eax)
0000034f	movl	0xe4(%ebp),%eax
00000352	movl	%eax,0x04(%esp)
00000356	movl	0x08(%ebp),%eax
00000359	movl	%eax,(%esp)
0000035c	calll	vgui::EditablePanel::~EditablePanel()
00000361	movl	%esi,(%esp)
00000364	calll	__Unwind_Resume
00000369	calll	std::terminate()
0000036e	nop
PickerBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&):
00000370	pushl	%ebp
00000371	movl	%esp,%ebp
00000373	pushl	%ebx
00000374	pushl	%edi
00000375	pushl	%esi
00000376	subl	$0x0c,%esp
00000379	calll	0x0000037e
0000037e	popl	%ecx
0000037f	movl	0x0c(%ebp),%eax
00000382	movl	(%eax),%eax
00000384	leal	0x53fab-0x37e(%ecx),%edi
0000038a	movl	%edi,0x08(%esp)
0000038e	leal	0x53f43-0x37e(%ecx),%ebx
00000394	movl	%ebx,0x04(%esp)
00000398	movl	%eax,(%esp)
0000039b	calll	KeyValues::GetString(char const*, char const*)
000003a0	movl	%eax,%esi
000003a2	movl	0x10(%ebp),%eax
000003a5	movl	(%eax),%eax
000003a7	movl	%edi,0x08(%esp)
000003ab	movl	%ebx,0x04(%esp)
000003af	movl	%eax,(%esp)
000003b2	calll	KeyValues::GetString(char const*, char const*)
000003b7	movl	%eax,0x04(%esp)
000003bb	movl	%esi,(%esp)
000003be	calll	_strcasecmp
000003c3	addl	$0x0c,%esp
000003c6	popl	%esi
000003c7	popl	%edi
000003c8	popl	%ebx
000003c9	popl	%ebp
000003ca	ret
000003cb	nopl	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::CPicker(vgui::Panel*, char const*, char const*):
000003d0	pushl	%ebp
000003d1	movl	%esp,%ebp
000003d3	pushl	%ebx
000003d4	pushl	%edi
000003d5	pushl	%esi
000003d6	subl	$0x3c,%esp
000003d9	calll	0x000003de
000003de	popl	%ebx
000003df	leal	0x53f34-0x3de(%ebx),%eax
000003e5	movl	%eax,0x0c(%esp)
000003e9	movl	0x10(%ebp),%eax
000003ec	movl	%eax,0x08(%esp)
000003f0	movl	0x0c(%ebp),%esi
000003f3	leal	0x04(%esi),%eax
000003f6	movl	%eax,0xe4(%ebp)
000003f9	movl	%eax,0x04(%esp)
000003fd	movl	0x08(%ebp),%edi
00000400	movl	%edi,(%esp)
00000403	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000408	movl	(%esi),%eax
0000040a	movl	%eax,(%edi)
0000040c	testb	$0x01,CPicker::ChainToMap()::chained-0x3de(%ebx)
00000413	jne	0x0000044a
00000415	movb	$0x01,CPicker::ChainToMap()::chained-0x3de(%ebx)
0000041c	leal	0x54066-0x3de(%ebx),%eax
00000422	movl	%eax,(%esp)
00000425	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000042a	movl	%eax,%esi
0000042c	leal	CPicker::GetPanelClassName()-0x3de(%ebx),%eax
00000432	movl	%eax,0x1c(%esi)
00000435	testl	%esi,%esi
00000437	je	0x0000044a
00000439	leal	0x54086-0x3de(%ebx),%eax
0000043f	movl	%eax,(%esp)
00000442	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000447	movl	%eax,0x18(%esi)
0000044a	testb	$0x01,CPicker::ChainToAnimationMap()::chained-0x3de(%ebx)
00000451	jne	0x00000488
00000453	movb	$0x01,CPicker::ChainToAnimationMap()::chained-0x3de(%ebx)
0000045a	leal	0x54066-0x3de(%ebx),%eax
00000460	movl	%eax,(%esp)
00000463	calll	FindOrAddPanelAnimationMap(char const*)
00000468	movl	%eax,%esi
0000046a	leal	CPicker::GetPanelClassName()-0x3de(%ebx),%eax
00000470	movl	%eax,0x18(%esi)
00000473	testl	%esi,%esi
00000475	je	0x00000488
00000477	leal	0x54086-0x3de(%ebx),%eax
0000047d	movl	%eax,(%esp)
00000480	calll	FindOrAddPanelAnimationMap(char const*)
00000485	movl	%eax,0x14(%esi)
00000488	testb	$0x01,CPicker::KB_ChainToMap()::chained-0x3de(%ebx)
0000048f	jne	0x000004c6
00000491	movb	$0x01,CPicker::KB_ChainToMap()::chained-0x3de(%ebx)
00000498	leal	0x54066-0x3de(%ebx),%eax
0000049e	movl	%eax,(%esp)
000004a1	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000004a6	movl	%eax,%esi
000004a8	leal	CPicker::GetPanelClassName()-0x3de(%ebx),%eax
000004ae	movl	%eax,0x44(%esi)
000004b1	testl	%esi,%esi
000004b3	je	0x000004c6
000004b5	leal	0x54086-0x3de(%ebx),%eax
000004bb	movl	%eax,(%esp)
000004be	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000004c3	movl	%eax,0x18(%esi)
000004c6	testb	$0x01,CPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x3de(%ebx)
000004cd	jne	0x00000525
000004cf	movb	$0x01,CPicker::PanelMessageFunc_OnTextChanged::InitVar()::bAdded-0x3de(%ebx)
000004d6	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0xec(%ebp)
000004dd	movl	$0x000003ad,0xe8(%ebp)
000004e4	movsd	0xe8(%ebp),%xmm0
000004e9	movsd	%xmm0,0x04(%esp)
000004ef	leal	0x5407a-0x3de(%ebx),%eax
000004f5	movl	%eax,(%esp)
000004f8	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x1c(%esp)
00000500	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x18(%esp)
00000508	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x14(%esp)
00000510	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x10(%esp)
00000518	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0c(%esp)
00000520	calll	CPicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000525	movl	0x08(%ebp),%eax
00000528	leal	0x000001b8(%eax),%eax
0000052e	movl	%eax,0xe0(%ebp)
00000531	movl	%eax,(%esp)
00000534	calll	CUtlString::CUtlString()
00000539	movl	0x18(%ebp),%eax
0000053c	movl	0x14(%ebp),%ecx
0000053f	movl	0x08(%ebp),%esi
00000542	movl	%ecx,0x000001c8(%esi)
00000548	movl	%eax,0x000001cc(%esi)
0000054e	movl	$0x00000280,(%esp)
00000555	calll	operator new(unsigned long)
0000055a	movl	%eax,%edi
0000055c	leal	0x53f3b-0x3de(%ebx),%eax
00000562	movl	%eax,0x08(%esp)
00000566	movl	%esi,0x04(%esp)
0000056a	movl	%edi,(%esp)
0000056d	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000572	movl	%edi,0x000001b4(%esi)
00000578	movl	(%edi),%eax
0000057a	movl	0x0000034c(%eax),%eax
00000580	movl	0x000001c8(%esi),%ecx
00000586	movl	%ecx,0x0c(%esp)
0000058a	leal	0x53f43-0x3de(%ebx),%ecx
00000590	movl	%ecx,0x08(%esp)
00000594	movl	%edi,(%esp)
00000597	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x14(%esp)
0000059f	movl	$0x00000034,0x10(%esp)
000005a7	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
000005af	call	*%eax
000005b1	movl	0x000001b4(%esi),%ecx
000005b7	movl	(%ecx),%eax
000005b9	movl	0x00000410(%eax),%eax
000005bf	movl	%ecx,(%esp)
000005c2	movl	$0x00000001,0x04(%esp)
000005ca	call	*%eax
000005cc	movl	0x000001b4(%esi),%eax
000005d2	movl	(%eax),%ecx
000005d4	movl	0x00000420(%ecx),%ecx
000005da	leal	0x53f4a-0x3de(%ebx),%edx
000005e0	movl	%edx,0x04(%esp)
000005e4	movl	%eax,(%esp)
000005e7	call	*%ecx
000005e9	movl	0x000001b4(%esi),%ecx
000005ef	movl	(%ecx),%eax
000005f1	movl	0x00000240(%eax),%eax
000005f7	movl	%ecx,(%esp)
000005fa	movl	$0x00000001,0x04(%esp)
00000602	call	*%eax
00000604	movl	0x000001b4(%esi),%eax
0000060a	movl	(%eax),%ecx
0000060c	movl	0x000000b4(%ecx),%ecx
00000612	movl	%esi,0x04(%esp)
00000616	movl	%eax,(%esp)
00000619	call	*%ecx
0000061b	movl	0x000001b4(%esi),%ecx
00000621	movl	(%ecx),%eax
00000623	movl	0x00000378(%eax),%eax
00000629	leal	PickerBrowserSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0x3de(%ebx),%edx
0000062f	movl	%edx,0x08(%esp)
00000633	movl	%ecx,(%esp)
00000636	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
0000063e	call	*%eax
00000640	movl	0x000001b4(%esi),%ecx
00000646	movl	(%ecx),%eax
00000648	movl	0x0000037c(%eax),%eax
0000064e	movl	%ecx,(%esp)
00000651	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000659	call	*%eax
0000065b	movl	$0x00000660,(%esp)
00000662	calll	operator new(unsigned long)
00000667	movl	%eax,%edi
00000669	leal	0x53f5a-0x3de(%ebx),%eax
0000066f	movl	%eax,0x08(%esp)
00000673	movl	%esi,0x04(%esp)
00000677	movl	%edi,(%esp)
0000067a	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
0000067f	movl	%edi,0x000001b0(%esi)
00000685	movl	(%edi),%eax
00000687	movl	0x000000b4(%eax),%eax
0000068d	movl	%esi,0x04(%esp)
00000691	movl	%edi,(%esp)
00000694	call	*%eax
00000696	movl	0x000001b0(%esi),%ecx
0000069c	movl	(%ecx),%eax
0000069e	movl	0x30(%eax),%eax
000006a1	movl	%ecx,(%esp)
000006a4	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
000006ac	call	*%eax
000006ae	movl	(%esi),%eax
000006b0	movl	0x00000354(%eax),%eax
000006b6	leal	0x53f65-0x3de(%ebx),%ecx
000006bc	movl	%ecx,0x04(%esp)
000006c0	movl	%esi,(%esp)
000006c3	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
000006cb	call	*%eax
000006cd	addl	$0x3c,%esp
000006d0	popl	%esi
000006d1	popl	%edi
000006d2	popl	%ebx
000006d3	popl	%ebp
000006d4	ret
000006d5	movl	%eax,%esi
000006d7	jmp	0x0000071b
000006d9	movl	%eax,%esi
000006db	jmp	0x000006e9
000006dd	jmp	0x000006df
000006df	movl	%eax,%esi
000006e1	movl	%edi,(%esp)
000006e4	calll	operator delete(void*)
000006e9	movl	0x08(%ebp),%eax
000006ec	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001c0(%eax)
000006f3	movl	0xe0(%ebp),%ecx
000006f6	js	0x0000071b
000006f8	movl	(%ecx),%eax
000006fa	testl	%eax,%eax
000006fc	movl	%ecx,%edi
000006fe	je	0x0000070e
00000700	movl	%eax,(%esp)
00000703	calll	_free
00000708	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),(%edi)
0000070e	movl	0x08(%ebp),%eax
00000711	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001bc(%eax)
0000071b	movl	0xe4(%ebp),%eax
0000071e	movl	%eax,0x04(%esp)
00000722	movl	0x08(%ebp),%eax
00000725	movl	%eax,(%esp)
00000728	calll	vgui::EditablePanel::~EditablePanel()
0000072d	movl	%esi,(%esp)
00000730	calll	__Unwind_Resume
00000735	calll	std::terminate()
0000073a	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::~CPicker():
00000740	pushl	%ebp
00000741	movl	%esp,%ebp
00000743	pushl	%edi
00000744	pushl	%esi
00000745	subl	$0x10,%esp
00000748	calll	0x0000074d
0000074d	popl	%esi
0000074e	leal	vtable for CPicker-0x74d+0x0000000c(%esi),%eax
00000754	movl	0x08(%ebp),%edi
00000757	movl	%eax,(%edi)
00000759	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001c0(%edi)
00000760	js	0x00000788
00000762	movl	0x000001b8(%edi),%eax
00000768	testl	%eax,%eax
0000076a	je	0x0000077e
0000076c	movl	%eax,(%esp)
0000076f	calll	_free
00000774	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001b8(%edi)
0000077e	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001bc(%edi)
00000788	leal	VTT for CPicker-0x74d+0x00000004(%esi),%eax
0000078e	movl	%eax,0x04(%esp)
00000792	movl	%edi,(%esp)
00000795	calll	vgui::EditablePanel::~EditablePanel()
0000079a	addl	$0x10,%esp
0000079d	popl	%esi
0000079e	popl	%edi
0000079f	popl	%ebp
000007a0	jmp	operator delete(void*)
000007a5	movl	%eax,%esi
000007a7	movl	%edi,(%esp)
000007aa	calll	operator delete(void*)
000007af	movl	%esi,(%esp)
000007b2	calll	__Unwind_Resume
000007b7	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::~CPicker():
000007c0	pushl	%ebp
000007c1	movl	%esp,%ebp
000007c3	pushl	%edi
000007c4	pushl	%esi
000007c5	subl	$0x10,%esp
000007c8	calll	0x000007cd
000007cd	popl	%edi
000007ce	leal	vtable for CPicker-0x7cd+0x0000000c(%edi),%eax
000007d4	movl	0x08(%ebp),%esi
000007d7	movl	%eax,(%esi)
000007d9	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001c0(%esi)
000007e0	js	0x00000808
000007e2	movl	0x000001b8(%esi),%eax
000007e8	testl	%eax,%eax
000007ea	je	0x000007fe
000007ec	movl	%eax,(%esp)
000007ef	calll	_free
000007f4	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001b8(%esi)
000007fe	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001bc(%esi)
00000808	leal	VTT for CPicker-0x7cd+0x00000004(%edi),%eax
0000080e	movl	%eax,0x04(%esp)
00000812	movl	%esi,(%esp)
00000815	calll	vgui::EditablePanel::~EditablePanel()
0000081a	addl	$0x10,%esp
0000081d	popl	%esi
0000081e	popl	%edi
0000081f	popl	%ebp
00000820	ret
00000821	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::~CPicker():
00000830	pushl	%ebp
00000831	movl	%esp,%ebp
00000833	pushl	%edi
00000834	pushl	%esi
00000835	subl	$0x10,%esp
00000838	movl	0x0c(%ebp),%esi
0000083b	movl	(%esi),%eax
0000083d	movl	0x08(%ebp),%edi
00000840	movl	%eax,(%edi)
00000842	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001c0(%edi)
00000849	js	0x00000871
0000084b	movl	0x000001b8(%edi),%eax
00000851	testl	%eax,%eax
00000853	je	0x00000867
00000855	movl	%eax,(%esp)
00000858	calll	_free
0000085d	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001b8(%edi)
00000867	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001bc(%edi)
00000871	addl	$0x04,%esi
00000874	movl	%esi,0x04(%esp)
00000878	movl	%edi,(%esp)
0000087b	calll	vgui::EditablePanel::~EditablePanel()
00000880	addl	$0x10,%esp
00000883	popl	%esi
00000884	popl	%edi
00000885	popl	%ebp
00000886	ret
00000887	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::OnKeyCodePressed(ButtonCode_t):
00000890	pushl	%ebp
00000891	movl	%esp,%ebp
00000893	pushl	%ebx
00000894	pushl	%edi
00000895	pushl	%esi
00000896	subl	$0x1c,%esp
00000899	calll	0x0000089e
0000089e	popl	%edi
0000089f	movl	0x0c(%ebp),%ebx
000008a2	leal	0xb4(%ebx),%eax
000008a5	cmpl	$0x0e,%eax
000008a8	ja	0x00000940
000008ae	movl	$0x00005003,%ecx
000008b3	btl	%eax,%ecx
000008b6	jae	0x00000940
000008bc	movl	$0x00000020,(%esp)
000008c3	calll	KeyValues::operator new(unsigned long)
000008c8	movl	%eax,%esi
000008ca	movl	%ebx,0x0c(%esp)
000008ce	leal	0x53f88-0x89e(%edi),%eax
000008d4	movl	%eax,0x08(%esp)
000008d8	leal	0x53f79-0x89e(%edi),%eax
000008de	movl	%eax,0x04(%esp)
000008e2	movl	%esi,(%esp)
000008e5	calll	KeyValues::KeyValues(char const*, char const*, int)
000008ea	movl	0x08(%ebp),%edx
000008ed	movl	0x57a4e-0x89e(%edi),%eax
000008f3	movl	(%eax),%ebx
000008f5	movl	(%ebx),%eax
000008f7	movl	0x0000009c(%eax),%eax
000008fd	movl	%eax,0xf0(%ebp)
00000900	movl	0x000001b4(%edx),%ecx
00000906	movl	%edx,%edi
00000908	movl	(%ecx),%eax
0000090a	movl	%ecx,(%esp)
0000090d	call	(%eax)
0000090f	movl	%eax,0xec(%ebp)
00000912	movl	%edi,%ecx
00000914	movl	(%ecx),%eax
00000916	movl	%ecx,(%esp)
00000919	call	(%eax)
0000091b	movl	%eax,0x0c(%esp)
0000091f	movl	%esi,0x08(%esp)
00000923	movl	0xec(%ebp),%eax
00000926	movl	%eax,0x04(%esp)
0000092a	movl	%ebx,(%esp)
0000092d	call	*0xf0(%ebp)
00000930	movl	%esi,(%esp)
00000933	calll	KeyValues::deleteThis()
00000938	addl	$0x1c,%esp
0000093b	popl	%esi
0000093c	popl	%edi
0000093d	popl	%ebx
0000093e	popl	%ebp
0000093f	ret
00000940	addl	$0x1c,%esp
00000943	popl	%esi
00000944	popl	%edi
00000945	popl	%ebx
00000946	popl	%ebp
00000947	jmp	vgui::EditablePanel::OnKeyCodePressed(ButtonCode_t)
0000094c	movl	%eax,%edi
0000094e	movl	%esi,(%esp)
00000951	calll	KeyValues::operator delete(void*)
00000956	movl	%edi,(%esp)
00000959	calll	__Unwind_Resume
0000095e	calll	std::terminate()
00000963	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::SetStringList(PickerList_t const&):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%ebx
00000974	pushl	%edi
00000975	pushl	%esi
00000976	subl	$0x2c,%esp
00000979	calll	0x0000097e
0000097e	popl	%eax
0000097f	movl	%eax,0xf0(%ebp)
00000982	movl	0x0c(%ebp),%ebx
00000985	movl	(%ebx),%eax
00000987	movl	0x08(%ebp),%ecx
0000098a	movl	%eax,0x000001d8(%ecx)
00000990	movl	0x000001b4(%ecx),%ecx
00000996	movl	(%ecx),%eax
00000998	movl	%ecx,(%esp)
0000099b	call	*0x000003c4(%eax)
000009a1	movl	0x10(%ebx),%eax
000009a4	movl	%eax,0xe8(%ebp)
000009a7	xorl	%ecx,%ecx
000009a9	jmp	0x000009e6
000009ab	nopl	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
000009b0	movl	%eax,0x08(%esp)
000009b4	movl	0xf0(%ebp),%eax
000009b7	leal	0x53fa2-0x97e(%eax),%eax
000009bd	movl	%eax,0x04(%esp)
000009c1	movl	%edi,(%esp)
000009c4	calll	KeyValues::SetString(char const*, char const*)
000009c9	movl	0x000001b4(%ebx),%eax
000009cf	movl	%edi,0x08(%esp)
000009d3	movl	%esi,0x04(%esp)
000009d7	movl	%eax,(%esp)
000009da	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
000009df	movl	0xec(%ebp),%ecx
000009e2	incl	%ecx
000009e3	movl	0x0c(%ebp),%ebx
000009e6	cmpl	0xe8(%ebp),%ecx
000009e9	jge	0x00000b05
000009ef	movl	0x04(%ebx),%eax
000009f2	movl	(%eax,%ecx,8),%eax
000009f5	movl	%eax,0xec(%ebp)
000009f8	movl	$0x00000020,(%esp)
000009ff	movl	%ecx,%edi
00000a01	calll	KeyValues::operator new(unsigned long)
00000a06	movl	%eax,%esi
00000a08	movl	0xec(%ebp),%eax
00000a0b	movl	%eax,0x0c(%esp)
00000a0f	movl	0xf0(%ebp),%ecx
00000a12	leal	0x53f43-0x97e(%ecx),%eax
00000a18	movl	%eax,0x08(%esp)
00000a1c	leal	0x53f8d-0x97e(%ecx),%eax
00000a22	movl	%eax,0x04(%esp)
00000a26	movl	%esi,(%esp)
00000a29	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00000a2e	movl	0x04(%ebx),%eax
00000a31	movl	0x04(%eax,%edi,8),%eax
00000a35	movl	%edi,0xec(%ebp)
00000a38	movl	0x08(%ebp),%ebx
00000a3b	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001d8(%ebx)
00000a42	jne	0x00000a5f
00000a44	movl	%eax,0x08(%esp)
00000a48	movl	0xf0(%ebp),%eax
00000a4b	leal	0x53f92-0x97e(%eax),%eax
00000a51	movl	%eax,0x04(%esp)
00000a55	movl	%esi,(%esp)
00000a58	calll	KeyValues::SetString(char const*, char const*)
00000a5d	jmp	0x00000a78
00000a5f	movl	%eax,0x08(%esp)
00000a63	movl	0xf0(%ebp),%eax
00000a66	leal	0x53f92-0x97e(%eax),%eax
00000a6c	movl	%eax,0x04(%esp)
00000a70	movl	%esi,(%esp)
00000a73	calll	KeyValues::SetPtr(char const*, void*)
00000a78	movl	0x000001b4(%ebx),%ecx
00000a7e	movl	(%ecx),%eax
00000a80	movl	%esi,0x04(%esp)
00000a84	movl	%ecx,(%esp)
00000a87	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x10(%esp)
00000a8f	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0c(%esp)
00000a97	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
00000a9f	call	*0x00000390(%eax)
00000aa5	movl	%eax,%esi
00000aa7	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001d8(%ebx)
00000aae	jne	0x000009df
00000ab4	movl	$0x00000020,(%esp)
00000abb	calll	KeyValues::operator new(unsigned long)
00000ac0	movl	%eax,%edi
00000ac2	movl	0x0c(%ebp),%eax
00000ac5	movl	0x04(%eax),%eax
00000ac8	movl	0xec(%ebp),%ecx
00000acb	movl	0x04(%eax,%ecx,8),%eax
00000acf	movl	%eax,0x0c(%esp)
00000ad3	movl	0xf0(%ebp),%ecx
00000ad6	leal	0x53f9d-0x97e(%ecx),%eax
00000adc	movl	%eax,0x08(%esp)
00000ae0	leal	0x53f98-0x97e(%ecx),%eax
00000ae6	movl	%eax,0x04(%esp)
00000aea	movl	%edi,(%esp)
00000aed	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00000af2	movl	0x000001cc(%ebx),%eax
00000af8	testl	%eax,%eax
00000afa	je	0x000009c9
00000b00	jmp	0x000009b0
00000b05	addl	$0x2c,%esp
00000b08	popl	%esi
00000b09	popl	%edi
00000b0a	popl	%ebx
00000b0b	popl	%ebp
00000b0c	jmp	CPicker::RefreshChoiceList()
00000b11	movl	%eax,%ebx
00000b13	movl	%esi,(%esp)
00000b16	calll	KeyValues::operator delete(void*)
00000b1b	movl	%ebx,(%esp)
00000b1e	calll	__Unwind_Resume
00000b23	movl	%eax,%ebx
00000b25	movl	%edi,(%esp)
00000b28	calll	KeyValues::operator delete(void*)
00000b2d	jmp	0x00000b1b
00000b2f	calll	std::terminate()
00000b34	nopw	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::RefreshChoiceList():
00000b40	pushl	%ebp
00000b41	movl	%esp,%ebp
00000b43	pushl	%ebx
00000b44	pushl	%edi
00000b45	pushl	%esi
00000b46	subl	$0x0000023c,%esp
00000b4c	calll	0x00000b51
00000b51	popl	%eax
00000b52	movl	%eax,0xfffffdd4(%ebp)
00000b58	movl	0x57a4a-0xb51(%eax),%eax
00000b5e	movl	%eax,0xfffffdd0(%ebp)
00000b64	movl	(%eax),%eax
00000b66	movl	%eax,0xf0(%ebp)
00000b69	movl	0x08(%ebp),%ebx
00000b6c	movl	0x000001b4(%ebx),%ecx
00000b72	movl	(%ecx),%eax
00000b74	movl	%ecx,(%esp)
00000b77	call	*0x000003d4(%eax)
00000b7d	movl	%eax,%esi
00000b7f	movl	0x000001b4(%ebx),%ecx
00000b85	movl	(%ecx),%eax
00000b87	movl	%ecx,(%esp)
00000b8a	call	*0x000003dc(%eax)
00000b90	xorl	%edi,%edi
00000b92	cmpl	%eax,%esi
00000b94	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0xfffffde4(%ebp)
00000b9e	je	0x00000cac
00000ba4	leal	0x000001b8(%ebx),%eax
00000baa	movl	%eax,0xfffffde0(%ebp)
00000bb0	xorl	%edi,%edi
00000bb2	movl	0xfffffdd4(%ebp),%eax
00000bb8	leal	0x53fab-0xb51(%eax),%ecx
00000bbe	movl	%ecx,0xfffffddc(%ebp)
00000bc4	leal	0x53f43-0xb51(%eax),%eax
00000bca	movl	%eax,0xfffffdd8(%ebp)
00000bd0	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0xfffffde4(%ebp)
00000bda	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
00000be0	movl	%edi,0xfffffdec(%ebp)
00000be6	movl	0x000001b4(%ebx),%ecx
00000bec	movl	(%ecx),%eax
00000bee	movl	%esi,0x04(%esp)
00000bf2	movl	%ecx,(%esp)
00000bf5	call	*0x0000039c(%eax)
00000bfb	movl	0xfffffddc(%ebp),%ecx
00000c01	movl	%ecx,0x08(%esp)
00000c05	movl	0xfffffdd8(%ebp),%ecx
00000c0b	movl	%ecx,0x04(%esp)
00000c0f	movl	%eax,(%esp)
00000c12	calll	KeyValues::GetString(char const*, char const*)
00000c17	movl	%eax,0xfffffde8(%ebp)
00000c1d	movl	0xfffffde0(%ebp),%edi
00000c23	movl	%edi,(%esp)
00000c26	calll	CUtlString::Length() const
00000c2b	movb	$0x01,%cl
00000c2d	testl	%eax,%eax
00000c2f	je	0x00000c50
00000c31	movl	%edi,(%esp)
00000c34	calll	CUtlString::Get()
00000c39	movl	%eax,0x04(%esp)
00000c3d	movl	0xfffffde8(%ebp),%eax
00000c43	movl	%eax,(%esp)
00000c46	calll	V_stristr(char const*, char const*)
00000c4b	testl	%eax,%eax
00000c4d	setne	%cl
00000c50	movl	0x000001b4(%ebx),%edx
00000c56	movl	(%edx),%eax
00000c58	movzbl	%cl,%edi
00000c5b	movl	%edi,0x08(%esp)
00000c5f	movl	%esi,0x04(%esp)
00000c63	movl	%edx,(%esp)
00000c66	call	*0x000003e4(%eax)
00000c6c	movl	0x000001b4(%ebx),%ecx
00000c72	movl	(%ecx),%eax
00000c74	movl	%esi,0x04(%esp)
00000c78	movl	%ecx,(%esp)
00000c7b	call	*0x000003d8(%eax)
00000c81	movl	%eax,%esi
00000c83	movl	0x000001b4(%ebx),%ecx
00000c89	movl	(%ecx),%eax
00000c8b	movl	%ecx,(%esp)
00000c8e	movl	0xfffffdec(%ebp),%ecx
00000c94	addl	%edi,%ecx
00000c96	movl	%ecx,%edi
00000c98	incl	0xfffffde4(%ebp)
00000c9e	call	*0x000003dc(%eax)
00000ca4	cmpl	%eax,%esi
00000ca6	jne	0x00000be0
00000cac	movl	0x000001c8(%ebx),%eax
00000cb2	movl	0xfffffde4(%ebp),%ecx
00000cb8	movl	%ecx,0x14(%esp)
00000cbc	movl	%edi,0x10(%esp)
00000cc0	movl	%eax,0x0c(%esp)
00000cc4	movl	0xfffffdd4(%ebp),%eax
00000cca	leal	0x53fac-0xb51(%eax),%eax
00000cd0	movl	%eax,0x08(%esp)
00000cd4	leal	0xfffffdf0(%ebp),%esi
00000cda	movl	%esi,(%esp)
00000cdd	movl	$0x00000200,0x04(%esp)
00000ce5	calll	V_snprintf(char*, int, char const*, ...)
00000cea	movl	0x000001b4(%ebx),%ecx
00000cf0	movl	(%ecx),%eax
00000cf2	movl	%esi,0x08(%esp)
00000cf6	movl	%ecx,(%esp)
00000cf9	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000d01	call	*0x0000035c(%eax)
00000d07	movl	0x000001b4(%ebx),%ecx
00000d0d	movl	(%ecx),%eax
00000d0f	movl	%ecx,(%esp)
00000d12	call	*0x00000380(%eax)
00000d18	movl	0x000001b4(%ebx),%ecx
00000d1e	movl	(%ecx),%eax
00000d20	movl	%ecx,(%esp)
00000d23	call	*0x000003f4(%eax)
00000d29	testl	%eax,%eax
00000d2b	jne	0x00000d78
00000d2d	movl	0x000001b4(%ebx),%ecx
00000d33	movl	(%ecx),%eax
00000d35	movl	%ecx,(%esp)
00000d38	call	*0x00000394(%eax)
00000d3e	testl	%eax,%eax
00000d40	jle	0x00000d78
00000d42	movl	0x000001b4(%ebx),%ecx
00000d48	movl	(%ecx),%eax
00000d4a	movl	%ecx,(%esp)
00000d4d	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000d55	call	*0x000003a4(%eax)
00000d5b	movl	0x000001b4(%ebx),%edx
00000d61	movl	(%edx),%ecx
00000d63	movl	%eax,0x04(%esp)
00000d67	movl	%edx,(%esp)
00000d6a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
00000d72	call	*0x00000414(%ecx)
00000d78	movl	0xfffffdd0(%ebp),%eax
00000d7e	movl	(%eax),%eax
00000d80	cmpl	0xf0(%ebp),%eax
00000d83	jne	0x00000d90
00000d85	addl	$0x0000023c,%esp
00000d8b	popl	%esi
00000d8c	popl	%edi
00000d8d	popl	%ebx
00000d8e	popl	%ebp
00000d8f	ret
00000d90	calll	___stack_chk_fail
00000d95	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::OnTextChanged():
00000da0	pushl	%ebp
00000da1	movl	%esp,%ebp
00000da3	pushl	%ebx
00000da4	pushl	%edi
00000da5	pushl	%esi
00000da6	subl	$0x1c,%esp
00000da9	movl	0x08(%ebp),%edi
00000dac	movl	0x000001b0(%edi),%ecx
00000db2	movl	(%ecx),%eax
00000db4	movl	%ecx,(%esp)
00000db7	call	*0x00000358(%eax)
00000dbd	movl	%eax,%esi
00000dbf	movl	%esi,0x04(%esp)
00000dc3	leal	0x000001b8(%edi),%ebx
00000dc9	movl	%ebx,(%esp)
00000dcc	calll	CUtlString::SetLength(int)
00000dd1	testl	%esi,%esi
00000dd3	jle	0x00000dfd
00000dd5	movl	0x000001b0(%edi),%edi
00000ddb	movl	(%edi),%eax
00000ddd	movl	0x00000350(%eax),%eax
00000de3	movl	%eax,0xf0(%ebp)
00000de6	movl	%ebx,(%esp)
00000de9	calll	CUtlString::Get()
00000dee	incl	%esi
00000def	movl	%esi,0x08(%esp)
00000df3	movl	%eax,0x04(%esp)
00000df7	movl	%edi,(%esp)
00000dfa	call	*0xf0(%ebp)
00000dfd	addl	$0x1c,%esp
00000e00	popl	%esi
00000e01	popl	%edi
00000e02	popl	%ebx
00000e03	popl	%ebp
00000e04	jmp	CPicker::RefreshChoiceList()
00000e09	nopl	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax)
CPicker::GetSelectionType() const:
00000e10	movl	0x04(%esp),%eax
00000e14	movl	0x000001d8(%eax),%eax
00000e1a	ret
00000e1b	nopl	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::GetSelectedString() const:
00000e20	pushl	%ebp
00000e21	movl	%esp,%ebp
00000e23	pushl	%edi
00000e24	pushl	%esi
00000e25	subl	$0x10,%esp
00000e28	calll	0x00000e2d
00000e2d	popl	%esi
00000e2e	movl	0x08(%ebp),%edi
00000e31	movl	0x000001b4(%edi),%ecx
00000e37	movl	(%ecx),%eax
00000e39	movl	%ecx,(%esp)
00000e3c	call	*0x000003f4(%eax)
00000e42	testl	%eax,%eax
00000e44	je	0x00000e9b
00000e46	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001d8(%edi)
00000e4d	jne	0x00000e9b
00000e4f	movl	0x000001b4(%edi),%ecx
00000e55	movl	(%ecx),%eax
00000e57	movl	%ecx,(%esp)
00000e5a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000e62	call	*0x000003f8(%eax)
00000e68	movl	0x000001b4(%edi),%edx
00000e6e	movl	(%edx),%ecx
00000e70	movl	%eax,0x04(%esp)
00000e74	movl	%edx,(%esp)
00000e77	call	*0x0000039c(%ecx)
00000e7d	leal	0x53fab-0xe2d(%esi),%ecx
00000e83	movl	%ecx,0x08(%esp)
00000e87	leal	0x53f92-0xe2d(%esi),%ecx
00000e8d	movl	%ecx,0x04(%esp)
00000e91	movl	%eax,(%esp)
00000e94	calll	KeyValues::GetString(char const*, char const*)
00000e99	jmp	0x00000e9d
00000e9b	xorl	%eax,%eax
00000e9d	addl	$0x10,%esp
00000ea0	popl	%esi
00000ea1	popl	%edi
00000ea2	popl	%ebp
00000ea3	ret
00000ea4	nopw	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::GetSelectedPtr() const:
00000eb0	pushl	%ebp
00000eb1	movl	%esp,%ebp
00000eb3	pushl	%edi
00000eb4	pushl	%esi
00000eb5	subl	$0x10,%esp
00000eb8	calll	0x00000ebd
00000ebd	popl	%esi
00000ebe	movl	0x08(%ebp),%edi
00000ec1	movl	0x000001b4(%edi),%ecx
00000ec7	movl	(%ecx),%eax
00000ec9	movl	%ecx,(%esp)
00000ecc	call	*0x000003f4(%eax)
00000ed2	testl	%eax,%eax
00000ed4	je	0x00000f29
00000ed6	cmpl	$0x01,0x000001d8(%edi)
00000edd	jne	0x00000f29
00000edf	movl	0x000001b4(%edi),%ecx
00000ee5	movl	(%ecx),%eax
00000ee7	movl	%ecx,(%esp)
00000eea	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000ef2	call	*0x000003f8(%eax)
00000ef8	movl	0x000001b4(%edi),%edx
00000efe	movl	(%edx),%ecx
00000f00	movl	%eax,0x04(%esp)
00000f04	movl	%edx,(%esp)
00000f07	call	*0x0000039c(%ecx)
00000f0d	leal	0x53f92-0xebd(%esi),%ecx
00000f13	movl	%ecx,0x04(%esp)
00000f17	movl	%eax,(%esp)
00000f1a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
00000f22	calll	KeyValues::GetPtr(char const*, void*)
00000f27	jmp	0x00000f2b
00000f29	xorl	%eax,%eax
00000f2b	addl	$0x10,%esp
00000f2e	popl	%esi
00000f2f	popl	%edi
00000f30	popl	%ebp
00000f31	ret
00000f32	nopw	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPicker::GetSelectedIndex():
00000f40	pushl	%ebp
00000f41	movl	%esp,%ebp
00000f43	pushl	%esi
00000f44	subl	$0x14,%esp
00000f47	movl	0x08(%ebp),%esi
00000f4a	movl	0x000001b4(%esi),%ecx
00000f50	movl	(%ecx),%eax
00000f52	movl	%ecx,(%esp)
00000f55	call	*0x000003f4(%eax)
00000f5b	testl	%eax,%eax
00000f5d	je	0x00000f7a
00000f5f	movl	0x000001b4(%esi),%ecx
00000f65	movl	(%ecx),%eax
00000f67	movl	%ecx,(%esp)
00000f6a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00000f72	call	*0x000003f8(%eax)
00000f78	jmp	0x00000f7f
00000f7a	movl	$0xffffffff,%eax
00000f7f	addl	$0x14,%esp
00000f82	popl	%esi
00000f83	popl	%ebp
00000f84	ret
00000f85	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::CPickerFrame(vgui::Panel*, char const*, char const*, char const*):
00000f90	pushl	%ebp
00000f91	movl	%esp,%ebp
00000f93	pushl	%ebx
00000f94	pushl	%edi
00000f95	pushl	%esi
00000f96	subl	$0x2c,%esp
00000f99	calll	0x00000f9e
00000f9e	popl	%ebx
00000f9f	leal	0x53fb7-0xf9e(%ebx),%eax
00000fa5	movl	%eax,0x0c(%esp)
00000fa9	movl	0x0c(%ebp),%eax
00000fac	movl	%eax,0x08(%esp)
00000fb0	leal	VTT for CPickerFrame-0xf9e+0x00000004(%ebx),%eax
00000fb6	movl	%eax,0xf0(%ebp)
00000fb9	movl	%eax,0x04(%esp)
00000fbd	movl	0x08(%ebp),%esi
00000fc0	movl	%esi,(%esp)
00000fc3	movl	$0x00000001,0x14(%esp)
00000fcb	movl	$0x00000001,0x10(%esp)
00000fd3	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00000fd8	leal	vtable for CPickerFrame-0xf9e+0x0000000c(%ebx),%eax
00000fde	movl	%eax,(%esi)
00000fe0	testb	$0x01,CPickerFrame::ChainToMap()::chained-0xf9e(%ebx)
00000fe7	jne	0x0000101e
00000fe9	movb	$0x01,CPickerFrame::ChainToMap()::chained-0xf9e(%ebx)
00000ff0	leal	0x54045-0xf9e(%ebx),%eax
00000ff6	movl	%eax,(%esp)
00000ff9	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000ffe	movl	%eax,%esi
00001000	leal	CPickerFrame::GetPanelClassName()-0xf9e(%ebx),%eax
00001006	movl	%eax,0x1c(%esi)
00001009	testl	%esi,%esi
0000100b	je	0x0000101e
0000100d	leal	0x5406e-0xf9e(%ebx),%eax
00001013	movl	%eax,(%esp)
00001016	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000101b	movl	%eax,0x18(%esi)
0000101e	testb	$0x01,CPickerFrame::ChainToAnimationMap()::chained-0xf9e(%ebx)
00001025	jne	0x0000105c
00001027	movb	$0x01,CPickerFrame::ChainToAnimationMap()::chained-0xf9e(%ebx)
0000102e	leal	0x54045-0xf9e(%ebx),%eax
00001034	movl	%eax,(%esp)
00001037	calll	FindOrAddPanelAnimationMap(char const*)
0000103c	movl	%eax,%esi
0000103e	leal	CPickerFrame::GetPanelClassName()-0xf9e(%ebx),%eax
00001044	movl	%eax,0x18(%esi)
00001047	testl	%esi,%esi
00001049	je	0x0000105c
0000104b	leal	0x5406e-0xf9e(%ebx),%eax
00001051	movl	%eax,(%esp)
00001054	calll	FindOrAddPanelAnimationMap(char const*)
00001059	movl	%eax,0x14(%esi)
0000105c	testb	$0x01,CPickerFrame::KB_ChainToMap()::chained-0xf9e(%ebx)
00001063	jne	0x0000109a
00001065	movb	$0x01,CPickerFrame::KB_ChainToMap()::chained-0xf9e(%ebx)
0000106c	leal	0x54045-0xf9e(%ebx),%eax
00001072	movl	%eax,(%esp)
00001075	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000107a	movl	%eax,%esi
0000107c	leal	CPickerFrame::GetPanelClassName()-0xf9e(%ebx),%eax
00001082	movl	%eax,0x44(%esi)
00001085	testl	%esi,%esi
00001087	je	0x0000109a
00001089	leal	0x5406e-0xf9e(%ebx),%eax
0000108f	movl	%eax,(%esp)
00001092	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001097	movl	%eax,0x18(%esi)
0000109a	movl	0x08(%ebp),%ecx
0000109d	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%ecx)
000010a7	movl	(%ecx),%eax
000010a9	movl	0x000003c4(%eax),%eax
000010af	movl	%ecx,(%esp)
000010b2	movl	$0x00000001,0x04(%esp)
000010ba	call	*%eax
000010bc	movl	$0x000001dc,(%esp)
000010c3	calll	operator new(unsigned long)
000010c8	movl	%eax,%edi
000010ca	movl	0x18(%ebp),%eax
000010cd	movl	0x14(%ebp),%ecx
000010d0	movl	%eax,0x0c(%esp)
000010d4	movl	%ecx,0x08(%esp)
000010d8	movl	0x08(%ebp),%esi
000010db	movl	%esi,0x04(%esp)
000010df	movl	%edi,(%esp)
000010e2	calll	CPicker::CPicker(vgui::Panel*, char const*, char const*)
000010e7	movl	%edi,0x00000240(%esi)
000010ed	movl	(%edi),%eax
000010ef	movl	0x000000b4(%eax),%eax
000010f5	movl	%esi,0x04(%esp)
000010f9	movl	%edi,(%esp)
000010fc	call	*%eax
000010fe	movl	$0x00000224,(%esp)
00001105	calll	operator new(unsigned long)
0000110a	movl	%eax,%edi
0000110c	leal	0x53fe3-0xf9e(%ebx),%eax
00001112	movl	%eax,0x14(%esp)
00001116	movl	0x08(%ebp),%esi
00001119	movl	%esi,0x10(%esp)
0000111d	leal	0x53fce-0xf9e(%ebx),%eax
00001123	movl	%eax,0x0c(%esp)
00001127	leal	0x53fc3-0xf9e(%ebx),%eax
0000112d	movl	%eax,0x08(%esp)
00001131	movl	%esi,0x04(%esp)
00001135	movl	%edi,(%esp)
00001138	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000113d	movl	%edi,0x00000244(%esi)
00001143	movl	$0x00000224,(%esp)
0000114a	calll	operator new(unsigned long)
0000114f	movl	%eax,%edi
00001151	leal	0x5400c-0xf9e(%ebx),%eax
00001157	movl	%eax,0x14(%esp)
0000115b	movl	0x08(%ebp),%esi
0000115e	movl	%esi,0x10(%esp)
00001162	leal	0x53ff5-0xf9e(%ebx),%eax
00001168	movl	%eax,0x0c(%esp)
0000116c	leal	0x53fe8-0xf9e(%ebx),%eax
00001172	movl	%eax,0x08(%esp)
00001176	movl	%esi,0x04(%esp)
0000117a	movl	%edi,(%esp)
0000117d	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00001182	movl	%edi,0x00000248(%esi)
00001188	movl	(%esi),%eax
0000118a	movl	0x00000250(%eax),%eax
00001190	movl	%esi,(%esp)
00001193	movl	$0x00000001,0x04(%esp)
0000119b	call	*%eax
0000119d	movl	0x08(%ebp),%edx
000011a0	movl	(%edx),%eax
000011a2	movl	0x00000354(%eax),%eax
000011a8	leal	0x54013-0xf9e(%ebx),%ecx
000011ae	movl	%ecx,0x04(%esp)
000011b2	movl	%edx,(%esp)
000011b5	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
000011bd	call	*%eax
000011bf	movl	0x10(%ebp),%ecx
000011c2	movl	0x08(%ebp),%edx
000011c5	movl	(%edx),%eax
000011c7	movl	0x000003ac(%eax),%eax
000011cd	movl	%ecx,0x04(%esp)
000011d1	movl	%edx,(%esp)
000011d4	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
000011dc	call	*%eax
000011de	addl	$0x2c,%esp
000011e1	popl	%esi
000011e2	popl	%edi
000011e3	popl	%ebx
000011e4	popl	%ebp
000011e5	ret
000011e6	movl	%eax,%esi
000011e8	jmp	0x000011f8
000011ea	jmp	0x000011ee
000011ec	jmp	0x000011ee
000011ee	movl	%eax,%esi
000011f0	movl	%edi,(%esp)
000011f3	calll	operator delete(void*)
000011f8	movl	0xf0(%ebp),%eax
000011fb	movl	%eax,0x04(%esp)
000011ff	movl	0x08(%ebp),%eax
00001202	movl	%eax,(%esp)
00001205	calll	vgui::Frame::~Frame()
0000120a	movl	%esi,(%esp)
0000120d	calll	__Unwind_Resume
00001212	calll	std::terminate()
00001217	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::CPickerFrame(vgui::Panel*, char const*, char const*, char const*):
00001220	pushl	%ebp
00001221	movl	%esp,%ebp
00001223	pushl	%ebx
00001224	pushl	%edi
00001225	pushl	%esi
00001226	subl	$0x2c,%esp
00001229	calll	0x0000122e
0000122e	popl	%ebx
0000122f	leal	0x53fb7-0x122e(%ebx),%eax
00001235	movl	%eax,0x0c(%esp)
00001239	movl	0x10(%ebp),%eax
0000123c	movl	%eax,0x08(%esp)
00001240	movl	0x0c(%ebp),%esi
00001243	leal	0x04(%esi),%eax
00001246	movl	%eax,0xf0(%ebp)
00001249	movl	%eax,0x04(%esp)
0000124d	movl	0x08(%ebp),%edi
00001250	movl	%edi,(%esp)
00001253	movl	$0x00000001,0x14(%esp)
0000125b	movl	$0x00000001,0x10(%esp)
00001263	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00001268	movl	(%esi),%eax
0000126a	movl	%eax,(%edi)
0000126c	testb	$0x01,CPickerFrame::ChainToMap()::chained-0x122e(%ebx)
00001273	jne	0x000012aa
00001275	movb	$0x01,CPickerFrame::ChainToMap()::chained-0x122e(%ebx)
0000127c	leal	0x54045-0x122e(%ebx),%eax
00001282	movl	%eax,(%esp)
00001285	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000128a	movl	%eax,%esi
0000128c	leal	CPickerFrame::GetPanelClassName()-0x122e(%ebx),%eax
00001292	movl	%eax,0x1c(%esi)
00001295	testl	%esi,%esi
00001297	je	0x000012aa
00001299	leal	0x5406e-0x122e(%ebx),%eax
0000129f	movl	%eax,(%esp)
000012a2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000012a7	movl	%eax,0x18(%esi)
000012aa	testb	$0x01,CPickerFrame::ChainToAnimationMap()::chained-0x122e(%ebx)
000012b1	jne	0x000012e8
000012b3	movb	$0x01,CPickerFrame::ChainToAnimationMap()::chained-0x122e(%ebx)
000012ba	leal	0x54045-0x122e(%ebx),%eax
000012c0	movl	%eax,(%esp)
000012c3	calll	FindOrAddPanelAnimationMap(char const*)
000012c8	movl	%eax,%esi
000012ca	leal	CPickerFrame::GetPanelClassName()-0x122e(%ebx),%eax
000012d0	movl	%eax,0x18(%esi)
000012d3	testl	%esi,%esi
000012d5	je	0x000012e8
000012d7	leal	0x5406e-0x122e(%ebx),%eax
000012dd	movl	%eax,(%esp)
000012e0	calll	FindOrAddPanelAnimationMap(char const*)
000012e5	movl	%eax,0x14(%esi)
000012e8	testb	$0x01,CPickerFrame::KB_ChainToMap()::chained-0x122e(%ebx)
000012ef	jne	0x00001326
000012f1	movb	$0x01,CPickerFrame::KB_ChainToMap()::chained-0x122e(%ebx)
000012f8	leal	0x54045-0x122e(%ebx),%eax
000012fe	movl	%eax,(%esp)
00001301	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001306	movl	%eax,%esi
00001308	leal	CPickerFrame::GetPanelClassName()-0x122e(%ebx),%eax
0000130e	movl	%eax,0x44(%esi)
00001311	testl	%esi,%esi
00001313	je	0x00001326
00001315	leal	0x5406e-0x122e(%ebx),%eax
0000131b	movl	%eax,(%esp)
0000131e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001323	movl	%eax,0x18(%esi)
00001326	movl	0x08(%ebp),%ecx
00001329	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%ecx)
00001333	movl	(%ecx),%eax
00001335	movl	0x000003c4(%eax),%eax
0000133b	movl	%ecx,(%esp)
0000133e	movl	$0x00000001,0x04(%esp)
00001346	call	*%eax
00001348	movl	$0x000001dc,(%esp)
0000134f	calll	operator new(unsigned long)
00001354	movl	%eax,%edi
00001356	movl	0x1c(%ebp),%eax
00001359	movl	0x18(%ebp),%ecx
0000135c	movl	%eax,0x0c(%esp)
00001360	movl	%ecx,0x08(%esp)
00001364	movl	0x08(%ebp),%esi
00001367	movl	%esi,0x04(%esp)
0000136b	movl	%edi,(%esp)
0000136e	calll	CPicker::CPicker(vgui::Panel*, char const*, char const*)
00001373	movl	%edi,0x00000240(%esi)
00001379	movl	(%edi),%eax
0000137b	movl	0x000000b4(%eax),%eax
00001381	movl	%esi,0x04(%esp)
00001385	movl	%edi,(%esp)
00001388	call	*%eax
0000138a	movl	$0x00000224,(%esp)
00001391	calll	operator new(unsigned long)
00001396	movl	%eax,%edi
00001398	leal	0x53fe3-0x122e(%ebx),%eax
0000139e	movl	%eax,0x14(%esp)
000013a2	movl	0x08(%ebp),%esi
000013a5	movl	%esi,0x10(%esp)
000013a9	leal	0x53fce-0x122e(%ebx),%eax
000013af	movl	%eax,0x0c(%esp)
000013b3	leal	0x53fc3-0x122e(%ebx),%eax
000013b9	movl	%eax,0x08(%esp)
000013bd	movl	%esi,0x04(%esp)
000013c1	movl	%edi,(%esp)
000013c4	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
000013c9	movl	%edi,0x00000244(%esi)
000013cf	movl	$0x00000224,(%esp)
000013d6	calll	operator new(unsigned long)
000013db	movl	%eax,%edi
000013dd	leal	0x5400c-0x122e(%ebx),%eax
000013e3	movl	%eax,0x14(%esp)
000013e7	movl	0x08(%ebp),%esi
000013ea	movl	%esi,0x10(%esp)
000013ee	leal	0x53ff5-0x122e(%ebx),%eax
000013f4	movl	%eax,0x0c(%esp)
000013f8	leal	0x53fe8-0x122e(%ebx),%eax
000013fe	movl	%eax,0x08(%esp)
00001402	movl	%esi,0x04(%esp)
00001406	movl	%edi,(%esp)
00001409	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
0000140e	movl	%edi,0x00000248(%esi)
00001414	movl	(%esi),%eax
00001416	movl	0x00000250(%eax),%eax
0000141c	movl	%esi,(%esp)
0000141f	movl	$0x00000001,0x04(%esp)
00001427	call	*%eax
00001429	movl	0x08(%ebp),%edx
0000142c	movl	(%edx),%eax
0000142e	movl	0x00000354(%eax),%eax
00001434	leal	0x54013-0x122e(%ebx),%ecx
0000143a	movl	%ecx,0x04(%esp)
0000143e	movl	%edx,(%esp)
00001441	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
00001449	call	*%eax
0000144b	movl	0x14(%ebp),%ecx
0000144e	movl	0x08(%ebp),%edx
00001451	movl	(%edx),%eax
00001453	movl	0x000003ac(%eax),%eax
00001459	movl	%ecx,0x04(%esp)
0000145d	movl	%edx,(%esp)
00001460	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x08(%esp)
00001468	call	*%eax
0000146a	addl	$0x2c,%esp
0000146d	popl	%esi
0000146e	popl	%edi
0000146f	popl	%ebx
00001470	popl	%ebp
00001471	ret
00001472	movl	%eax,%esi
00001474	jmp	0x00001484
00001476	jmp	0x0000147a
00001478	jmp	0x0000147a
0000147a	movl	%eax,%esi
0000147c	movl	%edi,(%esp)
0000147f	calll	operator delete(void*)
00001484	movl	0xf0(%ebp),%eax
00001487	movl	%eax,0x04(%esp)
0000148b	movl	0x08(%ebp),%eax
0000148e	movl	%eax,(%esp)
00001491	calll	vgui::Frame::~Frame()
00001496	movl	%esi,(%esp)
00001499	calll	__Unwind_Resume
0000149e	calll	std::terminate()
000014a3	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::~CPickerFrame():
000014b0	pushl	%ebp
000014b1	movl	%esp,%ebp
000014b3	pushl	%ebx
000014b4	pushl	%edi
000014b5	pushl	%esi
000014b6	subl	$0x0c,%esp
000014b9	calll	0x000014be
000014be	popl	%ebx
000014bf	leal	vtable for CPickerFrame-0x14be+0x0000000c(%ebx),%eax
000014c5	movl	0x08(%ebp),%edi
000014c8	movl	%eax,(%edi)
000014ca	movl	0x0000024c(%edi),%eax
000014d0	testl	%eax,%eax
000014d2	je	0x000014e6
000014d4	movl	%eax,(%esp)
000014d7	calll	KeyValues::deleteThis()
000014dc	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%edi)
000014e6	leal	VTT for CPickerFrame-0x14be+0x00000004(%ebx),%eax
000014ec	movl	%eax,0x04(%esp)
000014f0	movl	%edi,(%esp)
000014f3	calll	vgui::Frame::~Frame()
000014f8	addl	$0x0c,%esp
000014fb	popl	%esi
000014fc	popl	%edi
000014fd	popl	%ebx
000014fe	popl	%ebp
000014ff	jmp	operator delete(void*)
00001504	movl	%eax,%esi
00001506	leal	VTT for CPickerFrame-0x14be+0x00000004(%ebx),%eax
0000150c	movl	%eax,0x04(%esp)
00001510	movl	%edi,(%esp)
00001513	calll	vgui::Frame::~Frame()
00001518	jmp	0x00001521
0000151a	calll	std::terminate()
0000151f	movl	%eax,%esi
00001521	movl	%edi,(%esp)
00001524	calll	operator delete(void*)
00001529	movl	%esi,(%esp)
0000152c	calll	__Unwind_Resume
00001531	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::~CPickerFrame():
00001540	pushl	%ebp
00001541	movl	%esp,%ebp
00001543	pushl	%ebx
00001544	pushl	%edi
00001545	pushl	%esi
00001546	subl	$0x0c,%esp
00001549	calll	0x0000154e
0000154e	popl	%ebx
0000154f	leal	vtable for CPickerFrame-0x154e+0x0000000c(%ebx),%eax
00001555	movl	0x08(%ebp),%edi
00001558	movl	%eax,(%edi)
0000155a	movl	0x0000024c(%edi),%eax
00001560	testl	%eax,%eax
00001562	je	0x00001576
00001564	movl	%eax,(%esp)
00001567	calll	KeyValues::deleteThis()
0000156c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%edi)
00001576	leal	VTT for CPickerFrame-0x154e+0x00000004(%ebx),%eax
0000157c	movl	%eax,0x04(%esp)
00001580	movl	%edi,(%esp)
00001583	calll	vgui::Frame::~Frame()
00001588	addl	$0x0c,%esp
0000158b	popl	%esi
0000158c	popl	%edi
0000158d	popl	%ebx
0000158e	popl	%ebp
0000158f	ret
00001590	movl	%eax,%esi
00001592	leal	VTT for CPickerFrame-0x154e+0x00000004(%ebx),%eax
00001598	movl	%eax,0x04(%esp)
0000159c	movl	%edi,(%esp)
0000159f	calll	vgui::Frame::~Frame()
000015a4	movl	%esi,(%esp)
000015a7	calll	__Unwind_Resume
000015ac	calll	std::terminate()
000015b1	nopl	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::~CPickerFrame():
000015c0	pushl	%ebp
000015c1	movl	%esp,%ebp
000015c3	pushl	%ebx
000015c4	pushl	%edi
000015c5	pushl	%esi
000015c6	subl	$0x0c,%esp
000015c9	movl	0x0c(%ebp),%edi
000015cc	movl	(%edi),%eax
000015ce	movl	0x08(%ebp),%ebx
000015d1	movl	%eax,(%ebx)
000015d3	movl	0x0000024c(%ebx),%eax
000015d9	testl	%eax,%eax
000015db	je	0x000015ef
000015dd	movl	%eax,(%esp)
000015e0	calll	KeyValues::deleteThis()
000015e5	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%ebx)
000015ef	addl	$0x04,%edi
000015f2	movl	%edi,0x04(%esp)
000015f6	movl	%ebx,(%esp)
000015f9	calll	vgui::Frame::~Frame()
000015fe	addl	$0x0c,%esp
00001601	popl	%esi
00001602	popl	%edi
00001603	popl	%ebx
00001604	popl	%ebp
00001605	ret
00001606	movl	%eax,%esi
00001608	addl	$0x04,%edi
0000160b	movl	%edi,0x04(%esp)
0000160f	movl	%ebx,(%esp)
00001612	calll	vgui::Frame::~Frame()
00001617	movl	%esi,(%esp)
0000161a	calll	__Unwind_Resume
0000161f	calll	std::terminate()
00001624	nopw	%cs:CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::CleanUpMessage():
00001630	pushl	%ebp
00001631	movl	%esp,%ebp
00001633	pushl	%esi
00001634	pushl	%eax
00001635	movl	0x08(%ebp),%esi
00001638	movl	0x0000024c(%esi),%eax
0000163e	testl	%eax,%eax
00001640	je	0x00001654
00001642	movl	%eax,(%esp)
00001645	calll	KeyValues::deleteThis()
0000164a	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%esi)
00001654	addl	$0x04,%esp
00001657	popl	%esi
00001658	popl	%ebp
00001659	ret
0000165a	nopw	CPicker::CPicker(vgui::Panel*, char const*, char const*)(%eax,%eax)
CPickerFrame::DoModal(PickerList_t const&, KeyValues*):
00001660	pushl	%ebp
00001661	movl	%esp,%ebp
00001663	pushl	%esi
00001664	subl	$0x14,%esp
00001667	movl	0x08(%ebp),%esi
0000166a	movl	0x0000024c(%esi),%eax
00001670	testl	%eax,%eax
00001672	je	0x00001686
00001674	movl	%eax,(%esp)
00001677	calll	KeyValues::deleteThis()
0000167c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%esi)
00001686	movl	0x10(%ebp),%ecx
00001689	movl	0x0c(%ebp),%eax
0000168c	movl	%ecx,0x0000024c(%esi)
00001692	movl	0x00000240(%esi),%ecx
00001698	movl	%eax,0x04(%esp)
0000169c	movl	%ecx,(%esp)
0000169f	calll	CPicker::SetStringList(PickerList_t const&)
000016a4	addl	$0x14,%esp
000016a7	popl	%esi
000016a8	popl	%ebp
000016a9	jmp	vgui::Frame::DoModal()
000016ae	nop
CPickerFrame::OnCommand(char const*):
000016b0	pushl	%ebp
000016b1	movl	%esp,%ebp
000016b3	pushl	%ebx
000016b4	pushl	%edi
000016b5	pushl	%esi
000016b6	subl	$0x0c,%esp
000016b9	calll	0x000016be
000016be	popl	%ebx
000016bf	leal	0x53fe3-0x16be(%ebx),%eax
000016c5	movl	%eax,0x04(%esp)
000016c9	movl	0x0c(%ebp),%esi
000016cc	movl	%esi,(%esp)
000016cf	calll	V_stricmp(char const*, char const*)
000016d4	movl	0x08(%ebp),%edi
000016d7	testl	%eax,%eax
000016d9	jne	0x000017e0
000016df	movl	$0x00000020,(%esp)
000016e6	calll	KeyValues::operator new(unsigned long)
000016eb	movl	%eax,%esi
000016ed	leal	0x5402c-0x16be(%ebx),%eax
000016f3	movl	%eax,0x04(%esp)
000016f7	movl	%esi,(%esp)
000016fa	calll	KeyValues::KeyValues(char const*)
000016ff	movl	0x00000240(%edi),%edi
00001705	movl	0x000001b4(%edi),%ecx
0000170b	movl	(%ecx),%eax
0000170d	movl	%ecx,(%esp)
00001710	call	*0x000003f4(%eax)
00001716	movl	%eax,%ecx
00001718	movl	$0xffffffff,%eax
0000171d	testl	%ecx,%ecx
0000171f	je	0x0000173a
00001721	movl	0x000001b4(%edi),%ecx
00001727	movl	(%ecx),%eax
00001729	movl	%ecx,(%esp)
0000172c	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x04(%esp)
00001734	call	*0x000003f8(%eax)
0000173a	movl	%eax,0x08(%esp)
0000173e	leal	0x54033-0x16be(%ebx),%eax
00001744	movl	%eax,0x04(%esp)
00001748	movl	%esi,(%esp)
0000174b	calll	KeyValues::SetInt(char const*, int)
00001750	movl	0x08(%ebp),%edi
00001753	movl	0x00000240(%edi),%eax
00001759	cmpl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x000001d8(%eax)
00001760	jne	0x00001782
00001762	movl	%eax,(%esp)
00001765	calll	CPicker::GetSelectedString() const
0000176a	movl	%eax,0x08(%esp)
0000176e	leal	0x53f43-0x16be(%ebx),%eax
00001774	movl	%eax,0x04(%esp)
00001778	movl	%esi,(%esp)
0000177b	calll	KeyValues::SetString(char const*, char const*)
00001780	jmp	0x000017a0
00001782	movl	%eax,(%esp)
00001785	calll	CPicker::GetSelectedPtr() const
0000178a	movl	%eax,0x08(%esp)
0000178e	leal	0x53f43-0x16be(%ebx),%eax
00001794	movl	%eax,0x04(%esp)
00001798	movl	%esi,(%esp)
0000179b	calll	KeyValues::SetPtr(char const*, void*)
000017a0	movl	0x0000024c(%edi),%eax
000017a6	testl	%eax,%eax
000017a8	je	0x000017c0
000017aa	movl	%eax,0x04(%esp)
000017ae	movl	%esi,(%esp)
000017b1	calll	KeyValues::AddSubKey(KeyValues*)
000017b6	movl	CPicker::CPicker(vgui::Panel*, char const*, char const*),0x0000024c(%edi)
000017c0	movl	(%edi),%eax
000017c2	movl	%esi,0x04(%esp)
000017c6	movl	%edi,(%esp)
000017c9	call	*0x000000c0(%eax)
000017cf	movl	(%edi),%eax
000017d1	movl	0x000003c0(%eax),%eax
000017d7	addl	$0x0c,%esp
000017da	popl	%esi
000017db	popl	%edi
000017dc	popl	%ebx
000017dd	popl	%ebp
000017de	jmp	*%eax
000017e0	leal	0x5400c-0x16be(%ebx),%eax
000017e6	movl	%eax,0x04(%esp)
000017ea	movl	%esi,(%esp)
000017ed	calll	V_stricmp(char const*, char const*)
000017f2	testl	%eax,%eax
000017f4	je	0x000017cf
000017f6	addl	$0x0c,%esp
000017f9	popl	%esi
000017fa	popl	%edi
000017fb	popl	%ebx
000017fc	popl	%ebp
000017fd	jmp	vgui::Frame::OnCommand(char const*)
00001802	movl	%eax,%edi
00001804	movl	%esi,(%esp)
00001807	calll	KeyValues::operator delete(void*)
0000180c	movl	%edi,(%esp)
0000180f	calll	__Unwind_Resume
00001814	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(potterywheelpanel.o):
(__TEXT,__text) section
CTranslationManipulator::CTranslationManipulator(matrix3x4_t*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	calll	0x0000000d
0000000d	popl	%esi
0000000e	movl	0x0c(%ebp),%eax
00000011	movl	%eax,0x04(%esp)
00000015	movl	0x08(%ebp),%edi
00000018	movl	%edi,(%esp)
0000001b	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
00000020	leal	vtable for CTranslationManipulator-0xd+0x00000008(%esi),%eax
00000026	movl	%eax,(%edi)
00000028	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%edi)
0000002f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%edi)
00000036	addl	$0x10,%esp
00000039	popl	%esi
0000003a	popl	%edi
0000003b	popl	%ebp
0000003c	ret
0000003d	nopl	(%eax)
CTranslationManipulator::CTranslationManipulator(matrix3x4_t*):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	pushl	%edi
00000044	pushl	%esi
00000045	subl	$0x10,%esp
00000048	calll	0x0000004d
0000004d	popl	%esi
0000004e	movl	0x0c(%ebp),%eax
00000051	movl	%eax,0x04(%esp)
00000055	movl	0x08(%ebp),%edi
00000058	movl	%edi,(%esp)
0000005b	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
00000060	leal	vtable for CTranslationManipulator-0x4d+0x00000008(%esi),%eax
00000066	movl	%eax,(%edi)
00000068	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%edi)
0000006f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%edi)
00000076	addl	$0x10,%esp
00000079	popl	%esi
0000007a	popl	%edi
0000007b	popl	%ebp
0000007c	ret
0000007d	nopl	(%eax)
CTranslationManipulator::OnMousePressed(ButtonCode_t, int, int):
00000080	movl	0x10(%esp),%ecx
00000084	movl	0x04(%esp),%eax
00000088	movl	%ecx,0x14(%eax)
0000008b	movl	0x0c(%esp),%ecx
0000008f	movl	%ecx,0x10(%eax)
00000092	ret
00000093	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CTranslationManipulator::OnCursorMoved(int, int):
000000a0	pushl	%ebp
000000a1	movl	%esp,%ebp
000000a3	pushl	%ebx
000000a4	pushl	%edi
000000a5	pushl	%esi
000000a6	subl	$0x5c,%esp
000000a9	calll	0x000000ae
000000ae	popl	%ebx
000000af	movl	0x08(%ebp),%eax
000000b2	movl	0x0c(%eax),%edi
000000b5	testl	%edi,%edi
000000b7	je	0x000001c1
000000bd	leal	0xd8(%ebp),%esi
000000c0	movl	%esi,0x04(%esp)
000000c4	movl	%edi,(%esp)
000000c7	calll	MatrixAngles(matrix3x4_t const&, float*)
000000cc	leal	0xe8(%ebp),%eax
000000cf	movl	%eax,0x08(%esp)
000000d3	movl	%edi,(%esp)
000000d6	movl	$0x00000003,0x04(%esp)
000000de	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
000000e3	leal	0xa8(%ebp),%eax
000000e6	movl	%eax,0x0c(%esp)
000000ea	leal	0xb8(%ebp),%eax
000000ed	movl	%eax,0x08(%esp)
000000f1	leal	0xc8(%ebp),%eax
000000f4	movl	%eax,0x04(%esp)
000000f8	movl	%esi,(%esp)
000000fb	calll	AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
00000100	movl	0x10(%ebp),%edx
00000103	movl	%edx,%eax
00000105	movl	0x08(%ebp),%esi
00000108	subl	0x14(%esi),%eax
0000010b	movl	0x0c(%ebp),%edi
0000010e	movl	%edi,%ecx
00000110	subl	0x10(%esi),%ecx
00000113	cvtsi2ss	%ecx,%xmm0
00000117	mulss	0x7c618-0xae(%ebx),%xmm0
0000011f	movss	0xb8(%ebp),%xmm3
00000124	mulss	%xmm0,%xmm3
00000128	movss	%xmm3,0xb8(%ebp)
0000012d	movss	0xbc(%ebp),%xmm2
00000132	mulss	%xmm0,%xmm2
00000136	movss	%xmm2,0xbc(%ebp)
0000013b	mulss	0xc0(%ebp),%xmm0
00000140	movss	%xmm0,0xc0(%ebp)
00000145	cvtsi2ss	%eax,%xmm1
00000149	mulss	0x7c61c-0xae(%ebx),%xmm1
00000151	movss	0xa8(%ebp),%xmm4
00000156	mulss	%xmm1,%xmm4
0000015a	movss	%xmm4,0xa8(%ebp)
0000015f	addss	%xmm3,%xmm4
00000163	movss	0xac(%ebp),%xmm3
00000168	mulss	%xmm1,%xmm3
0000016c	movss	%xmm3,0xac(%ebp)
00000171	mulss	0xb0(%ebp),%xmm1
00000176	movss	%xmm1,0xb0(%ebp)
0000017b	addss	0xe8(%ebp),%xmm4
00000180	movss	%xmm4,0xe8(%ebp)
00000185	addss	%xmm2,%xmm3
00000189	addss	0xec(%ebp),%xmm3
0000018e	movss	%xmm3,0xec(%ebp)
00000193	addss	%xmm0,%xmm1
00000197	addss	0xf0(%ebp),%xmm1
0000019c	movss	%xmm1,0xf0(%ebp)
000001a1	movl	%edi,0x10(%esi)
000001a4	movl	%edx,0x14(%esi)
000001a7	movl	0x0c(%esi),%eax
000001aa	movl	%eax,0x08(%esp)
000001ae	leal	0xe8(%ebp),%eax
000001b1	movl	%eax,(%esp)
000001b4	movl	$0x00000003,0x04(%esp)
000001bc	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
000001c1	addl	$0x5c,%esp
000001c4	popl	%esi
000001c5	popl	%edi
000001c6	popl	%ebx
000001c7	popl	%ebp
000001c8	ret
000001c9	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax)
CZoomManipulator::CZoomManipulator(float*):
000001d0	calll	0x000001d5
000001d5	popl	%ecx
000001d6	movl	0x04(%esp),%eax
000001da	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%eax)
000001e1	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%eax)
000001e8	leal	vtable for CZoomManipulator-0x1d5+0x00000008(%ecx),%ecx
000001ee	movl	%ecx,(%eax)
000001f0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0c(%eax)
000001f7	movl	0x08(%esp),%ecx
000001fb	movl	%ecx,0x10(%eax)
000001fe	ret
000001ff	nop
CZoomManipulator::CZoomManipulator(float*):
00000200	calll	0x00000205
00000205	popl	%ecx
00000206	movl	0x04(%esp),%eax
0000020a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%eax)
00000211	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%eax)
00000218	leal	vtable for CZoomManipulator-0x205+0x00000008(%ecx),%ecx
0000021e	movl	%ecx,(%eax)
00000220	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0c(%eax)
00000227	movl	0x08(%esp),%ecx
0000022b	movl	%ecx,0x10(%eax)
0000022e	ret
0000022f	nop
CZoomManipulator::OnMousePressed(ButtonCode_t, int, int):
00000230	movl	0x10(%esp),%eax
00000234	movl	0x04(%esp),%ecx
00000238	movl	%eax,0x0c(%ecx)
0000023b	ret
0000023c	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax)
CZoomManipulator::OnCursorMoved(int, int):
00000240	pushl	%ebp
00000241	movl	%esp,%ebp
00000243	pushl	%esi
00000244	subl	$0x24,%esp
00000247	calll	0x0000024c
0000024c	popl	%eax
0000024d	movsd	0x7c668-0x24c(%eax),%xmm0
00000255	movsd	%xmm0,(%esp)
0000025a	movl	0x08(%ebp),%esi
0000025d	movl	0x0c(%esi),%edx
00000260	movl	0x10(%ebp),%ecx
00000263	movl	%ecx,0x0c(%esi)
00000266	subl	%edx,%ecx
00000268	cvtsi2ss	%ecx,%xmm0
0000026c	mulss	0x7c620-0x24c(%eax),%xmm0
00000274	cvtss2sd	%xmm0,%xmm0
00000278	movsd	%xmm0,0x08(%esp)
0000027e	calll	_pow
00000283	fstpl	0xf0(%ebp)
00000286	movl	0x10(%esi),%eax
00000289	movss	(%eax),%xmm0
0000028d	cvtss2sd	%xmm0,%xmm0
00000291	mulsd	0xf0(%ebp),%xmm0
00000296	cvtsd2ss	%xmm0,%xmm0
0000029a	movss	%xmm0,(%eax)
0000029e	addl	$0x24,%esp
000002a1	popl	%esi
000002a2	popl	%ebp
000002a3	ret
000002a4	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::CRotationManipulator(matrix3x4_t*):
000002b0	pushl	%ebp
000002b1	movl	%esp,%ebp
000002b3	pushl	%edi
000002b4	pushl	%esi
000002b5	subl	$0x10,%esp
000002b8	calll	0x000002bd
000002bd	popl	%edi
000002be	movl	0x0c(%ebp),%eax
000002c1	movl	%eax,0x04(%esp)
000002c5	movl	0x08(%ebp),%esi
000002c8	movl	%esi,(%esp)
000002cb	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
000002d0	leal	vtable for CRotationManipulator-0x2bd+0x00000008(%edi),%eax
000002d6	movl	%eax,(%esi)
000002d8	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%esi)
000002df	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%esi)
000002e6	movl	$0x3f060a92,0x18(%esi)
000002ed	movl	$0xc016cbe4,0x1c(%esi)
000002f4	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x20(%esi)
000002fb	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x24(%esi)
000002ff	addl	$0x10,%esp
00000302	popl	%esi
00000303	popl	%edi
00000304	popl	%ebp
00000305	jmp	CRotationManipulator::UpdateTransform()
0000030a	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::CRotationManipulator(matrix3x4_t*):
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	pushl	%edi
00000314	pushl	%esi
00000315	subl	$0x10,%esp
00000318	calll	0x0000031d
0000031d	popl	%edi
0000031e	movl	0x0c(%ebp),%eax
00000321	movl	%eax,0x04(%esp)
00000325	movl	0x08(%ebp),%esi
00000328	movl	%esi,(%esp)
0000032b	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
00000330	leal	vtable for CRotationManipulator-0x31d+0x00000008(%edi),%eax
00000336	movl	%eax,(%esi)
00000338	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%esi)
0000033f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%esi)
00000346	movl	$0x3f060a92,0x18(%esi)
0000034d	movl	$0xc016cbe4,0x1c(%esi)
00000354	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x20(%esi)
0000035b	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x24(%esi)
0000035f	addl	$0x10,%esp
00000362	popl	%esi
00000363	popl	%edi
00000364	popl	%ebp
00000365	jmp	CRotationManipulator::UpdateTransform()
0000036a	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::OnMousePressed(ButtonCode_t, int, int):
00000370	pushl	%ebp
00000371	movl	%esp,%ebp
00000373	pushl	%ebx
00000374	pushl	%edi
00000375	pushl	%esi
00000376	subl	$0x0c,%esp
00000379	calll	0x0000037e
0000037e	popl	%eax
0000037f	movl	0x85651-0x37e(%eax),%esi
00000385	movl	(%esi),%ecx
00000387	movl	(%ecx),%eax
00000389	movl	%ecx,(%esp)
0000038c	movl	$0x00000051,0x04(%esp)
00000394	call	*0x44(%eax)
00000397	movl	0x10(%ebp),%edi
0000039a	movl	0x08(%ebp),%ebx
0000039d	testb	%al,%al
0000039f	jne	0x000003b7
000003a1	movl	(%esi),%ecx
000003a3	movl	(%ecx),%eax
000003a5	movl	%ecx,(%esp)
000003a8	movl	$0x00000052,0x04(%esp)
000003b0	call	*0x44(%eax)
000003b3	cmpb	$0x01,%al
000003b5	jne	0x000003bd
000003b7	movb	$0x01,0x24(%ebx)
000003bb	jmp	0x000003c1
000003bd	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x24(%ebx)
000003c1	movl	0x14(%ebp),%eax
000003c4	movl	%eax,0x14(%ebx)
000003c7	movl	%edi,0x10(%ebx)
000003ca	addl	$0x0c,%esp
000003cd	popl	%esi
000003ce	popl	%edi
000003cf	popl	%ebx
000003d0	popl	%ebp
000003d1	ret
000003d2	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::OnCursorMoved(int, int):
000003e0	pushl	%edi
000003e1	pushl	%esi
000003e2	calll	0x000003e7
000003e7	popl	%esi
000003e8	movl	0x0c(%esp),%eax
000003ec	movl	0x10(%eax),%edx
000003ef	movl	0x10(%esp),%ecx
000003f3	subl	%ecx,%edx
000003f5	cvtsi2ss	%edx,%xmm0
000003f9	mulss	0x7c624-0x3e7(%esi),%xmm0
00000401	movl	0x14(%esp),%edx
00000405	testb	$0x01,0x24(%eax)
00000409	je	0x00000417
0000040b	addss	0x20(%eax),%xmm0
00000410	movss	%xmm0,0x20(%eax)
00000415	jmp	0x00000479
00000417	addss	0x1c(%eax),%xmm0
0000041c	movss	%xmm0,0x1c(%eax)
00000421	movl	0x14(%eax),%edi
00000424	subl	%edx,%edi
00000426	cvtsi2ss	%edi,%xmm0
0000042a	mulss	0x7c628-0x3e7(%esi),%xmm0
00000432	addss	0x18(%eax),%xmm0
00000437	movss	%xmm0,0x18(%eax)
0000043c	cvtss2sd	%xmm0,%xmm1
00000440	ucomisd	0x7c670-0x3e7(%esi),%xmm1
00000448	ja	0x00000462
0000044a	movsd	0x7c678-0x3e7(%esi),%xmm2
00000452	ucomisd	%xmm1,%xmm2
00000456	jbe	0x00000462
00000458	movss	0x7c62c-0x3e7(%esi),%xmm0
00000460	jmp	0x00000474
00000462	ucomisd	0x7c670-0x3e7(%esi),%xmm1
0000046a	jbe	0x00000474
0000046c	movss	0x7c630-0x3e7(%esi),%xmm0
00000474	movss	%xmm0,0x18(%eax)
00000479	movl	%ecx,0x10(%eax)
0000047c	movl	%edx,0x14(%eax)
0000047f	movl	(%eax),%eax
00000481	movl	0x24(%eax),%eax
00000484	popl	%esi
00000485	popl	%edi
00000486	jmp	*%eax
00000488	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::UpdateTransform():
00000490	pushl	%ebp
00000491	movl	%esp,%ebp
00000493	pushl	%edi
00000494	pushl	%esi
00000495	subl	$0x30,%esp
00000498	calll	0x0000049d
0000049d	popl	%ecx
0000049e	movl	0x08(%ebp),%esi
000004a1	movl	0x0c(%esi),%eax
000004a4	testl	%eax,%eax
000004a6	je	0x00000503
000004a8	movss	0x7c634-0x49d(%ecx),%xmm1
000004b0	movss	0x20(%esi),%xmm0
000004b5	mulss	%xmm1,%xmm0
000004b9	movss	0x1c(%esi),%xmm2
000004be	mulss	%xmm1,%xmm2
000004c2	mulss	0x18(%esi),%xmm1
000004c7	movss	%xmm1,0xe8(%ebp)
000004cc	movss	%xmm2,0xec(%ebp)
000004d1	movss	%xmm0,0xf0(%ebp)
000004d6	leal	0xd8(%ebp),%edi
000004d9	movl	%edi,0x08(%esp)
000004dd	movl	%eax,(%esp)
000004e0	movl	$0x00000003,0x04(%esp)
000004e8	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
000004ed	movl	0x0c(%esi),%eax
000004f0	movl	%eax,0x08(%esp)
000004f4	movl	%edi,0x04(%esp)
000004f8	leal	0xe8(%ebp),%eax
000004fb	movl	%eax,(%esp)
000004fe	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
00000503	addl	$0x30,%esp
00000506	popl	%esi
00000507	popl	%edi
00000508	popl	%ebp
00000509	ret
0000050a	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CRotationManipulator::UpdateFromMatrix():
00000510	pushl	%ebp
00000511	movl	%esp,%ebp
00000513	pushl	%ebx
00000514	pushl	%edi
00000515	pushl	%esi
00000516	subl	$0x2c,%esp
00000519	calll	0x0000051e
0000051e	popl	%edi
0000051f	movl	0x08(%ebp),%esi
00000522	movl	0x0c(%esi),%ebx
00000525	testl	%ebx,%ebx
00000527	je	0x0000057d
00000529	leal	0xe8(%ebp),%eax
0000052c	movl	%eax,0x04(%esp)
00000530	movl	%ebx,(%esp)
00000533	calll	MatrixAngles(matrix3x4_t const&, float*)
00000538	leal	0xd8(%ebp),%eax
0000053b	movl	%eax,0x08(%esp)
0000053f	movl	%ebx,(%esp)
00000542	movl	$0x00000003,0x04(%esp)
0000054a	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
0000054f	movss	0x7c638-0x51e(%edi),%xmm0
00000557	movss	0xe8(%ebp),%xmm1
0000055c	mulss	%xmm0,%xmm1
00000560	movss	%xmm1,0x18(%esi)
00000565	movss	0xec(%ebp),%xmm1
0000056a	mulss	%xmm0,%xmm1
0000056e	movss	%xmm1,0x1c(%esi)
00000573	mulss	0xf0(%ebp),%xmm0
00000578	movss	%xmm0,0x20(%esi)
0000057d	addl	$0x2c,%esp
00000580	popl	%esi
00000581	popl	%edi
00000582	popl	%ebx
00000583	popl	%ebp
00000584	ret
00000585	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::CPotteryWheelPanel(vgui::Panel*, char const*):
00000590	pushl	%ebp
00000591	movl	%esp,%ebp
00000593	pushl	%ebx
00000594	pushl	%edi
00000595	pushl	%esi
00000596	subl	$0x000000bc,%esp
0000059c	calll	0x000005a1
000005a1	popl	%ebx
000005a2	movl	0x14(%ebp),%eax
000005a5	movl	%eax,0x0c(%esp)
000005a9	movl	0x10(%ebp),%eax
000005ac	movl	%eax,0x08(%esp)
000005b0	movl	0x0c(%ebp),%esi
000005b3	leal	0x04(%esi),%eax
000005b6	movl	%eax,0xffffff6c(%ebp)
000005bc	movl	%eax,0x04(%esp)
000005c0	movl	0x08(%ebp),%edi
000005c3	movl	%edi,(%esp)
000005c6	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
000005cb	movl	(%esi),%eax
000005cd	movl	%eax,(%edi)
000005cf	testb	$0x01,CPotteryWheelPanel::ChainToMap()::chained-0x5a1(%ebx)
000005d6	jne	0x0000060d
000005d8	movb	$0x01,CPotteryWheelPanel::ChainToMap()::chained-0x5a1(%ebx)
000005df	leal	0x7e498-0x5a1(%ebx),%eax
000005e5	movl	%eax,(%esp)
000005e8	calll	vgui::FindOrAddPanelMessageMap(char const*)
000005ed	movl	%eax,%esi
000005ef	leal	CPotteryWheelPanel::GetPanelClassName()-0x5a1(%ebx),%eax
000005f5	movl	%eax,0x1c(%esi)
000005f8	testl	%esi,%esi
000005fa	je	0x0000060d
000005fc	leal	0x7e4ce-0x5a1(%ebx),%eax
00000602	movl	%eax,(%esp)
00000605	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000060a	movl	%eax,0x18(%esi)
0000060d	testb	$0x01,CPotteryWheelPanel::ChainToAnimationMap()::chained-0x5a1(%ebx)
00000614	jne	0x0000064b
00000616	movb	$0x01,CPotteryWheelPanel::ChainToAnimationMap()::chained-0x5a1(%ebx)
0000061d	leal	0x7e498-0x5a1(%ebx),%eax
00000623	movl	%eax,(%esp)
00000626	calll	FindOrAddPanelAnimationMap(char const*)
0000062b	movl	%eax,%esi
0000062d	leal	CPotteryWheelPanel::GetPanelClassName()-0x5a1(%ebx),%eax
00000633	movl	%eax,0x18(%esi)
00000636	testl	%esi,%esi
00000638	je	0x0000064b
0000063a	leal	0x7e4ce-0x5a1(%ebx),%eax
00000640	movl	%eax,(%esp)
00000643	calll	FindOrAddPanelAnimationMap(char const*)
00000648	movl	%eax,0x14(%esi)
0000064b	testb	$0x01,CPotteryWheelPanel::KB_ChainToMap()::chained-0x5a1(%ebx)
00000652	jne	0x00000689
00000654	movb	$0x01,CPotteryWheelPanel::KB_ChainToMap()::chained-0x5a1(%ebx)
0000065b	leal	0x7e498-0x5a1(%ebx),%eax
00000661	movl	%eax,(%esp)
00000664	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000669	movl	%eax,%esi
0000066b	leal	CPotteryWheelPanel::GetPanelClassName()-0x5a1(%ebx),%eax
00000671	movl	%eax,0x44(%esi)
00000674	testl	%esi,%esi
00000676	je	0x00000689
00000678	leal	0x7e4ce-0x5a1(%ebx),%eax
0000067e	movl	%eax,(%esp)
00000681	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000686	movl	%eax,0x18(%esi)
00000689	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%edi)
00000693	leal	0x000001b8(%edi),%eax
00000699	movl	%eax,0xffffff70(%ebp)
0000069f	movl	%eax,(%esp)
000006a2	movl	$0x00000001,0x0c(%esp)
000006aa	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
000006b2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000006ba	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
000006bf	movb	$0x01,0x000001bc(%edi)
000006c6	leal	0x000001c0(%edi),%eax
000006cc	movl	%eax,0xffffff68(%ebp)
000006d2	movl	%eax,(%esp)
000006d5	movl	$0x00000001,0x0c(%esp)
000006dd	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
000006e5	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000006ed	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
000006f2	leal	0x000001c4(%edi),%eax
000006f8	movl	%eax,0xffffff64(%ebp)
000006fe	movl	%eax,(%esp)
00000701	movl	$0x00000001,0x0c(%esp)
00000709	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00000711	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00000719	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
0000071e	leal	0x000001c8(%edi),%eax
00000724	movl	%eax,0xffffff60(%ebp)
0000072a	movl	%eax,(%esp)
0000072d	calll	CTextureReference::CTextureReference()
00000732	leal	0x000001cc(%edi),%eax
00000738	movl	%eax,0xffffff5c(%ebp)
0000073e	movl	%eax,(%esp)
00000741	calll	CTextureReference::CTextureReference()
00000746	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004a8(%edi)
00000750	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004bc(%edi)
0000075a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004b8(%edi)
00000764	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c4(%edi)
0000076e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c0(%edi)
00000778	movl	$0xffffffff,0x000004c8(%edi)
00000782	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004cc(%edi)
0000078c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004d0(%edi)
00000796	movl	%edi,%esi
00000798	testb	$0x01,CPotteryWheelPanel::PanelAnimationVar_m_bUseParentBG::InitVar()::bAdded-0x5a1(%ebx)
0000079f	jne	0x000007e6
000007a1	movb	$0x01,CPotteryWheelPanel::PanelAnimationVar_m_bUseParentBG::InitVar()::bAdded-0x5a1(%ebx)
000007a8	leal	CPotteryWheelPanel::GetVar_m_bUseParentBG(vgui::Panel*)-0x5a1(%ebx),%eax
000007ae	movl	%eax,0x14(%esp)
000007b2	leal	0x7e4cc-0x5a1(%ebx),%eax
000007b8	movl	%eax,0x0c(%esp)
000007bc	leal	0x7e4bd-0x5a1(%ebx),%eax
000007c2	movl	%eax,0x08(%esp)
000007c6	leal	0x7e4b8-0x5a1(%ebx),%eax
000007cc	movl	%eax,0x04(%esp)
000007d0	leal	0x7e4ac-0x5a1(%ebx),%eax
000007d6	movl	%eax,(%esp)
000007d9	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%esp)
000007e1	calll	CPotteryWheelPanel::AddToAnimationMap(char const*, char const*, char const*, char const*, bool, void* (*)(vgui::Panel*))
000007e6	andb	$0xfe,0x000004d4(%esi)
000007ed	movl	(%esi),%eax
000007ef	movl	0x00000120(%eax),%eax
000007f5	movl	%esi,(%esp)
000007f8	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00000800	call	*%eax
00000802	movl	(%esi),%eax
00000804	movl	0x0000011c(%eax),%eax
0000080a	movl	%esi,(%esp)
0000080d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00000815	call	*%eax
00000817	leal	0x000001f4(%esi),%eax
0000081d	movl	%eax,0xffffff74(%ebp)
00000823	movb	$0x4c,0x000004a8(%esi)
0000082a	movb	$0x58,0x000004a9(%esi)
00000831	movb	$0x44,0x000004aa(%esi)
00000838	movb	$0xff,0x000004ab(%esi)
0000083f	movl	%eax,(%esp)
00000842	calll	SetIdentityMatrix(matrix3x4_t&)
00000847	movl	%esi,(%esp)
0000084a	calll	CPotteryWheelPanel::CreateDefaultLights()
0000084f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001b4(%esi)
00000859	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001b0(%esi)
00000863	movl	$0x42c80000,0x000004ac(%esi)
0000086d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004b0(%esi)
00000877	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004b4(%esi)
00000881	movl	$0x40400000,0x000001ec(%esi)
0000088b	movl	$0x46ddb3d7,0x000001f0(%esi)
00000895	movl	$0x41f00000,0x000001e8(%esi)
0000089f	movl	$0x00000028,(%esp)
000008a6	calll	operator new(unsigned long)
000008ab	movl	%eax,%edi
000008ad	movl	0xffffff74(%ebp),%eax
000008b3	movl	%eax,0x04(%esp)
000008b7	movl	%edi,(%esp)
000008ba	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
000008bf	leal	vtable for CRotationManipulator-0x5a1+0x00000008(%ebx),%eax
000008c5	movl	%eax,(%edi)
000008c7	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%edi)
000008ce	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%edi)
000008d5	movl	$0x3f060a92,0x18(%edi)
000008dc	movl	$0xc016cbe4,0x1c(%edi)
000008e3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x20(%edi)
000008ea	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x24(%edi)
000008ee	movl	0x0c(%edi),%eax
000008f1	testl	%eax,%eax
000008f3	je	0x0000093a
000008f5	movl	$0x41f00000,0xe8(%ebp)
000008fc	movl	$0xc3070000,0xec(%ebp)
00000903	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xf0(%ebp)
0000090a	leal	0xd8(%ebp),%ecx
0000090d	movl	%ecx,0x08(%esp)
00000911	movl	%eax,(%esp)
00000914	movl	$0x00000003,0x04(%esp)
0000091c	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00000921	movl	0x0c(%edi),%eax
00000924	movl	%eax,0x08(%esp)
00000928	leal	0xd8(%ebp),%eax
0000092b	movl	%eax,0x04(%esp)
0000092f	leal	0xe8(%ebp),%eax
00000932	movl	%eax,(%esp)
00000935	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
0000093a	leal	0x000004b8(%esi),%eax
00000940	movl	%edi,(%eax)
00000942	movl	$0x00000018,(%esp)
00000949	calll	operator new(unsigned long)
0000094e	movl	%eax,%edi
00000950	movl	0xffffff74(%ebp),%eax
00000956	movl	%eax,0x04(%esp)
0000095a	movl	%edi,(%esp)
0000095d	calll	CTransformManipulator::CTransformManipulator(matrix3x4_t*)
00000962	leal	vtable for CTranslationManipulator-0x5a1+0x00000008(%ebx),%eax
00000968	movl	%eax,(%edi)
0000096a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x14(%edi)
00000971	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%edi)
00000978	movl	%edi,0x000004bc(%esi)
0000097e	movl	$0x00000014,(%esp)
00000985	calll	operator new(unsigned long)
0000098a	leal	0x000004ac(%esi),%edx
00000990	movl	%edx,0xffffff58(%ebp)
00000996	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%eax)
0000099d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%eax)
000009a4	leal	vtable for CZoomManipulator-0x5a1+0x00000008(%ebx),%ecx
000009aa	movl	%ecx,(%eax)
000009ac	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0c(%eax)
000009b3	movl	%edx,0x10(%eax)
000009b6	movl	%eax,0x000004c0(%esi)
000009bc	movl	$0x00000020,(%esp)
000009c3	calll	KeyValues::operator new(unsigned long)
000009c8	movl	%eax,%edi
000009ca	leal	0x7e355-0x5a1(%ebx),%eax
000009d0	movl	%eax,0x0c(%esp)
000009d4	leal	0x7e34e-0x5a1(%ebx),%eax
000009da	movl	%eax,0x08(%esp)
000009de	leal	0x7e344-0x5a1(%ebx),%eax
000009e4	movl	%eax,0x04(%esp)
000009e8	movl	%edi,(%esp)
000009eb	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000009f0	leal	0x7e355-0x5a1(%ebx),%eax
000009f6	movl	%eax,0x08(%esp)
000009fa	leal	0x7e357-0x5a1(%ebx),%eax
00000a00	movl	%eax,0x04(%esp)
00000a04	movl	%edi,(%esp)
00000a07	calll	KeyValues::SetString(char const*, char const*)
00000a0c	movl	%edi,0x08(%esp)
00000a10	leal	0x7e364-0x5a1(%ebx),%eax
00000a16	movl	%eax,0x04(%esp)
00000a1a	movl	0xffffff70(%ebp),%eax
00000a20	movl	%eax,(%esp)
00000a23	calll	CMaterialReference::Init(char const*, KeyValues*)
00000a28	movl	(%esi),%eax
00000a2a	movl	0x00000220(%eax),%eax
00000a30	movl	%esi,(%esp)
00000a33	movl	$0x00000001,0x04(%esp)
00000a3b	call	*%eax
00000a3d	leal	0xa8(%ebp),%edi
00000a40	movl	%edi,(%esp)
00000a43	calll	SetIdentityMatrix(matrix3x4_t&)
00000a48	movl	%edi,0x08(%esp)
00000a4c	movl	0xffffff58(%ebp),%eax
00000a52	movl	%eax,(%esp)
00000a55	movl	$0x00000003,0x04(%esp)
00000a5d	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
00000a62	leal	0xffffff78(%ebp),%ebx
00000a68	movl	%ebx,0x08(%esp)
00000a6c	movl	%edi,0x04(%esp)
00000a70	movl	0xffffff74(%ebp),%eax
00000a76	movl	%eax,(%esp)
00000a79	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
00000a7e	leal	0x000001dc(%esi),%eax
00000a84	movl	%eax,0x04(%esp)
00000a88	movl	%ebx,(%esp)
00000a8b	calll	MatrixAngles(matrix3x4_t const&, float*)
00000a90	leal	CZoomManipulator::CZoomManipulator(float*)(%esi),%eax
00000a96	movl	%eax,0x08(%esp)
00000a9a	movl	%ebx,(%esp)
00000a9d	movl	$0x00000003,0x04(%esp)
00000aa5	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00000aaa	addl	$0x000000bc,%esp
00000ab0	popl	%esi
00000ab1	popl	%edi
00000ab2	popl	%ebx
00000ab3	popl	%ebp
00000ab4	ret
00000ab5	movl	%eax,%ebx
00000ab7	jmp	0x00000b31
00000ab9	movl	%eax,%ebx
00000abb	jmp	0x00000b23
00000abd	movl	%eax,%ebx
00000abf	jmp	0x00000b15
00000ac1	movl	%eax,%ebx
00000ac3	jmp	0x00000b07
00000ac5	movl	%eax,%ebx
00000ac7	jmp	0x00000af9
00000ac9	movl	%eax,%ebx
00000acb	movl	%esi,%edi
00000acd	jmp	0x00000aeb
00000acf	movl	%eax,%ebx
00000ad1	movl	%edi,(%esp)
00000ad4	calll	operator delete(void*)
00000ad9	movl	%esi,%edi
00000adb	jmp	0x00000aeb
00000add	jmp	0x00000acf
00000adf	movl	%eax,%ebx
00000ae1	movl	%edi,(%esp)
00000ae4	calll	KeyValues::operator delete(void*)
00000ae9	movl	%esi,%edi
00000aeb	movl	0xffffff5c(%ebp),%eax
00000af1	movl	%eax,(%esp)
00000af4	calll	CTextureReference::~CTextureReference()
00000af9	movl	0xffffff60(%ebp),%eax
00000aff	movl	%eax,(%esp)
00000b02	calll	CTextureReference::~CTextureReference()
00000b07	movl	0xffffff64(%ebp),%eax
00000b0d	movl	%eax,(%esp)
00000b10	calll	CMaterialReference::~CMaterialReference()
00000b15	movl	0xffffff68(%ebp),%eax
00000b1b	movl	%eax,(%esp)
00000b1e	calll	CMaterialReference::~CMaterialReference()
00000b23	movl	0xffffff70(%ebp),%eax
00000b29	movl	%eax,(%esp)
00000b2c	calll	CMaterialReference::~CMaterialReference()
00000b31	movl	0xffffff6c(%ebp),%eax
00000b37	movl	%eax,0x04(%esp)
00000b3b	movl	%edi,(%esp)
00000b3e	calll	vgui::EditablePanel::~EditablePanel()
00000b43	movl	%ebx,(%esp)
00000b46	calll	__Unwind_Resume
00000b4b	calll	std::terminate()
CPotteryWheelPanel::CreateDefaultLights():
00000b50	pushl	%ebp
00000b51	movl	%esp,%ebp
00000b53	pushl	%ebx
00000b54	pushl	%edi
00000b55	pushl	%esi
00000b56	subl	$0x0c,%esp
00000b59	movl	0x08(%ebp),%edi
00000b5c	movl	$0x3ecccccd,0x00000448(%edi)
00000b66	movl	$0x3ecccccd,0x0000044c(%edi)
00000b70	movl	$0x3ecccccd,0x00000450(%edi)
00000b7a	movl	$0x3f800000,0x00000454(%edi)
00000b84	movl	$0x3ecccccd,0x00000458(%edi)
00000b8e	movl	$0x3ecccccd,0x0000045c(%edi)
00000b98	movl	$0x3ecccccd,0x00000460(%edi)
00000ba2	movl	$0x3f800000,0x00000464(%edi)
00000bac	movl	$0x3ecccccd,0x00000468(%edi)
00000bb6	movl	$0x3ecccccd,0x0000046c(%edi)
00000bc0	movl	$0x3ecccccd,0x00000470(%edi)
00000bca	movl	$0x3f800000,0x00000474(%edi)
00000bd4	movl	$0x3ecccccd,0x00000478(%edi)
00000bde	movl	$0x3ecccccd,0x0000047c(%edi)
00000be8	movl	$0x3ecccccd,0x00000480(%edi)
00000bf2	movl	$0x3f800000,0x00000484(%edi)
00000bfc	movl	$0x3ecccccd,0x00000488(%edi)
00000c06	movl	$0x3ecccccd,0x0000048c(%edi)
00000c10	movl	$0x3ecccccd,CRotationManipulator::UpdateTransform()(%edi)
00000c1a	movl	$0x3f800000,0x00000494(%edi)
00000c24	movl	$0x3ecccccd,0x00000498(%edi)
00000c2e	movl	$0x3ecccccd,0x0000049c(%edi)
00000c38	movl	$0x3ecccccd,0x000004a0(%edi)
00000c42	movl	$0x3f800000,0x000004a4(%edi)
00000c4c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000022c(%edi)
00000c56	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000228(%edi)
00000c60	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000234(%edi)
00000c6a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),CZoomManipulator::OnMousePressed(ButtonCode_t, int, int)(%edi)
00000c74	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000023c(%edi)
00000c7e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000238(%edi)
00000c88	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000244(%edi)
00000c92	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),CZoomManipulator::OnCursorMoved(int, int)(%edi)
00000c9c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000024c(%edi)
00000ca6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000248(%edi)
00000cb0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000025c(%edi)
00000cba	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000258(%edi)
00000cc4	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000254(%edi)
00000cce	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000250(%edi)
00000cd8	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000026c(%edi)
00000ce2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000268(%edi)
00000cec	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000274(%edi)
00000cf6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000270(%edi)
00000d00	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000027c(%edi)
00000d0a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000278(%edi)
00000d14	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000264(%edi)
00000d1e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000260(%edi)
00000d28	leal	0x00000280(%edi),%ebx
00000d2e	movl	%ebx,(%esp)
00000d31	calll	SetIdentityMatrix(matrix3x4_t&)
00000d36	movl	$0x00000002,0x00000228(%edi)
00000d40	movl	$0x3f800000,0x0000022c(%edi)
00000d4a	movl	$0x3f800000,CZoomManipulator::OnMousePressed(ButtonCode_t, int, int)(%edi)
00000d54	movl	$0x3f800000,0x00000234(%edi)
00000d5e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000244(%edi)
00000d68	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000248(%edi)
00000d72	movl	$0xbf800000,0x0000024c(%edi)
00000d7c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000250(%edi)
00000d86	movl	$0x3f800000,0x00000258(%edi)
00000d90	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000025c(%edi)
00000d9a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000260(%edi)
00000da4	leal	0x00000228(%edi),%eax
00000daa	movl	%eax,(%esp)
00000dad	calll	LightDesc_t::RecalculateDerivedValues()
00000db2	movl	$0x00000001,0x00000224(%edi)
00000dbc	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),(%esp)
00000dc3	calll	operator new(unsigned long)
00000dc8	movl	%eax,%esi
00000dca	movl	%ebx,0x04(%esp)
00000dce	movl	%esi,(%esp)
00000dd1	calll	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)
00000dd6	movl	%esi,0x000004c4(%edi)
00000ddc	addl	$0x0c,%esp
00000ddf	popl	%esi
00000de0	popl	%edi
00000de1	popl	%ebx
00000de2	popl	%ebp
00000de3	ret
00000de4	movl	%eax,%edi
00000de6	movl	%esi,(%esp)
00000de9	calll	operator delete(void*)
00000dee	movl	%edi,(%esp)
00000df1	calll	__Unwind_Resume
00000df6	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::UpdateCameraTransform():
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	pushl	%ebx
00000e04	pushl	%edi
00000e05	pushl	%esi
00000e06	subl	$0x7c,%esp
00000e09	leal	0xc0(%ebp),%ebx
00000e0c	movl	%ebx,(%esp)
00000e0f	calll	SetIdentityMatrix(matrix3x4_t&)
00000e14	movl	%ebx,0x08(%esp)
00000e18	movl	0x08(%ebp),%esi
00000e1b	leal	0x000004ac(%esi),%eax
00000e21	movl	%eax,(%esp)
00000e24	movl	$0x00000003,0x04(%esp)
00000e2c	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
00000e31	leal	0x90(%ebp),%edi
00000e34	movl	%edi,0x08(%esp)
00000e38	movl	%ebx,0x04(%esp)
00000e3c	leal	0x000001f4(%esi),%eax
00000e42	movl	%eax,(%esp)
00000e45	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
00000e4a	leal	0x000001dc(%esi),%eax
00000e50	movl	%eax,0x04(%esp)
00000e54	movl	%edi,(%esp)
00000e57	calll	MatrixAngles(matrix3x4_t const&, float*)
00000e5c	addl	CZoomManipulator::CZoomManipulator(float*),%esi
00000e62	movl	%esi,0x08(%esp)
00000e66	movl	%edi,(%esp)
00000e69	movl	$0x00000003,0x04(%esp)
00000e71	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00000e76	addl	$0x7c,%esp
00000e79	popl	%esi
00000e7a	popl	%edi
00000e7b	popl	%ebx
00000e7c	popl	%ebp
00000e7d	ret
00000e7e	nop
CPotteryWheelPanel::Init(int, int, int, int):
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x1c,%esp
00000e89	calll	0x00000e8e
00000e8e	popl	%esi
00000e8f	movl	0x18(%ebp),%eax
00000e92	movl	%eax,0x10(%esp)
00000e96	movl	0x14(%ebp),%eax
00000e99	movl	%eax,0x0c(%esp)
00000e9d	movl	0x10(%ebp),%eax
00000ea0	movl	%eax,0x08(%esp)
00000ea4	movl	0x0c(%ebp),%eax
00000ea7	movl	%eax,0x04(%esp)
00000eab	movl	0x08(%ebp),%ebx
00000eae	movl	%ebx,(%esp)
00000eb1	calll	vgui::Panel::Init(int, int, int, int)
00000eb6	movl	0x8564d-0xe8e(%esi),%eax
00000ebc	movl	(%eax),%edi
00000ebe	movl	(%edi),%eax
00000ec0	movl	0x48(%eax),%esi
00000ec3	movl	(%ebx),%eax
00000ec5	movl	%ebx,(%esp)
00000ec8	call	(%eax)
00000eca	movl	%eax,0x04(%esp)
00000ece	movl	%edi,(%esp)
00000ed1	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00000ed9	call	*%esi
00000edb	addl	$0x1c,%esp
00000ede	popl	%esi
00000edf	popl	%edi
00000ee0	popl	%ebx
00000ee1	popl	%ebp
00000ee2	ret
00000ee3	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::~CPotteryWheelPanel():
00000ef0	pushl	%ebp
00000ef1	movl	%esp,%ebp
00000ef3	pushl	%edi
00000ef4	pushl	%esi
00000ef5	subl	$0x10,%esp
00000ef8	calll	0x00000efd
00000efd	popl	%eax
00000efe	movl	0x08(%ebp),%edi
00000f01	leal	VTT for CPotteryWheelPanel-0xefd(%eax),%eax
00000f07	movl	%eax,0x04(%esp)
00000f0b	movl	%edi,(%esp)
00000f0e	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000f13	addl	$0x10,%esp
00000f16	popl	%esi
00000f17	popl	%edi
00000f18	popl	%ebp
00000f19	jmp	operator delete(void*)
00000f1e	movl	%eax,%esi
00000f20	movl	%edi,(%esp)
00000f23	calll	operator delete(void*)
00000f28	movl	%esi,(%esp)
00000f2b	calll	__Unwind_Resume
CPotteryWheelPanel::~CPotteryWheelPanel():
00000f30	pushl	%ebp
00000f31	movl	%esp,%ebp
00000f33	subl	$0x08,%esp
00000f36	calll	0x00000f3b
00000f3b	popl	%eax
00000f3c	leal	VTT for CPotteryWheelPanel-0xf3b(%eax),%eax
00000f42	movl	%eax,0x04(%esp)
00000f46	movl	0x08(%ebp),%eax
00000f49	movl	%eax,(%esp)
00000f4c	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000f51	addl	$0x08,%esp
00000f54	popl	%ebp
00000f55	ret
00000f56	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::~CPotteryWheelPanel():
00000f60	pushl	%ebp
00000f61	movl	%esp,%ebp
00000f63	pushl	%ebx
00000f64	pushl	%edi
00000f65	pushl	%esi
00000f66	subl	$0x1c,%esp
00000f69	movl	0x0c(%ebp),%eax
00000f6c	movl	(%eax),%eax
00000f6e	movl	0x08(%ebp),%ebx
00000f71	movl	%eax,(%ebx)
00000f73	leal	0x000001b8(%ebx),%eax
00000f79	movl	%eax,0xf0(%ebp)
00000f7c	movl	%eax,(%esp)
00000f7f	calll	CMaterialReference::Shutdown()
00000f84	leal	0x000001c0(%ebx),%eax
00000f8a	movl	%eax,0xec(%ebp)
00000f8d	movl	%eax,(%esp)
00000f90	calll	CMaterialReference::Shutdown()
00000f95	leal	0x000001c4(%ebx),%eax
00000f9b	movl	%eax,0xe8(%ebp)
00000f9e	movl	%eax,(%esp)
00000fa1	calll	CMaterialReference::Shutdown()
00000fa6	leal	0x000001c8(%ebx),%edi
00000fac	movl	%edi,(%esp)
00000faf	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00000fb7	calll	CTextureReference::Shutdown(bool)
00000fbc	leal	0x000001cc(%ebx),%esi
00000fc2	movl	%esi,(%esp)
00000fc5	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00000fcd	calll	CTextureReference::Shutdown(bool)
00000fd2	movl	0x000004b8(%ebx),%eax
00000fd8	testl	%eax,%eax
00000fda	je	0x00000fee
00000fdc	movl	%eax,(%esp)
00000fdf	calll	operator delete(void*)
00000fe4	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004b8(%ebx)
00000fee	movl	0x000004c0(%ebx),%eax
00000ff4	testl	%eax,%eax
00000ff6	je	0x0000100a
00000ff8	movl	%eax,(%esp)
00000ffb	calll	operator delete(void*)
00001000	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c0(%ebx)
0000100a	movl	0x000004bc(%ebx),%eax
00001010	testl	%eax,%eax
00001012	je	0x00001026
00001014	movl	%eax,(%esp)
00001017	calll	operator delete(void*)
0000101c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004bc(%ebx)
00001026	movl	0x000004c4(%ebx),%eax
0000102c	testl	%eax,%eax
0000102e	je	0x00001042
00001030	movl	%eax,(%esp)
00001033	calll	operator delete(void*)
00001038	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c4(%ebx)
00001042	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000224(%ebx)
0000104c	movl	%esi,(%esp)
0000104f	calll	CTextureReference::~CTextureReference()
00001054	movl	%edi,(%esp)
00001057	calll	CTextureReference::~CTextureReference()
0000105c	movl	0xe8(%ebp),%eax
0000105f	movl	%eax,(%esp)
00001062	calll	CMaterialReference::~CMaterialReference()
00001067	movl	0xec(%ebp),%eax
0000106a	movl	%eax,(%esp)
0000106d	calll	CMaterialReference::~CMaterialReference()
00001072	movl	0xf0(%ebp),%eax
00001075	movl	%eax,(%esp)
00001078	calll	CMaterialReference::~CMaterialReference()
0000107d	movl	0x0c(%ebp),%eax
00001080	addl	$0x04,%eax
00001083	movl	%eax,0x04(%esp)
00001087	movl	%ebx,(%esp)
0000108a	calll	vgui::EditablePanel::~EditablePanel()
0000108f	addl	$0x1c,%esp
00001092	popl	%esi
00001093	popl	%edi
00001094	popl	%ebx
00001095	popl	%ebp
00001096	ret
00001097	movl	%eax,%esi
00001099	leal	0x000001cc(%ebx),%eax
0000109f	movl	%eax,(%esp)
000010a2	calll	CTextureReference::~CTextureReference()
000010a7	leal	0x000001c8(%ebx),%edi
000010ad	jmp	0x000010b1
000010af	movl	%eax,%esi
000010b1	movl	%edi,(%esp)
000010b4	calll	CTextureReference::~CTextureReference()
000010b9	leal	0x000001c4(%ebx),%eax
000010bf	jmp	0x000010c6
000010c1	movl	%eax,%esi
000010c3	movl	0xe8(%ebp),%eax
000010c6	movl	%eax,(%esp)
000010c9	calll	CMaterialReference::~CMaterialReference()
000010ce	leal	0x000001c0(%ebx),%eax
000010d4	jmp	0x000010db
000010d6	movl	%eax,%esi
000010d8	movl	0xec(%ebp),%eax
000010db	movl	%eax,(%esp)
000010de	calll	CMaterialReference::~CMaterialReference()
000010e3	jmp	0x000010eb
000010e5	movl	%eax,%esi
000010e7	jmp	0x000010f6
000010e9	movl	%eax,%esi
000010eb	movl	0xf0(%ebp),%eax
000010ee	movl	%eax,(%esp)
000010f1	calll	CMaterialReference::~CMaterialReference()
000010f6	movl	0x0c(%ebp),%eax
000010f9	addl	$0x04,%eax
000010fc	movl	%eax,0x04(%esp)
00001100	movl	%ebx,(%esp)
00001103	calll	vgui::EditablePanel::~EditablePanel()
00001108	movl	%esi,(%esp)
0000110b	calll	__Unwind_Resume
00001110	calll	std::terminate()
00001115	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::DestroyLights():
00001120	pushl	%ebp
00001121	movl	%esp,%ebp
00001123	pushl	%esi
00001124	pushl	%eax
00001125	movl	0x08(%ebp),%esi
00001128	movl	0x000004c4(%esi),%eax
0000112e	testl	%eax,%eax
00001130	je	0x00001144
00001132	movl	%eax,(%esp)
00001135	calll	operator delete(void*)
0000113a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c4(%esi)
00001144	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000224(%esi)
0000114e	addl	$0x04,%esp
00001151	popl	%esi
00001152	popl	%ebp
00001153	ret
00001154	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::SetBackgroundColor(int, int, int):
00001160	movb	0x08(%esp),%cl
00001164	movl	0x04(%esp),%eax
00001168	movb	%cl,0x000004a8(%eax)
0000116e	movb	0x0c(%esp),%cl
00001172	movb	%cl,0x000004a9(%eax)
00001178	movb	0x10(%esp),%cl
0000117c	movb	%cl,0x000004aa(%eax)
00001182	movb	$0xff,0x000004ab(%eax)
00001189	ret
0000118a	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::SetBackgroundColor(Color const&):
00001190	movl	0x08(%esp),%eax
00001194	movl	(%eax),%eax
00001196	movl	0x04(%esp),%ecx
0000119a	movl	%eax,0x000004a8(%ecx)
000011a0	ret
000011a1	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::GetBackgroundColor() const:
000011b0	movl	$0x000004a8,%eax
000011b5	addl	0x04(%esp),%eax
000011b9	ret
000011ba	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::SetLightProbe(CDmxElement*):
000011c0	pushl	%ebp
000011c1	movl	%esp,%ebp
000011c3	pushl	%ebx
000011c4	pushl	%edi
000011c5	pushl	%esi
000011c6	subl	$0x4c,%esp
000011c9	calll	0x000011ce
000011ce	popl	%ebx
000011cf	movl	0x08(%ebp),%edi
000011d2	leal	0x000001c0(%edi),%eax
000011d8	movl	%eax,0xec(%ebp)
000011db	movl	%eax,(%esp)
000011de	calll	CMaterialReference::Shutdown()
000011e3	leal	0x000001c4(%edi),%eax
000011e9	movl	%eax,0xf0(%ebp)
000011ec	movl	%eax,(%esp)
000011ef	calll	CMaterialReference::Shutdown()
000011f4	leal	0x000001c8(%edi),%esi
000011fa	movl	%esi,(%esp)
000011fd	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00001205	calll	CTextureReference::Shutdown(bool)
0000120a	leal	0x000001cc(%edi),%eax
00001210	movl	%eax,0xe8(%ebp)
00001213	movl	%eax,(%esp)
00001216	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
0000121e	calll	CTextureReference::Shutdown(bool)
00001223	movl	0x000004c4(%edi),%eax
00001229	testl	%eax,%eax
0000122b	je	0x0000123f
0000122d	movl	%eax,(%esp)
00001230	calll	operator delete(void*)
00001235	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004c4(%edi)
0000123f	movl	0x0c(%ebp),%edx
00001242	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000224(%edi)
0000124c	testl	%edx,%edx
0000124e	setne	%cl
00001251	movb	0x000004d4(%edi),%al
00001257	andb	$0xfe,%al
00001259	orb	%cl,%al
0000125b	testl	%edx,%edx
0000125d	movb	%al,0x000004d4(%edi)
00001263	je	0x00002147
00001269	leal	0x7e37f-0x11ce(%ebx),%eax
0000126f	movl	%eax,0x04(%esp)
00001273	movl	%edx,(%esp)
00001276	calll	CDmxElement::GetAttribute(char const*) const
0000127b	testl	%eax,%eax
0000127d	jne	0x00001287
0000127f	leal	0x7e4ab-0x11ce(%ebx),%edi
00001285	jmp	0x000012a1
00001287	cmpl	$0x05,(%eax)
0000128a	je	0x00001294
0000128c	leal	0x7e4ab-0x11ce(%ebx),%edi
00001292	jmp	0x000012a1
00001294	movl	0x08(%eax),%eax
00001297	movl	%eax,(%esp)
0000129a	calll	CUtlString::operator char const*() const
0000129f	movl	%eax,%edi
000012a1	movl	%edi,0xe0(%ebp)
000012a4	leal	0x7e387-0x11ce(%ebx),%eax
000012aa	movl	%eax,0x08(%esp)
000012ae	movl	%edi,0x04(%esp)
000012b2	movl	%esi,(%esp)
000012b5	movl	$0x00000001,0x0c(%esp)
000012bd	calll	CTextureReference::Init(char const*, char const*, bool)
000012c2	leal	0x7e396-0x11ce(%ebx),%esi
000012c8	movl	%esi,0x04(%esp)
000012cc	movl	0x0c(%ebp),%eax
000012cf	movl	%eax,(%esp)
000012d2	calll	CDmxElement::HasAttribute(char const*) const
000012d7	cmpb	$0x01,%al
000012d9	movl	%edi,%eax
000012db	jne	0x00001310
000012dd	movl	%esi,0x04(%esp)
000012e1	movl	0x0c(%ebp),%eax
000012e4	movl	%eax,(%esp)
000012e7	calll	CDmxElement::GetAttribute(char const*) const
000012ec	testl	%eax,%eax
000012ee	jne	0x000012f8
000012f0	leal	0x7e4ab-0x11ce(%ebx),%eax
000012f6	jmp	0x00001310
000012f8	cmpl	$0x05,(%eax)
000012fb	je	0x00001305
000012fd	leal	0x7e4ab-0x11ce(%ebx),%eax
00001303	jmp	0x00001310
00001305	movl	0x08(%eax),%eax
00001308	movl	%eax,(%esp)
0000130b	calll	CUtlString::operator char const*() const
00001310	movl	%eax,0xe4(%ebp)
00001313	leal	0x7e387-0x11ce(%ebx),%ecx
00001319	movl	%ecx,0x08(%esp)
0000131d	movl	%eax,0x04(%esp)
00001321	movl	0xe8(%ebp),%eax
00001324	movl	%eax,(%esp)
00001327	movl	$0x00000001,0x0c(%esp)
0000132f	calll	CTextureReference::Init(char const*, char const*, bool)
00001334	movl	$0x00000020,(%esp)
0000133b	calll	KeyValues::operator new(unsigned long)
00001340	movl	%eax,%edi
00001342	leal	0x7e3a1-0x11ce(%ebx),%eax
00001348	movl	%eax,0x04(%esp)
0000134c	movl	%edi,(%esp)
0000134f	calll	KeyValues::KeyValues(char const*)
00001354	leal	0x7e3ae-0x11ce(%ebx),%eax
0000135a	movl	%eax,0x04(%esp)
0000135e	movl	%edi,(%esp)
00001361	movl	$0x00000001,0x08(%esp)
00001369	calll	KeyValues::SetInt(char const*, int)
0000136e	movl	0xe0(%ebp),%eax
00001371	movl	%eax,0x08(%esp)
00001375	leal	0x7e3b7-0x11ce(%ebx),%eax
0000137b	movl	%eax,0x04(%esp)
0000137f	movl	%edi,(%esp)
00001382	calll	KeyValues::SetString(char const*, char const*)
00001387	leal	0x7e3bf-0x11ce(%ebx),%eax
0000138d	movl	%eax,0x04(%esp)
00001391	movl	%edi,(%esp)
00001394	movl	$0x00000001,0x08(%esp)
0000139c	calll	KeyValues::SetInt(char const*, int)
000013a1	leal	0x7e3ce-0x11ce(%ebx),%esi
000013a7	movl	%esi,0x04(%esp)
000013ab	movl	%edi,(%esp)
000013ae	movl	$0x00000001,0x08(%esp)
000013b6	calll	KeyValues::SetInt(char const*, int)
000013bb	movl	%edi,0x08(%esp)
000013bf	leal	0x7e3d6-0x11ce(%ebx),%eax
000013c5	movl	%eax,0x04(%esp)
000013c9	movl	0xec(%ebp),%edi
000013cc	movl	%edi,(%esp)
000013cf	calll	CMaterialReference::Init(char const*, KeyValues*)
000013d4	movl	(%edi),%ecx
000013d6	movl	(%ecx),%eax
000013d8	movl	%ecx,(%esp)
000013db	call	*0x00000094(%eax)
000013e1	movl	$0x00000020,(%esp)
000013e8	calll	KeyValues::operator new(unsigned long)
000013ed	movl	%eax,%edi
000013ef	leal	0x7e3a1-0x11ce(%ebx),%eax
000013f5	movl	%eax,0x04(%esp)
000013f9	movl	%edi,(%esp)
000013fc	calll	KeyValues::KeyValues(char const*)
00001401	leal	0x7e3ae-0x11ce(%ebx),%eax
00001407	movl	%eax,0x04(%esp)
0000140b	movl	%edi,(%esp)
0000140e	movl	$0x00000001,0x08(%esp)
00001416	calll	KeyValues::SetInt(char const*, int)
0000141b	movl	0xe4(%ebp),%eax
0000141e	movl	%eax,0x08(%esp)
00001422	leal	0x7e3b7-0x11ce(%ebx),%eax
00001428	movl	%eax,0x04(%esp)
0000142c	movl	%edi,(%esp)
0000142f	calll	KeyValues::SetString(char const*, char const*)
00001434	leal	0x7e3bf-0x11ce(%ebx),%eax
0000143a	movl	%eax,0x04(%esp)
0000143e	movl	%edi,(%esp)
00001441	movl	$0x00000001,0x08(%esp)
00001449	calll	KeyValues::SetInt(char const*, int)
0000144e	movl	%esi,0x04(%esp)
00001452	movl	%edi,(%esp)
00001455	movl	$0x00000001,0x08(%esp)
0000145d	calll	KeyValues::SetInt(char const*, int)
00001462	movl	%edi,0x08(%esp)
00001466	leal	0x7e3f0-0x11ce(%ebx),%eax
0000146c	movl	%eax,0x04(%esp)
00001470	movl	0xf0(%ebp),%esi
00001473	movl	%esi,(%esp)
00001476	calll	CMaterialReference::Init(char const*, KeyValues*)
0000147b	movl	(%esi),%ecx
0000147d	movl	(%ecx),%eax
0000147f	movl	%ecx,(%esp)
00001482	call	*0x00000094(%eax)
00001488	leal	0x7e40e-0x11ce(%ebx),%eax
0000148e	movl	%eax,0x04(%esp)
00001492	movl	0x0c(%ebp),%eax
00001495	movl	%eax,(%esp)
00001498	calll	CUtlVector<Vector, CUtlMemory<Vector, int> > const& CDmxElement::GetArray<Vector>(char const*) const
0000149d	cmpl	$0x06,0x0c(%eax)
000014a1	movl	0x08(%ebp),%edi
000014a4	jne	0x000015db
000014aa	movl	(%eax),%ecx
000014ac	movss	0x08(%ecx),%xmm0
000014b1	movss	(%ecx),%xmm2
000014b5	movss	0x04(%ecx),%xmm1
000014ba	movss	%xmm2,0x00000448(%edi)
000014c2	movss	%xmm1,0x0000044c(%edi)
000014ca	movss	%xmm0,0x00000450(%edi)
000014d2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000454(%edi)
000014dc	movl	(%eax),%ecx
000014de	movss	0x14(%ecx),%xmm0
000014e3	movss	0x0c(%ecx),%xmm2
000014e8	movss	0x10(%ecx),%xmm1
000014ed	movss	%xmm2,0x00000458(%edi)
000014f5	movss	%xmm1,0x0000045c(%edi)
000014fd	movss	%xmm0,0x00000460(%edi)
00001505	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000464(%edi)
0000150f	movl	(%eax),%ecx
00001511	movss	0x20(%ecx),%xmm0
00001516	movss	0x18(%ecx),%xmm2
0000151b	movss	0x1c(%ecx),%xmm1
00001520	movss	%xmm2,0x00000468(%edi)
00001528	movss	%xmm1,0x0000046c(%edi)
00001530	movss	%xmm0,0x00000470(%edi)
00001538	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000474(%edi)
00001542	movl	(%eax),%ecx
00001544	movss	0x2c(%ecx),%xmm0
00001549	movss	0x24(%ecx),%xmm2
0000154e	movss	0x28(%ecx),%xmm1
00001553	movss	%xmm2,0x00000478(%edi)
0000155b	movss	%xmm1,0x0000047c(%edi)
00001563	movss	%xmm0,0x00000480(%edi)
0000156b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000484(%edi)
00001575	movl	(%eax),%ecx
00001577	movss	0x38(%ecx),%xmm0
0000157c	movss	0x30(%ecx),%xmm2
00001581	movss	0x34(%ecx),%xmm1
00001586	movss	%xmm2,0x00000488(%edi)
0000158e	movss	%xmm1,0x0000048c(%edi)
00001596	movss	%xmm0,CRotationManipulator::UpdateTransform()(%edi)
0000159e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000494(%edi)
000015a8	movl	(%eax),%eax
000015aa	movss	0x44(%eax),%xmm0
000015af	movss	0x3c(%eax),%xmm2
000015b4	movss	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax),%xmm1
000015b9	movss	%xmm2,0x00000498(%edi)
000015c1	movss	%xmm1,0x0000049c(%edi)
000015c9	movss	%xmm0,0x000004a0(%edi)
000015d1	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004a4(%edi)
000015db	leal	0x7e41a-0x11ce(%ebx),%eax
000015e1	movl	%eax,0x04(%esp)
000015e5	movl	0x0c(%ebp),%eax
000015e8	movl	%eax,(%esp)
000015eb	calll	CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const
000015f0	movl	%eax,0xbc(%ebp)
000015f3	movl	0x0c(%eax),%eax
000015f6	movl	%eax,0xc0(%ebp)
000015f9	xorl	%edx,%edx
000015fb	jmp	0x0000162a
000015fd	nopl	(%eax)
00001600	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxElement::GetValue<float>(char const*) const::defaultValue-0x11ce(%ebx)
0000160a	pxor	%xmm0,%xmm0
0000160e	movl	0xe8(%ebp),%eax
00001611	movss	%xmm0,(%eax)
00001615	movl	0xec(%ebp),%eax
00001618	movl	%eax,(%esp)
0000161b	calll	LightDesc_t::RecalculateDerivedValues()
00001620	incl	0x00000224(%edi)
00001626	movl	0xdc(%ebp),%edx
00001629	incl	%edx
0000162a	cmpl	0xc0(%ebp),%edx
0000162d	jge	0x000020ff
00001633	movl	0x00000224(%edi),%eax
00001639	cmpl	$0x04,%eax
0000163c	je	0x000020ff
00001642	movl	0xbc(%ebp),%ecx
00001645	movl	(%ecx),%ecx
00001647	movl	(%ecx,%edx,4),%esi
0000164a	movl	%esi,0xf0(%ebp)
0000164d	movl	%edx,0xdc(%ebp)
00001650	leal	0x7e426-0x11ce(%ebx),%ecx
00001656	movl	%ecx,0x04(%esp)
0000165a	movl	%esi,(%esp)
0000165d	imull	$0x00000088,%eax,%esi
00001663	leal	0x00000228(%edi,%esi),%eax
0000166a	movl	%eax,0xec(%ebp)
0000166d	calll	CDmxElement::GetAttribute(char const*) const
00001672	testl	%eax,%eax
00001674	jne	0x0000167e
00001676	leal	0x7e4ab-0x11ce(%ebx),%edi
0000167c	jmp	0x00001698
0000167e	cmpl	$0x05,(%eax)
00001681	je	0x0000168b
00001683	leal	0x7e4ab-0x11ce(%ebx),%edi
00001689	jmp	0x00001698
0000168b	movl	0x08(%eax),%eax
0000168e	movl	%eax,(%esp)
00001691	calll	CUtlString::operator char const*() const
00001696	movl	%eax,%edi
00001698	leal	0x7e42b-0x11ce(%ebx),%eax
0000169e	movl	%eax,0x04(%esp)
000016a2	movl	0xf0(%ebp),%eax
000016a5	movl	%eax,(%esp)
000016a8	calll	CDmxElement::GetAttribute(char const*) const
000016ad	testl	%eax,%eax
000016af	je	0x00001714
000016b1	cmpl	$0x0a,(%eax)
000016b4	jne	0x000016c1
000016b6	movl	0x08(%eax),%eax
000016b9	movl	%eax,0xe8(%ebp)
000016bc	jmp	0x00001765
000016c1	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
000016c7	testb	%al,%al
000016c9	jne	0x000016eb
000016cb	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
000016d1	movl	%eax,(%esp)
000016d4	calll	___cxa_guard_acquire
000016d9	testl	%eax,%eax
000016db	je	0x000016eb
000016dd	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
000016e3	movl	%eax,(%esp)
000016e6	calll	___cxa_guard_release
000016eb	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
000016f5	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
000016ff	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
00001709	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
0000170f	movl	%eax,0xe8(%ebp)
00001712	jmp	0x00001765
00001714	movl	%edi,0xe4(%ebp)
00001717	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
0000171d	testb	%al,%al
0000171f	jne	0x0000173b
00001721	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001727	movl	%edi,(%esp)
0000172a	calll	___cxa_guard_acquire
0000172f	testl	%eax,%eax
00001731	je	0x0000173b
00001733	movl	%edi,(%esp)
00001736	calll	___cxa_guard_release
0000173b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
00001745	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
0000174f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001759	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
0000175f	movl	%eax,0xe8(%ebp)
00001762	movl	0xe4(%ebp),%edi
00001765	leal	0x7e431-0x11ce(%ebx),%eax
0000176b	movl	%eax,0x04(%esp)
0000176f	movl	%edi,(%esp)
00001772	calll	V_stricmp(char const*, char const*)
00001777	testl	%eax,%eax
00001779	jne	0x000018cc
0000177f	leal	0x7e43d-0x11ce(%ebx),%eax
00001785	movl	%eax,0x04(%esp)
00001789	movl	0xf0(%ebp),%eax
0000178c	movl	%eax,(%esp)
0000178f	calll	CDmxElement::GetAttribute(char const*) const
00001794	testl	%eax,%eax
00001796	je	0x000017ef
00001798	cmpl	$0x0a,(%eax)
0000179b	jne	0x000017a5
0000179d	movl	0x08(%eax),%eax
000017a0	jmp	0x00001837
000017a5	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
000017ab	testb	%al,%al
000017ad	jne	0x000017c9
000017af	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
000017b5	movl	%edi,(%esp)
000017b8	calll	___cxa_guard_acquire
000017bd	testl	%eax,%eax
000017bf	je	0x000017c9
000017c1	movl	%edi,(%esp)
000017c4	calll	___cxa_guard_release
000017c9	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
000017d3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
000017dd	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
000017e7	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
000017ed	jmp	0x00001837
000017ef	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
000017f5	testb	%al,%al
000017f7	jne	0x00001813
000017f9	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
000017ff	movl	%edi,(%esp)
00001802	calll	___cxa_guard_acquire
00001807	testl	%eax,%eax
00001809	je	0x00001813
0000180b	movl	%edi,(%esp)
0000180e	calll	___cxa_guard_release
00001813	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
0000181d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
00001827	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001831	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
00001837	movl	0xec(%ebp),%ecx
0000183a	movl	$0x00000002,(%ecx)
00001840	movl	0xe8(%ebp),%edx
00001843	movss	(%edx),%xmm0
00001847	movl	0x08(%ebp),%edi
0000184a	movss	%xmm0,0x0000022c(%edi,%esi)
00001853	movss	0x04(%edx),%xmm0
00001858	movss	%xmm0,CZoomManipulator::OnMousePressed(ButtonCode_t, int, int)(%edi,%esi)
00001861	movss	0x08(%edx),%xmm0
00001866	movss	%xmm0,0x00000234(%edi,%esi)
0000186f	movss	(%eax),%xmm0
00001873	movss	%xmm0,0x00000244(%edi,%esi)
0000187c	movss	0x04(%eax),%xmm0
00001881	movss	%xmm0,0x00000248(%edi,%esi)
0000188a	movss	0x08(%eax),%xmm0
0000188f	movss	%xmm0,0x0000024c(%edi,%esi)
00001898	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000250(%edi,%esi)
000018a3	movl	$0x3f800000,0x00000258(%edi,%esi)
000018ae	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000025c(%edi,%esi)
000018b9	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000260(%edi,%esi)
000018c4	movl	%ecx,(%esp)
000018c7	jmp	0x0000161b
000018cc	leal	0x7e447-0x11ce(%ebx),%eax
000018d2	movl	%eax,0x04(%esp)
000018d6	movl	%edi,(%esp)
000018d9	calll	V_stricmp(char const*, char const*)
000018de	testl	%eax,%eax
000018e0	jne	0x00001b72
000018e6	leal	0x7e44d-0x11ce(%ebx),%eax
000018ec	movl	%eax,0x04(%esp)
000018f0	movl	0xf0(%ebp),%eax
000018f3	movl	%eax,(%esp)
000018f6	calll	CDmxElement::GetAttribute(char const*) const
000018fb	testl	%eax,%eax
000018fd	je	0x00001956
000018ff	cmpl	$0x0a,(%eax)
00001902	jne	0x0000190c
00001904	movl	0x08(%eax),%eax
00001907	jmp	0x0000199e
0000190c	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
00001912	testb	%al,%al
00001914	jne	0x00001930
00001916	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
0000191c	movl	%edi,(%esp)
0000191f	calll	___cxa_guard_acquire
00001924	testl	%eax,%eax
00001926	je	0x00001930
00001928	movl	%edi,(%esp)
0000192b	calll	___cxa_guard_release
00001930	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
0000193a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
00001944	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
0000194e	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
00001954	jmp	0x0000199e
00001956	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
0000195c	testb	%al,%al
0000195e	jne	0x0000197a
00001960	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001966	movl	%edi,(%esp)
00001969	calll	___cxa_guard_acquire
0000196e	testl	%eax,%eax
00001970	je	0x0000197a
00001972	movl	%edi,(%esp)
00001975	calll	___cxa_guard_release
0000197a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
00001984	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
0000198e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001998	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
0000199e	movl	%eax,0xe4(%ebp)
000019a1	leal	0x7e459-0x11ce(%ebx),%eax
000019a7	movl	%eax,0x04(%esp)
000019ab	movl	0xf0(%ebp),%eax
000019ae	movl	%eax,(%esp)
000019b1	calll	CDmxElement::GetAttribute(char const*) const
000019b6	testl	%eax,%eax
000019b8	je	0x00001a11
000019ba	cmpl	$0x0a,(%eax)
000019bd	jne	0x000019c7
000019bf	movl	0x08(%eax),%eax
000019c2	jmp	0x00001a59
000019c7	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
000019cd	testb	%al,%al
000019cf	jne	0x000019eb
000019d1	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
000019d7	movl	%edi,(%esp)
000019da	calll	___cxa_guard_acquire
000019df	testl	%eax,%eax
000019e1	je	0x000019eb
000019e3	movl	%edi,(%esp)
000019e6	calll	___cxa_guard_release
000019eb	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
000019f5	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
000019ff	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
00001a09	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
00001a0f	jmp	0x00001a59
00001a11	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
00001a17	testb	%al,%al
00001a19	jne	0x00001a35
00001a1b	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001a21	movl	%edi,(%esp)
00001a24	calll	___cxa_guard_acquire
00001a29	testl	%eax,%eax
00001a2b	je	0x00001a35
00001a2d	movl	%edi,(%esp)
00001a30	calll	___cxa_guard_release
00001a35	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
00001a3f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
00001a49	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001a53	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
00001a59	movl	0xec(%ebp),%ecx
00001a5c	movl	$0x00000001,(%ecx)
00001a62	movl	0xe8(%ebp),%edx
00001a65	movss	(%edx),%xmm0
00001a69	movl	0x08(%ebp),%edi
00001a6c	movss	%xmm0,0x0000022c(%edi,%esi)
00001a75	movss	0x04(%edx),%xmm0
00001a7a	movss	%xmm0,CZoomManipulator::OnMousePressed(ButtonCode_t, int, int)(%edi,%esi)
00001a83	movss	0x08(%edx),%xmm0
00001a88	movss	%xmm0,0x00000234(%edi,%esi)
00001a91	movss	(%eax),%xmm0
00001a95	movss	%xmm0,0x00000238(%edi,%esi)
00001a9e	movss	0x04(%eax),%xmm0
00001aa3	movss	%xmm0,0x0000023c(%edi,%esi)
00001aac	movss	0x08(%eax),%xmm0
00001ab1	movss	%xmm0,CZoomManipulator::OnCursorMoved(int, int)(%edi,%esi)
00001aba	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000250(%edi,%esi)
00001ac5	movl	$0x3f800000,0x00000258(%edi,%esi)
00001ad0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000025c(%edi,%esi)
00001adb	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000260(%edi,%esi)
00001ae6	movl	%ecx,(%esp)
00001ae9	calll	LightDesc_t::RecalculateDerivedValues()
00001aee	movl	0xe4(%ebp),%eax
00001af1	movss	(%eax),%xmm0
00001af5	movss	%xmm0,0x00000258(%edi,%esi)
00001afe	movss	0x04(%eax),%xmm0
00001b03	movss	%xmm0,0x0000025c(%edi,%esi)
00001b0c	movss	0x08(%eax),%xmm0
00001b11	movss	%xmm0,0x00000260(%edi,%esi)
00001b1a	leal	0x7e460-0x11ce(%ebx),%eax
00001b20	movl	%eax,0x04(%esp)
00001b24	movl	0xf0(%ebp),%eax
00001b27	movl	%eax,(%esp)
00001b2a	leal	0x00000250(%edi,%esi),%esi
00001b31	calll	CDmxElement::GetAttribute(char const*) const
00001b36	testl	%eax,%eax
00001b38	je	0x00001b5b
00001b3a	cmpl	$0x03,(%eax)
00001b3d	jne	0x00001b4f
00001b3f	movl	0x08(%eax),%eax
00001b42	movss	(%eax),%xmm0
00001b46	movss	%xmm0,(%esi)
00001b4a	jmp	0x00001615
00001b4f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxAttribute::GetValue<float>() const::defaultValue-0x11ce(%ebx)
00001b59	jmp	0x00001b65
00001b5b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxElement::GetValue<float>(char const*) const::defaultValue-0x11ce(%ebx)
00001b65	pxor	%xmm0,%xmm0
00001b69	movss	%xmm0,(%esi)
00001b6d	jmp	0x00001615
00001b72	leal	0x7e46c-0x11ce(%ebx),%eax
00001b78	movl	%eax,0x04(%esp)
00001b7c	movl	%edi,(%esp)
00001b7f	calll	V_stricmp(char const*, char const*)
00001b84	testl	%eax,%eax
00001b86	movl	0x08(%ebp),%edi
00001b89	jne	0x00001626
00001b8f	leal	0x7e44d-0x11ce(%ebx),%eax
00001b95	movl	%eax,0x04(%esp)
00001b99	movl	0xf0(%ebp),%eax
00001b9c	movl	%eax,(%esp)
00001b9f	calll	CDmxElement::GetAttribute(char const*) const
00001ba4	testl	%eax,%eax
00001ba6	je	0x00001bff
00001ba8	cmpl	$0x0a,(%eax)
00001bab	jne	0x00001bb5
00001bad	movl	0x08(%eax),%eax
00001bb0	jmp	0x00001c47
00001bb5	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
00001bbb	testb	%al,%al
00001bbd	jne	0x00001bd9
00001bbf	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
00001bc5	movl	%edi,(%esp)
00001bc8	calll	___cxa_guard_acquire
00001bcd	testl	%eax,%eax
00001bcf	je	0x00001bd9
00001bd1	movl	%edi,(%esp)
00001bd4	calll	___cxa_guard_release
00001bd9	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
00001be3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
00001bed	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
00001bf7	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
00001bfd	jmp	0x00001c47
00001bff	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
00001c05	testb	%al,%al
00001c07	jne	0x00001c23
00001c09	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001c0f	movl	%edi,(%esp)
00001c12	calll	___cxa_guard_acquire
00001c17	testl	%eax,%eax
00001c19	je	0x00001c23
00001c1b	movl	%edi,(%esp)
00001c1e	calll	___cxa_guard_release
00001c23	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
00001c2d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
00001c37	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001c41	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
00001c47	movl	%eax,0xe4(%ebp)
00001c4a	leal	0x7e459-0x11ce(%ebx),%eax
00001c50	movl	%eax,0x04(%esp)
00001c54	movl	0xf0(%ebp),%eax
00001c57	movl	%eax,(%esp)
00001c5a	calll	CDmxElement::GetAttribute(char const*) const
00001c5f	testl	%eax,%eax
00001c61	je	0x00001cba
00001c63	cmpl	$0x0a,(%eax)
00001c66	jne	0x00001c70
00001c68	movl	0x08(%eax),%edi
00001c6b	jmp	0x00001d02
00001c70	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
00001c76	testb	%al,%al
00001c78	jne	0x00001c94
00001c7a	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
00001c80	movl	%edi,(%esp)
00001c83	calll	___cxa_guard_acquire
00001c88	testl	%eax,%eax
00001c8a	je	0x00001c94
00001c8c	movl	%edi,(%esp)
00001c8f	calll	___cxa_guard_release
00001c94	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
00001c9e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
00001ca8	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
00001cb2	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
00001cb8	jmp	0x00001d02
00001cba	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
00001cc0	testb	%al,%al
00001cc2	jne	0x00001cde
00001cc4	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001cca	movl	%edi,(%esp)
00001ccd	calll	___cxa_guard_acquire
00001cd2	testl	%eax,%eax
00001cd4	je	0x00001cde
00001cd6	movl	%edi,(%esp)
00001cd9	calll	___cxa_guard_release
00001cde	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
00001ce8	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
00001cf2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00001cfc	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001d02	leal	0x7e471-0x11ce(%ebx),%eax
00001d08	movl	%eax,0x04(%esp)
00001d0c	movl	0xf0(%ebp),%eax
00001d0f	movl	%eax,(%esp)
00001d12	calll	CDmxElement::GetAttribute(char const*) const
00001d17	testl	%eax,%eax
00001d19	je	0x00001d3d
00001d1b	cmpl	$0x03,(%eax)
00001d1e	jne	0x00001d31
00001d20	movl	0x08(%eax),%eax
00001d23	movss	(%eax),%xmm0
00001d27	mulss	0x7c63c-0x11ce(%ebx),%xmm0
00001d2f	jmp	0x00001d4b
00001d31	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxAttribute::GetValue<float>() const::defaultValue-0x11ce(%ebx)
00001d3b	jmp	0x00001d47
00001d3d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxElement::GetValue<float>(char const*) const::defaultValue-0x11ce(%ebx)
00001d47	pxor	%xmm0,%xmm0
00001d4b	movss	%xmm0,0xe0(%ebp)
00001d50	leal	0x7e477-0x11ce(%ebx),%eax
00001d56	movl	%eax,0x04(%esp)
00001d5a	movl	0xf0(%ebp),%eax
00001d5d	movl	%eax,(%esp)
00001d60	calll	CDmxElement::GetAttribute(char const*) const
00001d65	testl	%eax,%eax
00001d67	je	0x00001d8b
00001d69	cmpl	$0x03,(%eax)
00001d6c	jne	0x00001d7f
00001d6e	movl	0x08(%eax),%eax
00001d71	movss	(%eax),%xmm0
00001d75	mulss	0x7c63c-0x11ce(%ebx),%xmm0
00001d7d	jmp	0x00001d99
00001d7f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxAttribute::GetValue<float>() const::defaultValue-0x11ce(%ebx)
00001d89	jmp	0x00001d95
00001d8b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxElement::GetValue<float>(char const*) const::defaultValue-0x11ce(%ebx)
00001d95	pxor	%xmm0,%xmm0
00001d99	movl	0xec(%ebp),%edx
00001d9c	movl	$0x00000003,(%edx)
00001da2	movl	0xe8(%ebp),%eax
00001da5	movss	(%eax),%xmm1
00001da9	movl	0x08(%ebp),%ecx
00001dac	movss	%xmm1,0x0000022c(%ecx,%esi)
00001db5	movss	0x04(%eax),%xmm1
00001dba	movss	%xmm1,CZoomManipulator::OnMousePressed(ButtonCode_t, int, int)(%ecx,%esi)
00001dc3	movss	0x08(%eax),%xmm1
00001dc8	movss	%xmm1,0x00000234(%ecx,%esi)
00001dd1	movss	(%edi),%xmm1
00001dd5	movss	%xmm1,0x00000238(%ecx,%esi)
00001dde	movss	0x04(%edi),%xmm1
00001de3	movss	%xmm1,0x0000023c(%ecx,%esi)
00001dec	movss	0x08(%edi),%xmm1
00001df1	movss	%xmm1,CZoomManipulator::OnCursorMoved(int, int)(%ecx,%esi)
00001dfa	movl	0x8565d-0x11ce(%ebx),%eax
00001e00	movss	(%eax),%xmm3
00001e04	movss	%xmm3,0x00000244(%ecx,%esi)
00001e0d	movss	0x04(%eax),%xmm1
00001e12	movss	%xmm1,0x00000248(%ecx,%esi)
00001e1b	movss	0x08(%eax),%xmm2
00001e20	movss	%xmm2,0x0000024c(%ecx,%esi)
00001e29	subss	(%edi),%xmm3
00001e2d	movss	%xmm3,0x00000244(%ecx,%esi)
00001e36	subss	0x04(%edi),%xmm1
00001e3b	movss	%xmm1,0x00000248(%ecx,%esi)
00001e44	movaps	%xmm3,%xmm4
00001e47	mulss	%xmm4,%xmm4
00001e4b	movaps	%xmm1,%xmm5
00001e4e	mulss	%xmm5,%xmm5
00001e52	addss	%xmm4,%xmm5
00001e56	subss	0x08(%edi),%xmm2
00001e5b	movl	%ecx,%edi
00001e5d	movaps	%xmm2,%xmm4
00001e60	mulss	%xmm4,%xmm4
00001e64	addss	%xmm5,%xmm4
00001e68	addss	0x7c640-0x11ce(%ebx),%xmm4
00001e70	xorps	%xmm5,%xmm5
00001e73	movss	%xmm4,%xmm5
00001e77	rsqrtss	%xmm5,%xmm5
00001e7b	movaps	%xmm5,%xmm6
00001e7e	mulss	%xmm6,%xmm6
00001e82	mulss	%xmm4,%xmm6
00001e86	movss	0x7c644-0x11ce(%ebx),%xmm4
00001e8e	subss	%xmm6,%xmm4
00001e92	mulss	0x7c648-0x11ce(%ebx),%xmm4
00001e9a	mulss	%xmm5,%xmm4
00001e9e	mulss	%xmm4,%xmm3
00001ea2	movss	%xmm3,0x00000244(%edi,%esi)
00001eab	mulss	%xmm4,%xmm1
00001eaf	movss	%xmm1,0x00000248(%edi,%esi)
00001eb8	mulss	%xmm2,%xmm4
00001ebc	movss	%xmm4,0x0000024c(%edi,%esi)
00001ec5	movl	$0x40a00000,0x00000254(%edi,%esi)
00001ed0	movss	0xe0(%ebp),%xmm1
00001ed5	movss	%xmm1,0x00000264(%edi,%esi)
00001ede	movss	%xmm0,0x00000268(%edi,%esi)
00001ee7	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000250(%edi,%esi)
00001ef2	movl	$0x3f800000,0x00000258(%edi,%esi)
00001efd	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0000025c(%edi,%esi)
00001f08	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x00000260(%edi,%esi)
00001f13	movl	%edx,(%esp)
00001f16	calll	LightDesc_t::RecalculateDerivedValues()
00001f1b	leal	0x7e43d-0x11ce(%ebx),%eax
00001f21	movl	%eax,0x04(%esp)
00001f25	movl	0xf0(%ebp),%eax
00001f28	movl	%eax,(%esp)
00001f2b	leal	0x00000260(%edi,%esi),%eax
00001f32	movl	%eax,0xd8(%ebp)
00001f35	leal	0x0000025c(%edi,%esi),%eax
00001f3c	movl	%eax,0xd4(%ebp)
00001f3f	leal	0x00000258(%edi,%esi),%eax
00001f46	movl	%eax,0xd0(%ebp)
00001f49	leal	0x00000250(%edi,%esi),%eax
00001f50	movl	%eax,0xe0(%ebp)
00001f53	leal	0x00000254(%edi,%esi),%eax
00001f5a	movl	%eax,0xe8(%ebp)
00001f5d	leal	0x0000024c(%edi,%esi),%eax
00001f64	movl	%eax,0xcc(%ebp)
00001f67	leal	0x00000248(%edi,%esi),%eax
00001f6e	movl	%eax,0xc8(%ebp)
00001f71	leal	0x00000244(%edi,%esi),%eax
00001f78	movl	%eax,0xc4(%ebp)
00001f7b	calll	CDmxElement::GetAttribute(char const*) const
00001f80	testl	%eax,%eax
00001f82	movl	%edi,%esi
00001f84	je	0x00001fe1
00001f86	cmpl	$0x0a,(%eax)
00001f89	jne	0x00001f97
00001f8b	movl	0x08(%eax),%eax
00001f8e	movss	(%eax),%xmm0
00001f92	jmp	0x0000202d
00001f97	movb	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%al
00001f9d	testb	%al,%al
00001f9f	jne	0x00001fbb
00001fa1	leal	guard variable for Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%edi
00001fa7	movl	%edi,(%esp)
00001faa	calll	___cxa_guard_acquire
00001faf	testl	%eax,%eax
00001fb1	je	0x00001fbb
00001fb3	movl	%edi,(%esp)
00001fb6	calll	___cxa_guard_release
00001fbb	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx)
00001fc5	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000004(%ebx)
00001fcf	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce+0x00000008(%ebx)
00001fd9	leal	Vector const& CDmxAttribute::GetValue<Vector>() const::defaultValue-0x11ce(%ebx),%eax
00001fdf	jmp	0x00002029
00001fe1	movb	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%al
00001fe7	testb	%al,%al
00001fe9	jne	0x00002005
00001feb	leal	guard variable for Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%edi
00001ff1	movl	%edi,(%esp)
00001ff4	calll	___cxa_guard_acquire
00001ff9	testl	%eax,%eax
00001ffb	je	0x00002005
00001ffd	movl	%edi,(%esp)
00002000	calll	___cxa_guard_release
00002005	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx)
0000200f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000004(%ebx)
00002019	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce+0x00000008(%ebx)
00002023	leal	Vector const& CDmxElement::GetValue<Vector>(char const*) const::defaultValue-0x11ce(%ebx),%eax
00002029	pxor	%xmm0,%xmm0
0000202d	movl	0xc4(%ebp),%ecx
00002030	movss	%xmm0,(%ecx)
00002034	movss	0x04(%eax),%xmm0
00002039	movl	0xc8(%ebp),%ecx
0000203c	movss	%xmm0,(%ecx)
00002040	movss	0x08(%eax),%xmm0
00002045	movl	0xcc(%ebp),%eax
00002048	movss	%xmm0,(%eax)
0000204c	movl	0xe4(%ebp),%eax
0000204f	movss	(%eax),%xmm0
00002053	movl	0xd0(%ebp),%ecx
00002056	movss	%xmm0,(%ecx)
0000205a	movss	0x04(%eax),%xmm0
0000205f	movl	0xd4(%ebp),%ecx
00002062	movss	%xmm0,(%ecx)
00002066	movss	0x08(%eax),%xmm0
0000206b	movl	0xd8(%ebp),%eax
0000206e	movss	%xmm0,(%eax)
00002072	leal	0x7e460-0x11ce(%ebx),%eax
00002078	movl	%eax,0x04(%esp)
0000207c	movl	0xf0(%ebp),%eax
0000207f	movl	%eax,(%esp)
00002082	calll	CDmxElement::GetAttribute(char const*) const
00002087	testl	%eax,%eax
00002089	je	0x000020ab
0000208b	cmpl	$0x03,(%eax)
0000208e	movl	%esi,%edi
00002090	jne	0x0000209b
00002092	movl	0x08(%eax),%eax
00002095	movss	(%eax),%xmm0
00002099	jmp	0x000020bb
0000209b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxAttribute::GetValue<float>() const::defaultValue-0x11ce(%ebx)
000020a5	pxor	%xmm0,%xmm0
000020a9	jmp	0x000020bb
000020ab	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxElement::GetValue<float>(char const*) const::defaultValue-0x11ce(%ebx)
000020b5	pxor	%xmm0,%xmm0
000020b9	movl	%esi,%edi
000020bb	movl	0xe0(%ebp),%eax
000020be	movss	%xmm0,(%eax)
000020c2	leal	0x7e47b-0x11ce(%ebx),%eax
000020c8	movl	%eax,0x04(%esp)
000020cc	movl	0xf0(%ebp),%eax
000020cf	movl	%eax,(%esp)
000020d2	calll	CDmxElement::GetAttribute(char const*) const
000020d7	testl	%eax,%eax
000020d9	je	0x00001600
000020df	cmpl	$0x03,(%eax)
000020e2	jne	0x000020f0
000020e4	movl	0x08(%eax),%eax
000020e7	movss	(%eax),%xmm0
000020eb	jmp	0x0000160e
000020f0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),float const& CDmxAttribute::GetValue<float>() const::defaultValue-0x11ce(%ebx)
000020fa	jmp	0x0000160a
000020ff	movl	%edi,%esi
00002101	cmpl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xc0(%ebp)
00002105	jle	0x0000212d
00002107	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),(%esp)
0000210e	calll	operator new(unsigned long)
00002113	movl	%eax,%edi
00002115	leal	0x00000280(%esi),%eax
0000211b	movl	%eax,0x04(%esp)
0000211f	movl	%edi,(%esp)
00002122	calll	CPotteryWheelManip::CPotteryWheelManip(matrix3x4_t*)
00002127	movl	%edi,0x000004c4(%esi)
0000212d	addl	$0x4c,%esp
00002130	popl	%esi
00002131	popl	%edi
00002132	popl	%ebx
00002133	popl	%ebp
00002134	ret
00002135	movl	%eax,%esi
00002137	movl	%edi,(%esp)
0000213a	calll	KeyValues::operator delete(void*)
0000213f	movl	%esi,(%esp)
00002142	calll	__Unwind_Resume
00002147	addl	$0x4c,%esp
0000214a	popl	%esi
0000214b	popl	%edi
0000214c	popl	%ebx
0000214d	popl	%ebp
0000214e	jmp	CPotteryWheelPanel::CreateDefaultLights()
00002153	movl	%eax,%esi
00002155	movl	%edi,(%esp)
00002158	calll	KeyValues::operator delete(void*)
0000215d	jmp	0x0000213f
0000215f	calll	std::terminate()
00002164	movl	%eax,%esi
00002166	movl	%edi,(%esp)
00002169	calll	operator delete(void*)
0000216e	movl	%esi,(%esp)
00002171	calll	__Unwind_Resume
00002176	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::HasLightProbe() const:
00002180	movl	0x04(%esp),%eax
00002184	movzbl	0x000004d4(%eax),%eax
0000218b	andl	$0x01,%eax
0000218e	ret
0000218f	nop
CPotteryWheelPanel::GetLightProbeCubemap(bool):
00002190	xorl	%eax,%eax
00002192	movl	0x04(%esp),%ecx
00002196	testb	$0x01,0x000004d4(%ecx)
0000219d	je	0x000021b6
0000219f	movb	0x08(%esp),%dl
000021a3	leal	0x000001cc(%ecx),%eax
000021a9	leal	0x000001c8(%ecx),%ecx
000021af	testb	%dl,%dl
000021b1	cmovel	%ecx,%eax
000021b4	movl	(%eax),%eax
000021b6	ret
000021b7	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::GetCameraFOV():
000021c0	movl	0x04(%esp),%eax
000021c4	cvttss2si	0x000001e8(%eax),%eax
000021cc	ret
000021cd	nopl	(%eax)
CPotteryWheelPanel::SetCameraFOV(float):
000021d0	movss	0x08(%esp),%xmm0
000021d6	movl	0x04(%esp),%eax
000021da	movss	%xmm0,0x000001e8(%eax)
000021e2	ret
000021e3	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::SetCameraOffset(Vector const&):
000021f0	movl	0x08(%esp),%eax
000021f4	movss	(%eax),%xmm0
000021f8	movl	0x04(%esp),%ecx
000021fc	movss	%xmm0,0x000004ac(%ecx)
00002204	movss	0x04(%eax),%xmm0
00002209	movss	%xmm0,0x000004b0(%ecx)
00002211	movss	0x08(%eax),%xmm0
00002216	movss	%xmm0,0x000004b4(%ecx)
0000221e	ret
0000221f	nop
CPotteryWheelPanel::GetCameraOffset(Vector&):
00002220	movl	0x04(%esp),%eax
00002224	movss	0x000004ac(%eax),%xmm0
0000222c	movl	0x08(%esp),%ecx
00002230	movss	%xmm0,(%ecx)
00002234	movss	0x000004b0(%eax),%xmm0
0000223c	movss	%xmm0,0x04(%ecx)
00002241	movss	0x000004b4(%eax),%xmm0
00002249	movss	%xmm0,0x08(%ecx)
0000224e	ret
0000224f	nop
CPotteryWheelPanel::SetCameraPositionAndAngles(Vector const&, QAngle const&, bool):
00002250	pushl	%ebp
00002251	movl	%esp,%ebp
00002253	pushl	%ebx
00002254	pushl	%edi
00002255	pushl	%esi
00002256	subl	$0x7c,%esp
00002259	movl	0x08(%ebp),%esi
0000225c	leal	0x000001f4(%esi),%ebx
00002262	movl	%esi,%edi
00002264	movl	%ebx,(%esp)
00002267	calll	SetIdentityMatrix(matrix3x4_t&)
0000226c	movl	%ebx,0x08(%esp)
00002270	movl	0x0c(%ebp),%eax
00002273	movl	%eax,0x04(%esp)
00002277	movl	0x10(%ebp),%eax
0000227a	movl	%eax,(%esp)
0000227d	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
00002282	leal	0xc0(%ebp),%esi
00002285	movl	%esi,(%esp)
00002288	calll	SetIdentityMatrix(matrix3x4_t&)
0000228d	movl	%esi,0x08(%esp)
00002291	leal	0x000004ac(%edi),%eax
00002297	movl	%edi,%esi
00002299	movl	%eax,(%esp)
0000229c	movl	$0x00000003,0x04(%esp)
000022a4	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
000022a9	leal	0x90(%ebp),%edi
000022ac	movl	%edi,0x08(%esp)
000022b0	leal	0xc0(%ebp),%eax
000022b3	movl	%eax,0x04(%esp)
000022b7	movl	%ebx,(%esp)
000022ba	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
000022bf	leal	0x000001dc(%esi),%eax
000022c5	movl	%eax,0x04(%esp)
000022c9	movl	%edi,(%esp)
000022cc	calll	MatrixAngles(matrix3x4_t const&, float*)
000022d1	leal	CZoomManipulator::CZoomManipulator(float*)(%esi),%eax
000022d7	movl	%eax,0x08(%esp)
000022db	movl	%edi,(%esp)
000022de	movl	$0x00000003,0x04(%esp)
000022e6	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
000022eb	movb	0x14(%ebp),%al
000022ee	testb	%al,%al
000022f0	je	0x000022fa
000022f2	movl	%esi,(%esp)
000022f5	calll	CPotteryWheelPanel::SyncManipulation()
000022fa	addl	$0x7c,%esp
000022fd	popl	%esi
000022fe	popl	%edi
000022ff	popl	%ebx
00002300	popl	%ebp
00002301	ret
00002302	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::SyncManipulation():
00002310	pushl	%ebp
00002311	movl	%esp,%ebp
00002313	pushl	%ebx
00002314	pushl	%edi
00002315	pushl	%esi
00002316	subl	$0x2c,%esp
00002319	calll	0x0000231e
0000231e	popl	%edi
0000231f	movl	0x08(%ebp),%esi
00002322	movl	0x000004b8(%esi),%eax
00002328	testl	%eax,%eax
0000232a	je	0x000023e3
00002330	leal	typeinfo for CRotationManipulator-0x231e(%edi),%ecx
00002336	movl	%ecx,0x08(%esp)
0000233a	leal	typeinfo for CTransformManipulator-0x231e(%edi),%ebx
00002340	movl	%ebx,0x04(%esp)
00002344	movl	%eax,(%esp)
00002347	movl	$0xffffffff,0x0c(%esp)
0000234f	calll	___dynamic_cast
00002354	testl	%eax,%eax
00002356	je	0x000023e3
0000235c	movl	0x000004b8(%esi),%eax
00002362	xorl	%esi,%esi
00002364	testl	%eax,%eax
00002366	je	0x00002388
00002368	leal	typeinfo for CRotationManipulator-0x231e(%edi),%ecx
0000236e	movl	%ecx,0x08(%esp)
00002372	movl	%ebx,0x04(%esp)
00002376	movl	%eax,(%esp)
00002379	movl	$0xffffffff,0x0c(%esp)
00002381	calll	___dynamic_cast
00002386	movl	%eax,%esi
00002388	movl	0x0c(%esi),%ebx
0000238b	testl	%ebx,%ebx
0000238d	je	0x000023e3
0000238f	leal	0xe8(%ebp),%eax
00002392	movl	%eax,0x04(%esp)
00002396	movl	%ebx,(%esp)
00002399	calll	MatrixAngles(matrix3x4_t const&, float*)
0000239e	leal	0xd8(%ebp),%eax
000023a1	movl	%eax,0x08(%esp)
000023a5	movl	%ebx,(%esp)
000023a8	movl	$0x00000003,0x04(%esp)
000023b0	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
000023b5	movss	0x7c64c-0x231e(%edi),%xmm0
000023bd	movss	0xe8(%ebp),%xmm1
000023c2	mulss	%xmm0,%xmm1
000023c6	movss	%xmm1,0x18(%esi)
000023cb	movss	0xec(%ebp),%xmm1
000023d0	mulss	%xmm0,%xmm1
000023d4	movss	%xmm1,0x1c(%esi)
000023d9	mulss	0xf0(%ebp),%xmm0
000023de	movss	%xmm0,0x20(%esi)
000023e3	addl	$0x2c,%esp
000023e6	popl	%esi
000023e7	popl	%edi
000023e8	popl	%ebx
000023e9	popl	%ebp
000023ea	ret
000023eb	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::GetCameraPositionAndAngles(Vector&, QAngle&):
000023f0	pushl	%ebp
000023f1	movl	%esp,%ebp
000023f3	pushl	%esi
000023f4	subl	$0x14,%esp
000023f7	movl	0x10(%ebp),%eax
000023fa	movl	%eax,0x04(%esp)
000023fe	movl	$0x000001f4,%esi
00002403	addl	0x08(%ebp),%esi
00002406	movl	%esi,(%esp)
00002409	calll	MatrixAngles(matrix3x4_t const&, float*)
0000240e	movl	0x0c(%ebp),%eax
00002411	movl	%eax,0x08(%esp)
00002415	movl	%esi,(%esp)
00002418	movl	$0x00000003,0x04(%esp)
00002420	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00002425	addl	$0x14,%esp
00002428	popl	%esi
00002429	popl	%ebp
0000242a	ret
0000242b	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::ResetCameraPivot():
00002430	pushl	%ebp
00002431	movl	%esp,%ebp
00002433	subl	$0x08,%esp
00002436	movl	$0x000001f4,%eax
0000243b	addl	0x08(%ebp),%eax
0000243e	movl	%eax,(%esp)
00002441	calll	SetIdentityMatrix(matrix3x4_t&)
00002446	addl	$0x08,%esp
00002449	popl	%ebp
0000244a	ret
0000244b	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::LookAt(float):
00002450	pushl	%ebp
00002451	movl	%esp,%ebp
00002453	pushl	%ebx
00002454	pushl	%edi
00002455	pushl	%esi
00002456	subl	$0x0000009c,%esp
0000245c	calll	0x00002461
00002461	popl	%edi
00002462	movl	0x08(%ebp),%esi
00002465	movss	0x000001e8(%esi),%xmm0
0000246d	leal	0x88(%ebp),%eax
00002470	movl	%eax,0x08(%esp)
00002474	leal	0x8c(%ebp),%eax
00002477	movl	%eax,0x04(%esp)
0000247b	movl	%esi,(%esp)
0000247e	cvtss2sd	%xmm0,%xmm0
00002482	mulsd	0x7c680-0x2461(%edi),%xmm0
0000248a	cvtsd2ss	%xmm0,%xmm0
0000248e	movss	%xmm0,0xffffff6c(%ebp)
00002496	calll	vgui::Panel::GetSize(int&, int&)
0000249b	movl	0x88(%ebp),%ebx
0000249e	cmpl	0x8c(%ebp),%ebx
000024a1	jl	0x000024ad
000024a3	movss	0xffffff6c(%ebp),%xmm0
000024ab	jmp	0x000024f0
000024ad	movss	0xffffff6c(%ebp),%xmm0
000024b5	cvtss2sd	%xmm0,%xmm0
000024b9	movsd	%xmm0,(%esp)
000024be	calll	_tan
000024c3	fstpl	CTranslationManipulator::OnMousePressed(ButtonCode_t, int, int)(%ebp)
000024c6	cvtsi2sd	%ebx,%xmm0
000024ca	mulsd	CTranslationManipulator::OnMousePressed(ButtonCode_t, int, int)(%ebp),%xmm0
000024cf	cvtsi2sd	0x8c(%ebp),%xmm1
000024d4	divsd	%xmm1,%xmm0
000024d8	movsd	%xmm0,(%esp)
000024dd	calll	_atan
000024e2	fstps	0xffffff7c(%ebp)
000024e8	movss	0xffffff7c(%ebp),%xmm0
000024f0	cvtss2sd	%xmm0,%xmm0
000024f4	movsd	%xmm0,(%esp)
000024f9	calll	_sin
000024fe	fstpl	0xffffff70(%ebp)
00002504	movss	0x0c(%ebp),%xmm0
00002509	cvtss2sd	%xmm0,%xmm0
0000250d	divsd	0xffffff70(%ebp),%xmm0
00002515	xorpd	0x7d780-0x2461(%edi),%xmm0
0000251d	cvtsd2ss	%xmm0,%xmm0
00002521	movss	%xmm0,0x000004ac(%esi)
00002529	leal	0xc0(%ebp),%ebx
0000252c	movl	%ebx,(%esp)
0000252f	calll	SetIdentityMatrix(matrix3x4_t&)
00002534	movl	%ebx,0x08(%esp)
00002538	leal	0x000004ac(%esi),%eax
0000253e	movl	%eax,(%esp)
00002541	movl	$0x00000003,0x04(%esp)
00002549	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
0000254e	leal	0x90(%ebp),%edi
00002551	movl	%edi,0x08(%esp)
00002555	movl	%ebx,0x04(%esp)
00002559	leal	0x000001f4(%esi),%eax
0000255f	movl	%eax,(%esp)
00002562	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
00002567	leal	0x000001dc(%esi),%eax
0000256d	movl	%eax,0x04(%esp)
00002571	movl	%edi,(%esp)
00002574	calll	MatrixAngles(matrix3x4_t const&, float*)
00002579	addl	CZoomManipulator::CZoomManipulator(float*),%esi
0000257f	movl	%esi,0x08(%esp)
00002583	movl	%edi,(%esp)
00002586	movl	$0x00000003,0x04(%esp)
0000258e	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00002593	addl	$0x0000009c,%esp
00002599	popl	%esi
0000259a	popl	%edi
0000259b	popl	%ebx
0000259c	popl	%ebp
0000259d	ret
0000259e	nop
CPotteryWheelPanel::LookAt(Vector const&, float):
000025a0	pushl	%ebp
000025a1	movl	%esp,%ebp
000025a3	pushl	%esi
000025a4	subl	$0x14,%esp
000025a7	movl	0x08(%ebp),%esi
000025aa	leal	0x000001f4(%esi),%eax
000025b0	movl	%eax,0x08(%esp)
000025b4	movl	0x0c(%ebp),%eax
000025b7	movl	%eax,(%esp)
000025ba	movl	$0x00000003,0x04(%esp)
000025c2	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
000025c7	movss	0x10(%ebp),%xmm0
000025cc	movss	%xmm0,0x04(%esp)
000025d2	movl	%esi,(%esp)
000025d5	calll	CPotteryWheelPanel::LookAt(float)
000025da	addl	$0x14,%esp
000025dd	popl	%esi
000025de	popl	%ebp
000025df	ret
CPotteryWheelPanel::SetupRenderState(int, int):
000025e0	pushl	%ebp
000025e1	movl	%esp,%ebp
000025e3	pushl	%ebx
000025e4	pushl	%edi
000025e5	pushl	%esi
000025e6	subl	$0x0000017c,%esp
000025ec	calll	0x000025f1
000025f1	popl	%ecx
000025f2	movl	%ecx,0xfffffe94(%ebp)
000025f8	movl	0x85639-0x25f1(%ecx),%eax
000025fe	movl	%eax,0xfffffe78(%ebp)
00002604	movl	(%eax),%eax
00002606	movl	%eax,0xf0(%ebp)
00002609	movl	0x85641-0x25f1(%ecx),%eax
0000260f	movl	(%eax),%ecx
00002611	movl	(%ecx),%eax
00002613	subl	$0x10,%esp
00002616	movl	%ecx,(%esp)
00002619	call	*0x00000188(%eax)
0000261f	addl	$0x10,%esp
00002622	movl	%eax,%ebx
00002624	testl	%ebx,%ebx
00002626	je	0x00002638
00002628	movl	(%ebx),%eax
0000262a	movl	0x08(%eax),%eax
0000262d	subl	$0x10,%esp
00002630	movl	%ebx,(%esp)
00002633	call	*%eax
00002635	addl	$0x10,%esp
00002638	movl	0x08(%ebp),%edi
0000263b	leal	CZoomManipulator::CZoomManipulator(float*)(%edi),%esi
00002641	subl	$0x10,%esp
00002644	movl	%esi,0x04(%esp)
00002648	leal	0xb0(%ebp),%eax
0000264b	movl	%eax,(%esp)
0000264e	calll	ComputeViewMatrix(VMatrix*, Camera_t const&)
00002653	addl	$0x10,%esp
00002656	movl	0x10(%ebp),%eax
00002659	movl	0x0c(%ebp),%ecx
0000265c	subl	$0x10,%esp
0000265f	movl	%eax,0x0c(%esp)
00002663	movl	%ecx,0x08(%esp)
00002667	movl	%esi,0x04(%esp)
0000266b	leal	0xffffff70(%ebp),%esi
00002671	movl	%esi,(%esp)
00002674	calll	ComputeProjectionMatrix(VMatrix*, Camera_t const&, int, int)
00002679	addl	$0x10,%esp
0000267c	movl	(%ebx),%eax
0000267e	movl	0x50(%eax),%eax
00002681	subl	$0x10,%esp
00002684	movl	%ebx,(%esp)
00002687	movl	$0x0000000a,0x04(%esp)
0000268f	call	*%eax
00002691	addl	$0x10,%esp
00002694	movl	(%ebx),%eax
00002696	movl	0x7c(%eax),%eax
00002699	subl	$0x10,%esp
0000269c	movl	%ebx,(%esp)
0000269f	call	*%eax
000026a1	addl	$0x10,%esp
000026a4	movl	(%ebx),%eax
000026a6	movl	0x50(%eax),%eax
000026a9	subl	$0x10,%esp
000026ac	movl	%ebx,(%esp)
000026af	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000026b7	call	*%eax
000026b9	addl	$0x10,%esp
000026bc	movl	(%ebx),%eax
000026be	movl	0x5c(%eax),%eax
000026c1	subl	$0x10,%esp
000026c4	leal	0xb0(%ebp),%ecx
000026c7	movl	%ecx,0x04(%esp)
000026cb	movl	%ebx,(%esp)
000026ce	call	*%eax
000026d0	addl	$0x10,%esp
000026d3	movl	(%ebx),%eax
000026d5	movl	0x50(%eax),%eax
000026d8	subl	$0x10,%esp
000026db	movl	%ebx,(%esp)
000026de	movl	$0x00000001,0x04(%esp)
000026e6	call	*%eax
000026e8	addl	$0x10,%esp
000026eb	movl	(%ebx),%eax
000026ed	movl	0x5c(%eax),%eax
000026f0	subl	$0x10,%esp
000026f3	movl	%esi,0x04(%esp)
000026f7	movl	%ebx,(%esp)
000026fa	call	*%eax
000026fc	addl	$0x10,%esp
000026ff	movl	%ebx,0xfffffe90(%ebp)
00002705	movl	0x00000224(%edi),%eax
0000270b	imull	$0x58,%eax,%ecx
0000270e	addl	$0x0f,%ecx
00002711	andl	$0xf0,%ecx
00002714	movl	%ecx,%edx
00002716	negl	%edx
00002718	leal	0x1c(%esp,%edx),%edx
0000271c	movl	%edx,0xfffffe88(%ebp)
00002722	movl	%esp,%ebx
00002724	subl	%ecx,%ebx
00002726	movl	%ebx,0xfffffe8c(%ebp)
0000272c	leal	0x10(%ebx),%ecx
0000272f	movl	%ecx,0xfffffe84(%ebp)
00002735	movl	%ebx,%esp
00002737	leal	0x00000280(%edi),%edi
0000273d	xorl	%esi,%esi
0000273f	movl	0xfffffe94(%ebp),%ecx
00002745	movss	0x7c650-0x25f1(%ecx),%xmm0
0000274d	movss	%xmm0,0xfffffe80(%ebp)
00002755	movss	0x7c654-0x25f1(%ecx),%xmm0
0000275d	movss	%xmm0,0xfffffe7c(%ebp)
00002765	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
00002770	cmpl	%eax,%esi
00002772	jge	0x000029a6
00002778	movl	0xa8(%edi),%eax
0000277b	movl	%eax,(%ebx)
0000277d	movss	0xac(%edi),%xmm0
00002782	movss	%xmm0,0x04(%ebx)
00002787	movss	0xb0(%edi),%xmm0
0000278c	movss	%xmm0,0x08(%ebx)
00002791	movss	0xb4(%edi),%xmm0
00002796	movss	%xmm0,0x0c(%ebx)
0000279b	movss	0xb8(%edi),%xmm0
000027a0	movss	%xmm0,0x10(%ebx)
000027a5	movss	0xbc(%edi),%xmm0
000027aa	movss	%xmm0,0x14(%ebx)
000027af	movss	0xc0(%edi),%xmm0
000027b4	movss	%xmm0,0x18(%ebx)
000027b9	movss	0xc4(%edi),%xmm0
000027be	movss	%xmm0,0x1c(%ebx)
000027c3	movss	0xc8(%edi),%xmm0
000027c8	movss	%xmm0,0x20(%ebx)
000027cd	movss	0xcc(%edi),%xmm0
000027d2	movss	%xmm0,0x24(%ebx)
000027d7	movss	0xd0(%edi),%xmm0
000027dc	movss	%xmm0,0x28(%ebx)
000027e1	movss	0xd4(%edi),%xmm0
000027e6	movss	%xmm0,0x2c(%ebx)
000027eb	movss	0xd8(%edi),%xmm0
000027f0	movss	%xmm0,0x30(%ebx)
000027f5	movss	0xdc(%edi),%xmm0
000027fa	movss	%xmm0,0x34(%ebx)
000027ff	movss	0xe0(%edi),%xmm0
00002804	movss	%xmm0,0x38(%ebx)
00002809	movss	0xe4(%edi),%xmm0
0000280e	movss	%xmm0,0x3c(%ebx)
00002813	movss	0xe8(%edi),%xmm0
00002818	movss	%xmm0,CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%ebx)
0000281d	movss	0xec(%edi),%xmm0
00002822	movss	%xmm0,0x44(%ebx)
00002827	movss	0xf0(%edi),%xmm0
0000282c	movss	%xmm0,0x48(%ebx)
00002831	movl	0xf4(%edi),%eax
00002834	movl	%eax,0x4c(%ebx)
00002837	movss	0xf8(%edi),%xmm0
0000283c	movss	%xmm0,0x50(%ebx)
00002841	movss	0xfc(%edi),%xmm0
00002846	movss	%xmm0,0x54(%ebx)
0000284b	subl	$0x10,%esp
0000284e	movl	%edi,0x04(%esp)
00002852	movl	0xfffffe84(%ebp),%eax
00002858	movl	%eax,0x08(%esp)
0000285c	leal	0xb8(%edi),%eax
0000285f	movl	%eax,(%esp)
00002862	calll	VectorTransform(float const*, matrix3x4_t const&, float*)
00002867	addl	$0x10,%esp
0000286a	leal	0xc4(%edi),%eax
0000286d	subl	$0x10,%esp
00002870	movl	0xfffffe88(%ebp),%ecx
00002876	movl	%ecx,0x08(%esp)
0000287a	movl	%edi,0x04(%esp)
0000287e	movl	%eax,(%esp)
00002881	calll	VectorRotate(float const*, matrix3x4_t const&, float*)
00002886	addl	$0x10,%esp
00002889	movl	0xfffffe8c(%ebp),%ecx
0000288f	movss	0x1c(%ecx),%xmm1
00002894	movss	0x20(%ecx),%xmm0
00002899	movaps	%xmm0,%xmm2
0000289c	mulss	%xmm2,%xmm2
000028a0	movaps	%xmm1,%xmm4
000028a3	mulss	%xmm4,%xmm4
000028a7	addss	%xmm2,%xmm4
000028ab	movss	0x24(%ecx),%xmm2
000028b0	movaps	%xmm2,%xmm3
000028b3	mulss	%xmm3,%xmm3
000028b7	addss	%xmm4,%xmm3
000028bb	addss	0xfffffe80(%ebp),%xmm3
000028c3	xorps	%xmm4,%xmm4
000028c6	movss	%xmm3,%xmm4
000028ca	rsqrtss	%xmm4,%xmm4
000028ce	movaps	%xmm4,%xmm5
000028d1	mulss	%xmm5,%xmm5
000028d5	mulss	%xmm3,%xmm5
000028d9	movss	0xfffffe7c(%ebp),%xmm3
000028e1	subss	%xmm5,%xmm3
000028e5	movl	0xfffffe94(%ebp),%eax
000028eb	mulss	0x7c658-0x25f1(%eax),%xmm3
000028f3	mulss	%xmm4,%xmm3
000028f7	mulss	%xmm3,%xmm1
000028fb	movss	%xmm1,0x1c(%ecx)
00002900	mulss	%xmm3,%xmm0
00002904	movss	%xmm0,0x20(%ecx)
00002909	mulss	%xmm2,%xmm3
0000290d	movss	%xmm3,0x24(%ecx)
00002912	movl	0xfffffe90(%ebp),%ecx
00002918	movl	(%ecx),%eax
0000291a	movl	0x3c(%eax),%eax
0000291d	subl	$0x10,%esp
00002920	movl	%ebx,0x08(%esp)
00002924	movl	%esi,0x04(%esp)
00002928	movl	%ecx,(%esp)
0000292b	call	*%eax
0000292d	addl	$0x10,%esp
00002930	addl	$0x58,%ebx
00002933	addl	$0x00000088,%edi
00002939	movl	0x08(%ebp),%eax
0000293c	movl	0x00000224(%eax),%eax
00002942	incl	%esi
00002943	jmp	0x00002770
00002948	movl	%eax,%edi
0000294a	movl	(%ebx),%eax
0000294c	movl	0x04(%eax),%eax
0000294f	subl	$0x10,%esp
00002952	movl	%ebx,(%esp)
00002955	call	*%eax
00002957	addl	$0x10,%esp
0000295a	subl	$0x10,%esp
0000295d	movl	%edi,(%esp)
00002960	calll	__Unwind_Resume
00002965	addl	$0x10,%esp
00002968	calll	std::terminate()
0000296d	jmp	0x00002979
0000296f	movl	%eax,%edi
00002971	movl	0xfffffe90(%ebp),%ebx
00002977	jmp	0x0000297b
00002979	movl	%eax,%edi
0000297b	testl	%ebx,%ebx
0000297d	je	0x0000295a
0000297f	movl	(%ebx),%eax
00002981	movl	0x0c(%eax),%eax
00002984	subl	$0x10,%esp
00002987	movl	%ebx,(%esp)
0000298a	call	*%eax
0000298c	addl	$0x10,%esp
0000298f	movl	(%ebx),%eax
00002991	movl	0x04(%eax),%eax
00002994	subl	$0x10,%esp
00002997	movl	%ebx,(%esp)
0000299a	call	*%eax
0000299c	addl	$0x10,%esp
0000299f	jmp	0x0000295a
000029a1	calll	std::terminate()
000029a6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xffffff18(%ebp)
000029b0	movl	0xfffffe94(%ebp),%eax
000029b6	movl	0x85645-0x25f1(%eax),%eax
000029bc	movl	(%eax),%eax
000029be	movl	(%eax),%ecx
000029c0	movl	0x60(%ecx),%ecx
000029c3	subl	$0x10,%esp
000029c6	movl	%eax,(%esp)
000029c9	movl	0xfffffe90(%ebp),%ebx
000029cf	call	*%ecx
000029d1	addl	$0x10,%esp
000029d4	movl	%eax,%edi
000029d6	movl	0x08(%ebp),%eax
000029d9	movl	0x00000224(%eax),%esi
000029df	nop
000029e0	cmpl	%edi,%esi
000029e2	jge	0x00002a05
000029e4	movl	(%ebx),%eax
000029e6	movl	0x3c(%eax),%eax
000029e9	subl	$0x10,%esp
000029ec	leal	0xffffff18(%ebp),%ecx
000029f2	movl	%ecx,0x08(%esp)
000029f6	movl	%esi,0x04(%esp)
000029fa	movl	%ebx,(%esp)
000029fd	call	*%eax
000029ff	addl	$0x10,%esp
00002a02	incl	%esi
00002a03	jmp	0x000029e0
00002a05	movl	(%ebx),%eax
00002a07	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax),%eax
00002a0a	movl	0x08(%ebp),%ecx
00002a0d	leal	0x00000448(%ecx),%ecx
00002a13	movl	%ecx,0xfffffe88(%ebp)
00002a19	subl	$0x10,%esp
00002a1c	movl	%ecx,0x04(%esp)
00002a20	movl	%ebx,(%esp)
00002a23	call	*%eax
00002a25	addl	$0x10,%esp
00002a28	movl	0xfffffe94(%ebp),%eax
00002a2e	movl	0x85649-0x25f1(%eax),%edi
00002a34	cmpl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),(%edi)
00002a37	je	0x00002b97
00002a3d	subl	$0x10,%esp
00002a40	leal	0xfffffed8(%ebp),%eax
00002a46	movl	%eax,0x04(%esp)
00002a4a	leal	0xb0(%ebp),%eax
00002a4d	movl	%eax,(%esp)
00002a50	calll	MatrixInverseTR(VMatrix const&, VMatrix&)
00002a55	addl	$0x10,%esp
00002a58	movss	0xfffffed8(%ebp),%xmm0
00002a60	movss	%xmm0,0xfffffeb8(%ebp)
00002a68	movss	0xfffffee8(%ebp),%xmm0
00002a70	movss	%xmm0,0xfffffebc(%ebp)
00002a78	movss	0xfffffef8(%ebp),%xmm0
00002a80	movss	%xmm0,0xfffffec0(%ebp)
00002a88	movss	0xfffffedc(%ebp),%xmm0
00002a90	movss	%xmm0,0xfffffea8(%ebp)
00002a98	movss	0xfffffeec(%ebp),%xmm0
00002aa0	movss	%xmm0,0xfffffeac(%ebp)
00002aa8	movss	0xfffffefc(%ebp),%xmm0
00002ab0	movss	%xmm0,0xfffffeb0(%ebp)
00002ab8	movss	0xfffffee0(%ebp),%xmm0
00002ac0	movss	%xmm0,0xfffffe98(%ebp)
00002ac8	movss	0xfffffef0(%ebp),%xmm0
00002ad0	movss	%xmm0,0xfffffe9c(%ebp)
00002ad8	movss	0xffffff00(%ebp),%xmm0
00002ae0	movss	%xmm0,0xfffffea0(%ebp)
00002ae8	movss	0xfffffee4(%ebp),%xmm0
00002af0	movss	%xmm0,0xfffffec8(%ebp)
00002af8	movss	0xfffffef4(%ebp),%xmm0
00002b00	movss	%xmm0,0xfffffecc(%ebp)
00002b08	movss	0xffffff04(%ebp),%xmm0
00002b10	movss	%xmm0,0xfffffed0(%ebp)
00002b18	movl	(%edi),%eax
00002b1a	movl	(%eax),%ecx
00002b1c	movl	0x4c(%ecx),%ecx
00002b1f	subl	$0x20,%esp
00002b22	leal	0xfffffe98(%ebp),%edx
00002b28	movl	%edx,0x10(%esp)
00002b2c	leal	0xfffffea8(%ebp),%edx
00002b32	movl	%edx,0x0c(%esp)
00002b36	leal	0xfffffeb8(%ebp),%edx
00002b3c	movl	%edx,0x08(%esp)
00002b40	leal	0xfffffec8(%ebp),%edx
00002b46	movl	%edx,0x04(%esp)
00002b4a	movl	%eax,(%esp)
00002b4d	call	*%ecx
00002b4f	addl	$0x20,%esp
00002b52	movl	(%edi),%eax
00002b54	movl	(%eax),%ecx
00002b56	movl	0x48(%ecx),%ecx
00002b59	movl	0x08(%ebp),%edx
00002b5c	movl	0x00000224(%edx),%edx
00002b62	subl	$0x10,%esp
00002b65	movl	0xfffffe8c(%ebp),%esi
00002b6b	movl	%esi,0x08(%esp)
00002b6f	movl	%edx,0x04(%esp)
00002b73	movl	%eax,(%esp)
00002b76	call	*%ecx
00002b78	addl	$0x10,%esp
00002b7b	movl	(%edi),%eax
00002b7d	movl	(%eax),%ecx
00002b7f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%ecx),%ecx
00002b82	subl	$0x10,%esp
00002b85	movl	0xfffffe88(%ebp),%edx
00002b8b	movl	%edx,0x04(%esp)
00002b8f	movl	%eax,(%esp)
00002b92	call	*%ecx
00002b94	addl	$0x10,%esp
00002b97	testl	%ebx,%ebx
00002b99	je	0x00002bb9
00002b9b	movl	(%ebx),%eax
00002b9d	movl	0x0c(%eax),%eax
00002ba0	subl	$0x10,%esp
00002ba3	movl	%ebx,(%esp)
00002ba6	call	*%eax
00002ba8	addl	$0x10,%esp
00002bab	movl	(%ebx),%eax
00002bad	subl	$0x10,%esp
00002bb0	movl	%ebx,(%esp)
00002bb3	call	*0x04(%eax)
00002bb6	addl	$0x10,%esp
00002bb9	movl	0xfffffe78(%ebp),%eax
00002bbf	movl	(%eax),%eax
00002bc1	cmpl	0xf0(%ebp),%eax
00002bc4	jne	0x00002bef
00002bc6	leal	0xf4(%ebp),%esp
00002bc9	popl	%esi
00002bca	popl	%edi
00002bcb	popl	%ebx
00002bcc	popl	%ebp
00002bcd	ret
00002bce	movl	%eax,%edi
00002bd0	movl	(%ebx),%eax
00002bd2	movl	0x04(%eax),%eax
00002bd5	subl	$0x10,%esp
00002bd8	movl	%ebx,(%esp)
00002bdb	call	*%eax
00002bdd	addl	$0x10,%esp
00002be0	jmp	0x0000295a
00002be5	calll	std::terminate()
00002bea	calll	std::terminate()
00002bef	calll	___stack_chk_fail
00002bf4	movl	(%ebx),%eax
00002bf6	movl	0x04(%eax),%eax
00002bf9	subl	$0x10,%esp
00002bfc	movl	%ebx,(%esp)
00002bff	call	*%eax
00002c01	addl	$0x10,%esp
00002c04	jmp	0x00002bea
00002c06	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::ComputeCameraTransform(matrix3x4_t*):
00002c10	pushl	%ebp
00002c11	movl	%esp,%ebp
00002c13	subl	$0x18,%esp
00002c16	movl	0x0c(%ebp),%eax
00002c19	movl	%eax,0x08(%esp)
00002c1d	movl	0x08(%ebp),%eax
00002c20	leal	CZoomManipulator::CZoomManipulator(float*)(%eax),%ecx
00002c26	movl	%ecx,0x04(%esp)
00002c2a	addl	$0x000001dc,%eax
00002c2f	movl	%eax,(%esp)
00002c32	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
00002c37	addl	$0x18,%esp
00002c3a	popl	%ebp
00002c3b	ret
00002c3c	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax)
CPotteryWheelPanel::ComputePanelPosition(Vector const&, Vector2D*):
00002c40	pushl	%ebp
00002c41	movl	%esp,%ebp
00002c43	pushl	%ebx
00002c44	pushl	%edi
00002c45	pushl	%esi
00002c46	subl	$0x5c,%esp
00002c49	leal	0xec(%ebp),%eax
00002c4c	movl	%eax,0x08(%esp)
00002c50	leal	0xf0(%ebp),%eax
00002c53	movl	%eax,0x04(%esp)
00002c57	movl	0x08(%ebp),%ebx
00002c5a	movl	%ebx,(%esp)
00002c5d	calll	vgui::Panel::GetSize(int&, int&)
00002c62	leal	0xb8(%ebp),%edi
00002c65	movl	%edi,0x08(%esp)
00002c69	leal	CZoomManipulator::CZoomManipulator(float*)(%ebx),%esi
00002c6f	movl	%esi,0x04(%esp)
00002c73	addl	$0x000001dc,%ebx
00002c79	movl	%ebx,(%esp)
00002c7c	calll	AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
00002c81	movl	%ebx,0x04(%esp)
00002c85	movl	%edi,(%esp)
00002c88	calll	MatrixAngles(matrix3x4_t const&, float*)
00002c8d	movl	%esi,0x08(%esp)
00002c91	movl	%edi,(%esp)
00002c94	movl	$0x00000003,0x04(%esp)
00002c9c	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00002ca1	movl	0xf0(%ebp),%eax
00002ca4	movl	0xec(%ebp),%ecx
00002ca7	movl	%ecx,0x10(%esp)
00002cab	movl	%eax,0x0c(%esp)
00002caf	movl	%esi,0x08(%esp)
00002cb3	movl	0x0c(%ebp),%eax
00002cb6	movl	%eax,0x04(%esp)
00002cba	movl	0x10(%ebp),%eax
00002cbd	movl	%eax,(%esp)
00002cc0	calll	ComputeScreenSpacePosition(Vector2D*, Vector const&, Camera_t const&, int, int)
00002cc5	addl	$0x5c,%esp
00002cc8	popl	%esi
00002cc9	popl	%edi
00002cca	popl	%ebx
00002ccb	popl	%ebp
00002ccc	ret
00002ccd	nopl	(%eax)
CPotteryWheelPanel::DrawGrid():
00002cd0	pushl	%ebp
00002cd1	movl	%esp,%ebp
00002cd3	pushl	%ebx
00002cd4	pushl	%edi
00002cd5	pushl	%esi
00002cd6	subl	$0x0000020c,%esp
00002cdc	calll	0x00002ce1
00002ce1	popl	%edi
00002ce2	calll	vgui::MaterialSystem()
00002ce7	movl	(%eax),%ecx
00002ce9	movl	%eax,(%esp)
00002cec	call	*0x00000188(%ecx)
00002cf2	movl	%eax,%esi
00002cf4	testl	%esi,%esi
00002cf6	je	0x00002d02
00002cf8	movl	(%esi),%eax
00002cfa	movl	0x08(%eax),%eax
00002cfd	movl	%esi,(%esp)
00002d00	call	*%eax
00002d02	movl	(%esi),%eax
00002d04	movl	0x50(%eax),%eax
00002d07	movl	%esi,(%esp)
00002d0a	movl	$0x0000000a,0x04(%esp)
00002d12	call	*%eax
00002d14	movl	(%esi),%eax
00002d16	movl	0x7c(%eax),%eax
00002d19	movl	%esi,(%esp)
00002d1c	call	*%eax
00002d1e	movl	0x08(%ebp),%ecx
00002d21	movl	(%esi),%eax
00002d23	movl	0x24(%eax),%eax
00002d26	movl	0x000001b8(%ecx),%ecx
00002d2c	movl	%ecx,0x04(%esp)
00002d30	movl	%esi,(%esp)
00002d33	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00002d3b	call	*%eax
00002d3d	movl	(%esi),%eax
00002d3f	movl	0x000000e0(%eax),%eax
00002d45	movl	%esi,(%esp)
00002d48	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x10(%esp)
00002d50	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0c(%esp)
00002d58	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00002d60	movl	$0x00000001,0x04(%esp)
00002d68	call	*%eax
00002d6a	movl	%edi,0xfffffe04(%ebp)
00002d70	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffed8(%ebp)
00002d7a	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffedc(%ebp)
00002d84	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffee0(%ebp)
00002d8e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffee8(%ebp)
00002d98	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffeec(%ebp)
00002da2	movl	$0xffffffff,0xfffffef0(%ebp)
00002dac	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffef4(%ebp)
00002db6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),CTranslationManipulator::OnCursorMoved(int, int)(%ebp)
00002dbd	movl	$0xffffffff,0xe4(%ebp)
00002dc4	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xe8(%ebp)
00002dcb	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xac(%ebp)
00002dd2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xb0(%ebp)
00002dd9	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xa8(%ebp)
00002de0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xe0(%ebp)
00002de7	movl	$0xffffffff,0xffffff48(%ebp)
00002df1	movl	%eax,0xfffffebc(%ebp)
00002df7	movb	$0x01,0xfffffec4(%ebp)
00002dfe	movl	$0x00000001,0xfffffec0(%ebp)
00002e08	movl	(%eax),%ecx
00002e0a	movl	0x30(%ecx),%ecx
00002e0d	movl	%eax,(%esp)
00002e10	movl	%eax,%edi
00002e12	movl	$0x00000001,0x04(%esp)
00002e1a	call	*%ecx
00002e1c	movl	0xfffffebc(%ebp),%ecx
00002e22	movl	(%ecx),%eax
00002e24	movl	0x4c(%eax),%eax
00002e27	leal	0xfffffe08(%ebp),%edx
00002e2d	movl	%edx,0x0c(%esp)
00002e31	movl	%ecx,(%esp)
00002e34	movl	$0x0000002c,0x08(%esp)
00002e3c	movl	$0x0000002c,0x04(%esp)
00002e44	call	*%eax
00002e46	movl	%edi,%edx
00002e48	movl	%edx,0xfffffe00(%ebp)
00002e4e	leal	0x04(%edx),%eax
00002e51	testl	%edx,%edx
00002e53	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),%ecx
00002e58	cmovnel	%eax,%ecx
00002e5b	movl	%ecx,0xfffffed8(%ebp)
00002e61	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffee0(%ebp)
00002e6b	movl	$0x0000002c,0xfffffedc(%ebp)
00002e75	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffef8(%ebp)
00002e7c	movl	0xfffffea4(%ebp),%ebx
00002e82	movl	%ebx,0xfffffee4(%ebp)
00002e88	movl	0xfffffeac(%ebp),%eax
00002e8e	movl	%eax,0xfffffec8(%ebp)
00002e94	movb	0xfffffeb8(%ebp),%al
00002e9a	movb	%al,0xfffffed4(%ebp)
00002ea0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffee8(%ebp)
00002eaa	movl	0xffffff48(%ebp),%edi
00002eb0	movl	%edx,CTranslationManipulator::OnCursorMoved(int, int)(%ebp)
00002eb3	leal	0xfffffe08(%ebp),%eax
00002eb9	movl	%eax,0x04(%esp)
00002ebd	leal	0xfffffefc(%ebp),%eax
00002ec3	movl	%eax,(%esp)
00002ec6	movl	$0x000000a4,0x08(%esp)
00002ece	calll	_memcpy
00002ed3	movl	$0x0000002c,0xa8(%ebp)
00002eda	cmpl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xffffff4c(%ebp)
00002ee1	setne	%al
00002ee4	movzbl	%al,%eax
00002ee7	addl	%eax,%eax
00002ee9	movl	%eax,0xffffff4c(%ebp)
00002eef	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xac(%ebp)
00002ef6	movb	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xa4(%ebp)
00002efa	cmpl	$0xff,%edi
00002efd	je	0x00002f05
00002eff	movl	%edi,0xffffff48(%ebp)
00002f05	cmpl	$0xff,0xe4(%ebp)
00002f09	jne	0x00002f1e
00002f0b	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xe0(%ebp)
00002f12	movl	0xfffffea8(%ebp),%eax
00002f18	movl	%eax,0xe4(%ebp)
00002f1b	movl	%ebx,0xe8(%ebp)
00002f1e	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffee8(%ebp)
00002f28	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xb0(%ebp)
00002f2f	movl	0xffffff50(%ebp),%edx
00002f35	movl	%edx,0xb4(%ebp)
00002f38	movl	0xffffff5c(%ebp),%eax
00002f3e	movl	%eax,0xb8(%ebp)
00002f41	movl	0xffffff68(%ebp),%eax
00002f47	movl	%eax,0xbc(%ebp)
00002f4a	movl	0xffffff6c(%ebp),%eax
00002f50	movl	%eax,0xc0(%ebp)
00002f53	movl	0xffffff70(%ebp),%eax
00002f59	movl	%eax,0xc4(%ebp)
00002f5c	movl	0xffffff74(%ebp),%eax
00002f62	movl	%eax,0xc8(%ebp)
00002f65	movl	0xffffff78(%ebp),%eax
00002f6b	movl	%eax,0xcc(%ebp)
00002f6e	movl	0xffffff7c(%ebp),%eax
00002f74	movl	%eax,0xd0(%ebp)
00002f77	movl	CTranslationManipulator::OnMousePressed(ButtonCode_t, int, int)(%ebp),%eax
00002f7a	movl	%eax,0xd4(%ebp)
00002f7d	movl	0x84(%ebp),%eax
00002f80	movl	%eax,0xd8(%ebp)
00002f83	movl	0xffffff60(%ebp),%eax
00002f89	movl	%eax,0xdc(%ebp)
00002f8c	xorl	%eax,%eax
00002f8e	movl	0xfffffe04(%ebp),%ebx
00002f94	movss	0x7c65c-0x2ce1(%ebx),%xmm0
00002f9c	movss	0x7c660-0x2ce1(%ebx),%xmm1
00002fa4	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
00002fb0	cvtsi2ss	%eax,%xmm2
00002fb4	mulss	%xmm0,%xmm2
00002fb8	addss	%xmm1,%xmm2
00002fbc	movss	%xmm2,(%edx)
00002fc0	movl	$0xc2c80000,0x04(%edx)
00002fc7	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%edx)
00002fce	movl	0xdc(%ebp),%ecx
00002fd1	movl	$0xffffffff,(%ecx)
00002fd7	movl	0xb0(%ebp),%ecx
00002fda	incl	%ecx
00002fdb	movl	%ecx,0xb0(%ebp)
00002fde	cmpl	0xac(%ebp),%ecx
00002fe1	jle	0x00002fe6
00002fe3	movl	%ecx,0xac(%ebp)
00002fe6	movl	0xfffffefc(%ebp),%ecx
00002fec	movl	0xb4(%ebp),%edx
00002fef	leal	(%edx,%ecx),%edi
00002ff2	movl	%edi,0xb4(%ebp)
00002ff5	movl	0xffffff08(%ebp),%edi
00002ffb	addl	%edi,0xb8(%ebp)
00002ffe	movl	0xffffff0c(%ebp),%edi
00003004	addl	%edi,0xdc(%ebp)
00003007	movl	0xffffff14(%ebp),%edi
0000300d	addl	%edi,0xbc(%ebp)
00003010	movl	0xffffff18(%ebp),%edi
00003016	addl	%edi,0xc0(%ebp)
00003019	movl	0xffffff1c(%ebp),%edi
0000301f	addl	%edi,0xc4(%ebp)
00003022	movl	0xffffff20(%ebp),%edi
00003028	addl	%edi,0xc8(%ebp)
0000302b	movl	0xffffff24(%ebp),%edi
00003031	addl	%edi,0xcc(%ebp)
00003034	movl	0xffffff28(%ebp),%edi
0000303a	addl	%edi,0xd0(%ebp)
0000303d	movl	0xffffff2c(%ebp),%edi
00003043	addl	%edi,0xd4(%ebp)
00003046	movl	0xffffff30(%ebp),%edi
0000304c	addl	%edi,0xd8(%ebp)
0000304f	movss	%xmm2,(%edx,%ecx)
00003054	movl	$0x42c80000,0x04(%edx,%ecx)
0000305c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%edx,%ecx)
00003064	movl	0xdc(%ebp),%ecx
00003067	movl	$0xffffffff,(%ecx)
0000306d	movl	0xb0(%ebp),%ecx
00003070	incl	%ecx
00003071	movl	%ecx,0xb0(%ebp)
00003074	cmpl	0xac(%ebp),%ecx
00003077	jle	0x0000307c
00003079	movl	%ecx,0xac(%ebp)
0000307c	movl	0xfffffefc(%ebp),%ecx
00003082	movl	0xb4(%ebp),%edx
00003085	leal	(%edx,%ecx),%edi
00003088	movl	%edi,0xb4(%ebp)
0000308b	movl	0xffffff08(%ebp),%edi
00003091	addl	%edi,0xb8(%ebp)
00003094	movl	0xffffff0c(%ebp),%edi
0000309a	addl	%edi,0xdc(%ebp)
0000309d	movl	0xffffff14(%ebp),%edi
000030a3	addl	%edi,0xbc(%ebp)
000030a6	movl	0xffffff18(%ebp),%edi
000030ac	addl	%edi,0xc0(%ebp)
000030af	movl	0xffffff1c(%ebp),%edi
000030b5	addl	%edi,0xc4(%ebp)
000030b8	movl	0xffffff20(%ebp),%edi
000030be	addl	%edi,0xc8(%ebp)
000030c1	movl	0xffffff24(%ebp),%edi
000030c7	addl	%edi,0xcc(%ebp)
000030ca	movl	0xffffff28(%ebp),%edi
000030d0	addl	%edi,0xd0(%ebp)
000030d3	movl	0xffffff2c(%ebp),%edi
000030d9	addl	%edi,0xd4(%ebp)
000030dc	movl	0xffffff30(%ebp),%edi
000030e2	addl	%edi,0xd8(%ebp)
000030e5	movl	$0xc2c80000,(%edx,%ecx)
000030ec	movss	%xmm2,0x04(%edx,%ecx)
000030f2	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%edx,%ecx)
000030fa	movl	0xdc(%ebp),%ecx
000030fd	movl	$0xffffffff,(%ecx)
00003103	movl	0xb0(%ebp),%ecx
00003106	incl	%ecx
00003107	movl	%ecx,0xb0(%ebp)
0000310a	cmpl	0xac(%ebp),%ecx
0000310d	jle	0x00003112
0000310f	movl	%ecx,0xac(%ebp)
00003112	movl	0xfffffefc(%ebp),%ecx
00003118	movl	0xb4(%ebp),%edx
0000311b	leal	(%edx,%ecx),%edi
0000311e	movl	%edi,0xb4(%ebp)
00003121	movl	0xffffff08(%ebp),%edi
00003127	addl	%edi,0xb8(%ebp)
0000312a	movl	0xffffff0c(%ebp),%edi
00003130	addl	%edi,0xdc(%ebp)
00003133	movl	0xffffff14(%ebp),%edi
00003139	addl	%edi,0xbc(%ebp)
0000313c	movl	0xffffff18(%ebp),%edi
00003142	addl	%edi,0xc0(%ebp)
00003145	movl	0xffffff1c(%ebp),%edi
0000314b	addl	%edi,0xc4(%ebp)
0000314e	movl	0xffffff20(%ebp),%edi
00003154	addl	%edi,0xc8(%ebp)
00003157	movl	0xffffff24(%ebp),%edi
0000315d	addl	%edi,0xcc(%ebp)
00003160	movl	0xffffff28(%ebp),%edi
00003166	addl	%edi,0xd0(%ebp)
00003169	movl	0xffffff2c(%ebp),%edi
0000316f	addl	%edi,0xd4(%ebp)
00003172	movl	0xffffff30(%ebp),%edi
00003178	addl	%edi,0xd8(%ebp)
0000317b	movl	$0x42c80000,(%edx,%ecx)
00003182	movss	%xmm2,0x04(%edx,%ecx)
00003188	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%edx,%ecx)
00003190	movl	0xdc(%ebp),%ecx
00003193	movl	$0xffffffff,(%ecx)
00003199	movl	0xb0(%ebp),%edx
0000319c	incl	%edx
0000319d	movl	%edx,0xb0(%ebp)
000031a0	movl	0xac(%ebp),%ecx
000031a3	cmpl	%ecx,%edx
000031a5	jle	0x000031ac
000031a7	movl	%edx,0xac(%ebp)
000031aa	movl	%edx,%ecx
000031ac	movl	0xb4(%ebp),%edx
000031af	addl	0xfffffefc(%ebp),%edx
000031b5	movl	%edx,0xb4(%ebp)
000031b8	movl	0xffffff08(%ebp),%edi
000031be	addl	%edi,0xb8(%ebp)
000031c1	movl	0xffffff0c(%ebp),%edi
000031c7	addl	%edi,0xdc(%ebp)
000031ca	movl	0xffffff14(%ebp),%edi
000031d0	addl	%edi,0xbc(%ebp)
000031d3	movl	0xffffff18(%ebp),%edi
000031d9	addl	%edi,0xc0(%ebp)
000031dc	movl	0xffffff1c(%ebp),%edi
000031e2	addl	%edi,0xc4(%ebp)
000031e5	movl	0xffffff20(%ebp),%edi
000031eb	addl	%edi,0xc8(%ebp)
000031ee	movl	0xffffff24(%ebp),%edi
000031f4	addl	%edi,0xcc(%ebp)
000031f7	movl	0xffffff28(%ebp),%edi
000031fd	addl	%edi,0xd0(%ebp)
00003200	movl	0xffffff2c(%ebp),%edi
00003206	addl	%edi,0xd4(%ebp)
00003209	movl	0xffffff30(%ebp),%edi
0000320f	addl	%edi,0xd8(%ebp)
00003212	incl	%eax
00003213	cmpl	$0x0b,%eax
00003216	jne	0x00002fb0
0000321c	testb	$0x01,0xfffffec4(%ebp)
00003223	je	0x000032ab
00003229	movl	0xfffffec0(%ebp),%eax
0000322f	leal	0xfc(%eax),%edi
00003232	cmpl	$0x04,%edi
00003235	ja	0x00003290
00003237	xorl	%edx,%edx
00003239	addl	0x000006c7(%ebx,%edi,4),%ebx
00003240	jmp	*%ebx
00003242	movl	%eax,%edi
00003244	movl	(%esi),%eax
00003246	movl	0x04(%eax),%eax
00003249	movl	%esi,(%esp)
0000324c	call	*%eax
0000324e	movl	%edi,(%esp)
00003251	calll	__Unwind_Resume
00003256	calll	std::terminate()
0000325b	movl	%eax,%edi
0000325d	leal	0xfffffe08(%ebp),%eax
00003263	movl	%eax,(%esp)
00003266	calll	CMeshBuilder::~CMeshBuilder()
0000326b	jmp	0x00003370
00003270	imull	$0x06,%ecx,%ecx
00003273	movl	%ecx,%edx
00003275	sarl	$0x1f,%edx
00003278	shrl	$0x1e,%edx
0000327b	addl	%ecx,%edx
0000327d	sarl	$0x02,%edx
00003280	jmp	0x00003292
00003282	leal	0xfa(%ecx,%ecx,2),%edx
00003286	jmp	0x00003292
00003288	leal	0xfe(%ecx,%ecx),%edx
0000328c	jmp	0x00003292
0000328e	addl	%ecx,%ecx
00003290	movl	%ecx,%edx
00003292	movl	%edx,0x08(%esp)
00003296	movl	%eax,0x04(%esp)
0000329a	leal	0xfffffec8(%ebp),%eax
000032a0	movl	%eax,(%esp)
000032a3	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
000032a8	movl	0xac(%ebp),%ecx
000032ab	movl	0xfffffebc(%ebp),%eax
000032b1	movl	0xfffffee0(%ebp),%edi
000032b7	movl	(%eax),%edx
000032b9	movl	0x58(%edx),%edx
000032bc	leal	0xfffffe08(%ebp),%ebx
000032c2	movl	%ebx,0x0c(%esp)
000032c6	movl	%edi,0x08(%esp)
000032ca	movl	%ecx,0x04(%esp)
000032ce	movl	%eax,(%esp)
000032d1	call	*%edx
000032d3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffed8(%ebp)
000032dd	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffedc(%ebp)
000032e7	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xa8(%ebp)
000032ee	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),CTranslationManipulator::OnCursorMoved(int, int)(%ebp)
000032f5	movl	$0xffffffff,0xffffff48(%ebp)
000032ff	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xfffffebc(%ebp)
00003309	movl	0xfffffe00(%ebp),%ecx
0000330f	movl	(%ecx),%eax
00003311	movl	0x34(%eax),%eax
00003314	movl	%ecx,(%esp)
00003317	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
0000331f	movl	$0xffffffff,0x04(%esp)
00003327	call	*%eax
00003329	leal	0xfffffe08(%ebp),%eax
0000332f	movl	%eax,(%esp)
00003332	calll	CMeshBuilder::~CMeshBuilder()
00003337	testl	%esi,%esi
00003339	je	0x0000334d
0000333b	movl	(%esi),%eax
0000333d	movl	0x0c(%eax),%eax
00003340	movl	%esi,(%esp)
00003343	call	*%eax
00003345	movl	(%esi),%eax
00003347	movl	%esi,(%esp)
0000334a	call	*0x04(%eax)
0000334d	addl	$0x0000020c,%esp
00003353	popl	%esi
00003354	popl	%edi
00003355	popl	%ebx
00003356	popl	%ebp
00003357	ret
00003358	movl	%eax,%edi
0000335a	movl	(%esi),%eax
0000335c	movl	0x04(%eax),%eax
0000335f	movl	%esi,(%esp)
00003362	call	*%eax
00003364	jmp	0x0000324e
00003369	calll	std::terminate()
0000336e	movl	%eax,%edi
00003370	testl	%esi,%esi
00003372	je	0x0000324e
00003378	movl	(%esi),%eax
0000337a	movl	0x0c(%eax),%eax
0000337d	movl	%esi,(%esp)
00003380	call	*%eax
00003382	movl	(%esi),%eax
00003384	movl	0x04(%eax),%eax
00003387	movl	%esi,(%esp)
0000338a	call	*%eax
0000338c	jmp	0x0000324e
00003391	calll	std::terminate()
00003396	movl	(%esi),%eax
00003398	movl	0x04(%eax),%eax
0000339b	movl	%esi,(%esp)
0000339e	call	*%eax
000033a0	jmp	0x00003391
000033a2	calll	std::terminate()
000033a7	nop
000033a8	cmpsl	(%esi),(%edi)
000033a9	addl	$0x05ad0000,%eax
000033ae	addb	%al,(%eax)
000033b0	movl	0x8f000005,%eax
000033b5	addl	$0x05b10000,%eax
000033ba	addb	%al,(%eax)
000033bc	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax)
CPotteryWheelPanel::Paint():
000033c0	pushl	%ebp
000033c1	movl	%esp,%ebp
000033c3	pushl	%ebx
000033c4	pushl	%edi
000033c5	pushl	%esi
000033c6	subl	$0x6c,%esp
000033c9	calll	0x000033ce
000033ce	popl	%edi
000033cf	movl	%edi,0xb0(%ebp)
000033d2	leal	0xec(%ebp),%eax
000033d5	movl	%eax,0x08(%esp)
000033d9	leal	0xf0(%ebp),%eax
000033dc	movl	%eax,0x04(%esp)
000033e0	movl	0x08(%ebp),%esi
000033e3	movl	%esi,(%esp)
000033e6	calll	vgui::Panel::GetSize(int&, int&)
000033eb	movl	0x85655-0x33ce(%edi),%eax
000033f1	movl	(%eax),%ecx
000033f3	movl	(%ecx),%eax
000033f5	leal	0xe4(%ebp),%edx
000033f8	movl	%edx,0x08(%esp)
000033fc	leal	0xe8(%ebp),%edx
000033ff	movl	%edx,0x04(%esp)
00003403	movl	%ecx,(%esp)
00003406	call	*0x00000098(%eax)
0000340c	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xe0(%ebp)
00003413	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0xdc(%ebp)
0000341a	leal	0xdc(%ebp),%eax
0000341d	movl	%eax,0x08(%esp)
00003421	leal	0xe0(%ebp),%eax
00003424	movl	%eax,0x04(%esp)
00003428	movl	%esi,(%esp)
0000342b	calll	vgui::Panel::GetPos(int&, int&)
00003430	movl	0xdc(%ebp),%ecx
00003433	movl	0xec(%ebp),%eax
00003436	movl	0xe0(%ebp),%edx
00003439	movl	0xf0(%ebp),%ebx
0000343c	leal	(%ebx,%edx),%edi
0000343f	movl	0xe8(%ebp),%esi
00003442	cmpl	%esi,%edi
00003444	jl	0x0000344d
00003446	subl	%edx,%esi
00003448	movl	%esi,0xf0(%ebp)
0000344b	movl	%esi,%ebx
0000344d	leal	(%eax,%ecx),%edi
00003450	movl	0xe4(%ebp),%esi
00003453	cmpl	%esi,%edi
00003455	jl	0x0000345e
00003457	subl	%edi,%esi
00003459	addl	%esi,%eax
0000345b	movl	%eax,0xec(%ebp)
0000345e	testl	%edx,%edx
00003460	movl	0x08(%ebp),%edi
00003463	jns	0x0000346a
00003465	addl	%edx,%ebx
00003467	movl	%ebx,0xf0(%ebp)
0000346a	testl	%ecx,%ecx
0000346c	jns	0x00003473
0000346e	addl	%ecx,%eax
00003470	movl	%eax,0xec(%ebp)
00003473	leal	0xd4(%ebp),%eax
00003476	movl	%eax,0x08(%esp)
0000347a	leal	0xd8(%ebp),%eax
0000347d	movl	%eax,0x04(%esp)
00003481	movl	%edi,(%esp)
00003484	calll	vgui::Panel::GetSize(int&, int&)
00003489	calll	vgui::MatSystemSurface()
0000348e	movl	(%eax),%ecx
00003490	movzbl	0x000001bc(%edi),%esi
00003497	movl	0xd8(%ebp),%edx
0000349a	movl	0xd4(%ebp),%ebx
0000349d	andl	$0x01,%esi
000034a0	movl	%esi,0x14(%esp)
000034a4	movl	%ebx,0x10(%esp)
000034a8	movl	%edx,0x0c(%esp)
000034ac	movl	%eax,(%esp)
000034af	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
000034b7	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000034bf	call	*0x00000268(%ecx)
000034c5	movl	0x000001ac(%edi),%eax
000034cb	testl	%eax,%eax
000034cd	je	0x000034e5
000034cf	movl	(%eax),%ecx
000034d1	movl	0xf0(%ebp),%edx
000034d4	movl	0xec(%ebp),%esi
000034d7	movl	%esi,0x08(%esp)
000034db	movl	%edx,0x04(%esp)
000034df	movl	%eax,(%esp)
000034e2	call	*0x20(%ecx)
000034e5	movl	0xf0(%ebp),%eax
000034e8	movl	0xec(%ebp),%ecx
000034eb	movl	%ecx,0x08(%esp)
000034ef	movl	%eax,0x04(%esp)
000034f3	movl	%edi,(%esp)
000034f6	calll	CPotteryWheelPanel::SetupRenderState(int, int)
000034fb	calll	vgui::MaterialSystem()
00003500	movl	(%eax),%ecx
00003502	movl	%eax,(%esp)
00003505	call	*0x00000188(%ecx)
0000350b	movl	%eax,%esi
0000350d	testl	%esi,%esi
0000350f	je	0x0000351b
00003511	movl	(%esi),%eax
00003513	movl	0x08(%eax),%eax
00003516	movl	%esi,(%esp)
00003519	call	*%eax
0000351b	testb	$0x01,0x000004d6(%edi)
00003522	je	0x000035c3
00003528	movl	(%edi),%eax
0000352a	movl	0x00000098(%eax),%eax
00003530	movl	%edi,(%esp)
00003533	call	*%eax
00003535	testl	%eax,%eax
00003537	je	0x000035c3
0000353d	movl	(%edi),%eax
0000353f	movl	0x00000098(%eax),%eax
00003545	movl	%edi,(%esp)
00003548	call	*%eax
0000354a	movl	(%eax),%ecx
0000354c	movl	0x000000f4(%ecx),%ecx
00003552	movl	%eax,(%esp)
00003555	call	*%ecx
00003557	movl	(%esi),%ecx
00003559	movl	0x00000124(%ecx),%ecx
0000355f	movl	%eax,%edx
00003561	shrl	$0x18,%edx
00003564	movl	%edx,0x10(%esp)
00003568	movl	%eax,%edx
0000356a	shrl	$0x10,%edx
0000356d	movzbl	%dl,%edx
00003570	movl	%edx,0x0c(%esp)
00003574	movzbl	%ah,%edx
00003577	movl	%edx,0x08(%esp)
0000357b	movzbl	%al,%eax
0000357e	movl	%eax,0x04(%esp)
00003582	movl	%esi,(%esp)
00003585	call	*%ecx
00003587	jmp	0x00003600
00003589	movl	%eax,%edi
0000358b	movl	(%esi),%eax
0000358d	movl	0x04(%eax),%eax
00003590	movl	%esi,(%esp)
00003593	call	*%eax
00003595	movl	%edi,(%esp)
00003598	calll	__Unwind_Resume
0000359d	calll	std::terminate()
000035a2	movl	%eax,%edi
000035a4	testl	%esi,%esi
000035a6	je	0x00003595
000035a8	movl	(%esi),%eax
000035aa	movl	0x0c(%eax),%eax
000035ad	movl	%esi,(%esp)
000035b0	call	*%eax
000035b2	movl	(%esi),%eax
000035b4	movl	0x04(%eax),%eax
000035b7	movl	%esi,(%esp)
000035ba	call	*%eax
000035bc	jmp	0x00003595
000035be	calll	std::terminate()
000035c3	movl	(%esi),%eax
000035c5	movl	0x00000124(%eax),%eax
000035cb	movl	%eax,0xac(%ebp)
000035ce	movzbl	0x000004a8(%edi),%ecx
000035d5	movzbl	0x000004a9(%edi),%edx
000035dc	movzbl	0x000004aa(%edi),%ebx
000035e3	movzbl	0x000004ab(%edi),%eax
000035ea	movl	%eax,0x10(%esp)
000035ee	movl	%ebx,0x0c(%esp)
000035f2	movl	%edx,0x08(%esp)
000035f6	movl	%ecx,0x04(%esp)
000035fa	movl	%esi,(%esp)
000035fd	call	*0xac(%ebp)
00003600	movl	(%esi),%eax
00003602	movl	0x30(%eax),%eax
00003605	movzbl	0x000001bc(%edi),%ecx
0000360c	andl	$0x01,%ecx
0000360f	movl	%ecx,0x04(%esp)
00003613	movl	%esi,(%esp)
00003616	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x0c(%esp)
0000361e	movl	$0x00000001,0x08(%esp)
00003626	call	*%eax
00003628	movl	(%esi),%eax
0000362a	movl	CTranslationManipulator::OnCursorMoved(int, int)(%eax),%eax
00003630	movl	%esi,(%esp)
00003633	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
0000363b	call	*%eax
0000363d	movl	(%esi),%eax
0000363f	movl	0x000001cc(%eax),%eax
00003645	movl	%esi,(%esp)
00003648	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00003650	movl	$0x0000000a,0x04(%esp)
00003658	call	*%eax
0000365a	testb	$0x01,0x000004d4(%edi)
00003661	je	0x000036f9
00003667	calll	vgui::MaterialSystemHardwareConfig()
0000366c	movl	(%eax),%ecx
0000366e	movl	0x000000d8(%ecx),%ecx
00003674	movl	%eax,(%esp)
00003677	call	*%ecx
00003679	leal	0x000001c0(%edi),%edx
0000367f	leal	0x000001c4(%edi),%ecx
00003685	testl	%eax,%eax
00003687	cmovel	%edx,%ecx
0000368a	movl	(%ecx),%eax
0000368c	movl	$0xc2c80000,0xc8(%ebp)
00003693	movl	$0xc2c80000,0xcc(%ebp)
0000369a	movl	$0xc2c80000,0xd0(%ebp)
000036a1	movl	$0x42c80000,0xb8(%ebp)
000036a8	movl	$0x42c80000,0xbc(%ebp)
000036af	movl	$0x42c80000,0xc0(%ebp)
000036b6	movl	$0xffffffff,0xb4(%ebp)
000036bd	movl	%eax,0x14(%esp)
000036c1	movl	0xb4(%ebp),%eax
000036c4	movl	%eax,0x10(%esp)
000036c8	leal	0xb8(%ebp),%eax
000036cb	movl	%eax,0x0c(%esp)
000036cf	leal	0xc8(%ebp),%eax
000036d2	movl	%eax,0x08(%esp)
000036d6	movl	0xb0(%ebp),%eax
000036d9	movl	0x85659-0x33ce(%eax),%eax
000036df	movl	%eax,0x04(%esp)
000036e3	leal	CZoomManipulator::CZoomManipulator(float*)(%edi),%eax
000036e9	movl	%eax,(%esp)
000036ec	movl	$0x00000001,0x18(%esp)
000036f4	calll	RenderBox(Vector const&, QAngle const&, Vector const&, Vector const&, Color, IMaterial*, bool)
000036f9	movl	(%edi),%eax
000036fb	movl	0x000003ac(%eax),%eax
00003701	movl	%edi,(%esp)
00003704	call	*%eax
00003706	movl	(%esi),%eax
00003708	movl	CTranslationManipulator::OnCursorMoved(int, int)(%eax),%eax
0000370e	movl	%esi,(%esp)
00003711	movl	$0x00000001,0x04(%esp)
00003719	call	*%eax
0000371b	calll	vgui::MatSystemSurface()
00003720	movl	(%eax),%ecx
00003722	movl	0x0000026c(%ecx),%ecx
00003728	movl	%eax,(%esp)
0000372b	call	*%ecx
0000372d	testl	%esi,%esi
0000372f	je	0x00003743
00003731	movl	(%esi),%eax
00003733	movl	0x0c(%eax),%eax
00003736	movl	%esi,(%esp)
00003739	call	*%eax
0000373b	movl	(%esi),%eax
0000373d	movl	%esi,(%esp)
00003740	call	*0x04(%eax)
00003743	addl	$0x6c,%esp
00003746	popl	%esi
00003747	popl	%edi
00003748	popl	%ebx
00003749	popl	%ebp
0000374a	ret
0000374b	movl	%eax,%edi
0000374d	movl	(%esi),%eax
0000374f	movl	0x04(%eax),%eax
00003752	movl	%esi,(%esp)
00003755	call	*%eax
00003757	jmp	0x00003595
0000375c	calll	std::terminate()
00003761	calll	std::terminate()
00003766	movl	(%esi),%eax
00003768	movl	0x04(%eax),%eax
0000376b	movl	%esi,(%esp)
0000376e	call	*%eax
00003770	jmp	0x00003761
00003772	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnTick():
00003780	pushl	%ebp
00003781	movl	%esp,%ebp
00003783	pushl	%ebx
00003784	pushl	%edi
00003785	pushl	%esi
00003786	subl	$0x7c,%esp
00003789	movl	0x08(%ebp),%esi
0000378c	movl	%esi,(%esp)
0000378f	calll	vgui::Panel::OnTick()
00003794	movl	0x000001ac(%esi),%eax
0000379a	testl	%eax,%eax
0000379c	je	0x00003810
0000379e	movl	(%eax),%ecx
000037a0	movl	%eax,(%esp)
000037a3	call	*0x0c(%ecx)
000037a6	leal	0xc0(%ebp),%ebx
000037a9	movl	%ebx,(%esp)
000037ac	calll	SetIdentityMatrix(matrix3x4_t&)
000037b1	movl	%ebx,0x08(%esp)
000037b5	leal	0x000004ac(%esi),%eax
000037bb	movl	%eax,(%esp)
000037be	movl	$0x00000003,0x04(%esp)
000037c6	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
000037cb	leal	0x90(%ebp),%edi
000037ce	movl	%edi,0x08(%esp)
000037d2	movl	%ebx,0x04(%esp)
000037d6	leal	0x000001f4(%esi),%eax
000037dc	movl	%eax,(%esp)
000037df	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
000037e4	leal	0x000001dc(%esi),%eax
000037ea	movl	%eax,0x04(%esp)
000037ee	movl	%edi,(%esp)
000037f1	calll	MatrixAngles(matrix3x4_t const&, float*)
000037f6	addl	CZoomManipulator::CZoomManipulator(float*),%esi
000037fc	movl	%esi,0x08(%esp)
00003800	movl	%edi,(%esp)
00003803	movl	$0x00000003,0x04(%esp)
0000380b	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
00003810	addl	$0x7c,%esp
00003813	popl	%esi
00003814	popl	%edi
00003815	popl	%ebx
00003816	popl	%ebp
00003817	ret
00003818	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnKeyCodePressed(ButtonCode_t):
00003820	pushl	%ebp
00003821	movl	%esp,%ebp
00003823	pushl	%esi
00003824	subl	$0x14,%esp
00003827	movl	0x08(%ebp),%esi
0000382a	movl	0x000001ac(%esi),%eax
00003830	testl	%eax,%eax
00003832	je	0x000038ad
00003834	movl	0x0c(%ebp),%ecx
00003837	leal	0xad(%ecx),%edx
0000383a	cmpl	$0x02,%edx
0000383d	jb	0x00003878
0000383f	addl	$0xb1,%ecx
00003842	cmpl	$0x01,%ecx
00003845	ja	0x000038ad
00003847	movl	(%eax),%ecx
00003849	movl	%eax,(%esp)
0000384c	call	*0x04(%ecx)
0000384f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00003859	movl	(%esi),%eax
0000385b	movl	%esi,(%esp)
0000385e	movl	$0xffffffff,0x0c(%esp)
00003866	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
0000386e	movl	$0x00000001,0x04(%esp)
00003876	jmp	0x000038a7
00003878	movl	(%eax),%ecx
0000387a	movl	%eax,(%esp)
0000387d	call	*0x04(%ecx)
00003880	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
0000388a	movl	(%esi),%eax
0000388c	movl	%esi,(%esp)
0000388f	movl	$0xffffffff,0x0c(%esp)
00003897	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
0000389f	movl	$0x00000003,0x04(%esp)
000038a7	call	*0x000003b0(%eax)
000038ad	addl	$0x14,%esp
000038b0	popl	%esi
000038b1	popl	%ebp
000038b2	jmp	vgui::EditablePanel::OnKeyCodePressed(ButtonCode_t)
000038b7	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::AcceptManipulation(bool):
000038c0	pushl	%ebp
000038c1	movl	%esp,%ebp
000038c3	pushl	%ebx
000038c4	pushl	%edi
000038c5	pushl	%esi
000038c6	subl	$0x0c,%esp
000038c9	calll	0x000038ce
000038ce	popl	%edi
000038cf	movl	0x08(%ebp),%esi
000038d2	movl	0x000001ac(%esi),%eax
000038d8	testl	%eax,%eax
000038da	je	0x00003949
000038dc	movb	0x0c(%ebp),%bl
000038df	movl	(%eax),%ecx
000038e1	movl	%eax,(%esp)
000038e4	call	*0x04(%ecx)
000038e7	cmpb	$0x01,%bl
000038ea	jne	0x0000393f
000038ec	movl	$0xffffffff,0x000004c8(%esi)
000038f6	movl	0x85651-0x38ce(%edi),%edi
000038fc	movl	(%edi),%ecx
000038fe	movl	(%ecx),%eax
00003900	movl	%ecx,(%esp)
00003903	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
0000390b	call	*0x0c(%eax)
0000390e	movl	(%esi),%eax
00003910	movl	%esi,(%esp)
00003913	movl	$0x00000002,0x04(%esp)
0000391b	call	*0x000000fc(%eax)
00003921	movl	(%edi),%ecx
00003923	movl	(%ecx),%eax
00003925	movl	0x000001b0(%esi),%edx
0000392b	movl	0x000001b4(%esi),%edi
00003931	movl	%edi,0x08(%esp)
00003935	movl	%edx,0x04(%esp)
00003939	movl	%ecx,(%esp)
0000393c	call	*0x20(%eax)
0000393f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00003949	addl	$0x0c,%esp
0000394c	popl	%esi
0000394d	popl	%edi
0000394e	popl	%ebx
0000394f	popl	%ebp
00003950	ret
00003951	nopl	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnKeyCodeReleased(ButtonCode_t):
00003960	pushl	%ebp
00003961	movl	%esp,%ebp
00003963	pushl	%esi
00003964	subl	$0x14,%esp
00003967	movl	0x08(%ebp),%esi
0000396a	movl	0x000001ac(%esi),%eax
00003970	testl	%eax,%eax
00003972	je	0x00003a18
00003978	movl	0x0c(%ebp),%ecx
0000397b	addl	$0xb1,%ecx
0000397e	cmpl	$0x05,%ecx
00003981	ja	0x00003a18
00003987	movl	$0x00000033,%edx
0000398c	btl	%ecx,%edx
0000398f	jae	0x00003a18
00003995	movl	(%eax),%ecx
00003997	movl	%eax,(%esp)
0000399a	call	*0x04(%ecx)
0000399d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
000039a7	movl	0x000004c8(%esi),%eax
000039ad	cmpl	$0x6c,%eax
000039b0	je	0x000039f5
000039b2	cmpl	$0x6d,%eax
000039b5	je	0x000039d6
000039b7	movl	(%esi),%eax
000039b9	movl	%esi,(%esp)
000039bc	movl	$0xffffffff,0x0c(%esp)
000039c4	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
000039cc	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000039d4	jmp	0x00003a12
000039d6	movl	(%esi),%eax
000039d8	movl	%esi,(%esp)
000039db	movl	$0xffffffff,0x0c(%esp)
000039e3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
000039eb	movl	$0x00000001,0x04(%esp)
000039f3	jmp	0x00003a12
000039f5	movl	(%esi),%eax
000039f7	movl	%esi,(%esp)
000039fa	movl	$0xffffffff,0x0c(%esp)
00003a02	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x08(%esp)
00003a0a	movl	$0x00000002,0x04(%esp)
00003a12	call	*0x000003b0(%eax)
00003a18	addl	$0x14,%esp
00003a1b	popl	%esi
00003a1c	popl	%ebp
00003a1d	jmp	vgui::Panel::OnKeyCodeReleased(ButtonCode_t)
00003a22	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnMousePressed(ButtonCode_t):
00003a30	pushl	%ebp
00003a31	movl	%esp,%ebp
00003a33	pushl	%ebx
00003a34	pushl	%edi
00003a35	pushl	%esi
00003a36	subl	$0x1c,%esp
00003a39	calll	0x00003a3e
00003a3e	popl	%ebx
00003a3f	movl	0x08(%ebp),%esi
00003a42	cmpl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00003a49	jne	0x00003b68
00003a4f	movl	0x0c(%ebp),%edi
00003a52	movl	(%esi),%eax
00003a54	movl	%esi,(%esp)
00003a57	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00003a5f	call	*0x30(%eax)
00003a62	movl	0x85651-0x3a3e(%ebx),%ebx
00003a68	movl	(%ebx),%ecx
00003a6a	movl	(%ecx),%eax
00003a6c	movl	%ecx,(%esp)
00003a6f	movl	$0x00000050,0x04(%esp)
00003a77	call	*0x44(%eax)
00003a7a	testb	%al,%al
00003a7c	jne	0x00003a94
00003a7e	movl	(%ebx),%ecx
00003a80	movl	(%ecx),%eax
00003a82	movl	%ecx,(%esp)
00003a85	movl	$0x0000004f,0x04(%esp)
00003a8d	call	*0x44(%eax)
00003a90	cmpb	$0x01,%al
00003a92	jne	0x00003ab2
00003a94	movl	(%esi),%eax
00003a96	movl	%edi,0x0c(%esp)
00003a9a	movl	%esi,(%esp)
00003a9d	movl	$0x00000001,0x08(%esp)
00003aa5	movl	$0x00000001,0x04(%esp)
00003aad	jmp	0x00003b56
00003ab2	movl	(%ebx),%ecx
00003ab4	movl	(%ecx),%eax
00003ab6	movl	%ecx,(%esp)
00003ab9	movl	$0x00000054,0x04(%esp)
00003ac1	call	*0x44(%eax)
00003ac4	testb	%al,%al
00003ac6	jne	0x00003ade
00003ac8	movl	(%ebx),%ecx
00003aca	movl	(%ecx),%eax
00003acc	movl	%ecx,(%esp)
00003acf	movl	$0x00000053,0x04(%esp)
00003ad7	call	*0x44(%eax)
00003ada	cmpb	$0x01,%al
00003adc	jne	0x00003af9
00003ade	movl	(%esi),%eax
00003ae0	movl	%edi,0x0c(%esp)
00003ae4	movl	%esi,(%esp)
00003ae7	movl	$0x00000001,0x08(%esp)
00003aef	movl	$0x00000003,0x04(%esp)
00003af7	jmp	0x00003b56
00003af9	cmpl	$0x6d,%edi
00003afc	je	0x00003b27
00003afe	cmpl	$0x6c,%edi
00003b01	je	0x00003b39
00003b03	cmpl	$0x6b,%edi
00003b06	jne	0x00003b5c
00003b08	movl	(%esi),%eax
00003b0a	movl	%esi,(%esp)
00003b0d	movl	$0x0000006b,0x0c(%esp)
00003b15	movl	$0x00000001,0x08(%esp)
00003b1d	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00003b25	jmp	0x00003b56
00003b27	movl	(%esi),%eax
00003b29	movl	%esi,(%esp)
00003b2c	movl	$0x0000006d,0x0c(%esp)
00003b34	jmp	0x00003a9d
00003b39	movl	(%esi),%eax
00003b3b	movl	%esi,(%esp)
00003b3e	movl	$0x0000006c,0x0c(%esp)
00003b46	movl	$0x00000001,0x08(%esp)
00003b4e	movl	$0x00000002,0x04(%esp)
00003b56	call	*0x000003b0(%eax)
00003b5c	addl	$0x1c,%esp
00003b5f	popl	%esi
00003b60	popl	%edi
00003b61	popl	%ebx
00003b62	popl	%ebp
00003b63	jmp	vgui::Panel::OnMousePressed(ButtonCode_t)
00003b68	addl	$0x1c,%esp
00003b6b	popl	%esi
00003b6c	popl	%edi
00003b6d	popl	%ebx
00003b6e	popl	%ebp
00003b6f	ret
CPotteryWheelPanel::OnMouseReleased(ButtonCode_t):
00003b70	pushl	%ebp
00003b71	movl	%esp,%ebp
00003b73	pushl	%ebx
00003b74	pushl	%edi
00003b75	pushl	%esi
00003b76	subl	$0x1c,%esp
00003b79	calll	0x00003b7e
00003b7e	popl	%eax
00003b7f	movl	0x85651-0x3b7e(%eax),%edi
00003b85	movl	(%edi),%ecx
00003b87	movl	(%ecx),%eax
00003b89	leal	0xec(%ebp),%esi
00003b8c	movl	%esi,0x08(%esp)
00003b90	leal	0xf0(%ebp),%ebx
00003b93	movl	%ebx,0x04(%esp)
00003b97	movl	%ecx,(%esp)
00003b9a	call	*0x24(%eax)
00003b9d	movl	%esi,0x08(%esp)
00003ba1	movl	%ebx,0x04(%esp)
00003ba5	movl	0x08(%ebp),%esi
00003ba8	movl	%esi,(%esp)
00003bab	calll	vgui::Panel::ScreenToLocal(int&, int&)
00003bb0	movl	0x000001ac(%esi),%eax
00003bb6	testl	%eax,%eax
00003bb8	je	0x00003c19
00003bba	movl	(%eax),%ecx
00003bbc	movl	%eax,(%esp)
00003bbf	call	*0x04(%ecx)
00003bc2	movl	$0xffffffff,0x000004c8(%esi)
00003bcc	movl	(%edi),%ecx
00003bce	movl	(%ecx),%eax
00003bd0	movl	%ecx,(%esp)
00003bd3	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00003bdb	call	*0x0c(%eax)
00003bde	movl	(%esi),%eax
00003be0	movl	%esi,(%esp)
00003be3	movl	$0x00000002,0x04(%esp)
00003beb	call	*0x000000fc(%eax)
00003bf1	movl	(%edi),%ecx
00003bf3	movl	(%ecx),%eax
00003bf5	movl	0x000001b0(%esi),%edx
00003bfb	movl	0x000001b4(%esi),%edi
00003c01	movl	%edi,0x08(%esp)
00003c05	movl	%edx,0x04(%esp)
00003c09	movl	%ecx,(%esp)
00003c0c	call	*0x20(%eax)
00003c0f	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00003c19	movl	0x0c(%ebp),%eax
00003c1c	movl	%eax,0x04(%esp)
00003c20	movl	%esi,(%esp)
00003c23	calll	vgui::Panel::OnMouseReleased(ButtonCode_t)
00003c28	addl	$0x1c,%esp
00003c2b	popl	%esi
00003c2c	popl	%edi
00003c2d	popl	%ebx
00003c2e	popl	%ebp
00003c2f	ret
CPotteryWheelPanel::OnCursorMoved(int, int):
00003c30	pushl	%ebp
00003c31	movl	%esp,%ebp
00003c33	pushl	%ebx
00003c34	pushl	%edi
00003c35	pushl	%esi
00003c36	subl	$0x1c,%esp
00003c39	movl	0x0c(%ebp),%edi
00003c3c	movl	%edi,0xf0(%ebp)
00003c3f	movl	0x10(%ebp),%ebx
00003c42	movl	%ebx,0xec(%ebp)
00003c45	movl	0x08(%ebp),%esi
00003c48	cmpl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00003c4f	je	0x00003c8f
00003c51	leal	0xec(%ebp),%eax
00003c54	movl	%eax,0x08(%esp)
00003c58	leal	0xf0(%ebp),%eax
00003c5b	movl	%eax,0x04(%esp)
00003c5f	movl	%esi,(%esp)
00003c62	calll	CPotteryWheelPanel::WarpMouse(int&, int&)
00003c67	testb	%al,%al
00003c69	jne	0x00003c73
00003c6b	movl	0xec(%ebp),%ebx
00003c6e	movl	0xf0(%ebp),%edi
00003c71	jmp	0x00003c8f
00003c73	movl	0x000001ac(%esi),%ecx
00003c79	movl	(%ecx),%eax
00003c7b	movl	0xf0(%ebp),%edi
00003c7e	movl	0xec(%ebp),%ebx
00003c81	movl	%ebx,0x08(%esp)
00003c85	movl	%edi,0x04(%esp)
00003c89	movl	%ecx,(%esp)
00003c8c	call	*0x10(%eax)
00003c8f	movl	%ebx,0x08(%esp)
00003c93	movl	%edi,0x04(%esp)
00003c97	movl	%esi,(%esp)
00003c9a	calll	vgui::Panel::OnCursorMoved(int, int)
00003c9f	addl	$0x1c,%esp
00003ca2	popl	%esi
00003ca3	popl	%edi
00003ca4	popl	%ebx
00003ca5	popl	%ebp
00003ca6	ret
00003ca7	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::WarpMouse(int&, int&):
00003cb0	pushl	%ebp
00003cb1	movl	%esp,%ebp
00003cb3	pushl	%ebx
00003cb4	pushl	%edi
00003cb5	pushl	%esi
00003cb6	subl	$0x2c,%esp
00003cb9	calll	0x00003cbe
00003cbe	popl	%eax
00003cbf	movl	%eax,0xe0(%ebp)
00003cc2	movl	0x85651-0x3cbe(%eax),%ebx
00003cc8	movl	(%ebx),%ecx
00003cca	movl	(%ecx),%eax
00003ccc	movl	%ecx,(%esp)
00003ccf	call	*0x000000fc(%eax)
00003cd5	movl	%eax,%esi
00003cd7	movl	0x08(%ebp),%edi
00003cda	movl	(%edi),%eax
00003cdc	movl	%edi,(%esp)
00003cdf	call	(%eax)
00003ce1	cmpl	%eax,%esi
00003ce3	je	0x00003d3a
00003ce5	movl	(%ebx),%ecx
00003ce7	movl	(%ecx),%eax
00003ce9	leal	0x000001b4(%edi),%edx
00003cef	movl	%edx,0x08(%esp)
00003cf3	leal	0x000001b0(%edi),%edx
00003cf9	movl	%edx,0x04(%esp)
00003cfd	movl	%ecx,(%esp)
00003d00	call	*0x24(%eax)
00003d03	movl	(%edi),%eax
00003d05	movl	%edi,(%esp)
00003d08	movl	$0x00000001,0x04(%esp)
00003d10	call	*0x000000fc(%eax)
00003d16	movl	(%ebx),%esi
00003d18	movl	(%esi),%eax
00003d1a	movl	0x000000d8(%eax),%ebx
00003d20	movl	(%edi),%eax
00003d22	movl	%edi,(%esp)
00003d25	call	(%eax)
00003d27	movl	0x000004c8(%edi),%ecx
00003d2d	movl	%ecx,0x08(%esp)
00003d31	movl	%eax,0x04(%esp)
00003d35	movl	%esi,(%esp)
00003d38	call	*%ebx
00003d3a	leal	0xec(%ebp),%eax
00003d3d	movl	%eax,0x08(%esp)
00003d41	leal	0xf0(%ebp),%eax
00003d44	movl	%eax,0x04(%esp)
00003d48	movl	%edi,(%esp)
00003d4b	calll	vgui::Panel::GetSize(int&, int&)
00003d50	movl	0xec(%ebp),%eax
00003d53	movl	%eax,%esi
00003d55	shrl	$0x1f,%esi
00003d58	addl	%eax,%esi
00003d5a	sarl	%esi
00003d5c	movl	0xf0(%ebp),%eax
00003d5f	movl	%eax,%ebx
00003d61	shrl	$0x1f,%ebx
00003d64	addl	%eax,%ebx
00003d66	sarl	%ebx
00003d68	movl	0x0c(%ebp),%eax
00003d6b	cmpl	%ebx,(%eax)
00003d6d	jne	0x00003d7c
00003d6f	xorb	%al,%al
00003d71	movl	0x10(%ebp),%ecx
00003d74	cmpl	%esi,(%ecx)
00003d76	je	0x00003dff
00003d7c	movl	%ebx,0xe8(%ebp)
00003d7f	movl	%esi,0xe4(%ebp)
00003d82	leal	0xe4(%ebp),%eax
00003d85	movl	%eax,0x08(%esp)
00003d89	leal	0xe8(%ebp),%eax
00003d8c	movl	%eax,0x04(%esp)
00003d90	movl	%edi,(%esp)
00003d93	calll	vgui::Panel::LocalToScreen(int&, int&)
00003d98	movl	0xe0(%ebp),%eax
00003d9b	movl	0x8563d-0x3cbe(%eax),%eax
00003da1	movl	(%eax),%ecx
00003da3	movl	(%ecx),%eax
00003da5	movl	%eax,0xe0(%ebp)
00003da8	movl	0xe8(%ebp),%edx
00003dab	movl	0xe4(%ebp),%eax
00003dae	movl	%eax,0x08(%esp)
00003db2	movl	%edx,0x04(%esp)
00003db6	movl	%ecx,(%esp)
00003db9	movl	0xe0(%ebp),%eax
00003dbc	call	*0x00000090(%eax)
00003dc2	movl	0x0c(%ebp),%eax
00003dc5	movl	(%eax),%eax
00003dc7	movl	0x000004cc(%edi),%edx
00003dcd	addl	%eax,%edx
00003dcf	movl	0x10(%ebp),%ecx
00003dd2	movl	(%ecx),%ecx
00003dd4	movl	%ecx,0xe0(%ebp)
00003dd7	movl	0x0c(%ebp),%ecx
00003dda	movl	%edx,(%ecx)
00003ddc	movl	0x08(%ebp),%ecx
00003ddf	movl	0x000004d0(%ecx),%edx
00003de5	movl	0x10(%ebp),%edi
00003de8	addl	%edx,(%edi)
00003dea	subl	%ebx,%eax
00003dec	addl	%eax,0x000004cc(%ecx)
00003df2	movl	0xe0(%ebp),%eax
00003df5	subl	%esi,%eax
00003df7	addl	%eax,0x000004d0(%ecx)
00003dfd	movb	$0x01,%al
00003dff	movzbl	%al,%eax
00003e02	addl	$0x2c,%esp
00003e05	popl	%esi
00003e06	popl	%edi
00003e07	popl	%ebx
00003e08	popl	%ebp
00003e09	ret
00003e0a	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnMouseWheeled(int):
00003e10	pushl	%ebp
00003e11	movl	%esp,%ebp
00003e13	subl	$0x08,%esp
00003e16	movl	0x08(%ebp),%eax
00003e19	movl	0x000001ac(%eax),%eax
00003e1f	testl	%eax,%eax
00003e21	je	0x00003e32
00003e23	movl	0x0c(%ebp),%edx
00003e26	movl	(%eax),%ecx
00003e28	movl	%edx,0x04(%esp)
00003e2c	movl	%eax,(%esp)
00003e2f	call	*0x1c(%ecx)
00003e32	addl	$0x08,%esp
00003e35	popl	%ebp
00003e36	jmp	vgui::Panel::OnMouseWheeled(int)
00003e3b	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::EnterManipulationMode(CPotteryWheelPanel::ManipulationMode_t, bool, ButtonCode_t):
00003e40	pushl	%ebp
00003e41	movl	%esp,%ebp
00003e43	pushl	%ebx
00003e44	pushl	%edi
00003e45	pushl	%esi
00003e46	subl	$0x2c,%esp
00003e49	calll	0x00003e4e
00003e4e	popl	%ecx
00003e4f	movl	0x14(%ebp),%edi
00003e52	movl	0x0c(%ebp),%eax
00003e55	movl	0x08(%ebp),%ebx
00003e58	cmpl	$0x03,%eax
00003e5b	ja	0x00003e68
00003e5d	movl	0x0000017a(%ecx,%eax,4),%eax
00003e64	addl	%ecx,%eax
00003e66	jmp	*%eax
00003e68	movl	0x000001ac(%ebx),%eax
00003e6e	jmp	0x00003e94
00003e70	movl	0x000004b8(%ebx),%eax
00003e76	jmp	0x00003e8e
00003e78	movl	0x000004bc(%ebx),%eax
00003e7e	jmp	0x00003e8e
00003e80	movl	0x000004c0(%ebx),%eax
00003e86	jmp	0x00003e8e
00003e88	movl	0x000004c4(%ebx),%eax
00003e8e	movl	%eax,0x000001ac(%ebx)
00003e94	movl	%ecx,0xdc(%ebp)
00003e97	testl	%eax,%eax
00003e99	je	0x00003fbd
00003e9f	movl	(%eax),%ecx
00003ea1	movl	%eax,(%esp)
00003ea4	call	(%ecx)
00003ea6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004d0(%ebx)
00003eb0	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000004cc(%ebx)
00003eba	leal	0xec(%ebp),%eax
00003ebd	movl	%eax,0x08(%esp)
00003ec1	leal	0xf0(%ebp),%eax
00003ec4	movl	%eax,0x04(%esp)
00003ec8	movl	%ebx,(%esp)
00003ecb	calll	vgui::Panel::GetSize(int&, int&)
00003ed0	movl	0xec(%ebp),%eax
00003ed3	movl	%eax,%ecx
00003ed5	shrl	$0x1f,%ecx
00003ed8	addl	%eax,%ecx
00003eda	sarl	%ecx
00003edc	movl	%ecx,0xe0(%ebp)
00003edf	movl	0xf0(%ebp),%eax
00003ee2	movl	%eax,%esi
00003ee4	shrl	$0x1f,%esi
00003ee7	addl	%eax,%esi
00003ee9	sarl	%esi
00003eeb	cmpb	$0x01,0x10(%ebp)
00003eef	jne	0x00003fa0
00003ef5	movl	0xdc(%ebp),%eax
00003ef8	movl	0x85651-0x3e4e(%eax),%eax
00003efe	movl	%eax,0xdc(%ebp)
00003f01	movl	(%eax),%ecx
00003f03	movl	(%ecx),%eax
00003f05	leal	0x000001b4(%ebx),%edx
00003f0b	movl	%edx,0x08(%esp)
00003f0f	leal	0x000001b0(%ebx),%edx
00003f15	movl	%edx,0x04(%esp)
00003f19	movl	%ecx,(%esp)
00003f1c	call	*0x24(%eax)
00003f1f	movl	%edi,0x000004c8(%ebx)
00003f25	movl	(%ebx),%eax
00003f27	movl	%ebx,(%esp)
00003f2a	movl	$0x00000001,0x04(%esp)
00003f32	call	*0x000000fc(%eax)
00003f38	movl	0xdc(%ebp),%eax
00003f3b	movl	(%eax),%edi
00003f3d	movl	(%edi),%eax
00003f3f	movl	0x000000d8(%eax),%eax
00003f45	movl	%eax,0xd8(%ebp)
00003f48	movl	(%ebx),%eax
00003f4a	movl	%ebx,(%esp)
00003f4d	call	(%eax)
00003f4f	movl	0x000004c8(%ebx),%ecx
00003f55	movl	%ecx,0x08(%esp)
00003f59	movl	%eax,0x04(%esp)
00003f5d	movl	%edi,(%esp)
00003f60	call	*0xd8(%ebp)
00003f63	movl	%esi,0xe8(%ebp)
00003f66	movl	0xe0(%ebp),%eax
00003f69	movl	%eax,0xe4(%ebp)
00003f6c	leal	0xe4(%ebp),%eax
00003f6f	movl	%eax,0x08(%esp)
00003f73	leal	0xe8(%ebp),%eax
00003f76	movl	%eax,0x04(%esp)
00003f7a	movl	%ebx,(%esp)
00003f7d	calll	vgui::Panel::LocalToScreen(int&, int&)
00003f82	movl	0xdc(%ebp),%eax
00003f85	movl	(%eax),%ecx
00003f87	movl	(%ecx),%eax
00003f89	movl	0xe8(%ebp),%edx
00003f8c	movl	0xe4(%ebp),%edi
00003f8f	movl	%edi,0x08(%esp)
00003f93	movl	0x14(%ebp),%edi
00003f96	movl	%edx,0x04(%esp)
00003f9a	movl	%ecx,(%esp)
00003f9d	call	*0x20(%eax)
00003fa0	movl	0x000001ac(%ebx),%ecx
00003fa6	movl	(%ecx),%eax
00003fa8	movl	0xe0(%ebp),%edx
00003fab	movl	%edx,0x0c(%esp)
00003faf	movl	%esi,0x08(%esp)
00003fb3	movl	%edi,0x04(%esp)
00003fb7	movl	%ecx,(%esp)
00003fba	call	*0x14(%eax)
00003fbd	addl	$0x2c,%esp
00003fc0	popl	%esi
00003fc1	popl	%edi
00003fc2	popl	%ebx
00003fc3	popl	%ebp
00003fc4	ret
00003fc5	nopl	(%eax)
00003fc8	andb	(%eax),%al
00003fca	addb	%al,(%eax)
00003fcc	subb	(%eax),%al
00003fce	addb	%al,(%eax)
00003fd0	xorb	(%eax),%al
00003fd2	addb	%al,(%eax)
00003fd4	cmpb	(%eax),%al
00003fd6	addb	%al,(%eax)
00003fd8	nopl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::EnableMouseCapture(bool, ButtonCode_t):
00003fe0	pushl	%ebp
00003fe1	movl	%esp,%ebp
00003fe3	pushl	%ebx
00003fe4	pushl	%edi
00003fe5	pushl	%esi
00003fe6	subl	$0x0c,%esp
00003fe9	calll	0x00003fee
00003fee	popl	%edi
00003fef	movl	0x08(%ebp),%esi
00003ff2	movb	0x0c(%ebp),%al
00003ff5	testb	%al,%al
00003ff7	je	0x00004041
00003ff9	movl	0x10(%ebp),%eax
00003ffc	movl	%eax,0x000004c8(%esi)
00004002	movl	(%esi),%eax
00004004	movl	%esi,(%esp)
00004007	movl	$0x00000001,0x04(%esp)
0000400f	call	*0x000000fc(%eax)
00004015	movl	0x85651-0x3fee(%edi),%eax
0000401b	movl	(%eax),%edi
0000401d	movl	(%edi),%eax
0000401f	movl	0x000000d8(%eax),%ebx
00004025	movl	(%esi),%eax
00004027	movl	%esi,(%esp)
0000402a	call	(%eax)
0000402c	movl	0x000004c8(%esi),%ecx
00004032	movl	%ecx,0x08(%esp)
00004036	movl	%eax,0x04(%esp)
0000403a	movl	%edi,(%esp)
0000403d	call	*%ebx
0000403f	jmp	0x00004076
00004041	movl	$0xffffffff,0x000004c8(%esi)
0000404b	movl	0x85651-0x3fee(%edi),%eax
00004051	movl	(%eax),%ecx
00004053	movl	(%ecx),%eax
00004055	movl	%ecx,(%esp)
00004058	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
00004060	call	*0x0c(%eax)
00004063	movl	(%esi),%eax
00004065	movl	%esi,(%esp)
00004068	movl	$0x00000002,0x04(%esp)
00004070	call	*0x000000fc(%eax)
00004076	addl	$0x0c,%esp
00004079	popl	%esi
0000407a	popl	%edi
0000407b	popl	%ebx
0000407c	popl	%ebp
0000407d	ret
0000407e	nop
CPotteryWheelPanel::CancelManipulation():
00004080	pushl	%ebp
00004081	movl	%esp,%ebp
00004083	pushl	%edi
00004084	pushl	%esi
00004085	subl	$0x10,%esp
00004088	calll	0x0000408d
0000408d	popl	%edi
0000408e	movl	0x08(%ebp),%esi
00004091	movl	0x000001ac(%esi),%eax
00004097	testl	%eax,%eax
00004099	je	0x00004100
0000409b	movl	(%eax),%ecx
0000409d	movl	%eax,(%esp)
000040a0	call	*0x08(%ecx)
000040a3	movl	$0xffffffff,0x000004c8(%esi)
000040ad	movl	0x85651-0x408d(%edi),%edi
000040b3	movl	(%edi),%ecx
000040b5	movl	(%ecx),%eax
000040b7	movl	%ecx,(%esp)
000040ba	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x04(%esp)
000040c2	call	*0x0c(%eax)
000040c5	movl	(%esi),%eax
000040c7	movl	%esi,(%esp)
000040ca	movl	$0x00000002,0x04(%esp)
000040d2	call	*0x000000fc(%eax)
000040d8	movl	(%edi),%ecx
000040da	movl	(%ecx),%eax
000040dc	movl	0x000001b0(%esi),%edx
000040e2	movl	0x000001b4(%esi),%edi
000040e8	movl	%edi,0x08(%esp)
000040ec	movl	%edx,0x04(%esp)
000040f0	movl	%ecx,(%esp)
000040f3	call	*0x20(%eax)
000040f6	movl	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*),0x000001ac(%esi)
00004100	addl	$0x10,%esp
00004103	popl	%esi
00004104	popl	%edi
00004105	popl	%ebp
00004106	ret
00004107	nopw	CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::ApplyManipulation():
00004110	pushl	%ebp
00004111	movl	%esp,%ebp
00004113	pushl	%ebx
00004114	pushl	%edi
00004115	pushl	%esi
00004116	subl	$0x7c,%esp
00004119	calll	0x0000411e
0000411e	popl	%eax
0000411f	movl	0x08(%ebp),%esi
00004122	movl	0x000004b8(%esi),%ecx
00004128	testl	%ecx,%ecx
0000412a	je	0x00004180
0000412c	leal	typeinfo for CRotationManipulator-0x411e(%eax),%edi
00004132	movl	%edi,0x08(%esp)
00004136	leal	typeinfo for CTransformManipulator-0x411e(%eax),%ebx
0000413c	movl	%ebx,0x04(%esp)
00004140	movl	%ecx,(%esp)
00004143	movl	$0xffffffff,0x0c(%esp)
0000414b	calll	___dynamic_cast
00004150	testl	%eax,%eax
00004152	je	0x00004180
00004154	movl	0x000004b8(%esi),%ecx
0000415a	xorl	%eax,%eax
0000415c	testl	%ecx,%ecx
0000415e	je	0x00004178
00004160	movl	%edi,0x08(%esp)
00004164	movl	%ebx,0x04(%esp)
00004168	movl	%ecx,(%esp)
0000416b	movl	$0xffffffff,0x0c(%esp)
00004173	calll	___dynamic_cast
00004178	movl	(%eax),%ecx
0000417a	movl	%eax,(%esp)
0000417d	call	*0x24(%ecx)
00004180	leal	0xc0(%ebp),%ebx
00004183	movl	%ebx,(%esp)
00004186	calll	SetIdentityMatrix(matrix3x4_t&)
0000418b	movl	%ebx,0x08(%esp)
0000418f	leal	0x000004ac(%esi),%eax
00004195	movl	%eax,(%esp)
00004198	movl	$0x00000003,0x04(%esp)
000041a0	calll	MatrixSetColumn(Vector const&, int, matrix3x4_t&)
000041a5	leal	0x90(%ebp),%edi
000041a8	movl	%edi,0x08(%esp)
000041ac	movl	%ebx,0x04(%esp)
000041b0	leal	0x000001f4(%esi),%eax
000041b6	movl	%eax,(%esp)
000041b9	calll	ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
000041be	leal	0x000001dc(%esi),%eax
000041c4	movl	%eax,0x04(%esp)
000041c8	movl	%edi,(%esp)
000041cb	calll	MatrixAngles(matrix3x4_t const&, float*)
000041d0	addl	CZoomManipulator::CZoomManipulator(float*),%esi
000041d6	movl	%esi,0x08(%esp)
000041da	movl	%edi,(%esp)
000041dd	movl	$0x00000003,0x04(%esp)
000041e5	calll	MatrixGetColumn(matrix3x4_t const&, int, Vector&)
000041ea	addl	$0x7c,%esp
000041ed	popl	%esi
000041ee	popl	%edi
000041ef	popl	%ebx
000041f0	popl	%ebp
000041f1	ret
000041f2	nopw	%cs:CTranslationManipulator::CTranslationManipulator(matrix3x4_t*)(%eax,%eax)
CPotteryWheelPanel::OnMouseCaptureLost():
00004200	pushl	%ebp
00004201	movl	%esp,%ebp
00004203	pushl	%esi
00004204	subl	$0x14,%esp
00004207	movl	0x08(%ebp),%esi
0000420a	movl	(%esi),%eax
0000420c	movl	%esi,(%esp)
0000420f	movl	$0x00000002,0x04(%esp)
00004217	call	*0x000000fc(%eax)
0000421d	movl	$0xffffffff,0x000004c8(%esi)
00004227	addl	$0x14,%esp
0000422a	popl	%esi
0000422b	popl	%ebp
0000422c	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(proceduraltexturepanel.o):
(__TEXT,__text) section
CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CProceduralTexturePanel-0xe+0x00000004(%ebx),%eax
00000023	movl	%eax,0xf0(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000035	leal	vtable for CProceduralTexturePanel-0xe+0x0000000c(%ebx),%eax
0000003b	movl	%eax,(%edi)
0000003d	leal	vtable for CProceduralTexturePanel-0xe+0x000003d0(%ebx),%eax
00000043	movl	%eax,0x000001ac(%edi)
00000049	testb	$0x01,CProceduralTexturePanel::ChainToMap()::chained-0xe(%ebx)
00000050	jne	0x00000087
00000052	movb	$0x01,CProceduralTexturePanel::ChainToMap()::chained-0xe(%ebx)
00000059	leal	0x3cd46-0xe(%ebx),%eax
0000005f	movl	%eax,(%esp)
00000062	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000067	movl	%eax,%esi
00000069	leal	CProceduralTexturePanel::GetPanelClassName()-0xe(%ebx),%eax
0000006f	movl	%eax,0x1c(%esi)
00000072	testl	%esi,%esi
00000074	je	0x00000087
00000076	leal	0x3cd9a-0xe(%ebx),%eax
0000007c	movl	%eax,(%esp)
0000007f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000084	movl	%eax,0x18(%esi)
00000087	testb	$0x01,CProceduralTexturePanel::ChainToAnimationMap()::chained-0xe(%ebx)
0000008e	jne	0x000000c5
00000090	movb	$0x01,CProceduralTexturePanel::ChainToAnimationMap()::chained-0xe(%ebx)
00000097	leal	0x3cd46-0xe(%ebx),%eax
0000009d	movl	%eax,(%esp)
000000a0	calll	FindOrAddPanelAnimationMap(char const*)
000000a5	movl	%eax,%esi
000000a7	leal	CProceduralTexturePanel::GetPanelClassName()-0xe(%ebx),%eax
000000ad	movl	%eax,0x18(%esi)
000000b0	testl	%esi,%esi
000000b2	je	0x000000c5
000000b4	leal	0x3cd9a-0xe(%ebx),%eax
000000ba	movl	%eax,(%esp)
000000bd	calll	FindOrAddPanelAnimationMap(char const*)
000000c2	movl	%eax,0x14(%esi)
000000c5	testb	$0x01,CProceduralTexturePanel::KB_ChainToMap()::chained-0xe(%ebx)
000000cc	jne	0x00000103
000000ce	movb	$0x01,CProceduralTexturePanel::KB_ChainToMap()::chained-0xe(%ebx)
000000d5	leal	0x3cd46-0xe(%ebx),%eax
000000db	movl	%eax,(%esp)
000000de	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000e3	movl	%eax,%esi
000000e5	leal	CProceduralTexturePanel::GetPanelClassName()-0xe(%ebx),%eax
000000eb	movl	%eax,0x44(%esi)
000000ee	testl	%esi,%esi
000000f0	je	0x00000103
000000f2	leal	0x3cd9a-0xe(%ebx),%eax
000000f8	movl	%eax,(%esp)
000000fb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000100	movl	%eax,0x18(%esi)
00000103	leal	0x000001e0(%edi),%ebx
00000109	movl	%ebx,(%esp)
0000010c	calll	CTextureReference::CTextureReference()
00000111	leal	0x000001e4(%edi),%eax
00000117	movl	%eax,(%esp)
0000011a	movl	$0x00000001,0x0c(%esp)
00000122	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x08(%esp)
0000012a	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000132	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
00000137	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001b4(%edi)
00000141	movb	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001ec(%edi)
00000148	movb	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001ed(%edi)
0000014f	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c4(%edi)
00000159	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c0(%edi)
00000163	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001cc(%edi)
0000016d	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c8(%edi)
00000177	addl	$0x1c,%esp
0000017a	popl	%esi
0000017b	popl	%edi
0000017c	popl	%ebx
0000017d	popl	%ebp
0000017e	ret
0000017f	movl	%eax,%esi
00000181	jmp	0x0000018d
00000183	movl	%eax,%esi
00000185	movl	%ebx,(%esp)
00000188	calll	CTextureReference::~CTextureReference()
0000018d	movl	0xf0(%ebp),%eax
00000190	movl	%eax,0x04(%esp)
00000194	movl	%edi,(%esp)
00000197	calll	vgui::EditablePanel::~EditablePanel()
0000019c	movl	%esi,(%esp)
0000019f	calll	__Unwind_Resume
000001a4	calll	std::terminate()
000001a9	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax)
CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*):
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	pushl	%ebx
000001b4	pushl	%edi
000001b5	pushl	%esi
000001b6	subl	$0x1c,%esp
000001b9	calll	0x000001be
000001be	popl	%ebx
000001bf	movl	0x14(%ebp),%eax
000001c2	movl	%eax,0x0c(%esp)
000001c6	movl	0x10(%ebp),%eax
000001c9	movl	%eax,0x08(%esp)
000001cd	movl	0x0c(%ebp),%esi
000001d0	leal	0x04(%esi),%eax
000001d3	movl	%eax,0xf0(%ebp)
000001d6	movl	%eax,0x04(%esp)
000001da	movl	0x08(%ebp),%edi
000001dd	movl	%edi,(%esp)
000001e0	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
000001e5	leal	vtable for ITextureRegenerator-0x1be+0x00000008(%ebx),%eax
000001eb	movl	%eax,0x000001ac(%edi)
000001f1	movl	(%esi),%eax
000001f3	movl	%eax,(%edi)
000001f5	leal	vtable for CProceduralTexturePanel-0x1be+0x000003d0(%ebx),%eax
000001fb	movl	%eax,0x000001ac(%edi)
00000201	testb	$0x01,CProceduralTexturePanel::ChainToMap()::chained-0x1be(%ebx)
00000208	jne	0x0000023f
0000020a	movb	$0x01,CProceduralTexturePanel::ChainToMap()::chained-0x1be(%ebx)
00000211	leal	0x3cd46-0x1be(%ebx),%eax
00000217	movl	%eax,(%esp)
0000021a	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000021f	movl	%eax,%esi
00000221	leal	CProceduralTexturePanel::GetPanelClassName()-0x1be(%ebx),%eax
00000227	movl	%eax,0x1c(%esi)
0000022a	testl	%esi,%esi
0000022c	je	0x0000023f
0000022e	leal	0x3cd9a-0x1be(%ebx),%eax
00000234	movl	%eax,(%esp)
00000237	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000023c	movl	%eax,0x18(%esi)
0000023f	testb	$0x01,CProceduralTexturePanel::ChainToAnimationMap()::chained-0x1be(%ebx)
00000246	jne	0x0000027d
00000248	movb	$0x01,CProceduralTexturePanel::ChainToAnimationMap()::chained-0x1be(%ebx)
0000024f	leal	0x3cd46-0x1be(%ebx),%eax
00000255	movl	%eax,(%esp)
00000258	calll	FindOrAddPanelAnimationMap(char const*)
0000025d	movl	%eax,%esi
0000025f	leal	CProceduralTexturePanel::GetPanelClassName()-0x1be(%ebx),%eax
00000265	movl	%eax,0x18(%esi)
00000268	testl	%esi,%esi
0000026a	je	0x0000027d
0000026c	leal	0x3cd9a-0x1be(%ebx),%eax
00000272	movl	%eax,(%esp)
00000275	calll	FindOrAddPanelAnimationMap(char const*)
0000027a	movl	%eax,0x14(%esi)
0000027d	testb	$0x01,CProceduralTexturePanel::KB_ChainToMap()::chained-0x1be(%ebx)
00000284	jne	0x000002bb
00000286	movb	$0x01,CProceduralTexturePanel::KB_ChainToMap()::chained-0x1be(%ebx)
0000028d	leal	0x3cd46-0x1be(%ebx),%eax
00000293	movl	%eax,(%esp)
00000296	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000029b	movl	%eax,%esi
0000029d	leal	CProceduralTexturePanel::GetPanelClassName()-0x1be(%ebx),%eax
000002a3	movl	%eax,0x44(%esi)
000002a6	testl	%esi,%esi
000002a8	je	0x000002bb
000002aa	leal	0x3cd9a-0x1be(%ebx),%eax
000002b0	movl	%eax,(%esp)
000002b3	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000002b8	movl	%eax,0x18(%esi)
000002bb	leal	0x000001e0(%edi),%ebx
000002c1	movl	%ebx,(%esp)
000002c4	calll	CTextureReference::CTextureReference()
000002c9	leal	0x000001e4(%edi),%eax
000002cf	movl	%eax,(%esp)
000002d2	movl	$0x00000001,0x0c(%esp)
000002da	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x08(%esp)
000002e2	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
000002ea	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
000002ef	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001b4(%edi)
000002f9	movb	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001ec(%edi)
00000300	movb	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001ed(%edi)
00000307	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c4(%edi)
00000311	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c0(%edi)
0000031b	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001cc(%edi)
00000325	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001c8(%edi)
0000032f	addl	$0x1c,%esp
00000332	popl	%esi
00000333	popl	%edi
00000334	popl	%ebx
00000335	popl	%ebp
00000336	ret
00000337	movl	%eax,%esi
00000339	jmp	0x00000345
0000033b	movl	%eax,%esi
0000033d	movl	%ebx,(%esp)
00000340	calll	CTextureReference::~CTextureReference()
00000345	movl	0xf0(%ebp),%eax
00000348	movl	%eax,0x04(%esp)
0000034c	movl	%edi,(%esp)
0000034f	calll	vgui::EditablePanel::~EditablePanel()
00000354	movl	%esi,(%esp)
00000357	calll	__Unwind_Resume
0000035c	calll	std::terminate()
00000361	nopl	%cs:CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::~CProceduralTexturePanel():
00000370	pushl	%ebp
00000371	movl	%esp,%ebp
00000373	pushl	%edi
00000374	pushl	%esi
00000375	subl	$0x10,%esp
00000378	calll	0x0000037d
0000037d	popl	%eax
0000037e	movl	0x08(%ebp),%edi
00000381	leal	VTT for CProceduralTexturePanel-0x37d(%eax),%eax
00000387	movl	%eax,0x04(%esp)
0000038b	movl	%edi,(%esp)
0000038e	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
00000393	addl	$0x10,%esp
00000396	popl	%esi
00000397	popl	%edi
00000398	popl	%ebp
00000399	jmp	operator delete(void*)
0000039e	movl	%eax,%esi
000003a0	movl	%edi,(%esp)
000003a3	calll	operator delete(void*)
000003a8	movl	%esi,(%esp)
000003ab	calll	__Unwind_Resume
CProceduralTexturePanel::~CProceduralTexturePanel():
000003b0	pushl	%ebp
000003b1	movl	%esp,%ebp
000003b3	subl	$0x08,%esp
000003b6	calll	0x000003bb
000003bb	popl	%eax
000003bc	leal	VTT for CProceduralTexturePanel-0x3bb(%eax),%eax
000003c2	movl	%eax,0x04(%esp)
000003c6	movl	0x08(%ebp),%eax
000003c9	movl	%eax,(%esp)
000003cc	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
000003d1	addl	$0x08,%esp
000003d4	popl	%ebp
000003d5	ret
000003d6	nopw	%cs:CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::~CProceduralTexturePanel():
000003e0	pushl	%ebp
000003e1	movl	%esp,%ebp
000003e3	pushl	%ebx
000003e4	pushl	%edi
000003e5	pushl	%esi
000003e6	subl	$0x0c,%esp
000003e9	calll	0x000003ee
000003ee	popl	%eax
000003ef	movl	0x0c(%ebp),%edi
000003f2	movl	(%edi),%ecx
000003f4	movl	0x08(%ebp),%ebx
000003f7	movl	%ecx,(%ebx)
000003f9	leal	vtable for CProceduralTexturePanel-0x3ee+0x000003d0(%eax),%eax
000003ff	movl	%eax,0x000001ac(%ebx)
00000405	movl	0x000001e0(%ebx),%eax
0000040b	leal	0x000001e0(%ebx),%ecx
00000411	movl	%ecx,0xf0(%ebp)
00000414	testl	%eax,%eax
00000416	je	0x0000042a
00000418	movl	(%eax),%ecx
0000041a	movl	0x30(%ecx),%ecx
0000041d	movl	%eax,(%esp)
00000420	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000428	call	*%ecx
0000042a	movl	0xf0(%ebp),%eax
0000042d	movl	%eax,(%esp)
00000430	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000438	calll	CTextureReference::Shutdown(bool)
0000043d	leal	0x000001e4(%ebx),%esi
00000443	movl	%esi,(%esp)
00000446	calll	CMaterialReference::Shutdown()
0000044b	movl	0x000001b4(%ebx),%eax
00000451	testl	%eax,%eax
00000453	je	0x00000467
00000455	movl	%eax,(%esp)
00000458	calll	operator delete[](void*)
0000045d	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001b4(%ebx)
00000467	movl	%esi,(%esp)
0000046a	calll	CMaterialReference::~CMaterialReference()
0000046f	movl	0xf0(%ebp),%eax
00000472	movl	%eax,(%esp)
00000475	calll	CTextureReference::~CTextureReference()
0000047a	addl	$0x04,%edi
0000047d	movl	%edi,0x04(%esp)
00000481	movl	%ebx,(%esp)
00000484	calll	vgui::EditablePanel::~EditablePanel()
00000489	addl	$0x0c,%esp
0000048c	popl	%esi
0000048d	popl	%edi
0000048e	popl	%ebx
0000048f	popl	%ebp
00000490	ret
00000491	movl	%eax,%esi
00000493	jmp	0x000004a9
00000495	movl	%eax,%esi
00000497	jmp	0x000004b4
00000499	movl	%eax,%esi
0000049b	leal	0x000001e4(%ebx),%eax
000004a1	movl	%eax,(%esp)
000004a4	calll	CMaterialReference::~CMaterialReference()
000004a9	movl	0xf0(%ebp),%eax
000004ac	movl	%eax,(%esp)
000004af	calll	CTextureReference::~CTextureReference()
000004b4	addl	$0x04,%edi
000004b7	movl	%edi,0x04(%esp)
000004bb	movl	%ebx,(%esp)
000004be	calll	vgui::EditablePanel::~EditablePanel()
000004c3	movl	%esi,(%esp)
000004c6	calll	__Unwind_Resume
000004cb	calll	std::terminate()
CProceduralTexturePanel::CleanUp():
000004d0	pushl	%ebp
000004d1	movl	%esp,%ebp
000004d3	pushl	%esi
000004d4	subl	$0x14,%esp
000004d7	movl	0x08(%ebp),%esi
000004da	movl	0x000001e0(%esi),%eax
000004e0	testl	%eax,%eax
000004e2	je	0x000004f4
000004e4	movl	(%eax),%ecx
000004e6	movl	%eax,(%esp)
000004e9	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
000004f1	call	*0x30(%ecx)
000004f4	leal	0x000001e0(%esi),%eax
000004fa	movl	%eax,(%esp)
000004fd	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000505	calll	CTextureReference::Shutdown(bool)
0000050a	leal	0x000001e4(%esi),%eax
00000510	movl	%eax,(%esp)
00000513	calll	CMaterialReference::Shutdown()
00000518	movl	0x000001b4(%esi),%eax
0000051e	testl	%eax,%eax
00000520	je	0x00000534
00000522	movl	%eax,(%esp)
00000525	calll	operator delete[](void*)
0000052a	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001b4(%esi)
00000534	addl	$0x14,%esp
00000537	popl	%esi
00000538	popl	%ebp
00000539	ret
0000053a	nopw	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::Init(int, int, bool):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%ebx
00000544	pushl	%edi
00000545	pushl	%esi
00000546	subl	$0x0000022c,%esp
0000054c	calll	0x00000551
00000551	popl	%eax
00000552	movl	%eax,0xfffffde8(%ebp)
00000558	movl	0x3f5b2-0x551(%eax),%eax
0000055e	movl	%eax,0xfffffdec(%ebp)
00000564	movl	(%eax),%eax
00000566	movl	%eax,0xf0(%ebp)
00000569	movl	0x0c(%ebp),%ecx
0000056c	movl	0x08(%ebp),%ebx
0000056f	movl	%ecx,0x000001b8(%ebx)
00000575	movl	0x10(%ebp),%edx
00000578	movl	%edx,0x000001bc(%ebx)
0000057e	movb	0x14(%ebp),%al
00000581	testb	%al,%al
00000583	je	0x000005af
00000585	movl	%edx,%eax
00000587	imull	%ecx,%eax
0000058a	movl	%ecx,%esi
0000058c	movl	$0xffffffff,%ecx
00000591	movl	%edx,%edi
00000593	movl	$0x00000004,%edx
00000598	mull	%edx
0000059a	cmovol	%ecx,%eax
0000059d	movl	%eax,(%esp)
000005a0	calll	operator new[](unsigned long)
000005a5	movl	%edi,%edx
000005a7	movl	%esi,%ecx
000005a9	movl	%eax,0x000001b4(%ebx)
000005af	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001d4(%ebx)
000005b9	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001d0(%ebx)
000005c3	movl	%ecx,0x000001d8(%ebx)
000005c9	movl	%edx,0x000001dc(%ebx)
000005cf	movl	(%ebx),%eax
000005d1	movl	%ebx,(%esp)
000005d4	call	*0x48(%eax)
000005d7	movl	%eax,0x0c(%esp)
000005db	movl	0xfffffde8(%ebp),%edi
000005e1	leal	0x3ccf4-0x551(%edi),%eax
000005e7	movl	%eax,0x08(%esp)
000005eb	leal	0xfffffdf0(%ebp),%eax
000005f1	movl	%eax,(%esp)
000005f4	movl	$0x00000200,0x04(%esp)
000005fc	calll	V_snprintf(char*, int, char const*, ...)
00000601	calll	vgui::MaterialSystem()
00000606	movl	(%eax),%ecx
00000608	movl	0x000001b8(%ebx),%edx
0000060e	movl	0x000001bc(%ebx),%esi
00000614	movl	%esi,0x10(%esp)
00000618	movl	%edx,0x0c(%esp)
0000061c	leal	0x3ccf9-0x551(%edi),%edx
00000622	movl	%edx,0x08(%esp)
00000626	leal	0xfffffdf0(%ebp),%edx
0000062c	movl	%edx,0x04(%esp)
00000630	movl	%eax,(%esp)
00000633	movl	$0x00040b0c,0x18(%esp)
0000063b	movl	$0x00000010,0x14(%esp)
00000643	call	*0x00000144(%ecx)
00000649	movl	%eax,%esi
0000064b	movl	(%esi),%eax
0000064d	leal	0x000001ac(%ebx),%ecx
00000653	movl	%ecx,0x04(%esp)
00000657	movl	%esi,(%esp)
0000065a	call	*0x30(%eax)
0000065d	movl	%esi,0x04(%esp)
00000661	leal	0x000001e0(%ebx),%eax
00000667	movl	%eax,(%esp)
0000066a	calll	CTextureReference::Init(ITexture*)
0000066f	movl	$0x00000020,(%esp)
00000676	calll	KeyValues::operator new(unsigned long)
0000067b	movl	%eax,%esi
0000067d	leal	0x3cd07-0x551(%edi),%eax
00000683	movl	%eax,0x04(%esp)
00000687	movl	%esi,(%esp)
0000068a	calll	KeyValues::KeyValues(char const*)
0000068f	leal	0xfffffdf0(%ebp),%ebx
00000695	movl	%ebx,0x08(%esp)
00000699	leal	0x3cd14-0x551(%edi),%eax
0000069f	movl	%eax,0x04(%esp)
000006a3	movl	%esi,(%esp)
000006a6	calll	KeyValues::SetString(char const*, char const*)
000006ab	leal	0x3cd21-0x551(%edi),%eax
000006b1	movl	%eax,0x04(%esp)
000006b5	movl	%esi,(%esp)
000006b8	movl	$0x00000001,0x08(%esp)
000006c0	calll	KeyValues::SetInt(char const*, int)
000006c5	leal	0x3cd29-0x551(%edi),%eax
000006cb	movl	%eax,0x04(%esp)
000006cf	movl	%esi,(%esp)
000006d2	movl	$0x00000001,0x08(%esp)
000006da	calll	KeyValues::SetInt(char const*, int)
000006df	calll	vgui::MaterialSystem()
000006e4	movl	(%eax),%ecx
000006e6	movl	%esi,0x08(%esp)
000006ea	movl	%ebx,0x04(%esp)
000006ee	movl	%eax,(%esp)
000006f1	call	*0x00000118(%ecx)
000006f7	movl	%eax,0x04(%esp)
000006fb	movl	0x08(%ebp),%edi
000006fe	leal	0x000001e4(%edi),%eax
00000704	movl	%eax,(%esp)
00000707	calll	CMaterialReference::Init(IMaterial*)
0000070c	calll	vgui::MatSystemSurface()
00000711	movl	(%eax),%ecx
00000713	movl	%eax,(%esp)
00000716	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
0000071e	call	*0x00000094(%ecx)
00000724	movl	%eax,0x000001e8(%edi)
0000072a	calll	vgui::MatSystemSurface()
0000072f	movl	(%eax),%ecx
00000731	movl	0x000001e4(%edi),%esi
00000737	movl	0x000001e8(%edi),%edx
0000073d	movl	%esi,0x08(%esp)
00000741	movl	%edx,0x04(%esp)
00000745	movl	%eax,(%esp)
00000748	call	*0x0000029c(%ecx)
0000074e	movl	0xfffffdec(%ebp),%eax
00000754	movl	(%eax),%eax
00000756	cmpl	0xf0(%ebp),%eax
00000759	jne	0x0000077d
0000075b	movl	$0x00000001,%eax
00000760	addl	$0x0000022c,%esp
00000766	popl	%esi
00000767	popl	%edi
00000768	popl	%ebx
00000769	popl	%ebp
0000076a	ret
0000076b	movl	%eax,%edi
0000076d	movl	%esi,(%esp)
00000770	calll	KeyValues::operator delete(void*)
00000775	movl	%edi,(%esp)
00000778	calll	__Unwind_Resume
0000077d	calll	___stack_chk_fail
00000782	calll	std::terminate()
00000787	nopw	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::Shutdown():
00000790	pushl	%ebp
00000791	movl	%esp,%ebp
00000793	pushl	%esi
00000794	subl	$0x14,%esp
00000797	movl	0x08(%ebp),%esi
0000079a	movl	0x000001e0(%esi),%eax
000007a0	testl	%eax,%eax
000007a2	je	0x000007b4
000007a4	movl	(%eax),%ecx
000007a6	movl	%eax,(%esp)
000007a9	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
000007b1	call	*0x30(%ecx)
000007b4	leal	0x000001e0(%esi),%eax
000007ba	movl	%eax,(%esp)
000007bd	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
000007c5	calll	CTextureReference::Shutdown(bool)
000007ca	leal	0x000001e4(%esi),%eax
000007d0	movl	%eax,(%esp)
000007d3	calll	CMaterialReference::Shutdown()
000007d8	movl	0x000001b4(%esi),%eax
000007de	testl	%eax,%eax
000007e0	je	0x000007f4
000007e2	movl	%eax,(%esp)
000007e5	calll	operator delete[](void*)
000007ea	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x000001b4(%esi)
000007f4	addl	$0x14,%esp
000007f7	popl	%esi
000007f8	popl	%ebp
000007f9	ret
000007fa	nopw	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::MaintainProportions(bool):
00000800	movb	0x08(%esp),%al
00000804	movl	0x04(%esp),%ecx
00000808	movb	%al,0x000001ec(%ecx)
0000080e	ret
0000080f	nop
CProceduralTexturePanel::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*):
00000810	pushl	%ebp
00000811	movl	%esp,%ebp
00000813	pushl	%ebx
00000814	pushl	%edi
00000815	pushl	%esi
00000816	subl	$0x7c,%esp
00000819	calll	0x0000081e
0000081e	popl	%ebx
0000081f	movl	0x10(%ebp),%esi
00000822	movl	(%esi),%eax
00000824	leal	0xe8(%ebp),%ecx
00000827	movl	%ecx,0x10(%esp)
0000082b	leal	0xec(%ebp),%ecx
0000082e	movl	%ecx,0x0c(%esp)
00000832	leal	0xf0(%ebp),%ecx
00000835	movl	%ecx,0x08(%esp)
00000839	movl	%esi,(%esp)
0000083c	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000844	call	*0x00000084(%eax)
0000084a	movl	(%esi),%eax
0000084c	movl	%esi,(%esp)
0000084f	call	*0x54(%eax)
00000852	movl	%eax,%edi
00000854	movl	(%esi),%eax
00000856	movl	%esi,(%esp)
00000859	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x0c(%esp)
00000861	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x08(%esp)
00000869	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000871	call	*0x0000009c(%eax)
00000877	movl	%eax,0x98(%ebp)
0000087a	movl	(%esi),%eax
0000087c	movl	%esi,(%esp)
0000087f	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000887	call	*0x4c(%eax)
0000088a	movzwl	%ax,%esi
0000088d	cmpl	$0x1d,%edi
00000890	ja	0x00000ab8
00000896	movl	0x0000055e(%ebx,%edi,4),%eax
0000089d	addl	%ebx,%eax
0000089f	jmp	*%eax
000008a1	orl	$0x01040000,%esi
000008a7	xorl	%edi,%edi
000008a9	movl	$0xffffffff,0xac(%ebp)
000008b0	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd8(%ebp)
000008b7	jmp	0x00000aec
000008bc	orl	$0x01100000,%esi
000008c2	movl	$0xffffffff,0xac(%ebp)
000008c9	movl	$0x00600040,0xd8(%ebp)
000008d0	movl	$0x00200000,%edi
000008d5	movl	$0xffffffff,0xc8(%ebp)
000008dc	movl	$0xffffffff,0xc4(%ebp)
000008e3	movl	$0xffffffff,0xcc(%ebp)
000008ea	jmp	0x00000b01
000008ef	orl	$0x03080000,%esi
000008f5	movl	$0x0000ffff,0xac(%ebp)
000008fc	movl	$0x00300020,0xd8(%ebp)
00000903	movl	$0x00100000,%edi
00000908	movl	$0x0000ffff,0xc8(%ebp)
0000090f	movl	$0x0000ffff,0xc4(%ebp)
00000916	movl	$0x0000ffff,0xcc(%ebp)
0000091d	jmp	0x00000b01
00000922	orl	$0x00040000,%esi
00000928	movl	$0x000000ff,0xac(%ebp)
0000092f	movl	$0x00180010,0xd8(%ebp)
00000936	movl	$0x00080000,%edi
0000093b	movl	$0x000000ff,0xc8(%ebp)
00000942	movl	$0x000000ff,0xc4(%ebp)
00000949	movl	$0x000000ff,0xcc(%ebp)
00000950	jmp	0x00000b01
00000955	orl	$0x00040000,%esi
0000095b	movl	$0x000000ff,0xac(%ebp)
00000962	movl	$0x00180000,0xd8(%ebp)
00000969	movl	$0x00080010,%edi
0000096e	jmp	0x0000093b
00000970	orl	$0x00040000,%esi
00000976	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xcc(%ebp)
0000097d	movl	$0x000000ff,0xac(%ebp)
00000984	movl	$0x00180000,0xd8(%ebp)
0000098b	movl	$0x00080010,%edi
00000990	movl	$0x000000ff,0xc8(%ebp)
00000997	movl	$0x000000ff,0xc4(%ebp)
0000099e	jmp	0x00000b01
000009a3	orl	$0x00020000,%esi
000009a9	movl	$0x000000f0,0xac(%ebp)
000009b0	movl	$0x0008fffc,0xd8(%ebp)
000009b7	movl	$0x00000004,%edi
000009bc	movl	$0x000000f0,0xc8(%ebp)
000009c3	movl	$0x000000f0,0xc4(%ebp)
000009ca	movl	$0x000000f0,0xcc(%ebp)
000009d1	jmp	0x00000b01
000009d6	orl	$0x00030000,%esi
000009dc	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd8(%ebp)
000009e3	movl	$0x000000ff,0xac(%ebp)
000009ea	movl	$0x00080010,%edi
000009ef	movl	$0x000000ff,0xc8(%ebp)
000009f6	movl	$0x000000ff,0xc4(%ebp)
000009fd	jmp	0x00000afa
00000a02	orl	$0x00020000,%esi
00000a08	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xcc(%ebp)
00000a0f	movl	$0x000000f8,0xac(%ebp)
00000a16	movl	$0x000000fc,0xc8(%ebp)
00000a1d	movl	$0x0000fffd,0xd8(%ebp)
00000a24	movl	$0x00030008,%edi
00000a29	movl	$0x000000f8,0xc4(%ebp)
00000a30	jmp	0x00000b01
00000a35	orl	$0x00020000,%esi
00000a3b	movl	$0x00000080,0xcc(%ebp)
00000a42	movl	$0x000000f8,0xac(%ebp)
00000a49	movl	$0x0008fffd,0xd8(%ebp)
00000a50	movl	$0x00020007,%edi
00000a55	movl	$0x000000f8,0xc8(%ebp)
00000a5c	movl	$0x000000f8,0xc4(%ebp)
00000a63	jmp	0x00000b01
00000a68	orl	$0x00010000,%esi
00000a6e	movl	$0x000000ff,0xcc(%ebp)
00000a75	xorl	%edi,%edi
00000a77	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd8(%ebp)
00000a7e	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xac(%ebp)
00000a85	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xc8(%ebp)
00000a8c	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xc4(%ebp)
00000a93	jmp	0x00000b01
00000a95	orl	$0x00080000,%esi
00000a9b	jmp	0x000008f5
00000aa0	orl	$0x00010000,%esi
00000aa6	xorl	%edi,%edi
00000aa8	movl	$0x000000ff,0xac(%ebp)
00000aaf	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd8(%ebp)
00000ab6	jmp	0x00000aec
00000ab8	testb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x81e(%ebx,%edi)
00000ac0	jne	0x00000adc
00000ac2	movl	%edi,0x04(%esp)
00000ac6	leal	0x3cd5e-0x81e(%ebx),%eax
00000acc	movl	%eax,(%esp)
00000acf	calll	_Msg
00000ad4	movb	$0x01,CPixelWriter::SetPixelMemory(ImageFormat, void*, int)::format_error_printed-0x81e(%edi,%ebx)
00000adc	xorl	%edi,%edi
00000ade	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd8(%ebp)
00000ae5	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xac(%ebp)
00000aec	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xc8(%ebp)
00000af3	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xc4(%ebp)
00000afa	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xcc(%ebp)
00000b01	movl	%ebx,0xa4(%ebp)
00000b04	movl	0xec(%ebp),%ecx
00000b07	testl	%ecx,%ecx
00000b09	jle	0x00000d72
00000b0f	movl	0xf0(%ebp),%eax
00000b12	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x9c(%ebp)
00000b19	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xa0(%ebp)
00000b20	testl	%eax,%eax
00000b22	jle	0x00000d5f
00000b28	movzwl	%si,%eax
00000b2b	imull	0xa0(%ebp),%eax
00000b2f	movl	0x98(%ebp),%ecx
00000b32	addl	%eax,%ecx
00000b34	movl	%ecx,0xe4(%ebp)
00000b37	movl	0x08(%ebp),%ecx
00000b3a	movl	0x000001b8(%ecx),%eax
00000b40	imull	0x9c(%ebp),%eax
00000b44	movl	0x000001b4(%ecx),%ecx
00000b4a	leal	0x03(%ecx,%eax),%eax
00000b4e	movl	%eax,0xa8(%ebp)
00000b51	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0xd4(%ebp)
00000b58	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
00000b60	movl	%esi,0xc0(%ebp)
00000b63	movl	%esi,%eax
00000b65	shrl	$0x10,%eax
00000b68	movl	%edi,%ecx
00000b6a	shll	$0x10,%ecx
00000b6d	orl	%eax,%ecx
00000b6f	testb	%al,%al
00000b71	jne	0x00000b7e
00000b73	movl	%edi,0xe0(%ebp)
00000b76	movzbl	%cl,%eax
00000b79	jmp	0x00000d41
00000b7e	movl	%edi,0xe0(%ebp)
00000b81	movl	%ecx,%edi
00000b83	movl	0xa8(%ebp),%ecx
00000b86	movl	0xd4(%ebp),%edx
00000b89	movzbl	(%ecx,%edx,4),%ebx
00000b8d	movzbl	0xfd(%ecx,%edx,4),%esi
00000b92	movl	%esi,0xd0(%ebp)
00000b95	movzbl	0xfe(%ecx,%edx,4),%esi
00000b9a	movzbl	0xff(%ecx,%edx,4),%edx
00000b9f	andl	0xac(%ebp),%edx
00000ba2	cmpb	$0x04,%al
00000ba4	ja	0x00000c50
00000baa	movl	%edx,%eax
00000bac	movl	%edi,0xdc(%ebp)
00000baf	movl	%edi,%ecx
00000bb1	shrl	$0x10,%ecx
00000bb4	shll	%cl,%eax
00000bb6	movl	%eax,%edi
00000bb8	movl	0xd0(%ebp),%edx
00000bbb	andl	0xc4(%ebp),%edx
00000bbe	andl	0xc8(%ebp),%esi
00000bc1	movl	0xe0(%ebp),%ecx
00000bc4	shrl	$0x10,%ecx
00000bc7	shll	%cl,%esi
00000bc9	movl	0xd8(%ebp),%eax
00000bcc	movswl	%ax,%ecx
00000bcf	testw	%cx,%cx
00000bd2	jle	0x00000bd8
00000bd4	shll	%cl,%edx
00000bd6	jmp	0x00000bdc
00000bd8	negl	%ecx
00000bda	shrl	%cl,%edx
00000bdc	andl	0xcc(%ebp),%ebx
00000bdf	shrl	$0x10,%eax
00000be2	movb	%al,%cl
00000be4	shll	%cl,%ebx
00000be6	movl	0xdc(%ebp),%eax
00000be9	movzbl	%al,%eax
00000bec	leal	0xff(%eax),%ecx
00000bef	cmpl	$0x03,%ecx
00000bf2	ja	0x00000d41
00000bf8	orl	%esi,%ebx
00000bfa	orl	%edi,%ebx
00000bfc	orl	%edx,%ebx
00000bfe	movl	0xa4(%ebp),%edx
00000c01	movl	0x000005d6(%edx,%ecx,4),%eax
00000c08	addl	%edx,%eax
00000c0a	jmp	*%eax
00000c0c	movl	0xe4(%ebp),%eax
00000c0f	movb	%bl,(%eax)
00000c11	movl	$0x00000001,%eax
00000c16	jmp	0x00000d41
00000c1b	movl	0xe4(%ebp),%eax
00000c1e	movw	%bx,(%eax)
00000c21	movl	$0x00000002,%eax
00000c26	jmp	0x00000d41
00000c2b	movl	0xe4(%ebp),%eax
00000c2e	movw	%bx,(%eax)
00000c31	shrl	$0x10,%ebx
00000c34	movb	%bl,0x02(%eax)
00000c37	movl	$0x00000003,%eax
00000c3c	jmp	0x00000d41
00000c41	movl	0xe4(%ebp),%eax
00000c44	movl	%ebx,(%eax)
00000c46	movl	$0x00000004,%eax
00000c4b	jmp	0x00000d41
00000c50	movl	%edi,0xdc(%ebp)
00000c53	movl	%edi,%eax
00000c55	shrl	$0x10,%eax
00000c58	movb	%al,%cl
00000c5a	xorl	%edi,%edi
00000c5c	shldl	%cl,%edx,%edi
00000c5f	movb	%al,%cl
00000c61	shll	%cl,%edx
00000c63	testb	$0x20,%al
00000c65	cmovnel	%edx,%edi
00000c68	movl	%edi,0xb4(%ebp)
00000c6b	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%edi
00000c70	cmovnel	%edi,%edx
00000c73	movl	%edx,0xbc(%ebp)
00000c76	andl	0xc8(%ebp),%esi
00000c79	movl	0xe0(%ebp),%eax
00000c7c	shrl	$0x10,%eax
00000c7f	movb	%al,%cl
00000c81	xorl	%edx,%edx
00000c83	shldl	%cl,%esi,%edx
00000c86	movb	%al,%cl
00000c88	shll	%cl,%esi
00000c8a	testb	$0x20,%al
00000c8c	cmovnel	%esi,%edx
00000c8f	movl	%edx,0xb0(%ebp)
00000c92	cmovnel	%edi,%esi
00000c95	movl	%esi,0xb8(%ebp)
00000c98	movl	0xd0(%ebp),%ecx
00000c9b	andl	0xc4(%ebp),%ecx
00000c9e	movl	0xd8(%ebp),%eax
00000ca1	movswl	%ax,%edx
00000ca4	testw	%dx,%dx
00000ca7	movl	%ecx,%esi
00000ca9	jle	0x00000cc6
00000cab	movb	%dl,%cl
00000cad	xorl	%edi,%edi
00000caf	shldl	%cl,%esi,%edi
00000cb2	movb	%dl,%cl
00000cb4	shll	%cl,%esi
00000cb6	testb	$0x20,%dl
00000cb9	cmovnel	%esi,%edi
00000cbc	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%ecx
00000cc1	cmovnel	%ecx,%esi
00000cc4	jmp	0x00000ce6
00000cc6	negl	%edx
00000cc8	movb	%dl,%cl
00000cca	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%edi
00000ccf	shrdl	%cl,%edi,%esi
00000cd2	movb	%dl,%cl
00000cd4	xorl	%edi,%edi
00000cd6	shrl	%cl,%edi
00000cd8	testb	$0x20,%dl
00000cdb	cmovnel	%edi,%esi
00000cde	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%ecx
00000ce3	cmovnel	%ecx,%edi
00000ce6	andl	0xcc(%ebp),%ebx
00000ce9	shrl	$0x10,%eax
00000cec	movb	%al,%cl
00000cee	xorl	%edx,%edx
00000cf0	shldl	%cl,%ebx,%edx
00000cf3	movb	%al,%cl
00000cf5	shll	%cl,%ebx
00000cf7	testb	$0x20,%al
00000cf9	cmovnel	%ebx,%edx
00000cfc	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%eax
00000d01	cmovnel	%eax,%ebx
00000d04	orl	0xb0(%ebp),%edx
00000d07	orl	0xb4(%ebp),%edx
00000d0a	orl	%edi,%edx
00000d0c	orl	0xb8(%ebp),%ebx
00000d0f	orl	0xbc(%ebp),%ebx
00000d12	orl	%esi,%ebx
00000d14	movl	0xdc(%ebp),%eax
00000d17	movzbl	%al,%eax
00000d1a	cmpl	$0x08,%eax
00000d1d	je	0x00000d34
00000d1f	cmpl	$0x06,%eax
00000d22	jne	0x00000d41
00000d24	movl	0xe4(%ebp),%eax
00000d27	movl	%ebx,(%eax)
00000d29	movw	%dx,0x04(%eax)
00000d2d	movl	$0x00000006,%eax
00000d32	jmp	0x00000d41
00000d34	movl	0xe4(%ebp),%eax
00000d37	movl	%ebx,(%eax)
00000d39	movl	%edx,0x04(%eax)
00000d3c	movl	$0x00000008,%eax
00000d41	addl	%eax,0xe4(%ebp)
00000d44	movl	0xd4(%ebp),%ecx
00000d47	incl	%ecx
00000d48	movl	%ecx,0xd4(%ebp)
00000d4b	movl	0xf0(%ebp),%eax
00000d4e	cmpl	%eax,%ecx
00000d50	movl	0xc0(%ebp),%esi
00000d53	movl	0xe0(%ebp),%edi
00000d56	jl	0x00000b60
00000d5c	movl	0xec(%ebp),%ecx
00000d5f	addl	$0x04,0x9c(%ebp)
00000d63	movl	0xa0(%ebp),%edx
00000d66	incl	%edx
00000d67	movl	%edx,0xa0(%ebp)
00000d6a	cmpl	%ecx,%edx
00000d6c	jl	0x00000b20
00000d72	addl	$0x7c,%esp
00000d75	popl	%esi
00000d76	popl	%edi
00000d77	popl	%ebx
00000d78	popl	%ebp
00000d79	ret
00000d7a	nop
00000d7c	addb	$0x01,%al
00000d7e	addb	%al,(%eax)
00000d80	lcall	$0x0002,$0x9a000002
00000d87	addb	%bh,0x9a000001(%eax)
00000d8d	addb	(%eax),%al
00000d8f	addb	%al,0x9a000002(%edx)
00000d95	addb	(%eax),%al
00000d97	addb	%bl,0x4a000002(%edx)
00000d9d	addb	(%eax),%al
00000d9f	addb	%bl,0x9a000002(%edx)
00000da5	addb	(%eax),%al
00000da7	addb	%bl,0x37000002(%edx)
00000dad	addl	%eax,(%eax)
00000daf	addb	%bl,0x9a000002(%edx)
00000db5	addb	(%eax),%al
00000db7	addb	%bl,0x52000002(%edx)
00000dbd	addl	%eax,(%eax)
00000dbf	addb	%ah,%ah
00000dc1	addl	%eax,(%eax)
00000dc3	addb	%dl,(%edi)
00000dc5	addb	(%eax),%al
00000dc7	addb	%al,0x9a000001(%ebp)
00000dcd	addb	(%eax),%al
00000dcf	addb	%dl,(%edi)
00000dd1	addb	(%eax),%al
00000dd3	addb	%bl,0x04000002(%edx)
00000dd9	addl	%eax,(%eax)
00000ddb	addb	%dl,%cl
00000ddd	addb	%al,(%eax)
00000ddf	addb	%dh,0x02(%edi)
00000de2	addb	%al,(%eax)
00000de4	lcall	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),$0x83000002
00000deb	addb	%bl,0x9e000002(%edx)
00000df1	addb	%al,(%eax)
00000df3	addb	%ch,%dh
00000df5	addl	(%eax),%eax
00000df7	addb	%bh,%ch
00000df9	addl	(%eax),%eax
00000dfb	addb	%cl,0x23000004
00000e01	addb	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%al
00000e03	addb	%ah,0x66(%esi)
00000e06	nopw	%cs:CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
non-virtual thunk to CProceduralTexturePanel::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*):
00000e10	pushl	%ebp
00000e11	movl	%esp,%ebp
00000e13	subl	$0x18,%esp
00000e16	movl	0x10(%ebp),%eax
00000e19	movl	%eax,0x08(%esp)
00000e1d	movl	$0xfffffe54,%eax
00000e22	addl	0x08(%ebp),%eax
00000e25	movl	%eax,(%esp)
00000e28	calll	CProceduralTexturePanel::RegenerateTextureBits(ITexture*, IVTFTexture*, Rect_t*)
00000e2d	addl	$0x18,%esp
00000e30	popl	%ebp
00000e31	ret
00000e32	nopw	%cs:CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::GetImageBuffer():
00000e40	movl	0x04(%esp),%eax
00000e44	movl	0x000001b4(%eax),%eax
00000e4a	ret
00000e4b	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::GetImageWidth() const:
00000e50	movl	0x04(%esp),%eax
00000e54	movl	0x000001b8(%eax),%eax
00000e5a	ret
00000e5b	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::GetImageHeight() const:
00000e60	movl	0x04(%esp),%eax
00000e64	movl	0x000001bc(%eax),%eax
00000e6a	ret
00000e6b	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::SetPaintRect(Rect_t const*):
00000e70	movl	0x04(%esp),%eax
00000e74	movl	0x08(%esp),%ecx
00000e78	testl	%ecx,%ecx
00000e7a	setne	0x000001ed(%eax)
00000e81	je	0x00000e9c
00000e83	movsd	(%ecx),%xmm0
00000e87	movsd	0x08(%ecx),%xmm1
00000e8c	movsd	%xmm1,0x000001c8(%eax)
00000e94	movsd	%xmm0,0x000001c0(%eax)
00000e9c	ret
00000e9d	nopl	(%eax)
CProceduralTexturePanel::SetTextureSubRect(Rect_t const&):
00000ea0	movl	0x08(%esp),%eax
00000ea4	movsd	(%eax),%xmm0
00000ea8	movsd	0x08(%eax),%xmm1
00000ead	movl	0x04(%esp),%eax
00000eb1	movsd	%xmm1,0x000001d8(%eax)
00000eb9	movsd	%xmm0,0x000001d0(%eax)
00000ec1	ret
00000ec2	nopw	%cs:CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax,%eax)
CProceduralTexturePanel::DownloadTexture():
00000ed0	pushl	%ebp
00000ed1	movl	%esp,%ebp
00000ed3	subl	$0x18,%esp
00000ed6	movl	0x08(%ebp),%eax
00000ed9	movl	0x000001e0(%eax),%ecx
00000edf	movl	(%ecx),%eax
00000ee1	movl	%ecx,(%esp)
00000ee4	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x08(%esp)
00000eec	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),0x04(%esp)
00000ef4	call	*0x34(%eax)
00000ef7	addl	$0x18,%esp
00000efa	popl	%ebp
00000efb	ret
00000efc	nopl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)(%eax)
CProceduralTexturePanel::Paint():
00000f00	pushl	%ebp
00000f01	movl	%esp,%ebp
00000f03	pushl	%ebx
00000f04	pushl	%edi
00000f05	pushl	%esi
00000f06	subl	$0x7c,%esp
00000f09	calll	0x00000f0e
00000f0e	popl	%eax
00000f0f	movl	0x3f5b2-0xf0e(%eax),%ecx
00000f15	movl	%ecx,0x98(%ebp)
00000f18	movl	(%ecx),%ecx
00000f1a	movl	%ecx,0xf0(%ebp)
00000f1d	movl	0x3f5b6-0xf0e(%eax),%esi
00000f23	movl	%esi,0x94(%ebp)
00000f26	movl	(%esi),%ecx
00000f28	movl	(%ecx),%eax
00000f2a	movl	0x08(%ebp),%ebx
00000f2d	movl	0x000001e8(%ebx),%edx
00000f33	movl	%edx,0x04(%esp)
00000f37	movl	%ecx,(%esp)
00000f3a	call	*0x00000080(%eax)
00000f40	movl	(%esi),%ecx
00000f42	movl	(%ecx),%eax
00000f44	movl	%ecx,(%esp)
00000f47	movl	$0x000000ff,0x10(%esp)
00000f4f	movl	$0x000000ff,0x0c(%esp)
00000f57	movl	$0x000000ff,0x08(%esp)
00000f5f	movl	$0x000000ff,0x04(%esp)
00000f67	call	*0x28(%eax)
00000f6a	leal	0xe8(%ebp),%eax
00000f6d	movl	%eax,0x08(%esp)
00000f71	leal	0xec(%ebp),%eax
00000f74	movl	%eax,0x04(%esp)
00000f78	movl	%ebx,(%esp)
00000f7b	calll	vgui::Panel::GetSize(int&, int&)
00000f80	xorl	%edx,%edx
00000f82	testb	$0x01,0x000001ed(%ebx)
00000f89	movl	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*),%ecx
00000f8e	je	0x00000fae
00000f90	movl	0x000001c0(%ebx),%edx
00000f96	movl	0x000001c4(%ebx),%ecx
00000f9c	movl	0x000001c8(%ebx),%eax
00000fa2	movl	%eax,0xec(%ebp)
00000fa5	movl	0x000001cc(%ebx),%eax
00000fab	movl	%eax,0xe8(%ebp)
00000fae	movl	%edx,0x9c(%ebp)
00000fb1	movl	%ecx,0xa0(%ebp)
00000fb4	testb	$0x01,0x000001ec(%ebx)
00000fbb	jne	0x00000fd4
00000fbd	movl	0x000001d8(%ebx),%edi
00000fc3	movl	0x000001dc(%ebx),%eax
00000fc9	movl	%eax,0xa4(%ebp)
00000fcc	movl	0xe8(%ebp),%ecx
00000fcf	movl	0xec(%ebp),%esi
00000fd2	jmp	0x0000100c
00000fd4	movl	0x000001d8(%ebx),%edi
00000fda	movl	0x000001dc(%ebx),%ebx
00000fe0	cmpl	%ebx,%edi
00000fe2	jle	0x00000ff9
00000fe4	movl	0xec(%ebp),%esi
00000fe7	movl	%esi,%eax
00000fe9	imull	%ebx,%eax
00000fec	movl	%ebx,0xa4(%ebp)
00000fef	cltd
00000ff0	idivl	%edi
00000ff2	movl	%eax,%ecx
00000ff4	movl	%ecx,0xe8(%ebp)
00000ff7	jmp	0x0000100c
00000ff9	movl	0xe8(%ebp),%ecx
00000ffc	movl	%ecx,%eax
00000ffe	imull	%edi,%eax
00001001	cltd
00001002	idivl	%ebx
00001004	movl	%ebx,0xa4(%ebp)
00001007	movl	%eax,%esi
00001009	movl	%esi,0xec(%ebp)
0000100c	cvtsi2ss	0x9c(%ebp),%xmm0
00001011	movss	%xmm0,0xa8(%ebp)
00001016	cvtsi2ss	0xa0(%ebp),%xmm4
0000101b	movss	%xmm4,0xac(%ebp)
00001020	movl	0x08(%ebp),%eax
00001023	cvtsi2ss	0x000001b8(%eax),%xmm3
0000102b	movl	0x000001d0(%eax),%ebx
00001031	movl	0x000001d4(%eax),%edx
00001037	movl	%edx,0x90(%ebp)
0000103a	movl	%ebx,%edx
0000103c	cvtsi2ss	%edx,%xmm1
00001040	divss	%xmm3,%xmm1
00001044	cvtsi2ss	0x000001bc(%eax),%xmm2
0000104c	movss	%xmm1,0xb0(%ebp)
00001051	movl	0x90(%ebp),%eax
00001054	cvtsi2ss	%eax,%xmm5
00001058	divss	%xmm2,%xmm5
0000105c	movss	%xmm5,0xb4(%ebp)
00001061	addl	0x9c(%ebp),%esi
00001064	cvtsi2ss	%esi,%xmm6
00001068	movss	%xmm6,0xb8(%ebp)
0000106d	movss	%xmm4,0xbc(%ebp)
00001072	addl	%edx,%edi
00001074	cvtsi2ss	%edi,%xmm4
00001078	divss	%xmm3,%xmm4
0000107c	movss	%xmm4,0xc0(%ebp)
00001081	movss	%xmm5,0xc4(%ebp)
00001086	movss	%xmm6,0xc8(%ebp)
0000108b	addl	0xa0(%ebp),%ecx
0000108e	cvtsi2ss	%ecx,%xmm3
00001092	movss	%xmm3,0xcc(%ebp)
00001097	movss	%xmm4,0xd0(%ebp)
0000109c	movl	0xa4(%ebp),%ecx
0000109f	addl	%eax,%ecx
000010a1	cvtsi2ss	%ecx,%xmm4
000010a5	divss	%xmm2,%xmm4
000010a9	movss	%xmm4,0xd4(%ebp)
000010ae	movss	%xmm0,0xd8(%ebp)
000010b3	movss	%xmm3,0xdc(%ebp)
000010b8	movss	%xmm1,0xe0(%ebp)
000010bd	movss	%xmm4,0xe4(%ebp)
000010c2	movl	0x94(%ebp),%eax
000010c5	movl	(%eax),%ecx
000010c7	movl	(%ecx),%eax
000010c9	leal	0xa8(%ebp),%edx
000010cc	movl	%edx,0x08(%esp)
000010d0	movl	%ecx,(%esp)
000010d3	movl	$0x00000001,0x0c(%esp)
000010db	movl	$0x00000004,0x04(%esp)
000010e3	call	*0x00000198(%eax)
000010e9	movl	0x98(%ebp),%eax
000010ec	movl	(%eax),%eax
000010ee	cmpl	0xf0(%ebp),%eax
000010f1	jne	0x000010fb
000010f3	addl	$0x7c,%esp
000010f6	popl	%esi
000010f7	popl	%edi
000010f8	popl	%ebx
000010f9	popl	%ebp
000010fa	ret
000010fb	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(QCGenerator.o):
(__TEXT,__text) section
strrchrcount(char*, int, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%esi
0000000b	movl	%esi,(%esp)
0000000e	calll	_strlen
00000013	movl	0x10(%ebp),%edx
00000016	movl	0x0c(%ebp),%edi
00000019	nopl	strrchrcount(char*, int, int)(%eax)
00000020	xorl	%ecx,%ecx
00000022	testl	%eax,%eax
00000024	jle	0x0000003c
00000026	movsbl	0xff(%esi,%eax),%ecx
0000002b	cmpl	%edi,%ecx
0000002d	sete	%cl
00000030	movzbl	%cl,%ecx
00000033	decl	%eax
00000034	subl	%ecx,%edx
00000036	jne	0x00000020
00000038	addl	%eax,%esi
0000003a	movl	%esi,%ecx
0000003c	movl	%ecx,%eax
0000003e	addl	$0x10,%esp
00000041	popl	%esi
00000042	popl	%edi
00000043	popl	%ebp
00000044	ret
00000045	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
VGUIMessageBox(vgui::Panel*, char const*, char const*, ...):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%ebx
00000054	pushl	%edi
00000055	pushl	%esi
00000056	subl	$0x0000102c,%esp
0000005c	calll	0x00000061
00000061	popl	%ebx
00000062	movl	0x7572c-0x61(%ebx),%eax
00000068	movl	%eax,0xffffefe8(%ebp)
0000006e	movl	(%eax),%eax
00000070	movl	%eax,0xf0(%ebp)
00000073	leal	0x14(%ebp),%eax
00000076	movl	%eax,0xffffefec(%ebp)
0000007c	movl	%eax,0x0c(%esp)
00000080	movl	0x10(%ebp),%eax
00000083	movl	%eax,0x08(%esp)
00000087	leal	0xffffeff0(%ebp),%edi
0000008d	movl	%edi,(%esp)
00000090	movl	$0x00001000,0x04(%esp)
00000098	calll	V_vsnprintf(char*, int, char const*, char*)
0000009d	movl	$0x00000264,(%esp)
000000a4	calll	operator new(unsigned long)
000000a9	movl	%eax,%esi
000000ab	movl	0x08(%ebp),%eax
000000ae	movl	%eax,0x10(%esp)
000000b2	movl	%edi,0x0c(%esp)
000000b6	movl	0x0c(%ebp),%eax
000000b9	movl	%eax,0x08(%esp)
000000bd	leal	VTT for CModalPreserveMessageBox-0x61+0x00000004(%ebx),%eax
000000c3	movl	%eax,0xffffefe4(%ebp)
000000c9	movl	%eax,0x04(%esp)
000000cd	movl	%esi,(%esp)
000000d0	calll	vgui::MessageBox::MessageBox(char const*, char const*, vgui::Panel*)
000000d5	leal	vtable for CModalPreserveMessageBox-0x61+0x0000000c(%ebx),%eax
000000db	movl	%eax,(%esi)
000000dd	movl	0x75734-0x61(%ebx),%eax
000000e3	movl	(%eax),%eax
000000e5	movl	(%eax),%ecx
000000e7	movl	VGUIMessageBox(vgui::Panel*, char const*, char const*, ...)(%ecx),%ecx
000000ea	movl	%eax,(%esp)
000000ed	call	*%ecx
000000ef	movl	%eax,0x00000260(%esi)
000000f5	movl	(%esi),%eax
000000f7	movl	%esi,(%esp)
000000fa	movl	strrchrcount(char*, int, int),0x04(%esp)
00000102	call	*0x00000450(%eax)
00000108	movl	(%esi),%eax
0000010a	movl	%esi,(%esp)
0000010d	call	*0x000003b4(%eax)
00000113	movl	(%esi),%eax
00000115	movl	%esi,(%esp)
00000118	movl	strrchrcount(char*, int, int),0x04(%esp)
00000120	call	*0x30(%eax)
00000123	movl	0xffffefe8(%ebp),%eax
00000129	movl	(%eax),%eax
0000012b	cmpl	0xf0(%ebp),%eax
0000012e	jne	0x00000168
00000130	addl	$0x0000102c,%esp
00000136	popl	%esi
00000137	popl	%edi
00000138	popl	%ebx
00000139	popl	%ebp
0000013a	ret
0000013b	movl	%eax,%edi
0000013d	movl	0xffffefe4(%ebp),%eax
00000143	movl	%eax,0x04(%esp)
00000147	movl	%esi,(%esp)
0000014a	calll	vgui::MessageBox::~MessageBox()
0000014f	jmp	0x00000158
00000151	calll	std::terminate()
00000156	movl	%eax,%edi
00000158	movl	%esi,(%esp)
0000015b	calll	operator delete(void*)
00000160	movl	%edi,(%esp)
00000163	calll	__Unwind_Resume
00000168	calll	___stack_chk_fail
0000016d	nopl	(%eax)
QCInfo::SyncFromControls():
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x0000024c,%esp
0000017c	calll	0x00000181
00000181	popl	%ebx
00000182	movl	0x7572c-0x181(%ebx),%eax
00000188	movl	%eax,0xfffffdc0(%ebp)
0000018e	movl	(%eax),%eax
00000190	movl	%eax,0xf0(%ebp)
00000193	movl	0x08(%ebp),%edi
00000196	movl	(%edi),%eax
00000198	leal	0x6c9d5-0x181(%ebx),%ecx
0000019e	movl	%ecx,0x04(%esp)
000001a2	movl	%eax,(%esp)
000001a5	movl	strrchrcount(char*, int, int),0x08(%esp)
000001ad	calll	vgui::Panel::FindChildByName(char const*, bool)
000001b2	movl	(%eax),%ecx
000001b4	movl	%eax,(%esp)
000001b7	call	*0x000003f4(%ecx)
000001bd	movb	%al,0x00000518(%edi)
000001c3	movl	(%edi),%eax
000001c5	leal	0x6c9e5-0x181(%ebx),%ecx
000001cb	movl	%ecx,0x04(%esp)
000001cf	movl	%eax,(%esp)
000001d2	movl	strrchrcount(char*, int, int),0x08(%esp)
000001da	calll	vgui::Panel::FindChildByName(char const*, bool)
000001df	movl	(%eax),%ecx
000001e1	movl	%eax,(%esp)
000001e4	call	*0x000003f4(%ecx)
000001ea	movb	%al,0x00000519(%edi)
000001f0	movl	(%edi),%eax
000001f2	leal	0x6c9f7-0x181(%ebx),%ecx
000001f8	movl	%ecx,0x04(%esp)
000001fc	movl	%eax,(%esp)
000001ff	movl	strrchrcount(char*, int, int),0x08(%esp)
00000207	calll	vgui::Panel::FindChildByName(char const*, bool)
0000020c	movl	(%eax),%ecx
0000020e	movl	%eax,(%esp)
00000211	call	*0x000003f4(%ecx)
00000217	movb	%al,0x0000051a(%edi)
0000021d	movl	(%edi),%eax
0000021f	leal	0x6ca0e-0x181(%ebx),%ecx
00000225	movl	%ecx,0x04(%esp)
00000229	movl	%eax,(%esp)
0000022c	movl	strrchrcount(char*, int, int),0x08(%esp)
00000234	calll	vgui::Panel::FindChildByName(char const*, bool)
00000239	movl	(%eax),%ecx
0000023b	movl	%eax,(%esp)
0000023e	call	*0x000003f4(%ecx)
00000244	movb	%al,0x0000051b(%edi)
0000024a	movl	(%edi),%eax
0000024c	leal	0x6ca24-0x181(%ebx),%ecx
00000252	movl	%ecx,0x04(%esp)
00000256	movl	%eax,(%esp)
00000259	movl	strrchrcount(char*, int, int),0x08(%esp)
00000261	calll	vgui::Panel::FindChildByName(char const*, bool)
00000266	movl	(%eax),%ecx
00000268	movl	%eax,(%esp)
0000026b	call	*0x000003f4(%ecx)
00000271	movb	%al,0x0000051c(%edi)
00000277	movl	(%edi),%eax
00000279	leal	0x6ca31-0x181(%ebx),%ecx
0000027f	movl	%ecx,0x04(%esp)
00000283	movl	%eax,(%esp)
00000286	movl	strrchrcount(char*, int, int),0x08(%esp)
0000028e	calll	vgui::Panel::FindChildByName(char const*, bool)
00000293	movl	(%eax),%ecx
00000295	movl	%eax,(%esp)
00000298	call	*0x000003f4(%ecx)
0000029e	movb	%al,0x0000051d(%edi)
000002a4	movl	(%edi),%eax
000002a6	leal	0x6ca3f-0x181(%ebx),%ecx
000002ac	movl	%ecx,0x04(%esp)
000002b0	movl	%eax,(%esp)
000002b3	movl	strrchrcount(char*, int, int),0x08(%esp)
000002bb	calll	vgui::Panel::FindChildByName(char const*, bool)
000002c0	movl	(%eax),%ecx
000002c2	leal	0xfffffeec(%ebp),%esi
000002c8	movl	%esi,0x04(%esp)
000002cc	movl	%eax,(%esp)
000002cf	movl	$0x00000104,0x08(%esp)
000002d7	call	*0x00000350(%ecx)
000002dd	movl	%esi,(%esp)
000002e0	calll	_atof
000002e5	fstps	0x00000538(%edi)
000002eb	movl	(%edi),%eax
000002ed	leal	0x6ca49-0x181(%ebx),%ecx
000002f3	movl	%ecx,0x04(%esp)
000002f7	movl	%eax,(%esp)
000002fa	movl	strrchrcount(char*, int, int),0x08(%esp)
00000302	calll	vgui::Panel::FindChildByName(char const*, bool)
00000307	movl	(%eax),%ecx
00000309	movl	%esi,0x04(%esp)
0000030d	movl	%eax,(%esp)
00000310	movl	$0x00000104,0x08(%esp)
00000318	call	*0x00000350(%ecx)
0000031e	movl	%esi,(%esp)
00000321	calll	_atof
00000326	fstps	0x00000534(%edi)
0000032c	movl	(%edi),%eax
0000032e	leal	0x6ca54-0x181(%ebx),%ecx
00000334	movl	%ecx,0x04(%esp)
00000338	movl	%eax,(%esp)
0000033b	movl	strrchrcount(char*, int, int),0x08(%esp)
00000343	calll	vgui::Panel::FindChildByName(char const*, bool)
00000348	movl	(%eax),%ecx
0000034a	movl	%esi,0x04(%esp)
0000034e	movl	%eax,(%esp)
00000351	movl	$0x00000104,0x08(%esp)
00000359	call	*0x00000350(%ecx)
0000035f	movl	%esi,0x04(%esp)
00000363	leal	0x00000108(%edi),%eax
00000369	movl	%eax,(%esp)
0000036c	movl	$0x00000104,0x08(%esp)
00000374	calll	V_strncpy(char*, char const*, int)
00000379	movl	(%edi),%eax
0000037b	leal	0x6ca66-0x181(%ebx),%ecx
00000381	movl	%ecx,0x04(%esp)
00000385	movl	%eax,(%esp)
00000388	movl	strrchrcount(char*, int, int),0x08(%esp)
00000390	calll	vgui::Panel::FindChildByName(char const*, bool)
00000395	movl	(%eax),%ecx
00000397	movl	%esi,0x04(%esp)
0000039b	movl	%eax,(%esp)
0000039e	movl	$0x00000104,0x08(%esp)
000003a6	call	*0x00000350(%ecx)
000003ac	movl	%esi,0x04(%esp)
000003b0	leal	0x0000020c(%edi),%eax
000003b6	movl	%eax,(%esp)
000003b9	movl	$0x00000104,0x08(%esp)
000003c1	calll	V_strncpy(char*, char const*, int)
000003c6	movl	(%edi),%eax
000003c8	leal	0x6ca7e-0x181(%ebx),%ecx
000003ce	movl	%ecx,0x04(%esp)
000003d2	movl	%eax,(%esp)
000003d5	movl	strrchrcount(char*, int, int),0x08(%esp)
000003dd	calll	vgui::Panel::FindChildByName(char const*, bool)
000003e2	movl	(%eax),%ecx
000003e4	movl	%esi,0x04(%esp)
000003e8	movl	%eax,(%esp)
000003eb	movl	$0x00000104,0x08(%esp)
000003f3	call	*0x00000350(%ecx)
000003f9	movl	%esi,0x04(%esp)
000003fd	leal	0x00000310(%edi),%eax
00000403	movl	%eax,(%esp)
00000406	movl	$0x00000104,0x08(%esp)
0000040e	calll	V_strncpy(char*, char const*, int)
00000413	movl	strrchrcount(char*, int, int),0x0000052c(%edi)
0000041d	movl	(%edi),%eax
0000041f	leal	0x6ca8d-0x181(%ebx),%ecx
00000425	movl	%ecx,0x04(%esp)
00000429	movl	%eax,(%esp)
0000042c	movl	strrchrcount(char*, int, int),0x08(%esp)
00000434	calll	vgui::Panel::FindChildByName(char const*, bool)
00000439	movl	%eax,0xfffffdd4(%ebp)
0000043f	movl	(%eax),%ecx
00000441	movl	%eax,(%esp)
00000444	call	*0x00000394(%ecx)
0000044a	movl	%eax,0xfffffdd0(%ebp)
00000450	testl	%eax,%eax
00000452	jle	0x000005d6
00000458	movl	0x08(%ebp),%eax
0000045b	leal	0x00000520(%eax),%edi
00000461	xorl	%edx,%edx
00000463	leal	0x6ca99-0x181(%ebx),%eax
00000469	movl	%eax,0xfffffdcc(%ebp)
0000046f	leal	0x6ca95-0x181(%ebx),%eax
00000475	movl	%eax,0xfffffdc8(%ebp)
0000047b	leal	0x6ca9a-0x181(%ebx),%eax
00000481	movl	%eax,0xfffffdc4(%ebp)
00000487	nopw	strrchrcount(char*, int, int)(%eax,%eax)
00000490	movl	%edx,0xfffffddc(%ebp)
00000496	movl	0xfffffdd4(%ebp),%ecx
0000049c	movl	(%ecx),%eax
0000049e	movl	%edx,0x04(%esp)
000004a2	movl	%ecx,(%esp)
000004a5	call	*0x0000039c(%eax)
000004ab	movl	%eax,%ebx
000004ad	movl	0xfffffdcc(%ebp),%eax
000004b3	movl	%eax,0x08(%esp)
000004b7	movl	0xfffffdc8(%ebp),%eax
000004bd	movl	%eax,0x04(%esp)
000004c1	movl	%ebx,(%esp)
000004c4	calll	KeyValues::GetString(char const*, char const*)
000004c9	movl	%eax,0x04(%esp)
000004cd	leal	0xfffffde0(%ebp),%eax
000004d3	movl	%eax,(%esp)
000004d6	movl	$0x00000104,0x08(%esp)
000004de	calll	V_strncpy(char*, char const*, int)
000004e3	movl	0xfffffdc4(%ebp),%eax
000004e9	movl	%eax,0x04(%esp)
000004ed	movl	%ebx,(%esp)
000004f0	movl	strrchrcount(char*, int, int),0x08(%esp)
000004f8	calll	KeyValues::GetInt(char const*, int)
000004fd	movl	%eax,0xfffffee4(%ebp)
00000503	movl	0x08(%ebp),%edx
00000506	movl	0x00000524(%edx),%eax
0000050c	movl	0x0000052c(%edx),%ebx
00000512	leal	0x01(%ebx),%esi
00000515	cmpl	%eax,%esi
00000517	movl	%ebx,%ecx
00000519	jle	0x00000545
0000051b	movl	%esi,%ecx
0000051d	subl	%eax,%ecx
0000051f	movl	%ecx,0x04(%esp)
00000523	movl	%edi,(%esp)
00000526	movl	%esi,0xfffffdd8(%ebp)
0000052c	movl	%edi,%esi
0000052e	movl	%edx,%edi
00000530	calll	CUtlMemory<LODInfo, int>::Grow(int)
00000535	movl	%edi,%edx
00000537	movl	%esi,%edi
00000539	movl	0xfffffdd8(%ebp),%esi
0000053f	movl	0x0000052c(%edx),%ecx
00000545	incl	%ecx
00000546	movl	%ecx,0x0000052c(%edx)
0000054c	movl	0x00000520(%edx),%eax
00000552	movl	%eax,0x00000530(%edx)
00000558	subl	%ebx,%ecx
0000055a	decl	%ecx
0000055b	testl	%ecx,%ecx
0000055d	jle	0x00000587
0000055f	imull	$0x00000108,%ecx,%ecx
00000565	movl	%ecx,0x08(%esp)
00000569	imull	$0x00000108,%ebx,%ecx
0000056f	addl	%eax,%ecx
00000571	movl	%ecx,0x04(%esp)
00000575	imull	$0x00000108,%esi,%ecx
0000057b	addl	%eax,%ecx
0000057d	movl	%ecx,(%esp)
00000580	calll	_memmove
00000585	movl	(%edi),%eax
00000587	imull	$0x00000108,%ebx,%esi
0000058d	addl	%eax,%esi
0000058f	je	0x000005c3
00000591	movl	%esi,(%esp)
00000594	movl	$0x00000108,0x08(%esp)
0000059c	movl	strrchrcount(char*, int, int),0x04(%esp)
000005a4	calll	_memset
000005a9	leal	0xfffffde0(%ebp),%eax
000005af	movl	%eax,0x04(%esp)
000005b3	movl	%esi,(%esp)
000005b6	movl	$0x00000108,0x08(%esp)
000005be	calll	_memcpy
000005c3	movl	0xfffffddc(%ebp),%edx
000005c9	incl	%edx
000005ca	cmpl	%edx,0xfffffdd0(%ebp)
000005d0	jne	0x00000490
000005d6	movl	0xfffffdc0(%ebp),%eax
000005dc	movl	(%eax),%eax
000005de	cmpl	0xf0(%ebp),%eax
000005e1	jne	0x000005ee
000005e3	addl	$0x0000024c,%esp
000005e9	popl	%esi
000005ea	popl	%edi
000005eb	popl	%ebx
000005ec	popl	%ebp
000005ed	ret
000005ee	calll	___stack_chk_fail
000005f3	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
QCInfo::SyncToControls():
00000600	pushl	%ebp
00000601	movl	%esp,%ebp
00000603	pushl	%ebx
00000604	pushl	%edi
00000605	pushl	%esi
00000606	subl	$0x0000012c,%esp
0000060c	calll	0x00000611
00000611	popl	%esi
00000612	movl	0x7572c-0x611(%esi),%eax
00000618	movl	%eax,0xfffffee0(%ebp)
0000061e	movl	(%eax),%eax
00000620	movl	%eax,0xf0(%ebp)
00000623	movl	0x08(%ebp),%ebx
00000626	movl	(%ebx),%eax
00000628	leal	0x6c9d5-0x611(%esi),%ecx
0000062e	movl	%ecx,0x04(%esp)
00000632	movl	%eax,(%esp)
00000635	movl	strrchrcount(char*, int, int),0x08(%esp)
0000063d	calll	vgui::Panel::FindChildByName(char const*, bool)
00000642	movl	(%eax),%ecx
00000644	movzbl	0x00000518(%ebx),%edx
0000064b	andl	$0x01,%edx
0000064e	movl	%edx,0x04(%esp)
00000652	movl	%eax,(%esp)
00000655	call	*0x000003f0(%ecx)
0000065b	movl	(%ebx),%eax
0000065d	leal	0x6c9e5-0x611(%esi),%ecx
00000663	movl	%ecx,0x04(%esp)
00000667	movl	%eax,(%esp)
0000066a	movl	strrchrcount(char*, int, int),0x08(%esp)
00000672	calll	vgui::Panel::FindChildByName(char const*, bool)
00000677	movl	(%eax),%ecx
00000679	movzbl	0x00000519(%ebx),%edx
00000680	andl	$0x01,%edx
00000683	movl	%edx,0x04(%esp)
00000687	movl	%eax,(%esp)
0000068a	call	*0x000003f0(%ecx)
00000690	movl	(%ebx),%eax
00000692	leal	0x6c9f7-0x611(%esi),%ecx
00000698	movl	%ecx,0x04(%esp)
0000069c	movl	%eax,(%esp)
0000069f	movl	strrchrcount(char*, int, int),0x08(%esp)
000006a7	calll	vgui::Panel::FindChildByName(char const*, bool)
000006ac	movl	(%eax),%ecx
000006ae	movzbl	0x0000051a(%ebx),%edx
000006b5	andl	$0x01,%edx
000006b8	movl	%edx,0x04(%esp)
000006bc	movl	%eax,(%esp)
000006bf	call	*0x000003f0(%ecx)
000006c5	movl	(%ebx),%eax
000006c7	leal	0x6ca0e-0x611(%esi),%ecx
000006cd	movl	%ecx,0x04(%esp)
000006d1	movl	%eax,(%esp)
000006d4	movl	strrchrcount(char*, int, int),0x08(%esp)
000006dc	calll	vgui::Panel::FindChildByName(char const*, bool)
000006e1	movl	(%eax),%ecx
000006e3	movzbl	0x0000051b(%ebx),%edx
000006ea	andl	$0x01,%edx
000006ed	movl	%edx,0x04(%esp)
000006f1	movl	%eax,(%esp)
000006f4	call	*0x000003f0(%ecx)
000006fa	movl	(%ebx),%eax
000006fc	leal	0x6ca24-0x611(%esi),%ecx
00000702	movl	%ecx,0x04(%esp)
00000706	movl	%eax,(%esp)
00000709	movl	strrchrcount(char*, int, int),0x08(%esp)
00000711	calll	vgui::Panel::FindChildByName(char const*, bool)
00000716	movl	(%eax),%ecx
00000718	movzbl	0x0000051c(%ebx),%edx
0000071f	andl	$0x01,%edx
00000722	movl	%edx,0x04(%esp)
00000726	movl	%eax,(%esp)
00000729	call	*0x000003f0(%ecx)
0000072f	movl	(%ebx),%eax
00000731	leal	0x6ca31-0x611(%esi),%ecx
00000737	movl	%ecx,0x04(%esp)
0000073b	movl	%eax,(%esp)
0000073e	movl	strrchrcount(char*, int, int),0x08(%esp)
00000746	calll	vgui::Panel::FindChildByName(char const*, bool)
0000074b	movl	(%eax),%ecx
0000074d	movzbl	0x0000051d(%ebx),%edx
00000754	andl	$0x01,%edx
00000757	movl	%edx,0x04(%esp)
0000075b	movl	%eax,(%esp)
0000075e	call	*0x000003f0(%ecx)
00000764	movss	0x00000538(%ebx),%xmm0
0000076c	cvttss2si	%xmm0,%eax
00000770	movl	%eax,0x0c(%esp)
00000774	leal	0x6ca9e-0x611(%esi),%eax
0000077a	movl	%eax,0x08(%esp)
0000077e	leal	0xfffffeec(%ebp),%edi
00000784	movl	%edi,(%esp)
00000787	movl	$0x0000000a,0x04(%esp)
0000078f	calll	V_snprintf(char*, int, char const*, ...)
00000794	movl	(%ebx),%eax
00000796	leal	0x6ca3f-0x611(%esi),%ecx
0000079c	movl	%ecx,0x04(%esp)
000007a0	movl	%eax,(%esp)
000007a3	movl	strrchrcount(char*, int, int),0x08(%esp)
000007ab	calll	vgui::Panel::FindChildByName(char const*, bool)
000007b0	movl	(%eax),%ecx
000007b2	movl	%edi,0x04(%esp)
000007b6	movl	%eax,(%esp)
000007b9	call	*0x0000034c(%ecx)
000007bf	movss	0x00000534(%ebx),%xmm0
000007c7	cvttss2si	%xmm0,%eax
000007cb	movl	%eax,0x0c(%esp)
000007cf	leal	0x6ca9e-0x611(%esi),%eax
000007d5	movl	%eax,0x08(%esp)
000007d9	movl	%edi,(%esp)
000007dc	movl	$0x0000000a,0x04(%esp)
000007e4	calll	V_snprintf(char*, int, char const*, ...)
000007e9	movl	(%ebx),%eax
000007eb	leal	0x6ca49-0x611(%esi),%ecx
000007f1	movl	%ecx,0x04(%esp)
000007f5	movl	%eax,(%esp)
000007f8	movl	strrchrcount(char*, int, int),0x08(%esp)
00000800	calll	vgui::Panel::FindChildByName(char const*, bool)
00000805	movl	(%eax),%ecx
00000807	movl	%edi,0x04(%esp)
0000080b	movl	%eax,(%esp)
0000080e	call	*0x0000034c(%ecx)
00000814	movl	(%ebx),%eax
00000816	leal	0x6ca54-0x611(%esi),%ecx
0000081c	movl	%ecx,0x04(%esp)
00000820	movl	%eax,(%esp)
00000823	movl	strrchrcount(char*, int, int),0x08(%esp)
0000082b	calll	vgui::Panel::FindChildByName(char const*, bool)
00000830	movl	(%eax),%ecx
00000832	leal	0x00000108(%ebx),%edx
00000838	movl	%edx,0x04(%esp)
0000083c	movl	%eax,(%esp)
0000083f	call	*0x0000034c(%ecx)
00000845	movl	(%ebx),%eax
00000847	leal	0x6ca7e-0x611(%esi),%ecx
0000084d	movl	%ecx,0x04(%esp)
00000851	movl	%eax,(%esp)
00000854	movl	strrchrcount(char*, int, int),0x08(%esp)
0000085c	calll	vgui::Panel::FindChildByName(char const*, bool)
00000861	movl	(%eax),%ecx
00000863	leal	0x00000310(%ebx),%edx
00000869	movl	%edx,0x04(%esp)
0000086d	movl	%eax,(%esp)
00000870	call	*0x0000034c(%ecx)
00000876	movl	(%ebx),%eax
00000878	leal	0x6ca66-0x611(%esi),%ecx
0000087e	movl	%ecx,0x04(%esp)
00000882	movl	%eax,(%esp)
00000885	movl	strrchrcount(char*, int, int),0x08(%esp)
0000088d	calll	vgui::Panel::FindChildByName(char const*, bool)
00000892	movl	%eax,%esi
00000894	movl	(%esi),%eax
00000896	movl	%esi,(%esp)
00000899	call	*0x0000047c(%eax)
0000089f	movl	%eax,0xfffffee4(%ebp)
000008a5	addl	$0x0000020c,%ebx
000008ab	movl	%ebx,0xfffffee8(%ebp)
000008b1	xorl	%ebx,%ebx
000008b3	jmp	0x000008c1
000008b5	calll	___stack_chk_fail
000008ba	nopw	strrchrcount(char*, int, int)(%eax,%eax)
000008c0	incl	%ebx
000008c1	cmpl	0xfffffee4(%ebp),%ebx
000008c7	jge	0x0000091d
000008c9	movl	%edi,0x08(%esp)
000008cd	movl	%ebx,0x04(%esp)
000008d1	movl	%esi,(%esp)
000008d4	movl	$0x00000104,0x0c(%esp)
000008dc	calll	vgui::ComboBox::GetItemText(int, char*, int)
000008e1	movl	0xfffffee8(%ebp),%eax
000008e7	movl	%eax,0x04(%esp)
000008eb	movl	%edi,(%esp)
000008ee	calll	_strcmp
000008f3	testl	%eax,%eax
000008f5	jne	0x000008c0
000008f7	movl	(%esi),%eax
000008f9	movl	%ebx,0x04(%esp)
000008fd	movl	%esi,(%esp)
00000900	movl	$0x00000001,0x08(%esp)
00000908	call	*0x00000490(%eax)
0000090e	movl	(%esi),%eax
00000910	movl	%edi,0x04(%esp)
00000914	movl	%esi,(%esp)
00000917	call	*0x0000034c(%eax)
0000091d	movl	0xfffffee0(%ebp),%eax
00000923	movl	(%eax),%eax
00000925	cmpl	0xf0(%ebp),%eax
00000928	jne	0x000008b5
0000092a	addl	$0x0000012c,%esp
00000930	popl	%esi
00000931	popl	%edi
00000932	popl	%ebx
00000933	popl	%ebp
00000934	ret
00000935	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::CBrowseButton(vgui::Panel*):
00000940	pushl	%ebp
00000941	movl	%esp,%ebp
00000943	pushl	%ebx
00000944	pushl	%edi
00000945	pushl	%esi
00000946	subl	$0x2c,%esp
00000949	calll	0x0000094e
0000094e	popl	%ebx
0000094f	leal	0x6cab3-0x94e(%ebx),%eax
00000955	movl	%eax,0x18(%esp)
00000959	movl	0x0c(%ebp),%ecx
0000095c	movl	%ecx,0x14(%esp)
00000960	leal	0x6caaf-0x94e(%ebx),%eax
00000966	movl	%eax,0x10(%esp)
0000096a	leal	0x6caa1-0x94e(%ebx),%eax
00000970	movl	%eax,0x0c(%esp)
00000974	movl	%ecx,0x08(%esp)
00000978	leal	VTT for CBrowseButton-0x94e+0x00000004(%ebx),%eax
0000097e	movl	%eax,0xf0(%ebp)
00000981	movl	%eax,0x04(%esp)
00000985	movl	0x08(%ebp),%edi
00000988	movl	%edi,(%esp)
0000098b	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00000990	leal	vtable for CBrowseButton-0x94e+0x0000000c(%ebx),%eax
00000996	movl	%eax,(%edi)
00000998	testb	$0x01,CBrowseButton::ChainToMap()::chained-0x94e(%ebx)
0000099f	jne	0x000009d6
000009a1	movb	$0x01,CBrowseButton::ChainToMap()::chained-0x94e(%ebx)
000009a8	leal	0x6ce9c-0x94e(%ebx),%eax
000009ae	movl	%eax,(%esp)
000009b1	calll	vgui::FindOrAddPanelMessageMap(char const*)
000009b6	movl	%eax,%esi
000009b8	leal	CBrowseButton::GetPanelClassName()-0x94e(%ebx),%eax
000009be	movl	%eax,0x1c(%esi)
000009c1	testl	%esi,%esi
000009c3	je	0x000009d6
000009c5	leal	0x6cf0a-0x94e(%ebx),%eax
000009cb	movl	%eax,(%esp)
000009ce	calll	vgui::FindOrAddPanelMessageMap(char const*)
000009d3	movl	%eax,0x18(%esi)
000009d6	testb	$0x01,CBrowseButton::ChainToAnimationMap()::chained-0x94e(%ebx)
000009dd	jne	0x00000a14
000009df	movb	$0x01,CBrowseButton::ChainToAnimationMap()::chained-0x94e(%ebx)
000009e6	leal	0x6ce9c-0x94e(%ebx),%eax
000009ec	movl	%eax,(%esp)
000009ef	calll	FindOrAddPanelAnimationMap(char const*)
000009f4	movl	%eax,%esi
000009f6	leal	CBrowseButton::GetPanelClassName()-0x94e(%ebx),%eax
000009fc	movl	%eax,0x18(%esi)
000009ff	testl	%esi,%esi
00000a01	je	0x00000a14
00000a03	leal	0x6cf0a-0x94e(%ebx),%eax
00000a09	movl	%eax,(%esp)
00000a0c	calll	FindOrAddPanelAnimationMap(char const*)
00000a11	movl	%eax,0x14(%esi)
00000a14	testb	$0x01,CBrowseButton::KB_ChainToMap()::chained-0x94e(%ebx)
00000a1b	jne	0x00000a52
00000a1d	movb	$0x01,CBrowseButton::KB_ChainToMap()::chained-0x94e(%ebx)
00000a24	leal	0x6ce9c-0x94e(%ebx),%eax
00000a2a	movl	%eax,(%esp)
00000a2d	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000a32	movl	%eax,%esi
00000a34	leal	CBrowseButton::GetPanelClassName()-0x94e(%ebx),%eax
00000a3a	movl	%eax,0x44(%esi)
00000a3d	testl	%esi,%esi
00000a3f	je	0x00000a52
00000a41	leal	0x6cf0a-0x94e(%ebx),%eax
00000a47	movl	%eax,(%esp)
00000a4a	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000a4f	movl	%eax,0x18(%esi)
00000a52	movl	(%edi),%eax
00000a54	movl	0x000000a0(%eax),%eax
00000a5a	movl	0x0c(%ebp),%ecx
00000a5d	movl	%ecx,0x04(%esp)
00000a61	movl	%edi,(%esp)
00000a64	call	*%eax
00000a66	movl	strrchrcount(char*, int, int),0x00000228(%edi)
00000a70	movl	strrchrcount(char*, int, int),0x0000022c(%edi)
00000a7a	movl	strrchrcount(char*, int, int),0x00000230(%edi)
00000a84	addl	$0x2c,%esp
00000a87	popl	%esi
00000a88	popl	%edi
00000a89	popl	%ebx
00000a8a	popl	%ebp
00000a8b	ret
00000a8c	movl	%eax,%esi
00000a8e	movl	0xf0(%ebp),%eax
00000a91	movl	%eax,0x04(%esp)
00000a95	movl	%edi,(%esp)
00000a98	calll	vgui::Button::~Button()
00000a9d	movl	%esi,(%esp)
00000aa0	calll	__Unwind_Resume
00000aa5	calll	std::terminate()
00000aaa	nopw	strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::CBrowseButton(vgui::Panel*):
00000ab0	pushl	%ebp
00000ab1	movl	%esp,%ebp
00000ab3	pushl	%ebx
00000ab4	pushl	%edi
00000ab5	pushl	%esi
00000ab6	subl	$0x2c,%esp
00000ab9	calll	0x00000abe
00000abe	popl	%ebx
00000abf	leal	0x6cab3-0xabe(%ebx),%eax
00000ac5	movl	%eax,0x18(%esp)
00000ac9	movl	0x10(%ebp),%ecx
00000acc	movl	%ecx,0x14(%esp)
00000ad0	leal	0x6caaf-0xabe(%ebx),%eax
00000ad6	movl	%eax,0x10(%esp)
00000ada	leal	0x6caa1-0xabe(%ebx),%eax
00000ae0	movl	%eax,0x0c(%esp)
00000ae4	movl	%ecx,0x08(%esp)
00000ae8	movl	0x0c(%ebp),%esi
00000aeb	leal	0x04(%esi),%eax
00000aee	movl	%eax,0xf0(%ebp)
00000af1	movl	%eax,0x04(%esp)
00000af5	movl	0x08(%ebp),%edi
00000af8	movl	%edi,(%esp)
00000afb	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00000b00	movl	(%esi),%eax
00000b02	movl	%eax,(%edi)
00000b04	testb	$0x01,CBrowseButton::ChainToMap()::chained-0xabe(%ebx)
00000b0b	jne	0x00000b42
00000b0d	movb	$0x01,CBrowseButton::ChainToMap()::chained-0xabe(%ebx)
00000b14	leal	0x6ce9c-0xabe(%ebx),%eax
00000b1a	movl	%eax,(%esp)
00000b1d	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000b22	movl	%eax,%esi
00000b24	leal	CBrowseButton::GetPanelClassName()-0xabe(%ebx),%eax
00000b2a	movl	%eax,0x1c(%esi)
00000b2d	testl	%esi,%esi
00000b2f	je	0x00000b42
00000b31	leal	0x6cf0a-0xabe(%ebx),%eax
00000b37	movl	%eax,(%esp)
00000b3a	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000b3f	movl	%eax,0x18(%esi)
00000b42	testb	$0x01,CBrowseButton::ChainToAnimationMap()::chained-0xabe(%ebx)
00000b49	jne	0x00000b80
00000b4b	movb	$0x01,CBrowseButton::ChainToAnimationMap()::chained-0xabe(%ebx)
00000b52	leal	0x6ce9c-0xabe(%ebx),%eax
00000b58	movl	%eax,(%esp)
00000b5b	calll	FindOrAddPanelAnimationMap(char const*)
00000b60	movl	%eax,%esi
00000b62	leal	CBrowseButton::GetPanelClassName()-0xabe(%ebx),%eax
00000b68	movl	%eax,0x18(%esi)
00000b6b	testl	%esi,%esi
00000b6d	je	0x00000b80
00000b6f	leal	0x6cf0a-0xabe(%ebx),%eax
00000b75	movl	%eax,(%esp)
00000b78	calll	FindOrAddPanelAnimationMap(char const*)
00000b7d	movl	%eax,0x14(%esi)
00000b80	testb	$0x01,CBrowseButton::KB_ChainToMap()::chained-0xabe(%ebx)
00000b87	jne	0x00000bbe
00000b89	movb	$0x01,CBrowseButton::KB_ChainToMap()::chained-0xabe(%ebx)
00000b90	leal	0x6ce9c-0xabe(%ebx),%eax
00000b96	movl	%eax,(%esp)
00000b99	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000b9e	movl	%eax,%esi
00000ba0	leal	CBrowseButton::GetPanelClassName()-0xabe(%ebx),%eax
00000ba6	movl	%eax,0x44(%esi)
00000ba9	testl	%esi,%esi
00000bab	je	0x00000bbe
00000bad	leal	0x6cf0a-0xabe(%ebx),%eax
00000bb3	movl	%eax,(%esp)
00000bb6	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000bbb	movl	%eax,0x18(%esi)
00000bbe	movl	(%edi),%eax
00000bc0	movl	0x000000a0(%eax),%eax
00000bc6	movl	0x10(%ebp),%ecx
00000bc9	movl	%ecx,0x04(%esp)
00000bcd	movl	%edi,(%esp)
00000bd0	call	*%eax
00000bd2	movl	strrchrcount(char*, int, int),0x00000228(%edi)
00000bdc	movl	strrchrcount(char*, int, int),0x0000022c(%edi)
00000be6	movl	strrchrcount(char*, int, int),0x00000230(%edi)
00000bf0	addl	$0x2c,%esp
00000bf3	popl	%esi
00000bf4	popl	%edi
00000bf5	popl	%ebx
00000bf6	popl	%ebp
00000bf7	ret
00000bf8	movl	%eax,%esi
00000bfa	movl	0xf0(%ebp),%eax
00000bfd	movl	%eax,0x04(%esp)
00000c01	movl	%edi,(%esp)
00000c04	calll	vgui::Button::~Button()
00000c09	movl	%esi,(%esp)
00000c0c	calll	__Unwind_Resume
00000c11	calll	std::terminate()
00000c16	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::~CBrowseButton():
00000c20	pushl	%ebp
00000c21	movl	%esp,%ebp
00000c23	pushl	%edi
00000c24	pushl	%esi
00000c25	subl	$0x10,%esp
00000c28	calll	0x00000c2d
00000c2d	popl	%eax
00000c2e	movl	0x08(%ebp),%edi
00000c31	leal	VTT for CBrowseButton-0xc2d+0x00000004(%eax),%eax
00000c37	movl	%eax,0x04(%esp)
00000c3b	movl	%edi,(%esp)
00000c3e	calll	vgui::Button::~Button()
00000c43	addl	$0x10,%esp
00000c46	popl	%esi
00000c47	popl	%edi
00000c48	popl	%ebp
00000c49	jmp	operator delete(void*)
00000c4e	movl	%eax,%esi
00000c50	movl	%edi,(%esp)
00000c53	calll	operator delete(void*)
00000c58	movl	%esi,(%esp)
00000c5b	calll	__Unwind_Resume
CBrowseButton::~CBrowseButton():
00000c60	pushl	%ebp
00000c61	movl	%esp,%ebp
00000c63	subl	$0x08,%esp
00000c66	calll	0x00000c6b
00000c6b	popl	%eax
00000c6c	leal	VTT for CBrowseButton-0xc6b+0x00000004(%eax),%eax
00000c72	movl	%eax,0x04(%esp)
00000c76	movl	0x08(%ebp),%eax
00000c79	movl	%eax,(%esp)
00000c7c	calll	vgui::Button::~Button()
00000c81	addl	$0x08,%esp
00000c84	popl	%ebp
00000c85	ret
00000c86	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::~CBrowseButton():
00000c90	pushl	%ebp
00000c91	movl	%esp,%ebp
00000c93	subl	$0x08,%esp
00000c96	movl	0x0c(%ebp),%eax
00000c99	addl	$0x04,%eax
00000c9c	movl	%eax,0x04(%esp)
00000ca0	movl	0x08(%ebp),%eax
00000ca3	movl	%eax,(%esp)
00000ca6	calll	vgui::Button::~Button()
00000cab	addl	$0x08,%esp
00000cae	popl	%ebp
00000caf	ret
CBrowseButton::SetCharVar(char**, char const*):
00000cb0	pushl	%ebp
00000cb1	movl	%esp,%ebp
00000cb3	pushl	%ebx
00000cb4	pushl	%edi
00000cb5	pushl	%esi
00000cb6	subl	$0x0c,%esp
00000cb9	movl	0x0c(%ebp),%ebx
00000cbc	movl	(%ebx),%esi
00000cbe	movl	0x10(%ebp),%edi
00000cc1	testl	%esi,%esi
00000cc3	je	0x00000cd9
00000cc5	testl	%edi,%edi
00000cc7	je	0x00000cd9
00000cc9	movl	%edi,0x04(%esp)
00000ccd	movl	%esi,(%esp)
00000cd0	calll	_strcmp
00000cd5	testl	%eax,%eax
00000cd7	je	0x00000d1e
00000cd9	testl	%esi,%esi
00000cdb	je	0x00000ceb
00000cdd	movl	%esi,(%esp)
00000ce0	calll	operator delete[](void*)
00000ce5	movl	strrchrcount(char*, int, int),(%ebx)
00000ceb	testl	%edi,%edi
00000ced	je	0x00000d1e
00000cef	movl	%edi,(%esp)
00000cf2	calll	_strlen
00000cf7	movl	%eax,%esi
00000cf9	incl	%esi
00000cfa	testl	%esi,%esi
00000cfc	movl	$0xffffffff,%eax
00000d01	cmovnsl	%esi,%eax
00000d04	movl	%eax,(%esp)
00000d07	calll	operator new[](unsigned long)
00000d0c	movl	%eax,(%ebx)
00000d0e	movl	%esi,0x08(%esp)
00000d12	movl	%edi,0x04(%esp)
00000d16	movl	%eax,(%esp)
00000d19	calll	V_strncpy(char*, char const*, int)
00000d1e	addl	$0x0c,%esp
00000d21	popl	%esi
00000d22	popl	%edi
00000d23	popl	%ebx
00000d24	popl	%ebp
00000d25	ret
00000d26	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::InitBrowseInfo(int, int, char const*, char const*, char const*, char const*):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%esi
00000d34	subl	$0x14,%esp
00000d37	movl	0x08(%ebp),%esi
00000d3a	movl	%esi,(%esp)
00000d3d	movl	$0x00000018,0x08(%esp)
00000d45	movl	$0x00000018,0x04(%esp)
00000d4d	calll	vgui::Panel::SetSize(int, int)
00000d52	movl	0x10(%ebp),%eax
00000d55	movl	%eax,0x08(%esp)
00000d59	movl	0x0c(%ebp),%eax
00000d5c	movl	%eax,0x04(%esp)
00000d60	movl	%esi,(%esp)
00000d63	calll	vgui::Panel::SetPos(int, int)
00000d68	movl	0x14(%ebp),%eax
00000d6b	movl	%eax,0x04(%esp)
00000d6f	movl	%esi,(%esp)
00000d72	calll	vgui::Panel::SetName(char const*)
00000d77	movl	0x18(%ebp),%eax
00000d7a	movl	%eax,0x08(%esp)
00000d7e	leal	0x00000228(%esi),%eax
00000d84	movl	%eax,0x04(%esp)
00000d88	calll	CBrowseButton::SetCharVar(char**, char const*)
00000d8d	movl	0x1c(%ebp),%eax
00000d90	movl	%eax,0x08(%esp)
00000d94	leal	0x0000022c(%esi),%eax
00000d9a	movl	%eax,0x04(%esp)
00000d9e	calll	CBrowseButton::SetCharVar(char**, char const*)
00000da3	movl	0x20(%ebp),%eax
00000da6	movl	%eax,0x08(%esp)
00000daa	addl	$0x00000230,%esi
00000db0	movl	%esi,0x04(%esp)
00000db4	calll	CBrowseButton::SetCharVar(char**, char const*)
00000db9	addl	$0x14,%esp
00000dbc	popl	%esi
00000dbd	popl	%ebp
00000dbe	jmp	CBrowseButton::SetActionMessage()
00000dc3	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CBrowseButton::SetActionMessage():
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	pushl	%ebx
00000dd4	pushl	%edi
00000dd5	pushl	%esi
00000dd6	subl	$0x1c,%esp
00000dd9	calll	0x00000dde
00000dde	popl	%ebx
00000ddf	movl	$0x00000020,(%esp)
00000de6	calll	KeyValues::operator new(unsigned long)
00000deb	movl	%eax,%esi
00000ded	movl	0x08(%ebp),%edi
00000df0	movl	0x00000228(%edi),%eax
00000df6	movl	0x0000022c(%edi),%ecx
00000dfc	movl	%ecx,0x14(%esp)
00000e00	leal	0x6cac4-0xdde(%ebx),%ecx
00000e06	movl	%ecx,0x10(%esp)
00000e0a	movl	%eax,0x0c(%esp)
00000e0e	leal	0x6caba-0xdde(%ebx),%eax
00000e14	movl	%eax,0x08(%esp)
00000e18	leal	0x6cab3-0xdde(%ebx),%eax
00000e1e	movl	%eax,0x04(%esp)
00000e22	movl	%esi,(%esp)
00000e25	calll	KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*)
00000e2a	movl	0x00000230(%edi),%eax
00000e30	movl	%eax,0x08(%esp)
00000e34	leal	0x6cacb-0xdde(%ebx),%eax
00000e3a	movl	%eax,0x04(%esp)
00000e3e	movl	%esi,(%esp)
00000e41	calll	KeyValues::SetString(char const*, char const*)
00000e46	movl	(%edi),%eax
00000e48	movl	%esi,0x04(%esp)
00000e4c	movl	%edi,(%esp)
00000e4f	call	*0x0000045c(%eax)
00000e55	addl	$0x1c,%esp
00000e58	popl	%esi
00000e59	popl	%edi
00000e5a	popl	%ebx
00000e5b	popl	%ebp
00000e5c	ret
00000e5d	movl	%eax,%edi
00000e5f	movl	%esi,(%esp)
00000e62	calll	KeyValues::operator delete(void*)
00000e67	movl	%edi,(%esp)
00000e6a	calll	__Unwind_Resume
00000e6f	calll	std::terminate()
00000e74	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
ParseKeyvalue(char const*, char*, char*):
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x0000042c,%esp
00000e8c	calll	0x00000e91
00000e91	popl	%edi
00000e92	movl	0x7572c-0xe91(%edi),%eax
00000e98	movl	%eax,0xfffffbe8(%ebp)
00000e9e	movl	(%eax),%eax
00000ea0	movl	%eax,0xf0(%ebp)
00000ea3	leal	0xfffffbf0(%ebp),%esi
00000ea9	movl	%esi,0x04(%esp)
00000ead	movl	0x08(%ebp),%eax
00000eb0	movl	%eax,(%esp)
00000eb3	movl	$0x00000400,0x10(%esp)
00000ebb	movl	strrchrcount(char*, int, int),0x0c(%esp)
00000ec3	movl	strrchrcount(char*, int, int),0x08(%esp)
00000ecb	calll	ParseFileInternal(char const*, char*, bool*, characterset_t*, unsigned long)
00000ed0	movl	%eax,0xfffffbec(%ebp)
00000ed6	movl	%esi,(%esp)
00000ed9	calll	_strlen
00000ede	movl	0x0c(%ebp),%ebx
00000ee1	cmpl	$0x000003ff,%eax
00000ee6	jg	0x00000f04
00000ee8	movl	%esi,0x04(%esp)
00000eec	movl	%ebx,(%esp)
00000eef	movl	$0x00000400,0x08(%esp)
00000ef7	calll	V_strncpy(char*, char const*, int)
00000efc	movl	%ebx,(%esp)
00000eff	calll	V_strlower(char*)
00000f04	leal	0x6cad7-0xe91(%edi),%eax
00000f0a	movl	%eax,0x04(%esp)
00000f0e	movl	%ebx,(%esp)
00000f11	calll	_strcmp
00000f16	testl	%eax,%eax
00000f18	jne	0x00000f28
00000f1a	movl	0x10(%ebp),%eax
00000f1d	movb	strrchrcount(char*, int, int),(%eax)
00000f20	movl	0xfffffbec(%ebp),%edi
00000f26	jmp	0x00000f82
00000f28	movl	%esi,0x04(%esp)
00000f2c	movl	0xfffffbec(%ebp),%eax
00000f32	movl	%eax,(%esp)
00000f35	movl	$0x00000400,0x10(%esp)
00000f3d	movl	strrchrcount(char*, int, int),0x0c(%esp)
00000f45	movl	strrchrcount(char*, int, int),0x08(%esp)
00000f4d	calll	ParseFileInternal(char const*, char*, bool*, characterset_t*, unsigned long)
00000f52	movl	%eax,%edi
00000f54	movl	%esi,(%esp)
00000f57	calll	_strlen
00000f5c	cmpl	$0x000003ff,%eax
00000f61	jg	0x00000f82
00000f63	movl	%esi,0x04(%esp)
00000f67	movl	0x10(%ebp),%esi
00000f6a	movl	%esi,(%esp)
00000f6d	movl	$0x00000400,0x08(%esp)
00000f75	calll	V_strncpy(char*, char const*, int)
00000f7a	movl	%esi,(%esp)
00000f7d	calll	V_strlower(char*)
00000f82	movl	0xfffffbe8(%ebp),%eax
00000f88	movl	(%eax),%eax
00000f8a	cmpl	0xf0(%ebp),%eax
00000f8d	jne	0x00000f9c
00000f8f	movl	%edi,%eax
00000f91	addl	$0x0000042c,%esp
00000f97	popl	%esi
00000f98	popl	%edi
00000f99	popl	%ebx
00000f9a	popl	%ebp
00000f9b	ret
00000f9c	calll	___stack_chk_fail
00000fa1	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::CQCGenerator(vgui::Panel*, char const*, char const*):
00000fb0	pushl	%ebp
00000fb1	movl	%esp,%ebp
00000fb3	pushl	%ebx
00000fb4	pushl	%edi
00000fb5	pushl	%esi
00000fb6	subl	$0x0000146c,%esp
00000fbc	calll	0x00000fc1
00000fc1	popl	%edi
00000fc2	movl	0x7572c-0xfc1(%edi),%eax
00000fc8	movl	%eax,0xffffebc0(%ebp)
00000fce	movl	(%eax),%eax
00000fd0	movl	%eax,0xf0(%ebp)
00000fd3	leal	0x6cad9-0xfc1(%edi),%eax
00000fd9	movl	%eax,0x0c(%esp)
00000fdd	movl	0x0c(%ebp),%eax
00000fe0	movl	%eax,0x08(%esp)
00000fe4	leal	VTT for CQCGenerator-0xfc1+0x00000004(%edi),%eax
00000fea	movl	%eax,0xffffebc4(%ebp)
00000ff0	movl	%eax,0x04(%esp)
00000ff4	movl	0x08(%ebp),%ebx
00000ff7	movl	%ebx,(%esp)
00000ffa	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000fff	leal	vtable for CQCGenerator-0xfc1+0x0000000c(%edi),%eax
00001005	movl	%eax,(%ebx)
00001007	testb	$0x01,CQCGenerator::ChainToMap()::chained-0xfc1(%edi)
0000100e	jne	0x00001045
00001010	movb	$0x01,CQCGenerator::ChainToMap()::chained-0xfc1(%edi)
00001017	leal	0x6cebe-0xfc1(%edi),%eax
0000101d	movl	%eax,(%esp)
00001020	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001025	movl	%eax,%esi
00001027	leal	CQCGenerator::GetPanelClassName()-0xfc1(%edi),%eax
0000102d	movl	%eax,0x1c(%esi)
00001030	testl	%esi,%esi
00001032	je	0x00001045
00001034	leal	0x6cef6-0xfc1(%edi),%eax
0000103a	movl	%eax,(%esp)
0000103d	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001042	movl	%eax,0x18(%esi)
00001045	testb	$0x01,CQCGenerator::ChainToAnimationMap()::chained-0xfc1(%edi)
0000104c	jne	0x00001083
0000104e	movb	$0x01,CQCGenerator::ChainToAnimationMap()::chained-0xfc1(%edi)
00001055	leal	0x6cebe-0xfc1(%edi),%eax
0000105b	movl	%eax,(%esp)
0000105e	calll	FindOrAddPanelAnimationMap(char const*)
00001063	movl	%eax,%esi
00001065	leal	CQCGenerator::GetPanelClassName()-0xfc1(%edi),%eax
0000106b	movl	%eax,0x18(%esi)
0000106e	testl	%esi,%esi
00001070	je	0x00001083
00001072	leal	0x6cef6-0xfc1(%edi),%eax
00001078	movl	%eax,(%esp)
0000107b	calll	FindOrAddPanelAnimationMap(char const*)
00001080	movl	%eax,0x14(%esi)
00001083	testb	$0x01,CQCGenerator::KB_ChainToMap()::chained-0xfc1(%edi)
0000108a	jne	0x000010c1
0000108c	movb	$0x01,CQCGenerator::KB_ChainToMap()::chained-0xfc1(%edi)
00001093	leal	0x6cebe-0xfc1(%edi),%eax
00001099	movl	%eax,(%esp)
0000109c	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000010a1	movl	%eax,%esi
000010a3	leal	CQCGenerator::GetPanelClassName()-0xfc1(%edi),%eax
000010a9	movl	%eax,0x44(%esi)
000010ac	testl	%esi,%esi
000010ae	je	0x000010c1
000010b0	leal	0x6cef6-0xfc1(%edi),%eax
000010b6	movl	%eax,(%esp)
000010b9	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000010be	movl	%eax,0x18(%esi)
000010c1	testb	$0x01,CQCGenerator::PanelMessageFunc_OnNewLODText::InitVar()::bAdded-0xfc1(%edi)
000010c8	jne	0x00001129
000010ca	movb	$0x01,CQCGenerator::PanelMessageFunc_OnNewLODText::InitVar()::bAdded-0xfc1(%edi)
000010d1	movl	strrchrcount(char*, int, int),0xffffebd4(%ebp)
000010db	movl	$0x000003ad,0xffffebd0(%ebp)
000010e5	movsd	0xffffebd0(%ebp),%xmm0
000010ed	movsd	%xmm0,0x04(%esp)
000010f3	leal	0x6ceea-0xfc1(%edi),%eax
000010f9	movl	%eax,(%esp)
000010fc	movl	strrchrcount(char*, int, int),0x1c(%esp)
00001104	movl	strrchrcount(char*, int, int),0x18(%esp)
0000110c	movl	strrchrcount(char*, int, int),0x14(%esp)
00001114	movl	strrchrcount(char*, int, int),0x10(%esp)
0000111c	movl	strrchrcount(char*, int, int),0x0c(%esp)
00001124	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001129	testb	$0x01,CQCGenerator::PanelMessageFunc_OnBrowse::InitVar()::bAdded-0xfc1(%edi)
00001130	jne	0x00001191
00001132	movb	$0x01,CQCGenerator::PanelMessageFunc_OnBrowse::InitVar()::bAdded-0xfc1(%edi)
00001139	movl	strrchrcount(char*, int, int),0xffffebdc(%ebp)
00001143	movl	$0x000003b1,0xffffebd8(%ebp)
0000114d	movsd	0xffffebd8(%ebp),%xmm0
00001155	movsd	%xmm0,0x04(%esp)
0000115b	leal	0x6cab3-0xfc1(%edi),%eax
00001161	movl	%eax,(%esp)
00001164	movl	strrchrcount(char*, int, int),0x1c(%esp)
0000116c	movl	strrchrcount(char*, int, int),0x18(%esp)
00001174	movl	strrchrcount(char*, int, int),0x14(%esp)
0000117c	movl	$0x00000006,0x10(%esp)
00001184	movl	$0x00000001,0x0c(%esp)
0000118c	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001191	testb	$0x01,CQCGenerator::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0xfc1(%edi)
00001198	jne	0x000011f9
0000119a	movb	$0x01,CQCGenerator::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0xfc1(%edi)
000011a1	movl	strrchrcount(char*, int, int),0xffffebe4(%ebp)
000011ab	movl	$0x000003b5,0xffffebe0(%ebp)
000011b5	movsd	0xffffebe0(%ebp),%xmm0
000011bd	movsd	%xmm0,0x04(%esp)
000011c3	leal	0x6cedd-0xfc1(%edi),%eax
000011c9	movl	%eax,(%esp)
000011cc	movl	strrchrcount(char*, int, int),0x1c(%esp)
000011d4	movl	strrchrcount(char*, int, int),0x18(%esp)
000011dc	movl	strrchrcount(char*, int, int),0x14(%esp)
000011e4	movl	$0x00000006,0x10(%esp)
000011ec	movl	$0x00000001,0x0c(%esp)
000011f4	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000011f9	testb	$0x01,CQCGenerator::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0xfc1(%edi)
00001200	jne	0x00001261
00001202	movb	$0x01,CQCGenerator::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0xfc1(%edi)
00001209	movl	strrchrcount(char*, int, int),0xffffebec(%ebp)
00001213	movl	$0x000003b9,0xffffebe8(%ebp)
0000121d	movsd	0xffffebe8(%ebp),%xmm0
00001225	movsd	%xmm0,0x04(%esp)
0000122b	leal	0x6cecb-0xfc1(%edi),%eax
00001231	movl	%eax,(%esp)
00001234	movl	strrchrcount(char*, int, int),0x1c(%esp)
0000123c	movl	strrchrcount(char*, int, int),0x18(%esp)
00001244	movl	strrchrcount(char*, int, int),0x14(%esp)
0000124c	movl	$0x00000006,0x10(%esp)
00001254	movl	$0x00000001,0x0c(%esp)
0000125c	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001261	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
0000126b	movl	strrchrcount(char*, int, int),0x000007e8(%ebx)
00001275	movl	strrchrcount(char*, int, int),0x000007f4(%ebx)
0000127f	movl	strrchrcount(char*, int, int),0x000007f0(%ebx)
00001289	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
00001293	movl	%ebx,0x000002c8(%ebx)
00001299	movb	strrchrcount(char*, int, int),0x000002cc(%ebx)
000012a0	movb	strrchrcount(char*, int, int),0x000003d0(%ebx)
000012a7	movl	$0x00746c75,0x000004d8(%ebx)
000012b1	movl	$0x61666564,0x000004d4(%ebx)
000012bb	movw	strrchrcount(char*, int, int),0x000007e4(%ebx)
000012c4	movl	strrchrcount(char*, int, int),0x000007e0(%ebx)
000012ce	movb	$0x01,0x000007e6(%ebx)
000012d5	movl	$0x3f800000,0x000007fc(%ebx)
000012df	movl	$0x41200000,0x00000800(%ebx)
000012e9	movl	%ebx,(%esp)
000012ec	movl	$0x00000302,0x08(%esp)
000012f4	movl	$0x0000034e,0x04(%esp)
000012fc	calll	vgui::Panel::SetMinimumSize(int, int)
00001301	movl	$0x00000280,(%esp)
00001308	calll	operator new(unsigned long)
0000130d	movl	%eax,%esi
0000130f	leal	0x6ca8d-0xfc1(%edi),%eax
00001315	movl	%eax,0x08(%esp)
00001319	movl	0x08(%ebp),%ebx
0000131c	movl	%ebx,0x04(%esp)
00001320	movl	%esi,(%esp)
00001323	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00001328	movl	%esi,0x000002b8(%ebx)
0000132e	movl	(%esi),%eax
00001330	movl	0x00000410(%eax),%eax
00001336	movl	%esi,(%esp)
00001339	movl	$0x00000001,0x04(%esp)
00001341	call	*%eax
00001343	movl	0x08(%ebp),%eax
00001346	movl	0x000002b8(%eax),%ecx
0000134c	movl	(%ecx),%eax
0000134e	movl	0x0000034c(%eax),%eax
00001354	leal	0x6cae5-0xfc1(%edi),%edx
0000135a	movl	%edx,0x0c(%esp)
0000135e	leal	0x6ca95-0xfc1(%edi),%edx
00001364	movl	%edi,%esi
00001366	movl	%edx,0x08(%esp)
0000136a	movl	%ecx,(%esp)
0000136d	movl	strrchrcount(char*, int, int),0x14(%esp)
00001375	movl	$0x000001c2,0x10(%esp)
0000137d	movl	strrchrcount(char*, int, int),0x04(%esp)
00001385	call	*%eax
00001387	movl	0x08(%ebp),%eax
0000138a	movl	0x000002b8(%eax),%ecx
00001390	movl	(%ecx),%eax
00001392	movl	0x0000034c(%eax),%eax
00001398	movl	%esi,0xffffebcc(%ebp)
0000139e	leal	0x6caed-0xfc1(%esi),%edx
000013a4	movl	%edx,0x0c(%esp)
000013a8	leal	0x6ca9a-0xfc1(%esi),%edx
000013ae	movl	%edx,0x08(%esp)
000013b2	movl	%ecx,(%esp)
000013b5	movl	strrchrcount(char*, int, int),0x14(%esp)
000013bd	movl	$0x00000032,0x10(%esp)
000013c5	movl	$0x00000001,0x04(%esp)
000013cd	call	*%eax
000013cf	movl	0x08(%ebp),%edx
000013d2	movl	0x000002b8(%edx),%eax
000013d8	movl	(%eax),%ecx
000013da	movl	0x000000b4(%ecx),%ecx
000013e0	movl	%edx,0x04(%esp)
000013e4	movl	%eax,(%esp)
000013e7	call	*%ecx
000013e9	movl	0x08(%ebp),%eax
000013ec	movl	0x000002b8(%eax),%ecx
000013f2	movl	(%ecx),%eax
000013f4	movl	0x0000021c(%eax),%eax
000013fa	movl	%ecx,(%esp)
000013fd	movl	$0x00000001,0x04(%esp)
00001405	call	*%eax
00001407	movl	0x08(%ebp),%edx
0000140a	movl	(%edx),%eax
0000140c	movl	0x00000348(%eax),%eax
00001412	movl	0xffffebcc(%ebp),%ecx
00001418	leal	0x6cafa-0xfc1(%ecx),%ecx
0000141e	movl	%ecx,0x04(%esp)
00001422	movl	%edx,(%esp)
00001425	movl	strrchrcount(char*, int, int),0x10(%esp)
0000142d	movl	strrchrcount(char*, int, int),0x0c(%esp)
00001435	movl	strrchrcount(char*, int, int),0x08(%esp)
0000143d	call	*%eax
0000143f	movl	$0x00000234,(%esp)
00001446	calll	operator new(unsigned long)
0000144b	movl	%eax,%esi
0000144d	movl	0x08(%ebp),%ebx
00001450	movl	%ebx,0x04(%esp)
00001454	movl	%esi,(%esp)
00001457	calll	CBrowseButton::CBrowseButton(vgui::Panel*)
0000145c	movl	%esi,0x000001b0(%ebx)
00001462	movl	%esi,(%esp)
00001465	movl	$0x00000018,0x08(%esp)
0000146d	movl	$0x00000018,0x04(%esp)
00001475	calll	vgui::Panel::SetSize(int, int)
0000147a	movl	%esi,(%esp)
0000147d	movl	$0x0000009e,0x08(%esp)
00001485	movl	$0x00000328,0x04(%esp)
0000148d	calll	vgui::Panel::SetPos(int, int)
00001492	movl	0xffffebcc(%ebp),%eax
00001498	leal	0x6cb0a-0xfc1(%eax),%eax
0000149e	movl	%eax,0x04(%esp)
000014a2	movl	%esi,(%esp)
000014a5	calll	vgui::Panel::SetName(char const*)
000014aa	movl	0x10(%ebp),%ebx
000014ad	movl	%ebx,0x08(%esp)
000014b1	leal	0x00000228(%esi),%eax
000014b7	movl	%eax,0x04(%esp)
000014bb	calll	CBrowseButton::SetCharVar(char**, char const*)
000014c0	movl	0x08(%ebp),%eax
000014c3	leal	0x000002c8(%eax),%eax
000014c9	movl	%eax,0xffffebbc(%ebp)
000014cf	movl	0x0000022c(%esi),%edi
000014d5	testl	%edi,%edi
000014d7	je	0x00001507
000014d9	movl	0xffffebcc(%ebp),%eax
000014df	leal	0x6cb20-0xfc1(%eax),%eax
000014e5	movl	%eax,0x04(%esp)
000014e9	movl	%edi,(%esp)
000014ec	calll	_strcmp
000014f1	testl	%eax,%eax
000014f3	je	0x00001539
000014f5	movl	%edi,(%esp)
000014f8	calll	operator delete[](void*)
000014fd	movl	strrchrcount(char*, int, int),0x0000022c(%esi)
00001507	movl	$0x00000006,(%esp)
0000150e	calll	operator new[](unsigned long)
00001513	movl	%eax,0x0000022c(%esi)
00001519	movl	0xffffebcc(%ebp),%ecx
0000151f	leal	0x6cb20-0xfc1(%ecx),%ecx
00001525	movl	%ecx,0x04(%esp)
00001529	movl	%eax,(%esp)
0000152c	movl	$0x00000006,0x08(%esp)
00001534	calll	V_strncpy(char*, char const*, int)
00001539	movl	0x00000230(%esi),%edi
0000153f	testl	%edi,%edi
00001541	je	0x00001571
00001543	movl	0xffffebcc(%ebp),%eax
00001549	leal	0x6ca54-0xfc1(%eax),%eax
0000154f	movl	%eax,0x04(%esp)
00001553	movl	%edi,(%esp)
00001556	calll	_strcmp
0000155b	testl	%eax,%eax
0000155d	je	0x000015a3
0000155f	movl	%edi,(%esp)
00001562	calll	operator delete[](void*)
00001567	movl	strrchrcount(char*, int, int),0x00000230(%esi)
00001571	movl	$0x00000012,(%esp)
00001578	calll	operator new[](unsigned long)
0000157d	movl	%eax,0x00000230(%esi)
00001583	movl	0xffffebcc(%ebp),%ecx
00001589	leal	0x6ca54-0xfc1(%ecx),%ecx
0000158f	movl	%ecx,0x04(%esp)
00001593	movl	%eax,(%esp)
00001596	movl	$0x00000012,0x08(%esp)
0000159e	calll	V_strncpy(char*, char const*, int)
000015a3	movl	%esi,(%esp)
000015a6	calll	CBrowseButton::SetActionMessage()
000015ab	leal	0xfffffbf0(%ebp),%esi
000015b1	movl	%esi,(%esp)
000015b4	movl	$0x00000400,0x08(%esp)
000015bc	movl	strrchrcount(char*, int, int),0x04(%esp)
000015c4	calll	_memset
000015c9	movl	%ebx,0x08(%esp)
000015cd	movl	0xffffebcc(%ebp),%eax
000015d3	leal	0x6cb26-0xfc1(%eax),%eax
000015d9	movl	%eax,0x04(%esp)
000015dd	movl	%esi,(%esp)
000015e0	calll	_sprintf
000015e5	movl	0x14(%ebp),%eax
000015e8	movl	%eax,0x08(%esp)
000015ec	movl	%esi,0x04(%esp)
000015f0	movl	0x08(%ebp),%eax
000015f3	movl	%eax,(%esp)
000015f6	calll	CQCGenerator::InitializeSMDPaths(char const*, char const*)
000015fb	movl	%esi,(%esp)
000015fe	calll	_strlen
00001603	movl	$0x00000003,%ecx
00001608	movl	0x08(%ebp),%ebx
0000160b	xorl	%edi,%edi
0000160d	nopl	(%eax)
00001610	testl	%eax,%eax
00001612	jle	0x00001630
00001614	cmpb	$0x5c,0xfffffbef(%ebp,%eax)
0000161c	leal	0xff(%eax),%eax
0000161f	sete	%dl
00001622	movzbl	%dl,%edx
00001625	subl	%edx,%ecx
00001627	jne	0x00001610
00001629	leal	0xfffffbf0(%ebp,%eax),%edi
00001630	movl	%esi,(%esp)
00001633	movl	$0x0000005c,0x04(%esp)
0000163b	calll	_strrchr
00001640	subl	%edi,%eax
00001642	movl	%eax,0x08(%esp)
00001646	incl	%edi
00001647	movl	%edi,0x04(%esp)
0000164b	leal	0x000005d8(%ebx),%eax
00001651	movl	%eax,(%esp)
00001654	calll	V_strncpy(char*, char const*, int)
00001659	movl	0x08(%ebp),%ecx
0000165c	movl	(%ecx),%eax
0000165e	movl	0x000000a0(%eax),%eax
00001664	movl	0x0c(%ebp),%edx
00001667	movl	%edx,0x04(%esp)
0000166b	movl	%ecx,(%esp)
0000166e	call	*%eax
00001670	leal	0xfffff7f0(%ebp),%ebx
00001676	movl	%ebx,(%esp)
00001679	movl	$0x00000400,0x08(%esp)
00001681	movl	strrchrcount(char*, int, int),0x04(%esp)
00001689	calll	_memset
0000168e	leal	0xfffff3f0(%ebp),%edi
00001694	movl	%edi,(%esp)
00001697	movl	$0x00000400,0x08(%esp)
0000169f	movl	strrchrcount(char*, int, int),0x04(%esp)
000016a7	calll	_memset
000016ac	movl	%ebx,0x04(%esp)
000016b0	movl	0xffffebcc(%ebp),%eax
000016b6	leal	0x6cb2a-0xfc1(%eax),%eax
000016bc	movl	%eax,(%esp)
000016bf	movl	$0x00000400,0x08(%esp)
000016c7	calll	GetVConfigRegistrySetting(char const*, char*, int)
000016cc	movl	0xffffebcc(%ebp),%esi
000016d2	leal	0x6cb33-0xfc1(%esi),%eax
000016d8	movl	%eax,0xffffebb8(%ebp)
000016de	movl	%eax,0x0c(%esp)
000016e2	movl	%ebx,0x08(%esp)
000016e6	leal	0x6cb52-0xfc1(%esi),%eax
000016ec	movl	%eax,0xffffebb4(%ebp)
000016f2	movl	%eax,0x04(%esp)
000016f6	movl	%edi,(%esp)
000016f9	calll	_sprintf
000016fe	movl	0x75730-0xfc1(%esi),%eax
00001704	movl	%eax,0xffffebc8(%ebp)
0000170a	movl	(%eax),%eax
0000170c	movl	0x04(%eax),%ecx
0000170f	movl	0x08(%ecx),%ecx
00001712	leal	0x6cb57-0xfc1(%esi),%edx
00001718	movl	%edx,0xffffebb0(%ebp)
0000171e	movl	%edx,0x08(%esp)
00001722	movl	%edi,0x04(%esp)
00001726	addl	$0x04,%eax
00001729	movl	%eax,(%esp)
0000172c	movl	strrchrcount(char*, int, int),0x0c(%esp)
00001734	call	*%ecx
00001736	movl	%eax,%esi
00001738	testl	%esi,%esi
0000173a	jne	0x000017c9
00001740	movl	%ebx,(%esp)
00001743	movl	$0x0000005c,0x04(%esp)
0000174b	calll	_strrchr
00001750	movb	strrchrcount(char*, int, int),(%eax)
00001753	movl	0xffffebcc(%ebp),%eax
00001759	leal	0x6cb5a-0xfc1(%eax),%eax
0000175f	movl	%eax,0x04(%esp)
00001763	movl	%ebx,(%esp)
00001766	movl	$0xffffffff,0x0c(%esp)
0000176e	movl	$0x00000400,0x08(%esp)
00001776	calll	V_strncat(char*, char const*, unsigned long, int)
0000177b	movl	0xffffebb8(%ebp),%eax
00001781	movl	%eax,0x0c(%esp)
00001785	movl	%ebx,0x08(%esp)
00001789	movl	0xffffebb4(%ebp),%eax
0000178f	movl	%eax,0x04(%esp)
00001793	movl	%edi,(%esp)
00001796	calll	_sprintf
0000179b	movl	0xffffebc8(%ebp),%eax
000017a1	movl	(%eax),%eax
000017a3	movl	0x04(%eax),%ecx
000017a6	movl	0x08(%ecx),%ecx
000017a9	movl	0xffffebb0(%ebp),%edx
000017af	movl	%edx,0x08(%esp)
000017b3	movl	%edi,0x04(%esp)
000017b7	addl	$0x04,%eax
000017ba	movl	%eax,(%esp)
000017bd	movl	strrchrcount(char*, int, int),0x0c(%esp)
000017c5	call	*%ecx
000017c7	movl	%eax,%esi
000017c9	movl	0xffffebc8(%ebp),%eax
000017cf	movl	(%eax),%eax
000017d1	movl	0x04(%eax),%ecx
000017d4	movl	0x18(%ecx),%ecx
000017d7	movl	%esi,0x04(%esp)
000017db	addl	$0x04,%eax
000017de	movl	%eax,(%esp)
000017e1	call	*%ecx
000017e3	movl	%eax,%ebx
000017e5	leal	0x01(%ebx),%ecx
000017e8	testl	%ecx,%ecx
000017ea	movl	$0xffffffff,%eax
000017ef	cmovnsl	%ecx,%eax
000017f2	movl	%eax,(%esp)
000017f5	calll	operator new[](unsigned long)
000017fa	movl	%eax,%edi
000017fc	movl	0xffffebc8(%ebp),%eax
00001802	movl	(%eax),%eax
00001804	movl	0x04(%eax),%ecx
00001807	movl	(%ecx),%ecx
00001809	movl	%esi,0x0c(%esp)
0000180d	movl	%ebx,0x08(%esp)
00001811	movl	%edi,0x04(%esp)
00001815	addl	$0x04,%eax
00001818	movl	%eax,(%esp)
0000181b	call	*%ecx
0000181d	movl	0xffffebcc(%ebp),%eax
00001823	leal	0x6ca66-0xfc1(%eax),%eax
00001829	movl	%eax,0x04(%esp)
0000182d	movl	0x08(%ebp),%eax
00001830	movl	%eax,(%esp)
00001833	movl	strrchrcount(char*, int, int),0x08(%esp)
0000183b	calll	vgui::Panel::FindChildByName(char const*, bool)
00001840	movl	%eax,0xffffebc8(%ebp)
00001846	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
00001850	testl	%edi,%edi
00001852	je	0x00001924
00001858	leal	0xffffebf0(%ebp),%eax
0000185e	movl	%eax,0x08(%esp)
00001862	leal	0xffffeff0(%ebp),%esi
00001868	movl	%esi,0x04(%esp)
0000186c	movl	%edi,(%esp)
0000186f	calll	ParseKeyvalue(char const*, char*, char*)
00001874	movl	%eax,%ebx
00001876	movl	0xffffebc8(%ebp),%ecx
0000187c	movl	(%ecx),%eax
0000187e	movl	0x00000474(%eax),%eax
00001884	movl	%esi,0x04(%esp)
00001888	movl	%ecx,(%esp)
0000188b	movl	strrchrcount(char*, int, int),0x08(%esp)
00001893	call	*%eax
00001895	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
000018a0	xorl	%edi,%edi
000018a2	testl	%ebx,%ebx
000018a4	je	0x00001850
000018a6	leal	0xffffebf0(%ebp),%eax
000018ac	movl	%eax,0x08(%esp)
000018b0	movl	%esi,0x04(%esp)
000018b4	movl	%ebx,(%esp)
000018b7	calll	ParseKeyvalue(char const*, char*, char*)
000018bc	movl	%eax,%edi
000018be	movl	0xffffebcc(%ebp),%eax
000018c4	leal	0x6cad7-0xfc1(%eax),%eax
000018ca	movl	%eax,0x04(%esp)
000018ce	movl	%esi,(%esp)
000018d1	calll	_strcasecmp
000018d6	testl	%eax,%eax
000018d8	movl	%edi,%ebx
000018da	je	0x00001850
000018e0	jmp	0x000018a0
000018e2	movl	%eax,%edi
000018e4	jmp	0x000019aa
000018e9	jmp	0x000018ed
000018eb	jmp	0x000018ed
000018ed	movl	%eax,%edi
000018ef	movl	0x08(%ebp),%ebx
000018f2	jmp	0x000018fe
000018f4	movl	%eax,%edi
000018f6	movl	%esi,(%esp)
000018f9	calll	operator delete(void*)
000018fe	movl	strrchrcount(char*, int, int),0x000007f4(%ebx)
00001908	movl	0x000007e8(%ebx),%eax
0000190e	cmpl	strrchrcount(char*, int, int),0x000007f0(%ebx)
00001915	jns	0x00001957
00001917	movl	%eax,0x000007f8(%ebx)
0000191d	jmp	0x000019aa
00001922	jmp	0x000018f4
00001924	movl	0xffffebbc(%ebp),%eax
0000192a	movl	%eax,(%esp)
0000192d	calll	QCInfo::SyncToControls()
00001932	movl	0x08(%ebp),%eax
00001935	movl	strrchrcount(char*, int, int),0x000002bc(%eax)
0000193f	movl	0xffffebc0(%ebp),%eax
00001945	movl	(%eax),%eax
00001947	cmpl	0xf0(%ebp),%eax
0000194a	jne	0x000019c4
0000194c	addl	$0x0000146c,%esp
00001952	popl	%esi
00001953	popl	%edi
00001954	popl	%ebx
00001955	popl	%ebp
00001956	ret
00001957	testl	%eax,%eax
00001959	jne	0x00001971
0000195b	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
00001965	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
0000196f	jmp	0x000019a0
00001971	movl	%eax,(%esp)
00001974	calll	_free
00001979	movl	strrchrcount(char*, int, int),0x000007e8(%ebx)
00001983	cmpl	strrchrcount(char*, int, int),0x000007f0(%ebx)
0000198a	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
00001994	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
0000199e	js	0x000019aa
000019a0	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
000019aa	movl	0xffffebc4(%ebp),%eax
000019b0	movl	%eax,0x04(%esp)
000019b4	movl	%ebx,(%esp)
000019b7	calll	vgui::EditablePanel::~EditablePanel()
000019bc	movl	%edi,(%esp)
000019bf	calll	__Unwind_Resume
000019c4	calll	___stack_chk_fail
000019c9	calll	std::terminate()
000019ce	nop
CQCGenerator::InitializeSMDPaths(char const*, char const*):
000019d0	pushl	%ebp
000019d1	movl	%esp,%ebp
000019d3	pushl	%ebx
000019d4	pushl	%edi
000019d5	pushl	%esi
000019d6	subl	$0x0000115c,%esp
000019dc	calll	0x000019e1
000019e1	popl	%edi
000019e2	movl	%edi,0xffffeeec(%ebp)
000019e8	movl	0x7572c-0x19e1(%edi),%eax
000019ee	movl	%eax,0xffffeec4(%ebp)
000019f4	movl	(%eax),%eax
000019f6	movl	%eax,0xf0(%ebp)
000019f9	movl	0x10(%ebp),%eax
000019fc	movl	%eax,0x04(%esp)
00001a00	movl	0x08(%ebp),%ebx
00001a03	leal	0x000006dc(%ebx),%eax
00001a09	movl	%eax,(%esp)
00001a0c	movl	$0x00000104,0x08(%esp)
00001a14	calll	V_strncpy(char*, char const*, int)
00001a19	movl	$0x00000004,(%esp)
00001a20	calll	operator new(unsigned long)
00001a25	movl	%eax,0xffffeecc(%ebp)
00001a2b	movl	strrchrcount(char*, int, int),(%eax)
00001a31	movl	0x75730-0x19e1(%edi),%esi
00001a37	movl	%esi,0xffffeec8(%ebp)
00001a3d	movl	(%esi),%ecx
00001a3f	movl	(%ecx),%eax
00001a41	leal	0x6cd55-0x19e1(%edi),%edx
00001a47	movl	%edx,0x08(%esp)
00001a4b	movl	0x0c(%ebp),%edx
00001a4e	movl	%edx,0x04(%esp)
00001a52	movl	%ecx,(%esp)
00001a55	movl	$0x00000001,0x0c(%esp)
00001a5d	call	*0x1c(%eax)
00001a60	movl	(%esi),%ecx
00001a62	movl	(%ecx),%eax
00001a64	movl	0xffffeecc(%ebp),%edx
00001a6a	movl	%edx,0x08(%esp)
00001a6e	leal	0x6cb20-0x19e1(%edi),%edx
00001a74	movl	%edx,0x04(%esp)
00001a78	movl	%ecx,(%esp)
00001a7b	call	*0x6c(%eax)
00001a7e	movl	%eax,%esi
00001a80	movl	0x10(%ebp),%eax
00001a83	movl	%eax,(%esp)
00001a86	leal	0x000003d0(%ebx),%eax
00001a8c	movl	%eax,0xffffeed4(%ebp)
00001a92	leal	0x000002cc(%ebx),%eax
00001a98	movl	%eax,0xffffeedc(%ebp)
00001a9e	movl	$0x00000001,%edi
00001aa3	calll	_strlen
00001aa8	movl	%eax,%ebx
00001aaa	movl	%ebx,0xffffeee0(%ebp)
00001ab0	xorb	%al,%al
00001ab2	movb	%al,0xffffeed3(%ebp)
00001ab8	movl	%esi,%eax
00001aba	movb	strrchrcount(char*, int, int),0xffffeedb(%ebp)
00001ac1	jmp	0x00001af8
00001ac3	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
00001ad0	movl	0xffffeee4(%ebp),%edi
00001ad6	movl	0xffffeee0(%ebp),%ebx
00001adc	movl	0xffffeec8(%ebp),%eax
00001ae2	movl	(%eax),%ecx
00001ae4	movl	(%ecx),%eax
00001ae6	movl	0xffffeecc(%ebp),%edx
00001aec	movl	(%edx),%edx
00001aee	movl	%edx,0x04(%esp)
00001af2	movl	%ecx,(%esp)
00001af5	call	*0x70(%eax)
00001af8	testl	%eax,%eax
00001afa	je	0x00001d18
00001b00	movl	%ebx,0x08(%esp)
00001b04	movl	%eax,0x04(%esp)
00001b08	movl	%eax,%esi
00001b0a	movl	0x10(%ebp),%eax
00001b0d	movl	%eax,(%esp)
00001b10	calll	_strncmp
00001b15	testl	%eax,%eax
00001b17	jne	0x00001adc
00001b19	movl	%edi,0xffffeee4(%ebp)
00001b1f	movl	0xffffeeec(%ebp),%eax
00001b25	leal	0x6cd5d-0x19e1(%eax),%eax
00001b2b	movl	%eax,0x04(%esp)
00001b2f	leal	(%esi,%ebx),%edi
00001b32	movl	%esi,0xffffeee8(%ebp)
00001b38	movl	%edi,(%esp)
00001b3b	movl	$0x00000004,0x08(%esp)
00001b43	calll	_strncmp
00001b48	testl	%eax,%eax
00001b4a	je	0x00001b70
00001b4c	movl	0xffffeeec(%ebp),%eax
00001b52	leal	0x6cd62-0x19e1(%eax),%eax
00001b58	movl	%eax,0x04(%esp)
00001b5c	movl	%edi,(%esp)
00001b5f	movl	$0x00000004,0x08(%esp)
00001b67	calll	_strncmp
00001b6c	testl	%eax,%eax
00001b6e	jne	0x00001bb6
00001b70	movl	0x0c(%ebp),%eax
00001b73	movl	%eax,0x04(%esp)
00001b77	movl	0xffffeedc(%ebp),%ebx
00001b7d	movl	%ebx,(%esp)
00001b80	movl	$0x00000104,0x08(%esp)
00001b88	calll	V_strncpy(char*, char const*, int)
00001b8d	movl	0xffffeee8(%ebp),%eax
00001b93	movl	%eax,0x04(%esp)
00001b97	movl	%ebx,(%esp)
00001b9a	movl	$0xffffffff,0x0c(%esp)
00001ba2	movl	$0x00000104,0x08(%esp)
00001baa	calll	V_strncat(char*, char const*, unsigned long, int)
00001baf	movb	$0x01,0xffffeedb(%ebp)
00001bb6	movl	0xffffeeec(%ebp),%eax
00001bbc	leal	0x6cd67-0x19e1(%eax),%eax
00001bc2	movl	%eax,0x04(%esp)
00001bc6	movl	%edi,(%esp)
00001bc9	movl	$0x00000004,0x08(%esp)
00001bd1	calll	_strncmp
00001bd6	testl	%eax,%eax
00001bd8	je	0x00001bfe
00001bda	movl	0xffffeeec(%ebp),%eax
00001be0	leal	0x6cd6c-0x19e1(%eax),%eax
00001be6	movl	%eax,0x04(%esp)
00001bea	movl	%edi,(%esp)
00001bed	movl	$0x00000004,0x08(%esp)
00001bf5	calll	_strncmp
00001bfa	testl	%eax,%eax
00001bfc	jne	0x00001c44
00001bfe	movl	0x0c(%ebp),%eax
00001c01	movl	%eax,0x04(%esp)
00001c05	movl	0xffffeed4(%ebp),%ebx
00001c0b	movl	%ebx,(%esp)
00001c0e	movl	$0x00000104,0x08(%esp)
00001c16	calll	V_strncpy(char*, char const*, int)
00001c1b	movl	0xffffeee8(%ebp),%eax
00001c21	movl	%eax,0x04(%esp)
00001c25	movl	%ebx,(%esp)
00001c28	movl	$0xffffffff,0x0c(%esp)
00001c30	movl	$0x00000104,0x08(%esp)
00001c38	calll	V_strncat(char*, char const*, unsigned long, int)
00001c3d	movb	$0x01,0xffffeed3(%ebp)
00001c44	movl	0xffffeeec(%ebp),%eax
00001c4a	leal	0x6cd71-0x19e1(%eax),%eax
00001c50	movl	%eax,0x04(%esp)
00001c54	movl	%edi,(%esp)
00001c57	movl	$0x00000004,0x08(%esp)
00001c5f	calll	_strncmp
00001c64	testl	%eax,%eax
00001c66	jne	0x00001ad0
00001c6c	movl	0xffffeeec(%ebp),%edi
00001c72	leal	0xfffffef1(%ebp),%ebx
00001c78	movl	%ebx,(%esp)
00001c7b	calll	_strlen
00001c80	movl	0xffffeee4(%ebp),%esi
00001c86	movl	%esi,0x0c(%esp)
00001c8a	leal	0x6cd76-0x19e1(%edi),%ecx
00001c90	movl	%ecx,0x08(%esp)
00001c94	movl	%eax,0x04(%esp)
00001c98	movl	%ebx,(%esp)
00001c9b	calll	V_snprintf(char*, int, char const*, ...)
00001ca0	movl	$0x00000020,(%esp)
00001ca7	calll	KeyValues::operator new(unsigned long)
00001cac	movl	%eax,%ecx
00001cae	leal	0x6cd7c-0x19e1(%edi),%eax
00001cb4	movl	%eax,0x14(%esp)
00001cb8	leal	0x6ca9a-0x19e1(%edi),%eax
00001cbe	movl	%eax,0x10(%esp)
00001cc2	movl	0xffffeee8(%ebp),%eax
00001cc8	movl	%eax,0x0c(%esp)
00001ccc	leal	0x6ca95-0x19e1(%edi),%eax
00001cd2	movl	%ecx,%edi
00001cd4	movl	%eax,0x08(%esp)
00001cd8	movl	%ebx,0x04(%esp)
00001cdc	movl	%edi,(%esp)
00001cdf	calll	KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*)
00001ce4	movl	0x08(%ebp),%ebx
00001ce7	movl	0x000002b8(%ebx),%ecx
00001ced	movl	(%ecx),%eax
00001cef	movl	%esi,0x08(%esp)
00001cf3	movl	%edi,0x04(%esp)
00001cf7	movl	%ecx,(%esp)
00001cfa	movl	strrchrcount(char*, int, int),0x10(%esp)
00001d02	movl	strrchrcount(char*, int, int),0x0c(%esp)
00001d0a	call	*0x00000390(%eax)
00001d10	incl	%esi
00001d11	movl	%esi,%edi
00001d13	jmp	0x00001ad6
00001d18	leal	0xfffff6f1(%ebp),%eax
00001d1e	movl	%eax,(%esp)
00001d21	movl	$0x00000800,0x08(%esp)
00001d29	movl	strrchrcount(char*, int, int),0x04(%esp)
00001d31	calll	_memset
00001d36	leal	0xfffff2f1(%ebp),%esi
00001d3c	movl	%esi,(%esp)
00001d3f	movl	$0x00000400,0x08(%esp)
00001d47	movl	strrchrcount(char*, int, int),0x04(%esp)
00001d4f	calll	_memset
00001d54	leal	0xffffeef1(%ebp),%eax
00001d5a	movl	%eax,(%esp)
00001d5d	movl	$0x00000400,0x08(%esp)
00001d65	movl	strrchrcount(char*, int, int),0x04(%esp)
00001d6d	calll	_memset
00001d72	andb	$0x01,0xffffeedb(%ebp)
00001d79	jne	0x00001e22
00001d7f	movl	0x0c(%ebp),%ebx
00001d82	movl	%ebx,0x04(%esp)
00001d86	movl	0xffffeedc(%ebp),%ebx
00001d8c	movl	%ebx,(%esp)
00001d8f	movl	$0xffffffff,0x0c(%esp)
00001d97	movl	$0x00000104,0x08(%esp)
00001d9f	calll	V_strncat(char*, char const*, unsigned long, int)
00001da4	movl	0x10(%ebp),%esi
00001da7	movl	%esi,0x04(%esp)
00001dab	movl	%ebx,(%esp)
00001dae	movl	$0xffffffff,0x0c(%esp)
00001db6	movl	$0x00000104,0x08(%esp)
00001dbe	calll	V_strncat(char*, char const*, unsigned long, int)
00001dc3	movl	0xffffeeec(%ebp),%edi
00001dc9	leal	0x6cd62-0x19e1(%edi),%eax
00001dcf	movl	%eax,0x04(%esp)
00001dd3	movl	%ebx,(%esp)
00001dd6	movl	$0xffffffff,0x0c(%esp)
00001dde	movl	$0x00000104,0x08(%esp)
00001de6	calll	V_strncat(char*, char const*, unsigned long, int)
00001deb	movl	%ebx,0x1c(%esp)
00001def	movl	%esi,0x18(%esp)
00001df3	movl	0x0c(%ebp),%eax
00001df6	movl	%eax,0x14(%esp)
00001dfa	movl	%esi,0x10(%esp)
00001dfe	leal	0xfffff2f1(%ebp),%esi
00001e04	movl	%eax,0x0c(%esp)
00001e08	leal	0x6cd7f-0x19e1(%edi),%eax
00001e0e	movl	%eax,0x08(%esp)
00001e12	movl	%esi,(%esp)
00001e15	movl	$0x00000400,0x04(%esp)
00001e1d	calll	V_snprintf(char*, int, char const*, ...)
00001e22	movb	0xffffeed3(%ebp),%cl
00001e28	testb	$0x01,%cl
00001e2b	leal	0xffffeef1(%ebp),%edi
00001e31	jne	0x00001e8d
00001e33	movl	0x10(%ebp),%eax
00001e36	movl	%eax,0x10(%esp)
00001e3a	movl	0x0c(%ebp),%eax
00001e3d	movl	%eax,0x0c(%esp)
00001e41	movl	0xffffeeec(%ebp),%eax
00001e47	leal	0x6ce04-0x19e1(%eax),%eax
00001e4d	movl	%eax,0x08(%esp)
00001e51	movl	%edi,(%esp)
00001e54	movl	$0x00000400,0x04(%esp)
00001e5c	calll	V_snprintf(char*, int, char const*, ...)
00001e61	movl	0xffffeedc(%ebp),%eax
00001e67	movl	%eax,0x04(%esp)
00001e6b	movl	0xffffeed4(%ebp),%eax
00001e71	movl	%eax,(%esp)
00001e74	movl	$0x00000104,0x08(%esp)
00001e7c	calll	V_strncpy(char*, char const*, int)
00001e81	movl	0x08(%ebp),%ebx
00001e84	movb	$0x01,0x000007e3(%ebx)
00001e8b	jmp	0x00001e9a
00001e8d	movb	0xffffeedb(%ebp),%al
00001e93	testb	%cl,%al
00001e95	movl	0x08(%ebp),%ebx
00001e98	jne	0x00001eec
00001e9a	movl	%esi,0x04(%esp)
00001e9e	leal	0xfffff6f1(%ebp),%esi
00001ea4	movl	%esi,(%esp)
00001ea7	movl	$0x00000800,0x08(%esp)
00001eaf	calll	V_strncpy(char*, char const*, int)
00001eb4	movl	%edi,0x04(%esp)
00001eb8	movl	%esi,(%esp)
00001ebb	movl	$0xffffffff,0x0c(%esp)
00001ec3	movl	$0x00000800,0x08(%esp)
00001ecb	calll	V_strncat(char*, char const*, unsigned long, int)
00001ed0	movl	%esi,0x08(%esp)
00001ed4	movl	0xffffeeec(%ebp),%eax
00001eda	leal	0x6ce71-0x19e1(%eax),%eax
00001ee0	movl	%eax,0x04(%esp)
00001ee4	movl	%ebx,(%esp)
00001ee7	calll	VGUIMessageBox(vgui::Panel*, char const*, char const*, ...)
00001eec	movl	0xffffeec4(%ebp),%eax
00001ef2	movl	(%eax),%eax
00001ef4	cmpl	0xf0(%ebp),%eax
00001ef7	jne	0x00001f18
00001ef9	addl	$0x0000115c,%esp
00001eff	popl	%esi
00001f00	popl	%edi
00001f01	popl	%ebx
00001f02	popl	%ebp
00001f03	ret
00001f04	movl	%edi,%ecx
00001f06	movl	%eax,%edi
00001f08	movl	%ecx,(%esp)
00001f0b	calll	KeyValues::operator delete(void*)
00001f10	movl	%edi,(%esp)
00001f13	calll	__Unwind_Resume
00001f18	calll	___stack_chk_fail
00001f1d	calll	std::terminate()
00001f22	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::CQCGenerator(vgui::Panel*, char const*, char const*):
00001f30	pushl	%ebp
00001f31	movl	%esp,%ebp
00001f33	pushl	%ebx
00001f34	pushl	%edi
00001f35	pushl	%esi
00001f36	subl	$0x0000146c,%esp
00001f3c	calll	0x00001f41
00001f41	popl	%edi
00001f42	movl	0x7572c-0x1f41(%edi),%eax
00001f48	movl	%eax,0xffffebc0(%ebp)
00001f4e	movl	(%eax),%eax
00001f50	movl	%eax,0xf0(%ebp)
00001f53	leal	0x6cad9-0x1f41(%edi),%eax
00001f59	movl	%eax,0x0c(%esp)
00001f5d	movl	0x10(%ebp),%eax
00001f60	movl	%eax,0x08(%esp)
00001f64	movl	0x0c(%ebp),%esi
00001f67	leal	0x04(%esi),%eax
00001f6a	movl	%eax,0xffffebc4(%ebp)
00001f70	movl	%eax,0x04(%esp)
00001f74	movl	0x08(%ebp),%ebx
00001f77	movl	%ebx,(%esp)
00001f7a	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00001f7f	movl	(%esi),%eax
00001f81	movl	%eax,(%ebx)
00001f83	testb	$0x01,CQCGenerator::ChainToMap()::chained-0x1f41(%edi)
00001f8a	jne	0x00001fc1
00001f8c	movb	$0x01,CQCGenerator::ChainToMap()::chained-0x1f41(%edi)
00001f93	leal	0x6cebe-0x1f41(%edi),%eax
00001f99	movl	%eax,(%esp)
00001f9c	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001fa1	movl	%eax,%esi
00001fa3	leal	CQCGenerator::GetPanelClassName()-0x1f41(%edi),%eax
00001fa9	movl	%eax,0x1c(%esi)
00001fac	testl	%esi,%esi
00001fae	je	0x00001fc1
00001fb0	leal	0x6cef6-0x1f41(%edi),%eax
00001fb6	movl	%eax,(%esp)
00001fb9	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001fbe	movl	%eax,0x18(%esi)
00001fc1	testb	$0x01,CQCGenerator::ChainToAnimationMap()::chained-0x1f41(%edi)
00001fc8	jne	0x00001fff
00001fca	movb	$0x01,CQCGenerator::ChainToAnimationMap()::chained-0x1f41(%edi)
00001fd1	leal	0x6cebe-0x1f41(%edi),%eax
00001fd7	movl	%eax,(%esp)
00001fda	calll	FindOrAddPanelAnimationMap(char const*)
00001fdf	movl	%eax,%esi
00001fe1	leal	CQCGenerator::GetPanelClassName()-0x1f41(%edi),%eax
00001fe7	movl	%eax,0x18(%esi)
00001fea	testl	%esi,%esi
00001fec	je	0x00001fff
00001fee	leal	0x6cef6-0x1f41(%edi),%eax
00001ff4	movl	%eax,(%esp)
00001ff7	calll	FindOrAddPanelAnimationMap(char const*)
00001ffc	movl	%eax,0x14(%esi)
00001fff	testb	$0x01,CQCGenerator::KB_ChainToMap()::chained-0x1f41(%edi)
00002006	jne	0x0000203d
00002008	movb	$0x01,CQCGenerator::KB_ChainToMap()::chained-0x1f41(%edi)
0000200f	leal	0x6cebe-0x1f41(%edi),%eax
00002015	movl	%eax,(%esp)
00002018	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000201d	movl	%eax,%esi
0000201f	leal	CQCGenerator::GetPanelClassName()-0x1f41(%edi),%eax
00002025	movl	%eax,0x44(%esi)
00002028	testl	%esi,%esi
0000202a	je	0x0000203d
0000202c	leal	0x6cef6-0x1f41(%edi),%eax
00002032	movl	%eax,(%esp)
00002035	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000203a	movl	%eax,0x18(%esi)
0000203d	testb	$0x01,CQCGenerator::PanelMessageFunc_OnNewLODText::InitVar()::bAdded-0x1f41(%edi)
00002044	jne	0x000020a5
00002046	movb	$0x01,CQCGenerator::PanelMessageFunc_OnNewLODText::InitVar()::bAdded-0x1f41(%edi)
0000204d	movl	strrchrcount(char*, int, int),0xffffebd4(%ebp)
00002057	movl	$0x000003ad,0xffffebd0(%ebp)
00002061	movsd	0xffffebd0(%ebp),%xmm0
00002069	movsd	%xmm0,0x04(%esp)
0000206f	leal	0x6ceea-0x1f41(%edi),%eax
00002075	movl	%eax,(%esp)
00002078	movl	strrchrcount(char*, int, int),0x1c(%esp)
00002080	movl	strrchrcount(char*, int, int),0x18(%esp)
00002088	movl	strrchrcount(char*, int, int),0x14(%esp)
00002090	movl	strrchrcount(char*, int, int),0x10(%esp)
00002098	movl	strrchrcount(char*, int, int),0x0c(%esp)
000020a0	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000020a5	testb	$0x01,CQCGenerator::PanelMessageFunc_OnBrowse::InitVar()::bAdded-0x1f41(%edi)
000020ac	jne	0x0000210d
000020ae	movb	$0x01,CQCGenerator::PanelMessageFunc_OnBrowse::InitVar()::bAdded-0x1f41(%edi)
000020b5	movl	strrchrcount(char*, int, int),0xffffebdc(%ebp)
000020bf	movl	$0x000003b1,0xffffebd8(%ebp)
000020c9	movsd	0xffffebd8(%ebp),%xmm0
000020d1	movsd	%xmm0,0x04(%esp)
000020d7	leal	0x6cab3-0x1f41(%edi),%eax
000020dd	movl	%eax,(%esp)
000020e0	movl	strrchrcount(char*, int, int),0x1c(%esp)
000020e8	movl	strrchrcount(char*, int, int),0x18(%esp)
000020f0	movl	strrchrcount(char*, int, int),0x14(%esp)
000020f8	movl	$0x00000006,0x10(%esp)
00002100	movl	$0x00000001,0x0c(%esp)
00002108	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
0000210d	testb	$0x01,CQCGenerator::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x1f41(%edi)
00002114	jne	0x00002175
00002116	movb	$0x01,CQCGenerator::PanelMessageFunc_OnFileSelected::InitVar()::bAdded-0x1f41(%edi)
0000211d	movl	strrchrcount(char*, int, int),0xffffebe4(%ebp)
00002127	movl	$0x000003b5,0xffffebe0(%ebp)
00002131	movsd	0xffffebe0(%ebp),%xmm0
00002139	movsd	%xmm0,0x04(%esp)
0000213f	leal	0x6cedd-0x1f41(%edi),%eax
00002145	movl	%eax,(%esp)
00002148	movl	strrchrcount(char*, int, int),0x1c(%esp)
00002150	movl	strrchrcount(char*, int, int),0x18(%esp)
00002158	movl	strrchrcount(char*, int, int),0x14(%esp)
00002160	movl	$0x00000006,0x10(%esp)
00002168	movl	$0x00000001,0x0c(%esp)
00002170	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00002175	testb	$0x01,CQCGenerator::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x1f41(%edi)
0000217c	jne	0x000021dd
0000217e	movb	$0x01,CQCGenerator::PanelMessageFunc_OnDirectorySelected::InitVar()::bAdded-0x1f41(%edi)
00002185	movl	strrchrcount(char*, int, int),0xffffebec(%ebp)
0000218f	movl	$0x000003b9,0xffffebe8(%ebp)
00002199	movsd	0xffffebe8(%ebp),%xmm0
000021a1	movsd	%xmm0,0x04(%esp)
000021a7	leal	0x6cecb-0x1f41(%edi),%eax
000021ad	movl	%eax,(%esp)
000021b0	movl	strrchrcount(char*, int, int),0x1c(%esp)
000021b8	movl	strrchrcount(char*, int, int),0x18(%esp)
000021c0	movl	strrchrcount(char*, int, int),0x14(%esp)
000021c8	movl	$0x00000006,0x10(%esp)
000021d0	movl	$0x00000001,0x0c(%esp)
000021d8	calll	CQCGenerator::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000021dd	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
000021e7	movl	strrchrcount(char*, int, int),0x000007e8(%ebx)
000021f1	movl	strrchrcount(char*, int, int),0x000007f4(%ebx)
000021fb	movl	strrchrcount(char*, int, int),0x000007f0(%ebx)
00002205	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
0000220f	movl	%ebx,0x000002c8(%ebx)
00002215	movb	strrchrcount(char*, int, int),0x000002cc(%ebx)
0000221c	movb	strrchrcount(char*, int, int),0x000003d0(%ebx)
00002223	movl	$0x00746c75,0x000004d8(%ebx)
0000222d	movl	$0x61666564,0x000004d4(%ebx)
00002237	movw	strrchrcount(char*, int, int),0x000007e4(%ebx)
00002240	movl	strrchrcount(char*, int, int),0x000007e0(%ebx)
0000224a	movb	$0x01,0x000007e6(%ebx)
00002251	movl	$0x3f800000,0x000007fc(%ebx)
0000225b	movl	$0x41200000,0x00000800(%ebx)
00002265	movl	%ebx,(%esp)
00002268	movl	$0x00000302,0x08(%esp)
00002270	movl	$0x0000034e,0x04(%esp)
00002278	calll	vgui::Panel::SetMinimumSize(int, int)
0000227d	movl	$0x00000280,(%esp)
00002284	calll	operator new(unsigned long)
00002289	movl	%eax,%esi
0000228b	leal	0x6ca8d-0x1f41(%edi),%eax
00002291	movl	%eax,0x08(%esp)
00002295	movl	0x08(%ebp),%ebx
00002298	movl	%ebx,0x04(%esp)
0000229c	movl	%esi,(%esp)
0000229f	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
000022a4	movl	%esi,0x000002b8(%ebx)
000022aa	movl	(%esi),%eax
000022ac	movl	0x00000410(%eax),%eax
000022b2	movl	%esi,(%esp)
000022b5	movl	$0x00000001,0x04(%esp)
000022bd	call	*%eax
000022bf	movl	0x08(%ebp),%eax
000022c2	movl	0x000002b8(%eax),%ecx
000022c8	movl	(%ecx),%eax
000022ca	movl	0x0000034c(%eax),%eax
000022d0	leal	0x6cae5-0x1f41(%edi),%edx
000022d6	movl	%edx,0x0c(%esp)
000022da	leal	0x6ca95-0x1f41(%edi),%edx
000022e0	movl	%edi,%esi
000022e2	movl	%edx,0x08(%esp)
000022e6	movl	%ecx,(%esp)
000022e9	movl	strrchrcount(char*, int, int),0x14(%esp)
000022f1	movl	$0x000001c2,0x10(%esp)
000022f9	movl	strrchrcount(char*, int, int),0x04(%esp)
00002301	call	*%eax
00002303	movl	0x08(%ebp),%eax
00002306	movl	0x000002b8(%eax),%ecx
0000230c	movl	(%ecx),%eax
0000230e	movl	0x0000034c(%eax),%eax
00002314	movl	%esi,0xffffebcc(%ebp)
0000231a	leal	0x6caed-0x1f41(%esi),%edx
00002320	movl	%edx,0x0c(%esp)
00002324	leal	0x6ca9a-0x1f41(%esi),%edx
0000232a	movl	%edx,0x08(%esp)
0000232e	movl	%ecx,(%esp)
00002331	movl	strrchrcount(char*, int, int),0x14(%esp)
00002339	movl	$0x00000032,0x10(%esp)
00002341	movl	$0x00000001,0x04(%esp)
00002349	call	*%eax
0000234b	movl	0x08(%ebp),%edx
0000234e	movl	0x000002b8(%edx),%eax
00002354	movl	(%eax),%ecx
00002356	movl	0x000000b4(%ecx),%ecx
0000235c	movl	%edx,0x04(%esp)
00002360	movl	%eax,(%esp)
00002363	call	*%ecx
00002365	movl	0x08(%ebp),%eax
00002368	movl	0x000002b8(%eax),%ecx
0000236e	movl	(%ecx),%eax
00002370	movl	0x0000021c(%eax),%eax
00002376	movl	%ecx,(%esp)
00002379	movl	$0x00000001,0x04(%esp)
00002381	call	*%eax
00002383	movl	0x08(%ebp),%edx
00002386	movl	(%edx),%eax
00002388	movl	0x00000348(%eax),%eax
0000238e	movl	0xffffebcc(%ebp),%ecx
00002394	leal	0x6cafa-0x1f41(%ecx),%ecx
0000239a	movl	%ecx,0x04(%esp)
0000239e	movl	%edx,(%esp)
000023a1	movl	strrchrcount(char*, int, int),0x10(%esp)
000023a9	movl	strrchrcount(char*, int, int),0x0c(%esp)
000023b1	movl	strrchrcount(char*, int, int),0x08(%esp)
000023b9	call	*%eax
000023bb	movl	$0x00000234,(%esp)
000023c2	calll	operator new(unsigned long)
000023c7	movl	%eax,%esi
000023c9	movl	0x08(%ebp),%ebx
000023cc	movl	%ebx,0x04(%esp)
000023d0	movl	%esi,(%esp)
000023d3	calll	CBrowseButton::CBrowseButton(vgui::Panel*)
000023d8	movl	%esi,0x000001b0(%ebx)
000023de	movl	%esi,(%esp)
000023e1	movl	$0x00000018,0x08(%esp)
000023e9	movl	$0x00000018,0x04(%esp)
000023f1	calll	vgui::Panel::SetSize(int, int)
000023f6	movl	%esi,(%esp)
000023f9	movl	$0x0000009e,0x08(%esp)
00002401	movl	$0x00000328,0x04(%esp)
00002409	calll	vgui::Panel::SetPos(int, int)
0000240e	movl	0xffffebcc(%ebp),%eax
00002414	leal	0x6cb0a-0x1f41(%eax),%eax
0000241a	movl	%eax,0x04(%esp)
0000241e	movl	%esi,(%esp)
00002421	calll	vgui::Panel::SetName(char const*)
00002426	movl	0x14(%ebp),%ebx
00002429	movl	%ebx,0x08(%esp)
0000242d	leal	0x00000228(%esi),%eax
00002433	movl	%eax,0x04(%esp)
00002437	calll	CBrowseButton::SetCharVar(char**, char const*)
0000243c	movl	0x08(%ebp),%eax
0000243f	leal	0x000002c8(%eax),%eax
00002445	movl	%eax,0xffffebbc(%ebp)
0000244b	movl	0x0000022c(%esi),%edi
00002451	testl	%edi,%edi
00002453	je	0x00002483
00002455	movl	0xffffebcc(%ebp),%eax
0000245b	leal	0x6cb20-0x1f41(%eax),%eax
00002461	movl	%eax,0x04(%esp)
00002465	movl	%edi,(%esp)
00002468	calll	_strcmp
0000246d	testl	%eax,%eax
0000246f	je	0x000024b5
00002471	movl	%edi,(%esp)
00002474	calll	operator delete[](void*)
00002479	movl	strrchrcount(char*, int, int),0x0000022c(%esi)
00002483	movl	$0x00000006,(%esp)
0000248a	calll	operator new[](unsigned long)
0000248f	movl	%eax,0x0000022c(%esi)
00002495	movl	0xffffebcc(%ebp),%ecx
0000249b	leal	0x6cb20-0x1f41(%ecx),%ecx
000024a1	movl	%ecx,0x04(%esp)
000024a5	movl	%eax,(%esp)
000024a8	movl	$0x00000006,0x08(%esp)
000024b0	calll	V_strncpy(char*, char const*, int)
000024b5	movl	0x00000230(%esi),%edi
000024bb	testl	%edi,%edi
000024bd	je	0x000024ed
000024bf	movl	0xffffebcc(%ebp),%eax
000024c5	leal	0x6ca54-0x1f41(%eax),%eax
000024cb	movl	%eax,0x04(%esp)
000024cf	movl	%edi,(%esp)
000024d2	calll	_strcmp
000024d7	testl	%eax,%eax
000024d9	je	0x0000251f
000024db	movl	%edi,(%esp)
000024de	calll	operator delete[](void*)
000024e3	movl	strrchrcount(char*, int, int),0x00000230(%esi)
000024ed	movl	$0x00000012,(%esp)
000024f4	calll	operator new[](unsigned long)
000024f9	movl	%eax,0x00000230(%esi)
000024ff	movl	0xffffebcc(%ebp),%ecx
00002505	leal	0x6ca54-0x1f41(%ecx),%ecx
0000250b	movl	%ecx,0x04(%esp)
0000250f	movl	%eax,(%esp)
00002512	movl	$0x00000012,0x08(%esp)
0000251a	calll	V_strncpy(char*, char const*, int)
0000251f	movl	%esi,(%esp)
00002522	calll	CBrowseButton::SetActionMessage()
00002527	leal	0xfffffbf0(%ebp),%esi
0000252d	movl	%esi,(%esp)
00002530	movl	$0x00000400,0x08(%esp)
00002538	movl	strrchrcount(char*, int, int),0x04(%esp)
00002540	calll	_memset
00002545	movl	%ebx,0x08(%esp)
00002549	movl	0xffffebcc(%ebp),%eax
0000254f	leal	0x6cb26-0x1f41(%eax),%eax
00002555	movl	%eax,0x04(%esp)
00002559	movl	%esi,(%esp)
0000255c	calll	_sprintf
00002561	movl	0x18(%ebp),%eax
00002564	movl	%eax,0x08(%esp)
00002568	movl	%esi,0x04(%esp)
0000256c	movl	0x08(%ebp),%eax
0000256f	movl	%eax,(%esp)
00002572	calll	CQCGenerator::InitializeSMDPaths(char const*, char const*)
00002577	movl	%esi,(%esp)
0000257a	calll	_strlen
0000257f	movl	$0x00000003,%ecx
00002584	movl	0x08(%ebp),%ebx
00002587	xorl	%edi,%edi
00002589	nopl	strrchrcount(char*, int, int)(%eax)
00002590	testl	%eax,%eax
00002592	jle	0x000025b0
00002594	cmpb	$0x5c,0xfffffbef(%ebp,%eax)
0000259c	leal	0xff(%eax),%eax
0000259f	sete	%dl
000025a2	movzbl	%dl,%edx
000025a5	subl	%edx,%ecx
000025a7	jne	0x00002590
000025a9	leal	0xfffffbf0(%ebp,%eax),%edi
000025b0	movl	%esi,(%esp)
000025b3	movl	$0x0000005c,0x04(%esp)
000025bb	calll	_strrchr
000025c0	subl	%edi,%eax
000025c2	movl	%eax,0x08(%esp)
000025c6	incl	%edi
000025c7	movl	%edi,0x04(%esp)
000025cb	leal	0x000005d8(%ebx),%eax
000025d1	movl	%eax,(%esp)
000025d4	calll	V_strncpy(char*, char const*, int)
000025d9	movl	0x08(%ebp),%ecx
000025dc	movl	(%ecx),%eax
000025de	movl	0x000000a0(%eax),%eax
000025e4	movl	0x10(%ebp),%edx
000025e7	movl	%edx,0x04(%esp)
000025eb	movl	%ecx,(%esp)
000025ee	call	*%eax
000025f0	leal	0xfffff7f0(%ebp),%ebx
000025f6	movl	%ebx,(%esp)
000025f9	movl	$0x00000400,0x08(%esp)
00002601	movl	strrchrcount(char*, int, int),0x04(%esp)
00002609	calll	_memset
0000260e	leal	0xfffff3f0(%ebp),%edi
00002614	movl	%edi,(%esp)
00002617	movl	$0x00000400,0x08(%esp)
0000261f	movl	strrchrcount(char*, int, int),0x04(%esp)
00002627	calll	_memset
0000262c	movl	%ebx,0x04(%esp)
00002630	movl	0xffffebcc(%ebp),%eax
00002636	leal	0x6cb2a-0x1f41(%eax),%eax
0000263c	movl	%eax,(%esp)
0000263f	movl	$0x00000400,0x08(%esp)
00002647	calll	GetVConfigRegistrySetting(char const*, char*, int)
0000264c	movl	0xffffebcc(%ebp),%esi
00002652	leal	0x6cb33-0x1f41(%esi),%eax
00002658	movl	%eax,0xffffebb8(%ebp)
0000265e	movl	%eax,0x0c(%esp)
00002662	movl	%ebx,0x08(%esp)
00002666	leal	0x6cb52-0x1f41(%esi),%eax
0000266c	movl	%eax,0xffffebb4(%ebp)
00002672	movl	%eax,0x04(%esp)
00002676	movl	%edi,(%esp)
00002679	calll	_sprintf
0000267e	movl	0x75730-0x1f41(%esi),%eax
00002684	movl	%eax,0xffffebc8(%ebp)
0000268a	movl	(%eax),%eax
0000268c	movl	0x04(%eax),%ecx
0000268f	movl	0x08(%ecx),%ecx
00002692	leal	0x6cb57-0x1f41(%esi),%edx
00002698	movl	%edx,0xffffebb0(%ebp)
0000269e	movl	%edx,0x08(%esp)
000026a2	movl	%edi,0x04(%esp)
000026a6	addl	$0x04,%eax
000026a9	movl	%eax,(%esp)
000026ac	movl	strrchrcount(char*, int, int),0x0c(%esp)
000026b4	call	*%ecx
000026b6	movl	%eax,%esi
000026b8	testl	%esi,%esi
000026ba	jne	0x00002749
000026c0	movl	%ebx,(%esp)
000026c3	movl	$0x0000005c,0x04(%esp)
000026cb	calll	_strrchr
000026d0	movb	strrchrcount(char*, int, int),(%eax)
000026d3	movl	0xffffebcc(%ebp),%eax
000026d9	leal	0x6cb5a-0x1f41(%eax),%eax
000026df	movl	%eax,0x04(%esp)
000026e3	movl	%ebx,(%esp)
000026e6	movl	$0xffffffff,0x0c(%esp)
000026ee	movl	$0x00000400,0x08(%esp)
000026f6	calll	V_strncat(char*, char const*, unsigned long, int)
000026fb	movl	0xffffebb8(%ebp),%eax
00002701	movl	%eax,0x0c(%esp)
00002705	movl	%ebx,0x08(%esp)
00002709	movl	0xffffebb4(%ebp),%eax
0000270f	movl	%eax,0x04(%esp)
00002713	movl	%edi,(%esp)
00002716	calll	_sprintf
0000271b	movl	0xffffebc8(%ebp),%eax
00002721	movl	(%eax),%eax
00002723	movl	0x04(%eax),%ecx
00002726	movl	0x08(%ecx),%ecx
00002729	movl	0xffffebb0(%ebp),%edx
0000272f	movl	%edx,0x08(%esp)
00002733	movl	%edi,0x04(%esp)
00002737	addl	$0x04,%eax
0000273a	movl	%eax,(%esp)
0000273d	movl	strrchrcount(char*, int, int),0x0c(%esp)
00002745	call	*%ecx
00002747	movl	%eax,%esi
00002749	movl	0xffffebc8(%ebp),%eax
0000274f	movl	(%eax),%eax
00002751	movl	0x04(%eax),%ecx
00002754	movl	0x18(%ecx),%ecx
00002757	movl	%esi,0x04(%esp)
0000275b	addl	$0x04,%eax
0000275e	movl	%eax,(%esp)
00002761	call	*%ecx
00002763	movl	%eax,%ebx
00002765	leal	0x01(%ebx),%ecx
00002768	testl	%ecx,%ecx
0000276a	movl	$0xffffffff,%eax
0000276f	cmovnsl	%ecx,%eax
00002772	movl	%eax,(%esp)
00002775	calll	operator new[](unsigned long)
0000277a	movl	%eax,%edi
0000277c	movl	0xffffebc8(%ebp),%eax
00002782	movl	(%eax),%eax
00002784	movl	0x04(%eax),%ecx
00002787	movl	(%ecx),%ecx
00002789	movl	%esi,0x0c(%esp)
0000278d	movl	%ebx,0x08(%esp)
00002791	movl	%edi,0x04(%esp)
00002795	addl	$0x04,%eax
00002798	movl	%eax,(%esp)
0000279b	call	*%ecx
0000279d	movl	0xffffebcc(%ebp),%eax
000027a3	leal	0x6ca66-0x1f41(%eax),%eax
000027a9	movl	%eax,0x04(%esp)
000027ad	movl	0x08(%ebp),%eax
000027b0	movl	%eax,(%esp)
000027b3	movl	strrchrcount(char*, int, int),0x08(%esp)
000027bb	calll	vgui::Panel::FindChildByName(char const*, bool)
000027c0	movl	%eax,0xffffebc8(%ebp)
000027c6	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
000027d0	testl	%edi,%edi
000027d2	je	0x000028a4
000027d8	leal	0xffffebf0(%ebp),%eax
000027de	movl	%eax,0x08(%esp)
000027e2	leal	0xffffeff0(%ebp),%esi
000027e8	movl	%esi,0x04(%esp)
000027ec	movl	%edi,(%esp)
000027ef	calll	ParseKeyvalue(char const*, char*, char*)
000027f4	movl	%eax,%ebx
000027f6	movl	0xffffebc8(%ebp),%ecx
000027fc	movl	(%ecx),%eax
000027fe	movl	0x00000474(%eax),%eax
00002804	movl	%esi,0x04(%esp)
00002808	movl	%ecx,(%esp)
0000280b	movl	strrchrcount(char*, int, int),0x08(%esp)
00002813	call	*%eax
00002815	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
00002820	xorl	%edi,%edi
00002822	testl	%ebx,%ebx
00002824	je	0x000027d0
00002826	leal	0xffffebf0(%ebp),%eax
0000282c	movl	%eax,0x08(%esp)
00002830	movl	%esi,0x04(%esp)
00002834	movl	%ebx,(%esp)
00002837	calll	ParseKeyvalue(char const*, char*, char*)
0000283c	movl	%eax,%edi
0000283e	movl	0xffffebcc(%ebp),%eax
00002844	leal	0x6cad7-0x1f41(%eax),%eax
0000284a	movl	%eax,0x04(%esp)
0000284e	movl	%esi,(%esp)
00002851	calll	_strcasecmp
00002856	testl	%eax,%eax
00002858	movl	%edi,%ebx
0000285a	je	0x000027d0
00002860	jmp	0x00002820
00002862	movl	%eax,%edi
00002864	jmp	0x0000292a
00002869	jmp	0x0000286d
0000286b	jmp	0x0000286d
0000286d	movl	%eax,%edi
0000286f	movl	0x08(%ebp),%ebx
00002872	jmp	0x0000287e
00002874	movl	%eax,%edi
00002876	movl	%esi,(%esp)
00002879	calll	operator delete(void*)
0000287e	movl	strrchrcount(char*, int, int),0x000007f4(%ebx)
00002888	movl	0x000007e8(%ebx),%eax
0000288e	cmpl	strrchrcount(char*, int, int),0x000007f0(%ebx)
00002895	jns	0x000028d7
00002897	movl	%eax,0x000007f8(%ebx)
0000289d	jmp	0x0000292a
000028a2	jmp	0x00002874
000028a4	movl	0xffffebbc(%ebp),%eax
000028aa	movl	%eax,(%esp)
000028ad	calll	QCInfo::SyncToControls()
000028b2	movl	0x08(%ebp),%eax
000028b5	movl	strrchrcount(char*, int, int),0x000002bc(%eax)
000028bf	movl	0xffffebc0(%ebp),%eax
000028c5	movl	(%eax),%eax
000028c7	cmpl	0xf0(%ebp),%eax
000028ca	jne	0x00002944
000028cc	addl	$0x0000146c,%esp
000028d2	popl	%esi
000028d3	popl	%edi
000028d4	popl	%ebx
000028d5	popl	%ebp
000028d6	ret
000028d7	testl	%eax,%eax
000028d9	jne	0x000028f1
000028db	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
000028e5	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
000028ef	jmp	0x00002920
000028f1	movl	%eax,(%esp)
000028f4	calll	_free
000028f9	movl	strrchrcount(char*, int, int),0x000007e8(%ebx)
00002903	cmpl	strrchrcount(char*, int, int),0x000007f0(%ebx)
0000290a	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
00002914	movl	strrchrcount(char*, int, int),0x000007f8(%ebx)
0000291e	js	0x0000292a
00002920	movl	strrchrcount(char*, int, int),0x000007ec(%ebx)
0000292a	movl	0xffffebc4(%ebp),%eax
00002930	movl	%eax,0x04(%esp)
00002934	movl	%ebx,(%esp)
00002937	calll	vgui::EditablePanel::~EditablePanel()
0000293c	movl	%edi,(%esp)
0000293f	calll	__Unwind_Resume
00002944	calll	___stack_chk_fail
00002949	calll	std::terminate()
0000294e	nop
CQCGenerator::~CQCGenerator():
00002950	pushl	%ebp
00002951	movl	%esp,%ebp
00002953	pushl	%edi
00002954	pushl	%esi
00002955	subl	$0x10,%esp
00002958	calll	0x0000295d
0000295d	popl	%esi
0000295e	leal	vtable for CQCGenerator-0x295d+0x0000000c(%esi),%eax
00002964	movl	0x08(%ebp),%edi
00002967	movl	%eax,(%edi)
00002969	movl	strrchrcount(char*, int, int),0x000007f4(%edi)
00002973	movl	0x000007e8(%edi),%eax
00002979	cmpl	strrchrcount(char*, int, int),0x000007f0(%edi)
00002980	jns	0x0000298a
00002982	movl	%eax,0x000007f8(%edi)
00002988	jmp	0x000029dd
0000298a	testl	%eax,%eax
0000298c	jne	0x000029a4
0000298e	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
00002998	movl	strrchrcount(char*, int, int),0x000007f8(%edi)
000029a2	jmp	0x000029d3
000029a4	movl	%eax,(%esp)
000029a7	calll	_free
000029ac	movl	strrchrcount(char*, int, int),0x000007e8(%edi)
000029b6	cmpl	strrchrcount(char*, int, int),0x000007f0(%edi)
000029bd	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
000029c7	movl	strrchrcount(char*, int, int),0x000007f8(%edi)
000029d1	js	0x000029dd
000029d3	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
000029dd	leal	VTT for CQCGenerator-0x295d+0x00000004(%esi),%eax
000029e3	movl	%eax,0x04(%esp)
000029e7	movl	%edi,(%esp)
000029ea	calll	vgui::EditablePanel::~EditablePanel()
000029ef	addl	$0x10,%esp
000029f2	popl	%esi
000029f3	popl	%edi
000029f4	popl	%ebp
000029f5	jmp	operator delete(void*)
000029fa	movl	%eax,%esi
000029fc	movl	%edi,(%esp)
000029ff	calll	operator delete(void*)
00002a04	movl	%esi,(%esp)
00002a07	calll	__Unwind_Resume
00002a0c	nopl	strrchrcount(char*, int, int)(%eax)
CQCGenerator::~CQCGenerator():
00002a10	pushl	%ebp
00002a11	movl	%esp,%ebp
00002a13	pushl	%edi
00002a14	pushl	%esi
00002a15	subl	$0x10,%esp
00002a18	calll	0x00002a1d
00002a1d	popl	%edi
00002a1e	leal	vtable for CQCGenerator-0x2a1d+0x0000000c(%edi),%eax
00002a24	movl	0x08(%ebp),%esi
00002a27	movl	%eax,(%esi)
00002a29	movl	strrchrcount(char*, int, int),0x000007f4(%esi)
00002a33	movl	0x000007e8(%esi),%eax
00002a39	cmpl	strrchrcount(char*, int, int),0x000007f0(%esi)
00002a40	jns	0x00002a4a
00002a42	movl	%eax,0x000007f8(%esi)
00002a48	jmp	0x00002a9d
00002a4a	testl	%eax,%eax
00002a4c	jne	0x00002a64
00002a4e	movl	strrchrcount(char*, int, int),0x000007ec(%esi)
00002a58	movl	strrchrcount(char*, int, int),0x000007f8(%esi)
00002a62	jmp	0x00002a93
00002a64	movl	%eax,(%esp)
00002a67	calll	_free
00002a6c	movl	strrchrcount(char*, int, int),0x000007e8(%esi)
00002a76	cmpl	strrchrcount(char*, int, int),0x000007f0(%esi)
00002a7d	movl	strrchrcount(char*, int, int),0x000007ec(%esi)
00002a87	movl	strrchrcount(char*, int, int),0x000007f8(%esi)
00002a91	js	0x00002a9d
00002a93	movl	strrchrcount(char*, int, int),0x000007ec(%esi)
00002a9d	leal	VTT for CQCGenerator-0x2a1d+0x00000004(%edi),%eax
00002aa3	movl	%eax,0x04(%esp)
00002aa7	movl	%esi,(%esp)
00002aaa	calll	vgui::EditablePanel::~EditablePanel()
00002aaf	addl	$0x10,%esp
00002ab2	popl	%esi
00002ab3	popl	%edi
00002ab4	popl	%ebp
00002ab5	ret
00002ab6	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::~CQCGenerator():
00002ac0	pushl	%ebp
00002ac1	movl	%esp,%ebp
00002ac3	pushl	%edi
00002ac4	pushl	%esi
00002ac5	subl	$0x10,%esp
00002ac8	movl	0x0c(%ebp),%esi
00002acb	movl	(%esi),%eax
00002acd	movl	0x08(%ebp),%edi
00002ad0	movl	%eax,(%edi)
00002ad2	movl	strrchrcount(char*, int, int),0x000007f4(%edi)
00002adc	movl	0x000007e8(%edi),%eax
00002ae2	cmpl	strrchrcount(char*, int, int),0x000007f0(%edi)
00002ae9	jns	0x00002af3
00002aeb	movl	%eax,0x000007f8(%edi)
00002af1	jmp	0x00002b46
00002af3	testl	%eax,%eax
00002af5	jne	0x00002b0d
00002af7	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
00002b01	movl	strrchrcount(char*, int, int),0x000007f8(%edi)
00002b0b	jmp	0x00002b3c
00002b0d	movl	%eax,(%esp)
00002b10	calll	_free
00002b15	movl	strrchrcount(char*, int, int),0x000007e8(%edi)
00002b1f	cmpl	strrchrcount(char*, int, int),0x000007f0(%edi)
00002b26	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
00002b30	movl	strrchrcount(char*, int, int),0x000007f8(%edi)
00002b3a	js	0x00002b46
00002b3c	movl	strrchrcount(char*, int, int),0x000007ec(%edi)
00002b46	addl	$0x04,%esi
00002b49	movl	%esi,0x04(%esp)
00002b4d	movl	%edi,(%esp)
00002b50	calll	vgui::EditablePanel::~EditablePanel()
00002b55	addl	$0x10,%esp
00002b58	popl	%esi
00002b59	popl	%edi
00002b5a	popl	%ebp
00002b5b	ret
00002b5c	nopl	strrchrcount(char*, int, int)(%eax)
CQCGenerator::OnCommand(char const*):
00002b60	pushl	%ebp
00002b61	movl	%esp,%ebp
00002b63	pushl	%ebx
00002b64	pushl	%edi
00002b65	pushl	%esi
00002b66	subl	$0x0c,%esp
00002b69	calll	0x00002b6e
00002b6e	popl	%ebx
00002b6f	leal	0x6cb5f-0x2b6e(%ebx),%eax
00002b75	movl	%eax,0x04(%esp)
00002b79	movl	0x0c(%ebp),%esi
00002b7c	movl	%esi,(%esp)
00002b7f	calll	V_stricmp(char const*, char const*)
00002b84	movl	0x08(%ebp),%edi
00002b87	testl	%eax,%eax
00002b89	jne	0x00002ba1
00002b8b	leal	0x000002c8(%edi),%eax
00002b91	movl	%eax,(%esp)
00002b94	calll	QCInfo::SyncFromControls()
00002b99	movl	%edi,(%esp)
00002b9c	calll	CQCGenerator::GenerateQCFile()
00002ba1	leal	0x6cb68-0x2b6e(%ebx),%eax
00002ba7	movl	%eax,0x04(%esp)
00002bab	movl	%esi,(%esp)
00002bae	calll	V_stricmp(char const*, char const*)
00002bb3	testl	%eax,%eax
00002bb5	jne	0x00002bff
00002bb7	movl	0x000002b8(%edi),%ecx
00002bbd	movl	(%ecx),%eax
00002bbf	movl	%ecx,(%esp)
00002bc2	call	*0x000003f4(%eax)
00002bc8	movl	%eax,%esi
00002bca	jmp	0x00002bfb
00002bcc	nopl	strrchrcount(char*, int, int)(%eax)
00002bd0	movl	0x000002b8(%edi),%ecx
00002bd6	movl	(%ecx),%eax
00002bd8	decl	%esi
00002bd9	movl	%esi,0x04(%esp)
00002bdd	movl	%ecx,(%esp)
00002be0	call	*0x000003f8(%eax)
00002be6	movl	0x000002b8(%edi),%edx
00002bec	movl	(%edx),%ecx
00002bee	movl	%eax,0x04(%esp)
00002bf2	movl	%edx,(%esp)
00002bf5	call	*0x000003bc(%ecx)
00002bfb	testl	%esi,%esi
00002bfd	jg	0x00002bd0
00002bff	leal	0x6cb72-0x2b6e(%ebx),%eax
00002c05	movl	%eax,0x04(%esp)
00002c09	movl	0x0c(%ebp),%eax
00002c0c	movl	%eax,(%esp)
00002c0f	calll	V_stricmp(char const*, char const*)
00002c14	testl	%eax,%eax
00002c16	jne	0x00002c20
00002c18	movl	%edi,(%esp)
00002c1b	calll	CQCGenerator::EditLOD()
00002c20	addl	$0x0c,%esp
00002c23	popl	%esi
00002c24	popl	%edi
00002c25	popl	%ebx
00002c26	popl	%ebp
00002c27	jmp	vgui::Panel::OnCommand(char const*)
00002c2c	nopl	strrchrcount(char*, int, int)(%eax)
CQCGenerator::GenerateQCFile():
00002c30	pushl	%ebp
00002c31	movl	%esp,%ebp
00002c33	pushl	%ebx
00002c34	pushl	%edi
00002c35	pushl	%esi
00002c36	subl	$0x00000b5c,%esp
00002c3c	calll	0x00002c41
00002c41	popl	%ebx
00002c42	movl	0x7572c-0x2c41(%ebx),%eax
00002c48	movl	%eax,0xfffff4b4(%ebp)
00002c4e	movl	(%eax),%eax
00002c50	movl	%eax,0xf0(%ebp)
00002c53	movl	0x08(%ebp),%eax
00002c56	leal	0x000002cc(%eax),%edi
00002c5c	movl	%edi,0xfffff4c0(%ebp)
00002c62	movl	%edi,(%esp)
00002c65	movl	$0x0000005c,0x04(%esp)
00002c6d	movl	$0xfffffd36,%esi
00002c72	subl	%eax,%esi
00002c74	calll	_strrchr
00002c79	addl	%esi,%eax
00002c7b	movl	%eax,0x08(%esp)
00002c7f	movl	%edi,0x04(%esp)
00002c83	leal	0xfffffeec(%ebp),%edi
00002c89	movl	%edi,(%esp)
00002c8c	calll	V_strncpy(char*, char const*, int)
00002c91	movl	%edi,0x04(%esp)
00002c95	leal	0xfffffde8(%ebp),%edi
00002c9b	movl	%edi,(%esp)
00002c9e	movl	$0x00000104,0x08(%esp)
00002ca6	calll	V_strncpy(char*, char const*, int)
00002cab	movl	0x08(%ebp),%eax
00002cae	leal	0x000006dc(%eax),%eax
00002cb4	movl	%eax,0x04(%esp)
00002cb8	movl	%edi,(%esp)
00002cbb	movl	$0xffffffff,0x0c(%esp)
00002cc3	movl	$0x00000104,0x08(%esp)
00002ccb	calll	V_strncat(char*, char const*, unsigned long, int)
00002cd0	leal	0x6cb93-0x2c41(%ebx),%eax
00002cd6	movl	%eax,0x04(%esp)
00002cda	movl	%edi,(%esp)
00002cdd	movl	%edi,%esi
00002cdf	movl	$0xffffffff,0x0c(%esp)
00002ce7	movl	$0x00000104,0x08(%esp)
00002cef	calll	V_strncat(char*, char const*, unsigned long, int)
00002cf4	movl	0x75730-0x2c41(%ebx),%edi
00002cfa	movl	(%edi),%ecx
00002cfc	movl	0x04(%ecx),%eax
00002cff	leal	0x6cb97-0x2c41(%ebx),%edx
00002d05	movl	%edx,0x08(%esp)
00002d09	movl	%esi,0x04(%esp)
00002d0d	addl	$0x04,%ecx
00002d10	movl	%ecx,(%esp)
00002d13	movl	strrchrcount(char*, int, int),0x0c(%esp)
00002d1b	call	*0x08(%eax)
00002d1e	testl	%eax,%eax
00002d20	jne	0x00002d8c
00002d22	leal	0xfffff9e8(%ebp),%esi
00002d28	movl	%esi,(%esp)
00002d2b	movl	$0x00000400,0x08(%esp)
00002d33	movl	strrchrcount(char*, int, int),0x04(%esp)
00002d3b	calll	_memset
00002d40	leal	0xfffffeec(%ebp),%eax
00002d46	movl	%eax,0x10(%esp)
00002d4a	leal	0xfffffde8(%ebp),%eax
00002d50	movl	%eax,0x0c(%esp)
00002d54	leal	0x6cb9a-0x2c41(%ebx),%eax
00002d5a	movl	%eax,0x08(%esp)
00002d5e	movl	%esi,(%esp)
00002d61	movl	$0x00000400,0x04(%esp)
00002d69	calll	V_snprintf(char*, int, char const*, ...)
00002d6e	movl	%esi,0x08(%esp)
00002d72	leal	0x6cbda-0x2c41(%ebx),%eax
00002d78	movl	%eax,0x04(%esp)
00002d7c	movl	0x08(%ebp),%eax
00002d7f	movl	%eax,(%esp)
00002d82	calll	VGUIMessageBox(vgui::Panel*, char const*, char const*, ...)
00002d87	jmp	0x000032c6
00002d8c	movl	(%edi),%ecx
00002d8e	movl	%edi,0xfffff4c4(%ebp)
00002d94	movl	%eax,%esi
00002d96	movl	%esi,0xfffff4c8(%ebp)
00002d9c	movl	(%ecx),%eax
00002d9e	leal	0x6cbed-0x2c41(%ebx),%edx
00002da4	movl	%edx,0x08(%esp)
00002da8	movl	%esi,0x04(%esp)
00002dac	movl	%ecx,(%esp)
00002daf	call	*0x60(%eax)
00002db2	leal	0xfffffde8(%ebp),%eax
00002db8	movl	%eax,(%esp)
00002dbb	movl	%eax,%edi
00002dbd	calll	_strlen
00002dc2	movl	$0x00000002,%ecx
00002dc7	xorl	%esi,%esi
00002dc9	nopl	strrchrcount(char*, int, int)(%eax)
00002dd0	testl	%eax,%eax
00002dd2	jle	0x00002df0
00002dd4	cmpb	$0x5c,0xfffffde7(%ebp,%eax)
00002ddc	leal	0xff(%eax),%eax
00002ddf	sete	%dl
00002de2	movzbl	%dl,%edx
00002de5	subl	%edx,%ecx
00002de7	jne	0x00002dd0
00002de9	leal	0xfffffde8(%ebp,%eax),%esi
00002df0	movl	%edi,(%esp)
00002df3	movl	$0x0000002e,0x04(%esp)
00002dfb	calll	_strrchr
00002e00	subl	%esi,%eax
00002e02	movl	%eax,0x08(%esp)
00002e06	incl	%esi
00002e07	movl	%esi,0x04(%esp)
00002e0b	leal	0xfffff8e4(%ebp),%esi
00002e11	movl	%esi,(%esp)
00002e14	calll	V_strncpy(char*, char const*, int)
00002e19	movl	%ebx,0xfffff4bc(%ebp)
00002e1f	leal	0x6cc0a-0x2c41(%ebx),%eax
00002e25	movl	%eax,0x04(%esp)
00002e29	movl	%esi,(%esp)
00002e2c	movl	$0xffffffff,0x0c(%esp)
00002e34	movl	$0x00000104,0x08(%esp)
00002e3c	calll	V_strncat(char*, char const*, unsigned long, int)
00002e41	movl	0xfffff4c4(%ebp),%edi
00002e47	movl	(%edi),%ecx
00002e49	movl	(%ecx),%eax
00002e4b	movl	%esi,0x0c(%esp)
00002e4f	leal	0x6cc0f-0x2c41(%ebx),%edx
00002e55	movl	%edx,0x08(%esp)
00002e59	movl	0xfffff4c8(%ebp),%esi
00002e5f	movl	%esi,0x04(%esp)
00002e63	movl	%ecx,(%esp)
00002e66	call	*0x60(%eax)
00002e69	movl	(%edi),%ecx
00002e6b	movl	(%ecx),%eax
00002e6d	movl	0x08(%ebp),%edx
00002e70	movss	0x000007fc(%edx),%xmm0
00002e78	cvtss2sd	%xmm0,%xmm0
00002e7c	movsd	%xmm0,0x0c(%esp)
00002e82	leal	0x6cc1f-0x2c41(%ebx),%edx
00002e88	movl	%edx,0x08(%esp)
00002e8c	movl	%esi,0x04(%esp)
00002e90	movl	%ecx,(%esp)
00002e93	call	*0x60(%eax)
00002e96	movl	(%edi),%eax
00002e98	movl	%eax,0xfffff4d0(%ebp)
00002e9e	movl	(%eax),%eax
00002ea0	movl	0x60(%eax),%eax
00002ea3	movl	%eax,0xfffff4d4(%ebp)
00002ea9	movl	0xfffff4c0(%ebp),%eax
00002eaf	movl	%eax,(%esp)
00002eb2	movl	$0x0000005c,0x04(%esp)
00002eba	calll	_strrchr
00002ebf	incl	%eax
00002ec0	movl	%eax,0x0c(%esp)
00002ec4	leal	0x6cc2a-0x2c41(%ebx),%eax
00002eca	movl	%eax,0x08(%esp)
00002ece	movl	%esi,0x04(%esp)
00002ed2	movl	0xfffff4d0(%ebp),%eax
00002ed8	movl	%eax,(%esp)
00002edb	call	*0xfffff4d4(%ebp)
00002ee1	movl	%esi,%ebx
00002ee3	movl	%edi,%esi
00002ee5	movl	0x08(%ebp),%edi
00002ee8	testb	$0x01,0x000007e0(%edi)
00002eef	je	0x00002f0f
00002ef1	movl	(%esi),%ecx
00002ef3	movl	(%ecx),%eax
00002ef5	movl	0xfffff4bc(%ebp),%edx
00002efb	leal	0x6cc3d-0x2c41(%edx),%edx
00002f01	movl	%edx,0x08(%esp)
00002f05	movl	%ebx,0x04(%esp)
00002f09	movl	%ecx,(%esp)
00002f0c	call	*0x60(%eax)
00002f0f	testb	$0x01,0x000007e1(%edi)
00002f16	je	0x00002f36
00002f18	movl	(%esi),%ecx
00002f1a	movl	(%ecx),%eax
00002f1c	movl	0xfffff4bc(%ebp),%edx
00002f22	leal	0x6cc4a-0x2c41(%edx),%edx
00002f28	movl	%edx,0x08(%esp)
00002f2c	movl	%ebx,0x04(%esp)
00002f30	movl	%ecx,(%esp)
00002f33	call	*0x60(%eax)
00002f36	movl	(%esi),%ecx
00002f38	movl	(%ecx),%eax
00002f3a	leal	0x000004d4(%edi),%edx
00002f40	movl	%edx,0x0c(%esp)
00002f44	movl	0xfffff4bc(%ebp),%esi
00002f4a	leal	0x6cc59-0x2c41(%esi),%edx
00002f50	movl	%edx,0x08(%esp)
00002f54	movl	%ebx,0x04(%esp)
00002f58	movl	%ecx,(%esp)
00002f5b	call	*0x60(%eax)
00002f5e	movl	0xfffff4c4(%ebp),%eax
00002f64	movl	(%eax),%ecx
00002f66	movl	(%ecx),%eax
00002f68	leal	0x000005d8(%edi),%edx
00002f6e	movl	%edx,0x0c(%esp)
00002f72	leal	0x6cc6d-0x2c41(%esi),%edx
00002f78	movl	%edx,0x08(%esp)
00002f7c	movl	%ebx,0x04(%esp)
00002f80	movl	%ecx,(%esp)
00002f83	call	*0x60(%eax)
00002f86	testb	$0x01,0x000007e0(%edi)
00002f8d	jne	0x00002f98
00002f8f	testb	$0x01,0x000007e6(%edi)
00002f96	je	0x00002ff8
00002f98	movl	0xfffff4c4(%ebp),%edi
00002f9e	movl	(%edi),%ecx
00002fa0	movl	(%ecx),%eax
00002fa2	leal	0x6cc7f-0x2c41(%esi),%edx
00002fa8	movl	%edx,0x08(%esp)
00002fac	movl	%ebx,0x04(%esp)
00002fb0	movl	%ecx,(%esp)
00002fb3	call	*0x60(%eax)
00002fb6	movl	(%edi),%edi
00002fb8	movl	(%edi),%eax
00002fba	movl	0x60(%eax),%eax
00002fbd	movl	%eax,0xfffff4d4(%ebp)
00002fc3	movl	0xfffff4c0(%ebp),%eax
00002fc9	movl	%eax,(%esp)
00002fcc	movl	$0x0000005c,0x04(%esp)
00002fd4	calll	_strrchr
00002fd9	incl	%eax
00002fda	movl	%eax,0x0c(%esp)
00002fde	leal	0x6cca9-0x2c41(%esi),%eax
00002fe4	movl	%eax,0x08(%esp)
00002fe8	movl	%ebx,0x04(%esp)
00002fec	movl	%edi,(%esp)
00002fef	call	*0xfffff4d4(%ebp)
00002ff5	movl	0x08(%ebp),%edi
00002ff8	cmpl	strrchrcount(char*, int, int),0x000007f4(%edi)
00002fff	jle	0x000030c9
00003005	xorl	%ebx,%ebx
00003007	movl	0xfffff4bc(%ebp),%eax
0000300d	leal	0x6ccc9-0x2c41(%eax),%eax
00003013	movl	%eax,0xfffff4b8(%ebp)
00003019	xorl	%esi,%esi
0000301b	nopl	strrchrcount(char*, int, int)(%eax,%eax)
00003020	movl	0x000007e8(%edi),%eax
00003026	addl	%ebx,%eax
00003028	movl	%eax,0x04(%esp)
0000302c	leal	0xfffff4d8(%ebp),%edi
00003032	movl	%edi,(%esp)
00003035	movl	$0x00000108,0x08(%esp)
0000303d	calll	_memcpy
00003042	movl	0xfffff4c4(%ebp),%eax
00003048	movl	(%eax),%eax
0000304a	movl	%eax,0xfffff4d0(%ebp)
00003050	movl	(%eax),%eax
00003052	movl	0x60(%eax),%eax
00003055	movl	%eax,0xfffff4d4(%ebp)
0000305b	movl	0xfffff5dc(%ebp),%eax
00003061	movl	%eax,0xfffff4cc(%ebp)
00003067	movl	0xfffff4c0(%ebp),%eax
0000306d	movl	%eax,(%esp)
00003070	movl	$0x0000005c,0x04(%esp)
00003078	calll	_strrchr
0000307d	movl	%edi,0x14(%esp)
00003081	incl	%eax
00003082	movl	%eax,0x10(%esp)
00003086	movl	0xfffff4cc(%ebp),%eax
0000308c	movl	%eax,0x0c(%esp)
00003090	movl	0xfffff4b8(%ebp),%eax
00003096	movl	%eax,0x08(%esp)
0000309a	movl	0xfffff4c8(%ebp),%eax
000030a0	movl	%eax,0x04(%esp)
000030a4	movl	0xfffff4d0(%ebp),%eax
000030aa	movl	%eax,(%esp)
000030ad	movl	0x08(%ebp),%edi
000030b0	call	*0xfffff4d4(%ebp)
000030b6	addl	$0x00000108,%ebx
000030bc	incl	%esi
000030bd	cmpl	0x000007f4(%edi),%esi
000030c3	jl	0x00003020
000030c9	movl	0xfffff4c0(%ebp),%ebx
000030cf	testb	$0x01,0x000007e2(%edi)
000030d6	movl	0xfffff4bc(%ebp),%edx
000030dc	movl	0xfffff4c4(%ebp),%esi
000030e2	jne	0x0000324e
000030e8	movl	(%esi),%ecx
000030ea	movl	(%ecx),%eax
000030ec	leal	0x6ccef-0x2c41(%edx),%edx
000030f2	movl	%edx,0x08(%esp)
000030f6	movl	0xfffff4c8(%ebp),%edx
000030fc	movl	%edx,0x04(%esp)
00003100	movl	%ecx,(%esp)
00003103	call	*0x60(%eax)
00003106	testb	$0x01,0x000007e3(%edi)
0000310d	je	0x0000314b
0000310f	movl	%esi,%edi
00003111	movl	(%edi),%esi
00003113	movl	(%esi),%eax
00003115	movl	0x60(%eax),%eax
00003118	movl	%eax,0xfffff4d4(%ebp)
0000311e	movl	%ebx,(%esp)
00003121	movl	$0x0000005c,0x04(%esp)
00003129	calll	_strrchr
0000312e	incl	%eax
0000312f	movl	%eax,0x0c(%esp)
00003133	movl	0xfffff4bc(%ebp),%eax
00003139	leal	0x6ccf1-0x2c41(%eax),%eax
0000313f	movl	%eax,0x08(%esp)
00003143	movl	0xfffff4c8(%ebp),%ebx
00003149	jmp	0x00003194
0000314b	cmpb	strrchrcount(char*, int, int),0x000003d0(%edi)
00003152	movl	0xfffff4c8(%ebp),%ebx
00003158	je	0x000031a6
0000315a	leal	0x000003d0(%edi),%eax
00003160	movl	%esi,%edi
00003162	movl	(%edi),%esi
00003164	movl	(%esi),%ecx
00003166	movl	0x60(%ecx),%ecx
00003169	movl	%ecx,0xfffff4d4(%ebp)
0000316f	movl	%eax,(%esp)
00003172	movl	$0x0000005c,0x04(%esp)
0000317a	calll	_strrchr
0000317f	incl	%eax
00003180	movl	%eax,0x0c(%esp)
00003184	movl	0xfffff4bc(%ebp),%eax
0000318a	leal	0x6ccf1-0x2c41(%eax),%eax
00003190	movl	%eax,0x08(%esp)
00003194	movl	%ebx,0x04(%esp)
00003198	movl	%esi,(%esp)
0000319b	movl	%edi,%esi
0000319d	call	*0xfffff4d4(%ebp)
000031a3	movl	0x08(%ebp),%edi
000031a6	movl	(%esi),%ecx
000031a8	movl	(%ecx),%eax
000031aa	movl	0xfffff4bc(%ebp),%edx
000031b0	leal	0x6cd06-0x2c41(%edx),%edx
000031b6	movl	%edx,0x08(%esp)
000031ba	movl	%ebx,0x04(%esp)
000031be	movl	%ecx,(%esp)
000031c1	call	*0x60(%eax)
000031c4	movl	(%esi),%ecx
000031c6	movl	(%ecx),%eax
000031c8	movl	0x60(%eax),%eax
000031cb	testb	$0x01,0x000007e5(%edi)
000031d2	je	0x000031e2
000031d4	movl	0xfffff4bc(%ebp),%edx
000031da	leal	0x6cd21-0x2c41(%edx),%edx
000031e0	jmp	0x00003200
000031e2	movss	0x00000800(%edi),%xmm0
000031ea	cvtss2sd	%xmm0,%xmm0
000031ee	movsd	%xmm0,0x0c(%esp)
000031f4	movl	0xfffff4bc(%ebp),%edx
000031fa	leal	0x6cd2d-0x2c41(%edx),%edx
00003200	movl	%edx,0x08(%esp)
00003204	movl	%ebx,0x04(%esp)
00003208	movl	%ecx,(%esp)
0000320b	call	*%eax
0000320d	testb	$0x01,0x000007e4(%edi)
00003214	movl	0xfffff4bc(%ebp),%edi
0000321a	je	0x00003234
0000321c	movl	(%esi),%ecx
0000321e	movl	(%ecx),%eax
00003220	leal	0x6cd38-0x2c41(%edi),%edx
00003226	movl	%edx,0x08(%esp)
0000322a	movl	%ebx,0x04(%esp)
0000322e	movl	%ecx,(%esp)
00003231	call	*0x60(%eax)
00003234	movl	(%esi),%ecx
00003236	movl	(%ecx),%eax
00003238	leal	0x6cd43-0x2c41(%edi),%edx
0000323e	movl	%edx,0x08(%esp)
00003242	movl	%ebx,0x04(%esp)
00003246	movl	%ecx,(%esp)
00003249	call	*0x60(%eax)
0000324c	movl	%edi,%edx
0000324e	movl	(%esi),%eax
00003250	movl	0x04(%eax),%ecx
00003253	movl	0xfffff4c8(%ebp),%edi
00003259	movl	%edi,0x04(%esp)
0000325d	addl	$0x04,%eax
00003260	movl	%eax,(%esp)
00003263	movl	%edx,%edi
00003265	call	*0x0c(%ecx)
00003268	movl	(%esi),%ecx
0000326a	movl	(%ecx),%eax
0000326c	leal	0xfffff5e0(%ebp),%edx
00003272	movl	%edx,0x0c(%esp)
00003276	leal	0x6cd47-0x2c41(%edi),%edx
0000327c	movl	%edx,0x04(%esp)
00003280	movl	%ecx,(%esp)
00003283	movl	strrchrcount(char*, int, int),0x18(%esp)
0000328b	movl	strrchrcount(char*, int, int),0x14(%esp)
00003293	movl	$0x00000200,0x10(%esp)
0000329b	movl	strrchrcount(char*, int, int),0x08(%esp)
000032a3	call	*0x30(%eax)
000032a6	leal	0xfffff7e0(%ebp),%eax
000032ac	movl	%eax,0x04(%esp)
000032b0	leal	0x6cb2a-0x2c41(%edi),%eax
000032b6	movl	%eax,(%esp)
000032b9	movl	$0x00000104,0x08(%esp)
000032c1	calll	GetVConfigRegistrySetting(char const*, char*, int)
000032c6	movl	0xfffff4b4(%ebp),%eax
000032cc	movl	(%eax),%eax
000032ce	cmpl	0xf0(%ebp),%eax
000032d1	jne	0x000032e0
000032d3	xorl	%eax,%eax
000032d5	addl	$0x00000b5c,%esp
000032db	popl	%esi
000032dc	popl	%edi
000032dd	popl	%ebx
000032de	popl	%ebp
000032df	ret
000032e0	calll	___stack_chk_fail
000032e5	nopl	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::DeleteLOD():
000032f0	pushl	%ebp
000032f1	movl	%esp,%ebp
000032f3	pushl	%edi
000032f4	pushl	%esi
000032f5	subl	$0x10,%esp
000032f8	movl	0x08(%ebp),%edi
000032fb	movl	0x000002b8(%edi),%ecx
00003301	movl	(%ecx),%eax
00003303	movl	%ecx,(%esp)
00003306	call	*0x000003f4(%eax)
0000330c	movl	%eax,%esi
0000330e	jmp	0x0000333b
00003310	movl	0x000002b8(%edi),%ecx
00003316	movl	(%ecx),%eax
00003318	decl	%esi
00003319	movl	%esi,0x04(%esp)
0000331d	movl	%ecx,(%esp)
00003320	call	*0x000003f8(%eax)
00003326	movl	0x000002b8(%edi),%edx
0000332c	movl	(%edx),%ecx
0000332e	movl	%eax,0x04(%esp)
00003332	movl	%edx,(%esp)
00003335	call	*0x000003bc(%ecx)
0000333b	testl	%esi,%esi
0000333d	jg	0x00003310
0000333f	addl	$0x10,%esp
00003342	popl	%esi
00003343	popl	%edi
00003344	popl	%ebp
00003345	ret
00003346	nopw	%cs:strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::EditLOD():
00003350	pushl	%ebp
00003351	movl	%esp,%ebp
00003353	pushl	%ebx
00003354	pushl	%edi
00003355	pushl	%esi
00003356	subl	$0x1c,%esp
00003359	calll	0x0000335e
0000335e	popl	%ebx
0000335f	movl	0x08(%ebp),%edi
00003362	movl	0x000002b8(%edi),%ecx
00003368	movl	(%ecx),%eax
0000336a	movl	%ecx,(%esp)
0000336d	call	*0x000003f4(%eax)
00003373	cmpl	$0x01,%eax
00003376	jne	0x0000344d
0000337c	movl	0x000002b8(%edi),%ecx
00003382	movl	(%ecx),%eax
00003384	movl	%ecx,(%esp)
00003387	call	*0x00000430(%eax)
0000338d	testb	%al,%al
0000338f	jne	0x0000344d
00003395	movl	0x000002bc(%edi),%eax
0000339b	testl	%eax,%eax
0000339d	je	0x000033b1
0000339f	movl	(%eax),%ecx
000033a1	movl	%eax,(%esp)
000033a4	call	*0x5c(%ecx)
000033a7	movl	strrchrcount(char*, int, int),0x000002bc(%edi)
000033b1	movl	$0x00000660,(%esp)
000033b8	calll	operator new(unsigned long)
000033bd	movl	%eax,%esi
000033bf	leal	0x6ce8a-0x335e(%ebx),%eax
000033c5	movl	%eax,0x08(%esp)
000033c9	movl	%edi,0x04(%esp)
000033cd	movl	%esi,(%esp)
000033d0	calll	vgui::TextEntry::TextEntry(vgui::Panel*, char const*)
000033d5	movl	%esi,0x000002bc(%edi)
000033db	movl	(%esi),%eax
000033dd	movl	%esi,(%esp)
000033e0	movl	$0x00000001,0x04(%esp)
000033e8	call	*0x00000400(%eax)
000033ee	movl	0x000002b8(%edi),%ecx
000033f4	movl	(%ecx),%eax
000033f6	movl	%ecx,(%esp)
000033f9	movl	strrchrcount(char*, int, int),0x04(%esp)
00003401	call	*0x000003f8(%eax)
00003407	movl	%eax,0x000002c0(%edi)
0000340d	movl	0x000002b8(%edi),%ecx
00003413	movl	(%ecx),%eax
00003415	movl	%ecx,(%esp)
00003418	call	*0x0000040c(%eax)
0000341e	movl	%eax,0x000002c4(%edi)
00003424	movl	0x000002b8(%edi),%ecx
0000342a	movl	0x000002bc(%edi),%ebx
00003430	movl	(%ecx),%edx
00003432	movl	0x000002c0(%edi),%esi
00003438	movl	%ebx,0x0c(%esp)
0000343c	movl	%eax,0x08(%esp)
00003440	movl	%esi,0x04(%esp)
00003444	movl	%ecx,(%esp)
00003447	call	*0x00000428(%edx)
0000344d	addl	$0x1c,%esp
00003450	popl	%esi
00003451	popl	%edi
00003452	popl	%ebx
00003453	popl	%ebp
00003454	ret
00003455	movl	%eax,%edi
00003457	movl	%esi,(%esp)
0000345a	calll	operator delete(void*)
0000345f	movl	%edi,(%esp)
00003462	calll	__Unwind_Resume
00003467	nopw	strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::OnKeyCodeTyped(ButtonCode_t):
00003470	cmpl	$0x40,0x08(%esp)
00003475	je	0x00003478
00003477	ret
00003478	jmp	CQCGenerator::EditLOD()
0000347d	nopl	(%eax)
CQCGenerator::OnBrowse(KeyValues*):
00003480	pushl	%ebp
00003481	movl	%esp,%ebp
00003483	pushl	%ebx
00003484	pushl	%edi
00003485	pushl	%esi
00003486	subl	$0x0c,%esp
00003489	calll	0x0000348e
0000348e	popl	%esi
0000348f	leal	0x6ca99-0x348e(%esi),%edi
00003495	movl	%edi,0x08(%esp)
00003499	leal	0x6cacb-0x348e(%esi),%eax
0000349f	movl	%eax,0x04(%esp)
000034a3	movl	0x0c(%ebp),%ebx
000034a6	movl	%ebx,(%esp)
000034a9	calll	KeyValues::GetString(char const*, char const*)
000034ae	movl	%eax,0x04(%esp)
000034b2	movl	0x08(%ebp),%eax
000034b5	addl	$0x000001b4,%eax
000034ba	movl	%eax,(%esp)
000034bd	movl	$0x00000104,0x08(%esp)
000034c5	calll	V_strncpy(char*, char const*, int)
000034ca	movl	%edi,0x08(%esp)
000034ce	leal	0x6cac4-0x348e(%esi),%eax
000034d4	movl	%eax,0x04(%esp)
000034d8	movl	%ebx,(%esp)
000034db	calll	KeyValues::GetString(char const*, char const*)
000034e0	cmpb	strrchrcount(char*, int, int),(%eax)
000034e3	jne	0x000034ed
000034e5	addl	$0x0c,%esp
000034e8	popl	%esi
000034e9	popl	%edi
000034ea	popl	%ebx
000034eb	popl	%ebp
000034ec	ret
000034ed	addl	$0x0c,%esp
000034f0	popl	%esi
000034f1	popl	%edi
000034f2	popl	%ebx
000034f3	popl	%ebp
000034f4	jmp	CQCGenerator::BrowseFile(KeyValues*)
000034f9	nopl	strrchrcount(char*, int, int)(%eax)
CQCGenerator::BrowseFile(KeyValues*):
00003500	pushl	%ebp
00003501	movl	%esp,%ebp
00003503	pushl	%ebx
00003504	pushl	%edi
00003505	pushl	%esi
00003506	subl	$0x1c,%esp
00003509	calll	0x0000350e
0000350e	popl	%ebx
0000350f	leal	0x6ca99-0x350e(%ebx),%eax
00003515	movl	%eax,0x08(%esp)
00003519	leal	0x6cac4-0x350e(%ebx),%eax
0000351f	movl	%eax,0x04(%esp)
00003523	movl	0x0c(%ebp),%eax
00003526	movl	%eax,(%esp)
00003529	calll	KeyValues::GetString(char const*, char const*)
0000352e	movl	%eax,%edi
00003530	movl	$0x00000690,(%esp)
00003537	calll	operator new(unsigned long)
0000353c	movl	%eax,%esi
0000353e	movl	0x08(%ebp),%ecx
00003541	leal	0x6cb7a-0x350e(%ebx),%eax
00003547	movl	%eax,0x08(%esp)
0000354b	movl	%ecx,0x04(%esp)
0000354f	movl	%esi,(%esp)
00003552	movl	strrchrcount(char*, int, int),0x10(%esp)
0000355a	movl	$0x00000001,0x0c(%esp)
00003562	calll	vgui::FileOpenDialog::FileOpenDialog(vgui::Panel*, char const*, bool, KeyValues*)
00003567	movl	%edi,0x08(%esp)
0000356b	movl	%edi,0x04(%esp)
0000356f	movl	%esi,(%esp)
00003572	movl	strrchrcount(char*, int, int),0x10(%esp)
0000357a	movl	$0x00000001,0x0c(%esp)
00003582	calll	vgui::FileOpenDialog::AddFilter(char const*, char const*, bool, char const*)
00003587	movl	(%esi),%eax
00003589	movl	0x08(%ebp),%ecx
0000358c	movl	%ecx,0x04(%esp)
00003590	movl	%esi,(%esp)
00003593	call	*0x000000b4(%eax)
00003599	leal	0x6ca99-0x350e(%ebx),%eax
0000359f	movl	%eax,0x08(%esp)
000035a3	leal	0x6caba-0x350e(%ebx),%eax
000035a9	movl	%eax,0x04(%esp)
000035ad	movl	0x0c(%ebp),%eax
000035b0	movl	%eax,(%esp)
000035b3	calll	KeyValues::GetString(char const*, char const*)
000035b8	movl	%eax,0x04(%esp)
000035bc	movl	%esi,(%esp)
000035bf	calll	vgui::FileOpenDialog::SetStartDirectory(char const*)
000035c4	movl	%esi,(%esp)
000035c7	movl	$0x00000001,0x04(%esp)
000035cf	calll	vgui::FileOpenDialog::DoModal(bool)
000035d4	addl	$0x1c,%esp
000035d7	popl	%esi
000035d8	popl	%edi
000035d9	popl	%ebx
000035da	popl	%ebp
000035db	ret
000035dc	movl	%eax,%edi
000035de	movl	%esi,(%esp)
000035e1	calll	operator delete(void*)
000035e6	movl	%edi,(%esp)
000035e9	calll	__Unwind_Resume
000035ee	nop
CQCGenerator::OnFileSelected(KeyValues*):
000035f0	pushl	%ebp
000035f1	movl	%esp,%ebp
000035f3	pushl	%ebx
000035f4	pushl	%edi
000035f5	pushl	%esi
000035f6	subl	$0x0c,%esp
000035f9	calll	0x000035fe
000035fe	popl	%ebx
000035ff	movl	0x08(%ebp),%ecx
00003602	movl	%ecx,%eax
00003604	addl	$0x000001b4,%eax
00003609	jne	0x00003613
0000360b	addl	$0x0c,%esp
0000360e	popl	%esi
0000360f	popl	%edi
00003610	popl	%ebx
00003611	popl	%ebp
00003612	ret
00003613	movl	%eax,0x04(%esp)
00003617	movl	%ecx,(%esp)
0000361a	movl	strrchrcount(char*, int, int),0x08(%esp)
00003622	calll	vgui::Panel::FindChildByName(char const*, bool)
00003627	movl	%eax,%esi
00003629	movl	(%esi),%eax
0000362b	movl	0x0000034c(%eax),%edi
00003631	leal	0x6ca99-0x35fe(%ebx),%eax
00003637	movl	%eax,0x08(%esp)
0000363b	leal	0x6cb86-0x35fe(%ebx),%eax
00003641	movl	%eax,0x04(%esp)
00003645	movl	0x0c(%ebp),%eax
00003648	movl	%eax,(%esp)
0000364b	calll	KeyValues::GetString(char const*, char const*)
00003650	movl	%eax,0x04(%esp)
00003654	movl	%esi,(%esp)
00003657	call	*%edi
00003659	movl	0x08(%ebp),%eax
0000365c	movl	(%eax),%eax
0000365e	movl	0x10(%eax),%eax
00003661	addl	$0x0c,%esp
00003664	popl	%esi
00003665	popl	%edi
00003666	popl	%ebx
00003667	popl	%ebp
00003668	jmp	*%eax
0000366a	nopw	strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::OnDirectorySelected(KeyValues*):
00003670	pushl	%ebp
00003671	movl	%esp,%ebp
00003673	pushl	%ebx
00003674	pushl	%edi
00003675	pushl	%esi
00003676	subl	$0x0c,%esp
00003679	calll	0x0000367e
0000367e	popl	%ebx
0000367f	movl	0x08(%ebp),%ecx
00003682	movl	%ecx,%eax
00003684	addl	$0x000001b4,%eax
00003689	jne	0x00003693
0000368b	addl	$0x0c,%esp
0000368e	popl	%esi
0000368f	popl	%edi
00003690	popl	%ebx
00003691	popl	%ebp
00003692	ret
00003693	movl	%eax,0x04(%esp)
00003697	movl	%ecx,(%esp)
0000369a	movl	strrchrcount(char*, int, int),0x08(%esp)
000036a2	calll	vgui::Panel::FindChildByName(char const*, bool)
000036a7	movl	%eax,%esi
000036a9	movl	(%esi),%eax
000036ab	movl	0x0000034c(%eax),%edi
000036b1	leal	0x6ca99-0x367e(%ebx),%eax
000036b7	movl	%eax,0x08(%esp)
000036bb	leal	0x6cb8f-0x367e(%ebx),%eax
000036c1	movl	%eax,0x04(%esp)
000036c5	movl	0x0c(%ebp),%eax
000036c8	movl	%eax,(%esp)
000036cb	calll	KeyValues::GetString(char const*, char const*)
000036d0	movl	%eax,0x04(%esp)
000036d4	movl	%esi,(%esp)
000036d7	call	*%edi
000036d9	movl	0x08(%ebp),%eax
000036dc	movl	(%eax),%eax
000036de	movl	0x10(%eax),%eax
000036e1	addl	$0x0c,%esp
000036e4	popl	%esi
000036e5	popl	%edi
000036e6	popl	%ebx
000036e7	popl	%ebp
000036e8	jmp	*%eax
000036ea	nopw	strrchrcount(char*, int, int)(%eax,%eax)
CQCGenerator::OnNewLODText():
000036f0	pushl	%ebp
000036f1	movl	%esp,%ebp
000036f3	pushl	%ebx
000036f4	pushl	%edi
000036f5	pushl	%esi
000036f6	subl	$0x0000042c,%esp
000036fc	calll	0x00003701
00003701	popl	%eax
00003702	movl	0x7572c-0x3701(%eax),%eax
00003708	movl	%eax,0xfffffbdc(%ebp)
0000370e	movl	(%eax),%eax
00003710	movl	%eax,0xf0(%ebp)
00003713	movl	0x08(%ebp),%esi
00003716	movl	0x000002b8(%esi),%eax
0000371c	movl	0x000002c0(%esi),%edx
00003722	movl	(%eax),%ecx
00003724	movl	%edx,0x04(%esp)
00003728	movl	%eax,(%esp)
0000372b	call	*0x0000039c(%ecx)
00003731	movl	%eax,0xfffffbd8(%ebp)
00003737	movl	%eax,(%esp)
0000373a	calll	KeyValues::GetFirstValue()
0000373f	movl	%eax,%edi
00003741	movl	%edi,(%esp)
00003744	calll	KeyValues::GetName() const
00003749	movl	%eax,%ebx
0000374b	movl	%esi,%eax
0000374d	cmpl	strrchrcount(char*, int, int),0x000002c4(%eax)
00003754	jle	0x00003780
00003756	xorl	%esi,%esi
00003758	nopl	strrchrcount(char*, int, int)(%eax,%eax)
00003760	movl	%edi,(%esp)
00003763	calll	KeyValues::GetNextValue()
00003768	movl	%eax,%edi
0000376a	movl	%edi,(%esp)
0000376d	incl	%esi
0000376e	calll	KeyValues::GetName() const
00003773	movl	%eax,%ebx
00003775	movl	0x08(%ebp),%eax
00003778	cmpl	0x000002c4(%eax),%esi
0000377e	jl	0x00003760
00003780	movl	0x000002bc(%eax),%ecx
00003786	movl	%eax,%edi
00003788	movl	(%ecx),%eax
0000378a	leal	0xfffffbe0(%ebp),%esi
00003790	movl	%esi,0x04(%esp)
00003794	movl	%ecx,(%esp)
00003797	movl	$0x00000104,0x08(%esp)
0000379f	call	*0x00000354(%eax)
000037a5	movl	%esi,0x08(%esp)
000037a9	movl	%ebx,0x04(%esp)
000037ad	movl	0xfffffbd8(%ebp),%eax
000037b3	movl	%eax,(%esp)
000037b6	calll	KeyValues::SetWString(char const*, wchar_t const*)
000037bb	movl	0x000002b8(%edi),%ecx
000037c1	movl	(%ecx),%eax
000037c3	movl	%ecx,(%esp)
000037c6	call	*0x0000042c(%eax)
000037cc	movl	0x000002b8(%edi),%ecx
000037d2	movl	(%ecx),%eax
000037d4	movl	%ecx,(%esp)
000037d7	movl	strrchrcount(char*, int, int),0x08(%esp)
000037df	movl	strrchrcount(char*, int, int),0x04(%esp)
000037e7	call	*0x0000010c(%eax)
000037ed	movl	0xfffffbdc(%ebp),%eax
000037f3	movl	(%eax),%eax
000037f5	cmpl	0xf0(%ebp),%eax
000037f8	jne	0x00003805
000037fa	addl	$0x0000042c,%esp
00003800	popl	%esi
00003801	popl	%edi
00003802	popl	%ebx
00003803	popl	%ebp
00003804	ret
00003805	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(sequencepicker.o):
(__TEXT,__text) section
CSequencePicker::CSequencePicker(vgui::Panel*, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x4c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	leal	0x84524-0xe(%edi),%eax
00000015	movl	%eax,0x0c(%esp)
00000019	movl	0x0c(%ebp),%eax
0000001c	movl	%eax,0x08(%esp)
00000020	leal	VTT for CSequencePicker-0xe+0x00000004(%edi),%eax
00000026	movl	%eax,0xd8(%ebp)
00000029	movl	%eax,0x04(%esp)
0000002d	movl	0x08(%ebp),%ebx
00000030	movl	%ebx,(%esp)
00000033	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000038	leal	vtable for CSequencePicker-0xe+0x0000000c(%edi),%eax
0000003e	movl	%eax,(%ebx)
00000040	testb	$0x01,CSequencePicker::ChainToMap()::chained-0xe(%edi)
00000047	jne	0x0000007e
00000049	movb	$0x01,CSequencePicker::ChainToMap()::chained-0xe(%edi)
00000050	leal	0x84725-0xe(%edi),%eax
00000056	movl	%eax,(%esp)
00000059	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005e	movl	%eax,%esi
00000060	leal	CSequencePicker::GetPanelClassName()-0xe(%edi),%eax
00000066	movl	%eax,0x1c(%esi)
00000069	testl	%esi,%esi
0000006b	je	0x0000007e
0000006d	leal	0x8475b-0xe(%edi),%eax
00000073	movl	%eax,(%esp)
00000076	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000007b	movl	%eax,0x18(%esi)
0000007e	testb	$0x01,CSequencePicker::ChainToAnimationMap()::chained-0xe(%edi)
00000085	jne	0x000000bc
00000087	movb	$0x01,CSequencePicker::ChainToAnimationMap()::chained-0xe(%edi)
0000008e	leal	0x84725-0xe(%edi),%eax
00000094	movl	%eax,(%esp)
00000097	calll	FindOrAddPanelAnimationMap(char const*)
0000009c	movl	%eax,%esi
0000009e	leal	CSequencePicker::GetPanelClassName()-0xe(%edi),%eax
000000a4	movl	%eax,0x18(%esi)
000000a7	testl	%esi,%esi
000000a9	je	0x000000bc
000000ab	leal	0x8475b-0xe(%edi),%eax
000000b1	movl	%eax,(%esp)
000000b4	calll	FindOrAddPanelAnimationMap(char const*)
000000b9	movl	%eax,0x14(%esi)
000000bc	testb	$0x01,CSequencePicker::KB_ChainToMap()::chained-0xe(%edi)
000000c3	jne	0x000000fa
000000c5	movb	$0x01,CSequencePicker::KB_ChainToMap()::chained-0xe(%edi)
000000cc	leal	0x84725-0xe(%edi),%eax
000000d2	movl	%eax,(%esp)
000000d5	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000da	movl	%eax,%esi
000000dc	leal	CSequencePicker::GetPanelClassName()-0xe(%edi),%eax
000000e2	movl	%eax,0x44(%esi)
000000e5	testl	%esi,%esi
000000e7	je	0x000000fa
000000e9	leal	0x8475b-0xe(%edi),%eax
000000ef	movl	%eax,(%esp)
000000f2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f7	movl	%eax,0x18(%esi)
000000fa	testb	$0x01,CSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0xe(%edi)
00000101	jne	0x00000159
00000103	movb	$0x01,CSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0xe(%edi)
0000010a	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xe4(%ebp)
00000111	movl	$0x000003ad,0xe0(%ebp)
00000118	movsd	0xe0(%ebp),%xmm0
0000011d	movsd	%xmm0,0x04(%esp)
00000123	leal	0x8474e-0xe(%edi),%eax
00000129	movl	%eax,(%esp)
0000012c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
00000134	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
0000013c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000144	movl	$0x00000006,0x10(%esp)
0000014c	movl	$0x00000001,0x0c(%esp)
00000154	calll	CSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000159	testb	$0x01,CSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0xe(%edi)
00000160	jne	0x000001b8
00000162	movb	$0x01,CSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0xe(%edi)
00000169	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xec(%ebp)
00000170	movl	$0x000003b1,0xe8(%ebp)
00000177	movsd	0xe8(%ebp),%xmm0
0000017c	movsd	%xmm0,0x04(%esp)
00000182	leal	0x84742-0xe(%edi),%eax
00000188	movl	%eax,(%esp)
0000018b	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
00000193	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
0000019b	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
000001a3	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
000001ab	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
000001b3	calll	CSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
000001b8	leal	0x000001d0(%ebx),%eax
000001be	movl	%eax,0xd4(%ebp)
000001c1	movl	%eax,(%esp)
000001c4	calll	CUtlString::CUtlString()
000001c9	movl	%edi,0xdc(%ebp)
000001cc	movw	$0xffff,0x000001cc(%ebx)
000001d5	movl	$0x000001c4,(%esp)
000001dc	movl	%ebx,%esi
000001de	calll	operator new(unsigned long)
000001e3	movl	%eax,%edi
000001e5	movl	0xdc(%ebp),%eax
000001e8	leal	0x84533-0xe(%eax),%eax
000001ee	movl	%eax,0x08(%esp)
000001f2	movl	%esi,0x04(%esp)
000001f6	movl	%edi,(%esp)
000001f9	movl	$0x00000001,0x10(%esp)
00000201	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000209	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
0000020e	movl	%edi,0x000001b4(%esi)
00000214	movl	%edi,(%esp)
00000217	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
0000021f	calll	vgui::Panel::GetChild(int)
00000224	movl	%eax,%edi
00000226	movl	0x000001b4(%esi),%eax
0000022c	movl	%eax,(%esp)
0000022f	movl	$0x00000001,0x04(%esp)
00000237	calll	vgui::Panel::GetChild(int)
0000023c	movl	%eax,0xd0(%ebp)
0000023f	movl	$0x00000c90,(%esp)
00000246	calll	operator new(unsigned long)
0000024b	movl	%eax,%ebx
0000024d	movl	0xdc(%ebp),%eax
00000250	leal	0x84543-0xe(%eax),%eax
00000256	movl	%eax,0x08(%esp)
0000025a	movl	%edi,0x04(%esp)
0000025e	movl	%ebx,(%esp)
00000261	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00000266	movl	%ebx,0x000001b0(%esi)
0000026c	movl	(%esi),%eax
0000026e	movl	0x000002b8(%eax),%eax
00000274	movl	%ebx,0x04(%esp)
00000278	movl	%esi,(%esp)
0000027b	call	*%eax
0000027d	movl	$0x00000230,(%esp)
00000284	calll	operator new(unsigned long)
00000289	movl	%eax,%edi
0000028b	movl	0xdc(%ebp),%eax
0000028e	leal	0x8454e-0xe(%eax),%eax
00000294	movl	%eax,0x08(%esp)
00000298	movl	0xd0(%ebp),%eax
0000029b	movl	%eax,0x04(%esp)
0000029f	movl	%edi,(%esp)
000002a2	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
000002aa	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
000002af	movl	%edi,0x000001b8(%esi)
000002b5	movl	(%edi),%eax
000002b7	movl	0x000000b4(%eax),%eax
000002bd	movl	%esi,0x04(%esp)
000002c1	movl	%edi,(%esp)
000002c4	call	*%eax
000002c6	movl	0x10(%ebp),%eax
000002c9	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%esi)
000002d3	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c4(%esi)
000002dd	testb	$0x01,%al
000002df	je	0x0000049d
000002e5	movl	$0x000001b8,(%esp)
000002ec	calll	operator new(unsigned long)
000002f1	movl	%eax,%edi
000002f3	movl	0x000001b8(%esi),%eax
000002f9	movl	0xdc(%ebp),%ebx
000002fc	leal	0x84559-0xe(%ebx),%ecx
00000302	movl	%ecx,0x08(%esp)
00000306	movl	%eax,0x04(%esp)
0000030a	movl	%edi,(%esp)
0000030d	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000312	movl	%edi,0x000001bc(%esi)
00000318	movl	0x000001b8(%esi),%ecx
0000031e	movl	(%ecx),%eax
00000320	movl	0x000003b0(%eax),%eax
00000326	leal	0x84567-0xe(%ebx),%edx
0000032c	movl	%edx,0x08(%esp)
00000330	movl	%edi,0x04(%esp)
00000334	movl	%ecx,(%esp)
00000337	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
0000033f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000347	call	*%eax
00000349	movl	$0x00000280,(%esp)
00000350	calll	operator new(unsigned long)
00000355	movl	%eax,%edi
00000357	movl	0x000001bc(%esi),%eax
0000035d	movl	0xdc(%ebp),%ebx
00000360	leal	0x84571-0xe(%ebx),%ecx
00000366	movl	%ecx,0x08(%esp)
0000036a	movl	%eax,0x04(%esp)
0000036e	movl	%edi,(%esp)
00000371	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000376	movl	%edi,0x000001c4(%esi)
0000037c	movl	(%edi),%eax
0000037e	movl	0x0000034c(%eax),%eax
00000384	leal	0x8457f-0xe(%ebx),%ecx
0000038a	movl	%ecx,0x0c(%esp)
0000038e	movl	%ecx,0x08(%esp)
00000392	movl	%edi,(%esp)
00000395	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
0000039d	movl	$0x00000034,0x10(%esp)
000003a5	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
000003ad	call	*%eax
000003af	movl	0x000001c4(%esi),%eax
000003b5	movl	(%eax),%ecx
000003b7	movl	0x000000b4(%ecx),%ecx
000003bd	movl	%esi,0x04(%esp)
000003c1	movl	%eax,(%esp)
000003c4	call	*%ecx
000003c6	movl	0x000001c4(%esi),%ecx
000003cc	movl	(%ecx),%eax
000003ce	movl	0x00000410(%eax),%eax
000003d4	movl	%ecx,(%esp)
000003d7	movl	$0x00000001,0x04(%esp)
000003df	call	*%eax
000003e1	movl	0x000001c4(%esi),%eax
000003e7	movl	(%eax),%ecx
000003e9	movl	0x00000420(%ecx),%ecx
000003ef	movl	0xdc(%ebp),%edx
000003f2	leal	0x84588-0xe(%edx),%edx
000003f8	movl	%edx,0x04(%esp)
000003fc	movl	%eax,(%esp)
000003ff	call	*%ecx
00000401	movl	0x000001c4(%esi),%ecx
00000407	movl	(%ecx),%eax
00000409	movl	0x00000240(%eax),%eax
0000040f	movl	%ecx,(%esp)
00000412	movl	$0x00000001,0x04(%esp)
0000041a	call	*%eax
0000041c	movl	0x000001c4(%esi),%eax
00000422	movl	%eax,(%esp)
00000425	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
0000042d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000435	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
0000043d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000445	movl	$0x00000003,0x08(%esp)
0000044d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000455	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
0000045a	movl	0x000001c4(%esi),%ecx
00000460	movl	(%ecx),%eax
00000462	movl	0x00000378(%eax),%eax
00000468	movl	0xdc(%ebp),%edx
0000046b	leal	SequenceSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0xe(%edx),%edx
00000471	movl	%edx,0x08(%esp)
00000475	movl	%ecx,(%esp)
00000478	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000480	call	*%eax
00000482	movl	0x000001c4(%esi),%ecx
00000488	movl	(%ecx),%eax
0000048a	movl	0x0000037c(%eax),%eax
00000490	movl	%ecx,(%esp)
00000493	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
0000049b	call	*%eax
0000049d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%esi)
000004a7	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c8(%esi)
000004b1	movl	0x10(%ebp),%eax
000004b4	testb	$0x02,%al
000004b6	je	0x00000674
000004bc	movl	$0x000001b8,(%esp)
000004c3	calll	operator new(unsigned long)
000004c8	movl	%eax,%edi
000004ca	movl	0x000001b8(%esi),%eax
000004d0	movl	0xdc(%ebp),%ebx
000004d3	leal	0x845a9-0xe(%ebx),%ecx
000004d9	movl	%ecx,0x08(%esp)
000004dd	movl	%eax,0x04(%esp)
000004e1	movl	%edi,(%esp)
000004e4	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
000004e9	movl	%edi,0x000001c0(%esi)
000004ef	movl	0x000001b8(%esi),%ecx
000004f5	movl	(%ecx),%eax
000004f7	movl	0x000003b0(%eax),%eax
000004fd	leal	0x845b8-0xe(%ebx),%edx
00000503	movl	%edx,0x08(%esp)
00000507	movl	%edi,0x04(%esp)
0000050b	movl	%ecx,(%esp)
0000050e	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000516	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
0000051e	call	*%eax
00000520	movl	$0x00000280,(%esp)
00000527	calll	operator new(unsigned long)
0000052c	movl	%eax,%edi
0000052e	movl	0x000001c0(%esi),%eax
00000534	movl	0xdc(%ebp),%ebx
00000537	leal	0x845c3-0xe(%ebx),%ecx
0000053d	movl	%ecx,0x08(%esp)
00000541	movl	%eax,0x04(%esp)
00000545	movl	%edi,(%esp)
00000548	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
0000054d	movl	%edi,0x000001c8(%esi)
00000553	movl	(%edi),%eax
00000555	movl	0x0000034c(%eax),%eax
0000055b	leal	0x845d2-0xe(%ebx),%ecx
00000561	movl	%ecx,0x0c(%esp)
00000565	movl	%ecx,0x08(%esp)
00000569	movl	%edi,(%esp)
0000056c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000574	movl	$0x00000034,0x10(%esp)
0000057c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000584	call	*%eax
00000586	movl	0x000001c8(%esi),%eax
0000058c	movl	(%eax),%ecx
0000058e	movl	0x000000b4(%ecx),%ecx
00000594	movl	%esi,0x04(%esp)
00000598	movl	%eax,(%esp)
0000059b	call	*%ecx
0000059d	movl	0x000001c8(%esi),%ecx
000005a3	movl	(%ecx),%eax
000005a5	movl	0x00000410(%eax),%eax
000005ab	movl	%ecx,(%esp)
000005ae	movl	$0x00000001,0x04(%esp)
000005b6	call	*%eax
000005b8	movl	0x000001c8(%esi),%eax
000005be	movl	(%eax),%ecx
000005c0	movl	0x00000420(%ecx),%ecx
000005c6	movl	0xdc(%ebp),%edx
000005c9	leal	0x84588-0xe(%edx),%edx
000005cf	movl	%edx,0x04(%esp)
000005d3	movl	%eax,(%esp)
000005d6	call	*%ecx
000005d8	movl	0x000001c8(%esi),%ecx
000005de	movl	(%ecx),%eax
000005e0	movl	0x00000240(%eax),%eax
000005e6	movl	%ecx,(%esp)
000005e9	movl	$0x00000001,0x04(%esp)
000005f1	call	*%eax
000005f3	movl	0x000001c8(%esi),%eax
000005f9	movl	%eax,(%esp)
000005fc	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00000604	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
0000060c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000614	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
0000061c	movl	$0x00000003,0x08(%esp)
00000624	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
0000062c	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000631	movl	0x000001c8(%esi),%ecx
00000637	movl	(%ecx),%eax
00000639	movl	0x00000378(%eax),%eax
0000063f	movl	0xdc(%ebp),%edx
00000642	leal	ActivitySortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0xe(%edx),%edx
00000648	movl	%edx,0x08(%esp)
0000064c	movl	%ecx,(%esp)
0000064f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000657	call	*%eax
00000659	movl	0x000001c8(%esi),%ecx
0000065f	movl	(%ecx),%eax
00000661	movl	0x0000037c(%eax),%eax
00000667	movl	%ecx,(%esp)
0000066a	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000672	call	*%eax
00000674	movl	(%esi),%eax
00000676	movl	0x00000354(%eax),%eax
0000067c	movl	0xdc(%ebp),%ecx
0000067f	leal	0x845db-0xe(%ecx),%ecx
00000685	movl	%ecx,0x04(%esp)
00000689	movl	%esi,(%esp)
0000068c	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00000694	call	*%eax
00000696	movl	%esi,(%esp)
00000699	calll	vgui::Panel::MakeReadyForUse()
0000069e	addl	$0x4c,%esp
000006a1	popl	%esi
000006a2	popl	%edi
000006a3	popl	%ebx
000006a4	popl	%ebp
000006a5	ret
000006a6	movl	%eax,%ebx
000006a8	movl	%edi,(%esp)
000006ab	calll	operator delete(void*)
000006b0	jmp	0x000006ca
000006b2	movl	%ebx,(%esp)
000006b5	movl	%eax,%ebx
000006b7	calll	operator delete(void*)
000006bc	jmp	0x000006ca
000006be	jmp	0x000006a6
000006c0	jmp	0x000006a6
000006c2	jmp	0x000006a6
000006c4	jmp	0x000006a6
000006c6	jmp	0x000006a6
000006c8	movl	%eax,%ebx
000006ca	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d8(%esi)
000006d1	movl	0xd4(%ebp),%eax
000006d4	movl	%ebx,%edi
000006d6	js	0x000006fc
000006d8	movl	%esi,%ebx
000006da	movl	%eax,%esi
000006dc	movl	(%esi),%eax
000006de	testl	%eax,%eax
000006e0	je	0x000006f0
000006e2	movl	%eax,(%esp)
000006e5	calll	_free
000006ea	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),(%esi)
000006f0	movl	%ebx,%esi
000006f2	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d4(%esi)
000006fc	movl	0xd8(%ebp),%eax
000006ff	movl	%eax,0x04(%esp)
00000703	movl	%esi,(%esp)
00000706	calll	vgui::EditablePanel::~EditablePanel()
0000070b	movl	%edi,(%esp)
0000070e	calll	__Unwind_Resume
00000713	movl	%eax,%edi
00000715	movl	%ebx,%esi
00000717	jmp	0x000006fc
00000719	calll	std::terminate()
0000071e	nop
SequenceSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&):
00000720	pushl	%ebp
00000721	movl	%esp,%ebp
00000723	pushl	%ebx
00000724	pushl	%edi
00000725	pushl	%esi
00000726	subl	$0x0c,%esp
00000729	calll	0x0000072e
0000072e	popl	%ecx
0000072f	movl	0x0c(%ebp),%eax
00000732	movl	(%eax),%eax
00000734	leal	0x84741-0x72e(%ecx),%edi
0000073a	movl	%edi,0x08(%esp)
0000073e	leal	0x8457f-0x72e(%ecx),%ebx
00000744	movl	%ebx,0x04(%esp)
00000748	movl	%eax,(%esp)
0000074b	calll	KeyValues::GetString(char const*, char const*)
00000750	movl	%eax,%esi
00000752	movl	0x10(%ebp),%eax
00000755	movl	(%eax),%eax
00000757	movl	%edi,0x08(%esp)
0000075b	movl	%ebx,0x04(%esp)
0000075f	movl	%eax,(%esp)
00000762	calll	KeyValues::GetString(char const*, char const*)
00000767	movl	%eax,0x04(%esp)
0000076b	movl	%esi,(%esp)
0000076e	calll	_strcasecmp
00000773	addl	$0x0c,%esp
00000776	popl	%esi
00000777	popl	%edi
00000778	popl	%ebx
00000779	popl	%ebp
0000077a	ret
0000077b	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
ActivitySortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&):
00000780	pushl	%ebp
00000781	movl	%esp,%ebp
00000783	pushl	%ebx
00000784	pushl	%edi
00000785	pushl	%esi
00000786	subl	$0x0c,%esp
00000789	calll	0x0000078e
0000078e	popl	%ecx
0000078f	movl	0x0c(%ebp),%eax
00000792	movl	(%eax),%eax
00000794	leal	0x84741-0x78e(%ecx),%edi
0000079a	movl	%edi,0x08(%esp)
0000079e	leal	0x845d2-0x78e(%ecx),%ebx
000007a4	movl	%ebx,0x04(%esp)
000007a8	movl	%eax,(%esp)
000007ab	calll	KeyValues::GetString(char const*, char const*)
000007b0	movl	%eax,%esi
000007b2	movl	0x10(%ebp),%eax
000007b5	movl	(%eax),%eax
000007b7	movl	%edi,0x08(%esp)
000007bb	movl	%ebx,0x04(%esp)
000007bf	movl	%eax,(%esp)
000007c2	calll	KeyValues::GetString(char const*, char const*)
000007c7	movl	%eax,0x04(%esp)
000007cb	movl	%esi,(%esp)
000007ce	calll	_strcasecmp
000007d3	addl	$0x0c,%esp
000007d6	popl	%esi
000007d7	popl	%edi
000007d8	popl	%ebx
000007d9	popl	%ebp
000007da	ret
000007db	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::CSequencePicker(vgui::Panel*, int):
000007e0	pushl	%ebp
000007e1	movl	%esp,%ebp
000007e3	pushl	%ebx
000007e4	pushl	%edi
000007e5	pushl	%esi
000007e6	subl	$0x4c,%esp
000007e9	calll	0x000007ee
000007ee	popl	%edi
000007ef	leal	0x84524-0x7ee(%edi),%eax
000007f5	movl	%eax,0x0c(%esp)
000007f9	movl	0x10(%ebp),%eax
000007fc	movl	%eax,0x08(%esp)
00000800	movl	0x0c(%ebp),%esi
00000803	leal	0x04(%esi),%eax
00000806	movl	%eax,0xd8(%ebp)
00000809	movl	%eax,0x04(%esp)
0000080d	movl	0x08(%ebp),%ebx
00000810	movl	%ebx,(%esp)
00000813	calll	vgui::EditablePanel::EditablePanel(vgui::Panel*, char const*)
00000818	movl	(%esi),%eax
0000081a	movl	%eax,(%ebx)
0000081c	testb	$0x01,CSequencePicker::ChainToMap()::chained-0x7ee(%edi)
00000823	jne	0x0000085a
00000825	movb	$0x01,CSequencePicker::ChainToMap()::chained-0x7ee(%edi)
0000082c	leal	0x84725-0x7ee(%edi),%eax
00000832	movl	%eax,(%esp)
00000835	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000083a	movl	%eax,%esi
0000083c	leal	CSequencePicker::GetPanelClassName()-0x7ee(%edi),%eax
00000842	movl	%eax,0x1c(%esi)
00000845	testl	%esi,%esi
00000847	je	0x0000085a
00000849	leal	0x8475b-0x7ee(%edi),%eax
0000084f	movl	%eax,(%esp)
00000852	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000857	movl	%eax,0x18(%esi)
0000085a	testb	$0x01,CSequencePicker::ChainToAnimationMap()::chained-0x7ee(%edi)
00000861	jne	0x00000898
00000863	movb	$0x01,CSequencePicker::ChainToAnimationMap()::chained-0x7ee(%edi)
0000086a	leal	0x84725-0x7ee(%edi),%eax
00000870	movl	%eax,(%esp)
00000873	calll	FindOrAddPanelAnimationMap(char const*)
00000878	movl	%eax,%esi
0000087a	leal	CSequencePicker::GetPanelClassName()-0x7ee(%edi),%eax
00000880	movl	%eax,0x18(%esi)
00000883	testl	%esi,%esi
00000885	je	0x00000898
00000887	leal	0x8475b-0x7ee(%edi),%eax
0000088d	movl	%eax,(%esp)
00000890	calll	FindOrAddPanelAnimationMap(char const*)
00000895	movl	%eax,0x14(%esi)
00000898	testb	$0x01,CSequencePicker::KB_ChainToMap()::chained-0x7ee(%edi)
0000089f	jne	0x000008d6
000008a1	movb	$0x01,CSequencePicker::KB_ChainToMap()::chained-0x7ee(%edi)
000008a8	leal	0x84725-0x7ee(%edi),%eax
000008ae	movl	%eax,(%esp)
000008b1	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000008b6	movl	%eax,%esi
000008b8	leal	CSequencePicker::GetPanelClassName()-0x7ee(%edi),%eax
000008be	movl	%eax,0x44(%esi)
000008c1	testl	%esi,%esi
000008c3	je	0x000008d6
000008c5	leal	0x8475b-0x7ee(%edi),%eax
000008cb	movl	%eax,(%esp)
000008ce	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000008d3	movl	%eax,0x18(%esi)
000008d6	testb	$0x01,CSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x7ee(%edi)
000008dd	jne	0x00000935
000008df	movb	$0x01,CSequencePicker::PanelMessageFunc_OnItemSelected::InitVar()::bAdded-0x7ee(%edi)
000008e6	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xe4(%ebp)
000008ed	movl	$0x000003ad,0xe0(%ebp)
000008f4	movsd	0xe0(%ebp),%xmm0
000008f9	movsd	%xmm0,0x04(%esp)
000008ff	leal	0x8474e-0x7ee(%edi),%eax
00000905	movl	%eax,(%esp)
00000908	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
00000910	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00000918	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000920	movl	$0x00000006,0x10(%esp)
00000928	movl	$0x00000001,0x0c(%esp)
00000930	calll	CSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000935	testb	$0x01,CSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x7ee(%edi)
0000093c	jne	0x00000994
0000093e	movb	$0x01,CSequencePicker::PanelMessageFunc_OnPageChanged::InitVar()::bAdded-0x7ee(%edi)
00000945	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xec(%ebp)
0000094c	movl	$0x000003b1,0xe8(%ebp)
00000953	movsd	0xe8(%ebp),%xmm0
00000958	movsd	%xmm0,0x04(%esp)
0000095e	leal	0x84742-0x7ee(%edi),%eax
00000964	movl	%eax,(%esp)
00000967	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
0000096f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00000977	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
0000097f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000987	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
0000098f	calll	CSequencePicker::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00000994	leal	0x000001d0(%ebx),%eax
0000099a	movl	%eax,0xd4(%ebp)
0000099d	movl	%eax,(%esp)
000009a0	calll	CUtlString::CUtlString()
000009a5	movl	%edi,0xdc(%ebp)
000009a8	movw	$0xffff,0x000001cc(%ebx)
000009b1	movl	$0x000001c4,(%esp)
000009b8	movl	%ebx,%esi
000009ba	calll	operator new(unsigned long)
000009bf	movl	%eax,%edi
000009c1	movl	0xdc(%ebp),%eax
000009c4	leal	0x84533-0x7ee(%eax),%eax
000009ca	movl	%eax,0x08(%esp)
000009ce	movl	%esi,0x04(%esp)
000009d2	movl	%edi,(%esp)
000009d5	movl	$0x00000001,0x10(%esp)
000009dd	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
000009e5	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000009ea	movl	%edi,0x000001b4(%esi)
000009f0	movl	%edi,(%esp)
000009f3	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
000009fb	calll	vgui::Panel::GetChild(int)
00000a00	movl	%eax,%edi
00000a02	movl	0x000001b4(%esi),%eax
00000a08	movl	%eax,(%esp)
00000a0b	movl	$0x00000001,0x04(%esp)
00000a13	calll	vgui::Panel::GetChild(int)
00000a18	movl	%eax,0xd0(%ebp)
00000a1b	movl	$0x00000c90,(%esp)
00000a22	calll	operator new(unsigned long)
00000a27	movl	%eax,%ebx
00000a29	movl	0xdc(%ebp),%eax
00000a2c	leal	0x84543-0x7ee(%eax),%eax
00000a32	movl	%eax,0x08(%esp)
00000a36	movl	%edi,0x04(%esp)
00000a3a	movl	%ebx,(%esp)
00000a3d	calll	CMDLPanel::CMDLPanel(vgui::Panel*, char const*)
00000a42	movl	%ebx,0x000001b0(%esi)
00000a48	movl	(%esi),%eax
00000a4a	movl	0x000002b8(%eax),%eax
00000a50	movl	%ebx,0x04(%esp)
00000a54	movl	%esi,(%esp)
00000a57	call	*%eax
00000a59	movl	$0x00000230,(%esp)
00000a60	calll	operator new(unsigned long)
00000a65	movl	%eax,%edi
00000a67	movl	0xdc(%ebp),%eax
00000a6a	leal	0x8454e-0x7ee(%eax),%eax
00000a70	movl	%eax,0x08(%esp)
00000a74	movl	0xd0(%ebp),%eax
00000a77	movl	%eax,0x04(%esp)
00000a7b	movl	%edi,(%esp)
00000a7e	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000a86	calll	vgui::PropertySheet::PropertySheet(vgui::Panel*, char const*, bool)
00000a8b	movl	%edi,0x000001b8(%esi)
00000a91	movl	(%edi),%eax
00000a93	movl	0x000000b4(%eax),%eax
00000a99	movl	%esi,0x04(%esp)
00000a9d	movl	%edi,(%esp)
00000aa0	call	*%eax
00000aa2	movl	0x14(%ebp),%eax
00000aa5	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%esi)
00000aaf	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c4(%esi)
00000ab9	testb	$0x01,%al
00000abb	je	0x00000c79
00000ac1	movl	$0x000001b8,(%esp)
00000ac8	calll	operator new(unsigned long)
00000acd	movl	%eax,%edi
00000acf	movl	0x000001b8(%esi),%eax
00000ad5	movl	0xdc(%ebp),%ebx
00000ad8	leal	0x84559-0x7ee(%ebx),%ecx
00000ade	movl	%ecx,0x08(%esp)
00000ae2	movl	%eax,0x04(%esp)
00000ae6	movl	%edi,(%esp)
00000ae9	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000aee	movl	%edi,0x000001bc(%esi)
00000af4	movl	0x000001b8(%esi),%ecx
00000afa	movl	(%ecx),%eax
00000afc	movl	0x000003b0(%eax),%eax
00000b02	leal	0x84567-0x7ee(%ebx),%edx
00000b08	movl	%edx,0x08(%esp)
00000b0c	movl	%edi,0x04(%esp)
00000b10	movl	%ecx,(%esp)
00000b13	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000b1b	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000b23	call	*%eax
00000b25	movl	$0x00000280,(%esp)
00000b2c	calll	operator new(unsigned long)
00000b31	movl	%eax,%edi
00000b33	movl	0x000001bc(%esi),%eax
00000b39	movl	0xdc(%ebp),%ebx
00000b3c	leal	0x84571-0x7ee(%ebx),%ecx
00000b42	movl	%ecx,0x08(%esp)
00000b46	movl	%eax,0x04(%esp)
00000b4a	movl	%edi,(%esp)
00000b4d	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000b52	movl	%edi,0x000001c4(%esi)
00000b58	movl	(%edi),%eax
00000b5a	movl	0x0000034c(%eax),%eax
00000b60	leal	0x8457f-0x7ee(%ebx),%ecx
00000b66	movl	%ecx,0x0c(%esp)
00000b6a	movl	%ecx,0x08(%esp)
00000b6e	movl	%edi,(%esp)
00000b71	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000b79	movl	$0x00000034,0x10(%esp)
00000b81	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000b89	call	*%eax
00000b8b	movl	0x000001c4(%esi),%eax
00000b91	movl	(%eax),%ecx
00000b93	movl	0x000000b4(%ecx),%ecx
00000b99	movl	%esi,0x04(%esp)
00000b9d	movl	%eax,(%esp)
00000ba0	call	*%ecx
00000ba2	movl	0x000001c4(%esi),%ecx
00000ba8	movl	(%ecx),%eax
00000baa	movl	0x00000410(%eax),%eax
00000bb0	movl	%ecx,(%esp)
00000bb3	movl	$0x00000001,0x04(%esp)
00000bbb	call	*%eax
00000bbd	movl	0x000001c4(%esi),%eax
00000bc3	movl	(%eax),%ecx
00000bc5	movl	0x00000420(%ecx),%ecx
00000bcb	movl	0xdc(%ebp),%edx
00000bce	leal	0x84588-0x7ee(%edx),%edx
00000bd4	movl	%edx,0x04(%esp)
00000bd8	movl	%eax,(%esp)
00000bdb	call	*%ecx
00000bdd	movl	0x000001c4(%esi),%ecx
00000be3	movl	(%ecx),%eax
00000be5	movl	0x00000240(%eax),%eax
00000beb	movl	%ecx,(%esp)
00000bee	movl	$0x00000001,0x04(%esp)
00000bf6	call	*%eax
00000bf8	movl	0x000001c4(%esi),%eax
00000bfe	movl	%eax,(%esp)
00000c01	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00000c09	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000c11	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000c19	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000c21	movl	$0x00000003,0x08(%esp)
00000c29	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000c31	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000c36	movl	0x000001c4(%esi),%ecx
00000c3c	movl	(%ecx),%eax
00000c3e	movl	0x00000378(%eax),%eax
00000c44	movl	0xdc(%ebp),%edx
00000c47	leal	SequenceSortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0x7ee(%edx),%edx
00000c4d	movl	%edx,0x08(%esp)
00000c51	movl	%ecx,(%esp)
00000c54	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000c5c	call	*%eax
00000c5e	movl	0x000001c4(%esi),%ecx
00000c64	movl	(%ecx),%eax
00000c66	movl	0x0000037c(%eax),%eax
00000c6c	movl	%ecx,(%esp)
00000c6f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000c77	call	*%eax
00000c79	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%esi)
00000c83	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c8(%esi)
00000c8d	movl	0x14(%ebp),%eax
00000c90	testb	$0x02,%al
00000c92	je	0x00000e50
00000c98	movl	$0x000001b8,(%esp)
00000c9f	calll	operator new(unsigned long)
00000ca4	movl	%eax,%edi
00000ca6	movl	0x000001b8(%esi),%eax
00000cac	movl	0xdc(%ebp),%ebx
00000caf	leal	0x845a9-0x7ee(%ebx),%ecx
00000cb5	movl	%ecx,0x08(%esp)
00000cb9	movl	%eax,0x04(%esp)
00000cbd	movl	%edi,(%esp)
00000cc0	calll	vgui::PropertyPage::PropertyPage(vgui::Panel*, char const*)
00000cc5	movl	%edi,0x000001c0(%esi)
00000ccb	movl	0x000001b8(%esi),%ecx
00000cd1	movl	(%ecx),%eax
00000cd3	movl	0x000003b0(%eax),%eax
00000cd9	leal	0x845b8-0x7ee(%ebx),%edx
00000cdf	movl	%edx,0x08(%esp)
00000ce3	movl	%edi,0x04(%esp)
00000ce7	movl	%ecx,(%esp)
00000cea	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000cf2	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000cfa	call	*%eax
00000cfc	movl	$0x00000280,(%esp)
00000d03	calll	operator new(unsigned long)
00000d08	movl	%eax,%edi
00000d0a	movl	0x000001c0(%esi),%eax
00000d10	movl	0xdc(%ebp),%ebx
00000d13	leal	0x845c3-0x7ee(%ebx),%ecx
00000d19	movl	%ecx,0x08(%esp)
00000d1d	movl	%eax,0x04(%esp)
00000d21	movl	%edi,(%esp)
00000d24	calll	vgui::ListPanel::ListPanel(vgui::Panel*, char const*)
00000d29	movl	%edi,0x000001c8(%esi)
00000d2f	movl	(%edi),%eax
00000d31	movl	0x0000034c(%eax),%eax
00000d37	leal	0x845d2-0x7ee(%ebx),%ecx
00000d3d	movl	%ecx,0x0c(%esp)
00000d41	movl	%ecx,0x08(%esp)
00000d45	movl	%edi,(%esp)
00000d48	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000d50	movl	$0x00000034,0x10(%esp)
00000d58	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000d60	call	*%eax
00000d62	movl	0x000001c8(%esi),%eax
00000d68	movl	(%eax),%ecx
00000d6a	movl	0x000000b4(%ecx),%ecx
00000d70	movl	%esi,0x04(%esp)
00000d74	movl	%eax,(%esp)
00000d77	call	*%ecx
00000d79	movl	0x000001c8(%esi),%ecx
00000d7f	movl	(%ecx),%eax
00000d81	movl	0x00000410(%eax),%eax
00000d87	movl	%ecx,(%esp)
00000d8a	movl	$0x00000001,0x04(%esp)
00000d92	call	*%eax
00000d94	movl	0x000001c8(%esi),%eax
00000d9a	movl	(%eax),%ecx
00000d9c	movl	0x00000420(%ecx),%ecx
00000da2	movl	0xdc(%ebp),%edx
00000da5	leal	0x84588-0x7ee(%edx),%edx
00000dab	movl	%edx,0x04(%esp)
00000daf	movl	%eax,(%esp)
00000db2	call	*%ecx
00000db4	movl	0x000001c8(%esi),%ecx
00000dba	movl	(%ecx),%eax
00000dbc	movl	0x00000240(%eax),%eax
00000dc2	movl	%ecx,(%esp)
00000dc5	movl	$0x00000001,0x04(%esp)
00000dcd	call	*%eax
00000dcf	movl	0x000001c8(%esi),%eax
00000dd5	movl	%eax,(%esp)
00000dd8	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00000de0	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00000de8	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
00000df0	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00000df8	movl	$0x00000003,0x08(%esp)
00000e00	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000e08	calll	vgui::Panel::SetAutoResize(vgui::Panel::PinCorner_e, vgui::Panel::AutoResize_e, int, int, int, int)
00000e0d	movl	0x000001c8(%esi),%ecx
00000e13	movl	(%ecx),%eax
00000e15	movl	0x00000378(%eax),%eax
00000e1b	movl	0xdc(%ebp),%edx
00000e1e	leal	ActivitySortFunc(vgui::ListPanel*, vgui::ListPanelItem const&, vgui::ListPanelItem const&)-0x7ee(%edx),%edx
00000e24	movl	%edx,0x08(%esp)
00000e28	movl	%ecx,(%esp)
00000e2b	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000e33	call	*%eax
00000e35	movl	0x000001c8(%esi),%ecx
00000e3b	movl	(%ecx),%eax
00000e3d	movl	0x0000037c(%eax),%eax
00000e43	movl	%ecx,(%esp)
00000e46	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00000e4e	call	*%eax
00000e50	movl	(%esi),%eax
00000e52	movl	0x00000354(%eax),%eax
00000e58	movl	0xdc(%ebp),%ecx
00000e5b	leal	0x845db-0x7ee(%ecx),%ecx
00000e61	movl	%ecx,0x04(%esp)
00000e65	movl	%esi,(%esp)
00000e68	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00000e70	call	*%eax
00000e72	movl	%esi,(%esp)
00000e75	calll	vgui::Panel::MakeReadyForUse()
00000e7a	addl	$0x4c,%esp
00000e7d	popl	%esi
00000e7e	popl	%edi
00000e7f	popl	%ebx
00000e80	popl	%ebp
00000e81	ret
00000e82	movl	%eax,%ebx
00000e84	movl	%edi,(%esp)
00000e87	calll	operator delete(void*)
00000e8c	jmp	0x00000ea6
00000e8e	movl	%ebx,(%esp)
00000e91	movl	%eax,%ebx
00000e93	calll	operator delete(void*)
00000e98	jmp	0x00000ea6
00000e9a	jmp	0x00000e82
00000e9c	jmp	0x00000e82
00000e9e	jmp	0x00000e82
00000ea0	jmp	0x00000e82
00000ea2	jmp	0x00000e82
00000ea4	movl	%eax,%ebx
00000ea6	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d8(%esi)
00000ead	movl	0xd4(%ebp),%eax
00000eb0	movl	%ebx,%edi
00000eb2	js	0x00000ed8
00000eb4	movl	%esi,%ebx
00000eb6	movl	%eax,%esi
00000eb8	movl	(%esi),%eax
00000eba	testl	%eax,%eax
00000ebc	je	0x00000ecc
00000ebe	movl	%eax,(%esp)
00000ec1	calll	_free
00000ec6	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),(%esi)
00000ecc	movl	%ebx,%esi
00000ece	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d4(%esi)
00000ed8	movl	0xd8(%ebp),%eax
00000edb	movl	%eax,0x04(%esp)
00000edf	movl	%esi,(%esp)
00000ee2	calll	vgui::EditablePanel::~EditablePanel()
00000ee7	movl	%edi,(%esp)
00000eea	calll	__Unwind_Resume
00000eef	movl	%eax,%edi
00000ef1	movl	%ebx,%esi
00000ef3	jmp	0x00000ed8
00000ef5	calll	std::terminate()
00000efa	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::~CSequencePicker():
00000f00	pushl	%ebp
00000f01	movl	%esp,%ebp
00000f03	pushl	%edi
00000f04	pushl	%esi
00000f05	subl	$0x10,%esp
00000f08	calll	0x00000f0d
00000f0d	popl	%esi
00000f0e	leal	vtable for CSequencePicker-0xf0d+0x0000000c(%esi),%eax
00000f14	movl	0x08(%ebp),%edi
00000f17	movl	%eax,(%edi)
00000f19	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d8(%edi)
00000f20	js	0x00000f48
00000f22	movl	0x000001d0(%edi),%eax
00000f28	testl	%eax,%eax
00000f2a	je	0x00000f3e
00000f2c	movl	%eax,(%esp)
00000f2f	calll	_free
00000f34	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d0(%edi)
00000f3e	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d4(%edi)
00000f48	leal	VTT for CSequencePicker-0xf0d+0x00000004(%esi),%eax
00000f4e	movl	%eax,0x04(%esp)
00000f52	movl	%edi,(%esp)
00000f55	calll	vgui::EditablePanel::~EditablePanel()
00000f5a	addl	$0x10,%esp
00000f5d	popl	%esi
00000f5e	popl	%edi
00000f5f	popl	%ebp
00000f60	jmp	operator delete(void*)
00000f65	movl	%eax,%esi
00000f67	movl	%edi,(%esp)
00000f6a	calll	operator delete(void*)
00000f6f	movl	%esi,(%esp)
00000f72	calll	__Unwind_Resume
00000f77	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::~CSequencePicker():
00000f80	pushl	%ebp
00000f81	movl	%esp,%ebp
00000f83	pushl	%edi
00000f84	pushl	%esi
00000f85	subl	$0x10,%esp
00000f88	calll	0x00000f8d
00000f8d	popl	%edi
00000f8e	leal	vtable for CSequencePicker-0xf8d+0x0000000c(%edi),%eax
00000f94	movl	0x08(%ebp),%esi
00000f97	movl	%eax,(%esi)
00000f99	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d8(%esi)
00000fa0	js	0x00000fc8
00000fa2	movl	0x000001d0(%esi),%eax
00000fa8	testl	%eax,%eax
00000faa	je	0x00000fbe
00000fac	movl	%eax,(%esp)
00000faf	calll	_free
00000fb4	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d0(%esi)
00000fbe	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d4(%esi)
00000fc8	leal	VTT for CSequencePicker-0xf8d+0x00000004(%edi),%eax
00000fce	movl	%eax,0x04(%esp)
00000fd2	movl	%esi,(%esp)
00000fd5	calll	vgui::EditablePanel::~EditablePanel()
00000fda	addl	$0x10,%esp
00000fdd	popl	%esi
00000fde	popl	%edi
00000fdf	popl	%ebp
00000fe0	ret
00000fe1	nopl	%cs:CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::~CSequencePicker():
00000ff0	pushl	%ebp
00000ff1	movl	%esp,%ebp
00000ff3	pushl	%edi
00000ff4	pushl	%esi
00000ff5	subl	$0x10,%esp
00000ff8	movl	0x0c(%ebp),%esi
00000ffb	movl	(%esi),%eax
00000ffd	movl	0x08(%ebp),%edi
00001000	movl	%eax,(%edi)
00001002	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d8(%edi)
00001009	js	0x00001031
0000100b	movl	0x000001d0(%edi),%eax
00001011	testl	%eax,%eax
00001013	je	0x00001027
00001015	movl	%eax,(%esp)
00001018	calll	_free
0000101d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d0(%edi)
00001027	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001d4(%edi)
00001031	addl	$0x04,%esi
00001034	movl	%esi,0x04(%esp)
00001038	movl	%edi,(%esp)
0000103b	calll	vgui::EditablePanel::~EditablePanel()
00001040	addl	$0x10,%esp
00001043	popl	%esi
00001044	popl	%edi
00001045	popl	%ebp
00001046	ret
00001047	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::PerformLayout():
00001050	pushl	%ebp
00001051	movl	%esp,%ebp
00001053	pushl	%esi
00001054	subl	$0x24,%esp
00001057	movl	0x08(%ebp),%esi
0000105a	movl	%esi,(%esp)
0000105d	calll	vgui::Panel::PerformLayout()
00001062	leal	0xf4(%ebp),%eax
00001065	movl	%eax,0x08(%esp)
00001069	leal	0xf8(%ebp),%eax
0000106c	movl	%eax,0x04(%esp)
00001070	movl	%esi,(%esp)
00001073	calll	vgui::Panel::GetSize(int&, int&)
00001078	movl	0x000001b4(%esi),%eax
0000107e	movl	0xf8(%ebp),%ecx
00001081	movl	0xf4(%ebp),%edx
00001084	movl	%edx,0x10(%esp)
00001088	movl	%ecx,0x0c(%esp)
0000108c	movl	%eax,(%esp)
0000108f	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00001097	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
0000109f	calll	vgui::Panel::SetBounds(int, int, int, int)
000010a4	addl	$0x24,%esp
000010a7	popl	%esi
000010a8	popl	%ebp
000010a9	ret
000010aa	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::RefreshActivitiesAndSequencesList():
000010b0	pushl	%ebp
000010b1	movl	%esp,%ebp
000010b3	pushl	%ebx
000010b4	pushl	%edi
000010b5	pushl	%esi
000010b6	subl	$0x5c,%esp
000010b9	calll	0x000010be
000010be	popl	%eax
000010bf	movl	%eax,0xbc(%ebp)
000010c2	movl	0x08(%ebp),%esi
000010c5	movl	0x000001c8(%esi),%eax
000010cb	testl	%eax,%eax
000010cd	je	0x000010da
000010cf	movl	(%eax),%ecx
000010d1	movl	%eax,(%esp)
000010d4	call	*0x000003c4(%ecx)
000010da	movl	0x000001c4(%esi),%eax
000010e0	testl	%eax,%eax
000010e2	je	0x000010ef
000010e4	movl	(%eax),%ecx
000010e6	movl	%eax,(%esp)
000010e9	call	*0x000003c4(%ecx)
000010ef	movl	0x000001b0(%esi),%eax
000010f5	movl	%eax,(%esp)
000010f8	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00001100	calll	CMDLPanel::SetSequence(int)
00001105	cmpw	$0xff,0x000001cc(%esi)
0000110d	je	0x00001501
00001113	calll	vgui::MDLCache()
00001118	movl	(%eax),%ecx
0000111a	movzwl	0x000001cc(%esi),%edx
00001121	movl	%edx,0x04(%esp)
00001125	movl	%eax,(%esp)
00001128	call	*0x28(%ecx)
0000112b	movl	%eax,0xb4(%ebp)
0000112e	movl	%eax,(%esp)
00001131	calll	studiohdr_t::GetNumSeq() const
00001136	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xc0(%ebp)
0000113d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xc4(%ebp)
00001144	movl	%eax,0xc8(%ebp)
00001147	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xcc(%ebp)
0000114e	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xb8(%ebp)
00001155	testl	%eax,%eax
00001157	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),%ecx
0000115c	je	0x0000116e
0000115e	shll	$0x04,%eax
00001161	movl	%eax,(%esp)
00001164	calll	_malloc
00001169	movl	%eax,%ecx
0000116b	movl	%ecx,0xc4(%ebp)
0000116e	movw	$0xffff,0xd0(%ebp)
00001174	movw	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xd2(%ebp)
0000117a	movw	$0xffff,0xd4(%ebp)
00001180	movw	$0xffff,0xd6(%ebp)
00001186	movl	%ecx,0xd8(%ebp)
00001189	movl	0xbc(%ebp),%eax
0000118c	leal	CaselessStringLessThan(char const* const&, char const* const&)-0x10be(%eax),%eax
00001192	movl	%eax,0xc0(%ebp)
00001195	nopl	%cs:CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
000011a0	movl	0xb4(%ebp),%eax
000011a3	movl	%eax,(%esp)
000011a6	calll	studiohdr_t::GetNumSeq() const
000011ab	movl	0xb8(%ebp),%ecx
000011ae	cmpl	%eax,%ecx
000011b0	movl	%ecx,%eax
000011b2	jge	0x000014c5
000011b8	movl	%eax,0x04(%esp)
000011bc	movl	0xb4(%ebp),%eax
000011bf	movl	%eax,(%esp)
000011c2	calll	studiohdr_t::pSeqdesc(int) const
000011c7	testb	$0x04,0x0d(%eax)
000011cb	jne	0x00001491
000011d1	movl	0xb8(%ebp),%eax
000011d4	movl	%eax,0x04(%esp)
000011d8	movl	0xb4(%ebp),%eax
000011db	movl	%eax,(%esp)
000011de	calll	studiohdr_t::pSeqdesc(int) const
000011e3	movl	%eax,%edi
000011e5	movl	0x08(%ebp),%eax
000011e8	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c8(%eax)
000011ef	je	0x00001352
000011f5	addl	0x08(%edi),%edi
000011f8	testl	%edi,%edi
000011fa	je	0x00001352
00001200	cmpb	CSequencePicker::CSequencePicker(vgui::Panel*, int),(%edi)
00001203	je	0x00001352
00001209	movl	%edi,0xe0(%ebp)
0000120c	leal	0xe0(%ebp),%eax
0000120f	movl	%eax,0x04(%esp)
00001213	leal	0xc0(%ebp),%eax
00001216	movl	%eax,(%esp)
00001219	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
0000121e	cmpw	$0xff,%ax
00001222	jne	0x00001352
00001228	movl	$0x00000020,(%esp)
0000122f	calll	KeyValues::operator new(unsigned long)
00001234	movl	%eax,%esi
00001236	movl	%edi,0x0c(%esp)
0000123a	movl	0xbc(%ebp),%ecx
0000123d	leal	0x845d2-0x10be(%ecx),%eax
00001243	movl	%eax,0x08(%esp)
00001247	leal	0x845f7-0x10be(%ecx),%eax
0000124d	movl	%ecx,%ebx
0000124f	movl	%eax,0x04(%esp)
00001253	movl	%esi,(%esp)
00001256	calll	KeyValues::KeyValues(char const*, char const*, char const*)
0000125b	movl	0x08(%ebp),%eax
0000125e	movl	0x000001c8(%eax),%ecx
00001264	movl	(%ecx),%eax
00001266	movl	0x00000390(%eax),%eax
0000126c	movl	%esi,0x04(%esp)
00001270	movl	%ecx,(%esp)
00001273	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
0000127b	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
00001283	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
0000128b	call	*%eax
0000128d	movl	%eax,0xb0(%ebp)
00001290	movl	$0x00000020,(%esp)
00001297	calll	KeyValues::operator new(unsigned long)
0000129c	movl	%eax,%esi
0000129e	movl	%edi,0x0c(%esp)
000012a2	leal	0x84601-0x10be(%ebx),%eax
000012a8	movl	%eax,0x08(%esp)
000012ac	leal	0x845fc-0x10be(%ebx),%eax
000012b2	movl	%eax,0x04(%esp)
000012b6	movl	%esi,(%esp)
000012b9	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000012be	leal	0x8460f-0x10be(%ebx),%eax
000012c4	movl	%eax,0x08(%esp)
000012c8	leal	0x84606-0x10be(%ebx),%eax
000012ce	movl	%ebx,0xbc(%ebp)
000012d1	movl	%eax,0x04(%esp)
000012d5	movl	%esi,(%esp)
000012d8	calll	KeyValues::SetString(char const*, char const*)
000012dd	calll	vgui::MDLCache()
000012e2	movl	(%eax),%ecx
000012e4	movl	0x5c(%ecx),%ecx
000012e7	movl	0x08(%ebp),%edx
000012ea	movzwl	0x000001cc(%edx),%edx
000012f1	movl	%edx,0x04(%esp)
000012f5	movl	%eax,(%esp)
000012f8	call	*%ecx
000012fa	movl	%eax,0x08(%esp)
000012fe	movl	0xbc(%ebp),%eax
00001301	leal	0x8461c-0x10be(%eax),%eax
00001307	movl	%eax,0x04(%esp)
0000130b	movl	%esi,(%esp)
0000130e	calll	KeyValues::SetString(char const*, char const*)
00001313	movl	0x08(%ebp),%eax
00001316	movl	0x000001c8(%eax),%eax
0000131c	movl	%esi,0x08(%esp)
00001320	movl	0xb0(%ebp),%ecx
00001323	movl	%ecx,0x04(%esp)
00001327	movl	%eax,(%esp)
0000132a	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
0000132f	movl	%edi,(%esp)
00001332	calll	_strdup
00001337	movl	%eax,0xe8(%ebp)
0000133a	movl	0xb8(%ebp),%eax
0000133d	movl	%eax,0xec(%ebp)
00001340	leal	0xe8(%ebp),%eax
00001343	movl	%eax,0x04(%esp)
00001347	leal	0xc0(%ebp),%eax
0000134a	movl	%eax,(%esp)
0000134d	calll	CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
00001352	movl	0xb8(%ebp),%eax
00001355	movl	%eax,0x04(%esp)
00001359	movl	0xb4(%ebp),%eax
0000135c	movl	%eax,(%esp)
0000135f	calll	studiohdr_t::pSeqdesc(int) const
00001364	movl	%eax,%esi
00001366	movl	0x08(%ebp),%eax
00001369	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c4(%eax)
00001370	je	0x00001491
00001376	addl	0x04(%esi),%esi
00001379	testl	%esi,%esi
0000137b	je	0x00001491
00001381	cmpb	CSequencePicker::CSequencePicker(vgui::Panel*, int),(%esi)
00001384	je	0x00001491
0000138a	movl	$0x00000020,(%esp)
00001391	calll	KeyValues::operator new(unsigned long)
00001396	movl	%eax,%ebx
00001398	movl	%esi,0x0c(%esp)
0000139c	movl	0xbc(%ebp),%ecx
0000139f	leal	0x8457f-0x10be(%ecx),%eax
000013a5	movl	%eax,0x08(%esp)
000013a9	leal	0x845f7-0x10be(%ecx),%eax
000013af	movl	%ecx,%edi
000013b1	movl	%eax,0x04(%esp)
000013b5	movl	%ebx,(%esp)
000013b8	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000013bd	movl	0x08(%ebp),%eax
000013c0	movl	0x000001c4(%eax),%ecx
000013c6	movl	(%ecx),%eax
000013c8	movl	0x00000390(%eax),%eax
000013ce	movl	%ebx,0x04(%esp)
000013d2	movl	%ecx,(%esp)
000013d5	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x10(%esp)
000013dd	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x0c(%esp)
000013e5	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
000013ed	call	*%eax
000013ef	movl	%eax,0xb0(%ebp)
000013f2	movl	$0x00000020,(%esp)
000013f9	calll	KeyValues::operator new(unsigned long)
000013fe	movl	%eax,%ebx
00001400	movl	%esi,0x0c(%esp)
00001404	leal	0x84601-0x10be(%edi),%eax
0000140a	movl	%eax,0x08(%esp)
0000140e	leal	0x845fc-0x10be(%edi),%eax
00001414	movl	%eax,0x04(%esp)
00001418	movl	%ebx,(%esp)
0000141b	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00001420	leal	0x84620-0x10be(%edi),%eax
00001426	movl	%eax,0x08(%esp)
0000142a	leal	0x84606-0x10be(%edi),%eax
00001430	movl	%edi,0xbc(%ebp)
00001433	movl	%eax,0x04(%esp)
00001437	movl	%ebx,(%esp)
0000143a	calll	KeyValues::SetString(char const*, char const*)
0000143f	calll	vgui::MDLCache()
00001444	movl	(%eax),%ecx
00001446	movl	0x5c(%ecx),%ecx
00001449	movl	0x08(%ebp),%edx
0000144c	movzwl	0x000001cc(%edx),%edx
00001453	movl	%edx,0x04(%esp)
00001457	movl	%eax,(%esp)
0000145a	call	*%ecx
0000145c	movl	%eax,0x08(%esp)
00001460	movl	0xbc(%ebp),%eax
00001463	leal	0x8461c-0x10be(%eax),%eax
00001469	movl	%eax,0x04(%esp)
0000146d	movl	%ebx,(%esp)
00001470	calll	KeyValues::SetString(char const*, char const*)
00001475	movl	0x08(%ebp),%eax
00001478	movl	0x000001c4(%eax),%eax
0000147e	movl	%ebx,0x08(%esp)
00001482	movl	0xb0(%ebp),%ecx
00001485	movl	%ecx,0x04(%esp)
00001489	movl	%eax,(%esp)
0000148c	calll	vgui::ListPanel::SetItemDragData(int, KeyValues const*)
00001491	incl	0xb8(%ebp)
00001494	jmp	0x000011a0
00001499	movl	%eax,%edi
0000149b	jmp	0x00001513
0000149d	movl	%eax,%edi
0000149f	jmp	0x00001513
000014a1	movl	%eax,%edi
000014a3	movl	%esi,(%esp)
000014a6	calll	KeyValues::operator delete(void*)
000014ab	jmp	0x00001513
000014ad	movl	%eax,%edi
000014af	movl	%ebx,(%esp)
000014b2	calll	KeyValues::operator delete(void*)
000014b7	jmp	0x00001513
000014b9	movl	%eax,%edi
000014bb	movl	%ebx,(%esp)
000014be	calll	KeyValues::operator delete(void*)
000014c3	jmp	0x00001513
000014c5	movl	0x08(%ebp),%esi
000014c8	movl	0x000001c4(%esi),%eax
000014ce	testl	%eax,%eax
000014d0	je	0x000014df
000014d2	movl	(%eax),%ecx
000014d4	movl	0x00000380(%ecx),%ecx
000014da	movl	%eax,(%esp)
000014dd	call	*%ecx
000014df	movl	0x000001c8(%esi),%eax
000014e5	testl	%eax,%eax
000014e7	je	0x000014f6
000014e9	movl	(%eax),%ecx
000014eb	movl	0x00000380(%ecx),%ecx
000014f1	movl	%eax,(%esp)
000014f4	call	*%ecx
000014f6	leal	0xc0(%ebp),%eax
000014f9	movl	%eax,(%esp)
000014fc	calll	CUtlDict<int, unsigned short>::~CUtlDict()
00001501	addl	$0x5c,%esp
00001504	popl	%esi
00001505	popl	%edi
00001506	popl	%ebx
00001507	popl	%ebp
00001508	ret
00001509	movl	%eax,%edi
0000150b	movl	%esi,(%esp)
0000150e	calll	KeyValues::operator delete(void*)
00001513	leal	0xc0(%ebp),%eax
00001516	movl	%eax,(%esp)
00001519	calll	CUtlDict<int, unsigned short>::~CUtlDict()
0000151e	movl	%edi,(%esp)
00001521	calll	__Unwind_Resume
00001526	calll	std::terminate()
0000152b	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::GetSelectedSequenceType():
00001530	pushl	%ebp
00001531	movl	%esp,%ebp
00001533	pushl	%esi
00001534	pushl	%eax
00001535	movl	0x08(%ebp),%esi
00001538	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%esi)
0000153f	je	0x00001561
00001541	movl	0x000001b8(%esi),%ecx
00001547	movl	(%ecx),%eax
00001549	movl	%ecx,(%esp)
0000154c	call	*0x000003bc(%eax)
00001552	movl	%eax,%ecx
00001554	movl	$0x00000001,%eax
00001559	cmpl	0x000001bc(%esi),%ecx
0000155f	je	0x0000158c
00001561	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%esi)
00001568	je	0x0000158a
0000156a	movl	0x000001b8(%esi),%ecx
00001570	movl	(%ecx),%eax
00001572	movl	%ecx,(%esp)
00001575	call	*0x000003bc(%eax)
0000157b	movl	%eax,%ecx
0000157d	movl	$0x00000002,%eax
00001582	cmpl	0x000001c0(%esi),%ecx
00001588	je	0x0000158c
0000158a	xorl	%eax,%eax
0000158c	addl	$0x04,%esp
0000158f	popl	%esi
00001590	popl	%ebp
00001591	ret
00001592	nopw	%cs:CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::GetSelectedSequenceName():
000015a0	pushl	%ebp
000015a1	movl	%esp,%ebp
000015a3	pushl	%edi
000015a4	pushl	%esi
000015a5	subl	$0x10,%esp
000015a8	calll	0x000015ad
000015ad	popl	%esi
000015ae	movl	0x08(%ebp),%edi
000015b1	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%edi)
000015b8	je	0x00001625
000015ba	movl	0x000001b8(%edi),%ecx
000015c0	movl	(%ecx),%eax
000015c2	movl	%ecx,(%esp)
000015c5	call	*0x000003bc(%eax)
000015cb	cmpl	0x000001bc(%edi),%eax
000015d1	jne	0x00001625
000015d3	movl	0x000001c4(%edi),%ecx
000015d9	movl	(%ecx),%eax
000015db	movl	%ecx,(%esp)
000015de	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
000015e6	call	*0x000003f8(%eax)
000015ec	testl	%eax,%eax
000015ee	js	0x00001681
000015f4	movl	0x000001c4(%edi),%edx
000015fa	movl	(%edx),%ecx
000015fc	movl	%eax,0x04(%esp)
00001600	movl	%edx,(%esp)
00001603	call	*0x0000039c(%ecx)
00001609	leal	0x8457f-0x15ad(%esi),%ecx
0000160f	movl	%ecx,0x04(%esp)
00001613	movl	%eax,(%esp)
00001616	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
0000161e	calll	KeyValues::GetString(char const*, char const*)
00001623	jmp	0x00001683
00001625	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%edi)
0000162c	je	0x00001681
0000162e	movl	0x000001b8(%edi),%ecx
00001634	movl	(%ecx),%eax
00001636	movl	%ecx,(%esp)
00001639	call	*0x000003bc(%eax)
0000163f	cmpl	0x000001c0(%edi),%eax
00001645	jne	0x00001681
00001647	movl	0x000001c8(%edi),%ecx
0000164d	movl	(%ecx),%eax
0000164f	movl	%ecx,(%esp)
00001652	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
0000165a	call	*0x000003f8(%eax)
00001660	testl	%eax,%eax
00001662	js	0x00001681
00001664	movl	0x000001c8(%edi),%edx
0000166a	movl	(%edx),%ecx
0000166c	movl	%eax,0x04(%esp)
00001670	movl	%edx,(%esp)
00001673	call	*0x0000039c(%ecx)
00001679	leal	0x845d2-0x15ad(%esi),%ecx
0000167f	jmp	0x0000160f
00001681	xorl	%eax,%eax
00001683	addl	$0x10,%esp
00001686	popl	%esi
00001687	popl	%edi
00001688	popl	%ebp
00001689	ret
0000168a	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::PlayActivity(char const*):
00001690	pushl	%ebp
00001691	movl	%esp,%ebp
00001693	pushl	%ebx
00001694	pushl	%edi
00001695	pushl	%esi
00001696	subl	$0x0c,%esp
00001699	calll	vgui::MDLCache()
0000169e	movl	(%eax),%ecx
000016a0	movl	0x08(%ebp),%edx
000016a3	movzwl	0x000001cc(%edx),%edx
000016aa	movl	%edx,0x04(%esp)
000016ae	movl	%eax,(%esp)
000016b1	call	*0x28(%ecx)
000016b4	movl	%eax,%esi
000016b6	xorl	%ebx,%ebx
000016b8	movl	0x0c(%ebp),%edi
000016bb	jmp	0x000016c1
000016bd	nopl	(%eax)
000016c0	incl	%ebx
000016c1	movl	%esi,(%esp)
000016c4	calll	studiohdr_t::GetNumSeq() const
000016c9	cmpl	%eax,%ebx
000016cb	jge	0x00001701
000016cd	movl	%ebx,0x04(%esp)
000016d1	movl	%esi,(%esp)
000016d4	calll	studiohdr_t::pSeqdesc(int) const
000016d9	addl	0x08(%eax),%eax
000016dc	movl	%edi,0x04(%esp)
000016e0	movl	%eax,(%esp)
000016e3	calll	_strcasecmp
000016e8	testl	%eax,%eax
000016ea	jne	0x000016c0
000016ec	movl	0x08(%ebp),%eax
000016ef	movl	0x000001b0(%eax),%eax
000016f5	movl	%ebx,0x04(%esp)
000016f9	movl	%eax,(%esp)
000016fc	calll	CMDLPanel::SetSequence(int)
00001701	addl	$0x0c,%esp
00001704	popl	%esi
00001705	popl	%edi
00001706	popl	%ebx
00001707	popl	%ebp
00001708	ret
00001709	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax)
CSequencePicker::PlaySequence(char const*):
00001710	pushl	%ebp
00001711	movl	%esp,%ebp
00001713	pushl	%ebx
00001714	pushl	%edi
00001715	pushl	%esi
00001716	subl	$0x0c,%esp
00001719	calll	vgui::MDLCache()
0000171e	movl	(%eax),%ecx
00001720	movl	0x08(%ebp),%edx
00001723	movzwl	0x000001cc(%edx),%edx
0000172a	movl	%edx,0x04(%esp)
0000172e	movl	%eax,(%esp)
00001731	call	*0x28(%ecx)
00001734	movl	%eax,%esi
00001736	xorl	%ebx,%ebx
00001738	movl	0x0c(%ebp),%edi
0000173b	jmp	0x00001741
0000173d	nopl	(%eax)
00001740	incl	%ebx
00001741	movl	%esi,(%esp)
00001744	calll	studiohdr_t::GetNumSeq() const
00001749	cmpl	%eax,%ebx
0000174b	jge	0x00001781
0000174d	movl	%ebx,0x04(%esp)
00001751	movl	%esi,(%esp)
00001754	calll	studiohdr_t::pSeqdesc(int) const
00001759	addl	0x04(%eax),%eax
0000175c	movl	%edi,0x04(%esp)
00001760	movl	%eax,(%esp)
00001763	calll	V_stricmp(char const*, char const*)
00001768	testl	%eax,%eax
0000176a	jne	0x00001740
0000176c	movl	0x08(%ebp),%eax
0000176f	movl	0x000001b0(%eax),%eax
00001775	movl	%ebx,0x04(%esp)
00001779	movl	%eax,(%esp)
0000177c	calll	CMDLPanel::SetSequence(int)
00001781	addl	$0x0c,%esp
00001784	popl	%esi
00001785	popl	%edi
00001786	popl	%ebx
00001787	popl	%ebp
00001788	ret
00001789	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax)
CSequencePicker::OnPageChanged():
00001790	pushl	%ebp
00001791	movl	%esp,%ebp
00001793	pushl	%ebx
00001794	pushl	%edi
00001795	pushl	%esi
00001796	subl	$0x1c,%esp
00001799	calll	0x0000179e
0000179e	popl	%eax
0000179f	movl	%eax,0xf0(%ebp)
000017a2	movl	0x08(%ebp),%ebx
000017a5	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%ebx)
000017ac	je	0x00001833
000017b2	movl	0x000001b8(%ebx),%ecx
000017b8	movl	(%ecx),%eax
000017ba	movl	%ecx,(%esp)
000017bd	call	*0x000003bc(%eax)
000017c3	cmpl	0x000001bc(%ebx),%eax
000017c9	jne	0x00001833
000017cb	movl	%ebx,(%esp)
000017ce	calll	CSequencePicker::GetSelectedSequenceName()
000017d3	movl	%eax,%esi
000017d5	testl	%esi,%esi
000017d7	je	0x0000182b
000017d9	movl	%esi,0x04(%esp)
000017dd	movl	%ebx,(%esp)
000017e0	calll	CSequencePicker::PlaySequence(char const*)
000017e5	movl	(%ebx),%eax
000017e7	movl	0x000000c0(%eax),%eax
000017ed	movl	%eax,0xec(%ebp)
000017f0	movl	$0x00000020,(%esp)
000017f7	calll	KeyValues::operator new(unsigned long)
000017fc	movl	%eax,%edi
000017fe	movl	%esi,0x0c(%esp)
00001802	movl	0xf0(%ebp),%ecx
00001805	leal	0x8457f-0x179e(%ecx),%eax
0000180b	movl	%eax,0x08(%esp)
0000180f	leal	0x8462d-0x179e(%ecx),%eax
00001815	movl	%eax,0x04(%esp)
00001819	movl	%edi,(%esp)
0000181c	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00001821	movl	%edi,0x04(%esp)
00001825	movl	%ebx,(%esp)
00001828	call	*0xec(%ebp)
0000182b	addl	$0x1c,%esp
0000182e	popl	%esi
0000182f	popl	%edi
00001830	popl	%ebx
00001831	popl	%ebp
00001832	ret
00001833	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%ebx)
0000183a	je	0x0000182b
0000183c	movl	0x000001b8(%ebx),%ecx
00001842	movl	(%ecx),%eax
00001844	movl	%ecx,(%esp)
00001847	call	*0x000003bc(%eax)
0000184d	cmpl	0x000001c0(%ebx),%eax
00001853	jne	0x0000182b
00001855	movl	%ebx,(%esp)
00001858	calll	CSequencePicker::GetSelectedSequenceName()
0000185d	movl	%eax,%esi
0000185f	testl	%esi,%esi
00001861	je	0x0000182b
00001863	movl	%esi,0x04(%esp)
00001867	movl	%ebx,(%esp)
0000186a	calll	CSequencePicker::PlayActivity(char const*)
0000186f	movl	(%ebx),%eax
00001871	movl	0x000000c0(%eax),%eax
00001877	movl	%eax,0xec(%ebp)
0000187a	movl	$0x00000020,(%esp)
00001881	calll	KeyValues::operator new(unsigned long)
00001886	movl	%eax,%edi
00001888	movl	%esi,0x0c(%esp)
0000188c	movl	0xf0(%ebp),%ecx
0000188f	leal	0x845d2-0x179e(%ecx),%eax
00001895	movl	%eax,0x08(%esp)
00001899	leal	0x8462d-0x179e(%ecx),%eax
0000189f	movl	%eax,0x04(%esp)
000018a3	movl	%edi,(%esp)
000018a6	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000018ab	jmp	0x00001821
000018b0	movl	%eax,%esi
000018b2	movl	%edi,(%esp)
000018b5	calll	KeyValues::operator delete(void*)
000018ba	jmp	0x000018c6
000018bc	movl	%eax,%esi
000018be	movl	%edi,(%esp)
000018c1	calll	KeyValues::operator delete(void*)
000018c6	movl	%esi,(%esp)
000018c9	calll	__Unwind_Resume
000018ce	calll	std::terminate()
000018d3	nopl	%cs:CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::OnItemSelected(KeyValues*):
000018e0	pushl	%ebp
000018e1	movl	%esp,%ebp
000018e3	pushl	%ebx
000018e4	pushl	%edi
000018e5	pushl	%esi
000018e6	subl	$0x1c,%esp
000018e9	calll	0x000018ee
000018ee	popl	%ebx
000018ef	leal	0x84644-0x18ee(%ebx),%eax
000018f5	movl	%eax,0x04(%esp)
000018f9	movl	0x0c(%ebp),%eax
000018fc	movl	%eax,(%esp)
000018ff	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00001907	calll	KeyValues::GetPtr(char const*, void*)
0000190c	movl	0x08(%ebp),%edi
0000190f	movl	0x000001c4(%edi),%ecx
00001915	testl	%ecx,%ecx
00001917	je	0x00001985
00001919	cmpl	%ecx,%eax
0000191b	jne	0x00001985
0000191d	movl	%edi,(%esp)
00001920	calll	CSequencePicker::GetSelectedSequenceName()
00001925	movl	%eax,%esi
00001927	testl	%esi,%esi
00001929	je	0x0000197d
0000192b	movl	%esi,0x04(%esp)
0000192f	movl	%edi,(%esp)
00001932	calll	CSequencePicker::PlaySequence(char const*)
00001937	movl	(%edi),%eax
00001939	movl	0x000000c0(%eax),%eax
0000193f	movl	%eax,0xf0(%ebp)
00001942	movl	$0x00000020,(%esp)
00001949	calll	KeyValues::operator new(unsigned long)
0000194e	movl	%eax,%edi
00001950	movl	%esi,0x0c(%esp)
00001954	leal	0x8457f-0x18ee(%ebx),%eax
0000195a	movl	%eax,0x08(%esp)
0000195e	leal	0x8462d-0x18ee(%ebx),%eax
00001964	movl	%eax,0x04(%esp)
00001968	movl	%edi,(%esp)
0000196b	calll	KeyValues::KeyValues(char const*, char const*, char const*)
00001970	movl	%edi,0x04(%esp)
00001974	movl	0x08(%ebp),%eax
00001977	movl	%eax,(%esp)
0000197a	call	*0xf0(%ebp)
0000197d	addl	$0x1c,%esp
00001980	popl	%esi
00001981	popl	%edi
00001982	popl	%ebx
00001983	popl	%ebp
00001984	ret
00001985	movl	0x000001c8(%edi),%ecx
0000198b	testl	%ecx,%ecx
0000198d	je	0x0000197d
0000198f	cmpl	%ecx,%eax
00001991	jne	0x0000197d
00001993	movl	%edi,(%esp)
00001996	calll	CSequencePicker::GetSelectedSequenceName()
0000199b	movl	%eax,%esi
0000199d	testl	%esi,%esi
0000199f	je	0x0000197d
000019a1	movl	%esi,0x04(%esp)
000019a5	movl	%edi,(%esp)
000019a8	calll	CSequencePicker::PlayActivity(char const*)
000019ad	movl	(%edi),%eax
000019af	movl	0x000000c0(%eax),%eax
000019b5	movl	%eax,0xf0(%ebp)
000019b8	movl	$0x00000020,(%esp)
000019bf	calll	KeyValues::operator new(unsigned long)
000019c4	movl	%eax,%edi
000019c6	movl	%esi,0x0c(%esp)
000019ca	leal	0x845d2-0x18ee(%ebx),%eax
000019d0	movl	%eax,0x08(%esp)
000019d4	leal	0x8462d-0x18ee(%ebx),%eax
000019da	movl	%eax,0x04(%esp)
000019de	movl	%edi,(%esp)
000019e1	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000019e6	jmp	0x00001970
000019e8	movl	%eax,%esi
000019ea	movl	%edi,(%esp)
000019ed	calll	KeyValues::operator delete(void*)
000019f2	jmp	0x000019fe
000019f4	movl	%eax,%esi
000019f6	movl	%edi,(%esp)
000019f9	calll	KeyValues::operator delete(void*)
000019fe	movl	%esi,(%esp)
00001a01	calll	__Unwind_Resume
00001a06	calll	std::terminate()
00001a0b	nopl	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePicker::SetMDL(char const*):
00001a10	pushl	%ebp
00001a11	movl	%esp,%ebp
00001a13	pushl	%esi
00001a14	subl	$0x14,%esp
00001a17	movw	$0xffff,%ax
00001a1b	movl	0x0c(%ebp),%esi
00001a1e	testl	%esi,%esi
00001a20	je	0x00001a33
00001a22	calll	vgui::MDLCache()
00001a27	movl	(%eax),%ecx
00001a29	movl	%esi,0x04(%esp)
00001a2d	movl	%eax,(%esp)
00001a30	call	*0x18(%ecx)
00001a33	movl	0x08(%ebp),%esi
00001a36	movw	%ax,0x000001cc(%esi)
00001a3d	calll	vgui::MDLCache()
00001a42	movl	(%eax),%ecx
00001a44	movzwl	0x000001cc(%esi),%edx
00001a4b	movl	%edx,0x04(%esp)
00001a4f	movl	%eax,(%esp)
00001a52	call	*0x50(%ecx)
00001a55	testb	%al,%al
00001a57	jne	0x00001a62
00001a59	movzwl	0x000001cc(%esi),%eax
00001a60	jmp	0x00001a6f
00001a62	movw	$0xffff,0x000001cc(%esi)
00001a6b	movw	$0xffff,%ax
00001a6f	movl	0x000001b0(%esi),%edx
00001a75	movl	(%edx),%ecx
00001a77	movzwl	%ax,%eax
00001a7a	movl	%eax,0x04(%esp)
00001a7e	movl	%edx,(%esp)
00001a81	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00001a89	call	*0x000003b4(%ecx)
00001a8f	movl	0x000001b0(%esi),%eax
00001a95	movl	%eax,(%esp)
00001a98	calll	CMDLPanel::LookAtMDL()
00001a9d	addl	$0x14,%esp
00001aa0	popl	%esi
00001aa1	popl	%ebp
00001aa2	jmp	CSequencePicker::RefreshActivitiesAndSequencesList()
00001aa7	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePickerFrame::CSequencePickerFrame(vgui::Panel*, int):
00001ab0	pushl	%ebp
00001ab1	movl	%esp,%ebp
00001ab3	pushl	%ebx
00001ab4	pushl	%edi
00001ab5	pushl	%esi
00001ab6	subl	$0x3c,%esp
00001ab9	calll	0x00001abe
00001abe	popl	%ebx
00001abf	leal	0x8464a-0x1abe(%ebx),%eax
00001ac5	movl	%eax,0x0c(%esp)
00001ac9	movl	0x0c(%ebp),%eax
00001acc	movl	%eax,0x08(%esp)
00001ad0	leal	VTT for CSequencePickerFrame-0x1abe+0x00000004(%ebx),%eax
00001ad6	movl	%eax,0xe4(%ebp)
00001ad9	movl	%eax,0x04(%esp)
00001add	movl	0x08(%ebp),%esi
00001ae0	movl	%esi,(%esp)
00001ae3	movl	$0x00000001,0x14(%esp)
00001aeb	movl	$0x00000001,0x10(%esp)
00001af3	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00001af8	leal	vtable for CSequencePickerFrame-0x1abe+0x0000000c(%ebx),%eax
00001afe	movl	%eax,(%esi)
00001b00	testb	$0x01,CSequencePickerFrame::ChainToMap()::chained-0x1abe(%ebx)
00001b07	jne	0x00001b3e
00001b09	movb	$0x01,CSequencePickerFrame::ChainToMap()::chained-0x1abe(%ebx)
00001b10	leal	0x846fc-0x1abe(%ebx),%eax
00001b16	movl	%eax,(%esp)
00001b19	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001b1e	movl	%eax,%esi
00001b20	leal	CSequencePickerFrame::GetPanelClassName()-0x1abe(%ebx),%eax
00001b26	movl	%eax,0x1c(%esi)
00001b29	testl	%esi,%esi
00001b2b	je	0x00001b3e
00001b2d	leal	0x84735-0x1abe(%ebx),%eax
00001b33	movl	%eax,(%esp)
00001b36	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001b3b	movl	%eax,0x18(%esi)
00001b3e	testb	$0x01,CSequencePickerFrame::ChainToAnimationMap()::chained-0x1abe(%ebx)
00001b45	jne	0x00001b7c
00001b47	movb	$0x01,CSequencePickerFrame::ChainToAnimationMap()::chained-0x1abe(%ebx)
00001b4e	leal	0x846fc-0x1abe(%ebx),%eax
00001b54	movl	%eax,(%esp)
00001b57	calll	FindOrAddPanelAnimationMap(char const*)
00001b5c	movl	%eax,%esi
00001b5e	leal	CSequencePickerFrame::GetPanelClassName()-0x1abe(%ebx),%eax
00001b64	movl	%eax,0x18(%esi)
00001b67	testl	%esi,%esi
00001b69	je	0x00001b7c
00001b6b	leal	0x84735-0x1abe(%ebx),%eax
00001b71	movl	%eax,(%esp)
00001b74	calll	FindOrAddPanelAnimationMap(char const*)
00001b79	movl	%eax,0x14(%esi)
00001b7c	testb	$0x01,CSequencePickerFrame::KB_ChainToMap()::chained-0x1abe(%ebx)
00001b83	jne	0x00001bba
00001b85	movb	$0x01,CSequencePickerFrame::KB_ChainToMap()::chained-0x1abe(%ebx)
00001b8c	leal	0x846fc-0x1abe(%ebx),%eax
00001b92	movl	%eax,(%esp)
00001b95	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001b9a	movl	%eax,%esi
00001b9c	leal	CSequencePickerFrame::GetPanelClassName()-0x1abe(%ebx),%eax
00001ba2	movl	%eax,0x44(%esi)
00001ba5	testl	%esi,%esi
00001ba7	je	0x00001bba
00001ba9	leal	0x84735-0x1abe(%ebx),%eax
00001baf	movl	%eax,(%esp)
00001bb2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001bb7	movl	%eax,0x18(%esi)
00001bba	testb	$0x01,CSequencePickerFrame::PanelMessageFunc_OnSequencePreviewChanged::InitVar()::bAdded-0x1abe(%ebx)
00001bc1	jne	0x00001c19
00001bc3	movb	$0x01,CSequencePickerFrame::PanelMessageFunc_OnSequencePreviewChanged::InitVar()::bAdded-0x1abe(%ebx)
00001bca	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xec(%ebp)
00001bd1	movl	$0x00000451,0xe8(%ebp)
00001bd8	movsd	0xe8(%ebp),%xmm0
00001bdd	movsd	%xmm0,0x04(%esp)
00001be3	leal	0x8462d-0x1abe(%ebx),%eax
00001be9	movl	%eax,(%esp)
00001bec	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
00001bf4	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00001bfc	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00001c04	movl	$0x00000006,0x10(%esp)
00001c0c	movl	$0x00000001,0x0c(%esp)
00001c14	calll	CSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001c19	movl	0x08(%ebp),%ecx
00001c1c	movl	(%ecx),%eax
00001c1e	movl	0x000003c4(%eax),%eax
00001c24	movl	%ecx,(%esp)
00001c27	movl	$0x00000001,0x04(%esp)
00001c2f	call	*%eax
00001c31	movl	$0x000001e0,(%esp)
00001c38	calll	operator new(unsigned long)
00001c3d	movl	%eax,%edi
00001c3f	movl	0x10(%ebp),%eax
00001c42	movl	%eax,0x08(%esp)
00001c46	movl	0x08(%ebp),%esi
00001c49	movl	%esi,0x04(%esp)
00001c4d	movl	%edi,(%esp)
00001c50	calll	CSequencePicker::CSequencePicker(vgui::Panel*, int)
00001c55	movl	%edi,0x00000240(%esi)
00001c5b	movl	(%edi),%eax
00001c5d	movl	0x000000b4(%eax),%eax
00001c63	movl	%esi,0x04(%esp)
00001c67	movl	%edi,(%esp)
00001c6a	call	*%eax
00001c6c	movl	$0x00000224,(%esp)
00001c73	calll	operator new(unsigned long)
00001c78	movl	%eax,%edi
00001c7a	leal	0x8467e-0x1abe(%ebx),%eax
00001c80	movl	%eax,0x14(%esp)
00001c84	movl	0x08(%ebp),%esi
00001c87	movl	%esi,0x10(%esp)
00001c8b	leal	0x84669-0x1abe(%ebx),%eax
00001c91	movl	%eax,0x0c(%esp)
00001c95	leal	0x8465e-0x1abe(%ebx),%eax
00001c9b	movl	%eax,0x08(%esp)
00001c9f	movl	%esi,0x04(%esp)
00001ca3	movl	%edi,(%esp)
00001ca6	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00001cab	movl	%edi,0x00000244(%esi)
00001cb1	movl	$0x00000224,(%esp)
00001cb8	calll	operator new(unsigned long)
00001cbd	movl	%eax,%edi
00001cbf	leal	0x846a7-0x1abe(%ebx),%eax
00001cc5	movl	%eax,0x14(%esp)
00001cc9	movl	0x08(%ebp),%esi
00001ccc	movl	%esi,0x10(%esp)
00001cd0	leal	0x84690-0x1abe(%ebx),%eax
00001cd6	movl	%eax,0x0c(%esp)
00001cda	leal	0x84683-0x1abe(%ebx),%eax
00001ce0	movl	%eax,0x08(%esp)
00001ce4	movl	%esi,0x04(%esp)
00001ce8	movl	%edi,(%esp)
00001ceb	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00001cf0	movl	%edi,0x00000248(%esi)
00001cf6	movl	(%esi),%eax
00001cf8	movl	0x00000250(%eax),%eax
00001cfe	movl	%esi,(%esp)
00001d01	movl	$0x00000001,0x04(%esp)
00001d09	call	*%eax
00001d0b	movl	0x08(%ebp),%edx
00001d0e	movl	(%edx),%eax
00001d10	movl	0x00000354(%eax),%eax
00001d16	leal	0x846ae-0x1abe(%ebx),%ecx
00001d1c	movl	%ecx,0x04(%esp)
00001d20	movl	%edx,(%esp)
00001d23	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00001d2b	call	*%eax
00001d2d	movl	0x08(%ebp),%eax
00001d30	movl	0x00000244(%eax),%ecx
00001d36	movl	(%ecx),%eax
00001d38	movl	0x000000dc(%eax),%eax
00001d3e	movl	%ecx,(%esp)
00001d41	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00001d49	call	*%eax
00001d4b	addl	$0x3c,%esp
00001d4e	popl	%esi
00001d4f	popl	%edi
00001d50	popl	%ebx
00001d51	popl	%ebp
00001d52	ret
00001d53	movl	%eax,%esi
00001d55	jmp	0x00001d65
00001d57	jmp	0x00001d5b
00001d59	jmp	0x00001d5b
00001d5b	movl	%eax,%esi
00001d5d	movl	%edi,(%esp)
00001d60	calll	operator delete(void*)
00001d65	movl	0xe4(%ebp),%eax
00001d68	movl	%eax,0x04(%esp)
00001d6c	movl	0x08(%ebp),%eax
00001d6f	movl	%eax,(%esp)
00001d72	calll	vgui::Frame::~Frame()
00001d77	movl	%esi,(%esp)
00001d7a	calll	__Unwind_Resume
00001d7f	calll	std::terminate()
00001d84	nopw	%cs:CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePickerFrame::CSequencePickerFrame(vgui::Panel*, int):
00001d90	pushl	%ebp
00001d91	movl	%esp,%ebp
00001d93	pushl	%ebx
00001d94	pushl	%edi
00001d95	pushl	%esi
00001d96	subl	$0x3c,%esp
00001d99	calll	0x00001d9e
00001d9e	popl	%ebx
00001d9f	leal	0x8464a-0x1d9e(%ebx),%eax
00001da5	movl	%eax,0x0c(%esp)
00001da9	movl	0x10(%ebp),%eax
00001dac	movl	%eax,0x08(%esp)
00001db0	movl	0x0c(%ebp),%esi
00001db3	leal	0x04(%esi),%eax
00001db6	movl	%eax,0xe4(%ebp)
00001db9	movl	%eax,0x04(%esp)
00001dbd	movl	0x08(%ebp),%edi
00001dc0	movl	%edi,(%esp)
00001dc3	movl	$0x00000001,0x14(%esp)
00001dcb	movl	$0x00000001,0x10(%esp)
00001dd3	calll	vgui::Frame::Frame(vgui::Panel*, char const*, bool, bool)
00001dd8	movl	(%esi),%eax
00001dda	movl	%eax,(%edi)
00001ddc	testb	$0x01,CSequencePickerFrame::ChainToMap()::chained-0x1d9e(%ebx)
00001de3	jne	0x00001e1a
00001de5	movb	$0x01,CSequencePickerFrame::ChainToMap()::chained-0x1d9e(%ebx)
00001dec	leal	0x846fc-0x1d9e(%ebx),%eax
00001df2	movl	%eax,(%esp)
00001df5	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001dfa	movl	%eax,%esi
00001dfc	leal	CSequencePickerFrame::GetPanelClassName()-0x1d9e(%ebx),%eax
00001e02	movl	%eax,0x1c(%esi)
00001e05	testl	%esi,%esi
00001e07	je	0x00001e1a
00001e09	leal	0x84735-0x1d9e(%ebx),%eax
00001e0f	movl	%eax,(%esp)
00001e12	calll	vgui::FindOrAddPanelMessageMap(char const*)
00001e17	movl	%eax,0x18(%esi)
00001e1a	testb	$0x01,CSequencePickerFrame::ChainToAnimationMap()::chained-0x1d9e(%ebx)
00001e21	jne	0x00001e58
00001e23	movb	$0x01,CSequencePickerFrame::ChainToAnimationMap()::chained-0x1d9e(%ebx)
00001e2a	leal	0x846fc-0x1d9e(%ebx),%eax
00001e30	movl	%eax,(%esp)
00001e33	calll	FindOrAddPanelAnimationMap(char const*)
00001e38	movl	%eax,%esi
00001e3a	leal	CSequencePickerFrame::GetPanelClassName()-0x1d9e(%ebx),%eax
00001e40	movl	%eax,0x18(%esi)
00001e43	testl	%esi,%esi
00001e45	je	0x00001e58
00001e47	leal	0x84735-0x1d9e(%ebx),%eax
00001e4d	movl	%eax,(%esp)
00001e50	calll	FindOrAddPanelAnimationMap(char const*)
00001e55	movl	%eax,0x14(%esi)
00001e58	testb	$0x01,CSequencePickerFrame::KB_ChainToMap()::chained-0x1d9e(%ebx)
00001e5f	jne	0x00001e96
00001e61	movb	$0x01,CSequencePickerFrame::KB_ChainToMap()::chained-0x1d9e(%ebx)
00001e68	leal	0x846fc-0x1d9e(%ebx),%eax
00001e6e	movl	%eax,(%esp)
00001e71	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001e76	movl	%eax,%esi
00001e78	leal	CSequencePickerFrame::GetPanelClassName()-0x1d9e(%ebx),%eax
00001e7e	movl	%eax,0x44(%esi)
00001e81	testl	%esi,%esi
00001e83	je	0x00001e96
00001e85	leal	0x84735-0x1d9e(%ebx),%eax
00001e8b	movl	%eax,(%esp)
00001e8e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00001e93	movl	%eax,0x18(%esi)
00001e96	testb	$0x01,CSequencePickerFrame::PanelMessageFunc_OnSequencePreviewChanged::InitVar()::bAdded-0x1d9e(%ebx)
00001e9d	jne	0x00001ef5
00001e9f	movb	$0x01,CSequencePickerFrame::PanelMessageFunc_OnSequencePreviewChanged::InitVar()::bAdded-0x1d9e(%ebx)
00001ea6	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0xec(%ebp)
00001ead	movl	$0x00000451,0xe8(%ebp)
00001eb4	movsd	0xe8(%ebp),%xmm0
00001eb9	movsd	%xmm0,0x04(%esp)
00001ebf	leal	0x8462d-0x1d9e(%ebx),%eax
00001ec5	movl	%eax,(%esp)
00001ec8	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x1c(%esp)
00001ed0	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x18(%esp)
00001ed8	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x14(%esp)
00001ee0	movl	$0x00000006,0x10(%esp)
00001ee8	movl	$0x00000001,0x0c(%esp)
00001ef0	calll	CSequencePickerFrame::AddToMap(char const*, void (vgui::Panel::*)(), int, int, char const*, int, char const*)
00001ef5	movl	0x08(%ebp),%ecx
00001ef8	movl	(%ecx),%eax
00001efa	movl	0x000003c4(%eax),%eax
00001f00	movl	%ecx,(%esp)
00001f03	movl	$0x00000001,0x04(%esp)
00001f0b	call	*%eax
00001f0d	movl	$0x000001e0,(%esp)
00001f14	calll	operator new(unsigned long)
00001f19	movl	%eax,%edi
00001f1b	movl	0x14(%ebp),%eax
00001f1e	movl	%eax,0x08(%esp)
00001f22	movl	0x08(%ebp),%esi
00001f25	movl	%esi,0x04(%esp)
00001f29	movl	%edi,(%esp)
00001f2c	calll	CSequencePicker::CSequencePicker(vgui::Panel*, int)
00001f31	movl	%edi,0x00000240(%esi)
00001f37	movl	(%edi),%eax
00001f39	movl	0x000000b4(%eax),%eax
00001f3f	movl	%esi,0x04(%esp)
00001f43	movl	%edi,(%esp)
00001f46	call	*%eax
00001f48	movl	$0x00000224,(%esp)
00001f4f	calll	operator new(unsigned long)
00001f54	movl	%eax,%edi
00001f56	leal	0x8467e-0x1d9e(%ebx),%eax
00001f5c	movl	%eax,0x14(%esp)
00001f60	movl	0x08(%ebp),%esi
00001f63	movl	%esi,0x10(%esp)
00001f67	leal	0x84669-0x1d9e(%ebx),%eax
00001f6d	movl	%eax,0x0c(%esp)
00001f71	leal	0x8465e-0x1d9e(%ebx),%eax
00001f77	movl	%eax,0x08(%esp)
00001f7b	movl	%esi,0x04(%esp)
00001f7f	movl	%edi,(%esp)
00001f82	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00001f87	movl	%edi,0x00000244(%esi)
00001f8d	movl	$0x00000224,(%esp)
00001f94	calll	operator new(unsigned long)
00001f99	movl	%eax,%edi
00001f9b	leal	0x846a7-0x1d9e(%ebx),%eax
00001fa1	movl	%eax,0x14(%esp)
00001fa5	movl	0x08(%ebp),%esi
00001fa8	movl	%esi,0x10(%esp)
00001fac	leal	0x84690-0x1d9e(%ebx),%eax
00001fb2	movl	%eax,0x0c(%esp)
00001fb6	leal	0x84683-0x1d9e(%ebx),%eax
00001fbc	movl	%eax,0x08(%esp)
00001fc0	movl	%esi,0x04(%esp)
00001fc4	movl	%edi,(%esp)
00001fc7	calll	vgui::Button::Button(vgui::Panel*, char const*, char const*, vgui::Panel*, char const*)
00001fcc	movl	%edi,0x00000248(%esi)
00001fd2	movl	(%esi),%eax
00001fd4	movl	0x00000250(%eax),%eax
00001fda	movl	%esi,(%esp)
00001fdd	movl	$0x00000001,0x04(%esp)
00001fe5	call	*%eax
00001fe7	movl	0x08(%ebp),%edx
00001fea	movl	(%edx),%eax
00001fec	movl	0x00000354(%eax),%eax
00001ff2	leal	0x846ae-0x1d9e(%ebx),%ecx
00001ff8	movl	%ecx,0x04(%esp)
00001ffc	movl	%edx,(%esp)
00001fff	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
00002007	call	*%eax
00002009	movl	0x08(%ebp),%eax
0000200c	movl	0x00000244(%eax),%ecx
00002012	movl	(%ecx),%eax
00002014	movl	0x000000dc(%eax),%eax
0000201a	movl	%ecx,(%esp)
0000201d	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x04(%esp)
00002025	call	*%eax
00002027	addl	$0x3c,%esp
0000202a	popl	%esi
0000202b	popl	%edi
0000202c	popl	%ebx
0000202d	popl	%ebp
0000202e	ret
0000202f	movl	%eax,%esi
00002031	jmp	0x00002041
00002033	jmp	0x00002037
00002035	jmp	0x00002037
00002037	movl	%eax,%esi
00002039	movl	%edi,(%esp)
0000203c	calll	operator delete(void*)
00002041	movl	0xe4(%ebp),%eax
00002044	movl	%eax,0x04(%esp)
00002048	movl	0x08(%ebp),%eax
0000204b	movl	%eax,(%esp)
0000204e	calll	vgui::Frame::~Frame()
00002053	movl	%esi,(%esp)
00002056	calll	__Unwind_Resume
0000205b	calll	std::terminate()
CSequencePickerFrame::DoModal(char const*):
00002060	pushl	%ebp
00002061	movl	%esp,%ebp
00002063	subl	$0x08,%esp
00002066	movl	0x08(%ebp),%eax
00002069	movl	0x00000240(%eax),%eax
0000206f	movl	0x0c(%ebp),%ecx
00002072	movl	%ecx,0x04(%esp)
00002076	movl	%eax,(%esp)
00002079	calll	CSequencePicker::SetMDL(char const*)
0000207e	addl	$0x08,%esp
00002081	popl	%ebp
00002082	jmp	vgui::Frame::DoModal()
00002087	nopw	CSequencePicker::CSequencePicker(vgui::Panel*, int)(%eax,%eax)
CSequencePickerFrame::OnSequencePreviewChanged(KeyValues*):
00002090	pushl	%ebp
00002091	movl	%esp,%ebp
00002093	pushl	%ebx
00002094	pushl	%edi
00002095	pushl	%esi
00002096	subl	$0x0c,%esp
00002099	calll	0x0000209e
0000209e	popl	%edi
0000209f	leal	0x8457f-0x209e(%edi),%eax
000020a5	movl	%eax,0x04(%esp)
000020a9	movl	0x0c(%ebp),%ebx
000020ac	movl	%ebx,(%esp)
000020af	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
000020b7	calll	KeyValues::GetString(char const*, char const*)
000020bc	movl	%eax,%esi
000020be	leal	0x845d2-0x209e(%edi),%eax
000020c4	movl	%eax,0x04(%esp)
000020c8	movl	%ebx,(%esp)
000020cb	movl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x08(%esp)
000020d3	calll	KeyValues::GetString(char const*, char const*)
000020d8	orl	%esi,%eax
000020da	setne	%al
000020dd	movzbl	%al,%eax
000020e0	movl	0x08(%ebp),%ecx
000020e3	movl	0x00000244(%ecx),%edx
000020e9	movl	(%edx),%ecx
000020eb	movl	%eax,0x04(%esp)
000020ef	movl	%edx,(%esp)
000020f2	call	*0x000000dc(%ecx)
000020f8	addl	$0x0c,%esp
000020fb	popl	%esi
000020fc	popl	%edi
000020fd	popl	%ebx
000020fe	popl	%ebp
000020ff	ret
CSequencePickerFrame::OnCommand(char const*):
00002100	pushl	%ebp
00002101	movl	%esp,%ebp
00002103	pushl	%ebx
00002104	pushl	%edi
00002105	pushl	%esi
00002106	subl	$0x1c,%esp
00002109	calll	0x0000210e
0000210e	popl	%ebx
0000210f	leal	0x8467e-0x210e(%ebx),%eax
00002115	movl	%eax,0x04(%esp)
00002119	movl	0x0c(%ebp),%esi
0000211c	movl	%esi,(%esp)
0000211f	calll	V_stricmp(char const*, char const*)
00002124	movl	0x08(%ebp),%edi
00002127	testl	%eax,%eax
00002129	jne	0x0000222b
0000212f	movl	0x00000240(%edi),%esi
00002135	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001bc(%esi)
0000213c	je	0x0000215e
0000213e	movl	0x000001b8(%esi),%ecx
00002144	movl	(%ecx),%eax
00002146	movl	%ecx,(%esp)
00002149	call	*0x000003bc(%eax)
0000214f	movl	$0x00000001,0xec(%ebp)
00002156	cmpl	0x000001bc(%esi),%eax
0000215c	je	0x0000218f
0000215e	cmpl	CSequencePicker::CSequencePicker(vgui::Panel*, int),0x000001c0(%esi)
00002165	je	0x0000225e
0000216b	movl	0x000001b8(%esi),%ecx
00002171	movl	(%ecx),%eax
00002173	movl	%ecx,(%esp)
00002176	call	*0x000003bc(%eax)
0000217c	movl	$0x00000002,0xec(%ebp)
00002183	cmpl	0x000001c0(%esi),%eax
00002189	jne	0x0000225e
0000218f	movl	0x08(%ebp),%eax
00002192	movl	0x00000240(%eax),%eax
00002198	movl	%eax,(%esp)
0000219b	calll	CSequencePicker::GetSelectedSequenceName()
000021a0	movl	%eax,%edi
000021a2	testl	%edi,%edi
000021a4	je	0x0000225e
000021aa	movl	0x08(%ebp),%eax
000021ad	movl	(%eax),%eax
000021af	movl	0x000000c0(%eax),%eax
000021b5	movl	%eax,0xf0(%ebp)
000021b8	movl	$0x00000020,(%esp)
000021bf	calll	KeyValues::operator new(unsigned long)
000021c4	movl	%eax,%esi
000021c6	cmpl	$0x01,0xec(%ebp)
000021ca	jne	0x000021fd
000021cc	movl	%edi,0x0c(%esp)
000021d0	leal	0x8457f-0x210e(%ebx),%eax
000021d6	movl	%eax,0x08(%esp)
000021da	leal	0x846cf-0x210e(%ebx),%eax
000021e0	movl	%eax,0x04(%esp)
000021e4	movl	%esi,(%esp)
000021e7	calll	KeyValues::KeyValues(char const*, char const*, char const*)
000021ec	movl	%esi,0x04(%esp)
000021f0	movl	0x08(%ebp),%esi
000021f3	movl	%esi,(%esp)
000021f6	call	*0xf0(%ebp)
000021f9	movl	(%esi),%eax
000021fb	jmp	0x00002243
000021fd	movl	%edi,0x0c(%esp)
00002201	leal	0x845d2-0x210e(%ebx),%eax
00002207	movl	%eax,0x08(%esp)
0000220b	leal	0x846cf-0x210e(%ebx),%eax
00002211	movl	%eax,0x04(%esp)
00002215	movl	%esi,(%esp)
00002218	calll	KeyValues::KeyValues(char const*, char const*, char const*)
0000221d	jmp	0x000021ec
0000221f	movl	%eax,%edi
00002221	movl	%esi,(%esp)
00002224	calll	KeyValues::operator delete(void*)
00002229	jmp	0x00002270
0000222b	leal	0x846a7-0x210e(%ebx),%eax
00002231	movl	%eax,0x04(%esp)
00002235	movl	%esi,(%esp)
00002238	calll	V_stricmp(char const*, char const*)
0000223d	testl	%eax,%eax
0000223f	jne	0x00002252
00002241	movl	(%edi),%eax
00002243	movl	0x000003c0(%eax),%eax
00002249	addl	$0x1c,%esp
0000224c	popl	%esi
0000224d	popl	%edi
0000224e	popl	%ebx
0000224f	popl	%ebp
00002250	jmp	*%eax
00002252	addl	$0x1c,%esp
00002255	popl	%esi
00002256	popl	%edi
00002257	popl	%ebx
00002258	popl	%ebp
00002259	jmp	vgui::Frame::OnCommand(char const*)
0000225e	addl	$0x1c,%esp
00002261	popl	%esi
00002262	popl	%edi
00002263	popl	%ebx
00002264	popl	%ebp
00002265	ret
00002266	movl	%eax,%edi
00002268	movl	%esi,(%esp)
0000226b	calll	KeyValues::operator delete(void*)
00002270	movl	%edi,(%esp)
00002273	calll	__Unwind_Resume
00002278	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(tgapreviewpanel.o):
(__TEXT,__text) section
CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CTGAPreviewPanel-0xe+0x00000004(%edi),%eax
00000023	movl	%eax,0xf0(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%ebx
0000002d	movl	%ebx,(%esp)
00000030	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
00000035	leal	vtable for CTGAPreviewPanel-0xe+0x0000000c(%edi),%eax
0000003b	movl	%eax,(%ebx)
0000003d	leal	vtable for CTGAPreviewPanel-0xe+0x000003d0(%edi),%eax
00000043	movl	%eax,0x000001ac(%ebx)
00000049	testb	$0x01,CTGAPreviewPanel::ChainToMap()::chained-0xe(%edi)
00000050	jne	0x00000087
00000052	movb	$0x01,CTGAPreviewPanel::ChainToMap()::chained-0xe(%edi)
00000059	leal	0x356d8-0xe(%edi),%eax
0000005f	movl	%eax,(%esp)
00000062	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000067	movl	%eax,%esi
00000069	leal	CTGAPreviewPanel::GetPanelClassName()-0xe(%edi),%eax
0000006f	movl	%eax,0x1c(%esi)
00000072	testl	%esi,%esi
00000074	je	0x00000087
00000076	leal	0x356c0-0xe(%edi),%eax
0000007c	movl	%eax,(%esp)
0000007f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000084	movl	%eax,0x18(%esi)
00000087	testb	$0x01,CTGAPreviewPanel::ChainToAnimationMap()::chained-0xe(%edi)
0000008e	jne	0x000000c5
00000090	movb	$0x01,CTGAPreviewPanel::ChainToAnimationMap()::chained-0xe(%edi)
00000097	leal	0x356d8-0xe(%edi),%eax
0000009d	movl	%eax,(%esp)
000000a0	calll	FindOrAddPanelAnimationMap(char const*)
000000a5	movl	%eax,%esi
000000a7	leal	CTGAPreviewPanel::GetPanelClassName()-0xe(%edi),%eax
000000ad	movl	%eax,0x18(%esi)
000000b0	testl	%esi,%esi
000000b2	je	0x000000c5
000000b4	leal	0x356c0-0xe(%edi),%eax
000000ba	movl	%eax,(%esp)
000000bd	calll	FindOrAddPanelAnimationMap(char const*)
000000c2	movl	%eax,0x14(%esi)
000000c5	testb	$0x01,CTGAPreviewPanel::KB_ChainToMap()::chained-0xe(%edi)
000000cc	jne	0x00000103
000000ce	movb	$0x01,CTGAPreviewPanel::KB_ChainToMap()::chained-0xe(%edi)
000000d5	leal	0x356d8-0xe(%edi),%eax
000000db	movl	%eax,(%esp)
000000de	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000e3	movl	%eax,%esi
000000e5	leal	CTGAPreviewPanel::GetPanelClassName()-0xe(%edi),%eax
000000eb	movl	%eax,0x44(%esi)
000000ee	testl	%esi,%esi
000000f0	je	0x00000103
000000f2	leal	0x356c0-0xe(%edi),%eax
000000f8	movl	%eax,(%esp)
000000fb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000100	movl	%eax,0x18(%esi)
00000103	leal	0x000001f4(%ebx),%eax
00000109	movl	%eax,(%esp)
0000010c	calll	CUtlString::CUtlString()
00000111	addl	$0x1c,%esp
00000114	popl	%esi
00000115	popl	%edi
00000116	popl	%ebx
00000117	popl	%ebp
00000118	ret
00000119	movl	%eax,%esi
0000011b	movl	0xf0(%ebp),%eax
0000011e	movl	%eax,0x04(%esp)
00000122	movl	%ebx,(%esp)
00000125	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
0000012a	movl	%esi,(%esp)
0000012d	calll	__Unwind_Resume
00000132	calll	std::terminate()
00000137	nopw	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%ebx
00000144	pushl	%edi
00000145	pushl	%esi
00000146	subl	$0x1c,%esp
00000149	calll	0x0000014e
0000014e	popl	%edi
0000014f	movl	0x14(%ebp),%eax
00000152	movl	%eax,0x0c(%esp)
00000156	movl	0x10(%ebp),%eax
00000159	movl	%eax,0x08(%esp)
0000015d	movl	0x0c(%ebp),%esi
00000160	leal	0x04(%esi),%eax
00000163	movl	%eax,0xf0(%ebp)
00000166	movl	%eax,0x04(%esp)
0000016a	movl	0x08(%ebp),%ebx
0000016d	movl	%ebx,(%esp)
00000170	calll	CProceduralTexturePanel::CProceduralTexturePanel(vgui::Panel*, char const*)
00000175	movl	(%esi),%eax
00000177	movl	%eax,(%ebx)
00000179	leal	vtable for CTGAPreviewPanel-0x14e+0x000003d0(%edi),%eax
0000017f	movl	%eax,0x000001ac(%ebx)
00000185	testb	$0x01,CTGAPreviewPanel::ChainToMap()::chained-0x14e(%edi)
0000018c	jne	0x000001c3
0000018e	movb	$0x01,CTGAPreviewPanel::ChainToMap()::chained-0x14e(%edi)
00000195	leal	0x356d8-0x14e(%edi),%eax
0000019b	movl	%eax,(%esp)
0000019e	calll	vgui::FindOrAddPanelMessageMap(char const*)
000001a3	movl	%eax,%esi
000001a5	leal	CTGAPreviewPanel::GetPanelClassName()-0x14e(%edi),%eax
000001ab	movl	%eax,0x1c(%esi)
000001ae	testl	%esi,%esi
000001b0	je	0x000001c3
000001b2	leal	0x356c0-0x14e(%edi),%eax
000001b8	movl	%eax,(%esp)
000001bb	calll	vgui::FindOrAddPanelMessageMap(char const*)
000001c0	movl	%eax,0x18(%esi)
000001c3	testb	$0x01,CTGAPreviewPanel::ChainToAnimationMap()::chained-0x14e(%edi)
000001ca	jne	0x00000201
000001cc	movb	$0x01,CTGAPreviewPanel::ChainToAnimationMap()::chained-0x14e(%edi)
000001d3	leal	0x356d8-0x14e(%edi),%eax
000001d9	movl	%eax,(%esp)
000001dc	calll	FindOrAddPanelAnimationMap(char const*)
000001e1	movl	%eax,%esi
000001e3	leal	CTGAPreviewPanel::GetPanelClassName()-0x14e(%edi),%eax
000001e9	movl	%eax,0x18(%esi)
000001ec	testl	%esi,%esi
000001ee	je	0x00000201
000001f0	leal	0x356c0-0x14e(%edi),%eax
000001f6	movl	%eax,(%esp)
000001f9	calll	FindOrAddPanelAnimationMap(char const*)
000001fe	movl	%eax,0x14(%esi)
00000201	testb	$0x01,CTGAPreviewPanel::KB_ChainToMap()::chained-0x14e(%edi)
00000208	jne	0x0000023f
0000020a	movb	$0x01,CTGAPreviewPanel::KB_ChainToMap()::chained-0x14e(%edi)
00000211	leal	0x356d8-0x14e(%edi),%eax
00000217	movl	%eax,(%esp)
0000021a	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000021f	movl	%eax,%esi
00000221	leal	CTGAPreviewPanel::GetPanelClassName()-0x14e(%edi),%eax
00000227	movl	%eax,0x44(%esi)
0000022a	testl	%esi,%esi
0000022c	je	0x0000023f
0000022e	leal	0x356c0-0x14e(%edi),%eax
00000234	movl	%eax,(%esp)
00000237	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000023c	movl	%eax,0x18(%esi)
0000023f	leal	0x000001f4(%ebx),%eax
00000245	movl	%eax,(%esp)
00000248	calll	CUtlString::CUtlString()
0000024d	addl	$0x1c,%esp
00000250	popl	%esi
00000251	popl	%edi
00000252	popl	%ebx
00000253	popl	%ebp
00000254	ret
00000255	movl	%eax,%esi
00000257	movl	0xf0(%ebp),%eax
0000025a	movl	%eax,0x04(%esp)
0000025e	movl	%ebx,(%esp)
00000261	calll	CProceduralTexturePanel::~CProceduralTexturePanel()
00000266	movl	%esi,(%esp)
00000269	calll	__Unwind_Resume
0000026e	calll	std::terminate()
00000273	nopl	%cs:CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CTGAPreviewPanel::SetTGA(char const*):
00000280	pushl	%ebp
00000281	movl	%esp,%ebp
00000283	pushl	%ebx
00000284	pushl	%edi
00000285	pushl	%esi
00000286	subl	$0x6c,%esp
00000289	calll	0x0000028e
0000028e	popl	%edi
0000028f	leal	0xa8(%ebp),%esi
00000292	movl	%esi,(%esp)
00000295	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
0000029d	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000002a5	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
000002ad	calll	CUtlBuffer::CUtlBuffer(int, int, int)
000002b2	movl	0x37bfd-0x28e(%edi),%eax
000002b8	movl	(%eax),%ecx
000002ba	movl	0x04(%ecx),%eax
000002bd	movl	0x38(%eax),%eax
000002c0	movl	0x0c(%ebp),%ebx
000002c3	movl	%esi,0x0c(%esp)
000002c7	movl	%ebx,0x04(%esp)
000002cb	addl	$0x04,%ecx
000002ce	movl	%ecx,(%esp)
000002d1	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x18(%esp)
000002d9	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x14(%esp)
000002e1	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
000002e9	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000002f1	call	*%eax
000002f3	testb	%al,%al
000002f5	jne	0x0000033b
000002f7	movl	%ebx,0x04(%esp)
000002fb	leal	0x35693-0x28e(%edi),%eax
00000301	movl	%eax,(%esp)
00000304	calll	_Warning
00000309	jmp	0x00000414
0000030e	movl	%eax,%esi
00000310	cmpl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
00000314	js	0x00000333
00000316	movl	0xa8(%ebp),%eax
00000319	testl	%eax,%eax
0000031b	je	0x0000032c
0000031d	movl	%eax,(%esp)
00000320	calll	_free
00000325	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
0000032c	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
00000333	movl	%esi,(%esp)
00000336	calll	__Unwind_Resume
0000033b	leal	0xe4(%ebp),%eax
0000033e	movl	%eax,0x10(%esp)
00000342	leal	0xe8(%ebp),%eax
00000345	movl	%eax,0x0c(%esp)
00000349	leal	0xec(%ebp),%eax
0000034c	movl	%eax,0x08(%esp)
00000350	leal	0xf0(%ebp),%eax
00000353	movl	%eax,0x04(%esp)
00000357	movl	%esi,(%esp)
0000035a	calll	TGALoader::GetInfo(CUtlBuffer&, int*, int*, ImageFormat*, float*)
0000035f	movl	0x08(%ebp),%edi
00000362	movl	(%edi),%eax
00000364	movl	0x000003b8(%eax),%eax
0000036a	movl	%edi,(%esp)
0000036d	call	*%eax
0000036f	movl	(%edi),%eax
00000371	movl	0x000003b4(%eax),%eax
00000377	movl	0xf0(%ebp),%ecx
0000037a	movl	0xec(%ebp),%edx
0000037d	movl	%edx,0x08(%esp)
00000381	movl	%ecx,0x04(%esp)
00000385	movl	%edi,(%esp)
00000388	movl	$0x00000001,0x0c(%esp)
00000390	call	*%eax
00000392	movl	%ebx,0x04(%esp)
00000396	leal	0x000001f4(%edi),%eax
0000039c	movl	%eax,(%esp)
0000039f	calll	CUtlString::operator=(char const*)
000003a4	movl	%esi,(%esp)
000003a7	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000003af	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
000003b7	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
000003bc	movl	%edi,(%esp)
000003bf	calll	CProceduralTexturePanel::GetImageBuffer()
000003c4	movl	0xf0(%ebp),%ecx
000003c7	movl	0xec(%ebp),%edx
000003ca	movss	0xe4(%ebp),%xmm0
000003cf	movss	%xmm0,0x14(%esp)
000003d5	movl	%edx,0x0c(%esp)
000003d9	movl	%ecx,0x08(%esp)
000003dd	movl	%esi,0x04(%esp)
000003e1	movl	%eax,(%esp)
000003e4	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0x18(%esp)
000003ec	movl	$0x0000000c,0x10(%esp)
000003f4	calll	TGALoader::Load(unsigned char*, CUtlBuffer&, int, int, ImageFormat, float, bool)
000003f9	testb	%al,%al
000003fb	jne	0x0000040c
000003fd	movl	(%edi),%eax
000003ff	movl	0x000003b8(%eax),%eax
00000405	movl	%edi,(%esp)
00000408	call	*%eax
0000040a	jmp	0x00000414
0000040c	movl	%edi,(%esp)
0000040f	calll	CProceduralTexturePanel::DownloadTexture()
00000414	cmpl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
00000418	js	0x00000437
0000041a	movl	0xa8(%ebp),%eax
0000041d	testl	%eax,%eax
0000041f	je	0x00000430
00000421	movl	%eax,(%esp)
00000424	calll	_free
00000429	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00000430	movl	CTGAPreviewPanel::CTGAPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
00000437	addl	$0x6c,%esp
0000043a	popl	%esi
0000043b	popl	%edi
0000043c	popl	%ebx
0000043d	popl	%ebp
0000043e	ret
0000043f	nop
CTGAPreviewPanel::GetTGA() const:
00000440	pushl	%ebp
00000441	movl	%esp,%ebp
00000443	subl	$0x08,%esp
00000446	movl	$0x000001f4,%eax
0000044b	addl	0x08(%ebp),%eax
0000044e	movl	%eax,(%esp)
00000451	calll	CUtlString::operator char const*() const
00000456	addl	$0x08,%esp
00000459	popl	%ebp
0000045a	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(vmtpanel.o):
(__TEXT,__text) section
CVMTPanel::CVMTPanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CVMTPanel-0xe+0x00000004(%ebx),%eax
00000023	movl	%eax,0xe8(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	CPotteryWheelPanel::CPotteryWheelPanel(vgui::Panel*, char const*)
00000035	leal	vtable for CVMTPanel-0xe+0x0000000c(%ebx),%eax
0000003b	movl	%eax,(%edi)
0000003d	testb	$0x01,CVMTPanel::ChainToMap()::chained-0xe(%ebx)
00000044	jne	0x0000007b
00000046	movb	$0x01,CVMTPanel::ChainToMap()::chained-0xe(%ebx)
0000004d	leal	0x4f0a4-0xe(%ebx),%eax
00000053	movl	%eax,(%esp)
00000056	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005b	movl	%eax,%esi
0000005d	leal	CVMTPanel::GetPanelClassName()-0xe(%ebx),%eax
00000063	movl	%eax,0x1c(%esi)
00000066	testl	%esi,%esi
00000068	je	0x0000007b
0000006a	leal	0x4f091-0xe(%ebx),%eax
00000070	movl	%eax,(%esp)
00000073	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000078	movl	%eax,0x18(%esi)
0000007b	testb	$0x01,CVMTPanel::ChainToAnimationMap()::chained-0xe(%ebx)
00000082	jne	0x000000b9
00000084	movb	$0x01,CVMTPanel::ChainToAnimationMap()::chained-0xe(%ebx)
0000008b	leal	0x4f0a4-0xe(%ebx),%eax
00000091	movl	%eax,(%esp)
00000094	calll	FindOrAddPanelAnimationMap(char const*)
00000099	movl	%eax,%esi
0000009b	leal	CVMTPanel::GetPanelClassName()-0xe(%ebx),%eax
000000a1	movl	%eax,0x18(%esi)
000000a4	testl	%esi,%esi
000000a6	je	0x000000b9
000000a8	leal	0x4f091-0xe(%ebx),%eax
000000ae	movl	%eax,(%esp)
000000b1	calll	FindOrAddPanelAnimationMap(char const*)
000000b6	movl	%eax,0x14(%esi)
000000b9	testb	$0x01,CVMTPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c0	jne	0x000000f7
000000c2	movb	$0x01,CVMTPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c9	leal	0x4f0a4-0xe(%ebx),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000d7	movl	%eax,%esi
000000d9	leal	CVMTPanel::GetPanelClassName()-0xe(%ebx),%eax
000000df	movl	%eax,0x44(%esi)
000000e2	testl	%esi,%esi
000000e4	je	0x000000f7
000000e6	leal	0x4f091-0xe(%ebx),%eax
000000ec	movl	%eax,(%esp)
000000ef	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f4	movl	%eax,0x18(%esi)
000000f7	leal	0x000004e0(%edi),%eax
000000fd	movl	%eax,0xf0(%ebp)
00000100	movl	%eax,(%esp)
00000103	calll	CTextureReference::CTextureReference()
00000108	leal	0x000004e4(%edi),%eax
0000010e	movl	%eax,0xec(%ebp)
00000111	movl	%eax,(%esp)
00000114	calll	CTextureReference::CTextureReference()
00000119	movb	$0x01,0x000004e8(%edi)
00000120	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x000004dc(%edi)
0000012a	movl	%edi,%esi
0000012c	movl	$0x000001b0,(%esp)
00000133	calll	operator new(unsigned long)
00000138	movl	%eax,%edi
0000013a	leal	0x4f014-0xe(%ebx),%eax
00000140	movl	%eax,0x08(%esp)
00000144	movl	%esi,0x04(%esp)
00000148	movl	%edi,(%esp)
0000014b	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x0c(%esp)
00000153	calll	vgui::ScrollBar::ScrollBar(vgui::Panel*, char const*, bool)
00000158	movl	%edi,0x000004ec(%esi)
0000015e	movl	(%edi),%eax
00000160	movl	0x000000b4(%eax),%eax
00000166	movl	%esi,0x04(%esp)
0000016a	movl	%edi,(%esp)
0000016d	call	*%eax
0000016f	movl	0x000004ec(%esi),%ecx
00000175	movl	(%ecx),%eax
00000177	movl	0x00000088(%eax),%eax
0000017d	movl	%ecx,(%esp)
00000180	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000188	call	*%eax
0000018a	movl	$0x000001b0,(%esp)
00000191	calll	operator new(unsigned long)
00000196	movl	%eax,%edi
00000198	leal	0x4f023-0xe(%ebx),%eax
0000019e	movl	%eax,0x08(%esp)
000001a2	movl	%esi,0x04(%esp)
000001a6	movl	%edi,(%esp)
000001a9	movl	$0x00000001,0x0c(%esp)
000001b1	calll	vgui::ScrollBar::ScrollBar(vgui::Panel*, char const*, bool)
000001b6	movl	%edi,0x000004f0(%esi)
000001bc	movl	(%edi),%eax
000001be	movl	0x000000b4(%eax),%eax
000001c4	movl	%esi,0x04(%esp)
000001c8	movl	%edi,(%esp)
000001cb	call	*%eax
000001cd	movl	0x000004f0(%esi),%ecx
000001d3	movl	(%ecx),%eax
000001d5	movl	0x00000088(%eax),%eax
000001db	movl	%ecx,(%esp)
000001de	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
000001e6	call	*%eax
000001e8	movl	%esi,(%esp)
000001eb	movl	$0x41200000,0x04(%esp)
000001f3	calll	CPotteryWheelPanel::LookAt(float)
000001f8	leal	0x4f05c-0xe(%ebx),%edi
000001fe	movl	%edi,0x08(%esp)
00000202	leal	0x4f031-0xe(%ebx),%eax
00000208	movl	%eax,0x04(%esp)
0000020c	movl	0xf0(%ebp),%eax
0000020f	movl	%eax,(%esp)
00000212	movl	$0x00000001,0x0c(%esp)
0000021a	calll	CTextureReference::Init(char const*, char const*, bool)
0000021f	movl	%edi,0x08(%esp)
00000223	leal	0x4f063-0xe(%ebx),%eax
00000229	movl	%eax,0x04(%esp)
0000022d	movl	0xec(%ebp),%eax
00000230	movl	%eax,(%esp)
00000233	movl	$0x00000001,0x0c(%esp)
0000023b	calll	CTextureReference::Init(char const*, char const*, bool)
00000240	addl	$0x1c,%esp
00000243	popl	%esi
00000244	popl	%edi
00000245	popl	%ebx
00000246	popl	%ebp
00000247	ret
00000248	movl	%eax,%ebx
0000024a	jmp	0x00000278
0000024c	movl	%eax,%ebx
0000024e	jmp	0x0000026d
00000250	movl	%eax,%ebx
00000252	jmp	0x00000260
00000254	jmp	0x00000256
00000256	movl	%eax,%ebx
00000258	movl	%edi,(%esp)
0000025b	calll	operator delete(void*)
00000260	movl	0xec(%ebp),%eax
00000263	movl	%eax,(%esp)
00000266	calll	CTextureReference::~CTextureReference()
0000026b	movl	%esi,%edi
0000026d	movl	0xf0(%ebp),%eax
00000270	movl	%eax,(%esp)
00000273	calll	CTextureReference::~CTextureReference()
00000278	movl	0xe8(%ebp),%eax
0000027b	movl	%eax,0x04(%esp)
0000027f	movl	%edi,(%esp)
00000282	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000287	movl	%ebx,(%esp)
0000028a	calll	__Unwind_Resume
0000028f	calll	std::terminate()
00000294	nopw	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::CVMTPanel(vgui::Panel*, char const*):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	pushl	%ebx
000002a4	pushl	%edi
000002a5	pushl	%esi
000002a6	subl	$0x1c,%esp
000002a9	calll	0x000002ae
000002ae	popl	%ebx
000002af	movl	0x14(%ebp),%eax
000002b2	movl	%eax,0x0c(%esp)
000002b6	movl	0x10(%ebp),%eax
000002b9	movl	%eax,0x08(%esp)
000002bd	movl	0x0c(%ebp),%esi
000002c0	leal	0x04(%esi),%eax
000002c3	movl	%eax,0xe8(%ebp)
000002c6	movl	%eax,0x04(%esp)
000002ca	movl	0x08(%ebp),%edi
000002cd	movl	%edi,(%esp)
000002d0	calll	CPotteryWheelPanel::CPotteryWheelPanel(vgui::Panel*, char const*)
000002d5	movl	(%esi),%eax
000002d7	movl	%eax,(%edi)
000002d9	testb	$0x01,CVMTPanel::ChainToMap()::chained-0x2ae(%ebx)
000002e0	jne	0x00000317
000002e2	movb	$0x01,CVMTPanel::ChainToMap()::chained-0x2ae(%ebx)
000002e9	leal	0x4f0a4-0x2ae(%ebx),%eax
000002ef	movl	%eax,(%esp)
000002f2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000002f7	movl	%eax,%esi
000002f9	leal	CVMTPanel::GetPanelClassName()-0x2ae(%ebx),%eax
000002ff	movl	%eax,0x1c(%esi)
00000302	testl	%esi,%esi
00000304	je	0x00000317
00000306	leal	0x4f091-0x2ae(%ebx),%eax
0000030c	movl	%eax,(%esp)
0000030f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000314	movl	%eax,0x18(%esi)
00000317	testb	$0x01,CVMTPanel::ChainToAnimationMap()::chained-0x2ae(%ebx)
0000031e	jne	0x00000355
00000320	movb	$0x01,CVMTPanel::ChainToAnimationMap()::chained-0x2ae(%ebx)
00000327	leal	0x4f0a4-0x2ae(%ebx),%eax
0000032d	movl	%eax,(%esp)
00000330	calll	FindOrAddPanelAnimationMap(char const*)
00000335	movl	%eax,%esi
00000337	leal	CVMTPanel::GetPanelClassName()-0x2ae(%ebx),%eax
0000033d	movl	%eax,0x18(%esi)
00000340	testl	%esi,%esi
00000342	je	0x00000355
00000344	leal	0x4f091-0x2ae(%ebx),%eax
0000034a	movl	%eax,(%esp)
0000034d	calll	FindOrAddPanelAnimationMap(char const*)
00000352	movl	%eax,0x14(%esi)
00000355	testb	$0x01,CVMTPanel::KB_ChainToMap()::chained-0x2ae(%ebx)
0000035c	jne	0x00000393
0000035e	movb	$0x01,CVMTPanel::KB_ChainToMap()::chained-0x2ae(%ebx)
00000365	leal	0x4f0a4-0x2ae(%ebx),%eax
0000036b	movl	%eax,(%esp)
0000036e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000373	movl	%eax,%esi
00000375	leal	CVMTPanel::GetPanelClassName()-0x2ae(%ebx),%eax
0000037b	movl	%eax,0x44(%esi)
0000037e	testl	%esi,%esi
00000380	je	0x00000393
00000382	leal	0x4f091-0x2ae(%ebx),%eax
00000388	movl	%eax,(%esp)
0000038b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000390	movl	%eax,0x18(%esi)
00000393	leal	0x000004e0(%edi),%eax
00000399	movl	%eax,0xf0(%ebp)
0000039c	movl	%eax,(%esp)
0000039f	calll	CTextureReference::CTextureReference()
000003a4	leal	0x000004e4(%edi),%eax
000003aa	movl	%eax,0xec(%ebp)
000003ad	movl	%eax,(%esp)
000003b0	calll	CTextureReference::CTextureReference()
000003b5	movb	$0x01,0x000004e8(%edi)
000003bc	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x000004dc(%edi)
000003c6	movl	%edi,%esi
000003c8	movl	$0x000001b0,(%esp)
000003cf	calll	operator new(unsigned long)
000003d4	movl	%eax,%edi
000003d6	leal	0x4f014-0x2ae(%ebx),%eax
000003dc	movl	%eax,0x08(%esp)
000003e0	movl	%esi,0x04(%esp)
000003e4	movl	%edi,(%esp)
000003e7	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x0c(%esp)
000003ef	calll	vgui::ScrollBar::ScrollBar(vgui::Panel*, char const*, bool)
000003f4	movl	%edi,0x000004ec(%esi)
000003fa	movl	(%edi),%eax
000003fc	movl	0x000000b4(%eax),%eax
00000402	movl	%esi,0x04(%esp)
00000406	movl	%edi,(%esp)
00000409	call	*%eax
0000040b	movl	0x000004ec(%esi),%ecx
00000411	movl	(%ecx),%eax
00000413	movl	0x00000088(%eax),%eax
00000419	movl	%ecx,(%esp)
0000041c	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000424	call	*%eax
00000426	movl	$0x000001b0,(%esp)
0000042d	calll	operator new(unsigned long)
00000432	movl	%eax,%edi
00000434	leal	0x4f023-0x2ae(%ebx),%eax
0000043a	movl	%eax,0x08(%esp)
0000043e	movl	%esi,0x04(%esp)
00000442	movl	%edi,(%esp)
00000445	movl	$0x00000001,0x0c(%esp)
0000044d	calll	vgui::ScrollBar::ScrollBar(vgui::Panel*, char const*, bool)
00000452	movl	%edi,0x000004f0(%esi)
00000458	movl	(%edi),%eax
0000045a	movl	0x000000b4(%eax),%eax
00000460	movl	%esi,0x04(%esp)
00000464	movl	%edi,(%esp)
00000467	call	*%eax
00000469	movl	0x000004f0(%esi),%ecx
0000046f	movl	(%ecx),%eax
00000471	movl	0x00000088(%eax),%eax
00000477	movl	%ecx,(%esp)
0000047a	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000482	call	*%eax
00000484	movl	%esi,(%esp)
00000487	movl	$0x41200000,0x04(%esp)
0000048f	calll	CPotteryWheelPanel::LookAt(float)
00000494	leal	0x4f05c-0x2ae(%ebx),%edi
0000049a	movl	%edi,0x08(%esp)
0000049e	leal	0x4f031-0x2ae(%ebx),%eax
000004a4	movl	%eax,0x04(%esp)
000004a8	movl	0xf0(%ebp),%eax
000004ab	movl	%eax,(%esp)
000004ae	movl	$0x00000001,0x0c(%esp)
000004b6	calll	CTextureReference::Init(char const*, char const*, bool)
000004bb	movl	%edi,0x08(%esp)
000004bf	leal	0x4f063-0x2ae(%ebx),%eax
000004c5	movl	%eax,0x04(%esp)
000004c9	movl	0xec(%ebp),%eax
000004cc	movl	%eax,(%esp)
000004cf	movl	$0x00000001,0x0c(%esp)
000004d7	calll	CTextureReference::Init(char const*, char const*, bool)
000004dc	addl	$0x1c,%esp
000004df	popl	%esi
000004e0	popl	%edi
000004e1	popl	%ebx
000004e2	popl	%ebp
000004e3	ret
000004e4	movl	%eax,%ebx
000004e6	jmp	0x00000514
000004e8	movl	%eax,%ebx
000004ea	jmp	0x00000509
000004ec	movl	%eax,%ebx
000004ee	jmp	0x000004fc
000004f0	jmp	0x000004f2
000004f2	movl	%eax,%ebx
000004f4	movl	%edi,(%esp)
000004f7	calll	operator delete(void*)
000004fc	movl	0xec(%ebp),%eax
000004ff	movl	%eax,(%esp)
00000502	calll	CTextureReference::~CTextureReference()
00000507	movl	%esi,%edi
00000509	movl	0xf0(%ebp),%eax
0000050c	movl	%eax,(%esp)
0000050f	calll	CTextureReference::~CTextureReference()
00000514	movl	0xe8(%ebp),%eax
00000517	movl	%eax,0x04(%esp)
0000051b	movl	%edi,(%esp)
0000051e	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000523	movl	%ebx,(%esp)
00000526	calll	__Unwind_Resume
0000052b	calll	std::terminate()
CVMTPanel::~CVMTPanel():
00000530	pushl	%ebp
00000531	movl	%esp,%ebp
00000533	pushl	%edi
00000534	pushl	%esi
00000535	subl	$0x10,%esp
00000538	calll	0x0000053d
0000053d	popl	%eax
0000053e	movl	0x08(%ebp),%edi
00000541	leal	VTT for CVMTPanel-0x53d(%eax),%eax
00000547	movl	%eax,0x04(%esp)
0000054b	movl	%edi,(%esp)
0000054e	calll	CVMTPanel::~CVMTPanel()
00000553	addl	$0x10,%esp
00000556	popl	%esi
00000557	popl	%edi
00000558	popl	%ebp
00000559	jmp	operator delete(void*)
0000055e	movl	%eax,%esi
00000560	movl	%edi,(%esp)
00000563	calll	operator delete(void*)
00000568	movl	%esi,(%esp)
0000056b	calll	__Unwind_Resume
CVMTPanel::~CVMTPanel():
00000570	pushl	%ebp
00000571	movl	%esp,%ebp
00000573	subl	$0x08,%esp
00000576	calll	0x0000057b
0000057b	popl	%eax
0000057c	leal	VTT for CVMTPanel-0x57b(%eax),%eax
00000582	movl	%eax,0x04(%esp)
00000586	movl	0x08(%ebp),%eax
00000589	movl	%eax,(%esp)
0000058c	calll	CVMTPanel::~CVMTPanel()
00000591	addl	$0x08,%esp
00000594	popl	%ebp
00000595	ret
00000596	nopw	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::~CVMTPanel():
000005a0	pushl	%ebp
000005a1	movl	%esp,%ebp
000005a3	pushl	%ebx
000005a4	pushl	%edi
000005a5	pushl	%esi
000005a6	subl	$0x0c,%esp
000005a9	movl	0x0c(%ebp),%edi
000005ac	movl	(%edi),%eax
000005ae	movl	0x08(%ebp),%ebx
000005b1	movl	%eax,(%ebx)
000005b3	leal	0x000004e0(%ebx),%eax
000005b9	movl	%eax,0xf0(%ebp)
000005bc	movl	%eax,(%esp)
000005bf	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
000005c7	calll	CTextureReference::Shutdown(bool)
000005cc	leal	0x000004e4(%ebx),%esi
000005d2	movl	%esi,(%esp)
000005d5	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
000005dd	calll	CTextureReference::Shutdown(bool)
000005e2	movl	0x000004dc(%ebx),%eax
000005e8	testl	%eax,%eax
000005ea	je	0x000005f6
000005ec	movl	(%eax),%ecx
000005ee	movl	0x34(%ecx),%ecx
000005f1	movl	%eax,(%esp)
000005f4	call	*%ecx
000005f6	movl	%esi,(%esp)
000005f9	calll	CTextureReference::~CTextureReference()
000005fe	movl	0xf0(%ebp),%eax
00000601	movl	%eax,(%esp)
00000604	calll	CTextureReference::~CTextureReference()
00000609	addl	$0x04,%edi
0000060c	movl	%edi,0x04(%esp)
00000610	movl	%ebx,(%esp)
00000613	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000618	addl	$0x0c,%esp
0000061b	popl	%esi
0000061c	popl	%edi
0000061d	popl	%ebx
0000061e	popl	%ebp
0000061f	ret
00000620	movl	%eax,%esi
00000622	jmp	0x00000638
00000624	movl	%eax,%esi
00000626	jmp	0x00000643
00000628	movl	%eax,%esi
0000062a	leal	0x000004e4(%ebx),%eax
00000630	movl	%eax,(%esp)
00000633	calll	CTextureReference::~CTextureReference()
00000638	movl	0xf0(%ebp),%eax
0000063b	movl	%eax,(%esp)
0000063e	calll	CTextureReference::~CTextureReference()
00000643	addl	$0x04,%edi
00000646	movl	%edi,0x04(%esp)
0000064a	movl	%ebx,(%esp)
0000064d	calll	CPotteryWheelPanel::~CPotteryWheelPanel()
00000652	movl	%esi,(%esp)
00000655	calll	__Unwind_Resume
0000065a	calll	std::terminate()
0000065f	nop
CVMTPanel::ApplySchemeSettings(vgui::IScheme*):
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x0c,%esp
00000669	calll	0x0000066e
0000066e	popl	%esi
0000066f	movl	0x0c(%ebp),%ebx
00000672	movl	%ebx,0x04(%esp)
00000676	movl	0x08(%ebp),%edi
00000679	movl	%edi,(%esp)
0000067c	calll	vgui::Panel::ApplySchemeSettings(vgui::IScheme*)
00000681	movl	(%edi),%eax
00000683	movl	0x00000114(%eax),%eax
00000689	movl	%eax,0xf0(%ebp)
0000068c	movl	(%ebx),%eax
0000068e	leal	0x4f072-0x66e(%esi),%ecx
00000694	movl	%ecx,0x04(%esp)
00000698	movl	%ebx,(%esp)
0000069b	call	*0x0c(%eax)
0000069e	movl	%eax,0x04(%esp)
000006a2	movl	%edi,(%esp)
000006a5	call	*0xf0(%ebp)
000006a8	addl	$0x0c,%esp
000006ab	popl	%esi
000006ac	popl	%edi
000006ad	popl	%ebx
000006ae	popl	%ebp
000006af	ret
CVMTPanel::SetMaterial(IMaterial*):
000006b0	pushl	%ebp
000006b1	movl	%esp,%ebp
000006b3	pushl	%edi
000006b4	pushl	%esi
000006b5	subl	$0x10,%esp
000006b8	movl	0x0c(%ebp),%esi
000006bb	testl	%esi,%esi
000006bd	je	0x000006c7
000006bf	movl	(%esi),%eax
000006c1	movl	%esi,(%esp)
000006c4	call	*0x30(%eax)
000006c7	movl	0x08(%ebp),%edi
000006ca	movl	0x000004dc(%edi),%eax
000006d0	testl	%eax,%eax
000006d2	je	0x000006dc
000006d4	movl	(%eax),%ecx
000006d6	movl	%eax,(%esp)
000006d9	call	*0x34(%ecx)
000006dc	movl	%esi,0x000004dc(%edi)
000006e2	movl	(%edi),%eax
000006e4	movl	%edi,(%esp)
000006e7	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
000006ef	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
000006f7	call	*0x0000010c(%eax)
000006fd	addl	$0x10,%esp
00000700	popl	%esi
00000701	popl	%edi
00000702	popl	%ebp
00000703	ret
00000704	nopw	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::RenderUsingActualSize(bool):
00000710	pushl	%ebp
00000711	movl	%esp,%ebp
00000713	subl	$0x18,%esp
00000716	movb	0x0c(%ebp),%al
00000719	movl	0x08(%ebp),%ecx
0000071c	movb	%al,0x000004e8(%ecx)
00000722	movl	(%ecx),%eax
00000724	movl	%ecx,(%esp)
00000727	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
0000072f	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000737	call	*0x0000010c(%eax)
0000073d	addl	$0x18,%esp
00000740	popl	%ebp
00000741	ret
00000742	nopw	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::PerformLayout():
00000750	jmp	vgui::Panel::PerformLayout()
00000755	nopl	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::DrawStretchedToPanel(CMeshBuilder&):
00000760	pushl	%edi
00000761	pushl	%esi
00000762	movl	0x10(%esp),%eax
00000766	movl	0x000001d4(%eax),%ecx
0000076c	movl	$0xffffffff,(%ecx)
00000772	movl	0x000001ac(%eax),%ecx
00000778	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),(%ecx)
0000077e	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%ecx)
00000785	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%ecx)
0000078c	movl	0x000001b4(%eax),%ecx
00000792	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),(%ecx)
00000798	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%ecx)
0000079f	movl	0x000001a8(%eax),%ecx
000007a5	incl	%ecx
000007a6	movl	%ecx,0x000001a8(%eax)
000007ac	cmpl	0x000001a4(%eax),%ecx
000007b2	jle	0x000007ba
000007b4	movl	%ecx,0x000001a4(%eax)
000007ba	movl	0x0c(%esp),%ecx
000007be	movl	0x000000f4(%eax),%edx
000007c4	addl	%edx,0x000001ac(%eax)
000007ca	movl	0x00000100(%eax),%edx
000007d0	addl	%edx,0x000001b0(%eax)
000007d6	movl	0x00000104(%eax),%edx
000007dc	movl	0x000001d4(%eax),%esi
000007e2	leal	(%esi,%edx),%edi
000007e5	movl	%edi,0x000001d4(%eax)
000007eb	movl	0x0000010c(%eax),%edi
000007f1	addl	%edi,0x000001b4(%eax)
000007f7	movl	0x00000110(%eax),%edi
000007fd	addl	%edi,0x000001b8(%eax)
00000803	movl	0x00000114(%eax),%edi
00000809	addl	%edi,0x000001bc(%eax)
0000080f	movl	0x00000118(%eax),%edi
00000815	addl	%edi,0x000001c0(%eax)
0000081b	movl	0x0000011c(%eax),%edi
00000821	addl	%edi,0x000001c4(%eax)
00000827	movl	0x00000120(%eax),%edi
0000082d	addl	%edi,0x000001c8(%eax)
00000833	movl	0x00000124(%eax),%edi
00000839	addl	%edi,0x000001cc(%eax)
0000083f	movl	0x00000128(%eax),%edi
00000845	addl	%edi,0x000001d0(%eax)
0000084b	movl	$0xffffffff,(%esi,%edx)
00000852	cvtsi2ss	0x000004f8(%ecx),%xmm0
0000085a	movl	0x000001ac(%eax),%edx
00000860	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),(%edx)
00000866	movss	%xmm0,0x04(%edx)
0000086b	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%edx)
00000872	movl	0x000001b4(%eax),%edx
00000878	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),(%edx)
0000087e	movl	$0x3f800000,0x04(%edx)
00000885	movl	0x000001a8(%eax),%edx
0000088b	incl	%edx
0000088c	movl	%edx,0x000001a8(%eax)
00000892	cmpl	0x000001a4(%eax),%edx
00000898	jle	0x000008a0
0000089a	movl	%edx,0x000001a4(%eax)
000008a0	movl	0x000000f4(%eax),%edx
000008a6	addl	%edx,0x000001ac(%eax)
000008ac	movl	0x00000100(%eax),%edx
000008b2	addl	%edx,0x000001b0(%eax)
000008b8	movl	0x00000104(%eax),%edx
000008be	movl	0x000001d4(%eax),%esi
000008c4	leal	(%esi,%edx),%edi
000008c7	movl	%edi,0x000001d4(%eax)
000008cd	movl	0x0000010c(%eax),%edi
000008d3	addl	%edi,0x000001b4(%eax)
000008d9	movl	0x00000110(%eax),%edi
000008df	addl	%edi,0x000001b8(%eax)
000008e5	movl	0x00000114(%eax),%edi
000008eb	addl	%edi,0x000001bc(%eax)
000008f1	movl	0x00000118(%eax),%edi
000008f7	addl	%edi,0x000001c0(%eax)
000008fd	movl	0x0000011c(%eax),%edi
00000903	addl	%edi,0x000001c4(%eax)
00000909	movl	0x00000120(%eax),%edi
0000090f	addl	%edi,0x000001c8(%eax)
00000915	movl	0x00000124(%eax),%edi
0000091b	addl	%edi,0x000001cc(%eax)
00000921	movl	0x00000128(%eax),%edi
00000927	addl	%edi,0x000001d0(%eax)
0000092d	movl	$0xffffffff,(%esi,%edx)
00000934	cvtsi2ss	0x000004f8(%ecx),%xmm0
0000093c	movl	0x000001ac(%eax),%edx
00000942	cvtsi2ss	0x000004f4(%ecx),%xmm1
0000094a	movss	%xmm1,(%edx)
0000094e	movss	%xmm0,0x04(%edx)
00000953	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%edx)
0000095a	movl	0x000001b4(%eax),%edx
00000960	movl	$0x3f800000,(%edx)
00000966	movl	$0x3f800000,0x04(%edx)
0000096d	movl	0x000001a8(%eax),%edx
00000973	incl	%edx
00000974	movl	%edx,0x000001a8(%eax)
0000097a	cmpl	0x000001a4(%eax),%edx
00000980	jle	0x00000988
00000982	movl	%edx,0x000001a4(%eax)
00000988	movl	0x000000f4(%eax),%edx
0000098e	addl	%edx,0x000001ac(%eax)
00000994	movl	0x00000100(%eax),%edx
0000099a	addl	%edx,0x000001b0(%eax)
000009a0	movl	0x00000104(%eax),%edx
000009a6	movl	0x000001d4(%eax),%esi
000009ac	leal	(%esi,%edx),%edi
000009af	movl	%edi,0x000001d4(%eax)
000009b5	movl	0x0000010c(%eax),%edi
000009bb	addl	%edi,0x000001b4(%eax)
000009c1	movl	0x00000110(%eax),%edi
000009c7	addl	%edi,0x000001b8(%eax)
000009cd	movl	0x00000114(%eax),%edi
000009d3	addl	%edi,0x000001bc(%eax)
000009d9	movl	0x00000118(%eax),%edi
000009df	addl	%edi,0x000001c0(%eax)
000009e5	movl	0x0000011c(%eax),%edi
000009eb	addl	%edi,0x000001c4(%eax)
000009f1	movl	0x00000120(%eax),%edi
000009f7	addl	%edi,0x000001c8(%eax)
000009fd	movl	0x00000124(%eax),%edi
00000a03	addl	%edi,0x000001cc(%eax)
00000a09	movl	0x00000128(%eax),%edi
00000a0f	addl	%edi,0x000001d0(%eax)
00000a15	movl	$0xffffffff,(%esi,%edx)
00000a1c	movl	0x000001ac(%eax),%edx
00000a22	cvtsi2ss	0x000004f4(%ecx),%xmm0
00000a2a	movss	%xmm0,(%edx)
00000a2e	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%edx)
00000a35	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%edx)
00000a3c	movl	0x000001b4(%eax),%ecx
00000a42	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),(%ecx)
00000a48	movl	$0x3f800000,0x04(%ecx)
00000a4f	movl	0x000001a8(%eax),%ecx
00000a55	incl	%ecx
00000a56	movl	%ecx,0x000001a8(%eax)
00000a5c	cmpl	0x000001a4(%eax),%ecx
00000a62	jle	0x00000a6a
00000a64	movl	%ecx,0x000001a4(%eax)
00000a6a	movl	0x000000f4(%eax),%ecx
00000a70	addl	%ecx,0x000001ac(%eax)
00000a76	movl	0x00000100(%eax),%ecx
00000a7c	addl	%ecx,0x000001b0(%eax)
00000a82	movl	0x00000104(%eax),%ecx
00000a88	addl	%ecx,0x000001d4(%eax)
00000a8e	movl	0x0000010c(%eax),%ecx
00000a94	addl	%ecx,0x000001b4(%eax)
00000a9a	movl	0x00000110(%eax),%ecx
00000aa0	addl	%ecx,0x000001b8(%eax)
00000aa6	movl	0x00000114(%eax),%ecx
00000aac	addl	%ecx,0x000001bc(%eax)
00000ab2	movl	0x00000118(%eax),%ecx
00000ab8	addl	%ecx,0x000001c0(%eax)
00000abe	movl	0x0000011c(%eax),%ecx
00000ac4	addl	%ecx,0x000001c4(%eax)
00000aca	movl	0x00000120(%eax),%ecx
00000ad0	addl	%ecx,0x000001c8(%eax)
00000ad6	movl	0x00000124(%eax),%ecx
00000adc	addl	%ecx,0x000001cc(%eax)
00000ae2	movl	0x00000128(%eax),%ecx
00000ae8	addl	%ecx,0x000001d0(%eax)
00000aee	popl	%esi
00000aef	popl	%edi
00000af0	ret
00000af1	nopl	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::DrawActualSize(CMeshBuilder&):
00000b00	pushl	%ebp
00000b01	movl	%esp,%ebp
00000b03	pushl	%ebx
00000b04	pushl	%edi
00000b05	pushl	%esi
00000b06	subl	$0x1c,%esp
00000b09	calll	0x00000b0e
00000b0e	popl	%eax
00000b0f	movl	%eax,0xf0(%ebp)
00000b12	movl	0x08(%ebp),%ebx
00000b15	movl	0x000004dc(%ebx),%ecx
00000b1b	movl	(%ecx),%eax
00000b1d	movl	%ecx,(%esp)
00000b20	call	*0x10(%eax)
00000b23	movl	%eax,%esi
00000b25	movl	0x000004dc(%ebx),%ecx
00000b2b	movl	(%ecx),%eax
00000b2d	movl	%ecx,(%esp)
00000b30	call	*0x14(%eax)
00000b33	movl	%ebx,%ecx
00000b35	movl	%eax,%edi
00000b37	movl	0x000004f4(%ecx),%eax
00000b3d	movl	0x0c(%ebp),%ebx
00000b40	cmpl	%esi,%eax
00000b42	jl	0x00000b6d
00000b44	subl	%esi,%eax
00000b46	cvtsi2ss	%eax,%xmm5
00000b4a	movl	0xf0(%ebp),%eax
00000b4d	mulss	0x4da38-0xb0e(%eax),%xmm5
00000b55	cvtsi2ss	%esi,%xmm6
00000b59	addss	%xmm5,%xmm6
00000b5d	pxor	%xmm4,%xmm4
00000b61	movss	0x4da3c-0xb0e(%eax),%xmm1
00000b69	movl	%eax,%esi
00000b6b	jmp	0x00000bae
00000b6d	movl	%edi,0xec(%ebp)
00000b70	movl	%ecx,%edi
00000b72	movl	0x000004ec(%edi),%ecx
00000b78	movl	(%ecx),%eax
00000b7a	movl	%ecx,(%esp)
00000b7d	call	*0x0000034c(%eax)
00000b83	movl	%edi,%ecx
00000b85	movl	0xec(%ebp),%edi
00000b88	cvtsi2ss	%esi,%xmm0
00000b8c	cvtsi2ss	0x000004f4(%ecx),%xmm6
00000b94	movaps	%xmm6,%xmm1
00000b97	divss	%xmm0,%xmm1
00000b9b	cvtsi2ss	%eax,%xmm4
00000b9f	divss	%xmm0,%xmm4
00000ba3	addss	%xmm4,%xmm1
00000ba7	pxor	%xmm5,%xmm5
00000bab	movl	0xf0(%ebp),%esi
00000bae	movss	%xmm1,0xe4(%ebp)
00000bb3	movl	0x000004f8(%ecx),%eax
00000bb9	cmpl	%edi,%eax
00000bbb	jl	0x00000be1
00000bbd	subl	%edi,%eax
00000bbf	cvtsi2ss	%eax,%xmm3
00000bc3	mulss	0x4da38-0xb0e(%esi),%xmm3
00000bcb	cvtsi2ss	%edi,%xmm0
00000bcf	addss	%xmm3,%xmm0
00000bd3	pxor	%xmm2,%xmm2
00000bd7	movss	0x4da3c-0xb0e(%esi),%xmm1
00000bdf	jmp	0x00000c35
00000be1	movl	%ecx,%esi
00000be3	movl	0x000004f0(%esi),%ecx
00000be9	movl	(%ecx),%eax
00000beb	movl	%ecx,(%esp)
00000bee	movss	%xmm4,0xf0(%ebp)
00000bf3	movss	%xmm5,0xec(%ebp)
00000bf8	movss	%xmm6,0xe8(%ebp)
00000bfd	call	*0x0000034c(%eax)
00000c03	movss	0xe8(%ebp),%xmm6
00000c08	movss	0xec(%ebp),%xmm5
00000c0d	movss	0xf0(%ebp),%xmm4
00000c12	cvtsi2ss	%edi,%xmm3
00000c16	cvtsi2ss	0x000004f8(%esi),%xmm0
00000c1e	movaps	%xmm0,%xmm1
00000c21	divss	%xmm3,%xmm1
00000c25	cvtsi2ss	%eax,%xmm2
00000c29	divss	%xmm3,%xmm2
00000c2d	addss	%xmm2,%xmm1
00000c31	pxor	%xmm3,%xmm3
00000c35	movl	0x000001d4(%ebx),%eax
00000c3b	movl	$0xffffffff,(%eax)
00000c41	movl	0x000001ac(%ebx),%eax
00000c47	movss	%xmm5,(%eax)
00000c4b	movss	%xmm3,0x04(%eax)
00000c50	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%eax)
00000c57	movl	0x000001b4(%ebx),%eax
00000c5d	movss	%xmm4,(%eax)
00000c61	movss	%xmm2,0x04(%eax)
00000c66	movl	0x000001a8(%ebx),%eax
00000c6c	incl	%eax
00000c6d	movl	%eax,0x000001a8(%ebx)
00000c73	cmpl	0x000001a4(%ebx),%eax
00000c79	jle	0x00000c81
00000c7b	movl	%eax,0x000001a4(%ebx)
00000c81	movl	0x000000f4(%ebx),%eax
00000c87	addl	%eax,0x000001ac(%ebx)
00000c8d	movl	0x00000100(%ebx),%eax
00000c93	addl	%eax,0x000001b0(%ebx)
00000c99	movl	0x00000104(%ebx),%eax
00000c9f	movl	0x000001d4(%ebx),%ecx
00000ca5	leal	(%ecx,%eax),%edx
00000ca8	movl	%edx,0x000001d4(%ebx)
00000cae	movl	0x0000010c(%ebx),%edx
00000cb4	addl	%edx,0x000001b4(%ebx)
00000cba	movl	0x00000110(%ebx),%edx
00000cc0	addl	%edx,0x000001b8(%ebx)
00000cc6	movl	0x00000114(%ebx),%edx
00000ccc	addl	%edx,0x000001bc(%ebx)
00000cd2	movl	0x00000118(%ebx),%edx
00000cd8	addl	%edx,0x000001c0(%ebx)
00000cde	movl	0x0000011c(%ebx),%edx
00000ce4	addl	%edx,0x000001c4(%ebx)
00000cea	movl	0x00000120(%ebx),%edx
00000cf0	addl	%edx,0x000001c8(%ebx)
00000cf6	movl	0x00000124(%ebx),%edx
00000cfc	addl	%edx,0x000001cc(%ebx)
00000d02	movl	0x00000128(%ebx),%edx
00000d08	addl	%edx,0x000001d0(%ebx)
00000d0e	movl	$0xffffffff,(%ecx,%eax)
00000d15	movl	0x000001ac(%ebx),%eax
00000d1b	movss	%xmm6,(%eax)
00000d1f	movss	%xmm3,0x04(%eax)
00000d24	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%eax)
00000d2b	movl	0x000001b4(%ebx),%eax
00000d31	movss	0xe4(%ebp),%xmm3
00000d36	movss	%xmm3,(%eax)
00000d3a	movss	%xmm2,0x04(%eax)
00000d3f	movl	0x000001a8(%ebx),%eax
00000d45	incl	%eax
00000d46	movl	%eax,0x000001a8(%ebx)
00000d4c	cmpl	0x000001a4(%ebx),%eax
00000d52	jle	0x00000d5a
00000d54	movl	%eax,0x000001a4(%ebx)
00000d5a	movl	0x000000f4(%ebx),%eax
00000d60	addl	%eax,0x000001ac(%ebx)
00000d66	movl	0x00000100(%ebx),%eax
00000d6c	addl	%eax,0x000001b0(%ebx)
00000d72	movl	0x00000104(%ebx),%eax
00000d78	movl	0x000001d4(%ebx),%ecx
00000d7e	leal	(%ecx,%eax),%edx
00000d81	movl	%edx,0x000001d4(%ebx)
00000d87	movl	0x0000010c(%ebx),%edx
00000d8d	addl	%edx,0x000001b4(%ebx)
00000d93	movl	0x00000110(%ebx),%edx
00000d99	addl	%edx,0x000001b8(%ebx)
00000d9f	movl	0x00000114(%ebx),%edx
00000da5	addl	%edx,0x000001bc(%ebx)
00000dab	movl	0x00000118(%ebx),%edx
00000db1	addl	%edx,0x000001c0(%ebx)
00000db7	movl	0x0000011c(%ebx),%edx
00000dbd	addl	%edx,0x000001c4(%ebx)
00000dc3	movl	0x00000120(%ebx),%edx
00000dc9	addl	%edx,0x000001c8(%ebx)
00000dcf	movl	0x00000124(%ebx),%edx
00000dd5	addl	%edx,0x000001cc(%ebx)
00000ddb	movl	0x00000128(%ebx),%edx
00000de1	addl	%edx,0x000001d0(%ebx)
00000de7	movl	$0xffffffff,(%ecx,%eax)
00000dee	movl	0x000001ac(%ebx),%eax
00000df4	movss	%xmm6,(%eax)
00000df8	movss	%xmm0,0x04(%eax)
00000dfd	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%eax)
00000e04	movl	0x000001b4(%ebx),%eax
00000e0a	movss	%xmm3,(%eax)
00000e0e	movss	%xmm1,0x04(%eax)
00000e13	movl	0x000001a8(%ebx),%eax
00000e19	incl	%eax
00000e1a	movl	%eax,0x000001a8(%ebx)
00000e20	cmpl	0x000001a4(%ebx),%eax
00000e26	jle	0x00000e2e
00000e28	movl	%eax,0x000001a4(%ebx)
00000e2e	movl	0x000000f4(%ebx),%eax
00000e34	addl	%eax,0x000001ac(%ebx)
00000e3a	movl	0x00000100(%ebx),%eax
00000e40	addl	%eax,0x000001b0(%ebx)
00000e46	movl	0x00000104(%ebx),%eax
00000e4c	movl	0x000001d4(%ebx),%ecx
00000e52	leal	(%ecx,%eax),%edx
00000e55	movl	%edx,0x000001d4(%ebx)
00000e5b	movl	0x0000010c(%ebx),%edx
00000e61	addl	%edx,0x000001b4(%ebx)
00000e67	movl	0x00000110(%ebx),%edx
00000e6d	addl	%edx,0x000001b8(%ebx)
00000e73	movl	0x00000114(%ebx),%edx
00000e79	addl	%edx,0x000001bc(%ebx)
00000e7f	movl	0x00000118(%ebx),%edx
00000e85	addl	%edx,0x000001c0(%ebx)
00000e8b	movl	0x0000011c(%ebx),%edx
00000e91	addl	%edx,0x000001c4(%ebx)
00000e97	movl	0x00000120(%ebx),%edx
00000e9d	addl	%edx,0x000001c8(%ebx)
00000ea3	movl	0x00000124(%ebx),%edx
00000ea9	addl	%edx,0x000001cc(%ebx)
00000eaf	movl	0x00000128(%ebx),%edx
00000eb5	addl	%edx,0x000001d0(%ebx)
00000ebb	movl	$0xffffffff,(%ecx,%eax)
00000ec2	movl	0x000001ac(%ebx),%eax
00000ec8	movss	%xmm5,(%eax)
00000ecc	movss	%xmm0,0x04(%eax)
00000ed1	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%eax)
00000ed8	movl	0x000001b4(%ebx),%eax
00000ede	movss	%xmm4,(%eax)
00000ee2	movss	%xmm1,0x04(%eax)
00000ee7	movl	0x000001a8(%ebx),%eax
00000eed	incl	%eax
00000eee	movl	%eax,0x000001a8(%ebx)
00000ef4	cmpl	0x000001a4(%ebx),%eax
00000efa	jle	0x00000f02
00000efc	movl	%eax,0x000001a4(%ebx)
00000f02	movl	0x000000f4(%ebx),%eax
00000f08	addl	%eax,0x000001ac(%ebx)
00000f0e	movl	0x00000100(%ebx),%eax
00000f14	addl	%eax,0x000001b0(%ebx)
00000f1a	movl	0x00000104(%ebx),%eax
00000f20	addl	%eax,0x000001d4(%ebx)
00000f26	movl	0x0000010c(%ebx),%eax
00000f2c	addl	%eax,0x000001b4(%ebx)
00000f32	movl	0x00000110(%ebx),%eax
00000f38	addl	%eax,0x000001b8(%ebx)
00000f3e	movl	0x00000114(%ebx),%eax
00000f44	addl	%eax,0x000001bc(%ebx)
00000f4a	movl	0x00000118(%ebx),%eax
00000f50	addl	%eax,0x000001c0(%ebx)
00000f56	movl	0x0000011c(%ebx),%eax
00000f5c	addl	%eax,0x000001c4(%ebx)
00000f62	movl	0x00000120(%ebx),%eax
00000f68	addl	%eax,0x000001c8(%ebx)
00000f6e	movl	0x00000124(%ebx),%eax
00000f74	addl	%eax,0x000001cc(%ebx)
00000f7a	movl	0x00000128(%ebx),%eax
00000f80	addl	%eax,0x000001d0(%ebx)
00000f86	addl	$0x1c,%esp
00000f89	popl	%esi
00000f8a	popl	%edi
00000f8b	popl	%ebx
00000f8c	popl	%ebp
00000f8d	ret
00000f8e	nop
CVMTPanel::RenderSphere(Vector const&, float, int, int):
00000f90	pushl	%ebp
00000f91	movl	%esp,%ebp
00000f93	pushl	%ebx
00000f94	pushl	%edi
00000f95	pushl	%esi
00000f96	subl	$0x000002ac,%esp
00000f9c	calll	0x00000fa1
00000fa1	popl	%edi
00000fa2	calll	vgui::MaterialSystem()
00000fa7	movl	(%eax),%ecx
00000fa9	movl	%eax,(%esp)
00000fac	call	*0x00000188(%ecx)
00000fb2	movl	%eax,%esi
00000fb4	testl	%esi,%esi
00000fb6	je	0x00000fc2
00000fb8	movl	(%esi),%eax
00000fba	movl	0x08(%eax),%eax
00000fbd	movl	%esi,(%esp)
00000fc0	call	*%eax
00000fc2	movl	(%esi),%eax
00000fc4	movl	0x000000ac(%eax),%eax
00000fca	movl	%esi,(%esp)
00000fcd	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000fd5	call	*%eax
00000fd7	movl	(%esi),%eax
00000fd9	movl	0x000000d4(%eax),%eax
00000fdf	movl	%esi,(%esp)
00000fe2	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
00000fea	call	*%eax
00000fec	movl	0x08(%ebp),%ecx
00000fef	movl	(%esi),%eax
00000ff1	movl	0x24(%eax),%eax
00000ff4	movl	0x000004dc(%ecx),%ecx
00000ffa	movl	%ecx,0x04(%esp)
00000ffe	movl	%esi,(%esp)
00001001	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
00001009	call	*%eax
0000100b	movl	(%esi),%eax
0000100d	movl	0x000001b8(%eax),%eax
00001013	movl	0x08(%ebp),%ecx
00001016	movl	0x000004e0(%ecx),%ecx
0000101c	movl	%ecx,0x04(%esp)
00001020	movl	%esi,(%esp)
00001023	call	*%eax
00001025	movl	(%esi),%eax
00001027	movl	0x14(%eax),%eax
0000102a	movl	0x08(%ebp),%ecx
0000102d	movl	0x000004e4(%ecx),%ecx
00001033	movl	%ecx,0x04(%esp)
00001037	movl	%esi,(%esp)
0000103a	call	*%eax
0000103c	movl	(%esi),%eax
0000103e	movl	0x000000e0(%eax),%eax
00001044	movl	%esi,(%esp)
00001047	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x10(%esp)
0000104f	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x0c(%esp)
00001057	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
0000105f	movl	$0x00000001,0x04(%esp)
00001067	call	*%eax
00001069	movl	%esi,0xfffffd60(%ebp)
0000106f	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
00001079	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
00001083	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
0000108d	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00001097	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffeec(%ebp)
000010a1	movl	$0xffffffff,0xfffffef0(%ebp)
000010ab	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffef4(%ebp)
000010b5	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xa0(%ebp)
000010bc	movl	$0xffffffff,0xe4(%ebp)
000010c3	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xe8(%ebp)
000010ca	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xac(%ebp)
000010d1	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xb0(%ebp)
000010d8	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xa8(%ebp)
000010df	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xe0(%ebp)
000010e6	movl	$0xffffffff,0xffffff48(%ebp)
000010f0	movl	%eax,0xfffffebc(%ebp)
000010f6	movb	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffec4(%ebp)
000010fd	movl	$0x00000003,0xfffffec0(%ebp)
00001107	movl	(%eax),%ecx
00001109	movl	0x30(%ecx),%ecx
0000110c	movl	%eax,(%esp)
0000110f	movl	%eax,0xfffffd5c(%ebp)
00001115	movl	$0x00000003,0x04(%esp)
0000111d	call	*%ecx
0000111f	movl	0x14(%ebp),%eax
00001122	movl	0x18(%ebp),%ecx
00001125	movl	%ecx,0xfffffd70(%ebp)
0000112b	movl	%ecx,%ebx
0000112d	imull	%eax,%ebx
00001130	leal	0xff(%ecx),%ecx
00001133	movl	%ecx,0xfffffd74(%ebp)
00001139	leal	0x02(%eax,%eax),%esi
0000113d	imull	%ecx,%esi
00001140	movl	0xfffffebc(%ebp),%eax
00001146	movl	(%eax),%ecx
00001148	movl	0x4c(%ecx),%ecx
0000114b	leal	0xfffffe08(%ebp),%edx
00001151	movl	%edx,0x0c(%esp)
00001155	movl	%esi,0x08(%esp)
00001159	movl	%ebx,0x04(%esp)
0000115d	movl	%eax,(%esp)
00001160	call	*%ecx
00001162	movl	0xfffffd5c(%ebp),%edx
00001168	leal	0x04(%edx),%eax
0000116b	testl	%edx,%edx
0000116d	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),%ecx
00001172	cmovnel	%eax,%ecx
00001175	movl	%ecx,0xfffffed8(%ebp)
0000117b	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
00001185	movl	%esi,0xfffffedc(%ebp)
0000118b	movb	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffef8(%ebp)
00001192	movl	0xfffffea4(%ebp),%eax
00001198	movl	%eax,0xfffffde4(%ebp)
0000119e	movl	%eax,0xfffffee4(%ebp)
000011a4	movl	0xfffffeac(%ebp),%eax
000011aa	movl	%eax,0xfffffec8(%ebp)
000011b0	movb	0xfffffeb8(%ebp),%al
000011b6	movb	%al,0xfffffed4(%ebp)
000011bc	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000011c6	movl	0xffffff48(%ebp),%esi
000011cc	movl	%edx,0xa0(%ebp)
000011cf	leal	0xfffffe08(%ebp),%eax
000011d5	movl	%eax,0x04(%esp)
000011d9	leal	0xfffffefc(%ebp),%eax
000011df	movl	%eax,(%esp)
000011e2	movl	$0x000000a4,0x08(%esp)
000011ea	calll	_memcpy
000011ef	movl	%ebx,0xa8(%ebp)
000011f2	cmpl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
000011f9	setne	%al
000011fc	movzbl	%al,%eax
000011ff	addl	%eax,%eax
00001201	movl	%eax,0xffffff4c(%ebp)
00001207	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xac(%ebp)
0000120e	movb	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xa4(%ebp)
00001212	cmpl	$0xff,%esi
00001215	je	0x0000121d
00001217	movl	%esi,0xffffff48(%ebp)
0000121d	cmpl	$0xff,0xe4(%ebp)
00001221	jne	0x0000123c
00001223	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xe0(%ebp)
0000122a	movl	0xfffffea8(%ebp),%eax
00001230	movl	%eax,0xe4(%ebp)
00001233	movl	0xfffffde4(%ebp),%eax
00001239	movl	%eax,0xe8(%ebp)
0000123c	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00001246	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xb0(%ebp)
0000124d	movl	0xffffff50(%ebp),%eax
00001253	movl	%eax,0xb4(%ebp)
00001256	movl	0xffffff5c(%ebp),%eax
0000125c	movl	%eax,0xb8(%ebp)
0000125f	movl	0xffffff68(%ebp),%eax
00001265	movl	%eax,0xbc(%ebp)
00001268	movl	0xffffff6c(%ebp),%eax
0000126e	movl	%eax,0xc0(%ebp)
00001271	movl	0xffffff70(%ebp),%eax
00001277	movl	%eax,0xc4(%ebp)
0000127a	movl	0xffffff74(%ebp),%eax
00001280	movl	%eax,0xc8(%ebp)
00001283	movl	0xffffff78(%ebp),%eax
00001289	movl	%eax,0xcc(%ebp)
0000128c	movl	0xffffff7c(%ebp),%eax
00001292	movl	%eax,0xd0(%ebp)
00001295	movl	0x80(%ebp),%eax
00001298	movl	%eax,0xd4(%ebp)
0000129b	movl	0x84(%ebp),%eax
0000129e	movl	%eax,0xd8(%ebp)
000012a1	movl	0xffffff60(%ebp),%eax
000012a7	movl	%eax,0xdc(%ebp)
000012aa	movl	0x08(%ebp),%eax
000012ad	movl	0x000004dc(%eax),%ecx
000012b3	movl	(%ecx),%eax
000012b5	movl	0x00000080(%eax),%eax
000012bb	movl	%ecx,(%esp)
000012be	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x04(%esp)
000012c6	call	*%eax
000012c8	movb	%al,0xfffffd8f(%ebp)
000012ce	movl	0x08(%ebp),%eax
000012d1	movl	0x000004dc(%eax),%ecx
000012d7	movl	(%ecx),%eax
000012d9	movl	0x00000080(%eax),%eax
000012df	movl	%ecx,(%esp)
000012e2	movl	$0x00000003,0x04(%esp)
000012ea	call	*%eax
000012ec	movb	%al,0xfffffd8e(%ebp)
000012f2	movl	0x08(%ebp),%eax
000012f5	movl	0x000004e0(%eax),%eax
000012fb	movl	(%eax),%ecx
000012fd	movl	0x0c(%ecx),%ecx
00001300	movl	%eax,(%esp)
00001303	call	*%ecx
00001305	cmpl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x18(%ebp)
00001309	movl	0x14(%ebp),%ecx
0000130c	jle	0x00001832
00001312	movss	0x10(%ebp),%xmm0
00001317	cvtsi2ss	%eax,%xmm1
0000131b	movss	0x4da40-0xfa1(%edi),%xmm2
00001323	divss	%xmm1,%xmm2
00001327	movss	%xmm2,0xfffffd88(%ebp)
0000132f	movss	0x4da44-0xfa1(%edi),%xmm1
00001337	subss	%xmm2,%xmm1
0000133b	subss	%xmm2,%xmm1
0000133f	movss	%xmm1,0xfffffd84(%ebp)
00001347	cvtss2sd	%xmm0,%xmm0
0000134b	movsd	%xmm0,0xfffffd68(%ebp)
00001353	cvtsi2ss	0xfffffd74(%ebp),%xmm0
0000135b	movss	%xmm0,0xfffffd64(%ebp)
00001363	leal	0xff(%ecx),%eax
00001366	movl	%eax,0xfffffd80(%ebp)
0000136c	cvtsi2ss	%eax,%xmm0
00001370	movss	%xmm0,0xfffffd7c(%ebp)
00001378	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffd78(%ebp)
00001382	jmp	0x00001623
00001387	nopw	CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
00001390	pxor	%xmm2,%xmm2
00001394	movss	0x4da44-0xfa1(%edi),%xmm1
0000139c	movss	%xmm2,0xfffffda8(%ebp)
000013a4	movss	%xmm1,0xfffffdac(%ebp)
000013ac	addss	0xfffffd98(%ebp),%xmm6
000013b4	addss	0x4da4c-0xfa1(%edi),%xmm6
000013bc	xorps	%xmm1,%xmm1
000013bf	movss	%xmm6,%xmm1
000013c3	rsqrtss	%xmm1,%xmm1
000013c7	movaps	%xmm1,%xmm3
000013ca	mulss	%xmm3,%xmm3
000013ce	mulss	%xmm6,%xmm3
000013d2	subss	%xmm3,%xmm4
000013d6	mulss	0x4da40-0xfa1(%edi),%xmm4
000013de	mulss	%xmm1,%xmm4
000013e2	movss	0xfffffdd0(%ebp),%xmm2
000013ea	mulss	%xmm4,%xmm2
000013ee	movaps	%xmm2,%xmm1
000013f1	movss	0xfffffdcc(%ebp),%xmm3
000013f9	mulss	%xmm3,%xmm1
000013fd	movaps	%xmm3,%xmm5
00001400	movss	0xfffffdc8(%ebp),%xmm7
00001408	mulss	%xmm4,%xmm7
0000140c	movaps	%xmm7,%xmm6
0000140f	movss	0xfffffdc4(%ebp),%xmm3
00001417	mulss	%xmm3,%xmm6
0000141b	subss	%xmm1,%xmm6
0000141f	movss	%xmm6,0xfffffdd0(%ebp)
00001427	mulss	0xfffffdbc(%ebp),%xmm4
0000142f	movaps	%xmm4,%xmm6
00001432	mulss	%xmm5,%xmm6
00001436	movaps	%xmm7,%xmm1
00001439	mulss	%xmm0,%xmm1
0000143d	subss	%xmm1,%xmm6
00001441	movss	%xmm6,0xfffffdc8(%ebp)
00001449	movss	0xfffffdd8(%ebp),%xmm6
00001451	movaps	%xmm4,%xmm5
00001454	mulss	%xmm3,%xmm5
00001458	movaps	%xmm2,%xmm1
0000145b	mulss	%xmm0,%xmm1
0000145f	subss	%xmm5,%xmm1
00001463	movss	0x4da48-0xfa1(%edi),%xmm5
0000146b	mulss	%xmm6,%xmm5
0000146f	movaps	%xmm6,%xmm3
00001472	cvttss2si	%xmm5,%eax
00001476	movl	0xb4(%ebp),%ecx
00001479	movss	0xfffffdb0(%ebp),%xmm5
00001481	movss	%xmm5,(%ecx)
00001485	movss	0xfffffdb4(%ebp),%xmm5
0000148d	movss	%xmm5,0x04(%ecx)
00001492	movss	0xfffffdb8(%ebp),%xmm5
0000149a	movss	%xmm5,0x08(%ecx)
0000149f	movl	0xb8(%ebp),%ecx
000014a2	movss	%xmm7,(%ecx)
000014a6	movss	%xmm2,0x04(%ecx)
000014ab	movss	%xmm4,0x08(%ecx)
000014b0	movzbl	%al,%eax
000014b3	orl	0xfffffda0(%ebp),%eax
000014b9	orl	0xfffffd9c(%ebp),%eax
000014bf	orl	0xfffffda4(%ebp),%eax
000014c5	movl	0xdc(%ebp),%ecx
000014c8	movl	%eax,(%ecx)
000014ca	movl	0xbc(%ebp),%eax
000014cd	movss	%xmm3,(%eax)
000014d1	movss	0xfffffde4(%ebp),%xmm4
000014d9	movss	%xmm4,0x04(%eax)
000014de	movl	0xc0(%ebp),%eax
000014e1	movss	0xfffffdc0(%ebp),%xmm2
000014e9	movss	%xmm2,(%eax)
000014ed	movss	%xmm4,0x04(%eax)
000014f2	movl	0xc4(%ebp),%eax
000014f5	movss	0xfffffdac(%ebp),%xmm2
000014fd	movss	%xmm2,(%eax)
00001501	movss	0xfffffda8(%ebp),%xmm2
00001509	movss	%xmm2,0x04(%eax)
0000150e	movl	0xffffff34(%ebp),%eax
00001514	movl	0x88(%ebp),%ecx
00001517	imull	0xb0(%ebp),%eax
0000151b	movss	0xfffffdcc(%ebp),%xmm2
00001523	movss	%xmm2,(%ecx,%eax)
00001528	movss	0xfffffdc4(%ebp),%xmm4
00001530	movss	%xmm4,0x04(%ecx,%eax)
00001536	movss	%xmm0,0x08(%ecx,%eax)
0000153c	movl	0xffffff38(%ebp),%eax
00001542	movl	0x8c(%ebp),%ecx
00001545	imull	0xb0(%ebp),%eax
00001549	movss	%xmm1,(%ecx,%eax)
0000154e	movss	0xfffffdc8(%ebp),%xmm1
00001556	movss	%xmm1,0x04(%ecx,%eax)
0000155c	movss	0xfffffdd0(%ebp),%xmm1
00001564	movss	%xmm1,0x08(%ecx,%eax)
0000156a	movl	0xffffff40(%ebp),%eax
00001570	movl	0x94(%ebp),%ecx
00001573	imull	0xb0(%ebp),%eax
00001577	movss	%xmm2,(%ecx,%eax)
0000157c	movss	%xmm4,0x04(%ecx,%eax)
00001582	movss	%xmm0,0x08(%ecx,%eax)
00001588	movl	$0x3f800000,0x0c(%ecx,%eax)
00001590	movl	0xb0(%ebp),%eax
00001593	incl	%eax
00001594	movl	%eax,0xb0(%ebp)
00001597	cmpl	0xac(%ebp),%eax
0000159a	jle	0x0000159f
0000159c	movl	%eax,0xac(%ebp)
0000159f	movl	0xfffffefc(%ebp),%eax
000015a5	addl	%eax,0xb4(%ebp)
000015a8	movl	0xffffff08(%ebp),%eax
000015ae	addl	%eax,0xb8(%ebp)
000015b1	movl	0xffffff0c(%ebp),%eax
000015b7	addl	%eax,0xdc(%ebp)
000015ba	movl	0xffffff14(%ebp),%eax
000015c0	addl	%eax,0xbc(%ebp)
000015c3	movl	0xffffff18(%ebp),%eax
000015c9	addl	%eax,0xc0(%ebp)
000015cc	movl	0xffffff1c(%ebp),%eax
000015d2	addl	%eax,0xc4(%ebp)
000015d5	movl	0xffffff20(%ebp),%eax
000015db	addl	%eax,0xc8(%ebp)
000015de	movl	0xffffff24(%ebp),%eax
000015e4	addl	%eax,0xcc(%ebp)
000015e7	movl	0xffffff28(%ebp),%eax
000015ed	addl	%eax,0xd0(%ebp)
000015f0	movl	0xffffff2c(%ebp),%eax
000015f6	addl	%eax,0xd4(%ebp)
000015f9	movl	0xffffff30(%ebp),%eax
000015ff	addl	%eax,0xd8(%ebp)
00001602	incl	%ebx
00001603	movl	%esi,%ecx
00001605	cmpl	%ebx,%ecx
00001607	jne	0x00001700
0000160d	movl	0xfffffd78(%ebp),%eax
00001613	incl	%eax
00001614	movl	%eax,0xfffffd78(%ebp)
0000161a	cmpl	0x18(%ebp),%eax
0000161d	je	0x00001832
00001623	testl	%ecx,%ecx
00001625	jle	0x0000160d
00001627	cvtsi2ss	0xfffffd78(%ebp),%xmm0
0000162f	divss	0xfffffd64(%ebp),%xmm0
00001637	movss	%xmm0,0xfffffde4(%ebp)
0000163f	cvtss2sd	%xmm0,%xmm0
00001643	mulsd	0x4da58-0xfa1(%edi),%xmm0
0000164b	cvtsd2ss	%xmm0,%xmm0
0000164f	cvtss2sd	%xmm0,%xmm0
00001653	movsd	%xmm0,0xfffffdd8(%ebp)
0000165b	movsd	%xmm0,(%esp)
00001660	movl	%ecx,%esi
00001662	calll	_cos
00001667	movsd	0xfffffdd8(%ebp),%xmm0
0000166f	movsd	%xmm0,(%esp)
00001674	fstpl	0xfffffe00(%ebp)
0000167a	calll	_sin
0000167f	movl	%esi,%ecx
00001681	fstpl	0xfffffdf8(%ebp)
00001687	movss	0x4da48-0xfa1(%edi),%xmm0
0000168f	mulss	0xfffffde4(%ebp),%xmm0
00001697	cvttss2si	%xmm0,%eax
0000169b	movzbl	%al,%eax
0000169e	movl	%eax,%edx
000016a0	shll	$0x18,%edx
000016a3	movl	%edx,0xfffffda0(%ebp)
000016a9	movl	%eax,%edx
000016ab	shll	$0x10,%edx
000016ae	movl	%edx,0xfffffd9c(%ebp)
000016b4	shll	$0x08,%eax
000016b7	movl	%eax,0xfffffda4(%ebp)
000016bd	movsd	0xfffffe00(%ebp),%xmm0
000016c5	movsd	0xfffffd68(%ebp),%xmm1
000016cd	mulsd	%xmm1,%xmm0
000016d1	cvtsd2ss	%xmm0,%xmm0
000016d5	movss	%xmm0,0xfffffdbc(%ebp)
000016dd	mulss	%xmm0,%xmm0
000016e1	movss	%xmm0,0xfffffd98(%ebp)
000016e9	movsd	0xfffffdf8(%ebp),%xmm0
000016f1	mulsd	%xmm1,%xmm0
000016f5	movsd	%xmm0,0xfffffd90(%ebp)
000016fd	xorl	%ebx,%ebx
000016ff	nop
00001700	movl	%ecx,%esi
00001702	cvtsi2ss	%ebx,%xmm1
00001706	divss	0xfffffd7c(%ebp),%xmm1
0000170e	pxor	%xmm0,%xmm0
00001712	cmpl	%ebx,0xfffffd80(%ebp)
00001718	je	0x0000172e
0000171a	cvtss2sd	%xmm1,%xmm0
0000171e	mulsd	0x4da60-0xfa1(%edi),%xmm0
00001726	cvtsd2ss	%xmm0,%xmm0
0000172a	cvtss2sd	%xmm0,%xmm0
0000172e	movsd	%xmm0,0xfffffdd0(%ebp)
00001736	movss	%xmm1,0xfffffdd8(%ebp)
0000173e	movsd	%xmm0,(%esp)
00001743	calll	_sin
00001748	movsd	0xfffffdd0(%ebp),%xmm0
00001750	movsd	%xmm0,(%esp)
00001755	fstpl	0xfffffdf0(%ebp)
0000175b	calll	_cos
00001760	fstpl	0xfffffde8(%ebp)
00001766	movsd	0xfffffdf0(%ebp),%xmm0
0000176e	movsd	0xfffffd90(%ebp),%xmm2
00001776	mulsd	%xmm2,%xmm0
0000177a	cvtsd2ss	%xmm0,%xmm5
0000177e	movaps	%xmm5,%xmm0
00001781	mulss	%xmm0,%xmm0
00001785	movsd	0xfffffde8(%ebp),%xmm1
0000178d	mulsd	%xmm2,%xmm1
00001791	cvtsd2ss	%xmm1,%xmm3
00001795	movss	%xmm3,0xfffffdc8(%ebp)
0000179d	movaps	%xmm3,%xmm6
000017a0	mulss	%xmm6,%xmm6
000017a4	addss	%xmm0,%xmm6
000017a8	pxor	%xmm0,%xmm0
000017ac	movaps	%xmm6,%xmm2
000017af	addss	%xmm0,%xmm2
000017b3	addss	0x4da4c-0xfa1(%edi),%xmm2
000017bb	xorps	%xmm0,%xmm0
000017be	movss	%xmm2,%xmm0
000017c2	rsqrtss	%xmm0,%xmm1
000017c6	movaps	%xmm1,%xmm7
000017c9	mulss	%xmm7,%xmm7
000017cd	mulss	%xmm2,%xmm7
000017d1	movss	0x4da50-0xfa1(%edi),%xmm4
000017d9	movaps	%xmm4,%xmm0
000017dc	subss	%xmm7,%xmm0
000017e0	pxor	%xmm7,%xmm7
000017e4	mulss	0x4da40-0xfa1(%edi),%xmm0
000017ec	mulss	%xmm1,%xmm0
000017f0	movaps	%xmm3,%xmm1
000017f3	mulss	%xmm0,%xmm1
000017f7	mulss	%xmm0,%xmm2
000017fb	ucomiss	%xmm7,%xmm2
000017fe	setnp	%cl
00001801	sete	%al
00001804	testb	%cl,%al
00001806	je	0x00001997
0000180c	movss	0x4da54-0xfa1(%edi),%xmm2
00001814	jmp	0x000019a6
00001819	movl	%eax,%edi
0000181b	movl	(%esi),%eax
0000181d	movl	0x04(%eax),%eax
00001820	movl	%esi,(%esp)
00001823	call	*%eax
00001825	movl	%edi,(%esp)
00001828	calll	__Unwind_Resume
0000182d	calll	std::terminate()
00001832	movl	%edi,0xfffffdcc(%ebp)
00001838	cmpl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffd74(%ebp)
0000183f	jle	0x00001964
00001845	leal	0xff(%ecx),%edi
00001848	addl	$0xfe,0xfffffd70(%ebp)
0000184f	xorl	%esi,%esi
00001851	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffdd8(%ebp)
0000185b	xorl	%eax,%eax
0000185d	nopl	(%eax)
00001860	movl	%edi,0xfffffde4(%ebp)
00001866	movl	%eax,0xfffffdd0(%ebp)
0000186c	testl	%ecx,%ecx
0000186e	jle	0x000018e2
00001870	xorl	%ebx,%ebx
00001872	movl	0xfffffee8(%ebp),%edx
00001878	movl	0xfffffdd8(%ebp),%ecx
0000187e	nop
00001880	movl	0xfffffee4(%ebp),%esi
00001886	addl	%ecx,%esi
00001888	movl	0xfffffec8(%ebp),%edi
0000188e	movw	%si,(%edi,%edx,2)
00001892	movzbl	0xfffffed4(%ebp),%edx
00001899	addl	0xfffffee8(%ebp),%edx
0000189f	movl	%edx,0xfffffee8(%ebp)
000018a5	movl	0x14(%ebp),%eax
000018a8	leal	(%eax,%ecx),%esi
000018ab	addl	0xfffffee4(%ebp),%esi
000018b1	movl	0xfffffec8(%ebp),%edi
000018b7	movw	%si,(%edi,%edx,2)
000018bb	movl	0xfffffde4(%ebp),%edi
000018c1	movzbl	0xfffffed4(%ebp),%edx
000018c8	addl	0xfffffee8(%ebp),%edx
000018ce	movl	%edx,0xfffffee8(%ebp)
000018d4	movl	%edx,0xfffffee0(%ebp)
000018da	incl	%ecx
000018db	incl	%ebx
000018dc	cmpl	%ebx,%eax
000018de	movl	%edi,%esi
000018e0	jne	0x00001880
000018e2	movl	0xfffffdd0(%ebp),%eax
000018e8	cmpl	0xfffffd70(%ebp),%eax
000018ee	jge	0x0000194c
000018f0	leal	0x01(%esi),%ecx
000018f3	addl	0xfffffee4(%ebp),%ecx
000018f9	movl	0xfffffec8(%ebp),%edx
000018ff	movl	0xfffffee8(%ebp),%ebx
00001905	movw	%cx,(%edx,%ebx,2)
00001909	movzbl	0xfffffed4(%ebp),%ecx
00001910	addl	0xfffffee8(%ebp),%ecx
00001916	movl	%ecx,0xfffffee8(%ebp)
0000191c	movl	0x14(%ebp),%edx
0000191f	leal	0x01(%esi,%edx),%edx
00001923	addl	0xfffffee4(%ebp),%edx
00001929	movl	0xfffffec8(%ebp),%ebx
0000192f	movw	%dx,(%ebx,%ecx,2)
00001933	movzbl	0xfffffed4(%ebp),%ecx
0000193a	addl	0xfffffee8(%ebp),%ecx
00001940	movl	%ecx,0xfffffee8(%ebp)
00001946	movl	%ecx,0xfffffee0(%ebp)
0000194c	movl	0x14(%ebp),%ecx
0000194f	addl	%ecx,0xfffffdd8(%ebp)
00001955	addl	%ecx,%edi
00001957	incl	%eax
00001958	cmpl	0xfffffd74(%ebp),%eax
0000195e	jne	0x00001860
00001964	testb	$0x01,0xfffffec4(%ebp)
0000196b	movl	0xfffffdcc(%ebp),%edi
00001971	je	0x00001ab1
00001977	movl	0xfffffec0(%ebp),%eax
0000197d	movl	0xac(%ebp),%edx
00001980	leal	0xfc(%eax),%esi
00001983	cmpl	$0x04,%esi
00001986	ja	0x00001a99
0000198c	xorl	%ecx,%ecx
0000198e	addl	0x00000c2f(%edi,%esi,4),%edi
00001995	jmp	*%edi
00001997	movss	0x4da70-0xfa1(%edi),%xmm2
0000199f	xorps	%xmm5,%xmm2
000019a2	mulss	%xmm0,%xmm2
000019a6	movss	%xmm2,0xfffffdcc(%ebp)
000019ae	movss	%xmm5,0xfffffdd0(%ebp)
000019b6	andb	%cl,%al
000019b8	pxor	%xmm2,%xmm2
000019bc	jne	0x000019c1
000019be	movaps	%xmm1,%xmm2
000019c1	movss	%xmm2,0xfffffdc4(%ebp)
000019c9	testb	%al,%al
000019cb	movss	0xfffffdd8(%ebp),%xmm3
000019d3	je	0x000019db
000019d5	pxor	%xmm0,%xmm0
000019d9	jmp	0x000019df
000019db	mulss	%xmm7,%xmm0
000019df	movl	0x0c(%ebp),%eax
000019e2	movss	0x08(%eax),%xmm1
000019e7	addss	0xfffffdbc(%ebp),%xmm1
000019ef	movss	%xmm1,0xfffffdb8(%ebp)
000019f7	movss	0x04(%eax),%xmm1
000019fc	addss	0xfffffdd0(%ebp),%xmm1
00001a04	movss	%xmm1,0xfffffdb4(%ebp)
00001a0c	movss	(%eax),%xmm1
00001a10	addss	0xfffffdc8(%ebp),%xmm1
00001a18	movss	%xmm1,0xfffffdb0(%ebp)
00001a20	cmpb	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffd8f(%ebp)
00001a27	movss	%xmm3,0xfffffdc0(%ebp)
00001a2f	movaps	%xmm3,%xmm1
00001a32	movss	0xfffffde4(%ebp),%xmm2
00001a3a	je	0x0000139c
00001a40	movss	0xfffffd84(%ebp),%xmm1
00001a48	mulss	%xmm3,%xmm1
00001a4c	addss	0xfffffd88(%ebp),%xmm1
00001a54	movss	%xmm1,0xfffffdc0(%ebp)
00001a5c	cmpb	$0x01,0xfffffd8e(%ebp)
00001a63	je	0x00001390
00001a69	movaps	%xmm3,%xmm1
00001a6c	movss	0xfffffde4(%ebp),%xmm2
00001a74	jmp	0x0000139c
00001a79	imull	$0x06,%edx,%edx
00001a7c	movl	%edx,%ecx
00001a7e	sarl	$0x1f,%ecx
00001a81	shrl	$0x1e,%ecx
00001a84	addl	%edx,%ecx
00001a86	sarl	$0x02,%ecx
00001a89	jmp	0x00001a9b
00001a8b	leal	0xfa(%edx,%edx,2),%ecx
00001a8f	jmp	0x00001a9b
00001a91	leal	0xfe(%edx,%edx),%ecx
00001a95	jmp	0x00001a9b
00001a97	addl	%edx,%edx
00001a99	movl	%edx,%ecx
00001a9b	movl	%ecx,0x08(%esp)
00001a9f	movl	%eax,0x04(%esp)
00001aa3	leal	0xfffffec8(%ebp),%eax
00001aa9	movl	%eax,(%esp)
00001aac	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
00001ab1	movl	0xfffffebc(%ebp),%eax
00001ab7	movl	0xfffffee0(%ebp),%edx
00001abd	movl	(%eax),%ecx
00001abf	movl	0x58(%ecx),%ecx
00001ac2	movl	0xac(%ebp),%esi
00001ac5	leal	0xfffffe08(%ebp),%edi
00001acb	movl	%edi,0x0c(%esp)
00001acf	movl	%edx,0x08(%esp)
00001ad3	movl	%esi,0x04(%esp)
00001ad7	movl	%eax,(%esp)
00001ada	call	*%ecx
00001adc	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
00001ae6	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
00001af0	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001af7	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xa0(%ebp)
00001afe	movl	$0xffffffff,0xffffff48(%ebp)
00001b08	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0xfffffebc(%ebp)
00001b12	movl	0xfffffd5c(%ebp),%ecx
00001b18	movl	(%ecx),%eax
00001b1a	movl	0x34(%eax),%eax
00001b1d	movl	%ecx,(%esp)
00001b20	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
00001b28	movl	$0xffffffff,0x04(%esp)
00001b30	call	*%eax
00001b32	leal	0xfffffe08(%ebp),%eax
00001b38	movl	%eax,(%esp)
00001b3b	movl	0xfffffd60(%ebp),%esi
00001b41	calll	CMeshBuilder::~CMeshBuilder()
00001b46	testl	%esi,%esi
00001b48	je	0x00001b5c
00001b4a	movl	(%esi),%eax
00001b4c	movl	0x0c(%eax),%eax
00001b4f	movl	%esi,(%esp)
00001b52	call	*%eax
00001b54	movl	(%esi),%eax
00001b56	movl	%esi,(%esp)
00001b59	call	*0x04(%eax)
00001b5c	addl	$0x000002ac,%esp
00001b62	popl	%esi
00001b63	popl	%edi
00001b64	popl	%ebx
00001b65	popl	%ebp
00001b66	ret
00001b67	movl	%eax,%edi
00001b69	movl	(%esi),%eax
00001b6b	movl	0x04(%eax),%eax
00001b6e	movl	%esi,(%esp)
00001b71	call	*%eax
00001b73	jmp	0x00001825
00001b78	calll	std::terminate()
00001b7d	movl	%eax,%edi
00001b7f	testl	%esi,%esi
00001b81	je	0x00001825
00001b87	movl	(%esi),%eax
00001b89	movl	0x0c(%eax),%eax
00001b8c	movl	%esi,(%esp)
00001b8f	call	*%eax
00001b91	movl	(%esi),%eax
00001b93	movl	0x04(%eax),%eax
00001b96	movl	%esi,(%esp)
00001b99	call	*%eax
00001b9b	jmp	0x00001825
00001ba0	calll	std::terminate()
00001ba5	movl	%eax,%edi
00001ba7	leal	0xfffffe08(%ebp),%eax
00001bad	movl	%eax,(%esp)
00001bb0	calll	CMeshBuilder::~CMeshBuilder()
00001bb5	movl	0xfffffd60(%ebp),%esi
00001bbb	jmp	0x00001b7f
00001bbd	movl	(%esi),%eax
00001bbf	movl	0x04(%eax),%eax
00001bc2	movl	%esi,(%esp)
00001bc5	call	*%eax
00001bc7	jmp	0x00001ba0
00001bc9	calll	std::terminate()
00001bce	nop
00001bd0	lock/orb	(%eax),%al
00001bd3	addb	%dh,%dh
00001bd5	orb	(%eax),%al
00001bd7	addb	%ch,%dl
00001bd9	orb	(%eax),%al
00001bdb	addb	%bl,%al
00001bdd	orb	(%eax),%al
00001bdf	addb	%bh,%dl
00001be1	orb	(%eax),%al
00001be3	addb	%ah,0x66(%esi)
00001be6	nopw	%cs:CVMTPanel::CVMTPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPanel::OnPaint3D():
00001bf0	pushl	%ebp
00001bf1	movl	%esp,%ebp
00001bf3	pushl	%ebx
00001bf4	pushl	%edi
00001bf5	pushl	%esi
00001bf6	subl	$0x1c,%esp
00001bf9	calll	0x00001bfe
00001bfe	popl	%ebx
00001bff	movl	0x08(%ebp),%edi
00001c02	cmpl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x000004dc(%edi)
00001c09	je	0x00001d38
00001c0f	calll	vgui::MaterialSystem()
00001c14	movl	(%eax),%ecx
00001c16	movl	%eax,(%esp)
00001c19	call	*0x00000188(%ecx)
00001c1f	movl	%eax,%esi
00001c21	testl	%esi,%esi
00001c23	je	0x00001c2f
00001c25	movl	(%esi),%eax
00001c27	movl	0x08(%eax),%eax
00001c2a	movl	%esi,(%esp)
00001c2d	call	*%eax
00001c2f	movl	0x000004dc(%edi),%ecx
00001c35	movl	(%ecx),%eax
00001c37	movl	0x60(%eax),%eax
00001c3a	movl	%ecx,(%esp)
00001c3d	movl	$0x00000001,0x04(%esp)
00001c45	call	*%eax
00001c47	cmpb	$0x01,%al
00001c49	jne	0x00001ce0
00001c4f	movl	s_pPowerOfTwoFrameBufferTexture-0x1bfe(%ebx),%edi
00001c55	testl	%edi,%edi
00001c57	jne	0x00001cae
00001c59	movl	0x533d2-0x1bfe(%ebx),%eax
00001c5f	movl	(%eax),%ecx
00001c61	movl	(%ecx),%eax
00001c63	movl	0x0000013c(%eax),%eax
00001c69	leal	0x4f0bf-0x1bfe(%ebx),%edx
00001c6f	movl	%edx,0x08(%esp)
00001c73	leal	0x4f0ae-0x1bfe(%ebx),%edx
00001c79	movl	%edx,0x04(%esp)
00001c7d	movl	%ecx,(%esp)
00001c80	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x10(%esp)
00001c88	movl	$0x00000001,0x0c(%esp)
00001c90	call	*%eax
00001c92	movl	%eax,0x04(%esp)
00001c96	leal	s_pPowerOfTwoFrameBufferTexture-0x1bfe(%ebx),%eax
00001c9c	movl	%eax,(%esp)
00001c9f	calll	CTextureReference::Init(ITexture*)
00001ca4	movl	s_pPowerOfTwoFrameBufferTexture-0x1bfe(%ebx),%edi
00001caa	testl	%edi,%edi
00001cac	je	0x00001ce0
00001cae	movl	(%edi),%eax
00001cb0	movl	0x3c(%eax),%eax
00001cb3	movl	%edi,(%esp)
00001cb6	call	*%eax
00001cb8	testb	%al,%al
00001cba	jne	0x00001ce0
00001cbc	movl	(%esi),%eax
00001cbe	movl	0x44(%eax),%eax
00001cc1	movl	%edi,0x04(%esp)
00001cc5	movl	%esi,(%esp)
00001cc8	call	*%eax
00001cca	movl	(%esi),%eax
00001ccc	movl	0x48(%eax),%eax
00001ccf	movl	%edi,0x04(%esp)
00001cd3	movl	%esi,(%esp)
00001cd6	movl	CVMTPanel::CVMTPanel(vgui::Panel*, char const*),0x08(%esp)
00001cde	call	*%eax
00001ce0	movl	(%esi),%eax
00001ce2	movl	0x000000a0(%eax),%eax
00001ce8	movl	%esi,(%esp)
00001ceb	movl	$0x00000001,0x04(%esp)
00001cf3	call	*%eax
00001cf5	movl	0x533d6-0x1bfe(%ebx),%eax
00001cfb	movl	%eax,0x04(%esp)
00001cff	movl	0x08(%ebp),%eax
00001d02	movl	%eax,(%esp)
00001d05	movl	$0x00000014,0x10(%esp)
00001d0d	movl	$0x00000014,0x0c(%esp)
00001d15	movl	$0x41200000,0x08(%esp)
00001d1d	calll	CVMTPanel::RenderSphere(Vector const&, float, int, int)
00001d22	testl	%esi,%esi
00001d24	je	0x00001d38
00001d26	movl	(%esi),%eax
00001d28	movl	0x0c(%eax),%eax
00001d2b	movl	%esi,(%esp)
00001d2e	call	*%eax
00001d30	movl	(%esi),%eax
00001d32	movl	%esi,(%esp)
00001d35	call	*0x04(%eax)
00001d38	addl	$0x1c,%esp
00001d3b	popl	%esi
00001d3c	popl	%edi
00001d3d	popl	%ebx
00001d3e	popl	%ebp
00001d3f	ret
00001d40	movl	%eax,%edi
00001d42	movl	(%esi),%eax
00001d44	movl	0x04(%eax),%eax
00001d47	movl	%esi,(%esp)
00001d4a	call	*%eax
00001d4c	movl	%edi,(%esp)
00001d4f	calll	__Unwind_Resume
00001d54	calll	std::terminate()
00001d59	movl	%eax,%edi
00001d5b	testl	%esi,%esi
00001d5d	je	0x00001d4c
00001d5f	movl	(%esi),%eax
00001d61	movl	0x0c(%eax),%eax
00001d64	movl	%esi,(%esp)
00001d67	call	*%eax
00001d69	movl	(%esi),%eax
00001d6b	movl	0x04(%eax),%eax
00001d6e	movl	%esi,(%esp)
00001d71	call	*%eax
00001d73	jmp	0x00001d4c
00001d75	calll	std::terminate()
00001d7a	movl	%eax,%edi
00001d7c	movl	(%esi),%eax
00001d7e	movl	0x04(%eax),%eax
00001d81	movl	%esi,(%esp)
00001d84	call	*%eax
00001d86	jmp	0x00001d4c
00001d88	calll	std::terminate()
00001d8d	calll	std::terminate()
00001d92	movl	(%esi),%eax
00001d94	movl	0x04(%eax),%eax
00001d97	movl	%esi,(%esp)
00001d9a	call	*%eax
00001d9c	jmp	0x00001d8d
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(vmtpicker.o):
(__TEXT,__text) section
CVMTPicker::CVMTPicker(vgui::Panel*, bool):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	leal	0x3b7cc-0xe(%edi),%eax
00000015	movl	%eax,0x18(%esp)
00000019	leal	0x3b7c2-0xe(%edi),%eax
0000001f	movl	%eax,0x14(%esp)
00000023	leal	0x3b7be-0xe(%edi),%eax
00000029	movl	%eax,0x10(%esp)
0000002d	leal	0x3b7b4-0xe(%edi),%eax
00000033	movl	%eax,0x0c(%esp)
00000037	movl	0x0c(%ebp),%eax
0000003a	movl	%eax,0x08(%esp)
0000003e	leal	VTT for CVMTPicker-0xe+0x00000004(%edi),%eax
00000044	movl	%eax,0xec(%ebp)
00000047	movl	%eax,0x04(%esp)
0000004b	movl	0x08(%ebp),%esi
0000004e	movl	%esi,(%esp)
00000051	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000056	leal	vtable for CVMTPicker-0xe+0x0000000c(%edi),%eax
0000005c	movl	%eax,(%esi)
0000005e	testb	$0x01,CVMTPicker::ChainToMap()::chained-0xe(%edi)
00000065	jne	0x0000009c
00000067	movb	$0x01,CVMTPicker::ChainToMap()::chained-0xe(%edi)
0000006e	leal	0x3b88f-0xe(%edi),%eax
00000074	movl	%eax,(%esp)
00000077	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000007c	movl	%eax,%esi
0000007e	leal	CVMTPicker::GetPanelClassName()-0xe(%edi),%eax
00000084	movl	%eax,0x1c(%esi)
00000087	testl	%esi,%esi
00000089	je	0x0000009c
0000008b	leal	0x3b87e-0xe(%edi),%eax
00000091	movl	%eax,(%esp)
00000094	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000099	movl	%eax,0x18(%esi)
0000009c	testb	$0x01,CVMTPicker::ChainToAnimationMap()::chained-0xe(%edi)
000000a3	jne	0x000000da
000000a5	movb	$0x01,CVMTPicker::ChainToAnimationMap()::chained-0xe(%edi)
000000ac	leal	0x3b88f-0xe(%edi),%eax
000000b2	movl	%eax,(%esp)
000000b5	calll	FindOrAddPanelAnimationMap(char const*)
000000ba	movl	%eax,%esi
000000bc	leal	CVMTPicker::GetPanelClassName()-0xe(%edi),%eax
000000c2	movl	%eax,0x18(%esi)
000000c5	testl	%esi,%esi
000000c7	je	0x000000da
000000c9	leal	0x3b87e-0xe(%edi),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	FindOrAddPanelAnimationMap(char const*)
000000d7	movl	%eax,0x14(%esi)
000000da	testb	$0x01,CVMTPicker::KB_ChainToMap()::chained-0xe(%edi)
000000e1	jne	0x00000118
000000e3	movb	$0x01,CVMTPicker::KB_ChainToMap()::chained-0xe(%edi)
000000ea	leal	0x3b88f-0xe(%edi),%eax
000000f0	movl	%eax,(%esp)
000000f3	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f8	movl	%eax,%esi
000000fa	leal	CVMTPicker::GetPanelClassName()-0xe(%edi),%eax
00000100	movl	%eax,0x44(%esi)
00000103	testl	%esi,%esi
00000105	je	0x00000118
00000107	leal	0x3b87e-0xe(%edi),%eax
0000010d	movl	%eax,(%esp)
00000110	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000115	movl	%eax,0x18(%esi)
00000118	movl	%edi,0xf0(%ebp)
0000011b	movl	$0x000001c4,(%esp)
00000122	calll	operator new(unsigned long)
00000127	movl	%eax,%edi
00000129	movl	0xf0(%ebp),%eax
0000012c	leal	0x3b7d4-0xe(%eax),%eax
00000132	movl	%eax,0x08(%esp)
00000136	movl	0x08(%ebp),%esi
00000139	movl	%esi,0x04(%esp)
0000013d	movl	%edi,(%esp)
00000140	movl	$0x00000001,0x10(%esp)
00000148	movl	$0x00000001,0x0c(%esp)
00000150	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
00000155	movl	%edi,0x00000258(%esi)
0000015b	movl	%edi,(%esp)
0000015e	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x04(%esp)
00000166	calll	vgui::Panel::GetChild(int)
0000016b	movl	%eax,0xe8(%ebp)
0000016e	movl	0x08(%ebp),%eax
00000171	movl	0x00000258(%eax),%eax
00000177	movl	%eax,(%esp)
0000017a	movl	$0x00000001,0x04(%esp)
00000182	calll	vgui::Panel::GetChild(int)
00000187	movl	%eax,%esi
00000189	movl	$0x000001c4,(%esp)
00000190	calll	operator new(unsigned long)
00000195	movl	%eax,%edi
00000197	movl	0xf0(%ebp),%eax
0000019a	leal	0x3b7e4-0xe(%eax),%eax
000001a0	movl	%eax,0x08(%esp)
000001a4	movl	%esi,0x04(%esp)
000001a8	movl	%edi,(%esp)
000001ab	movl	$0x00000001,0x10(%esp)
000001b3	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x0c(%esp)
000001bb	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000001c0	movl	0x08(%ebp),%eax
000001c3	movl	%edi,0x00000254(%eax)
000001c9	movl	%edi,(%esp)
000001cc	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x04(%esp)
000001d4	calll	vgui::Panel::GetChild(int)
000001d9	movl	%eax,%ebx
000001db	movl	0x08(%ebp),%eax
000001de	movl	0x00000254(%eax),%eax
000001e4	movl	%eax,(%esp)
000001e7	movl	$0x00000001,0x04(%esp)
000001ef	calll	vgui::Panel::GetChild(int)
000001f4	movl	%eax,%esi
000001f6	movl	$0x000001c0,(%esp)
000001fd	calll	operator new(unsigned long)
00000202	movl	%eax,%edi
00000204	movl	0xf0(%ebp),%eax
00000207	leal	0x3b7f1-0xe(%eax),%eax
0000020d	movl	%eax,0x08(%esp)
00000211	movl	%ebx,0x04(%esp)
00000215	movl	%edi,(%esp)
00000218	calll	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)
0000021d	movl	0x08(%ebp),%eax
00000220	movl	%edi,0x0000024c(%eax)
00000226	movl	$0x000001c0,(%esp)
0000022d	calll	operator new(unsigned long)
00000232	movl	%eax,%ebx
00000234	movl	0xf0(%ebp),%edi
00000237	leal	0x3b7fe-0xe(%edi),%eax
0000023d	movl	%eax,0x08(%esp)
00000241	movl	%esi,0x04(%esp)
00000245	movl	%ebx,(%esp)
00000248	calll	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)
0000024d	movl	%edi,%esi
0000024f	movl	0x08(%ebp),%eax
00000252	movl	%ebx,0x00000250(%eax)
00000258	movl	%ebx,(%esp)
0000025b	movl	$0x00000001,0x04(%esp)
00000263	calll	CVMTPreviewPanel::DrawIn3DMode(bool)
00000268	movb	0x10(%ebp),%al
0000026b	movzbl	%al,%eax
0000026e	movl	%eax,0x08(%esp)
00000272	movl	0xe8(%ebp),%eax
00000275	movl	%eax,0x04(%esp)
00000279	movl	0x08(%ebp),%eax
0000027c	movl	%eax,(%esp)
0000027f	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
00000284	movl	0x08(%ebp),%edx
00000287	movl	(%edx),%eax
00000289	movl	0x00000354(%eax),%eax
0000028f	leal	0x3b80b-0xe(%esi),%ecx
00000295	movl	%ecx,0x04(%esp)
00000299	movl	%edx,(%esp)
0000029c	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
000002a4	call	*%eax
000002a6	addl	$0x2c,%esp
000002a9	popl	%esi
000002aa	popl	%edi
000002ab	popl	%ebx
000002ac	popl	%ebp
000002ad	ret
000002ae	movl	%eax,%esi
000002b0	jmp	0x000002c7
000002b2	movl	%eax,%esi
000002b4	movl	%edi,(%esp)
000002b7	jmp	0x000002c2
000002b9	jmp	0x000002b2
000002bb	jmp	0x000002b2
000002bd	movl	%eax,%esi
000002bf	movl	%ebx,(%esp)
000002c2	calll	operator delete(void*)
000002c7	movl	0xec(%ebp),%eax
000002ca	movl	%eax,0x04(%esp)
000002ce	movl	0x08(%ebp),%eax
000002d1	movl	%eax,(%esp)
000002d4	calll	CBaseAssetPicker::~CBaseAssetPicker()
000002d9	movl	%esi,(%esp)
000002dc	calll	__Unwind_Resume
000002e1	calll	std::terminate()
000002e6	nopw	%cs:CVMTPicker::CVMTPicker(vgui::Panel*, bool)(%eax,%eax)
CVMTPicker::CVMTPicker(vgui::Panel*, bool):
000002f0	pushl	%ebp
000002f1	movl	%esp,%ebp
000002f3	pushl	%ebx
000002f4	pushl	%edi
000002f5	pushl	%esi
000002f6	subl	$0x2c,%esp
000002f9	calll	0x000002fe
000002fe	popl	%ebx
000002ff	leal	0x3b7cc-0x2fe(%ebx),%eax
00000305	movl	%eax,0x18(%esp)
00000309	leal	0x3b7c2-0x2fe(%ebx),%eax
0000030f	movl	%eax,0x14(%esp)
00000313	leal	0x3b7be-0x2fe(%ebx),%eax
00000319	movl	%eax,0x10(%esp)
0000031d	leal	0x3b7b4-0x2fe(%ebx),%eax
00000323	movl	%eax,0x0c(%esp)
00000327	movl	0x10(%ebp),%eax
0000032a	movl	%eax,0x08(%esp)
0000032e	movl	0x0c(%ebp),%esi
00000331	leal	0x04(%esi),%eax
00000334	movl	%eax,0xf0(%ebp)
00000337	movl	%eax,0x04(%esp)
0000033b	movl	0x08(%ebp),%edi
0000033e	movl	%edi,(%esp)
00000341	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000346	movl	(%esi),%eax
00000348	movl	%eax,(%edi)
0000034a	testb	$0x01,CVMTPicker::ChainToMap()::chained-0x2fe(%ebx)
00000351	jne	0x00000388
00000353	movb	$0x01,CVMTPicker::ChainToMap()::chained-0x2fe(%ebx)
0000035a	leal	0x3b88f-0x2fe(%ebx),%eax
00000360	movl	%eax,(%esp)
00000363	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000368	movl	%eax,%esi
0000036a	leal	CVMTPicker::GetPanelClassName()-0x2fe(%ebx),%eax
00000370	movl	%eax,0x1c(%esi)
00000373	testl	%esi,%esi
00000375	je	0x00000388
00000377	leal	0x3b87e-0x2fe(%ebx),%eax
0000037d	movl	%eax,(%esp)
00000380	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000385	movl	%eax,0x18(%esi)
00000388	testb	$0x01,CVMTPicker::ChainToAnimationMap()::chained-0x2fe(%ebx)
0000038f	jne	0x000003c6
00000391	movb	$0x01,CVMTPicker::ChainToAnimationMap()::chained-0x2fe(%ebx)
00000398	leal	0x3b88f-0x2fe(%ebx),%eax
0000039e	movl	%eax,(%esp)
000003a1	calll	FindOrAddPanelAnimationMap(char const*)
000003a6	movl	%eax,%esi
000003a8	leal	CVMTPicker::GetPanelClassName()-0x2fe(%ebx),%eax
000003ae	movl	%eax,0x18(%esi)
000003b1	testl	%esi,%esi
000003b3	je	0x000003c6
000003b5	leal	0x3b87e-0x2fe(%ebx),%eax
000003bb	movl	%eax,(%esp)
000003be	calll	FindOrAddPanelAnimationMap(char const*)
000003c3	movl	%eax,0x14(%esi)
000003c6	testb	$0x01,CVMTPicker::KB_ChainToMap()::chained-0x2fe(%ebx)
000003cd	jne	0x00000404
000003cf	movb	$0x01,CVMTPicker::KB_ChainToMap()::chained-0x2fe(%ebx)
000003d6	leal	0x3b88f-0x2fe(%ebx),%eax
000003dc	movl	%eax,(%esp)
000003df	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000003e4	movl	%eax,%esi
000003e6	leal	CVMTPicker::GetPanelClassName()-0x2fe(%ebx),%eax
000003ec	movl	%eax,0x44(%esi)
000003ef	testl	%esi,%esi
000003f1	je	0x00000404
000003f3	leal	0x3b87e-0x2fe(%ebx),%eax
000003f9	movl	%eax,(%esp)
000003fc	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000401	movl	%eax,0x18(%esi)
00000404	movl	$0x000001c4,(%esp)
0000040b	calll	operator new(unsigned long)
00000410	movl	%eax,%edi
00000412	leal	0x3b7d4-0x2fe(%ebx),%eax
00000418	movl	%eax,0x08(%esp)
0000041c	movl	0x08(%ebp),%esi
0000041f	movl	%esi,0x04(%esp)
00000423	movl	%edi,(%esp)
00000426	movl	$0x00000001,0x10(%esp)
0000042e	movl	$0x00000001,0x0c(%esp)
00000436	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
0000043b	movl	%edi,0x00000258(%esi)
00000441	movl	%edi,(%esp)
00000444	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x04(%esp)
0000044c	calll	vgui::Panel::GetChild(int)
00000451	movl	%eax,0xec(%ebp)
00000454	movl	0x08(%ebp),%eax
00000457	movl	0x00000258(%eax),%eax
0000045d	movl	%eax,(%esp)
00000460	movl	$0x00000001,0x04(%esp)
00000468	calll	vgui::Panel::GetChild(int)
0000046d	movl	%eax,%esi
0000046f	movl	$0x000001c4,(%esp)
00000476	calll	operator new(unsigned long)
0000047b	movl	%eax,%edi
0000047d	leal	0x3b7e4-0x2fe(%ebx),%eax
00000483	movl	%eax,0x08(%esp)
00000487	movl	%esi,0x04(%esp)
0000048b	movl	%edi,(%esp)
0000048e	movl	$0x00000001,0x10(%esp)
00000496	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x0c(%esp)
0000049e	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
000004a3	movl	%ebx,%esi
000004a5	movl	0x08(%ebp),%eax
000004a8	movl	%edi,0x00000254(%eax)
000004ae	movl	%edi,(%esp)
000004b1	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x04(%esp)
000004b9	calll	vgui::Panel::GetChild(int)
000004be	movl	%eax,%ebx
000004c0	movl	0x08(%ebp),%eax
000004c3	movl	0x00000254(%eax),%eax
000004c9	movl	%eax,(%esp)
000004cc	movl	$0x00000001,0x04(%esp)
000004d4	calll	vgui::Panel::GetChild(int)
000004d9	movl	%eax,0xe8(%ebp)
000004dc	movl	$0x000001c0,(%esp)
000004e3	calll	operator new(unsigned long)
000004e8	movl	%eax,%edi
000004ea	leal	0x3b7f1-0x2fe(%esi),%eax
000004f0	movl	%eax,0x08(%esp)
000004f4	movl	%ebx,0x04(%esp)
000004f8	movl	%edi,(%esp)
000004fb	calll	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)
00000500	movl	0x08(%ebp),%eax
00000503	movl	%edi,0x0000024c(%eax)
00000509	movl	$0x000001c0,(%esp)
00000510	calll	operator new(unsigned long)
00000515	movl	%eax,%ebx
00000517	leal	0x3b7fe-0x2fe(%esi),%eax
0000051d	movl	%eax,0x08(%esp)
00000521	movl	0xe8(%ebp),%eax
00000524	movl	%eax,0x04(%esp)
00000528	movl	%ebx,(%esp)
0000052b	calll	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)
00000530	movl	0x08(%ebp),%eax
00000533	movl	%ebx,0x00000250(%eax)
00000539	movl	%ebx,(%esp)
0000053c	movl	$0x00000001,0x04(%esp)
00000544	calll	CVMTPreviewPanel::DrawIn3DMode(bool)
00000549	movb	0x14(%ebp),%al
0000054c	movzbl	%al,%eax
0000054f	movl	%eax,0x08(%esp)
00000553	movl	0xec(%ebp),%eax
00000556	movl	%eax,0x04(%esp)
0000055a	movl	0x08(%ebp),%eax
0000055d	movl	%eax,(%esp)
00000560	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
00000565	movl	0x08(%ebp),%edx
00000568	movl	(%edx),%eax
0000056a	movl	0x00000354(%eax),%eax
00000570	leal	0x3b80b-0x2fe(%esi),%ecx
00000576	movl	%ecx,0x04(%esp)
0000057a	movl	%edx,(%esp)
0000057d	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
00000585	call	*%eax
00000587	addl	$0x2c,%esp
0000058a	popl	%esi
0000058b	popl	%edi
0000058c	popl	%ebx
0000058d	popl	%ebp
0000058e	ret
0000058f	movl	%eax,%esi
00000591	jmp	0x000005a8
00000593	movl	%eax,%esi
00000595	movl	%edi,(%esp)
00000598	jmp	0x000005a3
0000059a	jmp	0x00000593
0000059c	jmp	0x00000593
0000059e	movl	%eax,%esi
000005a0	movl	%ebx,(%esp)
000005a3	calll	operator delete(void*)
000005a8	movl	0xf0(%ebp),%eax
000005ab	movl	%eax,0x04(%esp)
000005af	movl	0x08(%ebp),%eax
000005b2	movl	%eax,(%esp)
000005b5	calll	CBaseAssetPicker::~CBaseAssetPicker()
000005ba	movl	%esi,(%esp)
000005bd	calll	__Unwind_Resume
000005c2	calll	std::terminate()
000005c7	nopw	CVMTPicker::CVMTPicker(vgui::Panel*, bool)(%eax,%eax)
CVMTPicker::~CVMTPicker():
000005d0	pushl	%ebp
000005d1	movl	%esp,%ebp
000005d3	pushl	%edi
000005d4	pushl	%esi
000005d5	subl	$0x10,%esp
000005d8	calll	0x000005dd
000005dd	popl	%eax
000005de	movl	0x08(%ebp),%edi
000005e1	leal	VTT for CVMTPicker-0x5dd+0x00000004(%eax),%eax
000005e7	movl	%eax,0x04(%esp)
000005eb	movl	%edi,(%esp)
000005ee	calll	CBaseAssetPicker::~CBaseAssetPicker()
000005f3	addl	$0x10,%esp
000005f6	popl	%esi
000005f7	popl	%edi
000005f8	popl	%ebp
000005f9	jmp	operator delete(void*)
000005fe	movl	%eax,%esi
00000600	movl	%edi,(%esp)
00000603	calll	operator delete(void*)
00000608	movl	%esi,(%esp)
0000060b	calll	__Unwind_Resume
CVMTPicker::~CVMTPicker():
00000610	pushl	%ebp
00000611	movl	%esp,%ebp
00000613	subl	$0x08,%esp
00000616	calll	0x0000061b
0000061b	popl	%eax
0000061c	leal	VTT for CVMTPicker-0x61b+0x00000004(%eax),%eax
00000622	movl	%eax,0x04(%esp)
00000626	movl	0x08(%ebp),%eax
00000629	movl	%eax,(%esp)
0000062c	calll	CBaseAssetPicker::~CBaseAssetPicker()
00000631	addl	$0x08,%esp
00000634	popl	%ebp
00000635	ret
00000636	nopw	%cs:CVMTPicker::CVMTPicker(vgui::Panel*, bool)(%eax,%eax)
CVMTPicker::~CVMTPicker():
00000640	pushl	%ebp
00000641	movl	%esp,%ebp
00000643	subl	$0x08,%esp
00000646	movl	0x0c(%ebp),%eax
00000649	addl	$0x04,%eax
0000064c	movl	%eax,0x04(%esp)
00000650	movl	0x08(%ebp),%eax
00000653	movl	%eax,(%esp)
00000656	calll	CBaseAssetPicker::~CBaseAssetPicker()
0000065b	addl	$0x08,%esp
0000065e	popl	%ebp
0000065f	ret
CVMTPicker::OnSelectedAssetPicked(char const*):
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%edi
00000664	pushl	%esi
00000665	subl	$0x10,%esp
00000668	movl	0x08(%ebp),%edi
0000066b	movl	0x0000024c(%edi),%eax
00000671	movl	0x0c(%ebp),%esi
00000674	movl	%esi,0x04(%esp)
00000678	movl	%eax,(%esp)
0000067b	calll	CVMTPreviewPanel::SetVMT(char const*)
00000680	movl	0x00000250(%edi),%eax
00000686	movl	%esi,0x04(%esp)
0000068a	movl	%eax,(%esp)
0000068d	calll	CVMTPreviewPanel::SetVMT(char const*)
00000692	addl	$0x10,%esp
00000695	popl	%esi
00000696	popl	%edi
00000697	popl	%ebp
00000698	ret
00000699	nopl	CVMTPicker::CVMTPicker(vgui::Panel*, bool)(%eax)
CVMTPickerFrame::CVMTPickerFrame(vgui::Panel*, char const*, bool):
000006a0	pushl	%ebp
000006a1	movl	%esp,%ebp
000006a3	pushl	%ebx
000006a4	pushl	%edi
000006a5	pushl	%esi
000006a6	subl	$0x1c,%esp
000006a9	calll	0x000006ae
000006ae	popl	%ebx
000006af	movl	0x0c(%ebp),%eax
000006b2	movl	%eax,0x08(%esp)
000006b6	leal	VTT for CVMTPickerFrame-0x6ae+0x00000004(%ebx),%eax
000006bc	movl	%eax,0xf0(%ebp)
000006bf	movl	%eax,0x04(%esp)
000006c3	movl	0x08(%ebp),%esi
000006c6	movl	%esi,(%esp)
000006c9	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
000006ce	leal	vtable for CVMTPickerFrame-0x6ae+0x0000000c(%ebx),%eax
000006d4	movl	%eax,(%esi)
000006d6	testb	$0x01,CVMTPickerFrame::ChainToMap()::chained-0x6ae(%ebx)
000006dd	jne	0x00000714
000006df	movb	$0x01,CVMTPickerFrame::ChainToMap()::chained-0x6ae(%ebx)
000006e6	leal	0x3b85a-0x6ae(%ebx),%eax
000006ec	movl	%eax,(%esp)
000006ef	calll	vgui::FindOrAddPanelMessageMap(char const*)
000006f4	movl	%eax,%esi
000006f6	leal	CVMTPickerFrame::GetPanelClassName()-0x6ae(%ebx),%eax
000006fc	movl	%eax,0x1c(%esi)
000006ff	testl	%esi,%esi
00000701	je	0x00000714
00000703	leal	0x3b844-0x6ae(%ebx),%eax
00000709	movl	%eax,(%esp)
0000070c	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000711	movl	%eax,0x18(%esi)
00000714	testb	$0x01,CVMTPickerFrame::ChainToAnimationMap()::chained-0x6ae(%ebx)
0000071b	jne	0x00000752
0000071d	movb	$0x01,CVMTPickerFrame::ChainToAnimationMap()::chained-0x6ae(%ebx)
00000724	leal	0x3b85a-0x6ae(%ebx),%eax
0000072a	movl	%eax,(%esp)
0000072d	calll	FindOrAddPanelAnimationMap(char const*)
00000732	movl	%eax,%esi
00000734	leal	CVMTPickerFrame::GetPanelClassName()-0x6ae(%ebx),%eax
0000073a	movl	%eax,0x18(%esi)
0000073d	testl	%esi,%esi
0000073f	je	0x00000752
00000741	leal	0x3b844-0x6ae(%ebx),%eax
00000747	movl	%eax,(%esp)
0000074a	calll	FindOrAddPanelAnimationMap(char const*)
0000074f	movl	%eax,0x14(%esi)
00000752	testb	$0x01,CVMTPickerFrame::KB_ChainToMap()::chained-0x6ae(%ebx)
00000759	jne	0x00000790
0000075b	movb	$0x01,CVMTPickerFrame::KB_ChainToMap()::chained-0x6ae(%ebx)
00000762	leal	0x3b85a-0x6ae(%ebx),%eax
00000768	movl	%eax,(%esp)
0000076b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000770	movl	%eax,%esi
00000772	leal	CVMTPickerFrame::GetPanelClassName()-0x6ae(%ebx),%eax
00000778	movl	%eax,0x44(%esi)
0000077b	testl	%esi,%esi
0000077d	je	0x00000790
0000077f	leal	0x3b844-0x6ae(%ebx),%eax
00000785	movl	%eax,(%esp)
00000788	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000078d	movl	%eax,0x18(%esi)
00000790	movl	$0x0000025c,(%esp)
00000797	calll	operator new(unsigned long)
0000079c	movl	%eax,%edi
0000079e	movb	0x14(%ebp),%al
000007a1	movzbl	%al,%eax
000007a4	movl	%eax,0x08(%esp)
000007a8	movl	0x08(%ebp),%esi
000007ab	movl	%esi,0x04(%esp)
000007af	movl	%edi,(%esp)
000007b2	calll	CVMTPicker::CVMTPicker(vgui::Panel*, bool)
000007b7	movl	%edi,0x04(%esp)
000007bb	movl	%esi,(%esp)
000007be	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
000007c3	movl	0x08(%ebp),%edx
000007c6	movl	(%edx),%eax
000007c8	movl	0x00000354(%eax),%eax
000007ce	leal	0x3b822-0x6ae(%ebx),%ecx
000007d4	movl	%ecx,0x04(%esp)
000007d8	movl	%edx,(%esp)
000007db	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
000007e3	call	*%eax
000007e5	movl	0x10(%ebp),%ecx
000007e8	movl	0x08(%ebp),%edx
000007eb	movl	(%edx),%eax
000007ed	movl	0x000003ac(%eax),%eax
000007f3	movl	%ecx,0x04(%esp)
000007f7	movl	%edx,(%esp)
000007fa	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
00000802	call	*%eax
00000804	addl	$0x1c,%esp
00000807	popl	%esi
00000808	popl	%edi
00000809	popl	%ebx
0000080a	popl	%ebp
0000080b	ret
0000080c	movl	%eax,%esi
0000080e	jmp	0x0000081a
00000810	movl	%eax,%esi
00000812	movl	%edi,(%esp)
00000815	calll	operator delete(void*)
0000081a	movl	0xf0(%ebp),%eax
0000081d	movl	%eax,0x04(%esp)
00000821	movl	0x08(%ebp),%eax
00000824	movl	%eax,(%esp)
00000827	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
0000082c	movl	%esi,(%esp)
0000082f	calll	__Unwind_Resume
00000834	calll	std::terminate()
00000839	nopl	CVMTPicker::CVMTPicker(vgui::Panel*, bool)(%eax)
CVMTPickerFrame::CVMTPickerFrame(vgui::Panel*, char const*, bool):
00000840	pushl	%ebp
00000841	movl	%esp,%ebp
00000843	pushl	%ebx
00000844	pushl	%edi
00000845	pushl	%esi
00000846	subl	$0x1c,%esp
00000849	calll	0x0000084e
0000084e	popl	%ebx
0000084f	movl	0x10(%ebp),%eax
00000852	movl	%eax,0x08(%esp)
00000856	movl	0x0c(%ebp),%esi
00000859	leal	0x04(%esi),%eax
0000085c	movl	%eax,0xf0(%ebp)
0000085f	movl	%eax,0x04(%esp)
00000863	movl	0x08(%ebp),%edi
00000866	movl	%edi,(%esp)
00000869	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
0000086e	movl	(%esi),%eax
00000870	movl	%eax,(%edi)
00000872	testb	$0x01,CVMTPickerFrame::ChainToMap()::chained-0x84e(%ebx)
00000879	jne	0x000008b0
0000087b	movb	$0x01,CVMTPickerFrame::ChainToMap()::chained-0x84e(%ebx)
00000882	leal	0x3b85a-0x84e(%ebx),%eax
00000888	movl	%eax,(%esp)
0000088b	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000890	movl	%eax,%esi
00000892	leal	CVMTPickerFrame::GetPanelClassName()-0x84e(%ebx),%eax
00000898	movl	%eax,0x1c(%esi)
0000089b	testl	%esi,%esi
0000089d	je	0x000008b0
0000089f	leal	0x3b844-0x84e(%ebx),%eax
000008a5	movl	%eax,(%esp)
000008a8	calll	vgui::FindOrAddPanelMessageMap(char const*)
000008ad	movl	%eax,0x18(%esi)
000008b0	testb	$0x01,CVMTPickerFrame::ChainToAnimationMap()::chained-0x84e(%ebx)
000008b7	jne	0x000008ee
000008b9	movb	$0x01,CVMTPickerFrame::ChainToAnimationMap()::chained-0x84e(%ebx)
000008c0	leal	0x3b85a-0x84e(%ebx),%eax
000008c6	movl	%eax,(%esp)
000008c9	calll	FindOrAddPanelAnimationMap(char const*)
000008ce	movl	%eax,%esi
000008d0	leal	CVMTPickerFrame::GetPanelClassName()-0x84e(%ebx),%eax
000008d6	movl	%eax,0x18(%esi)
000008d9	testl	%esi,%esi
000008db	je	0x000008ee
000008dd	leal	0x3b844-0x84e(%ebx),%eax
000008e3	movl	%eax,(%esp)
000008e6	calll	FindOrAddPanelAnimationMap(char const*)
000008eb	movl	%eax,0x14(%esi)
000008ee	testb	$0x01,CVMTPickerFrame::KB_ChainToMap()::chained-0x84e(%ebx)
000008f5	jne	0x0000092c
000008f7	movb	$0x01,CVMTPickerFrame::KB_ChainToMap()::chained-0x84e(%ebx)
000008fe	leal	0x3b85a-0x84e(%ebx),%eax
00000904	movl	%eax,(%esp)
00000907	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000090c	movl	%eax,%esi
0000090e	leal	CVMTPickerFrame::GetPanelClassName()-0x84e(%ebx),%eax
00000914	movl	%eax,0x44(%esi)
00000917	testl	%esi,%esi
00000919	je	0x0000092c
0000091b	leal	0x3b844-0x84e(%ebx),%eax
00000921	movl	%eax,(%esp)
00000924	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000929	movl	%eax,0x18(%esi)
0000092c	movl	$0x0000025c,(%esp)
00000933	calll	operator new(unsigned long)
00000938	movl	%eax,%edi
0000093a	movb	0x18(%ebp),%al
0000093d	movzbl	%al,%eax
00000940	movl	%eax,0x08(%esp)
00000944	movl	0x08(%ebp),%esi
00000947	movl	%esi,0x04(%esp)
0000094b	movl	%edi,(%esp)
0000094e	calll	CVMTPicker::CVMTPicker(vgui::Panel*, bool)
00000953	movl	%edi,0x04(%esp)
00000957	movl	%esi,(%esp)
0000095a	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
0000095f	movl	0x08(%ebp),%edx
00000962	movl	(%edx),%eax
00000964	movl	0x00000354(%eax),%eax
0000096a	leal	0x3b822-0x84e(%ebx),%ecx
00000970	movl	%ecx,0x04(%esp)
00000974	movl	%edx,(%esp)
00000977	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
0000097f	call	*%eax
00000981	movl	0x14(%ebp),%ecx
00000984	movl	0x08(%ebp),%edx
00000987	movl	(%edx),%eax
00000989	movl	0x000003ac(%eax),%eax
0000098f	movl	%ecx,0x04(%esp)
00000993	movl	%edx,(%esp)
00000996	movl	CVMTPicker::CVMTPicker(vgui::Panel*, bool),0x08(%esp)
0000099e	call	*%eax
000009a0	addl	$0x1c,%esp
000009a3	popl	%esi
000009a4	popl	%edi
000009a5	popl	%ebx
000009a6	popl	%ebp
000009a7	ret
000009a8	movl	%eax,%esi
000009aa	jmp	0x000009b6
000009ac	movl	%eax,%esi
000009ae	movl	%edi,(%esp)
000009b1	calll	operator delete(void*)
000009b6	movl	0xf0(%ebp),%eax
000009b9	movl	%eax,0x04(%esp)
000009bd	movl	0x08(%ebp),%eax
000009c0	movl	%eax,(%esp)
000009c3	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
000009c8	movl	%esi,(%esp)
000009cb	calll	__Unwind_Resume
000009d0	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(vmtpreviewpanel.o):
(__TEXT,__text) section
CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x3c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CVMTPreviewPanel-0xe+0x00000004(%ebx),%eax
00000023	movl	%eax,0xd4(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
00000035	leal	vtable for CVMTPreviewPanel-0xe+0x0000000c(%ebx),%eax
0000003b	movl	%eax,(%edi)
0000003d	testb	$0x01,CVMTPreviewPanel::ChainToMap()::chained-0xe(%ebx)
00000044	jne	0x0000007b
00000046	movb	$0x01,CVMTPreviewPanel::ChainToMap()::chained-0xe(%ebx)
0000004d	leal	0x531d2-0xe(%ebx),%eax
00000053	movl	%eax,(%esp)
00000056	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005b	movl	%eax,%esi
0000005d	leal	CVMTPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
00000063	movl	%eax,0x1c(%esi)
00000066	testl	%esi,%esi
00000068	je	0x0000007b
0000006a	leal	0x53202-0xe(%ebx),%eax
00000070	movl	%eax,(%esp)
00000073	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000078	movl	%eax,0x18(%esi)
0000007b	testb	$0x01,CVMTPreviewPanel::ChainToAnimationMap()::chained-0xe(%ebx)
00000082	jne	0x000000b9
00000084	movb	$0x01,CVMTPreviewPanel::ChainToAnimationMap()::chained-0xe(%ebx)
0000008b	leal	0x531d2-0xe(%ebx),%eax
00000091	movl	%eax,(%esp)
00000094	calll	FindOrAddPanelAnimationMap(char const*)
00000099	movl	%eax,%esi
0000009b	leal	CVMTPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
000000a1	movl	%eax,0x18(%esi)
000000a4	testl	%esi,%esi
000000a6	je	0x000000b9
000000a8	leal	0x53202-0xe(%ebx),%eax
000000ae	movl	%eax,(%esp)
000000b1	calll	FindOrAddPanelAnimationMap(char const*)
000000b6	movl	%eax,0x14(%esi)
000000b9	testb	$0x01,CVMTPreviewPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c0	jne	0x000000f7
000000c2	movb	$0x01,CVMTPreviewPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c9	leal	0x531d2-0xe(%ebx),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000d7	movl	%eax,%esi
000000d9	leal	CVMTPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
000000df	movl	%eax,0x44(%esi)
000000e2	testl	%esi,%esi
000000e4	je	0x000000f7
000000e6	leal	0x53202-0xe(%ebx),%eax
000000ec	movl	%eax,(%esp)
000000ef	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f4	movl	%eax,0x18(%esi)
000000f7	leal	0x0000017c(%edi),%eax
000000fd	movl	%eax,0xe4(%ebp)
00000100	movl	%eax,(%esp)
00000103	calll	CUtlString::CUtlString()
00000108	leal	0x0000018c(%edi),%eax
0000010e	movl	%eax,0xe0(%ebp)
00000111	movl	%eax,(%esp)
00000114	movl	$0x00000001,0x0c(%esp)
0000011c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00000124	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
0000012c	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
00000131	leal	0x00000190(%edi),%eax
00000137	movl	%eax,0xdc(%ebp)
0000013a	movl	%eax,(%esp)
0000013d	calll	CTextureReference::CTextureReference()
00000142	leal	0x00000194(%edi),%eax
00000148	movl	%eax,0xd8(%ebp)
0000014b	movl	%eax,(%esp)
0000014e	calll	CTextureReference::CTextureReference()
00000153	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001a4(%edi)
0000015d	leal	0x531bc-0xe(%ebx),%eax
00000163	movl	%eax,0x08(%esp)
00000167	leal	0x53154-0xe(%ebx),%esi
0000016d	movl	%esi,0x04(%esp)
00000171	movl	0xe0(%ebp),%eax
00000174	movl	%eax,(%esp)
00000177	movl	$0x00000001,0x0c(%esp)
0000017f	calll	CMaterialReference::Init(char const*, char const*, bool)
00000184	movl	%esi,0x04(%esp)
00000188	movl	0xe4(%ebp),%eax
0000018b	movl	%eax,(%esp)
0000018e	calll	CUtlString::operator=(char const*)
00000193	leal	0x531a6-0xe(%ebx),%esi
00000199	movl	%esi,0x08(%esp)
0000019d	leal	0x5317b-0xe(%ebx),%eax
000001a3	movl	%eax,0x04(%esp)
000001a7	movl	0xdc(%ebp),%eax
000001aa	movl	%eax,(%esp)
000001ad	movl	$0x00000001,0x0c(%esp)
000001b5	calll	CTextureReference::Init(char const*, char const*, bool)
000001ba	movl	%esi,0x08(%esp)
000001be	leal	0x531ad-0xe(%ebx),%eax
000001c4	movl	%eax,0x04(%esp)
000001c8	movl	0xd8(%ebp),%eax
000001cb	movl	%eax,(%esp)
000001ce	movl	$0x00000001,0x0c(%esp)
000001d6	calll	CTextureReference::Init(char const*, char const*, bool)
000001db	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000198(%edi)
000001e5	movl	$0x3f800000,0x0000019c(%edi)
000001ef	movl	$0xbf800000,0x000001a0(%edi)
000001f9	movl	$0xffffffff,0x000001a4(%edi)
00000203	movl	$0x40000000,0x000001a8(%edi)
0000020d	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001bc(%edi)
00000214	movl	$0x3f800000,0x000001ac(%edi)
0000021e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001b0(%edi)
00000228	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001b4(%edi)
00000232	calll	_Plat_FloatTime
00000237	fstpl	0xe8(%ebp)
0000023a	movsd	0xe8(%ebp),%xmm0
0000023f	cvtsd2ss	%xmm0,%xmm0
00000243	movss	%xmm0,0x000001b8(%edi)
0000024b	addl	$0x3c,%esp
0000024e	popl	%esi
0000024f	popl	%edi
00000250	popl	%ebx
00000251	popl	%ebp
00000252	ret
00000253	movl	%eax,%esi
00000255	jmp	0x000002b0
00000257	movl	%eax,%esi
00000259	jmp	0x00000286
0000025b	movl	%eax,%esi
0000025d	jmp	0x0000027b
0000025f	movl	%eax,%esi
00000261	jmp	0x00000270
00000263	movl	%eax,%esi
00000265	movl	0xd8(%ebp),%eax
00000268	movl	%eax,(%esp)
0000026b	calll	CTextureReference::~CTextureReference()
00000270	movl	0xdc(%ebp),%eax
00000273	movl	%eax,(%esp)
00000276	calll	CTextureReference::~CTextureReference()
0000027b	movl	0xe0(%ebp),%eax
0000027e	movl	%eax,(%esp)
00000281	calll	CMaterialReference::~CMaterialReference()
00000286	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000184(%edi)
0000028d	js	0x000002b0
0000028f	movl	0xe4(%ebp),%ebx
00000292	movl	(%ebx),%eax
00000294	testl	%eax,%eax
00000296	je	0x000002a6
00000298	movl	%eax,(%esp)
0000029b	calll	_free
000002a0	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ebx)
000002a6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000180(%edi)
000002b0	movl	0xd4(%ebp),%eax
000002b3	movl	%eax,0x04(%esp)
000002b7	movl	%edi,(%esp)
000002ba	calll	vgui::Panel::~Panel()
000002bf	movl	%esi,(%esp)
000002c2	calll	__Unwind_Resume
000002c7	calll	std::terminate()
000002cc	nopl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax)
CVMTPreviewPanel::SetVMT(char const*):
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	pushl	%edi
000002d4	pushl	%esi
000002d5	subl	$0x10,%esp
000002d8	calll	0x000002dd
000002dd	popl	%eax
000002de	leal	0x531bc-0x2dd(%eax),%eax
000002e4	movl	%eax,0x08(%esp)
000002e8	movl	0x0c(%ebp),%edi
000002eb	movl	%edi,0x04(%esp)
000002ef	movl	0x08(%ebp),%esi
000002f2	leal	0x0000018c(%esi),%eax
000002f8	movl	%eax,(%esp)
000002fb	movl	$0x00000001,0x0c(%esp)
00000303	calll	CMaterialReference::Init(char const*, char const*, bool)
00000308	movl	%edi,0x04(%esp)
0000030c	addl	$0x0000017c,%esi
00000312	movl	%esi,(%esp)
00000315	calll	CUtlString::operator=(char const*)
0000031a	addl	$0x10,%esp
0000031d	popl	%esi
0000031e	popl	%edi
0000031f	popl	%ebp
00000320	ret
00000321	nopl	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*):
00000330	pushl	%ebp
00000331	movl	%esp,%ebp
00000333	pushl	%ebx
00000334	pushl	%edi
00000335	pushl	%esi
00000336	subl	$0x3c,%esp
00000339	calll	0x0000033e
0000033e	popl	%ebx
0000033f	movl	0x14(%ebp),%eax
00000342	movl	%eax,0x0c(%esp)
00000346	movl	0x10(%ebp),%eax
00000349	movl	%eax,0x08(%esp)
0000034d	movl	0x0c(%ebp),%esi
00000350	leal	0x04(%esi),%eax
00000353	movl	%eax,0xd4(%ebp)
00000356	movl	%eax,0x04(%esp)
0000035a	movl	0x08(%ebp),%edi
0000035d	movl	%edi,(%esp)
00000360	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
00000365	movl	(%esi),%eax
00000367	movl	%eax,(%edi)
00000369	testb	$0x01,CVMTPreviewPanel::ChainToMap()::chained-0x33e(%ebx)
00000370	jne	0x000003a7
00000372	movb	$0x01,CVMTPreviewPanel::ChainToMap()::chained-0x33e(%ebx)
00000379	leal	0x531d2-0x33e(%ebx),%eax
0000037f	movl	%eax,(%esp)
00000382	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000387	movl	%eax,%esi
00000389	leal	CVMTPreviewPanel::GetPanelClassName()-0x33e(%ebx),%eax
0000038f	movl	%eax,0x1c(%esi)
00000392	testl	%esi,%esi
00000394	je	0x000003a7
00000396	leal	0x53202-0x33e(%ebx),%eax
0000039c	movl	%eax,(%esp)
0000039f	calll	vgui::FindOrAddPanelMessageMap(char const*)
000003a4	movl	%eax,0x18(%esi)
000003a7	testb	$0x01,CVMTPreviewPanel::ChainToAnimationMap()::chained-0x33e(%ebx)
000003ae	jne	0x000003e5
000003b0	movb	$0x01,CVMTPreviewPanel::ChainToAnimationMap()::chained-0x33e(%ebx)
000003b7	leal	0x531d2-0x33e(%ebx),%eax
000003bd	movl	%eax,(%esp)
000003c0	calll	FindOrAddPanelAnimationMap(char const*)
000003c5	movl	%eax,%esi
000003c7	leal	CVMTPreviewPanel::GetPanelClassName()-0x33e(%ebx),%eax
000003cd	movl	%eax,0x18(%esi)
000003d0	testl	%esi,%esi
000003d2	je	0x000003e5
000003d4	leal	0x53202-0x33e(%ebx),%eax
000003da	movl	%eax,(%esp)
000003dd	calll	FindOrAddPanelAnimationMap(char const*)
000003e2	movl	%eax,0x14(%esi)
000003e5	testb	$0x01,CVMTPreviewPanel::KB_ChainToMap()::chained-0x33e(%ebx)
000003ec	jne	0x00000423
000003ee	movb	$0x01,CVMTPreviewPanel::KB_ChainToMap()::chained-0x33e(%ebx)
000003f5	leal	0x531d2-0x33e(%ebx),%eax
000003fb	movl	%eax,(%esp)
000003fe	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000403	movl	%eax,%esi
00000405	leal	CVMTPreviewPanel::GetPanelClassName()-0x33e(%ebx),%eax
0000040b	movl	%eax,0x44(%esi)
0000040e	testl	%esi,%esi
00000410	je	0x00000423
00000412	leal	0x53202-0x33e(%ebx),%eax
00000418	movl	%eax,(%esp)
0000041b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000420	movl	%eax,0x18(%esi)
00000423	leal	0x0000017c(%edi),%eax
00000429	movl	%eax,0xe4(%ebp)
0000042c	movl	%eax,(%esp)
0000042f	calll	CUtlString::CUtlString()
00000434	leal	0x0000018c(%edi),%eax
0000043a	movl	%eax,0xe0(%ebp)
0000043d	movl	%eax,(%esp)
00000440	movl	$0x00000001,0x0c(%esp)
00000448	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00000450	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00000458	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
0000045d	leal	0x00000190(%edi),%eax
00000463	movl	%eax,0xdc(%ebp)
00000466	movl	%eax,(%esp)
00000469	calll	CTextureReference::CTextureReference()
0000046e	leal	0x00000194(%edi),%eax
00000474	movl	%eax,0xd8(%ebp)
00000477	movl	%eax,(%esp)
0000047a	calll	CTextureReference::CTextureReference()
0000047f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001a4(%edi)
00000489	leal	0x531bc-0x33e(%ebx),%eax
0000048f	movl	%eax,0x08(%esp)
00000493	leal	0x53154-0x33e(%ebx),%esi
00000499	movl	%esi,0x04(%esp)
0000049d	movl	0xe0(%ebp),%eax
000004a0	movl	%eax,(%esp)
000004a3	movl	$0x00000001,0x0c(%esp)
000004ab	calll	CMaterialReference::Init(char const*, char const*, bool)
000004b0	movl	%esi,0x04(%esp)
000004b4	movl	0xe4(%ebp),%eax
000004b7	movl	%eax,(%esp)
000004ba	calll	CUtlString::operator=(char const*)
000004bf	leal	0x531a6-0x33e(%ebx),%esi
000004c5	movl	%esi,0x08(%esp)
000004c9	leal	0x5317b-0x33e(%ebx),%eax
000004cf	movl	%eax,0x04(%esp)
000004d3	movl	0xdc(%ebp),%eax
000004d6	movl	%eax,(%esp)
000004d9	movl	$0x00000001,0x0c(%esp)
000004e1	calll	CTextureReference::Init(char const*, char const*, bool)
000004e6	movl	%esi,0x08(%esp)
000004ea	leal	0x531ad-0x33e(%ebx),%eax
000004f0	movl	%eax,0x04(%esp)
000004f4	movl	0xd8(%ebp),%eax
000004f7	movl	%eax,(%esp)
000004fa	movl	$0x00000001,0x0c(%esp)
00000502	calll	CTextureReference::Init(char const*, char const*, bool)
00000507	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000198(%edi)
00000511	movl	$0x3f800000,0x0000019c(%edi)
0000051b	movl	$0xbf800000,0x000001a0(%edi)
00000525	movl	$0xffffffff,0x000001a4(%edi)
0000052f	movl	$0x40000000,0x000001a8(%edi)
00000539	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001bc(%edi)
00000540	movl	$0x3f800000,0x000001ac(%edi)
0000054a	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001b0(%edi)
00000554	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x000001b4(%edi)
0000055e	calll	_Plat_FloatTime
00000563	fstpl	0xe8(%ebp)
00000566	movsd	0xe8(%ebp),%xmm0
0000056b	cvtsd2ss	%xmm0,%xmm0
0000056f	movss	%xmm0,0x000001b8(%edi)
00000577	addl	$0x3c,%esp
0000057a	popl	%esi
0000057b	popl	%edi
0000057c	popl	%ebx
0000057d	popl	%ebp
0000057e	ret
0000057f	movl	%eax,%esi
00000581	jmp	0x000005dc
00000583	movl	%eax,%esi
00000585	jmp	0x000005b2
00000587	movl	%eax,%esi
00000589	jmp	0x000005a7
0000058b	movl	%eax,%esi
0000058d	jmp	0x0000059c
0000058f	movl	%eax,%esi
00000591	movl	0xd8(%ebp),%eax
00000594	movl	%eax,(%esp)
00000597	calll	CTextureReference::~CTextureReference()
0000059c	movl	0xdc(%ebp),%eax
0000059f	movl	%eax,(%esp)
000005a2	calll	CTextureReference::~CTextureReference()
000005a7	movl	0xe0(%ebp),%eax
000005aa	movl	%eax,(%esp)
000005ad	calll	CMaterialReference::~CMaterialReference()
000005b2	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000184(%edi)
000005b9	js	0x000005dc
000005bb	movl	0xe4(%ebp),%ebx
000005be	movl	(%ebx),%eax
000005c0	testl	%eax,%eax
000005c2	je	0x000005d2
000005c4	movl	%eax,(%esp)
000005c7	calll	_free
000005cc	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ebx)
000005d2	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x00000180(%edi)
000005dc	movl	0xd4(%ebp),%eax
000005df	movl	%eax,0x04(%esp)
000005e3	movl	%edi,(%esp)
000005e6	calll	vgui::Panel::~Panel()
000005eb	movl	%esi,(%esp)
000005ee	calll	__Unwind_Resume
000005f3	calll	std::terminate()
000005f8	nopl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::GetVMT() const:
00000600	pushl	%ebp
00000601	movl	%esp,%ebp
00000603	subl	$0x08,%esp
00000606	movl	$0x0000017c,%eax
0000060b	addl	0x08(%ebp),%eax
0000060e	movl	%eax,(%esp)
00000611	calll	CUtlString::operator char const*() const
00000616	addl	$0x08,%esp
00000619	popl	%ebp
0000061a	ret
0000061b	nopl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::DrawIn3DMode(bool):
00000620	movb	0x08(%esp),%al
00000624	movl	0x04(%esp),%ecx
00000628	movb	%al,0x000001bc(%ecx)
0000062e	ret
0000062f	nop
CVMTPreviewPanel::SetupLightingState():
00000630	pushl	%ebp
00000631	movl	%esp,%ebp
00000633	pushl	%edi
00000634	pushl	%esi
00000635	subl	$0x70,%esp
00000638	calll	0x0000063d
0000063d	popl	%eax
0000063e	xorps	%xmm0,%xmm0
00000641	movaps	%xmm0,0xd8(%ebp)
00000645	movaps	%xmm0,0xc8(%ebp)
00000649	movaps	%xmm0,0xb8(%ebp)
0000064d	movaps	%xmm0,0xa8(%ebp)
00000651	movaps	%xmm0,0x98(%ebp)
00000655	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xec(%ebp)
0000065c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe8(%ebp)
00000663	movl	$0x00000002,0x98(%ebp)
0000066a	movl	0x08(%ebp),%ecx
0000066d	movzbl	0x000001a4(%ecx),%edx
00000674	movzbl	0x000001a5(%ecx),%esi
0000067b	cvtsi2ss	%esi,%xmm1
0000067f	movss	%xmm1,0xa0(%ebp)
00000684	movzbl	0x000001a6(%ecx),%esi
0000068b	cvtsi2ss	%esi,%xmm2
0000068f	movss	%xmm2,0xa4(%ebp)
00000694	cvtsi2ss	%edx,%xmm4
00000698	movss	0x000001a8(%ecx),%xmm3
000006a0	divss	0x523b8-0x63d(%eax),%xmm3
000006a8	mulss	%xmm3,%xmm4
000006ac	movss	%xmm4,0x9c(%ebp)
000006b1	mulss	%xmm3,%xmm1
000006b5	movss	%xmm1,0xa0(%ebp)
000006ba	mulss	%xmm2,%xmm3
000006be	movss	%xmm3,0xa4(%ebp)
000006c3	movl	$0x3f800000,0xc8(%ebp)
000006ca	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xcc(%ebp)
000006d1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xd0(%ebp)
000006d8	movl	$0x00000001,0xe4(%ebp)
000006df	movss	0x00000198(%ecx),%xmm2
000006e7	movss	0x0000019c(%ecx),%xmm1
000006ef	movaps	%xmm1,%xmm3
000006f2	mulss	%xmm3,%xmm3
000006f6	movaps	%xmm2,%xmm5
000006f9	mulss	%xmm5,%xmm5
000006fd	addss	%xmm3,%xmm5
00000701	movss	0x000001a0(%ecx),%xmm3
00000709	movaps	%xmm3,%xmm4
0000070c	mulss	%xmm4,%xmm4
00000710	addss	%xmm5,%xmm4
00000714	addss	0x523bc-0x63d(%eax),%xmm4
0000071c	movss	%xmm4,%xmm0
00000720	rsqrtss	%xmm0,%xmm5
00000724	movaps	%xmm5,%xmm6
00000727	mulss	%xmm6,%xmm6
0000072b	mulss	%xmm4,%xmm6
0000072f	movss	0x523c0-0x63d(%eax),%xmm0
00000737	subss	%xmm6,%xmm0
0000073b	mulss	0x523c4-0x63d(%eax),%xmm0
00000743	mulss	%xmm5,%xmm0
00000747	mulss	%xmm0,%xmm2
0000074b	movss	%xmm2,0xb4(%ebp)
00000750	mulss	%xmm0,%xmm1
00000754	movss	%xmm1,0xb8(%ebp)
00000759	mulss	%xmm3,%xmm0
0000075d	movss	%xmm0,0xbc(%ebp)
00000762	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xd4(%ebp)
00000769	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xd8(%ebp)
00000770	movl	$0x3f800000,0xc4(%ebp)
00000777	calll	vgui::MaterialSystem()
0000077c	movl	(%eax),%ecx
0000077e	movl	%eax,(%esp)
00000781	call	*0x00000188(%ecx)
00000787	movl	%eax,%esi
00000789	testl	%esi,%esi
0000078b	je	0x00000797
0000078d	movl	(%esi),%eax
0000078f	movl	0x08(%eax),%eax
00000792	movl	%esi,(%esp)
00000795	call	*%eax
00000797	movl	(%esi),%eax
00000799	movl	0x3c(%eax),%eax
0000079c	leal	0x98(%ebp),%ecx
0000079f	movl	%ecx,0x08(%esp)
000007a3	movl	%esi,(%esp)
000007a6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
000007ae	call	*%eax
000007b0	movl	(%esi),%eax
000007b2	movl	0x0c(%eax),%eax
000007b5	movl	%esi,(%esp)
000007b8	call	*%eax
000007ba	movl	(%esi),%eax
000007bc	movl	%esi,(%esp)
000007bf	call	*0x04(%eax)
000007c2	addl	$0x70,%esp
000007c5	popl	%esi
000007c6	popl	%edi
000007c7	popl	%ebp
000007c8	ret
000007c9	movl	%eax,%edi
000007cb	movl	(%esi),%eax
000007cd	movl	0x04(%eax),%eax
000007d0	movl	%esi,(%esp)
000007d3	call	*%eax
000007d5	movl	%edi,(%esp)
000007d8	calll	__Unwind_Resume
000007dd	calll	std::terminate()
000007e2	movl	%eax,%edi
000007e4	movl	(%esi),%eax
000007e6	movl	0x04(%eax),%eax
000007e9	movl	%esi,(%esp)
000007ec	call	*%eax
000007ee	jmp	0x000007d5
000007f0	calll	std::terminate()
000007f5	movl	(%esi),%eax
000007f7	movl	0x04(%eax),%eax
000007fa	movl	%esi,(%esp)
000007fd	call	*%eax
000007ff	jmp	0x00000819
00000801	movl	%eax,%edi
00000803	movl	(%esi),%eax
00000805	movl	0x0c(%eax),%eax
00000808	movl	%esi,(%esp)
0000080b	call	*%eax
0000080d	movl	(%esi),%eax
0000080f	movl	0x04(%eax),%eax
00000812	movl	%esi,(%esp)
00000815	call	*%eax
00000817	jmp	0x000007d5
00000819	calll	std::terminate()
0000081e	calll	std::terminate()
00000823	nopl	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::RenderSphere(Vector const&, float, int, int):
00000830	pushl	%ebp
00000831	movl	%esp,%ebp
00000833	pushl	%ebx
00000834	pushl	%edi
00000835	pushl	%esi
00000836	subl	$0x000002bc,%esp
0000083c	calll	0x00000841
00000841	popl	%edi
00000842	calll	vgui::MaterialSystem()
00000847	movl	(%eax),%ecx
00000849	movl	%eax,(%esp)
0000084c	call	*0x00000188(%ecx)
00000852	movl	%eax,%esi
00000854	testl	%esi,%esi
00000856	je	0x00000862
00000858	movl	(%esi),%eax
0000085a	movl	0x08(%eax),%eax
0000085d	movl	%esi,(%esp)
00000860	call	*%eax
00000862	movl	%edi,0xfffffd5c(%ebp)
00000868	movl	(%esi),%eax
0000086a	movl	0x000000e0(%eax),%eax
00000870	movl	%esi,(%esp)
00000873	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
0000087b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00000883	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
0000088b	movl	$0x00000001,0x04(%esp)
00000893	call	*%eax
00000895	movl	%eax,%edi
00000897	movl	%esi,0xfffffd60(%ebp)
0000089d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
000008a7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
000008b1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000008bb	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000008c5	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffeec(%ebp)
000008cf	movl	$0xffffffff,0xfffffef0(%ebp)
000008d9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffef4(%ebp)
000008e3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
000008ea	movl	$0xffffffff,0xe4(%ebp)
000008f1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe8(%ebp)
000008f8	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
000008ff	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
00000906	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
0000090d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
00000914	movl	$0xffffffff,0xffffff48(%ebp)
0000091e	movl	%edi,0xfffffebc(%ebp)
00000924	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffec4(%ebp)
0000092b	movl	$0x00000003,0xfffffec0(%ebp)
00000935	movl	(%edi),%eax
00000937	movl	0x30(%eax),%eax
0000093a	movl	%edi,(%esp)
0000093d	movl	$0x00000003,0x04(%esp)
00000945	call	*%eax
00000947	movl	0x14(%ebp),%eax
0000094a	movl	0x18(%ebp),%ecx
0000094d	movl	%ecx,0xfffffd70(%ebp)
00000953	movl	%ecx,%esi
00000955	imull	%eax,%esi
00000958	leal	0xff(%ecx),%ecx
0000095b	movl	%ecx,0xfffffd74(%ebp)
00000961	leal	0x02(%eax,%eax),%ebx
00000965	imull	%ecx,%ebx
00000968	movl	0xfffffebc(%ebp),%eax
0000096e	movl	(%eax),%ecx
00000970	movl	0x4c(%ecx),%ecx
00000973	leal	0xfffffe08(%ebp),%edx
00000979	movl	%edx,0x0c(%esp)
0000097d	movl	%ebx,0x08(%esp)
00000981	movl	%esi,0x04(%esp)
00000985	movl	%eax,(%esp)
00000988	call	*%ecx
0000098a	leal	0x04(%edi),%eax
0000098d	testl	%edi,%edi
0000098f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),%ecx
00000994	cmovnel	%eax,%ecx
00000997	movl	%ecx,0xfffffed8(%ebp)
0000099d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000009a7	movl	%ebx,0xfffffedc(%ebp)
000009ad	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffef8(%ebp)
000009b4	movl	0xfffffea4(%ebp),%eax
000009ba	movl	%eax,0xfffffde0(%ebp)
000009c0	movl	%eax,0xfffffee4(%ebp)
000009c6	movl	0xfffffeac(%ebp),%eax
000009cc	movl	%eax,0xfffffec8(%ebp)
000009d2	movb	0xfffffeb8(%ebp),%al
000009d8	movb	%al,0xfffffed4(%ebp)
000009de	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000009e8	movl	0xffffff48(%ebp),%ebx
000009ee	movl	%edi,0xa0(%ebp)
000009f1	leal	0xfffffe08(%ebp),%eax
000009f7	movl	%eax,0x04(%esp)
000009fb	leal	0xfffffefc(%ebp),%eax
00000a01	movl	%eax,(%esp)
00000a04	movl	$0x000000a4,0x08(%esp)
00000a0c	calll	_memcpy
00000a11	movl	%esi,0xa8(%ebp)
00000a14	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
00000a1b	setne	%al
00000a1e	movzbl	%al,%eax
00000a21	addl	%eax,%eax
00000a23	movl	%eax,0xffffff4c(%ebp)
00000a29	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
00000a30	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa4(%ebp)
00000a34	cmpl	$0xff,%ebx
00000a37	je	0x00000a3f
00000a39	movl	%ebx,0xffffff48(%ebp)
00000a3f	cmpl	$0xff,0xe4(%ebp)
00000a43	jne	0x00000a5e
00000a45	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
00000a4c	movl	0xfffffea8(%ebp),%eax
00000a52	movl	%eax,0xe4(%ebp)
00000a55	movl	0xfffffde0(%ebp),%eax
00000a5b	movl	%eax,0xe8(%ebp)
00000a5e	movl	0x08(%ebp),%esi
00000a61	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00000a6b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
00000a72	movl	0xffffff50(%ebp),%eax
00000a78	movl	%eax,0xb4(%ebp)
00000a7b	movl	0xffffff5c(%ebp),%eax
00000a81	movl	%eax,0xb8(%ebp)
00000a84	movl	0xffffff68(%ebp),%eax
00000a8a	movl	%eax,0xbc(%ebp)
00000a8d	movl	0xffffff6c(%ebp),%eax
00000a93	movl	%eax,0xc0(%ebp)
00000a96	movl	0xffffff70(%ebp),%eax
00000a9c	movl	%eax,0xc4(%ebp)
00000a9f	movl	0xffffff74(%ebp),%eax
00000aa5	movl	%eax,0xc8(%ebp)
00000aa8	movl	0xffffff78(%ebp),%eax
00000aae	movl	%eax,0xcc(%ebp)
00000ab1	movl	0xffffff7c(%ebp),%eax
00000ab7	movl	%eax,0xd0(%ebp)
00000aba	movl	0x80(%ebp),%eax
00000abd	movl	%eax,0xd4(%ebp)
00000ac0	movl	0x84(%ebp),%eax
00000ac3	movl	%eax,0xd8(%ebp)
00000ac6	movl	0xffffff60(%ebp),%eax
00000acc	movl	%eax,0xdc(%ebp)
00000acf	movl	0x0000018c(%esi),%ecx
00000ad5	movl	(%ecx),%eax
00000ad7	movl	0x00000080(%eax),%eax
00000add	movl	%ecx,(%esp)
00000ae0	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00000ae8	call	*%eax
00000aea	movb	%al,0xfffffd93(%ebp)
00000af0	movl	0x0000018c(%esi),%ecx
00000af6	movl	(%ecx),%eax
00000af8	movl	0x00000080(%eax),%eax
00000afe	movl	%ecx,(%esp)
00000b01	movl	$0x00000003,0x04(%esp)
00000b09	call	*%eax
00000b0b	movb	%al,0xfffffd92(%ebp)
00000b11	movl	0x00000190(%esi),%eax
00000b17	movl	(%eax),%ecx
00000b19	movl	0x0c(%ecx),%ecx
00000b1c	movl	%eax,(%esp)
00000b1f	call	*%ecx
00000b21	movl	%edi,0xfffffd58(%ebp)
00000b27	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x18(%ebp)
00000b2b	movl	0xfffffd5c(%ebp),%edi
00000b31	movl	0x14(%ebp),%ecx
00000b34	jle	0x00001065
00000b3a	movss	0x10(%ebp),%xmm0
00000b3f	cvtsi2ss	%eax,%xmm1
00000b43	movss	0x523c8-0x841(%edi),%xmm2
00000b4b	movss	%xmm2,0xfffffdb4(%ebp)
00000b53	divss	%xmm1,%xmm2
00000b57	movss	%xmm2,0xfffffd8c(%ebp)
00000b5f	movss	0x523cc-0x841(%edi),%xmm1
00000b67	movss	%xmm1,0xfffffd88(%ebp)
00000b6f	subss	%xmm2,%xmm1
00000b73	subss	%xmm2,%xmm1
00000b77	movss	%xmm1,0xfffffd84(%ebp)
00000b7f	cvtss2sd	%xmm0,%xmm0
00000b83	movsd	%xmm0,0xfffffd68(%ebp)
00000b8b	cvtsi2ss	0xfffffd74(%ebp),%xmm0
00000b93	movss	%xmm0,0xfffffd64(%ebp)
00000b9b	leal	0xff(%ecx),%eax
00000b9e	movl	%eax,0xfffffd80(%ebp)
00000ba4	cvtsi2ss	%eax,%xmm0
00000ba8	movss	%xmm0,0xfffffd7c(%ebp)
00000bb0	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffd78(%ebp)
00000bba	jmp	0x00000e65
00000bbf	nop
00000bc0	pxor	%xmm1,%xmm1
00000bc4	movss	%xmm1,0xfffffdd8(%ebp)
00000bcc	movss	0xfffffd88(%ebp),%xmm4
00000bd4	movss	%xmm4,0xfffffda0(%ebp)
00000bdc	movaps	%xmm3,%xmm1
00000bdf	mulss	%xmm1,%xmm1
00000be3	addss	%xmm1,%xmm5
00000be7	addss	0xfffffdc0(%ebp),%xmm5
00000bef	addss	0xfffffdb0(%ebp),%xmm5
00000bf7	xorps	%xmm1,%xmm1
00000bfa	movss	%xmm5,%xmm1
00000bfe	rsqrtss	%xmm1,%xmm1
00000c02	movaps	%xmm1,%xmm4
00000c05	mulss	%xmm4,%xmm4
00000c09	mulss	%xmm5,%xmm4
00000c0d	subss	%xmm4,%xmm7
00000c11	mulss	0xfffffdb4(%ebp),%xmm7
00000c19	mulss	%xmm1,%xmm7
00000c1d	mulss	%xmm7,%xmm3
00000c21	movaps	%xmm3,%xmm1
00000c24	movss	0xfffffdcc(%ebp),%xmm4
00000c2c	mulss	%xmm4,%xmm1
00000c30	mulss	%xmm7,%xmm6
00000c34	movaps	%xmm6,%xmm5
00000c37	movss	0xfffffdc8(%ebp),%xmm2
00000c3f	mulss	%xmm2,%xmm5
00000c43	subss	%xmm1,%xmm5
00000c47	mulss	0xfffffdd0(%ebp),%xmm7
00000c4f	movaps	%xmm7,%xmm1
00000c52	mulss	%xmm4,%xmm1
00000c56	movaps	%xmm6,%xmm4
00000c59	mulss	%xmm0,%xmm4
00000c5d	subss	%xmm4,%xmm1
00000c61	movaps	%xmm7,%xmm4
00000c64	mulss	%xmm2,%xmm4
00000c68	movaps	%xmm3,%xmm2
00000c6b	mulss	%xmm0,%xmm2
00000c6f	subss	%xmm4,%xmm2
00000c73	movss	0x523d0-0x841(%edi),%xmm4
00000c7b	mulss	0xfffffde0(%ebp),%xmm4
00000c83	cvttss2si	%xmm4,%eax
00000c87	movl	0xb4(%ebp),%ecx
00000c8a	movss	0xfffffda4(%ebp),%xmm4
00000c92	movss	%xmm4,(%ecx)
00000c96	movss	0xfffffda8(%ebp),%xmm4
00000c9e	movss	%xmm4,0x04(%ecx)
00000ca3	movss	0xfffffdac(%ebp),%xmm4
00000cab	movss	%xmm4,0x08(%ecx)
00000cb0	movl	0xb8(%ebp),%ecx
00000cb3	movss	%xmm6,(%ecx)
00000cb7	movss	%xmm3,0x04(%ecx)
00000cbc	movss	%xmm7,0x08(%ecx)
00000cc1	movzbl	%al,%eax
00000cc4	orl	0xfffffd98(%ebp),%eax
00000cca	orl	0xfffffd94(%ebp),%eax
00000cd0	orl	0xfffffd9c(%ebp),%eax
00000cd6	movl	0xdc(%ebp),%ecx
00000cd9	movl	%eax,(%ecx)
00000cdb	movss	0xfffffde0(%ebp),%xmm3
00000ce3	addss	%xmm3,%xmm3
00000ce7	movl	0xbc(%ebp),%eax
00000cea	movss	%xmm3,(%eax)
00000cee	movss	0xfffffdd4(%ebp),%xmm3
00000cf6	movss	%xmm3,0x04(%eax)
00000cfb	movl	0xc0(%ebp),%eax
00000cfe	movss	0xfffffdc4(%ebp),%xmm4
00000d06	movss	%xmm4,(%eax)
00000d0a	movss	0xfffffdcc(%ebp),%xmm4
00000d12	movss	%xmm3,0x04(%eax)
00000d17	movss	0xfffffdc8(%ebp),%xmm3
00000d1f	movl	0xc4(%ebp),%eax
00000d22	movss	0xfffffda0(%ebp),%xmm6
00000d2a	movss	%xmm6,(%eax)
00000d2e	movss	0xfffffdd8(%ebp),%xmm6
00000d36	movss	%xmm6,0x04(%eax)
00000d3b	movl	0xffffff34(%ebp),%eax
00000d41	movl	0x88(%ebp),%ecx
00000d44	imull	0xb0(%ebp),%eax
00000d48	movss	%xmm4,(%ecx,%eax)
00000d4d	movss	%xmm3,0x04(%ecx,%eax)
00000d53	movss	%xmm0,0x08(%ecx,%eax)
00000d59	movl	0xffffff38(%ebp),%eax
00000d5f	movl	0x8c(%ebp),%ecx
00000d62	imull	0xb0(%ebp),%eax
00000d66	movss	%xmm2,(%ecx,%eax)
00000d6b	movss	%xmm1,0x04(%ecx,%eax)
00000d71	movss	%xmm5,0x08(%ecx,%eax)
00000d77	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
00000d7e	jle	0x00000d97
00000d80	movl	0xffffff00(%ebp),%eax
00000d86	movl	0xffffff54(%ebp),%ecx
00000d8c	imull	0xb0(%ebp),%eax
00000d90	movl	$0x3f800000,(%ecx,%eax)
00000d97	movl	0xffffff04(%ebp),%eax
00000d9d	movl	0xffffff58(%ebp),%ecx
00000da3	imull	0xb0(%ebp),%eax
00000da7	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x02(%eax,%ecx)
00000dac	movl	0xffffff40(%ebp),%eax
00000db2	movl	0x94(%ebp),%ecx
00000db5	imull	0xb0(%ebp),%eax
00000db9	movss	%xmm4,(%ecx,%eax)
00000dbe	movss	%xmm3,0x04(%ecx,%eax)
00000dc4	movss	%xmm0,0x08(%ecx,%eax)
00000dca	movl	$0x3f800000,0x0c(%ecx,%eax)
00000dd2	movl	0xb0(%ebp),%eax
00000dd5	incl	%eax
00000dd6	movl	%eax,0xb0(%ebp)
00000dd9	cmpl	0xac(%ebp),%eax
00000ddc	jle	0x00000de1
00000dde	movl	%eax,0xac(%ebp)
00000de1	movl	0xfffffefc(%ebp),%eax
00000de7	addl	%eax,0xb4(%ebp)
00000dea	movl	0xffffff08(%ebp),%eax
00000df0	addl	%eax,0xb8(%ebp)
00000df3	movl	0xffffff0c(%ebp),%eax
00000df9	addl	%eax,0xdc(%ebp)
00000dfc	movl	0xffffff14(%ebp),%eax
00000e02	addl	%eax,0xbc(%ebp)
00000e05	movl	0xffffff18(%ebp),%eax
00000e0b	addl	%eax,0xc0(%ebp)
00000e0e	movl	0xffffff1c(%ebp),%eax
00000e14	addl	%eax,0xc4(%ebp)
00000e17	movl	0xffffff20(%ebp),%eax
00000e1d	addl	%eax,0xc8(%ebp)
00000e20	movl	0xffffff24(%ebp),%eax
00000e26	addl	%eax,0xcc(%ebp)
00000e29	movl	0xffffff28(%ebp),%eax
00000e2f	addl	%eax,0xd0(%ebp)
00000e32	movl	0xffffff2c(%ebp),%eax
00000e38	addl	%eax,0xd4(%ebp)
00000e3b	movl	0xffffff30(%ebp),%eax
00000e41	addl	%eax,0xd8(%ebp)
00000e44	incl	%ebx
00000e45	movl	%esi,%ecx
00000e47	cmpl	%ebx,%ecx
00000e49	jne	0x00000f50
00000e4f	movl	0xfffffd78(%ebp),%eax
00000e55	incl	%eax
00000e56	movl	%eax,0xfffffd78(%ebp)
00000e5c	cmpl	0x18(%ebp),%eax
00000e5f	je	0x00001065
00000e65	testl	%ecx,%ecx
00000e67	jle	0x00000e4f
00000e69	cvtsi2ss	0xfffffd78(%ebp),%xmm0
00000e71	divss	0xfffffd64(%ebp),%xmm0
00000e79	movss	%xmm0,0xfffffdd4(%ebp)
00000e81	cvtss2sd	%xmm0,%xmm0
00000e85	mulsd	0x523f8-0x841(%edi),%xmm0
00000e8d	cvtsd2ss	%xmm0,%xmm0
00000e91	cvtss2sd	%xmm0,%xmm0
00000e95	movsd	%xmm0,0xfffffde0(%ebp)
00000e9d	movsd	%xmm0,(%esp)
00000ea2	movl	%ecx,%esi
00000ea4	calll	_cos
00000ea9	movsd	0xfffffde0(%ebp),%xmm0
00000eb1	movsd	%xmm0,(%esp)
00000eb6	fstpl	0xfffffe00(%ebp)
00000ebc	calll	_sin
00000ec1	movl	%esi,%ecx
00000ec3	fstpl	0xfffffdf8(%ebp)
00000ec9	movss	0x523d0-0x841(%edi),%xmm0
00000ed1	mulss	0xfffffdd4(%ebp),%xmm0
00000ed9	cvttss2si	%xmm0,%eax
00000edd	movzbl	%al,%eax
00000ee0	movl	%eax,%edx
00000ee2	shll	$0x18,%edx
00000ee5	movl	%edx,0xfffffd98(%ebp)
00000eeb	movl	%eax,%edx
00000eed	shll	$0x10,%edx
00000ef0	movl	%edx,0xfffffd94(%ebp)
00000ef6	shll	$0x08,%eax
00000ef9	movl	%eax,0xfffffd9c(%ebp)
00000eff	movsd	0xfffffe00(%ebp),%xmm0
00000f07	movsd	0xfffffd68(%ebp),%xmm1
00000f0f	mulsd	%xmm1,%xmm0
00000f13	cvtsd2ss	%xmm0,%xmm0
00000f17	movss	%xmm0,0xfffffdd0(%ebp)
00000f1f	mulss	%xmm0,%xmm0
00000f23	movss	%xmm0,0xfffffdc0(%ebp)
00000f2b	movsd	0xfffffdf8(%ebp),%xmm0
00000f33	mulsd	%xmm1,%xmm0
00000f37	movsd	%xmm0,0xfffffdb8(%ebp)
00000f3f	xorl	%ebx,%ebx
00000f41	nopl	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
00000f50	movl	%ecx,%esi
00000f52	cvtsi2ss	%ebx,%xmm1
00000f56	divss	0xfffffd7c(%ebp),%xmm1
00000f5e	pxor	%xmm0,%xmm0
00000f62	cmpl	%ebx,0xfffffd80(%ebp)
00000f68	je	0x00000f7e
00000f6a	cvtss2sd	%xmm1,%xmm0
00000f6e	mulsd	0x52400-0x841(%edi),%xmm0
00000f76	cvtsd2ss	%xmm0,%xmm0
00000f7a	cvtss2sd	%xmm0,%xmm0
00000f7e	movsd	%xmm0,0xfffffdd8(%ebp)
00000f86	movss	%xmm1,0xfffffde0(%ebp)
00000f8e	movsd	%xmm0,(%esp)
00000f93	calll	_sin
00000f98	movsd	0xfffffdd8(%ebp),%xmm0
00000fa0	movsd	%xmm0,(%esp)
00000fa5	fstpl	0xfffffdf0(%ebp)
00000fab	calll	_cos
00000fb0	fstpl	0xfffffde8(%ebp)
00000fb6	movsd	0xfffffde8(%ebp),%xmm0
00000fbe	mulsd	0xfffffdb8(%ebp),%xmm0
00000fc6	cvtsd2ss	%xmm0,%xmm4
00000fca	movaps	%xmm4,%xmm5
00000fcd	mulss	%xmm5,%xmm5
00000fd1	movss	0xfffffdc0(%ebp),%xmm1
00000fd9	addss	%xmm5,%xmm1
00000fdd	pxor	%xmm6,%xmm6
00000fe1	addss	%xmm6,%xmm1
00000fe5	movss	0x523d4-0x841(%edi),%xmm0
00000fed	movss	%xmm0,0xfffffdb0(%ebp)
00000ff5	addss	%xmm0,%xmm1
00000ff9	xorps	%xmm0,%xmm0
00000ffc	movss	%xmm1,%xmm0
00001000	rsqrtss	%xmm0,%xmm2
00001004	movaps	%xmm2,%xmm3
00001007	mulss	%xmm3,%xmm3
0000100b	mulss	%xmm1,%xmm3
0000100f	movss	0x523d8-0x841(%edi),%xmm7
00001017	movaps	%xmm7,%xmm0
0000101a	subss	%xmm3,%xmm0
0000101e	mulss	0xfffffdb4(%ebp),%xmm0
00001026	mulss	%xmm2,%xmm0
0000102a	mulss	%xmm0,%xmm1
0000102e	ucomiss	%xmm6,%xmm1
00001031	setnp	%cl
00001034	sete	%al
00001037	testb	%cl,%al
00001039	je	0x000011cd
0000103f	movss	0x523dc-0x841(%edi),%xmm1
00001047	jmp	0x000011d9
0000104c	movl	%eax,%edi
0000104e	movl	(%esi),%eax
00001050	movl	0x04(%eax),%eax
00001053	movl	%esi,(%esp)
00001056	call	*%eax
00001058	movl	%edi,(%esp)
0000105b	calll	__Unwind_Resume
00001060	calll	std::terminate()
00001065	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffd74(%ebp)
0000106c	jle	0x00001194
00001072	leal	0xff(%ecx),%edi
00001075	addl	$0xfe,0xfffffd70(%ebp)
0000107c	xorl	%esi,%esi
0000107e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffdd8(%ebp)
00001088	xorl	%eax,%eax
0000108a	nopw	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
00001090	movl	%edi,0xfffffde0(%ebp)
00001096	movl	%eax,0xfffffdd4(%ebp)
0000109c	testl	%ecx,%ecx
0000109e	jle	0x00001112
000010a0	xorl	%ebx,%ebx
000010a2	movl	0xfffffee8(%ebp),%edx
000010a8	movl	0xfffffdd8(%ebp),%ecx
000010ae	nop
000010b0	movl	0xfffffee4(%ebp),%esi
000010b6	addl	%ecx,%esi
000010b8	movl	0xfffffec8(%ebp),%edi
000010be	movw	%si,(%edi,%edx,2)
000010c2	movzbl	0xfffffed4(%ebp),%edx
000010c9	addl	0xfffffee8(%ebp),%edx
000010cf	movl	%edx,0xfffffee8(%ebp)
000010d5	movl	0x14(%ebp),%eax
000010d8	leal	(%eax,%ecx),%esi
000010db	addl	0xfffffee4(%ebp),%esi
000010e1	movl	0xfffffec8(%ebp),%edi
000010e7	movw	%si,(%edi,%edx,2)
000010eb	movl	0xfffffde0(%ebp),%edi
000010f1	movzbl	0xfffffed4(%ebp),%edx
000010f8	addl	0xfffffee8(%ebp),%edx
000010fe	movl	%edx,0xfffffee8(%ebp)
00001104	movl	%edx,0xfffffee0(%ebp)
0000110a	incl	%ecx
0000110b	incl	%ebx
0000110c	cmpl	%ebx,%eax
0000110e	movl	%edi,%esi
00001110	jne	0x000010b0
00001112	movl	0xfffffdd4(%ebp),%eax
00001118	cmpl	0xfffffd70(%ebp),%eax
0000111e	jge	0x0000117c
00001120	leal	0x01(%esi),%ecx
00001123	addl	0xfffffee4(%ebp),%ecx
00001129	movl	0xfffffec8(%ebp),%edx
0000112f	movl	0xfffffee8(%ebp),%ebx
00001135	movw	%cx,(%edx,%ebx,2)
00001139	movzbl	0xfffffed4(%ebp),%ecx
00001140	addl	0xfffffee8(%ebp),%ecx
00001146	movl	%ecx,0xfffffee8(%ebp)
0000114c	movl	0x14(%ebp),%edx
0000114f	leal	0x01(%esi,%edx),%edx
00001153	addl	0xfffffee4(%ebp),%edx
00001159	movl	0xfffffec8(%ebp),%ebx
0000115f	movw	%dx,(%ebx,%ecx,2)
00001163	movzbl	0xfffffed4(%ebp),%ecx
0000116a	addl	0xfffffee8(%ebp),%ecx
00001170	movl	%ecx,0xfffffee8(%ebp)
00001176	movl	%ecx,0xfffffee0(%ebp)
0000117c	movl	0x14(%ebp),%ecx
0000117f	addl	%ecx,0xfffffdd8(%ebp)
00001185	addl	%ecx,%edi
00001187	incl	%eax
00001188	cmpl	0xfffffd74(%ebp),%eax
0000118e	jne	0x00001090
00001194	testb	$0x01,0xfffffec4(%ebp)
0000119b	movl	0xfffffd58(%ebp),%edi
000011a1	je	0x00001307
000011a7	movl	0xfffffec0(%ebp),%eax
000011ad	movl	0xac(%ebp),%edx
000011b0	leal	0xfc(%eax),%esi
000011b3	cmpl	$0x04,%esi
000011b6	ja	0x000012ef
000011bc	xorl	%ecx,%ecx
000011be	movl	0xfffffd5c(%ebp),%ebx
000011c4	addl	0x00000bdf(%ebx,%esi,4),%ebx
000011cb	jmp	*%ebx
000011cd	movss	0xfffffdd0(%ebp),%xmm1
000011d5	mulss	%xmm0,%xmm1
000011d9	movss	%xmm1,0xfffffdcc(%ebp)
000011e1	movsd	0xfffffdf0(%ebp),%xmm1
000011e9	mulsd	0xfffffdb8(%ebp),%xmm1
000011f1	andb	%cl,%al
000011f3	pxor	%xmm2,%xmm2
000011f7	jne	0x00001208
000011f9	movss	0x52420-0x841(%edi),%xmm2
00001201	xorps	%xmm4,%xmm2
00001204	mulss	%xmm0,%xmm2
00001208	movss	%xmm2,0xfffffdc8(%ebp)
00001210	testb	%al,%al
00001212	je	0x0000121a
00001214	pxor	%xmm0,%xmm0
00001218	jmp	0x0000121e
0000121a	mulss	%xmm6,%xmm0
0000121e	cvtsd2ss	%xmm1,%xmm3
00001222	movl	0x0c(%ebp),%eax
00001225	movss	0x08(%eax),%xmm1
0000122a	addss	0xfffffdd0(%ebp),%xmm1
00001232	movss	%xmm1,0xfffffdac(%ebp)
0000123a	movss	0x04(%eax),%xmm1
0000123f	addss	%xmm3,%xmm1
00001243	movss	%xmm1,0xfffffda8(%ebp)
0000124b	movss	(%eax),%xmm1
0000124f	addss	%xmm4,%xmm1
00001253	movss	%xmm1,0xfffffda4(%ebp)
0000125b	movaps	%xmm4,%xmm6
0000125e	cmpb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffd93(%ebp)
00001265	movss	0xfffffde0(%ebp),%xmm1
0000126d	movss	%xmm1,0xfffffdc4(%ebp)
00001275	movaps	%xmm1,%xmm4
00001278	movss	0xfffffdd4(%ebp),%xmm2
00001280	movss	%xmm2,0xfffffdd8(%ebp)
00001288	je	0x00000bd4
0000128e	movss	0xfffffd84(%ebp),%xmm2
00001296	mulss	%xmm1,%xmm2
0000129a	addss	0xfffffd8c(%ebp),%xmm2
000012a2	movss	%xmm2,0xfffffdc4(%ebp)
000012aa	cmpb	$0x01,0xfffffd92(%ebp)
000012b1	je	0x00000bc0
000012b7	movaps	%xmm1,%xmm4
000012ba	movss	0xfffffdd4(%ebp),%xmm1
000012c2	movss	%xmm1,0xfffffdd8(%ebp)
000012ca	jmp	0x00000bd4
000012cf	imull	$0x06,%edx,%edx
000012d2	movl	%edx,%ecx
000012d4	sarl	$0x1f,%ecx
000012d7	shrl	$0x1e,%ecx
000012da	addl	%edx,%ecx
000012dc	sarl	$0x02,%ecx
000012df	jmp	0x000012f1
000012e1	leal	0xfa(%edx,%edx,2),%ecx
000012e5	jmp	0x000012f1
000012e7	leal	0xfe(%edx,%edx),%ecx
000012eb	jmp	0x000012f1
000012ed	addl	%edx,%edx
000012ef	movl	%edx,%ecx
000012f1	movl	%ecx,0x08(%esp)
000012f5	movl	%eax,0x04(%esp)
000012f9	leal	0xfffffec8(%ebp),%eax
000012ff	movl	%eax,(%esp)
00001302	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
00001307	movl	0xfffffebc(%ebp),%eax
0000130d	movl	0xfffffee0(%ebp),%edx
00001313	movl	(%eax),%ecx
00001315	movl	0x58(%ecx),%ecx
00001318	movl	0xac(%ebp),%esi
0000131b	leal	0xfffffe08(%ebp),%ebx
00001321	movl	%ebx,0x0c(%esp)
00001325	movl	%edx,0x08(%esp)
00001329	movl	%esi,0x04(%esp)
0000132d	movl	%eax,(%esp)
00001330	call	*%ecx
00001332	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
0000133c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
00001346	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
0000134d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
00001354	movl	$0xffffffff,0xffffff48(%ebp)
0000135e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffebc(%ebp)
00001368	movl	(%edi),%eax
0000136a	movl	0x34(%eax),%eax
0000136d	movl	%edi,(%esp)
00001370	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001378	movl	$0xffffffff,0x04(%esp)
00001380	call	*%eax
00001382	leal	0xfffffe08(%ebp),%eax
00001388	movl	%eax,(%esp)
0000138b	movl	0xfffffd60(%ebp),%esi
00001391	calll	CMeshBuilder::~CMeshBuilder()
00001396	testl	%esi,%esi
00001398	je	0x000013ac
0000139a	movl	(%esi),%eax
0000139c	movl	0x0c(%eax),%eax
0000139f	movl	%esi,(%esp)
000013a2	call	*%eax
000013a4	movl	(%esi),%eax
000013a6	movl	%esi,(%esp)
000013a9	call	*0x04(%eax)
000013ac	addl	$0x000002bc,%esp
000013b2	popl	%esi
000013b3	popl	%edi
000013b4	popl	%ebx
000013b5	popl	%ebp
000013b6	ret
000013b7	movl	%eax,%edi
000013b9	movl	(%esi),%eax
000013bb	movl	0x04(%eax),%eax
000013be	movl	%esi,(%esp)
000013c1	call	*%eax
000013c3	jmp	0x00001058
000013c8	calll	std::terminate()
000013cd	movl	%eax,%edi
000013cf	testl	%esi,%esi
000013d1	je	0x00001058
000013d7	movl	(%esi),%eax
000013d9	movl	0x0c(%eax),%eax
000013dc	movl	%esi,(%esp)
000013df	call	*%eax
000013e1	movl	(%esi),%eax
000013e3	movl	0x04(%eax),%eax
000013e6	movl	%esi,(%esp)
000013e9	call	*%eax
000013eb	jmp	0x00001058
000013f0	calll	std::terminate()
000013f5	movl	%eax,%edi
000013f7	leal	0xfffffe08(%ebp),%eax
000013fd	movl	%eax,(%esp)
00001400	calll	CMeshBuilder::~CMeshBuilder()
00001405	movl	0xfffffd60(%ebp),%esi
0000140b	jmp	0x000013cf
0000140d	movl	(%esi),%eax
0000140f	movl	0x04(%eax),%eax
00001412	movl	%esi,(%esp)
00001415	call	*%eax
00001417	jmp	0x000013f0
00001419	calll	std::terminate()
0000141e	nop
00001420	cmpsb	(%esi),(%edi)
00001421	orb	(%eax),%al
00001423	addb	%ch,0x0aa00000(%edx,%ecx)
0000142a	addb	%al,(%eax)
0000142c	mov	(%edx),%cs
0000142e	addb	%al,(%eax)
00001430	movb	$0x0a,%al
00001432	addb	%al,(%eax)
00001434	nopw	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::RenderSpriteCard(Vector const&, float):
00001440	pushl	%ebp
00001441	movl	%esp,%ebp
00001443	pushl	%ebx
00001444	pushl	%edi
00001445	pushl	%esi
00001446	subl	$0x0000020c,%esp
0000144c	calll	0x00001451
00001451	popl	%eax
00001452	movl	%eax,0xfffffe00(%ebp)
00001458	calll	vgui::MaterialSystem()
0000145d	movl	(%eax),%ecx
0000145f	movl	%eax,(%esp)
00001462	call	*0x00000188(%ecx)
00001468	movl	%eax,%esi
0000146a	testl	%esi,%esi
0000146c	je	0x00001478
0000146e	movl	(%esi),%eax
00001470	movl	0x08(%eax),%eax
00001473	movl	%esi,(%esp)
00001476	call	*%eax
00001478	movl	(%esi),%eax
0000147a	movl	0x000000e0(%eax),%eax
00001480	movl	%esi,(%esp)
00001483	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
0000148b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00001493	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
0000149b	movl	$0x00000001,0x04(%esp)
000014a3	call	*%eax
000014a5	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
000014af	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
000014b9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000014c3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000014cd	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffeec(%ebp)
000014d7	movl	$0xffffffff,0xfffffef0(%ebp)
000014e1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffef4(%ebp)
000014eb	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
000014f2	movl	$0xffffffff,0xe4(%ebp)
000014f9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe8(%ebp)
00001500	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
00001507	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
0000150e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001515	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
0000151c	movl	$0xffffffff,0xffffff48(%ebp)
00001526	movl	%eax,0xfffffebc(%ebp)
0000152c	movb	$0x01,0xfffffec4(%ebp)
00001533	movl	$0x00000007,0xfffffec0(%ebp)
0000153d	movl	(%eax),%ecx
0000153f	movl	0x30(%ecx),%ecx
00001542	movl	%eax,(%esp)
00001545	movl	%eax,%edi
00001547	movl	$0x00000002,0x04(%esp)
0000154f	call	*%ecx
00001551	movl	0xfffffebc(%ebp),%ecx
00001557	movl	(%ecx),%eax
00001559	movl	0x4c(%eax),%eax
0000155c	leal	0xfffffe08(%ebp),%edx
00001562	movl	%edx,0x0c(%esp)
00001566	movl	%ecx,(%esp)
00001569	movl	$0x00000006,0x08(%esp)
00001571	movl	$0x00000004,0x04(%esp)
00001579	call	*%eax
0000157b	movl	%edi,%edx
0000157d	movl	%edx,0xfffffe04(%ebp)
00001583	leal	0x04(%edx),%eax
00001586	testl	%edx,%edx
00001588	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),%ecx
0000158d	cmovnel	%eax,%ecx
00001590	movl	%ecx,0xfffffed8(%ebp)
00001596	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000015a0	movl	$0x00000006,0xfffffedc(%ebp)
000015aa	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffef8(%ebp)
000015b1	movl	0xfffffea4(%ebp),%ebx
000015b7	movl	%ebx,0xfffffee4(%ebp)
000015bd	movl	0xfffffeac(%ebp),%eax
000015c3	movl	%eax,0xfffffec8(%ebp)
000015c9	movb	0xfffffeb8(%ebp),%al
000015cf	movb	%al,0xfffffed4(%ebp)
000015d5	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000015df	movl	0xffffff48(%ebp),%edi
000015e5	movl	%edx,0xa0(%ebp)
000015e8	leal	0xfffffe08(%ebp),%eax
000015ee	movl	%eax,0x04(%esp)
000015f2	leal	0xfffffefc(%ebp),%eax
000015f8	movl	%eax,(%esp)
000015fb	movl	$0x000000a4,0x08(%esp)
00001603	calll	_memcpy
00001608	movl	$0x00000004,0xa8(%ebp)
0000160f	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
00001616	setne	%al
00001619	movzbl	%al,%eax
0000161c	addl	%eax,%eax
0000161e	movl	%eax,0xffffff4c(%ebp)
00001624	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
0000162b	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa4(%ebp)
0000162f	cmpl	$0xff,%edi
00001632	je	0x0000163a
00001634	movl	%edi,0xffffff48(%ebp)
0000163a	cmpl	$0xff,0xe4(%ebp)
0000163e	jne	0x00001653
00001640	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
00001647	movl	0xfffffea8(%ebp),%eax
0000164d	movl	%eax,0xe4(%ebp)
00001650	movl	%ebx,0xe8(%ebp)
00001653	movss	0x10(%ebp),%xmm0
00001658	movl	0x0c(%ebp),%eax
0000165b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00001665	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
0000166c	movl	0xffffff50(%ebp),%ecx
00001672	movl	%ecx,0xb4(%ebp)
00001675	movl	0xffffff5c(%ebp),%edx
0000167b	movl	%edx,0xb8(%ebp)
0000167e	movl	0xffffff68(%ebp),%edx
00001684	movl	%edx,0xbc(%ebp)
00001687	movl	0xffffff6c(%ebp),%edx
0000168d	movl	%edx,0xc0(%ebp)
00001690	movl	0xffffff70(%ebp),%edx
00001696	movl	%edx,0xc4(%ebp)
00001699	movl	0xffffff74(%ebp),%edx
0000169f	movl	%edx,0xc8(%ebp)
000016a2	movl	0xffffff78(%ebp),%edx
000016a8	movl	%edx,0xcc(%ebp)
000016ab	movl	0xffffff7c(%ebp),%edx
000016b1	movl	%edx,0xd0(%ebp)
000016b4	movl	0x80(%ebp),%edx
000016b7	movl	%edx,0xd4(%ebp)
000016ba	movl	0x84(%ebp),%edx
000016bd	movl	%edx,0xd8(%ebp)
000016c0	movl	0xffffff60(%ebp),%edx
000016c6	movl	%edx,0xdc(%ebp)
000016c9	movss	(%eax),%xmm1
000016cd	movss	%xmm1,(%ecx)
000016d1	movss	0x04(%eax),%xmm1
000016d6	movss	%xmm1,0x04(%ecx)
000016db	movss	0x08(%eax),%xmm1
000016e0	movss	%xmm1,0x08(%ecx)
000016e5	movl	0xdc(%ebp),%ecx
000016e8	movl	$0xffffffff,(%ecx)
000016ee	movl	0xbc(%ebp),%ecx
000016f1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
000016f7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
000016fe	movl	$0x3f800000,0x08(%ecx)
00001705	movl	$0x3f800000,0x0c(%ecx)
0000170c	movl	0xc0(%ebp),%ecx
0000170f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001715	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000171c	movl	$0x3f800000,0x08(%ecx)
00001723	movl	$0x3f800000,0x0c(%ecx)
0000172a	movl	0xc4(%ebp),%ecx
0000172d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001733	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000173a	movss	%xmm0,0x08(%ecx)
0000173f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%ecx)
00001746	movl	0xc8(%ebp),%ecx
00001749	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
0000174f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
00001756	movl	0xb0(%ebp),%ecx
00001759	incl	%ecx
0000175a	movl	%ecx,0xb0(%ebp)
0000175d	cmpl	0xac(%ebp),%ecx
00001760	jle	0x00001765
00001762	movl	%ecx,0xac(%ebp)
00001765	movl	0xfffffefc(%ebp),%ecx
0000176b	movl	0xb4(%ebp),%edx
0000176e	leal	(%edx,%ecx),%edi
00001771	movl	%edi,0xb4(%ebp)
00001774	movl	0xffffff08(%ebp),%edi
0000177a	addl	%edi,0xb8(%ebp)
0000177d	movl	0xffffff0c(%ebp),%edi
00001783	addl	%edi,0xdc(%ebp)
00001786	movl	0xffffff14(%ebp),%edi
0000178c	addl	%edi,0xbc(%ebp)
0000178f	movl	0xffffff18(%ebp),%edi
00001795	addl	%edi,0xc0(%ebp)
00001798	movl	0xffffff1c(%ebp),%edi
0000179e	addl	%edi,0xc4(%ebp)
000017a1	movl	0xffffff20(%ebp),%edi
000017a7	addl	%edi,0xc8(%ebp)
000017aa	movl	0xffffff24(%ebp),%edi
000017b0	addl	%edi,0xcc(%ebp)
000017b3	movl	0xffffff28(%ebp),%edi
000017b9	addl	%edi,0xd0(%ebp)
000017bc	movl	0xffffff2c(%ebp),%edi
000017c2	addl	%edi,0xd4(%ebp)
000017c5	movl	0xffffff30(%ebp),%edi
000017cb	addl	%edi,0xd8(%ebp)
000017ce	movss	(%eax),%xmm1
000017d2	movss	%xmm1,(%edx,%ecx)
000017d7	movss	0x04(%eax),%xmm1
000017dc	movss	%xmm1,0x04(%edx,%ecx)
000017e2	movss	0x08(%eax),%xmm1
000017e7	movss	%xmm1,0x08(%edx,%ecx)
000017ed	movl	0xdc(%ebp),%ecx
000017f0	movl	$0xffffffff,(%ecx)
000017f6	movl	0xbc(%ebp),%ecx
000017f9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
000017ff	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
00001806	movl	$0x3f800000,0x08(%ecx)
0000180d	movl	$0x3f800000,0x0c(%ecx)
00001814	movl	0xc0(%ebp),%ecx
00001817	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
0000181d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
00001824	movl	$0x3f800000,0x08(%ecx)
0000182b	movl	$0x3f800000,0x0c(%ecx)
00001832	movl	0xc4(%ebp),%ecx
00001835	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
0000183b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
00001842	movss	%xmm0,0x08(%ecx)
00001847	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%ecx)
0000184e	movl	0xc8(%ebp),%ecx
00001851	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001857	movl	$0x3f800000,0x04(%ecx)
0000185e	movl	0xb0(%ebp),%ecx
00001861	incl	%ecx
00001862	movl	%ecx,0xb0(%ebp)
00001865	cmpl	0xac(%ebp),%ecx
00001868	jle	0x0000186d
0000186a	movl	%ecx,0xac(%ebp)
0000186d	movl	0xfffffefc(%ebp),%ecx
00001873	movl	0xb4(%ebp),%edx
00001876	leal	(%edx,%ecx),%edi
00001879	movl	%edi,0xb4(%ebp)
0000187c	movl	0xffffff08(%ebp),%edi
00001882	addl	%edi,0xb8(%ebp)
00001885	movl	0xffffff0c(%ebp),%edi
0000188b	addl	%edi,0xdc(%ebp)
0000188e	movl	0xffffff14(%ebp),%edi
00001894	addl	%edi,0xbc(%ebp)
00001897	movl	0xffffff18(%ebp),%edi
0000189d	addl	%edi,0xc0(%ebp)
000018a0	movl	0xffffff1c(%ebp),%edi
000018a6	addl	%edi,0xc4(%ebp)
000018a9	movl	0xffffff20(%ebp),%edi
000018af	addl	%edi,0xc8(%ebp)
000018b2	movl	0xffffff24(%ebp),%edi
000018b8	addl	%edi,0xcc(%ebp)
000018bb	movl	0xffffff28(%ebp),%edi
000018c1	addl	%edi,0xd0(%ebp)
000018c4	movl	0xffffff2c(%ebp),%edi
000018ca	addl	%edi,0xd4(%ebp)
000018cd	movl	0xffffff30(%ebp),%edi
000018d3	addl	%edi,0xd8(%ebp)
000018d6	movss	(%eax),%xmm1
000018da	movss	%xmm1,(%edx,%ecx)
000018df	movss	0x04(%eax),%xmm1
000018e4	movss	%xmm1,0x04(%edx,%ecx)
000018ea	movss	0x08(%eax),%xmm1
000018ef	movss	%xmm1,0x08(%edx,%ecx)
000018f5	movl	0xdc(%ebp),%ecx
000018f8	movl	$0xffffffff,(%ecx)
000018fe	movl	0xbc(%ebp),%ecx
00001901	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001907	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000190e	movl	$0x3f800000,0x08(%ecx)
00001915	movl	$0x3f800000,0x0c(%ecx)
0000191c	movl	0xc0(%ebp),%ecx
0000191f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001925	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000192c	movl	$0x3f800000,0x08(%ecx)
00001933	movl	$0x3f800000,0x0c(%ecx)
0000193a	movl	0xc4(%ebp),%ecx
0000193d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00001943	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000194a	movss	%xmm0,0x08(%ecx)
0000194f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%ecx)
00001956	movl	0xc8(%ebp),%ecx
00001959	movl	$0x3f800000,(%ecx)
0000195f	movl	$0x3f800000,0x04(%ecx)
00001966	movl	0xb0(%ebp),%ecx
00001969	incl	%ecx
0000196a	movl	%ecx,0xb0(%ebp)
0000196d	cmpl	0xac(%ebp),%ecx
00001970	jle	0x00001975
00001972	movl	%ecx,0xac(%ebp)
00001975	movl	0xfffffefc(%ebp),%ecx
0000197b	movl	0xb4(%ebp),%edx
0000197e	leal	(%edx,%ecx),%edi
00001981	movl	%edi,0xb4(%ebp)
00001984	movl	0xffffff08(%ebp),%edi
0000198a	addl	%edi,0xb8(%ebp)
0000198d	movl	0xffffff0c(%ebp),%edi
00001993	addl	%edi,0xdc(%ebp)
00001996	movl	0xffffff14(%ebp),%edi
0000199c	addl	%edi,0xbc(%ebp)
0000199f	movl	0xffffff18(%ebp),%edi
000019a5	addl	%edi,0xc0(%ebp)
000019a8	movl	0xffffff1c(%ebp),%edi
000019ae	addl	%edi,0xc4(%ebp)
000019b1	movl	0xffffff20(%ebp),%edi
000019b7	addl	%edi,0xc8(%ebp)
000019ba	movl	0xffffff24(%ebp),%edi
000019c0	addl	%edi,0xcc(%ebp)
000019c3	movl	0xffffff28(%ebp),%edi
000019c9	addl	%edi,0xd0(%ebp)
000019cc	movl	0xffffff2c(%ebp),%edi
000019d2	addl	%edi,0xd4(%ebp)
000019d5	movl	0xffffff30(%ebp),%edi
000019db	addl	%edi,0xd8(%ebp)
000019de	movss	(%eax),%xmm1
000019e2	movss	%xmm1,(%edx,%ecx)
000019e7	movss	0x04(%eax),%xmm1
000019ec	movss	%xmm1,0x04(%edx,%ecx)
000019f2	movss	0x08(%eax),%xmm1
000019f7	movss	%xmm1,0x08(%edx,%ecx)
000019fd	movl	0xdc(%ebp),%eax
00001a00	movl	$0xffffffff,(%eax)
00001a06	movl	0xbc(%ebp),%eax
00001a09	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%eax)
00001a0f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
00001a16	movl	$0x3f800000,0x08(%eax)
00001a1d	movl	$0x3f800000,0x0c(%eax)
00001a24	movl	0xc0(%ebp),%eax
00001a27	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%eax)
00001a2d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
00001a34	movl	$0x3f800000,0x08(%eax)
00001a3b	movl	$0x3f800000,0x0c(%eax)
00001a42	movl	0xc4(%ebp),%eax
00001a45	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%eax)
00001a4b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
00001a52	movss	%xmm0,0x08(%eax)
00001a57	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%eax)
00001a5e	movl	0xc8(%ebp),%eax
00001a61	movl	$0x3f800000,(%eax)
00001a67	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
00001a6e	movl	0xb0(%ebp),%ecx
00001a71	incl	%ecx
00001a72	movl	%ecx,0xb0(%ebp)
00001a75	movl	0xac(%ebp),%eax
00001a78	cmpl	%eax,%ecx
00001a7a	jle	0x00001a81
00001a7c	movl	%ecx,0xac(%ebp)
00001a7f	movl	%ecx,%eax
00001a81	movl	0xfffffefc(%ebp),%ecx
00001a87	addl	%ecx,0xb4(%ebp)
00001a8a	movl	0xffffff08(%ebp),%ecx
00001a90	addl	%ecx,0xb8(%ebp)
00001a93	movl	0xffffff0c(%ebp),%ecx
00001a99	addl	%ecx,0xdc(%ebp)
00001a9c	movl	0xffffff14(%ebp),%ecx
00001aa2	addl	%ecx,0xbc(%ebp)
00001aa5	movl	0xffffff18(%ebp),%ecx
00001aab	addl	%ecx,0xc0(%ebp)
00001aae	movl	0xffffff1c(%ebp),%ecx
00001ab4	addl	%ecx,0xc4(%ebp)
00001ab7	movl	0xffffff20(%ebp),%ecx
00001abd	addl	%ecx,0xc8(%ebp)
00001ac0	movl	0xffffff24(%ebp),%ecx
00001ac6	addl	%ecx,0xcc(%ebp)
00001ac9	movl	0xffffff28(%ebp),%ecx
00001acf	addl	%ecx,0xd0(%ebp)
00001ad2	movl	0xffffff2c(%ebp),%ecx
00001ad8	addl	%ecx,0xd4(%ebp)
00001adb	movl	0xffffff30(%ebp),%ecx
00001ae1	addl	%ecx,0xd8(%ebp)
00001ae4	testb	$0x01,0xfffffec4(%ebp)
00001aeb	je	0x00001b60
00001aed	movl	0xfffffec0(%ebp),%ecx
00001af3	leal	0xfc(%ecx),%edi
00001af6	cmpl	$0x04,%edi
00001af9	ja	0x00001b45
00001afb	xorl	%edx,%edx
00001afd	movl	0xfffffe00(%ebp),%ebx
00001b03	addl	0x0000081f(%ebx,%edi,4),%ebx
00001b0a	jmp	*%ebx
00001b0c	movl	%eax,%edi
00001b0e	movl	(%esi),%eax
00001b10	movl	0x04(%eax),%eax
00001b13	movl	%esi,(%esp)
00001b16	call	*%eax
00001b18	movl	%edi,(%esp)
00001b1b	calll	__Unwind_Resume
00001b20	calll	std::terminate()
00001b25	imull	$0x06,%eax,%eax
00001b28	movl	%eax,%edx
00001b2a	sarl	$0x1f,%edx
00001b2d	shrl	$0x1e,%edx
00001b30	addl	%eax,%edx
00001b32	sarl	$0x02,%edx
00001b35	jmp	0x00001b47
00001b37	leal	0xfa(%eax,%eax,2),%edx
00001b3b	jmp	0x00001b47
00001b3d	leal	0xfe(%eax,%eax),%edx
00001b41	jmp	0x00001b47
00001b43	addl	%eax,%eax
00001b45	movl	%eax,%edx
00001b47	movl	%edx,0x08(%esp)
00001b4b	movl	%ecx,0x04(%esp)
00001b4f	leal	0xfffffec8(%ebp),%eax
00001b55	movl	%eax,(%esp)
00001b58	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
00001b5d	movl	0xac(%ebp),%eax
00001b60	movl	0xfffffebc(%ebp),%ecx
00001b66	movl	0xfffffee0(%ebp),%edi
00001b6c	movl	(%ecx),%edx
00001b6e	movl	0x58(%edx),%edx
00001b71	leal	0xfffffe08(%ebp),%ebx
00001b77	movl	%ebx,0x0c(%esp)
00001b7b	movl	%edi,0x08(%esp)
00001b7f	movl	%eax,0x04(%esp)
00001b83	movl	%ecx,(%esp)
00001b86	call	*%edx
00001b88	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
00001b92	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
00001b9c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001ba3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
00001baa	movl	$0xffffffff,0xffffff48(%ebp)
00001bb4	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffebc(%ebp)
00001bbe	movl	0xfffffe04(%ebp),%ecx
00001bc4	movl	(%ecx),%eax
00001bc6	movl	0x34(%eax),%eax
00001bc9	movl	%ecx,(%esp)
00001bcc	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001bd4	movl	$0xffffffff,0x04(%esp)
00001bdc	call	*%eax
00001bde	leal	0xfffffe08(%ebp),%eax
00001be4	movl	%eax,(%esp)
00001be7	calll	CMeshBuilder::~CMeshBuilder()
00001bec	testl	%esi,%esi
00001bee	je	0x00001c02
00001bf0	movl	(%esi),%eax
00001bf2	movl	0x0c(%eax),%eax
00001bf5	movl	%esi,(%esp)
00001bf8	call	*%eax
00001bfa	movl	(%esi),%eax
00001bfc	movl	%esi,(%esp)
00001bff	call	*0x04(%eax)
00001c02	addl	$0x0000020c,%esp
00001c08	popl	%esi
00001c09	popl	%edi
00001c0a	popl	%ebx
00001c0b	popl	%ebp
00001c0c	ret
00001c0d	movl	%eax,%edi
00001c0f	movl	(%esi),%eax
00001c11	movl	0x04(%eax),%eax
00001c14	movl	%esi,(%esp)
00001c17	call	*%eax
00001c19	jmp	0x00001b18
00001c1e	calll	std::terminate()
00001c23	movl	%eax,%edi
00001c25	jmp	0x00001c37
00001c27	movl	%eax,%edi
00001c29	leal	0xfffffe08(%ebp),%eax
00001c2f	movl	%eax,(%esp)
00001c32	calll	CMeshBuilder::~CMeshBuilder()
00001c37	testl	%esi,%esi
00001c39	je	0x00001b18
00001c3f	movl	(%esi),%eax
00001c41	movl	0x0c(%eax),%eax
00001c44	movl	%esi,(%esp)
00001c47	call	*%eax
00001c49	movl	(%esi),%eax
00001c4b	movl	0x04(%eax),%eax
00001c4e	movl	%esi,(%esp)
00001c51	call	*%eax
00001c53	jmp	0x00001b18
00001c58	calll	std::terminate()
00001c5d	movl	(%esi),%eax
00001c5f	movl	0x04(%eax),%eax
00001c62	movl	%esi,(%esp)
00001c65	call	*%eax
00001c67	jmp	0x00001c58
00001c69	calll	std::terminate()
00001c6e	nop
00001c70	inb	%dx,%al
00001c71	pushl	%es
00001c72	addb	%al,(%eax)
00001c74	repnz/pushl	%es
00001c76	addb	%al,(%eax)
00001c78	outb	%al,$0x06
00001c7a	addb	%al,(%eax)
00001c7c	aam	$0x6
00001c7e	addb	%al,(%eax)
00001c80	testb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%esi)
00001c83	addb	%ah,0x66(%esi)
00001c86	nopw	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::DrawRectangle():
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	pushl	%ebx
00001c94	pushl	%edi
00001c95	pushl	%esi
00001c96	subl	$0x0000023c,%esp
00001c9c	calll	0x00001ca1
00001ca1	popl	%eax
00001ca2	movl	%eax,0xfffffdfc(%ebp)
00001ca8	movl	0x08(%ebp),%edi
00001cab	movl	0x0000018c(%edi),%ecx
00001cb1	movl	(%ecx),%eax
00001cb3	movl	%ecx,(%esp)
00001cb6	call	*0x10(%eax)
00001cb9	movl	%eax,%esi
00001cbb	movl	%esi,0xfffffdf8(%ebp)
00001cc1	movl	0x0000018c(%edi),%ecx
00001cc7	movl	(%ecx),%eax
00001cc9	movl	%ecx,(%esp)
00001ccc	call	*0x14(%eax)
00001ccf	movl	%eax,%ebx
00001cd1	testl	%esi,%esi
00001cd3	jle	0x00002a6c
00001cd9	testl	%ebx,%ebx
00001cdb	jle	0x00002a6c
00001ce1	leal	0xec(%ebp),%eax
00001ce4	movl	%eax,0x08(%esp)
00001ce8	leal	0xf0(%ebp),%eax
00001ceb	movl	%eax,0x04(%esp)
00001cef	movl	%edi,(%esp)
00001cf2	calll	vgui::Panel::GetSize(int&, int&)
00001cf7	movl	0xf0(%ebp),%eax
00001cfa	testl	%eax,%eax
00001cfc	je	0x00002a6c
00001d02	movl	0xec(%ebp),%ecx
00001d05	testl	%ecx,%ecx
00001d07	je	0x00002a6c
00001d0d	movl	%ebx,0xfffffdf4(%ebp)
00001d13	movl	%ecx,0x08(%esp)
00001d17	movl	%eax,0x04(%esp)
00001d1b	calll	CVMTPreviewPanel::SetupOrthoMatrix(int, int)
00001d20	movl	%edi,(%esp)
00001d23	calll	CVMTPreviewPanel::SetupLightingState()
00001d28	calll	vgui::MaterialSystem()
00001d2d	movl	(%eax),%ecx
00001d2f	movl	%eax,(%esp)
00001d32	call	*0x00000188(%ecx)
00001d38	movl	%eax,%esi
00001d3a	testl	%esi,%esi
00001d3c	je	0x00001d48
00001d3e	movl	(%esi),%eax
00001d40	movl	0x08(%eax),%eax
00001d43	movl	%esi,(%esp)
00001d46	call	*%eax
00001d48	movl	(%esi),%eax
00001d4a	movl	0x50(%eax),%eax
00001d4d	movl	%esi,(%esp)
00001d50	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00001d58	call	*%eax
00001d5a	movl	(%esi),%eax
00001d5c	movl	0x7c(%eax),%eax
00001d5f	movl	%esi,(%esp)
00001d62	call	*%eax
00001d64	movl	(%esi),%eax
00001d66	movl	0x50(%eax),%eax
00001d69	movl	%esi,(%esp)
00001d6c	movl	$0x0000000a,0x04(%esp)
00001d74	call	*%eax
00001d76	movl	(%esi),%eax
00001d78	movl	0x7c(%eax),%eax
00001d7b	movl	%esi,(%esp)
00001d7e	call	*%eax
00001d80	movl	(%esi),%eax
00001d82	movl	0x000000e0(%eax),%eax
00001d88	movl	%esi,(%esp)
00001d8b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00001d93	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00001d9b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001da3	movl	$0x00000001,0x04(%esp)
00001dab	call	*%eax
00001dad	movl	%esi,0xfffffddc(%ebp)
00001db3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed0(%ebp)
00001dbd	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed4(%ebp)
00001dc7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
00001dd1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
00001ddb	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee4(%ebp)
00001de5	movl	$0xffffffff,0xfffffee8(%ebp)
00001def	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffeec(%ebp)
00001df9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x98(%ebp)
00001e00	movl	$0xffffffff,0xdc(%ebp)
00001e07	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
00001e0e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa4(%ebp)
00001e15	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001e1c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
00001e23	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xd8(%ebp)
00001e2a	movl	$0xffffffff,0xffffff40(%ebp)
00001e34	movl	%eax,0xfffffeb4(%ebp)
00001e3a	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffebc(%ebp)
00001e41	movl	$0x00000003,0xfffffeb8(%ebp)
00001e4b	movl	(%eax),%ecx
00001e4d	movl	0x30(%ecx),%ecx
00001e50	movl	%eax,(%esp)
00001e53	movl	%eax,%esi
00001e55	movl	$0x00000003,0x04(%esp)
00001e5d	call	*%ecx
00001e5f	movl	0xfffffeb4(%ebp),%ecx
00001e65	movl	(%ecx),%eax
00001e67	movl	0x4c(%eax),%eax
00001e6a	leal	0xfffffe00(%ebp),%edx
00001e70	movl	%edx,0x0c(%esp)
00001e74	movl	%ecx,(%esp)
00001e77	movl	$0x00000004,0x08(%esp)
00001e7f	movl	$0x00000004,0x04(%esp)
00001e87	call	*%eax
00001e89	movl	%esi,%edx
00001e8b	movl	%edx,0xfffffdd4(%ebp)
00001e91	leal	0x04(%edx),%eax
00001e94	testl	%edx,%edx
00001e96	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),%ecx
00001e9b	cmovnel	%eax,%ecx
00001e9e	movl	%ecx,0xfffffed0(%ebp)
00001ea4	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
00001eae	movl	$0x00000004,0xfffffed4(%ebp)
00001eb8	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffef0(%ebp)
00001ebf	movl	0xfffffe9c(%ebp),%esi
00001ec5	movl	%esi,0xfffffedc(%ebp)
00001ecb	movl	0xfffffea4(%ebp),%eax
00001ed1	movl	%eax,0xfffffec0(%ebp)
00001ed7	movb	0xfffffeb0(%ebp),%al
00001edd	movb	%al,0xfffffecc(%ebp)
00001ee3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
00001eed	movl	0xffffff40(%ebp),%ebx
00001ef3	movl	%edx,0x98(%ebp)
00001ef6	leal	0xfffffe00(%ebp),%eax
00001efc	movl	%eax,0x04(%esp)
00001f00	leal	0xfffffef4(%ebp),%eax
00001f06	movl	%eax,(%esp)
00001f09	movl	$0x000000a4,0x08(%esp)
00001f11	calll	_memcpy
00001f16	movl	$0x00000004,0xa0(%ebp)
00001f1d	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff44(%ebp)
00001f24	setne	%al
00001f27	movzbl	%al,%eax
00001f2a	addl	%eax,%eax
00001f2c	movl	%eax,0xffffff44(%ebp)
00001f32	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa4(%ebp)
00001f39	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x9c(%ebp)
00001f3d	cmpl	$0xff,%ebx
00001f40	je	0x00001f48
00001f42	movl	%ebx,0xffffff40(%ebp)
00001f48	cmpl	$0xff,0xdc(%ebp)
00001f4c	jne	0x00001f61
00001f4e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xd8(%ebp)
00001f55	movl	0xfffffea0(%ebp),%eax
00001f5b	movl	%eax,0xdc(%ebp)
00001f5e	movl	%esi,0xe0(%ebp)
00001f61	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
00001f6b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001f72	movl	0xffffff48(%ebp),%eax
00001f78	movl	%eax,0xac(%ebp)
00001f7b	movl	0xffffff54(%ebp),%eax
00001f81	movl	%eax,0xb0(%ebp)
00001f84	movl	0xffffff60(%ebp),%eax
00001f8a	movl	%eax,0xb4(%ebp)
00001f8d	movl	0xffffff64(%ebp),%eax
00001f93	movl	%eax,0xb8(%ebp)
00001f96	movl	0xffffff68(%ebp),%eax
00001f9c	movl	%eax,0xbc(%ebp)
00001f9f	movl	0xffffff6c(%ebp),%eax
00001fa5	movl	%eax,0xc0(%ebp)
00001fa8	movl	0xffffff70(%ebp),%eax
00001fae	movl	%eax,0xc4(%ebp)
00001fb1	movl	0xffffff74(%ebp),%eax
00001fb7	movl	%eax,0xc8(%ebp)
00001fba	movl	0xffffff78(%ebp),%eax
00001fc0	movl	%eax,0xcc(%ebp)
00001fc3	movl	0xffffff7c(%ebp),%eax
00001fc9	movl	%eax,0xd0(%ebp)
00001fcc	movl	0xffffff58(%ebp),%eax
00001fd2	movl	%eax,0xd4(%ebp)
00001fd5	movl	0x0000018c(%edi),%ecx
00001fdb	movl	(%ecx),%eax
00001fdd	movl	0x00000080(%eax),%eax
00001fe3	movl	%ecx,(%esp)
00001fe6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00001fee	call	*%eax
00001ff0	movb	%al,0xfffffdf0(%ebp)
00001ff6	movl	0x0000018c(%edi),%ecx
00001ffc	movl	(%ecx),%eax
00001ffe	movl	0x00000080(%eax),%eax
00002004	movl	%ecx,(%esp)
00002007	movl	$0x00000003,0x04(%esp)
0000200f	call	*%eax
00002011	movb	%al,0xfffffdd8(%ebp)
00002017	movl	0x00000190(%edi),%eax
0000201d	movl	(%eax),%ecx
0000201f	movl	0x0c(%ecx),%ecx
00002022	movl	%eax,(%esp)
00002025	call	*%ecx
00002027	movl	%eax,0xfffffdec(%ebp)
0000202d	movl	0xec(%ebp),%edi
00002030	movl	0xf0(%ebp),%ebx
00002033	movl	$0x00000005,%esi
00002038	cmpl	$0x0f,%ebx
0000203b	movl	$0x00000005,0xfffffde0(%ebp)
00002045	jg	0x0000205d
00002047	movl	$0x55555556,%ecx
0000204c	movl	%ebx,%eax
0000204e	imull	%ecx
00002050	movl	%edx,%eax
00002052	shrl	$0x1f,%eax
00002055	addl	%edx,%eax
00002057	movl	%eax,0xfffffde0(%ebp)
0000205d	cmpl	$0x0f,%edi
00002060	jg	0x00002072
00002062	movl	$0x55555556,%ecx
00002067	movl	%edi,%eax
00002069	imull	%ecx
0000206b	movl	%edx,%esi
0000206d	shrl	$0x1f,%esi
00002070	addl	%edx,%esi
00002072	cvtsi2ss	0xfffffdf8(%ebp),%xmm0
0000207a	movl	0xfffffdfc(%ebp),%ecx
00002080	movss	0x523e0-0x1ca1(%ecx),%xmm3
00002088	movaps	%xmm3,%xmm6
0000208b	divss	%xmm0,%xmm6
0000208f	cvtsi2ss	%edi,%xmm1
00002093	cvtsi2ss	%ebx,%xmm2
00002097	divss	%xmm1,%xmm2
0000209b	cvtsi2ss	0xfffffdf4(%ebp),%xmm4
000020a3	divss	%xmm4,%xmm0
000020a7	movaps	%xmm0,%xmm1
000020aa	divss	%xmm2,%xmm1
000020ae	movaps	%xmm3,%xmm2
000020b1	divss	%xmm4,%xmm2
000020b5	movaps	%xmm2,%xmm4
000020b8	cvtsi2ss	0xfffffdec(%ebp),%xmm2
000020c0	divss	%xmm2,%xmm3
000020c4	movl	0xfffffde0(%ebp),%eax
000020ca	leal	(%eax,%eax),%eax
000020cd	subl	%eax,%ebx
000020cf	movl	%ebx,0xf0(%ebp)
000020d2	leal	(%esi,%esi),%eax
000020d5	subl	%eax,%edi
000020d7	movl	%edi,0xec(%ebp)
000020da	ucomiss	0x523e4-0x1ca1(%ecx),%xmm1
000020e1	jbe	0x00002135
000020e3	cvtsi2ss	%ebx,%xmm1
000020e7	divss	%xmm0,%xmm1
000020eb	cvttss2si	%xmm1,%ecx
000020ef	movl	%ecx,0xec(%ebp)
000020f2	subl	%ecx,%edi
000020f4	movl	%edi,%edx
000020f6	shrl	$0x1f,%edx
000020f9	addl	%edi,%edx
000020fb	sarl	%edx
000020fd	xorl	%eax,%eax
000020ff	jmp	0x00002155
00002101	movl	%eax,%edi
00002103	movl	(%esi),%eax
00002105	movl	0x04(%eax),%eax
00002108	movl	%esi,(%esp)
0000210b	call	*%eax
0000210d	movl	%edi,(%esp)
00002110	calll	__Unwind_Resume
00002115	calll	std::terminate()
0000211a	movl	%eax,%edi
0000211c	leal	0xfffffe00(%ebp),%eax
00002122	movl	%eax,(%esp)
00002125	calll	CMeshBuilder::~CMeshBuilder()
0000212a	movl	0xfffffddc(%ebp),%esi
00002130	jmp	0x00002a8f
00002135	cvtsi2ss	%edi,%xmm1
00002139	mulss	%xmm0,%xmm1
0000213d	movl	%ebx,%ecx
0000213f	cvttss2si	%xmm1,%ebx
00002143	movl	%ebx,0xf0(%ebp)
00002146	subl	%ebx,%ecx
00002148	movl	%ecx,%eax
0000214a	shrl	$0x1f,%eax
0000214d	addl	%ecx,%eax
0000214f	sarl	%eax
00002151	xorl	%edx,%edx
00002153	movl	%edi,%ecx
00002155	movl	0xfffffdfc(%ebp),%edi
0000215b	movss	0x523e4-0x1ca1(%edi),%xmm2
00002163	movaps	%xmm2,%xmm0
00002166	movaps	%xmm4,%xmm5
00002169	movss	%xmm5,0xfffffde4(%ebp)
00002171	subss	%xmm5,%xmm0
00002175	movss	%xmm0,0xfffffdf8(%ebp)
0000217d	subss	%xmm6,%xmm2
00002181	movss	%xmm2,0xfffffdec(%ebp)
00002189	cmpb	$0x01,0xfffffdf0(%ebp)
00002190	movaps	%xmm6,%xmm7
00002193	movss	%xmm2,0xfffffdf4(%ebp)
0000219b	movaps	%xmm5,%xmm1
0000219e	movss	%xmm0,0xfffffde8(%ebp)
000021a6	movaps	%xmm6,%xmm4
000021a9	movss	%xmm2,0xfffffdf0(%ebp)
000021b1	movaps	%xmm0,%xmm2
000021b4	jne	0x00002235
000021b6	movl	0xfffffdfc(%ebp),%edi
000021bc	movss	0x523e8-0x1ca1(%edi),%xmm4
000021c4	movaps	%xmm4,%xmm0
000021c7	subss	%xmm3,%xmm0
000021cb	cmpb	$0x01,0xfffffdd8(%ebp)
000021d2	je	0x0000220f
000021d4	movaps	%xmm3,%xmm7
000021d7	movaps	%xmm3,%xmm1
000021da	movss	%xmm0,0xfffffdf4(%ebp)
000021e2	movss	%xmm0,0xfffffde8(%ebp)
000021ea	movaps	%xmm6,%xmm4
000021ed	movss	0xfffffdec(%ebp),%xmm0
000021f5	movss	%xmm0,0xfffffdf0(%ebp)
000021fd	movss	0xfffffde4(%ebp),%xmm5
00002205	movss	0xfffffdf8(%ebp),%xmm2
0000220d	jmp	0x00002235
0000220f	movaps	%xmm3,%xmm7
00002212	movaps	%xmm3,%xmm1
00002215	movss	%xmm0,0xfffffdf4(%ebp)
0000221d	movss	%xmm0,0xfffffde8(%ebp)
00002225	pxor	%xmm5,%xmm5
00002229	movss	%xmm4,0xfffffdf0(%ebp)
00002231	pxor	%xmm2,%xmm2
00002235	movss	%xmm2,0xfffffdd8(%ebp)
0000223d	addl	%esi,%edx
0000223f	addl	%edx,%ecx
00002241	addl	0xfffffde0(%ebp),%eax
00002247	cvtsi2ss	%eax,%xmm3
0000224b	movl	0xac(%ebp),%esi
0000224e	movss	%xmm3,(%esi)
00002252	cvtsi2ss	%ecx,%xmm0
00002256	movss	%xmm0,0xfffffdd0(%ebp)
0000225e	movss	%xmm0,0x04(%esi)
00002263	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esi)
0000226a	movl	0xb0(%ebp),%ecx
0000226d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00002273	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000227a	movl	$0x3f800000,0x08(%ecx)
00002281	movl	0xd4(%ebp),%ecx
00002284	movl	$0xff0000ff,(%ecx)
0000228a	movl	0xb4(%ebp),%ecx
0000228d	movss	%xmm6,(%ecx)
00002291	movss	0xfffffde4(%ebp),%xmm0
00002299	movss	%xmm0,0x04(%ecx)
0000229e	movl	0xb8(%ebp),%ecx
000022a1	movss	%xmm7,(%ecx)
000022a5	movss	%xmm1,0x04(%ecx)
000022aa	movl	0xbc(%ebp),%ecx
000022ad	movss	%xmm4,(%ecx)
000022b1	movss	%xmm5,0x04(%ecx)
000022b6	movl	0xffffff2c(%ebp),%ecx
000022bc	movl	0x80(%ebp),%esi
000022bf	imull	0xa8(%ebp),%ecx
000022c3	movl	$0x3f800000,(%esi,%ecx)
000022ca	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esi,%ecx)
000022d2	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esi,%ecx)
000022da	movl	0xffffff30(%ebp),%ecx
000022e0	movl	0x84(%ebp),%esi
000022e3	imull	0xa8(%ebp),%ecx
000022e7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%esi,%ecx)
000022ee	movl	$0x3f800000,0x04(%esi,%ecx)
000022f6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esi,%ecx)
000022fe	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff44(%ebp)
00002305	jle	0x0000231e
00002307	movl	0xfffffef8(%ebp),%ecx
0000230d	movl	0xffffff4c(%ebp),%esi
00002313	imull	0xa8(%ebp),%ecx
00002317	movl	$0x3f800000,(%esi,%ecx)
0000231e	movss	%xmm5,0xfffffde0(%ebp)
00002326	movl	0xfffffefc(%ebp),%ecx
0000232c	movl	0xffffff50(%ebp),%esi
00002332	imull	0xa8(%ebp),%ecx
00002336	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x02(%ecx,%esi)
0000233b	movl	0xffffff38(%ebp),%ecx
00002341	movl	0x8c(%ebp),%esi
00002344	imull	0xa8(%ebp),%ecx
00002348	movl	$0x3f800000,(%esi,%ecx)
0000234f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esi,%ecx)
00002357	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esi,%ecx)
0000235f	movl	$0x3f800000,0x0c(%esi,%ecx)
00002367	movl	0xa8(%ebp),%ecx
0000236a	incl	%ecx
0000236b	movl	%ecx,0xa8(%ebp)
0000236e	cmpl	0xa4(%ebp),%ecx
00002371	jle	0x00002376
00002373	movl	%ecx,0xa4(%ebp)
00002376	movl	0xfffffef4(%ebp),%ecx
0000237c	movl	0xac(%ebp),%esi
0000237f	leal	(%esi,%ecx),%edi
00002382	movl	%edi,0xac(%ebp)
00002385	movl	0xffffff00(%ebp),%edi
0000238b	addl	%edi,0xb0(%ebp)
0000238e	movl	0xffffff04(%ebp),%edi
00002394	addl	%edi,0xd4(%ebp)
00002397	movl	0xffffff0c(%ebp),%edi
0000239d	addl	%edi,0xb4(%ebp)
000023a0	movl	0xffffff10(%ebp),%edi
000023a6	addl	%edi,0xb8(%ebp)
000023a9	movl	0xffffff14(%ebp),%edi
000023af	addl	%edi,0xbc(%ebp)
000023b2	movl	0xffffff18(%ebp),%edi
000023b8	addl	%edi,0xc0(%ebp)
000023bb	movl	0xffffff1c(%ebp),%edi
000023c1	addl	%edi,0xc4(%ebp)
000023c4	movl	0xffffff20(%ebp),%edi
000023ca	addl	%edi,0xc8(%ebp)
000023cd	movl	0xffffff24(%ebp),%edi
000023d3	addl	%edi,0xcc(%ebp)
000023d6	movl	0xffffff28(%ebp),%edi
000023dc	addl	%edi,0xd0(%ebp)
000023df	movss	%xmm3,(%esi,%ecx)
000023e4	cvtsi2ss	%edx,%xmm0
000023e8	movss	%xmm0,0xfffffdcc(%ebp)
000023f0	movss	%xmm0,0x04(%esi,%ecx)
000023f6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esi,%ecx)
000023fe	movl	0xb0(%ebp),%ecx
00002401	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx)
00002407	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx)
0000240e	movl	$0x3f800000,0x08(%ecx)
00002415	movl	0xd4(%ebp),%ecx
00002418	movl	$0x40ffffff,(%ecx)
0000241e	movl	0xb4(%ebp),%ecx
00002421	movss	%xmm6,(%ecx)
00002425	movss	0xfffffdf8(%ebp),%xmm2
0000242d	movss	%xmm2,0x04(%ecx)
00002432	movl	0xb8(%ebp),%ecx
00002435	movss	%xmm7,(%ecx)
00002439	movss	0xfffffde8(%ebp),%xmm2
00002441	movss	%xmm2,0x04(%ecx)
00002446	movl	0xbc(%ebp),%ecx
00002449	movss	%xmm4,(%ecx)
0000244d	movss	0xfffffdd8(%ebp),%xmm0
00002455	movss	%xmm0,0x04(%ecx)
0000245a	movl	0xffffff2c(%ebp),%ecx
00002460	movl	0x80(%ebp),%edx
00002463	imull	0xa8(%ebp),%ecx
00002467	movl	$0x3f800000,(%edx,%ecx)
0000246e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%edx,%ecx)
00002476	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%edx,%ecx)
0000247e	movl	0xffffff30(%ebp),%ecx
00002484	movl	0x84(%ebp),%edx
00002487	imull	0xa8(%ebp),%ecx
0000248b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%edx,%ecx)
00002492	movl	$0x3f800000,0x04(%edx,%ecx)
0000249a	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%edx,%ecx)
000024a2	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff44(%ebp)
000024a9	jle	0x000024c2
000024ab	movl	0xfffffef8(%ebp),%ecx
000024b1	movl	0xffffff4c(%ebp),%edx
000024b7	imull	0xa8(%ebp),%ecx
000024bb	movl	$0x3f800000,(%edx,%ecx)
000024c2	movl	0xfffffefc(%ebp),%ecx
000024c8	movl	0xffffff50(%ebp),%edx
000024ce	imull	0xa8(%ebp),%ecx
000024d2	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x02(%ecx,%edx)
000024d7	movl	0xffffff38(%ebp),%ecx
000024dd	movl	0x8c(%ebp),%edx
000024e0	imull	0xa8(%ebp),%ecx
000024e4	movl	$0x3f800000,(%edx,%ecx)
000024eb	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%edx,%ecx)
000024f3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%edx,%ecx)
000024fb	movl	$0x3f800000,0x0c(%edx,%ecx)
00002503	movl	0xa8(%ebp),%ecx
00002506	incl	%ecx
00002507	movl	%ecx,0xa8(%ebp)
0000250a	cmpl	0xa4(%ebp),%ecx
0000250d	movss	0xfffffdf4(%ebp),%xmm0
00002515	jle	0x0000251a
00002517	movl	%ecx,0xa4(%ebp)
0000251a	addl	%eax,%ebx
0000251c	movl	0xfffffef4(%ebp),%eax
00002522	movl	0xac(%ebp),%ecx
00002525	leal	(%ecx,%eax),%edx
00002528	movl	%edx,0xac(%ebp)
0000252b	movl	0xffffff00(%ebp),%edx
00002531	addl	%edx,0xb0(%ebp)
00002534	movl	0xffffff04(%ebp),%edx
0000253a	addl	%edx,0xd4(%ebp)
0000253d	movl	0xffffff0c(%ebp),%edx
00002543	addl	%edx,0xb4(%ebp)
00002546	movl	0xffffff10(%ebp),%edx
0000254c	addl	%edx,0xb8(%ebp)
0000254f	movl	0xffffff14(%ebp),%edx
00002555	addl	%edx,0xbc(%ebp)
00002558	movl	0xffffff18(%ebp),%edx
0000255e	addl	%edx,0xc0(%ebp)
00002561	movl	0xffffff1c(%ebp),%edx
00002567	addl	%edx,0xc4(%ebp)
0000256a	movl	0xffffff20(%ebp),%edx
00002570	addl	%edx,0xc8(%ebp)
00002573	movl	0xffffff24(%ebp),%edx
00002579	addl	%edx,0xcc(%ebp)
0000257c	movl	0xffffff28(%ebp),%edx
00002582	addl	%edx,0xd0(%ebp)
00002585	cvtsi2ss	%ebx,%xmm3
00002589	movss	%xmm3,(%ecx,%eax)
0000258e	movss	0xfffffdd0(%ebp),%xmm4
00002596	movss	%xmm4,0x04(%ecx,%eax)
0000259c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
000025a4	movl	0xb0(%ebp),%eax
000025a7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%eax)
000025ad	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
000025b4	movl	$0x3f800000,0x08(%eax)
000025bb	movl	0xd4(%ebp),%eax
000025be	movl	$0xffff0000,(%eax)
000025c4	movl	0xb4(%ebp),%eax
000025c7	movss	0xfffffdec(%ebp),%xmm4
000025cf	movss	%xmm4,(%eax)
000025d3	movss	0xfffffde4(%ebp),%xmm4
000025db	movss	%xmm4,0x04(%eax)
000025e0	movl	0xb8(%ebp),%eax
000025e3	movss	%xmm0,(%eax)
000025e7	movaps	%xmm0,%xmm4
000025ea	movss	%xmm1,0x04(%eax)
000025ef	movl	0xbc(%ebp),%eax
000025f2	movss	0xfffffdf0(%ebp),%xmm5
000025fa	movss	%xmm5,(%eax)
000025fe	movss	0xfffffde0(%ebp),%xmm0
00002606	movss	%xmm0,0x04(%eax)
0000260b	movl	0xffffff2c(%ebp),%eax
00002611	movl	0x80(%ebp),%ecx
00002614	imull	0xa8(%ebp),%eax
00002618	movl	$0x3f800000,(%ecx,%eax)
0000261f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx,%eax)
00002627	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
0000262f	movl	0xffffff30(%ebp),%eax
00002635	movl	0x84(%ebp),%ecx
00002638	imull	0xa8(%ebp),%eax
0000263c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx,%eax)
00002643	movl	$0x3f800000,0x04(%ecx,%eax)
0000264b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
00002653	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff44(%ebp)
0000265a	jle	0x00002673
0000265c	movl	0xfffffef8(%ebp),%eax
00002662	movl	0xffffff4c(%ebp),%ecx
00002668	imull	0xa8(%ebp),%eax
0000266c	movl	$0x3f800000,(%ecx,%eax)
00002673	movl	0xfffffefc(%ebp),%eax
00002679	movl	0xffffff50(%ebp),%ecx
0000267f	imull	0xa8(%ebp),%eax
00002683	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x02(%eax,%ecx)
00002688	movl	0xffffff38(%ebp),%eax
0000268e	movl	0x8c(%ebp),%ecx
00002691	imull	0xa8(%ebp),%eax
00002695	movl	$0x3f800000,(%ecx,%eax)
0000269c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx,%eax)
000026a4	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
000026ac	movl	$0x3f800000,0x0c(%ecx,%eax)
000026b4	movl	0xa8(%ebp),%eax
000026b7	incl	%eax
000026b8	movl	%eax,0xa8(%ebp)
000026bb	cmpl	0xa4(%ebp),%eax
000026be	jle	0x000026c3
000026c0	movl	%eax,0xa4(%ebp)
000026c3	movl	0xfffffef4(%ebp),%eax
000026c9	movl	0xac(%ebp),%ecx
000026cc	leal	(%ecx,%eax),%edx
000026cf	movl	%edx,0xac(%ebp)
000026d2	movl	0xffffff00(%ebp),%edx
000026d8	addl	%edx,0xb0(%ebp)
000026db	movl	0xffffff04(%ebp),%edx
000026e1	addl	%edx,0xd4(%ebp)
000026e4	movl	0xffffff0c(%ebp),%edx
000026ea	addl	%edx,0xb4(%ebp)
000026ed	movl	0xffffff10(%ebp),%edx
000026f3	addl	%edx,0xb8(%ebp)
000026f6	movl	0xffffff14(%ebp),%edx
000026fc	addl	%edx,0xbc(%ebp)
000026ff	movl	0xffffff18(%ebp),%edx
00002705	addl	%edx,0xc0(%ebp)
00002708	movl	0xffffff1c(%ebp),%edx
0000270e	addl	%edx,0xc4(%ebp)
00002711	movl	0xffffff20(%ebp),%edx
00002717	addl	%edx,0xc8(%ebp)
0000271a	movl	0xffffff24(%ebp),%edx
00002720	addl	%edx,0xcc(%ebp)
00002723	movl	0xffffff28(%ebp),%edx
00002729	addl	%edx,0xd0(%ebp)
0000272c	movss	%xmm3,(%ecx,%eax)
00002731	movss	0xfffffdcc(%ebp),%xmm0
00002739	movss	%xmm0,0x04(%ecx,%eax)
0000273f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
00002747	movl	0xb0(%ebp),%eax
0000274a	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%eax)
00002750	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%eax)
00002757	movl	$0x3f800000,0x08(%eax)
0000275e	movl	0xd4(%ebp),%eax
00002761	movl	$0x4000ff00,(%eax)
00002767	movl	0xb4(%ebp),%eax
0000276a	movss	0xfffffdec(%ebp),%xmm0
00002772	movss	%xmm0,(%eax)
00002776	movss	0xfffffdf8(%ebp),%xmm0
0000277e	movss	%xmm0,0x04(%eax)
00002783	movl	0xb8(%ebp),%eax
00002786	movss	%xmm4,(%eax)
0000278a	movss	%xmm2,0x04(%eax)
0000278f	movl	0xbc(%ebp),%eax
00002792	movss	%xmm5,(%eax)
00002796	movss	0xfffffdd8(%ebp),%xmm0
0000279e	movss	%xmm0,0x04(%eax)
000027a3	movl	0xffffff2c(%ebp),%eax
000027a9	movl	0x80(%ebp),%ecx
000027ac	imull	0xa8(%ebp),%eax
000027b0	movl	$0x3f800000,(%ecx,%eax)
000027b7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx,%eax)
000027bf	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
000027c7	movl	0xffffff30(%ebp),%eax
000027cd	movl	0x84(%ebp),%ecx
000027d0	imull	0xa8(%ebp),%eax
000027d4	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),(%ecx,%eax)
000027db	movl	$0x3f800000,0x04(%ecx,%eax)
000027e3	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
000027eb	cmpl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xffffff44(%ebp)
000027f2	jle	0x0000280b
000027f4	movl	0xfffffef8(%ebp),%eax
000027fa	movl	0xffffff4c(%ebp),%ecx
00002800	imull	0xa8(%ebp),%eax
00002804	movl	$0x3f800000,(%ecx,%eax)
0000280b	movl	0xfffffefc(%ebp),%eax
00002811	movl	0xffffff50(%ebp),%ecx
00002817	imull	0xa8(%ebp),%eax
0000281b	movb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x02(%eax,%ecx)
00002820	movl	0xffffff38(%ebp),%eax
00002826	movl	0x8c(%ebp),%ecx
00002829	imull	0xa8(%ebp),%eax
0000282d	movl	$0x3f800000,(%ecx,%eax)
00002834	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%ecx,%eax)
0000283c	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%ecx,%eax)
00002844	movl	$0x3f800000,0x0c(%ecx,%eax)
0000284c	movl	0xa8(%ebp),%eax
0000284f	incl	%eax
00002850	movl	%eax,0xa8(%ebp)
00002853	cmpl	0xa4(%ebp),%eax
00002856	jle	0x0000285b
00002858	movl	%eax,0xa4(%ebp)
0000285b	movl	0xfffffef4(%ebp),%eax
00002861	addl	%eax,0xac(%ebp)
00002864	movl	0xffffff00(%ebp),%eax
0000286a	addl	%eax,0xb0(%ebp)
0000286d	movl	0xffffff04(%ebp),%eax
00002873	addl	%eax,0xd4(%ebp)
00002876	movl	0xffffff0c(%ebp),%eax
0000287c	addl	%eax,0xb4(%ebp)
0000287f	movl	0xffffff10(%ebp),%eax
00002885	addl	%eax,0xb8(%ebp)
00002888	movl	0xffffff14(%ebp),%eax
0000288e	addl	%eax,0xbc(%ebp)
00002891	movl	0xffffff18(%ebp),%eax
00002897	addl	%eax,0xc0(%ebp)
0000289a	movl	0xffffff1c(%ebp),%eax
000028a0	addl	%eax,0xc4(%ebp)
000028a3	movl	0xffffff20(%ebp),%eax
000028a9	addl	%eax,0xc8(%ebp)
000028ac	movl	0xffffff24(%ebp),%eax
000028b2	addl	%eax,0xcc(%ebp)
000028b5	movl	0xffffff28(%ebp),%eax
000028bb	addl	%eax,0xd0(%ebp)
000028be	movl	0xfffffec0(%ebp),%eax
000028c4	movl	0xfffffee0(%ebp),%ecx
000028ca	movw	0xfffffedc(%ebp),%dx
000028d1	movw	%dx,(%eax,%ecx,2)
000028d5	movzbl	0xfffffecc(%ebp),%eax
000028dc	addl	0xfffffee0(%ebp),%eax
000028e2	movl	%eax,0xfffffee0(%ebp)
000028e8	movl	0xfffffec0(%ebp),%ecx
000028ee	movl	0xfffffedc(%ebp),%edx
000028f4	incl	%edx
000028f5	movw	%dx,(%ecx,%eax,2)
000028f9	movzbl	0xfffffecc(%ebp),%eax
00002900	addl	0xfffffee0(%ebp),%eax
00002906	movl	%eax,0xfffffee0(%ebp)
0000290c	movl	0xfffffec0(%ebp),%ecx
00002912	movl	0xfffffedc(%ebp),%edx
00002918	addl	$0x02,%edx
0000291b	movw	%dx,(%ecx,%eax,2)
0000291f	movzbl	0xfffffecc(%ebp),%eax
00002926	addl	0xfffffee0(%ebp),%eax
0000292c	movl	%eax,0xfffffee0(%ebp)
00002932	movl	0xfffffec0(%ebp),%ecx
00002938	movl	0xfffffedc(%ebp),%edx
0000293e	addl	$0x03,%edx
00002941	movw	%dx,(%ecx,%eax,2)
00002945	movzbl	0xfffffecc(%ebp),%eax
0000294c	addl	0xfffffee0(%ebp),%eax
00002952	movl	%eax,0xfffffee0(%ebp)
00002958	movl	%eax,0xfffffed8(%ebp)
0000295e	testb	$0x01,0xfffffebc(%ebp)
00002965	je	0x000029c7
00002967	movl	0xfffffeb8(%ebp),%eax
0000296d	movl	0xa4(%ebp),%edx
00002970	leal	0xfc(%eax),%esi
00002973	cmpl	$0x04,%esi
00002976	ja	0x000029a9
00002978	xorl	%ecx,%ecx
0000297a	movl	0xfffffdfc(%ebp),%edi
00002980	addl	0x00000e27(%edi,%esi,4),%edi
00002987	jmp	*%edi
00002989	imull	$0x06,%edx,%edx
0000298c	movl	%edx,%ecx
0000298e	sarl	$0x1f,%ecx
00002991	shrl	$0x1e,%ecx
00002994	addl	%edx,%ecx
00002996	sarl	$0x02,%ecx
00002999	jmp	0x000029ab
0000299b	leal	0xfa(%edx,%edx,2),%ecx
0000299f	jmp	0x000029ab
000029a1	leal	0xfe(%edx,%edx),%ecx
000029a5	jmp	0x000029ab
000029a7	addl	%edx,%edx
000029a9	movl	%edx,%ecx
000029ab	movl	%ecx,0x08(%esp)
000029af	movl	%eax,0x04(%esp)
000029b3	leal	0xfffffec0(%ebp),%eax
000029b9	movl	%eax,(%esp)
000029bc	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
000029c1	movl	0xfffffed8(%ebp),%eax
000029c7	movl	0xfffffeb4(%ebp),%ecx
000029cd	movl	0xa4(%ebp),%esi
000029d0	movl	(%ecx),%edx
000029d2	movl	0x58(%edx),%edx
000029d5	leal	0xfffffe00(%ebp),%edi
000029db	movl	%edi,0x0c(%esp)
000029df	movl	%eax,0x08(%esp)
000029e3	movl	%esi,0x04(%esp)
000029e7	movl	%ecx,(%esp)
000029ea	call	*%edx
000029ec	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed0(%ebp)
000029f6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffed4(%ebp)
00002a00	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
00002a07	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x98(%ebp)
00002a0e	movl	$0xffffffff,0xffffff40(%ebp)
00002a18	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0xfffffeb4(%ebp)
00002a22	movl	0xfffffdd4(%ebp),%ecx
00002a28	movl	(%ecx),%eax
00002a2a	movl	0x34(%eax),%eax
00002a2d	movl	%ecx,(%esp)
00002a30	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00002a38	movl	$0xffffffff,0x04(%esp)
00002a40	call	*%eax
00002a42	leal	0xfffffe00(%ebp),%eax
00002a48	movl	%eax,(%esp)
00002a4b	movl	0xfffffddc(%ebp),%esi
00002a51	calll	CMeshBuilder::~CMeshBuilder()
00002a56	testl	%esi,%esi
00002a58	je	0x00002a6c
00002a5a	movl	(%esi),%eax
00002a5c	movl	0x0c(%eax),%eax
00002a5f	movl	%esi,(%esp)
00002a62	call	*%eax
00002a64	movl	(%esi),%eax
00002a66	movl	%esi,(%esp)
00002a69	call	*0x04(%eax)
00002a6c	addl	$0x0000023c,%esp
00002a72	popl	%esi
00002a73	popl	%edi
00002a74	popl	%ebx
00002a75	popl	%ebp
00002a76	ret
00002a77	movl	%eax,%edi
00002a79	movl	(%esi),%eax
00002a7b	movl	0x04(%eax),%eax
00002a7e	movl	%esi,(%esp)
00002a81	call	*%eax
00002a83	jmp	0x0000210d
00002a88	calll	std::terminate()
00002a8d	movl	%eax,%edi
00002a8f	testl	%esi,%esi
00002a91	je	0x0000210d
00002a97	movl	(%esi),%eax
00002a99	movl	0x0c(%eax),%eax
00002a9c	movl	%esi,(%esp)
00002a9f	call	*%eax
00002aa1	movl	(%esi),%eax
00002aa3	movl	0x04(%eax),%eax
00002aa6	movl	%esi,(%esp)
00002aa9	call	*%eax
00002aab	jmp	0x0000210d
00002ab0	calll	std::terminate()
00002ab5	movl	(%esi),%eax
00002ab7	movl	0x04(%eax),%eax
00002aba	movl	%esi,(%esp)
00002abd	call	*%eax
00002abf	jmp	0x00002ab0
00002ac1	calll	std::terminate()
00002ac6	nop
00002ac8	addb	%cl,0x0d060000
00002ace	addb	%al,(%eax)
00002ad0	cli
00002ad1	orb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),%al
00002ad3	addb	%ch,%al
00002ad5	orb	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),%al
00002ad7	addb	%cl,(%edx)
00002ad9	orl	$0x1f0f0000,%eax
00002ade	incl	%eax
00002adf	addb	%dl,0x89(%ebp)
00002ae2	inl	$0x57,%eax
00002ae4	pushl	%esi
00002ae5	subl	$0x40,%esp
00002ae8	calll	vgui::MaterialSystem()
00002aed	movl	(%eax),%ecx
00002aef	movl	%eax,(%esp)
00002af2	call	*0x00000188(%ecx)
00002af8	movl	%eax,%esi
00002afa	testl	%esi,%esi
00002afc	je	0x00002b08
00002afe	movl	(%esi),%eax
00002b00	movl	0x08(%eax),%eax
00002b03	movl	%esi,(%esp)
00002b06	call	*%eax
00002b08	movl	(%esi),%eax
00002b0a	movl	0x50(%eax),%eax
00002b0d	movl	%esi,(%esp)
00002b10	movl	$0x00000001,0x04(%esp)
00002b18	call	*%eax
00002b1a	movl	(%esi),%eax
00002b1c	movl	0x7c(%eax),%eax
00002b1f	movl	%esi,(%esp)
00002b22	call	*%eax
00002b24	movl	0x10(%ebp),%edx
00002b27	movl	0x0c(%ebp),%ecx
00002b2a	movl	(%esi),%eax
00002b2c	movl	0x00000080(%eax),%eax
00002b32	cvtsi2sd	%edx,%xmm0
00002b36	movsd	%xmm0,0x1c(%esp)
00002b3c	cvtsi2sd	%ecx,%xmm0
00002b40	movsd	%xmm0,0x14(%esp)
00002b46	movl	%esi,(%esp)
00002b49	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00002b51	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00002b59	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00002b61	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00002b69	movl	$0xbff00000,0x28(%esp)
00002b71	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x24(%esp)
00002b79	movl	$0x3ff00000,0x30(%esp)
00002b81	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x2c(%esp)
00002b89	call	*%eax
00002b8b	testl	%esi,%esi
00002b8d	je	0x00002ba1
00002b8f	movl	(%esi),%eax
00002b91	movl	0x0c(%eax),%eax
00002b94	movl	%esi,(%esp)
00002b97	call	*%eax
00002b99	movl	(%esi),%eax
00002b9b	movl	%esi,(%esp)
00002b9e	call	*0x04(%eax)
00002ba1	addl	$0x40,%esp
00002ba4	popl	%esi
00002ba5	popl	%edi
00002ba6	popl	%ebp
00002ba7	ret
00002ba8	movl	%eax,%edi
00002baa	movl	(%esi),%eax
00002bac	movl	0x04(%eax),%eax
00002baf	movl	%esi,(%esp)
00002bb2	call	*%eax
00002bb4	movl	%edi,(%esp)
00002bb7	calll	__Unwind_Resume
00002bbc	calll	std::terminate()
00002bc1	movl	%eax,%edi
00002bc3	movl	(%esi),%eax
00002bc5	movl	0x04(%eax),%eax
00002bc8	movl	%esi,(%esp)
00002bcb	call	*%eax
00002bcd	jmp	0x00002bb4
00002bcf	calll	std::terminate()
00002bd4	movl	%eax,%edi
00002bd6	testl	%esi,%esi
00002bd8	je	0x00002bb4
00002bda	movl	(%esi),%eax
00002bdc	movl	0x0c(%eax),%eax
00002bdf	movl	%esi,(%esp)
00002be2	call	*%eax
00002be4	movl	(%esi),%eax
00002be6	movl	0x04(%eax),%eax
00002be9	movl	%esi,(%esp)
00002bec	call	*%eax
00002bee	jmp	0x00002bb4
00002bf0	calll	std::terminate()
00002bf5	movl	(%esi),%eax
00002bf7	movl	0x04(%eax),%eax
00002bfa	movl	%esi,(%esp)
00002bfd	call	*%eax
00002bff	jmp	0x00002bf0
00002c01	calll	std::terminate()
00002c06	nopw	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::DrawSphere():
00002c10	pushl	%ebp
00002c11	movl	%esp,%ebp
00002c13	pushl	%ebx
00002c14	pushl	%edi
00002c15	pushl	%esi
00002c16	subl	$0x7c,%esp
00002c19	calll	0x00002c1e
00002c1e	popl	%edi
00002c1f	calll	_Plat_FloatTime
00002c24	fstps	0x94(%ebp)
00002c27	movl	0x08(%ebp),%esi
00002c2a	movss	0x94(%ebp),%xmm0
00002c2f	movss	%xmm0,0x90(%ebp)
00002c34	subss	0x000001b8(%esi),%xmm0
00002c3c	mulss	0x523ec-0x2c1e(%edi),%xmm0
00002c44	movss	%xmm0,0x04(%esp)
00002c4a	leal	0xb0(%ebp),%ebx
00002c4d	movl	%ebx,(%esp)
00002c50	calll	MatrixBuildRotateZ(VMatrix&, float)
00002c55	leal	0xa0(%ebp),%eax
00002c58	movl	%eax,0x08(%esp)
00002c5c	leal	0x000001ac(%esi),%eax
00002c62	movl	%eax,0x04(%esp)
00002c66	movl	%ebx,(%esp)
00002c69	calll	Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
00002c6e	movss	0xa0(%ebp),%xmm0
00002c73	movss	%xmm0,0x000001ac(%esi)
00002c7b	movss	0xa4(%ebp),%xmm0
00002c80	movss	%xmm0,0x000001b0(%esi)
00002c88	movss	0xa8(%ebp),%xmm0
00002c8d	movss	%xmm0,0x000001b4(%esi)
00002c95	movss	0x90(%ebp),%xmm0
00002c9a	movss	%xmm0,0x000001b8(%esi)
00002ca2	leal	0x98(%ebp),%eax
00002ca5	movl	%eax,0x08(%esp)
00002ca9	leal	0x9c(%ebp),%eax
00002cac	movl	%eax,0x04(%esp)
00002cb0	movl	%esi,(%esp)
00002cb3	calll	vgui::Panel::GetSize(int&, int&)
00002cb8	movl	0x9c(%ebp),%eax
00002cbb	movl	0x98(%ebp),%ecx
00002cbe	movl	%ecx,0x08(%esp)
00002cc2	movl	%eax,0x04(%esp)
00002cc6	calll	CVMTPreviewPanel::SetupProjectionMatrix(int, int)
00002ccb	movl	%esi,(%esp)
00002cce	calll	CVMTPreviewPanel::SetupLightingState()
00002cd3	movl	0x586e8-0x2c1e(%edi),%edi
00002cd9	movl	%edi,0x04(%esp)
00002cdd	movl	%esi,(%esp)
00002ce0	movl	$0x41400000,0x08(%esp)
00002ce8	calll	CVMTPreviewPanel::LookAt(Vector const&, float)
00002ced	movl	0x0000018c(%esi),%ecx
00002cf3	movl	(%ecx),%eax
00002cf5	movl	%ecx,(%esp)
00002cf8	call	*0x000000cc(%eax)
00002cfe	testb	%al,%al
00002d00	jne	0x00002d28
00002d02	movl	%edi,0x04(%esp)
00002d06	movl	%esi,(%esp)
00002d09	movl	$0x00000014,0x10(%esp)
00002d11	movl	$0x00000014,0x0c(%esp)
00002d19	movl	$0x41200000,0x08(%esp)
00002d21	calll	CVMTPreviewPanel::RenderSphere(Vector const&, float, int, int)
00002d26	jmp	0x00002d39
00002d28	movl	%edi,0x04(%esp)
00002d2c	movl	$0x41200000,0x08(%esp)
00002d34	calll	CVMTPreviewPanel::RenderSpriteCard(Vector const&, float)
00002d39	addl	$0x7c,%esp
00002d3c	popl	%esi
00002d3d	popl	%edi
00002d3e	popl	%ebx
00002d3f	popl	%ebp
00002d40	ret
00002d41	nopl	%cs:CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::SetupProjectionMatrix(int, int):
00002d50	pushl	%ebp
00002d51	movl	%esp,%ebp
00002d53	pushl	%edi
00002d54	pushl	%esi
00002d55	subl	$0x50,%esp
00002d58	calll	0x00002d5d
00002d5d	popl	%eax
00002d5e	cvtsi2ss	0x10(%ebp),%xmm1
00002d63	pxor	%xmm0,%xmm0
00002d67	ucomiss	%xmm0,%xmm1
00002d6a	jne	0x00002d78
00002d6c	jp	0x00002d78
00002d6e	movss	0x523f0-0x2d5d(%eax),%xmm0
00002d76	jmp	0x00002d83
00002d78	movl	0x0c(%ebp),%ecx
00002d7b	cvtsi2ss	%ecx,%xmm0
00002d7f	divss	%xmm1,%xmm0
00002d83	xorps	%xmm1,%xmm1
00002d86	movaps	%xmm1,0xe8(%ebp)
00002d8a	movaps	%xmm1,0xd8(%ebp)
00002d8e	movaps	%xmm1,0xc8(%ebp)
00002d92	movaps	%xmm1,0xb8(%ebp)
00002d96	movss	0x523f4-0x2d5d(%eax),%xmm1
00002d9e	movaps	%xmm1,%xmm2
00002da1	divss	%xmm0,%xmm2
00002da5	divss	%xmm2,%xmm1
00002da9	movl	$0x3f800000,0xb8(%ebp)
00002db0	movss	%xmm1,0xcc(%ebp)
00002db5	movl	$0xbf8001a3,0xe0(%ebp)
00002dbc	movl	$0xbf800000,0xf0(%ebp)
00002dc3	movl	$0xbdcccf6c,0xe4(%ebp)
00002dca	calll	vgui::MaterialSystem()
00002dcf	movl	(%eax),%ecx
00002dd1	movl	%eax,(%esp)
00002dd4	call	*0x00000188(%ecx)
00002dda	movl	%eax,%esi
00002ddc	testl	%esi,%esi
00002dde	je	0x00002dea
00002de0	movl	(%esi),%eax
00002de2	movl	0x08(%eax),%eax
00002de5	movl	%esi,(%esp)
00002de8	call	*%eax
00002dea	movl	(%esi),%eax
00002dec	movl	0x50(%eax),%eax
00002def	movl	%esi,(%esp)
00002df2	movl	$0x00000001,0x04(%esp)
00002dfa	call	*%eax
00002dfc	movl	(%esi),%eax
00002dfe	movl	0x5c(%eax),%eax
00002e01	leal	0xb8(%ebp),%ecx
00002e04	movl	%ecx,0x04(%esp)
00002e08	movl	%esi,(%esp)
00002e0b	call	*%eax
00002e0d	testl	%esi,%esi
00002e0f	je	0x00002e23
00002e11	movl	(%esi),%eax
00002e13	movl	0x0c(%eax),%eax
00002e16	movl	%esi,(%esp)
00002e19	call	*%eax
00002e1b	movl	(%esi),%eax
00002e1d	movl	%esi,(%esp)
00002e20	call	*0x04(%eax)
00002e23	addl	$0x50,%esp
00002e26	popl	%esi
00002e27	popl	%edi
00002e28	popl	%ebp
00002e29	ret
00002e2a	movl	%eax,%edi
00002e2c	movl	(%esi),%eax
00002e2e	movl	0x04(%eax),%eax
00002e31	movl	%esi,(%esp)
00002e34	call	*%eax
00002e36	movl	%edi,(%esp)
00002e39	calll	__Unwind_Resume
00002e3e	calll	std::terminate()
00002e43	movl	%eax,%edi
00002e45	movl	(%esi),%eax
00002e47	movl	0x04(%eax),%eax
00002e4a	movl	%esi,(%esp)
00002e4d	call	*%eax
00002e4f	jmp	0x00002e36
00002e51	calll	std::terminate()
00002e56	movl	%eax,%edi
00002e58	testl	%esi,%esi
00002e5a	je	0x00002e36
00002e5c	movl	(%esi),%eax
00002e5e	movl	0x0c(%eax),%eax
00002e61	movl	%esi,(%esp)
00002e64	call	*%eax
00002e66	movl	(%esi),%eax
00002e68	movl	0x04(%eax),%eax
00002e6b	movl	%esi,(%esp)
00002e6e	call	*%eax
00002e70	jmp	0x00002e36
00002e72	calll	std::terminate()
00002e77	movl	(%esi),%eax
00002e79	movl	0x04(%eax),%eax
00002e7c	movl	%esi,(%esp)
00002e7f	call	*%eax
00002e81	jmp	0x00002e72
00002e83	calll	std::terminate()
00002e88	nopl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::LookAt(Vector const&, float):
00002e90	pushl	%ebp
00002e91	movl	%esp,%ebp
00002e93	pushl	%ebx
00002e94	pushl	%edi
00002e95	pushl	%esi
00002e96	subl	$0x6c,%esp
00002e99	calll	0x00002e9e
00002e9e	popl	%edi
00002e9f	leal	0xec(%ebp),%eax
00002ea2	movl	%eax,0x08(%esp)
00002ea6	leal	0xf0(%ebp),%eax
00002ea9	movl	%eax,0x04(%esp)
00002ead	movl	0x08(%ebp),%ebx
00002eb0	movl	%ebx,(%esp)
00002eb3	calll	vgui::Panel::GetSize(int&, int&)
00002eb8	movl	0xec(%ebp),%eax
00002ebb	cmpl	0xf0(%ebp),%eax
00002ebe	jl	0x00002eca
00002ec0	movsd	0x52408-0x2e9e(%edi),%xmm0
00002ec8	jmp	0x00002ef3
00002eca	movl	0xf0(%ebp),%ecx
00002ecd	cvtsi2sd	%ecx,%xmm1
00002ed1	cvtsi2sd	%eax,%xmm0
00002ed5	mulsd	0x52410-0x2e9e(%edi),%xmm0
00002edd	divsd	%xmm1,%xmm0
00002ee1	movsd	%xmm0,(%esp)
00002ee6	calll	_atan
00002eeb	fstps	0xdc(%ebp)
00002eee	cvtss2sd	0xdc(%ebp),%xmm0
00002ef3	movl	0x0c(%ebp),%eax
00002ef6	movsd	%xmm0,(%esp)
00002efb	movss	(%eax),%xmm0
00002eff	movss	%xmm0,0xcc(%ebp)
00002f04	movss	0x04(%eax),%xmm0
00002f09	movss	%xmm0,0xc8(%ebp)
00002f0e	movss	0x000001ac(%ebx),%xmm0
00002f16	movss	%xmm0,0xc0(%ebp)
00002f1b	movss	0x000001b0(%ebx),%xmm0
00002f23	movss	%xmm0,0xbc(%ebp)
00002f28	movss	0x08(%eax),%xmm0
00002f2d	movss	%xmm0,0xc4(%ebp)
00002f32	movss	0x000001b4(%ebx),%xmm0
00002f3a	movss	%xmm0,0xb8(%ebp)
00002f3f	calll	_sin
00002f44	fstpt	0xa8(%ebp)
00002f47	calll	vgui::MaterialSystem()
00002f4c	movl	(%eax),%ecx
00002f4e	movl	%eax,(%esp)
00002f51	fldt	0xa8(%ebp)
00002f54	fstpl	0xd0(%ebp)
00002f57	movss	0x10(%ebp),%xmm0
00002f5c	cvtss2sd	%xmm0,%xmm0
00002f60	divsd	0xd0(%ebp),%xmm0
00002f65	movsd	%xmm0,0xa8(%ebp)
00002f6a	call	*0x00000188(%ecx)
00002f70	movl	%eax,%esi
00002f72	testl	%esi,%esi
00002f74	je	0x00002f80
00002f76	movl	(%esi),%eax
00002f78	movl	0x08(%eax),%eax
00002f7b	movl	%esi,(%esp)
00002f7e	call	*%eax
00002f80	addl	$0x000001ac,%ebx
00002f86	leal	0xe0(%ebp),%eax
00002f89	movl	%eax,0x04(%esp)
00002f8d	movl	%ebx,(%esp)
00002f90	calll	VectorAngles(Vector const&, QAngle&)
00002f95	movl	(%esi),%eax
00002f97	movl	0x50(%eax),%eax
00002f9a	movl	%esi,(%esp)
00002f9d	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00002fa5	call	*%eax
00002fa7	movl	(%esi),%eax
00002fa9	movl	0x7c(%eax),%eax
00002fac	movl	%esi,(%esp)
00002faf	call	*%eax
00002fb1	movl	(%esi),%eax
00002fb3	movl	0x0000008c(%eax),%eax
00002fb9	movl	%esi,(%esp)
00002fbc	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00002fc4	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00002fcc	movl	$0x3f800000,0x08(%esp)
00002fd4	movl	$0xc2b40000,0x04(%esp)
00002fdc	call	*%eax
00002fde	movl	(%esi),%eax
00002fe0	movl	0x0000008c(%eax),%eax
00002fe6	movl	%esi,(%esp)
00002fe9	movl	$0x3f800000,0x10(%esp)
00002ff1	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00002ff9	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00003001	movl	$0x42b40000,0x04(%esp)
00003009	call	*%eax
0000300b	movl	(%esi),%eax
0000300d	movl	0x0000008c(%eax),%eax
00003013	movss	0xe8(%ebp),%xmm0
00003018	xorps	0x52430-0x2e9e(%edi),%xmm0
0000301f	movss	%xmm0,0x04(%esp)
00003025	movl	%esi,(%esp)
00003028	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00003030	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00003038	movl	$0x3f800000,0x08(%esp)
00003040	call	*%eax
00003042	movl	(%esi),%eax
00003044	movl	0x0000008c(%eax),%eax
0000304a	movss	0xe0(%ebp),%xmm0
0000304f	xorps	0x52430-0x2e9e(%edi),%xmm0
00003056	movss	%xmm0,0x04(%esp)
0000305c	movl	%esi,(%esp)
0000305f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00003067	movl	$0x3f800000,0x0c(%esp)
0000306f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00003077	call	*%eax
00003079	movl	(%esi),%eax
0000307b	movl	0x0000008c(%eax),%eax
00003081	movss	0xe4(%ebp),%xmm0
00003086	xorps	0x52430-0x2e9e(%edi),%xmm0
0000308d	movss	%xmm0,0x04(%esp)
00003093	movl	%esi,(%esp)
00003096	movl	$0x3f800000,0x10(%esp)
0000309e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
000030a6	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000030ae	call	*%eax
000030b0	movsd	0xa8(%ebp),%xmm0
000030b5	cvtsd2ss	%xmm0,%xmm0
000030b9	movss	0xb8(%ebp),%xmm1
000030be	mulss	%xmm0,%xmm1
000030c2	movss	0xc4(%ebp),%xmm3
000030c7	subss	%xmm1,%xmm3
000030cb	movss	0xbc(%ebp),%xmm1
000030d0	mulss	%xmm0,%xmm1
000030d4	movss	0xc8(%ebp),%xmm2
000030d9	subss	%xmm1,%xmm2
000030dd	movss	0xc0(%ebp),%xmm4
000030e2	mulss	%xmm0,%xmm4
000030e6	movss	0xcc(%ebp),%xmm1
000030eb	subss	%xmm4,%xmm1
000030ef	movss	0x52430-0x2e9e(%edi),%xmm0
000030f7	xorps	%xmm0,%xmm3
000030fa	movl	(%esi),%eax
000030fc	movl	0x00000090(%eax),%eax
00003102	movss	%xmm3,0x0c(%esp)
00003108	xorps	%xmm0,%xmm2
0000310b	movss	%xmm2,0x08(%esp)
00003111	xorps	%xmm0,%xmm1
00003114	movss	%xmm1,0x04(%esp)
0000311a	movl	%esi,(%esp)
0000311d	call	*%eax
0000311f	testl	%esi,%esi
00003121	je	0x00003135
00003123	movl	(%esi),%eax
00003125	movl	0x0c(%eax),%eax
00003128	movl	%esi,(%esp)
0000312b	call	*%eax
0000312d	movl	(%esi),%eax
0000312f	movl	%esi,(%esp)
00003132	call	*0x04(%eax)
00003135	addl	$0x6c,%esp
00003138	popl	%esi
00003139	popl	%edi
0000313a	popl	%ebx
0000313b	popl	%ebp
0000313c	ret
0000313d	movl	%eax,%edi
0000313f	movl	(%esi),%eax
00003141	movl	0x04(%eax),%eax
00003144	movl	%esi,(%esp)
00003147	call	*%eax
00003149	movl	%edi,(%esp)
0000314c	calll	__Unwind_Resume
00003151	calll	std::terminate()
00003156	movl	%eax,%edi
00003158	movl	(%esi),%eax
0000315a	movl	0x04(%eax),%eax
0000315d	movl	%esi,(%esp)
00003160	call	*%eax
00003162	jmp	0x00003149
00003164	calll	std::terminate()
00003169	movl	%eax,%edi
0000316b	testl	%esi,%esi
0000316d	je	0x00003149
0000316f	movl	(%esi),%eax
00003171	movl	0x0c(%eax),%eax
00003174	movl	%esi,(%esp)
00003177	call	*%eax
00003179	movl	(%esi),%eax
0000317b	movl	0x04(%eax),%eax
0000317e	movl	%esi,(%esp)
00003181	call	*%eax
00003183	jmp	0x00003149
00003185	calll	std::terminate()
0000318a	movl	(%esi),%eax
0000318c	movl	0x04(%eax),%eax
0000318f	movl	%esi,(%esp)
00003192	call	*%eax
00003194	jmp	0x00003185
00003196	calll	std::terminate()
0000319b	nopl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVMTPreviewPanel::Paint():
000031a0	pushl	%ebp
000031a1	movl	%esp,%ebp
000031a3	pushl	%ebx
000031a4	pushl	%edi
000031a5	pushl	%esi
000031a6	subl	$0x2c,%esp
000031a9	calll	0x000031ae
000031ae	popl	%ebx
000031af	calll	vgui::MaterialSystem()
000031b4	movl	(%eax),%ecx
000031b6	movl	%eax,(%esp)
000031b9	call	*0x00000188(%ecx)
000031bf	movl	%eax,%esi
000031c1	testl	%esi,%esi
000031c3	je	0x000031cf
000031c5	movl	(%esi),%eax
000031c7	movl	0x08(%eax),%eax
000031ca	movl	%esi,(%esp)
000031cd	call	*%eax
000031cf	movl	0x08(%ebp),%ecx
000031d2	leal	0xec(%ebp),%eax
000031d5	movl	%eax,0x08(%esp)
000031d9	leal	0xf0(%ebp),%eax
000031dc	movl	%eax,0x04(%esp)
000031e0	movl	%ecx,(%esp)
000031e3	calll	vgui::Panel::GetSize(int&, int&)
000031e8	calll	vgui::MatSystemSurface()
000031ed	movl	(%eax),%ecx
000031ef	movl	0x00000268(%ecx),%ecx
000031f5	movl	0xf0(%ebp),%edx
000031f8	movl	0xec(%ebp),%edi
000031fb	movl	%edi,0x10(%esp)
000031ff	movl	%edx,0x0c(%esp)
00003203	movl	%eax,(%esp)
00003206	movl	$0x00000001,0x14(%esp)
0000320e	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00003216	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
0000321e	call	*%ecx
00003220	movl	0x08(%ebp),%eax
00003223	movl	0x0000018c(%eax),%ecx
00003229	movl	(%ecx),%eax
0000322b	movl	0x60(%eax),%eax
0000322e	movl	%ecx,(%esp)
00003231	movl	$0x00000001,0x04(%esp)
00003239	call	*%eax
0000323b	cmpb	$0x01,%al
0000323d	jne	0x000032d1
00003243	movl	s_pPowerOfTwoFrameBufferTexture-0x31ae(%ebx),%edi
00003249	testl	%edi,%edi
0000324b	jne	0x0000329f
0000324d	calll	vgui::MaterialSystem()
00003252	movl	(%eax),%ecx
00003254	movl	0x0000013c(%ecx),%ecx
0000325a	leal	0x531f4-0x31ae(%ebx),%edx
00003260	movl	%edx,0x08(%esp)
00003264	leal	0x531e3-0x31ae(%ebx),%edx
0000326a	movl	%edx,0x04(%esp)
0000326e	movl	%eax,(%esp)
00003271	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00003279	movl	$0x00000001,0x0c(%esp)
00003281	call	*%ecx
00003283	movl	%eax,0x04(%esp)
00003287	leal	s_pPowerOfTwoFrameBufferTexture-0x31ae(%ebx),%eax
0000328d	movl	%eax,(%esp)
00003290	calll	CTextureReference::Init(ITexture*)
00003295	movl	s_pPowerOfTwoFrameBufferTexture-0x31ae(%ebx),%edi
0000329b	testl	%edi,%edi
0000329d	je	0x000032d1
0000329f	movl	(%edi),%eax
000032a1	movl	0x3c(%eax),%eax
000032a4	movl	%edi,(%esp)
000032a7	call	*%eax
000032a9	testb	%al,%al
000032ab	jne	0x000032d1
000032ad	movl	(%esi),%eax
000032af	movl	0x44(%eax),%eax
000032b2	movl	%edi,0x04(%esp)
000032b6	movl	%esi,(%esp)
000032b9	call	*%eax
000032bb	movl	(%esi),%eax
000032bd	movl	0x48(%eax),%eax
000032c0	movl	%edi,0x04(%esp)
000032c4	movl	%esi,(%esp)
000032c7	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000032cf	call	*%eax
000032d1	movl	(%esi),%eax
000032d3	movl	0x00000124(%eax),%eax
000032d9	movl	%esi,(%esp)
000032dc	movl	$0x000000ff,0x10(%esp)
000032e4	movl	$0x00000044,0x0c(%esp)
000032ec	movl	$0x00000058,0x08(%esp)
000032f4	movl	$0x0000004c,0x04(%esp)
000032fc	call	*%eax
000032fe	movl	(%esi),%eax
00003300	movl	0x30(%eax),%eax
00003303	movl	%esi,(%esp)
00003306	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
0000330e	movl	$0x00000001,0x08(%esp)
00003316	movl	$0x00000001,0x04(%esp)
0000331e	call	*%eax
00003320	movl	(%esi),%eax
00003322	movl	0x000000ac(%eax),%eax
00003328	movl	%esi,(%esp)
0000332b	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00003333	call	*%eax
00003335	movl	(%esi),%eax
00003337	movl	0x000000d4(%eax),%eax
0000333d	movl	%esi,(%esp)
00003340	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00003348	call	*%eax
0000334a	movl	(%esi),%eax
0000334c	movl	0x24(%eax),%eax
0000334f	movl	0x08(%ebp),%ecx
00003352	movl	0x0000018c(%ecx),%ecx
00003358	movl	%ecx,0x04(%esp)
0000335c	movl	%esi,(%esp)
0000335f	movl	CVMTPreviewPanel::CVMTPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00003367	call	*%eax
00003369	movl	(%esi),%eax
0000336b	movl	0x000001b8(%eax),%eax
00003371	movl	0x08(%ebp),%ecx
00003374	movl	0x00000190(%ecx),%ecx
0000337a	movl	%ecx,0x04(%esp)
0000337e	movl	%esi,(%esp)
00003381	call	*%eax
00003383	movl	(%esi),%eax
00003385	movl	0x14(%eax),%eax
00003388	movl	0x08(%ebp),%ecx
0000338b	movl	0x00000194(%ecx),%ecx
00003391	movl	%ecx,0x04(%esp)
00003395	movl	%esi,(%esp)
00003398	call	*%eax
0000339a	movl	0x08(%ebp),%eax
0000339d	testb	$0x01,0x000001bc(%eax)
000033a4	jne	0x000033c3
000033a6	movl	%eax,%ecx
000033a8	movl	0x0000018c(%ecx),%eax
000033ae	movl	%ecx,%edi
000033b0	movl	(%eax),%ecx
000033b2	movl	0x000000cc(%ecx),%ecx
000033b8	movl	%eax,(%esp)
000033bb	call	*%ecx
000033bd	cmpb	$0x01,%al
000033bf	movl	%edi,%eax
000033c1	jne	0x00003407
000033c3	movl	%eax,(%esp)
000033c6	calll	CVMTPreviewPanel::DrawSphere()
000033cb	jmp	0x0000340f
000033cd	movl	%eax,%edi
000033cf	movl	(%esi),%eax
000033d1	movl	0x04(%eax),%eax
000033d4	movl	%esi,(%esp)
000033d7	call	*%eax
000033d9	movl	%edi,(%esp)
000033dc	calll	__Unwind_Resume
000033e1	calll	std::terminate()
000033e6	movl	%eax,%edi
000033e8	testl	%esi,%esi
000033ea	je	0x000033d9
000033ec	movl	(%esi),%eax
000033ee	movl	0x0c(%eax),%eax
000033f1	movl	%esi,(%esp)
000033f4	call	*%eax
000033f6	movl	(%esi),%eax
000033f8	movl	0x04(%eax),%eax
000033fb	movl	%esi,(%esp)
000033fe	call	*%eax
00003400	jmp	0x000033d9
00003402	calll	std::terminate()
00003407	movl	%eax,(%esp)
0000340a	calll	CVMTPreviewPanel::DrawRectangle()
0000340f	calll	vgui::MatSystemSurface()
00003414	movl	(%eax),%ecx
00003416	movl	0x0000026c(%ecx),%ecx
0000341c	movl	%eax,(%esp)
0000341f	call	*%ecx
00003421	testl	%esi,%esi
00003423	je	0x00003437
00003425	movl	(%esi),%eax
00003427	movl	0x0c(%eax),%eax
0000342a	movl	%esi,(%esp)
0000342d	call	*%eax
0000342f	movl	(%esi),%eax
00003431	movl	%esi,(%esp)
00003434	call	*0x04(%eax)
00003437	addl	$0x2c,%esp
0000343a	popl	%esi
0000343b	popl	%edi
0000343c	popl	%ebx
0000343d	popl	%ebp
0000343e	ret
0000343f	movl	%eax,%edi
00003441	movl	(%esi),%eax
00003443	movl	0x04(%eax),%eax
00003446	movl	%esi,(%esp)
00003449	call	*%eax
0000344b	jmp	0x000033d9
0000344d	calll	std::terminate()
00003452	calll	std::terminate()
00003457	movl	(%esi),%eax
00003459	movl	0x04(%eax),%eax
0000345c	movl	%esi,(%esp)
0000345f	call	*%eax
00003461	jmp	0x00003452
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(vtfpicker.o):
(__TEXT,__text) section
CVTFPicker::CVTFPicker(vgui::Panel*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	leal	0x3b30c-0xe(%ebx),%eax
00000015	movl	%eax,0x18(%esp)
00000019	leal	0x3b302-0xe(%ebx),%eax
0000001f	movl	%eax,0x14(%esp)
00000023	leal	0x3b2fe-0xe(%ebx),%eax
00000029	movl	%eax,0x10(%esp)
0000002d	leal	0x3b2f4-0xe(%ebx),%eax
00000033	movl	%eax,0x0c(%esp)
00000037	movl	0x0c(%ebp),%eax
0000003a	movl	%eax,0x08(%esp)
0000003e	leal	VTT for CVTFPicker-0xe+0x00000004(%ebx),%eax
00000044	movl	%eax,0xf0(%ebp)
00000047	movl	%eax,0x04(%esp)
0000004b	movl	0x08(%ebp),%esi
0000004e	movl	%esi,(%esp)
00000051	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000056	leal	vtable for CVTFPicker-0xe+0x0000000c(%ebx),%eax
0000005c	movl	%eax,(%esi)
0000005e	testb	$0x01,CVTFPicker::ChainToMap()::chained-0xe(%ebx)
00000065	jne	0x0000009c
00000067	movb	$0x01,CVTFPicker::ChainToMap()::chained-0xe(%ebx)
0000006e	leal	0x3b3b3-0xe(%ebx),%eax
00000074	movl	%eax,(%esp)
00000077	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000007c	movl	%eax,%esi
0000007e	leal	CVTFPicker::GetPanelClassName()-0xe(%ebx),%eax
00000084	movl	%eax,0x1c(%esi)
00000087	testl	%esi,%esi
00000089	je	0x0000009c
0000008b	leal	0x3b3a2-0xe(%ebx),%eax
00000091	movl	%eax,(%esp)
00000094	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000099	movl	%eax,0x18(%esi)
0000009c	testb	$0x01,CVTFPicker::ChainToAnimationMap()::chained-0xe(%ebx)
000000a3	jne	0x000000da
000000a5	movb	$0x01,CVTFPicker::ChainToAnimationMap()::chained-0xe(%ebx)
000000ac	leal	0x3b3b3-0xe(%ebx),%eax
000000b2	movl	%eax,(%esp)
000000b5	calll	FindOrAddPanelAnimationMap(char const*)
000000ba	movl	%eax,%esi
000000bc	leal	CVTFPicker::GetPanelClassName()-0xe(%ebx),%eax
000000c2	movl	%eax,0x18(%esi)
000000c5	testl	%esi,%esi
000000c7	je	0x000000da
000000c9	leal	0x3b3a2-0xe(%ebx),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	FindOrAddPanelAnimationMap(char const*)
000000d7	movl	%eax,0x14(%esi)
000000da	testb	$0x01,CVTFPicker::KB_ChainToMap()::chained-0xe(%ebx)
000000e1	jne	0x00000118
000000e3	movb	$0x01,CVTFPicker::KB_ChainToMap()::chained-0xe(%ebx)
000000ea	leal	0x3b3b3-0xe(%ebx),%eax
000000f0	movl	%eax,(%esp)
000000f3	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f8	movl	%eax,%esi
000000fa	leal	CVTFPicker::GetPanelClassName()-0xe(%ebx),%eax
00000100	movl	%eax,0x44(%esi)
00000103	testl	%esi,%esi
00000105	je	0x00000118
00000107	leal	0x3b3a2-0xe(%ebx),%eax
0000010d	movl	%eax,(%esp)
00000110	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000115	movl	%eax,0x18(%esi)
00000118	movl	$0x000001c4,(%esp)
0000011f	calll	operator new(unsigned long)
00000124	movl	%eax,%edi
00000126	leal	0x3b314-0xe(%ebx),%eax
0000012c	movl	%eax,0x08(%esp)
00000130	movl	0x08(%ebp),%esi
00000133	movl	%esi,0x04(%esp)
00000137	movl	%edi,(%esp)
0000013a	movl	$0x00000001,0x10(%esp)
00000142	movl	$0x00000001,0x0c(%esp)
0000014a	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
0000014f	movl	%edi,0x00000250(%esi)
00000155	movl	%edi,(%esp)
00000158	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x04(%esp)
00000160	calll	vgui::Panel::GetChild(int)
00000165	movl	%eax,0xec(%ebp)
00000168	movl	0x08(%ebp),%eax
0000016b	movl	0x00000250(%eax),%eax
00000171	movl	%eax,(%esp)
00000174	movl	$0x00000001,0x04(%esp)
0000017c	calll	vgui::Panel::GetChild(int)
00000181	movl	%eax,%esi
00000183	movl	$0x000001a8,(%esp)
0000018a	calll	operator new(unsigned long)
0000018f	movl	%eax,%edi
00000191	leal	0x3b324-0xe(%ebx),%eax
00000197	movl	%eax,0x08(%esp)
0000019b	movl	%esi,0x04(%esp)
0000019f	movl	%edi,(%esp)
000001a2	calll	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)
000001a7	movl	0x08(%ebp),%eax
000001aa	movl	%edi,0x0000024c(%eax)
000001b0	movl	0xec(%ebp),%ecx
000001b3	movl	%ecx,0x04(%esp)
000001b7	movl	%eax,(%esp)
000001ba	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
000001c2	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
000001c7	movl	0x08(%ebp),%edx
000001ca	movl	(%edx),%eax
000001cc	movl	0x00000354(%eax),%eax
000001d2	leal	0x3b32f-0xe(%ebx),%ecx
000001d8	movl	%ecx,0x04(%esp)
000001dc	movl	%edx,(%esp)
000001df	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
000001e7	call	*%eax
000001e9	addl	$0x2c,%esp
000001ec	popl	%esi
000001ed	popl	%edi
000001ee	popl	%ebx
000001ef	popl	%ebp
000001f0	ret
000001f1	movl	%eax,%esi
000001f3	jmp	0x00000201
000001f5	jmp	0x000001f7
000001f7	movl	%eax,%esi
000001f9	movl	%edi,(%esp)
000001fc	calll	operator delete(void*)
00000201	movl	0xf0(%ebp),%eax
00000204	movl	%eax,0x04(%esp)
00000208	movl	0x08(%ebp),%eax
0000020b	movl	%eax,(%esp)
0000020e	calll	CBaseAssetPicker::~CBaseAssetPicker()
00000213	movl	%esi,(%esp)
00000216	calll	__Unwind_Resume
0000021b	calll	std::terminate()
CVTFPicker::CVTFPicker(vgui::Panel*):
00000220	pushl	%ebp
00000221	movl	%esp,%ebp
00000223	pushl	%ebx
00000224	pushl	%edi
00000225	pushl	%esi
00000226	subl	$0x2c,%esp
00000229	calll	0x0000022e
0000022e	popl	%ebx
0000022f	leal	0x3b30c-0x22e(%ebx),%eax
00000235	movl	%eax,0x18(%esp)
00000239	leal	0x3b302-0x22e(%ebx),%eax
0000023f	movl	%eax,0x14(%esp)
00000243	leal	0x3b2fe-0x22e(%ebx),%eax
00000249	movl	%eax,0x10(%esp)
0000024d	leal	0x3b2f4-0x22e(%ebx),%eax
00000253	movl	%eax,0x0c(%esp)
00000257	movl	0x10(%ebp),%eax
0000025a	movl	%eax,0x08(%esp)
0000025e	movl	0x0c(%ebp),%esi
00000261	leal	0x04(%esi),%eax
00000264	movl	%eax,0xf0(%ebp)
00000267	movl	%eax,0x04(%esp)
0000026b	movl	0x08(%ebp),%edi
0000026e	movl	%edi,(%esp)
00000271	calll	CBaseAssetPicker::CBaseAssetPicker(vgui::Panel*, char const*, char const*, char const*, char const*)
00000276	movl	(%esi),%eax
00000278	movl	%eax,(%edi)
0000027a	testb	$0x01,CVTFPicker::ChainToMap()::chained-0x22e(%ebx)
00000281	jne	0x000002b8
00000283	movb	$0x01,CVTFPicker::ChainToMap()::chained-0x22e(%ebx)
0000028a	leal	0x3b3b3-0x22e(%ebx),%eax
00000290	movl	%eax,(%esp)
00000293	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000298	movl	%eax,%esi
0000029a	leal	CVTFPicker::GetPanelClassName()-0x22e(%ebx),%eax
000002a0	movl	%eax,0x1c(%esi)
000002a3	testl	%esi,%esi
000002a5	je	0x000002b8
000002a7	leal	0x3b3a2-0x22e(%ebx),%eax
000002ad	movl	%eax,(%esp)
000002b0	calll	vgui::FindOrAddPanelMessageMap(char const*)
000002b5	movl	%eax,0x18(%esi)
000002b8	testb	$0x01,CVTFPicker::ChainToAnimationMap()::chained-0x22e(%ebx)
000002bf	jne	0x000002f6
000002c1	movb	$0x01,CVTFPicker::ChainToAnimationMap()::chained-0x22e(%ebx)
000002c8	leal	0x3b3b3-0x22e(%ebx),%eax
000002ce	movl	%eax,(%esp)
000002d1	calll	FindOrAddPanelAnimationMap(char const*)
000002d6	movl	%eax,%esi
000002d8	leal	CVTFPicker::GetPanelClassName()-0x22e(%ebx),%eax
000002de	movl	%eax,0x18(%esi)
000002e1	testl	%esi,%esi
000002e3	je	0x000002f6
000002e5	leal	0x3b3a2-0x22e(%ebx),%eax
000002eb	movl	%eax,(%esp)
000002ee	calll	FindOrAddPanelAnimationMap(char const*)
000002f3	movl	%eax,0x14(%esi)
000002f6	testb	$0x01,CVTFPicker::KB_ChainToMap()::chained-0x22e(%ebx)
000002fd	jne	0x00000334
000002ff	movb	$0x01,CVTFPicker::KB_ChainToMap()::chained-0x22e(%ebx)
00000306	leal	0x3b3b3-0x22e(%ebx),%eax
0000030c	movl	%eax,(%esp)
0000030f	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000314	movl	%eax,%esi
00000316	leal	CVTFPicker::GetPanelClassName()-0x22e(%ebx),%eax
0000031c	movl	%eax,0x44(%esi)
0000031f	testl	%esi,%esi
00000321	je	0x00000334
00000323	leal	0x3b3a2-0x22e(%ebx),%eax
00000329	movl	%eax,(%esp)
0000032c	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000331	movl	%eax,0x18(%esi)
00000334	movl	$0x000001c4,(%esp)
0000033b	calll	operator new(unsigned long)
00000340	movl	%eax,%edi
00000342	leal	0x3b314-0x22e(%ebx),%eax
00000348	movl	%eax,0x08(%esp)
0000034c	movl	0x08(%ebp),%esi
0000034f	movl	%esi,0x04(%esp)
00000353	movl	%edi,(%esp)
00000356	movl	$0x00000001,0x10(%esp)
0000035e	movl	$0x00000001,0x0c(%esp)
00000366	calll	vgui::Splitter::Splitter(vgui::Panel*, char const*, vgui::SplitterMode_t, int)
0000036b	movl	%edi,0x00000250(%esi)
00000371	movl	%edi,(%esp)
00000374	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x04(%esp)
0000037c	calll	vgui::Panel::GetChild(int)
00000381	movl	%eax,0xec(%ebp)
00000384	movl	0x08(%ebp),%eax
00000387	movl	0x00000250(%eax),%eax
0000038d	movl	%eax,(%esp)
00000390	movl	$0x00000001,0x04(%esp)
00000398	calll	vgui::Panel::GetChild(int)
0000039d	movl	%eax,%esi
0000039f	movl	$0x000001a8,(%esp)
000003a6	calll	operator new(unsigned long)
000003ab	movl	%eax,%edi
000003ad	leal	0x3b324-0x22e(%ebx),%eax
000003b3	movl	%eax,0x08(%esp)
000003b7	movl	%esi,0x04(%esp)
000003bb	movl	%edi,(%esp)
000003be	calll	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)
000003c3	movl	0x08(%ebp),%eax
000003c6	movl	%edi,0x0000024c(%eax)
000003cc	movl	0xec(%ebp),%ecx
000003cf	movl	%ecx,0x04(%esp)
000003d3	movl	%eax,(%esp)
000003d6	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
000003de	calll	CBaseAssetPicker::CreateStandardControls(vgui::Panel*, bool)
000003e3	movl	0x08(%ebp),%edx
000003e6	movl	(%edx),%eax
000003e8	movl	0x00000354(%eax),%eax
000003ee	leal	0x3b32f-0x22e(%ebx),%ecx
000003f4	movl	%ecx,0x04(%esp)
000003f8	movl	%edx,(%esp)
000003fb	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
00000403	call	*%eax
00000405	addl	$0x2c,%esp
00000408	popl	%esi
00000409	popl	%edi
0000040a	popl	%ebx
0000040b	popl	%ebp
0000040c	ret
0000040d	movl	%eax,%esi
0000040f	jmp	0x0000041d
00000411	jmp	0x00000413
00000413	movl	%eax,%esi
00000415	movl	%edi,(%esp)
00000418	calll	operator delete(void*)
0000041d	movl	0xf0(%ebp),%eax
00000420	movl	%eax,0x04(%esp)
00000424	movl	0x08(%ebp),%eax
00000427	movl	%eax,(%esp)
0000042a	calll	CBaseAssetPicker::~CBaseAssetPicker()
0000042f	movl	%esi,(%esp)
00000432	calll	__Unwind_Resume
00000437	calll	std::terminate()
0000043c	nopl	CVTFPicker::CVTFPicker(vgui::Panel*)(%eax)
CVTFPicker::~CVTFPicker():
00000440	pushl	%ebp
00000441	movl	%esp,%ebp
00000443	pushl	%edi
00000444	pushl	%esi
00000445	subl	$0x10,%esp
00000448	calll	0x0000044d
0000044d	popl	%eax
0000044e	movl	0x08(%ebp),%edi
00000451	leal	VTT for CVTFPicker-0x44d+0x00000004(%eax),%eax
00000457	movl	%eax,0x04(%esp)
0000045b	movl	%edi,(%esp)
0000045e	calll	CBaseAssetPicker::~CBaseAssetPicker()
00000463	addl	$0x10,%esp
00000466	popl	%esi
00000467	popl	%edi
00000468	popl	%ebp
00000469	jmp	operator delete(void*)
0000046e	movl	%eax,%esi
00000470	movl	%edi,(%esp)
00000473	calll	operator delete(void*)
00000478	movl	%esi,(%esp)
0000047b	calll	__Unwind_Resume
CVTFPicker::~CVTFPicker():
00000480	pushl	%ebp
00000481	movl	%esp,%ebp
00000483	subl	$0x08,%esp
00000486	calll	0x0000048b
0000048b	popl	%eax
0000048c	leal	VTT for CVTFPicker-0x48b+0x00000004(%eax),%eax
00000492	movl	%eax,0x04(%esp)
00000496	movl	0x08(%ebp),%eax
00000499	movl	%eax,(%esp)
0000049c	calll	CBaseAssetPicker::~CBaseAssetPicker()
000004a1	addl	$0x08,%esp
000004a4	popl	%ebp
000004a5	ret
000004a6	nopw	%cs:CVTFPicker::CVTFPicker(vgui::Panel*)(%eax,%eax)
CVTFPicker::~CVTFPicker():
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	subl	$0x08,%esp
000004b6	movl	0x0c(%ebp),%eax
000004b9	addl	$0x04,%eax
000004bc	movl	%eax,0x04(%esp)
000004c0	movl	0x08(%ebp),%eax
000004c3	movl	%eax,(%esp)
000004c6	calll	CBaseAssetPicker::~CBaseAssetPicker()
000004cb	addl	$0x08,%esp
000004ce	popl	%ebp
000004cf	ret
CVTFPicker::OnSelectedAssetPicked(char const*):
000004d0	pushl	%ebp
000004d1	movl	%esp,%ebp
000004d3	subl	$0x18,%esp
000004d6	movl	0x08(%ebp),%eax
000004d9	movl	0x0000024c(%eax),%eax
000004df	movl	0x0c(%ebp),%ecx
000004e2	movl	%ecx,0x04(%esp)
000004e6	movl	%eax,(%esp)
000004e9	movl	$0x00000001,0x08(%esp)
000004f1	calll	CVTFPreviewPanel::SetVTF(char const*, bool)
000004f6	addl	$0x18,%esp
000004f9	popl	%ebp
000004fa	ret
000004fb	nopl	CVTFPicker::CVTFPicker(vgui::Panel*)(%eax,%eax)
CVTFPickerFrame::CVTFPickerFrame(vgui::Panel*, char const*):
00000500	pushl	%ebp
00000501	movl	%esp,%ebp
00000503	pushl	%ebx
00000504	pushl	%edi
00000505	pushl	%esi
00000506	subl	$0x1c,%esp
00000509	calll	0x0000050e
0000050e	popl	%ebx
0000050f	movl	0x0c(%ebp),%eax
00000512	movl	%eax,0x08(%esp)
00000516	leal	VTT for CVTFPickerFrame-0x50e+0x00000004(%ebx),%eax
0000051c	movl	%eax,0xf0(%ebp)
0000051f	movl	%eax,0x04(%esp)
00000523	movl	0x08(%ebp),%esi
00000526	movl	%esi,(%esp)
00000529	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
0000052e	leal	vtable for CVTFPickerFrame-0x50e+0x0000000c(%ebx),%eax
00000534	movl	%eax,(%esi)
00000536	testb	$0x01,CVTFPickerFrame::ChainToMap()::chained-0x50e(%ebx)
0000053d	jne	0x00000574
0000053f	movb	$0x01,CVTFPickerFrame::ChainToMap()::chained-0x50e(%ebx)
00000546	leal	0x3b37e-0x50e(%ebx),%eax
0000054c	movl	%eax,(%esp)
0000054f	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000554	movl	%eax,%esi
00000556	leal	CVTFPickerFrame::GetPanelClassName()-0x50e(%ebx),%eax
0000055c	movl	%eax,0x1c(%esi)
0000055f	testl	%esi,%esi
00000561	je	0x00000574
00000563	leal	0x3b368-0x50e(%ebx),%eax
00000569	movl	%eax,(%esp)
0000056c	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000571	movl	%eax,0x18(%esi)
00000574	testb	$0x01,CVTFPickerFrame::ChainToAnimationMap()::chained-0x50e(%ebx)
0000057b	jne	0x000005b2
0000057d	movb	$0x01,CVTFPickerFrame::ChainToAnimationMap()::chained-0x50e(%ebx)
00000584	leal	0x3b37e-0x50e(%ebx),%eax
0000058a	movl	%eax,(%esp)
0000058d	calll	FindOrAddPanelAnimationMap(char const*)
00000592	movl	%eax,%esi
00000594	leal	CVTFPickerFrame::GetPanelClassName()-0x50e(%ebx),%eax
0000059a	movl	%eax,0x18(%esi)
0000059d	testl	%esi,%esi
0000059f	je	0x000005b2
000005a1	leal	0x3b368-0x50e(%ebx),%eax
000005a7	movl	%eax,(%esp)
000005aa	calll	FindOrAddPanelAnimationMap(char const*)
000005af	movl	%eax,0x14(%esi)
000005b2	testb	$0x01,CVTFPickerFrame::KB_ChainToMap()::chained-0x50e(%ebx)
000005b9	jne	0x000005f0
000005bb	movb	$0x01,CVTFPickerFrame::KB_ChainToMap()::chained-0x50e(%ebx)
000005c2	leal	0x3b37e-0x50e(%ebx),%eax
000005c8	movl	%eax,(%esp)
000005cb	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000005d0	movl	%eax,%esi
000005d2	leal	CVTFPickerFrame::GetPanelClassName()-0x50e(%ebx),%eax
000005d8	movl	%eax,0x44(%esi)
000005db	testl	%esi,%esi
000005dd	je	0x000005f0
000005df	leal	0x3b368-0x50e(%ebx),%eax
000005e5	movl	%eax,(%esp)
000005e8	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000005ed	movl	%eax,0x18(%esi)
000005f0	movl	$0x00000254,(%esp)
000005f7	calll	operator new(unsigned long)
000005fc	movl	%eax,%edi
000005fe	movl	0x08(%ebp),%esi
00000601	movl	%esi,0x04(%esp)
00000605	movl	%edi,(%esp)
00000608	calll	CVTFPicker::CVTFPicker(vgui::Panel*)
0000060d	movl	%edi,0x04(%esp)
00000611	movl	%esi,(%esp)
00000614	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
00000619	movl	0x08(%ebp),%edx
0000061c	movl	(%edx),%eax
0000061e	movl	0x00000354(%eax),%eax
00000624	leal	0x3b346-0x50e(%ebx),%ecx
0000062a	movl	%ecx,0x04(%esp)
0000062e	movl	%edx,(%esp)
00000631	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
00000639	call	*%eax
0000063b	movl	0x10(%ebp),%ecx
0000063e	movl	0x08(%ebp),%edx
00000641	movl	(%edx),%eax
00000643	movl	0x000003ac(%eax),%eax
00000649	movl	%ecx,0x04(%esp)
0000064d	movl	%edx,(%esp)
00000650	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
00000658	call	*%eax
0000065a	addl	$0x1c,%esp
0000065d	popl	%esi
0000065e	popl	%edi
0000065f	popl	%ebx
00000660	popl	%ebp
00000661	ret
00000662	movl	%eax,%esi
00000664	jmp	0x00000670
00000666	movl	%eax,%esi
00000668	movl	%edi,(%esp)
0000066b	calll	operator delete(void*)
00000670	movl	0xf0(%ebp),%eax
00000673	movl	%eax,0x04(%esp)
00000677	movl	0x08(%ebp),%eax
0000067a	movl	%eax,(%esp)
0000067d	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
00000682	movl	%esi,(%esp)
00000685	calll	__Unwind_Resume
0000068a	calll	std::terminate()
0000068f	nop
CVTFPickerFrame::CVTFPickerFrame(vgui::Panel*, char const*):
00000690	pushl	%ebp
00000691	movl	%esp,%ebp
00000693	pushl	%ebx
00000694	pushl	%edi
00000695	pushl	%esi
00000696	subl	$0x1c,%esp
00000699	calll	0x0000069e
0000069e	popl	%ebx
0000069f	movl	0x10(%ebp),%eax
000006a2	movl	%eax,0x08(%esp)
000006a6	movl	0x0c(%ebp),%esi
000006a9	leal	0x04(%esi),%eax
000006ac	movl	%eax,0xf0(%ebp)
000006af	movl	%eax,0x04(%esp)
000006b3	movl	0x08(%ebp),%edi
000006b6	movl	%edi,(%esp)
000006b9	calll	CBaseAssetPickerFrame::CBaseAssetPickerFrame(vgui::Panel*)
000006be	movl	(%esi),%eax
000006c0	movl	%eax,(%edi)
000006c2	testb	$0x01,CVTFPickerFrame::ChainToMap()::chained-0x69e(%ebx)
000006c9	jne	0x00000700
000006cb	movb	$0x01,CVTFPickerFrame::ChainToMap()::chained-0x69e(%ebx)
000006d2	leal	0x3b37e-0x69e(%ebx),%eax
000006d8	movl	%eax,(%esp)
000006db	calll	vgui::FindOrAddPanelMessageMap(char const*)
000006e0	movl	%eax,%esi
000006e2	leal	CVTFPickerFrame::GetPanelClassName()-0x69e(%ebx),%eax
000006e8	movl	%eax,0x1c(%esi)
000006eb	testl	%esi,%esi
000006ed	je	0x00000700
000006ef	leal	0x3b368-0x69e(%ebx),%eax
000006f5	movl	%eax,(%esp)
000006f8	calll	vgui::FindOrAddPanelMessageMap(char const*)
000006fd	movl	%eax,0x18(%esi)
00000700	testb	$0x01,CVTFPickerFrame::ChainToAnimationMap()::chained-0x69e(%ebx)
00000707	jne	0x0000073e
00000709	movb	$0x01,CVTFPickerFrame::ChainToAnimationMap()::chained-0x69e(%ebx)
00000710	leal	0x3b37e-0x69e(%ebx),%eax
00000716	movl	%eax,(%esp)
00000719	calll	FindOrAddPanelAnimationMap(char const*)
0000071e	movl	%eax,%esi
00000720	leal	CVTFPickerFrame::GetPanelClassName()-0x69e(%ebx),%eax
00000726	movl	%eax,0x18(%esi)
00000729	testl	%esi,%esi
0000072b	je	0x0000073e
0000072d	leal	0x3b368-0x69e(%ebx),%eax
00000733	movl	%eax,(%esp)
00000736	calll	FindOrAddPanelAnimationMap(char const*)
0000073b	movl	%eax,0x14(%esi)
0000073e	testb	$0x01,CVTFPickerFrame::KB_ChainToMap()::chained-0x69e(%ebx)
00000745	jne	0x0000077c
00000747	movb	$0x01,CVTFPickerFrame::KB_ChainToMap()::chained-0x69e(%ebx)
0000074e	leal	0x3b37e-0x69e(%ebx),%eax
00000754	movl	%eax,(%esp)
00000757	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
0000075c	movl	%eax,%esi
0000075e	leal	CVTFPickerFrame::GetPanelClassName()-0x69e(%ebx),%eax
00000764	movl	%eax,0x44(%esi)
00000767	testl	%esi,%esi
00000769	je	0x0000077c
0000076b	leal	0x3b368-0x69e(%ebx),%eax
00000771	movl	%eax,(%esp)
00000774	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000779	movl	%eax,0x18(%esi)
0000077c	movl	$0x00000254,(%esp)
00000783	calll	operator new(unsigned long)
00000788	movl	%eax,%edi
0000078a	movl	0x08(%ebp),%esi
0000078d	movl	%esi,0x04(%esp)
00000791	movl	%edi,(%esp)
00000794	calll	CVTFPicker::CVTFPicker(vgui::Panel*)
00000799	movl	%edi,0x04(%esp)
0000079d	movl	%esi,(%esp)
000007a0	calll	CBaseAssetPickerFrame::SetAssetPicker(CBaseAssetPicker*)
000007a5	movl	0x08(%ebp),%edx
000007a8	movl	(%edx),%eax
000007aa	movl	0x00000354(%eax),%eax
000007b0	leal	0x3b346-0x69e(%ebx),%ecx
000007b6	movl	%ecx,0x04(%esp)
000007ba	movl	%edx,(%esp)
000007bd	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
000007c5	call	*%eax
000007c7	movl	0x14(%ebp),%ecx
000007ca	movl	0x08(%ebp),%edx
000007cd	movl	(%edx),%eax
000007cf	movl	0x000003ac(%eax),%eax
000007d5	movl	%ecx,0x04(%esp)
000007d9	movl	%edx,(%esp)
000007dc	movl	CVTFPicker::CVTFPicker(vgui::Panel*),0x08(%esp)
000007e4	call	*%eax
000007e6	addl	$0x1c,%esp
000007e9	popl	%esi
000007ea	popl	%edi
000007eb	popl	%ebx
000007ec	popl	%ebp
000007ed	ret
000007ee	movl	%eax,%esi
000007f0	jmp	0x000007fc
000007f2	movl	%eax,%esi
000007f4	movl	%edi,(%esp)
000007f7	calll	operator delete(void*)
000007fc	movl	0xf0(%ebp),%eax
000007ff	movl	%eax,0x04(%esp)
00000803	movl	0x08(%ebp),%eax
00000806	movl	%eax,(%esp)
00000809	calll	CBaseAssetPickerFrame::~CBaseAssetPickerFrame()
0000080e	movl	%esi,(%esp)
00000811	calll	__Unwind_Resume
00000816	calll	std::terminate()
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(vtfpreviewpanel.o):
(__TEXT,__text) section
CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%ebx
0000000f	movl	0x10(%ebp),%eax
00000012	movl	%eax,0x0c(%esp)
00000016	movl	0x0c(%ebp),%eax
00000019	movl	%eax,0x08(%esp)
0000001d	leal	VTT for CVTFPreviewPanel-0xe+0x00000004(%ebx),%eax
00000023	movl	%eax,0xf0(%ebp)
00000026	movl	%eax,0x04(%esp)
0000002a	movl	0x08(%ebp),%edi
0000002d	movl	%edi,(%esp)
00000030	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
00000035	leal	vtable for CVTFPreviewPanel-0xe+0x0000000c(%ebx),%eax
0000003b	movl	%eax,(%edi)
0000003d	testb	$0x01,CVTFPreviewPanel::ChainToMap()::chained-0xe(%ebx)
00000044	jne	0x0000007b
00000046	movb	$0x01,CVTFPreviewPanel::ChainToMap()::chained-0xe(%ebx)
0000004d	leal	0x50dac-0xe(%ebx),%eax
00000053	movl	%eax,(%esp)
00000056	calll	vgui::FindOrAddPanelMessageMap(char const*)
0000005b	movl	%eax,%esi
0000005d	leal	CVTFPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
00000063	movl	%eax,0x1c(%esi)
00000066	testl	%esi,%esi
00000068	je	0x0000007b
0000006a	leal	0x50dbd-0xe(%ebx),%eax
00000070	movl	%eax,(%esp)
00000073	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000078	movl	%eax,0x18(%esi)
0000007b	testb	$0x01,CVTFPreviewPanel::ChainToAnimationMap()::chained-0xe(%ebx)
00000082	jne	0x000000b9
00000084	movb	$0x01,CVTFPreviewPanel::ChainToAnimationMap()::chained-0xe(%ebx)
0000008b	leal	0x50dac-0xe(%ebx),%eax
00000091	movl	%eax,(%esp)
00000094	calll	FindOrAddPanelAnimationMap(char const*)
00000099	movl	%eax,%esi
0000009b	leal	CVTFPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
000000a1	movl	%eax,0x18(%esi)
000000a4	testl	%esi,%esi
000000a6	je	0x000000b9
000000a8	leal	0x50dbd-0xe(%ebx),%eax
000000ae	movl	%eax,(%esp)
000000b1	calll	FindOrAddPanelAnimationMap(char const*)
000000b6	movl	%eax,0x14(%esi)
000000b9	testb	$0x01,CVTFPreviewPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c0	jne	0x000000f7
000000c2	movb	$0x01,CVTFPreviewPanel::KB_ChainToMap()::chained-0xe(%ebx)
000000c9	leal	0x50dac-0xe(%ebx),%eax
000000cf	movl	%eax,(%esp)
000000d2	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000d7	movl	%eax,%esi
000000d9	leal	CVTFPreviewPanel::GetPanelClassName()-0xe(%ebx),%eax
000000df	movl	%eax,0x44(%esi)
000000e2	testl	%esi,%esi
000000e4	je	0x000000f7
000000e6	leal	0x50dbd-0xe(%ebx),%eax
000000ec	movl	%eax,(%esp)
000000ef	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
000000f4	movl	%eax,0x18(%esi)
000000f7	leal	0x0000017c(%edi),%eax
000000fd	movl	%eax,0xec(%ebp)
00000100	movl	%eax,(%esp)
00000103	calll	CUtlString::CUtlString()
00000108	leal	0x0000018c(%edi),%eax
0000010e	movl	%eax,0xe8(%ebp)
00000111	movl	%eax,(%esp)
00000114	calll	CTextureReference::CTextureReference()
00000119	leal	0x00000190(%edi),%eax
0000011f	movl	%eax,0xe4(%ebp)
00000122	movl	%eax,(%esp)
00000125	movl	$0x00000001,0x0c(%esp)
0000012d	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00000135	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
0000013d	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
00000142	leal	0x50d34-0xe(%ebx),%eax
00000148	movl	%eax,0x04(%esp)
0000014c	movl	%edi,(%esp)
0000014f	movl	%edi,%ebx
00000151	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00000159	calll	CVTFPreviewPanel::SetVTF(char const*, bool)
0000015e	calll	vgui::MatSystemSurface()
00000163	movl	(%eax),%ecx
00000165	movl	0x00000094(%ecx),%ecx
0000016b	movl	%eax,(%esp)
0000016e	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00000176	call	*%ecx
00000178	movl	%eax,0x00000194(%ebx)
0000017e	addl	$0x2c,%esp
00000181	popl	%esi
00000182	popl	%edi
00000183	popl	%ebx
00000184	popl	%ebp
00000185	ret
00000186	movl	%eax,%esi
00000188	jmp	0x000001d6
0000018a	movl	%eax,%esi
0000018c	jmp	0x000001ac
0000018e	movl	%eax,%esi
00000190	jmp	0x000001a1
00000192	movl	%eax,%esi
00000194	movl	0xe4(%ebp),%eax
00000197	movl	%eax,(%esp)
0000019a	calll	CMaterialReference::~CMaterialReference()
0000019f	movl	%ebx,%edi
000001a1	movl	0xe8(%ebp),%eax
000001a4	movl	%eax,(%esp)
000001a7	calll	CTextureReference::~CTextureReference()
000001ac	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000184(%edi)
000001b3	js	0x000001d6
000001b5	movl	0xec(%ebp),%ebx
000001b8	movl	(%ebx),%eax
000001ba	testl	%eax,%eax
000001bc	je	0x000001cc
000001be	movl	%eax,(%esp)
000001c1	calll	_free
000001c6	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),(%ebx)
000001cc	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000180(%edi)
000001d6	movl	0xf0(%ebp),%eax
000001d9	movl	%eax,0x04(%esp)
000001dd	movl	%edi,(%esp)
000001e0	calll	vgui::Panel::~Panel()
000001e5	movl	%esi,(%esp)
000001e8	calll	__Unwind_Resume
000001ed	calll	std::terminate()
000001f2	nopw	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::SetVTF(char const*, bool):
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	pushl	%ebx
00000204	pushl	%edi
00000205	pushl	%esi
00000206	subl	$0x1c,%esp
00000209	calll	0x0000020e
0000020e	popl	%ebx
0000020f	leal	0x50d5b-0x20e(%ebx),%eax
00000215	movl	%eax,0x08(%esp)
00000219	movl	0x0c(%ebp),%esi
0000021c	movl	%esi,0x04(%esp)
00000220	movl	0x08(%ebp),%edi
00000223	leal	0x0000018c(%edi),%eax
00000229	movl	%eax,0xf0(%ebp)
0000022c	movl	%eax,(%esp)
0000022f	movl	$0x00000001,0x0c(%esp)
00000237	calll	CTextureReference::Init(char const*, char const*, bool)
0000023c	movl	%esi,0x04(%esp)
00000240	leal	0x0000017c(%edi),%eax
00000246	movl	%eax,(%esp)
00000249	calll	CUtlString::operator=(char const*)
0000024e	movl	$0x00000020,(%esp)
00000255	calll	KeyValues::operator new(unsigned long)
0000025a	movl	%eax,%esi
0000025c	leal	0x50d6a-0x20e(%ebx),%eax
00000262	movl	%eax,0x04(%esp)
00000266	movl	%esi,(%esp)
00000269	calll	KeyValues::KeyValues(char const*)
0000026e	movl	0xf0(%ebp),%edi
00000271	movl	(%edi),%ecx
00000273	movl	(%ecx),%eax
00000275	movl	%ecx,(%esp)
00000278	call	*0x58(%eax)
0000027b	cmpb	$0x01,%al
0000027d	jne	0x0000028e
0000027f	movl	0x0c(%ebp),%edi
00000282	movl	%edi,0x08(%esp)
00000286	leal	0x50d77-0x20e(%ebx),%eax
0000028c	jmp	0x000002b5
0000028e	movl	(%edi),%ecx
00000290	movl	(%ecx),%eax
00000292	movl	%ecx,(%esp)
00000295	call	*0x5c(%eax)
00000298	movl	0x0c(%ebp),%edi
0000029b	cmpb	$0x01,%al
0000029d	jne	0x000002ab
0000029f	movl	%edi,0x08(%esp)
000002a3	leal	0x50d7f-0x20e(%ebx),%eax
000002a9	jmp	0x000002b5
000002ab	movl	%edi,0x08(%esp)
000002af	leal	0x50d88-0x20e(%ebx),%eax
000002b5	movl	%eax,0x04(%esp)
000002b9	movl	%esi,(%esp)
000002bc	calll	KeyValues::SetString(char const*, char const*)
000002c1	leal	0x50d95-0x20e(%ebx),%eax
000002c7	movl	%eax,0x04(%esp)
000002cb	movl	%esi,(%esp)
000002ce	movl	$0x00000001,0x08(%esp)
000002d6	calll	KeyValues::SetInt(char const*, int)
000002db	leal	0x50d9d-0x20e(%ebx),%eax
000002e1	movl	%eax,0x04(%esp)
000002e5	movl	%esi,(%esp)
000002e8	movl	$0x00000001,0x08(%esp)
000002f0	calll	KeyValues::SetInt(char const*, int)
000002f5	calll	vgui::MaterialSystem()
000002fa	movl	(%eax),%ecx
000002fc	movl	%esi,0x08(%esp)
00000300	movl	%edi,0x04(%esp)
00000304	movl	%eax,(%esp)
00000307	call	*0x00000118(%ecx)
0000030d	movl	%eax,0x04(%esp)
00000311	movl	0x08(%ebp),%edi
00000314	leal	0x00000190(%edi),%eax
0000031a	movl	%eax,(%esp)
0000031d	calll	CMaterialReference::Init(IMaterial*)
00000322	calll	vgui::MatSystemSurface()
00000327	movl	(%eax),%ecx
00000329	movl	0x00000190(%edi),%esi
0000032f	movl	0x00000194(%edi),%edx
00000335	movl	%esi,0x08(%esp)
00000339	movl	%edx,0x04(%esp)
0000033d	movl	%eax,(%esp)
00000340	call	*0x0000029c(%ecx)
00000346	movl	$0x3f800000,0x00000198(%edi)
00000350	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0000019c(%edi)
0000035a	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x000001a0(%edi)
00000364	calll	_Plat_FloatTime
00000369	fstps	0x000001a4(%edi)
0000036f	addl	$0x1c,%esp
00000372	popl	%esi
00000373	popl	%edi
00000374	popl	%ebx
00000375	popl	%ebp
00000376	ret
00000377	movl	%eax,%edi
00000379	movl	%esi,(%esp)
0000037c	calll	KeyValues::operator delete(void*)
00000381	movl	%edi,(%esp)
00000384	calll	__Unwind_Resume
00000389	calll	std::terminate()
0000038e	nop
CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*):
00000390	pushl	%ebp
00000391	movl	%esp,%ebp
00000393	pushl	%ebx
00000394	pushl	%edi
00000395	pushl	%esi
00000396	subl	$0x2c,%esp
00000399	calll	0x0000039e
0000039e	popl	%ebx
0000039f	movl	0x14(%ebp),%eax
000003a2	movl	%eax,0x0c(%esp)
000003a6	movl	0x10(%ebp),%eax
000003a9	movl	%eax,0x08(%esp)
000003ad	movl	0x0c(%ebp),%esi
000003b0	leal	0x04(%esi),%eax
000003b3	movl	%eax,0xf0(%ebp)
000003b6	movl	%eax,0x04(%esp)
000003ba	movl	0x08(%ebp),%edi
000003bd	movl	%edi,(%esp)
000003c0	calll	vgui::Panel::Panel(vgui::Panel*, char const*)
000003c5	movl	(%esi),%eax
000003c7	movl	%eax,(%edi)
000003c9	testb	$0x01,CVTFPreviewPanel::ChainToMap()::chained-0x39e(%ebx)
000003d0	jne	0x00000407
000003d2	movb	$0x01,CVTFPreviewPanel::ChainToMap()::chained-0x39e(%ebx)
000003d9	leal	0x50dac-0x39e(%ebx),%eax
000003df	movl	%eax,(%esp)
000003e2	calll	vgui::FindOrAddPanelMessageMap(char const*)
000003e7	movl	%eax,%esi
000003e9	leal	CVTFPreviewPanel::GetPanelClassName()-0x39e(%ebx),%eax
000003ef	movl	%eax,0x1c(%esi)
000003f2	testl	%esi,%esi
000003f4	je	0x00000407
000003f6	leal	0x50dbd-0x39e(%ebx),%eax
000003fc	movl	%eax,(%esp)
000003ff	calll	vgui::FindOrAddPanelMessageMap(char const*)
00000404	movl	%eax,0x18(%esi)
00000407	testb	$0x01,CVTFPreviewPanel::ChainToAnimationMap()::chained-0x39e(%ebx)
0000040e	jne	0x00000445
00000410	movb	$0x01,CVTFPreviewPanel::ChainToAnimationMap()::chained-0x39e(%ebx)
00000417	leal	0x50dac-0x39e(%ebx),%eax
0000041d	movl	%eax,(%esp)
00000420	calll	FindOrAddPanelAnimationMap(char const*)
00000425	movl	%eax,%esi
00000427	leal	CVTFPreviewPanel::GetPanelClassName()-0x39e(%ebx),%eax
0000042d	movl	%eax,0x18(%esi)
00000430	testl	%esi,%esi
00000432	je	0x00000445
00000434	leal	0x50dbd-0x39e(%ebx),%eax
0000043a	movl	%eax,(%esp)
0000043d	calll	FindOrAddPanelAnimationMap(char const*)
00000442	movl	%eax,0x14(%esi)
00000445	testb	$0x01,CVTFPreviewPanel::KB_ChainToMap()::chained-0x39e(%ebx)
0000044c	jne	0x00000483
0000044e	movb	$0x01,CVTFPreviewPanel::KB_ChainToMap()::chained-0x39e(%ebx)
00000455	leal	0x50dac-0x39e(%ebx),%eax
0000045b	movl	%eax,(%esp)
0000045e	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000463	movl	%eax,%esi
00000465	leal	CVTFPreviewPanel::GetPanelClassName()-0x39e(%ebx),%eax
0000046b	movl	%eax,0x44(%esi)
0000046e	testl	%esi,%esi
00000470	je	0x00000483
00000472	leal	0x50dbd-0x39e(%ebx),%eax
00000478	movl	%eax,(%esp)
0000047b	calll	vgui::FindOrAddPanelKeyBindingMap(char const*)
00000480	movl	%eax,0x18(%esi)
00000483	leal	0x0000017c(%edi),%eax
00000489	movl	%eax,0xec(%ebp)
0000048c	movl	%eax,(%esp)
0000048f	calll	CUtlString::CUtlString()
00000494	leal	0x0000018c(%edi),%eax
0000049a	movl	%eax,0xe8(%ebp)
0000049d	movl	%eax,(%esp)
000004a0	calll	CTextureReference::CTextureReference()
000004a5	leal	0x00000190(%edi),%eax
000004ab	movl	%eax,0xe4(%ebp)
000004ae	movl	%eax,(%esp)
000004b1	movl	$0x00000001,0x0c(%esp)
000004b9	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000004c1	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
000004c9	calll	CMaterialReference::CMaterialReference(char const*, char const*, bool)
000004ce	leal	0x50d34-0x39e(%ebx),%eax
000004d4	movl	%eax,0x04(%esp)
000004d8	movl	%edi,(%esp)
000004db	movl	%edi,%ebx
000004dd	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000004e5	calll	CVTFPreviewPanel::SetVTF(char const*, bool)
000004ea	calll	vgui::MatSystemSurface()
000004ef	movl	(%eax),%ecx
000004f1	movl	0x00000094(%ecx),%ecx
000004f7	movl	%eax,(%esp)
000004fa	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00000502	call	*%ecx
00000504	movl	%eax,0x00000194(%ebx)
0000050a	addl	$0x2c,%esp
0000050d	popl	%esi
0000050e	popl	%edi
0000050f	popl	%ebx
00000510	popl	%ebp
00000511	ret
00000512	movl	%eax,%esi
00000514	jmp	0x00000562
00000516	movl	%eax,%esi
00000518	jmp	0x00000538
0000051a	movl	%eax,%esi
0000051c	jmp	0x0000052d
0000051e	movl	%eax,%esi
00000520	movl	0xe4(%ebp),%eax
00000523	movl	%eax,(%esp)
00000526	calll	CMaterialReference::~CMaterialReference()
0000052b	movl	%ebx,%edi
0000052d	movl	0xe8(%ebp),%eax
00000530	movl	%eax,(%esp)
00000533	calll	CTextureReference::~CTextureReference()
00000538	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000184(%edi)
0000053f	js	0x00000562
00000541	movl	0xec(%ebp),%ebx
00000544	movl	(%ebx),%eax
00000546	testl	%eax,%eax
00000548	je	0x00000558
0000054a	movl	%eax,(%esp)
0000054d	calll	_free
00000552	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),(%ebx)
00000558	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000180(%edi)
00000562	movl	0xf0(%ebp),%eax
00000565	movl	%eax,0x04(%esp)
00000569	movl	%edi,(%esp)
0000056c	calll	vgui::Panel::~Panel()
00000571	movl	%esi,(%esp)
00000574	calll	__Unwind_Resume
00000579	calll	std::terminate()
0000057e	nop
CVTFPreviewPanel::~CVTFPreviewPanel():
00000580	pushl	%ebp
00000581	movl	%esp,%ebp
00000583	pushl	%edi
00000584	pushl	%esi
00000585	subl	$0x10,%esp
00000588	calll	0x0000058d
0000058d	popl	%eax
0000058e	movl	0x08(%ebp),%edi
00000591	leal	VTT for CVTFPreviewPanel-0x58d(%eax),%eax
00000597	movl	%eax,0x04(%esp)
0000059b	movl	%edi,(%esp)
0000059e	calll	CVTFPreviewPanel::~CVTFPreviewPanel()
000005a3	addl	$0x10,%esp
000005a6	popl	%esi
000005a7	popl	%edi
000005a8	popl	%ebp
000005a9	jmp	operator delete(void*)
000005ae	movl	%eax,%esi
000005b0	movl	%edi,(%esp)
000005b3	calll	operator delete(void*)
000005b8	movl	%esi,(%esp)
000005bb	calll	__Unwind_Resume
CVTFPreviewPanel::~CVTFPreviewPanel():
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	subl	$0x08,%esp
000005c6	calll	0x000005cb
000005cb	popl	%eax
000005cc	leal	VTT for CVTFPreviewPanel-0x5cb(%eax),%eax
000005d2	movl	%eax,0x04(%esp)
000005d6	movl	0x08(%ebp),%eax
000005d9	movl	%eax,(%esp)
000005dc	calll	CVTFPreviewPanel::~CVTFPreviewPanel()
000005e1	addl	$0x08,%esp
000005e4	popl	%ebp
000005e5	ret
000005e6	nopw	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::~CVTFPreviewPanel():
000005f0	pushl	%ebp
000005f1	movl	%esp,%ebp
000005f3	pushl	%ebx
000005f4	pushl	%edi
000005f5	pushl	%esi
000005f6	subl	$0x0c,%esp
000005f9	calll	0x000005fe
000005fe	popl	%eax
000005ff	movl	0x0c(%ebp),%edi
00000602	movl	(%edi),%ecx
00000604	movl	0x08(%ebp),%ebx
00000607	movl	%ecx,(%ebx)
00000609	movl	0x54aa4-0x5fe(%eax),%eax
0000060f	movl	(%eax),%eax
00000611	testl	%eax,%eax
00000613	je	0x0000063b
00000615	movl	0x00000194(%ebx),%ecx
0000061b	cmpl	$0xff,%ecx
0000061e	je	0x0000063b
00000620	movl	(%eax),%edx
00000622	movl	0x00000234(%edx),%edx
00000628	movl	%ecx,0x04(%esp)
0000062c	movl	%eax,(%esp)
0000062f	call	*%edx
00000631	movl	$0xffffffff,0x00000194(%ebx)
0000063b	leal	0x00000190(%ebx),%eax
00000641	movl	%eax,(%esp)
00000644	calll	CMaterialReference::~CMaterialReference()
00000649	leal	0x0000018c(%ebx),%eax
0000064f	movl	%eax,(%esp)
00000652	calll	CTextureReference::~CTextureReference()
00000657	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000184(%ebx)
0000065e	js	0x00000686
00000660	movl	0x0000017c(%ebx),%eax
00000666	testl	%eax,%eax
00000668	je	0x0000067c
0000066a	movl	%eax,(%esp)
0000066d	calll	_free
00000672	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0000017c(%ebx)
0000067c	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000180(%ebx)
00000686	addl	$0x04,%edi
00000689	movl	%edi,0x04(%esp)
0000068d	movl	%ebx,(%esp)
00000690	calll	vgui::Panel::~Panel()
00000695	addl	$0x0c,%esp
00000698	popl	%esi
00000699	popl	%edi
0000069a	popl	%ebx
0000069b	popl	%ebp
0000069c	ret
0000069d	movl	%eax,%esi
0000069f	jmp	0x000006b5
000006a1	movl	%eax,%esi
000006a3	jmp	0x000006c3
000006a5	movl	%eax,%esi
000006a7	leal	0x00000190(%ebx),%eax
000006ad	movl	%eax,(%esp)
000006b0	calll	CMaterialReference::~CMaterialReference()
000006b5	leal	0x0000018c(%ebx),%eax
000006bb	movl	%eax,(%esp)
000006be	calll	CTextureReference::~CTextureReference()
000006c3	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000184(%ebx)
000006ca	js	0x000006f2
000006cc	movl	0x0000017c(%ebx),%eax
000006d2	testl	%eax,%eax
000006d4	je	0x000006e8
000006d6	movl	%eax,(%esp)
000006d9	calll	_free
000006de	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0000017c(%ebx)
000006e8	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x00000180(%ebx)
000006f2	addl	$0x04,%edi
000006f5	movl	%edi,0x04(%esp)
000006f9	movl	%ebx,(%esp)
000006fc	calll	vgui::Panel::~Panel()
00000701	movl	%esi,(%esp)
00000704	calll	__Unwind_Resume
00000709	calll	std::terminate()
0000070e	nop
CVTFPreviewPanel::GetVTF() const:
00000710	pushl	%ebp
00000711	movl	%esp,%ebp
00000713	subl	$0x08,%esp
00000716	movl	$0x0000017c,%eax
0000071b	addl	0x08(%ebp),%eax
0000071e	movl	%eax,(%esp)
00000721	calll	CUtlString::operator char const*() const
00000726	addl	$0x08,%esp
00000729	popl	%ebp
0000072a	ret
0000072b	nopl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::RenderSphere(Vector const&, float, int, int):
00000730	pushl	%ebp
00000731	movl	%esp,%ebp
00000733	pushl	%ebx
00000734	pushl	%edi
00000735	pushl	%esi
00000736	subl	$0x0000029c,%esp
0000073c	calll	0x00000741
00000741	popl	%ebx
00000742	calll	vgui::MaterialSystem()
00000747	movl	(%eax),%ecx
00000749	movl	%eax,(%esp)
0000074c	call	*0x00000188(%ecx)
00000752	movl	%eax,%esi
00000754	testl	%esi,%esi
00000756	je	0x00000762
00000758	movl	(%esi),%eax
0000075a	movl	0x08(%eax),%eax
0000075d	movl	%esi,(%esp)
00000760	call	*%eax
00000762	movl	(%esi),%eax
00000764	movl	0x000000ac(%eax),%eax
0000076a	movl	%esi,(%esp)
0000076d	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00000775	call	*%eax
00000777	movl	(%esi),%eax
00000779	movl	0x000000d4(%eax),%eax
0000077f	movl	%esi,(%esp)
00000782	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
0000078a	call	*%eax
0000078c	movl	0x08(%ebp),%ecx
0000078f	movl	(%esi),%eax
00000791	movl	0x24(%eax),%eax
00000794	movl	0x00000190(%ecx),%ecx
0000079a	movl	%ecx,0x04(%esp)
0000079e	movl	%esi,(%esp)
000007a1	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000007a9	call	*%eax
000007ab	movl	(%esi),%eax
000007ad	movl	0x000000e0(%eax),%eax
000007b3	movl	%esi,(%esp)
000007b6	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
000007be	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
000007c6	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000007ce	movl	$0x00000001,0x04(%esp)
000007d6	call	*%eax
000007d8	movl	%esi,0xfffffd74(%ebp)
000007de	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
000007e8	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
000007f2	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000007fc	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00000806	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffeec(%ebp)
00000810	movl	$0xffffffff,0xfffffef0(%ebp)
0000081a	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffef4(%ebp)
00000824	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
0000082b	movl	$0xffffffff,0xe4(%ebp)
00000832	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xe8(%ebp)
00000839	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
00000840	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
00000847	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
0000084e	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
00000855	movl	$0xffffffff,0xffffff48(%ebp)
0000085f	movl	%eax,0xfffffebc(%ebp)
00000865	movb	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffec4(%ebp)
0000086c	movl	$0x00000003,0xfffffec0(%ebp)
00000876	movl	(%eax),%ecx
00000878	movl	0x30(%ecx),%ecx
0000087b	movl	%eax,(%esp)
0000087e	movl	%eax,0xfffffd70(%ebp)
00000884	movl	$0x00000003,0x04(%esp)
0000088c	call	*%ecx
0000088e	movl	0x18(%ebp),%eax
00000891	movl	%eax,0xfffffd94(%ebp)
00000897	movl	0x14(%ebp),%ecx
0000089a	movl	%eax,%esi
0000089c	imull	%ecx,%esi
0000089f	leal	0xff(%eax),%eax
000008a2	movl	%eax,0xfffffd98(%ebp)
000008a8	leal	0x02(%ecx,%ecx),%edi
000008ac	imull	%eax,%edi
000008af	movl	0xfffffebc(%ebp),%eax
000008b5	movl	(%eax),%ecx
000008b7	movl	0x4c(%ecx),%ecx
000008ba	leal	0xfffffe08(%ebp),%edx
000008c0	movl	%edx,0x0c(%esp)
000008c4	movl	%edi,0x08(%esp)
000008c8	movl	%esi,0x04(%esp)
000008cc	movl	%eax,(%esp)
000008cf	call	*%ecx
000008d1	movl	0xfffffd70(%ebp),%edx
000008d7	leal	0x04(%edx),%eax
000008da	testl	%edx,%edx
000008dc	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),%ecx
000008e1	cmovnel	%eax,%ecx
000008e4	movl	%ecx,0xfffffed8(%ebp)
000008ea	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffee0(%ebp)
000008f4	movl	%edi,0xfffffedc(%ebp)
000008fa	movb	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffef8(%ebp)
00000901	movl	0xfffffea4(%ebp),%eax
00000907	movl	%eax,0xfffffde0(%ebp)
0000090d	movl	%eax,0xfffffee4(%ebp)
00000913	movl	0xfffffeac(%ebp),%eax
00000919	movl	%eax,0xfffffec8(%ebp)
0000091f	movb	0xfffffeb8(%ebp),%al
00000925	movb	%al,0xfffffed4(%ebp)
0000092b	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
00000935	movl	0xffffff48(%ebp),%edi
0000093b	movl	%edx,0xa0(%ebp)
0000093e	leal	0xfffffe08(%ebp),%eax
00000944	movl	%eax,0x04(%esp)
00000948	leal	0xfffffefc(%ebp),%eax
0000094e	movl	%eax,(%esp)
00000951	movl	$0x000000a4,0x08(%esp)
00000959	calll	_memcpy
0000095e	movl	%esi,0xa8(%ebp)
00000961	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
00000968	setne	%al
0000096b	movzbl	%al,%eax
0000096e	addl	%eax,%eax
00000970	movl	%eax,0xffffff4c(%ebp)
00000976	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xac(%ebp)
0000097d	movb	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xa4(%ebp)
00000981	cmpl	$0xff,%edi
00000984	je	0x0000098c
00000986	movl	%edi,0xffffff48(%ebp)
0000098c	cmpl	$0xff,0xe4(%ebp)
00000990	movl	0x14(%ebp),%ecx
00000993	jne	0x000009ae
00000995	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xe0(%ebp)
0000099c	movl	0xfffffea8(%ebp),%eax
000009a2	movl	%eax,0xe4(%ebp)
000009a5	movl	0xfffffde0(%ebp),%eax
000009ab	movl	%eax,0xe8(%ebp)
000009ae	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffee8(%ebp)
000009b8	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xb0(%ebp)
000009bf	movl	0xffffff50(%ebp),%esi
000009c5	movl	%esi,0xb4(%ebp)
000009c8	movl	0xffffff5c(%ebp),%eax
000009ce	movl	%eax,0xb8(%ebp)
000009d1	movl	0xffffff68(%ebp),%eax
000009d7	movl	%eax,0xbc(%ebp)
000009da	movl	0xffffff6c(%ebp),%eax
000009e0	movl	%eax,0xc0(%ebp)
000009e3	movl	0xffffff70(%ebp),%eax
000009e9	movl	%eax,0xc4(%ebp)
000009ec	movl	0xffffff74(%ebp),%eax
000009f2	movl	%eax,0xc8(%ebp)
000009f5	movl	0xffffff78(%ebp),%eax
000009fb	movl	%eax,0xcc(%ebp)
000009fe	movl	0xffffff7c(%ebp),%eax
00000a04	movl	%eax,0xd0(%ebp)
00000a07	movl	0x80(%ebp),%eax
00000a0a	movl	%eax,0xd4(%ebp)
00000a0d	movl	0x84(%ebp),%eax
00000a10	movl	%eax,0xd8(%ebp)
00000a13	movl	0xffffff60(%ebp),%eax
00000a19	movl	%eax,0xdc(%ebp)
00000a1c	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x18(%ebp)
00000a20	jle	0x00000bec
00000a26	movss	0x10(%ebp),%xmm0
00000a2b	cvtss2sd	%xmm0,%xmm1
00000a2f	movsd	%xmm1,0xfffffd88(%ebp)
00000a37	cvtsi2ss	0xfffffd98(%ebp),%xmm1
00000a3f	movss	%xmm1,0xfffffd84(%ebp)
00000a47	xorps	0x501e0-0x741(%ebx),%xmm0
00000a4e	cvtss2sd	%xmm0,%xmm0
00000a52	movsd	%xmm0,0xfffffd78(%ebp)
00000a5a	leal	0xff(%ecx),%eax
00000a5d	movl	%eax,0xfffffda4(%ebp)
00000a63	cvtsi2ss	%eax,%xmm0
00000a67	movss	%xmm0,0xfffffda0(%ebp)
00000a6f	xorl	%eax,%eax
00000a71	jmp	0x00000bc3
00000a76	nopw	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
00000a80	mulss	%xmm7,%xmm1
00000a84	movss	%xmm1,0x08(%edx,%ecx)
00000a8a	movaps	%xmm3,%xmm7
00000a8d	mulss	%xmm6,%xmm7
00000a91	movaps	%xmm4,%xmm5
00000a94	mulss	%xmm1,%xmm5
00000a98	subss	%xmm7,%xmm5
00000a9c	movl	0xffffff38(%ebp),%eax
00000aa2	movl	0x8c(%ebp),%ecx
00000aa5	imull	0xb0(%ebp),%eax
00000aa9	movss	%xmm5,(%ecx,%eax)
00000aae	mulss	%xmm0,%xmm3
00000ab2	movaps	%xmm0,%xmm5
00000ab5	movaps	%xmm2,%xmm0
00000ab8	mulss	%xmm1,%xmm0
00000abc	subss	%xmm0,%xmm3
00000ac0	movaps	%xmm5,%xmm0
00000ac3	movss	%xmm3,0x04(%ecx,%eax)
00000ac9	mulss	%xmm0,%xmm4
00000acd	mulss	%xmm6,%xmm2
00000ad1	subss	%xmm4,%xmm2
00000ad5	movss	%xmm2,0x08(%ecx,%eax)
00000adb	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xffffff4c(%ebp)
00000ae2	jle	0x00000afb
00000ae4	movl	0xffffff00(%ebp),%eax
00000aea	movl	0xffffff54(%ebp),%ecx
00000af0	imull	0xb0(%ebp),%eax
00000af4	movl	$0x3f800000,(%ecx,%eax)
00000afb	movl	0xffffff04(%ebp),%eax
00000b01	movl	0xffffff58(%ebp),%ecx
00000b07	imull	0xb0(%ebp),%eax
00000b0b	movb	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x02(%eax,%ecx)
00000b10	movl	0xffffff40(%ebp),%eax
00000b16	movl	0x94(%ebp),%ecx
00000b19	imull	0xb0(%ebp),%eax
00000b1d	movss	%xmm0,(%ecx,%eax)
00000b22	movss	%xmm6,0x04(%ecx,%eax)
00000b28	movss	%xmm1,0x08(%ecx,%eax)
00000b2e	movl	$0x3f800000,0x0c(%ecx,%eax)
00000b36	movl	0xb0(%ebp),%eax
00000b39	incl	%eax
00000b3a	movl	%eax,0xb0(%ebp)
00000b3d	cmpl	0xac(%ebp),%eax
00000b40	jle	0x00000b45
00000b42	movl	%eax,0xac(%ebp)
00000b45	movl	0xb4(%ebp),%esi
00000b48	addl	0xfffffefc(%ebp),%esi
00000b4e	movl	%esi,0xb4(%ebp)
00000b51	movl	0xffffff08(%ebp),%eax
00000b57	addl	%eax,0xb8(%ebp)
00000b5a	movl	0xffffff0c(%ebp),%eax
00000b60	addl	%eax,0xdc(%ebp)
00000b63	movl	0xffffff14(%ebp),%eax
00000b69	addl	%eax,0xbc(%ebp)
00000b6c	movl	0xffffff18(%ebp),%eax
00000b72	addl	%eax,0xc0(%ebp)
00000b75	movl	0xffffff1c(%ebp),%eax
00000b7b	addl	%eax,0xc4(%ebp)
00000b7e	movl	0xffffff20(%ebp),%eax
00000b84	addl	%eax,0xc8(%ebp)
00000b87	movl	0xffffff24(%ebp),%eax
00000b8d	addl	%eax,0xcc(%ebp)
00000b90	movl	0xffffff28(%ebp),%eax
00000b96	addl	%eax,0xd0(%ebp)
00000b99	movl	0xffffff2c(%ebp),%eax
00000b9f	addl	%eax,0xd4(%ebp)
00000ba2	movl	0xffffff30(%ebp),%eax
00000ba8	addl	%eax,0xd8(%ebp)
00000bab	incl	%edi
00000bac	movl	0x14(%ebp),%ecx
00000baf	cmpl	%edi,%ecx
00000bb1	jne	0x00000e50
00000bb7	movl	0xfffffd9c(%ebp),%eax
00000bbd	incl	%eax
00000bbe	cmpl	0x18(%ebp),%eax
00000bc1	je	0x00000bec
00000bc3	testl	%ecx,%ecx
00000bc5	jg	0x00000d57
00000bcb	movl	%eax,0xfffffd9c(%ebp)
00000bd1	jmp	0x00000bb7
00000bd3	movl	%eax,%edi
00000bd5	movl	(%esi),%eax
00000bd7	movl	0x04(%eax),%eax
00000bda	movl	%esi,(%esp)
00000bdd	call	*%eax
00000bdf	movl	%edi,(%esp)
00000be2	calll	__Unwind_Resume
00000be7	calll	std::terminate()
00000bec	movl	%ebx,0xfffffdd0(%ebp)
00000bf2	cmpl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffd98(%ebp)
00000bf9	jle	0x00000d24
00000bff	leal	0xff(%ecx),%ebx
00000c02	addl	$0xfe,0xfffffd94(%ebp)
00000c09	xorl	%esi,%esi
00000c0b	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffdd8(%ebp)
00000c15	xorl	%eax,%eax
00000c17	nopw	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
00000c20	movl	%ebx,0xfffffde0(%ebp)
00000c26	movl	%eax,0xfffffdd4(%ebp)
00000c2c	testl	%ecx,%ecx
00000c2e	jle	0x00000ca2
00000c30	xorl	%edi,%edi
00000c32	movl	0xfffffee8(%ebp),%edx
00000c38	movl	0xfffffdd8(%ebp),%ecx
00000c3e	nop
00000c40	movl	0xfffffee4(%ebp),%esi
00000c46	addl	%ecx,%esi
00000c48	movl	0xfffffec8(%ebp),%ebx
00000c4e	movw	%si,(%ebx,%edx,2)
00000c52	movzbl	0xfffffed4(%ebp),%edx
00000c59	addl	0xfffffee8(%ebp),%edx
00000c5f	movl	%edx,0xfffffee8(%ebp)
00000c65	movl	0x14(%ebp),%eax
00000c68	leal	(%eax,%ecx),%esi
00000c6b	addl	0xfffffee4(%ebp),%esi
00000c71	movl	0xfffffec8(%ebp),%ebx
00000c77	movw	%si,(%ebx,%edx,2)
00000c7b	movl	0xfffffde0(%ebp),%ebx
00000c81	movzbl	0xfffffed4(%ebp),%edx
00000c88	addl	0xfffffee8(%ebp),%edx
00000c8e	movl	%edx,0xfffffee8(%ebp)
00000c94	movl	%edx,0xfffffee0(%ebp)
00000c9a	incl	%ecx
00000c9b	incl	%edi
00000c9c	cmpl	%edi,%eax
00000c9e	movl	%ebx,%esi
00000ca0	jne	0x00000c40
00000ca2	movl	0xfffffdd4(%ebp),%eax
00000ca8	cmpl	0xfffffd94(%ebp),%eax
00000cae	jge	0x00000d0c
00000cb0	leal	0x01(%esi),%ecx
00000cb3	addl	0xfffffee4(%ebp),%ecx
00000cb9	movl	0xfffffec8(%ebp),%edx
00000cbf	movl	0xfffffee8(%ebp),%edi
00000cc5	movw	%cx,(%edx,%edi,2)
00000cc9	movzbl	0xfffffed4(%ebp),%ecx
00000cd0	addl	0xfffffee8(%ebp),%ecx
00000cd6	movl	%ecx,0xfffffee8(%ebp)
00000cdc	movl	0x14(%ebp),%edx
00000cdf	leal	0x01(%esi,%edx),%edx
00000ce3	addl	0xfffffee4(%ebp),%edx
00000ce9	movl	0xfffffec8(%ebp),%edi
00000cef	movw	%dx,(%edi,%ecx,2)
00000cf3	movzbl	0xfffffed4(%ebp),%ecx
00000cfa	addl	0xfffffee8(%ebp),%ecx
00000d00	movl	%ecx,0xfffffee8(%ebp)
00000d06	movl	%ecx,0xfffffee0(%ebp)
00000d0c	movl	0x14(%ebp),%ecx
00000d0f	addl	%ecx,0xfffffdd8(%ebp)
00000d15	addl	%ecx,%ebx
00000d17	incl	%eax
00000d18	cmpl	0xfffffd98(%ebp),%eax
00000d1e	jne	0x00000c20
00000d24	testb	$0x01,0xfffffec4(%ebp)
00000d2b	movl	0xfffffdd0(%ebp),%edi
00000d31	je	0x000010da
00000d37	movl	0xfffffec0(%ebp),%eax
00000d3d	movl	0xac(%ebp),%edx
00000d40	leal	0xfc(%eax),%esi
00000d43	cmpl	$0x04,%esi
00000d46	ja	0x000010c2
00000d4c	xorl	%ecx,%ecx
00000d4e	addl	0x00000ab7(%edi,%esi,4),%edi
00000d55	jmp	*%edi
00000d57	cvtsi2ss	%eax,%xmm0
00000d5b	movl	%eax,0xfffffd9c(%ebp)
00000d61	divss	0xfffffd84(%ebp),%xmm0
00000d69	movss	%xmm0,0xfffffdcc(%ebp)
00000d71	cvtss2sd	%xmm0,%xmm0
00000d75	mulsd	0x50200-0x741(%ebx),%xmm0
00000d7d	cvtsd2ss	%xmm0,%xmm0
00000d81	cvtss2sd	%xmm0,%xmm0
00000d85	movsd	%xmm0,0xfffffde0(%ebp)
00000d8d	movsd	%xmm0,(%esp)
00000d92	calll	_cos
00000d97	movsd	0xfffffde0(%ebp),%xmm0
00000d9f	movsd	%xmm0,(%esp)
00000da4	fstpl	0xfffffe00(%ebp)
00000daa	calll	_sin
00000daf	fstpl	0xfffffdf8(%ebp)
00000db5	movsd	0xfffffdf8(%ebp),%xmm2
00000dbd	movsd	0xfffffd78(%ebp),%xmm0
00000dc5	mulsd	%xmm2,%xmm0
00000dc9	movsd	%xmm0,0xfffffdb8(%ebp)
00000dd1	movsd	0xfffffe00(%ebp),%xmm0
00000dd9	movsd	0xfffffd88(%ebp),%xmm1
00000de1	mulsd	%xmm1,%xmm0
00000de5	mulsd	%xmm1,%xmm2
00000de9	movsd	%xmm2,0xfffffdc0(%ebp)
00000df1	movss	0x50220-0x741(%ebx),%xmm1
00000df9	mulss	0xfffffdcc(%ebp),%xmm1
00000e01	cvttss2si	%xmm1,%eax
00000e05	movzbl	%al,%eax
00000e08	movl	%eax,%ecx
00000e0a	shll	$0x18,%ecx
00000e0d	movl	%ecx,0xfffffdb0(%ebp)
00000e13	movl	%eax,%ecx
00000e15	shll	$0x10,%ecx
00000e18	movl	%ecx,0xfffffdac(%ebp)
00000e1e	shll	$0x08,%eax
00000e21	movl	%eax,0xfffffdb4(%ebp)
00000e27	cvtsd2ss	%xmm0,%xmm0
00000e2b	movss	%xmm0,0xfffffde0(%ebp)
00000e33	mulss	%xmm0,%xmm0
00000e37	movss	%xmm0,0xfffffda8(%ebp)
00000e3f	xorl	%edi,%edi
00000e41	nopl	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
00000e50	cvtsi2ss	%edi,%xmm1
00000e54	divss	0xfffffda0(%ebp),%xmm1
00000e5c	pxor	%xmm0,%xmm0
00000e60	cmpl	%edi,0xfffffda4(%ebp)
00000e66	je	0x00000e7c
00000e68	cvtss2sd	%xmm1,%xmm0
00000e6c	mulsd	0x50208-0x741(%ebx),%xmm0
00000e74	cvtsd2ss	%xmm0,%xmm0
00000e78	cvtss2sd	%xmm0,%xmm0
00000e7c	movsd	%xmm0,0xfffffdd8(%ebp)
00000e84	movsd	%xmm0,(%esp)
00000e89	movss	%xmm1,0xfffffdd4(%ebp)
00000e91	calll	_sin
00000e96	movsd	0xfffffdd8(%ebp),%xmm0
00000e9e	movsd	%xmm0,(%esp)
00000ea3	fstpl	0xfffffdf0(%ebp)
00000ea9	calll	_cos
00000eae	fstpl	0xfffffde8(%ebp)
00000eb4	movsd	0xfffffdf0(%ebp),%xmm0
00000ebc	mulsd	0xfffffdb8(%ebp),%xmm0
00000ec4	cvtsd2ss	%xmm0,%xmm7
00000ec8	movss	%xmm7,0xfffffdd8(%ebp)
00000ed0	movaps	%xmm7,%xmm0
00000ed3	mulss	%xmm0,%xmm0
00000ed7	movss	%xmm0,0xfffffdd0(%ebp)
00000edf	movaps	%xmm0,%xmm3
00000ee2	movl	0x0c(%ebp),%eax
00000ee5	movss	0x08(%eax),%xmm1
00000eea	addss	%xmm7,%xmm1
00000eee	movss	0x04(%eax),%xmm2
00000ef3	addss	0xfffffde0(%ebp),%xmm2
00000efb	movsd	0xfffffde8(%ebp),%xmm0
00000f03	mulsd	0xfffffdc0(%ebp),%xmm0
00000f0b	cvtsd2ss	%xmm0,%xmm5
00000f0f	movaps	%xmm5,%xmm6
00000f12	mulss	%xmm6,%xmm6
00000f16	movss	(%eax),%xmm0
00000f1a	addss	%xmm5,%xmm0
00000f1e	movss	%xmm0,(%esi)
00000f22	movss	%xmm2,0x04(%esi)
00000f27	movss	%xmm1,0x08(%esi)
00000f2c	movaps	%xmm6,%xmm1
00000f2f	addss	0xfffffda8(%ebp),%xmm1
00000f37	addss	%xmm3,%xmm1
00000f3b	addss	0x50224-0x741(%ebx),%xmm1
00000f43	xorps	%xmm0,%xmm0
00000f46	movss	%xmm1,%xmm0
00000f4a	rsqrtss	%xmm0,%xmm2
00000f4e	movaps	%xmm2,%xmm4
00000f51	mulss	%xmm4,%xmm4
00000f55	mulss	%xmm1,%xmm4
00000f59	movss	0x50228-0x741(%ebx),%xmm1
00000f61	movaps	%xmm1,%xmm3
00000f64	subss	%xmm4,%xmm3
00000f68	mulss	0x5022c-0x741(%ebx),%xmm3
00000f70	mulss	%xmm2,%xmm3
00000f74	movaps	%xmm5,%xmm2
00000f77	mulss	%xmm3,%xmm2
00000f7b	movl	0xb8(%ebp),%eax
00000f7e	movss	%xmm2,(%eax)
00000f82	movss	0xfffffde0(%ebp),%xmm4
00000f8a	mulss	%xmm3,%xmm4
00000f8e	movss	%xmm4,0x04(%eax)
00000f93	mulss	%xmm7,%xmm3
00000f97	movss	%xmm3,0x08(%eax)
00000f9c	movss	0x50220-0x741(%ebx),%xmm0
00000fa4	movss	0xfffffdd4(%ebp),%xmm7
00000fac	mulss	%xmm7,%xmm0
00000fb0	cvttss2si	%xmm0,%eax
00000fb4	movzbl	%al,%eax
00000fb7	orl	0xfffffdb0(%ebp),%eax
00000fbd	orl	0xfffffdac(%ebp),%eax
00000fc3	orl	0xfffffdb4(%ebp),%eax
00000fc9	movl	0xdc(%ebp),%ecx
00000fcc	movl	%eax,(%ecx)
00000fce	movl	0xbc(%ebp),%eax
00000fd1	movss	%xmm7,(%eax)
00000fd5	movss	0xfffffdcc(%ebp),%xmm0
00000fdd	movss	%xmm0,0x04(%eax)
00000fe2	movl	0xc0(%ebp),%eax
00000fe5	movss	%xmm7,(%eax)
00000fe9	movss	%xmm0,0x04(%eax)
00000fee	movl	0xc4(%ebp),%eax
00000ff1	movss	%xmm7,(%eax)
00000ff5	movss	%xmm0,0x04(%eax)
00000ffa	addss	0xfffffdd0(%ebp),%xmm6
00001002	pxor	%xmm0,%xmm0
00001006	addss	%xmm0,%xmm6
0000100a	addss	0x50224-0x741(%ebx),%xmm6
00001012	xorps	%xmm0,%xmm0
00001015	movss	%xmm6,%xmm0
00001019	rsqrtss	%xmm0,%xmm7
0000101d	movaps	%xmm7,%xmm0
00001020	mulss	%xmm0,%xmm0
00001024	mulss	%xmm6,%xmm0
00001028	subss	%xmm0,%xmm1
0000102c	mulss	0x5022c-0x741(%ebx),%xmm1
00001034	mulss	%xmm7,%xmm1
00001038	pxor	%xmm7,%xmm7
0000103c	mulss	%xmm1,%xmm6
00001040	ucomiss	%xmm7,%xmm6
00001043	setnp	%ah
00001046	sete	%al
00001049	testb	%ah,%al
0000104b	je	0x00001057
0000104d	movss	0x50230-0x741(%ebx),%xmm0
00001055	jmp	0x00001063
00001057	movss	0xfffffdd8(%ebp),%xmm0
0000105f	mulss	%xmm1,%xmm0
00001063	movl	0xffffff34(%ebp),%ecx
00001069	movl	0x88(%ebp),%edx
0000106c	imull	0xb0(%ebp),%ecx
00001070	movss	%xmm0,(%edx,%ecx)
00001075	andb	%ah,%al
00001077	pxor	%xmm6,%xmm6
0000107b	jne	0x0000108b
0000107d	xorps	0x501e0-0x741(%ebx),%xmm5
00001084	mulss	%xmm1,%xmm5
00001088	movaps	%xmm5,%xmm6
0000108b	movss	%xmm6,0x04(%edx,%ecx)
00001091	testb	%al,%al
00001093	je	0x00000a80
00001099	pxor	%xmm1,%xmm1
0000109d	jmp	0x00000a84
000010a2	imull	$0x06,%edx,%edx
000010a5	movl	%edx,%ecx
000010a7	sarl	$0x1f,%ecx
000010aa	shrl	$0x1e,%ecx
000010ad	addl	%edx,%ecx
000010af	sarl	$0x02,%ecx
000010b2	jmp	0x000010c4
000010b4	leal	0xfa(%edx,%edx,2),%ecx
000010b8	jmp	0x000010c4
000010ba	leal	0xfe(%edx,%edx),%ecx
000010be	jmp	0x000010c4
000010c0	addl	%edx,%edx
000010c2	movl	%edx,%ecx
000010c4	movl	%ecx,0x08(%esp)
000010c8	movl	%eax,0x04(%esp)
000010cc	leal	0xfffffec8(%ebp),%eax
000010d2	movl	%eax,(%esp)
000010d5	calll	CIndexBuilder::GenerateIndices(MaterialPrimitiveType_t, int)
000010da	movl	0xfffffebc(%ebp),%eax
000010e0	movl	0xfffffee0(%ebp),%edx
000010e6	movl	(%eax),%ecx
000010e8	movl	0x58(%ecx),%ecx
000010eb	movl	0xac(%ebp),%esi
000010ee	leal	0xfffffe08(%ebp),%edi
000010f4	movl	%edi,0x0c(%esp)
000010f8	movl	%edx,0x08(%esp)
000010fc	movl	%esi,0x04(%esp)
00001100	movl	%eax,(%esp)
00001103	call	*%ecx
00001105	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffed8(%ebp)
0000110f	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffedc(%ebp)
00001119	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xa8(%ebp)
00001120	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xa0(%ebp)
00001127	movl	$0xffffffff,0xffffff48(%ebp)
00001131	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0xfffffebc(%ebp)
0000113b	movl	0xfffffd70(%ebp),%ecx
00001141	movl	(%ecx),%eax
00001143	movl	0x34(%eax),%eax
00001146	movl	%ecx,(%esp)
00001149	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001151	movl	$0xffffffff,0x04(%esp)
00001159	call	*%eax
0000115b	leal	0xfffffe08(%ebp),%eax
00001161	movl	%eax,(%esp)
00001164	movl	0xfffffd74(%ebp),%esi
0000116a	calll	CMeshBuilder::~CMeshBuilder()
0000116f	testl	%esi,%esi
00001171	je	0x00001185
00001173	movl	(%esi),%eax
00001175	movl	0x0c(%eax),%eax
00001178	movl	%esi,(%esp)
0000117b	call	*%eax
0000117d	movl	(%esi),%eax
0000117f	movl	%esi,(%esp)
00001182	call	*0x04(%eax)
00001185	addl	$0x0000029c,%esp
0000118b	popl	%esi
0000118c	popl	%edi
0000118d	popl	%ebx
0000118e	popl	%ebp
0000118f	ret
00001190	movl	%eax,%edi
00001192	movl	(%esi),%eax
00001194	movl	0x04(%eax),%eax
00001197	movl	%esi,(%esp)
0000119a	call	*%eax
0000119c	jmp	0x00000bdf
000011a1	calll	std::terminate()
000011a6	movl	%eax,%edi
000011a8	testl	%esi,%esi
000011aa	je	0x00000bdf
000011b0	movl	(%esi),%eax
000011b2	movl	0x0c(%eax),%eax
000011b5	movl	%esi,(%esp)
000011b8	call	*%eax
000011ba	movl	(%esi),%eax
000011bc	movl	0x04(%eax),%eax
000011bf	movl	%esi,(%esp)
000011c2	call	*%eax
000011c4	jmp	0x00000bdf
000011c9	calll	std::terminate()
000011ce	movl	%eax,%edi
000011d0	leal	0xfffffe08(%ebp),%eax
000011d6	movl	%eax,(%esp)
000011d9	calll	CMeshBuilder::~CMeshBuilder()
000011de	movl	0xfffffd74(%ebp),%esi
000011e4	jmp	0x000011a8
000011e6	movl	(%esi),%eax
000011e8	movl	0x04(%eax),%eax
000011eb	movl	%esi,(%esp)
000011ee	call	*%eax
000011f0	jmp	0x000011c9
000011f2	calll	std::terminate()
000011f7	nop
000011f8	jns	0x00001203
000011fa	addb	%al,(%eax)
000011fc	jg	0x00001207
000011fe	addb	%al,(%eax)
00001200	jae	0x0000120b
00001202	addb	%al,(%eax)
00001204	popal
00001205	orl	%eax,(%eax)
00001207	addb	%al,0x0f000009(%ebx)
0000120d	popl	%ds
0000120e	incl	%eax
0000120f	addb	%dl,0x89(%ebp)
00001212	inl	$0x53,%eax
00001214	pushl	%edi
00001215	pushl	%esi
00001216	subl	$0x2c,%esp
00001219	calll	0x0000121e
0000121e	popl	%ebx
0000121f	leal	0xec(%ebp),%eax
00001222	movl	%eax,0x08(%esp)
00001226	leal	0xf0(%ebp),%eax
00001229	movl	%eax,0x04(%esp)
0000122d	movl	0x08(%ebp),%edi
00001230	movl	%edi,(%esp)
00001233	calll	vgui::Panel::GetSize(int&, int&)
00001238	movl	0x54aa4-0x121e(%ebx),%esi
0000123e	movl	%esi,0xe8(%ebp)
00001241	movl	(%esi),%ecx
00001243	movl	(%ecx),%eax
00001245	movl	0x00000194(%edi),%edx
0000124b	movl	%edx,0x04(%esp)
0000124f	movl	%ecx,(%esp)
00001252	call	*0x00000080(%eax)
00001258	movl	(%esi),%ecx
0000125a	movl	(%ecx),%eax
0000125c	movl	%ecx,(%esp)
0000125f	movl	$0x000000ff,0x10(%esp)
00001267	movl	$0x000000ff,0x0c(%esp)
0000126f	movl	$0x000000ff,0x08(%esp)
00001277	movl	$0x000000ff,0x04(%esp)
0000127f	call	*0x28(%eax)
00001282	movl	0x0000018c(%edi),%ecx
00001288	movl	(%ecx),%eax
0000128a	movl	%ecx,(%esp)
0000128d	call	*0x0c(%eax)
00001290	movl	%eax,%esi
00001292	movl	0x0000018c(%edi),%ecx
00001298	movl	(%ecx),%eax
0000129a	movl	%ecx,(%esp)
0000129d	call	*0x10(%eax)
000012a0	xorl	%edx,%edx
000012a2	movl	0xec(%ebp),%ecx
000012a5	testl	%eax,%eax
000012a7	jle	0x0000130d
000012a9	testl	%ecx,%ecx
000012ab	jle	0x0000130d
000012ad	cvtsi2ss	%ecx,%xmm0
000012b1	movl	0xf0(%ebp),%edi
000012b4	cvtsi2ss	%edi,%xmm1
000012b8	movaps	%xmm1,%xmm3
000012bb	divss	%xmm0,%xmm3
000012bf	cvtsi2ss	%eax,%xmm4
000012c3	cvtsi2ss	%esi,%xmm2
000012c7	divss	%xmm4,%xmm2
000012cb	movaps	%xmm2,%xmm4
000012ce	divss	%xmm3,%xmm4
000012d2	ucomiss	0x50234-0x121e(%ebx),%xmm4
000012d9	jbe	0x000012f7
000012db	divss	%xmm2,%xmm1
000012df	cvttss2si	%xmm1,%esi
000012e3	movl	%esi,0xec(%ebp)
000012e6	subl	%esi,%ecx
000012e8	movl	%ecx,%eax
000012ea	shrl	$0x1f,%eax
000012ed	addl	%ecx,%eax
000012ef	sarl	%eax
000012f1	xorl	%edx,%edx
000012f3	movl	%esi,%ecx
000012f5	jmp	0x0000130f
000012f7	mulss	%xmm2,%xmm0
000012fb	cvttss2si	%xmm0,%eax
000012ff	movl	%eax,0xf0(%ebp)
00001302	subl	%eax,%edi
00001304	movl	%edi,%edx
00001306	shrl	$0x1f,%edx
00001309	addl	%edi,%edx
0000130b	sarl	%edx
0000130d	xorl	%eax,%eax
0000130f	addl	%eax,%ecx
00001311	movl	0xe8(%ebp),%esi
00001314	movl	(%esi),%edi
00001316	movl	(%edi),%esi
00001318	movl	0xf0(%ebp),%ebx
0000131b	addl	%edx,%ebx
0000131d	movl	%ecx,0x10(%esp)
00001321	movl	%ebx,0x0c(%esp)
00001325	movl	%eax,0x08(%esp)
00001329	movl	%edx,0x04(%esp)
0000132d	movl	%edi,(%esp)
00001330	call	*0x00000088(%esi)
00001336	addl	$0x2c,%esp
00001339	popl	%esi
0000133a	popl	%edi
0000133b	popl	%ebx
0000133c	popl	%ebp
0000133d	ret
0000133e	nop
CVTFPreviewPanel::PaintNormalMapTexture():
00001340	ret
00001341	nopl	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::PaintVolumeTexture():
00001350	ret
00001351	nopl	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::PaintCubeTexture():
00001360	pushl	%ebp
00001361	movl	%esp,%ebp
00001363	pushl	%ebx
00001364	pushl	%edi
00001365	pushl	%esi
00001366	subl	$0x7c,%esp
00001369	calll	0x0000136e
0000136e	popl	%edi
0000136f	calll	_Plat_FloatTime
00001374	fstps	0x9c(%ebp)
00001377	movl	0x08(%ebp),%esi
0000137a	movss	0x9c(%ebp),%xmm0
0000137f	movss	%xmm0,0x98(%ebp)
00001384	subss	0x000001a4(%esi),%xmm0
0000138c	mulss	0x50238-0x136e(%edi),%xmm0
00001394	movss	%xmm0,0x04(%esp)
0000139a	leal	0xb0(%ebp),%ebx
0000139d	movl	%ebx,(%esp)
000013a0	calll	MatrixBuildRotateZ(VMatrix&, float)
000013a5	leal	0xa0(%ebp),%eax
000013a8	movl	%eax,0x08(%esp)
000013ac	leal	0x00000198(%esi),%eax
000013b2	movl	%eax,0x04(%esp)
000013b6	movl	%ebx,(%esp)
000013b9	calll	Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
000013be	movss	0xa0(%ebp),%xmm0
000013c3	movss	%xmm0,0x00000198(%esi)
000013cb	movss	0xa4(%ebp),%xmm0
000013d0	movss	%xmm0,0x0000019c(%esi)
000013d8	movss	0xa8(%ebp),%xmm0
000013dd	movss	%xmm0,0x000001a0(%esi)
000013e5	movss	0x98(%ebp),%xmm0
000013ea	movss	%xmm0,0x000001a4(%esi)
000013f2	movl	0x54aa8-0x136e(%edi),%edi
000013f8	movl	%edi,0x04(%esp)
000013fc	movl	%esi,(%esp)
000013ff	movl	$0x41400000,0x08(%esp)
00001407	calll	CVTFPreviewPanel::LookAt(Vector const&, float)
0000140c	movl	%edi,0x04(%esp)
00001410	movl	%esi,(%esp)
00001413	movl	$0x00000014,0x10(%esp)
0000141b	movl	$0x00000014,0x0c(%esp)
00001423	movl	$0x41200000,0x08(%esp)
0000142b	calll	CVTFPreviewPanel::RenderSphere(Vector const&, float, int, int)
00001430	addl	$0x7c,%esp
00001433	popl	%esi
00001434	popl	%edi
00001435	popl	%ebx
00001436	popl	%ebp
00001437	ret
00001438	nopl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::LookAt(Vector const&, float):
00001440	pushl	%ebp
00001441	movl	%esp,%ebp
00001443	pushl	%ebx
00001444	pushl	%edi
00001445	pushl	%esi
00001446	subl	$0x6c,%esp
00001449	calll	0x0000144e
0000144e	popl	%edi
0000144f	leal	0xec(%ebp),%eax
00001452	movl	%eax,0x08(%esp)
00001456	leal	0xf0(%ebp),%eax
00001459	movl	%eax,0x04(%esp)
0000145d	movl	0x08(%ebp),%ebx
00001460	movl	%ebx,(%esp)
00001463	calll	vgui::Panel::GetSize(int&, int&)
00001468	movl	0xec(%ebp),%eax
0000146b	cmpl	0xf0(%ebp),%eax
0000146e	jl	0x0000147a
00001470	movsd	0x50210-0x144e(%edi),%xmm0
00001478	jmp	0x000014a3
0000147a	movl	0xf0(%ebp),%ecx
0000147d	cvtsi2sd	%ecx,%xmm1
00001481	cvtsi2sd	%eax,%xmm0
00001485	mulsd	0x50218-0x144e(%edi),%xmm0
0000148d	divsd	%xmm1,%xmm0
00001491	movsd	%xmm0,(%esp)
00001496	calll	_atan
0000149b	fstps	0xdc(%ebp)
0000149e	cvtss2sd	0xdc(%ebp),%xmm0
000014a3	movl	0x0c(%ebp),%eax
000014a6	movsd	%xmm0,(%esp)
000014ab	movss	(%eax),%xmm0
000014af	movss	%xmm0,0xcc(%ebp)
000014b4	movss	0x04(%eax),%xmm0
000014b9	movss	%xmm0,0xc8(%ebp)
000014be	movss	0x00000198(%ebx),%xmm0
000014c6	movss	%xmm0,0xc0(%ebp)
000014cb	movss	0x0000019c(%ebx),%xmm0
000014d3	movss	%xmm0,0xbc(%ebp)
000014d8	movss	0x08(%eax),%xmm0
000014dd	movss	%xmm0,0xc4(%ebp)
000014e2	movss	0x000001a0(%ebx),%xmm0
000014ea	movss	%xmm0,0xb8(%ebp)
000014ef	calll	_sin
000014f4	fstpt	0xa8(%ebp)
000014f7	calll	vgui::MaterialSystem()
000014fc	movl	(%eax),%ecx
000014fe	movl	%eax,(%esp)
00001501	fldt	0xa8(%ebp)
00001504	fstpl	0xd0(%ebp)
00001507	movss	0x10(%ebp),%xmm0
0000150c	cvtss2sd	%xmm0,%xmm0
00001510	divsd	0xd0(%ebp),%xmm0
00001515	movsd	%xmm0,0xa8(%ebp)
0000151a	call	*0x00000188(%ecx)
00001520	movl	%eax,%esi
00001522	testl	%esi,%esi
00001524	je	0x00001530
00001526	movl	(%esi),%eax
00001528	movl	0x08(%eax),%eax
0000152b	movl	%esi,(%esp)
0000152e	call	*%eax
00001530	addl	$0x00000198,%ebx
00001536	leal	0xe0(%ebp),%eax
00001539	movl	%eax,0x04(%esp)
0000153d	movl	%ebx,(%esp)
00001540	calll	VectorAngles(Vector const&, QAngle&)
00001545	movl	(%esi),%eax
00001547	movl	0x50(%eax),%eax
0000154a	movl	%esi,(%esp)
0000154d	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
00001555	call	*%eax
00001557	movl	(%esi),%eax
00001559	movl	0x7c(%eax),%eax
0000155c	movl	%esi,(%esp)
0000155f	call	*%eax
00001561	movl	(%esi),%eax
00001563	movl	0x0000008c(%eax),%eax
00001569	movl	%esi,(%esp)
0000156c	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00001574	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
0000157c	movl	$0x3f800000,0x08(%esp)
00001584	movl	$0xc2b40000,0x04(%esp)
0000158c	call	*%eax
0000158e	movl	(%esi),%eax
00001590	movl	0x0000008c(%eax),%eax
00001596	movl	%esi,(%esp)
00001599	movl	$0x3f800000,0x10(%esp)
000015a1	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
000015a9	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
000015b1	movl	$0x42b40000,0x04(%esp)
000015b9	call	*%eax
000015bb	movl	(%esi),%eax
000015bd	movl	0x0000008c(%eax),%eax
000015c3	movss	0xe8(%ebp),%xmm0
000015c8	xorps	0x501f0-0x144e(%edi),%xmm0
000015cf	movss	%xmm0,0x04(%esp)
000015d5	movl	%esi,(%esp)
000015d8	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
000015e0	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
000015e8	movl	$0x3f800000,0x08(%esp)
000015f0	call	*%eax
000015f2	movl	(%esi),%eax
000015f4	movl	0x0000008c(%eax),%eax
000015fa	movss	0xe0(%ebp),%xmm0
000015ff	xorps	0x501f0-0x144e(%edi),%xmm0
00001606	movss	%xmm0,0x04(%esp)
0000160c	movl	%esi,(%esp)
0000160f	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x10(%esp)
00001617	movl	$0x3f800000,0x0c(%esp)
0000161f	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001627	call	*%eax
00001629	movl	(%esi),%eax
0000162b	movl	0x0000008c(%eax),%eax
00001631	movss	0xe4(%ebp),%xmm0
00001636	xorps	0x501f0-0x144e(%edi),%xmm0
0000163d	movss	%xmm0,0x04(%esp)
00001643	movl	%esi,(%esp)
00001646	movl	$0x3f800000,0x10(%esp)
0000164e	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
00001656	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
0000165e	call	*%eax
00001660	movsd	0xa8(%ebp),%xmm0
00001665	cvtsd2ss	%xmm0,%xmm0
00001669	movss	0xb8(%ebp),%xmm1
0000166e	mulss	%xmm0,%xmm1
00001672	movss	0xc4(%ebp),%xmm3
00001677	subss	%xmm1,%xmm3
0000167b	movss	0xbc(%ebp),%xmm1
00001680	mulss	%xmm0,%xmm1
00001684	movss	0xc8(%ebp),%xmm2
00001689	subss	%xmm1,%xmm2
0000168d	movss	0xc0(%ebp),%xmm4
00001692	mulss	%xmm0,%xmm4
00001696	movss	0xcc(%ebp),%xmm1
0000169b	subss	%xmm4,%xmm1
0000169f	movss	0x501f0-0x144e(%edi),%xmm0
000016a7	xorps	%xmm0,%xmm3
000016aa	movl	(%esi),%eax
000016ac	movl	0x00000090(%eax),%eax
000016b2	movss	%xmm3,0x0c(%esp)
000016b8	xorps	%xmm0,%xmm2
000016bb	movss	%xmm2,0x08(%esp)
000016c1	xorps	%xmm0,%xmm1
000016c4	movss	%xmm1,0x04(%esp)
000016ca	movl	%esi,(%esp)
000016cd	call	*%eax
000016cf	testl	%esi,%esi
000016d1	je	0x000016e5
000016d3	movl	(%esi),%eax
000016d5	movl	0x0c(%eax),%eax
000016d8	movl	%esi,(%esp)
000016db	call	*%eax
000016dd	movl	(%esi),%eax
000016df	movl	%esi,(%esp)
000016e2	call	*0x04(%eax)
000016e5	addl	$0x6c,%esp
000016e8	popl	%esi
000016e9	popl	%edi
000016ea	popl	%ebx
000016eb	popl	%ebp
000016ec	ret
000016ed	movl	%eax,%edi
000016ef	movl	(%esi),%eax
000016f1	movl	0x04(%eax),%eax
000016f4	movl	%esi,(%esp)
000016f7	call	*%eax
000016f9	movl	%edi,(%esp)
000016fc	calll	__Unwind_Resume
00001701	calll	std::terminate()
00001706	movl	%eax,%edi
00001708	movl	(%esi),%eax
0000170a	movl	0x04(%eax),%eax
0000170d	movl	%esi,(%esp)
00001710	call	*%eax
00001712	jmp	0x000016f9
00001714	calll	std::terminate()
00001719	movl	%eax,%edi
0000171b	testl	%esi,%esi
0000171d	je	0x000016f9
0000171f	movl	(%esi),%eax
00001721	movl	0x0c(%eax),%eax
00001724	movl	%esi,(%esp)
00001727	call	*%eax
00001729	movl	(%esi),%eax
0000172b	movl	0x04(%eax),%eax
0000172e	movl	%esi,(%esp)
00001731	call	*%eax
00001733	jmp	0x000016f9
00001735	calll	std::terminate()
0000173a	movl	(%esi),%eax
0000173c	movl	0x04(%eax),%eax
0000173f	movl	%esi,(%esp)
00001742	call	*%eax
00001744	jmp	0x00001735
00001746	calll	std::terminate()
0000174b	nopl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::SetupProjectionMatrix(int, int):
00001750	pushl	%ebp
00001751	movl	%esp,%ebp
00001753	pushl	%edi
00001754	pushl	%esi
00001755	subl	$0x50,%esp
00001758	calll	0x0000175d
0000175d	popl	%edi
0000175e	calll	vgui::MaterialSystem()
00001763	movl	(%eax),%ecx
00001765	movl	%eax,(%esp)
00001768	call	*0x00000188(%ecx)
0000176e	movl	%eax,%esi
00001770	testl	%esi,%esi
00001772	je	0x0000177e
00001774	movl	(%esi),%eax
00001776	movl	0x08(%eax),%eax
00001779	movl	%esi,(%esp)
0000177c	call	*%eax
0000177e	movl	0x10(%ebp),%eax
00001781	cvtsi2ss	%eax,%xmm0
00001785	pxor	%xmm1,%xmm1
00001789	ucomiss	%xmm1,%xmm0
0000178c	jne	0x000017b8
0000178e	jp	0x000017b8
00001790	movss	0x5023c-0x175d(%edi),%xmm0
00001798	movss	%xmm0,0xb4(%ebp)
0000179d	jmp	0x000017c8
0000179f	movl	%eax,%edi
000017a1	movl	(%esi),%eax
000017a3	movl	0x04(%eax),%eax
000017a6	movl	%esi,(%esp)
000017a9	call	*%eax
000017ab	movl	%edi,(%esp)
000017ae	calll	__Unwind_Resume
000017b3	calll	std::terminate()
000017b8	movl	0x0c(%ebp),%eax
000017bb	cvtsi2ss	%eax,%xmm1
000017bf	divss	%xmm0,%xmm1
000017c3	movss	%xmm1,0xb4(%ebp)
000017c8	movl	$0x3fe921fb,0x04(%esp)
000017d0	movl	$0x54442d18,(%esp)
000017d7	calll	_tan
000017dc	fstp	%st(0)
000017de	xorps	%xmm0,%xmm0
000017e1	movaps	%xmm0,0xe8(%ebp)
000017e5	movaps	%xmm0,0xd8(%ebp)
000017e9	movaps	%xmm0,0xc8(%ebp)
000017ed	movaps	%xmm0,0xb8(%ebp)
000017f1	movss	0x50240-0x175d(%edi),%xmm0
000017f9	movaps	%xmm0,%xmm1
000017fc	divss	0xb4(%ebp),%xmm1
00001801	divss	%xmm1,%xmm0
00001805	movl	$0x3f800000,0xb8(%ebp)
0000180c	movss	%xmm0,0xcc(%ebp)
00001811	movl	$0xbf8001a3,0xe0(%ebp)
00001818	movl	$0xbf800000,0xf0(%ebp)
0000181f	movl	$0xbdcccf6c,0xe4(%ebp)
00001826	movl	(%esi),%eax
00001828	movl	0x50(%eax),%eax
0000182b	movl	%esi,(%esp)
0000182e	movl	$0x00000001,0x04(%esp)
00001836	call	*%eax
00001838	movl	(%esi),%eax
0000183a	movl	0x5c(%eax),%eax
0000183d	leal	0xb8(%ebp),%ecx
00001840	movl	%ecx,0x04(%esp)
00001844	movl	%esi,(%esp)
00001847	call	*%eax
00001849	testl	%esi,%esi
0000184b	je	0x0000185f
0000184d	movl	(%esi),%eax
0000184f	movl	0x0c(%eax),%eax
00001852	movl	%esi,(%esp)
00001855	call	*%eax
00001857	movl	(%esi),%eax
00001859	movl	%esi,(%esp)
0000185c	call	*0x04(%eax)
0000185f	addl	$0x50,%esp
00001862	popl	%esi
00001863	popl	%edi
00001864	popl	%ebp
00001865	ret
00001866	movl	%eax,%edi
00001868	movl	(%esi),%eax
0000186a	movl	0x04(%eax),%eax
0000186d	movl	%esi,(%esp)
00001870	call	*%eax
00001872	jmp	0x000017ab
00001877	calll	std::terminate()
0000187c	movl	%eax,%edi
0000187e	testl	%esi,%esi
00001880	je	0x000017ab
00001886	movl	(%esi),%eax
00001888	movl	0x0c(%eax),%eax
0000188b	movl	%esi,(%esp)
0000188e	call	*%eax
00001890	movl	(%esi),%eax
00001892	movl	0x04(%eax),%eax
00001895	movl	%esi,(%esp)
00001898	call	*%eax
0000189a	jmp	0x000017ab
0000189f	calll	std::terminate()
000018a4	movl	(%esi),%eax
000018a6	movl	0x04(%eax),%eax
000018a9	movl	%esi,(%esp)
000018ac	call	*%eax
000018ae	jmp	0x0000189f
000018b0	calll	std::terminate()
000018b5	nopl	%cs:CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*)(%eax,%eax)
CVTFPreviewPanel::Paint():
000018c0	pushl	%ebp
000018c1	movl	%esp,%ebp
000018c3	pushl	%ebx
000018c4	pushl	%edi
000018c5	pushl	%esi
000018c6	subl	$0x0000008c,%esp
000018cc	calll	0x000018d1
000018d1	popl	%eax
000018d2	movl	%eax,0x8c(%ebp)
000018d5	movl	0x08(%ebp),%edi
000018d8	movl	0x0000018c(%edi),%ecx
000018de	movl	(%ecx),%eax
000018e0	movl	%ecx,(%esp)
000018e3	call	*0x58(%eax)
000018e6	testb	%al,%al
000018e8	jne	0x0000190f
000018ea	movl	0x0000018c(%edi),%ecx
000018f0	movl	(%ecx),%eax
000018f2	movl	%ecx,(%esp)
000018f5	call	*0x40(%eax)
000018f8	testb	%al,%al
000018fa	jne	0x0000190f
000018fc	movl	%edi,(%esp)
000018ff	calll	CVTFPreviewPanel::PaintStandardTexture()
00001904	addl	$0x0000008c,%esp
0000190a	popl	%esi
0000190b	popl	%edi
0000190c	popl	%ebx
0000190d	popl	%ebp
0000190e	ret
0000190f	calll	vgui::MaterialSystem()
00001914	movl	(%eax),%ecx
00001916	movl	%eax,(%esp)
00001919	call	*0x00000188(%ecx)
0000191f	movl	%eax,%esi
00001921	testl	%esi,%esi
00001923	je	0x0000192f
00001925	movl	(%esi),%eax
00001927	movl	0x08(%eax),%eax
0000192a	movl	%esi,(%esp)
0000192d	call	*%eax
0000192f	leal	0x98(%ebp),%eax
00001932	movl	%eax,0x08(%esp)
00001936	leal	0x9c(%ebp),%eax
00001939	movl	%eax,0x04(%esp)
0000193d	movl	%edi,(%esp)
00001940	calll	vgui::Panel::GetSize(int&, int&)
00001945	calll	vgui::MatSystemSurface()
0000194a	movl	(%eax),%ecx
0000194c	movl	0x00000268(%ecx),%ecx
00001952	movl	0x9c(%ebp),%edx
00001955	movl	0x98(%ebp),%ebx
00001958	movl	%ebx,0x10(%esp)
0000195c	movl	%edx,0x0c(%esp)
00001960	movl	%eax,(%esp)
00001963	movl	$0x00000001,0x14(%esp)
0000196b	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x08(%esp)
00001973	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x04(%esp)
0000197b	call	*%ecx
0000197d	movl	(%esi),%eax
0000197f	movl	0x00000124(%eax),%eax
00001985	movl	%esi,(%esp)
00001988	movl	$0x000000ff,0x10(%esp)
00001990	movl	$0x00000044,0x0c(%esp)
00001998	movl	$0x00000058,0x08(%esp)
000019a0	movl	$0x0000004c,0x04(%esp)
000019a8	call	*%eax
000019aa	movl	(%esi),%eax
000019ac	movl	0x30(%eax),%eax
000019af	movl	%esi,(%esp)
000019b2	movl	CVTFPreviewPanel::CVTFPreviewPanel(vgui::Panel*, char const*),0x0c(%esp)
000019ba	movl	$0x00000001,0x08(%esp)
000019c2	movl	$0x00000001,0x04(%esp)
000019ca	call	*%eax
000019cc	movl	0x9c(%ebp),%eax
000019cf	movl	0x98(%ebp),%ecx
000019d2	movl	%ecx,0x08(%esp)
000019d6	movl	%eax,0x04(%esp)
000019da	calll	CVTFPreviewPanel::SetupProjectionMatrix(int, int)
000019df	movl	0x0000018c(%edi),%eax
000019e5	movl	(%eax),%ecx
000019e7	movl	0x58(%ecx),%ecx
000019ea	movl	%eax,(%esp)
000019ed	call	*%ecx
000019ef	cmpb	$0x01,%al
000019f1	jne	0x00001afb
000019f7	calll	_Plat_FloatTime
000019fc	fstpl	0x90(%ebp)
000019ff	movsd	0x90(%ebp),%xmm0
00001a04	cvtsd2ss	%xmm0,%xmm0
00001a08	movss	%xmm0,0x88(%ebp)
00001a0d	subss	0x000001a4(%edi),%xmm0
00001a15	movl	0x8c(%ebp),%eax
00001a18	mulss	0x50244-0x18d1(%eax),%xmm0
00001a20	movss	%xmm0,0x04(%esp)
00001a26	leal	0xb0(%ebp),%ebx
00001a29	movl	%ebx,(%esp)
00001a2c	calll	MatrixBuildRotateZ(VMatrix&, float)
00001a31	leal	0xa0(%ebp),%eax
00001a34	movl	%eax,0x08(%esp)
00001a38	leal	0x00000198(%edi),%eax
00001a3e	movl	%eax,0x04(%esp)
00001a42	movl	%ebx,(%esp)
00001a45	calll	Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
00001a4a	movss	0xa0(%ebp),%xmm0
00001a4f	movss	%xmm0,0x00000198(%edi)
00001a57	movss	0xa4(%ebp),%xmm0
00001a5c	movss	%xmm0,0x0000019c(%edi)
00001a64	movss	0xa8(%ebp),%xmm0
00001a69	movss	%xmm0,0x000001a0(%edi)
00001a71	movss	0x88(%ebp),%xmm0
00001a76	movss	%xmm0,0x000001a4(%edi)
00001a7e	movl	0x8c(%ebp),%eax
00001a81	movl	0x54aa8-0x18d1(%eax),%ebx
00001a87	movl	%ebx,0x04(%esp)
00001a8b	movl	%edi,(%esp)
00001a8e	movl	$0x41400000,0x08(%esp)
00001a96	calll	CVTFPreviewPanel::LookAt(Vector const&, float)
00001a9b	movl	%ebx,0x04(%esp)
00001a9f	movl	%edi,(%esp)
00001aa2	movl	$0x00000014,0x10(%esp)
00001aaa	movl	$0x00000014,0x0c(%esp)
00001ab2	movl	$0x41200000,0x08(%esp)
00001aba	calll	CVTFPreviewPanel::RenderSphere(Vector const&, float, int, int)
00001abf	jmp	0x00001b1f
00001ac1	movl	%eax,%edi
00001ac3	movl	(%esi),%eax
00001ac5	movl	0x04(%eax),%eax
00001ac8	movl	%esi,(%esp)
00001acb	call	*%eax
00001acd	movl	%edi,(%esp)
00001ad0	calll	__Unwind_Resume
00001ad5	calll	std::terminate()
00001ada	movl	%eax,%edi
00001adc	testl	%esi,%esi
00001ade	je	0x00001acd
00001ae0	movl	(%esi),%eax
00001ae2	movl	0x0c(%eax),%eax
00001ae5	movl	%esi,(%esp)
00001ae8	call	*%eax
00001aea	movl	(%esi),%eax
00001aec	movl	0x04(%eax),%eax
00001aef	movl	%esi,(%esp)
00001af2	call	*%eax
00001af4	jmp	0x00001acd
00001af6	calll	std::terminate()
00001afb	movl	0x0000018c(%edi),%eax
00001b01	movl	(%eax),%ecx
00001b03	movl	0x5c(%ecx),%ecx
00001b06	movl	%eax,(%esp)
00001b09	call	*%ecx
00001b0b	testb	%al,%al
00001b0d	jne	0x00001b1f
00001b0f	movl	0x0000018c(%edi),%eax
00001b15	movl	(%eax),%ecx
00001b17	movl	0x40(%ecx),%ecx
00001b1a	movl	%eax,(%esp)
00001b1d	call	*%ecx
00001b1f	calll	vgui::MatSystemSurface()
00001b24	movl	(%eax),%ecx
00001b26	movl	0x0000026c(%ecx),%ecx
00001b2c	movl	%eax,(%esp)
00001b2f	call	*%ecx
00001b31	testl	%esi,%esi
00001b33	je	0x00001904
00001b39	movl	(%esi),%eax
00001b3b	movl	0x0c(%eax),%eax
00001b3e	movl	%esi,(%esp)
00001b41	call	*%eax
00001b43	movl	(%esi),%eax
00001b45	movl	%esi,(%esp)
00001b48	call	*0x04(%eax)
00001b4b	jmp	0x00001904
00001b50	movl	%eax,%edi
00001b52	movl	(%esi),%eax
00001b54	movl	0x04(%eax),%eax
00001b57	movl	%esi,(%esp)
00001b5a	call	*%eax
00001b5c	jmp	0x00001acd
00001b61	calll	std::terminate()
00001b66	calll	std::terminate()
00001b6b	movl	(%esi),%eax
00001b6d	movl	0x04(%eax),%eax
00001b70	movl	%esi,(%esp)
00001b73	call	*%eax
00001b75	jmp	0x00001b66
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(bitbuf.o):
(__TEXT,__text) section
InternalBitBufErrorHandler(BitBufErrorType, char const*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	g_BitBufErrorHandler-0x5(%eax),%eax
0000000c	testl	%eax,%eax
0000000e	jne	0x00000011
00000010	ret
00000011	jmp	*%eax
00000013	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movl	0x04(%esp),%ecx
0000002a	movl	%ecx,g_BitBufErrorHandler-0x25(%eax)
00000030	ret
00000031	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::bf_write():
00000040	movl	0x04(%esp),%eax
00000044	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
0000004a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00000051	movl	$0xffffffff,0x08(%eax)
00000058	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000005f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000063	movb	$0x01,0x11(%eax)
00000067	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000006e	ret
0000006f	nop
bf_write::bf_write():
00000070	movl	0x04(%esp),%eax
00000074	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
0000007a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00000081	movl	$0xffffffff,0x08(%eax)
00000088	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000008f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000093	movb	$0x01,0x11(%eax)
00000097	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000009e	ret
0000009f	nop
bf_write::bf_write(char const*, void*, int, int):
000000a0	movl	0x04(%esp),%eax
000000a4	movb	$0x01,0x11(%eax)
000000a8	movl	0x08(%esp),%ecx
000000ac	movl	%ecx,0x14(%eax)
000000af	movl	0x0c(%esp),%ecx
000000b3	movl	%ecx,(%eax)
000000b5	movl	0x10(%esp),%ecx
000000b9	andl	$0xfc,%ecx
000000bc	movl	%ecx,0x04(%eax)
000000bf	movl	0x14(%esp),%edx
000000c3	cmpl	$0xff,%edx
000000c6	jne	0x000000d0
000000c8	shll	$0x03,%ecx
000000cb	movl	%ecx,0x08(%eax)
000000ce	jmp	0x000000d3
000000d0	movl	%edx,0x08(%eax)
000000d3	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000000da	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000000de	ret
000000df	nop
bf_write::bf_write(char const*, void*, int, int):
000000e0	movl	0x04(%esp),%eax
000000e4	movb	$0x01,0x11(%eax)
000000e8	movl	0x08(%esp),%ecx
000000ec	movl	%ecx,0x14(%eax)
000000ef	movl	0x0c(%esp),%ecx
000000f3	movl	%ecx,(%eax)
000000f5	movl	0x10(%esp),%ecx
000000f9	andl	$0xfc,%ecx
000000fc	movl	%ecx,0x04(%eax)
000000ff	movl	0x14(%esp),%edx
00000103	cmpl	$0xff,%edx
00000106	jne	0x00000110
00000108	shll	$0x03,%ecx
0000010b	movl	%ecx,0x08(%eax)
0000010e	jmp	0x00000113
00000110	movl	%edx,0x08(%eax)
00000113	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000011a	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
0000011e	ret
0000011f	nop
bf_write::StartWriting(void*, int, int, int):
00000120	pushl	%esi
00000121	movl	0x0c(%esp),%ecx
00000125	movl	0x08(%esp),%eax
00000129	movl	%ecx,(%eax)
0000012b	movl	0x10(%esp),%ecx
0000012f	andl	$0xfc,%ecx
00000132	movl	%ecx,0x04(%eax)
00000135	movl	0x18(%esp),%esi
00000139	movl	0x14(%esp),%edx
0000013d	cmpl	$0xff,%esi
00000140	jne	0x0000014a
00000142	shll	$0x03,%ecx
00000145	movl	%ecx,0x08(%eax)
00000148	jmp	0x0000014d
0000014a	movl	%esi,0x08(%eax)
0000014d	movl	%edx,0x0c(%eax)
00000150	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00000154	popl	%esi
00000155	ret
00000156	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::bf_write(void*, int, int):
00000160	movl	0x04(%esp),%eax
00000164	movb	$0x01,0x11(%eax)
00000168	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
0000016f	movl	0x08(%esp),%ecx
00000173	movl	%ecx,(%eax)
00000175	movl	0x0c(%esp),%ecx
00000179	andl	$0xfc,%ecx
0000017c	movl	%ecx,0x04(%eax)
0000017f	movl	0x10(%esp),%edx
00000183	cmpl	$0xff,%edx
00000186	jne	0x00000190
00000188	shll	$0x03,%ecx
0000018b	movl	%ecx,0x08(%eax)
0000018e	jmp	0x00000193
00000190	movl	%edx,0x08(%eax)
00000193	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
0000019a	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
0000019e	ret
0000019f	nop
bf_write::bf_write(void*, int, int):
000001a0	movl	0x04(%esp),%eax
000001a4	movb	$0x01,0x11(%eax)
000001a8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
000001af	movl	0x08(%esp),%ecx
000001b3	movl	%ecx,(%eax)
000001b5	movl	0x0c(%esp),%ecx
000001b9	andl	$0xfc,%ecx
000001bc	movl	%ecx,0x04(%eax)
000001bf	movl	0x10(%esp),%edx
000001c3	cmpl	$0xff,%edx
000001c6	jne	0x000001d0
000001c8	shll	$0x03,%ecx
000001cb	movl	%ecx,0x08(%eax)
000001ce	jmp	0x000001d3
000001d0	movl	%edx,0x08(%eax)
000001d3	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000001da	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000001de	ret
000001df	nop
bf_write::Reset():
000001e0	movl	0x04(%esp),%eax
000001e4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
000001eb	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
000001ef	ret
bf_write::SetAssertOnOverflow(bool):
000001f0	movb	0x08(%esp),%al
000001f4	movl	0x04(%esp),%ecx
000001f8	movb	%al,0x11(%ecx)
000001fb	ret
000001fc	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::GetDebugName():
00000200	movl	0x04(%esp),%eax
00000204	movl	0x14(%eax),%eax
00000207	ret
00000208	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::SetDebugName(char const*):
00000210	movl	0x08(%esp),%eax
00000214	movl	0x04(%esp),%ecx
00000218	movl	%eax,0x14(%ecx)
0000021b	ret
0000021c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::SeekToBit(int):
00000220	movl	0x08(%esp),%eax
00000224	movl	0x04(%esp),%ecx
00000228	movl	%eax,0x0c(%ecx)
0000022b	ret
0000022c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteSBitLong(int, int):
00000230	pushl	%ebp
00000231	pushl	%ebx
00000232	pushl	%edi
00000233	pushl	%esi
00000234	subl	$0x0c,%esp
00000237	movl	0x28(%esp),%ebx
0000023b	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%ecx
00000240	subl	%ebx,%ecx
00000242	movl	$0x7fffffff,%eax
00000247	shrl	%cl,%eax
00000249	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
0000024d	movl	0x08(%edi),%ecx
00000250	movl	0x0c(%edi),%edx
00000253	movl	%ecx,%esi
00000255	subl	%edx,%esi
00000257	cmpl	%ebx,%esi
00000259	jge	0x00000264
0000025b	movl	%ecx,0x0c(%edi)
0000025e	movb	$0x01,0x10(%edi)
00000262	jmp	0x000002e0
00000264	movl	0x24(%esp),%esi
00000268	movl	%eax,%ecx
0000026a	andl	%esi,%ecx
0000026c	notl	%eax
0000026e	sarl	$0x1f,%esi
00000271	andl	%eax,%esi
00000273	orl	%ecx,%esi
00000275	leal	(%edx,%ebx),%eax
00000278	movl	%eax,0x0c(%edi)
0000027b	movl	%edx,%ebp
0000027d	andl	$0x1f,%ebp
00000280	movl	$0x0000001f,%eax
00000285	subl	%ebp,%eax
00000287	decl	%ebx
00000288	movl	%ebx,%ecx
0000028a	movl	$0x00000001,%ebx
0000028f	shll	%cl,%ebx
00000291	movl	%ebx,0x08(%esp)
00000295	leal	0xff(%ebx),%ebx
00000298	movb	%al,%cl
0000029a	shrl	%cl,%ebx
0000029c	movl	%ebx,%eax
0000029e	andl	$0x01,%eax
000002a1	sarl	$0x05,%edx
000002a4	movl	%edx,(%esp)
000002a7	addl	%edx,%eax
000002a9	movl	(%edi),%edi
000002ab	movl	(%edi,%eax,4),%edx
000002ae	movl	%ebp,%ecx
000002b0	movl	%ecx,0x04(%esp)
000002b4	roll	%cl,%esi
000002b6	movl	%edx,%ebp
000002b8	movl	%ebp,%ecx
000002ba	xorl	%esi,%ecx
000002bc	andl	%ebx,%ecx
000002be	xorl	%ebp,%ecx
000002c0	movl	(%esp),%edx
000002c3	movl	(%edi,%edx,4),%ebx
000002c6	movl	%ecx,(%edi,%eax,4)
000002c9	xorl	%ebx,%esi
000002cb	movl	0x08(%esp),%eax
000002cf	leal	0xff(%eax,%eax),%eax
000002d3	movl	0x04(%esp),%ecx
000002d7	shll	%cl,%eax
000002d9	andl	%esi,%eax
000002db	xorl	%ebx,%eax
000002dd	movl	%eax,(%edi,%edx,4)
000002e0	addl	$0x0c,%esp
000002e3	popl	%esi
000002e4	popl	%edi
000002e5	popl	%ebx
000002e6	popl	%ebp
000002e7	ret
000002e8	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteVarInt32(unsigned int):
000002f0	pushl	%ebp
000002f1	pushl	%ebx
000002f2	pushl	%edi
000002f3	pushl	%esi
000002f4	subl	$0x08,%esp
000002f7	movl	0x1c(%esp),%esi
000002fb	movl	0x0c(%esi),%ebx
000002fe	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edx
00000302	testb	$0x07,%bl
00000305	jne	0x00000313
00000307	leal	0x28(%ebx),%eax
0000030a	cmpl	0x08(%esi),%eax
0000030d	jle	0x000003ec
00000313	movl	%edx,%edi
00000315	andl	$0x7f,%edi
00000318	cmpl	$0x00000080,%edx
0000031e	jb	0x000003d0
00000324	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000330	movl	0x08(%esi),%eax
00000333	movl	%eax,%ecx
00000335	subl	%ebx,%ecx
00000337	cmpl	$0x07,%ecx
0000033a	jg	0x00000345
0000033c	movl	%eax,0x0c(%esi)
0000033f	movb	$0x01,0x10(%esi)
00000343	jmp	0x000003b5
00000345	orl	$0x00000080,%edi
0000034b	leal	0x08(%ebx),%eax
0000034e	movl	%eax,0x0c(%esi)
00000351	movl	%edx,0x04(%esp)
00000355	movl	%ebx,%edx
00000357	andl	$0x1f,%edx
0000035a	movb	%dl,%cl
0000035c	movb	%cl,0x03(%esp)
00000360	roll	%cl,%edi
00000362	movl	$0x0000001f,%ecx
00000367	subl	%edx,%ecx
00000369	movl	$0x0000007f,%esi
0000036e	shrl	%cl,%esi
00000370	movl	%esi,%ecx
00000372	andl	$0x01,%ecx
00000375	sarl	$0x05,%ebx
00000378	addl	%ebx,%ecx
0000037a	movl	0x1c(%esp),%edx
0000037e	movl	(%edx),%ebp
00000380	movl	%ebx,%eax
00000382	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebx
00000386	movl	%ebx,%edx
00000388	xorl	%edi,%edx
0000038a	andl	%esi,%edx
0000038c	xorl	%ebx,%edx
0000038e	movl	%eax,%ebx
00000390	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ebx,4),%esi
00000394	movl	%edx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00000398	movl	0x04(%esp),%edx
0000039c	xorl	%esi,%edi
0000039e	movb	0x03(%esp),%cl
000003a2	movl	$0x000000ff,%eax
000003a7	shll	%cl,%eax
000003a9	andl	%edi,%eax
000003ab	xorl	%esi,%eax
000003ad	movl	%eax,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ebx,4)
000003b1	movl	0x1c(%esp),%esi
000003b5	movl	0x0c(%esi),%ebx
000003b8	movl	%edx,%eax
000003ba	shrl	$0x07,%eax
000003bd	movl	%eax,%edi
000003bf	andl	$0x7f,%edi
000003c2	cmpl	$0x00003fff,%edx
000003c8	movl	%eax,%edx
000003ca	ja	0x00000330
000003d0	movl	0x08(%esi),%eax
000003d3	movl	%eax,%ecx
000003d5	subl	%ebx,%ecx
000003d7	cmpl	$0x07,%ecx
000003da	jg	0x000004a2
000003e0	movl	%eax,0x0c(%esi)
000003e3	movb	$0x01,0x10(%esi)
000003e7	jmp	0x000004f4
000003ec	movl	(%esi),%eax
000003ee	sarl	$0x03,%ebx
000003f1	movl	%edx,%ecx
000003f3	orl	$0x00000080,%ecx
000003f9	movb	%cl,(%eax,%ebx)
000003fc	cmpl	$0x00000080,%edx
00000402	jb	0x00000496
00000408	movl	%edx,%ecx
0000040a	shrl	$0x07,%ecx
0000040d	movl	%edx,%edi
0000040f	movl	%ecx,%edx
00000411	orl	$0x00000080,%edx
00000417	movb	%dl,0x01(%ebx,%eax)
0000041b	movl	%edi,%edx
0000041d	cmpl	$0x00004000,%edx
00000423	jb	0x00000489
00000425	movl	%edx,%ecx
00000427	shrl	$0x0e,%ecx
0000042a	movl	%edx,%edi
0000042c	movl	%ecx,%edx
0000042e	orl	$0x00000080,%edx
00000434	movb	%dl,0x02(%ebx,%eax)
00000438	movl	%edi,%edx
0000043a	cmpl	$0x00200000,%edx
00000440	jb	0x0000047c
00000442	movl	%edx,%ecx
00000444	shrl	$0x15,%ecx
00000447	movl	%edx,%edi
00000449	movl	%ecx,%edx
0000044b	orl	$0x00000080,%edx
00000451	movb	%dl,0x03(%ebx,%eax)
00000455	movl	%edi,%edx
00000457	cmpl	$0x10000000,%edx
0000045d	jb	0x0000046f
0000045f	shrl	$0x1c,%edx
00000462	movb	%dl,0x04(%ebx,%eax)
00000466	addl	$0x28,0x0c(%esi)
0000046a	jmp	0x000004f4
0000046f	andb	$0x7f,%cl
00000472	movb	%cl,0x03(%eax,%ebx)
00000476	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x0c(%esi)
0000047a	jmp	0x000004f4
0000047c	andb	$0x7f,%cl
0000047f	movb	%cl,0x02(%eax,%ebx)
00000483	addl	$0x18,0x0c(%esi)
00000487	jmp	0x000004f4
00000489	andb	$0x7f,%cl
0000048c	movb	%cl,0x01(%eax,%ebx)
00000490	addl	$0x10,0x0c(%esi)
00000494	jmp	0x000004f4
00000496	andb	$0x7f,%dl
00000499	movb	%dl,(%eax,%ebx)
0000049c	addl	$0x08,0x0c(%esi)
000004a0	jmp	0x000004f4
000004a2	leal	0x08(%ebx),%eax
000004a5	movl	%eax,0x0c(%esi)
000004a8	movl	%ebx,%edx
000004aa	andl	$0x1f,%edx
000004ad	movb	%dl,%cl
000004af	movb	%cl,0x04(%esp)
000004b3	roll	%cl,%edi
000004b5	movl	$0x0000001f,%ecx
000004ba	subl	%edx,%ecx
000004bc	movl	$0x0000007f,%edx
000004c1	shrl	%cl,%edx
000004c3	movl	%edx,%ecx
000004c5	andl	$0x01,%ecx
000004c8	sarl	$0x05,%ebx
000004cb	addl	%ebx,%ecx
000004cd	movl	(%esi),%esi
000004cf	movl	(%esi,%ecx,4),%eax
000004d2	movl	%eax,%ebp
000004d4	xorl	%edi,%ebp
000004d6	andl	%edx,%ebp
000004d8	xorl	%eax,%ebp
000004da	movl	(%esi,%ebx,4),%edx
000004dd	movl	%ebp,(%esi,%ecx,4)
000004e0	xorl	%edx,%edi
000004e2	movb	0x04(%esp),%cl
000004e6	movl	$0x000000ff,%eax
000004eb	shll	%cl,%eax
000004ed	andl	%edi,%eax
000004ef	xorl	%edx,%eax
000004f1	movl	%eax,(%esi,%ebx,4)
000004f4	addl	$0x08,%esp
000004f7	popl	%esi
000004f8	popl	%edi
000004f9	popl	%ebx
000004fa	popl	%ebp
000004fb	ret
000004fc	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteVarInt64(unsigned long long):
00000500	pushl	%ebp
00000501	pushl	%ebx
00000502	pushl	%edi
00000503	pushl	%esi
00000504	subl	$0x10,%esp
00000507	movl	0x24(%esp),%edi
0000050b	movl	0x0c(%edi),%ebx
0000050e	movl	0x2c(%esp),%eax
00000512	movl	0x28(%esp),%edx
00000516	testb	$0x07,%bl
00000519	jne	0x00000523
0000051b	leal	0x50(%ebx),%ecx
0000051e	cmpl	0x08(%edi),%ecx
00000521	jle	0x0000054b
00000523	cmpl	$0x7f,%edx
00000526	movl	%edx,%esi
00000528	seta	%cl
0000052b	testl	%eax,%eax
0000052d	setne	%dl
00000530	je	0x00000534
00000532	movb	%dl,%cl
00000534	movl	%esi,%edx
00000536	movl	%edx,%esi
00000538	andl	$0x7f,%esi
0000053b	testb	%cl,%cl
0000053d	jne	0x0000068b
00000543	leal	0x08(%edi),%ecx
00000546	jmp	0x00000752
0000054b	movl	%eax,%ecx
0000054d	shldl	$0x04,%edx,%ecx
00000551	sarl	$0x03,%ebx
00000554	movl	(%edi),%esi
00000556	movl	%eax,%edx
00000558	shrl	$0x18,%edx
0000055b	testl	%edx,%edx
0000055d	jne	0x000005d9
0000055f	testl	%ecx,%ecx
00000561	jne	0x000005a7
00000563	movl	0x28(%esp),%edx
00000567	cmpl	$0x00003fff,%edx
0000056d	ja	0x0000058a
0000056f	movl	$0x00000002,%eax
00000574	movl	$0x00000001,%ecx
00000579	cmpl	$0x00000080,%edx
0000057f	jae	0x0000065f
00000585	jmp	0x00000670
0000058a	movl	%edi,%ebp
0000058c	movl	$0x00000004,%edi
00000591	movl	$0x00000003,%eax
00000596	cmpl	$0x00200000,%edx
0000059c	jae	0x0000063e
000005a2	jmp	0x0000064e
000005a7	movl	%edi,%ebp
000005a9	cmpl	$0x00003fff,%ecx
000005af	ja	0x000005c5
000005b1	movl	$0x00000006,%edx
000005b6	movl	$0x00000005,%edi
000005bb	cmpl	$0x00000080,%ecx
000005c1	jae	0x00000625
000005c3	jmp	0x00000630
000005c5	movl	$0x00000008,%edi
000005ca	movl	$0x00000007,%edx
000005cf	cmpl	$0x00200000,%ecx
000005d5	jae	0x00000607
000005d7	jmp	0x00000615
000005d9	movl	%edi,%ebp
000005db	movl	$0x00000009,%edi
000005e0	cmpl	$0x00000080,%edx
000005e6	jb	0x000005fd
000005e8	movl	%ebx,%edi
000005ea	movl	%eax,%ebx
000005ec	shrl	$0x1f,%ebx
000005ef	orb	$0x80,%bl
000005f2	movb	%bl,0x09(%edi,%esi)
000005f6	movl	%edi,%ebx
000005f8	movl	$0x0000000a,%edi
000005fd	orl	$0x00000080,%edx
00000603	movb	%dl,0x08(%ebx,%esi)
00000607	movl	%eax,%edx
00000609	shrl	$0x11,%edx
0000060c	orb	$0x80,%dl
0000060f	movb	%dl,0x07(%ebx,%esi)
00000613	movl	%edi,%edx
00000615	movl	%ebx,%edi
00000617	movl	%eax,%ebx
00000619	shrl	$0x0a,%ebx
0000061c	orb	$0x80,%bl
0000061f	movb	%bl,0x06(%edi,%esi)
00000623	movl	%edi,%ebx
00000625	shrl	$0x03,%eax
00000628	orb	$0x80,%al
0000062a	movb	%al,0x05(%ebx,%esi)
0000062e	movl	%edx,%edi
00000630	orl	$0x00000080,%ecx
00000636	movb	%cl,0x04(%ebx,%esi)
0000063a	movl	0x28(%esp),%edx
0000063e	movl	%edx,%eax
00000640	shrl	$0x15,%eax
00000643	orl	$0x00000080,%eax
00000648	movb	%al,0x03(%ebx,%esi)
0000064c	movl	%edi,%eax
0000064e	movl	%edx,%ecx
00000650	shrl	$0x0e,%ecx
00000653	orl	$0x00000080,%ecx
00000659	movb	%cl,0x02(%ebx,%esi)
0000065d	movl	%ebp,%edi
0000065f	movl	%edx,%ecx
00000661	shrl	$0x07,%ecx
00000664	orl	$0x00000080,%ecx
0000066a	movb	%cl,0x01(%ebx,%esi)
0000066e	movl	%eax,%ecx
00000670	orl	$0x00000080,%edx
00000676	movb	%dl,(%esi,%ebx)
00000679	addl	%ecx,%ebx
0000067b	andb	$0x7f,0xff(%esi,%ebx)
00000680	shll	$0x03,%ecx
00000683	addl	%ecx,0x0c(%edi)
00000686	jmp	0x000007be
0000068b	leal	0x08(%edi),%ecx
0000068e	movl	%ecx,(%esp)
00000691	movl	%eax,%ebp
00000693	jmp	0x000006a6
00000695	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000006a0	shrl	$0x07,%ebp
000006a3	movl	0x0c(%edi),%ebx
000006a6	movl	(%ecx),%eax
000006a8	movl	%eax,%ecx
000006aa	subl	%ebx,%ecx
000006ac	cmpl	$0x07,%ecx
000006af	jg	0x000006ba
000006b1	movl	%eax,0x0c(%edi)
000006b4	movb	$0x01,0x10(%edi)
000006b8	jmp	0x0000072c
000006ba	orl	$0x00000080,%esi
000006c0	leal	0x08(%ebx),%eax
000006c3	movl	%eax,0x0c(%edi)
000006c6	movl	%ebp,0x08(%esp)
000006ca	movl	%ebx,%ebp
000006cc	movl	%ebp,%ebx
000006ce	andl	$0x1f,%ebx
000006d1	movb	%bl,%cl
000006d3	movb	%cl,0x07(%esp)
000006d7	roll	%cl,%esi
000006d9	movl	$0x0000001f,%ecx
000006de	subl	%ebx,%ecx
000006e0	movl	$0x0000007f,%ebx
000006e5	shrl	%cl,%ebx
000006e7	movl	%ebx,%ecx
000006e9	andl	$0x01,%ecx
000006ec	sarl	$0x05,%ebp
000006ef	addl	%ebp,%ecx
000006f1	movl	0x24(%esp),%eax
000006f5	movl	(%eax),%edi
000006f7	movl	(%edi,%ecx,4),%eax
000006fa	movl	%edx,0x0c(%esp)
000006fe	movl	%eax,%edx
00000700	xorl	%esi,%edx
00000702	andl	%ebx,%edx
00000704	xorl	%eax,%edx
00000706	movl	(%edi,%ebp,4),%ebx
00000709	movl	%edx,(%edi,%ecx,4)
0000070c	movl	0x0c(%esp),%edx
00000710	xorl	%ebx,%esi
00000712	movb	0x07(%esp),%cl
00000716	movl	$0x000000ff,%eax
0000071b	shll	%cl,%eax
0000071d	andl	%esi,%eax
0000071f	xorl	%ebx,%eax
00000721	movl	%eax,(%edi,%ebp,4)
00000724	movl	0x08(%esp),%ebp
00000728	movl	0x24(%esp),%edi
0000072c	cmpl	$0x00004000,%edx
00000732	setb	%al
00000735	testl	%ebp,%ebp
00000737	je	0x0000073b
00000739	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%al
0000073b	shrdl	$0x07,%ebp,%edx
0000073f	movl	%edx,%esi
00000741	andl	$0x7f,%esi
00000744	testb	%al,%al
00000746	movl	(%esp),%ecx
00000749	je	0x000006a0
0000074f	movl	0x0c(%edi),%ebx
00000752	movl	(%ecx),%eax
00000754	movl	%eax,%ecx
00000756	subl	%ebx,%ecx
00000758	cmpl	$0x07,%ecx
0000075b	jg	0x00000766
0000075d	movl	%eax,0x0c(%edi)
00000760	movb	$0x01,0x10(%edi)
00000764	jmp	0x000007be
00000766	leal	0x08(%ebx),%eax
00000769	movl	%eax,0x0c(%edi)
0000076c	movl	%ebx,%edx
0000076e	andl	$0x1f,%edx
00000771	movb	%dl,%cl
00000773	movb	%cl,0x0c(%esp)
00000777	roll	%cl,%esi
00000779	movl	$0x0000001f,%ecx
0000077e	subl	%edx,%ecx
00000780	movl	%edi,%edx
00000782	movl	$0x0000007f,%edi
00000787	shrl	%cl,%edi
00000789	movl	%edi,%ecx
0000078b	andl	$0x01,%ecx
0000078e	sarl	$0x05,%ebx
00000791	addl	%ebx,%ecx
00000793	movl	(%edx),%edx
00000795	movl	(%edx,%ecx,4),%ebp
00000798	movl	%ebx,%eax
0000079a	movl	%ebp,%ebx
0000079c	xorl	%esi,%ebx
0000079e	andl	%edi,%ebx
000007a0	xorl	%ebp,%ebx
000007a2	movl	%eax,%ebp
000007a4	movl	(%edx,%ebp,4),%edi
000007a7	movl	%ebx,(%edx,%ecx,4)
000007aa	xorl	%edi,%esi
000007ac	movb	0x0c(%esp),%cl
000007b0	movl	$0x000000ff,%eax
000007b5	shll	%cl,%eax
000007b7	andl	%esi,%eax
000007b9	xorl	%edi,%eax
000007bb	movl	%eax,(%edx,%ebp,4)
000007be	addl	$0x10,%esp
000007c1	popl	%esi
000007c2	popl	%edi
000007c3	popl	%ebx
000007c4	popl	%ebp
000007c5	ret
000007c6	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteSignedVarInt32(int):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	subl	$0x08,%esp
000007d6	movl	0x08(%ebp),%eax
000007d9	movl	%eax,(%esp)
000007dc	movl	0x0c(%ebp),%ecx
000007df	movl	%ecx,%eax
000007e1	sarl	$0x1f,%eax
000007e4	leal	(%ecx,%ecx),%ecx
000007e7	xorl	%eax,%ecx
000007e9	movl	%ecx,0x04(%esp)
000007ed	calll	bf_write::WriteVarInt32(unsigned int)
000007f2	addl	$0x08,%esp
000007f5	popl	%ebp
000007f6	ret
000007f7	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteSignedVarInt64(long long):
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	subl	$0x18,%esp
00000806	movl	0x08(%ebp),%eax
00000809	movl	%eax,(%esp)
0000080c	movl	0x0c(%ebp),%ecx
0000080f	movl	0x10(%ebp),%eax
00000812	addl	%ecx,%ecx
00000814	movl	%eax,%edx
00000816	adcl	%edx,%edx
00000818	sarl	$0x1f,%eax
0000081b	xorl	%eax,%edx
0000081d	movl	%edx,0x08(%esp)
00000821	xorl	%ecx,%eax
00000823	movl	%eax,0x04(%esp)
00000827	calll	bf_write::WriteVarInt64(unsigned long long)
0000082c	addl	$0x18,%esp
0000082f	popl	%ebp
00000830	ret
00000831	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeVarInt32(unsigned int):
00000840	movl	$0x00000001,%eax
00000845	movl	0x08(%esp),%ecx
00000849	cmpl	$0x00000080,%ecx
0000084f	jb	0x00000870
00000851	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000860	movl	%ecx,%edx
00000862	shrl	$0x07,%edx
00000865	incl	%eax
00000866	cmpl	$0x00003fff,%ecx
0000086c	movl	%edx,%ecx
0000086e	ja	0x00000860
00000870	ret
00000871	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeVarInt64(unsigned long long):
00000880	pushl	%ebx
00000881	movl	0x0c(%esp),%ecx
00000885	cmpl	$0x00000080,%ecx
0000088b	setb	%bl
0000088e	movl	0x10(%esp),%edx
00000892	testl	%edx,%edx
00000894	je	0x00000898
00000896	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%bl
00000898	movl	$0x00000001,%eax
0000089d	testb	%bl,%bl
0000089f	jne	0x000008ce
000008a1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000008b0	cmpl	$0x00003fff,%ecx
000008b6	seta	%bl
000008b9	testl	%edx,%edx
000008bb	setne	%bh
000008be	je	0x000008c2
000008c0	movb	%bh,%bl
000008c2	shrdl	$0x07,%edx,%ecx
000008c6	incl	%eax
000008c7	shrl	$0x07,%edx
000008ca	testb	%bl,%bl
000008cc	jne	0x000008b0
000008ce	popl	%ebx
000008cf	ret
bf_write::ByteSizeSignedVarInt32(int):
000008d0	movl	0x08(%esp),%ecx
000008d4	movl	%ecx,%eax
000008d6	sarl	$0x1f,%eax
000008d9	leal	(%ecx,%ecx),%ecx
000008dc	xorl	%eax,%ecx
000008de	movl	$0x00000001,%eax
000008e3	cmpl	$0x00000080,%ecx
000008e9	jb	0x00000900
000008eb	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000008f0	movl	%ecx,%edx
000008f2	shrl	$0x07,%edx
000008f5	incl	%eax
000008f6	cmpl	$0x00003fff,%ecx
000008fc	movl	%edx,%ecx
000008fe	ja	0x000008f0
00000900	ret
00000901	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::ByteSizeSignedVarInt64(long long):
00000910	pushl	%ebx
00000911	movl	0x0c(%esp),%ecx
00000915	movl	0x10(%esp),%edx
00000919	addl	%ecx,%ecx
0000091b	movl	%edx,%eax
0000091d	adcl	%eax,%eax
0000091f	sarl	$0x1f,%edx
00000922	xorl	%edx,%ecx
00000924	cmpl	$0x00000080,%ecx
0000092a	setb	%bl
0000092d	xorl	%eax,%edx
0000092f	je	0x00000933
00000931	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),%bl
00000933	movl	$0x00000001,%eax
00000938	testb	%bl,%bl
0000093a	jne	0x0000095e
0000093c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
00000940	cmpl	$0x00003fff,%ecx
00000946	seta	%bl
00000949	testl	%edx,%edx
0000094b	setne	%bh
0000094e	je	0x00000952
00000950	movb	%bh,%bl
00000952	shrdl	$0x07,%edx,%ecx
00000956	incl	%eax
00000957	shrl	$0x07,%edx
0000095a	testb	%bl,%bl
0000095c	jne	0x00000940
0000095e	popl	%ebx
0000095f	ret
bf_write::WriteBitLong(unsigned int, int, bool):
00000960	pushl	%ebp
00000961	pushl	%ebx
00000962	pushl	%edi
00000963	pushl	%esi
00000964	subl	$0x0c,%esp
00000967	movl	0x28(%esp),%eax
0000096b	movl	0x24(%esp),%esi
0000096f	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00000973	movb	0x2c(%esp),%cl
00000977	cmpb	$0x01,%cl
0000097a	jne	0x00000a24
00000980	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%ecx
00000985	subl	%eax,%ecx
00000987	movl	$0x7fffffff,%edx
0000098c	shrl	%cl,%edx
0000098e	movl	0x08(%ebp),%ecx
00000991	movl	0x0c(%ebp),%edi
00000994	movl	%ecx,%ebx
00000996	subl	%edi,%ebx
00000998	cmpl	%eax,%ebx
0000099a	jge	0x000009a8
0000099c	movl	%ecx,0x0c(%ebp)
0000099f	movb	$0x01,0x10(%ebp)
000009a3	jmp	0x00000aa3
000009a8	movl	%edx,%ecx
000009aa	andl	%esi,%ecx
000009ac	notl	%edx
000009ae	sarl	$0x1f,%esi
000009b1	andl	%edx,%esi
000009b3	orl	%ecx,%esi
000009b5	leal	(%edi,%eax),%ecx
000009b8	movl	%ecx,0x0c(%ebp)
000009bb	movl	%edi,%ebx
000009bd	andl	$0x1f,%ebx
000009c0	movl	$0x0000001f,%edx
000009c5	subl	%ebx,%edx
000009c7	decl	%eax
000009c8	movb	%al,%cl
000009ca	movl	$0x00000001,%eax
000009cf	shll	%cl,%eax
000009d1	movl	%eax,0x08(%esp)
000009d5	leal	0xff(%eax),%ebp
000009d8	movb	%dl,%cl
000009da	shrl	%cl,%ebp
000009dc	movl	%ebp,%eax
000009de	andl	$0x01,%eax
000009e1	sarl	$0x05,%edi
000009e4	addl	%edi,%eax
000009e6	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
000009ea	movl	(%ecx),%edx
000009ec	movl	(%edx,%eax,4),%ecx
000009ef	movl	%ecx,(%esp)
000009f2	movl	%ebx,%ecx
000009f4	movl	%ecx,0x04(%esp)
000009f8	roll	%cl,%esi
000009fa	movl	(%esp),%ebx
000009fd	movl	%ebx,%ecx
000009ff	xorl	%esi,%ecx
00000a01	andl	%ebp,%ecx
00000a03	xorl	%ebx,%ecx
00000a05	movl	(%edx,%edi,4),%ebp
00000a08	movl	%ecx,(%edx,%eax,4)
00000a0b	xorl	%ebp,%esi
00000a0d	movl	0x08(%esp),%eax
00000a11	leal	0xff(%eax,%eax),%eax
00000a15	movl	0x04(%esp),%ecx
00000a19	shll	%cl,%eax
00000a1b	andl	%esi,%eax
00000a1d	xorl	%ebp,%eax
00000a1f	movl	%eax,(%edx,%edi,4)
00000a22	jmp	0x00000aa3
00000a24	movl	0x08(%ebp),%ecx
00000a27	movl	0x0c(%ebp),%ebx
00000a2a	movl	%ecx,%edx
00000a2c	subl	%ebx,%edx
00000a2e	cmpl	%eax,%edx
00000a30	jl	0x0000099c
00000a36	leal	(%ebx,%eax),%ecx
00000a39	movl	%ecx,0x0c(%ebp)
00000a3c	movl	%ebx,%edi
00000a3e	andl	$0x1f,%edi
00000a41	movl	$0x0000001f,%edx
00000a46	subl	%edi,%edx
00000a48	decl	%eax
00000a49	movb	%al,%cl
00000a4b	movl	$0x00000001,%eax
00000a50	shll	%cl,%eax
00000a52	movl	%eax,0x08(%esp)
00000a56	leal	0xff(%eax),%ebp
00000a59	movb	%dl,%cl
00000a5b	shrl	%cl,%ebp
00000a5d	movl	%ebp,%eax
00000a5f	andl	$0x01,%eax
00000a62	sarl	$0x05,%ebx
00000a65	addl	%ebx,%eax
00000a67	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00000a6b	movl	(%ecx),%edx
00000a6d	movl	(%edx,%eax,4),%ecx
00000a70	movl	%ecx,(%esp)
00000a73	movl	%edi,%ecx
00000a75	movl	%ecx,0x04(%esp)
00000a79	roll	%cl,%esi
00000a7b	movl	(%esp),%edi
00000a7e	movl	%edi,%ecx
00000a80	xorl	%esi,%ecx
00000a82	andl	%ebp,%ecx
00000a84	xorl	%edi,%ecx
00000a86	movl	(%edx,%ebx,4),%edi
00000a89	movl	%ecx,(%edx,%eax,4)
00000a8c	xorl	%edi,%esi
00000a8e	movl	0x08(%esp),%eax
00000a92	leal	0xff(%eax,%eax),%eax
00000a96	movl	0x04(%esp),%ecx
00000a9a	shll	%cl,%eax
00000a9c	andl	%esi,%eax
00000a9e	xorl	%edi,%eax
00000aa0	movl	%eax,(%edx,%ebx,4)
00000aa3	addl	$0x0c,%esp
00000aa6	popl	%esi
00000aa7	popl	%edi
00000aa8	popl	%ebx
00000aa9	popl	%ebp
00000aaa	ret
00000aab	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBits(void const*, int):
00000ab0	pushl	%ebp
00000ab1	movl	%esp,%ebp
00000ab3	pushl	%ebx
00000ab4	pushl	%edi
00000ab5	pushl	%esi
00000ab6	subl	$0x2c,%esp
00000ab9	calll	0x00000abe
00000abe	popl	%eax
00000abf	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000ac2	movl	0x08(%ebp),%ebx
00000ac5	movl	0x08(%ebx),%eax
00000ac8	movl	0x0c(%ebx),%esi
00000acb	movl	0x10(%ebp),%edi
00000ace	leal	(%esi,%edi),%ecx
00000ad1	cmpl	%eax,%ecx
00000ad3	jg	0x00000dec
00000ad9	movl	0x0c(%ebp),%edx
00000adc	testb	$0x03,%dl
00000adf	je	0x00000b96
00000ae5	cmpl	$0x08,%edi
00000ae8	jl	0x00000b96
00000aee	incl	%edx
00000aef	addl	$0xf8,%edi
00000af2	jmp	0x00000b0a
00000af4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00000b00	incl	%edx
00000b01	addl	$0xf8,%edi
00000b04	movl	0x08(%ebx),%eax
00000b07	movl	0x0c(%ebx),%esi
00000b0a	movl	%eax,%ecx
00000b0c	subl	%esi,%ecx
00000b0e	cmpl	$0x07,%ecx
00000b11	jg	0x00000b1c
00000b13	movl	%eax,0x0c(%ebx)
00000b16	movb	$0x01,0x10(%ebx)
00000b1a	jmp	0x00000b85
00000b1c	movl	%ebx,%ecx
00000b1e	movzbl	0xff(%edx),%ebx
00000b22	leal	0x08(%esi),%eax
00000b25	movl	%eax,0x0c(%ecx)
00000b28	movl	%ecx,%eax
00000b2a	movl	%edx,0xe8(%ebp)
00000b2d	movl	%esi,%edx
00000b2f	andl	$0x1f,%edx
00000b32	movb	%dl,%cl
00000b34	movb	%cl,0xe4(%ebp)
00000b37	roll	%cl,%ebx
00000b39	movl	$0x0000001f,%ecx
00000b3e	subl	%edx,%ecx
00000b40	movl	$0x0000007f,%edx
00000b45	shrl	%cl,%edx
00000b47	movl	%edx,%ecx
00000b49	andl	$0x01,%ecx
00000b4c	sarl	$0x05,%esi
00000b4f	addl	%esi,%ecx
00000b51	movl	%edi,0xf0(%ebp)
00000b54	movl	(%eax),%edi
00000b56	movl	(%edi,%ecx,4),%eax
00000b59	movl	%eax,0xec(%ebp)
00000b5c	movl	0xec(%ebp),%eax
00000b5f	xorl	%ebx,%eax
00000b61	andl	%edx,%eax
00000b63	xorl	0xec(%ebp),%eax
00000b66	movl	(%edi,%esi,4),%edx
00000b69	movl	%eax,(%edi,%ecx,4)
00000b6c	xorl	%edx,%ebx
00000b6e	movb	0xe4(%ebp),%cl
00000b71	movl	$0x000000ff,%eax
00000b76	shll	%cl,%eax
00000b78	andl	%ebx,%eax
00000b7a	xorl	%edx,%eax
00000b7c	movl	0xe8(%ebp),%edx
00000b7f	movl	%eax,(%edi,%esi,4)
00000b82	movl	0xf0(%ebp),%edi
00000b85	testb	$0x03,%dl
00000b88	movl	0x08(%ebp),%ebx
00000b8b	je	0x00000b96
00000b8d	cmpl	$0x08,%edi
00000b90	jge	0x00000b00
00000b96	cmpl	$0x1f,%edi
00000b99	jle	0x00000c90
00000b9f	movl	0x0c(%ebx),%ecx
00000ba2	testb	$0x07,%cl
00000ba5	jne	0x00000be7
00000ba7	movl	(%ebx),%eax
00000ba9	movl	%edi,%esi
00000bab	sarl	$0x03,%esi
00000bae	movl	%esi,0xdc(%ebp)
00000bb1	movl	%esi,0x08(%esp)
00000bb5	movl	%edx,0x04(%esp)
00000bb9	sarl	$0x03,%ecx
00000bbc	addl	%eax,%ecx
00000bbe	movl	%ecx,(%esp)
00000bc1	movl	%edi,%esi
00000bc3	andl	$0xf8,%esi
00000bc6	subl	%esi,%edi
00000bc8	movl	%edx,0xf0(%ebp)
00000bcb	calll	_memcpy
00000bd0	movl	%esi,%ecx
00000bd2	movl	0xdc(%ebp),%edx
00000bd5	addl	0x0c(%ebx),%ecx
00000bd8	movl	%ecx,0x0c(%ebx)
00000bdb	addl	0xf0(%ebp),%edx
00000bde	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edi
00000be1	jl	0x00000c90
00000be7	movl	%edx,0xdc(%ebp)
00000bea	movl	%ecx,%eax
00000bec	sarl	$0x05,%eax
00000bef	movl	%ecx,%esi
00000bf1	movl	(%ebx),%ecx
00000bf3	movl	%edx,%ebx
00000bf5	leal	0x04(%ecx,%eax,4),%edx
00000bf9	andl	$0x1f,%esi
00000bfc	movl	%esi,0xec(%ebp)
00000bff	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%eax
00000c04	subl	%esi,%eax
00000c06	movl	%eax,0xe8(%ebp)
00000c09	movl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%ecx
00000c0c	movl	_g_BitWriteMasks-0xabe(%ecx,%esi,4),%eax
00000c13	movl	%eax,0xe4(%ebp)
00000c16	imull	$0x00000084,%esi,%eax
00000c1c	movl	_g_BitWriteMasks-0xabe+0x00000080(%ecx,%eax),%eax
00000c23	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000c26	leal	bf_write::bf_write(char const*, void*, int, int)(%edi),%eax
00000c29	movl	%eax,0xd8(%ebp)
00000c2c	shrl	$0x03,%eax
00000c2f	andl	$0x1ffffffc,%eax
00000c34	addl	$0x04,%eax
00000c37	movl	%eax,0xd4(%ebp)
00000c3a	movl	%ebx,%esi
00000c3c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
00000c40	movl	%edi,0xf0(%ebp)
00000c43	movl	0xfc(%edx),%edi
00000c46	andl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%edi
00000c49	movl	(%esi),%eax
00000c4b	movl	0xec(%ebp),%ecx
00000c4e	movl	%eax,%ebx
00000c50	shll	%cl,%ebx
00000c52	orl	%edi,%ebx
00000c54	movl	%ebx,0xfc(%edx)
00000c57	movl	0xe8(%ebp),%ecx
00000c5a	cmpl	$0x1f,%ecx
00000c5d	ja	0x00000c6a
00000c5f	movl	(%edx),%edi
00000c61	andl	0xe4(%ebp),%edi
00000c64	shrl	%cl,%eax
00000c66	orl	%edi,%eax
00000c68	movl	%eax,(%edx)
00000c6a	addl	$0x04,%esi
00000c6d	movl	0x08(%ebp),%ebx
00000c70	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x0c(%ebx)
00000c74	addl	$0x04,%edx
00000c77	movl	0xf0(%ebp),%edi
00000c7a	addl	bf_write::bf_write(char const*, void*, int, int),%edi
00000c7d	cmpl	$0x1f,%edi
00000c80	jg	0x00000c40
00000c82	movl	0xdc(%ebp),%edx
00000c85	addl	0xd4(%ebp),%edx
00000c88	movl	0xd8(%ebp),%eax
00000c8b	andl	$0x1f,%eax
00000c8e	movl	%eax,%edi
00000c90	cmpl	$0x08,%edi
00000c93	jge	0x00000c9c
00000c95	movl	%edi,%eax
00000c97	jmp	0x00000d4b
00000c9c	leal	0xf8(%edi),%eax
00000c9f	movl	%eax,bf_write::bf_write(char const*, void*, int, int)(%ebp)
00000ca2	shrl	$0x03,%eax
00000ca5	incl	%eax
00000ca6	movl	%eax,0xd8(%ebp)
00000ca9	movl	%edx,%esi
00000cab	movl	%edx,0xdc(%ebp)
00000cae	nop
00000cb0	movl	0x08(%ebx),%ecx
00000cb3	movl	0x0c(%ebx),%eax
00000cb6	movl	%ecx,%edx
00000cb8	subl	%eax,%edx
00000cba	cmpl	$0x07,%edx
00000cbd	jg	0x00000cc8
00000cbf	movl	%ecx,0x0c(%ebx)
00000cc2	movb	$0x01,0x10(%ebx)
00000cc6	jmp	0x00000d32
00000cc8	movl	%esi,0xec(%ebp)
00000ccb	movl	0xec(%ebp),%ecx
00000cce	movzbl	(%ecx),%esi
00000cd1	leal	0x08(%eax),%ecx
00000cd4	movl	%ecx,0x0c(%ebx)
00000cd7	movl	%eax,%edx
00000cd9	andl	$0x1f,%edx
00000cdc	movb	%dl,%cl
00000cde	movb	%cl,0xe4(%ebp)
00000ce1	roll	%cl,%esi
00000ce3	movl	$0x0000001f,%ecx
00000ce8	subl	%edx,%ecx
00000cea	movl	$0x0000007f,%edx
00000cef	shrl	%cl,%edx
00000cf1	movl	%edx,%ecx
00000cf3	andl	$0x01,%ecx
00000cf6	sarl	$0x05,%eax
00000cf9	addl	%eax,%ecx
00000cfb	movl	%edi,0xf0(%ebp)
00000cfe	movl	(%ebx),%edi
00000d00	movl	(%edi,%ecx,4),%ebx
00000d03	movl	%ebx,0xe8(%ebp)
00000d06	movl	0xe8(%ebp),%ebx
00000d09	xorl	%esi,%ebx
00000d0b	andl	%edx,%ebx
00000d0d	xorl	0xe8(%ebp),%ebx
00000d10	movl	(%edi,%eax,4),%edx
00000d13	movl	%ebx,(%edi,%ecx,4)
00000d16	xorl	%edx,%esi
00000d18	movb	0xe4(%ebp),%cl
00000d1b	movl	$0x000000ff,%ebx
00000d20	shll	%cl,%ebx
00000d22	andl	%esi,%ebx
00000d24	movl	0xec(%ebp),%esi
00000d27	xorl	%edx,%ebx
00000d29	movl	%ebx,(%edi,%eax,4)
00000d2c	movl	0xf0(%ebp),%edi
00000d2f	movl	0x08(%ebp),%ebx
00000d32	incl	%esi
00000d33	addl	$0xf8,%edi
00000d36	cmpl	$0x07,%edi
00000d39	jg	0x00000cb0
00000d3f	movl	0xdc(%ebp),%edx
00000d42	addl	0xd8(%ebp),%edx
00000d45	movl	bf_write::bf_write(char const*, void*, int, int)(%ebp),%eax
00000d48	andl	$0x07,%eax
00000d4b	testl	%eax,%eax
00000d4d	movl	%eax,%esi
00000d4f	je	0x00000dda
00000d55	movl	0x08(%ebx),%eax
00000d58	movl	0x0c(%ebx),%edi
00000d5b	movl	%eax,%ecx
00000d5d	subl	%edi,%ecx
00000d5f	cmpl	%esi,%ecx
00000d61	jge	0x00000d6c
00000d63	movl	%eax,0x0c(%ebx)
00000d66	movb	$0x01,0x10(%ebx)
00000d6a	jmp	0x00000dda
00000d6c	movzbl	(%edx),%eax
00000d6f	movl	%esi,%ecx
00000d71	leal	(%edi,%ecx),%edx
00000d74	movl	%edx,0x0c(%ebx)
00000d77	movl	%edi,%edx
00000d79	andl	$0x1f,%edx
00000d7c	movl	%edx,0xf0(%ebp)
00000d7f	movl	$0x0000001f,%ebx
00000d84	subl	%edx,%ebx
00000d86	decl	%ecx
00000d87	movl	$0x00000001,%edx
00000d8c	shll	%cl,%edx
00000d8e	movl	%edx,0xe8(%ebp)
00000d91	leal	0xff(%edx),%esi
00000d94	movb	%bl,%cl
00000d96	shrl	%cl,%esi
00000d98	movl	%esi,%edx
00000d9a	andl	$0x01,%edx
00000d9d	sarl	$0x05,%edi
00000da0	addl	%edi,%edx
00000da2	movl	0x08(%ebp),%ecx
00000da5	movl	(%ecx),%ebx
00000da7	movl	(%ebx,%edx,4),%ecx
00000daa	movl	%ecx,0xec(%ebp)
00000dad	movl	0xf0(%ebp),%ecx
00000db0	roll	%cl,%eax
00000db2	movl	0xec(%ebp),%ecx
00000db5	xorl	%eax,%ecx
00000db7	andl	%esi,%ecx
00000db9	xorl	0xec(%ebp),%ecx
00000dbc	movl	(%ebx,%edi,4),%esi
00000dbf	movl	%ecx,(%ebx,%edx,4)
00000dc2	xorl	%esi,%eax
00000dc4	movl	0xe8(%ebp),%ecx
00000dc7	leal	0xff(%ecx,%ecx),%edx
00000dcb	movl	0xf0(%ebp),%ecx
00000dce	shll	%cl,%edx
00000dd0	andl	%eax,%edx
00000dd2	xorl	%esi,%edx
00000dd4	movl	%edx,(%ebx,%edi,4)
00000dd7	movl	0x08(%ebp),%ebx
00000dda	testb	$0x01,0x10(%ebx)
00000dde	sete	%al
00000de1	movzbl	%al,%eax
00000de4	addl	$0x2c,%esp
00000de7	popl	%esi
00000de8	popl	%edi
00000de9	popl	%ebx
00000dea	popl	%ebp
00000deb	ret
00000dec	movb	$0x01,0x10(%ebx)
00000df0	xorb	%al,%al
00000df2	jmp	0x00000de1
00000df4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitsFromBuffer(bf_read*, int):
00000e00	pushl	%ebp
00000e01	pushl	%ebx
00000e02	pushl	%edi
00000e03	pushl	%esi
00000e04	subl	$0x10,%esp
00000e07	movl	0x28(%esp),%edi
00000e0b	movl	0x08(%edi),%edx
00000e0e	movl	0x0c(%edi),%ecx
00000e11	movl	%edx,%ebx
00000e13	subl	%ecx,%ebx
00000e15	movl	0x2c(%esp),%eax
00000e19	cmpl	$0x21,%eax
00000e1c	jl	0x00000efc
00000e22	leal	0xdf(%eax),%esi
00000e25	andl	bf_write::bf_write(char const*, void*, int, int),%esi
00000e28	movl	%esi,0x04(%esp)
00000e2c	movl	%eax,0x0c(%esp)
00000e30	cmpl	$0x1f,%ebx
00000e33	jg	0x00000e40
00000e35	movl	%edx,0x0c(%edi)
00000e38	movb	$0x01,0x10(%edi)
00000e3c	xorl	%ebx,%ebx
00000e3e	jmp	0x00000e5f
00000e40	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ecx),%eax
00000e43	movl	%eax,0x0c(%edi)
00000e46	leal	0x1f(%ecx),%eax
00000e49	sarl	$0x05,%eax
00000e4c	movl	(%edi),%edx
00000e4e	movl	(%edx,%eax,4),%eax
00000e51	movl	%ecx,%esi
00000e53	sarl	$0x05,%esi
00000e56	movl	(%edx,%esi,4),%ebx
00000e59	andl	$0x1f,%ecx
00000e5c	shrdl	%cl,%eax,%ebx
00000e5f	movl	0x24(%esp),%edx
00000e63	movl	0x08(%edx),%eax
00000e66	movl	0x0c(%edx),%ebp
00000e69	movl	%eax,%ecx
00000e6b	subl	%ebp,%ecx
00000e6d	cmpl	$0x1f,%ecx
00000e70	jg	0x00000e7b
00000e72	movl	%eax,0x0c(%edx)
00000e75	movb	$0x01,0x10(%edx)
00000e79	jmp	0x00000ed3
00000e7b	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ebp),%eax
00000e7e	movl	%eax,0x0c(%edx)
00000e81	movl	%edx,%eax
00000e83	movl	%ebp,%edx
00000e85	andl	$0x1f,%edx
00000e88	movb	%dl,%cl
00000e8a	movb	%cl,0x08(%esp)
00000e8e	roll	%cl,%ebx
00000e90	movl	$0x0000001f,%ecx
00000e95	subl	%edx,%ecx
00000e97	movl	$0x7fffffff,%edi
00000e9c	shrl	%cl,%edi
00000e9e	movl	%edi,%ecx
00000ea0	andl	$0x01,%ecx
00000ea3	sarl	$0x05,%ebp
00000ea6	addl	%ebp,%ecx
00000ea8	movl	(%eax),%esi
00000eaa	movl	(%esi,%ecx,4),%eax
00000ead	movl	%eax,%edx
00000eaf	xorl	%ebx,%edx
00000eb1	andl	%edi,%edx
00000eb3	xorl	%eax,%edx
00000eb5	movl	(%esi,%ebp,4),%edi
00000eb8	movl	%edx,(%esi,%ecx,4)
00000ebb	xorl	%edi,%ebx
00000ebd	movb	0x08(%esp),%cl
00000ec1	movl	$0xffffffff,%eax
00000ec6	shll	%cl,%eax
00000ec8	andl	%ebx,%eax
00000eca	xorl	%edi,%eax
00000ecc	movl	0x28(%esp),%edi
00000ed0	movl	%eax,(%esi,%ebp,4)
00000ed3	movl	0x08(%edi),%edx
00000ed6	movl	0x0c(%edi),%ecx
00000ed9	movl	%edx,%ebx
00000edb	subl	%ecx,%ebx
00000edd	movl	0x0c(%esp),%eax
00000ee1	addl	bf_write::bf_write(char const*, void*, int, int),%eax
00000ee4	movl	%eax,0x0c(%esp)
00000ee8	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%eax
00000eeb	movl	0x2c(%esp),%eax
00000eef	jg	0x00000e30
00000ef5	addl	bf_write::bf_write(char const*, void*, int, int),%eax
00000ef8	subl	0x04(%esp),%eax
00000efc	cmpl	%eax,%ebx
00000efe	jge	0x00000f0b
00000f00	movl	%edx,0x0c(%edi)
00000f03	movb	$0x01,0x10(%edi)
00000f07	xorl	%ebx,%ebx
00000f09	jmp	0x00000f38
00000f0b	leal	0xff(%ecx,%eax),%edx
00000f0f	leal	(%ecx,%eax),%esi
00000f12	movl	%esi,0x0c(%edi)
00000f15	sarl	$0x05,%edx
00000f18	movl	(%edi),%edi
00000f1a	movl	(%edi,%edx,4),%esi
00000f1d	movl	%ecx,%edx
00000f1f	sarl	$0x05,%edx
00000f22	movl	(%edi,%edx,4),%edx
00000f25	andl	$0x1f,%ecx
00000f28	shrdl	%cl,%esi,%edx
00000f2b	leal	0xff(%eax),%ecx
00000f2e	movl	$0x00000002,%ebx
00000f33	shll	%cl,%ebx
00000f35	decl	%ebx
00000f36	andl	%edx,%ebx
00000f38	movl	0x24(%esp),%esi
00000f3c	movl	0x08(%esi),%ecx
00000f3f	movl	0x0c(%esi),%ebp
00000f42	movl	%ecx,%edx
00000f44	subl	%ebp,%edx
00000f46	cmpl	%eax,%edx
00000f48	jge	0x00000f58
00000f4a	movl	%ecx,0x0c(%esi)
00000f4d	movb	$0x01,0x10(%esi)
00000f51	xorb	%al,%al
00000f53	jmp	0x00000fe7
00000f58	leal	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax),%ecx
00000f5c	movl	%ecx,0x0c(%esi)
00000f5f	movl	%ebp,%ecx
00000f61	andl	$0x1f,%ecx
00000f64	movl	%ecx,0x0c(%esp)
00000f68	movl	$0x0000001f,%edx
00000f6d	subl	%ecx,%edx
00000f6f	movl	%edx,0x04(%esp)
00000f73	decl	%eax
00000f74	movb	%al,%cl
00000f76	movl	$0x00000001,%eax
00000f7b	shll	%cl,%eax
00000f7d	movl	%eax,0x08(%esp)
00000f81	leal	0xff(%eax),%edx
00000f84	movl	0x04(%esp),%ecx
00000f88	shrl	%cl,%edx
00000f8a	movl	%edx,%eax
00000f8c	andl	$0x01,%eax
00000f8f	sarl	$0x05,%ebp
00000f92	addl	%ebp,%eax
00000f94	movl	(%esi),%ecx
00000f96	movl	%ecx,0x04(%esp)
00000f9a	movl	(%ecx,%eax,4),%edi
00000f9d	movl	0x0c(%esp),%ecx
00000fa1	movl	%ecx,0x0c(%esp)
00000fa5	movl	0x0c(%esp),%ecx
00000fa9	roll	%cl,%ebx
00000fab	movl	%edi,%ecx
00000fad	xorl	%ebx,%ecx
00000faf	andl	%edx,%ecx
00000fb1	xorl	%edi,%ecx
00000fb3	movl	0x04(%esp),%edi
00000fb7	movl	(%edi,%ebp,4),%edx
00000fba	movl	%ecx,(%edi,%eax,4)
00000fbd	xorl	%edx,%ebx
00000fbf	movl	0x08(%esp),%eax
00000fc3	leal	0xff(%eax,%eax),%eax
00000fc7	movl	0x0c(%esp),%ecx
00000fcb	shll	%cl,%eax
00000fcd	andl	%ebx,%eax
00000fcf	xorl	%edx,%eax
00000fd1	movl	%eax,(%edi,%ebp,4)
00000fd4	xorb	%al,%al
00000fd6	testb	$0x01,0x10(%esi)
00000fda	jne	0x00000fe7
00000fdc	movl	0x28(%esp),%eax
00000fe0	testb	$0x01,0x10(%eax)
00000fe4	sete	%al
00000fe7	movzbl	%al,%eax
00000fea	addl	$0x10,%esp
00000fed	popl	%esi
00000fee	popl	%edi
00000fef	popl	%ebx
00000ff0	popl	%ebp
00000ff1	ret
00000ff2	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitAngle(float, int):
00001000	pushl	%ebp
00001001	pushl	%ebx
00001002	pushl	%edi
00001003	pushl	%esi
00001004	subl	$0x0c,%esp
00001007	calll	0x0000100c
0000100c	popl	%eax
0000100d	movsd	0x1a980-0x100c(%eax),%xmm0
00001015	movl	0x28(%esp),%ecx
00001019	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
0000101d	movl	0x08(%edi),%edx
00001020	movl	0x0c(%edi),%ebx
00001023	movl	%edx,%esi
00001025	subl	%ebx,%esi
00001027	cmpl	%ecx,%esi
00001029	jge	0x00001037
0000102b	movl	%edx,0x0c(%edi)
0000102e	movb	$0x01,0x10(%edi)
00001032	jmp	0x000010d5
00001037	movl	%ecx,%edx
00001039	andl	$0x1f,%edx
0000103c	movl	GetBitForBitnum(int)::bitsForBitnum-0x100c(%eax,%edx,4),%esi
00001043	movd	%esi,%xmm1
00001047	orpd	%xmm0,%xmm1
0000104b	subsd	%xmm0,%xmm1
0000104f	movss	0x24(%esp),%xmm0
00001055	cvtss2sd	%xmm0,%xmm0
00001059	divsd	0x1a988-0x100c(%eax),%xmm0
00001061	mulsd	%xmm1,%xmm0
00001065	cvttsd2si	%xmm0,%eax
00001069	decl	%esi
0000106a	andl	%eax,%esi
0000106c	leal	(%ebx,%ecx),%eax
0000106f	movl	%eax,0x0c(%edi)
00001072	movl	%ebx,%ebp
00001074	andl	$0x1f,%ebp
00001077	movl	$0x0000001f,%eax
0000107c	subl	%ebp,%eax
0000107e	decl	%ecx
0000107f	movl	$0x00000001,%edx
00001084	shll	%cl,%edx
00001086	movl	%edx,0x08(%esp)
0000108a	leal	0xff(%edx),%edx
0000108d	movb	%al,%cl
0000108f	shrl	%cl,%edx
00001091	movl	%edx,%eax
00001093	andl	$0x01,%eax
00001096	sarl	$0x05,%ebx
00001099	movl	%ebx,(%esp)
0000109c	addl	%ebx,%eax
0000109e	movl	(%edi),%edi
000010a0	movl	(%edi,%eax,4),%ebx
000010a3	movl	%ebp,%ecx
000010a5	movl	%ecx,0x04(%esp)
000010a9	roll	%cl,%esi
000010ab	movl	%ebx,%ebp
000010ad	movl	%ebp,%ecx
000010af	xorl	%esi,%ecx
000010b1	andl	%edx,%ecx
000010b3	xorl	%ebp,%ecx
000010b5	movl	(%esp),%ebx
000010b8	movl	(%edi,%ebx,4),%edx
000010bb	movl	%ecx,(%edi,%eax,4)
000010be	xorl	%edx,%esi
000010c0	movl	0x08(%esp),%eax
000010c4	leal	0xff(%eax,%eax),%eax
000010c8	movl	0x04(%esp),%ecx
000010cc	shll	%cl,%eax
000010ce	andl	%esi,%eax
000010d0	xorl	%edx,%eax
000010d2	movl	%eax,(%edi,%ebx,4)
000010d5	addl	$0x0c,%esp
000010d8	popl	%esi
000010d9	popl	%edi
000010da	popl	%ebx
000010db	popl	%ebp
000010dc	ret
000010dd	nopl	(%eax)
bf_write::WriteBitCoordMP(float, bool, bool):
000010e0	pushl	%ebp
000010e1	pushl	%ebx
000010e2	pushl	%edi
000010e3	pushl	%esi
000010e4	subl	$0x0c,%esp
000010e7	calll	0x000010ec
000010ec	popl	%edi
000010ed	movb	0x2c(%esp),%al
000010f1	testb	%al,%al
000010f3	je	0x000010ff
000010f5	movsd	0x1a990-0x10ec(%edi),%xmm1
000010fd	jmp	0x00001107
000010ff	movsd	0x1a998-0x10ec(%edi),%xmm1
00001107	xorpd	0x1a9f0-0x10ec(%edi),%xmm1
0000110f	movss	0x24(%esp),%xmm0
00001115	cvtss2sd	%xmm0,%xmm2
00001119	ucomisd	%xmm2,%xmm1
0000111d	setae	%dl
00001120	cvttss2si	%xmm0,%ecx
00001124	movl	%ecx,%esi
00001126	sarl	$0x1f,%esi
00001129	addl	%esi,%ecx
0000112b	xorl	%esi,%ecx
0000112d	testb	%al,%al
0000112f	movzbl	%dl,%edx
00001132	movb	0x28(%esp),%ah
00001136	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%esi
0000113a	je	0x00001156
0000113c	mulss	0x1aa34-0x10ec(%edi),%xmm0
00001144	cvttss2si	%xmm0,%edi
00001148	movl	%edi,%ebx
0000114a	sarl	$0x1f,%ebx
0000114d	addl	%ebx,%edi
0000114f	xorl	%ebx,%edi
00001151	andl	$0x07,%edi
00001154	jmp	0x0000116e
00001156	mulss	0x1aa30-0x10ec(%edi),%xmm0
0000115e	cvttss2si	%xmm0,%edi
00001162	movl	%edi,%ebx
00001164	sarl	$0x1f,%ebx
00001167	addl	%ebx,%edi
00001169	xorl	%ebx,%edi
0000116b	andl	$0x1f,%edi
0000116e	cmpb	$0x01,%ah
00001171	jne	0x000011b9
00001173	testl	%ecx,%ecx
00001175	je	0x000011a6
00001177	leal	0xfffffff8(,%ecx,8),%edi
0000117e	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
00001184	setl	%al
00001187	movzbl	%al,%eax
0000118a	orl	%edi,%eax
0000118c	shll	$0x02,%edx
0000118f	orl	%eax,%edx
00001191	orl	$0x02,%edx
00001194	cmpl	$0x000007ff,%ecx
0000119a	setg	%al
0000119d	movzbl	%al,%eax
000011a0	leal	0x0e(%eax,%eax,2),%ecx
000011a4	jmp	0x00001224
000011a6	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
000011ac	setl	%al
000011af	movzbl	%al,%edx
000011b2	movl	$0x00000002,%ecx
000011b7	jmp	0x00001224
000011b9	testl	%ecx,%ecx
000011bb	je	0x000011fe
000011bd	leal	0xfffffff8(,%ecx,8),%ebp
000011c4	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
000011ca	setl	%ah
000011cd	movzbl	%ah,%ebx
000011d0	orl	%ebp,%ebx
000011d2	shll	$0x02,%edx
000011d5	orl	%ebx,%edx
000011d7	cmpl	$0x000007ff,%ecx
000011dd	setg	%cl
000011e0	movzbl	%cl,%ebx
000011e3	leal	0x0e(%ebx,%ebx,2),%ecx
000011e7	shll	%cl,%edi
000011e9	leal	0x02(%edi,%edx),%edx
000011ed	testb	%al,%al
000011ef	sete	%al
000011f2	movzbl	%al,%eax
000011f5	leal	(%ebx,%ebx,2),%ecx
000011f8	leal	0x11(%ecx,%eax,2),%ecx
000011fc	jmp	0x00001224
000011fe	shll	$0x02,%edx
00001201	cmpl	bf_write::WriteSignedVarInt64(long long),%ecx
00001207	setl	%cl
0000120a	movzbl	%cl,%ecx
0000120d	orl	%edx,%ecx
0000120f	shll	$0x03,%edi
00001212	orl	%ecx,%edi
00001214	testb	%al,%al
00001216	sete	%al
00001219	movzbl	%al,%eax
0000121c	imull	$0x02,%eax,%ecx
0000121f	addl	$0x06,%ecx
00001222	movl	%edi,%edx
00001224	movl	0x08(%esi),%eax
00001227	movl	0x0c(%esi),%edi
0000122a	movl	%eax,%ebx
0000122c	subl	%edi,%ebx
0000122e	cmpl	%ecx,%ebx
00001230	jge	0x0000123b
00001232	movl	%eax,0x0c(%esi)
00001235	movb	$0x01,0x10(%esi)
00001239	jmp	0x000012a8
0000123b	leal	(%edi,%ecx),%eax
0000123e	movl	%eax,0x0c(%esi)
00001241	movl	%edi,%ebp
00001243	andl	$0x1f,%ebp
00001246	movl	$0x0000001f,%eax
0000124b	subl	%ebp,%eax
0000124d	decl	%ecx
0000124e	movl	$0x00000001,%esi
00001253	shll	%cl,%esi
00001255	movl	%esi,0x04(%esp)
00001259	leal	0xff(%esi),%ebx
0000125c	movb	%al,%cl
0000125e	shrl	%cl,%ebx
00001260	movl	%ebx,%eax
00001262	andl	$0x01,%eax
00001265	sarl	$0x05,%edi
00001268	addl	%edi,%eax
0000126a	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
0000126e	movl	(%ecx),%esi
00001270	movl	(%esi,%eax,4),%ecx
00001273	movl	%ecx,(%esp)
00001276	movl	%ebp,0x08(%esp)
0000127a	movl	0x08(%esp),%ecx
0000127e	roll	%cl,%edx
00001280	movl	(%esp),%ebp
00001283	movl	%ebp,%ecx
00001285	xorl	%edx,%ecx
00001287	andl	%ebx,%ecx
00001289	xorl	%ebp,%ecx
0000128b	movl	(%esi,%edi,4),%ebx
0000128e	movl	%ecx,(%esi,%eax,4)
00001291	xorl	%ebx,%edx
00001293	movl	0x04(%esp),%eax
00001297	leal	0xff(%eax,%eax),%eax
0000129b	movl	0x08(%esp),%ecx
0000129f	shll	%cl,%eax
000012a1	andl	%edx,%eax
000012a3	xorl	%ebx,%eax
000012a5	movl	%eax,(%esi,%edi,4)
000012a8	addl	$0x0c,%esp
000012ab	popl	%esi
000012ac	popl	%edi
000012ad	popl	%ebx
000012ae	popl	%ebp
000012af	ret
bf_write::WriteBitCoord(float):
000012b0	pushl	%ebp
000012b1	pushl	%ebx
000012b2	pushl	%edi
000012b3	pushl	%esi
000012b4	subl	$0x08,%esp
000012b7	calll	0x000012bc
000012bc	popl	%esi
000012bd	movss	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%xmm0
000012c3	cvttss2si	%xmm0,%ebx
000012c7	movl	%ebx,%eax
000012c9	sarl	$0x1f,%eax
000012cc	addl	%eax,%ebx
000012ce	xorl	%eax,%ebx
000012d0	movss	0x1aa38-0x12bc(%esi),%xmm1
000012d8	mulss	%xmm0,%xmm1
000012dc	cvttss2si	%xmm1,%ecx
000012e0	movl	%ecx,%eax
000012e2	sarl	$0x1f,%eax
000012e5	addl	%eax,%ecx
000012e7	xorl	%eax,%ecx
000012e9	andl	$0x1f,%ecx
000012ec	movl	%ecx,0x04(%esp)
000012f0	movl	0x1c(%esp),%edi
000012f4	movl	0x08(%edi),%ecx
000012f7	movl	0x0c(%edi),%eax
000012fa	cmpl	%ecx,%eax
000012fc	jl	0x00001304
000012fe	movb	$0x01,0x10(%edi)
00001302	jmp	0x0000132f
00001304	movb	%al,%cl
00001306	movl	$0x00000001,%edx
0000130b	shll	%cl,%edx
0000130d	testl	%ebx,%ebx
0000130f	je	0x0000131b
00001311	movl	(%edi),%ecx
00001313	sarl	$0x05,%eax
00001316	orl	%edx,(%ecx,%eax,4)
00001319	jmp	0x00001325
0000131b	movl	(%edi),%ecx
0000131d	notl	%edx
0000131f	sarl	$0x05,%eax
00001322	andl	%edx,(%ecx,%eax,4)
00001325	movl	0x0c(%edi),%eax
00001328	incl	%eax
00001329	movl	%eax,0x0c(%edi)
0000132c	movl	0x08(%edi),%ecx
0000132f	cmpl	%ecx,%eax
00001331	jl	0x00001341
00001333	movb	$0x01,0x10(%edi)
00001337	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%esp)
0000133c	sete	%dl
0000133f	jmp	0x0000136f
00001341	movb	%al,%cl
00001343	movl	$0x00000001,%ebp
00001348	shll	%cl,%ebp
0000134a	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%esp)
0000134f	sete	%dl
00001352	je	0x0000135e
00001354	movl	(%edi),%ecx
00001356	sarl	$0x05,%eax
00001359	orl	%ebp,(%ecx,%eax,4)
0000135c	jmp	0x00001368
0000135e	movl	(%edi),%ecx
00001360	notl	%ebp
00001362	sarl	$0x05,%eax
00001365	andl	%ebp,(%ecx,%eax,4)
00001368	movl	0x0c(%edi),%eax
0000136b	incl	%eax
0000136c	movl	%eax,0x0c(%edi)
0000136f	testl	%ebx,%ebx
00001371	sete	%cl
00001374	cmpb	$0x01,%dl
00001377	jne	0x00001381
00001379	testb	%cl,%cl
0000137b	jne	0x000014ae
00001381	cmpl	0x08(%edi),%eax
00001384	jl	0x00001390
00001386	movb	%dl,0x03(%esp)
0000138a	movb	$0x01,0x10(%edi)
0000138e	jmp	0x000013c5
00001390	movb	%dl,0x03(%esp)
00001394	movb	%al,%cl
00001396	movl	$0x00000001,%ebp
0000139b	shll	%cl,%ebp
0000139d	movss	0x1aa3c-0x12bc(%esi),%xmm1
000013a5	ucomiss	%xmm0,%xmm1
000013a8	jb	0x000013b4
000013aa	movl	(%edi),%ecx
000013ac	sarl	$0x05,%eax
000013af	orl	%ebp,(%ecx,%eax,4)
000013b2	jmp	0x000013be
000013b4	movl	(%edi),%ecx
000013b6	notl	%ebp
000013b8	sarl	$0x05,%eax
000013bb	andl	%ebp,(%ecx,%eax,4)
000013be	movl	0x0c(%edi),%eax
000013c1	incl	%eax
000013c2	movl	%eax,0x0c(%edi)
000013c5	testl	%ebx,%ebx
000013c7	je	0x00001439
000013c9	movl	0x08(%edi),%ecx
000013cc	movl	%ecx,%edx
000013ce	subl	%eax,%edx
000013d0	cmpl	$0x0d,%edx
000013d3	jg	0x000013de
000013d5	movl	%ecx,0x0c(%edi)
000013d8	movb	$0x01,0x10(%edi)
000013dc	jmp	0x00001439
000013de	decl	%ebx
000013df	leal	0x0e(%eax),%ecx
000013e2	movl	%ecx,0x0c(%edi)
000013e5	movl	%eax,%edx
000013e7	andl	$0x1f,%edx
000013ea	movb	%dl,%cl
000013ec	movb	%cl,0x02(%esp)
000013f0	roll	%cl,%ebx
000013f2	movl	$0x0000001f,%ecx
000013f7	subl	%edx,%ecx
000013f9	movl	$0x00001fff,%edx
000013fe	shrl	%cl,%edx
00001400	movl	%edx,%ecx
00001402	andl	$0x01,%ecx
00001405	sarl	$0x05,%eax
00001408	addl	%eax,%ecx
0000140a	movl	(%edi),%ebp
0000140c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%edi
00001410	movl	%edi,%esi
00001412	xorl	%ebx,%esi
00001414	andl	%edx,%esi
00001416	xorl	%edi,%esi
00001418	movl	0x1c(%esp),%edi
0000141c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4),%edx
00001420	movl	%esi,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00001424	xorl	%edx,%ebx
00001426	movb	0x02(%esp),%cl
0000142a	movl	$0x00003fff,%esi
0000142f	shll	%cl,%esi
00001431	andl	%ebx,%esi
00001433	xorl	%edx,%esi
00001435	movl	%esi,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4)
00001439	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x03(%esp)
0000143e	jne	0x000014ae
00001440	movl	0x08(%edi),%eax
00001443	movl	0x0c(%edi),%edx
00001446	movl	%eax,%ecx
00001448	subl	%edx,%ecx
0000144a	cmpl	$0x04,%ecx
0000144d	jg	0x00001458
0000144f	movl	%eax,0x0c(%edi)
00001452	movb	$0x01,0x10(%edi)
00001456	jmp	0x000014ae
00001458	leal	0x05(%edx),%eax
0000145b	movl	%eax,0x0c(%edi)
0000145e	movl	%edx,%ebx
00001460	andl	$0x1f,%ebx
00001463	movb	%bl,%cl
00001465	movb	%cl,0x03(%esp)
00001469	movl	0x04(%esp),%esi
0000146d	roll	%cl,%esi
0000146f	movl	$0x0000001f,%ecx
00001474	subl	%ebx,%ecx
00001476	movl	$0x0000000f,%ebx
0000147b	shrl	%cl,%ebx
0000147d	movl	%ebx,%ecx
0000147f	andl	$0x01,%ecx
00001482	sarl	$0x05,%edx
00001485	addl	%edx,%ecx
00001487	movl	(%edi),%edi
00001489	movl	(%edi,%ecx,4),%eax
0000148c	movl	%eax,%ebp
0000148e	xorl	%esi,%ebp
00001490	andl	%ebx,%ebp
00001492	xorl	%eax,%ebp
00001494	movl	(%edi,%edx,4),%ebx
00001497	movl	%ebp,(%edi,%ecx,4)
0000149a	xorl	%ebx,%esi
0000149c	movb	0x03(%esp),%cl
000014a0	movl	$0x0000001f,%eax
000014a5	shll	%cl,%eax
000014a7	andl	%esi,%eax
000014a9	xorl	%ebx,%eax
000014ab	movl	%eax,(%edi,%edx,4)
000014ae	addl	$0x08,%esp
000014b1	popl	%esi
000014b2	popl	%edi
000014b3	popl	%ebx
000014b4	popl	%ebp
000014b5	ret
000014b6	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteBitVec3Coord(Vector const&):
000014c0	pushl	%ebp
000014c1	movl	%esp,%ebp
000014c3	pushl	%ebx
000014c4	pushl	%edi
000014c5	pushl	%esi
000014c6	subl	$0x0c,%esp
000014c9	calll	0x000014ce
000014ce	popl	%eax
000014cf	movl	0x0c(%ebp),%esi
000014d2	movss	(%esi),%xmm0
000014d6	movb	$0x01,%dh
000014d8	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
000014df	movb	$0x01,%dl
000014e1	jae	0x000014f1
000014e3	movss	0x1aa44-0x14ce(%eax),%xmm1
000014eb	ucomiss	%xmm0,%xmm1
000014ee	setae	%dl
000014f1	movss	0x04(%esi),%xmm0
000014f6	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
000014fd	jae	0x0000150d
000014ff	movss	0x1aa44-0x14ce(%eax),%xmm1
00001507	ucomiss	%xmm0,%xmm1
0000150a	setae	%dh
0000150d	movss	0x08(%esi),%xmm0
00001512	movb	$0x01,0xf3(%ebp)
00001516	ucomiss	0x1aa40-0x14ce(%eax),%xmm0
0000151d	jae	0x0000152e
0000151f	movss	0x1aa44-0x14ce(%eax),%xmm1
00001527	ucomiss	%xmm0,%xmm1
0000152a	setae	0xf3(%ebp)
0000152e	movl	0x08(%ebp),%edi
00001531	movl	0x08(%edi),%ecx
00001534	movl	0x0c(%edi),%eax
00001537	cmpl	%ecx,%eax
00001539	jl	0x00001541
0000153b	movb	$0x01,0x10(%edi)
0000153f	jmp	0x00001571
00001541	movl	%esi,%ebx
00001543	movb	%al,%cl
00001545	movl	$0x00000001,%esi
0000154a	shll	%cl,%esi
0000154c	cmpb	$0x01,%dl
0000154f	jne	0x0000155b
00001551	movl	(%edi),%ecx
00001553	sarl	$0x05,%eax
00001556	orl	%esi,(%ecx,%eax,4)
00001559	jmp	0x00001565
0000155b	movl	(%edi),%ecx
0000155d	notl	%esi
0000155f	sarl	$0x05,%eax
00001562	andl	%esi,(%ecx,%eax,4)
00001565	movl	0x0c(%edi),%eax
00001568	incl	%eax
00001569	movl	%eax,0x0c(%edi)
0000156c	movl	0x08(%edi),%ecx
0000156f	movl	%ebx,%esi
00001571	movl	%esi,%ebx
00001573	cmpl	%ecx,%eax
00001575	jl	0x0000157d
00001577	movb	$0x01,0x10(%edi)
0000157b	jmp	0x000015a9
0000157d	movb	%al,%cl
0000157f	movl	$0x00000001,%esi
00001584	shll	%cl,%esi
00001586	cmpb	$0x01,%dh
00001589	jne	0x00001595
0000158b	movl	(%edi),%ecx
0000158d	sarl	$0x05,%eax
00001590	orl	%esi,(%ecx,%eax,4)
00001593	jmp	0x0000159f
00001595	movl	(%edi),%ecx
00001597	notl	%esi
00001599	sarl	$0x05,%eax
0000159c	andl	%esi,(%ecx,%eax,4)
0000159f	movl	0x0c(%edi),%eax
000015a2	incl	%eax
000015a3	movl	%eax,0x0c(%edi)
000015a6	movl	0x08(%edi),%ecx
000015a9	cmpl	%ecx,%eax
000015ab	jl	0x000015b6
000015ad	movb	%dh,0xf2(%ebp)
000015b0	movb	$0x01,0x10(%edi)
000015b4	jmp	0x000015df
000015b6	movb	%dh,0xf2(%ebp)
000015b9	movb	%al,%cl
000015bb	movl	$0x00000001,%esi
000015c0	shll	%cl,%esi
000015c2	cmpb	$0x01,0xf3(%ebp)
000015c6	jne	0x000015d2
000015c8	movl	(%edi),%ecx
000015ca	sarl	$0x05,%eax
000015cd	orl	%esi,(%ecx,%eax,4)
000015d0	jmp	0x000015dc
000015d2	movl	(%edi),%ecx
000015d4	notl	%esi
000015d6	sarl	$0x05,%eax
000015d9	andl	%esi,(%ecx,%eax,4)
000015dc	incl	0x0c(%edi)
000015df	cmpb	$0x01,%dl
000015e2	jne	0x000015f6
000015e4	movss	(%ebx),%xmm0
000015e8	movss	%xmm0,0x04(%esp)
000015ee	movl	%edi,(%esp)
000015f1	calll	bf_write::WriteBitCoord(float)
000015f6	cmpb	$0x01,0xf2(%ebp)
000015fa	jne	0x0000160f
000015fc	movss	0x04(%ebx),%xmm0
00001601	movss	%xmm0,0x04(%esp)
00001607	movl	%edi,(%esp)
0000160a	calll	bf_write::WriteBitCoord(float)
0000160f	cmpb	$0x01,0xf3(%ebp)
00001613	jne	0x00001628
00001615	movss	0x08(%ebx),%xmm0
0000161a	movss	%xmm0,0x04(%esp)
00001620	movl	%edi,(%esp)
00001623	calll	bf_write::WriteBitCoord(float)
00001628	addl	$0x0c,%esp
0000162b	popl	%esi
0000162c	popl	%edi
0000162d	popl	%ebx
0000162e	popl	%ebp
0000162f	ret
bf_write::WriteBitNormal(float):
00001630	pushl	%ebp
00001631	pushl	%ebx
00001632	pushl	%edi
00001633	pushl	%esi
00001634	pushl	%eax
00001635	calll	0x0000163a
0000163a	popl	%edx
0000163b	movss	0x1c(%esp),%xmm0
00001641	movss	0x1aa48-0x163a(%edx),%xmm1
00001649	mulss	%xmm0,%xmm1
0000164d	cvttss2si	%xmm1,%eax
00001651	movl	%eax,%ecx
00001653	sarl	$0x1f,%ecx
00001656	addl	%ecx,%eax
00001658	xorl	%ecx,%eax
0000165a	cmpl	$0x000007ff,%eax
0000165f	movl	$0x000007ff,%esi
00001664	cmovbel	%eax,%esi
00001667	movl	0x18(%esp),%edi
0000166b	movl	0x08(%edi),%ecx
0000166e	movl	0x0c(%edi),%eax
00001671	cmpl	%ecx,%eax
00001673	jl	0x0000167b
00001675	movb	$0x01,0x10(%edi)
00001679	jmp	0x000016b4
0000167b	movb	%al,%cl
0000167d	movl	$0x00000001,%ebx
00001682	shll	%cl,%ebx
00001684	cvtss2sd	%xmm0,%xmm0
00001688	movsd	0x1a9a0-0x163a(%edx),%xmm1
00001690	ucomisd	%xmm0,%xmm1
00001694	jb	0x000016a0
00001696	movl	(%edi),%ecx
00001698	sarl	$0x05,%eax
0000169b	orl	%ebx,(%ecx,%eax,4)
0000169e	jmp	0x000016aa
000016a0	movl	(%edi),%ecx
000016a2	notl	%ebx
000016a4	sarl	$0x05,%eax
000016a7	andl	%ebx,(%ecx,%eax,4)
000016aa	movl	0x0c(%edi),%eax
000016ad	incl	%eax
000016ae	movl	%eax,0x0c(%edi)
000016b1	movl	0x08(%edi),%ecx
000016b4	movl	%ecx,%edx
000016b6	subl	%eax,%edx
000016b8	cmpl	$0x0a,%edx
000016bb	jg	0x000016c6
000016bd	movl	%ecx,0x0c(%edi)
000016c0	movb	$0x01,0x10(%edi)
000016c4	jmp	0x00001718
000016c6	leal	0x0b(%eax),%ecx
000016c9	movl	%ecx,0x0c(%edi)
000016cc	movl	%eax,%ebx
000016ce	andl	$0x1f,%ebx
000016d1	movb	%bl,%cl
000016d3	movb	%cl,0x03(%esp)
000016d7	roll	%cl,%esi
000016d9	movl	$0x0000001f,%ecx
000016de	subl	%ebx,%ecx
000016e0	movl	$0x000003ff,%ebx
000016e5	shrl	%cl,%ebx
000016e7	movl	%ebx,%ecx
000016e9	andl	$0x01,%ecx
000016ec	sarl	$0x05,%eax
000016ef	addl	%eax,%ecx
000016f1	movl	(%edi),%edi
000016f3	movl	(%edi,%ecx,4),%edx
000016f6	movl	%edx,%ebp
000016f8	xorl	%esi,%ebp
000016fa	andl	%ebx,%ebp
000016fc	xorl	%edx,%ebp
000016fe	movl	(%edi,%eax,4),%ebx
00001701	movl	%ebp,(%edi,%ecx,4)
00001704	xorl	%ebx,%esi
00001706	movb	0x03(%esp),%cl
0000170a	movl	$0x000007ff,%edx
0000170f	shll	%cl,%edx
00001711	andl	%esi,%edx
00001713	xorl	%ebx,%edx
00001715	movl	%edx,(%edi,%eax,4)
00001718	addl	$0x04,%esp
0000171b	popl	%esi
0000171c	popl	%edi
0000171d	popl	%ebx
0000171e	popl	%ebp
0000171f	ret
bf_write::WriteBitVec3Normal(Vector const&):
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	pushl	%ebx
00001724	pushl	%edi
00001725	pushl	%esi
00001726	subl	$0x0c,%esp
00001729	calll	0x0000172e
0000172e	popl	%esi
0000172f	movl	0x0c(%ebp),%edx
00001732	movss	(%edx),%xmm0
00001736	cvtss2sd	%xmm0,%xmm0
0000173a	movb	$0x01,0xf3(%ebp)
0000173e	ucomisd	0x1a9a8-0x172e(%esi),%xmm0
00001746	movb	$0x01,0xf2(%ebp)
0000174a	jae	0x0000175c
0000174c	movsd	0x1a9b0-0x172e(%esi),%xmm1
00001754	ucomisd	%xmm0,%xmm1
00001758	setae	0xf2(%ebp)
0000175c	movss	0x04(%edx),%xmm0
00001761	cvtss2sd	%xmm0,%xmm0
00001765	ucomisd	0x1a9a8-0x172e(%esi),%xmm0
0000176d	jae	0x0000177f
0000176f	movsd	0x1a9b0-0x172e(%esi),%xmm1
00001777	ucomisd	%xmm0,%xmm1
0000177b	setae	0xf3(%ebp)
0000177f	movl	0x08(%ebp),%ebx
00001782	movl	0x08(%ebx),%ecx
00001785	movl	0x0c(%ebx),%eax
00001788	cmpl	%ecx,%eax
0000178a	jl	0x00001792
0000178c	movb	$0x01,0x10(%ebx)
00001790	jmp	0x000017bf
00001792	movb	%al,%cl
00001794	movl	$0x00000001,%edi
00001799	shll	%cl,%edi
0000179b	cmpb	$0x01,0xf2(%ebp)
0000179f	jne	0x000017ab
000017a1	movl	(%ebx),%ecx
000017a3	sarl	$0x05,%eax
000017a6	orl	%edi,(%ecx,%eax,4)
000017a9	jmp	0x000017b5
000017ab	movl	(%ebx),%ecx
000017ad	notl	%edi
000017af	sarl	$0x05,%eax
000017b2	andl	%edi,(%ecx,%eax,4)
000017b5	movl	0x0c(%ebx),%eax
000017b8	incl	%eax
000017b9	movl	%eax,0x0c(%ebx)
000017bc	movl	0x08(%ebx),%ecx
000017bf	cmpl	%ecx,%eax
000017c1	jl	0x000017c9
000017c3	movb	$0x01,0x10(%ebx)
000017c7	jmp	0x000017ef
000017c9	movb	%al,%cl
000017cb	movl	$0x00000001,%edi
000017d0	shll	%cl,%edi
000017d2	cmpb	$0x01,0xf3(%ebp)
000017d6	jne	0x000017e2
000017d8	movl	(%ebx),%ecx
000017da	sarl	$0x05,%eax
000017dd	orl	%edi,(%ecx,%eax,4)
000017e0	jmp	0x000017ec
000017e2	movl	(%ebx),%ecx
000017e4	notl	%edi
000017e6	sarl	$0x05,%eax
000017e9	andl	%edi,(%ecx,%eax,4)
000017ec	incl	0x0c(%ebx)
000017ef	movl	%edx,%edi
000017f1	cmpb	$0x01,0xf2(%ebp)
000017f5	jne	0x00001809
000017f7	movss	(%edi),%xmm0
000017fb	movss	%xmm0,0x04(%esp)
00001801	movl	%ebx,(%esp)
00001804	calll	bf_write::WriteBitNormal(float)
00001809	cmpb	$0x01,0xf3(%ebp)
0000180d	jne	0x00001822
0000180f	movss	0x04(%edi),%xmm0
00001814	movss	%xmm0,0x04(%esp)
0000181a	movl	%ebx,(%esp)
0000181d	calll	bf_write::WriteBitNormal(float)
00001822	movl	0x0c(%ebx),%eax
00001825	cmpl	0x08(%ebx),%eax
00001828	jl	0x00001830
0000182a	movb	$0x01,0x10(%ebx)
0000182e	jmp	0x00001867
00001830	movb	%al,%cl
00001832	movl	$0x00000001,%edx
00001837	shll	%cl,%edx
00001839	movss	0x08(%edi),%xmm0
0000183e	cvtss2sd	%xmm0,%xmm0
00001842	movsd	0x1a9b0-0x172e(%esi),%xmm1
0000184a	ucomisd	%xmm0,%xmm1
0000184e	jb	0x0000185a
00001850	movl	(%ebx),%ecx
00001852	sarl	$0x05,%eax
00001855	orl	%edx,(%ecx,%eax,4)
00001858	jmp	0x00001864
0000185a	movl	(%ebx),%ecx
0000185c	notl	%edx
0000185e	sarl	$0x05,%eax
00001861	andl	%edx,(%ecx,%eax,4)
00001864	incl	0x0c(%ebx)
00001867	addl	$0x0c,%esp
0000186a	popl	%esi
0000186b	popl	%edi
0000186c	popl	%ebx
0000186d	popl	%ebp
0000186e	ret
0000186f	nop
bf_write::WriteBitAngles(QAngle const&):
00001870	pushl	%ebp
00001871	movl	%esp,%ebp
00001873	subl	$0x18,%esp
00001876	movl	0x0c(%ebp),%eax
00001879	movss	0x08(%eax),%xmm0
0000187e	movss	(%eax),%xmm2
00001882	movss	0x04(%eax),%xmm1
00001887	movss	%xmm2,0xf0(%ebp)
0000188c	movss	%xmm1,0xf4(%ebp)
00001891	movss	%xmm0,0xf8(%ebp)
00001896	leal	0xf0(%ebp),%eax
00001899	movl	%eax,0x04(%esp)
0000189d	movl	0x08(%ebp),%eax
000018a0	movl	%eax,(%esp)
000018a3	calll	bf_write::WriteBitVec3Coord(Vector const&)
000018a8	addl	$0x18,%esp
000018ab	popl	%ebp
000018ac	ret
000018ad	nopl	(%eax)
bf_write::WriteChar(int):
000018b0	pushl	%ebp
000018b1	pushl	%ebx
000018b2	pushl	%edi
000018b3	pushl	%esi
000018b4	pushl	%eax
000018b5	movl	0x18(%esp),%edi
000018b9	movl	0x08(%edi),%eax
000018bc	movl	0x0c(%edi),%edx
000018bf	movl	%eax,%ecx
000018c1	subl	%edx,%ecx
000018c3	cmpl	$0x07,%ecx
000018c6	jg	0x000018d1
000018c8	movl	%eax,0x0c(%edi)
000018cb	movb	$0x01,0x10(%edi)
000018cf	jmp	0x00001934
000018d1	movl	0x1c(%esp),%esi
000018d5	movl	%esi,%eax
000018d7	andl	$0x7f,%eax
000018da	sarl	$0x1f,%esi
000018dd	andl	$0x80,%esi
000018e0	orl	%eax,%esi
000018e2	leal	0x08(%edx),%eax
000018e5	movl	%eax,0x0c(%edi)
000018e8	movl	%edx,%ebx
000018ea	andl	$0x1f,%ebx
000018ed	movb	%bl,%cl
000018ef	movb	%cl,0x03(%esp)
000018f3	roll	%cl,%esi
000018f5	movl	$0x0000001f,%ecx
000018fa	subl	%ebx,%ecx
000018fc	movl	$0x0000007f,%ebx
00001901	shrl	%cl,%ebx
00001903	movl	%ebx,%ecx
00001905	andl	$0x01,%ecx
00001908	sarl	$0x05,%edx
0000190b	addl	%edx,%ecx
0000190d	movl	(%edi),%edi
0000190f	movl	(%edi,%ecx,4),%eax
00001912	movl	%eax,%ebp
00001914	xorl	%esi,%ebp
00001916	andl	%ebx,%ebp
00001918	xorl	%eax,%ebp
0000191a	movl	(%edi,%edx,4),%ebx
0000191d	movl	%ebp,(%edi,%ecx,4)
00001920	xorl	%ebx,%esi
00001922	movb	0x03(%esp),%cl
00001926	movl	$0x000000ff,%eax
0000192b	shll	%cl,%eax
0000192d	andl	%esi,%eax
0000192f	xorl	%ebx,%eax
00001931	movl	%eax,(%edi,%edx,4)
00001934	addl	$0x04,%esp
00001937	popl	%esi
00001938	popl	%edi
00001939	popl	%ebx
0000193a	popl	%ebp
0000193b	ret
0000193c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_write::WriteByte(int):
00001940	pushl	%ebp
00001941	pushl	%ebx
00001942	pushl	%edi
00001943	pushl	%esi
00001944	pushl	%eax
00001945	movl	0x18(%esp),%edi
00001949	movl	0x08(%edi),%eax
0000194c	movl	0x0c(%edi),%edx
0000194f	movl	%eax,%ecx
00001951	subl	%edx,%ecx
00001953	cmpl	$0x07,%ecx
00001956	jg	0x00001961
00001958	movl	%eax,0x0c(%edi)
0000195b	movb	$0x01,0x10(%edi)
0000195f	jmp	0x000019b7
00001961	movl	0x1c(%esp),%esi
00001965	leal	0x08(%edx),%eax
00001968	movl	%eax,0x0c(%edi)
0000196b	movl	%edx,%ebx
0000196d	andl	$0x1f,%ebx
00001970	movb	%bl,%cl
00001972	movb	%cl,0x03(%esp)
00001976	roll	%cl,%esi
00001978	movl	$0x0000001f,%ecx
0000197d	subl	%ebx,%ecx
0000197f	movl	$0x0000007f,%ebx
00001984	shrl	%cl,%ebx
00001986	movl	%ebx,%ecx
00001988	andl	$0x01,%ecx
0000198b	sarl	$0x05,%edx
0000198e	addl	%edx,%ecx
00001990	movl	(%edi),%edi
00001992	movl	(%edi,%ecx,4),%eax
00001995	movl	%eax,%ebp
00001997	xorl	%esi,%ebp
00001999	andl	%ebx,%ebp
0000199b	xorl	%eax,%ebp
0000199d	movl	(%edi,%edx,4),%ebx
000019a0	movl	%ebp,(%edi,%ecx,4)
000019a3	xorl	%ebx,%esi
000019a5	movb	0x03(%esp),%cl
000019a9	movl	$0x000000ff,%eax
000019ae	shll	%cl,%eax
000019b0	andl	%esi,%eax
000019b2	xorl	%ebx,%eax
000019b4	movl	%eax,(%edi,%edx,4)
000019b7	addl	$0x04,%esp
000019ba	popl	%esi
000019bb	popl	%edi
000019bc	popl	%ebx
000019bd	popl	%ebp
000019be	ret
000019bf	nop
bf_write::WriteShort(int):
000019c0	pushl	%ebp
000019c1	pushl	%ebx
000019c2	pushl	%edi
000019c3	pushl	%esi
000019c4	pushl	%eax
000019c5	movl	0x18(%esp),%edi
000019c9	movl	0x08(%edi),%eax
000019cc	movl	0x0c(%edi),%edx
000019cf	movl	%eax,%ecx
000019d1	subl	%edx,%ecx
000019d3	cmpl	$0x0f,%ecx
000019d6	jg	0x000019e1
000019d8	movl	%eax,0x0c(%edi)
000019db	movb	$0x01,0x10(%edi)
000019df	jmp	0x00001a49
000019e1	movl	0x1c(%esp),%esi
000019e5	movl	%esi,%eax
000019e7	andl	$0x00007fff,%eax
000019ec	sarl	$0x1f,%esi
000019ef	andl	$0xffff8000,%esi
000019f5	orl	%eax,%esi
000019f7	leal	0x10(%edx),%eax
000019fa	movl	%eax,0x0c(%edi)
000019fd	movl	%edx,%ebx
000019ff	andl	$0x1f,%ebx
00001a02	movb	%bl,%cl
00001a04	movb	%cl,0x03(%esp)
00001a08	roll	%cl,%esi
00001a0a	movl	$0x0000001f,%ecx
00001a0f	subl	%ebx,%ecx
00001a11	movl	$0x00007fff,%ebx
00001a16	shrl	%cl,%ebx
00001a18	movl	%ebx,%ecx
00001a1a	andl	$0x01,%ecx
00001a1d	sarl	$0x05,%edx
00001a20	addl	%edx,%ecx
00001a22	movl	(%edi),%edi
00001a24	movl	(%edi,%ecx,4),%eax
00001a27	movl	%eax,%ebp
00001a29	xorl	%esi,%ebp
00001a2b	andl	%ebx,%ebp
00001a2d	xorl	%eax,%ebp
00001a2f	movl	(%edi,%edx,4),%ebx
00001a32	movl	%ebp,(%edi,%ecx,4)
00001a35	xorl	%ebx,%esi
00001a37	movb	0x03(%esp),%cl
00001a3b	movl	$0x0000ffff,%eax
00001a40	shll	%cl,%eax
00001a42	andl	%esi,%eax
00001a44	xorl	%ebx,%eax
00001a46	movl	%eax,(%edi,%edx,4)
00001a49	addl	$0x04,%esp
00001a4c	popl	%esi
00001a4d	popl	%edi
00001a4e	popl	%ebx
00001a4f	popl	%ebp
00001a50	ret
00001a51	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteWord(int):
00001a60	pushl	%ebp
00001a61	pushl	%ebx
00001a62	pushl	%edi
00001a63	pushl	%esi
00001a64	pushl	%eax
00001a65	movl	0x18(%esp),%edi
00001a69	movl	0x08(%edi),%eax
00001a6c	movl	0x0c(%edi),%edx
00001a6f	movl	%eax,%ecx
00001a71	subl	%edx,%ecx
00001a73	cmpl	$0x0f,%ecx
00001a76	jg	0x00001a81
00001a78	movl	%eax,0x0c(%edi)
00001a7b	movb	$0x01,0x10(%edi)
00001a7f	jmp	0x00001ad7
00001a81	movl	0x1c(%esp),%esi
00001a85	leal	0x10(%edx),%eax
00001a88	movl	%eax,0x0c(%edi)
00001a8b	movl	%edx,%ebx
00001a8d	andl	$0x1f,%ebx
00001a90	movb	%bl,%cl
00001a92	movb	%cl,0x03(%esp)
00001a96	roll	%cl,%esi
00001a98	movl	$0x0000001f,%ecx
00001a9d	subl	%ebx,%ecx
00001a9f	movl	$0x00007fff,%ebx
00001aa4	shrl	%cl,%ebx
00001aa6	movl	%ebx,%ecx
00001aa8	andl	$0x01,%ecx
00001aab	sarl	$0x05,%edx
00001aae	addl	%edx,%ecx
00001ab0	movl	(%edi),%edi
00001ab2	movl	(%edi,%ecx,4),%eax
00001ab5	movl	%eax,%ebp
00001ab7	xorl	%esi,%ebp
00001ab9	andl	%ebx,%ebp
00001abb	xorl	%eax,%ebp
00001abd	movl	(%edi,%edx,4),%ebx
00001ac0	movl	%ebp,(%edi,%ecx,4)
00001ac3	xorl	%ebx,%esi
00001ac5	movb	0x03(%esp),%cl
00001ac9	movl	$0x0000ffff,%eax
00001ace	shll	%cl,%eax
00001ad0	andl	%esi,%eax
00001ad2	xorl	%ebx,%eax
00001ad4	movl	%eax,(%edi,%edx,4)
00001ad7	addl	$0x04,%esp
00001ada	popl	%esi
00001adb	popl	%edi
00001adc	popl	%ebx
00001add	popl	%ebp
00001ade	ret
00001adf	nop
bf_write::WriteLong(long):
00001ae0	pushl	%ebp
00001ae1	pushl	%ebx
00001ae2	pushl	%edi
00001ae3	pushl	%esi
00001ae4	pushl	%eax
00001ae5	movl	0x18(%esp),%edi
00001ae9	movl	0x08(%edi),%eax
00001aec	movl	0x0c(%edi),%edx
00001aef	movl	%eax,%ecx
00001af1	subl	%edx,%ecx
00001af3	cmpl	$0x1f,%ecx
00001af6	jg	0x00001b01
00001af8	movl	%eax,0x0c(%edi)
00001afb	movb	$0x01,0x10(%edi)
00001aff	jmp	0x00001b57
00001b01	movl	0x1c(%esp),%esi
00001b05	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edx),%eax
00001b08	movl	%eax,0x0c(%edi)
00001b0b	movl	%edx,%ebx
00001b0d	andl	$0x1f,%ebx
00001b10	movb	%bl,%cl
00001b12	movb	%cl,0x03(%esp)
00001b16	roll	%cl,%esi
00001b18	movl	$0x0000001f,%ecx
00001b1d	subl	%ebx,%ecx
00001b1f	movl	$0x7fffffff,%ebx
00001b24	shrl	%cl,%ebx
00001b26	movl	%ebx,%ecx
00001b28	andl	$0x01,%ecx
00001b2b	sarl	$0x05,%edx
00001b2e	addl	%edx,%ecx
00001b30	movl	(%edi),%edi
00001b32	movl	(%edi,%ecx,4),%eax
00001b35	movl	%eax,%ebp
00001b37	xorl	%esi,%ebp
00001b39	andl	%ebx,%ebp
00001b3b	xorl	%eax,%ebp
00001b3d	movl	(%edi,%edx,4),%ebx
00001b40	movl	%ebp,(%edi,%ecx,4)
00001b43	xorl	%ebx,%esi
00001b45	movb	0x03(%esp),%cl
00001b49	movl	$0xffffffff,%eax
00001b4e	shll	%cl,%eax
00001b50	andl	%esi,%eax
00001b52	xorl	%ebx,%eax
00001b54	movl	%eax,(%edi,%edx,4)
00001b57	addl	$0x04,%esp
00001b5a	popl	%esi
00001b5b	popl	%edi
00001b5c	popl	%ebx
00001b5d	popl	%ebp
00001b5e	ret
00001b5f	nop
bf_write::WriteLongLong(long long):
00001b60	pushl	%ebp
00001b61	pushl	%ebx
00001b62	pushl	%edi
00001b63	pushl	%esi
00001b64	pushl	%eax
00001b65	movl	0x18(%esp),%esi
00001b69	movl	0x08(%esi),%edi
00001b6c	movl	0x0c(%esi),%edx
00001b6f	movl	%edi,%eax
00001b71	subl	%edx,%eax
00001b73	cmpl	$0x1f,%eax
00001b76	jg	0x00001b83
00001b78	movl	%edi,0x0c(%esi)
00001b7b	movb	$0x01,0x10(%esi)
00001b7f	movl	%edi,%eax
00001b81	jmp	0x00001beb
00001b83	movl	0x1c(%esp),%edi
00001b87	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edx),%eax
00001b8a	movl	%eax,0x0c(%esi)
00001b8d	movl	%edx,%ebx
00001b8f	andl	$0x1f,%ebx
00001b92	movb	%bl,%cl
00001b94	movb	%cl,0x03(%esp)
00001b98	roll	%cl,%edi
00001b9a	movl	$0x0000001f,%ecx
00001b9f	subl	%ebx,%ecx
00001ba1	movl	$0x7fffffff,%esi
00001ba6	shrl	%cl,%esi
00001ba8	movl	%esi,%ecx
00001baa	andl	$0x01,%ecx
00001bad	sarl	$0x05,%edx
00001bb0	addl	%edx,%ecx
00001bb2	movl	0x18(%esp),%eax
00001bb6	movl	(%eax),%ebp
00001bb8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%eax
00001bbc	movl	%eax,%ebx
00001bbe	xorl	%edi,%ebx
00001bc0	andl	%esi,%ebx
00001bc2	xorl	%eax,%ebx
00001bc4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4),%esi
00001bc8	movl	%ebx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4)
00001bcc	xorl	%esi,%edi
00001bce	movb	0x03(%esp),%cl
00001bd2	movl	$0xffffffff,%eax
00001bd7	shll	%cl,%eax
00001bd9	andl	%edi,%eax
00001bdb	xorl	%esi,%eax
00001bdd	movl	0x18(%esp),%esi
00001be1	movl	%eax,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4)
00001be5	movl	0x08(%esi),%eax
00001be8	movl	0x0c(%esi),%edi
00001beb	movl	%eax,%ecx
00001bed	subl	%edi,%ecx
00001bef	cmpl	$0x1f,%ecx
00001bf2	jg	0x00001bfd
00001bf4	movl	%eax,0x0c(%esi)
00001bf7	movb	$0x01,0x10(%esi)
00001bfb	jmp	0x00001c53
00001bfd	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%edi),%eax
00001c00	movl	%eax,0x0c(%esi)
00001c03	movl	%edi,%ebx
00001c05	andl	$0x1f,%ebx
00001c08	movb	%bl,%cl
00001c0a	movb	%cl,0x03(%esp)
00001c0e	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00001c12	roll	%cl,%ebp
00001c14	movl	$0x0000001f,%ecx
00001c19	subl	%ebx,%ecx
00001c1b	movl	$0x7fffffff,%ebx
00001c20	shrl	%cl,%ebx
00001c22	movl	%ebx,%ecx
00001c24	andl	$0x01,%ecx
00001c27	sarl	$0x05,%edi
00001c2a	addl	%edi,%ecx
00001c2c	movl	(%esi),%esi
00001c2e	movl	(%esi,%ecx,4),%eax
00001c31	movl	%eax,%edx
00001c33	xorl	%ebp,%edx
00001c35	andl	%ebx,%edx
00001c37	xorl	%eax,%edx
00001c39	movl	(%esi,%edi,4),%ebx
00001c3c	movl	%edx,(%esi,%ecx,4)
00001c3f	xorl	%ebx,%ebp
00001c41	movb	0x03(%esp),%cl
00001c45	movl	$0xffffffff,%eax
00001c4a	shll	%cl,%eax
00001c4c	andl	%ebp,%eax
00001c4e	xorl	%ebx,%eax
00001c50	movl	%eax,(%esi,%edi,4)
00001c53	addl	$0x04,%esp
00001c56	popl	%esi
00001c57	popl	%edi
00001c58	popl	%ebx
00001c59	popl	%ebp
00001c5a	ret
00001c5b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteFloat(float):
00001c60	pushl	%ebp
00001c61	movl	%esp,%ebp
00001c63	subl	$0x18,%esp
00001c66	movss	0x0c(%ebp),%xmm0
00001c6b	movss	%xmm0,0xfc(%ebp)
00001c70	leal	0xfc(%ebp),%eax
00001c73	movl	%eax,0x04(%esp)
00001c77	movl	0x08(%ebp),%eax
00001c7a	movl	%eax,(%esp)
00001c7d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x08(%esp)
00001c85	calll	bf_write::WriteBits(void const*, int)
00001c8a	addl	$0x18,%esp
00001c8d	popl	%ebp
00001c8e	ret
00001c8f	nop
bf_write::WriteBytes(void const*, int):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	subl	$0x18,%esp
00001c96	movl	0x10(%ebp),%eax
00001c99	shll	$0x03,%eax
00001c9c	movl	%eax,0x08(%esp)
00001ca0	movl	0x0c(%ebp),%eax
00001ca3	movl	%eax,0x04(%esp)
00001ca7	movl	0x08(%ebp),%eax
00001caa	movl	%eax,(%esp)
00001cad	calll	bf_write::WriteBits(void const*, int)
00001cb2	movzbl	%al,%eax
00001cb5	addl	$0x18,%esp
00001cb8	popl	%ebp
00001cb9	ret
00001cba	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_write::WriteString(char const*):
00001cc0	pushl	%ebp
00001cc1	pushl	%ebx
00001cc2	pushl	%edi
00001cc3	pushl	%esi
00001cc4	subl	$0x0c,%esp
00001cc7	movl	0x24(%esp),%esi
00001ccb	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00001ccf	testl	%esi,%esi
00001cd1	je	0x00001d75
00001cd7	leal	0x10(%edi),%eax
00001cda	movl	%eax,(%esp)
00001cdd	jmp	0x00001ce1
00001cdf	nop
00001ce0	incl	%esi
00001ce1	movl	0x08(%edi),%eax
00001ce4	movl	0x0c(%edi),%edx
00001ce7	movl	%eax,%ecx
00001ce9	subl	%edx,%ecx
00001ceb	cmpl	$0x07,%ecx
00001cee	jg	0x00001cf9
00001cf0	movl	%eax,0x0c(%edi)
00001cf3	movb	$0x01,0x10(%edi)
00001cf7	jmp	0x00001d63
00001cf9	movsbl	(%esi),%ebp
00001cfc	movl	%ebp,%eax
00001cfe	andl	$0x7f,%eax
00001d01	sarl	$0x1f,%ebp
00001d04	andl	$0x80,%ebp
00001d07	orl	%eax,%ebp
00001d09	leal	0x08(%edx),%eax
00001d0c	movl	%eax,0x0c(%edi)
00001d0f	movl	%edx,%ebx
00001d11	andl	$0x1f,%ebx
00001d14	movb	%bl,%cl
00001d16	movb	%cl,0x07(%esp)
00001d1a	roll	%cl,%ebp
00001d1c	movl	$0x0000001f,%ecx
00001d21	subl	%ebx,%ecx
00001d23	movl	%esi,0x08(%esp)
00001d27	movl	$0x0000007f,%esi
00001d2c	shrl	%cl,%esi
00001d2e	movl	%esi,%ecx
00001d30	andl	$0x01,%ecx
00001d33	sarl	$0x05,%edx
00001d36	addl	%edx,%ecx
00001d38	movl	(%edi),%edi
00001d3a	movl	(%edi,%ecx,4),%eax
00001d3d	movl	%eax,%ebx
00001d3f	xorl	%ebp,%ebx
00001d41	andl	%esi,%ebx
00001d43	xorl	%eax,%ebx
00001d45	movl	(%edi,%edx,4),%esi
00001d48	movl	%ebx,(%edi,%ecx,4)
00001d4b	xorl	%esi,%ebp
00001d4d	movb	0x07(%esp),%cl
00001d51	movl	$0x000000ff,%eax
00001d56	shll	%cl,%eax
00001d58	andl	%ebp,%eax
00001d5a	xorl	%esi,%eax
00001d5c	movl	0x08(%esp),%esi
00001d60	movl	%eax,(%edi,%edx,4)
00001d63	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esi)
00001d66	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00001d6a	jne	0x00001ce0
00001d70	movl	(%esp),%edi
00001d73	jmp	0x00001dcf
00001d75	movl	0x08(%edi),%eax
00001d78	movl	0x0c(%edi),%esi
00001d7b	movl	%eax,%ecx
00001d7d	subl	%esi,%ecx
00001d7f	cmpl	$0x07,%ecx
00001d82	jg	0x00001d8d
00001d84	movl	%eax,0x0c(%edi)
00001d87	movb	$0x01,0x10(%edi)
00001d8b	jmp	0x00001dcc
00001d8d	leal	0x08(%esi),%eax
00001d90	movl	%eax,0x0c(%edi)
00001d93	movl	%esi,%eax
00001d95	andl	$0x1f,%eax
00001d98	movb	%al,%cl
00001d9a	movl	%edi,%edx
00001d9c	movl	$0x000000ff,%edi
00001da1	shll	%cl,%edi
00001da3	notl	%edi
00001da5	sarl	$0x05,%esi
00001da8	movl	(%edx),%ebx
00001daa	andl	(%ebx,%esi,4),%edi
00001dad	movl	$0x0000001f,%ecx
00001db2	subl	%eax,%ecx
00001db4	movl	$0x0000007f,%eax
00001db9	shrl	%cl,%eax
00001dbb	movl	%eax,%ecx
00001dbd	andl	$0x01,%ecx
00001dc0	addl	%esi,%ecx
00001dc2	notl	%eax
00001dc4	andl	%eax,(%ebx,%ecx,4)
00001dc7	movl	%edi,(%ebx,%esi,4)
00001dca	movl	%edx,%edi
00001dcc	addl	$0x10,%edi
00001dcf	testb	$0x01,(%edi)
00001dd2	sete	%al
00001dd5	movzbl	%al,%eax
00001dd8	addl	$0x0c,%esp
00001ddb	popl	%esi
00001ddc	popl	%edi
00001ddd	popl	%ebx
00001dde	popl	%ebp
00001ddf	ret
bf_read::bf_read():
00001de0	movl	0x04(%esp),%eax
00001de4	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00001dea	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00001df1	movl	$0xffffffff,0x08(%eax)
00001df8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001dff	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e03	movb	$0x01,0x11(%eax)
00001e07	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
00001e0e	ret
00001e0f	nop
bf_read::bf_read():
00001e10	movl	0x04(%esp),%eax
00001e14	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00001e1a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00001e21	movl	$0xffffffff,0x08(%eax)
00001e28	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001e2f	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e33	movb	$0x01,0x11(%eax)
00001e37	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x14(%eax)
00001e3e	ret
00001e3f	nop
bf_read::bf_read(void const*, int, int):
00001e40	movl	0x04(%esp),%eax
00001e44	movb	$0x01,0x11(%eax)
00001e48	movl	0x08(%esp),%ecx
00001e4c	movl	%ecx,(%eax)
00001e4e	movl	0x0c(%esp),%ecx
00001e52	movl	%ecx,0x04(%eax)
00001e55	movl	0x10(%esp),%edx
00001e59	cmpl	$0xff,%edx
00001e5c	jne	0x00001e66
00001e5e	shll	$0x03,%ecx
00001e61	movl	%ecx,0x08(%eax)
00001e64	jmp	0x00001e69
00001e66	movl	%edx,0x08(%eax)
00001e69	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001e70	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001e74	ret
00001e75	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::bf_read(void const*, int, int):
00001e80	movl	0x04(%esp),%eax
00001e84	movb	$0x01,0x11(%eax)
00001e88	movl	0x08(%esp),%ecx
00001e8c	movl	%ecx,(%eax)
00001e8e	movl	0x0c(%esp),%ecx
00001e92	movl	%ecx,0x04(%eax)
00001e95	movl	0x10(%esp),%edx
00001e99	cmpl	$0xff,%edx
00001e9c	jne	0x00001ea6
00001e9e	shll	$0x03,%ecx
00001ea1	movl	%ecx,0x08(%eax)
00001ea4	jmp	0x00001ea9
00001ea6	movl	%edx,0x08(%eax)
00001ea9	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001eb0	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001eb4	ret
00001eb5	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::StartReading(void const*, int, int, int):
00001ec0	pushl	%esi
00001ec1	movl	0x0c(%esp),%ecx
00001ec5	movl	0x08(%esp),%eax
00001ec9	movl	%ecx,(%eax)
00001ecb	movl	0x10(%esp),%edx
00001ecf	movl	%edx,0x04(%eax)
00001ed2	movl	0x18(%esp),%esi
00001ed6	movl	0x14(%esp),%ecx
00001eda	cmpl	$0xff,%esi
00001edd	jne	0x00001ee7
00001edf	shll	$0x03,%edx
00001ee2	movl	%edx,0x08(%eax)
00001ee5	jmp	0x00001eea
00001ee7	movl	%esi,0x08(%eax)
00001eea	movl	%ecx,0x0c(%eax)
00001eed	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001ef1	popl	%esi
00001ef2	ret
00001ef3	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::bf_read(char const*, void const*, int, int):
00001f00	movl	0x04(%esp),%eax
00001f04	movb	$0x01,0x11(%eax)
00001f08	movl	0x08(%esp),%ecx
00001f0c	movl	%ecx,0x14(%eax)
00001f0f	movl	0x0c(%esp),%ecx
00001f13	movl	%ecx,(%eax)
00001f15	movl	0x10(%esp),%ecx
00001f19	movl	%ecx,0x04(%eax)
00001f1c	movl	0x14(%esp),%edx
00001f20	cmpl	$0xff,%edx
00001f23	jne	0x00001f2d
00001f25	shll	$0x03,%ecx
00001f28	movl	%ecx,0x08(%eax)
00001f2b	jmp	0x00001f30
00001f2d	movl	%edx,0x08(%eax)
00001f30	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f37	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f3b	ret
00001f3c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::bf_read(char const*, void const*, int, int):
00001f40	movl	0x04(%esp),%eax
00001f44	movb	$0x01,0x11(%eax)
00001f48	movl	0x08(%esp),%ecx
00001f4c	movl	%ecx,0x14(%eax)
00001f4f	movl	0x0c(%esp),%ecx
00001f53	movl	%ecx,(%eax)
00001f55	movl	0x10(%esp),%ecx
00001f59	movl	%ecx,0x04(%eax)
00001f5c	movl	0x14(%esp),%edx
00001f60	cmpl	$0xff,%edx
00001f63	jne	0x00001f6d
00001f65	shll	$0x03,%ecx
00001f68	movl	%ecx,0x08(%eax)
00001f6b	jmp	0x00001f70
00001f6d	movl	%edx,0x08(%eax)
00001f70	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f77	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f7b	ret
00001f7c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::Reset():
00001f80	movl	0x04(%esp),%eax
00001f84	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x0c(%eax)
00001f8b	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x10(%eax)
00001f8f	ret
bf_read::SetAssertOnOverflow(bool):
00001f90	movb	0x08(%esp),%al
00001f94	movl	0x04(%esp),%ecx
00001f98	movb	%al,0x11(%ecx)
00001f9b	ret
00001f9c	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::SetDebugName(char const*):
00001fa0	movl	0x08(%esp),%eax
00001fa4	movl	0x04(%esp),%ecx
00001fa8	movl	%eax,0x14(%ecx)
00001fab	ret
00001fac	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::SetOverflowFlag():
00001fb0	movl	0x04(%esp),%eax
00001fb4	movb	$0x01,0x10(%eax)
00001fb8	ret
00001fb9	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::CheckReadUBitLong(int):
00001fc0	pushl	%ebp
00001fc1	pushl	%ebx
00001fc2	pushl	%edi
00001fc3	pushl	%esi
00001fc4	subl	$0x08,%esp
00001fc7	movl	0x1c(%esp),%edi
00001fcb	movl	0x0c(%edi),%edx
00001fce	xorl	%eax,%eax
00001fd0	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00001fd4	testl	%ecx,%ecx
00001fd6	jle	0x00002022
00001fd8	leal	(%edx,%ecx),%eax
00001fdb	movl	%eax,(%esp)
00001fde	movl	(%edi),%eax
00001fe0	movl	%eax,0x04(%esp)
00001fe4	xorl	%eax,%eax
00001fe6	movl	%eax,%ebx
00001fe8	movl	%edx,%esi
00001fea	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00001ff0	leal	(%esi,%ebx),%ecx
00001ff3	movl	%ecx,%edx
00001ff5	sarl	$0x05,%edx
00001ff8	movl	0x04(%esp),%ebp
00001ffc	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%edx,4),%edx
00002000	movl	%edi,%ebp
00002002	leal	0x01(%esi,%ebx),%edi
00002006	movl	%edi,0x0c(%ebp)
00002009	movl	%ebp,%edi
0000200b	shrl	%cl,%edx
0000200d	andl	$0x01,%edx
00002010	movl	%ebx,%ecx
00002012	shll	%cl,%edx
00002014	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00002018	orl	%edx,%eax
0000201a	incl	%ebx
0000201b	cmpl	%ebx,%ecx
0000201d	jne	0x00001ff0
0000201f	movl	(%esp),%edx
00002022	subl	%ecx,%edx
00002024	movl	%edx,0x0c(%edi)
00002027	addl	$0x08,%esp
0000202a	popl	%esi
0000202b	popl	%edi
0000202c	popl	%ebx
0000202d	popl	%ebp
0000202e	ret
0000202f	nop
bf_read::ReadBits(void*, int):
00002030	pushl	%ebp
00002031	pushl	%ebx
00002032	pushl	%edi
00002033	pushl	%esi
00002034	subl	$0x10,%esp
00002037	movl	0x28(%esp),%ebx
0000203b	movl	0x2c(%esp),%esi
0000203f	testb	$0x03,%bl
00002042	je	0x00002049
00002044	cmpl	$0x08,%esi
00002047	jge	0x00002090
00002049	movl	%ebx,%ebp
0000204b	cmpl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%esi
0000204e	jge	0x000020cd
00002050	movl	%esi,%edi
00002052	jmp	0x000020bd
00002054	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002060	leal	0x08(%ecx),%eax
00002063	movl	%eax,0x0c(%ebp)
00002066	leal	0x07(%ecx),%edi
00002069	sarl	$0x05,%edi
0000206c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp),%edx
0000206f	movl	(%edx,%edi,4),%edi
00002072	movl	%ecx,%eax
00002074	sarl	$0x05,%eax
00002077	movl	(%edx,%eax,4),%edx
0000207a	andl	$0x1f,%ecx
0000207d	shrdl	%cl,%edi,%edx
00002080	movb	%dl,(%ebx)
00002082	addl	$0xf8,%esi
00002085	incl	%ebx
00002086	testb	$0x03,%bl
00002089	je	0x00002049
0000208b	cmpl	$0x07,%esi
0000208e	jle	0x00002049
00002090	movl	0x24(%esp),%ebp
00002094	movl	0x08(%ebp),%edx
00002097	movl	0x0c(%ebp),%ecx
0000209a	movl	%edx,%eax
0000209c	subl	%ecx,%eax
0000209e	cmpl	$0x07,%eax
000020a1	jg	0x00002060
000020a3	movl	%edx,0x0c(%ebp)
000020a6	movb	$0x01,0x10(%ebp)
000020aa	xorb	%dl,%dl
000020ac	jmp	0x00002080
000020ae	movl	0x0c(%esp),%ebp
000020b2	addl	0x04(%esp),%ebp
000020b6	movl	0x08(%esp),%edi
000020ba	andl	$0x1f,%edi
000020bd	cmpl	$0x08,%edi
000020c0	movl	0x24(%esp),%esi
000020c4	jge	0x0000213d
000020c6	movl	%edi,%eax
000020c8	jmp	0x000021b6
000020cd	leal	bf_write::bf_write(char const*, void*, int, int)(%esi),%eax
000020d0	movl	%eax,0x08(%esp)
000020d4	shrl	$0x03,%eax
000020d7	andl	$0x1ffffffc,%eax
000020dc	addl	$0x04,%eax
000020df	movl	%eax,0x04(%esp)
000020e3	movl	%ebp,%ebx
000020e5	movl	%ebx,0x0c(%esp)
000020e9	movl	%ebx,%ebp
000020eb	jmp	0x0000211f
000020ed	nopl	(%eax)
000020f0	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%eax),%ecx
000020f3	movl	%ecx,0x0c(%edi)
000020f6	leal	0x1f(%eax),%ebx
000020f9	sarl	$0x05,%ebx
000020fc	movl	(%edi),%edx
000020fe	movl	(%edx,%ebx,4),%ebx
00002101	movl	%eax,%ecx
00002103	sarl	$0x05,%ecx
00002106	movl	(%edx,%ecx,4),%edx
00002109	andl	$0x1f,%eax
0000210c	movb	%al,%cl
0000210e	shrdl	%cl,%ebx,%edx
00002111	movl	%edx,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
00002114	addl	$0x04,%ebp
00002117	addl	bf_write::bf_write(char const*, void*, int, int),%esi
0000211a	cmpl	$0x1f,%esi
0000211d	jle	0x000020ae
0000211f	movl	0x24(%esp),%edi
00002123	movl	0x08(%edi),%edx
00002126	movl	0x0c(%edi),%eax
00002129	movl	%edx,%ecx
0000212b	subl	%eax,%ecx
0000212d	cmpl	$0x1f,%ecx
00002130	jg	0x000020f0
00002132	movl	%edx,0x0c(%edi)
00002135	movb	$0x01,0x10(%edi)
00002139	xorl	%edx,%edx
0000213b	jmp	0x00002111
0000213d	leal	0xf8(%edi),%eax
00002140	movl	%eax,0x08(%esp)
00002144	shrl	$0x03,%eax
00002147	incl	%eax
00002148	movl	%eax,0x04(%esp)
0000214c	movl	%ebp,%ebx
0000214e	movl	%ebx,0x0c(%esp)
00002152	movl	%ebx,%ebp
00002154	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002160	movl	0x08(%esi),%edx
00002163	movl	0x0c(%esi),%eax
00002166	movl	%edx,%ecx
00002168	subl	%eax,%ecx
0000216a	cmpl	$0x07,%ecx
0000216d	jg	0x0000217a
0000216f	movl	%edx,0x0c(%esi)
00002172	movb	$0x01,0x10(%esi)
00002176	xorb	%bl,%bl
00002178	jmp	0x0000219b
0000217a	leal	0x08(%eax),%ecx
0000217d	movl	%ecx,0x0c(%esi)
00002180	leal	0x07(%eax),%edx
00002183	sarl	$0x05,%edx
00002186	movl	(%esi),%ebx
00002188	movl	(%ebx,%edx,4),%edx
0000218b	movl	%eax,%ecx
0000218d	sarl	$0x05,%ecx
00002190	movl	(%ebx,%ecx,4),%ebx
00002193	andl	$0x1f,%eax
00002196	movb	%al,%cl
00002198	shrdl	%cl,%edx,%ebx
0000219b	movb	%bl,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
0000219e	incl	%ebp
0000219f	addl	$0xf8,%edi
000021a2	cmpl	$0x07,%edi
000021a5	jg	0x00002160
000021a7	movl	0x0c(%esp),%ebp
000021ab	addl	0x04(%esp),%ebp
000021af	movl	0x08(%esp),%eax
000021b3	andl	$0x07,%eax
000021b6	testl	%eax,%eax
000021b8	je	0x00002209
000021ba	movl	0x08(%esi),%edx
000021bd	movl	0x0c(%esi),%ecx
000021c0	movl	%edx,%edi
000021c2	subl	%ecx,%edi
000021c4	cmpl	%eax,%edi
000021c6	jge	0x000021d3
000021c8	movl	%edx,0x0c(%esi)
000021cb	movb	$0x01,0x10(%esi)
000021cf	xorb	%al,%al
000021d1	jmp	0x00002206
000021d3	leal	0xff(%ecx,%eax),%edx
000021d7	movl	%eax,%ebx
000021d9	leal	(%ecx,%ebx),%eax
000021dc	movl	%eax,0x0c(%esi)
000021df	sarl	$0x05,%edx
000021e2	movl	(%esi),%edi
000021e4	movl	(%edi,%edx,4),%esi
000021e7	movl	%ecx,%edx
000021e9	sarl	$0x05,%edx
000021ec	movl	(%edi,%edx,4),%edx
000021ef	andl	$0x1f,%ecx
000021f2	shrdl	%cl,%esi,%edx
000021f5	decl	%ebx
000021f6	movb	%bl,%cl
000021f8	movl	$0x00000002,%eax
000021fd	shll	%cl,%eax
000021ff	addl	$0x000000ff,%eax
00002204	andl	%edx,%eax
00002206	movb	%al,InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp)
00002209	addl	$0x10,%esp
0000220c	popl	%esi
0000220d	popl	%edi
0000220e	popl	%ebx
0000220f	popl	%ebp
00002210	ret
00002211	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitsClamped_ptr(void*, unsigned long, unsigned long):
00002220	pushl	%ebp
00002221	movl	%esp,%ebp
00002223	pushl	%ebx
00002224	pushl	%edi
00002225	pushl	%esi
00002226	subl	$0x0c,%esp
00002229	movl	0x0c(%ebp),%eax
0000222c	movl	%eax,0x04(%esp)
00002230	movl	0x08(%ebp),%edi
00002233	movl	%edi,(%esp)
00002236	movl	0x10(%ebp),%esi
00002239	shll	$0x03,%esi
0000223c	movl	0x14(%ebp),%ecx
0000223f	movl	%ecx,%eax
00002241	subl	%esi,%eax
00002243	cmpl	%ecx,%esi
00002245	cmovael	%ecx,%esi
00002248	movl	%esi,0x08(%esp)
0000224c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ebx
00002251	cmovbl	%eax,%ebx
00002254	calll	bf_read::ReadBits(void*, int)
00002259	movl	0x08(%edi),%eax
0000225c	addl	0x0c(%edi),%ebx
0000225f	js	0x00002265
00002261	cmpl	%ebx,%eax
00002263	jge	0x0000226b
00002265	movb	$0x01,0x10(%edi)
00002269	movl	%eax,%ebx
0000226b	movl	%ebx,0x0c(%edi)
0000226e	movl	%esi,%eax
00002270	addl	$0x0c,%esp
00002273	popl	%esi
00002274	popl	%edi
00002275	popl	%ebx
00002276	popl	%ebp
00002277	ret
00002278	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitAngle(int):
00002280	pushl	%ebx
00002281	pushl	%edi
00002282	pushl	%esi
00002283	pushl	%eax
00002284	calll	0x00002289
00002289	popl	%edx
0000228a	movl	0x18(%esp),%eax
0000228e	movl	%eax,%ecx
00002290	andl	$0x1f,%ecx
00002293	cvtsi2ss	GetBitForBitnum(int)::bitsForBitnum-0x2289(%edx,%ecx,4),%xmm0
0000229c	movl	0x14(%esp),%esi
000022a0	movl	0x08(%esi),%edi
000022a3	movl	0x0c(%esi),%ecx
000022a6	movl	%edi,%ebx
000022a8	subl	%ecx,%ebx
000022aa	cmpl	%eax,%ebx
000022ac	jge	0x000022bb
000022ae	movl	%edi,0x0c(%esi)
000022b1	movb	$0x01,0x10(%esi)
000022b5	pxor	%xmm1,%xmm1
000022b9	jmp	0x000022f0
000022bb	leal	0xff(%ecx,%eax),%edi
000022bf	leal	(%ecx,%eax),%ebx
000022c2	movl	%ebx,0x0c(%esi)
000022c5	sarl	$0x05,%edi
000022c8	movl	(%esi),%esi
000022ca	movl	(%esi,%edi,4),%edi
000022cd	movl	%ecx,%ebx
000022cf	sarl	$0x05,%ebx
000022d2	movl	(%esi,%ebx,4),%esi
000022d5	andl	$0x1f,%ecx
000022d8	shrdl	%cl,%edi,%esi
000022db	decl	%eax
000022dc	movb	%al,%cl
000022de	movl	$0x00000002,%eax
000022e3	shll	%cl,%eax
000022e5	decl	%eax
000022e6	andl	%esi,%eax
000022e8	cvtsi2ss	%eax,%xmm1
000022ec	cvtss2sd	%xmm1,%xmm1
000022f0	cvtss2sd	%xmm0,%xmm2
000022f4	movsd	0x1a9b8-0x2289(%edx),%xmm0
000022fc	divsd	%xmm2,%xmm0
00002300	mulsd	%xmm1,%xmm0
00002304	cvtsd2ss	%xmm0,%xmm0
00002308	movss	%xmm0,(%esp)
0000230d	flds	(%esp)
00002310	addl	$0x04,%esp
00002313	popl	%esi
00002314	popl	%edi
00002315	popl	%ebx
00002316	ret
00002317	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::PeekUBitLong(int):
00002320	pushl	%ebp
00002321	pushl	%ebx
00002322	pushl	%edi
00002323	pushl	%esi
00002324	subl	$0x1c,%esp
00002327	movl	0x30(%esp),%ecx
0000232b	movl	0x14(%ecx),%eax
0000232e	movl	%eax,0x10(%esp)
00002332	movl	0x10(%ecx),%eax
00002335	movl	%eax,0x0c(%esp)
00002339	movl	0x0c(%ecx),%eax
0000233c	movl	%eax,0x08(%esp)
00002340	movl	0x08(%ecx),%eax
00002343	movl	%eax,0x04(%esp)
00002347	movl	(%ecx),%eax
00002349	movl	%eax,0x18(%esp)
0000234d	movl	0x04(%ecx),%eax
00002350	movl	%eax,(%esp)
00002353	xorl	%eax,%eax
00002355	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x34(%esp)
0000235a	jle	0x000023ae
0000235c	calll	0x00002361
00002361	popl	%eax
00002362	movl	%eax,0x14(%esp)
00002366	movl	0x08(%ecx),%ebx
00002369	movl	0x0c(%ecx),%ebp
0000236c	xorl	%edx,%edx
0000236e	xorl	%eax,%eax
00002370	movl	%ebx,%esi
00002372	subl	%ebp,%esi
00002374	testl	%esi,%esi
00002376	jg	0x0000237e
00002378	movb	$0x01,0x10(%ecx)
0000237c	jmp	0x000023a7
0000237e	movl	%ebp,%esi
00002380	sarl	$0x05,%esi
00002383	movl	0x18(%esp),%edi
00002387	movl	(%edi,%esi,4),%edi
0000238a	leal	0x01(%ebp),%esi
0000238d	movl	%esi,0x0c(%ecx)
00002390	btl	%ebp,%edi
00002393	jae	0x000023a5
00002395	movl	%edx,%ebp
00002397	andl	$0x1f,%ebp
0000239a	movl	0x14(%esp),%edi
0000239e	orl	GetBitForBitnum(int)::bitsForBitnum-0x2361(%edi,%ebp,4),%eax
000023a5	movl	%esi,%ebp
000023a7	incl	%edx
000023a8	cmpl	%edx,0x34(%esp)
000023ac	jne	0x00002370
000023ae	movl	0x18(%esp),%edx
000023b2	movl	%edx,(%ecx)
000023b4	movl	(%esp),%edx
000023b7	movl	%edx,0x04(%ecx)
000023ba	movl	0x04(%esp),%edx
000023be	movl	%edx,0x08(%ecx)
000023c1	movl	0x08(%esp),%edx
000023c5	movl	%edx,0x0c(%ecx)
000023c8	movl	0x0c(%esp),%edx
000023cc	movl	%edx,0x10(%ecx)
000023cf	movl	0x10(%esp),%edx
000023d3	movl	%edx,0x14(%ecx)
000023d6	addl	$0x1c,%esp
000023d9	popl	%esi
000023da	popl	%edi
000023db	popl	%ebx
000023dc	popl	%ebp
000023dd	ret
000023de	nop
bf_read::ReadUBitLongNoInline(int):
000023e0	pushl	%edi
000023e1	pushl	%esi
000023e2	movl	0x0c(%esp),%edx
000023e6	movl	0x08(%edx),%esi
000023e9	movl	0x0c(%edx),%ecx
000023ec	movl	%esi,%edi
000023ee	subl	%ecx,%edi
000023f0	movl	0x10(%esp),%eax
000023f4	cmpl	%eax,%edi
000023f6	jge	0x00002403
000023f8	movl	%esi,0x0c(%edx)
000023fb	movb	$0x01,0x10(%edx)
000023ff	xorl	%eax,%eax
00002401	jmp	0x00002430
00002403	leal	0xff(%ecx,%eax),%esi
00002407	leal	(%ecx,%eax),%edi
0000240a	movl	%edi,0x0c(%edx)
0000240d	sarl	$0x05,%esi
00002410	movl	(%edx),%edx
00002412	movl	(%edx,%esi,4),%esi
00002415	movl	%ecx,%edi
00002417	sarl	$0x05,%edi
0000241a	movl	(%edx,%edi,4),%edx
0000241d	andl	$0x1f,%ecx
00002420	shrdl	%cl,%esi,%edx
00002423	decl	%eax
00002424	movl	%eax,%ecx
00002426	movl	$0x00000002,%eax
0000242b	shll	%cl,%eax
0000242d	decl	%eax
0000242e	andl	%edx,%eax
00002430	popl	%esi
00002431	popl	%edi
00002432	ret
00002433	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadUBitVarInternal(int):
00002440	pushl	%ebx
00002441	pushl	%edi
00002442	pushl	%esi
00002443	movl	0x10(%esp),%edx
00002447	movl	0x0c(%edx),%ecx
0000244a	addl	$0xfc,%ecx
0000244d	movl	%ecx,0x0c(%edx)
00002450	movl	0x14(%esp),%esi
00002454	movl	$0x00000002,%eax
00002459	movl	$0x00000002,%edi
0000245e	subl	%esi,%edi
00002460	sarl	$0x1f,%edi
00002463	andl	$0x10,%edi
00002466	leal	0x04(%edi,%esi,4),%esi
0000246a	movl	0x08(%edx),%edi
0000246d	movl	%edi,%ebx
0000246f	subl	%ecx,%ebx
00002471	cmpl	%esi,%ebx
00002473	jge	0x00002480
00002475	movl	%edi,0x0c(%edx)
00002478	movb	$0x01,0x10(%edx)
0000247c	xorl	%eax,%eax
0000247e	jmp	0x000024a8
00002480	leal	0xff(%ecx,%esi),%edi
00002484	leal	(%ecx,%esi),%ebx
00002487	movl	%ebx,0x0c(%edx)
0000248a	sarl	$0x05,%edi
0000248d	movl	(%edx),%edx
0000248f	movl	(%edx,%edi,4),%edi
00002492	movl	%ecx,%ebx
00002494	sarl	$0x05,%ebx
00002497	movl	(%edx,%ebx,4),%edx
0000249a	andl	$0x1f,%ecx
0000249d	shrdl	%cl,%edi,%edx
000024a0	decl	%esi
000024a1	movl	%esi,%ecx
000024a3	shll	%cl,%eax
000024a5	decl	%eax
000024a6	andl	%edx,%eax
000024a8	popl	%esi
000024a9	popl	%edi
000024aa	popl	%ebx
000024ab	ret
000024ac	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::ReadSBitLong(int):
000024b0	pushl	%edi
000024b1	pushl	%esi
000024b2	movl	0x0c(%esp),%eax
000024b6	movl	0x08(%eax),%esi
000024b9	movl	0x0c(%eax),%ecx
000024bc	movl	%esi,%edi
000024be	subl	%ecx,%edi
000024c0	movl	0x10(%esp),%edx
000024c4	cmpl	%edx,%edi
000024c6	jge	0x000024d3
000024c8	movl	%esi,0x0c(%eax)
000024cb	movb	$0x01,0x10(%eax)
000024cf	xorl	%eax,%eax
000024d1	jmp	0x00002518
000024d3	leal	0xff(%ecx,%edx),%esi
000024d7	leal	(%ecx,%edx),%edi
000024da	movl	%edi,0x0c(%eax)
000024dd	sarl	$0x05,%esi
000024e0	movl	(%eax),%edi
000024e2	movl	(%edi,%esi,4),%eax
000024e5	movl	%ecx,%esi
000024e7	sarl	$0x05,%esi
000024ea	movl	(%edi,%esi,4),%esi
000024ed	andl	$0x1f,%ecx
000024f0	shrdl	%cl,%eax,%esi
000024f3	decl	%edx
000024f4	movb	%dl,%cl
000024f6	movl	$0x00000002,%eax
000024fb	shll	%cl,%eax
000024fd	decl	%eax
000024fe	andl	%esi,%eax
00002500	movb	%dl,%cl
00002502	movl	$0x00000001,%esi
00002507	shll	%cl,%esi
00002509	cmpl	%esi,%eax
0000250b	jb	0x00002518
0000250d	movb	%dl,%cl
0000250f	movl	$0xfffffffe,%edx
00002514	shll	%cl,%edx
00002516	addl	%edx,%eax
00002518	popl	%esi
00002519	popl	%edi
0000251a	ret
0000251b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadVarInt32():
00002520	pushl	%ebp
00002521	pushl	%ebx
00002522	pushl	%edi
00002523	pushl	%esi
00002524	pushl	%eax
00002525	xorl	%esi,%esi
00002527	movl	0x18(%esp),%ebp
0000252b	xorl	%eax,%eax
0000252d	nopl	(%eax)
00002530	leal	0x07(%esi),%edi
00002533	cmpl	$0x2a,%edi
00002536	je	0x0000258e
00002538	movl	0x08(%ebp),%ebx
0000253b	movl	0x0c(%ebp),%edx
0000253e	movl	%ebx,%ecx
00002540	subl	%edx,%ecx
00002542	cmpl	$0x07,%ecx
00002545	jg	0x00002552
00002547	movl	%ebx,0x0c(%ebp)
0000254a	movb	$0x01,0x10(%ebp)
0000254e	xorl	%ebx,%ebx
00002550	jmp	0x00002578
00002552	leal	0x08(%edx),%ecx
00002555	movl	%ecx,0x0c(%ebp)
00002558	movl	%ebp,%ecx
0000255a	leal	0x07(%edx),%ebp
0000255d	sarl	$0x05,%ebp
00002560	movl	(%ecx),%ebx
00002562	movl	(%ebx,%ebp,4),%ebp
00002565	movl	%edx,%ecx
00002567	sarl	$0x05,%ecx
0000256a	movl	(%ebx,%ecx,4),%ebx
0000256d	andl	$0x1f,%edx
00002570	movb	%dl,%cl
00002572	shrdl	%cl,%ebp,%ebx
00002575	movzbl	%bl,%ebx
00002578	movl	%ebx,%ebp
0000257a	andl	$0x7f,%ebp
0000257d	movl	%esi,%ecx
0000257f	shll	%cl,%ebp
00002581	orl	%ebp,%eax
00002583	testb	$0x80,%bl
00002586	movl	%edi,%esi
00002588	movl	0x18(%esp),%ebp
0000258c	jne	0x00002530
0000258e	addl	$0x04,%esp
00002591	popl	%esi
00002592	popl	%edi
00002593	popl	%ebx
00002594	popl	%ebp
00002595	ret
00002596	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadVarInt64():
000025a0	pushl	%ebp
000025a1	pushl	%ebx
000025a2	pushl	%edi
000025a3	pushl	%esi
000025a4	subl	$0x08,%esp
000025a7	movl	0x1c(%esp),%ebx
000025ab	xorl	%ebp,%ebp
000025ad	xorl	%eax,%eax
000025af	xorl	%edx,%edx
000025b1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000025c0	leal	0x07(%ebp),%ecx
000025c3	movl	%ecx,0x04(%esp)
000025c7	cmpl	$0x4d,%ecx
000025ca	je	0x0000263b
000025cc	movl	0x08(%ebx),%esi
000025cf	movl	0x0c(%ebx),%ecx
000025d2	movl	%esi,%edi
000025d4	subl	%ecx,%edi
000025d6	cmpl	$0x07,%edi
000025d9	jg	0x000025e6
000025db	movl	%esi,0x0c(%ebx)
000025de	movb	$0x01,0x10(%ebx)
000025e2	xorl	%edi,%edi
000025e4	jmp	0x00002608
000025e6	leal	0x08(%ecx),%esi
000025e9	movl	%esi,0x0c(%ebx)
000025ec	leal	0x07(%ecx),%esi
000025ef	sarl	$0x05,%esi
000025f2	movl	(%ebx),%edi
000025f4	movl	(%edi,%esi,4),%esi
000025f7	movl	%ecx,%ebx
000025f9	sarl	$0x05,%ebx
000025fc	movl	(%edi,%ebx,4),%ebx
000025ff	andl	$0x1f,%ecx
00002602	shrdl	%cl,%esi,%ebx
00002605	movzbl	%bl,%edi
00002608	movl	%edi,%esi
0000260a	andl	$0x7f,%esi
0000260d	movl	%ebp,%ebx
0000260f	movb	%bl,%cl
00002611	xorl	%ebp,%ebp
00002613	shldl	%cl,%esi,%ebp
00002616	movb	%bl,%cl
00002618	shll	%cl,%esi
0000261a	testb	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%bl
0000261d	cmovnel	%esi,%ebp
00002620	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ecx
00002625	cmovnel	%ecx,%esi
00002628	orl	%ebp,%edx
0000262a	orl	%esi,%eax
0000262c	movl	%edi,%ecx
0000262e	testb	$0x80,%cl
00002631	movl	0x04(%esp),%ebp
00002635	movl	0x1c(%esp),%ebx
00002639	jne	0x000025c0
0000263b	addl	$0x08,%esp
0000263e	popl	%esi
0000263f	popl	%edi
00002640	popl	%ebx
00002641	popl	%ebp
00002642	ret
00002643	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadSignedVarInt32():
00002650	pushl	%ebp
00002651	pushl	%ebx
00002652	pushl	%edi
00002653	pushl	%esi
00002654	pushl	%eax
00002655	xorl	%esi,%esi
00002657	movl	0x18(%esp),%ebp
0000265b	xorl	%eax,%eax
0000265d	nopl	(%eax)
00002660	leal	0x07(%esi),%edi
00002663	cmpl	$0x2a,%edi
00002666	je	0x000026be
00002668	movl	0x08(%ebp),%ebx
0000266b	movl	0x0c(%ebp),%edx
0000266e	movl	%ebx,%ecx
00002670	subl	%edx,%ecx
00002672	cmpl	$0x07,%ecx
00002675	jg	0x00002682
00002677	movl	%ebx,0x0c(%ebp)
0000267a	movb	$0x01,0x10(%ebp)
0000267e	xorl	%ebx,%ebx
00002680	jmp	0x000026a8
00002682	leal	0x08(%edx),%ecx
00002685	movl	%ecx,0x0c(%ebp)
00002688	movl	%ebp,%ecx
0000268a	leal	0x07(%edx),%ebp
0000268d	sarl	$0x05,%ebp
00002690	movl	(%ecx),%ebx
00002692	movl	(%ebx,%ebp,4),%ebp
00002695	movl	%edx,%ecx
00002697	sarl	$0x05,%ecx
0000269a	movl	(%ebx,%ecx,4),%ebx
0000269d	andl	$0x1f,%edx
000026a0	movb	%dl,%cl
000026a2	shrdl	%cl,%ebp,%ebx
000026a5	movzbl	%bl,%ebx
000026a8	movl	%ebx,%ebp
000026aa	andl	$0x7f,%ebp
000026ad	movl	%esi,%ecx
000026af	shll	%cl,%ebp
000026b1	orl	%ebp,%eax
000026b3	testb	$0x80,%bl
000026b6	movl	%edi,%esi
000026b8	movl	0x18(%esp),%ebp
000026bc	jne	0x00002660
000026be	movl	%eax,%ecx
000026c0	shrl	%ecx
000026c2	andl	$0x01,%eax
000026c5	negl	%eax
000026c7	xorl	%ecx,%eax
000026c9	addl	$0x04,%esp
000026cc	popl	%esi
000026cd	popl	%edi
000026ce	popl	%ebx
000026cf	popl	%ebp
000026d0	ret
000026d1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadSignedVarInt64():
000026e0	pushl	%ebp
000026e1	pushl	%ebx
000026e2	pushl	%edi
000026e3	pushl	%esi
000026e4	subl	$0x0c,%esp
000026e7	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
000026eb	xorl	%edx,%edx
000026ed	xorl	%eax,%eax
000026ef	xorl	%ebp,%ebp
000026f1	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00002700	movl	%ebp,0x08(%esp)
00002704	leal	0x07(%edx),%ecx
00002707	movl	%ecx,0x04(%esp)
0000270b	cmpl	$0x4d,%ecx
0000270e	je	0x00002787
00002710	movl	0x08(%ebx),%esi
00002713	movl	0x0c(%ebx),%ecx
00002716	movl	%esi,%edi
00002718	subl	%ecx,%edi
0000271a	cmpl	$0x07,%edi
0000271d	jg	0x0000272a
0000271f	movl	%esi,0x0c(%ebx)
00002722	movb	$0x01,0x10(%ebx)
00002726	xorl	%edi,%edi
00002728	jmp	0x0000274c
0000272a	leal	0x08(%ecx),%esi
0000272d	movl	%esi,0x0c(%ebx)
00002730	leal	0x07(%ecx),%esi
00002733	sarl	$0x05,%esi
00002736	movl	(%ebx),%edi
00002738	movl	(%edi,%esi,4),%esi
0000273b	movl	%ecx,%ebx
0000273d	sarl	$0x05,%ebx
00002740	movl	(%edi,%ebx,4),%ebx
00002743	andl	$0x1f,%ecx
00002746	shrdl	%cl,%esi,%ebx
00002749	movzbl	%bl,%edi
0000274c	movl	%edi,%esi
0000274e	andl	$0x7f,%esi
00002751	movb	%dl,%cl
00002753	xorl	%ebp,%ebp
00002755	shldl	%cl,%esi,%ebp
00002758	movb	%dl,%cl
0000275a	shll	%cl,%esi
0000275c	testb	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%dl
0000275f	cmovnel	%esi,%ebp
00002762	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%ecx
00002767	cmovnel	%ecx,%esi
0000276a	movl	0x08(%esp),%ecx
0000276e	orl	%ebp,%ecx
00002770	movl	%ecx,%ebp
00002772	orl	%esi,%eax
00002774	movl	%edi,%ecx
00002776	testb	$0x80,%cl
00002779	movl	0x04(%esp),%edx
0000277d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
00002781	jne	0x00002700
00002787	movl	%eax,%ecx
00002789	andl	$0x01,%ecx
0000278c	xorl	%esi,%esi
0000278e	subl	%ecx,%esi
00002790	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%edx
00002795	sbbl	InternalBitBufErrorHandler(BitBufErrorType, char const*),%edx
00002798	shrl	%eax
0000279a	xorl	%esi,%eax
0000279c	addl	$0x0c,%esp
0000279f	popl	%esi
000027a0	popl	%edi
000027a1	popl	%ebx
000027a2	popl	%ebp
000027a3	ret
000027a4	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitLong(int, bool):
000027b0	pushl	%ebx
000027b1	pushl	%edi
000027b2	pushl	%esi
000027b3	movl	0x10(%esp),%eax
000027b7	movl	0x08(%eax),%esi
000027ba	movl	0x0c(%eax),%ecx
000027bd	movl	%esi,%edi
000027bf	subl	%ecx,%edi
000027c1	movl	0x14(%esp),%edx
000027c5	movb	0x18(%esp),%bl
000027c9	cmpb	$0x01,%bl
000027cc	jne	0x00002824
000027ce	cmpl	%edx,%edi
000027d0	jge	0x000027dd
000027d2	movl	%esi,0x0c(%eax)
000027d5	movb	$0x01,0x10(%eax)
000027d9	xorl	%eax,%eax
000027db	jmp	0x00002855
000027dd	leal	0xff(%ecx,%edx),%esi
000027e1	leal	(%ecx,%edx),%edi
000027e4	movl	%edi,0x0c(%eax)
000027e7	sarl	$0x05,%esi
000027ea	movl	(%eax),%edi
000027ec	movl	(%edi,%esi,4),%eax
000027ef	movl	%ecx,%esi
000027f1	sarl	$0x05,%esi
000027f4	movl	(%edi,%esi,4),%esi
000027f7	andl	$0x1f,%ecx
000027fa	shrdl	%cl,%eax,%esi
000027fd	decl	%edx
000027fe	movb	%dl,%cl
00002800	movl	$0x00000002,%eax
00002805	shll	%cl,%eax
00002807	decl	%eax
00002808	andl	%esi,%eax
0000280a	movb	%dl,%cl
0000280c	movl	$0x00000001,%esi
00002811	shll	%cl,%esi
00002813	cmpl	%esi,%eax
00002815	jb	0x00002855
00002817	movb	%dl,%cl
00002819	movl	$0xfffffffe,%edx
0000281e	shll	%cl,%edx
00002820	addl	%edx,%eax
00002822	jmp	0x00002855
00002824	cmpl	%edx,%edi
00002826	jl	0x000027d2
00002828	leal	0xff(%ecx,%edx),%esi
0000282c	leal	(%ecx,%edx),%edi
0000282f	movl	%edi,0x0c(%eax)
00002832	sarl	$0x05,%esi
00002835	movl	(%eax),%edi
00002837	movl	(%edi,%esi,4),%eax
0000283a	movl	%ecx,%esi
0000283c	sarl	$0x05,%esi
0000283f	movl	(%edi,%esi,4),%esi
00002842	andl	$0x1f,%ecx
00002845	shrdl	%cl,%eax,%esi
00002848	decl	%edx
00002849	movb	%dl,%cl
0000284b	movl	$0x00000002,%eax
00002850	shll	%cl,%eax
00002852	decl	%eax
00002853	andl	%esi,%eax
00002855	popl	%esi
00002856	popl	%edi
00002857	popl	%ebx
00002858	ret
00002859	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax)
bf_read::ReadBitCoord():
00002860	pushl	%ebp
00002861	pushl	%ebx
00002862	pushl	%edi
00002863	pushl	%esi
00002864	subl	$0x10,%esp
00002867	calll	0x0000286c
0000286c	popl	%eax
0000286d	movl	%eax,0x08(%esp)
00002871	movl	0x24(%esp),%ebx
00002875	movl	0x08(%ebx),%esi
00002878	movl	0x0c(%ebx),%edx
0000287b	movl	%esi,%eax
0000287d	subl	%edx,%eax
0000287f	testl	%eax,%eax
00002881	jg	0x0000288b
00002883	movb	$0x01,0x10(%ebx)
00002887	xorl	%ebp,%ebp
00002889	jmp	0x000028a4
0000288b	movl	%edx,%eax
0000288d	sarl	$0x05,%eax
00002890	movl	(%ebx),%ecx
00002892	movl	(%ecx,%eax,4),%ebp
00002895	leal	0x01(%edx),%eax
00002898	movl	%eax,0x0c(%ebx)
0000289b	movb	%dl,%cl
0000289d	shrl	%cl,%ebp
0000289f	andl	$0x01,%ebp
000028a2	movl	%eax,%edx
000028a4	movl	%esi,%eax
000028a6	subl	%edx,%eax
000028a8	testl	%eax,%eax
000028aa	jg	0x000028b4
000028ac	movb	$0x01,0x10(%ebx)
000028b0	movb	$0x01,%cl
000028b2	jmp	0x000028cc
000028b4	movl	%edx,%eax
000028b6	sarl	$0x05,%eax
000028b9	movl	(%ebx),%ecx
000028bb	movl	(%ecx,%eax,4),%edi
000028be	leal	0x01(%edx),%eax
000028c1	movl	%eax,0x0c(%ebx)
000028c4	btl	%edx,%edi
000028c7	setae	%cl
000028ca	movl	%eax,%edx
000028cc	testl	%ebp,%ebp
000028ce	sete	%al
000028d1	testb	%cl,%cl
000028d3	je	0x000028e1
000028d5	pxor	%xmm0,%xmm0
000028d9	testb	%al,%al
000028db	jne	0x000029f4
000028e1	movl	%esi,%eax
000028e3	subl	%edx,%eax
000028e5	testl	%eax,%eax
000028e7	jg	0x000028fa
000028e9	movb	%cl,0x07(%esp)
000028ed	movb	$0x01,0x10(%ebx)
000028f1	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esp)
000028f8	jmp	0x0000291a
000028fa	movb	%cl,0x07(%esp)
000028fe	movl	%edx,%eax
00002900	sarl	$0x05,%eax
00002903	movl	(%ebx),%ecx
00002905	movl	(%ecx,%eax,4),%edi
00002908	leal	0x01(%edx),%eax
0000290b	movl	%eax,0x0c(%ebx)
0000290e	movb	%dl,%cl
00002910	shrl	%cl,%edi
00002912	andl	$0x01,%edi
00002915	movl	%edi,(%esp)
00002918	movl	%eax,%edx
0000291a	movl	%esi,%edi
0000291c	pxor	%xmm0,%xmm0
00002920	testl	%ebp,%ebp
00002922	movb	0x07(%esp),%cl
00002926	jne	0x00002930
00002928	movl	%ebx,%esi
0000292a	pxor	%xmm1,%xmm1
0000292e	jmp	0x00002987
00002930	movl	%edi,%eax
00002932	subl	%edx,%eax
00002934	cmpl	$0x0d,%eax
00002937	jg	0x00002952
00002939	movl	%edi,0x0c(%ebx)
0000293c	movb	$0x01,0x10(%ebx)
00002940	movl	%ebx,%esi
00002942	movl	0x08(%esp),%eax
00002946	movsd	0x1a9c0-0x286c(%eax),%xmm1
0000294e	movl	%edi,%edx
00002950	jmp	0x00002987
00002952	leal	0x0e(%edx),%ebp
00002955	movl	%ebp,0x0c(%ebx)
00002958	movl	%ebx,%ecx
0000295a	leal	0x0d(%edx),%ebx
0000295d	sarl	$0x05,%ebx
00002960	movl	(%ecx),%eax
00002962	movl	%ecx,%esi
00002964	movl	(%eax,%ebx,4),%ebx
00002967	movl	%edx,%ecx
00002969	sarl	$0x05,%ecx
0000296c	movl	(%eax,%ecx,4),%eax
0000296f	andl	$0x1f,%edx
00002972	movb	%dl,%cl
00002974	shrdl	%cl,%ebx,%eax
00002977	movb	0x07(%esp),%cl
0000297b	andl	$0x00003fff,%eax
00002980	incl	%eax
00002981	cvtsi2sd	%eax,%xmm1
00002985	movl	%ebp,%edx
00002987	testb	%cl,%cl
00002989	movl	%esi,%ecx
0000298b	jne	0x000029db
0000298d	movl	%edi,%eax
0000298f	subl	%edx,%eax
00002991	cmpl	$0x04,%eax
00002994	jg	0x000029a3
00002996	movl	%edi,0x0c(%ecx)
00002999	movb	$0x01,0x10(%ecx)
0000299d	pxor	%xmm0,%xmm0
000029a1	jmp	0x000029db
000029a3	leal	0x05(%edx),%eax
000029a6	movl	%eax,0x0c(%ecx)
000029a9	leal	0x04(%edx),%esi
000029ac	sarl	$0x05,%esi
000029af	movl	(%ecx),%eax
000029b1	movl	(%eax,%esi,4),%ebx
000029b4	movl	%edx,%esi
000029b6	sarl	$0x05,%esi
000029b9	movl	(%eax,%esi,4),%eax
000029bc	andl	$0x1f,%edx
000029bf	movb	%dl,%cl
000029c1	shrdl	%cl,%ebx,%eax
000029c4	andl	$0x1f,%eax
000029c7	cvtsi2ss	%eax,%xmm0
000029cb	cvtss2sd	%xmm0,%xmm0
000029cf	movl	0x08(%esp),%eax
000029d3	mulsd	0x1a9c8-0x286c(%eax),%xmm0
000029db	addsd	%xmm0,%xmm1
000029df	cvtsd2ss	%xmm1,%xmm0
000029e3	cmpl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%esp)
000029e7	je	0x000029f4
000029e9	movl	0x08(%esp),%eax
000029ed	xorps	0x1aa00-0x286c(%eax),%xmm0
000029f4	movss	%xmm0,0x0c(%esp)
000029fa	flds	0x0c(%esp)
000029fe	addl	$0x10,%esp
00002a01	popl	%esi
00002a02	popl	%edi
00002a03	popl	%ebx
00002a04	popl	%ebp
00002a05	ret
00002a06	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordMP(bool, bool):
00002a10	pushl	%ebp
00002a11	pushl	%ebx
00002a12	pushl	%edi
00002a13	pushl	%esi
00002a14	subl	$0x0c,%esp
00002a17	calll	0x00002a1c
00002a1c	popl	%eax
00002a1d	movl	%eax,0x04(%esp)
00002a21	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%esi
00002a25	movl	0x08(%esi),%ebp
00002a28	movl	0x0c(%esi),%ebx
00002a2b	movl	%ebp,%eax
00002a2d	subl	%ebx,%eax
00002a2f	cmpb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x24(%esp)
00002a34	sete	%cl
00002a37	movzbl	%cl,%edx
00002a3a	orl	$0x02,%edx
00002a3d	cmpl	%edx,%eax
00002a3f	jge	0x00002a4e
00002a41	movl	%ebp,0x0c(%esi)
00002a44	movb	$0x01,0x10(%esi)
00002a48	xorl	%edx,%edx
00002a4a	movl	%ebp,%eax
00002a4c	jmp	0x00002a83
00002a4e	leal	0xff(%ebx,%edx),%ecx
00002a52	leal	(%ebx,%edx),%eax
00002a55	movl	%eax,0x0c(%esi)
00002a58	sarl	$0x05,%ecx
00002a5b	movl	%ebp,%edi
00002a5d	movl	(%esi),%ebp
00002a5f	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%esi
00002a63	movl	%ebx,%ecx
00002a65	sarl	$0x05,%ecx
00002a68	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebp
00002a6c	andl	$0x1f,%ebx
00002a6f	movb	%bl,%cl
00002a71	shrdl	%cl,%esi,%ebp
00002a74	decl	%edx
00002a75	movb	%dl,%cl
00002a77	movl	$0x00000002,%edx
00002a7c	shll	%cl,%edx
00002a7e	decl	%edx
00002a7f	andl	%ebp,%edx
00002a81	movl	%edi,%ebp
00002a83	cmpb	$0x01,0x24(%esp)
00002a88	jne	0x00002b01
00002a8a	pxor	%xmm1,%xmm1
00002a8e	testb	$0x02,%dl
00002a91	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebx
00002a95	je	0x00002bd0
00002a9b	movl	%ebp,%ecx
00002a9d	subl	%eax,%ecx
00002a9f	testb	$0x01,%dl
00002aa2	sete	%dl
00002aa5	movzbl	%dl,%edx
00002aa8	leal	0x0c(%edx,%edx,2),%edx
00002aac	cmpl	%edx,%ecx
00002aae	jge	0x00002abb
00002ab0	movl	%ebp,0x0c(%ebx)
00002ab3	movb	$0x01,0x10(%ebx)
00002ab7	xorl	%eax,%eax
00002ab9	jmp	0x00002aea
00002abb	leal	0xff(%eax,%edx),%ecx
00002abf	leal	(%eax,%edx),%esi
00002ac2	movl	%esi,0x0c(%ebx)
00002ac5	sarl	$0x05,%ecx
00002ac8	movl	(%ebx),%esi
00002aca	movl	(%esi,%ecx,4),%edi
00002acd	movl	%eax,%ecx
00002acf	sarl	$0x05,%ecx
00002ad2	movl	(%esi,%ecx,4),%esi
00002ad5	andl	$0x1f,%eax
00002ad8	movb	%al,%cl
00002ada	shrdl	%cl,%edi,%esi
00002add	decl	%edx
00002ade	movl	%edx,%ecx
00002ae0	movl	$0x00000002,%eax
00002ae5	shll	%cl,%eax
00002ae7	decl	%eax
00002ae8	andl	%esi,%eax
00002aea	movl	%eax,%ecx
00002aec	shrl	%ecx
00002aee	movl	%ecx,%edx
00002af0	notl	%edx
00002af2	incl	%ecx
00002af3	testb	$0x01,%al
00002af5	cmovnel	%edx,%ecx
00002af8	cvtsi2ss	%ecx,%xmm1
00002afc	jmp	0x00002bd0
00002b01	movl	%edx,%ebx
00002b03	andl	$0x04,%ebx
00002b06	movzbl	0x28(%esp),%ecx
00002b0b	movl	0x04(%esp),%edi
00002b0f	leal	bf_read::ReadBitCoordMP(bool, bool)::mul_table-0x2a1c(%edi,%ecx,8),%esi
00002b16	movss	(%ebx,%esi),%xmm0
00002b1b	movl	%ebp,%ebx
00002b1d	subl	%eax,%ebx
00002b1f	movl	%ebp,%esi
00002b21	movl	%edx,%ebp
00002b23	andl	$0x03,%ebp
00002b26	shll	$0x02,%ecx
00002b29	orl	%ebp,%ecx
00002b2b	movzbl	bf_read::ReadBitCoordMP(bool, bool)::numbits_table-0x2a1c(%edi,%ecx),%ebp
00002b33	cmpl	%ebp,%ebx
00002b35	jge	0x00002b46
00002b37	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00002b3b	movl	%esi,0x0c(%eax)
00002b3e	movb	$0x01,0x10(%eax)
00002b42	xorl	%eax,%eax
00002b44	jmp	0x00002b79
00002b46	leal	0xff(%eax,%ebp),%ecx
00002b4a	leal	(%eax,%ebp),%esi
00002b4d	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%edi
00002b51	movl	%esi,0x0c(%edi)
00002b54	sarl	$0x05,%ecx
00002b57	movl	(%edi),%esi
00002b59	movl	(%esi,%ecx,4),%edi
00002b5c	movl	%eax,%ecx
00002b5e	sarl	$0x05,%ecx
00002b61	movl	(%esi,%ecx,4),%esi
00002b64	andl	$0x1f,%eax
00002b67	movb	%al,%cl
00002b69	shrdl	%cl,%edi,%esi
00002b6c	decl	%ebp
00002b6d	movl	%ebp,%ecx
00002b6f	movl	$0x00000002,%eax
00002b74	shll	%cl,%eax
00002b76	decl	%eax
00002b77	andl	%esi,%eax
00002b79	testb	$0x02,%dl
00002b7c	je	0x00002bc8
00002b7e	andl	$0x01,%edx
00002b81	movl	%edx,%ecx
00002b83	decl	%ecx
00002b84	movl	%ecx,%edx
00002b86	andl	$0x00003800,%edx
00002b8c	orl	$0x000007ff,%edx
00002b92	andl	%eax,%edx
00002b94	leal	0x00000008(,%edx,8),%edi
00002b9b	leal	0x01(%edx),%esi
00002b9e	shll	$0x05,%esi
00002ba1	subl	%edi,%esi
00002ba3	movb	0x28(%esp),%bl
00002ba7	notb	%bl
00002ba9	movzbl	%bl,%edi
00002bac	shll	$0x1f,%edi
00002baf	sarl	$0x1f,%edi
00002bb2	andl	%esi,%edi
00002bb4	leal	0x08(%edi,%edx,8),%edx
00002bb8	movl	%eax,%esi
00002bba	shrl	$0x0b,%esi
00002bbd	shrl	$0x0e,%eax
00002bc0	subl	%esi,%eax
00002bc2	andl	%ecx,%eax
00002bc4	addl	%esi,%eax
00002bc6	orl	%edx,%eax
00002bc8	cvtsi2ss	%eax,%xmm1
00002bcc	mulss	%xmm0,%xmm1
00002bd0	movss	%xmm1,0x08(%esp)
00002bd6	flds	0x08(%esp)
00002bda	addl	$0x0c,%esp
00002bdd	popl	%esi
00002bde	popl	%edi
00002bdf	popl	%ebx
00002be0	popl	%ebp
00002be1	ret
00002be2	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordBits():
00002bf0	pushl	%ebp
00002bf1	pushl	%ebx
00002bf2	pushl	%edi
00002bf3	pushl	%esi
00002bf4	movl	0x14(%esp),%edi
00002bf8	movl	0x08(%edi),%ebx
00002bfb	movl	0x0c(%edi),%ecx
00002bfe	movl	%ebx,%eax
00002c00	subl	%ecx,%eax
00002c02	cmpl	$0x01,%eax
00002c05	jg	0x00002c15
00002c07	movl	%ebx,0x0c(%edi)
00002c0a	movb	$0x01,0x10(%edi)
00002c0e	xorl	%eax,%eax
00002c10	jmp	0x00002c95
00002c15	leal	0x02(%ecx),%edx
00002c18	movl	%edx,0x0c(%edi)
00002c1b	leal	0x01(%ecx),%eax
00002c1e	sarl	$0x05,%eax
00002c21	movl	(%edi),%ebp
00002c23	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%eax,4),%eax
00002c27	movl	%ecx,%esi
00002c29	sarl	$0x05,%esi
00002c2c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%esi,4),%esi
00002c30	andl	$0x1f,%ecx
00002c33	shrdl	%cl,%eax,%esi
00002c36	xorl	%eax,%eax
00002c38	andl	$0x03,%esi
00002c3b	je	0x00002c95
00002c3d	calll	0x00002c42
00002c42	popl	%eax
00002c43	movl	%ebx,%ecx
00002c45	subl	%edx,%ecx
00002c47	movl	bf_read::ReadBitCoordBits()::numbits_table-0x2c42+0xfffffffc(%eax,%esi,4),%eax
00002c4e	cmpl	%eax,%ecx
00002c50	jge	0x00002c5d
00002c52	movl	%ebx,0x0c(%edi)
00002c55	movb	$0x01,0x10(%edi)
00002c59	xorl	%eax,%eax
00002c5b	jmp	0x00002c93
00002c5d	leal	0xff(%edx,%eax),%ecx
00002c61	leal	(%edx,%eax),%ebx
00002c64	movl	%ebx,0x0c(%edi)
00002c67	sarl	$0x05,%ecx
00002c6a	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebx
00002c6e	movl	%edx,%ecx
00002c70	sarl	$0x05,%ecx
00002c73	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%edi
00002c77	andl	$0x1f,%edx
00002c7a	movb	%dl,%cl
00002c7c	shrdl	%cl,%ebx,%edi
00002c7f	decl	%eax
00002c80	movl	%eax,%ecx
00002c82	movl	$0x00000002,%eax
00002c87	shll	%cl,%eax
00002c89	addl	$0x3fffffff,%eax
00002c8e	andl	%edi,%eax
00002c90	shll	$0x02,%eax
00002c93	orl	%esi,%eax
00002c95	popl	%esi
00002c96	popl	%edi
00002c97	popl	%ebx
00002c98	popl	%ebp
00002c99	ret
00002c9a	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitCoordMPBits(bool, bool):
00002ca0	pushl	%ebp
00002ca1	pushl	%ebx
00002ca2	pushl	%edi
00002ca3	pushl	%esi
00002ca4	pushl	%eax
00002ca5	calll	0x00002caa
00002caa	popl	%eax
00002cab	movl	%eax,(%esp)
00002cae	movl	0x18(%esp),%esi
00002cb2	movl	0x08(%esi),%edi
00002cb5	movl	0x0c(%esi),%ebx
00002cb8	movl	%edi,%eax
00002cba	subl	%ebx,%eax
00002cbc	cmpl	$0x01,%eax
00002cbf	jg	0x00002cce
00002cc1	movl	%edi,0x0c(%esi)
00002cc4	movb	$0x01,0x10(%esi)
00002cc8	xorl	%eax,%eax
00002cca	movl	%edi,%edx
00002ccc	jmp	0x00002cf2
00002cce	leal	0x02(%ebx),%edx
00002cd1	movl	%edx,0x0c(%esi)
00002cd4	leal	0x01(%ebx),%ebp
00002cd7	sarl	$0x05,%ebp
00002cda	movl	(%esi),%eax
00002cdc	movl	(%eax,%ebp,4),%ebp
00002cdf	movl	%ebx,%ecx
00002ce1	sarl	$0x05,%ecx
00002ce4	movl	(%eax,%ecx,4),%eax
00002ce7	andl	$0x1f,%ebx
00002cea	movb	%bl,%cl
00002cec	shrdl	%cl,%ebp,%eax
00002cef	andl	$0x03,%eax
00002cf2	cmpb	$0x01,0x1c(%esp)
00002cf7	jne	0x00002d0b
00002cf9	testb	$0x02,%al
00002cfb	je	0x00002d6c
00002cfd	testb	$0x01,%al
00002cff	sete	%cl
00002d02	movzbl	%cl,%ecx
00002d05	leal	0x0c(%ecx,%ecx,2),%ebx
00002d09	jmp	0x00002d20
00002d0b	movzbl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ecx
00002d10	shll	$0x02,%ecx
00002d13	orl	%eax,%ecx
00002d15	movl	(%esp),%ebx
00002d18	movzbl	bf_read::ReadBitCoordMPBits(bool, bool)::numbits_table-0x2caa(%ebx,%ecx),%ebx
00002d20	movl	%edi,%ecx
00002d22	subl	%edx,%ecx
00002d24	cmpl	%ebx,%ecx
00002d26	jge	0x00002d33
00002d28	movl	%edi,0x0c(%esi)
00002d2b	movb	$0x01,0x10(%esi)
00002d2f	xorl	%edx,%edx
00002d31	jmp	0x00002d6a
00002d33	leal	0xff(%edx,%ebx),%ecx
00002d37	leal	(%edx,%ebx),%edi
00002d3a	movl	%edi,0x0c(%esi)
00002d3d	sarl	$0x05,%ecx
00002d40	movl	(%esi),%esi
00002d42	movl	(%esi,%ecx,4),%edi
00002d45	movl	%edx,%ecx
00002d47	sarl	$0x05,%ecx
00002d4a	movl	(%esi,%ecx,4),%esi
00002d4d	andl	$0x1f,%edx
00002d50	movb	%dl,%cl
00002d52	shrdl	%cl,%edi,%esi
00002d55	decl	%ebx
00002d56	movb	%bl,%cl
00002d58	movl	$0x00000002,%edx
00002d5d	shll	%cl,%edx
00002d5f	addl	$0x3fffffff,%edx
00002d65	andl	%esi,%edx
00002d67	shll	$0x02,%edx
00002d6a	orl	%edx,%eax
00002d6c	addl	$0x04,%esp
00002d6f	popl	%esi
00002d70	popl	%edi
00002d71	popl	%ebx
00002d72	popl	%ebp
00002d73	ret
00002d74	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitVec3Coord(Vector&):
00002d80	pushl	%ebp
00002d81	movl	%esp,%ebp
00002d83	pushl	%ebx
00002d84	pushl	%edi
00002d85	pushl	%esi
00002d86	subl	$0x0c,%esp
00002d89	movl	0x0c(%ebp),%eax
00002d8c	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax)
00002d92	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%eax)
00002d99	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x08(%eax)
00002da0	movl	0x08(%ebp),%edi
00002da3	movl	0x08(%edi),%edx
00002da6	movl	0x0c(%edi),%ecx
00002da9	movl	%edx,%eax
00002dab	subl	%ecx,%eax
00002dad	testl	%eax,%eax
00002daf	jg	0x00002db9
00002db1	movb	$0x01,0x10(%edi)
00002db5	xorl	%eax,%eax
00002db7	jmp	0x00002dd0
00002db9	movl	%ecx,%eax
00002dbb	sarl	$0x05,%eax
00002dbe	movl	(%edi),%esi
00002dc0	movl	(%esi,%eax,4),%eax
00002dc3	leal	0x01(%ecx),%esi
00002dc6	movl	%esi,0x0c(%edi)
00002dc9	shrl	%cl,%eax
00002dcb	andl	$0x01,%eax
00002dce	movl	%esi,%ecx
00002dd0	movl	%edx,%esi
00002dd2	subl	%ecx,%esi
00002dd4	testl	%esi,%esi
00002dd6	jg	0x00002de0
00002dd8	movb	$0x01,0x10(%edi)
00002ddc	xorl	%ebx,%ebx
00002dde	jmp	0x00002df7
00002de0	movl	%ecx,%esi
00002de2	sarl	$0x05,%esi
00002de5	movl	(%edi),%ebx
00002de7	movl	(%ebx,%esi,4),%ebx
00002dea	leal	0x01(%ecx),%esi
00002ded	movl	%esi,0x0c(%edi)
00002df0	shrl	%cl,%ebx
00002df2	andl	$0x01,%ebx
00002df5	movl	%esi,%ecx
00002df7	subl	%ecx,%edx
00002df9	testl	%edx,%edx
00002dfb	jg	0x00002e05
00002dfd	movb	$0x01,0x10(%edi)
00002e01	xorl	%esi,%esi
00002e03	jmp	0x00002e1a
00002e05	movl	%ecx,%edx
00002e07	sarl	$0x05,%edx
00002e0a	movl	(%edi),%esi
00002e0c	movl	(%esi,%edx,4),%esi
00002e0f	leal	0x01(%ecx),%edx
00002e12	movl	%edx,0x0c(%edi)
00002e15	shrl	%cl,%esi
00002e17	andl	$0x01,%esi
00002e1a	testl	%eax,%eax
00002e1c	je	0x00002e2b
00002e1e	movl	%edi,(%esp)
00002e21	calll	bf_read::ReadBitCoord()
00002e26	movl	0x0c(%ebp),%eax
00002e29	fstps	(%eax)
00002e2b	testl	%ebx,%ebx
00002e2d	je	0x00002e3d
00002e2f	movl	%edi,(%esp)
00002e32	calll	bf_read::ReadBitCoord()
00002e37	movl	0x0c(%ebp),%eax
00002e3a	fstps	0x04(%eax)
00002e3d	testl	%esi,%esi
00002e3f	je	0x00002e4f
00002e41	movl	%edi,(%esp)
00002e44	calll	bf_read::ReadBitCoord()
00002e49	movl	0x0c(%ebp),%eax
00002e4c	fstps	0x08(%eax)
00002e4f	addl	$0x0c,%esp
00002e52	popl	%esi
00002e53	popl	%edi
00002e54	popl	%ebx
00002e55	popl	%ebp
00002e56	ret
00002e57	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitNormal():
00002e60	pushl	%ebx
00002e61	pushl	%edi
00002e62	pushl	%esi
00002e63	pushl	%eax
00002e64	calll	0x00002e69
00002e69	popl	%eax
00002e6a	movl	0x14(%esp),%esi
00002e6e	movl	0x08(%esi),%edi
00002e71	movl	0x0c(%esi),%ecx
00002e74	movl	%edi,%edx
00002e76	subl	%ecx,%edx
00002e78	testl	%edx,%edx
00002e7a	jg	0x00002e84
00002e7c	movb	$0x01,0x10(%esi)
00002e80	xorl	%edx,%edx
00002e82	jmp	0x00002e9b
00002e84	movl	%ecx,%edx
00002e86	sarl	$0x05,%edx
00002e89	movl	(%esi),%ebx
00002e8b	movl	(%ebx,%edx,4),%edx
00002e8e	leal	0x01(%ecx),%ebx
00002e91	movl	%ebx,0x0c(%esi)
00002e94	shrl	%cl,%edx
00002e96	andl	$0x01,%edx
00002e99	movl	%ebx,%ecx
00002e9b	movl	%edi,%ebx
00002e9d	subl	%ecx,%ebx
00002e9f	cmpl	$0x0a,%ebx
00002ea2	jg	0x00002eb1
00002ea4	movl	%edi,0x0c(%esi)
00002ea7	movb	$0x01,0x10(%esi)
00002eab	pxor	%xmm0,%xmm0
00002eaf	jmp	0x00002eea
00002eb1	leal	0x0b(%ecx),%edi
00002eb4	movl	%edi,0x0c(%esi)
00002eb7	leal	0x0a(%ecx),%edi
00002eba	sarl	$0x05,%edi
00002ebd	movl	(%esi),%esi
00002ebf	movl	(%esi,%edi,4),%edi
00002ec2	movl	%ecx,%ebx
00002ec4	sarl	$0x05,%ebx
00002ec7	movl	(%esi,%ebx,4),%esi
00002eca	andl	$0x1f,%ecx
00002ecd	shrdl	%cl,%edi,%esi
00002ed0	andl	$0x000007ff,%esi
00002ed6	cvtsi2ss	%esi,%xmm0
00002eda	cvtss2sd	%xmm0,%xmm0
00002ede	mulsd	0x1a9d0-0x2e69(%eax),%xmm0
00002ee6	cvtsd2ss	%xmm0,%xmm0
00002eea	testl	%edx,%edx
00002eec	je	0x00002ef5
00002eee	xorps	0x1aa10-0x2e69(%eax),%xmm0
00002ef5	movss	%xmm0,(%esp)
00002efa	flds	(%esp)
00002efd	addl	$0x04,%esp
00002f00	popl	%esi
00002f01	popl	%edi
00002f02	popl	%ebx
00002f03	ret
00002f04	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitVec3Normal(Vector&):
00002f10	pushl	%ebp
00002f11	movl	%esp,%ebp
00002f13	pushl	%ebx
00002f14	pushl	%edi
00002f15	pushl	%esi
00002f16	subl	$0x0c,%esp
00002f19	calll	0x00002f1e
00002f1e	popl	%eax
00002f1f	movl	%eax,0xf0(%ebp)
00002f22	movl	0x08(%ebp),%ebx
00002f25	movl	0x08(%ebx),%edx
00002f28	movl	0x0c(%ebx),%ecx
00002f2b	movl	%edx,%eax
00002f2d	subl	%ecx,%eax
00002f2f	movl	0x0c(%ebp),%edi
00002f32	testl	%eax,%eax
00002f34	jg	0x00002f3e
00002f36	movb	$0x01,0x10(%ebx)
00002f3a	xorl	%eax,%eax
00002f3c	jmp	0x00002f55
00002f3e	movl	%ecx,%eax
00002f40	sarl	$0x05,%eax
00002f43	movl	(%ebx),%esi
00002f45	movl	(%esi,%eax,4),%eax
00002f48	leal	0x01(%ecx),%esi
00002f4b	movl	%esi,0x0c(%ebx)
00002f4e	shrl	%cl,%eax
00002f50	andl	$0x01,%eax
00002f53	movl	%esi,%ecx
00002f55	subl	%ecx,%edx
00002f57	testl	%edx,%edx
00002f59	jg	0x00002f63
00002f5b	movb	$0x01,0x10(%ebx)
00002f5f	xorl	%esi,%esi
00002f61	jmp	0x00002f78
00002f63	movl	%ecx,%edx
00002f65	sarl	$0x05,%edx
00002f68	movl	(%ebx),%esi
00002f6a	movl	(%esi,%edx,4),%esi
00002f6d	leal	0x01(%ecx),%edx
00002f70	movl	%edx,0x0c(%ebx)
00002f73	shrl	%cl,%esi
00002f75	andl	$0x01,%esi
00002f78	testl	%eax,%eax
00002f7a	je	0x00002f88
00002f7c	movl	%ebx,(%esp)
00002f7f	calll	bf_read::ReadBitNormal()
00002f84	fstps	(%edi)
00002f86	jmp	0x00002f8e
00002f88	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%edi)
00002f8e	testl	%esi,%esi
00002f90	je	0x00002f9f
00002f92	movl	%ebx,(%esp)
00002f95	calll	bf_read::ReadBitNormal()
00002f9a	fstps	0x04(%edi)
00002f9d	jmp	0x00002fa6
00002f9f	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x04(%edi)
00002fa6	movl	0x08(%ebx),%eax
00002fa9	movl	0x0c(%ebx),%ecx
00002fac	subl	%ecx,%eax
00002fae	testl	%eax,%eax
00002fb0	jg	0x00002fba
00002fb2	movb	$0x01,0x10(%ebx)
00002fb6	xorl	%eax,%eax
00002fb8	jmp	0x00002fcf
00002fba	movl	%ecx,%eax
00002fbc	sarl	$0x05,%eax
00002fbf	movl	(%ebx),%edx
00002fc1	movl	(%edx,%eax,4),%eax
00002fc4	leal	0x01(%ecx),%edx
00002fc7	movl	%edx,0x0c(%ebx)
00002fca	shrl	%cl,%eax
00002fcc	andl	$0x01,%eax
00002fcf	movss	(%edi),%xmm0
00002fd3	movss	0x04(%edi),%xmm1
00002fd8	mulss	%xmm1,%xmm1
00002fdc	mulss	%xmm0,%xmm0
00002fe0	addss	%xmm1,%xmm0
00002fe4	movl	0xf0(%ebp),%ecx
00002fe7	movss	0x1aa4c-0x2f1e(%ecx),%xmm1
00002fef	ucomiss	%xmm0,%xmm1
00002ff2	jbe	0x00003003
00002ff4	subss	%xmm0,%xmm1
00002ff8	sqrtss	%xmm1,%xmm0
00002ffc	movss	%xmm0,0x08(%edi)
00003001	jmp	0x0000300e
00003003	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*),0x08(%edi)
0000300a	pxor	%xmm0,%xmm0
0000300e	testl	%eax,%eax
00003010	je	0x0000301e
00003012	xorps	0x1aa20-0x2f1e(%ecx),%xmm0
00003019	movss	%xmm0,0x08(%edi)
0000301e	addl	$0x0c,%esp
00003021	popl	%esi
00003022	popl	%edi
00003023	popl	%ebx
00003024	popl	%ebp
00003025	ret
00003026	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBitAngles(QAngle&):
00003030	pushl	%ebp
00003031	movl	%esp,%ebp
00003033	subl	$0x18,%esp
00003036	leal	0xf0(%ebp),%eax
00003039	movl	%eax,0x04(%esp)
0000303d	movl	0x08(%ebp),%eax
00003040	movl	%eax,(%esp)
00003043	calll	bf_read::ReadBitVec3Coord(Vector&)
00003048	movss	0xf8(%ebp),%xmm0
0000304d	movl	0x0c(%ebp),%eax
00003050	movss	0xf0(%ebp),%xmm2
00003055	movss	0xf4(%ebp),%xmm1
0000305a	movss	%xmm2,(%eax)
0000305e	movss	%xmm1,0x04(%eax)
00003063	movss	%xmm0,0x08(%eax)
00003068	addl	$0x18,%esp
0000306b	popl	%ebp
0000306c	ret
0000306d	nopl	(%eax)
bf_read::ReadLongLong():
00003070	pushl	%ebp
00003071	pushl	%ebx
00003072	pushl	%edi
00003073	pushl	%esi
00003074	movl	0x14(%esp),%edx
00003078	movl	0x08(%edx),%ebx
0000307b	movl	0x0c(%edx),%ecx
0000307e	movl	%ebx,%eax
00003080	subl	%ecx,%eax
00003082	cmpl	$0x1f,%eax
00003085	jg	0x00003094
00003087	movl	%ebx,0x0c(%edx)
0000308a	movb	$0x01,0x10(%edx)
0000308e	xorl	%esi,%esi
00003090	movl	%ebx,%eax
00003092	jmp	0x000030b3
00003094	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%ecx),%eax
00003097	movl	%eax,0x0c(%edx)
0000309a	leal	0x1f(%ecx),%edi
0000309d	sarl	$0x05,%edi
000030a0	movl	(%edx),%esi
000030a2	movl	(%esi,%edi,4),%edi
000030a5	movl	%ecx,%ebp
000030a7	sarl	$0x05,%ebp
000030aa	movl	(%esi,%ebp,4),%esi
000030ad	andl	$0x1f,%ecx
000030b0	shrdl	%cl,%edi,%esi
000030b3	xorl	%edi,%edi
000030b5	movl	%ebx,%ecx
000030b7	subl	%eax,%ecx
000030b9	cmpl	$0x1f,%ecx
000030bc	jg	0x000030cb
000030be	movl	%ebx,0x0c(%edx)
000030c1	movb	$0x01,0x10(%edx)
000030c5	xorl	%eax,%eax
000030c7	xorl	%edx,%edx
000030c9	jmp	0x000030ee
000030cb	leal	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%eax),%ecx
000030ce	movl	%ecx,0x0c(%edx)
000030d1	leal	0x1f(%eax),%ebx
000030d4	sarl	$0x05,%ebx
000030d7	movl	(%edx),%ecx
000030d9	movl	(%ecx,%ebx,4),%ebx
000030dc	movl	%eax,%edx
000030de	sarl	$0x05,%edx
000030e1	movl	(%ecx,%edx,4),%edx
000030e4	andl	$0x1f,%eax
000030e7	movb	%al,%cl
000030e9	shrdl	%cl,%ebx,%edx
000030ec	xorl	%eax,%eax
000030ee	orl	%esi,%eax
000030f0	orl	%edi,%edx
000030f2	popl	%esi
000030f3	popl	%edi
000030f4	popl	%ebx
000030f5	popl	%ebp
000030f6	ret
000030f7	nopw	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadFloat():
00003100	pushl	%ebp
00003101	movl	%esp,%ebp
00003103	subl	$0x18,%esp
00003106	leal	0xfc(%ebp),%eax
00003109	movl	%eax,0x04(%esp)
0000310d	movl	0x08(%ebp),%eax
00003110	movl	%eax,(%esp)
00003113	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),0x08(%esp)
0000311b	calll	bf_read::ReadBits(void*, int)
00003120	flds	0xfc(%ebp)
00003123	addl	$0x18,%esp
00003126	popl	%ebp
00003127	ret
00003128	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadBytes(void*, int):
00003130	pushl	%ebp
00003131	movl	%esp,%ebp
00003133	pushl	%esi
00003134	subl	$0x14,%esp
00003137	movl	0x10(%ebp),%eax
0000313a	shll	$0x03,%eax
0000313d	movl	%eax,0x08(%esp)
00003141	movl	0x0c(%ebp),%eax
00003144	movl	%eax,0x04(%esp)
00003148	movl	0x08(%ebp),%esi
0000314b	movl	%esi,(%esp)
0000314e	calll	bf_read::ReadBits(void*, int)
00003153	testb	$0x01,0x10(%esi)
00003157	sete	%al
0000315a	movzbl	%al,%eax
0000315d	addl	$0x14,%esp
00003160	popl	%esi
00003161	popl	%ebp
00003162	ret
00003163	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ReadString(char*, int, bool, int*):
00003170	pushl	%ebp
00003171	pushl	%ebx
00003172	pushl	%edi
00003173	pushl	%esi
00003174	pushl	%eax
00003175	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00003179	decl	%ebp
0000317a	xorl	%edx,%edx
0000317c	xorb	%al,%al
0000317e	movl	0x18(%esp),%edi
00003182	jmp	0x00003192
00003184	nopw	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003190	movb	$0x01,%al
00003192	movb	%al,0x03(%esp)
00003196	jmp	0x000031de
00003198	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
000031a0	leal	0x08(%ebx),%eax
000031a3	movl	%eax,0x0c(%edi)
000031a6	leal	0x07(%ebx),%esi
000031a9	sarl	$0x05,%esi
000031ac	movl	(%edi),%eax
000031ae	movl	(%eax,%esi,4),%esi
000031b1	movl	%ebx,%ecx
000031b3	sarl	$0x05,%ecx
000031b6	movl	(%eax,%ecx,4),%eax
000031b9	andl	$0x1f,%ebx
000031bc	movb	%bl,%cl
000031be	shrdl	%cl,%esi,%eax
000031c1	cmpb	$0x0a,%al
000031c3	sete	%cl
000031c6	testb	%al,%al
000031c8	je	0x000031f4
000031ca	andb	0x24(%esp),%cl
000031ce	testb	%cl,%cl
000031d0	jne	0x000031f4
000031d2	cmpl	%ebp,%edx
000031d4	jge	0x00003190
000031d6	movl	0x1c(%esp),%ecx
000031da	movb	%al,(%ecx,%edx)
000031dd	incl	%edx
000031de	movl	0x08(%edi),%eax
000031e1	movl	0x0c(%edi),%ebx
000031e4	movl	%eax,%ecx
000031e6	subl	%ebx,%ecx
000031e8	cmpl	$0x07,%ecx
000031eb	jg	0x000031a0
000031ed	movl	%eax,0x0c(%edi)
000031f0	movb	$0x01,0x10(%edi)
000031f4	movl	0x1c(%esp),%eax
000031f8	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),(%eax,%edx)
000031fc	movl	0x28(%esp),%eax
00003200	testl	%eax,%eax
00003202	je	0x00003206
00003204	movl	%edx,(%eax)
00003206	movb	0x10(%edi),%al
00003209	andb	$0x01,%al
0000320b	orb	0x03(%esp),%al
0000320f	sete	%al
00003212	movzbl	%al,%eax
00003215	addl	$0x04,%esp
00003218	popl	%esi
00003219	popl	%edi
0000321a	popl	%ebx
0000321b	popl	%ebp
0000321c	ret
0000321d	nopl	(%eax)
bf_read::ReadAndAllocateString(bool*):
00003220	pushl	%ebp
00003221	movl	%esp,%ebp
00003223	pushl	%ebx
00003224	pushl	%edi
00003225	pushl	%esi
00003226	subl	$0x0000082c,%esp
0000322c	calll	0x00003231
00003231	popl	%eax
00003232	movl	0x1e477-0x3231(%eax),%eax
00003238	movl	%eax,0xfffff7e0(%ebp)
0000323e	movl	(%eax),%eax
00003240	movl	%eax,0xf0(%ebp)
00003243	movl	0x08(%ebp),%eax
00003246	movl	0x08(%eax),%ecx
00003249	movl	%ecx,0xfffff7e8(%ebp)
0000324f	movl	0x0c(%eax),%eax
00003252	xorl	%ecx,%ecx
00003254	xorb	%dl,%dl
00003256	jmp	0x00003265
00003258	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003260	addl	$0x08,%eax
00003263	movb	$0x01,%dl
00003265	movb	%dl,0xfffff7e7(%ebp)
0000326b	movl	0xfffff7e8(%ebp),%esi
00003271	subl	%eax,%esi
00003273	jmp	0x000032c9
00003275	nopl	%cs:InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
00003280	leal	0x08(%eax),%edi
00003283	movl	0x08(%ebp),%ebx
00003286	movl	%edi,0x0c(%ebx)
00003289	leal	0x07(%eax),%edx
0000328c	sarl	$0x05,%edx
0000328f	movl	%ecx,0xfffff7ec(%ebp)
00003295	movl	(%ebx),%ecx
00003297	movl	(%ecx,%edx,4),%ebx
0000329a	movl	%eax,%edx
0000329c	sarl	$0x05,%edx
0000329f	movl	(%ecx,%edx,4),%edx
000032a2	movl	%eax,%ecx
000032a4	andl	$0x1f,%ecx
000032a7	shrdl	%cl,%ebx,%edx
000032aa	movl	0xfffff7ec(%ebp),%ecx
000032b0	testb	%dl,%dl
000032b2	je	0x000032de
000032b4	cmpl	$0x000007fe,%ecx
000032ba	jg	0x00003260
000032bc	movb	%dl,0xfffff7f0(%ebp,%ecx)
000032c3	addl	$0xf8,%esi
000032c6	incl	%ecx
000032c7	movl	%edi,%eax
000032c9	cmpl	$0x07,%esi
000032cc	jg	0x00003280
000032ce	movl	0x08(%ebp),%eax
000032d1	movl	0xfffff7e8(%ebp),%edx
000032d7	movl	%edx,0x0c(%eax)
000032da	movb	$0x01,0x10(%eax)
000032de	movb	InternalBitBufErrorHandler(BitBufErrorType, char const*),0xfffff7f0(%ebp,%ecx)
000032e6	movl	0x0c(%ebp),%edx
000032e9	testl	%edx,%edx
000032eb	je	0x000032fd
000032ed	movl	0x08(%ebp),%eax
000032f0	movb	0x10(%eax),%al
000032f3	andb	$0x01,%al
000032f5	orb	0xfffff7e7(%ebp),%al
000032fb	movb	%al,(%edx)
000032fd	leal	0x01(%ecx),%edi
00003300	testl	%edi,%edi
00003302	movl	$0xffffffff,%eax
00003307	cmovnsl	%edi,%eax
0000330a	movl	%eax,(%esp)
0000330d	movl	%ecx,%esi
0000330f	calll	operator new[](unsigned long)
00003314	movl	%esi,%ecx
00003316	movl	%eax,%esi
00003318	testl	%ecx,%ecx
0000331a	js	0x0000333c
0000331c	leal	0xfffff7f0(%ebp),%eax
00003322	movl	%eax,0x04(%esp)
00003326	movl	%esi,(%esp)
00003329	testl	%ecx,%ecx
0000332b	movl	$0x00000001,%eax
00003330	cmovgl	%edi,%eax
00003333	movl	%eax,0x08(%esp)
00003337	calll	_memcpy
0000333c	movl	0xfffff7e0(%ebp),%eax
00003342	movl	(%eax),%eax
00003344	cmpl	0xf0(%ebp),%eax
00003347	jne	0x00003356
00003349	movl	%esi,%eax
0000334b	addl	$0x0000082c,%esp
00003351	popl	%esi
00003352	popl	%edi
00003353	popl	%ebx
00003354	popl	%ebp
00003355	ret
00003356	calll	___stack_chk_fail
0000335b	nopl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%eax,%eax)
bf_read::ExciseBits(int, int):
00003360	pushl	%ebp
00003361	pushl	%ebx
00003362	pushl	%edi
00003363	pushl	%esi
00003364	subl	$0x08,%esp
00003367	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
0000336b	movl	0x24(%esp),%esi
0000336f	leal	(%esi,%ebp),%edx
00003372	movl	0x1c(%esp),%edi
00003376	movl	(%edi),%eax
00003378	movl	%eax,0x04(%esp)
0000337c	movl	0x08(%edi),%ebx
0000337f	movl	%ebx,%eax
00003381	subl	%edx,%eax
00003383	movl	%ebx,%ecx
00003385	shll	$0x06,%ecx
00003388	movl	%ecx,(%esp)
0000338b	testl	%edx,%edx
0000338d	js	0x00003393
0000338f	cmpl	%edx,%ebx
00003391	jge	0x0000339e
00003393	movb	$0x01,0x10(%edi)
00003397	movl	%ebx,0x0c(%edi)
0000339a	movl	%ebx,%edx
0000339c	jmp	0x000033a1
0000339e	movl	%edx,0x0c(%edi)
000033a1	testl	%eax,%eax
000033a3	jle	0x00003416
000033a5	leal	(%esi,%ebp),%eax
000033a8	movl	%ebx,%esi
000033aa	subl	%eax,%esi
000033ac	movl	%ebp,%eax
000033ae	jmp	0x000033b3
000033b0	movl	0x0c(%edi),%edx
000033b3	subl	%edx,%ebx
000033b5	testl	%ebx,%ebx
000033b7	jg	0x000033c1
000033b9	movb	$0x01,0x10(%edi)
000033bd	xorl	%ebp,%ebp
000033bf	jmp	0x000033d9
000033c1	movl	%edx,%ecx
000033c3	sarl	$0x05,%ecx
000033c6	movl	(%edi),%ebp
000033c8	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp,%ecx,4),%ebp
000033cc	leal	0x01(%edx),%ecx
000033cf	movl	%ecx,0x0c(%edi)
000033d2	movb	%dl,%cl
000033d4	shrl	%cl,%ebp
000033d6	andl	$0x01,%ebp
000033d9	cmpl	(%esp),%eax
000033dc	jge	0x00003408
000033de	movb	%al,%cl
000033e0	movl	$0x00000001,%ebx
000033e5	shll	%cl,%ebx
000033e7	testl	%ebp,%ebp
000033e9	je	0x000033f9
000033eb	movl	%eax,%ecx
000033ed	sarl	$0x05,%ecx
000033f0	movl	0x04(%esp),%edx
000033f4	orl	%ebx,(%edx,%ecx,4)
000033f7	jmp	0x00003407
000033f9	notl	%ebx
000033fb	movl	%eax,%ecx
000033fd	sarl	$0x05,%ecx
00003400	movl	0x04(%esp),%edx
00003404	andl	%ebx,(%edx,%ecx,4)
00003407	incl	%eax
00003408	movl	0x08(%edi),%ebx
0000340b	decl	%esi
0000340c	jne	0x000033b0
0000340e	movl	0x24(%esp),%esi
00003412	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%ebp
00003416	testl	%ebp,%ebp
00003418	js	0x0000341e
0000341a	cmpl	%ebp,%ebx
0000341c	jge	0x00003427
0000341e	movb	$0x01,0x10(%edi)
00003422	movl	%ebx,0x0c(%edi)
00003425	jmp	0x0000342a
00003427	movl	%ebp,0x0c(%edi)
0000342a	subl	%esi,%ebx
0000342c	movl	%ebx,0x08(%edi)
0000342f	sarl	$0x03,%ebx
00003432	movl	%ebx,0x04(%edi)
00003435	addl	$0x08,%esp
00003438	popl	%esi
00003439	popl	%edi
0000343a	popl	%ebx
0000343b	popl	%ebp
0000343c	ret
0000343d	nopl	(%eax)
bf_read::CompareBitsAt(int, bf_read*, int, int):
00003440	pushl	%ebp
00003441	pushl	%ebx
00003442	pushl	%edi
00003443	pushl	%esi
00003444	subl	$0x30,%esp
00003447	xorl	%eax,%eax
00003449	movl	0x54(%esp),%edi
0000344d	testl	%edi,%edi
0000344f	je	0x000035b3
00003455	movl	0x50(%esp),%esi
00003459	movl	0x4c(%esp),%ecx
0000345d	movl	0x48(%esp),%edx
00003461	movl	0x44(%esp),%eax
00003465	leal	(%edi,%edx),%ebx
00003468	cmpl	0x08(%eax),%ebx
0000346b	setg	%ah
0000346e	leal	(%edi,%esi),%edi
00003471	cmpl	0x08(%ecx),%edi
00003474	setg	%al
00003477	orb	%ah,%al
00003479	je	0x00003483
0000347b	movzbl	%al,%eax
0000347e	jmp	0x000035b3
00003483	calll	0x00003488
00003488	popl	%eax
00003489	movl	%eax,0x28(%esp)
0000348d	movl	%ebx,%eax
0000348f	movl	%esi,%ebx
00003491	sarl	$0x05,%ebx
00003494	movl	%ebx,0x0c(%esp)
00003498	movl	(%ecx),%ecx
0000349a	movl	%ecx,0x04(%esp)
0000349e	leal	0x04(%ecx,%ebx,4),%ecx
000034a2	movl	%ecx,0x24(%esp)
000034a6	movl	%edx,%ecx
000034a8	movl	%ecx,%edx
000034aa	sarl	$0x05,%edx
000034ad	movl	%edx,SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp)
000034b1	movl	%edx,%ebp
000034b3	movl	0x44(%esp),%edx
000034b7	movl	(%edx),%edx
000034b9	movl	%edx,(%esp)
000034bc	leal	0x04(%edx,%ebp,4),%ebx
000034c0	movl	%ebx,0x2c(%esp)
000034c4	movl	(%edx,%ebp,4),%ebx
000034c7	andl	$0x1f,%esi
000034ca	movl	%esi,0x1c(%esp)
000034ce	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edx
000034d3	subl	%esi,%edx
000034d5	movl	%ebx,%esi
000034d7	movl	%edx,0x18(%esp)
000034db	andl	$0x1f,%ecx
000034de	movl	%ecx,0x10(%esp)
000034e2	movl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*)),%edx
000034e7	subl	%ecx,%edx
000034e9	movl	%edx,0x14(%esp)
000034ed	decl	%edi
000034ee	sarl	$0x05,%edi
000034f1	addl	0x0c(%esp),%edi
000034f5	movl	%edi,0x0c(%esp)
000034f9	movl	0x24(%esp),%ebp
000034fd	decl	%eax
000034fe	sarl	$0x05,%eax
00003501	addl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00003505	movl	%eax,0x08(%esp)
00003509	movl	0x54(%esp),%eax
0000350d	movl	0x28(%esp),%edx
00003511	leal	_g_ExtraMasks-0x3488(%edx,%eax,4),%edi
00003518	movl	%eax,%ebx
0000351a	movl	%ecx,%eax
0000351c	jmp	0x0000353e
0000351e	nop
00003520	addl	$0x04,%ebp
00003523	addl	$0x04,%esi
00003526	movl	%esi,0x2c(%esp)
0000352a	movl	0x28(%esp),%edi
0000352e	addl	$0x80,%edi
00003531	movl	0x24(%esp),%ebx
00003535	addl	bf_write::bf_write(char const*, void*, int, int),%ebx
00003538	movl	%edx,%esi
0000353a	movl	0x10(%esp),%eax
0000353e	movl	%eax,%ecx
00003540	shrl	%cl,%esi
00003542	cmpl	$0x21,%ebx
00003545	jl	0x00003581
00003547	movl	%edi,0x28(%esp)
0000354b	movl	%ebx,0x24(%esp)
0000354f	movl	0xfc(%ebp),%ebx
00003552	movl	InternalBitBufErrorHandler(BitBufErrorType, char const*)(%ebp),%edi
00003555	movl	0x1c(%esp),%ecx
00003559	shrl	%cl,%ebx
0000355b	movl	%esi,SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp)
0000355f	movl	0x2c(%esp),%esi
00003563	movl	(%esi),%edx
00003565	movl	0x14(%esp),%ecx
00003569	movl	%edx,%eax
0000356b	shll	%cl,%eax
0000356d	xorl	SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))(%esp),%eax
00003571	xorl	%ebx,%eax
00003573	movl	0x18(%esp),%ecx
00003577	shll	%cl,%edi
00003579	cmpl	%edi,%eax
0000357b	je	0x00003520
0000357d	xorl	%edi,%eax
0000357f	jmp	0x000035b3
00003581	movl	0xfc(%ebp),%eax
00003584	movl	0x1c(%esp),%ecx
00003588	shrl	%cl,%eax
0000358a	movl	0x08(%esp),%ecx
0000358e	movl	(%esp),%edx
00003591	movl	(%edx,%ecx,4),%edx
00003594	movl	0x14(%esp),%ecx
00003598	shll	%cl,%edx
0000359a	xorl	%esi,%edx
0000359c	xorl	%eax,%edx
0000359e	movl	0x0c(%esp),%eax
000035a2	movl	0x04(%esp),%ecx
000035a6	movl	(%ecx,%eax,4),%eax
000035a9	movl	0x18(%esp),%ecx
000035ad	shll	%cl,%eax
000035af	xorl	%edx,%eax
000035b1	andl	(%edi),%eax
000035b3	addl	$0x30,%esp
000035b6	popl	%esi
000035b7	popl	%edi
000035b8	popl	%ebx
000035b9	popl	%ebp
000035ba	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(byteswap.o):
(__TEXT,__text) section
CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	movl	0x14(%ebp),%edx
00000012	movl	(%edx),%ecx
00000014	movl	0x10(%ebp),%edi
00000017	movl	0x0c(%ebp),%esi
0000001a	cmpl	$0x1b,%ecx
0000001d	jg	0x000001ee
00000023	decl	%ecx
00000024	cmpl	$0x09,%ecx
00000027	ja	0x000002a9
0000002d	addl	0x000002fe(%eax,%ecx,4),%eax
00000034	jmp	*%eax
00000036	movzwl	0x10(%edx),%eax
0000003a	testl	%eax,%eax
0000003c	je	0x000002a9
00000042	testl	%esi,%esi
00000044	je	0x000002a9
0000004a	testl	%edi,%edi
0000004c	cmovel	%esi,%edi
0000004f	testl	%edi,%edi
00000051	je	0x000002a9
00000057	movl	%eax,0x08(%esp)
0000005b	movl	%edi,0x04(%esp)
0000005f	movl	%esi,(%esp)
00000062	calll	_memcpy
00000067	jmp	0x000002a9
0000006c	movzwl	0x10(%edx),%eax
00000070	testl	%eax,%eax
00000072	je	0x000002a9
00000078	testl	%esi,%esi
0000007a	je	0x000002a9
00000080	testl	%edi,%edi
00000082	cmovel	%esi,%edi
00000085	movl	0x08(%ebp),%ecx
00000088	testb	$0x01,(%ecx)
0000008b	je	0x000000ad
0000008d	incl	%edi
0000008e	nop
00000090	movzbl	(%edi),%edx
00000093	movzbl	0xff(%edi),%ecx
00000097	shll	$0x08,%ecx
0000009a	orl	%edx,%ecx
0000009c	movw	%cx,(%esi)
0000009f	addl	$0x02,%edi
000000a2	addl	$0x02,%esi
000000a5	decl	%eax
000000a6	jne	0x00000090
000000a8	jmp	0x000002a9
000000ad	testl	%edi,%edi
000000af	je	0x000002a9
000000b5	addl	%eax,%eax
000000b7	jmp	0x00000057
000000b9	movzwl	0x10(%edx),%eax
000000bd	testl	%eax,%eax
000000bf	je	0x000002a9
000000c5	testl	%esi,%esi
000000c7	je	0x000002a9
000000cd	testl	%edi,%edi
000000cf	cmovel	%esi,%edi
000000d2	movl	0x08(%ebp),%ecx
000000d5	testb	$0x01,(%ecx)
000000d8	je	0x0000010e
000000da	addl	$0x03,%edi
000000dd	nopl	(%eax)
000000e0	movzbl	(%edi),%ecx
000000e3	movzbl	0xff(%edi),%edx
000000e7	shll	$0x08,%edx
000000ea	orl	%ecx,%edx
000000ec	movzbl	0xfe(%edi),%ecx
000000f0	shll	$0x10,%ecx
000000f3	orl	%edx,%ecx
000000f5	movzbl	0xfd(%edi),%edx
000000f9	shll	$0x18,%edx
000000fc	orl	%ecx,%edx
000000fe	movl	%edx,(%esi)
00000100	addl	$0x04,%edi
00000103	addl	$0x04,%esi
00000106	decl	%eax
00000107	jne	0x000000e0
00000109	jmp	0x000002a9
0000010e	testl	%edi,%edi
00000110	je	0x000002a9
00000116	shll	$0x02,%eax
00000119	jmp	0x00000057
0000011e	movzwl	0x10(%edx),%eax
00000122	testl	%eax,%eax
00000124	je	0x000002a9
0000012a	testl	%esi,%esi
0000012c	je	0x000002a9
00000132	testl	%edi,%edi
00000134	cmovel	%esi,%edi
00000137	movl	0x08(%ebp),%ecx
0000013a	testb	$0x01,(%ecx)
0000013d	je	0x0000010e
0000013f	addl	$0x03,%edi
00000142	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
00000150	movzbl	(%edi),%ecx
00000153	movzbl	0xff(%edi),%edx
00000157	shll	$0x08,%edx
0000015a	orl	%ecx,%edx
0000015c	movzbl	0xfe(%edi),%ecx
00000160	shll	$0x10,%ecx
00000163	orl	%edx,%ecx
00000165	movzbl	0xfd(%edi),%edx
00000169	shll	$0x18,%edx
0000016c	orl	%ecx,%edx
0000016e	movl	%edx,(%esi)
00000170	addl	$0x04,%edi
00000173	addl	$0x04,%esi
00000176	decl	%eax
00000177	jne	0x00000150
00000179	jmp	0x000002a9
0000017e	movzwl	0x10(%edx),%ecx
00000182	leal	(%ecx,%ecx,2),%eax
00000185	testl	%eax,%eax
00000187	je	0x000002a9
0000018d	testl	%esi,%esi
0000018f	je	0x000002a9
00000195	testl	%edi,%edi
00000197	cmovel	%esi,%edi
0000019a	movl	0x08(%ebp),%edx
0000019d	testb	$0x01,(%edx)
000001a0	je	0x000001de
000001a2	addl	$0x03,%edi
000001a5	nopl	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
000001b0	movzbl	(%edi),%ecx
000001b3	movzbl	0xff(%edi),%edx
000001b7	shll	$0x08,%edx
000001ba	orl	%ecx,%edx
000001bc	movzbl	0xfe(%edi),%ecx
000001c0	shll	$0x10,%ecx
000001c3	orl	%edx,%ecx
000001c5	movzbl	0xfd(%edi),%edx
000001c9	shll	$0x18,%edx
000001cc	orl	%ecx,%edx
000001ce	movl	%edx,(%esi)
000001d0	addl	$0x04,%edi
000001d3	addl	$0x04,%esi
000001d6	decl	%eax
000001d7	jne	0x000001b0
000001d9	jmp	0x000002a9
000001de	testl	%edi,%edi
000001e0	je	0x000002a9
000001e6	imull	$0x0c,%ecx,%eax
000001e9	jmp	0x00000057
000001ee	cmpl	$0x1c,%ecx
000001f1	jne	0x000002a9
000001f7	movzwl	0x10(%edx),%eax
000001fb	testl	%eax,%eax
000001fd	je	0x000002a9
00000203	testl	%esi,%esi
00000205	je	0x000002a9
0000020b	testl	%edi,%edi
0000020d	cmovel	%esi,%edi
00000210	movl	0x08(%ebp),%ecx
00000213	testb	$0x01,(%ecx)
00000216	je	0x0000024b
00000218	addl	$0x03,%edi
0000021b	addl	%eax,%eax
0000021d	nopl	(%eax)
00000220	movzbl	(%edi),%ecx
00000223	movzbl	0xff(%edi),%edx
00000227	shll	$0x08,%edx
0000022a	orl	%ecx,%edx
0000022c	movzbl	0xfe(%edi),%ecx
00000230	shll	$0x10,%ecx
00000233	orl	%edx,%ecx
00000235	movzbl	0xfd(%edi),%edx
00000239	shll	$0x18,%edx
0000023c	orl	%ecx,%edx
0000023e	movl	%edx,(%esi)
00000240	addl	$0x04,%edi
00000243	addl	$0x04,%esi
00000246	decl	%eax
00000247	jne	0x00000220
00000249	jmp	0x000002a9
0000024b	testl	%edi,%edi
0000024d	je	0x000002a9
0000024f	shll	$0x03,%eax
00000252	jmp	0x00000057
00000257	movzwl	0x10(%edx),%eax
0000025b	testl	%eax,%eax
0000025d	je	0x000002a9
0000025f	testl	%esi,%esi
00000261	je	0x000002a9
00000263	testl	%edi,%edi
00000265	cmovel	%esi,%edi
00000268	movl	0x08(%ebp),%ecx
0000026b	testb	$0x01,(%ecx)
0000026e	je	0x000002b1
00000270	addl	$0x03,%edi
00000273	shll	$0x02,%eax
00000276	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
00000280	movzbl	(%edi),%ecx
00000283	movzbl	0xff(%edi),%edx
00000287	shll	$0x08,%edx
0000028a	orl	%ecx,%edx
0000028c	movzbl	0xfe(%edi),%ecx
00000290	shll	$0x10,%ecx
00000293	orl	%edx,%ecx
00000295	movzbl	0xfd(%edi),%edx
00000299	shll	$0x18,%edx
0000029c	orl	%ecx,%edx
0000029e	movl	%edx,(%esi)
000002a0	addl	$0x04,%edi
000002a3	addl	$0x04,%esi
000002a6	decl	%eax
000002a7	jne	0x00000280
000002a9	addl	$0x1c,%esp
000002ac	popl	%esi
000002ad	popl	%edi
000002ae	popl	%ebx
000002af	popl	%ebp
000002b0	ret
000002b1	testl	%edi,%edi
000002b3	je	0x000002a9
000002b5	shll	$0x04,%eax
000002b8	jmp	0x00000057
000002bd	cmpw	CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*),0x10(%edx)
000002c2	je	0x000002a9
000002c4	movl	0x24(%edx),%eax
000002c7	movl	(%eax),%ecx
000002c9	movl	%ecx,0xf0(%ebp)
000002cc	xorl	%ebx,%ebx
000002ce	nop
000002d0	movl	0xf0(%ebp),%ecx
000002d3	movl	0x08(%ecx),%ecx
000002d6	movl	%eax,0x0c(%esp)
000002da	leal	(%edi,%ecx),%eax
000002dd	movl	%eax,0x08(%esp)
000002e1	addl	%esi,%ecx
000002e3	movl	%ecx,0x04(%esp)
000002e7	movl	0x08(%ebp),%eax
000002ea	movl	%eax,(%esp)
000002ed	calll	CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
000002f2	incl	%ebx
000002f3	movl	0x14(%ebp),%ecx
000002f6	movzwl	0x10(%ecx),%eax
000002fa	cmpl	%eax,%ebx
000002fc	jge	0x000002a9
000002fe	movl	0x28(%ecx),%eax
00000301	addl	%eax,%esi
00000303	addl	%eax,%edi
00000305	movl	0x24(%ecx),%eax
00000308	jmp	0x000002d0
0000030a	nop
0000030c	stosl	%eax,(%edi)
0000030d	addb	%al,(%eax)
0000030f	addb	%bl,0x70000002(%ebx)
00000315	addl	%eax,(%eax)
00000317	addb	%cl,0x02(%ecx)
0000031a	addb	%al,(%eax)
0000031c	adcb	%al,(%ecx)
0000031e	addb	%al,(%eax)
00000320	subb	%al,(%eax)
00000322	addb	%al,(%eax)
00000324	popl	%esi
00000325	addb	%al,(%eax)
00000327	addb	%ch,(%eax)
00000329	addb	%al,(%eax)
0000032b	addb	%bl,0xaf000002(%ebx)
00000331	addb	(%eax),%al
00000333	addb	%ah,0x66(%esi)
00000336	nopw	%cs:CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)(%eax,%eax)
CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*):
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%edi
00000345	pushl	%esi
00000346	subl	$0x1c,%esp
00000349	movl	0x14(%ebp),%edi
0000034c	movl	0x0c(%edi),%eax
0000034f	movl	0x10(%ebp),%ebx
00000352	movl	0x0c(%ebp),%esi
00000355	movl	0x08(%ebp),%ecx
00000358	testl	%eax,%eax
0000035a	je	0x00000370
0000035c	movl	%eax,0x0c(%esp)
00000360	movl	%ebx,0x08(%esp)
00000364	movl	%esi,0x04(%esp)
00000368	movl	%ecx,(%esp)
0000036b	calll	CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
00000370	movl	%ebx,%edx
00000372	movl	%esi,%ebx
00000374	movl	0x04(%edi),%esi
00000377	testl	%esi,%esi
00000379	jle	0x000003ac
0000037b	movl	(%edi),%edi
0000037d	nopl	(%eax)
00000380	movl	0x08(%edi),%eax
00000383	movl	%edi,0x0c(%esp)
00000387	leal	(%edx,%eax),%ecx
0000038a	movl	%ecx,0x08(%esp)
0000038e	addl	%ebx,%eax
00000390	movl	%eax,0x04(%esp)
00000394	movl	0x08(%ebp),%eax
00000397	movl	%eax,(%esp)
0000039a	movl	%edx,%ebx
0000039c	calll	CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)
000003a1	movl	%ebx,%edx
000003a3	movl	0x0c(%ebp),%ebx
000003a6	addl	$0x38,%edi
000003a9	decl	%esi
000003aa	jne	0x00000380
000003ac	addl	$0x1c,%esp
000003af	popl	%esi
000003b0	popl	%edi
000003b1	popl	%ebx
000003b2	popl	%ebp
000003b3	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(characterset.o):
(__TEXT,__text) section
CharacterSetBuild(characterset_t*, char const*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%esi
0000000b	testl	%esi,%esi
0000000d	je	0x0000004e
0000000f	movl	0x0c(%ebp),%edi
00000012	testl	%edi,%edi
00000014	je	0x0000004e
00000016	movl	%esi,(%esp)
00000019	movl	$0x00000100,0x08(%esp)
00000021	movl	CharacterSetBuild(characterset_t*, char const*),0x04(%esp)
00000029	calll	_memset
0000002e	movb	(%edi),%al
00000030	testb	%al,%al
00000032	je	0x0000004e
00000034	incl	%edi
00000035	nopl	%cs:CharacterSetBuild(characterset_t*, char const*)(%eax,%eax)
00000040	movsbl	%al,%eax
00000043	movb	$0x01,(%esi,%eax)
00000047	movb	(%edi),%al
00000049	incl	%edi
0000004a	testb	%al,%al
0000004c	jne	0x00000040
0000004e	addl	$0x10,%esp
00000051	popl	%esi
00000052	popl	%edi
00000053	popl	%ebp
00000054	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(checksum_crc.o):
(__TEXT,__text) section
CRC32_Init(unsigned int*):
00000000	movl	0x04(%esp),%eax
00000004	movl	$0xffffffff,(%eax)
0000000a	ret
0000000b	nopl	CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_Final(unsigned int*):
00000010	movl	0x04(%esp),%eax
00000014	notl	(%eax)
00000016	ret
00000017	nopw	CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_GetTableEntry(unsigned int):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movzbl	0x04(%esp),%ecx
0000002b	movl	pulCRCTable-0x25(%eax,%ecx,4),%eax
00000032	ret
00000033	nopl	%cs:CRC32_Init(unsigned int*)(%eax,%eax)
CRC32_ProcessBuffer(unsigned int*, void const*, int):
00000040	pushl	%ebp
00000041	pushl	%ebx
00000042	pushl	%edi
00000043	pushl	%esi
00000044	subl	$0x08,%esp
00000047	calll	0x0000004c
0000004c	popl	%ecx
0000004d	movl	0x1c(%esp),%eax
00000051	movl	(%eax),%ebx
00000053	movl	0x24(%esp),%esi
00000057	movl	CRC32_GetTableEntry(unsigned int)(%esp),%edx
0000005b	jmp	0x0000017d
00000060	movl	%edx,%eax
00000062	andl	$0x03,%eax
00000065	subl	%eax,%esi
00000067	cmpl	$0x01,%eax
0000006a	jne	0x00000070
0000006c	movl	%esi,%edi
0000006e	jmp	0x000000aa
00000070	cmpl	$0x02,%eax
00000073	jne	0x00000079
00000075	movl	%esi,%edi
00000077	jmp	0x00000097
00000079	cmpl	$0x03,%eax
0000007c	je	0x00000082
0000007e	movl	%ebx,%eax
00000080	jmp	0x000000c1
00000082	movl	%esi,%edi
00000084	movzbl	(%edx),%esi
00000087	movzbl	%bl,%eax
0000008a	xorl	%esi,%eax
0000008c	shrl	$0x08,%ebx
0000008f	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000096	incl	%edx
00000097	movzbl	(%edx),%esi
0000009a	movzbl	%bl,%eax
0000009d	xorl	%esi,%eax
0000009f	shrl	$0x08,%ebx
000000a2	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000000a9	incl	%edx
000000aa	movzbl	(%edx),%esi
000000ad	movzbl	%bl,%eax
000000b0	xorl	%esi,%eax
000000b2	shrl	$0x08,%ebx
000000b5	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000000bc	incl	%edx
000000bd	movl	%ebx,%eax
000000bf	movl	%edi,%esi
000000c1	movl	%esi,%edi
000000c3	sarl	$0x03,%edi
000000c6	testl	%edi,%edi
000000c8	je	0x00000178
000000ce	leal	0x04(%edx),%ebp
000000d1	movl	%esi,%ebx
000000d3	movl	%esi,0x04(%esp)
000000d7	andl	$0xf8,%ebx
000000da	movl	%ebx,(%esp)
000000dd	movl	%eax,%ebx
000000df	nop
000000e0	xorl	0xfc(%ebp),%ebx
000000e3	movl	%ebx,%eax
000000e5	shrl	$0x08,%eax
000000e8	movzbl	%bl,%esi
000000eb	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
000000f2	movl	%eax,%ebx
000000f4	shrl	$0x08,%ebx
000000f7	movzbl	%al,%eax
000000fa	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000101	movl	%ebx,%eax
00000103	shrl	$0x08,%eax
00000106	movzbl	%bl,%esi
00000109	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
00000110	movzbl	%al,%esi
00000113	movl	CRC32_Init(unsigned int*)(%ebp),%ebx
00000116	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%ebx
0000011d	shrl	$0x08,%eax
00000120	xorl	%ebx,%eax
00000122	movl	%eax,%ebx
00000124	shrl	$0x08,%ebx
00000127	movzbl	%al,%eax
0000012a	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000131	movl	%ebx,%eax
00000133	shrl	$0x08,%eax
00000136	movzbl	%bl,%esi
00000139	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
00000140	movl	%eax,%ebx
00000142	shrl	$0x08,%ebx
00000145	movzbl	%al,%eax
00000148	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
0000014f	movl	%ebx,%eax
00000151	shrl	$0x08,%eax
00000154	movzbl	%bl,%esi
00000157	xorl	pulCRCTable-0x4c(%ecx,%esi,4),%eax
0000015e	addl	$0x08,%ebp
00000161	decl	%edi
00000162	movl	%eax,%ebx
00000164	jne	0x000000e0
0000016a	addl	(%esp),%edx
0000016d	movl	%eax,%ebx
0000016f	movl	0x04(%esp),%esi
00000173	andl	$0x07,%esi
00000176	jmp	0x0000017d
00000178	movl	%eax,%ebx
0000017a	andl	$0x07,%esi
0000017d	cmpl	$0x07,%esi
00000180	ja	0x00000060
00000186	movl	0x00000200(%ecx,%esi,4),%eax
0000018d	addl	%ecx,%eax
0000018f	jmp	*%eax
00000191	movzbl	(%edx),%esi
00000194	movzbl	%bl,%eax
00000197	xorl	%esi,%eax
00000199	shrl	$0x08,%ebx
0000019c	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001a3	incl	%edx
000001a4	movzbl	(%edx),%esi
000001a7	movzbl	%bl,%eax
000001aa	xorl	%esi,%eax
000001ac	shrl	$0x08,%ebx
000001af	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001b6	incl	%edx
000001b7	movzbl	(%edx),%esi
000001ba	movzbl	%bl,%eax
000001bd	xorl	%esi,%eax
000001bf	shrl	$0x08,%ebx
000001c2	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
000001c9	incl	%edx
000001ca	xorl	(%edx),%ebx
000001cc	movl	%ebx,%eax
000001ce	shrl	$0x08,%eax
000001d1	movzbl	%bl,%edx
000001d4	xorl	pulCRCTable-0x4c(%ecx,%edx,4),%eax
000001db	movl	%eax,%edx
000001dd	shrl	$0x08,%edx
000001e0	movzbl	%al,%eax
000001e3	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%edx
000001ea	movl	%edx,%eax
000001ec	shrl	$0x08,%eax
000001ef	movzbl	%dl,%edx
000001f2	xorl	pulCRCTable-0x4c(%ecx,%edx,4),%eax
000001f9	movl	%eax,%ebx
000001fb	shrl	$0x08,%ebx
000001fe	movzbl	%al,%eax
00000201	jmp	0x00000234
00000203	movzbl	(%edx),%esi
00000206	movzbl	%bl,%eax
00000209	xorl	%esi,%eax
0000020b	shrl	$0x08,%ebx
0000020e	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000215	incl	%edx
00000216	movzbl	(%edx),%esi
00000219	movzbl	%bl,%eax
0000021c	xorl	%esi,%eax
0000021e	shrl	$0x08,%ebx
00000221	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
00000228	incl	%edx
00000229	movzbl	(%edx),%edx
0000022c	movzbl	%bl,%eax
0000022f	xorl	%edx,%eax
00000231	shrl	$0x08,%ebx
00000234	xorl	pulCRCTable-0x4c(%ecx,%eax,4),%ebx
0000023b	movl	0x1c(%esp),%eax
0000023f	movl	%ebx,(%eax)
00000241	addl	$0x08,%esp
00000244	popl	%esi
00000245	popl	%edi
00000246	popl	%ebx
00000247	popl	%ebp
00000248	ret
00000249	nopl	(%eax)
0000024c	outl	%eax,%dx
0000024d	addl	%eax,(%eax)
0000024f	addb	%bl,%ch
00000251	addl	%eax,(%eax)
00000253	addb	%cl,%dl
00000255	addl	%eax,(%eax)
00000257	addb	%dh,0x7e000001(%edi)
0000025d	addl	%eax,(%eax)
0000025f	addb	%ch,0x01(%ebx)
00000262	addb	%al,(%eax)
00000264	popl	%eax
00000265	addl	%eax,(%eax)
00000267	addb	%al,0x01(%ebp)
0000026a	addb	%al,(%eax)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(checksum_md5.o):
(__TEXT,__text) section
MD5Init(MD5Context_t*):
00000000	movl	0x04(%esp),%eax
00000004	movl	$0x67452301,(%eax)
0000000a	movl	$0xefcdab89,0x04(%eax)
00000011	movl	$0x98badcfe,0x08(%eax)
00000018	movl	$0x10325476,0x0c(%eax)
0000001f	movl	MD5Init(MD5Context_t*),0x10(%eax)
00000026	movl	MD5Init(MD5Context_t*),0x14(%eax)
0000002d	ret
0000002e	nop
MD5Update(MD5Context_t*, unsigned char const*, unsigned int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%ebx
00000034	pushl	%edi
00000035	pushl	%esi
00000036	subl	$0x1c,%esp
00000039	movl	0x10(%ebp),%ebx
0000003c	leal	MD5Init(MD5Context_t*)(,%ebx,8),%ecx
00000043	movl	0x08(%ebp),%edi
00000046	movl	0x10(%edi),%eax
00000049	addl	%eax,%ecx
0000004b	movl	%ecx,0x10(%edi)
0000004e	movl	0x14(%edi),%ecx
00000051	jae	0x00000057
00000053	incl	%ecx
00000054	movl	%ecx,0x14(%edi)
00000057	movl	0x0c(%ebp),%esi
0000005a	movl	%ebx,%edx
0000005c	shrl	$0x1d,%edx
0000005f	addl	%ecx,%edx
00000061	movl	%edx,0x14(%edi)
00000064	shrl	$0x03,%eax
00000067	andl	$0x3f,%eax
0000006a	jne	0x00000071
0000006c	leal	0x18(%edi),%edi
0000006f	jmp	0x000000be
00000071	leal	0x18(%edi,%eax),%ecx
00000075	movl	$0x00000040,%edx
0000007a	subl	%eax,%edx
0000007c	cmpl	%ebx,%edx
0000007e	jbe	0x00000098
00000080	movl	%ebx,0x08(%esp)
00000084	movl	%esi,0x04(%esp)
00000088	movl	%ecx,(%esp)
0000008b	calll	_memcpy
00000090	addl	$0x1c,%esp
00000093	popl	%esi
00000094	popl	%edi
00000095	popl	%ebx
00000096	popl	%ebp
00000097	ret
00000098	movl	%edx,0x08(%esp)
0000009c	movl	%esi,0x04(%esp)
000000a0	movl	%ecx,(%esp)
000000a3	movl	%edx,0xf0(%ebp)
000000a6	calll	_memcpy
000000ab	movl	%edi,%ecx
000000ad	leal	0x18(%ecx),%edi
000000b0	movl	%edi,%edx
000000b2	calll	MD5Transform(unsigned int*, unsigned int const*)
000000b7	movl	0xf0(%ebp),%eax
000000ba	subl	%eax,%ebx
000000bc	addl	%eax,%esi
000000be	cmpl	$0x40,%ebx
000000c1	jb	0x00000133
000000c3	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
000000d0	movsd	0x38(%esi),%xmm0
000000d5	movsd	%xmm0,0x38(%edi)
000000da	movsd	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi),%xmm0
000000df	movsd	%xmm0,MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edi)
000000e4	movsd	0x28(%esi),%xmm0
000000e9	movsd	%xmm0,0x28(%edi)
000000ee	movsd	0x20(%esi),%xmm0
000000f3	movsd	%xmm0,0x20(%edi)
000000f8	movsd	0x18(%esi),%xmm0
000000fd	movsd	%xmm0,0x18(%edi)
00000102	movsd	0x10(%esi),%xmm0
00000107	movsd	%xmm0,0x10(%edi)
0000010c	movsd	(%esi),%xmm0
00000110	movsd	0x08(%esi),%xmm1
00000115	movsd	%xmm1,0x08(%edi)
0000011a	movsd	%xmm0,(%edi)
0000011e	movl	0x08(%ebp),%ecx
00000121	movl	%edi,%edx
00000123	calll	MD5Transform(unsigned int*, unsigned int const*)
00000128	addl	$0x40,%esi
0000012b	addl	$0xc0,%ebx
0000012e	cmpl	$0x3f,%ebx
00000131	ja	0x000000d0
00000133	movl	%ebx,0x08(%esp)
00000137	movl	%esi,0x04(%esp)
0000013b	movl	%edi,(%esp)
0000013e	jmp	0x0000008b
00000143	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5Transform(unsigned int*, unsigned int const*):
00000150	pushl	%ebp
00000151	pushl	%ebx
00000152	pushl	%edi
00000153	pushl	%esi
00000154	subl	$0x48,%esp
00000157	movl	%ecx,0x04(%esp)
0000015b	movl	0x08(%ecx),%esi
0000015e	movl	%esi,0x40(%esp)
00000162	movl	0x0c(%ecx),%eax
00000165	movl	%eax,%ebx
00000167	xorl	%esi,%ebx
00000169	movl	(%ecx),%ebp
0000016b	movl	%ebp,(%esp)
0000016e	movl	0x04(%ecx),%esi
00000171	andl	%esi,%ebx
00000173	movl	(%edx),%ecx
00000175	movl	%ecx,0x10(%esp)
00000179	movl	0x04(%edx),%edi
0000017c	movl	%edi,0x44(%esp)
00000180	leal	MD5Init(MD5Context_t*)(%ebp,%ecx),%ebp
00000184	xorl	%eax,%ebx
00000186	leal	0xd76aa478(%ebx,%ebp),%ebx
0000018d	roll	$0x07,%ebx
00000190	addl	%esi,%ebx
00000192	movl	0x40(%esp),%ecx
00000196	movl	%ecx,%ebp
00000198	xorl	%esi,%ebp
0000019a	andl	%ebx,%ebp
0000019c	xorl	%ecx,%ebp
0000019e	movl	%ecx,%edi
000001a0	addl	0x44(%esp),%eax
000001a4	leal	0xe8c7b756(%ebp,%eax),%eax
000001ab	roll	$0x0c,%eax
000001ae	addl	%ebx,%eax
000001b0	movl	%ebx,%ebp
000001b2	xorl	%esi,%ebp
000001b4	andl	%eax,%ebp
000001b6	xorl	%esi,%ebp
000001b8	movl	0x08(%edx),%ecx
000001bb	movl	%ecx,0x18(%esp)
000001bf	addl	%ecx,%edi
000001c1	leal	0x242070db(%ebp,%edi),%edi
000001c8	roll	$0x11,%edi
000001cb	addl	%eax,%edi
000001cd	movl	%eax,%ebp
000001cf	xorl	%ebx,%ebp
000001d1	andl	%edi,%ebp
000001d3	xorl	%ebx,%ebp
000001d5	movl	0x0c(%edx),%ecx
000001d8	movl	%ecx,0x28(%esp)
000001dc	addl	%ecx,%esi
000001de	leal	0xc1bdceee(%ebp,%esi),%esi
000001e5	roll	$0x16,%esi
000001e8	addl	%edi,%esi
000001ea	movl	%edi,%ebp
000001ec	xorl	%eax,%ebp
000001ee	andl	%esi,%ebp
000001f0	xorl	%eax,%ebp
000001f2	movl	0x10(%edx),%ecx
000001f5	movl	%ecx,0x14(%esp)
000001f9	addl	%ecx,%ebx
000001fb	leal	0xf57c0faf(%ebp,%ebx),%ebx
00000202	roll	$0x07,%ebx
00000205	addl	%esi,%ebx
00000207	movl	%esi,%ebp
00000209	xorl	%edi,%ebp
0000020b	andl	%ebx,%ebp
0000020d	xorl	%edi,%ebp
0000020f	movl	0x14(%edx),%ecx
00000212	movl	%ecx,0x3c(%esp)
00000216	addl	%ecx,%eax
00000218	leal	0x4787c62a(%ebp,%eax),%eax
0000021f	roll	$0x0c,%eax
00000222	addl	%ebx,%eax
00000224	movl	%ebx,%ebp
00000226	xorl	%esi,%ebp
00000228	andl	%eax,%ebp
0000022a	xorl	%esi,%ebp
0000022c	movl	0x18(%edx),%ecx
0000022f	movl	%ecx,0x20(%esp)
00000233	addl	%ecx,%edi
00000235	leal	0xa8304613(%ebp,%edi),%edi
0000023c	roll	$0x11,%edi
0000023f	addl	%eax,%edi
00000241	movl	%eax,%ebp
00000243	xorl	%ebx,%ebp
00000245	andl	%edi,%ebp
00000247	xorl	%ebx,%ebp
00000249	movl	0x1c(%edx),%ecx
0000024c	movl	%ecx,0x2c(%esp)
00000250	addl	%ecx,%esi
00000252	leal	0xfd469501(%ebp,%esi),%esi
00000259	roll	$0x16,%esi
0000025c	addl	%edi,%esi
0000025e	movl	%edi,%ebp
00000260	xorl	%eax,%ebp
00000262	andl	%esi,%ebp
00000264	xorl	%eax,%ebp
00000266	movl	0x20(%edx),%ecx
00000269	movl	%ecx,0x08(%esp)
0000026d	addl	%ecx,%ebx
0000026f	leal	0x698098d8(%ebp,%ebx),%ebx
00000276	roll	$0x07,%ebx
00000279	addl	%esi,%ebx
0000027b	movl	%esi,%ebp
0000027d	xorl	%edi,%ebp
0000027f	andl	%ebx,%ebp
00000281	xorl	%edi,%ebp
00000283	movl	0x24(%edx),%ecx
00000286	movl	%ecx,0x40(%esp)
0000028a	addl	%ecx,%eax
0000028c	leal	0x8b44f7af(%ebp,%eax),%eax
00000293	roll	$0x0c,%eax
00000296	addl	%ebx,%eax
00000298	movl	%ebx,%ebp
0000029a	xorl	%esi,%ebp
0000029c	andl	%eax,%ebp
0000029e	xorl	%esi,%ebp
000002a0	movl	0x28(%edx),%ecx
000002a3	movl	%ecx,0x34(%esp)
000002a7	addl	%ecx,%edi
000002a9	leal	0xffff5bb1(%ebp,%edi),%edi
000002b0	roll	$0x11,%edi
000002b3	addl	%eax,%edi
000002b5	movl	%eax,%ebp
000002b7	xorl	%ebx,%ebp
000002b9	andl	%edi,%ebp
000002bb	xorl	%ebx,%ebp
000002bd	movl	0x2c(%edx),%ecx
000002c0	movl	%ecx,MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp)
000002c4	addl	%ecx,%esi
000002c6	leal	0x895cd7be(%ebp,%esi),%esi
000002cd	roll	$0x16,%esi
000002d0	addl	%edi,%esi
000002d2	movl	%edi,%ebp
000002d4	xorl	%eax,%ebp
000002d6	andl	%esi,%ebp
000002d8	xorl	%eax,%ebp
000002da	movl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edx),%ecx
000002dd	movl	%ecx,0x24(%esp)
000002e1	addl	%ecx,%ebx
000002e3	leal	0x6b901122(%ebp,%ebx),%ebx
000002ea	roll	$0x07,%ebx
000002ed	addl	%esi,%ebx
000002ef	movl	%esi,%ebp
000002f1	xorl	%edi,%ebp
000002f3	andl	%ebx,%ebp
000002f5	xorl	%edi,%ebp
000002f7	movl	0x34(%edx),%ecx
000002fa	movl	%ecx,0x38(%esp)
000002fe	addl	%ecx,%eax
00000300	leal	0xfd987193(%ebp,%eax),%ebp
00000307	roll	$0x0c,%ebp
0000030a	addl	%ebx,%ebp
0000030c	movl	%ebx,%eax
0000030e	xorl	%esi,%eax
00000310	andl	%ebp,%eax
00000312	xorl	%esi,%eax
00000314	movl	0x38(%edx),%ecx
00000317	movl	%ecx,0x1c(%esp)
0000031b	addl	%ecx,%edi
0000031d	leal	0xa679438e(%eax,%edi),%edi
00000324	roll	$0x11,%edi
00000327	addl	%ebp,%edi
00000329	movl	%ebp,%eax
0000032b	xorl	%ebx,%eax
0000032d	andl	%edi,%eax
0000032f	xorl	%ebx,%eax
00000331	movl	0x3c(%edx),%ecx
00000334	movl	%ecx,0x0c(%esp)
00000338	addl	%ecx,%esi
0000033a	leal	0x49b40821(%eax,%esi),%esi
00000341	roll	$0x16,%esi
00000344	addl	%edi,%esi
00000346	movl	%esi,%eax
00000348	xorl	%edi,%eax
0000034a	andl	%ebp,%eax
0000034c	xorl	%edi,%eax
0000034e	addl	0x44(%esp),%ebx
00000352	leal	0xf61e2562(%eax,%ebx),%edx
00000359	roll	$0x05,%edx
0000035c	addl	%esi,%edx
0000035e	movl	%edx,%eax
00000360	xorl	%esi,%eax
00000362	andl	%edi,%eax
00000364	xorl	%esi,%eax
00000366	addl	0x20(%esp),%ebp
0000036a	leal	0xc040b340(%eax,%ebp),%ebx
00000371	roll	$0x09,%ebx
00000374	addl	%edx,%ebx
00000376	movl	%ebx,%eax
00000378	xorl	%edx,%eax
0000037a	andl	%esi,%eax
0000037c	xorl	%edx,%eax
0000037e	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%edi
00000382	leal	0x265e5a51(%eax,%edi),%edi
00000389	roll	$0x0e,%edi
0000038c	addl	%ebx,%edi
0000038e	movl	%edi,%eax
00000390	xorl	%ebx,%eax
00000392	andl	%edx,%eax
00000394	xorl	%ebx,%eax
00000396	addl	0x10(%esp),%esi
0000039a	leal	0xe9b6c7aa(%eax,%esi),%esi
000003a1	roll	$0x14,%esi
000003a4	addl	%edi,%esi
000003a6	movl	%esi,%eax
000003a8	xorl	%edi,%eax
000003aa	andl	%ebx,%eax
000003ac	xorl	%edi,%eax
000003ae	addl	0x3c(%esp),%edx
000003b2	leal	0xd62f105d(%eax,%edx),%ebp
000003b9	roll	$0x05,%ebp
000003bc	addl	%esi,%ebp
000003be	movl	%ebp,%eax
000003c0	xorl	%esi,%eax
000003c2	andl	%edi,%eax
000003c4	xorl	%esi,%eax
000003c6	addl	0x34(%esp),%ebx
000003ca	leal	0x02441453(%eax,%ebx),%ebx
000003d1	roll	$0x09,%ebx
000003d4	addl	%ebp,%ebx
000003d6	movl	%ebx,%eax
000003d8	xorl	%ebp,%eax
000003da	andl	%esi,%eax
000003dc	xorl	%ebp,%eax
000003de	addl	%ecx,%edi
000003e0	leal	0xd8a1e681(%eax,%edi),%edi
000003e7	roll	$0x0e,%edi
000003ea	addl	%ebx,%edi
000003ec	movl	%edi,%eax
000003ee	xorl	%ebx,%eax
000003f0	andl	%ebp,%eax
000003f2	xorl	%ebx,%eax
000003f4	addl	0x14(%esp),%esi
000003f8	leal	0xe7d3fbc8(%eax,%esi),%esi
000003ff	roll	$0x14,%esi
00000402	addl	%edi,%esi
00000404	movl	%esi,%eax
00000406	xorl	%edi,%eax
00000408	andl	%ebx,%eax
0000040a	xorl	%edi,%eax
0000040c	addl	0x40(%esp),%ebp
00000410	leal	0x21e1cde6(%eax,%ebp),%ebp
00000417	roll	$0x05,%ebp
0000041a	addl	%esi,%ebp
0000041c	movl	%ebp,%eax
0000041e	xorl	%esi,%eax
00000420	andl	%edi,%eax
00000422	xorl	%esi,%eax
00000424	addl	0x1c(%esp),%ebx
00000428	leal	0xc33707d6(%eax,%ebx),%ebx
0000042f	roll	$0x09,%ebx
00000432	addl	%ebp,%ebx
00000434	movl	%ebx,%eax
00000436	xorl	%ebp,%eax
00000438	andl	%esi,%eax
0000043a	xorl	%ebp,%eax
0000043c	addl	0x28(%esp),%edi
00000440	leal	0xf4d50d87(%eax,%edi),%edi
00000447	roll	$0x0e,%edi
0000044a	addl	%ebx,%edi
0000044c	movl	%edi,%eax
0000044e	xorl	%ebx,%eax
00000450	andl	%ebp,%eax
00000452	xorl	%ebx,%eax
00000454	movl	0x08(%esp),%ecx
00000458	addl	%ecx,%esi
0000045a	leal	0x455a14ed(%eax,%esi),%esi
00000461	roll	$0x14,%esi
00000464	addl	%edi,%esi
00000466	movl	%esi,%eax
00000468	xorl	%edi,%eax
0000046a	andl	%ebx,%eax
0000046c	xorl	%edi,%eax
0000046e	addl	0x38(%esp),%ebp
00000472	leal	0xa9e3e905(%eax,%ebp),%edx
00000479	roll	$0x05,%edx
0000047c	addl	%esi,%edx
0000047e	movl	%edx,%eax
00000480	xorl	%esi,%eax
00000482	andl	%edi,%eax
00000484	xorl	%esi,%eax
00000486	addl	0x18(%esp),%ebx
0000048a	leal	0xfcefa3f8(%eax,%ebx),%ebx
00000491	roll	$0x09,%ebx
00000494	addl	%edx,%ebx
00000496	movl	%ebx,%eax
00000498	xorl	%edx,%eax
0000049a	andl	%esi,%eax
0000049c	xorl	%edx,%eax
0000049e	addl	0x2c(%esp),%edi
000004a2	leal	0x676f02d9(%eax,%edi),%ebp
000004a9	roll	$0x0e,%ebp
000004ac	addl	%ebx,%ebp
000004ae	movl	%ebp,%edi
000004b0	xorl	%ebx,%edi
000004b2	movl	%edi,%eax
000004b4	andl	%edx,%eax
000004b6	xorl	%ebx,%eax
000004b8	addl	0x24(%esp),%esi
000004bc	leal	0x8d2a4c8a(%eax,%esi),%eax
000004c3	roll	$0x14,%eax
000004c6	addl	%ebp,%eax
000004c8	xorl	%eax,%edi
000004ca	addl	0x3c(%esp),%edx
000004ce	leal	0xfffa3942(%edi,%edx),%edi
000004d5	roll	$0x04,%edi
000004d8	addl	%eax,%edi
000004da	movl	%eax,%edx
000004dc	xorl	%ebp,%edx
000004de	xorl	%edi,%edx
000004e0	addl	%ecx,%ebx
000004e2	leal	0x8771f681(%edx,%ebx),%esi
000004e9	roll	$0x0b,%esi
000004ec	addl	%edi,%esi
000004ee	movl	%edi,%edx
000004f0	xorl	%eax,%edx
000004f2	xorl	%esi,%edx
000004f4	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%ebp
000004f8	leal	0x6d9d6122(%edx,%ebp),%edx
000004ff	roll	$0x10,%edx
00000502	addl	%esi,%edx
00000504	movl	%esi,%ebx
00000506	xorl	%edi,%ebx
00000508	xorl	%edx,%ebx
0000050a	addl	0x1c(%esp),%eax
0000050e	leal	0xfde5380c(%ebx,%eax),%ebx
00000515	roll	$0x17,%ebx
00000518	addl	%edx,%ebx
0000051a	movl	%edx,%eax
0000051c	xorl	%esi,%eax
0000051e	xorl	%ebx,%eax
00000520	addl	0x44(%esp),%edi
00000524	leal	0xa4beea44(%eax,%edi),%edi
0000052b	roll	$0x04,%edi
0000052e	addl	%ebx,%edi
00000530	movl	%ebx,%eax
00000532	xorl	%edx,%eax
00000534	xorl	%edi,%eax
00000536	addl	0x14(%esp),%esi
0000053a	leal	0x4bdecfa9(%eax,%esi),%esi
00000541	roll	$0x0b,%esi
00000544	addl	%edi,%esi
00000546	movl	%edi,%eax
00000548	xorl	%ebx,%eax
0000054a	xorl	%esi,%eax
0000054c	addl	0x2c(%esp),%edx
00000550	leal	0xf6bb4b60(%eax,%edx),%edx
00000557	roll	$0x10,%edx
0000055a	addl	%esi,%edx
0000055c	movl	%esi,%eax
0000055e	xorl	%edi,%eax
00000560	xorl	%edx,%eax
00000562	addl	0x34(%esp),%ebx
00000566	leal	0xbebfbc70(%eax,%ebx),%ebx
0000056d	roll	$0x17,%ebx
00000570	addl	%edx,%ebx
00000572	movl	%edx,%eax
00000574	xorl	%esi,%eax
00000576	xorl	%ebx,%eax
00000578	addl	0x38(%esp),%edi
0000057c	leal	0x289b7ec6(%eax,%edi),%edi
00000583	roll	$0x04,%edi
00000586	addl	%ebx,%edi
00000588	movl	%ebx,%eax
0000058a	xorl	%edx,%eax
0000058c	xorl	%edi,%eax
0000058e	movl	0x10(%esp),%ecx
00000592	addl	%ecx,%esi
00000594	leal	0xeaa127fa(%eax,%esi),%esi
0000059b	roll	$0x0b,%esi
0000059e	addl	%edi,%esi
000005a0	movl	%edi,%eax
000005a2	xorl	%ebx,%eax
000005a4	xorl	%esi,%eax
000005a6	addl	0x28(%esp),%edx
000005aa	leal	0xd4ef3085(%eax,%edx),%edx
000005b1	roll	$0x10,%edx
000005b4	addl	%esi,%edx
000005b6	movl	%esi,%eax
000005b8	xorl	%edi,%eax
000005ba	xorl	%edx,%eax
000005bc	addl	0x20(%esp),%ebx
000005c0	leal	0x04881d05(%eax,%ebx),%ebx
000005c7	roll	$0x17,%ebx
000005ca	addl	%edx,%ebx
000005cc	movl	%edx,%eax
000005ce	xorl	%esi,%eax
000005d0	xorl	%ebx,%eax
000005d2	addl	0x40(%esp),%edi
000005d6	leal	0xd9d4d039(%eax,%edi),%edi
000005dd	roll	$0x04,%edi
000005e0	addl	%ebx,%edi
000005e2	movl	%ebx,%eax
000005e4	xorl	%edx,%eax
000005e6	xorl	%edi,%eax
000005e8	addl	0x24(%esp),%esi
000005ec	leal	0xe6db99e5(%eax,%esi),%esi
000005f3	roll	$0x0b,%esi
000005f6	addl	%edi,%esi
000005f8	movl	%edi,%eax
000005fa	xorl	%ebx,%eax
000005fc	xorl	%esi,%eax
000005fe	addl	0x0c(%esp),%edx
00000602	leal	0x1fa27cf8(%eax,%edx),%edx
00000609	roll	$0x10,%edx
0000060c	addl	%esi,%edx
0000060e	movl	%esi,%eax
00000610	xorl	%edi,%eax
00000612	xorl	%edx,%eax
00000614	addl	0x18(%esp),%ebx
00000618	leal	0xc4ac5665(%eax,%ebx),%ebp
0000061f	roll	$0x17,%ebp
00000622	addl	%edx,%ebp
00000624	movl	%esi,%eax
00000626	notl	%eax
00000628	orl	%ebp,%eax
0000062a	xorl	%edx,%eax
0000062c	addl	%ecx,%edi
0000062e	leal	0xf4292244(%eax,%edi),%edi
00000635	roll	$0x06,%edi
00000638	addl	%ebp,%edi
0000063a	movl	%edx,%eax
0000063c	notl	%eax
0000063e	orl	%edi,%eax
00000640	xorl	%ebp,%eax
00000642	addl	0x2c(%esp),%esi
00000646	leal	0x432aff97(%eax,%esi),%esi
0000064d	roll	$0x0a,%esi
00000650	addl	%edi,%esi
00000652	movl	%ebp,%eax
00000654	notl	%eax
00000656	orl	%esi,%eax
00000658	xorl	%edi,%eax
0000065a	addl	0x1c(%esp),%edx
0000065e	leal	0xab9423a7(%eax,%edx),%ebx
00000665	roll	$0x0f,%ebx
00000668	addl	%esi,%ebx
0000066a	movl	%edi,%eax
0000066c	notl	%eax
0000066e	orl	%ebx,%eax
00000670	xorl	%esi,%eax
00000672	addl	0x3c(%esp),%ebp
00000676	leal	0xfc93a039(%eax,%ebp),%eax
0000067d	roll	$0x15,%eax
00000680	addl	%ebx,%eax
00000682	movl	%esi,%edx
00000684	notl	%edx
00000686	orl	%eax,%edx
00000688	xorl	%ebx,%edx
0000068a	addl	0x24(%esp),%edi
0000068e	leal	0x655b59c3(%edx,%edi),%edi
00000695	roll	$0x06,%edi
00000698	addl	%eax,%edi
0000069a	movl	%ebx,%edx
0000069c	notl	%edx
0000069e	orl	%edi,%edx
000006a0	xorl	%eax,%edx
000006a2	addl	0x28(%esp),%esi
000006a6	leal	0x8f0ccc92(%edx,%esi),%esi
000006ad	roll	$0x0a,%esi
000006b0	addl	%edi,%esi
000006b2	movl	%eax,%edx
000006b4	notl	%edx
000006b6	orl	%esi,%edx
000006b8	xorl	%edi,%edx
000006ba	addl	0x34(%esp),%ebx
000006be	leal	0xffeff47d(%edx,%ebx),%ebx
000006c5	roll	$0x0f,%ebx
000006c8	addl	%esi,%ebx
000006ca	movl	%edi,%edx
000006cc	notl	%edx
000006ce	orl	%ebx,%edx
000006d0	xorl	%esi,%edx
000006d2	addl	0x44(%esp),%eax
000006d6	leal	0x85845dd1(%edx,%eax),%eax
000006dd	roll	$0x15,%eax
000006e0	addl	%ebx,%eax
000006e2	movl	%esi,%edx
000006e4	notl	%edx
000006e6	orl	%eax,%edx
000006e8	xorl	%ebx,%edx
000006ea	addl	0x08(%esp),%edi
000006ee	leal	0x6fa87e4f(%edx,%edi),%edi
000006f5	roll	$0x06,%edi
000006f8	addl	%eax,%edi
000006fa	movl	%ebx,%edx
000006fc	notl	%edx
000006fe	orl	%edi,%edx
00000700	xorl	%eax,%edx
00000702	addl	0x0c(%esp),%esi
00000706	leal	0xfe2ce6e0(%edx,%esi),%esi
0000070d	roll	$0x0a,%esi
00000710	addl	%edi,%esi
00000712	movl	%eax,%edx
00000714	notl	%edx
00000716	orl	%esi,%edx
00000718	xorl	%edi,%edx
0000071a	addl	0x20(%esp),%ebx
0000071e	leal	0xa3014314(%edx,%ebx),%edx
00000725	roll	$0x0f,%edx
00000728	addl	%esi,%edx
0000072a	movl	%edi,%ebx
0000072c	notl	%ebx
0000072e	orl	%edx,%ebx
00000730	xorl	%esi,%ebx
00000732	addl	0x38(%esp),%eax
00000736	leal	0x4e0811a1(%ebx,%eax),%eax
0000073d	roll	$0x15,%eax
00000740	addl	%edx,%eax
00000742	movl	%esi,%ebx
00000744	notl	%ebx
00000746	orl	%eax,%ebx
00000748	xorl	%edx,%ebx
0000074a	addl	0x14(%esp),%edi
0000074e	leal	0xf7537e82(%ebx,%edi),%edi
00000755	roll	$0x06,%edi
00000758	addl	%eax,%edi
0000075a	movl	%edx,%ebx
0000075c	notl	%ebx
0000075e	orl	%edi,%ebx
00000760	xorl	%eax,%ebx
00000762	addl	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esp),%esi
00000766	leal	0xbd3af235(%ebx,%esi),%esi
0000076d	roll	$0x0a,%esi
00000770	addl	%edi,%esi
00000772	movl	%eax,%ebx
00000774	notl	%ebx
00000776	orl	%esi,%ebx
00000778	xorl	%edi,%ebx
0000077a	movl	(%esp),%ebp
0000077d	addl	%edi,%ebp
0000077f	movl	0x04(%esp),%ecx
00000783	movl	%ebp,(%ecx)
00000785	addl	0x18(%esp),%edx
00000789	leal	0x2ad7d2bb(%ebx,%edx),%edx
00000790	roll	$0x0f,%edx
00000793	addl	%esi,%edx
00000795	notl	%edi
00000797	orl	%edx,%edi
00000799	movl	0x04(%ecx),%ebx
0000079c	addl	%edx,%ebx
0000079e	xorl	%esi,%edi
000007a0	addl	0x40(%esp),%eax
000007a4	leal	0xeb86d391(%edi,%eax),%eax
000007ab	roll	$0x15,%eax
000007ae	addl	%ebx,%eax
000007b0	movl	%eax,0x04(%ecx)
000007b3	addl	%edx,0x08(%ecx)
000007b6	addl	%esi,0x0c(%ecx)
000007b9	addl	$0x48,%esp
000007bc	popl	%esi
000007bd	popl	%edi
000007be	popl	%ebx
000007bf	popl	%ebp
000007c0	ret
000007c1	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5Final(unsigned char*, MD5Context_t*):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x0c,%esp
000007d9	movl	0x0c(%ebp),%esi
000007dc	movl	0x10(%esi),%edx
000007df	shrl	$0x03,%edx
000007e2	andl	$0x3f,%edx
000007e5	movb	$0x80,0x18(%esi,%edx)
000007ea	leal	0x19(%esi,%edx),%eax
000007ee	movl	$0x0000003f,%ecx
000007f3	subl	%edx,%ecx
000007f5	leal	0x18(%esi),%edi
000007f8	movl	0x08(%ebp),%ebx
000007fb	cmpl	$0x07,%ecx
000007fe	ja	0x00000884
00000804	movl	%ecx,0x08(%esp)
00000808	movl	%eax,(%esp)
0000080b	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000813	calll	_memset
00000818	movl	%esi,%ecx
0000081a	movl	%edi,%edx
0000081c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000821	movl	MD5Init(MD5Context_t*),0x04(%edi)
00000828	movl	MD5Init(MD5Context_t*),(%edi)
0000082e	movl	MD5Init(MD5Context_t*),0x0c(%edi)
00000835	movl	MD5Init(MD5Context_t*),0x08(%edi)
0000083c	movl	MD5Init(MD5Context_t*),0x14(%edi)
00000843	movl	MD5Init(MD5Context_t*),0x10(%edi)
0000084a	movl	MD5Init(MD5Context_t*),0x1c(%edi)
00000851	movl	MD5Init(MD5Context_t*),0x18(%edi)
00000858	movl	MD5Init(MD5Context_t*),0x24(%edi)
0000085f	movl	MD5Init(MD5Context_t*),0x20(%edi)
00000866	movl	MD5Init(MD5Context_t*),0x2c(%edi)
0000086d	movl	MD5Init(MD5Context_t*),0x28(%edi)
00000874	movl	MD5Init(MD5Context_t*),0x34(%edi)
0000087b	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%edi)
00000882	jmp	0x0000089b
00000884	addl	$0xf8,%ecx
00000887	movl	%ecx,0x08(%esp)
0000088b	movl	%eax,(%esp)
0000088e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000896	calll	_memset
0000089b	movl	%esi,%ecx
0000089d	movl	0x10(%esi),%eax
000008a0	movl	%eax,0x50(%esi)
000008a3	movl	0x14(%esi),%eax
000008a6	movl	%eax,0x54(%esi)
000008a9	movl	%edi,%edx
000008ab	calll	MD5Transform(unsigned int*, unsigned int const*)
000008b0	movsd	(%esi),%xmm0
000008b4	movsd	0x08(%esi),%xmm1
000008b9	movsd	%xmm1,0x08(%ebx)
000008be	movsd	%xmm0,(%ebx)
000008c2	movl	MD5Init(MD5Context_t*),0x04(%esi)
000008c9	movl	MD5Init(MD5Context_t*),(%esi)
000008cf	movl	MD5Init(MD5Context_t*),0x0c(%esi)
000008d6	movl	MD5Init(MD5Context_t*),0x08(%esi)
000008dd	movl	MD5Init(MD5Context_t*),0x14(%esi)
000008e4	movl	MD5Init(MD5Context_t*),0x10(%esi)
000008eb	movl	MD5Init(MD5Context_t*),0x1c(%esi)
000008f2	movl	MD5Init(MD5Context_t*),0x18(%esi)
000008f9	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000900	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000907	movl	MD5Init(MD5Context_t*),0x2c(%esi)
0000090e	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000915	movl	MD5Init(MD5Context_t*),0x34(%esi)
0000091c	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000923	movl	MD5Init(MD5Context_t*),0x3c(%esi)
0000092a	movl	MD5Init(MD5Context_t*),0x38(%esi)
00000931	movl	MD5Init(MD5Context_t*),0x44(%esi)
00000938	movl	MD5Init(MD5Context_t*),0x40(%esi)
0000093f	movl	MD5Init(MD5Context_t*),0x4c(%esi)
00000946	movl	MD5Init(MD5Context_t*),0x48(%esi)
0000094d	movl	MD5Init(MD5Context_t*),0x54(%esi)
00000954	movl	MD5Init(MD5Context_t*),0x50(%esi)
0000095b	addl	$0x0c,%esp
0000095e	popl	%esi
0000095f	popl	%edi
00000960	popl	%ebx
00000961	popl	%ebp
00000962	ret
00000963	nopl	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5_Print(unsigned char*, int):
00000970	pushl	%ebp
00000971	movl	%esp,%ebp
00000973	pushl	%esi
00000974	subl	$0x14,%esp
00000977	calll	0x0000097c
0000097c	popl	%eax
0000097d	leal	MD5_Print(unsigned char*, int)::szReturn-0x97c(%eax),%esi
00000983	movl	%esi,0x08(%esp)
00000987	movl	0x0c(%ebp),%eax
0000098a	movl	%eax,0x04(%esp)
0000098e	movl	0x08(%ebp),%eax
00000991	movl	%eax,(%esp)
00000994	movl	$0x00000040,0x0c(%esp)
0000099c	calll	V_binarytohex(unsigned char const*, int, char*, int)
000009a1	movl	%esi,%eax
000009a3	addl	$0x14,%esp
000009a6	popl	%esi
000009a7	popl	%ebp
000009a8	ret
000009a9	nopl	MD5Init(MD5Context_t*)(%eax)
MD5_PseudoRandom(unsigned int):
000009b0	pushl	%ebp
000009b1	movl	%esp,%ebp
000009b3	pushl	%esi
000009b4	subl	$0x74,%esp
000009b7	movl	0x08(%ebp),%eax
000009ba	movl	%eax,0xf8(%ebp)
000009bd	xorps	%xmm0,%xmm0
000009c0	movaps	%xmm0,0xd8(%ebp)
000009c4	movaps	%xmm0,0xc8(%ebp)
000009c8	movaps	%xmm0,0xb8(%ebp)
000009cc	movaps	%xmm0,0xa8(%ebp)
000009d0	movaps	%xmm0,0x98(%ebp)
000009d4	movl	MD5Init(MD5Context_t*),0xec(%ebp)
000009db	movl	MD5Init(MD5Context_t*),0xe8(%ebp)
000009e2	movl	$0x67452301,0x98(%ebp)
000009e9	movl	$0xefcdab89,0x9c(%ebp)
000009f0	movl	$0x98badcfe,0xa0(%ebp)
000009f7	movl	$0x10325476,0xa4(%ebp)
000009fe	movl	$0x00000020,0xa8(%ebp)
00000a05	movl	MD5Init(MD5Context_t*),0xac(%ebp)
00000a0c	movl	0xf8(%ebp),%eax
00000a0f	movl	%eax,0xb0(%ebp)
00000a12	movl	0xa8(%ebp),%ecx
00000a15	shrl	$0x03,%ecx
00000a18	andl	$0x3f,%ecx
00000a1b	movb	$0x80,0xb0(%ebp,%ecx)
00000a20	movl	$0x0000003f,%eax
00000a25	subl	%ecx,%eax
00000a27	leal	0xb1(%ebp,%ecx),%ecx
00000a2b	leal	0xb0(%ebp),%esi
00000a2e	cmpl	$0x07,%eax
00000a31	ja	0x00000ab8
00000a37	movl	%eax,0x08(%esp)
00000a3b	movl	%ecx,(%esp)
00000a3e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000a46	calll	_memset
00000a4b	leal	0x98(%ebp),%ecx
00000a4e	movl	%esi,%edx
00000a50	calll	MD5Transform(unsigned int*, unsigned int const*)
00000a55	movl	MD5Init(MD5Context_t*),0x04(%esi)
00000a5c	movl	MD5Init(MD5Context_t*),(%esi)
00000a62	movl	MD5Init(MD5Context_t*),0x0c(%esi)
00000a69	movl	MD5Init(MD5Context_t*),0x08(%esi)
00000a70	movl	MD5Init(MD5Context_t*),0x14(%esi)
00000a77	movl	MD5Init(MD5Context_t*),0x10(%esi)
00000a7e	movl	MD5Init(MD5Context_t*),0x1c(%esi)
00000a85	movl	MD5Init(MD5Context_t*),0x18(%esi)
00000a8c	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000a93	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000a9a	movl	MD5Init(MD5Context_t*),0x2c(%esi)
00000aa1	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000aa8	movl	MD5Init(MD5Context_t*),0x34(%esi)
00000aaf	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000ab6	jmp	0x00000acf
00000ab8	addl	$0xf8,%eax
00000abb	movl	%eax,0x08(%esp)
00000abf	movl	%ecx,(%esp)
00000ac2	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000aca	calll	_memset
00000acf	movl	0xa8(%ebp),%eax
00000ad2	movl	%eax,0xe8(%ebp)
00000ad5	movl	0xac(%ebp),%eax
00000ad8	movl	%eax,0xec(%ebp)
00000adb	leal	0x98(%ebp),%ecx
00000ade	movl	%esi,%edx
00000ae0	calll	MD5Transform(unsigned int*, unsigned int const*)
00000ae5	movl	0xa0(%ebp),%ecx
00000ae8	shll	$0x10,%ecx
00000aeb	movzwl	0x9e(%ebp),%eax
00000aef	orl	%ecx,%eax
00000af1	addl	$0x74,%esp
00000af4	popl	%esi
00000af5	popl	%ebp
00000af6	ret
00000af7	nopw	MD5Init(MD5Context_t*)(%eax,%eax)
MD5_Compare(MD5Value_t const&, MD5Value_t const&):
00000b00	pushl	%ebp
00000b01	movl	%esp,%ebp
00000b03	subl	$0x18,%esp
00000b06	movl	0x0c(%ebp),%eax
00000b09	movl	%eax,0x04(%esp)
00000b0d	movl	0x08(%ebp),%eax
00000b10	movl	%eax,(%esp)
00000b13	movl	$0x00000010,0x08(%esp)
00000b1b	calll	_memcmp
00000b20	testl	%eax,%eax
00000b22	sete	%al
00000b25	movzbl	%al,%eax
00000b28	addl	$0x18,%esp
00000b2b	popl	%ebp
00000b2c	ret
00000b2d	nopl	(%eax)
MD5Value_t::Zero():
00000b30	movl	0x04(%esp),%eax
00000b34	movl	MD5Init(MD5Context_t*),0x04(%eax)
00000b3b	movl	MD5Init(MD5Context_t*),(%eax)
00000b41	movl	MD5Init(MD5Context_t*),0x0c(%eax)
00000b48	movl	MD5Init(MD5Context_t*),0x08(%eax)
00000b4f	ret
MD5Value_t::IsZero() const:
00000b50	xorl	%eax,%eax
00000b52	movl	0x04(%esp),%ecx
00000b56	jmp	0x00000b61
00000b58	nopl	MD5Init(MD5Context_t*)(%eax,%eax)
00000b60	incl	%eax
00000b61	movb	$0x01,%dl
00000b63	cmpl	$0x0f,%eax
00000b66	ja	0x00000b70
00000b68	xorb	%dl,%dl
00000b6a	cmpb	MD5Init(MD5Context_t*),(%ecx,%eax)
00000b6e	je	0x00000b60
00000b70	movzbl	%dl,%eax
00000b73	ret
00000b74	nopw	%cs:MD5Init(MD5Context_t*)(%eax,%eax)
MD5_ProcessSingleBuffer(void const*, int, MD5Value_t&):
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%edi
00000b84	pushl	%esi
00000b85	subl	$0x70,%esp
00000b88	movl	$0x67452301,0xa0(%ebp)
00000b8f	movl	$0xefcdab89,0xa4(%ebp)
00000b96	movl	$0x98badcfe,0xa8(%ebp)
00000b9d	movl	$0x10325476,0xac(%ebp)
00000ba4	movl	MD5Init(MD5Context_t*),0xb0(%ebp)
00000bab	movl	MD5Init(MD5Context_t*),0xb4(%ebp)
00000bb2	movl	0x0c(%ebp),%eax
00000bb5	movl	%eax,0x08(%esp)
00000bb9	movl	0x08(%ebp),%eax
00000bbc	movl	%eax,0x04(%esp)
00000bc0	leal	0xa0(%ebp),%eax
00000bc3	movl	%eax,(%esp)
00000bc6	calll	MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
00000bcb	movl	0xb0(%ebp),%ecx
00000bce	shrl	$0x03,%ecx
00000bd1	andl	$0x3f,%ecx
00000bd4	movb	$0x80,0xb8(%ebp,%ecx)
00000bd9	movl	$0x0000003f,%eax
00000bde	subl	%ecx,%eax
00000be0	leal	0xb9(%ebp,%ecx),%ecx
00000be4	leal	0xb8(%ebp),%esi
00000be7	movl	0x10(%ebp),%edi
00000bea	cmpl	$0x07,%eax
00000bed	ja	0x00000c74
00000bf3	movl	%eax,0x08(%esp)
00000bf7	movl	%ecx,(%esp)
00000bfa	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000c02	calll	_memset
00000c07	leal	0xa0(%ebp),%ecx
00000c0a	movl	%esi,%edx
00000c0c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000c11	movl	MD5Init(MD5Context_t*),0x04(%esi)
00000c18	movl	MD5Init(MD5Context_t*),(%esi)
00000c1e	movl	MD5Init(MD5Context_t*),0x0c(%esi)
00000c25	movl	MD5Init(MD5Context_t*),0x08(%esi)
00000c2c	movl	MD5Init(MD5Context_t*),0x14(%esi)
00000c33	movl	MD5Init(MD5Context_t*),0x10(%esi)
00000c3a	movl	MD5Init(MD5Context_t*),0x1c(%esi)
00000c41	movl	MD5Init(MD5Context_t*),0x18(%esi)
00000c48	movl	MD5Init(MD5Context_t*),0x24(%esi)
00000c4f	movl	MD5Init(MD5Context_t*),0x20(%esi)
00000c56	movl	MD5Init(MD5Context_t*),0x2c(%esi)
00000c5d	movl	MD5Init(MD5Context_t*),0x28(%esi)
00000c64	movl	MD5Init(MD5Context_t*),0x34(%esi)
00000c6b	movl	MD5Init(MD5Context_t*),MD5Update(MD5Context_t*, unsigned char const*, unsigned int)(%esi)
00000c72	jmp	0x00000c8b
00000c74	addl	$0xf8,%eax
00000c77	movl	%eax,0x08(%esp)
00000c7b	movl	%ecx,(%esp)
00000c7e	movl	MD5Init(MD5Context_t*),0x04(%esp)
00000c86	calll	_memset
00000c8b	movl	0xb0(%ebp),%eax
00000c8e	movl	%eax,0xf0(%ebp)
00000c91	movl	0xb4(%ebp),%eax
00000c94	movl	%eax,0xf4(%ebp)
00000c97	leal	0xa0(%ebp),%ecx
00000c9a	movl	%esi,%edx
00000c9c	calll	MD5Transform(unsigned int*, unsigned int const*)
00000ca1	movsd	0xa0(%ebp),%xmm0
00000ca6	movsd	0xa8(%ebp),%xmm1
00000cab	movsd	%xmm1,0x08(%edi)
00000cb0	movsd	%xmm0,(%edi)
00000cb4	addl	$0x70,%esp
00000cb7	popl	%esi
00000cb8	popl	%edi
00000cb9	popl	%ebp
00000cba	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(checksum_sha1.o):
(__TEXT,__text) section
CSHA1::CSHA1():
00000000	calll	0x00000005
00000005	popl	%eax
00000006	leal	vtable for CSHA1-0x5+0x00000008(%eax),%ecx
0000000c	movl	0x04(%esp),%eax
00000010	movl	%ecx,(%eax)
00000012	leal	0x74(%eax),%ecx
00000015	movl	%ecx,0x000000b4(%eax)
0000001b	movl	$0x67452301,0x04(%eax)
00000022	movl	$0xefcdab89,0x08(%eax)
00000029	movl	$0x98badcfe,0x0c(%eax)
00000030	movl	$0x10325476,0x10(%eax)
00000037	movl	$0xc3d2e1f0,0x14(%eax)
0000003e	movl	CSHA1::CSHA1(),0x18(%eax)
00000045	movl	CSHA1::CSHA1(),0x1c(%eax)
0000004c	ret
0000004d	nopl	(%eax)
CSHA1::CSHA1():
00000050	calll	0x00000055
00000055	popl	%eax
00000056	leal	vtable for CSHA1-0x55+0x00000008(%eax),%ecx
0000005c	movl	0x04(%esp),%eax
00000060	movl	%ecx,(%eax)
00000062	leal	0x74(%eax),%ecx
00000065	movl	%ecx,0x000000b4(%eax)
0000006b	movl	$0x67452301,0x04(%eax)
00000072	movl	$0xefcdab89,0x08(%eax)
00000079	movl	$0x98badcfe,0x0c(%eax)
00000080	movl	$0x10325476,0x10(%eax)
00000087	movl	$0xc3d2e1f0,0x14(%eax)
0000008e	movl	CSHA1::CSHA1(),0x18(%eax)
00000095	movl	CSHA1::CSHA1(),0x1c(%eax)
0000009c	ret
0000009d	nopl	(%eax)
CSHA1::Reset():
000000a0	movl	0x04(%esp),%eax
000000a4	movl	$0x67452301,0x04(%eax)
000000ab	movl	$0xefcdab89,0x08(%eax)
000000b2	movl	$0x98badcfe,0x0c(%eax)
000000b9	movl	$0x10325476,0x10(%eax)
000000c0	movl	$0xc3d2e1f0,0x14(%eax)
000000c7	movl	CSHA1::CSHA1(),0x18(%eax)
000000ce	movl	CSHA1::CSHA1(),0x1c(%eax)
000000d5	ret
000000d6	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
000000e0	jmp	operator delete(void*)
000000e5	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
000000f0	ret
000000f1	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::~CSHA1():
00000100	ret
00000101	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::Transform(unsigned long*, unsigned char*):
00000110	pushl	%ebp
00000111	pushl	%ebx
00000112	pushl	%edi
00000113	pushl	%esi
00000114	subl	$0x0000014c,%esp
0000011a	movl	0x00000160(%esp),%edx
00000121	movl	0x000000b4(%edx),%eax
00000127	movl	0x00000168(%esp),%ecx
0000012e	movsd	0x38(%ecx),%xmm0
00000133	movsd	%xmm0,0x38(%eax)
00000138	movsd	0x30(%ecx),%xmm0
0000013d	movsd	%xmm0,0x30(%eax)
00000142	movsd	0x28(%ecx),%xmm0
00000147	movsd	%xmm0,0x28(%eax)
0000014c	movsd	0x20(%ecx),%xmm0
00000151	movsd	%xmm0,0x20(%eax)
00000156	movsd	0x18(%ecx),%xmm0
0000015b	movsd	%xmm0,0x18(%eax)
00000160	movsd	0x10(%ecx),%xmm0
00000165	movsd	%xmm0,0x10(%eax)
0000016a	movsd	(%ecx),%xmm0
0000016e	movsd	0x08(%ecx),%xmm1
00000173	movsd	%xmm1,0x08(%eax)
00000178	movsd	%xmm0,(%eax)
0000017c	movl	0x00000164(%esp),%eax
00000183	movl	(%eax),%ebx
00000185	movl	0x04(%eax),%edi
00000188	movl	%ebx,%ecx
0000018a	roll	$0x05,%ecx
0000018d	addl	0x10(%eax),%ecx
00000190	movl	%ecx,0x0c(%esp)
00000194	movl	0x0c(%eax),%ebp
00000197	movl	%ebp,0x04(%esp)
0000019b	movl	0x08(%eax),%esi
0000019e	movl	0x000000b4(%edx),%eax
000001a4	movl	(%eax),%ecx
000001a6	bswap	%ecx
000001a8	movl	%ecx,0x08(%esp)
000001ac	movl	%ecx,(%eax)
000001ae	movl	0x000000b4(%edx),%eax
000001b4	movl	0x04(%eax),%ecx
000001b7	bswap	%ecx
000001b9	movl	%ecx,0x00000140(%esp)
000001c0	movl	%ecx,0x04(%eax)
000001c3	movl	0x000000b4(%edx),%eax
000001c9	movl	0x08(%eax),%ecx
000001cc	bswap	%ecx
000001ce	movl	%ecx,0x10(%esp)
000001d2	movl	%ecx,0x08(%eax)
000001d5	movl	0x000000b4(%edx),%eax
000001db	movl	0x0c(%eax),%ecx
000001de	bswap	%ecx
000001e0	movl	%ecx,0x14(%esp)
000001e4	movl	%ecx,0x0c(%eax)
000001e7	movl	0x000000b4(%edx),%eax
000001ed	movl	0x10(%eax),%ecx
000001f0	bswap	%ecx
000001f2	movl	%ecx,0x00000148(%esp)
000001f9	movl	%ecx,0x10(%eax)
000001fc	movl	0x000000b4(%edx),%eax
00000202	movl	0x14(%eax),%ecx
00000205	bswap	%ecx
00000207	movl	%ecx,0x00000144(%esp)
0000020e	movl	%ecx,0x14(%eax)
00000211	movl	0x000000b4(%edx),%eax
00000217	movl	0x18(%eax),%ecx
0000021a	bswap	%ecx
0000021c	movl	%ecx,0x18(%esp)
00000220	movl	%ecx,0x18(%eax)
00000223	movl	0x000000b4(%edx),%eax
00000229	movl	0x1c(%eax),%ecx
0000022c	bswap	%ecx
0000022e	movl	%ecx,0x1c(%esp)
00000232	movl	%ecx,0x1c(%eax)
00000235	movl	0x000000b4(%edx),%eax
0000023b	movl	0x20(%eax),%ecx
0000023e	bswap	%ecx
00000240	movl	%ecx,0x20(%esp)
00000244	movl	%ecx,0x20(%eax)
00000247	movl	0x000000b4(%edx),%eax
0000024d	movl	0x24(%eax),%ecx
00000250	bswap	%ecx
00000252	movl	%ecx,0x24(%esp)
00000256	movl	%ecx,0x24(%eax)
00000259	movl	0x000000b4(%edx),%eax
0000025f	movl	0x28(%eax),%ecx
00000262	bswap	%ecx
00000264	movl	%ecx,0x28(%esp)
00000268	movl	%ecx,0x28(%eax)
0000026b	movl	0x000000b4(%edx),%eax
00000271	movl	0x2c(%eax),%ecx
00000274	bswap	%ecx
00000276	movl	%ecx,0x2c(%esp)
0000027a	movl	%ecx,0x2c(%eax)
0000027d	movl	0x000000b4(%edx),%eax
00000283	movl	0x30(%eax),%ecx
00000286	bswap	%ecx
00000288	movl	%ecx,0x30(%esp)
0000028c	movl	%ecx,0x30(%eax)
0000028f	movl	0x000000b4(%edx),%eax
00000295	movl	0x34(%eax),%ecx
00000298	bswap	%ecx
0000029a	movl	%ecx,0x34(%esp)
0000029e	movl	%ecx,0x34(%eax)
000002a1	movl	0x000000b4(%edx),%eax
000002a7	movl	0x38(%eax),%ecx
000002aa	bswap	%ecx
000002ac	movl	%ecx,0x38(%esp)
000002b0	movl	%ecx,0x38(%eax)
000002b3	movl	0x000000b4(%edx),%eax
000002b9	movl	0x3c(%eax),%ecx
000002bc	bswap	%ecx
000002be	movl	%ecx,0x3c(%esp)
000002c2	movl	%ecx,0x3c(%eax)
000002c5	movl	0x000000b4(%edx),%eax
000002cb	movl	0x20(%eax),%ecx
000002ce	xorl	0x34(%eax),%ecx
000002d1	xorl	0x08(%eax),%ecx
000002d4	xorl	(%eax),%ecx
000002d6	roll	%ecx
000002d8	movl	%ecx,0x40(%esp)
000002dc	movl	%ecx,(%eax)
000002de	movl	0x000000b4(%edx),%eax
000002e4	movl	0x24(%eax),%ecx
000002e7	xorl	0x38(%eax),%ecx
000002ea	xorl	0x0c(%eax),%ecx
000002ed	xorl	0x04(%eax),%ecx
000002f0	roll	%ecx
000002f2	movl	%ecx,0x48(%esp)
000002f6	movl	%ecx,0x04(%eax)
000002f9	movl	0x000000b4(%edx),%eax
000002ff	movl	0x28(%eax),%ecx
00000302	xorl	0x3c(%eax),%ecx
00000305	xorl	0x10(%eax),%ecx
00000308	xorl	0x08(%eax),%ecx
0000030b	roll	%ecx
0000030d	movl	%ecx,0x4c(%esp)
00000311	movl	%ecx,0x08(%eax)
00000314	movl	0x000000b4(%edx),%eax
0000031a	movl	0x2c(%eax),%ecx
0000031d	xorl	(%eax),%ecx
0000031f	xorl	0x14(%eax),%ecx
00000322	xorl	0x0c(%eax),%ecx
00000325	roll	%ecx
00000327	movl	%ecx,CSHA1::CSHA1()(%esp)
0000032b	movl	%ecx,0x0c(%eax)
0000032e	movl	0x000000b4(%edx),%eax
00000334	movl	0x30(%eax),%ecx
00000337	xorl	0x04(%eax),%ecx
0000033a	xorl	0x18(%eax),%ecx
0000033d	xorl	0x10(%eax),%ecx
00000340	roll	%ecx
00000342	movl	%ecx,0x44(%esp)
00000346	movl	%ecx,0x10(%eax)
00000349	movl	0x000000b4(%edx),%eax
0000034f	movl	0x34(%eax),%ecx
00000352	xorl	0x08(%eax),%ecx
00000355	xorl	0x1c(%eax),%ecx
00000358	xorl	0x14(%eax),%ecx
0000035b	roll	%ecx
0000035d	movl	%ecx,0x58(%esp)
00000361	movl	%ecx,0x14(%eax)
00000364	movl	0x000000b4(%edx),%eax
0000036a	movl	0x38(%eax),%ecx
0000036d	xorl	0x0c(%eax),%ecx
00000370	xorl	0x20(%eax),%ecx
00000373	xorl	0x18(%eax),%ecx
00000376	roll	%ecx
00000378	movl	%ecx,0x60(%esp)
0000037c	movl	%ecx,0x18(%eax)
0000037f	movl	0x000000b4(%edx),%eax
00000385	movl	0x3c(%eax),%ecx
00000388	xorl	0x10(%eax),%ecx
0000038b	xorl	0x24(%eax),%ecx
0000038e	xorl	0x1c(%eax),%ecx
00000391	roll	%ecx
00000393	movl	%ecx,0x5c(%esp)
00000397	movl	%ecx,0x1c(%eax)
0000039a	movl	0x000000b4(%edx),%eax
000003a0	movl	(%eax),%ecx
000003a2	xorl	0x14(%eax),%ecx
000003a5	xorl	0x28(%eax),%ecx
000003a8	xorl	0x20(%eax),%ecx
000003ab	roll	%ecx
000003ad	movl	%ecx,0x54(%esp)
000003b1	movl	%ecx,0x20(%eax)
000003b4	movl	0x000000b4(%edx),%eax
000003ba	movl	0x04(%eax),%ecx
000003bd	xorl	0x18(%eax),%ecx
000003c0	xorl	0x2c(%eax),%ecx
000003c3	xorl	0x24(%eax),%ecx
000003c6	roll	%ecx
000003c8	movl	%ecx,0x68(%esp)
000003cc	movl	%ecx,0x24(%eax)
000003cf	movl	0x000000b4(%edx),%eax
000003d5	movl	0x08(%eax),%ecx
000003d8	xorl	0x1c(%eax),%ecx
000003db	xorl	0x30(%eax),%ecx
000003de	xorl	0x28(%eax),%ecx
000003e1	roll	%ecx
000003e3	movl	%ecx,0x70(%esp)
000003e7	movl	%ecx,0x28(%eax)
000003ea	movl	0x000000b4(%edx),%eax
000003f0	movl	0x0c(%eax),%ecx
000003f3	xorl	0x20(%eax),%ecx
000003f6	xorl	0x34(%eax),%ecx
000003f9	xorl	0x2c(%eax),%ecx
000003fc	roll	%ecx
000003fe	movl	%ecx,0x6c(%esp)
00000402	movl	%ecx,0x2c(%eax)
00000405	movl	0x000000b4(%edx),%eax
0000040b	movl	0x10(%eax),%ecx
0000040e	xorl	0x24(%eax),%ecx
00000411	xorl	0x38(%eax),%ecx
00000414	xorl	0x30(%eax),%ecx
00000417	roll	%ecx
00000419	movl	%ecx,0x64(%esp)
0000041d	movl	%ecx,0x30(%eax)
00000420	movl	0x000000b4(%edx),%eax
00000426	movl	0x14(%eax),%ecx
00000429	xorl	0x28(%eax),%ecx
0000042c	xorl	0x3c(%eax),%ecx
0000042f	xorl	0x34(%eax),%ecx
00000432	roll	%ecx
00000434	movl	%ecx,0x78(%esp)
00000438	movl	%ecx,0x34(%eax)
0000043b	movl	0x000000b4(%edx),%eax
00000441	movl	0x18(%eax),%ecx
00000444	xorl	0x2c(%eax),%ecx
00000447	xorl	(%eax),%ecx
00000449	xorl	0x38(%eax),%ecx
0000044c	roll	%ecx
0000044e	movl	%ecx,0x00000080(%esp)
00000455	movl	%ecx,0x38(%eax)
00000458	movl	0x000000b4(%edx),%eax
0000045e	movl	0x1c(%eax),%ecx
00000461	xorl	0x30(%eax),%ecx
00000464	xorl	0x04(%eax),%ecx
00000467	xorl	0x3c(%eax),%ecx
0000046a	roll	%ecx
0000046c	movl	%ecx,0x7c(%esp)
00000470	movl	%ecx,0x3c(%eax)
00000473	movl	0x000000b4(%edx),%eax
00000479	movl	0x20(%eax),%ecx
0000047c	xorl	0x34(%eax),%ecx
0000047f	xorl	0x08(%eax),%ecx
00000482	xorl	(%eax),%ecx
00000484	roll	%ecx
00000486	movl	%ecx,0x74(%esp)
0000048a	movl	%ecx,(%eax)
0000048c	movl	0x000000b4(%edx),%eax
00000492	movl	0x24(%eax),%ecx
00000495	xorl	0x38(%eax),%ecx
00000498	xorl	0x0c(%eax),%ecx
0000049b	xorl	0x04(%eax),%ecx
0000049e	roll	%ecx
000004a0	movl	%ecx,0x00000088(%esp)
000004a7	movl	%ecx,0x04(%eax)
000004aa	movl	0x000000b4(%edx),%eax
000004b0	movl	0x28(%eax),%ecx
000004b3	xorl	0x3c(%eax),%ecx
000004b6	xorl	0x10(%eax),%ecx
000004b9	xorl	0x08(%eax),%ecx
000004bc	roll	%ecx
000004be	movl	%ecx,0x00000090(%esp)
000004c5	movl	%ecx,0x08(%eax)
000004c8	movl	0x000000b4(%edx),%eax
000004ce	movl	0x2c(%eax),%ecx
000004d1	xorl	(%eax),%ecx
000004d3	xorl	0x14(%eax),%ecx
000004d6	xorl	0x0c(%eax),%ecx
000004d9	roll	%ecx
000004db	movl	%ecx,0x0000008c(%esp)
000004e2	movl	%ecx,0x0c(%eax)
000004e5	movl	0x000000b4(%edx),%eax
000004eb	movl	0x30(%eax),%ecx
000004ee	xorl	0x04(%eax),%ecx
000004f1	xorl	0x18(%eax),%ecx
000004f4	xorl	0x10(%eax),%ecx
000004f7	roll	%ecx
000004f9	movl	%ecx,0x00000084(%esp)
00000500	movl	%ecx,0x10(%eax)
00000503	movl	0x000000b4(%edx),%eax
00000509	movl	0x34(%eax),%ecx
0000050c	xorl	0x08(%eax),%ecx
0000050f	xorl	0x1c(%eax),%ecx
00000512	xorl	0x14(%eax),%ecx
00000515	roll	%ecx
00000517	movl	%ecx,0x0000009c(%esp)
0000051e	movl	%ecx,0x14(%eax)
00000521	movl	0x000000b4(%edx),%eax
00000527	movl	0x38(%eax),%ecx
0000052a	xorl	0x0c(%eax),%ecx
0000052d	xorl	0x20(%eax),%ecx
00000530	xorl	0x18(%eax),%ecx
00000533	roll	%ecx
00000535	movl	%ecx,0x00000094(%esp)
0000053c	movl	%ecx,0x18(%eax)
0000053f	movl	0x000000b4(%edx),%eax
00000545	movl	0x3c(%eax),%ecx
00000548	xorl	0x10(%eax),%ecx
0000054b	xorl	0x24(%eax),%ecx
0000054e	xorl	0x1c(%eax),%ecx
00000551	roll	%ecx
00000553	movl	%ecx,0x00000098(%esp)
0000055a	movl	%ecx,0x1c(%eax)
0000055d	movl	0x000000b4(%edx),%eax
00000563	movl	(%eax),%ecx
00000565	xorl	0x14(%eax),%ecx
00000568	xorl	0x28(%eax),%ecx
0000056b	xorl	0x20(%eax),%ecx
0000056e	roll	%ecx
00000570	movl	%ecx,CSHA1::Reset()(%esp)
00000577	movl	%ecx,0x20(%eax)
0000057a	movl	0x000000b4(%edx),%eax
00000580	movl	0x04(%eax),%ecx
00000583	xorl	0x18(%eax),%ecx
00000586	xorl	0x2c(%eax),%ecx
00000589	xorl	0x24(%eax),%ecx
0000058c	roll	%ecx
0000058e	movl	%ecx,0x000000a4(%esp)
00000595	movl	%ecx,0x24(%eax)
00000598	movl	0x000000b4(%edx),%eax
0000059e	movl	0x08(%eax),%ecx
000005a1	xorl	0x1c(%eax),%ecx
000005a4	xorl	0x30(%eax),%ecx
000005a7	xorl	0x28(%eax),%ecx
000005aa	roll	%ecx
000005ac	movl	%ecx,0x000000a8(%esp)
000005b3	movl	%ecx,0x28(%eax)
000005b6	movl	0x000000b4(%edx),%eax
000005bc	movl	0x0c(%eax),%ecx
000005bf	xorl	0x20(%eax),%ecx
000005c2	xorl	0x34(%eax),%ecx
000005c5	xorl	0x2c(%eax),%ecx
000005c8	roll	%ecx
000005ca	movl	%ecx,0x000000ac(%esp)
000005d1	movl	%ecx,0x2c(%eax)
000005d4	movl	0x000000b4(%edx),%eax
000005da	movl	0x10(%eax),%ecx
000005dd	xorl	0x24(%eax),%ecx
000005e0	xorl	0x38(%eax),%ecx
000005e3	xorl	0x30(%eax),%ecx
000005e6	roll	%ecx
000005e8	movl	%ecx,0x000000b0(%esp)
000005ef	movl	%ecx,0x30(%eax)
000005f2	movl	0x000000b4(%edx),%eax
000005f8	movl	0x14(%eax),%ecx
000005fb	xorl	0x28(%eax),%ecx
000005fe	xorl	0x3c(%eax),%ecx
00000601	xorl	0x34(%eax),%ecx
00000604	roll	%ecx
00000606	movl	%ecx,0x000000b4(%esp)
0000060d	movl	%ecx,0x34(%eax)
00000610	movl	0x000000b4(%edx),%eax
00000616	movl	0x18(%eax),%ecx
00000619	xorl	0x2c(%eax),%ecx
0000061c	xorl	(%eax),%ecx
0000061e	xorl	0x38(%eax),%ecx
00000621	roll	%ecx
00000623	movl	%ecx,0x000000b8(%esp)
0000062a	movl	%ecx,0x38(%eax)
0000062d	movl	0x000000b4(%edx),%eax
00000633	movl	0x1c(%eax),%ecx
00000636	xorl	0x30(%eax),%ecx
00000639	xorl	0x04(%eax),%ecx
0000063c	xorl	0x3c(%eax),%ecx
0000063f	roll	%ecx
00000641	movl	%ecx,0x000000bc(%esp)
00000648	movl	%ecx,0x3c(%eax)
0000064b	movl	0x000000b4(%edx),%eax
00000651	movl	0x20(%eax),%ecx
00000654	xorl	0x34(%eax),%ecx
00000657	xorl	0x08(%eax),%ecx
0000065a	xorl	(%eax),%ecx
0000065c	roll	%ecx
0000065e	movl	%ecx,0x000000c0(%esp)
00000665	movl	%ecx,(%eax)
00000667	movl	0x000000b4(%edx),%eax
0000066d	movl	0x24(%eax),%ecx
00000670	xorl	0x38(%eax),%ecx
00000673	xorl	0x0c(%eax),%ecx
00000676	xorl	0x04(%eax),%ecx
00000679	roll	%ecx
0000067b	movl	%ecx,0x000000c4(%esp)
00000682	movl	%ecx,0x04(%eax)
00000685	movl	0x000000b4(%edx),%eax
0000068b	movl	0x28(%eax),%ecx
0000068e	xorl	0x3c(%eax),%ecx
00000691	xorl	0x10(%eax),%ecx
00000694	xorl	0x08(%eax),%ecx
00000697	roll	%ecx
00000699	movl	%ecx,0x000000c8(%esp)
000006a0	movl	%ecx,0x08(%eax)
000006a3	movl	0x000000b4(%edx),%eax
000006a9	movl	0x2c(%eax),%ecx
000006ac	xorl	(%eax),%ecx
000006ae	xorl	0x14(%eax),%ecx
000006b1	xorl	0x0c(%eax),%ecx
000006b4	roll	%ecx
000006b6	movl	%ecx,0x000000cc(%esp)
000006bd	movl	%ecx,0x0c(%eax)
000006c0	movl	0x000000b4(%edx),%eax
000006c6	movl	0x30(%eax),%ecx
000006c9	xorl	0x04(%eax),%ecx
000006cc	xorl	0x18(%eax),%ecx
000006cf	xorl	0x10(%eax),%ecx
000006d2	roll	%ecx
000006d4	movl	%ecx,0x000000d0(%esp)
000006db	movl	%ecx,0x10(%eax)
000006de	movl	0x000000b4(%edx),%eax
000006e4	movl	0x34(%eax),%ecx
000006e7	xorl	0x08(%eax),%ecx
000006ea	xorl	0x1c(%eax),%ecx
000006ed	xorl	0x14(%eax),%ecx
000006f0	roll	%ecx
000006f2	movl	%ecx,0x000000d4(%esp)
000006f9	movl	%ecx,0x14(%eax)
000006fc	movl	0x000000b4(%edx),%eax
00000702	movl	0x38(%eax),%ecx
00000705	xorl	0x0c(%eax),%ecx
00000708	xorl	0x20(%eax),%ecx
0000070b	xorl	0x18(%eax),%ecx
0000070e	roll	%ecx
00000710	movl	%ecx,0x000000d8(%esp)
00000717	movl	%ecx,0x18(%eax)
0000071a	movl	0x000000b4(%edx),%eax
00000720	movl	0x3c(%eax),%ecx
00000723	xorl	0x10(%eax),%ecx
00000726	xorl	0x24(%eax),%ecx
00000729	xorl	0x1c(%eax),%ecx
0000072c	roll	%ecx
0000072e	movl	%ecx,0x000000dc(%esp)
00000735	movl	%ecx,0x1c(%eax)
00000738	movl	0x000000b4(%edx),%eax
0000073e	movl	(%eax),%ecx
00000740	xorl	0x14(%eax),%ecx
00000743	xorl	0x28(%eax),%ecx
00000746	xorl	0x20(%eax),%ecx
00000749	roll	%ecx
0000074b	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000752	movl	%ecx,0x20(%eax)
00000755	movl	0x000000b4(%edx),%eax
0000075b	movl	0x04(%eax),%ecx
0000075e	xorl	0x18(%eax),%ecx
00000761	xorl	0x2c(%eax),%ecx
00000764	xorl	0x24(%eax),%ecx
00000767	roll	%ecx
00000769	movl	%ecx,0x000000e4(%esp)
00000770	movl	%ecx,0x24(%eax)
00000773	movl	0x000000b4(%edx),%eax
00000779	movl	0x08(%eax),%ecx
0000077c	xorl	0x1c(%eax),%ecx
0000077f	xorl	0x30(%eax),%ecx
00000782	xorl	0x28(%eax),%ecx
00000785	roll	%ecx
00000787	movl	%ecx,0x000000ec(%esp)
0000078e	movl	%ecx,0x28(%eax)
00000791	movl	0x000000b4(%edx),%eax
00000797	movl	0x0c(%eax),%ecx
0000079a	xorl	0x20(%eax),%ecx
0000079d	xorl	0x34(%eax),%ecx
000007a0	xorl	0x2c(%eax),%ecx
000007a3	roll	%ecx
000007a5	movl	%ecx,0x000000e8(%esp)
000007ac	movl	%ecx,0x2c(%eax)
000007af	movl	0x000000b4(%edx),%eax
000007b5	movl	0x10(%eax),%ecx
000007b8	xorl	0x24(%eax),%ecx
000007bb	xorl	0x38(%eax),%ecx
000007be	xorl	0x30(%eax),%ecx
000007c1	roll	%ecx
000007c3	movl	%ecx,0x000000f4(%esp)
000007ca	movl	%ecx,0x30(%eax)
000007cd	movl	0x000000b4(%edx),%eax
000007d3	movl	0x14(%eax),%ecx
000007d6	xorl	0x28(%eax),%ecx
000007d9	xorl	0x3c(%eax),%ecx
000007dc	xorl	0x34(%eax),%ecx
000007df	roll	%ecx
000007e1	movl	%ecx,0x000000fc(%esp)
000007e8	movl	%ecx,0x34(%eax)
000007eb	movl	0x000000b4(%edx),%eax
000007f1	movl	0x18(%eax),%ecx
000007f4	xorl	0x2c(%eax),%ecx
000007f7	xorl	(%eax),%ecx
000007f9	xorl	0x38(%eax),%ecx
000007fc	roll	%ecx
000007fe	movl	%ecx,0x000000f8(%esp)
00000805	movl	%ecx,0x38(%eax)
00000808	movl	0x000000b4(%edx),%eax
0000080e	movl	0x1c(%eax),%ecx
00000811	xorl	0x30(%eax),%ecx
00000814	xorl	0x04(%eax),%ecx
00000817	xorl	0x3c(%eax),%ecx
0000081a	roll	%ecx
0000081c	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000823	movl	%ecx,0x3c(%eax)
00000826	movl	0x000000b4(%edx),%eax
0000082c	movl	0x20(%eax),%ecx
0000082f	xorl	0x34(%eax),%ecx
00000832	xorl	0x08(%eax),%ecx
00000835	xorl	(%eax),%ecx
00000837	roll	%ecx
00000839	movl	%ecx,0x00000104(%esp)
00000840	movl	%ecx,(%eax)
00000842	movl	0x000000b4(%edx),%eax
00000848	movl	0x24(%eax),%ecx
0000084b	xorl	0x38(%eax),%ecx
0000084e	xorl	0x0c(%eax),%ecx
00000851	xorl	0x04(%eax),%ecx
00000854	roll	%ecx
00000856	movl	%ecx,0x0000010c(%esp)
0000085d	movl	%ecx,0x04(%eax)
00000860	movl	0x000000b4(%edx),%eax
00000866	movl	0x28(%eax),%ecx
00000869	xorl	0x3c(%eax),%ecx
0000086c	xorl	0x10(%eax),%ecx
0000086f	xorl	0x08(%eax),%ecx
00000872	roll	%ecx
00000874	movl	%ecx,0x00000108(%esp)
0000087b	movl	%ecx,0x08(%eax)
0000087e	movl	0x000000b4(%edx),%eax
00000884	movl	0x2c(%eax),%ecx
00000887	xorl	(%eax),%ecx
00000889	xorl	0x14(%eax),%ecx
0000088c	xorl	0x0c(%eax),%ecx
0000088f	roll	%ecx
00000891	movl	%ecx,CSHA1::~CSHA1()(%esp)
00000898	movl	%ecx,0x0c(%eax)
0000089b	movl	0x000000b4(%edx),%eax
000008a1	movl	0x30(%eax),%ecx
000008a4	xorl	0x04(%eax),%ecx
000008a7	xorl	0x18(%eax),%ecx
000008aa	xorl	0x10(%eax),%ecx
000008ad	roll	%ecx
000008af	movl	%ecx,0x00000114(%esp)
000008b6	movl	%ecx,0x10(%eax)
000008b9	movl	0x000000b4(%edx),%eax
000008bf	movl	0x34(%eax),%ecx
000008c2	xorl	0x08(%eax),%ecx
000008c5	xorl	0x1c(%eax),%ecx
000008c8	xorl	0x14(%eax),%ecx
000008cb	roll	%ecx
000008cd	movl	%ecx,0x0000011c(%esp)
000008d4	movl	%ecx,0x14(%eax)
000008d7	movl	0x000000b4(%edx),%eax
000008dd	movl	0x38(%eax),%ecx
000008e0	xorl	0x0c(%eax),%ecx
000008e3	xorl	0x20(%eax),%ecx
000008e6	xorl	0x18(%eax),%ecx
000008e9	roll	%ecx
000008eb	movl	%ecx,0x00000118(%esp)
000008f2	movl	%ecx,0x18(%eax)
000008f5	movl	0x000000b4(%edx),%eax
000008fb	movl	0x3c(%eax),%ecx
000008fe	xorl	0x10(%eax),%ecx
00000901	xorl	0x24(%eax),%ecx
00000904	xorl	0x1c(%eax),%ecx
00000907	roll	%ecx
00000909	movl	%ecx,CSHA1::Transform(unsigned long*, unsigned char*)(%esp)
00000910	movl	%ecx,0x1c(%eax)
00000913	movl	0x000000b4(%edx),%eax
00000919	movl	(%eax),%ecx
0000091b	xorl	0x14(%eax),%ecx
0000091e	xorl	0x28(%eax),%ecx
00000921	xorl	0x20(%eax),%ecx
00000924	roll	%ecx
00000926	movl	%ecx,0x00000124(%esp)
0000092d	movl	%ecx,0x20(%eax)
00000930	movl	0x000000b4(%edx),%eax
00000936	movl	0x04(%eax),%ecx
00000939	xorl	0x18(%eax),%ecx
0000093c	xorl	0x2c(%eax),%ecx
0000093f	xorl	0x24(%eax),%ecx
00000942	roll	%ecx
00000944	movl	%ecx,0x0000012c(%esp)
0000094b	movl	%ecx,0x24(%eax)
0000094e	movl	0x000000b4(%edx),%eax
00000954	movl	0x08(%eax),%ecx
00000957	xorl	0x1c(%eax),%ecx
0000095a	xorl	0x30(%eax),%ecx
0000095d	xorl	0x28(%eax),%ecx
00000960	roll	%ecx
00000962	movl	%ecx,0x00000128(%esp)
00000969	movl	%ecx,0x28(%eax)
0000096c	movl	0x000000b4(%edx),%eax
00000972	movl	0x0c(%eax),%ecx
00000975	xorl	0x20(%eax),%ecx
00000978	xorl	0x34(%eax),%ecx
0000097b	xorl	0x2c(%eax),%ecx
0000097e	roll	%ecx
00000980	movl	%ecx,0x00000120(%esp)
00000987	movl	%ecx,0x2c(%eax)
0000098a	movl	0x000000b4(%edx),%eax
00000990	movl	0x10(%eax),%ecx
00000993	xorl	0x24(%eax),%ecx
00000996	xorl	0x38(%eax),%ecx
00000999	xorl	0x30(%eax),%ecx
0000099c	roll	%ecx
0000099e	movl	%ecx,0x00000134(%esp)
000009a5	movl	%ecx,0x30(%eax)
000009a8	movl	0x000000b4(%edx),%eax
000009ae	movl	0x14(%eax),%ecx
000009b1	xorl	0x28(%eax),%ecx
000009b4	xorl	0x3c(%eax),%ecx
000009b7	xorl	0x34(%eax),%ecx
000009ba	roll	%ecx
000009bc	movl	%ecx,0x00000138(%esp)
000009c3	movl	%ecx,0x34(%eax)
000009c6	movl	0x000000b4(%edx),%eax
000009cc	movl	0x18(%eax),%ecx
000009cf	xorl	0x2c(%eax),%ecx
000009d2	xorl	(%eax),%ecx
000009d4	xorl	0x38(%eax),%ecx
000009d7	roll	%ecx
000009d9	movl	%ecx,0x0000013c(%esp)
000009e0	movl	%ecx,0x38(%eax)
000009e3	movl	0x000000b4(%edx),%eax
000009e9	movl	0x1c(%eax),%ecx
000009ec	xorl	0x30(%eax),%ecx
000009ef	xorl	0x04(%eax),%ecx
000009f2	xorl	0x3c(%eax),%ecx
000009f5	roll	%ecx
000009f7	movl	%ecx,0x00000130(%esp)
000009fe	movl	%ecx,0x3c(%eax)
00000a01	movl	%ebp,%eax
00000a03	xorl	%esi,%eax
00000a05	andl	%edi,%eax
00000a07	xorl	%ebp,%eax
00000a09	addl	0x0c(%esp),%eax
00000a0d	movl	0x08(%esp),%ecx
00000a11	leal	0x5a827999(%ecx,%eax),%eax
00000a18	roll	$0x1e,%edi
00000a1b	movl	%edi,0x08(%esp)
00000a1f	movl	%edi,%ecx
00000a21	xorl	%esi,%ecx
00000a23	movl	%esi,%ebp
00000a25	andl	%ebx,%ecx
00000a27	roll	$0x1e,%ebx
00000a2a	movl	%ebx,0x0c(%esp)
00000a2e	movl	%edi,%esi
00000a30	xorl	%ebx,%esi
00000a32	andl	%eax,%esi
00000a34	movl	%eax,%edx
00000a36	roll	$0x1e,%edx
00000a39	movl	%edx,(%esp)
00000a3c	xorl	%ebx,%edx
00000a3e	roll	$0x05,%eax
00000a41	xorl	%ebp,%ecx
00000a43	movl	%ebp,%ebx
00000a45	addl	0x04(%esp),%ecx
00000a49	addl	0x00000140(%esp),%ecx
00000a50	leal	0x5a827999(%eax,%ecx),%edi
00000a57	andl	%edi,%edx
00000a59	movl	%edi,%eax
00000a5b	roll	$0x1e,%eax
00000a5e	movl	%eax,0x00000140(%esp)
00000a65	movl	%eax,%ecx
00000a67	movl	(%esp),%eax
00000a6a	xorl	%eax,%ecx
00000a6c	movl	0x08(%esp),%ebp
00000a70	xorl	%ebp,%esi
00000a72	addl	%ebx,%esi
00000a74	addl	0x10(%esp),%esi
00000a78	roll	$0x05,%edi
00000a7b	leal	0x5a827999(%edi,%esi),%esi
00000a82	andl	%esi,%ecx
00000a84	movl	0x0c(%esp),%ebx
00000a88	xorl	%ebx,%edx
00000a8a	addl	%ebp,%edx
00000a8c	addl	0x14(%esp),%edx
00000a90	movl	%esi,%edi
00000a92	roll	$0x05,%edi
00000a95	leal	0x5a827999(%edi,%edx),%edx
00000a9c	roll	$0x1e,%esi
00000a9f	movl	%esi,%edi
00000aa1	xorl	0x00000140(%esp),%edi
00000aa8	andl	%edx,%edi
00000aaa	xorl	%eax,%ecx
00000aac	addl	%ebx,%ecx
00000aae	addl	0x00000148(%esp),%ecx
00000ab5	movl	%edx,%ebx
00000ab7	roll	$0x05,%ebx
00000aba	leal	0x5a827999(%ebx,%ecx),%ecx
00000ac1	roll	$0x1e,%edx
00000ac4	movl	%edx,%ebp
00000ac6	xorl	%esi,%ebp
00000ac8	andl	%ecx,%ebp
00000aca	movl	%ecx,%ebx
00000acc	roll	$0x1e,%ebx
00000acf	movl	%ebx,0x00000148(%esp)
00000ad6	xorl	%edx,%ebx
00000ad8	roll	$0x05,%ecx
00000adb	xorl	0x00000140(%esp),%edi
00000ae2	addl	%eax,%edi
00000ae4	addl	0x00000144(%esp),%edi
00000aeb	leal	0x5a827999(%ecx,%edi),%edi
00000af2	andl	%edi,%ebx
00000af4	movl	%edi,%eax
00000af6	roll	$0x1e,%eax
00000af9	movl	%eax,0x00000144(%esp)
00000b00	movl	%eax,%ecx
00000b02	xorl	0x00000148(%esp),%ecx
00000b09	xorl	%esi,%ebp
00000b0b	addl	0x00000140(%esp),%ebp
00000b12	addl	0x18(%esp),%ebp
00000b16	roll	$0x05,%edi
00000b19	leal	0x5a827999(%edi,%ebp),%ebp
00000b20	andl	%ebp,%ecx
00000b22	xorl	%edx,%ebx
00000b24	addl	%esi,%ebx
00000b26	addl	0x1c(%esp),%ebx
00000b2a	movl	%ebp,%eax
00000b2c	roll	$0x05,%eax
00000b2f	leal	0x5a827999(%eax,%ebx),%esi
00000b36	roll	$0x1e,%ebp
00000b39	movl	%ebp,%edi
00000b3b	xorl	0x00000144(%esp),%edi
00000b42	andl	%esi,%edi
00000b44	xorl	0x00000148(%esp),%ecx
00000b4b	addl	%edx,%ecx
00000b4d	addl	0x20(%esp),%ecx
00000b51	movl	%esi,%eax
00000b53	roll	$0x05,%eax
00000b56	leal	0x5a827999(%eax,%ecx),%ecx
00000b5d	roll	$0x1e,%esi
00000b60	movl	%esi,%eax
00000b62	xorl	%ebp,%eax
00000b64	andl	%ecx,%eax
00000b66	movl	%ecx,%edx
00000b68	roll	$0x1e,%edx
00000b6b	movl	%edx,0x00000140(%esp)
00000b72	xorl	%esi,%edx
00000b74	roll	$0x05,%ecx
00000b77	xorl	0x00000144(%esp),%edi
00000b7e	addl	0x00000148(%esp),%edi
00000b85	addl	0x24(%esp),%edi
00000b89	leal	0x5a827999(%ecx,%edi),%ecx
00000b90	andl	%ecx,%edx
00000b92	movl	%ecx,%edi
00000b94	roll	$0x1e,%edi
00000b97	movl	%edi,0x00000148(%esp)
00000b9e	movl	%edi,%ebx
00000ba0	movl	0x00000140(%esp),%edi
00000ba7	xorl	%edi,%ebx
00000ba9	xorl	%ebp,%eax
00000bab	addl	0x00000144(%esp),%eax
00000bb2	addl	0x28(%esp),%eax
00000bb6	roll	$0x05,%ecx
00000bb9	leal	0x5a827999(%ecx,%eax),%eax
00000bc0	andl	%eax,%ebx
00000bc2	xorl	%esi,%edx
00000bc4	addl	%ebp,%edx
00000bc6	addl	0x2c(%esp),%edx
00000bca	movl	%eax,%ecx
00000bcc	roll	$0x05,%ecx
00000bcf	leal	0x5a827999(%ecx,%edx),%ebp
00000bd6	roll	$0x1e,%eax
00000bd9	movl	%eax,%ecx
00000bdb	xorl	0x00000148(%esp),%ecx
00000be2	andl	%ebp,%ecx
00000be4	xorl	%edi,%ebx
00000be6	addl	%esi,%ebx
00000be8	addl	0x30(%esp),%ebx
00000bec	movl	%ebp,%edx
00000bee	roll	$0x05,%edx
00000bf1	leal	0x5a827999(%edx,%ebx),%esi
00000bf8	movl	%ebp,%ebx
00000bfa	roll	$0x1e,%ebx
00000bfd	movl	%ebx,0x30(%esp)
00000c01	movl	%ebx,%edx
00000c03	xorl	%eax,%edx
00000c05	andl	%esi,%edx
00000c07	movl	%esi,%ebp
00000c09	roll	$0x1e,%ebp
00000c0c	movl	%ebp,0x00000144(%esp)
00000c13	movl	%ebp,%edi
00000c15	movl	%edi,%ebp
00000c17	xorl	%ebx,%ebp
00000c19	roll	$0x05,%esi
00000c1c	xorl	0x00000148(%esp),%ecx
00000c23	addl	0x00000140(%esp),%ecx
00000c2a	addl	0x34(%esp),%ecx
00000c2e	leal	0x5a827999(%esi,%ecx),%ecx
00000c35	andl	%ecx,%ebp
00000c37	movl	%ecx,%esi
00000c39	roll	$0x1e,%esi
00000c3c	movl	%esi,0x00000140(%esp)
00000c43	movl	%esi,%ebx
00000c45	xorl	%edi,%ebx
00000c47	xorl	%eax,%edx
00000c49	addl	0x00000148(%esp),%edx
00000c50	addl	0x38(%esp),%edx
00000c54	roll	$0x05,%ecx
00000c57	leal	0x5a827999(%ecx,%edx),%edi
00000c5e	andl	%edi,%ebx
00000c60	movl	0x30(%esp),%edx
00000c64	xorl	%edx,%ebp
00000c66	addl	%eax,%ebp
00000c68	addl	0x3c(%esp),%ebp
00000c6c	movl	%edi,%eax
00000c6e	roll	$0x05,%eax
00000c71	leal	0x5a827999(%eax,%ebp),%ebp
00000c78	roll	$0x1e,%edi
00000c7b	movl	%edi,%ecx
00000c7d	xorl	%esi,%ecx
00000c7f	andl	%ebp,%ecx
00000c81	xorl	0x00000144(%esp),%ebx
00000c88	addl	%edx,%ebx
00000c8a	movl	%ebp,%eax
00000c8c	roll	$0x05,%eax
00000c8f	addl	%ebx,%eax
00000c91	movl	0x40(%esp),%edx
00000c95	leal	0x5a827999(%edx,%eax),%ebx
00000c9c	roll	$0x1e,%ebp
00000c9f	movl	%ebp,%edx
00000ca1	xorl	%edi,%edx
00000ca3	andl	%ebx,%edx
00000ca5	movl	%ebx,%eax
00000ca7	roll	$0x1e,%eax
00000caa	movl	%eax,0x00000148(%esp)
00000cb1	xorl	%ebp,%eax
00000cb3	roll	$0x05,%ebx
00000cb6	movl	0x00000140(%esp),%esi
00000cbd	xorl	%esi,%ecx
00000cbf	addl	0x00000144(%esp),%ecx
00000cc6	addl	%ebx,%ecx
00000cc8	movl	0x48(%esp),%ebx
00000ccc	leal	0x5a827999(%ebx,%ecx),%ebx
00000cd3	andl	%ebx,%eax
00000cd5	movl	%ebx,%ecx
00000cd7	roll	$0x1e,%ecx
00000cda	movl	%ecx,0x00000144(%esp)
00000ce1	xorl	0x00000148(%esp),%ecx
00000ce8	xorl	%edi,%edx
00000cea	addl	%esi,%edx
00000cec	roll	$0x05,%ebx
00000cef	addl	%edx,%ebx
00000cf1	movl	0x4c(%esp),%edx
00000cf5	leal	0x5a827999(%edx,%ebx),%edx
00000cfc	xorl	%edx,%ecx
00000cfe	xorl	%ebp,%eax
00000d00	addl	%ebp,%ecx
00000d02	addl	%edi,%eax
00000d04	movl	%edx,%esi
00000d06	roll	$0x05,%esi
00000d09	addl	%eax,%esi
00000d0b	movl	CSHA1::CSHA1()(%esp),%eax
00000d0f	leal	0x5a827999(%eax,%esi),%ebx
00000d16	movl	%ebx,%eax
00000d18	roll	$0x05,%eax
00000d1b	addl	%ecx,%eax
00000d1d	movl	0x44(%esp),%ecx
00000d21	leal	0x6ed9eba1(%ecx,%eax),%edi
00000d28	roll	$0x1e,%edx
00000d2b	movl	%edx,%esi
00000d2d	xorl	0x00000144(%esp),%esi
00000d34	xorl	%ebx,%esi
00000d36	roll	$0x1e,%ebx
00000d39	movl	%ebx,%ecx
00000d3b	xorl	%edx,%ecx
00000d3d	xorl	%edi,%ecx
00000d3f	movl	%edi,%eax
00000d41	roll	$0x1e,%eax
00000d44	movl	%eax,0x00000140(%esp)
00000d4b	xorl	%ebx,%eax
00000d4d	roll	$0x05,%edi
00000d50	addl	0x00000148(%esp),%esi
00000d57	addl	%edi,%esi
00000d59	movl	0x58(%esp),%edi
00000d5d	leal	0x6ed9eba1(%edi,%esi),%edi
00000d64	xorl	%edi,%eax
00000d66	movl	%edi,%esi
00000d68	roll	$0x1e,%esi
00000d6b	movl	%esi,%ebp
00000d6d	xorl	0x00000140(%esp),%ebp
00000d74	addl	0x00000144(%esp),%ecx
00000d7b	roll	$0x05,%edi
00000d7e	addl	%ecx,%edi
00000d80	movl	0x60(%esp),%ecx
00000d84	leal	0x6ed9eba1(%ecx,%edi),%edi
00000d8b	xorl	%edi,%ebp
00000d8d	addl	%ebx,%ebp
00000d8f	addl	%edx,%eax
00000d91	movl	%edi,%ecx
00000d93	roll	$0x05,%ecx
00000d96	addl	%eax,%ecx
00000d98	movl	0x5c(%esp),%eax
00000d9c	leal	0x6ed9eba1(%eax,%ecx),%ebx
00000da3	movl	%ebx,%eax
00000da5	roll	$0x05,%eax
00000da8	addl	%ebp,%eax
00000daa	movl	0x54(%esp),%ecx
00000dae	leal	0x6ed9eba1(%ecx,%eax),%edx
00000db5	roll	$0x1e,%edi
00000db8	movl	%edi,%ecx
00000dba	xorl	%esi,%ecx
00000dbc	xorl	%ebx,%ecx
00000dbe	roll	$0x1e,%ebx
00000dc1	movl	%ebx,%eax
00000dc3	xorl	%edi,%eax
00000dc5	xorl	%edx,%eax
00000dc7	movl	%edx,%ebp
00000dc9	roll	$0x1e,%ebp
00000dcc	movl	%ebp,0x00000148(%esp)
00000dd3	xorl	%ebx,%ebp
00000dd5	roll	$0x05,%edx
00000dd8	addl	0x00000140(%esp),%ecx
00000ddf	addl	%edx,%ecx
00000de1	movl	0x68(%esp),%edx
00000de5	leal	0x6ed9eba1(%edx,%ecx),%ecx
00000dec	xorl	%ecx,%ebp
00000dee	movl	%ecx,%edx
00000df0	roll	$0x1e,%edx
00000df3	movl	%edx,0x00000140(%esp)
00000dfa	xorl	0x00000148(%esp),%edx
00000e01	addl	%esi,%eax
00000e03	roll	$0x05,%ecx
00000e06	addl	%eax,%ecx
00000e08	movl	0x70(%esp),%eax
00000e0c	leal	0x6ed9eba1(%eax,%ecx),%esi
00000e13	xorl	%esi,%edx
00000e15	addl	%ebx,%edx
00000e17	addl	%edi,%ebp
00000e19	movl	%esi,%eax
00000e1b	roll	$0x05,%eax
00000e1e	addl	%ebp,%eax
00000e20	movl	0x6c(%esp),%ecx
00000e24	leal	0x6ed9eba1(%ecx,%eax),%eax
00000e2b	movl	%eax,%ecx
00000e2d	roll	$0x05,%ecx
00000e30	addl	%edx,%ecx
00000e32	movl	0x64(%esp),%edx
00000e36	leal	0x6ed9eba1(%edx,%ecx),%ecx
00000e3d	roll	$0x1e,%esi
00000e40	movl	%esi,%edx
00000e42	xorl	0x00000140(%esp),%edx
00000e49	xorl	%eax,%edx
00000e4b	roll	$0x1e,%eax
00000e4e	movl	%eax,%ebx
00000e50	xorl	%esi,%ebx
00000e52	xorl	%ecx,%ebx
00000e54	movl	%ecx,%edi
00000e56	roll	$0x1e,%edi
00000e59	movl	%edi,0x00000144(%esp)
00000e60	movl	%edi,%ebp
00000e62	xorl	%eax,%ebp
00000e64	roll	$0x05,%ecx
00000e67	addl	0x00000148(%esp),%edx
00000e6e	addl	%ecx,%edx
00000e70	movl	0x78(%esp),%ecx
00000e74	leal	0x6ed9eba1(%ecx,%edx),%edx
00000e7b	xorl	%edx,%ebp
00000e7d	movl	%edx,%ecx
00000e7f	roll	$0x1e,%ecx
00000e82	movl	%ecx,0x00000148(%esp)
00000e89	movl	%ecx,%edi
00000e8b	xorl	0x00000144(%esp),%edi
00000e92	addl	0x00000140(%esp),%ebx
00000e99	roll	$0x05,%edx
00000e9c	addl	%ebx,%edx
00000e9e	movl	0x00000080(%esp),%ebx
00000ea5	leal	0x6ed9eba1(%ebx,%edx),%edx
00000eac	xorl	%edx,%edi
00000eae	addl	%eax,%edi
00000eb0	addl	%esi,%ebp
00000eb2	movl	%edx,%eax
00000eb4	roll	$0x05,%eax
00000eb7	addl	%ebp,%eax
00000eb9	movl	0x7c(%esp),%esi
00000ebd	leal	0x6ed9eba1(%esi,%eax),%eax
00000ec4	movl	%eax,%esi
00000ec6	roll	$0x05,%esi
00000ec9	addl	%edi,%esi
00000ecb	movl	0x74(%esp),%edi
00000ecf	leal	0x6ed9eba1(%edi,%esi),%edi
00000ed6	roll	$0x1e,%edx
00000ed9	movl	%edx,%ebx
00000edb	xorl	%ecx,%ebx
00000edd	xorl	%eax,%ebx
00000edf	roll	$0x1e,%eax
00000ee2	movl	%eax,%esi
00000ee4	xorl	%edx,%esi
00000ee6	xorl	%edi,%esi
00000ee8	movl	%edi,%ebp
00000eea	roll	$0x1e,%ebp
00000eed	movl	%ebp,0x00000140(%esp)
00000ef4	movl	%ebp,%ecx
00000ef6	movl	%ecx,%ebp
00000ef8	xorl	%eax,%ebp
00000efa	roll	$0x05,%edi
00000efd	addl	0x00000144(%esp),%ebx
00000f04	addl	%edi,%ebx
00000f06	movl	0x00000088(%esp),%edi
00000f0d	leal	0x6ed9eba1(%edi,%ebx),%edi
00000f14	xorl	%edi,%ebp
00000f16	movl	%edi,%ebx
00000f18	roll	$0x1e,%ebx
00000f1b	movl	%ebx,0x00000144(%esp)
00000f22	xorl	%ecx,%ebx
00000f24	addl	0x00000148(%esp),%esi
00000f2b	roll	$0x05,%edi
00000f2e	addl	%esi,%edi
00000f30	movl	0x00000090(%esp),%ecx
00000f37	leal	0x6ed9eba1(%ecx,%edi),%edi
00000f3e	xorl	%edi,%ebx
00000f40	addl	%eax,%ebx
00000f42	addl	%edx,%ebp
00000f44	movl	%edi,%eax
00000f46	roll	$0x05,%eax
00000f49	addl	%ebp,%eax
00000f4b	movl	0x0000008c(%esp),%ecx
00000f52	leal	0x6ed9eba1(%ecx,%eax),%ecx
00000f59	movl	%ecx,%eax
00000f5b	roll	$0x05,%eax
00000f5e	addl	%ebx,%eax
00000f60	movl	0x00000084(%esp),%edx
00000f67	leal	0x6ed9eba1(%edx,%eax),%eax
00000f6e	roll	$0x1e,%edi
00000f71	movl	%edi,%edx
00000f73	xorl	0x00000144(%esp),%edx
00000f7a	xorl	%ecx,%edx
00000f7c	roll	$0x1e,%ecx
00000f7f	movl	%ecx,%esi
00000f81	xorl	%edi,%esi
00000f83	xorl	%eax,%esi
00000f85	movl	%eax,%ebx
00000f87	roll	$0x1e,%ebx
00000f8a	movl	%ebx,0x00000148(%esp)
00000f91	movl	%ebx,%ebp
00000f93	xorl	%ecx,%ebp
00000f95	roll	$0x05,%eax
00000f98	addl	0x00000140(%esp),%edx
00000f9f	addl	%eax,%edx
00000fa1	movl	0x0000009c(%esp),%eax
00000fa8	leal	0x6ed9eba1(%eax,%edx),%edx
00000faf	xorl	%edx,%ebp
00000fb1	addl	0x00000144(%esp),%esi
00000fb8	movl	%edx,%eax
00000fba	roll	$0x05,%eax
00000fbd	addl	%esi,%eax
00000fbf	movl	0x00000094(%esp),%esi
00000fc6	leal	0x6ed9eba1(%esi,%eax),%eax
00000fcd	roll	$0x1e,%edx
00000fd0	movl	%eax,%esi
00000fd2	andl	%edx,%esi
00000fd4	movl	%eax,%ebx
00000fd6	orl	%edx,%ebx
00000fd8	addl	%edi,%ebp
00000fda	movl	%eax,%edi
00000fdc	roll	$0x05,%edi
00000fdf	addl	%ebp,%edi
00000fe1	movl	0x00000098(%esp),%ebp
00000fe8	leal	0x6ed9eba1(%ebp,%edi),%edi
00000fef	roll	$0x1e,%eax
00000ff2	movl	%edi,%ebp
00000ff4	andl	%eax,%ebp
00000ff6	movl	%ebp,0x00000144(%esp)
00000ffd	movl	%edi,%ebp
00000fff	orl	%eax,%ebp
00001001	andl	0x00000148(%esp),%ebx
00001008	orl	%esi,%ebx
0000100a	addl	%ecx,%ebx
0000100c	movl	%edi,%ecx
0000100e	roll	$0x05,%ecx
00001011	addl	%ebx,%ecx
00001013	movl	CSHA1::Reset()(%esp),%esi
0000101a	leal	0x8f1bbcdc(%esi,%ecx),%ecx
00001021	roll	$0x1e,%edi
00001024	movl	%ecx,%esi
00001026	andl	%edi,%esi
00001028	movl	%esi,0x00000140(%esp)
0000102f	movl	%ecx,%ebx
00001031	orl	%edi,%ebx
00001033	andl	%edx,%ebp
00001035	orl	0x00000144(%esp),%ebp
0000103c	addl	0x00000148(%esp),%ebp
00001043	movl	%ecx,%esi
00001045	roll	$0x05,%esi
00001048	addl	%ebp,%esi
0000104a	movl	0x000000a4(%esp),%ebp
00001051	leal	0x8f1bbcdc(%ebp,%esi),%esi
00001058	roll	$0x1e,%ecx
0000105b	movl	%esi,%ebp
0000105d	andl	%ecx,%ebp
0000105f	movl	%ebp,0x00000148(%esp)
00001066	movl	%esi,%ebp
00001068	orl	%ecx,%ebp
0000106a	andl	%eax,%ebx
0000106c	orl	0x00000140(%esp),%ebx
00001073	addl	%edx,%ebx
00001075	movl	%esi,%edx
00001077	roll	$0x05,%edx
0000107a	addl	%ebx,%edx
0000107c	movl	0x000000a8(%esp),%ebx
00001083	leal	0x8f1bbcdc(%ebx,%edx),%edx
0000108a	roll	$0x1e,%esi
0000108d	movl	%edx,%ebx
0000108f	andl	%esi,%ebx
00001091	movl	%ebx,0x00000144(%esp)
00001098	movl	%edx,%ebx
0000109a	orl	%esi,%ebx
0000109c	andl	%edi,%ebp
0000109e	orl	0x00000148(%esp),%ebp
000010a5	addl	%eax,%ebp
000010a7	movl	%edx,%eax
000010a9	roll	$0x05,%eax
000010ac	addl	%ebp,%eax
000010ae	movl	0x000000ac(%esp),%ebp
000010b5	leal	0x8f1bbcdc(%ebp,%eax),%eax
000010bc	roll	$0x1e,%edx
000010bf	movl	%eax,%ebp
000010c1	andl	%edx,%ebp
000010c3	movl	%ebp,0x00000148(%esp)
000010ca	movl	%eax,%ebp
000010cc	orl	%edx,%ebp
000010ce	andl	%ecx,%ebx
000010d0	orl	0x00000144(%esp),%ebx
000010d7	addl	%edi,%ebx
000010d9	movl	%eax,%edi
000010db	roll	$0x05,%edi
000010de	addl	%ebx,%edi
000010e0	movl	0x000000b0(%esp),%ebx
000010e7	leal	0x8f1bbcdc(%ebx,%edi),%edi
000010ee	roll	$0x1e,%eax
000010f1	movl	%edi,%ebx
000010f3	andl	%eax,%ebx
000010f5	movl	%ebx,0x00000144(%esp)
000010fc	movl	%edi,%ebx
000010fe	orl	%eax,%ebx
00001100	andl	%esi,%ebp
00001102	orl	0x00000148(%esp),%ebp
00001109	addl	%ecx,%ebp
0000110b	movl	%edi,%ecx
0000110d	roll	$0x05,%ecx
00001110	addl	%ebp,%ecx
00001112	movl	0x000000b4(%esp),%ebp
00001119	leal	0x8f1bbcdc(%ebp,%ecx),%ecx
00001120	roll	$0x1e,%edi
00001123	movl	%ecx,%ebp
00001125	andl	%edi,%ebp
00001127	movl	%ebp,0x00000148(%esp)
0000112e	movl	%ecx,%ebp
00001130	orl	%edi,%ebp
00001132	andl	%edx,%ebx
00001134	orl	0x00000144(%esp),%ebx
0000113b	addl	%esi,%ebx
0000113d	movl	%ecx,%esi
0000113f	roll	$0x05,%esi
00001142	addl	%ebx,%esi
00001144	movl	0x000000b8(%esp),%ebx
0000114b	leal	0x8f1bbcdc(%ebx,%esi),%esi
00001152	roll	$0x1e,%ecx
00001155	movl	%esi,%ebx
00001157	andl	%ecx,%ebx
00001159	movl	%ebx,0x00000144(%esp)
00001160	movl	%esi,%ebx
00001162	orl	%ecx,%ebx
00001164	andl	%eax,%ebp
00001166	orl	0x00000148(%esp),%ebp
0000116d	addl	%edx,%ebp
0000116f	movl	%esi,%edx
00001171	roll	$0x05,%edx
00001174	addl	%ebp,%edx
00001176	movl	0x000000bc(%esp),%ebp
0000117d	leal	0x8f1bbcdc(%ebp,%edx),%edx
00001184	roll	$0x1e,%esi
00001187	movl	%edx,%ebp
00001189	andl	%esi,%ebp
0000118b	movl	%ebp,0x00000148(%esp)
00001192	movl	%edx,%ebp
00001194	orl	%esi,%ebp
00001196	andl	%edi,%ebx
00001198	orl	0x00000144(%esp),%ebx
0000119f	addl	%eax,%ebx
000011a1	movl	%edx,%eax
000011a3	roll	$0x05,%eax
000011a6	addl	%ebx,%eax
000011a8	movl	0x000000c0(%esp),%ebx
000011af	leal	0x8f1bbcdc(%ebx,%eax),%eax
000011b6	roll	$0x1e,%edx
000011b9	movl	%eax,%ebx
000011bb	andl	%edx,%ebx
000011bd	movl	%ebx,0x00000144(%esp)
000011c4	movl	%eax,%ebx
000011c6	orl	%edx,%ebx
000011c8	andl	%ecx,%ebp
000011ca	orl	0x00000148(%esp),%ebp
000011d1	addl	%edi,%ebp
000011d3	movl	%eax,%edi
000011d5	roll	$0x05,%edi
000011d8	addl	%ebp,%edi
000011da	movl	0x000000c4(%esp),%ebp
000011e1	leal	0x8f1bbcdc(%ebp,%edi),%edi
000011e8	roll	$0x1e,%eax
000011eb	movl	%edi,%ebp
000011ed	andl	%eax,%ebp
000011ef	movl	%ebp,0x00000148(%esp)
000011f6	movl	%edi,%ebp
000011f8	orl	%eax,%ebp
000011fa	andl	%esi,%ebx
000011fc	orl	0x00000144(%esp),%ebx
00001203	addl	%ecx,%ebx
00001205	movl	%edi,%ecx
00001207	roll	$0x05,%ecx
0000120a	addl	%ebx,%ecx
0000120c	movl	0x000000c8(%esp),%ebx
00001213	leal	0x8f1bbcdc(%ebx,%ecx),%ecx
0000121a	roll	$0x1e,%edi
0000121d	movl	%ecx,%ebx
0000121f	andl	%edi,%ebx
00001221	movl	%ebx,0x00000144(%esp)
00001228	movl	%ecx,%ebx
0000122a	orl	%edi,%ebx
0000122c	andl	%edx,%ebp
0000122e	orl	0x00000148(%esp),%ebp
00001235	addl	%esi,%ebp
00001237	movl	%ecx,%esi
00001239	roll	$0x05,%esi
0000123c	addl	%ebp,%esi
0000123e	movl	0x000000cc(%esp),%ebp
00001245	leal	0x8f1bbcdc(%ebp,%esi),%esi
0000124c	roll	$0x1e,%ecx
0000124f	movl	%esi,%ebp
00001251	andl	%ecx,%ebp
00001253	movl	%ebp,0x00000148(%esp)
0000125a	movl	%esi,%ebp
0000125c	orl	%ecx,%ebp
0000125e	andl	%eax,%ebx
00001260	orl	0x00000144(%esp),%ebx
00001267	addl	%edx,%ebx
00001269	movl	%esi,%edx
0000126b	roll	$0x05,%edx
0000126e	addl	%ebx,%edx
00001270	movl	0x000000d0(%esp),%ebx
00001277	leal	0x8f1bbcdc(%ebx,%edx),%edx
0000127e	roll	$0x1e,%esi
00001281	movl	%edx,%ebx
00001283	andl	%esi,%ebx
00001285	movl	%ebx,0x00000144(%esp)
0000128c	movl	%edx,%ebx
0000128e	orl	%esi,%ebx
00001290	andl	%edi,%ebp
00001292	orl	0x00000148(%esp),%ebp
00001299	addl	%eax,%ebp
0000129b	movl	%edx,%eax
0000129d	roll	$0x05,%eax
000012a0	addl	%ebp,%eax
000012a2	movl	0x000000d4(%esp),%ebp
000012a9	leal	0x8f1bbcdc(%ebp,%eax),%eax
000012b0	roll	$0x1e,%edx
000012b3	movl	%eax,%ebp
000012b5	andl	%edx,%ebp
000012b7	movl	%ebp,0x00000148(%esp)
000012be	movl	%eax,%ebp
000012c0	orl	%edx,%ebp
000012c2	andl	%ecx,%ebx
000012c4	orl	0x00000144(%esp),%ebx
000012cb	addl	%edi,%ebx
000012cd	movl	%eax,%edi
000012cf	roll	$0x05,%edi
000012d2	addl	%ebx,%edi
000012d4	movl	0x000000d8(%esp),%ebx
000012db	leal	0x8f1bbcdc(%ebx,%edi),%edi
000012e2	roll	$0x1e,%eax
000012e5	movl	%edi,%ebx
000012e7	andl	%eax,%ebx
000012e9	movl	%ebx,0x00000144(%esp)
000012f0	movl	%edi,%ebx
000012f2	orl	%eax,%ebx
000012f4	andl	%esi,%ebp
000012f6	orl	0x00000148(%esp),%ebp
000012fd	addl	%ecx,%ebp
000012ff	movl	%edi,%ecx
00001301	roll	$0x05,%ecx
00001304	addl	%ebp,%ecx
00001306	movl	0x000000dc(%esp),%ebp
0000130d	leal	0x8f1bbcdc(%ebp,%ecx),%ebp
00001314	roll	$0x1e,%edi
00001317	movl	%ebp,%ecx
00001319	andl	%edi,%ecx
0000131b	movl	%ecx,0x00000140(%esp)
00001322	movl	%ebp,%ecx
00001324	orl	%edi,%ecx
00001326	andl	%edx,%ebx
00001328	orl	0x00000144(%esp),%ebx
0000132f	addl	%esi,%ebx
00001331	movl	%ebp,%esi
00001333	roll	$0x05,%esi
00001336	addl	%ebx,%esi
00001338	movl	CSHA1::~CSHA1()(%esp),%ebx
0000133f	leal	0x8f1bbcdc(%ebx,%esi),%esi
00001346	roll	$0x1e,%ebp
00001349	movl	%ebp,0x00000148(%esp)
00001350	movl	%esi,%ebx
00001352	andl	%ebp,%ebx
00001354	movl	%ebx,0x00000144(%esp)
0000135b	movl	%esi,%ebx
0000135d	orl	%ebp,%ebx
0000135f	andl	%eax,%ecx
00001361	orl	0x00000140(%esp),%ecx
00001368	addl	%edx,%ecx
0000136a	movl	%esi,%edx
0000136c	roll	$0x05,%edx
0000136f	addl	%ecx,%edx
00001371	movl	0x000000e4(%esp),%ecx
00001378	leal	0x8f1bbcdc(%ecx,%edx),%edx
0000137f	roll	$0x1e,%esi
00001382	movl	%edx,%ebp
00001384	andl	%esi,%ebp
00001386	movl	%edx,%ecx
00001388	orl	%esi,%ecx
0000138a	andl	0x00000148(%esp),%ecx
00001391	orl	%ebp,%ecx
00001393	andl	%edi,%ebx
00001395	addl	%edi,%ecx
00001397	orl	0x00000144(%esp),%ebx
0000139e	addl	%eax,%ebx
000013a0	movl	%edx,%eax
000013a2	roll	$0x05,%eax
000013a5	addl	%ebx,%eax
000013a7	movl	0x000000ec(%esp),%edi
000013ae	leal	0x8f1bbcdc(%edi,%eax),%ebp
000013b5	movl	%ebp,%eax
000013b7	roll	$0x05,%eax
000013ba	addl	%ecx,%eax
000013bc	movl	0x000000e8(%esp),%ecx
000013c3	leal	0x8f1bbcdc(%ecx,%eax),%edi
000013ca	roll	$0x1e,%edx
000013cd	movl	%edx,0x000000ec(%esp)
000013d4	movl	%edx,%ebx
000013d6	xorl	%esi,%ebx
000013d8	xorl	%ebp,%ebx
000013da	roll	$0x1e,%ebp
000013dd	movl	%ebp,%ecx
000013df	xorl	%edx,%ecx
000013e1	xorl	%edi,%ecx
000013e3	movl	%edi,%eax
000013e5	roll	$0x1e,%eax
000013e8	movl	%eax,0x00000144(%esp)
000013ef	xorl	%ebp,%eax
000013f1	roll	$0x05,%edi
000013f4	addl	0x00000148(%esp),%ebx
000013fb	addl	%edi,%ebx
000013fd	movl	0x000000f4(%esp),%edi
00001404	leal	0xca62c1d6(%edi,%ebx),%edi
0000140b	xorl	%edi,%eax
0000140d	movl	%edi,%edx
0000140f	roll	$0x1e,%edx
00001412	movl	%edx,0x00000140(%esp)
00001419	movl	%edx,%ebx
0000141b	xorl	0x00000144(%esp),%ebx
00001422	addl	%esi,%ecx
00001424	roll	$0x05,%edi
00001427	addl	%ecx,%edi
00001429	movl	0x000000fc(%esp),%ecx
00001430	leal	0xca62c1d6(%ecx,%edi),%edi
00001437	xorl	%edi,%ebx
00001439	addl	%ebp,%ebx
0000143b	addl	0x000000ec(%esp),%eax
00001442	movl	%edi,%ecx
00001444	roll	$0x05,%ecx
00001447	addl	%eax,%ecx
00001449	movl	0x000000f8(%esp),%eax
00001450	leal	0xca62c1d6(%eax,%ecx),%ebp
00001457	movl	%ebp,%eax
00001459	roll	$0x05,%eax
0000145c	addl	%ebx,%eax
0000145e	movl	CSHA1::~CSHA1()(%esp),%ecx
00001465	leal	0xca62c1d6(%ecx,%eax),%edx
0000146c	roll	$0x1e,%edi
0000146f	movl	%edi,%esi
00001471	xorl	0x00000140(%esp),%esi
00001478	xorl	%ebp,%esi
0000147a	roll	$0x1e,%ebp
0000147d	movl	%ebp,%eax
0000147f	xorl	%edi,%eax
00001481	xorl	%edx,%eax
00001483	movl	%edx,%ecx
00001485	roll	$0x1e,%ecx
00001488	movl	%ecx,0x00000148(%esp)
0000148f	xorl	%ebp,%ecx
00001491	roll	$0x05,%edx
00001494	addl	0x00000144(%esp),%esi
0000149b	addl	%edx,%esi
0000149d	movl	0x00000104(%esp),%edx
000014a4	leal	0xca62c1d6(%edx,%esi),%esi
000014ab	xorl	%esi,%ecx
000014ad	movl	%esi,%edx
000014af	roll	$0x1e,%edx
000014b2	movl	%edx,0x00000144(%esp)
000014b9	xorl	0x00000148(%esp),%edx
000014c0	addl	0x00000140(%esp),%eax
000014c7	roll	$0x05,%esi
000014ca	addl	%eax,%esi
000014cc	movl	0x0000010c(%esp),%eax
000014d3	leal	0xca62c1d6(%eax,%esi),%esi
000014da	xorl	%esi,%edx
000014dc	addl	%ebp,%edx
000014de	addl	%edi,%ecx
000014e0	movl	%esi,%eax
000014e2	roll	$0x05,%eax
000014e5	addl	%ecx,%eax
000014e7	movl	0x00000108(%esp),%ecx
000014ee	leal	0xca62c1d6(%ecx,%eax),%ebx
000014f5	movl	%ebx,%eax
000014f7	roll	$0x05,%eax
000014fa	addl	%edx,%eax
000014fc	movl	CSHA1::~CSHA1()(%esp),%ecx
00001503	leal	0xca62c1d6(%ecx,%eax),%eax
0000150a	roll	$0x1e,%esi
0000150d	movl	%esi,%edx
0000150f	xorl	0x00000144(%esp),%edx
00001516	xorl	%ebx,%edx
00001518	roll	$0x1e,%ebx
0000151b	movl	%ebx,%ecx
0000151d	xorl	%esi,%ecx
0000151f	xorl	%eax,%ecx
00001521	movl	%eax,%edi
00001523	roll	$0x1e,%edi
00001526	movl	%edi,0x00000140(%esp)
0000152d	movl	%edi,%ebp
0000152f	xorl	%ebx,%ebp
00001531	roll	$0x05,%eax
00001534	addl	0x00000148(%esp),%edx
0000153b	addl	%eax,%edx
0000153d	movl	0x00000114(%esp),%eax
00001544	leal	0xca62c1d6(%eax,%edx),%edx
0000154b	xorl	%edx,%ebp
0000154d	movl	%edx,%eax
0000154f	roll	$0x1e,%eax
00001552	movl	%eax,0x00000114(%esp)
00001559	movl	%eax,%edi
0000155b	xorl	0x00000140(%esp),%edi
00001562	addl	0x00000144(%esp),%ecx
00001569	roll	$0x05,%edx
0000156c	addl	%ecx,%edx
0000156e	movl	0x0000011c(%esp),%ecx
00001575	leal	0xca62c1d6(%ecx,%edx),%edx
0000157c	xorl	%edx,%edi
0000157e	addl	%ebx,%edi
00001580	addl	%esi,%ebp
00001582	movl	%edx,%ecx
00001584	roll	$0x05,%ecx
00001587	addl	%ebp,%ecx
00001589	movl	0x00000118(%esp),%esi
00001590	leal	0xca62c1d6(%esi,%ecx),%ecx
00001597	movl	%ecx,%esi
00001599	roll	$0x05,%esi
0000159c	addl	%edi,%esi
0000159e	movl	CSHA1::Transform(unsigned long*, unsigned char*)(%esp),%edi
000015a5	leal	0xca62c1d6(%edi,%esi),%esi
000015ac	roll	$0x1e,%edx
000015af	movl	%edx,%edi
000015b1	xorl	%eax,%edi
000015b3	xorl	%ecx,%edi
000015b5	roll	$0x1e,%ecx
000015b8	movl	%ecx,%ebx
000015ba	xorl	%edx,%ebx
000015bc	xorl	%esi,%ebx
000015be	movl	%esi,%ebp
000015c0	roll	$0x1e,%ebp
000015c3	movl	%ebp,0x00000148(%esp)
000015ca	xorl	%ecx,%ebp
000015cc	roll	$0x05,%esi
000015cf	addl	0x00000140(%esp),%edi
000015d6	addl	%esi,%edi
000015d8	movl	0x00000124(%esp),%esi
000015df	leal	0xca62c1d6(%esi,%edi),%edi
000015e6	xorl	%edi,%ebp
000015e8	movl	%edi,%eax
000015ea	roll	$0x1e,%eax
000015ed	movl	%eax,0x00000144(%esp)
000015f4	movl	%eax,%esi
000015f6	xorl	0x00000148(%esp),%esi
000015fd	addl	0x00000114(%esp),%ebx
00001604	roll	$0x05,%edi
00001607	addl	%ebx,%edi
00001609	movl	0x0000012c(%esp),%eax
00001610	leal	0xca62c1d6(%eax,%edi),%eax
00001617	xorl	%eax,%esi
00001619	addl	%ecx,%esi
0000161b	addl	%edx,%ebp
0000161d	movl	%eax,%ecx
0000161f	roll	$0x05,%ecx
00001622	addl	%ebp,%ecx
00001624	movl	0x00000128(%esp),%edx
0000162b	leal	0xca62c1d6(%edx,%ecx),%edi
00001632	movl	%edi,%ecx
00001634	roll	$0x05,%ecx
00001637	addl	%esi,%ecx
00001639	movl	0x00000120(%esp),%edx
00001640	leal	0xca62c1d6(%edx,%ecx),%ecx
00001647	roll	$0x1e,%eax
0000164a	movl	%eax,%esi
0000164c	xorl	0x00000144(%esp),%esi
00001653	xorl	%edi,%esi
00001655	roll	$0x1e,%edi
00001658	movl	%edi,%ebp
0000165a	xorl	%eax,%ebp
0000165c	xorl	%ecx,%ebp
0000165e	movl	%ecx,%edx
00001660	roll	$0x1e,%edx
00001663	movl	%edx,0x00000140(%esp)
0000166a	movl	%edx,%ebx
0000166c	xorl	%edi,%ebx
0000166e	roll	$0x05,%ecx
00001671	addl	0x00000148(%esp),%esi
00001678	addl	%ecx,%esi
0000167a	movl	0x00000134(%esp),%ecx
00001681	leal	0xca62c1d6(%ecx,%esi),%esi
00001688	xorl	%esi,%ebx
0000168a	movl	%esi,%edx
0000168c	roll	$0x1e,%edx
0000168f	movl	%edx,%ecx
00001691	xorl	0x00000140(%esp),%ecx
00001698	addl	0x00000144(%esp),%ebp
0000169f	roll	$0x05,%esi
000016a2	addl	%ebp,%esi
000016a4	movl	0x00000138(%esp),%ebp
000016ab	leal	0xca62c1d6(%ebp,%esi),%ebp
000016b2	xorl	%ebp,%ecx
000016b4	addl	%edi,%ecx
000016b6	movl	0x00000164(%esp),%edi
000016bd	addl	(%edi),%ecx
000016bf	addl	%eax,%ebx
000016c1	movl	%ebp,%eax
000016c3	roll	$0x05,%eax
000016c6	addl	%ebx,%eax
000016c8	movl	0x0000013c(%esp),%esi
000016cf	leal	0xca62c1d6(%esi,%eax),%eax
000016d6	movl	%eax,%esi
000016d8	roll	$0x05,%esi
000016db	addl	%ecx,%esi
000016dd	movl	0x00000130(%esp),%ecx
000016e4	leal	0xca62c1d6(%ecx,%esi),%ecx
000016eb	movl	%edi,%esi
000016ed	movl	%ecx,(%esi)
000016ef	addl	%eax,0x04(%esi)
000016f2	roll	$0x1e,%ebp
000016f5	addl	%ebp,0x08(%esi)
000016f8	addl	%edx,0x0c(%esi)
000016fb	movl	0x00000140(%esp),%eax
00001702	addl	%eax,0x10(%esi)
00001705	addl	$0x0000014c,%esp
0000170b	popl	%esi
0000170c	popl	%edi
0000170d	popl	%ebx
0000170e	popl	%ebp
0000170f	ret
CSHA1::Update(unsigned char*, unsigned int):
00001710	pushl	%ebp
00001711	movl	%esp,%ebp
00001713	pushl	%ebx
00001714	pushl	%edi
00001715	pushl	%esi
00001716	subl	$0x1c,%esp
00001719	movl	0x08(%ebp),%ebx
0000171c	movl	0x18(%ebx),%edi
0000171f	movl	0x10(%ebp),%edx
00001722	leal	CSHA1::CSHA1()(,%edx,8),%eax
00001729	addl	%edi,%eax
0000172b	movl	%eax,0x18(%ebx)
0000172e	movl	0x1c(%ebx),%eax
00001731	jae	0x00001737
00001733	incl	%eax
00001734	movl	%eax,0x1c(%ebx)
00001737	shrl	$0x03,%edi
0000173a	andl	$0x3f,%edi
0000173d	leal	(%edi,%edx),%ecx
00001740	shrl	$0x1d,%edx
00001743	addl	%eax,%edx
00001745	movl	%edx,0x1c(%ebx)
00001748	xorl	%esi,%esi
0000174a	cmpl	$0x40,%ecx
0000174d	jae	0x00001757
0000174f	movl	0x10(%ebp),%ebx
00001752	jmp	0x000017d6
00001757	movl	$0x00000040,%esi
0000175c	subl	%edi,%esi
0000175e	movl	%esi,0x08(%esp)
00001762	movl	0x0c(%ebp),%eax
00001765	movl	%eax,0x04(%esp)
00001769	leal	0x20(%ebx,%edi),%eax
0000176d	movl	%eax,(%esp)
00001770	calll	_memcpy
00001775	movl	%ebx,(%esp)
00001778	leal	0x20(%ebx),%eax
0000177b	movl	%eax,0x08(%esp)
0000177f	leal	0x04(%ebx),%ebx
00001782	movl	%ebx,0x04(%esp)
00001786	movl	$0x0000007f,%eax
0000178b	subl	%edi,%eax
0000178d	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001790	calll	CSHA1::Transform(unsigned long*, unsigned char*)
00001795	xorl	%edi,%edi
00001797	movl	0x10(%ebp),%eax
0000179a	cmpl	%eax,CSHA1::~CSHA1()(%ebp)
0000179d	jb	0x000017a3
0000179f	movl	%eax,%ebx
000017a1	jmp	0x000017d6
000017a3	movl	%ebx,CSHA1::~CSHA1()(%ebp)
000017a6	movl	%eax,%ebx
000017a8	xorl	%edi,%edi
000017aa	nopw	CSHA1::CSHA1()(%eax,%eax)
000017b0	movl	0x0c(%ebp),%eax
000017b3	leal	(%eax,%esi),%eax
000017b6	movl	%eax,0x08(%esp)
000017ba	movl	CSHA1::~CSHA1()(%ebp),%eax
000017bd	movl	%eax,0x04(%esp)
000017c1	movl	0x08(%ebp),%eax
000017c4	movl	%eax,(%esp)
000017c7	calll	CSHA1::Transform(unsigned long*, unsigned char*)
000017cc	leal	0x7f(%esi),%eax
000017cf	leal	0x40(%esi),%esi
000017d2	cmpl	%ebx,%eax
000017d4	jb	0x000017b0
000017d6	subl	%esi,%ebx
000017d8	movl	%ebx,0x08(%esp)
000017dc	movl	0x0c(%ebp),%eax
000017df	addl	%esi,%eax
000017e1	movl	%eax,0x04(%esp)
000017e5	movl	0x08(%ebp),%eax
000017e8	leal	0x20(%eax,%edi),%eax
000017ec	movl	%eax,(%esp)
000017ef	calll	_memcpy
000017f4	addl	$0x1c,%esp
000017f7	popl	%esi
000017f8	popl	%edi
000017f9	popl	%ebx
000017fa	popl	%ebp
000017fb	ret
000017fc	nopl	CSHA1::CSHA1()(%eax)
CSHA1::HashFile(char*):
00001800	pushl	%ebp
00001801	movl	%esp,%ebp
00001803	pushl	%ebx
00001804	pushl	%edi
00001805	pushl	%esi
00001806	subl	$0x00001f6c,%esp
0000180c	calll	0x00001811
00001811	popl	%ecx
00001812	movl	0x439f-0x1811(%ecx),%eax
00001818	movl	%eax,0xffffe0a8(%ebp)
0000181e	movl	(%eax),%eax
00001820	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001823	xorb	%al,%al
00001825	movl	0x0c(%ebp),%edx
00001828	testl	%edx,%edx
0000182a	je	0x00001953
00001830	leal	0x3e20-0x1811(%ecx),%eax
00001836	movl	%eax,0x04(%esp)
0000183a	movl	%edx,(%esp)
0000183d	calll	_fopen
00001842	movl	%eax,%esi
00001844	xorb	%al,%al
00001846	testl	%esi,%esi
00001848	je	0x00001953
0000184e	movl	%esi,(%esp)
00001851	movl	$0x00000002,0x08(%esp)
00001859	movl	CSHA1::CSHA1(),0x04(%esp)
00001861	calll	_fseek
00001866	movl	%esi,(%esp)
00001869	calll	_ftell
0000186e	movl	%eax,%edi
00001870	movl	%edi,0xffffe0a4(%ebp)
00001876	movl	%esi,(%esp)
00001879	movl	CSHA1::CSHA1(),0x08(%esp)
00001881	movl	CSHA1::CSHA1(),0x04(%esp)
00001889	movl	$0x10624dd3,%ecx
0000188e	movl	%edi,%eax
00001890	mull	%ecx
00001892	shrl	$0x09,%edx
00001895	movl	%edx,0xffffe0ac(%ebp)
0000189b	calll	_fseek
000018a0	cmpl	$0x00001f40,%edi
000018a6	movl	%esi,%ecx
000018a8	jb	0x00001900
000018aa	xorl	%edi,%edi
000018ac	leal	0xffffe0b0(%ebp),%ebx
000018b2	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
000018c0	movl	%ecx,0x0c(%esp)
000018c4	movl	%ebx,(%esp)
000018c7	movl	$0x00001f40,0x08(%esp)
000018cf	movl	$0x00000001,0x04(%esp)
000018d7	movl	%ecx,%esi
000018d9	calll	_fread
000018de	movl	%ebx,0x04(%esp)
000018e2	movl	0x08(%ebp),%eax
000018e5	movl	%eax,(%esp)
000018e8	movl	$0x00001f40,0x08(%esp)
000018f0	calll	CSHA1::Update(unsigned char*, unsigned int)
000018f5	movl	%esi,%ecx
000018f7	incl	%edi
000018f8	cmpl	0xffffe0ac(%ebp),%edi
000018fe	jb	0x000018c0
00001900	imull	$0x00001f40,0xffffe0ac(%ebp),%eax
0000190a	movl	0xffffe0a4(%ebp),%ebx
00001910	subl	%eax,%ebx
00001912	testl	%ebx,%ebx
00001914	movl	%ecx,%edi
00001916	je	0x00001949
00001918	movl	%edi,0x0c(%esp)
0000191c	movl	%ebx,0x08(%esp)
00001920	leal	0xffffe0b0(%ebp),%esi
00001926	movl	%esi,(%esp)
00001929	movl	$0x00000001,0x04(%esp)
00001931	calll	_fread
00001936	movl	%ebx,0x08(%esp)
0000193a	movl	%esi,0x04(%esp)
0000193e	movl	0x08(%ebp),%eax
00001941	movl	%eax,(%esp)
00001944	calll	CSHA1::Update(unsigned char*, unsigned int)
00001949	movl	%edi,(%esp)
0000194c	calll	_fclose
00001951	movb	$0x01,%al
00001953	movl	0xffffe0a8(%ebp),%ecx
00001959	movl	(%ecx),%ecx
0000195b	cmpl	CSHA1::~CSHA1()(%ebp),%ecx
0000195e	jne	0x0000196e
00001960	movzbl	%al,%eax
00001963	addl	$0x00001f6c,%esp
00001969	popl	%esi
0000196a	popl	%edi
0000196b	popl	%ebx
0000196c	popl	%ebp
0000196d	ret
0000196e	calll	___stack_chk_fail
00001973	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::Final():
00001980	pushl	%ebp
00001981	movl	%esp,%ebp
00001983	pushl	%ebx
00001984	pushl	%edi
00001985	pushl	%esi
00001986	subl	$0x1c,%esp
00001989	calll	0x0000198e
0000198e	popl	%edi
0000198f	movl	CSHA1::CSHA1(),0xec(%ebp)
00001996	movl	CSHA1::CSHA1(),0xe8(%ebp)
0000199d	movl	0x08(%ebp),%esi
000019a0	movl	0x1c(%esi),%eax
000019a3	movl	%eax,%ecx
000019a5	shrl	$0x18,%ecx
000019a8	movb	%cl,0xe8(%ebp)
000019ab	movl	%eax,%ecx
000019ad	shrl	$0x10,%ecx
000019b0	movb	%cl,0xe9(%ebp)
000019b3	movb	%ah,0xea(%ebp)
000019b6	movb	%al,0xeb(%ebp)
000019b9	movl	0x18(%esi),%eax
000019bc	movl	%eax,%ecx
000019be	shrl	$0x18,%ecx
000019c1	movb	%cl,0xec(%ebp)
000019c4	movl	%eax,%ecx
000019c6	shrl	$0x10,%ecx
000019c9	movb	%cl,0xed(%ebp)
000019cc	movb	%ah,0xee(%ebp)
000019cf	movb	%al,0xef(%ebp)
000019d2	leal	0x3e23-0x198e(%edi),%eax
000019d8	movl	%eax,0x04(%esp)
000019dc	movl	%esi,(%esp)
000019df	movl	$0x00000001,0x08(%esp)
000019e7	calll	CSHA1::Update(unsigned char*, unsigned int)
000019ec	movl	$0x000001f8,%ebx
000019f1	movl	0x18(%esi),%eax
000019f4	andl	%ebx,%eax
000019f6	cmpl	$0x000001c0,%eax
000019fb	je	0x00001a30
000019fd	leal	0x3e53-0x198e(%edi),%edi
00001a03	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
00001a10	movl	%edi,0x04(%esp)
00001a14	movl	%esi,(%esp)
00001a17	movl	$0x00000001,0x08(%esp)
00001a1f	calll	CSHA1::Update(unsigned char*, unsigned int)
00001a24	movl	0x18(%esi),%eax
00001a27	andl	%ebx,%eax
00001a29	cmpl	$0x000001c0,%eax
00001a2e	jne	0x00001a10
00001a30	leal	0xe8(%ebp),%eax
00001a33	movl	%eax,0x04(%esp)
00001a37	movl	%esi,(%esp)
00001a3a	movl	$0x00000008,0x08(%esp)
00001a42	calll	CSHA1::Update(unsigned char*, unsigned int)
00001a47	xorl	%eax,%eax
00001a49	nopl	CSHA1::CSHA1()(%eax)
00001a50	movl	%eax,%ecx
00001a52	andl	$0xfc,%ecx
00001a55	movl	0x04(%esi,%ecx),%edx
00001a59	leal	CSHA1::CSHA1()(,%eax,8),%ecx
00001a60	andl	$0x18,%ecx
00001a63	xorl	$0x18,%ecx
00001a66	shrl	%cl,%edx
00001a68	movb	%dl,0x60(%esi,%eax)
00001a6c	incl	%eax
00001a6d	cmpl	$0x14,%eax
00001a70	jne	0x00001a50
00001a72	movl	CSHA1::CSHA1(),0x08(%esi)
00001a79	movl	CSHA1::CSHA1(),0x04(%esi)
00001a80	movl	CSHA1::CSHA1(),0x10(%esi)
00001a87	movl	CSHA1::CSHA1(),0x0c(%esi)
00001a8e	movl	CSHA1::CSHA1(),0x18(%esi)
00001a95	movl	CSHA1::CSHA1(),0x14(%esi)
00001a9c	movl	CSHA1::CSHA1(),0x20(%esi)
00001aa3	movl	CSHA1::CSHA1(),0x1c(%esi)
00001aaa	movl	CSHA1::CSHA1(),0x28(%esi)
00001ab1	movl	CSHA1::CSHA1(),0x24(%esi)
00001ab8	movl	CSHA1::CSHA1(),0x30(%esi)
00001abf	movl	CSHA1::CSHA1(),0x2c(%esi)
00001ac6	movl	CSHA1::CSHA1(),0x38(%esi)
00001acd	movl	CSHA1::CSHA1(),0x34(%esi)
00001ad4	movl	CSHA1::CSHA1(),0x40(%esi)
00001adb	movl	CSHA1::CSHA1(),0x3c(%esi)
00001ae2	movl	CSHA1::CSHA1(),0x48(%esi)
00001ae9	movl	CSHA1::CSHA1(),0x44(%esi)
00001af0	movl	CSHA1::CSHA1(),CSHA1::CSHA1()(%esi)
00001af7	movl	CSHA1::CSHA1(),0x4c(%esi)
00001afe	movl	CSHA1::CSHA1(),0x58(%esi)
00001b05	movl	CSHA1::CSHA1(),0x54(%esi)
00001b0c	movl	CSHA1::CSHA1(),0x5c(%esi)
00001b13	movl	%esi,(%esp)
00001b16	leal	0x20(%esi),%eax
00001b19	movl	%eax,0x08(%esp)
00001b1d	addl	$0x04,%esi
00001b20	movl	%esi,0x04(%esp)
00001b24	calll	CSHA1::Transform(unsigned long*, unsigned char*)
00001b29	addl	$0x1c,%esp
00001b2c	popl	%esi
00001b2d	popl	%edi
00001b2e	popl	%ebx
00001b2f	popl	%ebp
00001b30	ret
00001b31	nopl	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::ReportHash(char*, unsigned char):
00001b40	pushl	%ebp
00001b41	movl	%esp,%ebp
00001b43	pushl	%ebx
00001b44	pushl	%edi
00001b45	pushl	%esi
00001b46	subl	$0x2c,%esp
00001b49	calll	0x00001b4e
00001b4e	popl	%edx
00001b4f	movl	0x439f-0x1b4e(%edx),%eax
00001b55	movl	%eax,0xdc(%ebp)
00001b58	movl	(%eax),%eax
00001b5a	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001b5d	movl	0x0c(%ebp),%esi
00001b60	testl	%esi,%esi
00001b62	je	0x00001c8f
00001b68	movb	0x10(%ebp),%al
00001b6b	movl	0x08(%ebp),%ecx
00001b6e	cmpb	$0x01,%al
00001b70	je	0x00001bf2
00001b76	testb	%al,%al
00001b78	movl	%esi,%edi
00001b7a	jne	0x00001c5f
00001b80	movzbl	0x60(%ecx),%eax
00001b84	movl	%eax,0x08(%esp)
00001b88	leal	0x3e25-0x1b4e(%edx),%eax
00001b8e	movl	%eax,0x04(%esp)
00001b92	leal	0xe4(%ebp),%esi
00001b95	movl	%esi,(%esp)
00001b98	movl	%edx,CSHA1::~CSHA1()(%ebp)
00001b9b	calll	_sprintf
00001ba0	movl	%esi,0x04(%esp)
00001ba4	movl	%edi,(%esp)
00001ba7	calll	_strcat
00001bac	xorl	%ebx,%ebx
00001bae	movl	CSHA1::~CSHA1()(%ebp),%eax
00001bb1	leal	0x3e2a-0x1b4e(%eax),%eax
00001bb7	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001bba	nopw	CSHA1::CSHA1()(%eax,%eax)
00001bc0	movl	0x08(%ebp),%eax
00001bc3	movzbl	0x61(%eax,%ebx),%eax
00001bc8	movl	%eax,0x08(%esp)
00001bcc	movl	CSHA1::~CSHA1()(%ebp),%eax
00001bcf	movl	%eax,0x04(%esp)
00001bd3	movl	%esi,(%esp)
00001bd6	calll	_sprintf
00001bdb	movl	%esi,0x04(%esp)
00001bdf	movl	%edi,(%esp)
00001be2	calll	_strcat
00001be7	incl	%ebx
00001be8	cmpb	$0x13,%bl
00001beb	jne	0x00001bc0
00001bed	jmp	0x00001c8f
00001bf2	movzbl	0x60(%ecx),%eax
00001bf6	movl	%eax,0x08(%esp)
00001bfa	leal	0x3e30-0x1b4e(%edx),%eax
00001c00	movl	%eax,0x04(%esp)
00001c04	leal	0xe4(%ebp),%edi
00001c07	movl	%edi,(%esp)
00001c0a	movl	%edx,CSHA1::~CSHA1()(%ebp)
00001c0d	calll	_sprintf
00001c12	movl	%edi,0x04(%esp)
00001c16	movl	%esi,(%esp)
00001c19	calll	_strcat
00001c1e	xorl	%ebx,%ebx
00001c20	movl	CSHA1::~CSHA1()(%ebp),%eax
00001c23	leal	0x3e33-0x1b4e(%eax),%eax
00001c29	movl	%eax,CSHA1::~CSHA1()(%ebp)
00001c2c	nopl	CSHA1::CSHA1()(%eax)
00001c30	movl	0x08(%ebp),%eax
00001c33	movzbl	0x61(%eax,%ebx),%eax
00001c38	movl	%eax,0x08(%esp)
00001c3c	movl	CSHA1::~CSHA1()(%ebp),%eax
00001c3f	movl	%eax,0x04(%esp)
00001c43	movl	%edi,(%esp)
00001c46	calll	_sprintf
00001c4b	movl	%edi,0x04(%esp)
00001c4f	movl	%esi,(%esp)
00001c52	calll	_strcat
00001c57	incl	%ebx
00001c58	cmpb	$0x13,%bl
00001c5b	jne	0x00001c30
00001c5d	jmp	0x00001c8f
00001c5f	movl	$0x00216570,0x18(%edi)
00001c66	movl	$0x79742074,0x14(%edi)
00001c6d	movl	$0x726f7065,0x10(%edi)
00001c74	movl	$0x72206e77,0x0c(%edi)
00001c7b	movl	$0x6f6e6b6e,0x08(%edi)
00001c82	movl	$0x55203a72,0x04(%edi)
00001c89	movl	$0x6f727245,(%edi)
00001c8f	movl	0xdc(%ebp),%eax
00001c92	movl	(%eax),%eax
00001c94	cmpl	CSHA1::~CSHA1()(%ebp),%eax
00001c97	jne	0x00001ca1
00001c99	addl	$0x2c,%esp
00001c9c	popl	%esi
00001c9d	popl	%edi
00001c9e	popl	%ebx
00001c9f	popl	%ebp
00001ca0	ret
00001ca1	calll	___stack_chk_fail
00001ca6	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
CSHA1::GetHash(unsigned char*):
00001cb0	movl	0x04(%esp),%ecx
00001cb4	movl	0x70(%ecx),%edx
00001cb7	movl	0x08(%esp),%eax
00001cbb	movl	%edx,0x10(%eax)
00001cbe	movsd	0x60(%ecx),%xmm0
00001cc3	movsd	0x68(%ecx),%xmm1
00001cc8	movsd	%xmm1,0x08(%eax)
00001ccd	movsd	%xmm0,(%eax)
00001cd1	ret
00001cd2	nopw	%cs:CSHA1::CSHA1()(%eax,%eax)
HashLessFunc(unsigned char const (&) [20], unsigned char const (&) [20]):
00001ce0	pushl	%ebp
00001ce1	movl	%esp,%ebp
00001ce3	subl	$0x18,%esp
00001ce6	movl	0x0c(%ebp),%eax
00001ce9	movl	%eax,0x04(%esp)
00001ced	movl	0x08(%ebp),%eax
00001cf0	movl	%eax,(%esp)
00001cf3	movl	$0x00000014,0x08(%esp)
00001cfb	calll	_memcmp
00001d00	shrl	$0x1f,%eax
00001d03	addl	$0x18,%esp
00001d06	popl	%ebp
00001d07	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(commandbuffer.o):
(__TEXT,__text) section
CCommandBuffer::CCommandBuffer():
00000000	jmp	CCommandBuffer::CCommandBuffer()
00000005	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::CCommandBuffer():
00000010	pushl	%ebp
00000011	movl	%esp,%ebp
00000013	pushl	%ebx
00000014	pushl	%edi
00000015	pushl	%esi
00000016	subl	$0x0c,%esp
00000019	calll	0x0000001e
0000001e	popl	%eax
0000001f	movl	%eax,0xf0(%ebp)
00000022	movl	0x08(%ebp),%edi
00000025	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%edi)
0000002f	movl	$0x00000020,0x00002010(%edi)
00000039	movl	$0x00000020,0x0000200c(%edi)
00000043	movl	$0x00000288,(%esp)
0000004a	leal	0x00002008(%edi),%ebx
00000050	calll	_malloc
00000055	movl	%eax,%esi
00000057	testl	%esi,%esi
00000059	je	0x0000006c
0000005b	movl	CCommandBuffer::CCommandBuffer(),(%esi)
00000061	movl	$0x00000020,0x04(%esi)
00000068	movl	%esi,(%ebx)
0000006a	jmp	0x000000aa
0000006c	movl	0xf0(%ebp),%eax
0000006f	leal	0xe0d4-0x1e(%eax),%eax
00000075	movl	%eax,(%esp)
00000078	calll	_Error
0000007d	movl	(%ebx),%eax
0000007f	movl	CCommandBuffer::CCommandBuffer(),(%esi)
00000085	movl	$0x00000020,0x04(%esi)
0000008c	testl	%eax,%eax
0000008e	jne	0x000000a0
00000090	movl	%esi,(%ebx)
00000092	jmp	0x000000aa
00000094	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
000000a0	movl	%eax,%ecx
000000a2	movl	(%ecx),%eax
000000a4	testl	%eax,%eax
000000a6	jne	0x000000a0
000000a8	movl	%esi,(%ecx)
000000aa	movl	CCommandBuffer::CCommandBuffer(),0x00002018(%edi)
000000b4	movl	CCommandBuffer::CCommandBuffer(),0x00002014(%edi)
000000be	movl	CCommandBuffer::CCommandBuffer(),0x00002020(%edi)
000000c8	movl	CCommandBuffer::CCommandBuffer(),0x0000201c(%edi)
000000d2	movl	CCommandBuffer::CCommandBuffer(),0x00002030(%edi)
000000dc	movl	CCommandBuffer::CCommandBuffer(),0x0000202c(%edi)
000000e6	movl	CCommandBuffer::CCommandBuffer(),0x00002028(%edi)
000000f0	movl	CCommandBuffer::CCommandBuffer(),0x00002024(%edi)
000000fa	leal	0x0000204c(%edi),%eax
00000100	movl	%eax,(%esp)
00000103	calll	CCommand::CCommand()
00000108	movl	CCommandBuffer::CCommandBuffer(),0x00002040(%edi)
00000112	movl	$0x00000001,0x0000203c(%edi)
0000011c	movl	CCommandBuffer::CCommandBuffer(),0x00002034(%edi)
00000126	movl	$0xffffffff,0x00002038(%edi)
00000130	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
0000013a	movb	CCommandBuffer::CCommandBuffer(),0x00002048(%edi)
00000141	movl	$0x00002000,0x00002044(%edi)
0000014b	addl	$0x0c,%esp
0000014e	popl	%esi
0000014f	popl	%edi
00000150	popl	%ebx
00000151	popl	%ebp
00000152	ret
00000153	movl	%eax,%esi
00000155	movl	%ebx,(%esp)
00000158	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
0000015d	movl	(%ebx),%eax
0000015f	testl	%eax,%eax
00000161	je	0x00000194
00000163	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000170	movl	(%eax),%ebx
00000172	movl	%eax,(%esp)
00000175	calll	_free
0000017a	testl	%ebx,%ebx
0000017c	movl	%ebx,%eax
0000017e	jne	0x00000170
00000180	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%edi)
0000018a	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%edi)
00000194	movl	%esi,(%esp)
00000197	calll	__Unwind_Resume
0000019c	nopl	CCommandBuffer::CCommandBuffer()(%eax)
CCommandBuffer::~CCommandBuffer():
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	pushl	%edi
000001a4	pushl	%esi
000001a5	subl	CCommandBuffer::CCommandBuffer(),%esp
000001a8	movl	0x08(%ebp),%esi
000001ab	leal	0x00002008(%esi),%eax
000001b1	movl	%eax,(%esp)
000001b4	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
000001b9	movl	0x00002008(%esi),%eax
000001bf	testl	%eax,%eax
000001c1	je	0x000001f4
000001c3	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
000001d0	movl	(%eax),%edi
000001d2	movl	%eax,(%esp)
000001d5	calll	_free
000001da	testl	%edi,%edi
000001dc	movl	%edi,%eax
000001de	jne	0x000001d0
000001e0	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%esi)
000001ea	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%esi)
000001f4	addl	CCommandBuffer::CCommandBuffer(),%esp
000001f7	popl	%esi
000001f8	popl	%edi
000001f9	popl	%ebp
000001fa	ret
000001fb	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::~CCommandBuffer():
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	pushl	%edi
00000204	pushl	%esi
00000205	subl	CCommandBuffer::CCommandBuffer(),%esp
00000208	movl	0x08(%ebp),%esi
0000020b	leal	0x00002008(%esi),%eax
00000211	movl	%eax,(%esp)
00000214	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::RemoveAll()
00000219	movl	0x00002008(%esi),%eax
0000021f	testl	%eax,%eax
00000221	je	0x00000254
00000223	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000230	movl	(%eax),%edi
00000232	movl	%eax,(%esp)
00000235	calll	_free
0000023a	testl	%edi,%edi
0000023c	movl	%edi,%eax
0000023e	jne	0x00000230
00000240	movl	CCommandBuffer::CCommandBuffer(),0x00002008(%esi)
0000024a	movl	CCommandBuffer::CCommandBuffer(),0x0000200c(%esi)
00000254	addl	CCommandBuffer::CCommandBuffer(),%esp
00000257	popl	%esi
00000258	popl	%edi
00000259	popl	%ebp
0000025a	ret
0000025b	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::SetWaitDelayTime(int):
00000260	movl	0x08(%esp),%eax
00000264	movl	0x04(%esp),%ecx
00000268	movl	%eax,0x0000203c(%ecx)
0000026e	ret
0000026f	nop
CCommandBuffer::LimitArgumentBufferSize(int):
00000270	movl	$0x00002000,%ecx
00000275	movl	0x08(%esp),%eax
00000279	cmpl	$0x00002000,%eax
0000027e	cmovgl	%ecx,%eax
00000281	testl	%eax,%eax
00000283	cmovel	%ecx,%eax
00000286	movl	0x04(%esp),%ecx
0000028a	movl	%eax,0x00002044(%ecx)
00000290	ret
00000291	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::ParseArgV0(CUtlBuffer&, char*, int, char const**):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	pushl	%ebx
000002a4	pushl	%edi
000002a5	pushl	%esi
000002a6	subl	$0x1c,%esp
000002a9	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
000002ac	movb	CCommandBuffer::CCommandBuffer(),(%esi)
000002af	movl	0x18(%ebp),%eax
000002b2	movl	CCommandBuffer::CCommandBuffer(),(%eax)
000002b8	xorb	%cl,%cl
000002ba	movl	0x0c(%ebp),%edi
000002bd	cmpb	CCommandBuffer::CCommandBuffer(),0x14(%edi)
000002c1	jne	0x0000030d
000002c3	movl	0x14(%ebp),%ebx
000002c6	calll	CCommand::DefaultBreakSet()
000002cb	movl	%ebx,0x0c(%esp)
000002cf	movl	%esi,0x08(%esp)
000002d3	movl	%eax,0x04(%esp)
000002d7	movl	%edi,(%esp)
000002da	movl	$0x00000001,CCommandBuffer::CCommandBuffer()(%esp)
000002e2	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
000002e7	xorb	%cl,%cl
000002e9	testl	%eax,%eax
000002eb	jle	0x0000030d
000002ed	cmpl	%ebx,%eax
000002ef	je	0x0000030d
000002f1	movl	0x0c(%edi),%eax
000002f4	movl	0x1c(%edi),%edx
000002f7	subl	%eax,%edx
000002f9	xorl	%ecx,%ecx
000002fb	testl	%edx,%edx
000002fd	jle	0x00000306
000002ff	subl	0x20(%edi),%eax
00000302	addl	(%edi),%eax
00000304	movl	%eax,%ecx
00000306	movl	0x18(%ebp),%eax
00000309	movl	%ecx,(%eax)
0000030b	movb	$0x01,%cl
0000030d	movzbl	%cl,%eax
00000310	addl	$0x1c,%esp
00000313	popl	%esi
00000314	popl	%edi
00000315	popl	%ebx
00000316	popl	%ebp
00000317	ret
00000318	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertCommandAtAppropriateTime(int):
00000320	pushl	%ebp
00000321	movl	%esp,%ebp
00000323	pushl	%ebx
00000324	pushl	%edi
00000325	pushl	%esi
00000326	subl	$0x0c,%esp
00000329	movl	0x08(%ebp),%esi
0000032c	leal	0x00002014(%esi),%edi
00000332	movl	%edi,0xf0(%ebp)
00000335	leal	0x00002008(%esi),%eax
0000033b	movl	0x0c(%ebp),%ebx
0000033e	jmp	0x00000349
00000340	movl	(%edi),%ecx
00000342	cmpl	(%ebx),%ecx
00000344	jg	0x00000373
00000346	addl	CCommandBuffer::CCommandBuffer(),%edi
00000349	movl	(%edi),%edi
0000034b	testl	%edi,%edi
0000034d	jne	0x00000340
0000034f	movl	%ebx,0x04(%esp)
00000353	movl	%eax,(%esp)
00000356	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
0000035b	movl	CCommandBuffer::CCommandBuffer(),CCommandBuffer::CCommandBuffer()(%ebx)
00000362	movl	0x00002018(%esi),%eax
00000368	movl	%eax,0x0c(%ebx)
0000036b	movl	%ebx,0x00002018(%esi)
00000371	jmp	0x0000038b
00000373	movl	%ebx,0x04(%esp)
00000377	movl	%eax,(%esp)
0000037a	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
0000037f	movl	%edi,CCommandBuffer::CCommandBuffer()(%ebx)
00000382	movl	0x0c(%edi),%eax
00000385	movl	%eax,0x0c(%ebx)
00000388	movl	%ebx,0x0c(%edi)
0000038b	testl	%eax,%eax
0000038d	jne	0x00000396
0000038f	movl	0xf0(%ebp),%eax
00000392	movl	%ebx,(%eax)
00000394	jmp	0x00000399
00000396	movl	%ebx,CCommandBuffer::CCommandBuffer()(%eax)
00000399	incl	0x00002020(%esi)
0000039f	addl	$0x0c,%esp
000003a2	popl	%esi
000003a3	popl	%edi
000003a4	popl	%ebx
000003a5	popl	%ebp
000003a6	ret
000003a7	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertImmediateCommand(int):
000003b0	pushl	%ebp
000003b1	movl	%esp,%ebp
000003b3	pushl	%ebx
000003b4	pushl	%edi
000003b5	pushl	%esi
000003b6	subl	$0x0c,%esp
000003b9	movl	0x08(%ebp),%esi
000003bc	movl	0x00002040(%esi),%ebx
000003c2	movl	0x0c(%ebp),%edi
000003c5	movl	%edi,0x04(%esp)
000003c9	leal	0x00002008(%esi),%eax
000003cf	movl	%eax,(%esp)
000003d2	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000003d7	movl	%ebx,CCommandBuffer::CCommandBuffer()(%edi)
000003da	testl	%ebx,%ebx
000003dc	jne	0x000003ef
000003de	movl	0x00002018(%esi),%eax
000003e4	movl	%eax,0x0c(%edi)
000003e7	movl	%edi,0x00002018(%esi)
000003ed	jmp	0x000003f8
000003ef	movl	0x0c(%ebx),%eax
000003f2	movl	%eax,0x0c(%edi)
000003f5	movl	%edi,0x0c(%ebx)
000003f8	testl	%eax,%eax
000003fa	jne	0x00000404
000003fc	movl	%edi,0x00002014(%esi)
00000402	jmp	0x00000407
00000404	movl	%edi,CCommandBuffer::CCommandBuffer()(%eax)
00000407	incl	0x00002020(%esi)
0000040d	addl	$0x0c,%esp
00000410	popl	%esi
00000411	popl	%edi
00000412	popl	%ebx
00000413	popl	%ebp
00000414	ret
00000415	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::InsertCommand(char const*, int, int):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x0000201c,%esp
0000042c	calll	0x00000431
00000431	popl	%eax
00000432	movl	0xff93-0x431(%eax),%ecx
00000438	movl	%ecx,0xffffdfe8(%ebp)
0000043e	movl	(%ecx),%ecx
00000440	movl	%ecx,0xf0(%ebp)
00000443	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
00000446	movl	0x0c(%ebp),%ecx
00000449	cmpl	$0x000001ff,%esi
0000044f	jl	0x0000046a
00000451	movl	%ecx,0x04(%esp)
00000455	leal	0xe01d-0x431(%eax),%eax
0000045b	movl	%eax,(%esp)
0000045e	calll	_Warning
00000463	xorb	%cl,%cl
00000465	jmp	0x00000639
0000046a	movl	0x08(%ebp),%ebx
0000046d	movl	0x00002004(%ebx),%eax
00000473	leal	0x01(%esi,%eax),%ecx
00000477	leal	0x01(%esi),%edi
0000047a	cmpl	0x00002044(%ebx),%ecx
00000480	jle	0x0000050e
00000486	movl	%edi,0xffffdfec(%ebp)
0000048c	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%ebx)
00000496	movl	0x00002014(%ebx),%esi
0000049c	xorl	%edi,%edi
0000049e	jmp	0x000004d4
000004a0	movl	0x04(%esi),%eax
000004a3	addl	%ebx,%eax
000004a5	movl	0x08(%esi),%ecx
000004a8	movl	%ecx,0x08(%esp)
000004ac	movl	%eax,0x04(%esp)
000004b0	leal	0xffffdff0(%ebp,%edi),%eax
000004b7	movl	%eax,(%esp)
000004ba	calll	_memcpy
000004bf	movl	%edi,0x04(%esi)
000004c2	movl	0x00002004(%ebx),%edi
000004c8	addl	0x08(%esi),%edi
000004cb	movl	%edi,0x00002004(%ebx)
000004d1	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
000004d4	testl	%esi,%esi
000004d6	jne	0x000004a0
000004d8	movl	%edi,0x08(%esp)
000004dc	leal	0xffffdff0(%ebp),%eax
000004e2	movl	%eax,0x04(%esp)
000004e6	movl	%ebx,(%esp)
000004e9	calll	_memcpy
000004ee	movl	0x00002004(%ebx),%eax
000004f4	movl	0xffffdfec(%ebp),%edi
000004fa	leal	(%edi,%eax),%edx
000004fd	xorb	%cl,%cl
000004ff	cmpl	0x00002044(%ebx),%edx
00000505	movl	CCommandBuffer::CCommandBuffer()(%ebp),%esi
00000508	jg	0x00000639
0000050e	movl	%esi,0x08(%esp)
00000512	movl	0x0c(%ebp),%ecx
00000515	movl	%ecx,0x04(%esp)
00000519	addl	%ebx,%eax
0000051b	movl	%eax,(%esp)
0000051e	calll	_memcpy
00000523	addl	0x00002004(%ebx),%esi
00000529	movb	CCommandBuffer::CCommandBuffer(),(%ebx,%esi)
0000052d	leal	0x00002008(%ebx),%eax
00000533	movl	%eax,0xffffdfec(%ebp)
00000539	movl	%eax,(%esp)
0000053c	movl	CCommandBuffer::CCommandBuffer(),0x04(%esp)
00000544	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::AllocInternal(bool)
00000549	movl	0x14(%ebp),%ecx
0000054c	movl	%eax,%esi
0000054e	movl	%ecx,(%esi)
00000550	movl	0x00002004(%ebx),%eax
00000556	movl	%eax,0x04(%esi)
00000559	movl	%edi,0x08(%esi)
0000055c	addl	%edi,0x00002004(%ebx)
00000562	testb	$0x01,0x00002048(%ebx)
00000569	je	0x00000573
0000056b	cmpl	%ecx,0x00002034(%ebx)
00000571	jge	0x000005e9
00000573	leal	0x00002014(%ebx),%edi
00000579	movl	%edi,0xffffdfe4(%ebp)
0000057f	movl	0xffffdfec(%ebp),%ecx
00000585	jmp	0x00000599
00000587	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000590	movl	(%edi),%eax
00000592	cmpl	(%esi),%eax
00000594	jg	0x000005c3
00000596	addl	CCommandBuffer::CCommandBuffer(),%edi
00000599	movl	(%edi),%edi
0000059b	testl	%edi,%edi
0000059d	jne	0x00000590
0000059f	movl	%esi,0x04(%esp)
000005a3	movl	%ecx,(%esp)
000005a6	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000005ab	movl	CCommandBuffer::CCommandBuffer(),CCommandBuffer::CCommandBuffer()(%esi)
000005b2	movl	0x00002018(%ebx),%eax
000005b8	movl	%eax,0x0c(%esi)
000005bb	movl	%esi,0x00002018(%ebx)
000005c1	jmp	0x000005db
000005c3	movl	%esi,0x04(%esp)
000005c7	movl	%ecx,(%esp)
000005ca	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
000005cf	movl	%edi,CCommandBuffer::CCommandBuffer()(%esi)
000005d2	movl	0x0c(%edi),%eax
000005d5	movl	%eax,0x0c(%esi)
000005d8	movl	%esi,0x0c(%edi)
000005db	testl	%eax,%eax
000005dd	jne	0x0000062e
000005df	movl	0xffffdfe4(%ebp),%eax
000005e5	movl	%esi,(%eax)
000005e7	jmp	0x00000631
000005e9	movl	0x00002040(%ebx),%edi
000005ef	movl	%esi,0x04(%esp)
000005f3	movl	0xffffdfec(%ebp),%eax
000005f9	movl	%eax,(%esp)
000005fc	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000601	movl	%edi,CCommandBuffer::CCommandBuffer()(%esi)
00000604	testl	%edi,%edi
00000606	jne	0x00000619
00000608	movl	0x00002018(%ebx),%eax
0000060e	movl	%eax,0x0c(%esi)
00000611	movl	%esi,0x00002018(%ebx)
00000617	jmp	0x00000622
00000619	movl	0x0c(%edi),%eax
0000061c	movl	%eax,0x0c(%esi)
0000061f	movl	%esi,0x0c(%edi)
00000622	testl	%eax,%eax
00000624	jne	0x0000062e
00000626	movl	%esi,0x00002014(%ebx)
0000062c	jmp	0x00000631
0000062e	movl	%esi,CCommandBuffer::CCommandBuffer()(%eax)
00000631	incl	0x00002020(%ebx)
00000637	movb	$0x01,%cl
00000639	movl	0xffffdfe8(%ebp),%eax
0000063f	movl	(%eax),%eax
00000641	cmpl	0xf0(%ebp),%eax
00000644	jne	0x00000654
00000646	movzbl	%cl,%eax
00000649	addl	$0x0000201c,%esp
0000064f	popl	%esi
00000650	popl	%edi
00000651	popl	%ebx
00000652	popl	%ebp
00000653	ret
00000654	calll	___stack_chk_fail
00000659	nopl	CCommandBuffer::CCommandBuffer()(%eax)
CCommandBuffer::Compact():
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x0000201c,%esp
0000066c	calll	0x00000671
00000671	popl	%eax
00000672	movl	0xff93-0x671(%eax),%eax
00000678	movl	%eax,0xffffdfec(%ebp)
0000067e	movl	(%eax),%eax
00000680	movl	%eax,0xf0(%ebp)
00000683	movl	0x08(%ebp),%edi
00000686	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000690	movl	0x00002014(%edi),%esi
00000696	xorl	%ebx,%ebx
00000698	jmp	0x000006d4
0000069a	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
000006a0	movl	0x04(%esi),%eax
000006a3	addl	%edi,%eax
000006a5	movl	0x08(%esi),%ecx
000006a8	movl	%ecx,0x08(%esp)
000006ac	movl	%eax,0x04(%esp)
000006b0	leal	0xffffdff0(%ebp,%ebx),%eax
000006b7	movl	%eax,(%esp)
000006ba	calll	_memcpy
000006bf	movl	%ebx,0x04(%esi)
000006c2	movl	0x00002004(%edi),%ebx
000006c8	addl	0x08(%esi),%ebx
000006cb	movl	%ebx,0x00002004(%edi)
000006d1	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
000006d4	testl	%esi,%esi
000006d6	jne	0x000006a0
000006d8	movl	%ebx,0x08(%esp)
000006dc	leal	0xffffdff0(%ebp),%eax
000006e2	movl	%eax,0x04(%esp)
000006e6	movl	%edi,(%esp)
000006e9	calll	_memcpy
000006ee	movl	0xffffdfec(%ebp),%eax
000006f4	movl	(%eax),%eax
000006f6	cmpl	0xf0(%ebp),%eax
000006f9	jne	0x00000706
000006fb	addl	$0x0000201c,%esp
00000701	popl	%esi
00000702	popl	%edi
00000703	popl	%ebx
00000704	popl	%ebp
00000705	ret
00000706	calll	___stack_chk_fail
0000070b	nopl	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::GetNextCommandLength(char const*, int, int*, int*):
00000710	pushl	%ebp
00000711	pushl	%ebx
00000712	pushl	%edi
00000713	pushl	%esi
00000714	movl	0x1c(%esp),%esi
00000718	leal	0xff(%esi),%edi
0000071b	xorb	%al,%al
0000071d	xorl	%edx,%edx
0000071f	movl	0x18(%esp),%ebp
00000723	movl	%edx,%ebx
00000725	xorb	%ah,%ah
00000727	jmp	0x00000743
00000729	nopl	CCommandBuffer::CCommandBuffer()(%eax)
00000730	xorb	$0x01,%ch
00000733	movb	%ch,%al
00000735	movb	%ah,%cl
00000737	andb	$0x01,%cl
0000073a	xorb	$0x01,%cl
0000073d	movzbl	%cl,%ecx
00000740	addl	%ecx,%edx
00000742	incl	%ebx
00000743	cmpl	%esi,%ebx
00000745	jge	0x00000784
00000747	movb	CCommandBuffer::CCommandBuffer()(%ebp,%ebx),%cl
0000074b	testb	$0x01,%ah
0000074e	jne	0x0000077f
00000750	movb	%al,%ch
00000752	andb	$0x01,%ch
00000755	cmpb	$0x22,%cl
00000758	je	0x00000730
0000075a	testb	%ch,%ch
0000075c	jne	0x00000776
0000075e	cmpb	$0x2f,%cl
00000761	jne	0x00000776
00000763	xorb	%ah,%ah
00000765	cmpl	%edi,%ebx
00000767	jge	0x00000776
00000769	cmpb	$0x2f,0x01(%ebp,%ebx)
0000076e	sete	%ah
00000771	jne	0x00000776
00000773	incl	%ebx
00000774	jmp	0x00000735
00000776	testb	%ch,%ch
00000778	jne	0x0000077f
0000077a	cmpb	$0x3b,%cl
0000077d	je	0x00000784
0000077f	cmpb	$0x0a,%cl
00000782	jne	0x00000735
00000784	movl	0x20(%esp),%eax
00000788	movl	%edx,(%eax)
0000078a	movl	0x24(%esp),%eax
0000078e	movl	%ebx,(%eax)
00000790	popl	%esi
00000791	popl	%edi
00000792	popl	%ebx
00000793	popl	%ebp
00000794	ret
00000795	nopl	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::AddText(char const*, int):
000007a0	pushl	%ebp
000007a1	movl	%esp,%ebp
000007a3	pushl	%ebx
000007a4	pushl	%edi
000007a5	pushl	%esi
000007a6	subl	$0x5c,%esp
000007a9	calll	0x000007ae
000007ae	popl	%eax
000007af	movl	%eax,0xa0(%ebp)
000007b2	movl	0xff93-0x7ae(%eax),%eax
000007b8	movl	%eax,0x9c(%ebp)
000007bb	movl	(%eax),%eax
000007bd	movl	%eax,0xf0(%ebp)
000007c0	subl	CCommandBuffer::CCommandBuffer(),%esp
000007c3	movl	0x0c(%ebp),%eax
000007c6	movl	%eax,0xb4(%ebp)
000007c9	movl	%eax,(%esp)
000007cc	calll	_strlen
000007d1	addl	CCommandBuffer::CCommandBuffer(),%esp
000007d4	movl	%eax,%ebx
000007d6	movl	0x08(%ebp),%eax
000007d9	movl	0x00002034(%eax),%eax
000007df	addl	CCommandBuffer::CCommandBuffer()(%ebp),%eax
000007e2	movl	%eax,0xac(%ebp)
000007e5	jmp	0x00000805
000007e7	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
000007f0	movl	0xac(%ebp),%ecx
000007f3	movl	%edi,%ebx
000007f5	movl	0xb4(%ebp),%eax
000007f8	leal	0x01(%eax,%esi),%eax
000007fc	movl	%eax,0xb4(%ebp)
000007ff	incl	%esi
00000800	subl	%esi,%ebx
00000802	movl	%ecx,0xac(%ebp)
00000805	movb	$0x01,%al
00000807	testl	%ebx,%ebx
00000809	jle	0x00000a2c
0000080f	leal	0xff(%ebx),%eax
00000812	movl	%eax,0xb0(%ebp)
00000815	xorb	%cl,%cl
00000817	xorl	%esi,%esi
00000819	xorl	%eax,%eax
0000081b	xorb	%dl,%dl
0000081d	jmp	0x00000835
0000081f	nop
00000820	xorb	$0x01,%dh
00000823	movb	%dh,%cl
00000825	movb	%dl,%ch
00000827	andb	$0x01,%ch
0000082a	xorb	$0x01,%ch
0000082d	movzbl	%ch,%ebx
00000830	addl	%ebx,%eax
00000832	incl	%esi
00000833	movl	%edi,%ebx
00000835	cmpl	%ebx,%esi
00000837	movl	%ebx,%edi
00000839	jge	0x0000087e
0000083b	movl	0xb4(%ebp),%ebx
0000083e	movb	(%ebx,%esi),%ch
00000841	testb	$0x01,%dl
00000844	jne	0x00000879
00000846	movb	%cl,%dh
00000848	andb	$0x01,%dh
0000084b	cmpb	$0x22,%ch
0000084e	je	0x00000820
00000850	testb	%dh,%dh
00000852	jne	0x00000870
00000854	cmpb	$0x2f,%ch
00000857	jne	0x00000870
00000859	xorb	%dl,%dl
0000085b	cmpl	0xb0(%ebp),%esi
0000085e	jge	0x00000870
00000860	movl	0xb4(%ebp),%ebx
00000863	cmpb	$0x2f,0x01(%ebx,%esi)
00000868	sete	%dl
0000086b	jne	0x00000870
0000086d	incl	%esi
0000086e	jmp	0x00000825
00000870	testb	%dh,%dh
00000872	jne	0x00000879
00000874	cmpb	$0x3b,%ch
00000877	je	0x0000087e
00000879	cmpb	$0x0a,%ch
0000087c	jne	0x00000825
0000087e	testl	%eax,%eax
00000880	jle	0x000007f0
00000886	leal	CCommandBuffer::CCommandBuffer()(%eax),%ebx
00000889	andl	$0xf0,%ebx
0000088c	movl	%esp,%ecx
0000088e	movl	%ecx,0xa4(%ebp)
00000891	subl	%ebx,%ecx
00000893	movl	%ecx,0xa8(%ebp)
00000896	movl	%ecx,%esp
00000898	subl	CCommandBuffer::CCommandBuffer(),%esp
0000089b	movl	%eax,0x08(%esp)
0000089f	movl	%eax,0xb0(%ebp)
000008a2	movl	0xb4(%ebp),%eax
000008a5	movl	%eax,0x04(%esp)
000008a9	leal	0xb8(%ebp),%eax
000008ac	movl	%eax,(%esp)
000008af	movl	$0x00000009,0x0c(%esp)
000008b7	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
000008bc	addl	CCommandBuffer::CCommandBuffer(),%esp
000008bf	negl	%ebx
000008c1	movl	0xa4(%ebp),%eax
000008c4	movb	CCommandBuffer::CCommandBuffer(),(%eax,%ebx)
000008c8	xorb	%bl,%bl
000008ca	cmpb	CCommandBuffer::CCommandBuffer(),0xcc(%ebp)
000008ce	jne	0x000009ee
000008d4	calll	CCommand::DefaultBreakSet()
000008d9	movl	0xb0(%ebp),%ecx
000008dc	leal	0x01(%ecx),%ebx
000008df	subl	$0x20,%esp
000008e2	movl	%ebx,0x0c(%esp)
000008e6	movl	0xa8(%ebp),%ecx
000008e9	movl	%ecx,0x08(%esp)
000008ed	movl	%eax,0x04(%esp)
000008f1	leal	0xb8(%ebp),%eax
000008f4	movl	%eax,(%esp)
000008f7	movl	$0x00000001,CCommandBuffer::CCommandBuffer()(%esp)
000008ff	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
00000904	addl	$0x20,%esp
00000907	xorl	%edx,%edx
00000909	testl	%eax,%eax
0000090b	jle	0x00000927
0000090d	cmpl	%ebx,%eax
0000090f	je	0x00000927
00000911	movl	0xc4(%ebp),%eax
00000914	movl	0xd4(%ebp),%ecx
00000917	subl	%eax,%ecx
00000919	xorl	%edx,%edx
0000091b	testl	%ecx,%ecx
0000091d	jle	0x00000927
0000091f	subl	0xd8(%ebp),%eax
00000922	addl	0xb8(%ebp),%eax
00000925	movl	%eax,%edx
00000927	xorb	%bl,%bl
00000929	movl	0xa8(%ebp),%ecx
0000092c	cmpb	CCommandBuffer::CCommandBuffer(),(%ecx)
0000092f	je	0x000009ee
00000935	movl	%edx,%ebx
00000937	subl	CCommandBuffer::CCommandBuffer(),%esp
0000093a	movl	0xa0(%ebp),%eax
0000093d	leal	0xe048-0x7ae(%eax),%eax
00000943	movl	%eax,0x04(%esp)
00000947	movl	%ecx,(%esp)
0000094a	calll	V_stricmp(char const*, char const*)
0000094f	addl	CCommandBuffer::CCommandBuffer(),%esp
00000952	testl	%eax,%eax
00000954	movl	%ebx,%ecx
00000956	jne	0x000009c3
00000958	movl	0x08(%ebp),%eax
0000095b	testb	$0x01,0x00002049(%eax)
00000962	je	0x000009c3
00000964	testl	%ecx,%ecx
00000966	je	0x0000097a
00000968	subl	CCommandBuffer::CCommandBuffer(),%esp
0000096b	movl	%ecx,(%esp)
0000096e	calll	_atoi
00000973	addl	CCommandBuffer::CCommandBuffer(),%esp
00000976	movl	%eax,%ecx
00000978	jmp	0x00000983
0000097a	movl	0x08(%ebp),%eax
0000097d	movl	0x0000203c(%eax),%ecx
00000983	addl	0xac(%ebp),%ecx
00000986	xorb	%bl,%bl
00000988	jmp	0x000009f1
0000098a	movl	%eax,%esi
0000098c	cmpl	CCommandBuffer::CCommandBuffer(),0xc0(%ebp)
00000990	js	0x000009b5
00000992	movl	0xb8(%ebp),%eax
00000995	testl	%eax,%eax
00000997	je	0x000009ae
00000999	subl	CCommandBuffer::CCommandBuffer(),%esp
0000099c	movl	%eax,(%esp)
0000099f	calll	_free
000009a4	addl	CCommandBuffer::CCommandBuffer(),%esp
000009a7	movl	CCommandBuffer::CCommandBuffer(),0xb8(%ebp)
000009ae	movl	CCommandBuffer::CCommandBuffer(),0xbc(%ebp)
000009b5	subl	CCommandBuffer::CCommandBuffer(),%esp
000009b8	movl	%esi,(%esp)
000009bb	calll	__Unwind_Resume
000009c0	addl	CCommandBuffer::CCommandBuffer(),%esp
000009c3	subl	CCommandBuffer::CCommandBuffer(),%esp
000009c6	movl	0xac(%ebp),%eax
000009c9	movl	%eax,0x0c(%esp)
000009cd	movl	0xb0(%ebp),%eax
000009d0	movl	%eax,0x08(%esp)
000009d4	movl	0xb4(%ebp),%eax
000009d7	movl	%eax,0x04(%esp)
000009db	movl	0x08(%ebp),%eax
000009de	movl	%eax,(%esp)
000009e1	calll	CCommandBuffer::InsertCommand(char const*, int, int)
000009e6	addl	CCommandBuffer::CCommandBuffer(),%esp
000009e9	movb	%al,%bl
000009eb	xorb	$0x01,%bl
000009ee	movl	0xac(%ebp),%ecx
000009f1	cmpl	CCommandBuffer::CCommandBuffer(),0xc0(%ebp)
000009f5	js	0x00000a20
000009f7	movl	%ecx,0xb0(%ebp)
000009fa	movl	0xb8(%ebp),%eax
000009fd	testl	%eax,%eax
000009ff	je	0x00000a16
00000a01	subl	CCommandBuffer::CCommandBuffer(),%esp
00000a04	movl	%eax,(%esp)
00000a07	calll	_free
00000a0c	addl	CCommandBuffer::CCommandBuffer(),%esp
00000a0f	movl	CCommandBuffer::CCommandBuffer(),0xb8(%ebp)
00000a16	movl	CCommandBuffer::CCommandBuffer(),0xbc(%ebp)
00000a1d	movl	0xb0(%ebp),%ecx
00000a20	xorb	%al,%al
00000a22	testb	%bl,%bl
00000a24	movl	%edi,%ebx
00000a26	je	0x000007f5
00000a2c	movl	0x9c(%ebp),%ecx
00000a2f	movl	(%ecx),%ecx
00000a31	cmpl	0xf0(%ebp),%ecx
00000a34	jne	0x00000a41
00000a36	movzbl	%al,%eax
00000a39	leal	0xf4(%ebp),%esp
00000a3c	popl	%esi
00000a3d	popl	%edi
00000a3e	popl	%ebx
00000a3f	popl	%ebp
00000a40	ret
00000a41	calll	___stack_chk_fail
00000a46	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::IsProcessingCommands():
00000a50	movl	0x04(%esp),%eax
00000a54	movzbl	0x00002048(%eax),%eax
00000a5b	andl	$0x01,%eax
00000a5e	ret
00000a5f	nop
CCommandBuffer::DelayAllQueuedCommands(int):
00000a60	movl	0x08(%esp),%eax
00000a64	testl	%eax,%eax
00000a66	jle	0x00000a89
00000a68	movl	0x04(%esp),%ecx
00000a6c	movl	0x00002014(%ecx),%ecx
00000a72	jmp	0x00000a85
00000a74	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000a80	addl	%eax,(%ecx)
00000a82	movl	CCommandBuffer::CCommandBuffer()(%ecx),%ecx
00000a85	testl	%ecx,%ecx
00000a87	jne	0x00000a80
00000a89	ret
00000a8a	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::BeginProcessingCommands(int):
00000a90	movl	0x08(%esp),%eax
00000a94	testl	%eax,%eax
00000a96	je	0x00000abf
00000a98	movl	0x04(%esp),%ecx
00000a9c	movb	$0x01,0x00002048(%ecx)
00000aa3	movl	0x00002034(%ecx),%edx
00000aa9	leal	0xff(%eax,%edx),%eax
00000aad	movl	%eax,0x00002038(%ecx)
00000ab3	movl	0x00002014(%ecx),%eax
00000ab9	movl	%eax,0x00002040(%ecx)
00000abf	ret
CCommandBuffer::DequeueNextCommand():
00000ac0	pushl	%ebp
00000ac1	movl	%esp,%ebp
00000ac3	pushl	%ebx
00000ac4	pushl	%edi
00000ac5	pushl	%esi
00000ac6	subl	$0x0c,%esp
00000ac9	movl	0x08(%ebp),%esi
00000acc	leal	0x0000204c(%esi),%ebx
00000ad2	movl	%ebx,(%esp)
00000ad5	calll	CCommand::Reset()
00000ada	xorb	%al,%al
00000adc	cmpl	CCommandBuffer::CCommandBuffer(),0x00002020(%esi)
00000ae3	je	0x00000b4b
00000ae5	movl	0x00002014(%esi),%edi
00000aeb	movl	(%edi),%ecx
00000aed	xorb	%al,%al
00000aef	cmpl	0x00002038(%esi),%ecx
00000af5	jg	0x00000b4b
00000af7	movl	%ecx,0x00002034(%esi)
00000afd	cmpl	CCommandBuffer::CCommandBuffer(),0x08(%edi)
00000b01	jle	0x00000b1c
00000b03	movl	0x04(%edi),%eax
00000b06	addl	%esi,%eax
00000b08	movl	%eax,0x04(%esp)
00000b0c	movl	%ebx,(%esp)
00000b0f	movl	CCommandBuffer::CCommandBuffer(),0x08(%esp)
00000b17	calll	CCommand::Tokenize(char const*, characterset_t*)
00000b1c	leal	0x00002008(%esi),%eax
00000b22	movl	%edi,0x04(%esp)
00000b26	movl	%eax,(%esp)
00000b29	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000b2e	movl	0x0000201c(%esi),%eax
00000b34	movl	%eax,CCommandBuffer::CCommandBuffer()(%edi)
00000b37	movl	%edi,0x0000201c(%esi)
00000b3d	movl	0x00002014(%esi),%eax
00000b43	movl	%eax,0x00002040(%esi)
00000b49	movb	$0x01,%al
00000b4b	movzbl	%al,%eax
00000b4e	addl	$0x0c,%esp
00000b51	popl	%esi
00000b52	popl	%edi
00000b53	popl	%ebx
00000b54	popl	%ebp
00000b55	ret
00000b56	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::DequeueNextCommand(char const**&):
00000b60	pushl	%ebp
00000b61	movl	%esp,%ebp
00000b63	pushl	%ebx
00000b64	pushl	%edi
00000b65	pushl	%esi
00000b66	subl	$0x0c,%esp
00000b69	movl	0x08(%ebp),%esi
00000b6c	leal	0x0000204c(%esi),%ebx
00000b72	movl	%ebx,(%esp)
00000b75	calll	CCommand::Reset()
00000b7a	cmpl	CCommandBuffer::CCommandBuffer(),0x00002020(%esi)
00000b81	je	0x00000be5
00000b83	movl	0x00002014(%esi),%edi
00000b89	movl	(%edi),%eax
00000b8b	cmpl	0x00002038(%esi),%eax
00000b91	jg	0x00000be5
00000b93	movl	%eax,0x00002034(%esi)
00000b99	cmpl	CCommandBuffer::CCommandBuffer(),0x08(%edi)
00000b9d	jle	0x00000bb8
00000b9f	movl	0x04(%edi),%eax
00000ba2	addl	%esi,%eax
00000ba4	movl	%eax,0x04(%esp)
00000ba8	movl	%ebx,(%esp)
00000bab	movl	CCommandBuffer::CCommandBuffer(),0x08(%esp)
00000bb3	calll	CCommand::Tokenize(char const*, characterset_t*)
00000bb8	leal	0x00002008(%esi),%eax
00000bbe	movl	%edi,0x04(%esp)
00000bc2	movl	%eax,(%esp)
00000bc5	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000bca	movl	0x0000201c(%esi),%eax
00000bd0	movl	%eax,CCommandBuffer::CCommandBuffer()(%edi)
00000bd3	movl	%edi,0x0000201c(%esi)
00000bd9	movl	0x00002014(%esi),%eax
00000bdf	movl	%eax,0x00002040(%esi)
00000be5	movl	0x0c(%ebp),%eax
00000be8	leal	0x00002454(%esi),%ecx
00000bee	cmpl	CCommandBuffer::CCommandBuffer(),0x0000204c(%esi)
00000bf5	movl	CCommandBuffer::CCommandBuffer(),%edx
00000bfa	cmovnel	%ecx,%edx
00000bfd	movl	%edx,(%eax)
00000bff	movl	0x0000204c(%esi),%eax
00000c05	addl	$0x0c,%esp
00000c08	popl	%esi
00000c09	popl	%edi
00000c0a	popl	%ebx
00000c0b	popl	%ebp
00000c0c	ret
00000c0d	nopl	(%eax)
CCommandBuffer::EndProcessingCommands():
00000c10	pushl	%ebp
00000c11	movl	%esp,%ebp
00000c13	pushl	%ebx
00000c14	pushl	%edi
00000c15	pushl	%esi
00000c16	subl	$0x0000201c,%esp
00000c1c	calll	0x00000c21
00000c21	popl	%eax
00000c22	movl	%eax,0xffffdfec(%ebp)
00000c28	movl	0xff93-0xc21(%eax),%eax
00000c2e	movl	%eax,0xffffdfe8(%ebp)
00000c34	movl	(%eax),%eax
00000c36	movl	%eax,0xf0(%ebp)
00000c39	movl	0x08(%ebp),%edi
00000c3c	movb	CCommandBuffer::CCommandBuffer(),0x00002048(%edi)
00000c43	movl	0x00002038(%edi),%eax
00000c49	incl	%eax
00000c4a	movl	%eax,0x00002034(%edi)
00000c50	movl	CCommandBuffer::CCommandBuffer(),0x00002040(%edi)
00000c5a	movl	0x00002014(%edi),%esi
00000c60	testl	%esi,%esi
00000c62	je	0x00000d30
00000c68	leal	0x00002008(%edi),%ebx
00000c6e	jmp	0x00000cae
00000c70	movl	0x04(%esi),%eax
00000c73	addl	%edi,%eax
00000c75	movl	%eax,0x04(%esp)
00000c79	movl	0xffffdfec(%ebp),%eax
00000c7f	leal	0xe04d-0xc21(%eax),%eax
00000c85	movl	%eax,(%esp)
00000c88	calll	_Msg
00000c8d	movl	%esi,0x04(%esp)
00000c91	movl	%ebx,(%esp)
00000c94	calll	CUtlLinkedList<CCommandBuffer::Command_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CCommandBuffer::Command_t, int> > >::Unlink(int)
00000c99	movl	0x0000201c(%edi),%eax
00000c9f	movl	%eax,CCommandBuffer::CCommandBuffer()(%esi)
00000ca2	movl	%esi,0x0000201c(%edi)
00000ca8	movl	0x00002034(%edi),%eax
00000cae	cmpl	%eax,(%esi)
00000cb0	jl	0x00000c70
00000cb2	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000cbc	movl	0x00002014(%edi),%esi
00000cc2	xorl	%ebx,%ebx
00000cc4	jmp	0x00000d04
00000cc6	nopw	%cs:CCommandBuffer::CCommandBuffer()(%eax,%eax)
00000cd0	movl	0x04(%esi),%eax
00000cd3	addl	%edi,%eax
00000cd5	movl	0x08(%esi),%ecx
00000cd8	movl	%ecx,0x08(%esp)
00000cdc	movl	%eax,0x04(%esp)
00000ce0	leal	0xffffdff0(%ebp,%ebx),%eax
00000ce7	movl	%eax,(%esp)
00000cea	calll	_memcpy
00000cef	movl	%ebx,0x04(%esi)
00000cf2	movl	0x00002004(%edi),%ebx
00000cf8	addl	0x08(%esi),%ebx
00000cfb	movl	%ebx,0x00002004(%edi)
00000d01	movl	CCommandBuffer::CCommandBuffer()(%esi),%esi
00000d04	testl	%esi,%esi
00000d06	jne	0x00000cd0
00000d08	movl	%ebx,0x08(%esp)
00000d0c	leal	0xffffdff0(%ebp),%eax
00000d12	movl	%eax,0x04(%esp)
00000d16	movl	%edi,(%esp)
00000d19	calll	_memcpy
00000d1e	movl	0xffffdfe8(%ebp),%eax
00000d24	movl	(%eax),%eax
00000d26	cmpl	0xf0(%ebp),%eax
00000d29	je	0x00000d3c
00000d2b	calll	___stack_chk_fail
00000d30	movl	CCommandBuffer::CCommandBuffer(),0x00002004(%edi)
00000d3a	jmp	0x00000d1e
00000d3c	addl	$0x0000201c,%esp
00000d42	popl	%esi
00000d43	popl	%edi
00000d44	popl	%ebx
00000d45	popl	%ebp
00000d46	ret
00000d47	nopw	CCommandBuffer::CCommandBuffer()(%eax,%eax)
CCommandBuffer::GetNextCommandHandle():
00000d50	movl	0x04(%esp),%eax
00000d54	movl	0x00002014(%eax),%eax
00000d5a	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(convar.o):
(__TEXT,__text) section
ConVar_Register(int, IConCommandBaseAccessor*):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%esi
0000000f	movl	0x19689-0xe(%esi),%eax
00000015	movl	%eax,0xf0(%ebp)
00000018	movl	(%eax),%eax
0000001a	testl	%eax,%eax
0000001c	je	0x000000ad
00000022	movb	__ZL13s_bRegistered.b-0xe(%esi),%cl
00000028	testb	%cl,%cl
0000002a	jne	0x000000ad
00000030	movl	0x0c(%ebp),%ebx
00000033	movl	0x08(%ebp),%ecx
00000036	movb	$0x01,__ZL13s_bRegistered.b-0xe(%esi)
0000003d	movl	%ecx,s_nCVarFlag-0xe(%esi)
00000043	movl	(%eax),%ecx
00000045	movl	%eax,(%esp)
00000048	call	*0x14(%ecx)
0000004b	movl	%eax,s_nDLLIdentifier-0xe(%esi)
00000051	leal	s_DefaultAccessor-0xe(%esi),%eax
00000057	testl	%ebx,%ebx
00000059	cmovnel	%ebx,%eax
0000005c	movl	%eax,ConCommandBase::s_pAccessor-0xe(%esi)
00000062	movl	ConCommandBase::s_pConCommandBases-0xe(%esi),%ebx
00000068	testl	%ebx,%ebx
0000006a	je	0x00000093
0000006c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
00000070	movl	(%ebx),%eax
00000072	movl	0x04(%ebx),%edi
00000075	movl	s_nCVarFlag-0xe(%esi),%ecx
0000007b	movl	%ecx,0x04(%esp)
0000007f	movl	%ebx,(%esp)
00000082	call	*0x10(%eax)
00000085	movl	(%ebx),%eax
00000087	movl	%ebx,(%esp)
0000008a	call	*0x28(%eax)
0000008d	testl	%edi,%edi
0000008f	movl	%edi,%ebx
00000091	jne	0x00000070
00000093	movl	0xf0(%ebp),%eax
00000096	movl	(%eax),%ecx
00000098	movl	(%ecx),%eax
0000009a	movl	%ecx,(%esp)
0000009d	call	*0x00000084(%eax)
000000a3	movl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pConCommandBases-0xe(%esi)
000000ad	addl	$0x0c,%esp
000000b0	popl	%esi
000000b1	popl	%edi
000000b2	popl	%ebx
000000b3	popl	%ebp
000000b4	ret
000000b5	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_Unregister():
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%esi
000000c4	subl	$0x14,%esp
000000c7	calll	0x000000cc
000000cc	popl	%esi
000000cd	movl	0x19689-0xcc(%esi),%eax
000000d3	movl	(%eax),%eax
000000d5	testl	%eax,%eax
000000d7	je	0x00000107
000000d9	movb	__ZL13s_bRegistered.b-0xcc(%esi),%cl
000000df	cmpb	$0x01,%cl
000000e2	jne	0x00000107
000000e4	movl	(%eax),%ecx
000000e6	movl	s_nDLLIdentifier-0xcc(%esi),%edx
000000ec	movl	%edx,0x04(%esp)
000000f0	movl	%eax,(%esp)
000000f3	call	*0x20(%ecx)
000000f6	movl	$0xffffffff,s_nDLLIdentifier-0xcc(%esi)
00000100	movb	ConVar_Register(int, IConCommandBaseAccessor*),__ZL13s_bRegistered.b-0xcc(%esi)
00000107	addl	$0x14,%esp
0000010a	popl	%esi
0000010b	popl	%ebp
0000010c	ret
0000010d	nopl	(%eax)
ConCommandBase::ConCommandBase():
00000110	calll	0x00000115
00000115	popl	%eax
00000116	leal	vtable for ConCommandBase-0x115+0x00000008(%eax),%ecx
0000011c	movl	0x04(%esp),%eax
00000120	movl	%ecx,(%eax)
00000122	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000126	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%eax)
0000012d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%eax)
00000134	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%eax)
0000013b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000142	ret
00000143	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase():
00000150	calll	0x00000155
00000155	popl	%eax
00000156	leal	vtable for ConCommandBase-0x155+0x00000008(%eax),%ecx
0000015c	movl	0x04(%esp),%eax
00000160	movl	%ecx,(%eax)
00000162	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000166	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%eax)
0000016d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%eax)
00000174	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%eax)
0000017b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000182	ret
00000183	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase(char const*, char const*, int):
00000190	pushl	%esi
00000191	calll	0x00000196
00000196	popl	%ecx
00000197	leal	vtable for ConCommandBase-0x196+0x00000008(%ecx),%edx
0000019d	movl	0x08(%esp),%eax
000001a1	movl	%edx,(%eax)
000001a3	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000001a7	movl	0x0c(%esp),%edx
000001ab	movl	%edx,0x0c(%eax)
000001ae	leal	0x1604c-0x196(%ecx),%edx
000001b4	movl	0x10(%esp),%esi
000001b8	testl	%esi,%esi
000001ba	cmovnel	%esi,%edx
000001bd	movl	%edx,0x10(%eax)
000001c0	movl	0x14(%esp),%edx
000001c4	movl	%edx,0x14(%eax)
000001c7	testb	$0x01,%dl
000001ca	jne	0x000001dd
000001cc	movl	ConCommandBase::s_pConCommandBases-0x196(%ecx),%edx
000001d2	movl	%edx,0x04(%eax)
000001d5	movl	%eax,ConCommandBase::s_pConCommandBases-0x196(%ecx)
000001db	jmp	0x000001e4
000001dd	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000001e4	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x196(%ecx)
000001ee	jne	0x000001f2
000001f0	popl	%esi
000001f1	ret
000001f2	movl	(%eax),%eax
000001f4	movl	0x28(%eax),%eax
000001f7	popl	%esi
000001f8	jmp	*%eax
000001fa	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::ConCommandBase(char const*, char const*, int):
00000200	pushl	%esi
00000201	calll	0x00000206
00000206	popl	%ecx
00000207	leal	vtable for ConCommandBase-0x206+0x00000008(%ecx),%edx
0000020d	movl	0x08(%esp),%eax
00000211	movl	%edx,(%eax)
00000213	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000217	movl	0x0c(%esp),%edx
0000021b	movl	%edx,0x0c(%eax)
0000021e	leal	0x1604c-0x206(%ecx),%edx
00000224	movl	0x10(%esp),%esi
00000228	testl	%esi,%esi
0000022a	cmovnel	%esi,%edx
0000022d	movl	%edx,0x10(%eax)
00000230	movl	0x14(%esp),%edx
00000234	movl	%edx,0x14(%eax)
00000237	testb	$0x01,%dl
0000023a	jne	0x0000024d
0000023c	movl	ConCommandBase::s_pConCommandBases-0x206(%ecx),%edx
00000242	movl	%edx,0x04(%eax)
00000245	movl	%eax,ConCommandBase::s_pConCommandBases-0x206(%ecx)
0000024b	jmp	0x00000254
0000024d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000254	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x206(%ecx)
0000025e	jne	0x00000262
00000260	popl	%esi
00000261	ret
00000262	movl	(%eax),%eax
00000264	movl	0x28(%eax),%eax
00000267	popl	%esi
00000268	jmp	*%eax
0000026a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000270	jmp	operator delete(void*)
00000275	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000280	ret
00000281	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::~ConCommandBase():
00000290	ret
00000291	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsCommand() const:
000002a0	movl	$0x00000001,%eax
000002a5	ret
000002a6	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::GetDLLIdentifier() const:
000002b0	calll	0x000002b5
000002b5	popl	%eax
000002b6	movl	s_nDLLIdentifier-0x2b5(%eax),%eax
000002bc	ret
000002bd	nopl	(%eax)
ConCommandBase::Create(char const*, char const*, int):
000002c0	pushl	%esi
000002c1	calll	0x000002c6
000002c6	popl	%ecx
000002c7	movl	0x08(%esp),%eax
000002cb	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000002cf	movl	0x0c(%esp),%edx
000002d3	movl	%edx,0x0c(%eax)
000002d6	leal	0x1604c-0x2c6(%ecx),%edx
000002dc	movl	0x10(%esp),%esi
000002e0	testl	%esi,%esi
000002e2	cmovnel	%esi,%edx
000002e5	movl	%edx,0x10(%eax)
000002e8	movl	0x14(%esp),%edx
000002ec	movl	%edx,0x14(%eax)
000002ef	testb	$0x01,%dl
000002f2	jne	0x00000305
000002f4	movl	ConCommandBase::s_pConCommandBases-0x2c6(%ecx),%edx
000002fa	movl	%edx,0x04(%eax)
000002fd	movl	%eax,ConCommandBase::s_pConCommandBases-0x2c6(%ecx)
00000303	jmp	0x0000030c
00000305	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
0000030c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x2c6(%ecx)
00000316	jne	0x0000031a
00000318	popl	%esi
00000319	ret
0000031a	movl	(%eax),%eax
0000031c	movl	0x28(%eax),%eax
0000031f	popl	%esi
00000320	jmp	*%eax
00000322	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::Init():
00000330	pushl	%ebp
00000331	movl	%esp,%ebp
00000333	subl	$0x08,%esp
00000336	calll	0x0000033b
0000033b	popl	%eax
0000033c	movl	ConCommandBase::s_pAccessor-0x33b(%eax),%eax
00000342	testl	%eax,%eax
00000344	je	0x00000354
00000346	movl	0x08(%ebp),%edx
00000349	movl	(%eax),%ecx
0000034b	movl	%edx,0x04(%esp)
0000034f	movl	%eax,(%esp)
00000352	call	(%ecx)
00000354	addl	$0x08,%esp
00000357	popl	%ebp
00000358	ret
00000359	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::Shutdown():
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	subl	$0x08,%esp
00000366	calll	0x0000036b
0000036b	popl	%eax
0000036c	movl	0x19689-0x36b(%eax),%eax
00000372	movl	(%eax),%eax
00000374	testl	%eax,%eax
00000376	je	0x00000387
00000378	movl	0x08(%ebp),%edx
0000037b	movl	(%eax),%ecx
0000037d	movl	%edx,0x04(%esp)
00000381	movl	%eax,(%esp)
00000384	call	*0x1c(%ecx)
00000387	addl	$0x08,%esp
0000038a	popl	%ebp
0000038b	ret
0000038c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetName() const:
00000390	movl	0x04(%esp),%eax
00000394	movl	0x0c(%eax),%eax
00000397	ret
00000398	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsFlagSet(int) const:
000003a0	movl	0x04(%esp),%eax
000003a4	movl	0x14(%eax),%eax
000003a7	testl	0x08(%esp),%eax
000003ab	setne	%al
000003ae	movzbl	%al,%eax
000003b1	ret
000003b2	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::AddFlags(int):
000003c0	movl	0x08(%esp),%eax
000003c4	movl	0x04(%esp),%ecx
000003c8	orl	%eax,0x14(%ecx)
000003cb	ret
000003cc	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetNext() const:
000003d0	movl	0x04(%esp),%eax
000003d4	movl	0x04(%eax),%eax
000003d7	ret
000003d8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::GetNext():
000003e0	movl	0x04(%esp),%eax
000003e4	movl	0x04(%eax),%eax
000003e7	ret
000003e8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::CopyString(char const*):
000003f0	pushl	%ebp
000003f1	movl	%esp,%ebp
000003f3	pushl	%ebx
000003f4	pushl	%edi
000003f5	pushl	%esi
000003f6	subl	$0x0c,%esp
000003f9	movl	0x0c(%ebp),%ebx
000003fc	movl	%ebx,(%esp)
000003ff	calll	_strlen
00000404	movl	%eax,%esi
00000406	testl	%esi,%esi
00000408	jg	0x0000041d
0000040a	movl	$0x00000001,(%esp)
00000411	calll	operator new[](unsigned long)
00000416	movl	%eax,%edi
00000418	movb	ConVar_Register(int, IConCommandBaseAccessor*),(%edi)
0000041b	jmp	0x00000442
0000041d	incl	%esi
0000041e	testl	%esi,%esi
00000420	movl	$0xffffffff,%eax
00000425	cmovnsl	%esi,%eax
00000428	movl	%eax,(%esp)
0000042b	calll	operator new[](unsigned long)
00000430	movl	%eax,%edi
00000432	movl	%esi,0x08(%esp)
00000436	movl	%ebx,0x04(%esp)
0000043a	movl	%edi,(%esp)
0000043d	calll	V_strncpy(char*, char const*, int)
00000442	movl	%edi,%eax
00000444	addl	$0x0c,%esp
00000447	popl	%esi
00000448	popl	%edi
00000449	popl	%ebx
0000044a	popl	%ebp
0000044b	ret
0000044c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConCommandBase::GetHelpText() const:
00000450	movl	0x04(%esp),%eax
00000454	movl	0x10(%eax),%eax
00000457	ret
00000458	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommandBase::IsRegistered() const:
00000460	movl	0x04(%esp),%eax
00000464	movzbl	0x08(%eax),%eax
00000468	andl	$0x01,%eax
0000046b	ret
0000046c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
CCommand::CCommand():
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	subl	$0x08,%esp
00000476	calll	0x0000047b
0000047b	popl	%eax
0000047c	movb	__ZL16s_bBuiltBreakSet.b-0x47b(%eax),%cl
00000482	testb	%cl,%cl
00000484	jne	0x000004a5
00000486	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x47b(%eax)
0000048d	leal	0x1604d-0x47b(%eax),%ecx
00000493	movl	%ecx,0x04(%esp)
00000497	leal	s_BreakSet-0x47b(%eax),%eax
0000049d	movl	%eax,(%esp)
000004a0	calll	CharacterSetBuild(characterset_t*, char const*)
000004a5	movl	0x08(%ebp),%eax
000004a8	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000004ae	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000004b5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
000004b9	addl	$0x08,%esp
000004bc	popl	%ebp
000004bd	ret
000004be	nop
CCommand::CCommand():
000004c0	pushl	%ebp
000004c1	movl	%esp,%ebp
000004c3	subl	$0x08,%esp
000004c6	calll	0x000004cb
000004cb	popl	%eax
000004cc	movb	__ZL16s_bBuiltBreakSet.b-0x4cb(%eax),%cl
000004d2	testb	%cl,%cl
000004d4	jne	0x000004f5
000004d6	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x4cb(%eax)
000004dd	leal	0x1604d-0x4cb(%eax),%ecx
000004e3	movl	%ecx,0x04(%esp)
000004e7	leal	s_BreakSet-0x4cb(%eax),%eax
000004ed	movl	%eax,(%esp)
000004f0	calll	CharacterSetBuild(characterset_t*, char const*)
000004f5	movl	0x08(%ebp),%eax
000004f8	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000004fe	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000505	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000509	addl	$0x08,%esp
0000050c	popl	%ebp
0000050d	ret
0000050e	nop
CCommand::Reset():
00000510	movl	0x04(%esp),%eax
00000514	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000051a	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000521	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000525	ret
00000526	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::CCommand(int, char const**):
00000530	jmp	CCommand::CCommand(int, char const**)
00000535	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::CCommand(int, char const**):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%ebx
00000544	pushl	%edi
00000545	pushl	%esi
00000546	subl	$0x2c,%esp
00000549	calll	0x0000054e
0000054e	popl	%eax
0000054f	movb	__ZL16s_bBuiltBreakSet.b-0x54e(%eax),%cl
00000555	testb	%cl,%cl
00000557	jne	0x00000578
00000559	movb	$0x01,__ZL16s_bBuiltBreakSet.b-0x54e(%eax)
00000560	leal	0x1604d-0x54e(%eax),%ecx
00000566	movl	%ecx,0x04(%esp)
0000056a	leal	s_BreakSet-0x54e(%eax),%eax
00000570	movl	%eax,(%esp)
00000573	calll	CharacterSetBuild(characterset_t*, char const*)
00000578	movl	0x0c(%ebp),%eax
0000057b	movl	0x08(%ebp),%edx
0000057e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edx)
00000585	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edx)
00000589	movl	%eax,(%edx)
0000058b	testl	%eax,%eax
0000058d	jle	0x0000067d
00000593	movl	0x10(%ebp),%ebx
00000596	leal	0x08(%edx),%eax
00000599	movl	%eax,0xf0(%ebp)
0000059c	movl	0x0c(%ebp),%eax
0000059f	leal	0xff(%eax),%eax
000005a2	movl	%eax,0xdc(%ebp)
000005a5	leal	0x00000208(%edx),%eax
000005ab	movl	%eax,0xe8(%ebp)
000005ae	xorl	%ecx,%ecx
000005b0	movl	%ecx,0xec(%ebp)
000005b3	movl	0xe8(%ebp),%edi
000005b6	movl	%edi,0x00000408(%edx,%ecx,4)
000005bd	movl	(%ebx,%ecx,4),%ebx
000005c0	movl	%ebx,(%esp)
000005c3	calll	_strlen
000005c8	movl	%eax,%esi
000005ca	leal	0x01(%esi),%eax
000005cd	movl	%eax,0xe4(%ebp)
000005d0	movl	%eax,0x08(%esp)
000005d4	movl	%ebx,0x04(%esp)
000005d8	movl	%edi,(%esp)
000005db	calll	_memcpy
000005e0	movl	0xec(%ebp),%eax
000005e3	testl	%eax,%eax
000005e5	jne	0x000005ed
000005e7	movl	0x08(%ebp),%ecx
000005ea	movl	%esi,0x04(%ecx)
000005ed	movl	0x10(%ebp),%ebx
000005f0	movl	(%ebx,%eax,4),%ecx
000005f3	movl	%ecx,0xe0(%ebp)
000005f6	movl	%ecx,(%esp)
000005f9	movl	$0x00000020,0x04(%esp)
00000601	movl	0xe4(%ebp),%ecx
00000604	addl	%ecx,0xe8(%ebp)
00000607	movl	%eax,%edi
00000609	calll	_strchr
0000060e	testl	%eax,%eax
00000610	jne	0x0000062a
00000612	movl	%esi,0x08(%esp)
00000616	movl	0xe0(%ebp),%eax
00000619	movl	%eax,0x04(%esp)
0000061d	movl	0xf0(%ebp),%eax
00000620	movl	%eax,(%esp)
00000623	calll	_memcpy
00000628	jmp	0x00000654
0000062a	movl	0xf0(%ebp),%edi
0000062d	movb	$0x22,(%edi)
00000630	movl	0xec(%ebp),%eax
00000633	movl	(%ebx,%eax,4),%eax
00000636	movl	%esi,0x08(%esp)
0000063a	movl	%eax,0x04(%esp)
0000063e	leal	0x01(%edi),%eax
00000641	movl	%eax,(%esp)
00000644	calll	_memcpy
00000649	movb	$0x22,0x01(%edi,%esi)
0000064e	movl	0xec(%ebp),%edi
00000651	addl	$0x02,%esi
00000654	cmpl	%edi,0xdc(%ebp)
00000657	movl	%edi,%ecx
00000659	jne	0x00000660
0000065b	addl	%esi,0xf0(%ebp)
0000065e	jmp	0x0000066e
00000660	movl	0xf0(%ebp),%eax
00000663	movb	$0x20,(%eax,%esi)
00000667	leal	0x01(%eax,%esi),%eax
0000066b	movl	%eax,0xf0(%ebp)
0000066e	incl	%ecx
0000066f	cmpl	%ecx,0x0c(%ebp)
00000672	movl	0x08(%ebp),%esi
00000675	movl	%esi,%edx
00000677	jne	0x000005b0
0000067d	addl	$0x2c,%esp
00000680	popl	%esi
00000681	popl	%edi
00000682	popl	%ebx
00000683	popl	%ebp
00000684	ret
00000685	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::DefaultBreakSet():
00000690	calll	0x00000695
00000695	popl	%eax
00000696	leal	s_BreakSet-0x695(%eax),%eax
0000069c	ret
0000069d	nopl	(%eax)
CCommand::Tokenize(char const*, characterset_t*):
000006a0	pushl	%ebp
000006a1	movl	%esp,%ebp
000006a3	pushl	%ebx
000006a4	pushl	%edi
000006a5	pushl	%esi
000006a6	subl	$0x6c,%esp
000006a9	calll	0x000006ae
000006ae	popl	%ecx
000006af	movl	0x08(%ebp),%edi
000006b2	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%edi)
000006b8	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edi)
000006bf	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edi)
000006c3	xorb	%bl,%bl
000006c5	movl	0x0c(%ebp),%edx
000006c8	testl	%edx,%edx
000006ca	je	0x00000832
000006d0	movl	0x10(%ebp),%eax
000006d3	movl	%edx,(%esp)
000006d6	leal	s_BreakSet-0x6ae(%ecx),%edx
000006dc	testl	%eax,%eax
000006de	cmovnel	%eax,%edx
000006e1	movl	%edx,0xa4(%ebp)
000006e4	movl	%ecx,%ebx
000006e6	calll	_strlen
000006eb	movl	%eax,%esi
000006ed	cmpl	$0x000001ff,%esi
000006f3	jl	0x0000070a
000006f5	leal	0x16054-0x6ae(%ebx),%eax
000006fb	movl	%eax,(%esp)
000006fe	calll	_Warning
00000703	xorb	%bl,%bl
00000705	jmp	0x00000832
0000070a	movl	%ebx,0xa8(%ebp)
0000070d	leal	0x08(%edi),%ebx
00000710	leal	0x01(%esi),%eax
00000713	movl	%eax,0x08(%esp)
00000717	movl	0x0c(%ebp),%eax
0000071a	movl	%eax,0x04(%esp)
0000071e	movl	%ebx,(%esp)
00000721	calll	_memcpy
00000726	movl	%esi,0x08(%esp)
0000072a	movl	%ebx,0x04(%esp)
0000072e	leal	0xb8(%ebp),%eax
00000731	movl	%eax,(%esp)
00000734	movl	$0x00000009,0x0c(%esp)
0000073c	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
00000741	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb4(%ebp)
00000748	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
00000750	movb	$0x01,%bl
00000752	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xcc(%ebp)
00000756	jne	0x0000080f
0000075c	movb	$0x01,%bl
0000075e	cmpl	$0x3f,(%edi)
00000761	jg	0x0000080f
00000767	movl	0xb4(%ebp),%eax
0000076a	leal	0x00000208(%edi,%eax),%ecx
00000771	movl	%ecx,0xb0(%ebp)
00000774	movl	%edi,%esi
00000776	movl	ConCommandBase::ConCommandBase(char const*, char const*, int),%edi
0000077b	subl	%eax,%edi
0000077d	movl	0xc4(%ebp),%eax
00000780	movl	%eax,0xac(%ebp)
00000783	movl	%edi,0x0c(%esp)
00000787	movl	%ecx,0x08(%esp)
0000078b	movl	0xa4(%ebp),%eax
0000078e	movl	%eax,0x04(%esp)
00000792	leal	0xb8(%ebp),%eax
00000795	movl	%eax,(%esp)
00000798	movl	$0x00000001,0x10(%esp)
000007a0	calll	CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
000007a5	movb	$0x01,%bl
000007a7	testl	%eax,%eax
000007a9	movl	%esi,%edx
000007ab	js	0x0000080f
000007ad	cmpl	%eax,%edi
000007af	movl	%eax,%esi
000007b1	je	0x000007fc
000007b3	movl	(%edx),%eax
000007b5	cmpl	$0x01,%eax
000007b8	jne	0x000007e0
000007ba	movl	0xc4(%ebp),%ecx
000007bd	movl	%ecx,0x04(%edx)
000007c0	cmpb	$0x22,0x07(%edx,%ecx)
000007c5	jne	0x000007cb
000007c7	decl	%ecx
000007c8	movl	%ecx,0x04(%edx)
000007cb	subl	%esi,%ecx
000007cd	movl	%ecx,0x04(%edx)
000007d0	cmpl	0xac(%ebp),%ecx
000007d3	jle	0x000007e0
000007d5	cmpb	$0x22,0x07(%edx,%ecx)
000007da	jne	0x000007e0
000007dc	decl	%ecx
000007dd	movl	%ecx,0x04(%edx)
000007e0	leal	0x01(%eax),%ecx
000007e3	movl	%ecx,(%edx)
000007e5	movl	0xb0(%ebp),%ecx
000007e8	movl	%ecx,0x00000408(%edx,%eax,4)
000007ef	cmpl	$0x40,(%edx)
000007f2	movl	%edx,%edi
000007f4	jl	0x0000087b
000007fa	jmp	0x0000086a
000007fc	movl	ConVar_Register(int, IConCommandBaseAccessor*),(%edx)
00000802	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%edx)
00000809	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%edx)
0000080d	xorb	%bl,%bl
0000080f	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConVar_Unregister()(%ebp)
00000813	js	0x00000832
00000815	movl	0xb8(%ebp),%eax
00000818	testl	%eax,%eax
0000081a	je	0x0000082b
0000081c	movl	%eax,(%esp)
0000081f	calll	_free
00000824	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb8(%ebp)
0000082b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xbc(%ebp)
00000832	movzbl	%bl,%eax
00000835	addl	$0x6c,%esp
00000838	popl	%esi
00000839	popl	%edi
0000083a	popl	%ebx
0000083b	popl	%ebp
0000083c	ret
0000083d	movl	%eax,%esi
0000083f	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConVar_Unregister()(%ebp)
00000843	js	0x00000862
00000845	movl	0xb8(%ebp),%eax
00000848	testl	%eax,%eax
0000084a	je	0x0000085b
0000084c	movl	%eax,(%esp)
0000084f	calll	_free
00000854	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xb8(%ebp)
0000085b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xbc(%ebp)
00000862	movl	%esi,(%esp)
00000865	calll	__Unwind_Resume
0000086a	movl	0xa8(%ebp),%eax
0000086d	leal	0x160ae-0x6ae(%eax),%eax
00000873	movl	%eax,(%esp)
00000876	calll	_Warning
0000087b	movl	0xb4(%ebp),%eax
0000087e	leal	0x01(%eax,%esi),%eax
00000882	movl	%eax,0xb4(%ebp)
00000885	jmp	0x00000750
0000088a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
CCommand::FindArg(char const*) const:
00000890	pushl	%ebp
00000891	movl	%esp,%ebp
00000893	pushl	%ebx
00000894	pushl	%edi
00000895	pushl	%esi
00000896	subl	$0x1c,%esp
00000899	calll	0x0000089e
0000089e	popl	%eax
0000089f	movl	%eax,0xf0(%ebp)
000008a2	movl	0x08(%ebp),%edx
000008a5	movl	(%edx),%eax
000008a7	movl	%eax,0xec(%ebp)
000008aa	movl	$0x00000103,%ebx
000008af	nop
000008b0	movl	%ebx,%esi
000008b2	leal	0xfffffefe(%esi),%ecx
000008b8	xorl	%eax,%eax
000008ba	cmpl	0xec(%ebp),%ecx
000008bd	jge	0x00000918
000008bf	cmpl	%ecx,(%edx)
000008c1	jg	0x000008d0
000008c3	movl	%edx,%edi
000008c5	movl	0xf0(%ebp),%eax
000008c8	leal	0x1604c-0x89e(%eax),%eax
000008ce	jmp	0x000008d5
000008d0	movl	(%edx,%esi,4),%eax
000008d3	movl	%edx,%edi
000008d5	movl	0x0c(%ebp),%ecx
000008d8	movl	%ecx,0x04(%esp)
000008dc	movl	%eax,(%esp)
000008df	leal	0x01(%esi),%ebx
000008e2	calll	V_stricmp(char const*, char const*)
000008e7	testl	%eax,%eax
000008e9	movl	%edi,%edx
000008eb	jne	0x000008b0
000008ed	addl	$0xfffffefe,%ebx
000008f3	movl	0xf0(%ebp),%eax
000008f6	leal	0x1604c-0x89e(%eax),%eax
000008fc	cmpl	0xec(%ebp),%ebx
000008ff	jge	0x00000918
00000901	testl	%ebx,%ebx
00000903	js	0x00000918
00000905	cmpl	%ebx,(%edx)
00000907	jg	0x00000914
00000909	movl	0xf0(%ebp),%eax
0000090c	leal	0x1604c-0x89e(%eax),%eax
00000912	jmp	0x00000918
00000914	movl	0x04(%edx,%esi,4),%eax
00000918	addl	$0x1c,%esp
0000091b	popl	%esi
0000091c	popl	%edi
0000091d	popl	%ebx
0000091e	popl	%ebp
0000091f	ret
CCommand::FindArgInt(char const*, int) const:
00000920	pushl	%ebp
00000921	movl	%esp,%ebp
00000923	pushl	%ebx
00000924	pushl	%edi
00000925	pushl	%esi
00000926	subl	$0x1c,%esp
00000929	calll	0x0000092e
0000092e	popl	%eax
0000092f	movl	%eax,0xf0(%ebp)
00000932	movl	0x08(%ebp),%ecx
00000935	movl	(%ecx),%eax
00000937	movl	%eax,0xec(%ebp)
0000093a	movl	$0x00000103,%esi
0000093f	nop
00000940	movl	%esi,%edi
00000942	leal	0xfffffefe(%edi),%eax
00000948	cmpl	0xec(%ebp),%eax
0000094b	jge	0x000009b4
0000094d	cmpl	%eax,(%ecx)
0000094f	jg	0x0000095e
00000951	movl	%ecx,%ebx
00000953	movl	0xf0(%ebp),%eax
00000956	leal	0x1604c-0x92e(%eax),%eax
0000095c	jmp	0x00000963
0000095e	movl	(%ecx,%edi,4),%eax
00000961	movl	%ecx,%ebx
00000963	movl	0x0c(%ebp),%ecx
00000966	movl	%ecx,0x04(%esp)
0000096a	movl	%eax,(%esp)
0000096d	leal	0x01(%edi),%esi
00000970	calll	V_stricmp(char const*, char const*)
00000975	testl	%eax,%eax
00000977	movl	%ebx,%ecx
00000979	jne	0x00000940
0000097b	addl	$0xfffffefe,%esi
00000981	movl	0xf0(%ebp),%eax
00000984	leal	0x1604c-0x92e(%eax),%eax
0000098a	cmpl	0xec(%ebp),%esi
0000098d	jge	0x000009aa
0000098f	testl	%esi,%esi
00000991	js	0x000009aa
00000993	cmpl	%esi,(%ecx)
00000995	jg	0x000009a2
00000997	movl	0xf0(%ebp),%eax
0000099a	leal	0x1604c-0x92e(%eax),%eax
000009a0	jmp	0x000009aa
000009a2	movl	0x04(%ecx,%edi,4),%eax
000009a6	testl	%eax,%eax
000009a8	je	0x000009b4
000009aa	movl	%eax,(%esp)
000009ad	calll	_atoi
000009b2	jmp	0x000009b7
000009b4	movl	0x10(%ebp),%eax
000009b7	addl	$0x1c,%esp
000009ba	popl	%esi
000009bb	popl	%edi
000009bc	popl	%ebx
000009bd	popl	%ebp
000009be	ret
000009bf	nop
DefaultCompletionFunc(char const*, char (*) [64]):
000009c0	xorl	%eax,%eax
000009c2	ret
000009c3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64])):
000009d0	pushl	%esi
000009d1	calll	0x000009d6
000009d6	popl	%ecx
000009d7	movl	0x08(%esp),%eax
000009db	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
000009e2	leal	vtable for ConCommand-0x9d6+0x00000008(%ecx),%edx
000009e8	movl	%edx,(%eax)
000009ea	movl	0x10(%esp),%edx
000009ee	movl	%edx,0x18(%eax)
000009f1	leal	DefaultCompletionFunc(char const*, char (*) [64])-0x9d6(%ecx),%esi
000009f7	movl	0x1c(%esp),%edx
000009fb	testl	%edx,%edx
000009fd	cmovnel	%edx,%esi
00000a00	movb	0x20(%eax),%dl
00000a03	movl	%esi,0x1c(%eax)
00000a06	setne	%dh
00000a09	andb	$0xf8,%dl
00000a0c	orb	%dh,%dl
00000a0e	movb	%dl,0x20(%eax)
00000a11	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000a15	movl	0x0c(%esp),%edx
00000a19	movl	%edx,0x0c(%eax)
00000a1c	leal	0x1604c-0x9d6(%ecx),%edx
00000a22	movl	0x14(%esp),%esi
00000a26	testl	%esi,%esi
00000a28	cmovnel	%esi,%edx
00000a2b	movl	%edx,0x10(%eax)
00000a2e	movl	0x18(%esp),%edx
00000a32	movl	%edx,0x14(%eax)
00000a35	testb	$0x01,%dl
00000a38	jne	0x00000a4b
00000a3a	movl	ConCommandBase::s_pConCommandBases-0x9d6(%ecx),%edx
00000a40	movl	%edx,0x04(%eax)
00000a43	movl	%eax,ConCommandBase::s_pConCommandBases-0x9d6(%ecx)
00000a49	jmp	0x00000a52
00000a4b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000a52	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x9d6(%ecx)
00000a5c	jne	0x00000a60
00000a5e	popl	%esi
00000a5f	ret
00000a60	movl	(%eax),%eax
00000a62	movl	0x28(%eax),%eax
00000a65	popl	%esi
00000a66	jmp	*%eax
00000a68	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64])):
00000a70	pushl	%esi
00000a71	calll	0x00000a76
00000a76	popl	%ecx
00000a77	movl	0x08(%esp),%eax
00000a7b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000a82	leal	vtable for ConCommand-0xa76+0x00000008(%ecx),%edx
00000a88	movl	%edx,(%eax)
00000a8a	movl	0x10(%esp),%edx
00000a8e	movl	%edx,0x18(%eax)
00000a91	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xa76(%ecx),%esi
00000a97	movl	0x1c(%esp),%edx
00000a9b	testl	%edx,%edx
00000a9d	cmovnel	%edx,%esi
00000aa0	movb	0x20(%eax),%dl
00000aa3	movl	%esi,0x1c(%eax)
00000aa6	setne	%dh
00000aa9	andb	$0xf8,%dl
00000aac	orb	%dh,%dl
00000aae	movb	%dl,0x20(%eax)
00000ab1	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000ab5	movl	0x0c(%esp),%edx
00000ab9	movl	%edx,0x0c(%eax)
00000abc	leal	0x1604c-0xa76(%ecx),%edx
00000ac2	movl	0x14(%esp),%esi
00000ac6	testl	%esi,%esi
00000ac8	cmovnel	%esi,%edx
00000acb	movl	%edx,0x10(%eax)
00000ace	movl	0x18(%esp),%edx
00000ad2	movl	%edx,0x14(%eax)
00000ad5	testb	$0x01,%dl
00000ad8	jne	0x00000aeb
00000ada	movl	ConCommandBase::s_pConCommandBases-0xa76(%ecx),%edx
00000ae0	movl	%edx,0x04(%eax)
00000ae3	movl	%eax,ConCommandBase::s_pConCommandBases-0xa76(%ecx)
00000ae9	jmp	0x00000af2
00000aeb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000af2	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xa76(%ecx)
00000afc	jne	0x00000b00
00000afe	popl	%esi
00000aff	ret
00000b00	movl	(%eax),%eax
00000b02	movl	0x28(%eax),%eax
00000b05	popl	%esi
00000b06	jmp	*%eax
00000b08	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64])):
00000b10	pushl	%esi
00000b11	calll	0x00000b16
00000b16	popl	%ecx
00000b17	movl	0x08(%esp),%eax
00000b1b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000b22	leal	vtable for ConCommand-0xb16+0x00000008(%ecx),%edx
00000b28	movl	%edx,(%eax)
00000b2a	movl	0x10(%esp),%edx
00000b2e	movl	%edx,0x18(%eax)
00000b31	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xb16(%ecx),%esi
00000b37	movl	0x1c(%esp),%edx
00000b3b	testl	%edx,%edx
00000b3d	cmovnel	%edx,%esi
00000b40	movb	0x20(%eax),%dl
00000b43	movl	%esi,0x1c(%eax)
00000b46	setne	%dh
00000b49	andb	$0xf8,%dl
00000b4c	orb	%dh,%dl
00000b4e	orb	$0x02,%dl
00000b51	movb	%dl,0x20(%eax)
00000b54	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000b58	movl	0x0c(%esp),%edx
00000b5c	movl	%edx,0x0c(%eax)
00000b5f	leal	0x1604c-0xb16(%ecx),%edx
00000b65	movl	0x14(%esp),%esi
00000b69	testl	%esi,%esi
00000b6b	cmovnel	%esi,%edx
00000b6e	movl	%edx,0x10(%eax)
00000b71	movl	0x18(%esp),%edx
00000b75	movl	%edx,0x14(%eax)
00000b78	testb	$0x01,%dl
00000b7b	jne	0x00000b8e
00000b7d	movl	ConCommandBase::s_pConCommandBases-0xb16(%ecx),%edx
00000b83	movl	%edx,0x04(%eax)
00000b86	movl	%eax,ConCommandBase::s_pConCommandBases-0xb16(%ecx)
00000b8c	jmp	0x00000b95
00000b8e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000b95	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xb16(%ecx)
00000b9f	jne	0x00000ba3
00000ba1	popl	%esi
00000ba2	ret
00000ba3	movl	(%eax),%eax
00000ba5	movl	0x28(%eax),%eax
00000ba8	popl	%esi
00000ba9	jmp	*%eax
00000bab	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64])):
00000bb0	pushl	%esi
00000bb1	calll	0x00000bb6
00000bb6	popl	%ecx
00000bb7	movl	0x08(%esp),%eax
00000bbb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000bc2	leal	vtable for ConCommand-0xbb6+0x00000008(%ecx),%edx
00000bc8	movl	%edx,(%eax)
00000bca	movl	0x10(%esp),%edx
00000bce	movl	%edx,0x18(%eax)
00000bd1	leal	DefaultCompletionFunc(char const*, char (*) [64])-0xbb6(%ecx),%esi
00000bd7	movl	0x1c(%esp),%edx
00000bdb	testl	%edx,%edx
00000bdd	cmovnel	%edx,%esi
00000be0	movb	0x20(%eax),%dl
00000be3	movl	%esi,0x1c(%eax)
00000be6	setne	%dh
00000be9	andb	$0xf8,%dl
00000bec	orb	%dh,%dl
00000bee	orb	$0x02,%dl
00000bf1	movb	%dl,0x20(%eax)
00000bf4	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000bf8	movl	0x0c(%esp),%edx
00000bfc	movl	%edx,0x0c(%eax)
00000bff	leal	0x1604c-0xbb6(%ecx),%edx
00000c05	movl	0x14(%esp),%esi
00000c09	testl	%esi,%esi
00000c0b	cmovnel	%esi,%edx
00000c0e	movl	%edx,0x10(%eax)
00000c11	movl	0x18(%esp),%edx
00000c15	movl	%edx,0x14(%eax)
00000c18	testb	$0x01,%dl
00000c1b	jne	0x00000c2e
00000c1d	movl	ConCommandBase::s_pConCommandBases-0xbb6(%ecx),%edx
00000c23	movl	%edx,0x04(%eax)
00000c26	movl	%eax,ConCommandBase::s_pConCommandBases-0xbb6(%ecx)
00000c2c	jmp	0x00000c35
00000c2e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000c35	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xbb6(%ecx)
00000c3f	jne	0x00000c43
00000c41	popl	%esi
00000c42	ret
00000c43	movl	(%eax),%eax
00000c45	movl	0x28(%eax),%eax
00000c48	popl	%esi
00000c49	jmp	*%eax
00000c4b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*):
00000c50	pushl	%esi
00000c51	calll	0x00000c56
00000c56	popl	%ecx
00000c57	movl	0x08(%esp),%eax
00000c5b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000c62	leal	vtable for ConCommand-0xc56+0x00000008(%ecx),%edx
00000c68	movl	%edx,(%eax)
00000c6a	movl	0x10(%esp),%edx
00000c6e	movl	%edx,0x18(%eax)
00000c71	movb	0x20(%eax),%dl
00000c74	movl	0x1c(%esp),%esi
00000c78	movl	%esi,0x1c(%eax)
00000c7b	testl	%esi,%esi
00000c7d	setne	%dh
00000c80	andb	$0xf8,%dl
00000c83	orb	%dh,%dl
00000c85	orb	$0x04,%dl
00000c88	movb	%dl,0x20(%eax)
00000c8b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000c8f	movl	0x0c(%esp),%edx
00000c93	movl	%edx,0x0c(%eax)
00000c96	leal	0x1604c-0xc56(%ecx),%edx
00000c9c	movl	0x14(%esp),%esi
00000ca0	testl	%esi,%esi
00000ca2	cmovnel	%esi,%edx
00000ca5	movl	%edx,0x10(%eax)
00000ca8	movl	0x18(%esp),%edx
00000cac	movl	%edx,0x14(%eax)
00000caf	testb	$0x01,%dl
00000cb2	jne	0x00000cc5
00000cb4	movl	ConCommandBase::s_pConCommandBases-0xc56(%ecx),%edx
00000cba	movl	%edx,0x04(%eax)
00000cbd	movl	%eax,ConCommandBase::s_pConCommandBases-0xc56(%ecx)
00000cc3	jmp	0x00000ccc
00000cc5	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000ccc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xc56(%ecx)
00000cd6	jne	0x00000cda
00000cd8	popl	%esi
00000cd9	ret
00000cda	movl	(%eax),%eax
00000cdc	movl	0x28(%eax),%eax
00000cdf	popl	%esi
00000ce0	jmp	*%eax
00000ce2	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*):
00000cf0	pushl	%esi
00000cf1	calll	0x00000cf6
00000cf6	popl	%ecx
00000cf7	movl	0x08(%esp),%eax
00000cfb	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000d02	leal	vtable for ConCommand-0xcf6+0x00000008(%ecx),%edx
00000d08	movl	%edx,(%eax)
00000d0a	movl	0x10(%esp),%edx
00000d0e	movl	%edx,0x18(%eax)
00000d11	movb	0x20(%eax),%dl
00000d14	movl	0x1c(%esp),%esi
00000d18	movl	%esi,0x1c(%eax)
00000d1b	testl	%esi,%esi
00000d1d	setne	%dh
00000d20	andb	$0xf8,%dl
00000d23	orb	%dh,%dl
00000d25	orb	$0x04,%dl
00000d28	movb	%dl,0x20(%eax)
00000d2b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%eax)
00000d2f	movl	0x0c(%esp),%edx
00000d33	movl	%edx,0x0c(%eax)
00000d36	leal	0x1604c-0xcf6(%ecx),%edx
00000d3c	movl	0x14(%esp),%esi
00000d40	testl	%esi,%esi
00000d42	cmovnel	%esi,%edx
00000d45	movl	%edx,0x10(%eax)
00000d48	movl	0x18(%esp),%edx
00000d4c	movl	%edx,0x14(%eax)
00000d4f	testb	$0x01,%dl
00000d52	jne	0x00000d65
00000d54	movl	ConCommandBase::s_pConCommandBases-0xcf6(%ecx),%edx
00000d5a	movl	%edx,0x04(%eax)
00000d5d	movl	%eax,ConCommandBase::s_pConCommandBases-0xcf6(%ecx)
00000d63	jmp	0x00000d6c
00000d65	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%eax)
00000d6c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0xcf6(%ecx)
00000d76	jne	0x00000d7a
00000d78	popl	%esi
00000d79	ret
00000d7a	movl	(%eax),%eax
00000d7c	movl	0x28(%eax),%eax
00000d7f	popl	%esi
00000d80	jmp	*%eax
00000d82	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000d90	jmp	operator delete(void*)
00000d95	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000da0	ret
00000da1	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::~ConCommand():
00000db0	ret
00000db1	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::IsCommand() const:
00000dc0	movl	$0x00000001,%eax
00000dc5	ret
00000dc6	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::Dispatch(CCommand const&):
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	subl	$0x08,%esp
00000dd6	movl	0x08(%ebp),%ecx
00000dd9	movb	0x20(%ecx),%dl
00000ddc	movl	0x0c(%ebp),%eax
00000ddf	testb	$0x02,%dl
00000de2	je	0x00000df2
00000de4	movl	0x18(%ecx),%ecx
00000de7	testl	%ecx,%ecx
00000de9	je	0x00000e12
00000deb	movl	%eax,(%esp)
00000dee	call	*%ecx
00000df0	jmp	0x00000e12
00000df2	testb	$0x04,%dl
00000df5	je	0x00000e0b
00000df7	movl	0x18(%ecx),%ecx
00000dfa	testl	%ecx,%ecx
00000dfc	je	0x00000e12
00000dfe	movl	(%ecx),%edx
00000e00	movl	%eax,0x04(%esp)
00000e04	movl	%ecx,(%esp)
00000e07	call	(%edx)
00000e09	jmp	0x00000e12
00000e0b	movl	0x18(%ecx),%eax
00000e0e	testl	%eax,%eax
00000e10	jne	0x00000e17
00000e12	addl	$0x08,%esp
00000e15	popl	%ebp
00000e16	ret
00000e17	addl	$0x08,%esp
00000e1a	popl	%ebp
00000e1b	jmp	*%eax
00000e1d	nopl	(%eax)
ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&):
00000e20	pushl	%ebp
00000e21	movl	%esp,%ebp
00000e23	pushl	%ebx
00000e24	pushl	%edi
00000e25	pushl	%esi
00000e26	subl	$0x0000103c,%esp
00000e2c	calll	0x00000e31
00000e31	popl	%eax
00000e32	movl	0x19685-0xe31(%eax),%eax
00000e38	movl	%eax,0xffffefd0(%ebp)
00000e3e	movl	(%eax),%eax
00000e40	movl	%eax,0xf0(%ebp)
00000e43	movl	0x10(%ebp),%ebx
00000e46	movl	0x0c(%ebp),%eax
00000e49	movl	0x08(%ebp),%ecx
00000e4c	testb	$0x04,0x20(%ecx)
00000e50	je	0x00000e9a
00000e52	movl	0x1c(%ecx),%ecx
00000e55	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefd4(%ebp)
00000e5f	testl	%ecx,%ecx
00000e61	je	0x00000e78
00000e63	movl	(%ecx),%edx
00000e65	movl	%ebx,0x08(%esp)
00000e69	movl	%eax,0x04(%esp)
00000e6d	movl	%ecx,(%esp)
00000e70	call	(%edx)
00000e72	movl	%eax,0xffffefd4(%ebp)
00000e78	movl	0xffffefd0(%ebp),%eax
00000e7e	movl	(%eax),%eax
00000e80	cmpl	0xf0(%ebp),%eax
00000e83	jne	0x00000ff3
00000e89	movl	0xffffefd4(%ebp),%eax
00000e8f	addl	$0x0000103c,%esp
00000e95	popl	%esi
00000e96	popl	%edi
00000e97	popl	%ebx
00000e98	popl	%ebp
00000e99	ret
00000e9a	movl	0x1c(%ecx),%ecx
00000e9d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefd4(%ebp)
00000ea7	testl	%ecx,%ecx
00000ea9	je	0x00000e78
00000eab	leal	0xffffeff0(%ebp),%esi
00000eb1	movl	%esi,0x04(%esp)
00000eb5	movl	%eax,(%esp)
00000eb8	call	*%ecx
00000eba	movl	%eax,0xffffefd4(%ebp)
00000ec0	movl	$0xffffffff,0xffffefdc(%ebp)
00000eca	jmp	0x00000ef6
00000ecc	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
00000ed0	movl	0xffffefe0(%ebp),%eax
00000ed6	testl	%eax,%eax
00000ed8	je	0x00000eec
00000eda	movl	%eax,(%esp)
00000edd	calll	_free
00000ee2	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe0(%ebp)
00000eec	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe4(%ebp)
00000ef6	movl	0xffffefdc(%ebp),%eax
00000efc	incl	%eax
00000efd	movl	%eax,0xffffefdc(%ebp)
00000f03	cmpl	0xffffefd4(%ebp),%eax
00000f09	jge	0x00000e78
00000f0f	movl	%esi,0x04(%esp)
00000f13	movl	%esi,0xffffefd8(%ebp)
00000f19	leal	0xffffefe0(%ebp),%eax
00000f1f	movl	%eax,(%esp)
00000f22	calll	CUtlString::CUtlString(char const*)
00000f27	movl	%ebx,%edx
00000f29	movl	0x04(%edx),%eax
00000f2c	movl	0x0c(%edx),%edi
00000f2f	leal	0x01(%edi),%ebx
00000f32	cmpl	%eax,%ebx
00000f34	movl	%edi,%ecx
00000f36	jle	0x00000f4f
00000f38	movl	%ebx,%ecx
00000f3a	subl	%eax,%ecx
00000f3c	movl	%ecx,0x04(%esp)
00000f40	movl	%edx,(%esp)
00000f43	movl	%edx,%esi
00000f45	calll	CUtlMemory<CUtlString, int>::Grow(int)
00000f4a	movl	%esi,%edx
00000f4c	movl	0x0c(%edx),%ecx
00000f4f	incl	%ecx
00000f50	movl	%ecx,0x0c(%edx)
00000f53	movl	(%edx),%eax
00000f55	movl	%eax,0x10(%edx)
00000f58	subl	%edi,%ecx
00000f5a	decl	%ecx
00000f5b	testl	%ecx,%ecx
00000f5d	jle	0x00000f84
00000f5f	shll	$0x04,%ecx
00000f62	movl	%ecx,0x08(%esp)
00000f66	movl	%edi,%ecx
00000f68	shll	$0x04,%ecx
00000f6b	addl	%eax,%ecx
00000f6d	movl	%ecx,0x04(%esp)
00000f71	shll	$0x04,%ebx
00000f74	addl	%eax,%ebx
00000f76	movl	%ebx,(%esp)
00000f79	movl	%edx,%ebx
00000f7b	calll	_memmove
00000f80	movl	%ebx,%edx
00000f82	movl	(%edx),%eax
00000f84	movl	%edx,%ebx
00000f86	shll	$0x04,%edi
00000f89	addl	%eax,%edi
00000f8b	movl	0xffffefd8(%ebp),%esi
00000f91	je	0x00000fa5
00000f93	leal	0xffffefe0(%ebp),%eax
00000f99	movl	%eax,0x04(%esp)
00000f9d	movl	%edi,(%esp)
00000fa0	calll	CUtlString::CUtlString(CUtlString const&)
00000fa5	addl	$0x40,%esi
00000fa8	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe8(%ebp)
00000faf	js	0x00000ef6
00000fb5	jmp	0x00000ed0
00000fba	movl	%eax,%esi
00000fbc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe8(%ebp)
00000fc3	js	0x00000feb
00000fc5	movl	0xffffefe0(%ebp),%eax
00000fcb	testl	%eax,%eax
00000fcd	je	0x00000fe1
00000fcf	movl	%eax,(%esp)
00000fd2	calll	_free
00000fd7	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe0(%ebp)
00000fe1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xffffefe4(%ebp)
00000feb	movl	%esi,(%esp)
00000fee	calll	__Unwind_Resume
00000ff3	calll	___stack_chk_fail
00000ff8	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConCommand::CanAutoComplete():
00001000	movl	0x04(%esp),%eax
00001004	movzbl	0x20(%eax),%eax
00001008	andl	$0x01,%eax
0000100b	ret
0000100c	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int):
00001010	jmp	ConVar::ConVar(char const*, char const*, int)
00001015	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int):
00001020	pushl	%ebp
00001021	movl	%esp,%ebp
00001023	pushl	%ebx
00001024	pushl	%edi
00001025	pushl	%esi
00001026	subl	$0x1c,%esp
00001029	calll	0x0000102e
0000102e	popl	%ecx
0000102f	movl	%ecx,0xec(%ebp)
00001032	movl	0x08(%ebp),%ebx
00001035	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001039	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001040	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001047	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000104e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001055	leal	vtable for ConVar-0x102e+0x00000008(%ecx),%eax
0000105b	movl	%eax,(%ebx)
0000105d	leal	vtable for ConVar-0x102e+0x00000060(%ecx),%eax
00001063	movl	%eax,0x18(%ebx)
00001066	movl	%ebx,0x1c(%ebx)
00001069	leal	0x1604c-0x102e(%ecx),%eax
0000106f	movl	%eax,0xe8(%ebp)
00001072	movl	0x10(%ebp),%esi
00001075	testl	%esi,%esi
00001077	cmovel	%eax,%esi
0000107a	movl	%esi,0x20(%ebx)
0000107d	movl	%esi,(%esp)
00001080	calll	_strlen
00001085	movl	%eax,%edi
00001087	incl	%edi
00001088	movl	%edi,0x28(%ebx)
0000108b	testl	%edi,%edi
0000108d	movl	$0xffffffff,%eax
00001092	cmovnsl	%edi,%eax
00001095	movl	%eax,(%esp)
00001098	calll	operator new[](unsigned long)
0000109d	movl	%eax,0x24(%ebx)
000010a0	movl	%edi,0x08(%esp)
000010a4	movl	%esi,0x04(%esp)
000010a8	movl	%eax,(%esp)
000010ab	movl	%eax,%esi
000010ad	calll	_memcpy
000010b2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000010b6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000010bd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
000010c1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
000010c8	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
000010cf	movl	%esi,(%esp)
000010d2	calll	_atof
000010d7	fstps	0xf0(%ebp)
000010da	movss	0xf0(%ebp),%xmm0
000010df	movss	%xmm0,0x2c(%ebx)
000010e4	cvttss2si	%xmm0,%eax
000010e8	movl	%eax,0x30(%ebx)
000010eb	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000010ef	movl	0x0c(%ebp),%eax
000010f2	movl	%eax,0x0c(%ebx)
000010f5	movl	0xe8(%ebp),%eax
000010f8	movl	%eax,0x10(%ebx)
000010fb	movl	0x14(%ebp),%eax
000010fe	movl	%eax,0x14(%ebx)
00001101	testb	$0x01,%al
00001103	jne	0x0000111b
00001105	movl	0xec(%ebp),%ecx
00001108	movl	ConCommandBase::s_pConCommandBases-0x102e(%ecx),%eax
0000110e	movl	%eax,0x04(%ebx)
00001111	movl	%ebx,ConCommandBase::s_pConCommandBases-0x102e(%ecx)
00001117	movl	%ecx,%eax
00001119	jmp	0x00001125
0000111b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001122	movl	0xec(%ebp),%eax
00001125	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x102e(%eax)
0000112f	jne	0x00001139
00001131	addl	$0x1c,%esp
00001134	popl	%esi
00001135	popl	%edi
00001136	popl	%ebx
00001137	popl	%ebp
00001138	ret
00001139	movl	(%ebx),%eax
0000113b	movl	0x28(%eax),%eax
0000113e	addl	$0x1c,%esp
00001141	popl	%esi
00001142	popl	%edi
00001143	popl	%ebx
00001144	popl	%ebp
00001145	jmp	*%eax
00001147	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*):
00001150	jmp	ConVar::ConVar(char const*, char const*, int, char const*)
00001155	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*):
00001160	pushl	%ebp
00001161	movl	%esp,%ebp
00001163	pushl	%ebx
00001164	pushl	%edi
00001165	pushl	%esi
00001166	subl	$0x1c,%esp
00001169	calll	0x0000116e
0000116e	popl	%ecx
0000116f	movl	%ecx,0xec(%ebp)
00001172	movl	0x08(%ebp),%ebx
00001175	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001179	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001180	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001187	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000118e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001195	leal	vtable for ConVar-0x116e+0x00000008(%ecx),%eax
0000119b	movl	%eax,(%ebx)
0000119d	leal	vtable for ConVar-0x116e+0x00000060(%ecx),%eax
000011a3	movl	%eax,0x18(%ebx)
000011a6	movl	%ebx,0x1c(%ebx)
000011a9	leal	0x1604c-0x116e(%ecx),%eax
000011af	movl	%eax,0xe8(%ebp)
000011b2	movl	0x10(%ebp),%esi
000011b5	testl	%esi,%esi
000011b7	cmovel	%eax,%esi
000011ba	movl	%esi,0x20(%ebx)
000011bd	movl	%esi,(%esp)
000011c0	calll	_strlen
000011c5	movl	%eax,%edi
000011c7	incl	%edi
000011c8	movl	%edi,0x28(%ebx)
000011cb	testl	%edi,%edi
000011cd	movl	$0xffffffff,%eax
000011d2	cmovnsl	%edi,%eax
000011d5	movl	%eax,(%esp)
000011d8	calll	operator new[](unsigned long)
000011dd	movl	%eax,0x24(%ebx)
000011e0	movl	%edi,0x08(%esp)
000011e4	movl	%esi,0x04(%esp)
000011e8	movl	%eax,(%esp)
000011eb	movl	%eax,%esi
000011ed	calll	_memcpy
000011f2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000011f6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000011fd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
00001201	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
00001208	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
0000120f	movl	%esi,(%esp)
00001212	calll	_atof
00001217	fstps	0xf0(%ebp)
0000121a	movss	0xf0(%ebp),%xmm0
0000121f	movss	%xmm0,0x2c(%ebx)
00001224	cvttss2si	%xmm0,%eax
00001228	movl	%eax,0x30(%ebx)
0000122b	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
0000122f	movl	0x0c(%ebp),%eax
00001232	movl	%eax,0x0c(%ebx)
00001235	movl	0x18(%ebp),%eax
00001238	testl	%eax,%eax
0000123a	movl	0xe8(%ebp),%ecx
0000123d	cmovnel	%eax,%ecx
00001240	movl	%ecx,0x10(%ebx)
00001243	movl	0x14(%ebp),%eax
00001246	movl	%eax,0x14(%ebx)
00001249	testb	$0x01,%al
0000124b	jne	0x00001263
0000124d	movl	0xec(%ebp),%ecx
00001250	movl	ConCommandBase::s_pConCommandBases-0x116e(%ecx),%eax
00001256	movl	%eax,0x04(%ebx)
00001259	movl	%ebx,ConCommandBase::s_pConCommandBases-0x116e(%ecx)
0000125f	movl	%ecx,%eax
00001261	jmp	0x0000126d
00001263	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
0000126a	movl	0xec(%ebp),%eax
0000126d	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x116e(%eax)
00001277	jne	0x00001281
00001279	addl	$0x1c,%esp
0000127c	popl	%esi
0000127d	popl	%edi
0000127e	popl	%ebx
0000127f	popl	%ebp
00001280	ret
00001281	movl	(%ebx),%eax
00001283	movl	0x28(%eax),%eax
00001286	addl	$0x1c,%esp
00001289	popl	%esi
0000128a	popl	%edi
0000128b	popl	%ebx
0000128c	popl	%ebp
0000128d	jmp	*%eax
0000128f	nop
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float):
00001290	pushl	%ebp
00001291	movl	%esp,%ebp
00001293	subl	$0x28,%esp
00001296	movss	0x28(%ebp),%xmm0
0000129b	movss	%xmm0,0x20(%esp)
000012a1	movb	0x24(%ebp),%al
000012a4	movzbl	%al,%eax
000012a7	movl	%eax,0x1c(%esp)
000012ab	movss	0x20(%ebp),%xmm0
000012b0	movss	%xmm0,0x18(%esp)
000012b6	movb	0x1c(%ebp),%al
000012b9	movzbl	%al,%eax
000012bc	movl	%eax,0x14(%esp)
000012c0	movl	0x18(%ebp),%eax
000012c3	movl	%eax,0x10(%esp)
000012c7	movl	0x14(%ebp),%eax
000012ca	movl	%eax,0x0c(%esp)
000012ce	movl	0x10(%ebp),%eax
000012d1	movl	%eax,0x08(%esp)
000012d5	movl	0x0c(%ebp),%eax
000012d8	movl	%eax,0x04(%esp)
000012dc	movl	0x08(%ebp),%eax
000012df	movl	%eax,(%esp)
000012e2	calll	ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
000012e7	addl	$0x28,%esp
000012ea	popl	%ebp
000012eb	ret
000012ec	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float):
000012f0	pushl	%ebp
000012f1	movl	%esp,%ebp
000012f3	pushl	%ebx
000012f4	pushl	%edi
000012f5	pushl	%esi
000012f6	subl	$0x1c,%esp
000012f9	calll	0x000012fe
000012fe	popl	%ecx
000012ff	movl	%ecx,0xec(%ebp)
00001302	movl	0x08(%ebp),%ebx
00001305	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001309	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001310	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001317	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000131e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001325	leal	vtable for ConVar-0x12fe+0x00000008(%ecx),%eax
0000132b	movl	%eax,(%ebx)
0000132d	leal	vtable for ConVar-0x12fe+0x00000060(%ecx),%eax
00001333	movl	%eax,0x18(%ebx)
00001336	movl	%ebx,0x1c(%ebx)
00001339	leal	0x1604c-0x12fe(%ecx),%eax
0000133f	movl	%eax,0xe8(%ebp)
00001342	movl	0x10(%ebp),%esi
00001345	testl	%esi,%esi
00001347	cmovel	%eax,%esi
0000134a	movl	%esi,0x20(%ebx)
0000134d	movl	%esi,(%esp)
00001350	calll	_strlen
00001355	movl	%eax,%edi
00001357	incl	%edi
00001358	movl	%edi,0x28(%ebx)
0000135b	testl	%edi,%edi
0000135d	movl	$0xffffffff,%eax
00001362	cmovnsl	%edi,%eax
00001365	movl	%eax,(%esp)
00001368	calll	operator new[](unsigned long)
0000136d	movl	%eax,0x24(%ebx)
00001370	movl	%edi,0x08(%esp)
00001374	movl	%esi,0x04(%esp)
00001378	movl	%eax,(%esp)
0000137b	movl	%eax,%esi
0000137d	calll	_memcpy
00001382	movb	0x1c(%ebp),%al
00001385	movb	%al,0x34(%ebx)
00001388	movss	0x20(%ebp),%xmm0
0000138d	movss	%xmm0,0x38(%ebx)
00001392	movb	0x24(%ebp),%al
00001395	movb	%al,0x3c(%ebx)
00001398	movss	0x28(%ebp),%xmm0
0000139d	movss	%xmm0,0x40(%ebx)
000013a2	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x44(%ebx)
000013a9	movl	%esi,(%esp)
000013ac	calll	_atof
000013b1	fstps	0xf0(%ebp)
000013b4	movss	0xf0(%ebp),%xmm0
000013b9	movss	%xmm0,0x2c(%ebx)
000013be	cvttss2si	%xmm0,%eax
000013c2	movl	%eax,0x30(%ebx)
000013c5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000013c9	movl	0x0c(%ebp),%eax
000013cc	movl	%eax,0x0c(%ebx)
000013cf	movl	0x18(%ebp),%eax
000013d2	testl	%eax,%eax
000013d4	movl	0xe8(%ebp),%ecx
000013d7	cmovnel	%eax,%ecx
000013da	movl	%ecx,0x10(%ebx)
000013dd	movl	0x14(%ebp),%eax
000013e0	movl	%eax,0x14(%ebx)
000013e3	testb	$0x01,%al
000013e5	jne	0x000013fd
000013e7	movl	0xec(%ebp),%ecx
000013ea	movl	ConCommandBase::s_pConCommandBases-0x12fe(%ecx),%eax
000013f0	movl	%eax,0x04(%ebx)
000013f3	movl	%ebx,ConCommandBase::s_pConCommandBases-0x12fe(%ecx)
000013f9	movl	%ecx,%eax
000013fb	jmp	0x00001407
000013fd	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001404	movl	0xec(%ebp),%eax
00001407	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x12fe(%eax)
00001411	jne	0x0000141b
00001413	addl	$0x1c,%esp
00001416	popl	%esi
00001417	popl	%edi
00001418	popl	%ebx
00001419	popl	%ebp
0000141a	ret
0000141b	movl	(%ebx),%eax
0000141d	movl	0x28(%eax),%eax
00001420	addl	$0x1c,%esp
00001423	popl	%esi
00001424	popl	%edi
00001425	popl	%ebx
00001426	popl	%ebp
00001427	jmp	*%eax
00001429	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float)):
00001430	jmp	ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
00001435	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float)):
00001440	pushl	%ebp
00001441	movl	%esp,%ebp
00001443	pushl	%ebx
00001444	pushl	%edi
00001445	pushl	%esi
00001446	subl	$0x1c,%esp
00001449	calll	0x0000144e
0000144e	popl	%ecx
0000144f	movl	%ecx,0xec(%ebp)
00001452	movl	0x08(%ebp),%ebx
00001455	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001459	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001460	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001467	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000146e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001475	leal	vtable for ConVar-0x144e+0x00000008(%ecx),%eax
0000147b	movl	%eax,(%ebx)
0000147d	leal	vtable for ConVar-0x144e+0x00000060(%ecx),%eax
00001483	movl	%eax,0x18(%ebx)
00001486	movl	%ebx,0x1c(%ebx)
00001489	leal	0x1604c-0x144e(%ecx),%eax
0000148f	movl	%eax,0xe8(%ebp)
00001492	movl	0x10(%ebp),%esi
00001495	testl	%esi,%esi
00001497	cmovel	%eax,%esi
0000149a	movl	%esi,0x20(%ebx)
0000149d	movl	%esi,(%esp)
000014a0	calll	_strlen
000014a5	movl	%eax,%edi
000014a7	incl	%edi
000014a8	movl	%edi,0x28(%ebx)
000014ab	testl	%edi,%edi
000014ad	movl	$0xffffffff,%eax
000014b2	cmovnsl	%edi,%eax
000014b5	movl	%eax,(%esp)
000014b8	calll	operator new[](unsigned long)
000014bd	movl	%eax,0x24(%ebx)
000014c0	movl	%edi,0x08(%esp)
000014c4	movl	%esi,0x04(%esp)
000014c8	movl	%eax,(%esp)
000014cb	movl	%eax,%esi
000014cd	calll	_memcpy
000014d2	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x34(%ebx)
000014d6	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x38(%ebx)
000014dd	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x3c(%ebx)
000014e1	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x40(%ebx)
000014e8	movl	0x1c(%ebp),%eax
000014eb	movl	%eax,0x44(%ebx)
000014ee	movl	%esi,(%esp)
000014f1	calll	_atof
000014f6	fstps	0xf0(%ebp)
000014f9	movss	0xf0(%ebp),%xmm0
000014fe	movss	%xmm0,0x2c(%ebx)
00001503	cvttss2si	%xmm0,%eax
00001507	movl	%eax,0x30(%ebx)
0000150a	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
0000150e	movl	0x0c(%ebp),%eax
00001511	movl	%eax,0x0c(%ebx)
00001514	movl	0x18(%ebp),%eax
00001517	testl	%eax,%eax
00001519	movl	0xe8(%ebp),%ecx
0000151c	cmovnel	%eax,%ecx
0000151f	movl	%ecx,0x10(%ebx)
00001522	movl	0x14(%ebp),%eax
00001525	movl	%eax,0x14(%ebx)
00001528	testb	$0x01,%al
0000152a	jne	0x00001542
0000152c	movl	0xec(%ebp),%ecx
0000152f	movl	ConCommandBase::s_pConCommandBases-0x144e(%ecx),%eax
00001535	movl	%eax,0x04(%ebx)
00001538	movl	%ebx,ConCommandBase::s_pConCommandBases-0x144e(%ecx)
0000153e	movl	%ecx,%eax
00001540	jmp	0x0000154c
00001542	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001549	movl	0xec(%ebp),%eax
0000154c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x144e(%eax)
00001556	jne	0x00001560
00001558	addl	$0x1c,%esp
0000155b	popl	%esi
0000155c	popl	%edi
0000155d	popl	%ebx
0000155e	popl	%ebp
0000155f	ret
00001560	movl	(%ebx),%eax
00001562	movl	0x28(%eax),%eax
00001565	addl	$0x1c,%esp
00001568	popl	%esi
00001569	popl	%edi
0000156a	popl	%ebx
0000156b	popl	%ebp
0000156c	jmp	*%eax
0000156e	nop
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
00001570	pushl	%ebp
00001571	movl	%esp,%ebp
00001573	subl	$0x28,%esp
00001576	movl	0x2c(%ebp),%eax
00001579	movl	%eax,0x24(%esp)
0000157d	movss	0x28(%ebp),%xmm0
00001582	movss	%xmm0,0x20(%esp)
00001588	movb	0x24(%ebp),%al
0000158b	movzbl	%al,%eax
0000158e	movl	%eax,0x1c(%esp)
00001592	movss	0x20(%ebp),%xmm0
00001597	movss	%xmm0,0x18(%esp)
0000159d	movb	0x1c(%ebp),%al
000015a0	movzbl	%al,%eax
000015a3	movl	%eax,0x14(%esp)
000015a7	movl	0x18(%ebp),%eax
000015aa	movl	%eax,0x10(%esp)
000015ae	movl	0x14(%ebp),%eax
000015b1	movl	%eax,0x0c(%esp)
000015b5	movl	0x10(%ebp),%eax
000015b8	movl	%eax,0x08(%esp)
000015bc	movl	0x0c(%ebp),%eax
000015bf	movl	%eax,0x04(%esp)
000015c3	movl	0x08(%ebp),%eax
000015c6	movl	%eax,(%esp)
000015c9	calll	ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
000015ce	addl	$0x28,%esp
000015d1	popl	%ebp
000015d2	ret
000015d3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
000015e0	pushl	%ebp
000015e1	movl	%esp,%ebp
000015e3	pushl	%ebx
000015e4	pushl	%edi
000015e5	pushl	%esi
000015e6	subl	$0x1c,%esp
000015e9	calll	0x000015ee
000015ee	popl	%ecx
000015ef	movl	%ecx,0xec(%ebp)
000015f2	movl	0x08(%ebp),%ebx
000015f5	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000015f9	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x0c(%ebx)
00001600	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x10(%ebx)
00001607	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x14(%ebx)
0000160e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001615	leal	vtable for ConVar-0x15ee+0x00000008(%ecx),%eax
0000161b	movl	%eax,(%ebx)
0000161d	leal	vtable for ConVar-0x15ee+0x00000060(%ecx),%eax
00001623	movl	%eax,0x18(%ebx)
00001626	movl	%ebx,0x1c(%ebx)
00001629	leal	0x1604c-0x15ee(%ecx),%eax
0000162f	movl	%eax,0xe8(%ebp)
00001632	movl	0x10(%ebp),%esi
00001635	testl	%esi,%esi
00001637	cmovel	%eax,%esi
0000163a	movl	%esi,0x20(%ebx)
0000163d	movl	%esi,(%esp)
00001640	calll	_strlen
00001645	movl	%eax,%edi
00001647	incl	%edi
00001648	movl	%edi,0x28(%ebx)
0000164b	testl	%edi,%edi
0000164d	movl	$0xffffffff,%eax
00001652	cmovnsl	%edi,%eax
00001655	movl	%eax,(%esp)
00001658	calll	operator new[](unsigned long)
0000165d	movl	%eax,0x24(%ebx)
00001660	movl	%edi,0x08(%esp)
00001664	movl	%esi,0x04(%esp)
00001668	movl	%eax,(%esp)
0000166b	movl	%eax,%esi
0000166d	calll	_memcpy
00001672	movb	0x1c(%ebp),%al
00001675	movb	%al,0x34(%ebx)
00001678	movss	0x20(%ebp),%xmm0
0000167d	movss	%xmm0,0x38(%ebx)
00001682	movb	0x24(%ebp),%al
00001685	movb	%al,0x3c(%ebx)
00001688	movss	0x28(%ebp),%xmm0
0000168d	movss	%xmm0,0x40(%ebx)
00001692	movl	0x2c(%ebp),%eax
00001695	movl	%eax,0x44(%ebx)
00001698	movl	%esi,(%esp)
0000169b	calll	_atof
000016a0	fstps	0xf0(%ebp)
000016a3	movss	0xf0(%ebp),%xmm0
000016a8	movss	%xmm0,0x2c(%ebx)
000016ad	cvttss2si	%xmm0,%eax
000016b1	movl	%eax,0x30(%ebx)
000016b4	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
000016b8	movl	0x0c(%ebp),%eax
000016bb	movl	%eax,0x0c(%ebx)
000016be	movl	0x18(%ebp),%eax
000016c1	testl	%eax,%eax
000016c3	movl	0xe8(%ebp),%ecx
000016c6	cmovnel	%eax,%ecx
000016c9	movl	%ecx,0x10(%ebx)
000016cc	movl	0x14(%ebp),%eax
000016cf	movl	%eax,0x14(%ebx)
000016d2	testb	$0x01,%al
000016d4	jne	0x000016ec
000016d6	movl	0xec(%ebp),%ecx
000016d9	movl	ConCommandBase::s_pConCommandBases-0x15ee(%ecx),%eax
000016df	movl	%eax,0x04(%ebx)
000016e2	movl	%ebx,ConCommandBase::s_pConCommandBases-0x15ee(%ecx)
000016e8	movl	%ecx,%eax
000016ea	jmp	0x000016f6
000016ec	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
000016f3	movl	0xec(%ebp),%eax
000016f6	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x15ee(%eax)
00001700	jne	0x0000170a
00001702	addl	$0x1c,%esp
00001705	popl	%esi
00001706	popl	%edi
00001707	popl	%ebx
00001708	popl	%ebp
00001709	ret
0000170a	movl	(%ebx),%eax
0000170c	movl	0x28(%eax),%eax
0000170f	addl	$0x1c,%esp
00001712	popl	%esi
00001713	popl	%edi
00001714	popl	%ebx
00001715	popl	%ebp
00001716	jmp	*%eax
00001718	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	subl	$0x08,%esp
00001726	calll	0x0000172b
0000172b	popl	%eax
0000172c	leal	vtable for ConVar-0x172b+0x00000008(%eax),%edx
00001732	movl	0x08(%ebp),%ecx
00001735	movl	%edx,(%ecx)
00001737	leal	vtable for ConVar-0x172b+0x00000060(%eax),%eax
0000173d	movl	%eax,0x18(%ecx)
00001740	movl	0x24(%ecx),%eax
00001743	testl	%eax,%eax
00001745	je	0x0000174f
00001747	movl	%eax,(%esp)
0000174a	calll	operator delete[](void*)
0000174f	addl	$0x08,%esp
00001752	popl	%ebp
00001753	jmp	operator delete(void*)
00001758	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
00001760	pushl	%ebp
00001761	movl	%esp,%ebp
00001763	pushl	%esi
00001764	pushl	%eax
00001765	calll	0x0000176a
0000176a	popl	%eax
0000176b	leal	vtable for ConVar-0x176a+0x00000008(%eax),%ecx
00001771	movl	0x08(%ebp),%esi
00001774	movl	%ecx,(%esi)
00001776	leal	vtable for ConVar-0x176a+0x00000060(%eax),%eax
0000177c	movl	%eax,0x18(%esi)
0000177f	movl	0x24(%esi),%eax
00001782	testl	%eax,%eax
00001784	je	0x00001795
00001786	movl	%eax,(%esp)
00001789	calll	operator delete[](void*)
0000178e	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x24(%esi)
00001795	addl	$0x04,%esp
00001798	popl	%esi
00001799	popl	%ebp
0000179a	ret
0000179b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::~ConVar():
000017a0	pushl	%ebp
000017a1	movl	%esp,%ebp
000017a3	pushl	%esi
000017a4	pushl	%eax
000017a5	calll	0x000017aa
000017aa	popl	%eax
000017ab	leal	vtable for ConVar-0x17aa+0x00000008(%eax),%ecx
000017b1	movl	0x08(%ebp),%esi
000017b4	movl	%ecx,(%esi)
000017b6	leal	vtable for ConVar-0x17aa+0x00000060(%eax),%eax
000017bc	movl	%eax,0x18(%esi)
000017bf	movl	0x24(%esi),%eax
000017c2	testl	%eax,%eax
000017c4	je	0x000017d5
000017c6	movl	%eax,(%esp)
000017c9	calll	operator delete[](void*)
000017ce	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x24(%esi)
000017d5	addl	$0x04,%esp
000017d8	popl	%esi
000017d9	popl	%ebp
000017da	ret
000017db	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InstallChangeCallback(void (*)(IConVar*, char const*, float)):
000017e0	pushl	%ebp
000017e1	movl	%esp,%ebp
000017e3	subl	$0x18,%esp
000017e6	movl	0x08(%ebp),%eax
000017e9	movl	0x1c(%eax),%ecx
000017ec	movl	0x0c(%ebp),%edx
000017ef	movl	%edx,0x44(%ecx)
000017f2	movl	0x1c(%eax),%ecx
000017f5	movl	0x44(%ecx),%ecx
000017f8	testl	%ecx,%ecx
000017fa	je	0x00001816
000017fc	movl	0x24(%eax),%edx
000017ff	movss	0x2c(%eax),%xmm0
00001804	movss	%xmm0,0x08(%esp)
0000180a	movl	%edx,0x04(%esp)
0000180e	addl	$0x18,%eax
00001811	movl	%eax,(%esp)
00001814	call	*%ecx
00001816	addl	$0x18,%esp
00001819	popl	%ebp
0000181a	ret
0000181b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::IsFlagSet(int) const:
00001820	movl	0x04(%esp),%eax
00001824	movl	0x1c(%eax),%eax
00001827	movl	0x14(%eax),%eax
0000182a	testl	0x08(%esp),%eax
0000182e	setne	%al
00001831	movzbl	%al,%eax
00001834	ret
00001835	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::IsFlagSet(int) const:
00001840	movl	0x04(%esp),%eax
00001844	movl	0x04(%eax),%eax
00001847	movl	0x14(%eax),%eax
0000184a	testl	0x08(%esp),%eax
0000184e	setne	%al
00001851	movzbl	%al,%eax
00001854	ret
00001855	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::GetHelpText() const:
00001860	movl	0x04(%esp),%eax
00001864	movl	0x1c(%eax),%eax
00001867	movl	0x10(%eax),%eax
0000186a	ret
0000186b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::AddFlags(int):
00001870	movl	0x04(%esp),%eax
00001874	movl	0x1c(%eax),%eax
00001877	movl	0x08(%esp),%ecx
0000187b	orl	%ecx,0x14(%eax)
0000187e	ret
0000187f	nop
ConVar::IsRegistered() const:
00001880	movl	0x04(%esp),%eax
00001884	movl	0x1c(%eax),%eax
00001887	movzbl	0x08(%eax),%eax
0000188b	andl	$0x01,%eax
0000188e	ret
0000188f	nop
ConVar::GetName() const:
00001890	movl	0x04(%esp),%eax
00001894	movl	0x1c(%eax),%eax
00001897	movl	0x0c(%eax),%eax
0000189a	ret
0000189b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::GetName() const:
000018a0	movl	0x04(%esp),%eax
000018a4	movl	0x04(%eax),%eax
000018a7	movl	0x0c(%eax),%eax
000018aa	ret
000018ab	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::IsCommand() const:
000018b0	xorl	%eax,%eax
000018b2	ret
000018b3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::Init():
000018c0	pushl	%ebp
000018c1	movl	%esp,%ebp
000018c3	subl	$0x08,%esp
000018c6	calll	0x000018cb
000018cb	popl	%eax
000018cc	movl	ConCommandBase::s_pAccessor-0x18cb(%eax),%eax
000018d2	testl	%eax,%eax
000018d4	je	0x000018e4
000018d6	movl	0x08(%ebp),%edx
000018d9	movl	(%eax),%ecx
000018db	movl	%edx,0x04(%esp)
000018df	movl	%eax,(%esp)
000018e2	call	(%ecx)
000018e4	addl	$0x08,%esp
000018e7	popl	%ebp
000018e8	ret
000018e9	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVar::InternalSetValue(char const*):
000018f0	pushl	%ebp
000018f1	movl	%esp,%ebp
000018f3	pushl	%ebx
000018f4	pushl	%edi
000018f5	pushl	%esi
000018f6	subl	$0x4c,%esp
000018f9	calll	0x000018fe
000018fe	popl	%eax
000018ff	movl	%eax,0xc4(%ebp)
00001902	movl	0x19685-0x18fe(%eax),%eax
00001908	movl	%eax,ConVar_Unregister()(%ebp)
0000190b	movl	(%eax),%eax
0000190d	movl	%eax,0xf0(%ebp)
00001910	movl	0x08(%ebp),%edi
00001913	movl	(%edi),%eax
00001915	movl	%edi,(%esp)
00001918	movl	$0x00b00000,0x04(%esp)
00001920	call	*0x0c(%eax)
00001923	movl	0x0c(%ebp),%ebx
00001926	testb	%al,%al
00001928	je	0x0000195c
0000192a	movl	0xc4(%ebp),%eax
0000192d	movl	0x19689-0x18fe(%eax),%esi
00001933	movl	(%esi),%eax
00001935	testl	%eax,%eax
00001937	je	0x0000195c
00001939	movl	(%eax),%ecx
0000193b	movl	%eax,(%esp)
0000193e	call	*0x70(%ecx)
00001941	testb	%al,%al
00001943	jne	0x0000195c
00001945	movl	(%esi),%ecx
00001947	movl	(%ecx),%eax
00001949	movl	%ebx,0x08(%esp)
0000194d	movl	%edi,0x04(%esp)
00001951	movl	%ecx,(%esp)
00001954	call	*0x74(%eax)
00001957	jmp	0x000019f3
0000195c	movss	0x2c(%edi),%xmm0
00001961	movss	%xmm0,0xbc(%ebp)
00001966	pxor	%xmm0,%xmm0
0000196a	testl	%ebx,%ebx
0000196c	je	0x0000197e
0000196e	movl	%ebx,(%esp)
00001971	calll	_atof
00001976	fstps	0xc8(%ebp)
00001979	movss	0xc8(%ebp),%xmm0
0000197e	movss	%xmm0,0xcc(%ebp)
00001983	movl	(%edi),%eax
00001985	leal	0xcc(%ebp),%ecx
00001988	movl	%ecx,0x04(%esp)
0000198c	movl	%edi,(%esp)
0000198f	call	*0x44(%eax)
00001992	cmpb	$0x01,%al
00001994	jne	0x000019c5
00001996	movss	0xcc(%ebp),%xmm0
0000199b	cvtss2sd	%xmm0,%xmm0
0000199f	movsd	%xmm0,0x0c(%esp)
000019a5	movl	0xc4(%ebp),%eax
000019a8	leal	0x16106-0x18fe(%eax),%eax
000019ae	movl	%eax,0x08(%esp)
000019b2	leal	0xd0(%ebp),%ebx
000019b5	movl	%ebx,(%esp)
000019b8	movl	$0x00000020,0x04(%esp)
000019c0	calll	V_snprintf(char*, int, char const*, ...)
000019c5	movss	0xcc(%ebp),%xmm0
000019ca	movss	%xmm0,0x2c(%edi)
000019cf	cvttss2si	%xmm0,%eax
000019d3	movl	%eax,0x30(%edi)
000019d6	testb	$0x10,0x15(%edi)
000019da	jne	0x000019f3
000019dc	movl	(%edi),%eax
000019de	movss	0xbc(%ebp),%xmm0
000019e3	movss	%xmm0,0x08(%esp)
000019e9	movl	%ebx,0x04(%esp)
000019ed	movl	%edi,(%esp)
000019f0	call	*0x48(%eax)
000019f3	movl	ConVar_Unregister()(%ebp),%eax
000019f6	movl	(%eax),%eax
000019f8	cmpl	0xf0(%ebp),%eax
000019fb	jne	0x00001a05
000019fd	addl	$0x4c,%esp
00001a00	popl	%esi
00001a01	popl	%edi
00001a02	popl	%ebx
00001a03	popl	%ebp
00001a04	ret
00001a05	calll	___stack_chk_fail
00001a0a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::ChangeStringValue(char const*, float):
00001a10	pushl	%ebp
00001a11	movl	%esp,%ebp
00001a13	pushl	%ebx
00001a14	pushl	%edi
00001a15	pushl	%esi
00001a16	subl	$0x1c,%esp
00001a19	calll	0x00001a1e
00001a1e	popl	%eax
00001a1f	movl	%eax,0xe8(%ebp)
00001a22	movl	0x19685-0x1a1e(%eax),%eax
00001a28	movl	%eax,0xec(%ebp)
00001a2b	movl	(%eax),%eax
00001a2d	movl	%eax,0xf0(%ebp)
00001a30	movl	0x08(%ebp),%ecx
00001a33	movl	0x28(%ecx),%ebx
00001a36	leal	0x0f(%ebx),%eax
00001a39	andl	$0xf0,%eax
00001a3c	movl	%esp,%edi
00001a3e	subl	%eax,%edi
00001a40	movl	%edi,%esp
00001a42	movl	0x24(%ecx),%esi
00001a45	subl	$0x10,%esp
00001a48	movl	%ebx,0x08(%esp)
00001a4c	movl	%esi,0x04(%esp)
00001a50	movl	%edi,(%esp)
00001a53	calll	_memcpy
00001a58	addl	$0x10,%esp
00001a5b	movss	0x10(%ebp),%xmm0
00001a60	movl	0x0c(%ebp),%eax
00001a63	testl	%eax,%eax
00001a65	je	0x00001ad7
00001a67	movl	%edi,0xe4(%ebp)
00001a6a	subl	$0x10,%esp
00001a6d	movl	%eax,(%esp)
00001a70	calll	_strlen
00001a75	addl	$0x10,%esp
00001a78	movl	%eax,%edi
00001a7a	incl	%edi
00001a7b	cmpl	%ebx,%edi
00001a7d	jle	0x00001ab4
00001a7f	testl	%esi,%esi
00001a81	je	0x00001a91
00001a83	subl	$0x10,%esp
00001a86	movl	%esi,(%esp)
00001a89	calll	operator delete[](void*)
00001a8e	addl	$0x10,%esp
00001a91	testl	%edi,%edi
00001a93	movl	$0xffffffff,%eax
00001a98	cmovnsl	%edi,%eax
00001a9b	subl	$0x10,%esp
00001a9e	movl	%eax,(%esp)
00001aa1	calll	operator new[](unsigned long)
00001aa6	addl	$0x10,%esp
00001aa9	movl	%eax,%esi
00001aab	movl	0x08(%ebp),%eax
00001aae	movl	%esi,0x24(%eax)
00001ab1	movl	%edi,0x28(%eax)
00001ab4	subl	$0x10,%esp
00001ab7	movl	%edi,0x08(%esp)
00001abb	movl	0x0c(%ebp),%eax
00001abe	movl	%eax,0x04(%esp)
00001ac2	movl	%esi,(%esp)
00001ac5	calll	_memcpy
00001aca	addl	$0x10,%esp
00001acd	movl	0xe4(%ebp),%edi
00001ad0	movss	0x10(%ebp),%xmm0
00001ad5	jmp	0x00001ada
00001ad7	movb	ConVar_Register(int, IConCommandBaseAccessor*),(%esi)
00001ada	movl	0x08(%ebp),%esi
00001add	movl	0x44(%esi),%eax
00001ae0	testl	%eax,%eax
00001ae2	je	0x00001b01
00001ae4	subl	$0x10,%esp
00001ae7	movss	%xmm0,0x08(%esp)
00001aed	movl	%edi,0x04(%esp)
00001af1	leal	0x18(%esi),%ecx
00001af4	movl	%ecx,(%esp)
00001af7	call	*%eax
00001af9	movss	0x10(%ebp),%xmm0
00001afe	addl	$0x10,%esp
00001b01	movl	0xe8(%ebp),%eax
00001b04	movl	0x19689-0x1a1e(%eax),%eax
00001b0a	movl	(%eax),%ecx
00001b0c	movl	(%ecx),%eax
00001b0e	subl	$0x10,%esp
00001b11	movss	%xmm0,0x0c(%esp)
00001b17	movl	%edi,0x08(%esp)
00001b1b	movl	%esi,0x04(%esp)
00001b1f	movl	%ecx,(%esp)
00001b22	call	*0x50(%eax)
00001b25	addl	$0x10,%esp
00001b28	movl	0xec(%ebp),%eax
00001b2b	movl	(%eax),%eax
00001b2d	cmpl	0xf0(%ebp),%eax
00001b30	jne	0x00001b3a
00001b32	leal	0xf4(%ebp),%esp
00001b35	popl	%esi
00001b36	popl	%edi
00001b37	popl	%ebx
00001b38	popl	%ebp
00001b39	ret
00001b3a	calll	___stack_chk_fail
00001b3f	nop
ConVar::ClampValue(float&):
00001b40	movl	0x08(%esp),%eax
00001b44	movl	0x04(%esp),%edx
00001b48	testb	$0x01,0x34(%edx)
00001b4c	je	0x00001b58
00001b4e	movss	0x38(%edx),%xmm0
00001b53	ucomiss	(%eax),%xmm0
00001b56	ja	0x00001b70
00001b58	xorb	%cl,%cl
00001b5a	testb	$0x01,0x3c(%edx)
00001b5e	je	0x00001b76
00001b60	movss	0x40(%edx),%xmm0
00001b65	movss	(%eax),%xmm1
00001b69	xorb	%cl,%cl
00001b6b	ucomiss	%xmm0,%xmm1
00001b6e	jbe	0x00001b76
00001b70	movss	%xmm0,(%eax)
00001b74	movb	$0x01,%cl
00001b76	movzbl	%cl,%eax
00001b79	ret
00001b7a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InternalSetFloatValue(float):
00001b80	pushl	%ebp
00001b81	movl	%esp,%ebp
00001b83	pushl	%ebx
00001b84	pushl	%edi
00001b85	pushl	%esi
00001b86	subl	$0x4c,%esp
00001b89	calll	0x00001b8e
00001b8e	popl	%ebx
00001b8f	movl	0x19685-0x1b8e(%ebx),%eax
00001b95	movl	%eax,0xc8(%ebp)
00001b98	movl	(%eax),%eax
00001b9a	movl	%eax,0xf0(%ebp)
00001b9d	movss	0x0c(%ebp),%xmm0
00001ba2	movss	%xmm0,0xcc(%ebp)
00001ba7	movl	0x08(%ebp),%edi
00001baa	movss	0x2c(%edi),%xmm1
00001baf	ucomiss	%xmm0,%xmm1
00001bb2	jne	0x00001bba
00001bb4	jnp	0x00001c6f
00001bba	movl	(%edi),%eax
00001bbc	movl	%edi,(%esp)
00001bbf	movl	$0x00b00000,0x04(%esp)
00001bc7	call	*0x0c(%eax)
00001bca	testb	%al,%al
00001bcc	je	0x00001c01
00001bce	movl	0x19689-0x1b8e(%ebx),%esi
00001bd4	movl	(%esi),%eax
00001bd6	testl	%eax,%eax
00001bd8	je	0x00001c01
00001bda	movl	(%eax),%ecx
00001bdc	movl	%eax,(%esp)
00001bdf	call	*0x70(%ecx)
00001be2	testb	%al,%al
00001be4	jne	0x00001c01
00001be6	movl	(%esi),%ecx
00001be8	movl	(%ecx),%eax
00001bea	movss	0xcc(%ebp),%xmm0
00001bef	movss	%xmm0,0x08(%esp)
00001bf5	movl	%edi,0x04(%esp)
00001bf9	movl	%ecx,(%esp)
00001bfc	call	*0x7c(%eax)
00001bff	jmp	0x00001c6f
00001c01	movl	(%edi),%eax
00001c03	leal	0xcc(%ebp),%ecx
00001c06	movl	%ecx,0x04(%esp)
00001c0a	movl	%edi,(%esp)
00001c0d	call	*0x44(%eax)
00001c10	movss	0x2c(%edi),%xmm0
00001c15	movss	%xmm0,0xc4(%ebp)
00001c1a	movss	0xcc(%ebp),%xmm0
00001c1f	movss	%xmm0,0x2c(%edi)
00001c24	cvttss2si	%xmm0,%eax
00001c28	movl	%eax,0x30(%edi)
00001c2b	testb	$0x10,0x15(%edi)
00001c2f	jne	0x00001c6f
00001c31	cvtss2sd	%xmm0,%xmm0
00001c35	movsd	%xmm0,0x0c(%esp)
00001c3b	leal	0x16106-0x1b8e(%ebx),%eax
00001c41	movl	%eax,0x08(%esp)
00001c45	leal	0xd0(%ebp),%esi
00001c48	movl	%esi,(%esp)
00001c4b	movl	$0x00000020,0x04(%esp)
00001c53	calll	V_snprintf(char*, int, char const*, ...)
00001c58	movl	(%edi),%eax
00001c5a	movss	0xc4(%ebp),%xmm0
00001c5f	movss	%xmm0,0x08(%esp)
00001c65	movl	%esi,0x04(%esp)
00001c69	movl	%edi,(%esp)
00001c6c	call	*0x48(%eax)
00001c6f	movl	0xc8(%ebp),%eax
00001c72	movl	(%eax),%eax
00001c74	cmpl	0xf0(%ebp),%eax
00001c77	jne	0x00001c81
00001c79	addl	$0x4c,%esp
00001c7c	popl	%esi
00001c7d	popl	%edi
00001c7e	popl	%ebx
00001c7f	popl	%ebp
00001c80	ret
00001c81	calll	___stack_chk_fail
00001c86	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::InternalSetIntValue(int):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	pushl	%ebx
00001c94	pushl	%edi
00001c95	pushl	%esi
00001c96	subl	$0x4c,%esp
00001c99	calll	0x00001c9e
00001c9e	popl	%eax
00001c9f	movl	%eax,0xc8(%ebp)
00001ca2	movl	0x19685-0x1c9e(%eax),%eax
00001ca8	movl	%eax,0xc4(%ebp)
00001cab	movl	(%eax),%eax
00001cad	movl	%eax,0xf0(%ebp)
00001cb0	movl	0x0c(%ebp),%esi
00001cb3	movl	0x08(%ebp),%edi
00001cb6	cmpl	%esi,0x30(%edi)
00001cb9	je	0x00001d7a
00001cbf	movl	(%edi),%eax
00001cc1	movl	%edi,(%esp)
00001cc4	movl	$0x00b00000,0x04(%esp)
00001ccc	call	*0x0c(%eax)
00001ccf	testb	%al,%al
00001cd1	je	0x00001d02
00001cd3	movl	0xc8(%ebp),%eax
00001cd6	movl	0x19689-0x1c9e(%eax),%ebx
00001cdc	movl	(%ebx),%eax
00001cde	testl	%eax,%eax
00001ce0	je	0x00001d02
00001ce2	movl	(%eax),%ecx
00001ce4	movl	%eax,(%esp)
00001ce7	call	*0x70(%ecx)
00001cea	testb	%al,%al
00001cec	jne	0x00001d02
00001cee	movl	(%ebx),%ecx
00001cf0	movl	(%ecx),%eax
00001cf2	movl	%esi,0x08(%esp)
00001cf6	movl	%edi,0x04(%esp)
00001cfa	movl	%ecx,(%esp)
00001cfd	call	*0x78(%eax)
00001d00	jmp	0x00001d7a
00001d02	cvtsi2ss	%esi,%xmm0
00001d06	movss	%xmm0,0xcc(%ebp)
00001d0b	movl	(%edi),%eax
00001d0d	leal	0xcc(%ebp),%ecx
00001d10	movl	%ecx,0x04(%esp)
00001d14	movl	%edi,(%esp)
00001d17	call	*0x44(%eax)
00001d1a	movss	0xcc(%ebp),%xmm0
00001d1f	testb	%al,%al
00001d21	je	0x00001d27
00001d23	cvttss2si	%xmm0,%esi
00001d27	movss	0x2c(%edi),%xmm1
00001d2c	movss	%xmm1,ConVar_Unregister()(%ebp)
00001d31	movss	%xmm0,0x2c(%edi)
00001d36	movl	%esi,0x30(%edi)
00001d39	testb	$0x10,0x15(%edi)
00001d3d	jne	0x00001d7a
00001d3f	movl	%esi,0x0c(%esp)
00001d43	movl	0xc8(%ebp),%eax
00001d46	leal	0x16109-0x1c9e(%eax),%eax
00001d4c	movl	%eax,0x08(%esp)
00001d50	leal	0xd0(%ebp),%esi
00001d53	movl	%esi,(%esp)
00001d56	movl	$0x00000020,0x04(%esp)
00001d5e	calll	V_snprintf(char*, int, char const*, ...)
00001d63	movl	(%edi),%eax
00001d65	movss	ConVar_Unregister()(%ebp),%xmm0
00001d6a	movss	%xmm0,0x08(%esp)
00001d70	movl	%esi,0x04(%esp)
00001d74	movl	%edi,(%esp)
00001d77	call	*0x48(%eax)
00001d7a	movl	0xc4(%ebp),%eax
00001d7d	movl	(%eax),%eax
00001d7f	cmpl	0xf0(%ebp),%eax
00001d82	jne	0x00001d8c
00001d84	addl	$0x4c,%esp
00001d87	popl	%esi
00001d88	popl	%edi
00001d89	popl	%ebx
00001d8a	popl	%ebp
00001d8b	ret
00001d8c	calll	___stack_chk_fail
00001d91	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float)):
00001da0	pushl	%ebp
00001da1	movl	%esp,%ebp
00001da3	pushl	%ebx
00001da4	pushl	%edi
00001da5	pushl	%esi
00001da6	subl	$0x1c,%esp
00001da9	calll	0x00001dae
00001dae	popl	%eax
00001daf	movl	%eax,0xec(%ebp)
00001db2	movl	0x08(%ebp),%ebx
00001db5	movl	%ebx,0x1c(%ebx)
00001db8	leal	0x1604c-0x1dae(%eax),%eax
00001dbe	movl	%eax,0xe8(%ebp)
00001dc1	movl	0x10(%ebp),%esi
00001dc4	testl	%esi,%esi
00001dc6	cmovel	%eax,%esi
00001dc9	movl	%esi,0x20(%ebx)
00001dcc	movl	%esi,(%esp)
00001dcf	calll	_strlen
00001dd4	movl	%eax,%edi
00001dd6	incl	%edi
00001dd7	movl	%edi,0x28(%ebx)
00001dda	testl	%edi,%edi
00001ddc	movl	$0xffffffff,%eax
00001de1	cmovnsl	%edi,%eax
00001de4	movl	%eax,(%esp)
00001de7	calll	operator new[](unsigned long)
00001dec	movl	%eax,0x24(%ebx)
00001def	movl	%edi,0x08(%esp)
00001df3	movl	%esi,0x04(%esp)
00001df7	movl	%eax,(%esp)
00001dfa	movl	%eax,%esi
00001dfc	calll	_memcpy
00001e01	movb	0x1c(%ebp),%al
00001e04	movb	%al,0x34(%ebx)
00001e07	movss	0x20(%ebp),%xmm0
00001e0c	movss	%xmm0,0x38(%ebx)
00001e11	movb	0x24(%ebp),%al
00001e14	movb	%al,0x3c(%ebx)
00001e17	movss	0x28(%ebp),%xmm0
00001e1c	movss	%xmm0,0x40(%ebx)
00001e21	movl	0x2c(%ebp),%eax
00001e24	movl	%eax,0x44(%ebx)
00001e27	movl	%esi,(%esp)
00001e2a	calll	_atof
00001e2f	fstps	0xf0(%ebp)
00001e32	movss	0xf0(%ebp),%xmm0
00001e37	movss	%xmm0,0x2c(%ebx)
00001e3c	cvttss2si	%xmm0,%eax
00001e40	movl	%eax,0x30(%ebx)
00001e43	movb	ConVar_Register(int, IConCommandBaseAccessor*),0x08(%ebx)
00001e47	movl	0x0c(%ebp),%eax
00001e4a	movl	%eax,0x0c(%ebx)
00001e4d	movl	0x18(%ebp),%eax
00001e50	testl	%eax,%eax
00001e52	movl	0xe8(%ebp),%ecx
00001e55	cmovnel	%eax,%ecx
00001e58	movl	%ecx,0x10(%ebx)
00001e5b	movl	0x14(%ebp),%eax
00001e5e	movl	%eax,0x14(%ebx)
00001e61	testb	$0x01,%al
00001e63	jne	0x00001e7b
00001e65	movl	0xec(%ebp),%ecx
00001e68	movl	ConCommandBase::s_pConCommandBases-0x1dae(%ecx),%eax
00001e6e	movl	%eax,0x04(%ebx)
00001e71	movl	%ebx,ConCommandBase::s_pConCommandBases-0x1dae(%ecx)
00001e77	movl	%ecx,%eax
00001e79	jmp	0x00001e85
00001e7b	movl	ConVar_Register(int, IConCommandBaseAccessor*),0x04(%ebx)
00001e82	movl	0xec(%ebp),%eax
00001e85	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),ConCommandBase::s_pAccessor-0x1dae(%eax)
00001e8f	jne	0x00001e99
00001e91	addl	$0x1c,%esp
00001e94	popl	%esi
00001e95	popl	%edi
00001e96	popl	%ebx
00001e97	popl	%ebp
00001e98	ret
00001e99	movl	(%ebx),%eax
00001e9b	movl	0x28(%eax),%eax
00001e9e	addl	$0x1c,%esp
00001ea1	popl	%esi
00001ea2	popl	%edi
00001ea3	popl	%ebx
00001ea4	popl	%ebp
00001ea5	jmp	*%eax
00001ea7	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::SetDefault(char const*):
00001eb0	calll	0x00001eb5
00001eb5	popl	%eax
00001eb6	leal	0x1604c-0x1eb5(%eax),%eax
00001ebc	movl	0x08(%esp),%ecx
00001ec0	testl	%ecx,%ecx
00001ec2	cmovnel	%ecx,%eax
00001ec5	movl	0x04(%esp),%ecx
00001ec9	movl	%eax,0x20(%ecx)
00001ecc	ret
00001ecd	nopl	(%eax)
ConVar::SetValue(char const*):
00001ed0	pushl	%ebp
00001ed1	movl	%esp,%ebp
00001ed3	subl	$0x08,%esp
00001ed6	movl	0x08(%ebp),%eax
00001ed9	movl	0x1c(%eax),%ecx
00001edc	movl	(%ecx),%eax
00001ede	movl	0x0c(%ebp),%edx
00001ee1	movl	%edx,0x04(%esp)
00001ee5	movl	%ecx,(%esp)
00001ee8	call	*0x38(%eax)
00001eeb	addl	$0x08,%esp
00001eee	popl	%ebp
00001eef	ret
non-virtual thunk to ConVar::SetValue(char const*):
00001ef0	pushl	%ebp
00001ef1	movl	%esp,%ebp
00001ef3	subl	$0x08,%esp
00001ef6	movl	0x08(%ebp),%eax
00001ef9	movl	0x04(%eax),%ecx
00001efc	movl	(%ecx),%eax
00001efe	movl	0x0c(%ebp),%edx
00001f01	movl	%edx,0x04(%esp)
00001f05	movl	%ecx,(%esp)
00001f08	call	*0x38(%eax)
00001f0b	addl	$0x08,%esp
00001f0e	popl	%ebp
00001f0f	ret
ConVar::SetValue(float):
00001f10	pushl	%ebp
00001f11	movl	%esp,%ebp
00001f13	subl	$0x08,%esp
00001f16	movl	0x08(%ebp),%eax
00001f19	movl	0x1c(%eax),%ecx
00001f1c	movl	(%ecx),%eax
00001f1e	movss	0x0c(%ebp),%xmm0
00001f23	movss	%xmm0,0x04(%esp)
00001f29	movl	%ecx,(%esp)
00001f2c	call	*0x3c(%eax)
00001f2f	addl	$0x08,%esp
00001f32	popl	%ebp
00001f33	ret
00001f34	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
non-virtual thunk to ConVar::SetValue(float):
00001f40	pushl	%ebp
00001f41	movl	%esp,%ebp
00001f43	subl	$0x08,%esp
00001f46	movl	0x08(%ebp),%eax
00001f49	movl	0x04(%eax),%ecx
00001f4c	movl	(%ecx),%eax
00001f4e	movss	0x0c(%ebp),%xmm0
00001f53	movss	%xmm0,0x04(%esp)
00001f59	movl	%ecx,(%esp)
00001f5c	call	*0x3c(%eax)
00001f5f	addl	$0x08,%esp
00001f62	popl	%ebp
00001f63	ret
00001f64	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar::SetValue(int):
00001f70	pushl	%ebp
00001f71	movl	%esp,%ebp
00001f73	subl	$0x08,%esp
00001f76	movl	0x08(%ebp),%eax
00001f79	movl	0x1c(%eax),%ecx
00001f7c	movl	(%ecx),%eax
00001f7e	movl	0x0c(%ebp),%edx
00001f81	movl	%edx,0x04(%esp)
00001f85	movl	%ecx,(%esp)
00001f88	call	*0x40(%eax)
00001f8b	addl	$0x08,%esp
00001f8e	popl	%ebp
00001f8f	ret
non-virtual thunk to ConVar::SetValue(int):
00001f90	pushl	%ebp
00001f91	movl	%esp,%ebp
00001f93	subl	$0x08,%esp
00001f96	movl	0x08(%ebp),%eax
00001f99	movl	0x04(%eax),%ecx
00001f9c	movl	(%ecx),%eax
00001f9e	movl	0x0c(%ebp),%edx
00001fa1	movl	%edx,0x04(%esp)
00001fa5	movl	%ecx,(%esp)
00001fa8	call	*0x40(%eax)
00001fab	addl	$0x08,%esp
00001fae	popl	%ebp
00001faf	ret
ConVar::Revert():
00001fb0	pushl	%ebp
00001fb1	movl	%esp,%ebp
00001fb3	subl	$0x08,%esp
00001fb6	movl	0x08(%ebp),%eax
00001fb9	movl	0x1c(%eax),%ecx
00001fbc	movl	(%ecx),%eax
00001fbe	movl	0x20(%ecx),%edx
00001fc1	movl	%edx,0x04(%esp)
00001fc5	movl	%ecx,(%esp)
00001fc8	call	*0x2c(%eax)
00001fcb	addl	$0x08,%esp
00001fce	popl	%ebp
00001fcf	ret
ConVar::GetMin(float&) const:
00001fd0	movl	0x04(%esp),%eax
00001fd4	movl	0x1c(%eax),%ecx
00001fd7	movss	0x38(%ecx),%xmm0
00001fdc	movl	0x08(%esp),%ecx
00001fe0	movss	%xmm0,(%ecx)
00001fe4	movl	0x1c(%eax),%eax
00001fe7	movzbl	0x34(%eax),%eax
00001feb	andl	$0x01,%eax
00001fee	ret
00001fef	nop
ConVar::GetMax(float&) const:
00001ff0	movl	0x04(%esp),%eax
00001ff4	movl	0x1c(%eax),%ecx
00001ff7	movss	0x40(%ecx),%xmm0
00001ffc	movl	0x08(%esp),%ecx
00002000	movss	%xmm0,(%ecx)
00002004	movl	0x1c(%eax),%eax
00002007	movzbl	0x3c(%eax),%eax
0000200b	andl	$0x01,%eax
0000200e	ret
0000200f	nop
ConVar::GetDefault() const:
00002010	movl	0x04(%esp),%eax
00002014	movl	0x1c(%eax),%eax
00002017	movl	0x20(%eax),%eax
0000201a	ret
0000201b	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*):
00002020	pushl	%ebp
00002021	movl	%esp,%ebp
00002023	pushl	%ebx
00002024	pushl	%edi
00002025	pushl	%esi
00002026	subl	$0x0c,%esp
00002029	calll	0x0000202e
0000202e	popl	%esi
0000202f	movl	0x19689-0x202e(%esi),%ebx
00002035	movl	(%ebx),%eax
00002037	movl	0x0c(%ebp),%edx
0000203a	testl	%eax,%eax
0000203c	jne	0x00002046
0000203e	leal	s_EmptyConVar-0x202e(%esi),%eax
00002044	jmp	0x00002052
00002046	movl	(%eax),%ecx
00002048	movl	%edx,0x04(%esp)
0000204c	movl	%eax,(%esp)
0000204f	call	*0x30(%ecx)
00002052	movl	0x08(%ebp),%ecx
00002055	xorl	%edx,%edx
00002057	testl	%eax,%eax
00002059	leal	0x18(%eax),%eax
0000205c	cmovel	%edx,%eax
0000205f	leal	s_EmptyConVar-0x202e+0x00000018(%esi),%edx
00002065	testl	%eax,%eax
00002067	cmovel	%edx,%eax
0000206a	movl	%eax,(%ecx)
0000206c	leal	0xe8(%eax),%edi
0000206f	movl	%edi,0x04(%ecx)
00002072	cmpl	%edx,%eax
00002074	jne	0x000020a1
00002076	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%ebx)
00002079	jne	0x00002085
0000207b	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x202e(%esi),%al
00002081	testb	%al,%al
00002083	jne	0x000020a1
00002085	movl	0x0c(%ebp),%eax
00002088	movl	%eax,0x04(%esp)
0000208c	leal	0x1610c-0x202e(%esi),%eax
00002092	movl	%eax,(%esp)
00002095	calll	_Warning
0000209a	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x202e(%esi)
000020a1	addl	$0x0c,%esp
000020a4	popl	%esi
000020a5	popl	%edi
000020a6	popl	%ebx
000020a7	popl	%ebp
000020a8	ret
000020a9	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::ConVarRef(char const*):
000020b0	pushl	%ebp
000020b1	movl	%esp,%ebp
000020b3	pushl	%ebx
000020b4	pushl	%edi
000020b5	pushl	%esi
000020b6	subl	$0x0c,%esp
000020b9	calll	0x000020be
000020be	popl	%esi
000020bf	movl	0x19689-0x20be(%esi),%ebx
000020c5	movl	(%ebx),%eax
000020c7	movl	0x0c(%ebp),%edx
000020ca	testl	%eax,%eax
000020cc	jne	0x000020d6
000020ce	leal	s_EmptyConVar-0x20be(%esi),%eax
000020d4	jmp	0x000020e2
000020d6	movl	(%eax),%ecx
000020d8	movl	%edx,0x04(%esp)
000020dc	movl	%eax,(%esp)
000020df	call	*0x30(%ecx)
000020e2	movl	0x08(%ebp),%ecx
000020e5	xorl	%edx,%edx
000020e7	testl	%eax,%eax
000020e9	leal	0x18(%eax),%eax
000020ec	cmovel	%edx,%eax
000020ef	leal	s_EmptyConVar-0x20be+0x00000018(%esi),%edx
000020f5	testl	%eax,%eax
000020f7	cmovel	%edx,%eax
000020fa	movl	%eax,(%ecx)
000020fc	leal	0xe8(%eax),%edi
000020ff	movl	%edi,0x04(%ecx)
00002102	cmpl	%edx,%eax
00002104	jne	0x00002131
00002106	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%ebx)
00002109	jne	0x00002115
0000210b	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x20be(%esi),%al
00002111	testb	%al,%al
00002113	jne	0x00002131
00002115	movl	0x0c(%ebp),%eax
00002118	movl	%eax,0x04(%esp)
0000211c	leal	0x1610c-0x20be(%esi),%eax
00002122	movl	%eax,(%esp)
00002125	calll	_Warning
0000212a	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x20be(%esi)
00002131	addl	$0x0c,%esp
00002134	popl	%esi
00002135	popl	%edi
00002136	popl	%ebx
00002137	popl	%ebp
00002138	ret
00002139	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::Init(char const*, bool):
00002140	pushl	%ebp
00002141	movl	%esp,%ebp
00002143	pushl	%ebx
00002144	pushl	%edi
00002145	pushl	%esi
00002146	subl	$0x0c,%esp
00002149	calll	0x0000214e
0000214e	popl	%esi
0000214f	movl	0x19689-0x214e(%esi),%eax
00002155	movl	%eax,0xf0(%ebp)
00002158	movl	(%eax),%eax
0000215a	movl	0x0c(%ebp),%ebx
0000215d	testl	%eax,%eax
0000215f	jne	0x00002169
00002161	leal	s_EmptyConVar-0x214e(%esi),%eax
00002167	jmp	0x00002175
00002169	movl	(%eax),%ecx
0000216b	movl	%ebx,0x04(%esp)
0000216f	movl	%eax,(%esp)
00002172	call	*0x30(%ecx)
00002175	movl	0x08(%ebp),%ecx
00002178	xorl	%edx,%edx
0000217a	testl	%eax,%eax
0000217c	leal	0x18(%eax),%eax
0000217f	cmovel	%edx,%eax
00002182	leal	s_EmptyConVar-0x214e+0x00000018(%esi),%edx
00002188	testl	%eax,%eax
0000218a	cmovel	%edx,%eax
0000218d	movl	%eax,(%ecx)
0000218f	leal	0xe8(%eax),%edi
00002192	movl	%edi,0x04(%ecx)
00002195	cmpl	%edx,%eax
00002197	jne	0x000021cb
00002199	movl	0xf0(%ebp),%eax
0000219c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000219f	jne	0x000021ab
000021a1	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x214e(%esi),%al
000021a7	testb	%al,%al
000021a9	jne	0x000021cb
000021ab	movb	0x10(%ebp),%al
000021ae	testb	%al,%al
000021b0	jne	0x000021c4
000021b2	movl	%ebx,0x04(%esp)
000021b6	leal	0x1610c-0x214e(%esi),%eax
000021bc	movl	%eax,(%esp)
000021bf	calll	_Warning
000021c4	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x214e(%esi)
000021cb	addl	$0x0c,%esp
000021ce	popl	%esi
000021cf	popl	%edi
000021d0	popl	%ebx
000021d1	popl	%ebp
000021d2	ret
000021d3	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*, bool):
000021e0	pushl	%ebp
000021e1	movl	%esp,%ebp
000021e3	pushl	%ebx
000021e4	pushl	%edi
000021e5	pushl	%esi
000021e6	subl	$0x0c,%esp
000021e9	calll	0x000021ee
000021ee	popl	%esi
000021ef	movl	0x19689-0x21ee(%esi),%eax
000021f5	movl	%eax,0xf0(%ebp)
000021f8	movl	(%eax),%eax
000021fa	movl	0x0c(%ebp),%ebx
000021fd	testl	%eax,%eax
000021ff	jne	0x00002209
00002201	leal	s_EmptyConVar-0x21ee(%esi),%eax
00002207	jmp	0x00002215
00002209	movl	(%eax),%ecx
0000220b	movl	%ebx,0x04(%esp)
0000220f	movl	%eax,(%esp)
00002212	call	*0x30(%ecx)
00002215	movl	0x08(%ebp),%ecx
00002218	xorl	%edx,%edx
0000221a	testl	%eax,%eax
0000221c	leal	0x18(%eax),%eax
0000221f	cmovel	%edx,%eax
00002222	leal	s_EmptyConVar-0x21ee+0x00000018(%esi),%edx
00002228	testl	%eax,%eax
0000222a	cmovel	%edx,%eax
0000222d	movl	%eax,(%ecx)
0000222f	leal	0xe8(%eax),%edi
00002232	movl	%edi,0x04(%ecx)
00002235	cmpl	%edx,%eax
00002237	jne	0x0000226b
00002239	movl	0xf0(%ebp),%eax
0000223c	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
0000223f	jne	0x0000224b
00002241	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x21ee(%esi),%al
00002247	testb	%al,%al
00002249	jne	0x0000226b
0000224b	movb	0x10(%ebp),%al
0000224e	testb	%al,%al
00002250	jne	0x00002264
00002252	movl	%ebx,0x04(%esp)
00002256	leal	0x1610c-0x21ee(%esi),%eax
0000225c	movl	%eax,(%esp)
0000225f	calll	_Warning
00002264	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x21ee(%esi)
0000226b	addl	$0x0c,%esp
0000226e	popl	%esi
0000226f	popl	%edi
00002270	popl	%ebx
00002271	popl	%ebp
00002272	ret
00002273	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(char const*, bool):
00002280	pushl	%ebp
00002281	movl	%esp,%ebp
00002283	pushl	%ebx
00002284	pushl	%edi
00002285	pushl	%esi
00002286	subl	$0x0c,%esp
00002289	calll	0x0000228e
0000228e	popl	%esi
0000228f	movl	0x19689-0x228e(%esi),%eax
00002295	movl	%eax,0xf0(%ebp)
00002298	movl	(%eax),%eax
0000229a	movl	0x0c(%ebp),%ebx
0000229d	testl	%eax,%eax
0000229f	jne	0x000022a9
000022a1	leal	s_EmptyConVar-0x228e(%esi),%eax
000022a7	jmp	0x000022b5
000022a9	movl	(%eax),%ecx
000022ab	movl	%ebx,0x04(%esp)
000022af	movl	%eax,(%esp)
000022b2	call	*0x30(%ecx)
000022b5	movl	0x08(%ebp),%ecx
000022b8	xorl	%edx,%edx
000022ba	testl	%eax,%eax
000022bc	leal	0x18(%eax),%eax
000022bf	cmovel	%edx,%eax
000022c2	leal	s_EmptyConVar-0x228e+0x00000018(%esi),%edx
000022c8	testl	%eax,%eax
000022ca	cmovel	%edx,%eax
000022cd	movl	%eax,(%ecx)
000022cf	leal	0xe8(%eax),%edi
000022d2	movl	%edi,0x04(%ecx)
000022d5	cmpl	%edx,%eax
000022d7	jne	0x0000230b
000022d9	movl	0xf0(%ebp),%eax
000022dc	cmpl	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000022df	jne	0x000022eb
000022e1	movb	__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x228e(%esi),%al
000022e7	testb	%al,%al
000022e9	jne	0x0000230b
000022eb	movb	0x10(%ebp),%al
000022ee	testb	%al,%al
000022f0	jne	0x00002304
000022f2	movl	%ebx,0x04(%esp)
000022f6	leal	0x1610c-0x228e(%esi),%eax
000022fc	movl	%eax,(%esp)
000022ff	calll	_Warning
00002304	movb	$0x01,__ZZN9ConVarRef4InitEPKcbE6bFirst.b-0x228e(%esi)
0000230b	addl	$0x0c,%esp
0000230e	popl	%esi
0000230f	popl	%edi
00002310	popl	%ebx
00002311	popl	%ebp
00002312	ret
00002313	nopl	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::IsValid() const:
00002320	calll	0x00002325
00002325	popl	%eax
00002326	leal	s_EmptyConVar-0x2325+0x00000018(%eax),%eax
0000232c	movl	0x04(%esp),%ecx
00002330	cmpl	%eax,(%ecx)
00002332	setne	%al
00002335	movzbl	%al,%eax
00002338	ret
00002339	nopl	ConVar_Register(int, IConCommandBaseAccessor*)(%eax)
ConVarRef::ConVarRef(IConVar*):
00002340	calll	0x00002345
00002345	popl	%eax
00002346	leal	s_EmptyConVar-0x2345+0x00000018(%eax),%eax
0000234c	movl	0x08(%esp),%ecx
00002350	testl	%ecx,%ecx
00002352	cmovnel	%ecx,%eax
00002355	movl	0x04(%esp),%ecx
00002359	movl	%eax,(%ecx)
0000235b	xorl	%edx,%edx
0000235d	testl	%eax,%eax
0000235f	je	0x00002366
00002361	addl	$0xe8,%eax
00002364	movl	%eax,%edx
00002366	movl	%edx,0x04(%ecx)
00002369	ret
0000236a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVarRef::ConVarRef(IConVar*):
00002370	calll	0x00002375
00002375	popl	%eax
00002376	leal	s_EmptyConVar-0x2375+0x00000018(%eax),%eax
0000237c	movl	0x08(%esp),%ecx
00002380	testl	%ecx,%ecx
00002382	cmovnel	%ecx,%eax
00002385	movl	0x04(%esp),%ecx
00002389	movl	%eax,(%ecx)
0000238b	xorl	%edx,%edx
0000238d	testl	%eax,%eax
0000238f	je	0x00002396
00002391	addl	$0xe8,%eax
00002394	movl	%eax,%edx
00002396	movl	%edx,0x04(%ecx)
00002399	ret
0000239a	nopw	ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_PrintFlags(ConCommandBase const*):
000023a0	pushl	%ebp
000023a1	movl	%esp,%ebp
000023a3	pushl	%ebx
000023a4	pushl	%edi
000023a5	pushl	%esi
000023a6	subl	$0x0c,%esp
000023a9	calll	0x000023ae
000023ae	popl	%esi
000023af	movl	0x08(%ebp),%edi
000023b2	movl	(%edi),%eax
000023b4	movl	%edi,(%esp)
000023b7	movl	$0x00000004,0x04(%esp)
000023bf	call	*0x0c(%eax)
000023c2	xorb	%bl,%bl
000023c4	testb	%al,%al
000023c6	je	0x000023d8
000023c8	leal	0x1613e-0x23ae(%esi),%eax
000023ce	movl	%eax,(%esp)
000023d1	calll	ConMsg(char const*, ...)
000023d6	movb	$0x01,%bl
000023d8	movl	(%edi),%eax
000023da	movl	%edi,(%esp)
000023dd	movl	$0x00000008,0x04(%esp)
000023e5	call	*0x0c(%eax)
000023e8	cmpb	$0x01,%al
000023ea	jne	0x000023fc
000023ec	leal	0x16144-0x23ae(%esi),%eax
000023f2	movl	%eax,(%esp)
000023f5	calll	ConMsg(char const*, ...)
000023fa	movb	$0x01,%bl
000023fc	movl	(%edi),%eax
000023fe	movl	%edi,(%esp)
00002401	movl	$0x00000080,0x04(%esp)
00002409	call	*0x0c(%eax)
0000240c	cmpb	$0x01,%al
0000240e	jne	0x00002420
00002410	leal	0x1614c-0x23ae(%esi),%eax
00002416	movl	%eax,(%esp)
00002419	calll	ConMsg(char const*, ...)
0000241e	movb	$0x01,%bl
00002420	movl	(%edi),%eax
00002422	movl	%edi,(%esp)
00002425	movl	$0x00000100,0x04(%esp)
0000242d	call	*0x0c(%eax)
00002430	cmpb	$0x01,%al
00002432	jne	0x00002444
00002434	leal	0x16155-0x23ae(%esi),%eax
0000243a	movl	%eax,(%esp)
0000243d	calll	ConMsg(char const*, ...)
00002442	movb	$0x01,%bl
00002444	movl	(%edi),%eax
00002446	movl	%edi,(%esp)
00002449	movl	$0x00000040,0x04(%esp)
00002451	call	*0x0c(%eax)
00002454	cmpb	$0x01,%al
00002456	jne	0x00002468
00002458	leal	0x1615d-0x23ae(%esi),%eax
0000245e	movl	%eax,(%esp)
00002461	calll	ConMsg(char const*, ...)
00002466	movb	$0x01,%bl
00002468	movl	(%edi),%eax
0000246a	movl	%edi,(%esp)
0000246d	movl	$0x00400000,0x04(%esp)
00002475	call	*0x0c(%eax)
00002478	cmpb	$0x01,%al
0000247a	jne	0x0000248c
0000247c	leal	0x1616b-0x23ae(%esi),%eax
00002482	movl	%eax,(%esp)
00002485	calll	ConMsg(char const*, ...)
0000248a	movb	$0x01,%bl
0000248c	movl	(%edi),%eax
0000248e	movl	%edi,(%esp)
00002491	movl	$0x00004000,0x04(%esp)
00002499	call	*0x0c(%eax)
0000249c	cmpb	$0x01,%al
0000249e	jne	0x000024b0
000024a0	leal	0x16179-0x23ae(%esi),%eax
000024a6	movl	%eax,(%esp)
000024a9	calll	ConMsg(char const*, ...)
000024ae	movb	$0x01,%bl
000024b0	movl	(%edi),%eax
000024b2	movl	%edi,(%esp)
000024b5	movl	$0x00002000,0x04(%esp)
000024bd	call	*0x0c(%eax)
000024c0	cmpb	$0x01,%al
000024c2	jne	0x000024d4
000024c4	leal	0x16180-0x23ae(%esi),%eax
000024ca	movl	%eax,(%esp)
000024cd	calll	ConMsg(char const*, ...)
000024d2	movb	$0x01,%bl
000024d4	movl	(%edi),%eax
000024d6	movl	%edi,(%esp)
000024d9	movl	$0x10000000,0x04(%esp)
000024e1	call	*0x0c(%eax)
000024e4	cmpb	$0x01,%al
000024e6	jne	0x000024f8
000024e8	leal	0x1618c-0x23ae(%esi),%eax
000024ee	movl	%eax,(%esp)
000024f1	calll	ConMsg(char const*, ...)
000024f6	movb	$0x01,%bl
000024f8	movl	(%edi),%eax
000024fa	movl	%edi,(%esp)
000024fd	movl	$0x40000000,0x04(%esp)
00002505	call	*0x0c(%eax)
00002508	cmpb	$0x01,%al
0000250a	jne	0x0000251c
0000250c	leal	0x161a0-0x23ae(%esi),%eax
00002512	movl	%eax,(%esp)
00002515	calll	ConMsg(char const*, ...)
0000251a	jmp	0x00002520
0000251c	testb	%bl,%bl
0000251e	je	0x0000252e
00002520	leal	0x161b7-0x23ae(%esi),%eax
00002526	movl	%eax,(%esp)
00002529	calll	ConMsg(char const*, ...)
0000252e	addl	$0x0c,%esp
00002531	popl	%esi
00002532	popl	%edi
00002533	popl	%ebx
00002534	popl	%ebp
00002535	ret
00002536	nopw	%cs:ConVar_Register(int, IConCommandBaseAccessor*)(%eax,%eax)
ConVar_PrintDescription(ConCommandBase const*):
00002540	pushl	%ebp
00002541	movl	%esp,%ebp
00002543	pushl	%ebx
00002544	pushl	%edi
00002545	pushl	%esi
00002546	subl	$0x6c,%esp
00002549	calll	0x0000254e
0000254e	popl	%ebx
0000254f	movl	0x19685-0x254e(%ebx),%eax
00002555	movl	%eax,0xbc(%ebp)
00002558	movl	(%eax),%eax
0000255a	movl	%eax,0xf0(%ebp)
0000255d	movl	ConVar_Register(int, IConCommandBaseAccessor*),0xcc(%ebp)
00002564	movb	$0xff,0xcc(%ebp)
00002568	movb	$0x64,0xcd(%ebp)
0000256c	movb	$0x64,0xce(%ebp)
00002570	movb	$0xff,0xcf(%ebp)
00002574	movl	0x08(%ebp),%esi
00002577	movl	(%esi),%eax
00002579	movl	%esi,(%esp)
0000257c	call	*0x08(%eax)
0000257f	testb	%al,%al
00002581	jne	0x0000278b
00002587	leal	typeinfo for ConVar_ServerBounded-0x254e(%ebx),%eax
0000258d	movl	%eax,0x08(%esp)
00002591	leal	typeinfo for ConVar-0x254e(%ebx),%eax
00002597	movl	%eax,0x04(%esp)
0000259b	movl	%esi,(%esp)
0000259e	movl	$0xffffffff,0x0c(%esp)
000025a6	calll	___dynamic_cast
000025ab	movl	%eax,%edi
000025ad	movl	0x1c(%esi),%eax
000025b0	movss	0x40(%eax),%xmm0
000025b5	movss	%xmm0,0xb8(%ebp)
000025ba	movss	0x38(%eax),%xmm0
000025bf	movss	%xmm0,0xb0(%ebp)
000025c4	movb	0x3c(%eax),%cl
000025c7	andb	$0x01,%cl
000025ca	movb	%cl,0xb7(%ebp)
000025cd	movb	0x34(%eax),%al
000025d0	andb	$0x01,%al
000025d2	movb	%al,0xaf(%ebp)
000025d5	testl	%edi,%edi
000025d7	jne	0x000027e6
000025dd	movl	(%esi),%eax
000025df	movl	%esi,(%esp)
000025e2	movl	ConCommand::CanAutoComplete(),0x04(%esp)
000025ea	call	*0x0c(%eax)
000025ed	testb	%al,%al
000025ef	je	0x0000265d
000025f1	movl	%edi,ConVar_Unregister()(%ebp)
000025f4	movl	0x1c(%esi),%eax
000025f7	movss	0x2c(%eax),%xmm0
000025fc	movl	0x30(%eax),%edi
000025ff	leal	0xd0(%ebp),%esi
00002602	cvtsi2ss	%edi,%xmm1
00002606	subss	%xmm0,%xmm1
0000260a	cvtss2sd	%xmm1,%xmm1
0000260e	andpd	0x15d60-0x254e(%ebx),%xmm1
00002616	movsd	0x15d70-0x254e(%ebx),%xmm2
0000261e	ucomisd	%xmm1,%xmm2
00002622	jbe	0x0000264b
00002624	movl	%edi,0x0c(%esp)
00002628	leal	0x16109-0x254e(%ebx),%eax
0000262e	movl	%eax,0x08(%esp)
00002632	movl	%esi,(%esp)
00002635	movl	$0x00000020,0x04(%esp)
0000263d	calll	V_snprintf(char*, int, char const*, ...)
00002642	testl	%esi,%esi
00002644	jne	0x0000267f
00002646	jmp	0x000026cf
0000264b	cvtss2sd	%xmm0,%xmm0
0000264f	movsd	%xmm0,0x0c(%esp)
00002655	leal	0x16106-0x254e(%ebx),%eax
0000265b	jmp	0x0000262e
0000265d	movl	%edi,ConVar_Unregister()(%ebp)
00002660	testb	$0x10,0x15(%esi)
00002664	je	0x0000266e
00002666	leal	0x1624c-0x254e(%ebx),%esi
0000266c	jmp	0x0000267f
0000266e	movl	0x1c(%esi),%eax
00002671	movl	0x24(%eax),%eax
00002674	leal	0x1604c-0x254e(%ebx),%esi
0000267a	testl	%eax,%eax
0000267c	cmovnel	%eax,%esi
0000267f	movl	0x08(%ebp),%edi
00002682	movl	(%edi),%eax
00002684	movl	%edi,(%esp)
00002687	call	*0x14(%eax)
0000268a	movl	%esi,0x0c(%esp)
0000268e	movl	%eax,0x08(%esp)
00002692	leal	0x161b9-0x254e(%ebx),%eax
00002698	movl	%eax,0x04(%esp)
0000269c	leal	0xcc(%ebp),%eax
0000269f	movl	%eax,(%esp)
000026a2	calll	ConColorMsg(Color const&, char const*, ...)
000026a7	movl	0x1c(%edi),%eax
000026aa	movl	0x20(%eax),%edi
000026ad	movl	%edi,0x04(%esp)
000026b1	movl	%esi,(%esp)
000026b4	calll	_strcasecmp
000026b9	testl	%eax,%eax
000026bb	je	0x000026cf
000026bd	movl	%edi,0x04(%esp)
000026c1	leal	0x161c5-0x254e(%ebx),%eax
000026c7	movl	%eax,(%esp)
000026ca	calll	ConMsg(char const*, ...)
000026cf	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xaf(%ebp)
000026d3	je	0x000026f2
000026d5	movss	0xb0(%ebp),%xmm0
000026da	cvtss2sd	%xmm0,%xmm0
000026de	movsd	%xmm0,0x04(%esp)
000026e4	leal	0x161d4-0x254e(%ebx),%eax
000026ea	movl	%eax,(%esp)
000026ed	calll	ConMsg(char const*, ...)
000026f2	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),0xb7(%ebp)
000026f6	movl	0x08(%ebp),%esi
000026f9	movl	ConVar_Unregister()(%ebp),%edi
000026fc	je	0x0000271b
000026fe	movss	0xb8(%ebp),%xmm0
00002703	cvtss2sd	%xmm0,%xmm0
00002707	movsd	%xmm0,0x04(%esp)
0000270d	leal	0x161dd-0x254e(%ebx),%eax
00002713	movl	%eax,(%esp)
00002716	calll	ConMsg(char const*, ...)
0000271b	leal	0x161b7-0x254e(%ebx),%eax
00002721	movl	%eax,(%esp)
00002724	calll	ConMsg(char const*, ...)
00002729	testl	%edi,%edi
0000272b	je	0x000027ac
0000272d	movl	(%edi),%eax
0000272f	movl	%edi,(%esp)
00002732	call	*0x50(%eax)
00002735	fstps	0xc4(%ebp)
00002738	movl	0x1c(%esi),%eax
0000273b	movss	0xc4(%ebp),%xmm0
00002740	subss	0x2c(%eax),%xmm0
00002745	cvtss2sd	%xmm0,%xmm0
00002749	andpd	0x15d60-0x254e(%ebx),%xmm0
00002751	ucomisd	0x15d78-0x254e(%ebx),%xmm0
00002759	jbe	0x000027ac
0000275b	movl	0x1c(%esi),%eax
0000275e	movss	0x2c(%eax),%xmm0
00002763	movss	%xmm0,0xb8(%ebp)
00002768	movl	(%edi),%eax
0000276a	movl	%edi,(%esp)
0000276d	call	*0x50(%eax)
00002770	fstpl	0x10(%esp)
00002774	movss	0xb8(%ebp),%xmm0
00002779	cvtss2sd	%xmm0,%xmm0
0000277d	movsd	%xmm0,0x08(%esp)
00002783	leal	0x161e6-0x254e(%ebx),%eax
00002789	jmp	0x0000279d
0000278b	movl	(%esi),%eax
0000278d	movl	%esi,(%esp)
00002790	call	*0x14(%eax)
00002793	movl	%eax,0x08(%esp)
00002797	leal	0x1623f-0x254e(%ebx),%eax
0000279d	movl	%eax,0x04(%esp)
000027a1	leal	0xcc(%ebp),%eax
000027a4	movl	%eax,(%esp)
000027a7	calll	ConColorMsg(Color const&, char const*, ...)
000027ac	movl	%esi,(%esp)
000027af	calll	ConVar_PrintFlags(ConCommandBase const*)
000027b4	movl	(%esi),%eax
000027b6	movl	%esi,(%esp)
000027b9	call	*0x18(%eax)
000027bc	testl	%eax,%eax
000027be	je	0x000027d7
000027c0	cmpb	ConVar_Register(int, IConCommandBaseAccessor*),(%eax)
000027c3	je	0x000027d7
000027c5	movl	%eax,0x04(%esp)
000027c9	leal	0x16245-0x254e(%ebx),%eax
000027cf	movl	%eax,(%esp)
000027d2	calll	ConMsg(char const*, ...)
000027d7	movl	0xbc(%ebp),%eax
000027da	movl	(%eax),%eax
000027dc	cmpl	0xf0(%ebp),%eax
000027df	je	0x0000280d
000027e1	calll	___stack_chk_fail
000027e6	movl	(%edi),%eax
000027e8	movl	%edi,(%esp)
000027eb	call	*0x54(%eax)
000027ee	movl	%edi,%ecx
000027f0	movl	%ecx,ConVar_Unregister()(%ebp)
000027f3	movl	%eax,%edi
000027f5	movl	(%ecx),%eax
000027f7	movl	%ecx,(%esp)
000027fa	call	*0x50(%eax)
000027fd	fstps	0xc8(%ebp)
00002800	leal	0xd0(%ebp),%esi
00002803	movss	0xc8(%ebp),%xmm0
00002808	jmp	0x00002602
0000280d	addl	$0x6c,%esp
00002810	popl	%esi
00002811	popl	%edi
00002812	popl	%ebx
00002813	popl	%ebp
00002814	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(datamanager.o):
(__TEXT,__text) section
CDataManagerBase::CDataManagerBase(unsigned int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x1c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	leal	vtable for CDataManagerBase-0xe+0x00000008(%eax),%eax
00000015	movl	0x08(%ebp),%edi
00000018	movl	%eax,(%edi)
0000001a	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x10(%edi)
00000021	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x0c(%edi)
00000028	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x18(%edi)
0000002f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x14(%edi)
00000036	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x20(%edi)
0000003d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x1c(%edi)
00000044	movw	$0xffff,0x2e(%edi)
0000004a	movw	$0xffff,0x24(%edi)
00000050	movw	$0xffff,0x26(%edi)
00000056	movw	$0xffff,0x28(%edi)
0000005c	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x2a(%edi)
00000062	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x2c(%edi)
00000068	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x30(%edi)
0000006f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x34(%edi)
00000076	movw	$0xffff,0x38(%edi)
0000007c	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x3a(%edi)
00000082	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x3c(%edi)
00000089	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x40(%edi)
00000090	movl	0x0c(%ebp),%eax
00000093	movl	%eax,0x04(%edi)
00000096	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x08(%edi)
0000009d	leal	0x18(%edi),%ebx
000000a0	leal	0x0c(%edi),%eax
000000a3	movl	%eax,0xf0(%ebp)
000000a6	movl	%ebx,(%esp)
000000a9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
000000b1	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
000000b6	movw	%ax,%si
000000b9	cmpw	$0xff,%si
000000bd	je	0x000000d6
000000bf	movzwl	%si,%eax
000000c2	movl	%eax,0x08(%esp)
000000c6	movl	%ebx,(%esp)
000000c9	movl	$0x0000ffff,0x04(%esp)
000000d1	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
000000d6	movl	0x18(%edi),%edx
000000d9	movzwl	%si,%eax
000000dc	imull	$0x0a,%eax,%ecx
000000df	movw	$0xffff,0x02(%edx,%ecx)
000000e6	movl	0x18(%edi),%edx
000000e9	movw	$0xffff,(%edx,%ecx)
000000ef	movl	0x18(%edi),%edx
000000f2	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
000000f9	movw	%ax,0x44(%edi)
000000fd	movl	%ebx,(%esp)
00000100	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
00000108	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
0000010d	movw	%ax,%si
00000110	cmpw	$0xff,%si
00000114	je	0x0000012d
00000116	movzwl	%si,%eax
00000119	movl	%eax,0x08(%esp)
0000011d	movl	%ebx,(%esp)
00000120	movl	$0x0000ffff,0x04(%esp)
00000128	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
0000012d	movl	0x18(%edi),%edx
00000130	movzwl	%si,%eax
00000133	imull	$0x0a,%eax,%ecx
00000136	movw	$0xffff,0x02(%edx,%ecx)
0000013d	movl	0x18(%edi),%edx
00000140	movw	$0xffff,(%edx,%ecx)
00000146	movl	0x18(%edi),%edx
00000149	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
00000150	movw	%ax,0x46(%edi)
00000154	movl	%ebx,(%esp)
00000157	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
0000015f	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
00000164	movw	%ax,%si
00000167	cmpw	$0xff,%si
0000016b	je	0x00000184
0000016d	movzwl	%si,%eax
00000170	movl	%eax,0x08(%esp)
00000174	movl	%ebx,(%esp)
00000177	movl	$0x0000ffff,0x04(%esp)
0000017f	calll	CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
00000184	movl	0x18(%edi),%edx
00000187	movzwl	%si,%eax
0000018a	imull	$0x0a,%eax,%ecx
0000018d	movw	$0xffff,0x02(%edx,%ecx)
00000194	movl	0x18(%edi),%edx
00000197	movw	$0xffff,(%edx,%ecx)
0000019d	movl	0x18(%edi),%edx
000001a0	movw	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%edx,%ecx)
000001a7	movw	%ax,0x48(%edi)
000001ab	andb	$0xfe,0x4a(%edi)
000001af	addl	$0x1c,%esp
000001b2	popl	%esi
000001b3	popl	%edi
000001b4	popl	%ebx
000001b5	popl	%ebp
000001b6	ret
000001b7	movl	%eax,%esi
000001b9	movl	0xf0(%ebp),%eax
000001bc	movl	%eax,(%esp)
000001bf	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
000001c4	movl	%esi,(%esp)
000001c7	calll	__Unwind_Resume
000001cc	calll	std::terminate()
000001d1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
000001e0	pushl	%ebp
000001e1	movl	%esp,%ebp
000001e3	pushl	%edi
000001e4	pushl	%esi
000001e5	subl	$0x10,%esp
000001e8	calll	0x000001ed
000001ed	popl	%eax
000001ee	leal	vtable for CDataManagerBase-0x1ed+0x00000008(%eax),%eax
000001f4	movl	0x08(%ebp),%edi
000001f7	movl	%eax,(%edi)
000001f9	leal	0x0c(%edi),%eax
000001fc	movl	%eax,(%esp)
000001ff	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000204	addl	$0x10,%esp
00000207	popl	%esi
00000208	popl	%edi
00000209	popl	%ebp
0000020a	jmp	operator delete(void*)
0000020f	movl	%eax,%esi
00000211	movl	%edi,(%esp)
00000214	calll	operator delete(void*)
00000219	movl	%esi,(%esp)
0000021c	calll	__Unwind_Resume
00000221	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	subl	$0x08,%esp
00000236	calll	0x0000023b
0000023b	popl	%eax
0000023c	leal	vtable for CDataManagerBase-0x23b+0x00000008(%eax),%ecx
00000242	movl	0x08(%ebp),%eax
00000245	movl	%ecx,(%eax)
00000247	addl	$0x0c,%eax
0000024a	movl	%eax,(%esp)
0000024d	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000252	addl	$0x08,%esp
00000255	popl	%ebp
00000256	ret
00000257	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::~CDataManagerBase():
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	subl	$0x08,%esp
00000266	calll	0x0000026b
0000026b	popl	%eax
0000026c	leal	vtable for CDataManagerBase-0x26b+0x00000008(%eax),%ecx
00000272	movl	0x08(%ebp),%eax
00000275	movl	%ecx,(%eax)
00000277	addl	$0x0c,%eax
0000027a	movl	%eax,(%esp)
0000027d	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
00000282	addl	$0x08,%esp
00000285	popl	%ebp
00000286	ret
00000287	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::NotifySizeChanged(memhandle_t__*, unsigned int, unsigned int):
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%esi
00000294	pushl	%eax
00000295	movl	0x08(%ebp),%esi
00000298	movl	(%esi),%eax
0000029a	movl	%esi,(%esp)
0000029d	call	(%eax)
0000029f	movl	0x14(%ebp),%eax
000002a2	subl	0x10(%ebp),%eax
000002a5	addl	%eax,0x08(%esi)
000002a8	movl	(%esi),%eax
000002aa	movl	0x08(%eax),%eax
000002ad	addl	$0x04,%esp
000002b0	popl	%esi
000002b1	popl	%ebp
000002b2	jmp	*%eax
000002b4	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::SetTargetSize(unsigned int):
000002c0	movl	0x08(%esp),%eax
000002c4	movl	0x04(%esp),%ecx
000002c8	movl	%eax,0x04(%ecx)
000002cb	ret
000002cc	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushAllUnlocked():
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	pushl	%ebx
000002d4	pushl	%edi
000002d5	pushl	%esi
000002d6	subl	$0x3c,%esp
000002d9	calll	0x000002de
000002de	popl	%eax
000002df	movl	0x220bd-0x2de(%eax),%eax
000002e5	movl	%eax,0xc4(%ebp)
000002e8	movl	(%eax),%eax
000002ea	movl	%eax,0xf0(%ebp)
000002ed	movl	0x08(%ebp),%edi
000002f0	movl	(%edi),%eax
000002f2	subl	$0x10,%esp
000002f5	movl	%edi,(%esp)
000002f8	call	(%eax)
000002fa	addl	$0x10,%esp
000002fd	movl	0x18(%edi),%eax
00000300	movzwl	0x44(%edi),%ecx
00000304	imull	$0x0a,%ecx,%ecx
00000307	movzwl	0x04(%eax,%ecx),%ebx
0000030c	movl	%ebx,0xbc(%ebp)
0000030f	leal	0x0000000f(,%ebx,4),%edx
00000316	andl	$0xf0,%edx
00000319	movl	%esp,%esi
0000031b	subl	%edx,%esi
0000031d	movl	%esi,%edx
0000031f	movl	%edx,%esp
00000321	movl	%edx,0xd8(%ebp)
00000324	movl	%ebx,0xdc(%ebp)
00000327	movl	$0xffffffff,0xe0(%ebp)
0000032e	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
00000335	movl	%edx,0xe8(%ebp)
00000338	movzwl	(%eax,%ecx),%eax
0000033c	movl	%eax,0xd0(%ebp)
0000033f	movl	0x08(%edi),%eax
00000342	movl	%eax,0xc0(%ebp)
00000345	leal	0x0c(%edi),%eax
00000348	movl	%eax,0xc8(%ebp)
0000034b	xorl	%esi,%esi
0000034d	jmp	0x000003b3
0000034f	nop
00000350	movl	%edi,%ecx
00000352	subl	%eax,%ecx
00000354	subl	$0x10,%esp
00000357	movl	%ecx,0x04(%esp)
0000035b	leal	0xd8(%ebp),%eax
0000035e	movl	%eax,(%esp)
00000361	calll	CUtlMemory<void*, int>::Grow(int)
00000366	addl	$0x10,%esp
00000369	movl	0xd8(%ebp),%edx
0000036c	movl	0xe4(%ebp),%ebx
0000036f	incl	%ebx
00000370	movl	%ebx,0xe4(%ebp)
00000373	movl	%edx,0xe8(%ebp)
00000376	movl	%ebx,%eax
00000378	subl	%esi,%eax
0000037a	decl	%eax
0000037b	testl	%eax,%eax
0000037d	jle	0x000003a1
0000037f	subl	$0x10,%esp
00000382	shll	$0x02,%eax
00000385	movl	%eax,0x08(%esp)
00000389	leal	(%edx,%esi,4),%eax
0000038c	movl	%eax,0x04(%esp)
00000390	leal	(%edx,%edi,4),%eax
00000393	movl	%eax,(%esp)
00000396	calll	_memmove
0000039b	addl	$0x10,%esp
0000039e	movl	0xd8(%ebp),%edx
000003a1	shll	$0x02,%esi
000003a4	movl	%esi,%eax
000003a6	addl	%edx,%eax
000003a8	movl	%ebx,%esi
000003aa	je	0x000003b3
000003ac	movl	0xcc(%ebp),%ecx
000003af	movl	%ecx,(%eax)
000003b1	movl	%ebx,%esi
000003b3	movl	%edx,0xd4(%ebp)
000003b6	movl	0xd0(%ebp),%ecx
000003b9	cmpw	$0xff,%cx
000003bd	je	0x00000498
000003c3	movl	0x08(%ebp),%ebx
000003c6	movl	0x0c(%ebx),%eax
000003c9	movzwl	%cx,%edi
000003cc	imull	$0x0c,%edi,%ecx
000003cf	movw	0x0a(%eax,%ecx),%ax
000003d4	movl	%eax,0xd0(%ebp)
000003d7	movzwl	0x44(%ebx),%eax
000003db	subl	$0x10,%esp
000003de	movl	%edi,0x08(%esp)
000003e2	movl	%eax,0x04(%esp)
000003e6	movl	0xc8(%ebp),%eax
000003e9	movl	%eax,(%esp)
000003ec	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000003f1	addl	$0x10,%esp
000003f4	subl	$0x10,%esp
000003f7	movl	%edi,0x04(%esp)
000003fb	movl	%ebx,(%esp)
000003fe	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000403	addl	$0x10,%esp
00000406	movl	%eax,0xcc(%ebp)
00000409	leal	0x01(%esi),%edi
0000040c	movl	0xdc(%ebp),%eax
0000040f	cmpl	%eax,%edi
00000411	movl	%esi,%ebx
00000413	movl	0xd4(%ebp),%edx
00000416	jle	0x0000036f
0000041c	jmp	0x00000350
00000421	jmp	0x00000425
00000423	jmp	0x00000425
00000425	movl	%eax,%esi
00000427	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
0000042e	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000432	jns	0x00000448
00000434	movl	0xd4(%ebp),%eax
00000437	movl	%eax,0xe8(%ebp)
0000043a	subl	$0x10,%esp
0000043d	movl	%esi,(%esp)
00000440	calll	__Unwind_Resume
00000445	addl	$0x10,%esp
00000448	movl	0xd4(%ebp),%eax
0000044b	testl	%eax,%eax
0000044d	jne	0x00000466
0000044f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000456	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000045d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000464	jmp	0x0000043a
00000466	subl	$0x10,%esp
00000469	movl	%eax,(%esp)
0000046c	calll	_free
00000471	addl	$0x10,%esp
00000474	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
0000047b	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
0000047f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000486	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000048d	js	0x0000043a
0000048f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000496	jmp	0x0000043a
00000498	movl	0x08(%ebp),%edi
0000049b	movl	(%edi),%eax
0000049d	movl	0x08(%eax),%eax
000004a0	subl	$0x10,%esp
000004a3	movl	%edi,(%esp)
000004a6	call	*%eax
000004a8	addl	$0x10,%esp
000004ab	xorl	%esi,%esi
000004ad	movl	0xd4(%ebp),%ecx
000004b0	movl	0xbc(%ebp),%ebx
000004b3	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000004c0	cmpl	%ebx,%esi
000004c2	jge	0x000004e1
000004c4	movl	(%ecx,%esi,4),%ecx
000004c7	movl	(%edi),%eax
000004c9	movl	0x14(%eax),%eax
000004cc	subl	$0x10,%esp
000004cf	movl	%ecx,0x04(%esp)
000004d3	movl	%edi,(%esp)
000004d6	call	*%eax
000004d8	addl	$0x10,%esp
000004db	incl	%esi
000004dc	movl	0xd4(%ebp),%ecx
000004df	jmp	0x000004c0
000004e1	movl	0x08(%edi),%eax
000004e4	movl	0xc0(%ebp),%esi
000004e7	subl	%eax,%esi
000004e9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000004f0	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
000004f4	jns	0x000004fb
000004f6	movl	%ecx,0xe8(%ebp)
000004f9	jmp	0x0000053f
000004fb	testl	%ecx,%ecx
000004fd	jne	0x0000050f
000004ff	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000506	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
0000050d	jmp	0x00000538
0000050f	subl	$0x10,%esp
00000512	movl	%ecx,(%esp)
00000515	calll	_free
0000051a	addl	$0x10,%esp
0000051d	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
00000524	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000528	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000052f	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000536	js	0x0000053f
00000538	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000053f	movl	0xc4(%ebp),%eax
00000542	movl	(%eax),%eax
00000544	cmpl	0xf0(%ebp),%eax
00000547	jne	0x00000553
00000549	movl	%esi,%eax
0000054b	leal	0xf4(%ebp),%esp
0000054e	popl	%esi
0000054f	popl	%edi
00000550	popl	%ebx
00000551	popl	%ebp
00000552	ret
00000553	calll	___stack_chk_fail
00000558	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetForFreeByIndex(unsigned short):
00000560	pushl	%ebp
00000561	movl	%esp,%ebp
00000563	pushl	%ebx
00000564	pushl	%edi
00000565	pushl	%esi
00000566	subl	$0x2c,%esp
00000569	calll	0x0000056e
0000056e	popl	%esi
0000056f	xorl	%eax,%eax
00000571	movw	0x0c(%ebp),%cx
00000575	cmpw	$0xff,%cx
00000579	je	0x00000684
0000057f	movl	0x08(%ebp),%ebx
00000582	movl	(%ebx),%eax
00000584	movl	0x0c(%ebx),%edx
00000587	movl	%edx,0xe4(%ebp)
0000058a	movzwl	%cx,%ecx
0000058d	movl	%ecx,0xf0(%ebp)
00000590	imull	$0x0c,%ecx,%edi
00000593	movl	0x04(%edx,%edi),%ecx
00000597	movl	%ecx,0x04(%esp)
0000059b	movl	%ebx,(%esp)
0000059e	call	*0x18(%eax)
000005a1	movl	0x08(%ebx),%ecx
000005a4	cmpl	%ecx,%eax
000005a6	jbe	0x000005cf
000005a8	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount-0x56e(%esi)
000005b2	movl	%ecx,%eax
000005b4	jg	0x000005cf
000005b6	leal	0x1d9e0-0x56e(%esi),%eax
000005bc	movl	%eax,(%esp)
000005bf	calll	_Warning
000005c4	incl	CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount-0x56e(%esi)
000005ca	movl	0x08(%ebx),%ecx
000005cd	movl	%ecx,%eax
000005cf	movl	0xe4(%ebp),%esi
000005d2	leal	0x04(%esi,%edi),%edx
000005d6	movl	%edi,0xe0(%ebp)
000005d9	leal	0x0c(%ebx),%edi
000005dc	movl	%edi,0xec(%ebp)
000005df	subl	%eax,%ecx
000005e1	movl	%ecx,0x08(%ebx)
000005e4	movl	(%edx),%eax
000005e6	movl	%eax,0xe8(%ebp)
000005e9	movl	CDataManagerBase::CDataManagerBase(unsigned int),(%edx)
000005ef	movl	0xe0(%ebp),%edi
000005f2	incw	0x02(%esi,%edi)
000005f7	movw	0x48(%ebx),%cx
000005fb	movw	%cx,0xe4(%ebp)
000005ff	movl	0xf0(%ebp),%eax
00000602	movl	%eax,0x08(%esp)
00000606	movzwl	%cx,%esi
00000609	movl	%esi,0x04(%esp)
0000060d	movl	0xec(%ebp),%eax
00000610	movl	%eax,(%esp)
00000613	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000618	movl	0x0c(%ebx),%ecx
0000061b	movw	$0xffff,0x0a(%ecx,%edi)
00000622	imull	$0x0a,%esi,%eax
00000625	movl	0x18(%ebx),%edx
00000628	movw	0x02(%edx,%eax),%dx
0000062d	movw	%dx,0x08(%ecx,%edi)
00000632	movl	0x18(%ebx),%edx
00000635	movw	0x0c(%ebp),%si
00000639	movw	%si,0x02(%edx,%eax)
0000063e	movw	%si,%dx
00000641	movzwl	0x08(%ecx,%edi),%ecx
00000646	cmpl	$0x0000ffff,%ecx
0000064c	jne	0x00000657
0000064e	movl	0x18(%ebx),%ecx
00000651	movw	%dx,(%ecx,%eax)
00000655	jmp	0x00000667
00000657	movw	%dx,%si
0000065a	movl	0xec(%ebp),%edx
0000065d	movl	(%edx),%edx
0000065f	imull	$0x0c,%ecx,%ecx
00000662	movw	%si,0x0a(%edx,%ecx)
00000667	movl	0x18(%ebx),%ecx
0000066a	incw	0x04(%ecx,%eax)
0000066f	movl	0x34(%ebx),%edx
00000672	testl	%edx,%edx
00000674	movl	0xe8(%ebp),%eax
00000677	je	0x00000684
00000679	movl	0xf0(%ebp),%ecx
0000067c	movw	0xe4(%ebp),%si
00000680	movw	%si,(%edx,%ecx,2)
00000684	addl	$0x2c,%esp
00000687	popl	%esi
00000688	popl	%edi
00000689	popl	%ebx
0000068a	popl	%ebp
0000068b	ret
0000068c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushToTargetSize():
00000690	pushl	%ebp
00000691	movl	%esp,%ebp
00000693	subl	$0x08,%esp
00000696	movl	0x08(%ebp),%eax
00000699	movl	%eax,(%esp)
0000069c	movl	CDataManagerBase::CDataManagerBase(unsigned int),0x04(%esp)
000006a4	calll	CDataManagerBase::EnsureCapacity(unsigned int)
000006a9	addl	$0x08,%esp
000006ac	popl	%ebp
000006ad	ret
000006ae	nop
CDataManagerBase::EnsureCapacity(unsigned int):
000006b0	pushl	%ebp
000006b1	movl	%esp,%ebp
000006b3	pushl	%ebx
000006b4	pushl	%edi
000006b5	pushl	%esi
000006b6	subl	$0x1c,%esp
000006b9	movl	0x08(%ebp),%ebx
000006bc	movl	0x08(%ebx),%edx
000006bf	movl	%edx,0xf0(%ebp)
000006c2	leal	0x0c(%ebx),%esi
000006c5	jmp	0x0000070b
000006c7	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000006d0	movzwl	%cx,%edi
000006d3	movl	%edi,0x08(%esp)
000006d7	movzwl	%ax,%eax
000006da	movl	%eax,0x04(%esp)
000006de	movl	%esi,(%esp)
000006e1	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000006e6	movl	%edi,0x04(%esp)
000006ea	movl	%ebx,(%esp)
000006ed	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
000006f2	movl	%eax,%edi
000006f4	movl	(%ebx),%eax
000006f6	movl	%ebx,(%esp)
000006f9	call	*0x08(%eax)
000006fc	movl	(%ebx),%eax
000006fe	movl	%edi,0x04(%esp)
00000702	movl	%ebx,(%esp)
00000705	call	*0x14(%eax)
00000708	movl	0x08(%ebx),%edx
0000070b	movl	0x04(%ebx),%ecx
0000070e	cmpl	%ecx,%edx
00000710	ja	0x00000719
00000712	subl	%edx,%ecx
00000714	cmpl	0x0c(%ebp),%ecx
00000717	jae	0x0000073f
00000719	movl	(%ebx),%eax
0000071b	movl	%ebx,(%esp)
0000071e	call	(%eax)
00000720	movl	0x18(%ebx),%ecx
00000723	movzwl	0x44(%ebx),%eax
00000727	imull	$0x0a,%eax,%edx
0000072a	movw	(%ecx,%edx),%cx
0000072e	cmpw	$0xff,%cx
00000732	jne	0x000006d0
00000734	movl	(%ebx),%eax
00000736	movl	%ebx,(%esp)
00000739	call	*0x08(%eax)
0000073c	movl	0x08(%ebx),%edx
0000073f	movl	0xf0(%ebp),%eax
00000742	subl	%edx,%eax
00000744	addl	$0x1c,%esp
00000747	popl	%esi
00000748	popl	%edi
00000749	popl	%ebx
0000074a	popl	%ebp
0000074b	ret
0000074c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::FlushAll():
00000750	pushl	%ebp
00000751	movl	%esp,%ebp
00000753	pushl	%ebx
00000754	pushl	%edi
00000755	pushl	%esi
00000756	subl	$0x3c,%esp
00000759	calll	0x0000075e
0000075e	popl	%eax
0000075f	movl	0x220bd-0x75e(%eax),%eax
00000765	movl	%eax,0xc0(%ebp)
00000768	movl	(%eax),%eax
0000076a	movl	%eax,0xf0(%ebp)
0000076d	movl	0x08(%ebp),%edi
00000770	movl	(%edi),%eax
00000772	subl	$0x10,%esp
00000775	movl	%edi,(%esp)
00000778	call	(%eax)
0000077a	addl	$0x10,%esp
0000077d	movl	0x18(%edi),%eax
00000780	movzwl	0x44(%edi),%ecx
00000784	imull	$0x0a,%ecx,%ecx
00000787	movzwl	0x04(%eax,%ecx),%edx
0000078c	movzwl	0x46(%edi),%esi
00000790	imull	$0x0a,%esi,%esi
00000793	movzwl	0x04(%eax,%esi),%ebx
00000798	addl	%edx,%ebx
0000079a	movl	%ebx,0xb8(%ebp)
0000079d	leal	0x0000000f(,%ebx,4),%edx
000007a4	andl	$0xf0,%edx
000007a7	movl	%esp,%esi
000007a9	subl	%edx,%esi
000007ab	movl	%esi,%edx
000007ad	movl	%edx,%esp
000007af	movl	%edx,0xd8(%ebp)
000007b2	movl	%ebx,0xdc(%ebp)
000007b5	movl	$0xffffffff,0xe0(%ebp)
000007bc	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000007c3	movl	%edx,0xe8(%ebp)
000007c6	movzwl	(%eax,%ecx),%ecx
000007ca	movl	0x08(%edi),%eax
000007cd	movl	%eax,0xbc(%ebp)
000007d0	leal	0x0c(%edi),%eax
000007d3	movl	%eax,0xc8(%ebp)
000007d6	xorl	%ebx,%ebx
000007d8	jmp	0x00000849
000007da	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000007e0	movl	%esi,%ecx
000007e2	subl	%eax,%ecx
000007e4	subl	$0x10,%esp
000007e7	movl	%ecx,0x04(%esp)
000007eb	leal	0xd8(%ebp),%eax
000007ee	movl	%eax,(%esp)
000007f1	calll	CUtlMemory<void*, int>::Grow(int)
000007f6	addl	$0x10,%esp
000007f9	movl	0xd8(%ebp),%edx
000007fc	movl	0xe4(%ebp),%edi
000007ff	incl	%edi
00000800	movl	%edi,0xe4(%ebp)
00000803	movl	%edx,0xe8(%ebp)
00000806	movl	%edi,%eax
00000808	movl	0xd0(%ebp),%ebx
0000080b	subl	%ebx,%eax
0000080d	decl	%eax
0000080e	testl	%eax,%eax
00000810	jle	0x00000834
00000812	subl	$0x10,%esp
00000815	shll	$0x02,%eax
00000818	movl	%eax,0x08(%esp)
0000081c	leal	(%edx,%ebx,4),%eax
0000081f	movl	%eax,0x04(%esp)
00000823	leal	(%edx,%esi,4),%eax
00000826	movl	%eax,(%esp)
00000829	calll	_memmove
0000082e	addl	$0x10,%esp
00000831	movl	0xd8(%ebp),%edx
00000834	movl	0xcc(%ebp),%ecx
00000837	shll	$0x02,%ebx
0000083a	movl	%ebx,%eax
0000083c	addl	%edx,%eax
0000083e	movl	%edi,%ebx
00000840	je	0x00000849
00000842	movl	0xc4(%ebp),%esi
00000845	movl	%esi,(%eax)
00000847	movl	%edi,%ebx
00000849	cmpw	$0xff,%cx
0000084d	je	0x00000910
00000853	movl	%edx,0xd4(%ebp)
00000856	movl	0x08(%ebp),%edi
00000859	movl	0x0c(%edi),%eax
0000085c	movzwl	%cx,%esi
0000085f	imull	$0x0c,%esi,%ecx
00000862	movw	0x0a(%eax,%ecx),%ax
00000867	movl	%eax,0xcc(%ebp)
0000086a	movzwl	0x44(%edi),%eax
0000086e	subl	$0x10,%esp
00000871	movl	%esi,0x08(%esp)
00000875	movl	%eax,0x04(%esp)
00000879	movl	0xc8(%ebp),%eax
0000087c	movl	%eax,(%esp)
0000087f	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000884	addl	$0x10,%esp
00000887	subl	$0x10,%esp
0000088a	movl	%esi,0x04(%esp)
0000088e	movl	%edi,(%esp)
00000891	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000896	addl	$0x10,%esp
00000899	movl	%eax,0xc4(%ebp)
0000089c	movl	%ebx,0xd0(%ebp)
0000089f	leal	0x01(%ebx),%esi
000008a2	movl	0xdc(%ebp),%eax
000008a5	cmpl	%eax,%esi
000008a7	movl	%ebx,%edi
000008a9	movl	0xd4(%ebp),%edx
000008ac	jle	0x000007ff
000008b2	jmp	0x000007e0
000008b7	jmp	0x000008bd
000008b9	jmp	0x000008bd
000008bb	jmp	0x000008bd
000008bd	movl	%eax,%esi
000008bf	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
000008c6	movl	0xd8(%ebp),%eax
000008c9	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
000008cd	jns	0x000008e0
000008cf	movl	%eax,0xe8(%ebp)
000008d2	subl	$0x10,%esp
000008d5	movl	%esi,(%esp)
000008d8	calll	__Unwind_Resume
000008dd	addl	$0x10,%esp
000008e0	testl	%eax,%eax
000008e2	je	0x000008f9
000008e4	subl	$0x10,%esp
000008e7	movl	%eax,(%esp)
000008ea	calll	_free
000008ef	addl	$0x10,%esp
000008f2	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
000008f9	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000900	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000907	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
0000090e	jmp	0x000008d2
00000910	movl	0x08(%ebp),%ecx
00000913	movl	0x18(%ecx),%eax
00000916	movzwl	0x46(%ecx),%ecx
0000091a	imull	$0x0a,%ecx,%ecx
0000091d	movzwl	(%eax,%ecx),%eax
00000921	movl	%eax,0xcc(%ebp)
00000924	jmp	0x00000993
00000926	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
00000930	movl	%edi,%ecx
00000932	subl	%eax,%ecx
00000934	subl	$0x10,%esp
00000937	movl	%ecx,0x04(%esp)
0000093b	leal	0xd8(%ebp),%eax
0000093e	movl	%eax,(%esp)
00000941	calll	CUtlMemory<void*, int>::Grow(int)
00000946	addl	$0x10,%esp
00000949	movl	0xd8(%ebp),%edx
0000094c	movl	0xe4(%ebp),%esi
0000094f	incl	%esi
00000950	movl	%esi,0xe4(%ebp)
00000953	movl	%edx,0xe8(%ebp)
00000956	movl	%esi,%eax
00000958	subl	%ebx,%eax
0000095a	decl	%eax
0000095b	testl	%eax,%eax
0000095d	jle	0x00000981
0000095f	subl	$0x10,%esp
00000962	shll	$0x02,%eax
00000965	movl	%eax,0x08(%esp)
00000969	leal	(%edx,%ebx,4),%eax
0000096c	movl	%eax,0x04(%esp)
00000970	leal	(%edx,%edi,4),%eax
00000973	movl	%eax,(%esp)
00000976	calll	_memmove
0000097b	addl	$0x10,%esp
0000097e	movl	0xd8(%ebp),%edx
00000981	shll	$0x02,%ebx
00000984	movl	%ebx,%eax
00000986	addl	%edx,%eax
00000988	movl	%esi,%ebx
0000098a	je	0x00000993
0000098c	movl	0xc4(%ebp),%ecx
0000098f	movl	%ecx,(%eax)
00000991	movl	%esi,%ebx
00000993	movl	%edx,0xd4(%ebp)
00000996	movl	0xcc(%ebp),%ecx
00000999	cmpw	$0xff,%cx
0000099d	je	0x00000a0c
0000099f	movl	%ebx,0xd0(%ebp)
000009a2	movl	0x08(%ebp),%ebx
000009a5	movl	0x0c(%ebx),%eax
000009a8	movzwl	%cx,%esi
000009ab	imull	$0x0c,%esi,%edi
000009ae	movw	0x0a(%eax,%edi),%ax
000009b3	movl	%eax,0xcc(%ebp)
000009b6	movzwl	0x46(%ebx),%eax
000009ba	subl	$0x10,%esp
000009bd	movl	%esi,0x08(%esp)
000009c1	movl	%eax,0x04(%esp)
000009c5	movl	0xc8(%ebp),%eax
000009c8	movl	%eax,(%esp)
000009cb	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000009d0	addl	$0x10,%esp
000009d3	movl	0x0c(%ebx),%eax
000009d6	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%edi)
000009dc	subl	$0x10,%esp
000009df	movl	%esi,0x04(%esp)
000009e3	movl	%ebx,(%esp)
000009e6	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
000009eb	addl	$0x10,%esp
000009ee	movl	%eax,0xc4(%ebp)
000009f1	movl	0xd0(%ebp),%ebx
000009f4	leal	0x01(%ebx),%edi
000009f7	movl	0xdc(%ebp),%eax
000009fa	cmpl	%eax,%edi
000009fc	movl	%ebx,%esi
000009fe	movl	0xd4(%ebp),%edx
00000a01	jle	0x0000094f
00000a07	jmp	0x00000930
00000a0c	movl	0x08(%ebp),%ecx
00000a0f	andb	$0xfe,0x4a(%ecx)
00000a13	movl	(%ecx),%eax
00000a15	movl	0x08(%eax),%eax
00000a18	subl	$0x10,%esp
00000a1b	movl	%ecx,(%esp)
00000a1e	movl	%ecx,%edi
00000a20	call	*%eax
00000a22	addl	$0x10,%esp
00000a25	xorl	%esi,%esi
00000a27	movl	0xb8(%ebp),%ebx
00000a2a	nopw	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
00000a30	cmpl	%ebx,%esi
00000a32	movl	0xd4(%ebp),%eax
00000a35	jge	0x00000a51
00000a37	movl	(%eax,%esi,4),%ecx
00000a3a	movl	(%edi),%eax
00000a3c	movl	0x14(%eax),%eax
00000a3f	subl	$0x10,%esp
00000a42	movl	%ecx,0x04(%esp)
00000a46	movl	%edi,(%esp)
00000a49	call	*%eax
00000a4b	addl	$0x10,%esp
00000a4e	incl	%esi
00000a4f	jmp	0x00000a30
00000a51	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe4(%ebp)
00000a58	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000a5c	jns	0x00000a63
00000a5e	movl	%eax,0xe8(%ebp)
00000a61	jmp	0x00000aa7
00000a63	testl	%eax,%eax
00000a65	jne	0x00000a77
00000a67	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000a6e	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000a75	jmp	0x00000aa0
00000a77	subl	$0x10,%esp
00000a7a	movl	%eax,(%esp)
00000a7d	calll	_free
00000a82	addl	$0x10,%esp
00000a85	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xd8(%ebp)
00000a8c	cmpl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00000a90	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000a97	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe8(%ebp)
00000a9e	js	0x00000aa7
00000aa0	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xdc(%ebp)
00000aa7	movl	0xc0(%ebp),%eax
00000aaa	movl	(%eax),%eax
00000aac	cmpl	0xf0(%ebp),%eax
00000aaf	jne	0x00000abc
00000ab1	movl	0xbc(%ebp),%eax
00000ab4	leal	0xf4(%ebp),%esp
00000ab7	popl	%esi
00000ab8	popl	%edi
00000ab9	popl	%ebx
00000aba	popl	%ebp
00000abb	ret
00000abc	calll	___stack_chk_fail
00000ac1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::Purge(unsigned int):
00000ad0	pushl	%ebp
00000ad1	movl	%esp,%ebp
00000ad3	pushl	%esi
00000ad4	subl	$0x14,%esp
00000ad7	movl	0x08(%ebp),%edx
00000ada	movl	0x04(%edx),%eax
00000add	movl	0x08(%edx),%ecx
00000ae0	movl	%edx,(%esp)
00000ae3	movl	0x0c(%ebp),%esi
00000ae6	movl	%ecx,%edx
00000ae8	subl	%esi,%edx
00000aea	cmpl	%esi,%ecx
00000aec	movl	CDataManagerBase::CDataManagerBase(unsigned int),%ecx
00000af1	cmovael	%edx,%ecx
00000af4	subl	%ecx,%eax
00000af6	movl	%eax,0x04(%esp)
00000afa	calll	CDataManagerBase::EnsureCapacity(unsigned int)
00000aff	addl	$0x14,%esp
00000b02	popl	%esi
00000b03	popl	%ebp
00000b04	ret
00000b05	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::DestroyResource(memhandle_t__*):
00000b10	pushl	%ebp
00000b11	movl	%esp,%ebp
00000b13	pushl	%ebx
00000b14	pushl	%edi
00000b15	pushl	%esi
00000b16	subl	$0x0c,%esp
00000b19	movl	0x08(%ebp),%edi
00000b1c	movl	(%edi),%eax
00000b1e	movl	%edi,(%esp)
00000b21	call	(%eax)
00000b23	movl	0x0c(%ebp),%ebx
00000b26	leal	0xff(%ebx),%ecx
00000b29	movzwl	%cx,%esi
00000b2c	movl	0x3c(%edi),%edx
00000b2f	cmpl	%edx,%esi
00000b31	jge	0x00000b55
00000b33	movl	0x0c(%edi),%eax
00000b36	imull	$0x0c,%esi,%esi
00000b39	cmpw	%cx,0x08(%eax,%esi)
00000b3e	jne	0x00000b47
00000b40	cmpw	%cx,0x0a(%eax,%esi)
00000b45	jne	0x00000b55
00000b47	movzwl	0x02(%eax,%esi),%eax
00000b4c	movl	%ebx,%esi
00000b4e	shrl	$0x10,%esi
00000b51	cmpl	%esi,%eax
00000b53	je	0x00000b59
00000b55	movw	$0xffff,%cx
00000b59	movzwl	%cx,%esi
00000b5c	cmpl	%edx,%esi
00000b5e	jge	0x00000bca
00000b60	leal	0x0c(%edi),%ebx
00000b63	movl	(%ebx),%edx
00000b65	imull	$0x0c,%esi,%eax
00000b68	cmpw	%cx,0x08(%edx,%eax)
00000b6d	jne	0x00000b76
00000b6f	cmpw	%cx,0x0a(%edx,%eax)
00000b74	jne	0x00000bca
00000b76	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%edx,%eax)
00000b7b	je	0x00000b8c
00000b7d	movl	0x0c(%ebp),%eax
00000b80	movl	%eax,0x04(%esp)
00000b84	movl	%edi,(%esp)
00000b87	calll	CDataManagerBase::BreakLock(memhandle_t__*)
00000b8c	movzwl	0x44(%edi),%eax
00000b90	movl	%esi,0x08(%esp)
00000b94	movl	%eax,0x04(%esp)
00000b98	movl	%ebx,(%esp)
00000b9b	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ba0	movl	%esi,0x04(%esp)
00000ba4	movl	%edi,(%esp)
00000ba7	calll	CDataManagerBase::GetForFreeByIndex(unsigned short)
00000bac	movl	%eax,%esi
00000bae	movl	(%edi),%eax
00000bb0	movl	%edi,(%esp)
00000bb3	call	*0x08(%eax)
00000bb6	movl	(%edi),%eax
00000bb8	movl	%esi,0x04(%esp)
00000bbc	movl	%edi,(%esp)
00000bbf	call	*0x14(%eax)
00000bc2	addl	$0x0c,%esp
00000bc5	popl	%esi
00000bc6	popl	%edi
00000bc7	popl	%ebx
00000bc8	popl	%ebp
00000bc9	ret
00000bca	movl	(%edi),%eax
00000bcc	movl	0x08(%eax),%eax
00000bcf	addl	$0x0c,%esp
00000bd2	popl	%esi
00000bd3	popl	%edi
00000bd4	popl	%ebx
00000bd5	popl	%ebp
00000bd6	jmp	*%eax
00000bd8	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::BreakLock(memhandle_t__*):
00000be0	pushl	%ebp
00000be1	movl	%esp,%ebp
00000be3	pushl	%ebx
00000be4	pushl	%edi
00000be5	pushl	%esi
00000be6	subl	$0x2c,%esp
00000be9	movl	0x08(%ebp),%ebx
00000bec	movl	(%ebx),%eax
00000bee	movl	%ebx,(%esp)
00000bf1	call	(%eax)
00000bf3	movl	0x0c(%ebp),%eax
00000bf6	leal	0xff(%eax),%ecx
00000bf9	movzwl	%cx,%eax
00000bfc	movl	%eax,0xf0(%ebp)
00000bff	xorl	%esi,%esi
00000c01	cmpl	0x3c(%ebx),%eax
00000c04	jge	0x00000d14
00000c0a	movl	0x0c(%ebx),%eax
00000c0d	imull	$0x0c,0xf0(%ebp),%edi
00000c11	cmpw	%cx,0x08(%eax,%edi)
00000c16	jne	0x00000c25
00000c18	xorl	%esi,%esi
00000c1a	cmpw	%cx,0x0a(%eax,%edi)
00000c1f	jne	0x00000d14
00000c25	movl	%ecx,0xec(%ebp)
00000c28	movl	%ebx,%ecx
00000c2a	movzwl	0x02(%eax,%edi),%edx
00000c2f	movl	%edx,0xe8(%ebp)
00000c32	movl	0x0c(%ebp),%edx
00000c35	movl	%edx,%ebx
00000c37	shrl	$0x10,%ebx
00000c3a	xorl	%esi,%esi
00000c3c	cmpl	%ebx,0xe8(%ebp)
00000c3f	je	0x00000c48
00000c41	movl	%ecx,%ebx
00000c43	jmp	0x00000d14
00000c48	testw	%dx,%dx
00000c4b	movl	%ecx,%ebx
00000c4d	je	0x00000d14
00000c53	movzwl	(%eax,%edi),%ecx
00000c57	movl	%ecx,0xe4(%ebp)
00000c5a	xorl	%esi,%esi
00000c5c	testl	%ecx,%ecx
00000c5e	je	0x00000d14
00000c64	addl	%edi,%eax
00000c66	leal	0x0c(%ebx),%ecx
00000c69	movl	%ecx,0xe8(%ebp)
00000c6c	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax)
00000c71	movzwl	0x46(%ebx),%eax
00000c75	movl	0xf0(%ebp),%esi
00000c78	movl	%esi,0x08(%esp)
00000c7c	movl	%eax,0x04(%esp)
00000c80	movl	%ecx,(%esp)
00000c83	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000c88	movw	0x44(%ebx),%ax
00000c8c	movw	%ax,0xe2(%ebp)
00000c90	movl	%esi,0x08(%esp)
00000c94	movl	%ebx,%esi
00000c96	movzwl	%ax,%ebx
00000c99	movl	%ebx,0x04(%esp)
00000c9d	movl	0xe8(%ebp),%eax
00000ca0	movl	%eax,(%esp)
00000ca3	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ca8	movl	0x0c(%esi),%ecx
00000cab	movw	$0xffff,0x0a(%ecx,%edi)
00000cb2	imull	$0x0a,%ebx,%eax
00000cb5	movl	%esi,%ebx
00000cb7	movl	0x18(%ebx),%edx
00000cba	movw	0x02(%edx,%eax),%dx
00000cbf	movw	%dx,0x08(%ecx,%edi)
00000cc4	movl	0x18(%ebx),%edx
00000cc7	movl	0xec(%ebp),%esi
00000cca	movw	%si,0x02(%edx,%eax)
00000ccf	movl	0xec(%ebp),%edx
00000cd2	movzwl	0x08(%ecx,%edi),%ecx
00000cd7	cmpl	$0x0000ffff,%ecx
00000cdd	jne	0x00000ce8
00000cdf	movl	0x18(%ebx),%ecx
00000ce2	movw	%dx,(%ecx,%eax)
00000ce6	jmp	0x00000cf7
00000ce8	movl	%edx,%esi
00000cea	movl	0xe8(%ebp),%edx
00000ced	movl	(%edx),%edx
00000cef	imull	$0x0c,%ecx,%ecx
00000cf2	movw	%si,0x0a(%edx,%ecx)
00000cf7	movl	0x18(%ebx),%ecx
00000cfa	incw	0x04(%ecx,%eax)
00000cff	movl	0x34(%ebx),%eax
00000d02	testl	%eax,%eax
00000d04	movl	0xe4(%ebp),%esi
00000d07	je	0x00000d14
00000d09	movl	0xf0(%ebp),%ecx
00000d0c	movw	0xe2(%ebp),%dx
00000d10	movw	%dx,(%eax,%ecx,2)
00000d14	movl	(%ebx),%eax
00000d16	movl	%ebx,(%esp)
00000d19	call	*0x08(%eax)
00000d1c	movl	%esi,%eax
00000d1e	addl	$0x2c,%esp
00000d21	popl	%esi
00000d22	popl	%edi
00000d23	popl	%ebx
00000d24	popl	%ebp
00000d25	ret
00000d26	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::LockResource(memhandle_t__*):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%ebx
00000d34	pushl	%edi
00000d35	pushl	%esi
00000d36	subl	$0x2c,%esp
00000d39	movl	0x08(%ebp),%edi
00000d3c	movl	(%edi),%eax
00000d3e	movl	%edi,(%esp)
00000d41	call	(%eax)
00000d43	movl	0x0c(%ebp),%eax
00000d46	leal	0xff(%eax),%edx
00000d49	movzwl	%dx,%eax
00000d4c	movl	%eax,0xf0(%ebp)
00000d4f	xorl	%esi,%esi
00000d51	cmpl	0x3c(%edi),%eax
00000d54	jge	0x00000e6c
00000d5a	movl	0x0c(%edi),%ecx
00000d5d	imull	$0x0c,0xf0(%ebp),%ebx
00000d61	cmpw	%dx,0x08(%ecx,%ebx)
00000d66	jne	0x00000d75
00000d68	xorl	%esi,%esi
00000d6a	cmpw	%dx,0x0a(%ecx,%ebx)
00000d6f	jne	0x00000e6c
00000d75	movl	%edx,0xe4(%ebp)
00000d78	movl	%edi,%eax
00000d7a	movzwl	0x02(%ecx,%ebx),%edx
00000d7f	movl	%edx,0xe8(%ebp)
00000d82	movl	0x0c(%ebp),%edx
00000d85	movl	%edx,%edi
00000d87	shrl	$0x10,%edi
00000d8a	xorl	%esi,%esi
00000d8c	cmpl	%edi,0xe8(%ebp)
00000d8f	je	0x00000d98
00000d91	movl	%eax,%edi
00000d93	jmp	0x00000e6c
00000d98	testw	%dx,%dx
00000d9b	movl	%eax,%edi
00000d9d	je	0x00000e6c
00000da3	leal	0x0c(%edi),%edx
00000da6	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%ecx,%ebx)
00000dab	movl	%ebx,0xec(%ebp)
00000dae	jne	0x00000e5d
00000db4	movzwl	0x44(%edi),%eax
00000db8	movl	0xf0(%ebp),%esi
00000dbb	movl	%esi,0x08(%esp)
00000dbf	movl	%eax,0x04(%esp)
00000dc3	movl	%edx,(%esp)
00000dc6	movl	%edx,%ebx
00000dc8	movl	%ebx,0xe8(%ebp)
00000dcb	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000dd0	movw	0x46(%edi),%ax
00000dd4	movw	%ax,0xe2(%ebp)
00000dd8	movl	%esi,0x08(%esp)
00000ddc	movl	%edi,%esi
00000dde	movzwl	%ax,%edi
00000de1	movl	%edi,0x04(%esp)
00000de5	movl	%ebx,(%esp)
00000de8	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000ded	movl	0x0c(%esi),%ecx
00000df0	movl	0xec(%ebp),%eax
00000df3	movw	$0xffff,0x0a(%ecx,%eax)
00000dfa	imull	$0x0a,%edi,%ebx
00000dfd	movl	%esi,%edi
00000dff	movl	0x18(%edi),%edx
00000e02	movw	0x02(%edx,%ebx),%dx
00000e07	movw	%dx,0x08(%ecx,%eax)
00000e0c	movl	0x18(%edi),%edx
00000e0f	movl	0xe4(%ebp),%esi
00000e12	movw	%si,0x02(%edx,%ebx)
00000e17	movl	%esi,%edx
00000e19	movzwl	0x08(%ecx,%eax),%ecx
00000e1e	cmpl	$0x0000ffff,%ecx
00000e24	jne	0x00000e32
00000e26	movl	0xe8(%ebp),%esi
00000e29	movl	0x18(%edi),%ecx
00000e2c	movw	%dx,(%ecx,%ebx)
00000e30	jmp	0x00000e41
00000e32	movl	%edx,%eax
00000e34	movl	0xe8(%ebp),%esi
00000e37	movl	(%esi),%edx
00000e39	imull	$0x0c,%ecx,%ecx
00000e3c	movw	%ax,0x0a(%edx,%ecx)
00000e41	movl	0x18(%edi),%ecx
00000e44	incw	0x04(%ecx,%ebx)
00000e49	movl	0x34(%edi),%eax
00000e4c	testl	%eax,%eax
00000e4e	movl	%esi,%edx
00000e50	je	0x00000e5d
00000e52	movl	0xf0(%ebp),%ecx
00000e55	movw	0xe2(%ebp),%si
00000e59	movw	%si,(%eax,%ecx,2)
00000e5d	movl	(%edx),%eax
00000e5f	movl	0xec(%ebp),%ecx
00000e62	incw	(%eax,%ecx)
00000e66	movl	(%edx),%eax
00000e68	movl	0x04(%eax,%ecx),%esi
00000e6c	movl	(%edi),%eax
00000e6e	movl	%edi,(%esp)
00000e71	call	*0x08(%eax)
00000e74	movl	%esi,%eax
00000e76	addl	$0x2c,%esp
00000e79	popl	%esi
00000e7a	popl	%edi
00000e7b	popl	%ebx
00000e7c	popl	%ebp
00000e7d	ret
00000e7e	nop
CDataManagerBase::UnlockResource(memhandle_t__*):
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x2c,%esp
00000e89	movl	0x08(%ebp),%edi
00000e8c	movl	(%edi),%eax
00000e8e	movl	%edi,(%esp)
00000e91	call	(%eax)
00000e93	movl	0x0c(%ebp),%eax
00000e96	leal	0xff(%eax),%ecx
00000e99	movzwl	%cx,%eax
00000e9c	movl	%eax,0xf0(%ebp)
00000e9f	xorl	%esi,%esi
00000ea1	cmpl	0x3c(%edi),%eax
00000ea4	jge	0x00000fc9
00000eaa	movl	0x0c(%edi),%eax
00000ead	imull	$0x0c,0xf0(%ebp),%ebx
00000eb1	cmpw	%cx,0x08(%eax,%ebx)
00000eb6	jne	0x00000ec5
00000eb8	xorl	%esi,%esi
00000eba	cmpw	%cx,0x0a(%eax,%ebx)
00000ebf	jne	0x00000fc9
00000ec5	movl	%ecx,0xe8(%ebp)
00000ec8	movl	%edi,%ecx
00000eca	movzwl	0x02(%eax,%ebx),%edx
00000ecf	movl	%edx,0xec(%ebp)
00000ed2	movl	0x0c(%ebp),%edx
00000ed5	movl	%edx,%edi
00000ed7	shrl	$0x10,%edi
00000eda	xorl	%esi,%esi
00000edc	cmpl	%edi,0xec(%ebp)
00000edf	je	0x00000ee8
00000ee1	movl	%ecx,%edi
00000ee3	jmp	0x00000fc9
00000ee8	testw	%dx,%dx
00000eeb	movl	%ecx,%edi
00000eed	je	0x00000fc9
00000ef3	movw	(%eax,%ebx),%cx
00000ef7	leal	0x0c(%edi),%edx
00000efa	testw	%cx,%cx
00000efd	je	0x00000fc3
00000f03	addl	%ebx,%eax
00000f05	decl	%ecx
00000f06	movw	%cx,(%eax)
00000f09	movl	(%edx),%eax
00000f0b	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%ebx)
00000f10	jne	0x00000fc3
00000f16	movzwl	0x46(%edi),%eax
00000f1a	movl	0xf0(%ebp),%esi
00000f1d	movl	%esi,0x08(%esp)
00000f21	movl	%eax,0x04(%esp)
00000f25	movl	%edx,(%esp)
00000f28	movl	%ebx,0xe4(%ebp)
00000f2b	movl	%edx,0xec(%ebp)
00000f2e	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000f33	movw	0x44(%edi),%ax
00000f37	movw	%ax,0xe2(%ebp)
00000f3b	movl	%esi,0x08(%esp)
00000f3f	movl	%edi,%esi
00000f41	movzwl	%ax,%edi
00000f44	movl	%edi,0x04(%esp)
00000f48	movl	0xec(%ebp),%eax
00000f4b	movl	%eax,(%esp)
00000f4e	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00000f53	movl	0x0c(%esi),%ecx
00000f56	movw	$0xffff,0x0a(%ecx,%ebx)
00000f5d	imull	$0x0a,%edi,%eax
00000f60	movl	%esi,%edi
00000f62	movl	0x18(%edi),%edx
00000f65	movw	0x02(%edx,%eax),%dx
00000f6a	movw	%dx,0x08(%ecx,%ebx)
00000f6f	movl	0x18(%edi),%edx
00000f72	movl	0xe8(%ebp),%esi
00000f75	movw	%si,0x02(%edx,%eax)
00000f7a	movl	%esi,%edx
00000f7c	movzwl	0x08(%ecx,%ebx),%ecx
00000f81	cmpl	$0x0000ffff,%ecx
00000f87	jne	0x00000f95
00000f89	movl	0xec(%ebp),%ebx
00000f8c	movl	0x18(%edi),%ecx
00000f8f	movw	%dx,(%ecx,%eax)
00000f93	jmp	0x00000fa4
00000f95	movl	%edx,%esi
00000f97	movl	0xec(%ebp),%ebx
00000f9a	movl	(%ebx),%edx
00000f9c	imull	$0x0c,%ecx,%ecx
00000f9f	movw	%si,0x0a(%edx,%ecx)
00000fa4	movl	0x18(%edi),%ecx
00000fa7	incw	0x04(%ecx,%eax)
00000fac	movl	0x34(%edi),%eax
00000faf	testl	%eax,%eax
00000fb1	movl	%ebx,%edx
00000fb3	movl	0xe4(%ebp),%ebx
00000fb6	je	0x00000fc3
00000fb8	movl	0xf0(%ebp),%ecx
00000fbb	movw	0xe2(%ebp),%si
00000fbf	movw	%si,(%eax,%ecx,2)
00000fc3	movl	(%edx),%eax
00000fc5	movzwl	(%eax,%ebx),%esi
00000fc9	movl	(%edi),%eax
00000fcb	movl	%edi,(%esp)
00000fce	call	*0x08(%eax)
00000fd1	movl	%esi,%eax
00000fd3	addl	$0x2c,%esp
00000fd6	popl	%esi
00000fd7	popl	%edi
00000fd8	popl	%ebx
00000fd9	popl	%ebp
00000fda	ret
00000fdb	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetResource_NoLockNoLRUTouch(memhandle_t__*):
00000fe0	pushl	%ebp
00000fe1	movl	%esp,%ebp
00000fe3	pushl	%ebx
00000fe4	pushl	%edi
00000fe5	pushl	%esi
00000fe6	subl	$0x0c,%esp
00000fe9	movl	0x08(%ebp),%edi
00000fec	movl	(%edi),%eax
00000fee	movl	%edi,(%esp)
00000ff1	call	(%eax)
00000ff3	movl	0x0c(%ebp),%eax
00000ff6	leal	0xff(%eax),%ebx
00000ff9	movzwl	%bx,%edx
00000ffc	xorl	%esi,%esi
00000ffe	cmpl	0x3c(%edi),%edx
00001001	jge	0x00001037
00001003	movl	0x08(%ebp),%ecx
00001006	movl	0x0c(%ecx),%ecx
00001009	imull	$0x0c,%edx,%edx
0000100c	cmpw	%bx,0x08(%ecx,%edx)
00001011	jne	0x0000101c
00001013	xorl	%esi,%esi
00001015	cmpw	%bx,0x0a(%ecx,%edx)
0000101a	jne	0x00001037
0000101c	movzwl	0x02(%ecx,%edx),%ebx
00001021	movl	%eax,%edi
00001023	movl	%edi,%eax
00001025	shrl	$0x10,%eax
00001028	xorl	%esi,%esi
0000102a	cmpl	%eax,%ebx
0000102c	jne	0x00001037
0000102e	testw	%di,%di
00001031	je	0x00001037
00001033	movl	0x04(%ecx,%edx),%esi
00001037	movl	0x08(%ebp),%ecx
0000103a	movl	(%ecx),%eax
0000103c	movl	%ecx,(%esp)
0000103f	call	*0x08(%eax)
00001042	movl	%esi,%eax
00001044	addl	$0x0c,%esp
00001047	popl	%esi
00001048	popl	%edi
00001049	popl	%ebx
0000104a	popl	%ebp
0000104b	ret
0000104c	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax)
CDataManagerBase::GetResource_NoLock(memhandle_t__*):
00001050	pushl	%ebp
00001051	movl	%esp,%ebp
00001053	pushl	%ebx
00001054	pushl	%edi
00001055	pushl	%esi
00001056	subl	$0x0c,%esp
00001059	movl	0x08(%ebp),%edi
0000105c	movl	(%edi),%eax
0000105e	movl	%edi,(%esp)
00001061	call	(%eax)
00001063	movl	0x0c(%ebp),%eax
00001066	leal	0xff(%eax),%edx
00001069	movzwl	%dx,%eax
0000106c	xorl	%esi,%esi
0000106e	cmpl	0x3c(%edi),%eax
00001071	jge	0x000010c2
00001073	movl	0x0c(%edi),%ecx
00001076	imull	$0x0c,%eax,%ebx
00001079	cmpw	%dx,0x08(%ecx,%ebx)
0000107e	jne	0x00001089
00001080	xorl	%esi,%esi
00001082	cmpw	%dx,0x0a(%ecx,%ebx)
00001087	jne	0x000010c2
00001089	movl	%eax,0xf0(%ebp)
0000108c	movl	%edi,%eax
0000108e	movzwl	0x02(%ecx,%ebx),%ecx
00001093	movl	0x0c(%ebp),%edi
00001096	movl	%edi,%edx
00001098	shrl	$0x10,%edx
0000109b	xorl	%esi,%esi
0000109d	cmpl	%edx,%ecx
0000109f	je	0x000010a5
000010a1	movl	%eax,%edi
000010a3	jmp	0x000010c2
000010a5	testw	%di,%di
000010a8	movl	%eax,%edi
000010aa	movl	0xf0(%ebp),%eax
000010ad	je	0x000010c2
000010af	movl	%eax,0x04(%esp)
000010b3	movl	%edi,(%esp)
000010b6	calll	CDataManagerBase::TouchByIndex(unsigned short)
000010bb	movl	0x0c(%edi),%eax
000010be	movl	0x04(%eax,%ebx),%esi
000010c2	movl	(%edi),%eax
000010c4	movl	%edi,(%esp)
000010c7	call	*0x08(%eax)
000010ca	movl	%esi,%eax
000010cc	addl	$0x0c,%esp
000010cf	popl	%esi
000010d0	popl	%edi
000010d1	popl	%ebx
000010d2	popl	%ebp
000010d3	ret
000010d4	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::TouchByIndex(unsigned short):
000010e0	pushl	%ebp
000010e1	movl	%esp,%ebp
000010e3	pushl	%ebx
000010e4	pushl	%edi
000010e5	pushl	%esi
000010e6	subl	$0x1c,%esp
000010e9	movw	0x0c(%ebp),%cx
000010ed	cmpw	$0xff,%cx
000010f1	je	0x000011b6
000010f7	movl	0x08(%ebp),%ebx
000010fa	movl	0x0c(%ebx),%eax
000010fd	movzwl	%cx,%esi
00001100	imull	$0x0c,%esi,%ecx
00001103	movl	%ecx,0xe8(%ebp)
00001106	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%ecx)
0000110b	jne	0x000011b6
00001111	leal	0x0c(%ebx),%edi
00001114	movl	%edi,0xe4(%ebp)
00001117	movzwl	0x44(%ebx),%eax
0000111b	movl	%esi,0x08(%esp)
0000111f	movl	%eax,0x04(%esp)
00001123	movl	%edi,(%esp)
00001126	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
0000112b	movw	0x44(%ebx),%ax
0000112f	movw	%ax,0xee(%ebp)
00001133	movl	%esi,0x08(%esp)
00001137	movl	%esi,0xf0(%ebp)
0000113a	movzwl	%ax,%esi
0000113d	movl	%esi,0x04(%esp)
00001141	movl	%edi,(%esp)
00001144	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
00001149	movl	0x0c(%ebx),%ecx
0000114c	movl	0xe8(%ebp),%eax
0000114f	movw	$0xffff,0x0a(%ecx,%eax)
00001156	imull	$0x0a,%esi,%edi
00001159	movl	0x18(%ebx),%edx
0000115c	movw	0x02(%edx,%edi),%dx
00001161	movw	%dx,0x08(%ecx,%eax)
00001166	movl	0x18(%ebx),%edx
00001169	movw	0x0c(%ebp),%si
0000116d	movw	%si,0x02(%edx,%edi)
00001172	movw	0x0c(%ebp),%dx
00001176	movzwl	0x08(%ecx,%eax),%ecx
0000117b	cmpl	$0x0000ffff,%ecx
00001181	jne	0x0000118c
00001183	movl	0x18(%ebx),%ecx
00001186	movw	%dx,(%ecx,%edi)
0000118a	jmp	0x0000119c
0000118c	movw	%dx,%si
0000118f	movl	0xe4(%ebp),%eax
00001192	movl	(%eax),%edx
00001194	imull	$0x0c,%ecx,%ecx
00001197	movw	%si,0x0a(%edx,%ecx)
0000119c	movl	0x18(%ebx),%ecx
0000119f	incw	0x04(%ecx,%edi)
000011a4	movl	0x34(%ebx),%eax
000011a7	testl	%eax,%eax
000011a9	movl	0xf0(%ebp),%ecx
000011ac	je	0x000011b6
000011ae	movw	0xee(%ebp),%dx
000011b2	movw	%dx,(%eax,%ecx,2)
000011b6	addl	$0x1c,%esp
000011b9	popl	%esi
000011ba	popl	%edi
000011bb	popl	%ebx
000011bc	popl	%ebp
000011bd	ret
000011be	nop
CDataManagerBase::TouchResource(memhandle_t__*):
000011c0	pushl	%ebp
000011c1	movl	%esp,%ebp
000011c3	pushl	%edi
000011c4	pushl	%esi
000011c5	subl	$0x10,%esp
000011c8	movl	0x08(%ebp),%esi
000011cb	movl	(%esi),%eax
000011cd	movl	%esi,(%esp)
000011d0	call	(%eax)
000011d2	movl	0x0c(%ebp),%ecx
000011d5	leal	0xff(%ecx),%eax
000011d8	movzwl	%ax,%edi
000011db	cmpl	0x3c(%esi),%edi
000011de	jge	0x00001200
000011e0	movl	0x0c(%esi),%edx
000011e3	imull	$0x0c,%edi,%edi
000011e6	cmpw	%ax,0x08(%edx,%edi)
000011eb	jne	0x000011f4
000011ed	cmpw	%ax,0x0a(%edx,%edi)
000011f2	jne	0x00001200
000011f4	movzwl	0x02(%edx,%edi),%edx
000011f9	shrl	$0x10,%ecx
000011fc	cmpl	%ecx,%edx
000011fe	je	0x00001204
00001200	movw	$0xffff,%ax
00001204	movzwl	%ax,%eax
00001207	movl	%eax,0x04(%esp)
0000120b	movl	%esi,(%esp)
0000120e	calll	CDataManagerBase::TouchByIndex(unsigned short)
00001213	movl	(%esi),%eax
00001215	movl	0x08(%eax),%eax
00001218	addl	$0x10,%esp
0000121b	popl	%esi
0000121c	popl	%edi
0000121d	popl	%ebp
0000121e	jmp	*%eax
CDataManagerBase::MarkAsStale(memhandle_t__*):
00001220	pushl	%ebp
00001221	movl	%esp,%ebp
00001223	pushl	%ebx
00001224	pushl	%edi
00001225	pushl	%esi
00001226	subl	$0x1c,%esp
00001229	movl	0x08(%ebp),%esi
0000122c	movl	(%esi),%eax
0000122e	movl	%esi,(%esp)
00001231	call	(%eax)
00001233	movl	0x0c(%ebp),%eax
00001236	leal	0xff(%eax),%ebx
00001239	movzwl	%bx,%ecx
0000123c	movl	%ecx,0xf0(%ebp)
0000123f	cmpl	0x3c(%esi),%ecx
00001242	jge	0x00001336
00001248	movl	0x0c(%esi),%ecx
0000124b	imull	$0x0c,0xf0(%ebp),%edi
0000124f	cmpw	%bx,0x08(%ecx,%edi)
00001254	jne	0x00001261
00001256	cmpw	%bx,0x0a(%ecx,%edi)
0000125b	jne	0x00001336
00001261	movzwl	0x02(%ecx,%edi),%edx
00001266	movl	%ebx,%eax
00001268	movl	%esi,%ebx
0000126a	movl	0x0c(%ebp),%esi
0000126d	shrl	$0x10,%esi
00001270	cmpl	%esi,%edx
00001272	movl	%ebx,%esi
00001274	movl	%eax,%edx
00001276	jne	0x00001336
0000127c	movl	0x0c(%ebp),%eax
0000127f	testw	%ax,%ax
00001282	je	0x00001336
00001288	cmpw	CDataManagerBase::CDataManagerBase(unsigned int),(%ecx,%edi)
0000128d	jne	0x00001336
00001293	leal	0x0c(%esi),%ecx
00001296	movl	%ecx,0xec(%ebp)
00001299	movzwl	0x44(%esi),%eax
0000129d	movl	%edx,0xe8(%ebp)
000012a0	movl	0xf0(%ebp),%ebx
000012a3	movl	%ebx,0x08(%esp)
000012a7	movl	%eax,0x04(%esp)
000012ab	movl	%ecx,(%esp)
000012ae	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000012b3	movw	0x44(%esi),%ax
000012b7	movw	%ax,0xe6(%ebp)
000012bb	movl	%ebx,0x08(%esp)
000012bf	movl	%esi,%ebx
000012c1	movzwl	%ax,%esi
000012c4	movl	%esi,0x04(%esp)
000012c8	movl	0xec(%ebp),%eax
000012cb	movl	%eax,(%esp)
000012ce	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000012d3	movl	0x0c(%ebx),%ecx
000012d6	movw	$0xffff,0x08(%ecx,%edi)
000012dd	imull	$0x0a,%esi,%eax
000012e0	movl	%ebx,%esi
000012e2	movl	0xe8(%ebp),%ebx
000012e5	movl	0x18(%esi),%edx
000012e8	movw	(%edx,%eax),%dx
000012ec	movw	%dx,0x0a(%ecx,%edi)
000012f1	movl	0x18(%esi),%edx
000012f4	movw	%bx,(%edx,%eax)
000012f8	movzwl	0x0a(%ecx,%edi),%ecx
000012fd	cmpl	$0x0000ffff,%ecx
00001303	jne	0x0000130f
00001305	movl	0x18(%esi),%ecx
00001308	movw	%bx,0x02(%ecx,%eax)
0000130d	jmp	0x0000131c
0000130f	movl	0xec(%ebp),%edx
00001312	movl	(%edx),%edx
00001314	imull	$0x0c,%ecx,%ecx
00001317	movw	%bx,0x08(%edx,%ecx)
0000131c	movl	0x18(%esi),%ecx
0000131f	incw	0x04(%ecx,%eax)
00001324	movl	0x34(%esi),%eax
00001327	testl	%eax,%eax
00001329	je	0x00001336
0000132b	movl	0xf0(%ebp),%ecx
0000132e	movw	0xe6(%ebp),%dx
00001332	movw	%dx,(%eax,%ecx,2)
00001336	movl	(%esi),%eax
00001338	movl	0x08(%eax),%eax
0000133b	addl	$0x1c,%esp
0000133e	popl	%esi
0000133f	popl	%edi
00001340	popl	%ebx
00001341	popl	%ebp
00001342	jmp	*%eax
00001344	nopw	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::BreakAllLocks():
00001350	pushl	%ebp
00001351	movl	%esp,%ebp
00001353	pushl	%ebx
00001354	pushl	%edi
00001355	pushl	%esi
00001356	subl	$0x2c,%esp
00001359	movl	0x08(%ebp),%esi
0000135c	movl	(%esi),%eax
0000135e	movl	%esi,(%esp)
00001361	call	(%eax)
00001363	movl	0x18(%esi),%eax
00001366	movzwl	0x46(%esi),%ecx
0000136a	movl	%esi,%edx
0000136c	imull	$0x0a,%ecx,%ecx
0000136f	movw	(%eax,%ecx),%di
00001373	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
0000137a	cmpw	$0xff,%di
0000137e	je	0x0000147c
00001384	leal	0x0c(%edx),%esi
00001387	movl	%esi,0xf0(%ebp)
0000138a	movl	CDataManagerBase::CDataManagerBase(unsigned int),0xe0(%ebp)
00001391	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
000013a0	movw	%di,0xe4(%ebp)
000013a4	movl	0x0c(%edx),%eax
000013a7	movl	%edx,%ecx
000013a9	movzwl	%di,%ebx
000013ac	movl	%ebx,0xe8(%ebp)
000013af	imull	$0x0c,%ebx,%edi
000013b2	movw	0x0a(%eax,%edi),%dx
000013b7	movw	%dx,0xee(%ebp)
000013bb	movw	CDataManagerBase::CDataManagerBase(unsigned int),(%eax,%edi)
000013c1	movzwl	0x46(%ecx),%eax
000013c5	movl	%ebx,0x08(%esp)
000013c9	movl	%eax,0x04(%esp)
000013cd	movl	%esi,(%esp)
000013d0	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000013d5	movl	0x08(%ebp),%eax
000013d8	movw	0x44(%eax),%ax
000013dc	movw	%ax,0xe6(%ebp)
000013e0	movl	%ebx,0x08(%esp)
000013e4	movzwl	%ax,%ebx
000013e7	movl	%ebx,0x04(%esp)
000013eb	movl	%esi,(%esp)
000013ee	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000013f3	movl	0x08(%ebp),%eax
000013f6	movl	0x0c(%eax),%ecx
000013f9	movw	$0xffff,0x0a(%ecx,%edi)
00001400	imull	$0x0a,%ebx,%esi
00001403	movl	0x08(%ebp),%ebx
00001406	movl	0x18(%ebx),%edx
00001409	movw	0x02(%edx,%esi),%dx
0000140e	movw	%dx,0x08(%ecx,%edi)
00001413	movl	0x18(%ebx),%edx
00001416	movw	0xe4(%ebp),%ax
0000141a	movw	%ax,0x02(%edx,%esi)
0000141f	movw	%ax,%dx
00001422	movzwl	0x08(%ecx,%edi),%ecx
00001427	incl	0xe0(%ebp)
0000142a	cmpl	$0x0000ffff,%ecx
00001430	jne	0x0000143b
00001432	movl	0x18(%ebx),%ecx
00001435	movw	%dx,(%ecx,%esi)
00001439	jmp	0x00001448
0000143b	movl	0xf0(%ebp),%eax
0000143e	movl	(%eax),%edi
00001440	imull	$0x0c,%ecx,%ecx
00001443	movw	%dx,0x0a(%edi,%ecx)
00001448	movl	0x18(%ebx),%ecx
0000144b	incw	0x04(%ecx,%esi)
00001450	movl	0x34(%ebx),%eax
00001453	movl	%ebx,%edx
00001455	testl	%eax,%eax
00001457	jne	0x0000146f
00001459	movw	0xee(%ebp),%ax
0000145d	cmpw	$0xff,%ax
00001461	movw	%ax,%di
00001464	movl	0xf0(%ebp),%esi
00001467	jne	0x000013a0
0000146d	jmp	0x0000147c
0000146f	movl	0xe8(%ebp),%ecx
00001472	movw	0xe6(%ebp),%di
00001476	movw	%di,(%eax,%ecx,2)
0000147a	jmp	0x00001459
0000147c	movl	(%edx),%eax
0000147e	movl	%edx,(%esp)
00001481	call	*0x08(%eax)
00001484	movl	0xe0(%ebp),%eax
00001487	addl	$0x2c,%esp
0000148a	popl	%esi
0000148b	popl	%edi
0000148c	popl	%ebx
0000148d	popl	%ebp
0000148e	ret
0000148f	nop
CDataManagerBase::CreateHandle(bool):
00001490	pushl	%ebp
00001491	movl	%esp,%ebp
00001493	pushl	%ebx
00001494	pushl	%edi
00001495	pushl	%esi
00001496	subl	$0x1c,%esp
00001499	movl	0x08(%ebp),%ebx
0000149c	movl	(%ebx),%eax
0000149e	movl	%ebx,(%esp)
000014a1	call	(%eax)
000014a3	movl	0x18(%ebx),%ecx
000014a6	movzwl	0x48(%ebx),%eax
000014aa	leal	0x46(%ebx),%esi
000014ad	leal	0x44(%ebx),%edx
000014b0	cmpb	CDataManagerBase::CDataManagerBase(unsigned int),0x0c(%ebp)
000014b4	cmovnel	%esi,%edx
000014b7	movw	(%edx),%dx
000014ba	movw	%dx,0xea(%ebp)
000014be	movzwl	%dx,%edx
000014c1	movl	%edx,0xf0(%ebp)
000014c4	imull	$0x0a,%eax,%edx
000014c7	movzwl	(%ecx,%edx),%esi
000014cb	leal	0x0c(%ebx),%edi
000014ce	cmpl	$0x0000ffff,%esi
000014d4	je	0x00001571
000014da	movl	%edi,0xec(%ebp)
000014dd	movzwl	%si,%ecx
000014e0	movl	%ecx,0xe4(%ebp)
000014e3	movl	%ecx,0x08(%esp)
000014e7	movzwl	%ax,%eax
000014ea	movl	%eax,0x04(%esp)
000014ee	movl	%edi,(%esp)
000014f1	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
000014f6	movl	0xe4(%ebp),%eax
000014f9	movl	%eax,0x08(%esp)
000014fd	movl	0xf0(%ebp),%eax
00001500	movl	%eax,0x04(%esp)
00001504	movl	%edi,(%esp)
00001507	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
0000150c	imull	$0x0c,%esi,%ecx
0000150f	movl	0x0c(%ebx),%edx
00001512	movw	$0xffff,0x0a(%edx,%ecx)
00001519	imull	$0x0a,0xf0(%ebp),%eax
0000151d	movl	0x18(%ebx),%edi
00001520	movw	0x02(%edi,%eax),%di
00001525	movw	%di,0x08(%edx,%ecx)
0000152a	movl	0x18(%ebx),%edi
0000152d	movw	%si,0x02(%edi,%eax)
00001532	movzwl	0x08(%edx,%ecx),%ecx
00001537	cmpl	$0x0000ffff,%ecx
0000153d	jne	0x0000154b
0000153f	movl	0x18(%ebx),%ecx
00001542	movw	%si,(%ecx,%eax)
00001546	movl	0xec(%ebp),%edi
00001549	jmp	0x00001558
0000154b	movl	0xec(%ebp),%edi
0000154e	movl	(%edi),%edx
00001550	imull	$0x0c,%ecx,%ecx
00001553	movw	%si,0x0a(%edx,%ecx)
00001558	movl	0x18(%ebx),%ecx
0000155b	incw	0x04(%ecx,%eax)
00001560	movl	0x34(%ebx),%eax
00001563	testl	%eax,%eax
00001565	je	0x00001583
00001567	movw	0xea(%ebp),%cx
0000156b	movw	%cx,(%eax,%esi,2)
0000156f	jmp	0x00001583
00001571	movl	0xf0(%ebp),%eax
00001574	movl	%eax,0x04(%esp)
00001578	movl	%edi,(%esp)
0000157b	calll	CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::AddToTail(unsigned short)
00001580	movw	%ax,%si
00001583	cmpb	$0x01,0x0c(%ebp)
00001587	jne	0x00001595
00001589	movl	(%edi),%eax
0000158b	movzwl	%si,%ecx
0000158e	imull	$0x0c,%ecx,%ecx
00001591	incw	(%eax,%ecx)
00001595	movl	(%ebx),%eax
00001597	movl	%ebx,(%esp)
0000159a	call	*0x08(%eax)
0000159d	movzwl	%si,%eax
000015a0	addl	$0x1c,%esp
000015a3	popl	%esi
000015a4	popl	%edi
000015a5	popl	%ebx
000015a6	popl	%ebp
000015a7	ret
000015a8	movl	%eax,%esi
000015aa	movl	(%ebx),%eax
000015ac	movl	0x08(%eax),%eax
000015af	movl	%ebx,(%esp)
000015b2	call	*%eax
000015b4	movl	%esi,(%esp)
000015b7	calll	__Unwind_Resume
000015bc	calll	std::terminate()
000015c1	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int):
000015d0	pushl	%ebp
000015d1	movl	%esp,%ebp
000015d3	pushl	%ebx
000015d4	pushl	%edi
000015d5	pushl	%esi
000015d6	subl	$0x0c,%esp
000015d9	movl	0x08(%ebp),%edi
000015dc	movl	(%edi),%eax
000015de	movl	%edi,(%esp)
000015e1	call	(%eax)
000015e3	movzwl	0x0c(%ebp),%esi
000015e7	imull	$0x0c,%esi,%eax
000015ea	movl	0x0c(%edi),%ecx
000015ed	movl	0x10(%ebp),%edx
000015f0	movl	%edx,0x04(%ecx,%eax)
000015f4	movl	0x14(%ebp),%ecx
000015f7	addl	%ecx,0x08(%edi)
000015fa	movl	(%edi),%ecx
000015fc	movl	0x0c(%edi),%edx
000015ff	movzwl	0x02(%edx,%eax),%ebx
00001604	movl	%edi,(%esp)
00001607	call	*0x08(%ecx)
0000160a	shll	$0x10,%ebx
0000160d	incl	%esi
0000160e	movzwl	%si,%eax
00001611	orl	%ebx,%eax
00001613	addl	$0x0c,%esp
00001616	popl	%esi
00001617	popl	%edi
00001618	popl	%ebx
00001619	popl	%ebp
0000161a	ret
0000161b	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::ToHandle(unsigned short):
00001620	movzwl	0x08(%esp),%eax
00001625	imull	$0x0c,%eax,%ecx
00001628	movl	0x04(%esp),%edx
0000162c	movl	0x0c(%edx),%edx
0000162f	movzwl	0x02(%edx,%ecx),%ecx
00001634	shll	$0x10,%ecx
00001637	incl	%eax
00001638	movzwl	%ax,%eax
0000163b	orl	%ecx,%eax
0000163d	ret
0000163e	nop
CDataManagerBase::TargetSize():
00001640	movl	0x04(%esp),%eax
00001644	movl	0x04(%eax),%eax
00001647	ret
00001648	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::AvailableSize():
00001650	movl	0x04(%esp),%ecx
00001654	movl	0x04(%ecx),%eax
00001657	subl	0x08(%ecx),%eax
0000165a	ret
0000165b	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::UsedSize():
00001660	movl	0x04(%esp),%eax
00001664	movl	0x08(%eax),%eax
00001667	ret
00001668	nopl	CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetLRUHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&):
00001670	pushl	%ebp
00001671	movl	%esp,%ebp
00001673	pushl	%ebx
00001674	pushl	%edi
00001675	pushl	%esi
00001676	subl	$0x1c,%esp
00001679	movl	0x08(%ebp),%ecx
0000167c	movl	0x18(%ecx),%eax
0000167f	movzwl	0x44(%ecx),%ecx
00001683	imull	$0x0a,%ecx,%ecx
00001686	movw	0x02(%eax,%ecx),%bx
0000168b	cmpw	$0xff,%bx
0000168f	je	0x00001739
00001695	movl	0x0c(%ebp),%edx
00001698	movl	0x08(%ebp),%eax
0000169b	movl	0x0c(%eax),%eax
0000169e	nop
000016a0	movzwl	%bx,%ecx
000016a3	imull	$0x0c,%ecx,%ecx
000016a6	movl	%ecx,0xf0(%ebp)
000016a9	movzwl	0x02(%eax,%ecx),%eax
000016ae	movl	%eax,0xec(%ebp)
000016b1	movl	0x04(%edx),%eax
000016b4	movl	0x0c(%edx),%edi
000016b7	leal	0x01(%edi),%esi
000016ba	cmpl	%eax,%esi
000016bc	movl	%edi,%ecx
000016be	jle	0x000016dd
000016c0	movl	%esi,%ecx
000016c2	subl	%eax,%ecx
000016c4	movl	%ecx,0x04(%esp)
000016c8	movl	%edx,(%esp)
000016cb	movl	%esi,0xe8(%ebp)
000016ce	movl	%edx,%esi
000016d0	calll	CUtlMemory<memhandle_t__*, int>::Grow(int)
000016d5	movl	%esi,%edx
000016d7	movl	0xe8(%ebp),%esi
000016da	movl	0x0c(%edx),%ecx
000016dd	incl	%ecx
000016de	movl	%ecx,0x0c(%edx)
000016e1	movl	(%edx),%eax
000016e3	movl	%eax,0x10(%edx)
000016e6	subl	%edi,%ecx
000016e8	decl	%ecx
000016e9	testl	%ecx,%ecx
000016eb	jle	0x0000170c
000016ed	shll	$0x02,%ecx
000016f0	movl	%ecx,0x08(%esp)
000016f4	leal	(%eax,%edi,4),%ecx
000016f7	movl	%ecx,0x04(%esp)
000016fb	leal	(%eax,%esi,4),%eax
000016fe	movl	%eax,(%esp)
00001701	movl	%edx,%esi
00001703	calll	_memmove
00001708	movl	%esi,%edx
0000170a	movl	(%edx),%eax
0000170c	shll	$0x02,%edi
0000170f	addl	%eax,%edi
00001711	je	0x00001721
00001713	incl	%ebx
00001714	movzwl	%bx,%eax
00001717	movl	0xec(%ebp),%ecx
0000171a	shll	$0x10,%ecx
0000171d	orl	%eax,%ecx
0000171f	movl	%ecx,(%edi)
00001721	movl	0x08(%ebp),%eax
00001724	movl	0x0c(%eax),%eax
00001727	movl	0xf0(%ebp),%ecx
0000172a	movw	0x08(%eax,%ecx),%bx
0000172f	cmpw	$0xff,%bx
00001733	jne	0x000016a0
00001739	addl	$0x1c,%esp
0000173c	popl	%esi
0000173d	popl	%edi
0000173e	popl	%ebx
0000173f	popl	%ebp
00001740	ret
00001741	nopl	%cs:CDataManagerBase::CDataManagerBase(unsigned int)(%eax,%eax)
CDataManagerBase::GetLockHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&):
00001750	pushl	%ebp
00001751	movl	%esp,%ebp
00001753	pushl	%ebx
00001754	pushl	%edi
00001755	pushl	%esi
00001756	subl	$0x1c,%esp
00001759	movl	0x08(%ebp),%ecx
0000175c	movl	0x18(%ecx),%eax
0000175f	movzwl	0x46(%ecx),%ecx
00001763	imull	$0x0a,%ecx,%ecx
00001766	movw	(%eax,%ecx),%bx
0000176a	cmpw	$0xff,%bx
0000176e	je	0x00001819
00001774	movl	0x0c(%ebp),%edx
00001777	movl	0x08(%ebp),%eax
0000177a	movl	0x0c(%eax),%eax
0000177d	nopl	(%eax)
00001780	movzwl	%bx,%ecx
00001783	imull	$0x0c,%ecx,%ecx
00001786	movl	%ecx,0xf0(%ebp)
00001789	movzwl	0x02(%eax,%ecx),%eax
0000178e	movl	%eax,0xec(%ebp)
00001791	movl	0x04(%edx),%eax
00001794	movl	0x0c(%edx),%edi
00001797	leal	0x01(%edi),%esi
0000179a	cmpl	%eax,%esi
0000179c	movl	%edi,%ecx
0000179e	jle	0x000017bd
000017a0	movl	%esi,%ecx
000017a2	subl	%eax,%ecx
000017a4	movl	%ecx,0x04(%esp)
000017a8	movl	%edx,(%esp)
000017ab	movl	%esi,0xe8(%ebp)
000017ae	movl	%edx,%esi
000017b0	calll	CUtlMemory<memhandle_t__*, int>::Grow(int)
000017b5	movl	%esi,%edx
000017b7	movl	0xe8(%ebp),%esi
000017ba	movl	0x0c(%edx),%ecx
000017bd	incl	%ecx
000017be	movl	%ecx,0x0c(%edx)
000017c1	movl	(%edx),%eax
000017c3	movl	%eax,0x10(%edx)
000017c6	subl	%edi,%ecx
000017c8	decl	%ecx
000017c9	testl	%ecx,%ecx
000017cb	jle	0x000017ec
000017cd	shll	$0x02,%ecx
000017d0	movl	%ecx,0x08(%esp)
000017d4	leal	(%eax,%edi,4),%ecx
000017d7	movl	%ecx,0x04(%esp)
000017db	leal	(%eax,%esi,4),%eax
000017de	movl	%eax,(%esp)
000017e1	movl	%edx,%esi
000017e3	calll	_memmove
000017e8	movl	%esi,%edx
000017ea	movl	(%edx),%eax
000017ec	shll	$0x02,%edi
000017ef	addl	%eax,%edi
000017f1	je	0x00001801
000017f3	incl	%ebx
000017f4	movzwl	%bx,%eax
000017f7	movl	0xec(%ebp),%ecx
000017fa	shll	$0x10,%ecx
000017fd	orl	%eax,%ecx
000017ff	movl	%ecx,(%edi)
00001801	movl	0x08(%ebp),%eax
00001804	movl	0x0c(%eax),%eax
00001807	movl	0xf0(%ebp),%ecx
0000180a	movw	0x0a(%eax,%ecx),%bx
0000180f	cmpw	$0xff,%bx
00001813	jne	0x00001780
00001819	addl	$0x1c,%esp
0000181c	popl	%esi
0000181d	popl	%edi
0000181e	popl	%ebx
0000181f	popl	%ebp
00001820	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(diff.o):
(__TEXT,__text) section
Fail(char const*):
00000000	ret
00000001	nopl	%cs:Fail(char const*)(%eax,%eax)
ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000010	pushl	%ebp
00000011	movl	%esp,%ebp
00000013	pushl	%ebx
00000014	pushl	%edi
00000015	pushl	%esi
00000016	subl	$0x1c,%esp
00000019	movl	0x0c(%ebp),%esi
0000001c	movl	0x14(%ebp),%eax
0000001f	addl	%esi,%eax
00000021	movl	%eax,0xf0(%ebp)
00000024	movl	0x1c(%ebp),%ebx
00000027	movl	0x08(%ebp),%eax
0000002a	movl	%eax,0xec(%ebp)
0000002d	jmp	0x00000047
0000002f	nop
00000030	movl	%edi,0x08(%esp)
00000034	movl	%eax,0x04(%esp)
00000038	movl	%ebx,(%esp)
0000003b	calll	_memcpy
00000040	leal	0x01(%edi),%eax
00000043	addl	%edi,%ebx
00000045	addl	%eax,%esi
00000047	cmpl	0xf0(%ebp),%esi
0000004a	jae	0x00000158
00000050	movzbl	(%esi),%ecx
00000053	testl	%ecx,%ecx
00000055	jne	0x000000a4
00000057	movzbl	0x03(%esi),%edx
0000005b	movzbl	0x04(%esi),%ecx
0000005f	movzbl	0x01(%esi),%edi
00000063	movzbl	0x02(%esi),%eax
00000067	movl	%ebx,(%esp)
0000006a	shll	$0x08,%eax
0000006d	orl	%edi,%eax
0000006f	movl	%eax,0x08(%esp)
00000073	shll	$0x08,%ecx
00000076	orl	%edx,%ecx
00000078	leal	0xffff0000(%ecx),%edx
0000007e	cmpl	$0x00007fff,%ecx
00000084	cmovbel	%ecx,%edx
00000087	movl	0xec(%ebp),%edi
0000008a	leal	(%edi,%edx),%ecx
0000008d	movl	%ecx,0x04(%esp)
00000091	addl	%eax,%edx
00000093	addl	%edx,%edi
00000095	movl	%edi,0xec(%ebp)
00000098	addl	%eax,%ebx
0000009a	addl	$0x05,%esi
0000009d	calll	_memcpy
000000a2	jmp	0x00000047
000000a4	leal	0x01(%esi),%eax
000000a7	movl	%ecx,%edi
000000a9	andl	$0x7f,%edi
000000ac	testb	$0x80,%cl
000000af	je	0x00000030
000000b5	movzbl	(%eax),%eax
000000b8	testl	%edi,%edi
000000ba	jne	0x00000127
000000bc	movzbl	0x02(%esi),%edx
000000c0	movzbl	0x03(%esi),%ecx
000000c4	shll	$0x08,%ecx
000000c7	orl	%edx,%ecx
000000c9	testb	%al,%al
000000cb	jne	0x000000f1
000000cd	movzbl	0x04(%esi),%edi
000000d1	shll	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%edi
000000d4	orl	%ecx,%edi
000000d6	movl	%edi,0x08(%esp)
000000da	leal	0x05(%esi),%eax
000000dd	movl	%eax,0x04(%esp)
000000e1	movl	%ebx,(%esp)
000000e4	calll	_memcpy
000000e9	leal	0x05(%edi),%eax
000000ec	jmp	0x00000043
000000f1	movl	%ebx,(%esp)
000000f4	movl	%eax,0x08(%esp)
000000f8	leal	0xffff0000(%ecx),%edx
000000fe	cmpl	$0x00007fff,%ecx
00000104	cmovbel	%ecx,%edx
00000107	movl	0xec(%ebp),%edi
0000010a	leal	(%edi,%edx),%ecx
0000010d	movl	%ecx,0x04(%esp)
00000111	addl	%eax,%edx
00000113	addl	%edx,%edi
00000115	movl	%edi,0xec(%ebp)
00000118	addl	%eax,%ebx
0000011a	addl	$0x04,%esi
0000011d	calll	_memcpy
00000122	jmp	0x00000047
00000127	movl	%ebx,(%esp)
0000012a	movl	%edi,0x08(%esp)
0000012e	movl	%eax,%ecx
00000130	orl	$0x80,%ecx
00000133	testb	%al,%al
00000135	cmovnsl	%eax,%ecx
00000138	movl	0xec(%ebp),%edx
0000013b	leal	(%edx,%ecx),%eax
0000013e	movl	%eax,0x04(%esp)
00000142	addl	%edi,%ecx
00000144	addl	%ecx,%edx
00000146	movl	%edx,0xec(%ebp)
00000149	addl	%edi,%ebx
0000014b	addl	$0x02,%esi
0000014e	calll	_memcpy
00000153	jmp	0x00000047
00000158	subl	0x1c(%ebp),%ebx
0000015b	movl	0x18(%ebp),%eax
0000015e	movl	%ebx,(%eax)
00000160	addl	$0x1c,%esp
00000163	popl	%esi
00000164	popl	%edi
00000165	popl	%ebx
00000166	popl	%ebp
00000167	ret
00000168	nopl	Fail(char const*)(%eax,%eax)
FindDiffsForLargeFiles(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int, int):
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x4c,%esp
00000179	movl	$0xffffffff,%esi
0000017e	movl	0x24(%ebp),%edi
00000181	movl	%edi,0xcc(%ebp)
00000184	movl	$0x00000004,%ecx
00000189	movl	%edi,%eax
0000018b	mull	%ecx
0000018d	cmovol	%esi,%eax
00000190	movl	%eax,(%esp)
00000193	calll	operator new[](unsigned long)
00000198	movl	%eax,0xd0(%ebp)
0000019b	leal	Fail(char const*)(,%edi,4),%ecx
000001a2	movl	%ecx,0x08(%esp)
000001a6	movl	%eax,(%esp)
000001a9	movl	Fail(char const*),0x04(%esp)
000001b1	movl	0x14(%ebp),%edi
000001b4	movl	%edi,0xe0(%ebp)
000001b7	cmpl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%edi
000001ba	setne	%bl
000001bd	calll	_memset
000001c2	movl	Fail(char const*),0xbc(%ebp)
000001c9	testl	%edi,%edi
000001cb	movl	$0x00000001,0xc4(%ebp)
000001d2	je	0x000002b0
000001d8	movl	$0x00000008,%ecx
000001dd	movl	0x14(%ebp),%edi
000001e0	movl	%edi,%eax
000001e2	mull	%ecx
000001e4	cmovol	%esi,%eax
000001e7	movl	%eax,(%esp)
000001ea	calll	operator new[](unsigned long)
000001ef	cmpl	Fail(char const*),0x0c(%ebp)
000001f3	jne	0x00000207
000001f5	movl	%edi,0xe0(%ebp)
000001f8	movl	%eax,0xbc(%ebp)
000001fb	movl	$0x00000001,0xc4(%ebp)
00000202	jmp	0x000002b0
00000207	movzbl	%bl,%ecx
0000020a	movl	%ecx,0xc4(%ebp)
0000020d	leal	0xf8(%edi),%ecx
00000210	testl	%ecx,%ecx
00000212	movl	%edi,%ecx
00000214	jg	0x00000221
00000216	movl	%ecx,0xe0(%ebp)
00000219	movl	%eax,0xbc(%ebp)
0000021c	jmp	0x000002b0
00000221	movl	0x0c(%ebp),%edx
00000224	leal	0xf8(%edx,%ecx),%esi
00000228	movl	%esi,0xd8(%ebp)
0000022b	movl	%ecx,0xe0(%ebp)
0000022e	movl	0x24(%ebp),%ecx
00000231	leal	0xff(%ecx),%ecx
00000234	movl	%ecx,0xd4(%ebp)
00000237	movl	%eax,%ebx
00000239	movl	%eax,0xbc(%ebp)
0000023c	movl	0xd0(%ebp),%edi
0000023f	nop
00000240	movzbl	0x07(%edx),%eax
00000244	movl	%eax,0xf0(%ebp)
00000247	movzbl	0x06(%edx),%eax
0000024b	movl	%eax,0xec(%ebp)
0000024e	movzbl	0x05(%edx),%eax
00000252	movl	%eax,0xe8(%ebp)
00000255	movzbl	0x04(%edx),%eax
00000259	movl	%eax,0xe4(%ebp)
0000025c	movzbl	0x03(%edx),%eax
00000260	movl	%eax,0xdc(%ebp)
00000263	movzbl	0x02(%edx),%ecx
00000267	movzbl	0x01(%edx),%esi
0000026b	movzbl	(%edx),%eax
0000026e	movl	%edx,0x04(%ebx)
00000271	shll	$0x04,%eax
00000274	addl	%esi,%eax
00000276	shll	$0x04,%eax
00000279	addl	%ecx,%eax
0000027b	shll	$0x04,%eax
0000027e	addl	0xdc(%ebp),%eax
00000281	shll	$0x04,%eax
00000284	addl	0xe4(%ebp),%eax
00000287	shll	$0x04,%eax
0000028a	addl	0xe8(%ebp),%eax
0000028d	shll	$0x04,%eax
00000290	addl	0xec(%ebp),%eax
00000293	shll	$0x04,%eax
00000296	addl	0xf0(%ebp),%eax
00000299	andl	0xd4(%ebp),%eax
0000029c	movl	(%edi,%eax,4),%ecx
0000029f	movl	%ecx,(%ebx)
000002a1	movl	%ebx,(%edi,%eax,4)
000002a4	addl	$0x08,%ebx
000002a7	incl	%edx
000002a8	cmpl	0xd8(%ebp),%edx
000002ab	jb	0x00000240
000002ad	movl	%edi,0xd0(%ebp)
000002b0	movl	0x1c(%ebp),%ecx
000002b3	movl	0x08(%ebp),%esi
000002b6	movl	%esi,0xf0(%ebp)
000002b9	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
000002bc	leal	0xf8(%esi,%eax),%edx
000002c0	movl	%edx,0xc8(%ebp)
000002c3	movl	0x0c(%ebp),%edx
000002c6	addl	%edx,0xe0(%ebp)
000002c9	addl	%esi,%eax
000002cb	movl	%eax,0xdc(%ebp)
000002ce	decl	0xcc(%ebp)
000002d1	movl	%ecx,0xd4(%ebp)
000002d4	jmp	0x000002fb
000002d6	nopw	%cs:Fail(char const*)(%eax,%eax)
000002e0	movl	0xd4(%ebp),%ecx
000002e3	movb	$0x80,(%ecx)
000002e6	movb	%dl,0x01(%ecx)
000002e9	movb	%al,0x02(%ecx)
000002ec	movb	%ah,0x03(%ecx)
000002ef	addl	$0x04,%ecx
000002f2	movl	%ecx,0xd4(%ebp)
000002f5	addl	%edx,0xf0(%ebp)
000002f8	addl	0x04(%edi),%edx
000002fb	movl	%edx,%eax
000002fd	movl	%eax,0xc0(%ebp)
00000300	movl	$0x00007fff,%ecx
00000305	subl	%eax,%ecx
00000307	movl	%ecx,0xe4(%ebp)
0000030a	xorl	%edx,%edx
0000030c	movl	0xf0(%ebp),%eax
0000030f	jmp	0x0000032a
00000311	nopl	%cs:Fail(char const*)(%eax,%eax)
00000320	movl	0xec(%ebp),%edi
00000323	jmp	0x0000040a
00000328	incl	%eax
00000329	incl	%edx
0000032a	cmpl	0xdc(%ebp),%eax
0000032d	jae	0x000004db
00000333	cmpl	0xc8(%ebp),%eax
00000336	jae	0x00000328
00000338	movl	%edx,0xd8(%ebp)
0000033b	movl	0xdc(%ebp),%ecx
0000033e	subl	%eax,%ecx
00000340	movl	%ecx,0xe8(%ebp)
00000343	movzbl	0x01(%eax),%edx
00000347	movl	%eax,%ecx
00000349	movl	%ecx,0xf0(%ebp)
0000034c	movzbl	(%ecx),%eax
0000034f	shll	$0x04,%eax
00000352	addl	%edx,%eax
00000354	shll	$0x04,%eax
00000357	movzbl	0x02(%ecx),%esi
0000035b	addl	%eax,%esi
0000035d	shll	$0x04,%esi
00000360	movzbl	0x03(%ecx),%edx
00000364	addl	%esi,%edx
00000366	shll	$0x04,%edx
00000369	movzbl	0x04(%ecx),%eax
0000036d	addl	%edx,%eax
0000036f	shll	$0x04,%eax
00000372	movzbl	0x05(%ecx),%edx
00000376	addl	%eax,%edx
00000378	shll	$0x04,%edx
0000037b	movzbl	0x06(%ecx),%eax
0000037f	addl	%edx,%eax
00000381	shll	$0x04,%eax
00000384	movzbl	0x07(%ecx),%edx
00000388	addl	%eax,%edx
0000038a	andl	0xcc(%ebp),%edx
0000038d	movl	0xd0(%ebp),%eax
00000390	leal	(%eax,%edx,4),%edx
00000393	xorl	%ebx,%ebx
00000395	movl	Fail(char const*),0xec(%ebp)
0000039c	nopl	Fail(char const*)(%eax)
000003a0	movl	(%edx),%edx
000003a2	testl	%edx,%edx
000003a4	je	0x00000320
000003aa	movl	0x04(%edx),%eax
000003ad	movl	0xe4(%ebp),%ecx
000003b0	leal	(%ecx,%eax),%ecx
000003b3	cmpl	$0x0000fffd,%ecx
000003b9	ja	0x000003a0
000003bb	movl	0xe0(%ebp),%esi
000003be	subl	%eax,%esi
000003c0	cmpl	$0x0000ffff,%esi
000003c6	movl	$0x0000ffff,%ecx
000003cb	cmovgl	%ecx,%esi
000003ce	movl	0xe8(%ebp),%ecx
000003d1	cmpl	%ecx,%esi
000003d3	cmovgel	%ecx,%esi
000003d6	xorl	%edi,%edi
000003d8	jmp	0x000003e1
000003da	nopw	Fail(char const*)(%eax,%eax)
000003e0	incl	%edi
000003e1	cmpl	%esi,%edi
000003e3	jge	0x000003f0
000003e5	movl	0xf0(%ebp),%ecx
000003e8	movb	(%ecx,%edi),%cl
000003eb	cmpb	(%eax,%edi),%cl
000003ee	je	0x000003e0
000003f0	cmpl	$0x09,%edi
000003f3	jl	0x000003a0
000003f5	cmpl	%ebx,%edi
000003f7	jle	0x000003a0
000003f9	cmpl	$0x00001000,%edi
000003ff	movl	%edi,%ebx
00000401	movl	%edx,0xec(%ebp)
00000404	jle	0x000003a0
00000406	movl	%edi,%ebx
00000408	movl	%edx,%edi
0000040a	testl	%edi,%edi
0000040c	movl	0xd8(%ebp),%edx
0000040f	movl	0xf0(%ebp),%eax
00000412	je	0x00000328
00000418	testl	%edx,%edx
0000041a	jne	0x00000421
0000041c	movl	0xc4(%ebp),%edx
0000041f	jmp	0x00000475
00000421	movl	%edi,0xec(%ebp)
00000424	subl	%edx,%eax
00000426	cmpl	$0x7f,%edx
00000429	jg	0x0000043b
0000042b	movl	0xd4(%ebp),%esi
0000042e	movb	%dl,(%esi)
00000430	movl	%edx,0x08(%esp)
00000434	movl	%eax,0x04(%esp)
00000438	incl	%esi
00000439	jmp	0x0000045e
0000043b	movl	0xd4(%ebp),%esi
0000043e	movb	$0x80,(%esi)
00000441	movb	Fail(char const*),0x01(%esi)
00000445	movb	%dl,0x02(%esi)
00000448	movb	%dh,0x03(%esi)
0000044b	movl	%edx,%ecx
0000044d	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
00000450	movb	%cl,0x04(%esi)
00000453	movl	%edx,0x08(%esp)
00000457	movl	%eax,0x04(%esp)
0000045b	addl	$0x05,%esi
0000045e	movl	%esi,(%esp)
00000461	movl	%edx,%edi
00000463	calll	_memcpy
00000468	addl	%edi,%esi
0000046a	movl	%esi,0xd4(%ebp)
0000046d	movl	$0x00000001,%edx
00000472	movl	0xec(%ebp),%edi
00000475	movl	0x04(%edi),%eax
00000478	movl	0xc0(%ebp),%esi
0000047b	cmpl	%esi,%eax
0000047d	movl	$0x00000001,%ecx
00000482	cmovnel	%ecx,%edx
00000485	movl	%edx,0xc4(%ebp)
00000488	subl	%esi,%eax
0000048a	movl	%ebx,%edx
0000048c	cmpl	$0x00000080,%edx
00000492	jl	0x000004ae
00000494	movl	0xd4(%ebp),%ecx
00000497	movb	Fail(char const*),(%ecx)
0000049a	movb	%dl,0x01(%ecx)
0000049d	movb	%dh,0x02(%ecx)
000004a0	movb	%al,0x03(%ecx)
000004a3	movb	%ah,0x04(%ecx)
000004a6	addl	$0x05,%ecx
000004a9	jmp	0x000002f2
000004ae	movl	%eax,%ecx
000004b0	subl	$0x80,%ecx
000004b3	cmpl	$0x000000ff,%ecx
000004b9	ja	0x000002e0
000004bf	movl	%edx,%ecx
000004c1	subl	$0x80,%ecx
000004c4	movl	%edx,%esi
000004c6	movl	0xd4(%ebp),%edx
000004c9	movb	%cl,(%edx)
000004cb	movb	%al,0x01(%edx)
000004ce	addl	$0x02,%edx
000004d1	movl	%edx,0xd4(%ebp)
000004d4	movl	%esi,%edx
000004d6	jmp	0x000002f5
000004db	testl	%edx,%edx
000004dd	movl	0xbc(%ebp),%esi
000004e0	jne	0x000004ed
000004e2	movl	0xd0(%ebp),%eax
000004e5	movl	0xd4(%ebp),%edi
000004e8	movl	0xc4(%ebp),%ebx
000004eb	jmp	0x00000541
000004ed	subl	%edx,%eax
000004ef	cmpl	$0x7f,%edx
000004f2	movl	%eax,%edi
000004f4	jg	0x00000508
000004f6	movl	0xd4(%ebp),%eax
000004f9	movb	%dl,(%eax)
000004fb	movl	%edx,0x08(%esp)
000004ff	movl	%edi,0x04(%esp)
00000503	movl	%eax,%edi
00000505	incl	%edi
00000506	jmp	0x0000052d
00000508	movl	0xd4(%ebp),%ecx
0000050b	movb	$0x80,(%ecx)
0000050e	movb	Fail(char const*),0x01(%ecx)
00000512	movb	%dl,0x02(%ecx)
00000515	movb	%dh,0x03(%ecx)
00000518	movl	%edx,%eax
0000051a	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
0000051d	movb	%al,0x04(%ecx)
00000520	movl	%edx,0x08(%esp)
00000524	movl	%edi,0x04(%esp)
00000528	movl	%ecx,%edi
0000052a	addl	$0x05,%edi
0000052d	movl	%edi,(%esp)
00000530	movl	%edx,%ebx
00000532	calll	_memcpy
00000537	addl	%ebx,%edi
00000539	movl	$0x00000001,%ebx
0000053e	movl	0xd0(%ebp),%eax
00000541	testl	%eax,%eax
00000543	je	0x0000054d
00000545	movl	%eax,(%esp)
00000548	calll	operator delete[](void*)
0000054d	testl	%esi,%esi
0000054f	je	0x00000559
00000551	movl	%esi,(%esp)
00000554	calll	operator delete[](void*)
00000559	subl	0x1c(%ebp),%edi
0000055c	movl	0x18(%ebp),%eax
0000055f	movl	%edi,(%eax)
00000561	movl	%ebx,%eax
00000563	addl	$0x4c,%esp
00000566	popl	%esi
00000567	popl	%edi
00000568	popl	%ebx
00000569	popl	%ebp
0000056a	ret
0000056b	nopl	Fail(char const*)(%eax,%eax)
FindDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000570	pushl	%ebp
00000571	movl	%esp,%ebp
00000573	pushl	%ebx
00000574	pushl	%edi
00000575	pushl	%esi
00000576	subl	$0x0004004c,%esp
0000057c	calll	0x00000581
00000581	popl	%eax
00000582	movl	0x41ae-0x581(%eax),%eax
00000588	movl	%eax,0xfffbffbc(%ebp)
0000058e	movl	(%eax),%eax
00000590	movl	%eax,0xf0(%ebp)
00000593	leal	0xfffbfff0(%ebp),%eax
00000599	movl	%eax,(%esp)
0000059c	movl	$0x00040000,0x08(%esp)
000005a4	movl	Fail(char const*),0x04(%esp)
000005ac	movl	0x14(%ebp),%edi
000005af	cmpl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%edi
000005b2	setne	%bl
000005b5	calll	_memset
000005ba	movl	Fail(char const*),0xfffbffc0(%ebp)
000005c4	testl	%edi,%edi
000005c6	movl	$0x00000001,0xfffbffc4(%ebp)
000005d0	je	0x00000655
000005d6	movl	$0xffffffff,%ecx
000005db	movl	$0x00000008,%edx
000005e0	movl	%edi,%esi
000005e2	movl	%esi,%eax
000005e4	mull	%edx
000005e6	cmovol	%ecx,%eax
000005e9	movl	%eax,(%esp)
000005ec	calll	operator new[](unsigned long)
000005f1	movl	%eax,0xfffbffc0(%ebp)
000005f7	cmpl	Fail(char const*),0x0c(%ebp)
000005fb	jne	0x0000060b
000005fd	movl	%esi,%edi
000005ff	movl	$0x00000001,0xfffbffc4(%ebp)
00000609	jmp	0x00000655
0000060b	movzbl	%bl,%eax
0000060e	movl	%eax,0xfffbffc4(%ebp)
00000614	leal	0xf8(%esi),%eax
00000617	testl	%eax,%eax
00000619	movl	%esi,%edi
0000061b	jle	0x00000655
0000061d	movl	0x0c(%ebp),%edx
00000620	leal	0xf8(%edx,%edi),%eax
00000624	movl	0xfffbffc0(%ebp),%ecx
0000062a	nopw	Fail(char const*)(%eax,%eax)
00000630	movw	0x04(%edx),%si
00000634	addw	(%edx),%si
00000637	movl	%edx,0x04(%ecx)
0000063a	movzwl	%si,%esi
0000063d	movl	0xfffbfff0(%ebp,%esi,4),%ebx
00000644	movl	%ebx,(%ecx)
00000646	movl	%ecx,0xfffbfff0(%ebp,%esi,4)
0000064d	addl	$0x08,%ecx
00000650	incl	%edx
00000651	cmpl	%eax,%edx
00000653	jb	0x00000630
00000655	movl	0x1c(%ebp),%edx
00000658	movl	0x08(%ebp),%ebx
0000065b	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
0000065e	leal	0xf8(%ebx,%eax),%ecx
00000662	movl	%ecx,0xfffbffcc(%ebp)
00000668	movl	%edi,%ecx
0000066a	movl	0x0c(%ebp),%edi
0000066d	addl	%edi,%ecx
0000066f	movl	%ecx,0xfffbffdc(%ebp)
00000675	addl	%ebx,%eax
00000677	movl	%eax,0xfffbffd4(%ebp)
0000067d	movl	%edx,%esi
0000067f	movl	%edi,%edx
00000681	jmp	0x000006aa
00000683	nopl	%cs:Fail(char const*)(%eax,%eax)
00000690	movb	$0x80,(%esi)
00000693	movb	%dl,0x01(%esi)
00000696	movb	%al,0x02(%esi)
00000699	movb	%ah,0x03(%esi)
0000069c	addl	$0x04,%esi
0000069f	movl	0xfffbffe8(%ebp),%eax
000006a5	addl	%edx,%ebx
000006a7	addl	0x04(%eax),%edx
000006aa	movl	%esi,0xfffbffd0(%ebp)
000006b0	movl	%edx,0xfffbffc8(%ebp)
000006b6	movl	$0x00007fff,%eax
000006bb	subl	%edx,%eax
000006bd	movl	%eax,0xfffbffe0(%ebp)
000006c3	xorl	%edx,%edx
000006c5	jmp	0x000006d8
000006c7	nopw	Fail(char const*)(%eax,%eax)
000006d0	incl	%edx
000006d1	incl	%ebx
000006d2	movl	0xfffbffd0(%ebp),%esi
000006d8	cmpl	0xfffbffd4(%ebp),%ebx
000006de	jae	0x0000087c
000006e4	cmpl	0xfffbffcc(%ebp),%ebx
000006ea	jae	0x000006d0
000006ec	movw	0x04(%ebx),%ax
000006f0	addw	(%ebx),%ax
000006f3	movzwl	%ax,%eax
000006f6	movl	0xfffbfff0(%ebp,%eax,4),%ecx
000006fd	testl	%ecx,%ecx
000006ff	je	0x000006d0
00000701	movl	%edx,0xfffbffd8(%ebp)
00000707	movl	0xfffbffd4(%ebp),%eax
0000070d	subl	%ebx,%eax
0000070f	movl	%eax,0xfffbffe4(%ebp)
00000715	movl	%ebx,%esi
00000717	movl	Fail(char const*),0xfffbffe8(%ebp)
00000721	xorl	%edx,%edx
00000723	nopl	%cs:Fail(char const*)(%eax,%eax)
00000730	movl	0x04(%ecx),%edi
00000733	movl	0xfffbffe0(%ebp),%eax
00000739	leal	(%eax,%edi),%eax
0000073c	cmpl	$0x0000fffd,%eax
00000741	ja	0x0000079c
00000743	movl	%edx,0xfffbffec(%ebp)
00000749	movl	0xfffbffdc(%ebp),%eax
0000074f	subl	%edi,%eax
00000751	cmpl	$0x0000ffff,%eax
00000756	movl	$0x0000ffff,%edx
0000075b	cmovgl	%edx,%eax
0000075e	movl	0xfffbffe4(%ebp),%edx
00000764	cmpl	%edx,%eax
00000766	cmovgel	%edx,%eax
00000769	xorl	%ebx,%ebx
0000076b	jmp	0x00000771
0000076d	nopl	(%eax)
00000770	incl	%ebx
00000771	cmpl	%eax,%ebx
00000773	jge	0x0000077d
00000775	movb	(%esi,%ebx),%dl
00000778	cmpb	(%edi,%ebx),%dl
0000077b	je	0x00000770
0000077d	cmpl	$0x09,%ebx
00000780	jge	0x0000078a
00000782	movl	0xfffbffec(%ebp),%edx
00000788	jmp	0x0000079c
0000078a	movl	0xfffbffec(%ebp),%edx
00000790	cmpl	%edx,%ebx
00000792	jle	0x0000079c
00000794	movl	%ebx,%edx
00000796	movl	%ecx,0xfffbffe8(%ebp)
0000079c	movl	(%ecx),%ecx
0000079e	testl	%ecx,%ecx
000007a0	jne	0x00000730
000007a2	movl	%edx,%edi
000007a4	movl	0xfffbffe8(%ebp),%eax
000007aa	testl	%eax,%eax
000007ac	movl	%esi,%ebx
000007ae	movl	0xfffbffd8(%ebp),%edx
000007b4	je	0x000006d0
000007ba	testl	%edx,%edx
000007bc	movl	0xfffbffd0(%ebp),%esi
000007c2	jne	0x000007cc
000007c4	movl	0xfffbffc4(%ebp),%edx
000007ca	jmp	0x0000081b
000007cc	movl	%ebx,%eax
000007ce	subl	%edx,%eax
000007d0	cmpl	$0x7f,%edx
000007d3	jg	0x000007e2
000007d5	movb	%dl,(%esi)
000007d7	movl	%edx,0x08(%esp)
000007db	movl	%eax,0x04(%esp)
000007df	incl	%esi
000007e0	jmp	0x00000802
000007e2	movb	$0x80,(%esi)
000007e5	movb	Fail(char const*),0x01(%esi)
000007e9	movb	%dl,0x02(%esi)
000007ec	movb	%dh,0x03(%esi)
000007ef	movl	%edx,%ecx
000007f1	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
000007f4	movb	%cl,0x04(%esi)
000007f7	movl	%edx,0x08(%esp)
000007fb	movl	%eax,0x04(%esp)
000007ff	addl	$0x05,%esi
00000802	movl	%esi,(%esp)
00000805	calll	_memcpy
0000080a	addl	0xfffbffd8(%ebp),%esi
00000810	movl	$0x00000001,%edx
00000815	movl	0xfffbffe8(%ebp),%eax
0000081b	movl	0x04(%eax),%eax
0000081e	cmpl	0xfffbffc8(%ebp),%eax
00000824	movl	$0x00000001,%ecx
00000829	cmovnel	%ecx,%edx
0000082c	movl	%edx,0xfffbffc4(%ebp)
00000832	subl	0xfffbffc8(%ebp),%eax
00000838	movl	%edi,%edx
0000083a	cmpl	$0x00000080,%edx
00000840	jl	0x00000859
00000842	movb	Fail(char const*),(%esi)
00000845	movb	%dl,0x01(%esi)
00000848	movb	%dh,0x02(%esi)
0000084b	movb	%al,0x03(%esi)
0000084e	movb	%ah,0x04(%esi)
00000851	addl	$0x05,%esi
00000854	jmp	0x0000069f
00000859	movl	%eax,%ecx
0000085b	subl	$0x80,%ecx
0000085e	cmpl	$0x000000ff,%ecx
00000864	ja	0x00000690
0000086a	movl	%edx,%ecx
0000086c	subl	$0x80,%ecx
0000086f	movb	%cl,(%esi)
00000871	movb	%al,0x01(%esi)
00000874	addl	$0x02,%esi
00000877	jmp	0x0000069f
0000087c	testl	%edx,%edx
0000087e	movl	0xfffbffc0(%ebp),%edi
00000884	jne	0x0000088e
00000886	movl	0xfffbffc4(%ebp),%ebx
0000088c	jmp	0x000008d3
0000088e	subl	%edx,%ebx
00000890	cmpl	$0x7f,%edx
00000893	jg	0x000008a2
00000895	movb	%dl,(%esi)
00000897	movl	%edx,0x08(%esp)
0000089b	movl	%ebx,0x04(%esp)
0000089f	incl	%esi
000008a0	jmp	0x000008c2
000008a2	movb	$0x80,(%esi)
000008a5	movb	Fail(char const*),0x01(%esi)
000008a9	movb	%dl,0x02(%esi)
000008ac	movb	%dh,0x03(%esi)
000008af	movl	%edx,%eax
000008b1	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
000008b4	movb	%al,0x04(%esi)
000008b7	movl	%edx,0x08(%esp)
000008bb	movl	%ebx,0x04(%esp)
000008bf	addl	$0x05,%esi
000008c2	movl	%esi,(%esp)
000008c5	movl	%edx,%ebx
000008c7	calll	_memcpy
000008cc	addl	%ebx,%esi
000008ce	movl	$0x00000001,%ebx
000008d3	testl	%edi,%edi
000008d5	je	0x000008df
000008d7	movl	%edi,(%esp)
000008da	calll	operator delete[](void*)
000008df	subl	0x1c(%ebp),%esi
000008e2	movl	0x18(%ebp),%eax
000008e5	movl	%esi,(%eax)
000008e7	movl	0xfffbffbc(%ebp),%eax
000008ed	movl	(%eax),%eax
000008ef	cmpl	0xf0(%ebp),%eax
000008f2	jne	0x00000901
000008f4	movl	%ebx,%eax
000008f6	addl	$0x0004004c,%esp
000008fc	popl	%esi
000008fd	popl	%edi
000008fe	popl	%ebx
000008ff	popl	%ebp
00000900	ret
00000901	calll	___stack_chk_fail
00000906	nopw	%cs:Fail(char const*)(%eax,%eax)
FindDiffsLowMemory(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int):
00000910	pushl	%ebp
00000911	movl	%esp,%ebp
00000913	pushl	%ebx
00000914	pushl	%edi
00000915	pushl	%esi
00000916	subl	$0x0000044c,%esp
0000091c	calll	0x00000921
00000921	popl	%eax
00000922	movl	0x41ae-0x921(%eax),%eax
00000928	movl	%eax,0xfffffbc0(%ebp)
0000092e	movl	(%eax),%eax
00000930	movl	%eax,0xf0(%ebp)
00000933	leal	0xfffffbf0(%ebp),%eax
00000939	movl	%eax,(%esp)
0000093c	movl	$0x00000400,0x08(%esp)
00000944	movl	Fail(char const*),0x04(%esp)
0000094c	movl	0x08(%ebp),%edi
0000094f	movl	$0x00000028,%eax
00000954	subl	%edi,%eax
00000956	movl	%eax,0xfffffbd8(%ebp)
0000095c	movl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int)(%ebp),%eax
0000095f	leal	0xf8(%edi,%eax),%ecx
00000963	movl	%ecx,0xfffffbd4(%ebp)
00000969	movl	0x14(%ebp),%ecx
0000096c	movl	0x0c(%ebp),%esi
0000096f	leal	(%esi,%ecx),%edx
00000972	movl	%edx,0xfffffbd0(%ebp)
00000978	leal	(%edi,%eax),%edx
0000097b	movl	%edx,0xfffffbec(%ebp)
00000981	cmpl	%eax,%ecx
00000983	setne	%al
00000986	movzbl	%al,%eax
00000989	movl	%eax,0xfffffbc8(%ebp)
0000098f	addl	$0xf8,%ecx
00000992	movl	%ecx,0xfffffbdc(%ebp)
00000998	calll	_memset
0000099d	movl	0x1c(%ebp),%eax
000009a0	movl	%eax,0xfffffbe4(%ebp)
000009a6	movl	%esi,%ebx
000009a8	jmp	0x000009cf
000009aa	nopw	Fail(char const*)(%eax,%eax)
000009b0	movl	0xfffffbe4(%ebp),%ecx
000009b6	movb	$0x80,(%ecx)
000009b9	movb	%dl,0x01(%ecx)
000009bc	movb	%al,0x02(%ecx)
000009bf	movb	%ah,0x03(%ecx)
000009c2	addl	$0x04,%ecx
000009c5	movl	%ecx,0xfffffbe4(%ebp)
000009cb	addl	%edx,%edi
000009cd	addl	%edx,%esi
000009cf	movl	%esi,0xfffffbc4(%ebp)
000009d5	movl	Fail(char const*),0xfffffbe0(%ebp)
000009df	jmp	0x000009fb
000009e1	nopl	%cs:Fail(char const*)(%eax,%eax)
000009f0	incl	%edi
000009f1	movl	%edi,%eax
000009f3	incl	0xfffffbe0(%ebp)
000009f9	movl	%eax,%edi
000009fb	movl	0xfffffbdc(%ebp),%esi
00000a01	cmpl	0xfffffbec(%ebp),%edi
00000a07	jae	0x00000bed
00000a0d	movl	%ebx,%ecx
00000a0f	subl	0x0c(%ebp),%ecx
00000a12	movl	0xfffffbd8(%ebp),%eax
00000a18	leal	(%eax,%edi),%eax
00000a1b	cmpl	%eax,%ecx
00000a1d	jge	0x00000a61
00000a1f	cmpl	%esi,%ecx
00000a21	jge	0x00000a61
00000a23	incl	%ebx
00000a24	nopw	%cs:Fail(char const*)(%eax,%eax)
00000a30	movzbl	0xff(%ebx),%edx
00000a34	movzbl	(%ebx),%ecx
00000a37	addl	%edx,%ecx
00000a39	movzbl	0x01(%ebx),%edx
00000a3d	addl	%ecx,%edx
00000a3f	movzbl	0x02(%ebx),%ecx
00000a43	addl	%edx,%ecx
00000a45	movzbl	%cl,%ecx
00000a48	leal	0xff(%ebx),%edx
00000a4b	movl	%edx,0xfffffbf0(%ebp,%ecx,4)
00000a52	movl	%ebx,%ecx
00000a54	subl	0x0c(%ebp),%ecx
00000a57	incl	%ebx
00000a58	cmpl	%eax,%ecx
00000a5a	jge	0x00000a60
00000a5c	cmpl	%esi,%ecx
00000a5e	jl	0x00000a30
00000a60	decl	%ebx
00000a61	cmpl	0xfffffbd4(%ebp),%edi
00000a67	jae	0x000009f0
00000a69	movzbl	(%edi),%ecx
00000a6c	movzbl	0x01(%edi),%eax
00000a70	addl	%ecx,%eax
00000a72	movzbl	0x02(%edi),%ecx
00000a76	addl	%eax,%ecx
00000a78	movzbl	0x03(%edi),%eax
00000a7c	addl	%ecx,%eax
00000a7e	movzbl	%al,%eax
00000a81	movl	0xfffffbf0(%ebp,%eax,4),%esi
00000a88	leal	0x01(%edi),%eax
00000a8b	testl	%esi,%esi
00000a8d	je	0x000009f3
00000a93	movl	%eax,0xfffffbe8(%ebp)
00000a99	movl	0xfffffbd0(%ebp),%edx
00000a9f	subl	%esi,%edx
00000aa1	movl	0xfffffbec(%ebp),%ecx
00000aa7	subl	%edi,%ecx
00000aa9	cmpl	%edx,%ecx
00000aab	cmovgel	%edx,%ecx
00000aae	xorl	%edx,%edx
00000ab0	jmp	0x00000ac1
00000ab2	nopw	%cs:Fail(char const*)(%eax,%eax)
00000ac0	incl	%edx
00000ac1	cmpl	%ecx,%edx
00000ac3	jge	0x00000ad1
00000ac5	movl	%edx,%eax
00000ac7	movb	(%edi,%eax),%dl
00000aca	cmpb	(%esi,%eax),%dl
00000acd	movl	%eax,%edx
00000acf	je	0x00000ac0
00000ad1	cmpl	$0x09,%edx
00000ad4	movl	0xfffffbe8(%ebp),%eax
00000ada	jl	0x000009f3
00000ae0	movl	0xfffffbe0(%ebp),%eax
00000ae6	testl	%eax,%eax
00000ae8	jne	0x00000af8
00000aea	movl	%edx,0xfffffbcc(%ebp)
00000af0	movl	0xfffffbc8(%ebp),%ecx
00000af6	jmp	0x00000b73
00000af8	movl	%edx,0xfffffbcc(%ebp)
00000afe	movl	%eax,%edx
00000b00	movl	%edi,%ecx
00000b02	subl	%edx,%ecx
00000b04	cmpl	$0x7f,%edx
00000b07	jg	0x00000b1c
00000b09	movl	0xfffffbe4(%ebp),%eax
00000b0f	movb	%dl,(%eax)
00000b11	movl	%edx,0x08(%esp)
00000b15	movl	%ecx,0x04(%esp)
00000b19	incl	%eax
00000b1a	jmp	0x00000b4e
00000b1c	movl	0xfffffbe4(%ebp),%eax
00000b22	movb	$0x80,(%eax)
00000b25	movb	Fail(char const*),0x01(%eax)
00000b29	movb	%dl,0x02(%eax)
00000b2c	movb	%dh,0x03(%eax)
00000b2f	movl	%ecx,0xfffffbe8(%ebp)
00000b35	movl	%edx,%ecx
00000b37	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%ecx
00000b3a	movb	%cl,0x04(%eax)
00000b3d	movl	%edx,0x08(%esp)
00000b41	movl	0xfffffbe8(%ebp),%ecx
00000b47	movl	%ecx,0x04(%esp)
00000b4b	addl	$0x05,%eax
00000b4e	movl	%eax,0xfffffbe4(%ebp)
00000b54	movl	%eax,(%esp)
00000b57	calll	_memcpy
00000b5c	movl	0xfffffbe4(%ebp),%eax
00000b62	addl	0xfffffbe0(%ebp),%eax
00000b68	movl	%eax,0xfffffbe4(%ebp)
00000b6e	movl	$0x00000001,%ecx
00000b73	movl	0xfffffbc4(%ebp),%edx
00000b79	cmpl	%edx,%esi
00000b7b	movl	$0x00000001,%eax
00000b80	cmovnel	%eax,%ecx
00000b83	movl	%ecx,0xfffffbc8(%ebp)
00000b89	movl	%esi,%eax
00000b8b	subl	%edx,%eax
00000b8d	movl	0xfffffbcc(%ebp),%edx
00000b93	cmpl	$0x00000080,%edx
00000b99	jl	0x00000bb8
00000b9b	movl	0xfffffbe4(%ebp),%ecx
00000ba1	movb	Fail(char const*),(%ecx)
00000ba4	movb	%dl,0x01(%ecx)
00000ba7	movb	%dh,0x02(%ecx)
00000baa	movb	%al,0x03(%ecx)
00000bad	movb	%ah,0x04(%ecx)
00000bb0	addl	$0x05,%ecx
00000bb3	jmp	0x000009c5
00000bb8	movl	%eax,%ecx
00000bba	subl	$0x80,%ecx
00000bbd	cmpl	$0x000000ff,%ecx
00000bc3	ja	0x000009b0
00000bc9	movl	%edx,%ecx
00000bcb	subl	$0x80,%ecx
00000bce	movl	0xfffffbe4(%ebp),%edx
00000bd4	movb	%cl,(%edx)
00000bd6	movb	%al,0x01(%edx)
00000bd9	addl	$0x02,%edx
00000bdc	movl	%edx,0xfffffbe4(%ebp)
00000be2	movl	0xfffffbcc(%ebp),%edx
00000be8	jmp	0x000009cb
00000bed	movl	0xfffffbe0(%ebp),%eax
00000bf3	testl	%eax,%eax
00000bf5	movl	0xfffffbe4(%ebp),%esi
00000bfb	jne	0x00000c05
00000bfd	movl	0xfffffbc8(%ebp),%ecx
00000c03	jmp	0x00000c4f
00000c05	subl	%eax,%edi
00000c07	cmpl	$0x7f,%eax
00000c0a	jg	0x00000c1e
00000c0c	movb	%al,(%esi)
00000c0e	movl	%eax,0x08(%esp)
00000c12	movl	%edi,0x04(%esp)
00000c16	incl	%esi
00000c17	movl	%esi,(%esp)
00000c1a	movl	%eax,%ebx
00000c1c	jmp	0x00000c43
00000c1e	movb	$0x80,(%esi)
00000c21	movb	Fail(char const*),0x01(%esi)
00000c25	movb	%al,0x02(%esi)
00000c28	movb	%ah,0x03(%esi)
00000c2b	movl	%eax,%ebx
00000c2d	movl	%ebx,%eax
00000c2f	shrl	ApplyDiffs(unsigned char const*, unsigned char const*, int, int, int&, unsigned char*, unsigned int),%eax
00000c32	movb	%al,0x04(%esi)
00000c35	movl	%ebx,0x08(%esp)
00000c39	movl	%edi,0x04(%esp)
00000c3d	addl	$0x05,%esi
00000c40	movl	%esi,(%esp)
00000c43	calll	_memcpy
00000c48	addl	%ebx,%esi
00000c4a	movl	$0x00000001,%ecx
00000c4f	subl	0x1c(%ebp),%esi
00000c52	movl	0x18(%ebp),%eax
00000c55	movl	%esi,(%eax)
00000c57	movl	0xfffffbc0(%ebp),%eax
00000c5d	movl	(%eax),%eax
00000c5f	cmpl	0xf0(%ebp),%eax
00000c62	jne	0x00000c71
00000c64	movl	%ecx,%eax
00000c66	addl	$0x0000044c,%esp
00000c6c	popl	%esi
00000c6d	popl	%edi
00000c6e	popl	%ebx
00000c6f	popl	%ebp
00000c70	ret
00000c71	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(generichash.o):
(__TEXT,__text) section
HashString(char const*):
00000000	pushl	%edi
00000001	pushl	%esi
00000002	calll	0x00000007
00000007	popl	%edx
00000008	movl	0x0c(%esp),%esi
0000000c	incl	%esi
0000000d	xorl	%ecx,%ecx
0000000f	xorl	%eax,%eax
00000011	jmp	0x0000002c
00000013	nopl	%cs:HashString(char const*)(%eax,%eax)
00000020	xorl	%eax,%edi
00000022	movl	g_nRandomValues-0x7(%edx,%edi,4),%ecx
00000029	addl	$0x02,%esi
0000002c	movzbl	0xff(%esi),%edi
00000030	testl	%edi,%edi
00000032	je	0x00000044
00000034	xorl	%ecx,%edi
00000036	movl	g_nRandomValues-0x7(%edx,%edi,4),%eax
0000003d	movzbl	(%esi),%edi
00000040	testl	%edi,%edi
00000042	jne	0x00000020
00000044	shll	$0x08,%eax
00000047	orl	%ecx,%eax
00000049	popl	%esi
0000004a	popl	%edi
0000004b	ret
0000004c	nopl	HashString(char const*)(%eax)
HashStringCaseless(char const*):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%ebx
00000054	pushl	%edi
00000055	pushl	%esi
00000056	subl	$0x0c,%esp
00000059	calll	0x0000005e
0000005e	popl	%edi
0000005f	movl	0x08(%ebp),%ebx
00000062	incl	%ebx
00000063	movl	HashString(char const*),0xf0(%ebp)
0000006a	xorl	%esi,%esi
0000006c	jmp	0x0000007f
0000006e	nop
00000070	xorl	%esi,%eax
00000072	movl	g_nRandomValues-0x5e(%edi,%eax,4),%eax
00000079	movl	%eax,0xf0(%ebp)
0000007c	addl	$0x02,%ebx
0000007f	movzbl	0xff(%ebx),%eax
00000083	movl	%eax,(%esp)
00000086	calll	___toupper
0000008b	testl	%eax,%eax
0000008d	je	0x000000a8
0000008f	movzbl	(%ebx),%ecx
00000092	movl	%ecx,(%esp)
00000095	xorl	0xf0(%ebp),%eax
00000098	movl	g_nRandomValues-0x5e(%edi,%eax,4),%esi
0000009f	calll	___toupper
000000a4	testl	%eax,%eax
000000a6	jne	0x00000070
000000a8	shll	$0x08,%esi
000000ab	orl	0xf0(%ebp),%esi
000000ae	movl	%esi,%eax
000000b0	addl	$0x0c,%esp
000000b3	popl	%esi
000000b4	popl	%edi
000000b5	popl	%ebx
000000b6	popl	%ebp
000000b7	ret
000000b8	nopl	HashString(char const*)(%eax,%eax)
HashStringCaselessConventional(char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%esi
000000cb	movb	(%esi),%cl
000000cd	movl	$0xaaaaaaaa,%eax
000000d2	testb	%cl,%cl
000000d4	je	0x000000fa
000000d6	incl	%esi
000000d7	movl	$0xaaaaaaaa,%eax
000000dc	nopl	HashString(char const*)(%eax)
000000e0	movsbl	%cl,%ecx
000000e3	movl	%ecx,(%esp)
000000e6	imull	$0x21,%eax,%edi
000000e9	calll	___tolower
000000ee	movzbl	%al,%eax
000000f1	addl	%edi,%eax
000000f3	movb	(%esi),%cl
000000f5	incl	%esi
000000f6	testb	%cl,%cl
000000f8	jne	0x000000e0
000000fa	addl	$0x10,%esp
000000fd	popl	%esi
000000fe	popl	%edi
000000ff	popl	%ebp
00000100	ret
00000101	nopl	%cs:HashString(char const*)(%eax,%eax)
HashInt(int):
00000110	pushl	%ebx
00000111	pushl	%edi
00000112	pushl	%esi
00000113	calll	0x00000118
00000118	popl	%ecx
00000119	movl	0x10(%esp),%edx
0000011d	movl	%edx,%esi
0000011f	sarl	$0x18,%esi
00000122	movzbl	%dh,%eax
00000125	xorl	g_nRandomValues-0x118(%ecx,%eax,4),%esi
0000012c	movl	%edx,%ebx
0000012e	shrl	$0x10,%ebx
00000131	movzbl	%bl,%edi
00000134	xorl	g_nRandomValues-0x118(%ecx,%esi,4),%edi
0000013b	xorl	g_nRandomValues-0x118(%ecx,%edi,4),%eax
00000142	movl	g_nRandomValues-0x118(%ecx,%eax,4),%eax
00000149	movzbl	%dl,%edx
0000014c	xorl	%eax,%edx
0000014e	shll	$0x08,%eax
00000151	orl	g_nRandomValues-0x118(%ecx,%edx,4),%eax
00000158	popl	%esi
00000159	popl	%edi
0000015a	popl	%ebx
0000015b	ret
0000015c	nopl	HashString(char const*)(%eax)
Hash4(void const*):
00000160	pushl	%ebx
00000161	pushl	%edi
00000162	pushl	%esi
00000163	calll	0x00000168
00000168	popl	%ecx
00000169	movl	0x10(%esp),%eax
0000016d	movl	(%eax),%edx
0000016f	movl	%edx,%esi
00000171	shrl	$0x18,%esi
00000174	movzbl	%dh,%eax
00000177	xorl	g_nRandomValues-0x168(%ecx,%eax,4),%esi
0000017e	movl	%edx,%ebx
00000180	shrl	$0x10,%ebx
00000183	movzbl	%bl,%edi
00000186	xorl	g_nRandomValues-0x168(%ecx,%esi,4),%edi
0000018d	xorl	g_nRandomValues-0x168(%ecx,%edi,4),%eax
00000194	movl	g_nRandomValues-0x168(%ecx,%eax,4),%eax
0000019b	movzbl	%dl,%edx
0000019e	xorl	%eax,%edx
000001a0	shll	$0x08,%eax
000001a3	orl	g_nRandomValues-0x168(%ecx,%edx,4),%eax
000001aa	popl	%esi
000001ab	popl	%edi
000001ac	popl	%ebx
000001ad	ret
000001ae	nop
Hash8(void const*):
000001b0	pushl	%ebx
000001b1	pushl	%edi
000001b2	pushl	%esi
000001b3	calll	0x000001b8
000001b8	popl	%ecx
000001b9	movl	0x10(%esp),%edx
000001bd	movl	(%edx),%eax
000001bf	movl	0x04(%edx),%edx
000001c2	movl	%eax,%edi
000001c4	shrl	$0x18,%edi
000001c7	movzbl	%ah,%esi
000001ca	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%edi
000001d1	movl	%eax,%ebx
000001d3	shrl	$0x10,%ebx
000001d6	movzbl	%bl,%ebx
000001d9	xorl	g_nRandomValues-0x1b8(%ecx,%edi,4),%ebx
000001e0	xorl	g_nRandomValues-0x1b8(%ecx,%ebx,4),%esi
000001e7	movzbl	%al,%edi
000001ea	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%edi
000001f1	movl	%edx,%eax
000001f3	shrl	$0x18,%eax
000001f6	xorl	g_nRandomValues-0x1b8(%ecx,%edi,4),%eax
000001fd	movl	%edx,%ebx
000001ff	shrl	$0x10,%ebx
00000202	movzbl	%bl,%esi
00000205	xorl	g_nRandomValues-0x1b8(%ecx,%eax,4),%esi
0000020c	movzbl	%dh,%eax
0000020f	xorl	g_nRandomValues-0x1b8(%ecx,%esi,4),%eax
00000216	movl	g_nRandomValues-0x1b8(%ecx,%eax,4),%eax
0000021d	movzbl	%dl,%edx
00000220	xorl	%eax,%edx
00000222	shll	$0x08,%eax
00000225	orl	g_nRandomValues-0x1b8(%ecx,%edx,4),%eax
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	ret
Hash12(void const*):
00000230	pushl	%ebp
00000231	pushl	%ebx
00000232	pushl	%edi
00000233	pushl	%esi
00000234	calll	0x00000239
00000239	popl	%ecx
0000023a	movl	0x14(%esp),%edx
0000023e	movl	(%edx),%eax
00000240	movl	0x04(%edx),%edx
00000243	movl	%eax,%edi
00000245	shrl	$0x18,%edi
00000248	movzbl	%ah,%esi
0000024b	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%edi
00000252	movl	%eax,%ebx
00000254	shrl	$0x10,%ebx
00000257	movzbl	%bl,%ebp
0000025a	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%ebp
00000261	xorl	g_nRandomValues-0x239(%ecx,%ebp,4),%esi
00000268	movzbl	%al,%edi
0000026b	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%edi
00000272	movl	%edx,%esi
00000274	shrl	$0x18,%esi
00000277	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%esi
0000027e	movl	%edx,%ebx
00000280	shrl	$0x10,%ebx
00000283	movzbl	%bl,%ebx
00000286	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%ebx
0000028d	movzbl	%dh,%edi
00000290	xorl	g_nRandomValues-0x239(%ecx,%ebx,4),%edi
00000297	movzbl	%dl,%esi
0000029a	xorl	g_nRandomValues-0x239(%ecx,%edi,4),%esi
000002a1	movl	0x14(%esp),%eax
000002a5	movl	0x08(%eax),%edx
000002a8	movl	%edx,%eax
000002aa	shrl	$0x18,%eax
000002ad	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%eax
000002b4	movl	%edx,%ebx
000002b6	shrl	$0x10,%ebx
000002b9	movzbl	%bl,%esi
000002bc	xorl	g_nRandomValues-0x239(%ecx,%eax,4),%esi
000002c3	movzbl	%dh,%eax
000002c6	xorl	g_nRandomValues-0x239(%ecx,%esi,4),%eax
000002cd	movl	g_nRandomValues-0x239(%ecx,%eax,4),%eax
000002d4	movzbl	%dl,%edx
000002d7	xorl	%eax,%edx
000002d9	shll	$0x08,%eax
000002dc	orl	g_nRandomValues-0x239(%ecx,%edx,4),%eax
000002e3	popl	%esi
000002e4	popl	%edi
000002e5	popl	%ebx
000002e6	popl	%ebp
000002e7	ret
000002e8	nopl	HashString(char const*)(%eax,%eax)
Hash16(void const*):
000002f0	pushl	%ebp
000002f1	pushl	%ebx
000002f2	pushl	%edi
000002f3	pushl	%esi
000002f4	calll	0x000002f9
000002f9	popl	%ecx
000002fa	movl	0x14(%esp),%edx
000002fe	movl	(%edx),%eax
00000300	movl	0x04(%edx),%edx
00000303	movl	%eax,%edi
00000305	shrl	$0x18,%edi
00000308	movzbl	%ah,%esi
0000030b	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000312	movl	%eax,%ebx
00000314	shrl	$0x10,%ebx
00000317	movzbl	%bl,%ebp
0000031a	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%ebp
00000321	xorl	g_nRandomValues-0x2f9(%ecx,%ebp,4),%esi
00000328	movzbl	%al,%edi
0000032b	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000332	movl	%edx,%esi
00000334	shrl	$0x18,%esi
00000337	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
0000033e	movl	%edx,%ebx
00000340	shrl	$0x10,%ebx
00000343	movzbl	%bl,%edi
00000346	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
0000034d	movzbl	%dh,%esi
00000350	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000357	movzbl	%dl,%edi
0000035a	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%edi
00000361	movl	0x14(%esp),%eax
00000365	movl	0x08(%eax),%edx
00000368	movl	%edx,%esi
0000036a	shrl	$0x18,%esi
0000036d	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000374	movl	%edx,%ebx
00000376	shrl	$0x10,%ebx
00000379	movzbl	%bl,%ebx
0000037c	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%ebx
00000383	movzbl	%dh,%edi
00000386	xorl	g_nRandomValues-0x2f9(%ecx,%ebx,4),%edi
0000038d	movzbl	%dl,%esi
00000390	xorl	g_nRandomValues-0x2f9(%ecx,%edi,4),%esi
00000397	movl	0x0c(%eax),%edx
0000039a	movl	%edx,%eax
0000039c	shrl	$0x18,%eax
0000039f	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%eax
000003a6	movl	%edx,%ebx
000003a8	shrl	$0x10,%ebx
000003ab	movzbl	%bl,%esi
000003ae	xorl	g_nRandomValues-0x2f9(%ecx,%eax,4),%esi
000003b5	movzbl	%dh,%eax
000003b8	xorl	g_nRandomValues-0x2f9(%ecx,%esi,4),%eax
000003bf	movl	g_nRandomValues-0x2f9(%ecx,%eax,4),%eax
000003c6	movzbl	%dl,%edx
000003c9	xorl	%eax,%edx
000003cb	shll	$0x08,%eax
000003ce	orl	g_nRandomValues-0x2f9(%ecx,%edx,4),%eax
000003d5	popl	%esi
000003d6	popl	%edi
000003d7	popl	%ebx
000003d8	popl	%ebp
000003d9	ret
000003da	nopw	HashString(char const*)(%eax,%eax)
HashBlock(void const*, unsigned int):
000003e0	pushl	%edi
000003e1	pushl	%esi
000003e2	calll	0x000003e7
000003e7	popl	%edx
000003e8	movl	0x0c(%esp),%esi
000003ec	incl	%esi
000003ed	xorl	%ecx,%ecx
000003ef	movl	0x10(%esp),%edi
000003f3	xorl	%eax,%eax
000003f5	jmp	0x00000412
000003f7	nopw	HashString(char const*)(%eax,%eax)
00000400	movzbl	(%esi),%ecx
00000403	xorl	%eax,%ecx
00000405	movl	g_nRandomValues-0x3e7(%edx,%ecx,4),%ecx
0000040c	addl	$0x02,%esi
0000040f	addl	$0xfe,%edi
00000412	testl	%edi,%edi
00000414	je	0x00000428
00000416	movzbl	0xff(%esi),%eax
0000041a	xorl	%ecx,%eax
0000041c	movl	g_nRandomValues-0x3e7(%edx,%eax,4),%eax
00000423	cmpl	$0x01,%edi
00000426	jne	0x00000400
00000428	shll	$0x08,%eax
0000042b	orl	%ecx,%eax
0000042d	popl	%esi
0000042e	popl	%edi
0000042f	ret
MurmurHash2(void const*, int, unsigned int):
00000430	pushl	%ebp
00000431	pushl	%ebx
00000432	pushl	%edi
00000433	pushl	%esi
00000434	pushl	%eax
00000435	movl	0x1c(%esp),%esi
00000439	movl	0x20(%esp),%eax
0000043d	xorl	%esi,%eax
0000043f	movl	0x18(%esp),%ecx
00000443	cmpl	$0x04,%esi
00000446	jge	0x0000044c
00000448	movl	%esi,%edx
0000044a	jmp	0x00000490
0000044c	leal	0xfc(%esi),%edx
0000044f	movl	%edx,%edi
00000451	andl	$0xfc,%edi
00000454	leal	0x04(%edi),%ebx
00000457	movl	%ebx,(%esp)
0000045a	movl	%ecx,%ebp
0000045c	nopl	HashString(char const*)(%eax)
00000460	imull	$0x5bd1e995,HashString(char const*)(%ebp),%ecx
00000467	movl	%ecx,%ebx
00000469	shrl	$0x18,%ebx
0000046c	xorl	%ecx,%ebx
0000046e	imull	$0x5bd1e995,%ebx,%ecx
00000474	imull	$0x5bd1e995,%eax,%eax
0000047a	xorl	%ecx,%eax
0000047c	addl	$0x04,%ebp
0000047f	addl	$0xfc,%esi
00000482	cmpl	$0x03,%esi
00000485	jg	0x00000460
00000487	movl	0x18(%esp),%ecx
0000048b	addl	(%esp),%ecx
0000048e	subl	%edi,%edx
00000490	cmpl	$0x01,%edx
00000493	je	0x000004b5
00000495	cmpl	$0x02,%edx
00000498	jne	0x0000049e
0000049a	movl	%eax,%edx
0000049c	jmp	0x000004ac
0000049e	cmpl	$0x03,%edx
000004a1	jne	0x000004c0
000004a3	movzbl	0x02(%ecx),%edx
000004a7	shll	$0x10,%edx
000004aa	xorl	%eax,%edx
000004ac	movzbl	0x01(%ecx),%eax
000004b0	shll	$0x08,%eax
000004b3	xorl	%edx,%eax
000004b5	movzbl	(%ecx),%ecx
000004b8	xorl	%eax,%ecx
000004ba	imull	$0x5bd1e995,%ecx,%eax
000004c0	movl	%eax,%ecx
000004c2	shrl	$0x0d,%ecx
000004c5	xorl	%eax,%ecx
000004c7	imull	$0x5bd1e995,%ecx,%ecx
000004cd	movl	%ecx,%eax
000004cf	shrl	$0x0f,%eax
000004d2	xorl	%ecx,%eax
000004d4	addl	$0x04,%esp
000004d7	popl	%esi
000004d8	popl	%edi
000004d9	popl	%ebx
000004da	popl	%ebp
000004db	ret
000004dc	nopl	HashString(char const*)(%eax)
MurmurHash2LowerCase(char const*, unsigned int):
000004e0	pushl	%ebp
000004e1	movl	%esp,%ebp
000004e3	pushl	%ebx
000004e4	pushl	%edi
000004e5	pushl	%esi
000004e6	subl	$0x1c,%esp
000004e9	calll	0x000004ee
000004ee	popl	%eax
000004ef	movl	0x294e-0x4ee(%eax),%eax
000004f5	movl	%eax,0xec(%ebp)
000004f8	movl	(%eax),%eax
000004fa	movl	%eax,0xf0(%ebp)
000004fd	subl	$0x10,%esp
00000500	movl	0x08(%ebp),%eax
00000503	movl	%eax,(%esp)
00000506	calll	_strlen
0000050b	addl	$0x10,%esp
0000050e	leal	0x10(%eax),%ecx
00000511	andl	$0xf0,%ecx
00000514	movl	%esp,%edx
00000516	subl	%ecx,%edx
00000518	movl	%edx,%ecx
0000051a	movl	%ecx,%esp
0000051c	movl	0x0c(%ebp),%esi
0000051f	testl	%eax,%eax
00000521	jle	0x000005e1
00000527	xorl	%edx,%edx
00000529	nopl	HashString(char const*)(%eax)
00000530	movl	%ecx,%edi
00000532	movl	0x08(%ebp),%ecx
00000535	movb	(%ecx,%edx),%cl
00000538	movb	%cl,%bl
0000053a	addb	$0x20,%bl
0000053d	movb	%cl,%bh
0000053f	addb	$0xbf,%bh
00000542	cmpb	$0x1a,%bh
00000545	jb	0x00000549
00000547	movb	%cl,%bl
00000549	movl	%edi,%ecx
0000054b	movb	%bl,(%ecx,%edx)
0000054e	incl	%edx
0000054f	cmpl	%edx,%eax
00000551	jne	0x00000530
00000553	xorl	%eax,%esi
00000555	cmpl	$0x04,%eax
00000558	jl	0x000005a2
0000055a	leal	0xfc(%eax),%edx
0000055d	movl	%edx,0xe8(%ebp)
00000560	andl	$0xfc,%edx
00000563	movl	%edx,0xe4(%ebp)
00000566	movl	%ecx,%edx
00000568	nopl	HashString(char const*)(%eax,%eax)
00000570	imull	$0x5bd1e995,(%edx),%ebx
00000576	movl	%ebx,%edi
00000578	shrl	$0x18,%edi
0000057b	xorl	%ebx,%edi
0000057d	imull	$0x5bd1e995,%edi,%edi
00000583	imull	$0x5bd1e995,%esi,%esi
00000589	xorl	%edi,%esi
0000058b	addl	$0x04,%edx
0000058e	addl	$0xfc,%eax
00000591	cmpl	$0x03,%eax
00000594	jg	0x00000570
00000596	movl	0xe4(%ebp),%edx
00000599	leal	0x04(%edx,%ecx),%ecx
0000059d	movl	0xe8(%ebp),%eax
000005a0	subl	%edx,%eax
000005a2	cmpl	$0x01,%eax
000005a5	je	0x000005c7
000005a7	cmpl	$0x02,%eax
000005aa	jne	0x000005b0
000005ac	movl	%esi,%eax
000005ae	jmp	0x000005be
000005b0	cmpl	$0x03,%eax
000005b3	jne	0x000005d2
000005b5	movzbl	0x02(%ecx),%eax
000005b9	shll	$0x10,%eax
000005bc	xorl	%esi,%eax
000005be	movzbl	0x01(%ecx),%esi
000005c2	shll	$0x08,%esi
000005c5	xorl	%eax,%esi
000005c7	movzbl	(%ecx),%eax
000005ca	xorl	%esi,%eax
000005cc	imull	$0x5bd1e995,%eax,%esi
000005d2	movl	0xec(%ebp),%eax
000005d5	movl	(%eax),%eax
000005d7	cmpl	0xf0(%ebp),%eax
000005da	je	0x000005e5
000005dc	calll	___stack_chk_fail
000005e1	xorl	%eax,%esi
000005e3	jmp	0x000005a2
000005e5	movl	%esi,%eax
000005e7	shrl	$0x0d,%eax
000005ea	xorl	%esi,%eax
000005ec	imull	$0x5bd1e995,%eax,%ecx
000005f2	movl	%ecx,%eax
000005f4	shrl	$0x0f,%eax
000005f7	xorl	%ecx,%eax
000005f9	leal	0xf4(%ebp),%esp
000005fc	popl	%esi
000005fd	popl	%edi
000005fe	popl	%ebx
000005ff	popl	%ebp
00000600	ret
00000601	nopl	%cs:HashString(char const*)(%eax,%eax)
MurmurHash64(void const*, int, unsigned int):
00000610	pushl	%ebp
00000611	pushl	%ebx
00000612	pushl	%edi
00000613	pushl	%esi
00000614	subl	$0x08,%esp
00000617	movl	0x20(%esp),%edi
0000061b	movl	0x24(%esp),%eax
0000061f	xorl	%edi,%eax
00000621	xorl	%ecx,%ecx
00000623	movl	0x1c(%esp),%ebx
00000627	cmpl	$0x08,%edi
0000062a	jge	0x00000632
0000062c	movl	%ebx,%ebp
0000062e	movl	%edi,%esi
00000630	jmp	0x00000699
00000632	leal	0xf8(%edi),%esi
00000635	movl	%esi,%ecx
00000637	andl	$0xf8,%ecx
0000063a	movl	%ecx,(%esp)
0000063d	leal	0x08(%ecx,%ebx),%ecx
00000641	movl	%ecx,0x04(%esp)
00000645	addl	$0x04,%ebx
00000648	xorl	%ecx,%ecx
0000064a	nopw	HashString(char const*)(%eax,%eax)
00000650	imull	$0x5bd1e995,(%ebx),%ebp
00000656	movl	%ebp,%edx
00000658	shrl	$0x18,%edx
0000065b	xorl	%ebp,%edx
0000065d	imull	$0x5bd1e995,%edx,%edx
00000663	imull	$0x5bd1e995,%ecx,%ecx
00000669	xorl	%edx,%ecx
0000066b	imull	$0x5bd1e995,0xfc(%ebx),%ebp
00000672	movl	%ebp,%edx
00000674	shrl	$0x18,%edx
00000677	xorl	%ebp,%edx
00000679	imull	$0x5bd1e995,%edx,%edx
0000067f	imull	$0x5bd1e995,%eax,%eax
00000685	xorl	%edx,%eax
00000687	addl	$0x08,%ebx
0000068a	addl	$0xf8,%edi
0000068d	cmpl	$0x07,%edi
00000690	jg	0x00000650
00000692	subl	(%esp),%esi
00000695	movl	0x04(%esp),%ebp
00000699	cmpl	$0x04,%esi
0000069c	jl	0x000006c0
0000069e	imull	$0x5bd1e995,HashString(char const*)(%ebp),%ebx
000006a5	movl	%ebx,%edi
000006a7	shrl	$0x18,%edi
000006aa	xorl	%ebx,%edi
000006ac	imull	$0x5bd1e995,%edi,%edx
000006b2	imull	$0x5bd1e995,%eax,%eax
000006b8	xorl	%edx,%eax
000006ba	addl	$0xfc,%esi
000006bd	addl	$0x04,%ebp
000006c0	cmpl	$0x01,%esi
000006c3	je	0x000006d1
000006c5	cmpl	$0x03,%esi
000006c8	je	0x000006d5
000006ca	cmpl	$0x02,%esi
000006cd	je	0x000006de
000006cf	jmp	0x000006f3
000006d1	movl	%ecx,%esi
000006d3	jmp	0x000006e7
000006d5	movzbl	0x02(%ebp),%edx
000006d9	shll	$0x10,%edx
000006dc	xorl	%edx,%ecx
000006de	movzbl	0x01(%ebp),%esi
000006e2	shll	$0x08,%esi
000006e5	xorl	%ecx,%esi
000006e7	movzbl	HashString(char const*)(%ebp),%ecx
000006eb	xorl	%esi,%ecx
000006ed	imull	$0x5bd1e995,%ecx,%ecx
000006f3	movl	%ecx,%edx
000006f5	shrl	$0x12,%edx
000006f8	xorl	%eax,%edx
000006fa	imull	$0x5bd1e995,%edx,%edx
00000700	movl	%edx,%eax
00000702	shrl	$0x16,%eax
00000705	xorl	%ecx,%eax
00000707	imull	$0x5bd1e995,%eax,%eax
0000070d	movl	%eax,%ecx
0000070f	shrl	$0x11,%ecx
00000712	xorl	%edx,%ecx
00000714	imull	$0x5bd1e995,%ecx,%edx
0000071a	movl	%edx,%ecx
0000071c	shrl	$0x13,%ecx
0000071f	xorl	%eax,%ecx
00000721	imull	$0x5bd1e995,%ecx,%eax
00000727	addl	$0x08,%esp
0000072a	popl	%esi
0000072b	popl	%edi
0000072c	popl	%ebx
0000072d	popl	%ebp
0000072e	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(ilocalize.o):
(__TEXT,__text) section
ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int):
00000000	jmp	V_UTF8ToUnicode(char const*, wchar_t*, int)
00000005	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConvertUnicodeToANSI(wchar_t const*, char*, int):
00000010	jmp	V_UnicodeToUTF8(wchar_t const*, char*, int)
00000015	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringVArgsInternal(char*, int, char const*, int, char*):
00000020	jmp	void ConstructStringVArgsInternal_Impl<char>(char*, int, char const*, int, char*)
00000025	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringVArgsInternal(wchar_t*, int, wchar_t const*, int, char*):
00000030	jmp	void ConstructStringVArgsInternal_Impl<wchar_t>(wchar_t*, int, wchar_t const*, int, char*)
00000035	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
char const* GetTypedKeyValuesString<char>(KeyValues*, char const*):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	subl	$0x18,%esp
00000046	calll	0x0000004b
0000004b	popl	%eax
0000004c	leal	0x697e-0x4b(%eax),%eax
00000052	movl	%eax,0x08(%esp)
00000056	movl	0x0c(%ebp),%eax
00000059	movl	%eax,0x04(%esp)
0000005d	movl	0x08(%ebp),%eax
00000060	movl	%eax,(%esp)
00000063	calll	KeyValues::GetString(char const*, char const*)
00000068	addl	$0x18,%esp
0000006b	popl	%ebp
0000006c	ret
0000006d	nopl	(%eax)
wchar_t const* GetTypedKeyValuesString<wchar_t>(KeyValues*, char const*):
00000070	pushl	%ebp
00000071	movl	%esp,%ebp
00000073	subl	$0x18,%esp
00000076	calll	0x0000007b
0000007b	popl	%eax
0000007c	leal	0x69cc-0x7b(%eax),%eax
00000082	movl	%eax,0x08(%esp)
00000086	movl	0x0c(%ebp),%eax
00000089	movl	%eax,0x04(%esp)
0000008d	movl	0x08(%ebp),%eax
00000090	movl	%eax,(%esp)
00000093	calll	KeyValues::GetWString(char const*, wchar_t const*)
00000098	addl	$0x18,%esp
0000009b	popl	%ebp
0000009c	ret
0000009d	nopl	(%eax)
ILocalize::ConstructStringKeyValuesInternal(char*, int, char const*, KeyValues*):
000000a0	jmp	void ConstructStringKeyValuesInternal_Impl<char>(char*, int, char const*, KeyValues*)
000000a5	nopl	%cs:ILocalize::ConvertANSIToUnicode(char const*, wchar_t*, int)(%eax,%eax)
ILocalize::ConstructStringKeyValuesInternal(wchar_t*, int, wchar_t const*, KeyValues*):
000000b0	jmp	void ConstructStringKeyValuesInternal_Impl<wchar_t>(wchar_t*, int, wchar_t const*, KeyValues*)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(interface.o):
(__TEXT,__text) section
InterfaceReg::InterfaceReg(void* (*)(), char const*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x0c(%esp),%edx
0000000a	movl	0x04(%esp),%ecx
0000000e	movl	%edx,0x04(%ecx)
00000011	movl	0x08(%esp),%edx
00000015	movl	%edx,(%ecx)
00000017	movl	InterfaceReg::s_pInterfaceRegs-0x5(%eax),%edx
0000001d	movl	%edx,0x08(%ecx)
00000020	movl	%ecx,InterfaceReg::s_pInterfaceRegs-0x5(%eax)
00000026	ret
00000027	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
InterfaceReg::InterfaceReg(void* (*)(), char const*):
00000030	calll	0x00000035
00000035	popl	%eax
00000036	movl	0x0c(%esp),%edx
0000003a	movl	0x04(%esp),%ecx
0000003e	movl	%edx,0x04(%ecx)
00000041	movl	0x08(%esp),%edx
00000045	movl	%edx,(%ecx)
00000047	movl	InterfaceReg::s_pInterfaceRegs-0x35(%eax),%edx
0000004d	movl	%edx,0x08(%ecx)
00000050	movl	%ecx,InterfaceReg::s_pInterfaceRegs-0x35(%eax)
00000056	ret
00000057	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CreateInterfaceInternal(char const*, int*):
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%ebx
00000064	pushl	%edi
00000065	pushl	%esi
00000066	subl	$0x0c,%esp
00000069	calll	0x0000006e
0000006e	popl	%eax
0000006f	leal	InterfaceReg::s_pInterfaceRegs-0x6e(%eax),%edi
00000075	movl	0x0c(%ebp),%esi
00000078	movl	0x08(%ebp),%ebx
0000007b	jmp	0x00000083
0000007d	nopl	(%eax)
00000080	addl	$0x08,%edi
00000083	movl	(%edi),%edi
00000085	testl	%edi,%edi
00000087	je	0x000000b1
00000089	movl	0x04(%edi),%eax
0000008c	movl	%ebx,0x04(%esp)
00000090	movl	%eax,(%esp)
00000093	calll	_strcmp
00000098	testl	%eax,%eax
0000009a	jne	0x00000080
0000009c	testl	%esi,%esi
0000009e	je	0x000000a6
000000a0	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esi)
000000a6	movl	(%edi),%eax
000000a8	addl	$0x0c,%esp
000000ab	popl	%esi
000000ac	popl	%edi
000000ad	popl	%ebx
000000ae	popl	%ebp
000000af	jmp	*%eax
000000b1	testl	%esi,%esi
000000b3	je	0x000000bb
000000b5	movl	$0x00000001,(%esi)
000000bb	xorl	%eax,%eax
000000bd	addl	$0x0c,%esp
000000c0	popl	%esi
000000c1	popl	%edi
000000c2	popl	%ebx
000000c3	popl	%ebp
000000c4	ret
000000c5	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
_CreateInterface:
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%ebx
000000d4	pushl	%edi
000000d5	pushl	%esi
000000d6	subl	$0x0c,%esp
000000d9	calll	0x000000de
000000de	popl	%eax
000000df	leal	InterfaceReg::s_pInterfaceRegs-0xde(%eax),%edi
000000e5	movl	0x0c(%ebp),%esi
000000e8	movl	0x08(%ebp),%ebx
000000eb	jmp	0x000000f3
000000ed	nopl	(%eax)
000000f0	addl	$0x08,%edi
000000f3	movl	(%edi),%edi
000000f5	testl	%edi,%edi
000000f7	je	0x00000121
000000f9	movl	0x04(%edi),%eax
000000fc	movl	%ebx,0x04(%esp)
00000100	movl	%eax,(%esp)
00000103	calll	_strcmp
00000108	testl	%eax,%eax
0000010a	jne	0x000000f0
0000010c	testl	%esi,%esi
0000010e	je	0x00000116
00000110	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esi)
00000116	movl	(%edi),%eax
00000118	addl	$0x0c,%esp
0000011b	popl	%esi
0000011c	popl	%edi
0000011d	popl	%ebx
0000011e	popl	%ebp
0000011f	jmp	*%eax
00000121	testl	%esi,%esi
00000123	je	0x0000012b
00000125	movl	$0x00000001,(%esi)
0000012b	xorl	%eax,%eax
0000012d	addl	$0x0c,%esp
00000130	popl	%esi
00000131	popl	%edi
00000132	popl	%ebx
00000133	popl	%ebp
00000134	ret
00000135	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
GetModuleHandle(char const*):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	calll	0x0000014d
0000014d	popl	%edi
0000014e	xorl	%esi,%esi
00000150	movl	0x08(%ebp),%eax
00000153	testl	%eax,%eax
00000155	je	0x00000190
00000157	movl	%eax,(%esp)
0000015a	movl	$0x00000002,0x04(%esp)
00000162	calll	_dlopen
00000167	movl	%eax,%esi
00000169	testl	%esi,%esi
0000016b	jne	0x00000188
0000016d	calll	_dlerror
00000172	movl	%eax,0x04(%esp)
00000176	leal	0x2b88-0x14d(%edi),%eax
0000017c	movl	%eax,(%esp)
0000017f	calll	_printf
00000184	xorl	%esi,%esi
00000186	jmp	0x00000190
00000188	movl	%esi,(%esp)
0000018b	calll	_dlclose
00000190	movl	%esi,%eax
00000192	addl	$0x10,%esp
00000195	popl	%esi
00000196	popl	%edi
00000197	popl	%ebp
00000198	ret
00000199	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_IsDebuggerPresent():
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	subl	$0x08,%esp
000001a6	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esp)
000001ad	calll	_Plat_IsInDebugSession
000001b2	movzbl	%al,%eax
000001b5	addl	$0x08,%esp
000001b8	popl	%ebp
000001b9	ret
000001ba	nopw	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
Sys_LoadLibrary(char const*, Sys_Flags):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%ebx
000001c4	pushl	%edi
000001c5	pushl	%esi
000001c6	subl	$0x0000041c,%esp
000001cc	calll	0x000001d1
000001d1	popl	%ebx
000001d2	movl	0x3714-0x1d1(%ebx),%eax
000001d8	movl	%eax,0xfffffbec(%ebp)
000001de	movl	(%eax),%eax
000001e0	movl	%eax,0xf0(%ebp)
000001e3	leal	0x2b99-0x1d1(%ebx),%eax
000001e9	movl	%eax,(%esp)
000001ec	calll	V_GetFileExtension(char const*)
000001f1	movl	0x08(%ebp),%ecx
000001f4	movl	%ecx,0x04(%esp)
000001f8	leal	0xfffffbf0(%ebp),%esi
000001fe	movl	%esi,(%esp)
00000201	movl	$0x00000400,0x08(%esp)
00000209	testl	%eax,%eax
0000020b	leal	0xff(%eax),%edi
0000020e	leal	0x2b99-0x1d1(%ebx),%eax
00000214	cmovel	%eax,%edi
00000217	calll	V_strncpy(char*, char const*, int)
0000021c	movl	%edi,0x04(%esp)
00000220	movl	%esi,(%esp)
00000223	movl	$0x00000400,0x08(%esp)
0000022b	calll	V_SetExtension(char*, char const*, int)
00000230	movl	%esi,(%esp)
00000233	movl	$0x0000002f,0x04(%esp)
0000023b	calll	V_FixSlashes(char*, char)
00000240	movl	0x0c(%ebp),%edi
00000243	andl	$0x01,%edi
00000246	movl	%edi,%eax
00000248	shll	$0x04,%eax
0000024b	orl	$0x02,%eax
0000024e	movl	%eax,0x04(%esp)
00000252	movl	%esi,(%esp)
00000255	calll	_dlopen
0000025a	movl	%eax,%esi
0000025c	testl	%esi,%esi
0000025e	jne	0x000002b7
00000260	testl	%edi,%edi
00000262	jne	0x000002b7
00000264	calll	_dlerror
00000269	movl	%eax,%edi
0000026b	testl	%edi,%edi
0000026d	je	0x000002b7
0000026f	leal	0x2ba0-0x1d1(%ebx),%eax
00000275	movl	%eax,0x04(%esp)
00000279	movl	%edi,(%esp)
0000027c	calll	_strstr
00000281	testl	%eax,%eax
00000283	jne	0x000002b7
00000285	leal	0x2bad-0x1d1(%ebx),%eax
0000028b	movl	%eax,0x04(%esp)
0000028f	movl	%edi,(%esp)
00000292	calll	_strstr
00000297	testl	%eax,%eax
00000299	jne	0x000002b7
0000029b	movl	%edi,0x08(%esp)
0000029f	leal	0xfffffbf0(%ebp),%eax
000002a5	movl	%eax,0x04(%esp)
000002a9	leal	0x2bbd-0x1d1(%ebx),%eax
000002af	movl	%eax,(%esp)
000002b2	calll	_Msg
000002b7	movl	0xfffffbec(%ebp),%eax
000002bd	movl	(%eax),%eax
000002bf	cmpl	0xf0(%ebp),%eax
000002c2	jne	0x000002d1
000002c4	movl	%esi,%eax
000002c6	addl	$0x0000041c,%esp
000002cc	popl	%esi
000002cd	popl	%edi
000002ce	popl	%ebx
000002cf	popl	%ebp
000002d0	ret
000002d1	calll	___stack_chk_fail
000002d6	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
Sys_LoadModule(char const*, Sys_Flags):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%ebx
000002e4	pushl	%edi
000002e5	pushl	%esi
000002e6	subl	$0x0000081c,%esp
000002ec	calll	0x000002f1
000002f1	popl	%ebx
000002f2	movl	0x3714-0x2f1(%ebx),%eax
000002f8	movl	%eax,0xfffff7ec(%ebp)
000002fe	movl	(%eax),%eax
00000300	movl	%eax,0xf0(%ebp)
00000303	movl	0x08(%ebp),%eax
00000306	movl	%eax,(%esp)
00000309	calll	V_IsAbsolutePath(char const*)
0000030e	movl	0x0c(%ebp),%edi
00000311	testb	%al,%al
00000313	jne	0x000003e9
00000319	leal	0xfffffbf0(%ebp),%edi
0000031f	movl	%edi,(%esp)
00000322	movl	$0x00000400,0x04(%esp)
0000032a	calll	_getcwd
0000032f	movl	%edi,(%esp)
00000332	calll	_strlen
00000337	movb	0xff(%eax,%edi),%al
0000033b	cmpb	$0x2f,%al
0000033d	je	0x00000343
0000033f	cmpb	$0x5c,%al
00000341	jne	0x00000350
00000343	movl	%edi,(%esp)
00000346	calll	_strlen
0000034b	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0xff(%eax,%edi)
00000350	movl	%edi,(%esp)
00000353	calll	_strlen
00000358	movl	%eax,%esi
0000035a	leal	0x2bdc-0x2f1(%ebx),%eax
00000360	movl	%eax,0x04(%esp)
00000364	movl	0x08(%ebp),%eax
00000367	movl	%eax,(%esp)
0000036a	movl	$0x00000004,0x08(%esp)
00000372	calll	_strncmp
00000377	testl	%eax,%eax
00000379	je	0x00000390
0000037b	cmpb	$0x6e,0xff(%esi,%edi)
00000380	jne	0x000003a3
00000382	cmpb	$0x69,0xfe(%esi,%edi)
00000387	jne	0x000003a3
00000389	cmpb	$0x62,0xfd(%esi,%edi)
0000038e	jne	0x000003a3
00000390	movl	0x08(%ebp),%eax
00000393	movl	%eax,0x10(%esp)
00000397	movl	%edi,0x0c(%esp)
0000039b	leal	0x2be1-0x2f1(%ebx),%eax
000003a1	jmp	0x000003b4
000003a3	movl	0x08(%ebp),%eax
000003a6	movl	%eax,0x10(%esp)
000003aa	movl	%edi,0x0c(%esp)
000003ae	leal	0x2be7-0x2f1(%ebx),%eax
000003b4	movl	%eax,0x08(%esp)
000003b8	leal	0xfffff7f0(%ebp),%eax
000003be	movl	%eax,(%esp)
000003c1	movl	$0x00000400,0x04(%esp)
000003c9	calll	V_snprintf(char*, int, char const*, ...)
000003ce	movl	0x0c(%ebp),%edi
000003d1	movl	%edi,0x04(%esp)
000003d5	leal	0xfffff7f0(%ebp),%eax
000003db	movl	%eax,(%esp)
000003de	calll	Sys_LoadLibrary(char const*, Sys_Flags)
000003e3	movl	%eax,%esi
000003e5	testl	%esi,%esi
000003e7	jne	0x000003fa
000003e9	movl	%edi,0x04(%esp)
000003ed	movl	0x08(%ebp),%eax
000003f0	movl	%eax,(%esp)
000003f3	calll	Sys_LoadLibrary(char const*, Sys_Flags)
000003f8	movl	%eax,%esi
000003fa	leal	0x2bf1-0x2f1(%ebx),%eax
00000400	movl	%eax,0x04(%esp)
00000404	movl	%esi,(%esp)
00000407	calll	_dlsym
0000040c	testl	%eax,%eax
0000040e	je	0x0000047a
00000410	testl	%esi,%esi
00000412	je	0x00000454
00000414	calll	_CommandLine_Tier0
00000419	movl	(%eax),%ecx
0000041b	leal	0x2bfc-0x2f1(%ebx),%edx
00000421	movl	%edx,0x04(%esp)
00000425	movl	%eax,(%esp)
00000428	call	*0x28(%ecx)
0000042b	testl	%eax,%eax
0000042d	jne	0x00000454
0000042f	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),(%esp)
00000436	calll	_Plat_IsInDebugSession
0000043b	testb	%al,%al
0000043d	jne	0x00000454
0000043f	movl	0x08(%ebp),%eax
00000442	movl	%eax,0x04(%esp)
00000446	leal	0x2c08-0x2f1(%ebx),%eax
0000044c	movl	%eax,(%esp)
0000044f	calll	_Error
00000454	movl	0x08(%ebp),%eax
00000457	movl	%eax,0x04(%esp)
0000045b	leal	0x2c08-0x2f1(%ebx),%eax
00000461	movl	%eax,(%esp)
00000464	calll	DevWarning(char const*, ...)
00000469	movb	__ZL26s_bRunningWithDebugModules.b-0x2f1(%ebx),%al
0000046f	testb	%al,%al
00000471	jne	0x0000047a
00000473	movb	$0x01,__ZL26s_bRunningWithDebugModules.b-0x2f1(%ebx)
0000047a	movl	0xfffff7ec(%ebp),%eax
00000480	movl	(%eax),%eax
00000482	cmpl	0xf0(%ebp),%eax
00000485	jne	0x00000494
00000487	movl	%esi,%eax
00000489	addl	$0x0000081c,%esp
0000048f	popl	%esi
00000490	popl	%edi
00000491	popl	%ebx
00000492	popl	%ebp
00000493	ret
00000494	calll	___stack_chk_fail
00000499	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_RunningWithDebugModules():
000004a0	calll	0x000004a5
000004a5	popl	%eax
000004a6	movzbl	__ZL26s_bRunningWithDebugModules.b-0x4a5(%eax),%eax
000004ad	ret
000004ae	nop
Sys_UnloadModule(CSysModule*):
000004b0	movl	0x04(%esp),%eax
000004b4	testl	%eax,%eax
000004b6	jne	0x000004b9
000004b8	ret
000004b9	jmp	_dlclose
000004be	nop
Sys_GetFactory(CSysModule*):
000004c0	pushl	%ebp
000004c1	movl	%esp,%ebp
000004c3	subl	$0x08,%esp
000004c6	calll	0x000004cb
000004cb	popl	%ecx
000004cc	movl	0x08(%ebp),%eax
000004cf	testl	%eax,%eax
000004d1	jne	0x000004d7
000004d3	xorl	%eax,%eax
000004d5	jmp	0x000004e9
000004d7	leal	0x2c24-0x4cb(%ecx),%ecx
000004dd	movl	%ecx,0x04(%esp)
000004e1	movl	%eax,(%esp)
000004e4	calll	_dlsym
000004e9	addl	$0x08,%esp
000004ec	popl	%ebp
000004ed	ret
000004ee	nop
Sys_GetFactoryThis():
000004f0	calll	0x000004f5
000004f5	popl	%eax
000004f6	leal	CreateInterfaceInternal(char const*, int*)-0x4f5(%eax),%eax
000004fc	ret
000004fd	nopl	(%eax)
Sys_GetFactory(char const*):
00000500	pushl	%ebp
00000501	movl	%esp,%ebp
00000503	pushl	%edi
00000504	pushl	%esi
00000505	subl	$0x10,%esp
00000508	calll	0x0000050d
0000050d	popl	%edi
0000050e	xorl	%esi,%esi
00000510	movl	0x08(%ebp),%eax
00000513	testl	%eax,%eax
00000515	je	0x00000550
00000517	movl	%eax,(%esp)
0000051a	movl	$0x00000002,0x04(%esp)
00000522	calll	_dlopen
00000527	movl	%eax,%esi
00000529	testl	%esi,%esi
0000052b	jne	0x00000548
0000052d	calll	_dlerror
00000532	movl	%eax,0x04(%esp)
00000536	leal	0x2b88-0x50d(%edi),%eax
0000053c	movl	%eax,(%esp)
0000053f	calll	_printf
00000544	xorl	%esi,%esi
00000546	jmp	0x00000550
00000548	movl	%esi,(%esp)
0000054b	calll	_dlclose
00000550	leal	0x2c24-0x50d(%edi),%eax
00000556	movl	%eax,0x04(%esp)
0000055a	movl	%esi,(%esp)
0000055d	calll	_dlsym
00000562	addl	$0x10,%esp
00000565	popl	%esi
00000566	popl	%edi
00000567	popl	%ebp
00000568	ret
00000569	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax)
Sys_LoadInterface(char const*, char const*, CSysModule**, void**):
00000570	pushl	%ebp
00000571	movl	%esp,%ebp
00000573	pushl	%edi
00000574	pushl	%esi
00000575	subl	$0x10,%esp
00000578	calll	0x0000057d
0000057d	popl	%edi
0000057e	movl	0x08(%ebp),%eax
00000581	movl	%eax,(%esp)
00000584	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
0000058c	calll	Sys_LoadModule(char const*, Sys_Flags)
00000591	movl	%eax,%esi
00000593	xorb	%al,%al
00000595	testl	%esi,%esi
00000597	je	0x000005e1
00000599	leal	0x2c24-0x57d(%edi),%eax
0000059f	movl	%eax,0x04(%esp)
000005a3	movl	%esi,(%esp)
000005a6	calll	_dlsym
000005ab	testl	%eax,%eax
000005ad	jne	0x000005bb
000005af	movl	%esi,(%esp)
000005b2	calll	_dlclose
000005b7	xorb	%al,%al
000005b9	jmp	0x000005e1
000005bb	movl	0x14(%ebp),%edi
000005be	movl	0x0c(%ebp),%ecx
000005c1	movl	%ecx,(%esp)
000005c4	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
000005cc	call	*%eax
000005ce	movl	%eax,(%edi)
000005d0	testl	%eax,%eax
000005d2	je	0x000005af
000005d4	movl	0x10(%ebp),%ecx
000005d7	movb	$0x01,%al
000005d9	testl	%ecx,%ecx
000005db	je	0x000005e1
000005dd	movl	%esi,(%ecx)
000005df	movb	$0x01,%al
000005e1	movzbl	%al,%eax
000005e4	addl	$0x10,%esp
000005e7	popl	%esi
000005e8	popl	%edi
000005e9	popl	%ebp
000005ea	ret
000005eb	nopl	InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::CDllDemandLoader(char const*):
000005f0	calll	0x000005f5
000005f5	popl	%eax
000005f6	leal	vtable for CDllDemandLoader-0x5f5+0x00000008(%eax),%ecx
000005fc	movl	0x04(%esp),%eax
00000600	movl	%ecx,(%eax)
00000602	movl	0x08(%esp),%ecx
00000606	movl	%ecx,0x04(%eax)
00000609	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%eax)
00000610	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x0c(%eax)
00000614	ret
00000615	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::CDllDemandLoader(char const*):
00000620	calll	0x00000625
00000625	popl	%eax
00000626	leal	vtable for CDllDemandLoader-0x625+0x00000008(%eax),%ecx
0000062c	movl	0x04(%esp),%eax
00000630	movl	%ecx,(%eax)
00000632	movl	0x08(%esp),%ecx
00000636	movl	%ecx,0x04(%eax)
00000639	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%eax)
00000640	movb	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x0c(%eax)
00000644	ret
00000645	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	pushl	%edi
00000654	pushl	%esi
00000655	subl	$0x10,%esp
00000658	calll	0x0000065d
0000065d	popl	%eax
0000065e	leal	vtable for CDllDemandLoader-0x65d+0x00000008(%eax),%eax
00000664	movl	0x08(%ebp),%edi
00000667	movl	%eax,(%edi)
00000669	movl	0x08(%edi),%eax
0000066c	testl	%eax,%eax
0000066e	je	0x00000678
00000670	movl	%eax,(%esp)
00000673	calll	_dlclose
00000678	addl	$0x10,%esp
0000067b	popl	%esi
0000067c	popl	%edi
0000067d	popl	%ebp
0000067e	jmp	operator delete(void*)
00000683	movl	%eax,%esi
00000685	movl	%edi,(%esp)
00000688	calll	operator delete(void*)
0000068d	movl	%esi,(%esp)
00000690	calll	__Unwind_Resume
00000695	nopl	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
000006a0	pushl	%ebp
000006a1	movl	%esp,%ebp
000006a3	pushl	%esi
000006a4	pushl	%eax
000006a5	calll	0x000006aa
000006aa	popl	%eax
000006ab	leal	vtable for CDllDemandLoader-0x6aa+0x00000008(%eax),%eax
000006b1	movl	0x08(%ebp),%esi
000006b4	movl	%eax,(%esi)
000006b6	movl	0x08(%esi),%eax
000006b9	testl	%eax,%eax
000006bb	je	0x000006cc
000006bd	movl	%eax,(%esp)
000006c0	calll	_dlclose
000006c5	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
000006cc	addl	$0x04,%esp
000006cf	popl	%esi
000006d0	popl	%ebp
000006d1	ret
000006d2	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::~CDllDemandLoader():
000006e0	pushl	%ebp
000006e1	movl	%esp,%ebp
000006e3	pushl	%esi
000006e4	pushl	%eax
000006e5	calll	0x000006ea
000006ea	popl	%eax
000006eb	leal	vtable for CDllDemandLoader-0x6ea+0x00000008(%eax),%eax
000006f1	movl	0x08(%ebp),%esi
000006f4	movl	%eax,(%esi)
000006f6	movl	0x08(%esi),%eax
000006f9	testl	%eax,%eax
000006fb	je	0x0000070c
000006fd	movl	%eax,(%esp)
00000700	calll	_dlclose
00000705	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
0000070c	addl	$0x04,%esp
0000070f	popl	%esi
00000710	popl	%ebp
00000711	ret
00000712	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::Unload():
00000720	pushl	%ebp
00000721	movl	%esp,%ebp
00000723	pushl	%esi
00000724	pushl	%eax
00000725	movl	0x08(%ebp),%esi
00000728	movl	0x08(%esi),%eax
0000072b	testl	%eax,%eax
0000072d	je	0x0000073e
0000072f	movl	%eax,(%esp)
00000732	calll	_dlclose
00000737	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x08(%esi)
0000073e	addl	$0x04,%esp
00000741	popl	%esi
00000742	popl	%ebp
00000743	ret
00000744	nopw	%cs:InterfaceReg::InterfaceReg(void* (*)(), char const*)(%eax,%eax)
CDllDemandLoader::GetFactory():
00000750	pushl	%ebp
00000751	movl	%esp,%ebp
00000753	pushl	%edi
00000754	pushl	%esi
00000755	subl	$0x10,%esp
00000758	calll	0x0000075d
0000075d	popl	%esi
0000075e	movl	0x08(%ebp),%edi
00000761	movl	0x08(%edi),%eax
00000764	testl	%eax,%eax
00000766	jne	0x00000790
00000768	xorl	%ecx,%ecx
0000076a	testb	$0x01,0x0c(%edi)
0000076e	jne	0x000007a4
00000770	movb	$0x01,0x0c(%edi)
00000774	movl	0x04(%edi),%eax
00000777	movl	%eax,(%esp)
0000077a	movl	InterfaceReg::InterfaceReg(void* (*)(), char const*),0x04(%esp)
00000782	calll	Sys_LoadModule(char const*, Sys_Flags)
00000787	movl	%eax,0x08(%edi)
0000078a	xorl	%ecx,%ecx
0000078c	testl	%eax,%eax
0000078e	je	0x000007a4
00000790	leal	0x2c24-0x75d(%esi),%ecx
00000796	movl	%ecx,0x04(%esp)
0000079a	movl	%eax,(%esp)
0000079d	calll	_dlsym
000007a2	movl	%eax,%ecx
000007a4	movl	%ecx,%eax
000007a6	addl	$0x10,%esp
000007a9	popl	%esi
000007aa	popl	%edi
000007ab	popl	%ebp
000007ac	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(KeyValues.o):
(__TEXT,__text) section
KeyValues::GetSymbolForStringClassic(char const*, bool):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	calll	_KeyValuesSystem
0000000b	movl	(%eax),%ecx
0000000d	movb	0x0c(%ebp),%dl
00000010	movzbl	%dl,%edx
00000013	movl	%edx,0x08(%esp)
00000017	movl	0x08(%ebp),%edx
0000001a	movl	%edx,0x04(%esp)
0000001e	movl	%eax,(%esp)
00000021	call	*0x0c(%ecx)
00000024	addl	$0x18,%esp
00000027	popl	%ebp
00000028	ret
00000029	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::GetStringForSymbolClassic(int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	subl	$0x08,%esp
00000036	calll	_KeyValuesSystem
0000003b	movl	(%eax),%ecx
0000003d	movl	0x08(%ebp),%edx
00000040	movl	%edx,0x04(%esp)
00000044	movl	%eax,(%esp)
00000047	call	*0x10(%ecx)
0000004a	addl	$0x08,%esp
0000004d	popl	%ebp
0000004e	ret
0000004f	nop
KeyValues::SetUseGrowableStringTable(bool):
00000050	pushl	%ebp
00000051	movl	%esp,%ebp
00000053	pushl	%edi
00000054	pushl	%esi
00000055	subl	$0x20,%esp
00000058	calll	0x0000005d
0000005d	popl	%edi
0000005e	movb	0x08(%ebp),%al
00000061	cmpb	$0x01,%al
00000063	jne	0x00000135
00000069	leal	KeyValues::GetStringForSymbolGrowable(int)-0x5d(%edi),%eax
0000006f	movl	%eax,KeyValues::s_pfGetStringForSymbol-0x5d(%edi)
00000075	leal	KeyValues::GetSymbolForStringGrowable(char const*, bool)-0x5d(%edi),%eax
0000007b	movl	%eax,KeyValues::s_pfGetSymbolForString-0x5d(%edi)
00000081	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::s_pGrowableStringTable-0x5d(%edi)
0000008b	jne	0x000001c7
00000091	movl	$0x00000048,(%esp)
00000098	calll	operator new(unsigned long)
0000009d	movl	%eax,%esi
0000009f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
000000a5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000000ac	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000000b3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000000ba	leal	0x08(%esi),%eax
000000bd	movl	%eax,0x14(%esp)
000000c1	movl	%eax,0x10(%esp)
000000c5	movl	%esi,%eax
000000c7	addl	$0x10,%eax
000000ca	movl	%eax,(%esp)
000000cd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000000d5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000000dd	movl	$0x00000800,0x04(%esp)
000000e5	calll	CUtlHash<int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&>::CUtlHash(int, int, int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&)
000000ea	movl	$0x00080000,0x38(%esi)
000000f1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
000000f8	movl	$0x00080000,(%esp)
000000ff	calll	_malloc
00000104	movl	%eax,0x34(%esi)
00000107	movl	$0x00000001,0x40(%esi)
0000010e	movl	%eax,0x44(%esi)
00000111	testl	%eax,%eax
00000113	je	0x00000118
00000115	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00000118	movl	%esi,KeyValues::s_pGrowableStringTable-0x5d(%edi)
0000011e	jmp	0x000001c7
00000123	movl	%eax,%edi
00000125	movl	%esi,(%esp)
00000128	calll	operator delete(void*)
0000012d	movl	%edi,(%esp)
00000130	calll	__Unwind_Resume
00000135	leal	KeyValues::GetStringForSymbolClassic(int)-0x5d(%edi),%eax
0000013b	movl	%eax,KeyValues::s_pfGetStringForSymbol-0x5d(%edi)
00000141	leal	KeyValues::GetSymbolForStringClassic(char const*, bool)-0x5d(%edi),%eax
00000147	movl	%eax,KeyValues::s_pfGetSymbolForString-0x5d(%edi)
0000014d	movl	KeyValues::s_pGrowableStringTable-0x5d(%edi),%esi
00000153	testl	%esi,%esi
00000155	je	0x000001bd
00000157	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x40(%esi)
0000015e	movl	0x34(%esi),%eax
00000161	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
00000165	jns	0x0000016c
00000167	movl	%eax,0x44(%esi)
0000016a	jmp	0x000001aa
0000016c	testl	%eax,%eax
0000016e	jne	0x00000180
00000170	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
00000177	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x44(%esi)
0000017e	jmp	0x000001a3
00000180	movl	%eax,(%esp)
00000183	calll	_free
00000188	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x34(%esi)
0000018f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x3c(%esi)
00000193	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
0000019a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x44(%esi)
000001a1	js	0x000001aa
000001a3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x38(%esi)
000001aa	leal	0x10(%esi),%eax
000001ad	movl	%eax,(%esp)
000001b0	calll	CUtlHash<int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&>::~CUtlHash()
000001b5	movl	%esi,(%esp)
000001b8	calll	operator delete(void*)
000001bd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::s_pGrowableStringTable-0x5d(%edi)
000001c7	addl	$0x20,%esp
000001ca	popl	%esi
000001cb	popl	%edi
000001cc	popl	%ebp
000001cd	ret
000001ce	jmp	0x00000123
000001d3	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetStringForSymbolGrowable(int):
000001e0	calll	0x000001e5
000001e5	popl	%eax
000001e6	movl	KeyValues::s_pGrowableStringTable-0x1e5(%eax),%eax
000001ec	movl	0x34(%eax),%eax
000001ef	addl	0x04(%esp),%eax
000001f3	ret
000001f4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetSymbolForStringGrowable(char const*, bool):
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	subl	$0x18,%esp
00000206	calll	0x0000020b
0000020b	popl	%eax
0000020c	movl	KeyValues::s_pGrowableStringTable-0x20b(%eax),%eax
00000212	movb	0x0c(%ebp),%cl
00000215	movzbl	%cl,%ecx
00000218	movl	%ecx,0x08(%esp)
0000021c	movl	0x08(%ebp),%ecx
0000021f	movl	%ecx,0x04(%esp)
00000223	movl	%eax,(%esp)
00000226	calll	CKeyValuesGrowableStringTable::GetSymbolForString(char const*, bool)
0000022b	addl	$0x18,%esp
0000022e	popl	%ebp
0000022f	ret
KeyValues::KeyValues(char const*):
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	pushl	%esi
00000234	subl	$0x14,%esp
00000237	calll	0x0000023c
0000023c	popl	%eax
0000023d	movl	0x08(%ebp),%esi
00000240	movl	$0xffffffff,(%esi)
00000246	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000024d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000254	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000025b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000262	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000269	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000026f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000276	movb	$0x01,0x12(%esi)
0000027a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000027e	movl	0x0c(%ebp),%ecx
00000281	movl	%ecx,(%esp)
00000284	movl	$0x00000001,0x04(%esp)
0000028c	call	*KeyValues::s_pfGetSymbolForString-0x23c(%eax)
00000292	movl	%eax,(%esi)
00000294	addl	$0x14,%esp
00000297	popl	%esi
00000298	popl	%ebp
00000299	ret
0000029a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*):
000002a0	pushl	%ebp
000002a1	movl	%esp,%ebp
000002a3	pushl	%esi
000002a4	subl	$0x14,%esp
000002a7	calll	0x000002ac
000002ac	popl	%eax
000002ad	movl	0x08(%ebp),%esi
000002b0	movl	$0xffffffff,(%esi)
000002b6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000002bd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000002c4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000002cb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000002d2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000002d9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000002df	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000002e6	movb	$0x01,0x12(%esi)
000002ea	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000002ee	movl	0x0c(%ebp),%ecx
000002f1	movl	%ecx,(%esp)
000002f4	movl	$0x00000001,0x04(%esp)
000002fc	call	*KeyValues::s_pfGetSymbolForString-0x2ac(%eax)
00000302	movl	%eax,(%esi)
00000304	addl	$0x14,%esp
00000307	popl	%esi
00000308	popl	%ebp
00000309	ret
0000030a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::Init():
00000310	movl	0x04(%esp),%eax
00000314	movl	$0xffffffff,(%eax)
0000031a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
00000321	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00000328	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%eax)
0000032f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%eax)
00000336	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%eax)
0000033d	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00000343	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%eax)
0000034a	movb	$0x01,0x12(%eax)
0000034e	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%eax)
00000352	ret
00000353	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetName(char const*):
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	subl	$0x08,%esp
00000366	calll	0x0000036b
0000036b	popl	%eax
0000036c	movl	0x0c(%ebp),%ecx
0000036f	movl	%ecx,(%esp)
00000372	movl	$0x00000001,0x04(%esp)
0000037a	call	*KeyValues::s_pfGetSymbolForString-0x36b(%eax)
00000380	movl	0x08(%ebp),%ecx
00000383	movl	%eax,(%ecx)
00000385	addl	$0x08,%esp
00000388	popl	%ebp
00000389	ret
0000038a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*):
00000390	pushl	%ebp
00000391	movl	%esp,%ebp
00000393	pushl	%esi
00000394	subl	$0x14,%esp
00000397	calll	0x0000039c
0000039c	popl	%eax
0000039d	movl	0x08(%ebp),%esi
000003a0	movl	$0xffffffff,(%esi)
000003a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000003ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000003b4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000003bb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000003c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000003c9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000003cf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000003d6	movb	$0x01,0x12(%esi)
000003da	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000003de	movl	0x0c(%ebp),%ecx
000003e1	movl	%ecx,(%esp)
000003e4	movl	$0x00000001,0x04(%esp)
000003ec	call	*KeyValues::s_pfGetSymbolForString-0x39c(%eax)
000003f2	movl	%eax,(%esi)
000003f4	movl	0x14(%ebp),%eax
000003f7	movl	%eax,0x08(%esp)
000003fb	movl	0x10(%ebp),%eax
000003fe	movl	%eax,0x04(%esp)
00000402	movl	%esi,(%esp)
00000405	calll	KeyValues::SetString(char const*, char const*)
0000040a	addl	$0x14,%esp
0000040d	popl	%esi
0000040e	popl	%ebp
0000040f	ret
KeyValues::KeyValues(char const*, char const*, char const*):
00000410	pushl	%ebp
00000411	movl	%esp,%ebp
00000413	pushl	%esi
00000414	subl	$0x14,%esp
00000417	calll	0x0000041c
0000041c	popl	%eax
0000041d	movl	0x08(%ebp),%esi
00000420	movl	$0xffffffff,(%esi)
00000426	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000042d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000434	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000043b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000442	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000449	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000044f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000456	movb	$0x01,0x12(%esi)
0000045a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000045e	movl	0x0c(%ebp),%ecx
00000461	movl	%ecx,(%esp)
00000464	movl	$0x00000001,0x04(%esp)
0000046c	call	*KeyValues::s_pfGetSymbolForString-0x41c(%eax)
00000472	movl	%eax,(%esi)
00000474	movl	0x14(%ebp),%eax
00000477	movl	%eax,0x08(%esp)
0000047b	movl	0x10(%ebp),%eax
0000047e	movl	%eax,0x04(%esp)
00000482	movl	%esi,(%esp)
00000485	calll	KeyValues::SetString(char const*, char const*)
0000048a	addl	$0x14,%esp
0000048d	popl	%esi
0000048e	popl	%ebp
0000048f	ret
KeyValues::SetString(char const*, char const*):
00000490	pushl	%ebp
00000491	movl	%esp,%ebp
00000493	pushl	%ebx
00000494	pushl	%edi
00000495	pushl	%esi
00000496	subl	$0x0c,%esp
00000499	calll	0x0000049e
0000049e	popl	%ebx
0000049f	movl	0x0c(%ebp),%eax
000004a2	movl	%eax,0x04(%esp)
000004a6	movl	0x08(%ebp),%eax
000004a9	movl	%eax,(%esp)
000004ac	movl	$0x00000001,0x08(%esp)
000004b4	calll	KeyValues::FindKey(char const*, bool)
000004b9	movl	%eax,%esi
000004bb	testl	%esi,%esi
000004bd	je	0x00000530
000004bf	movl	0x10(%ebp),%edi
000004c2	movl	0x04(%esi),%eax
000004c5	cmpb	$0x01,0x10(%esi)
000004c9	jne	0x000004cf
000004cb	cmpl	%edi,%eax
000004cd	je	0x00000530
000004cf	testl	%eax,%eax
000004d1	je	0x000004db
000004d3	movl	%eax,(%esp)
000004d6	calll	operator delete[](void*)
000004db	movl	0x08(%esi),%eax
000004de	testl	%eax,%eax
000004e0	je	0x000004ea
000004e2	movl	%eax,(%esp)
000004e5	calll	operator delete[](void*)
000004ea	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000004f1	leal	0x3a9e0-0x49e(%ebx),%ebx
000004f7	testl	%edi,%edi
000004f9	cmovnel	%edi,%ebx
000004fc	movl	%ebx,(%esp)
000004ff	calll	_strlen
00000504	movl	%eax,%edi
00000506	incl	%edi
00000507	testl	%edi,%edi
00000509	movl	$0xffffffff,%eax
0000050e	cmovnsl	%edi,%eax
00000511	movl	%eax,(%esp)
00000514	calll	operator new[](unsigned long)
00000519	movl	%eax,0x04(%esi)
0000051c	movl	%edi,0x08(%esp)
00000520	movl	%ebx,0x04(%esp)
00000524	movl	%eax,(%esp)
00000527	calll	_memcpy
0000052c	movb	$0x01,0x10(%esi)
00000530	addl	$0x0c,%esp
00000533	popl	%esi
00000534	popl	%edi
00000535	popl	%ebx
00000536	popl	%ebp
00000537	ret
00000538	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, wchar_t const*):
00000540	pushl	%ebp
00000541	movl	%esp,%ebp
00000543	pushl	%esi
00000544	subl	$0x14,%esp
00000547	calll	0x0000054c
0000054c	popl	%eax
0000054d	movl	0x08(%ebp),%esi
00000550	movl	$0xffffffff,(%esi)
00000556	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000055d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000564	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000056b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000572	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000579	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000057f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000586	movb	$0x01,0x12(%esi)
0000058a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000058e	movl	0x0c(%ebp),%ecx
00000591	movl	%ecx,(%esp)
00000594	movl	$0x00000001,0x04(%esp)
0000059c	call	*KeyValues::s_pfGetSymbolForString-0x54c(%eax)
000005a2	movl	%eax,(%esi)
000005a4	movl	0x14(%ebp),%eax
000005a7	movl	%eax,0x08(%esp)
000005ab	movl	0x10(%ebp),%eax
000005ae	movl	%eax,0x04(%esp)
000005b2	movl	%esi,(%esp)
000005b5	calll	KeyValues::SetWString(char const*, wchar_t const*)
000005ba	addl	$0x14,%esp
000005bd	popl	%esi
000005be	popl	%ebp
000005bf	ret
KeyValues::KeyValues(char const*, char const*, wchar_t const*):
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%esi
000005c4	subl	$0x14,%esp
000005c7	calll	0x000005cc
000005cc	popl	%eax
000005cd	movl	0x08(%ebp),%esi
000005d0	movl	$0xffffffff,(%esi)
000005d6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000005dd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000005e4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000005eb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000005f2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000005f9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000005ff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000606	movb	$0x01,0x12(%esi)
0000060a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000060e	movl	0x0c(%ebp),%ecx
00000611	movl	%ecx,(%esp)
00000614	movl	$0x00000001,0x04(%esp)
0000061c	call	*KeyValues::s_pfGetSymbolForString-0x5cc(%eax)
00000622	movl	%eax,(%esi)
00000624	movl	0x14(%ebp),%eax
00000627	movl	%eax,0x08(%esp)
0000062b	movl	0x10(%ebp),%eax
0000062e	movl	%eax,0x04(%esp)
00000632	movl	%esi,(%esp)
00000635	calll	KeyValues::SetWString(char const*, wchar_t const*)
0000063a	addl	$0x14,%esp
0000063d	popl	%esi
0000063e	popl	%ebp
0000063f	ret
KeyValues::SetWString(char const*, wchar_t const*):
00000640	pushl	%ebp
00000641	movl	%esp,%ebp
00000643	pushl	%ebx
00000644	pushl	%edi
00000645	pushl	%esi
00000646	subl	$0x0c,%esp
00000649	calll	0x0000064e
0000064e	popl	%edi
0000064f	movl	0x0c(%ebp),%eax
00000652	movl	%eax,0x04(%esp)
00000656	movl	0x08(%ebp),%eax
00000659	movl	%eax,(%esp)
0000065c	movl	$0x00000001,0x08(%esp)
00000664	calll	KeyValues::FindKey(char const*, bool)
00000669	movl	%eax,%esi
0000066b	testl	%esi,%esi
0000066d	je	0x000006e4
0000066f	movl	0x08(%esi),%eax
00000672	testl	%eax,%eax
00000674	je	0x0000067e
00000676	movl	%eax,(%esp)
00000679	calll	operator delete[](void*)
0000067e	movl	0x04(%esi),%eax
00000681	testl	%eax,%eax
00000683	je	0x0000068d
00000685	movl	%eax,(%esp)
00000688	calll	operator delete[](void*)
0000068d	movl	0x10(%ebp),%eax
00000690	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000697	leal	0x3ac7c-0x64e(%edi),%ebx
0000069d	testl	%eax,%eax
0000069f	cmovnel	%eax,%ebx
000006a2	movl	%ebx,(%esp)
000006a5	calll	_wcslen
000006aa	movl	%eax,%edi
000006ac	leal	0x01(%edi),%eax
000006af	movl	$0xffffffff,%ecx
000006b4	movl	$0x00000004,%edx
000006b9	mull	%edx
000006bb	cmovol	%ecx,%eax
000006be	movl	%eax,(%esp)
000006c1	calll	operator new[](unsigned long)
000006c6	movl	%eax,0x08(%esi)
000006c9	leal	0x00000004(,%edi,4),%ecx
000006d0	movl	%ecx,0x08(%esp)
000006d4	movl	%ebx,0x04(%esp)
000006d8	movl	%eax,(%esp)
000006db	calll	_memcpy
000006e0	movb	$0x05,0x10(%esi)
000006e4	addl	$0x0c,%esp
000006e7	popl	%esi
000006e8	popl	%edi
000006e9	popl	%ebx
000006ea	popl	%ebp
000006eb	ret
000006ec	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::KeyValues(char const*, char const*, int):
000006f0	pushl	%ebp
000006f1	movl	%esp,%ebp
000006f3	pushl	%esi
000006f4	subl	$0x14,%esp
000006f7	calll	0x000006fc
000006fc	popl	%eax
000006fd	movl	0x08(%ebp),%esi
00000700	movl	$0xffffffff,(%esi)
00000706	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000070d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000714	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000071b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000722	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000729	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000072f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000736	movb	$0x01,0x12(%esi)
0000073a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000073e	movl	0x0c(%ebp),%ecx
00000741	movl	%ecx,(%esp)
00000744	movl	$0x00000001,0x04(%esp)
0000074c	call	*KeyValues::s_pfGetSymbolForString-0x6fc(%eax)
00000752	movl	%eax,(%esi)
00000754	movl	0x10(%ebp),%eax
00000757	movl	%eax,0x04(%esp)
0000075b	movl	%esi,(%esp)
0000075e	movl	$0x00000001,0x08(%esp)
00000766	calll	KeyValues::FindKey(char const*, bool)
0000076b	testl	%eax,%eax
0000076d	je	0x00000779
0000076f	movl	0x14(%ebp),%ecx
00000772	movl	%ecx,0x0c(%eax)
00000775	movb	$0x02,0x10(%eax)
00000779	addl	$0x14,%esp
0000077c	popl	%esi
0000077d	popl	%ebp
0000077e	ret
0000077f	nop
KeyValues::KeyValues(char const*, char const*, int):
00000780	pushl	%ebp
00000781	movl	%esp,%ebp
00000783	pushl	%esi
00000784	subl	$0x14,%esp
00000787	calll	0x0000078c
0000078c	popl	%eax
0000078d	movl	0x08(%ebp),%esi
00000790	movl	$0xffffffff,(%esi)
00000796	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000079d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000007a4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000007ab	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000007b2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000007b9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000007bf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000007c6	movb	$0x01,0x12(%esi)
000007ca	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000007ce	movl	0x0c(%ebp),%ecx
000007d1	movl	%ecx,(%esp)
000007d4	movl	$0x00000001,0x04(%esp)
000007dc	call	*KeyValues::s_pfGetSymbolForString-0x78c(%eax)
000007e2	movl	%eax,(%esi)
000007e4	movl	0x10(%ebp),%eax
000007e7	movl	%eax,0x04(%esp)
000007eb	movl	%esi,(%esp)
000007ee	movl	$0x00000001,0x08(%esp)
000007f6	calll	KeyValues::FindKey(char const*, bool)
000007fb	testl	%eax,%eax
000007fd	je	0x00000809
000007ff	movl	0x14(%ebp),%ecx
00000802	movl	%ecx,0x0c(%eax)
00000805	movb	$0x02,0x10(%eax)
00000809	addl	$0x14,%esp
0000080c	popl	%esi
0000080d	popl	%ebp
0000080e	ret
0000080f	nop
KeyValues::SetInt(char const*, int):
00000810	pushl	%ebp
00000811	movl	%esp,%ebp
00000813	subl	$0x18,%esp
00000816	movl	0x0c(%ebp),%eax
00000819	movl	%eax,0x04(%esp)
0000081d	movl	0x08(%ebp),%eax
00000820	movl	%eax,(%esp)
00000823	movl	$0x00000001,0x08(%esp)
0000082b	calll	KeyValues::FindKey(char const*, bool)
00000830	testl	%eax,%eax
00000832	je	0x0000083e
00000834	movl	0x10(%ebp),%ecx
00000837	movl	%ecx,0x0c(%eax)
0000083a	movb	$0x02,0x10(%eax)
0000083e	addl	$0x18,%esp
00000841	popl	%ebp
00000842	ret
00000843	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*):
00000850	pushl	%ebp
00000851	movl	%esp,%ebp
00000853	pushl	%esi
00000854	subl	$0x14,%esp
00000857	calll	0x0000085c
0000085c	popl	%eax
0000085d	movl	0x08(%ebp),%esi
00000860	movl	$0xffffffff,(%esi)
00000866	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000086d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000874	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000087b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000882	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000889	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000088f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000896	movb	$0x01,0x12(%esi)
0000089a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000089e	movl	0x0c(%ebp),%ecx
000008a1	movl	%ecx,(%esp)
000008a4	movl	$0x00000001,0x04(%esp)
000008ac	call	*KeyValues::s_pfGetSymbolForString-0x85c(%eax)
000008b2	movl	%eax,(%esi)
000008b4	movl	0x14(%ebp),%eax
000008b7	movl	%eax,0x08(%esp)
000008bb	movl	0x10(%ebp),%eax
000008be	movl	%eax,0x04(%esp)
000008c2	movl	%esi,(%esp)
000008c5	calll	KeyValues::SetString(char const*, char const*)
000008ca	movl	0x1c(%ebp),%eax
000008cd	movl	%eax,0x08(%esp)
000008d1	movl	0x18(%ebp),%eax
000008d4	movl	%eax,0x04(%esp)
000008d8	movl	%esi,(%esp)
000008db	calll	KeyValues::SetString(char const*, char const*)
000008e0	addl	$0x14,%esp
000008e3	popl	%esi
000008e4	popl	%ebp
000008e5	ret
000008e6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, char const*, char const*, char const*):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%esi
000008f4	subl	$0x14,%esp
000008f7	calll	0x000008fc
000008fc	popl	%eax
000008fd	movl	0x08(%ebp),%esi
00000900	movl	$0xffffffff,(%esi)
00000906	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000090d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000914	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000091b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000922	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000929	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
0000092f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000936	movb	$0x01,0x12(%esi)
0000093a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
0000093e	movl	0x0c(%ebp),%ecx
00000941	movl	%ecx,(%esp)
00000944	movl	$0x00000001,0x04(%esp)
0000094c	call	*KeyValues::s_pfGetSymbolForString-0x8fc(%eax)
00000952	movl	%eax,(%esi)
00000954	movl	0x14(%ebp),%eax
00000957	movl	%eax,0x08(%esp)
0000095b	movl	0x10(%ebp),%eax
0000095e	movl	%eax,0x04(%esp)
00000962	movl	%esi,(%esp)
00000965	calll	KeyValues::SetString(char const*, char const*)
0000096a	movl	0x1c(%ebp),%eax
0000096d	movl	%eax,0x08(%esp)
00000971	movl	0x18(%ebp),%eax
00000974	movl	%eax,0x04(%esp)
00000978	movl	%esi,(%esp)
0000097b	calll	KeyValues::SetString(char const*, char const*)
00000980	addl	$0x14,%esp
00000983	popl	%esi
00000984	popl	%ebp
00000985	ret
00000986	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, int, char const*, int):
00000990	pushl	%ebp
00000991	movl	%esp,%ebp
00000993	pushl	%esi
00000994	subl	$0x14,%esp
00000997	calll	0x0000099c
0000099c	popl	%eax
0000099d	movl	0x08(%ebp),%esi
000009a0	movl	$0xffffffff,(%esi)
000009a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
000009ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000009b4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
000009bb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000009c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
000009c9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
000009cf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
000009d6	movb	$0x01,0x12(%esi)
000009da	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000009de	movl	0x0c(%ebp),%ecx
000009e1	movl	%ecx,(%esp)
000009e4	movl	$0x00000001,0x04(%esp)
000009ec	call	*KeyValues::s_pfGetSymbolForString-0x99c(%eax)
000009f2	movl	%eax,(%esi)
000009f4	movl	0x10(%ebp),%eax
000009f7	movl	%eax,0x04(%esp)
000009fb	movl	%esi,(%esp)
000009fe	movl	$0x00000001,0x08(%esp)
00000a06	calll	KeyValues::FindKey(char const*, bool)
00000a0b	testl	%eax,%eax
00000a0d	je	0x00000a19
00000a0f	movl	0x14(%ebp),%ecx
00000a12	movl	%ecx,0x0c(%eax)
00000a15	movb	$0x02,0x10(%eax)
00000a19	movl	0x18(%ebp),%eax
00000a1c	movl	%eax,0x04(%esp)
00000a20	movl	%esi,(%esp)
00000a23	movl	$0x00000001,0x08(%esp)
00000a2b	calll	KeyValues::FindKey(char const*, bool)
00000a30	testl	%eax,%eax
00000a32	je	0x00000a3e
00000a34	movl	0x1c(%ebp),%ecx
00000a37	movl	%ecx,0x0c(%eax)
00000a3a	movb	$0x02,0x10(%eax)
00000a3e	addl	$0x14,%esp
00000a41	popl	%esi
00000a42	popl	%ebp
00000a43	ret
00000a44	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::KeyValues(char const*, char const*, int, char const*, int):
00000a50	pushl	%ebp
00000a51	movl	%esp,%ebp
00000a53	pushl	%esi
00000a54	subl	$0x14,%esp
00000a57	calll	0x00000a5c
00000a5c	popl	%eax
00000a5d	movl	0x08(%ebp),%esi
00000a60	movl	$0xffffffff,(%esi)
00000a66	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00000a6d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00000a74	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00000a7b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000a82	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000a89	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00000a8f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00000a96	movb	$0x01,0x12(%esi)
00000a9a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00000a9e	movl	0x0c(%ebp),%ecx
00000aa1	movl	%ecx,(%esp)
00000aa4	movl	$0x00000001,0x04(%esp)
00000aac	call	*KeyValues::s_pfGetSymbolForString-0xa5c(%eax)
00000ab2	movl	%eax,(%esi)
00000ab4	movl	0x10(%ebp),%eax
00000ab7	movl	%eax,0x04(%esp)
00000abb	movl	%esi,(%esp)
00000abe	movl	$0x00000001,0x08(%esp)
00000ac6	calll	KeyValues::FindKey(char const*, bool)
00000acb	testl	%eax,%eax
00000acd	je	0x00000ad9
00000acf	movl	0x14(%ebp),%ecx
00000ad2	movl	%ecx,0x0c(%eax)
00000ad5	movb	$0x02,0x10(%eax)
00000ad9	movl	0x18(%ebp),%eax
00000adc	movl	%eax,0x04(%esp)
00000ae0	movl	%esi,(%esp)
00000ae3	movl	$0x00000001,0x08(%esp)
00000aeb	calll	KeyValues::FindKey(char const*, bool)
00000af0	testl	%eax,%eax
00000af2	je	0x00000afe
00000af4	movl	0x1c(%ebp),%ecx
00000af7	movl	%ecx,0x0c(%eax)
00000afa	movb	$0x02,0x10(%eax)
00000afe	addl	$0x14,%esp
00000b01	popl	%esi
00000b02	popl	%ebp
00000b03	ret
00000b04	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::~KeyValues():
00000b10	jmp	KeyValues::RemoveEverything()
00000b15	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::~KeyValues():
00000b20	jmp	KeyValues::RemoveEverything()
00000b25	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RemoveEverything():
00000b30	pushl	%ebp
00000b31	movl	%esp,%ebp
00000b33	pushl	%ebx
00000b34	pushl	%edi
00000b35	pushl	%esi
00000b36	subl	$0x0c,%esp
00000b39	movl	0x08(%ebp),%esi
00000b3c	movl	0x18(%esi),%edi
00000b3f	nop
00000b40	testl	%edi,%edi
00000b42	je	0x00000b88
00000b44	movl	0x14(%edi),%ebx
00000b47	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00000b4e	movl	%edi,(%esp)
00000b51	calll	KeyValues::RemoveEverything()
00000b56	calll	_KeyValuesSystem
00000b5b	movl	(%eax),%ecx
00000b5d	movl	%edi,0x04(%esp)
00000b61	movl	%eax,(%esp)
00000b64	call	*0x08(%ecx)
00000b67	movl	%ebx,%edi
00000b69	jmp	0x00000b40
00000b6b	movl	%eax,%esi
00000b6d	calll	_KeyValuesSystem
00000b72	movl	(%eax),%ecx
00000b74	movl	0x08(%ecx),%ecx
00000b77	movl	%edi,0x04(%esp)
00000b7b	movl	%eax,(%esp)
00000b7e	call	*%ecx
00000b80	movl	%esi,(%esp)
00000b83	calll	__Unwind_Resume
00000b88	movl	0x14(%esi),%ebx
00000b8b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00000b90	movl	%ebx,%edi
00000b92	testl	%edi,%edi
00000b94	je	0x00000bda
00000b96	cmpl	%esi,%edi
00000b98	je	0x00000bda
00000b9a	movl	0x14(%edi),%ebx
00000b9d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00000ba4	testl	%edi,%edi
00000ba6	je	0x00000b90
00000ba8	movl	%edi,(%esp)
00000bab	calll	KeyValues::RemoveEverything()
00000bb0	calll	_KeyValuesSystem
00000bb5	movl	(%eax),%ecx
00000bb7	movl	%edi,0x04(%esp)
00000bbb	movl	%eax,(%esp)
00000bbe	call	*0x08(%ecx)
00000bc1	jmp	0x00000b90
00000bc3	movl	%eax,%esi
00000bc5	calll	_KeyValuesSystem
00000bca	movl	(%eax),%ecx
00000bcc	movl	0x08(%ecx),%ecx
00000bcf	movl	%edi,0x04(%esp)
00000bd3	movl	%eax,(%esp)
00000bd6	call	*%ecx
00000bd8	jmp	0x00000b80
00000bda	movl	0x04(%esi),%eax
00000bdd	testl	%eax,%eax
00000bdf	je	0x00000be9
00000be1	movl	%eax,(%esp)
00000be4	calll	operator delete[](void*)
00000be9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00000bf0	movl	0x08(%esi),%eax
00000bf3	testl	%eax,%eax
00000bf5	je	0x00000bff
00000bf7	movl	%eax,(%esp)
00000bfa	calll	operator delete[](void*)
00000bff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00000c06	addl	$0x0c,%esp
00000c09	popl	%esi
00000c0a	popl	%edi
00000c0b	popl	%ebx
00000c0c	popl	%ebp
00000c0d	ret
00000c0e	calll	std::terminate()
00000c13	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::operator delete(void*):
00000c20	pushl	%ebp
00000c21	movl	%esp,%ebp
00000c23	subl	$0x08,%esp
00000c26	calll	_KeyValuesSystem
00000c2b	movl	(%eax),%ecx
00000c2d	movl	0x08(%ebp),%edx
00000c30	movl	%edx,0x04(%esp)
00000c34	movl	%eax,(%esp)
00000c37	call	*0x08(%ecx)
00000c3a	addl	$0x08,%esp
00000c3d	popl	%ebp
00000c3e	ret
00000c3f	nop
KeyValues::RecursiveSaveToFile(CUtlBuffer&, int, bool, bool):
00000c40	pushl	%ebp
00000c41	movl	%esp,%ebp
00000c43	subl	$0x28,%esp
00000c46	movb	0x18(%ebp),%al
00000c49	movzbl	%al,%eax
00000c4c	movl	%eax,0x18(%esp)
00000c50	movb	0x14(%ebp),%al
00000c53	movzbl	%al,%eax
00000c56	movl	%eax,0x14(%esp)
00000c5a	movl	0x10(%ebp),%eax
00000c5d	movl	%eax,0x10(%esp)
00000c61	movl	0x0c(%ebp),%eax
00000c64	movl	%eax,0x0c(%esp)
00000c68	movl	0x08(%ebp),%eax
00000c6b	movl	%eax,(%esp)
00000c6e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00000c76	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00000c7e	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00000c83	addl	$0x28,%esp
00000c86	popl	%ebp
00000c87	ret
00000c88	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool):
00000c90	pushl	%ebp
00000c91	movl	%esp,%ebp
00000c93	pushl	%ebx
00000c94	pushl	%edi
00000c95	pushl	%esi
00000c96	subl	$0x7c,%esp
00000c99	calll	0x00000c9e
00000c9e	popl	%edi
00000c9f	movl	0x18(%ebp),%eax
00000ca2	movl	0x14(%ebp),%ebx
00000ca5	movl	0x0c(%ebp),%esi
00000ca8	testl	%eax,%eax
00000caa	jg	0x00000cb9
00000cac	movb	$0x01,0xab(%ebp)
00000cb0	testl	%esi,%esi
00000cb2	jne	0x00000d19
00000cb4	jmp	0x00000d3e
00000cb9	movl	%edi,0xb4(%ebp)
00000cbc	movl	%esi,%edi
00000cbe	movl	%eax,%esi
00000cc0	testl	%edi,%edi
00000cc2	je	0x00000ce8
00000cc4	movl	(%edi),%eax
00000cc6	movl	0x10(%ebp),%ecx
00000cc9	movl	%ecx,0x0c(%esp)
00000ccd	movl	0xb4(%ebp),%ecx
00000cd0	leal	0x3a969-0xc9e(%ecx),%ecx
00000cd6	movl	%ecx,0x04(%esp)
00000cda	movl	%edi,(%esp)
00000cdd	movl	$0x00000001,0x08(%esp)
00000ce5	call	*0x04(%eax)
00000ce8	testl	%ebx,%ebx
00000cea	je	0x00000d09
00000cec	movl	0xb4(%ebp),%eax
00000cef	leal	0x3a969-0xc9e(%eax),%eax
00000cf5	movl	%eax,0x04(%esp)
00000cf9	movl	%ebx,(%esp)
00000cfc	movl	$0x00000001,0x08(%esp)
00000d04	calll	CUtlBuffer::Put(void const*, int)
00000d09	decl	%esi
00000d0a	jne	0x00000cc0
00000d0c	movb	$0x01,0xab(%ebp)
00000d10	movl	%edi,%esi
00000d12	testl	%esi,%esi
00000d14	movl	0xb4(%ebp),%edi
00000d17	je	0x00000d3e
00000d19	movl	(%esi),%eax
00000d1b	movl	0x10(%ebp),%ecx
00000d1e	movl	%ecx,0x0c(%esp)
00000d22	leal	0x3a96b-0xc9e(%edi),%ecx
00000d28	movl	%ecx,0x04(%esp)
00000d2c	movl	%esi,(%esp)
00000d2f	movl	$0x00000001,0x08(%esp)
00000d37	call	*0x04(%eax)
00000d3a	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000d3e	testl	%ebx,%ebx
00000d40	je	0x00000d5c
00000d42	leal	0x3a96b-0xc9e(%edi),%eax
00000d48	movl	%eax,0x04(%esp)
00000d4c	movl	%ebx,(%esp)
00000d4f	movl	$0x00000001,0x08(%esp)
00000d57	calll	CUtlBuffer::Put(void const*, int)
00000d5c	movl	%edi,%ebx
00000d5e	movl	0x08(%ebp),%edi
00000d61	movl	(%edi),%eax
00000d63	movl	%eax,(%esp)
00000d66	call	*KeyValues::s_pfGetStringForSymbol-0xc9e(%ebx)
00000d6c	movl	%ebx,%ecx
00000d6e	movl	%eax,0x10(%esp)
00000d72	movl	0x14(%ebp),%eax
00000d75	movl	%eax,0x0c(%esp)
00000d79	movl	0x10(%ebp),%ebx
00000d7c	movl	%ebx,0x08(%esp)
00000d80	movl	%esi,0x04(%esp)
00000d84	movl	%edi,(%esp)
00000d87	movl	%ecx,%edi
00000d89	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00000d8e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000d92	jne	0x00000db2
00000d94	movl	(%esi),%eax
00000d96	movl	%ebx,0x0c(%esp)
00000d9a	leal	0x3a96d-0xc9e(%edi),%ecx
00000da0	movl	%ecx,0x04(%esp)
00000da4	movl	%esi,(%esp)
00000da7	movl	$0x00000002,0x08(%esp)
00000daf	call	*0x04(%eax)
00000db2	movl	%edi,0xb4(%ebp)
00000db5	movl	%esi,%edi
00000db7	movl	0x14(%ebp),%ebx
00000dba	testl	%ebx,%ebx
00000dbc	je	0x00000ddb
00000dbe	movl	0xb4(%ebp),%eax
00000dc1	leal	0x3a96d-0xc9e(%eax),%eax
00000dc7	movl	%eax,0x04(%esp)
00000dcb	movl	%ebx,(%esp)
00000dce	movl	$0x00000002,0x08(%esp)
00000dd6	calll	CUtlBuffer::Put(void const*, int)
00000ddb	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebp)
00000ddf	jle	0x00000e3e
00000de1	movl	0x18(%ebp),%esi
00000de4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00000df0	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000df4	jne	0x00000e1a
00000df6	movl	(%edi),%eax
00000df8	movl	0x10(%ebp),%ecx
00000dfb	movl	%ecx,0x0c(%esp)
00000dff	movl	0xb4(%ebp),%ecx
00000e02	leal	0x3a969-0xc9e(%ecx),%ecx
00000e08	movl	%ecx,0x04(%esp)
00000e0c	movl	%edi,(%esp)
00000e0f	movl	$0x00000001,0x08(%esp)
00000e17	call	*0x04(%eax)
00000e1a	testl	%ebx,%ebx
00000e1c	je	0x00000e3b
00000e1e	movl	0xb4(%ebp),%eax
00000e21	leal	0x3a969-0xc9e(%eax),%eax
00000e27	movl	%eax,0x04(%esp)
00000e2b	movl	%ebx,(%esp)
00000e2e	movl	$0x00000001,0x08(%esp)
00000e36	calll	CUtlBuffer::Put(void const*, int)
00000e3b	decl	%esi
00000e3c	jne	0x00000df0
00000e3e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00000e42	movl	0x08(%ebp),%esi
00000e45	jne	0x00000e6b
00000e47	movl	(%edi),%eax
00000e49	movl	0x10(%ebp),%ecx
00000e4c	movl	%ecx,0x0c(%esp)
00000e50	movl	0xb4(%ebp),%ecx
00000e53	leal	0x3a970-0xc9e(%ecx),%ecx
00000e59	movl	%ecx,0x04(%esp)
00000e5d	movl	%edi,(%esp)
00000e60	movl	$0x00000002,0x08(%esp)
00000e68	call	*0x04(%eax)
00000e6b	testl	%ebx,%ebx
00000e6d	je	0x00000e8c
00000e6f	movl	0xb4(%ebp),%eax
00000e72	leal	0x3a970-0xc9e(%eax),%eax
00000e78	movl	%eax,0x04(%esp)
00000e7c	movl	%ebx,(%esp)
00000e7f	movl	$0x00000002,0x08(%esp)
00000e87	calll	CUtlBuffer::Put(void const*, int)
00000e8c	cmpb	$0x01,0x1c(%ebp)
00000e90	jne	0x000010cb
00000e96	xorps	%xmm0,%xmm0
00000e99	movaps	%xmm0,0xb8(%ebp)
00000e9d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd0(%ebp)
00000ea1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xcc(%ebp)
00000ea8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00000eaf	movl	0x18(%esi),%edi
00000eb2	testl	%edi,%edi
00000eb4	jne	0x00000ec7
00000eb6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb0(%ebp)
00000ebd	xorl	%ecx,%ecx
00000ebf	movb	0x20(%ebp),%al
00000ec2	jmp	0x00000ff5
00000ec7	xorl	%eax,%eax
00000ec9	xorl	%ecx,%ecx
00000ecb	movl	%eax,%esi
00000ecd	jmp	0x00000f0f
00000ecf	nop
00000ed0	movl	%edx,0xac(%ebp)
00000ed3	shll	$0x02,%eax
00000ed6	movl	%eax,0x08(%esp)
00000eda	leal	(%ecx,%esi,4),%eax
00000edd	movl	%eax,0x04(%esp)
00000ee1	leal	(%ecx,%ebx,4),%eax
00000ee4	movl	%eax,(%esp)
00000ee7	calll	_memmove
00000eec	movl	0xb8(%ebp),%ecx
00000eef	shll	$0x02,%esi
00000ef2	addl	%ecx,%esi
00000ef4	je	0x00000ef8
00000ef6	movl	%edi,(%esi)
00000ef8	movl	0x14(%edi),%edi
00000efb	testl	%edi,%edi
00000efd	movl	0x14(%ebp),%ebx
00000f00	movl	0xac(%ebp),%eax
00000f03	je	0x00000f99
00000f09	movl	0xbc(%ebp),%eax
00000f0c	movl	0xb0(%ebp),%esi
00000f0f	movb	$0x01,0xd0(%ebp)
00000f13	leal	0x01(%esi),%ebx
00000f16	cmpl	%eax,%ebx
00000f18	movl	%esi,%edx
00000f1a	jle	0x00000f35
00000f1c	movl	%ebx,%ecx
00000f1e	subl	%eax,%ecx
00000f20	movl	%ecx,0x04(%esp)
00000f24	leal	0xb8(%ebp),%eax
00000f27	movl	%eax,(%esp)
00000f2a	calll	CUtlMemory<KeyValues*, int>::Grow(int)
00000f2f	movl	0xb8(%ebp),%ecx
00000f32	movl	0xc4(%ebp),%edx
00000f35	leal	0x01(%edx),%eax
00000f38	movl	%eax,0xb0(%ebp)
00000f3b	movl	%eax,0xc4(%ebp)
00000f3e	movl	%ecx,0xc8(%ebp)
00000f41	subl	%esi,%eax
00000f43	decl	%eax
00000f44	testl	%eax,%eax
00000f46	jg	0x00000ed0
00000f48	movl	%edx,0xac(%ebp)
00000f4b	jmp	0x00000eef
00000f4d	jmp	0x00000f4f
00000f4f	movl	%eax,%esi
00000f51	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
00000f58	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00000f5c	jns	0x00000f69
00000f5e	movl	%edi,0xc8(%ebp)
00000f61	movl	%esi,(%esp)
00000f64	calll	__Unwind_Resume
00000f69	testl	%edi,%edi
00000f6b	je	0x00000f7c
00000f6d	movl	%edi,(%esp)
00000f70	calll	_free
00000f75	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00000f7c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00000f83	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00000f8a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00000f91	movl	%esi,(%esp)
00000f94	calll	__Unwind_Resume
00000f99	testb	$0x01,0xd0(%ebp)
00000f9d	jne	0x00000fa4
00000f9f	movb	0x20(%ebp),%al
00000fa2	jmp	0x00000ff5
00000fa4	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd0(%ebp)
00000fa8	testl	%eax,%eax
00000faa	jg	0x00000fb1
00000fac	movb	0x20(%ebp),%al
00000faf	jmp	0x00000ff5
00000fb1	movl	0xcc(%ebp),%eax
00000fb4	movl	%eax,0xe8(%ebp)
00000fb7	leal	0xe0(%ebp),%eax
00000fba	movl	%eax,0xec(%ebp)
00000fbd	leal	0xe8(%ebp),%eax
00000fc0	movl	0xb4(%ebp),%edx
00000fc3	movl	%ecx,%esi
00000fc5	movl	0x42cf0-0xc9e(%edx),%ecx
00000fcb	movl	%eax,(%ecx)
00000fcd	leal	CUtlSortVector<KeyValues*, CUtlSortVectorKeyValuesByName, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> > >::CompareHelper(KeyValues* const*, KeyValues* const*)-0xc9e(%edx),%eax
00000fd3	movl	%eax,0x0c(%esp)
00000fd7	movl	0xb0(%ebp),%eax
00000fda	movl	%eax,0x04(%esp)
00000fde	movl	%esi,(%esp)
00000fe1	movl	%esi,%edi
00000fe3	movl	$0x00000004,0x08(%esp)
00000feb	calll	_qsort
00000ff0	movb	0x20(%ebp),%al
00000ff3	movl	%edi,%ecx
00000ff5	xorl	%esi,%esi
00000ff7	movzbl	%al,%eax
00000ffa	movl	%eax,0xac(%ebp)
00000ffd	nopl	(%eax)
00001000	cmpl	0xb0(%ebp),%esi
00001003	jge	0x00001046
00001005	movl	(%ecx,%esi,4),%eax
00001008	movl	%ecx,%edi
0000100a	movl	0xac(%ebp),%ecx
0000100d	movl	%ecx,0x1c(%esp)
00001011	movl	0x18(%ebp),%ecx
00001014	movl	%ecx,0x14(%esp)
00001018	movl	%ebx,0x10(%esp)
0000101c	movl	0x10(%ebp),%ecx
0000101f	movl	%ecx,0x0c(%esp)
00001023	movl	0x0c(%ebp),%ecx
00001026	movl	%ecx,0x08(%esp)
0000102a	movl	%eax,0x04(%esp)
0000102e	movl	0x08(%ebp),%eax
00001031	movl	%eax,(%esp)
00001034	movl	$0x00000001,0x18(%esp)
0000103c	calll	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001041	incl	%esi
00001042	movl	%edi,%ecx
00001044	jmp	0x00001000
00001046	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
0000104d	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00001051	jns	0x00001067
00001053	movl	%ecx,0xc8(%ebp)
00001056	movl	0x0c(%ebp),%edi
00001059	movl	%edi,%ecx
0000105b	movl	0x18(%ebp),%edi
0000105e	movl	%edi,%edx
00001060	movl	%ebx,%edi
00001062	jmp	0x00001126
00001067	movl	%ebx,%esi
00001069	testl	%ecx,%ecx
0000106b	jne	0x00001093
0000106d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00001074	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
0000107b	movl	0x0c(%ebp),%edi
0000107e	movl	%edi,%ecx
00001080	movl	0x18(%ebp),%edi
00001083	movl	%edi,%edx
00001085	movl	%esi,%edi
00001087	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000108e	jmp	0x00001126
00001093	movl	%ecx,(%esp)
00001096	calll	_free
0000109b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
000010a2	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000010a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000010ad	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
000010b4	movl	0x0c(%ebp),%edi
000010b7	movl	%edi,%ecx
000010b9	movl	0x18(%ebp),%edi
000010bc	movl	%edi,%edx
000010be	movl	%esi,%edi
000010c0	js	0x00001126
000010c2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000010c9	jmp	0x00001126
000010cb	movl	%edi,%ecx
000010cd	movl	0x18(%esi),%esi
000010d0	testl	%esi,%esi
000010d2	movl	0x18(%ebp),%edi
000010d5	movl	%edi,%edx
000010d7	movb	0x20(%ebp),%al
000010da	movl	%ebx,%edi
000010dc	je	0x00001126
000010de	nop
000010e0	movb	%al,%bl
000010e2	movzbl	%bl,%eax
000010e5	movl	%eax,0x1c(%esp)
000010e9	movl	%edx,0x14(%esp)
000010ed	movl	%edi,0x10(%esp)
000010f1	movl	0x10(%ebp),%eax
000010f4	movl	%eax,0x0c(%esp)
000010f8	movl	%ecx,0x08(%esp)
000010fc	movl	%esi,0x04(%esp)
00001100	movl	0x08(%ebp),%eax
00001103	movl	%eax,(%esp)
00001106	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esp)
0000110e	movl	%ecx,%edi
00001110	calll	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001115	movl	0x18(%ebp),%edx
00001118	movl	%edi,%ecx
0000111a	movl	0x14(%ebp),%edi
0000111d	movb	%bl,%al
0000111f	movl	0x14(%esi),%esi
00001122	testl	%esi,%esi
00001124	jne	0x000010e0
00001126	testl	%edx,%edx
00001128	movl	%ecx,%esi
0000112a	movl	%edi,%eax
0000112c	movl	%edx,%edi
0000112e	movl	%eax,%ebx
00001130	jle	0x0000118e
00001132	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001140	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00001144	jne	0x0000116a
00001146	movl	(%esi),%eax
00001148	movl	0x10(%ebp),%ecx
0000114b	movl	%ecx,0x0c(%esp)
0000114f	movl	0xb4(%ebp),%ecx
00001152	leal	0x3a969-0xc9e(%ecx),%ecx
00001158	movl	%ecx,0x04(%esp)
0000115c	movl	%esi,(%esp)
0000115f	movl	$0x00000001,0x08(%esp)
00001167	call	*0x04(%eax)
0000116a	testl	%ebx,%ebx
0000116c	je	0x0000118b
0000116e	movl	0xb4(%ebp),%eax
00001171	leal	0x3a969-0xc9e(%eax),%eax
00001177	movl	%eax,0x04(%esp)
0000117b	movl	%ebx,(%esp)
0000117e	movl	$0x00000001,0x08(%esp)
00001186	calll	CUtlBuffer::Put(void const*, int)
0000118b	decl	%edi
0000118c	jne	0x00001140
0000118e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xab(%ebp)
00001192	movl	0xb4(%ebp),%edi
00001195	jne	0x000011b8
00001197	movl	(%esi),%eax
00001199	movl	0x10(%ebp),%ecx
0000119c	movl	%ecx,0x0c(%esp)
000011a0	leal	0x3a973-0xc9e(%edi),%ecx
000011a6	movl	%ecx,0x04(%esp)
000011aa	movl	%esi,(%esp)
000011ad	movl	$0x00000002,0x08(%esp)
000011b5	call	*0x04(%eax)
000011b8	testl	%ebx,%ebx
000011ba	je	0x000011d6
000011bc	leal	0x3a973-0xc9e(%edi),%eax
000011c2	movl	%eax,0x04(%esp)
000011c6	movl	%ebx,(%esp)
000011c9	movl	$0x00000002,0x08(%esp)
000011d1	calll	CUtlBuffer::Put(void const*, int)
000011d6	addl	$0x7c,%esp
000011d9	popl	%esi
000011da	popl	%edi
000011db	popl	%ebx
000011dc	popl	%ebp
000011dd	ret
000011de	nop
KeyValues::ChainKeyValue(KeyValues*):
000011e0	movl	0x08(%esp),%eax
000011e4	movl	0x04(%esp),%ecx
000011e8	movl	%eax,0x1c(%ecx)
000011eb	ret
000011ec	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::GetName() const:
000011f0	pushl	%ebp
000011f1	movl	%esp,%ebp
000011f3	subl	$0x08,%esp
000011f6	calll	0x000011fb
000011fb	popl	%eax
000011fc	movl	0x08(%ebp),%ecx
000011ff	movl	(%ecx),%ecx
00001201	movl	%ecx,(%esp)
00001204	call	*KeyValues::s_pfGetStringForSymbol-0x11fb(%eax)
0000120a	addl	$0x08,%esp
0000120d	popl	%ebp
0000120e	ret
0000120f	nop
KeyValues::ReadToken(CUtlBuffer&, bool&, bool&):
00001210	pushl	%ebp
00001211	movl	%esp,%ebp
00001213	pushl	%ebx
00001214	pushl	%edi
00001215	pushl	%esi
00001216	subl	$0x1c,%esp
00001219	calll	0x0000121e
0000121e	popl	%eax
0000121f	movl	%eax,0xf0(%ebp)
00001222	movl	0x10(%ebp),%ebx
00001225	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
00001228	movl	0x14(%ebp),%eax
0000122b	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
0000122e	xorl	%esi,%esi
00001230	movl	0x0c(%ebp),%eax
00001233	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00001237	jne	0x00001424
0000123d	movl	%eax,%esi
0000123f	nop
00001240	movl	%esi,(%esp)
00001243	calll	CUtlBuffer::EatWhiteSpace()
00001248	movl	%esi,%edi
0000124a	xorl	%esi,%esi
0000124c	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00001250	jne	0x00001424
00001256	movl	%edi,(%esp)
00001259	calll	CUtlBuffer::EatCPPComment()
0000125e	testb	%al,%al
00001260	movl	%edi,%esi
00001262	jne	0x00001240
00001264	movl	%esi,(%esp)
00001267	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000126f	movl	$0x00000001,0x04(%esp)
00001277	movl	%esi,%edi
00001279	xorl	%esi,%esi
0000127b	calll	CUtlBuffer::PeekGet(int, int)
00001280	testl	%eax,%eax
00001282	je	0x00001424
00001288	movb	(%eax),%al
0000128a	cmpb	$0x7d,%al
0000128c	je	0x000013f6
00001292	cmpb	$0x7b,%al
00001294	je	0x000013f6
0000129a	cmpb	$0x22,%al
0000129c	je	0x000013bb
000012a2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
000012a9	xorb	%bh,%bh
000012ab	xorb	%bl,%bl
000012ad	jmp	0x000012ed
000012af	nop
000012b0	movl	%eax,0xec(%ebp)
000012b3	testb	$0x01,%bh
000012b6	jne	0x000012d5
000012b8	movl	0xf0(%ebp),%ecx
000012bb	leal	0x3a90c-0x121e(%ecx),%eax
000012c1	movl	%eax,0x04(%esp)
000012c5	leal	_g_KeyValuesErrorStack-0x121e(%ecx),%eax
000012cb	movl	%eax,(%esp)
000012ce	calll	CKeyValuesErrorStack::ReportError(char const*)
000012d3	movb	$0x01,%bh
000012d5	movl	%edi,(%esp)
000012d8	movl	$0x00000001,0x08(%esp)
000012e0	movl	$0x00000001,0x04(%esp)
000012e8	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
000012ed	movl	%edi,(%esp)
000012f0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000012f8	movl	$0x00000001,0x04(%esp)
00001300	calll	CUtlBuffer::PeekGet(int, int)
00001305	movl	%eax,%esi
00001307	testl	%esi,%esi
00001309	je	0x00001369
0000130b	movsbl	(%esi),%eax
0000130e	cmpl	$0x21,%eax
00001311	jg	0x00001319
00001313	testb	%al,%al
00001315	jne	0x00001321
00001317	jmp	0x00001369
00001319	cmpb	$0x5a,%al
0000131b	jg	0x00001344
0000131d	cmpb	$0x22,%al
0000131f	je	0x00001369
00001321	movsbl	%al,%ecx
00001324	testb	%al,%al
00001326	js	0x00001382
00001328	movl	%ecx,%eax
0000132a	movb	%bl,%cl
0000132c	movl	0xf0(%ebp),%edx
0000132f	movl	0x42ce4-0x121e(%edx),%edx
00001335	movl	0x34(%edx,%eax,4),%eax
00001339	movl	$0x00004000,%edx
0000133e	andl	%edx,%eax
00001340	movb	%cl,%bl
00001342	jmp	0x00001392
00001344	cmpb	$0x7a,%al
00001346	jg	0x00001361
00001348	movb	$0x01,%cl
0000134a	cmpb	$0x5b,%al
0000134c	je	0x0000132c
0000134e	cmpb	$0x5d,%al
00001350	jne	0x00001321
00001352	testb	$0x01,%bl
00001355	je	0x0000132a
00001357	movl	0x14(%ebp),%eax
0000135a	movb	$0x01,(%eax)
0000135d	movb	(%esi),%al
0000135f	jmp	0x00001321
00001361	cmpb	$0x7b,%al
00001363	je	0x00001369
00001365	cmpb	$0x7d,%al
00001367	jne	0x00001321
00001369	movl	0xf0(%ebp),%eax
0000136c	movl	0xec(%ebp),%ecx
0000136f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),s_pTokenBuf-0x121e(%eax,%ecx)
00001377	leal	s_pTokenBuf-0x121e(%eax),%esi
0000137d	jmp	0x00001424
00001382	movl	%ecx,(%esp)
00001385	movl	$0x00004000,0x04(%esp)
0000138d	calll	___maskrune
00001392	testl	%eax,%eax
00001394	jne	0x00001369
00001396	movl	0xec(%ebp),%eax
00001399	cmpl	$0x00000ffe,%eax
0000139e	jg	0x000012b0
000013a4	movl	%eax,%edx
000013a6	movb	(%esi),%al
000013a8	movl	0xf0(%ebp),%ecx
000013ab	movb	%al,s_pTokenBuf-0x121e(%ecx,%edx)
000013b2	incl	%edx
000013b3	movl	%edx,0xec(%ebp)
000013b6	jmp	0x000012d5
000013bb	movb	$0x01,(%ebx)
000013be	movl	0x08(%ebp),%eax
000013c1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
000013c5	je	0x000013ce
000013c7	calll	GetCStringCharConversion()
000013cc	jmp	0x000013d3
000013ce	calll	GetNoEscCharConversion()
000013d3	movl	0xf0(%ebp),%ecx
000013d6	leal	s_pTokenBuf-0x121e(%ecx),%esi
000013dc	movl	%esi,0x08(%esp)
000013e0	movl	%eax,0x04(%esp)
000013e4	movl	%edi,(%esp)
000013e7	movl	$0x00001000,0x0c(%esp)
000013ef	calll	CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
000013f4	jmp	0x00001424
000013f6	movl	0xf0(%ebp),%esi
000013f9	movb	%al,s_pTokenBuf-0x121e(%esi)
000013ff	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),s_pTokenBuf-0x121e+0x00000001(%esi)
00001406	movl	%edi,(%esp)
00001409	movl	$0x00000001,0x08(%esp)
00001411	movl	$0x00000001,0x04(%esp)
00001419	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
0000141e	leal	s_pTokenBuf-0x121e(%esi),%esi
00001424	movl	%esi,%eax
00001426	addl	$0x1c,%esp
00001429	popl	%esi
0000142a	popl	%edi
0000142b	popl	%ebx
0000142c	popl	%ebp
0000142d	ret
0000142e	nop
KeyValues::UsesEscapeSequences(bool):
00001430	movb	0x08(%esp),%al
00001434	movl	0x04(%esp),%ecx
00001438	movb	%al,0x11(%ecx)
0000143b	ret
0000143c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::UsesConditionals(bool):
00001440	movb	0x08(%esp),%al
00001444	movl	0x04(%esp),%ecx
00001448	movb	%al,0x12(%ecx)
0000144b	ret
0000144c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*):
00001450	pushl	%ebp
00001451	movl	%esp,%ebp
00001453	pushl	%ebx
00001454	pushl	%edi
00001455	pushl	%esi
00001456	subl	$0x2c,%esp
00001459	calll	0x0000145e
0000145e	popl	%ecx
0000145f	movl	0x0c(%ebp),%edi
00001462	movl	(%edi),%eax
00001464	movl	0x14(%ebp),%edx
00001467	movl	%edx,0x0c(%esp)
0000146b	leal	0x3a920-0x145e(%ecx),%ecx
00001471	movl	%ecx,0x08(%esp)
00001475	movl	0x10(%ebp),%ecx
00001478	movl	%ecx,0x04(%esp)
0000147c	movl	%edi,(%esp)
0000147f	call	*0x08(%eax)
00001482	movl	%eax,%esi
00001484	xorb	%al,%al
00001486	testl	%esi,%esi
00001488	je	0x00001591
0000148e	movl	(%edi),%eax
00001490	movl	%esi,0x04(%esp)
00001494	movl	%edi,(%esp)
00001497	call	*0x18(%eax)
0000149a	movl	%eax,0xec(%ebp)
0000149d	movl	0xfc(%edi),%eax
000014a0	leal	0xf0(%ebp),%ecx
000014a3	movl	%ecx,0x08(%esp)
000014a7	movl	%esi,0x04(%esp)
000014ab	movl	%esi,0xe8(%ebp)
000014ae	leal	0xfc(%edi),%esi
000014b1	movl	%edi,%ebx
000014b3	movl	%esi,(%esp)
000014b6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
000014be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000014c6	call	*0x00000150(%eax)
000014cc	testb	%al,%al
000014ce	jne	0x000014d8
000014d0	movl	0xec(%ebp),%edi
000014d3	addl	$0x02,%edi
000014d6	jmp	0x000014e6
000014d8	movl	0xf0(%ebp),%edi
000014db	movl	0xec(%ebp),%eax
000014de	leal	0x01(%eax,%edi),%eax
000014e2	negl	%edi
000014e4	andl	%eax,%edi
000014e6	movl	0xfc(%ebx),%eax
000014e9	movl	%edi,0x08(%esp)
000014ed	movl	0xe8(%ebp),%ecx
000014f0	movl	%ecx,0x04(%esp)
000014f4	movl	%esi,(%esp)
000014f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
000014ff	call	*0x00000154(%eax)
00001505	movl	0xfc(%ebx),%edx
00001508	movl	0xe8(%ebp),%ecx
0000150b	movl	%ecx,0x10(%esp)
0000150f	movl	0xec(%ebp),%ecx
00001512	movl	%ecx,0x0c(%esp)
00001516	movl	%edi,0x08(%esp)
0000151a	movl	%ebx,%edi
0000151c	movl	%eax,0x04(%esp)
00001520	movl	%esi,(%esp)
00001523	movl	%esi,%ebx
00001525	movl	%eax,%esi
00001527	call	*0x00000118(%edx)
0000152d	movl	%eax,0xe4(%ebp)
00001530	movl	(%edi),%eax
00001532	movl	0xe8(%ebp),%ecx
00001535	movl	%ecx,0x04(%esp)
00001539	movl	%edi,(%esp)
0000153c	call	*0x0c(%eax)
0000153f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00001543	setne	%al
00001546	je	0x00001578
00001548	movl	0xec(%ebp),%eax
0000154b	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi,%eax)
0000154f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x01(%esi,%eax)
00001554	movl	%edi,0x0c(%esp)
00001558	movl	%esi,0x08(%esp)
0000155c	movl	0x10(%ebp),%eax
0000155f	movl	%eax,0x04(%esp)
00001563	movl	0x08(%ebp),%eax
00001566	movl	%eax,(%esp)
00001569	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
00001571	calll	KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
00001576	movb	$0x01,%al
00001578	movb	%al,0xec(%ebp)
0000157b	movl	(%ebx),%eax
0000157d	movl	%esi,0x04(%esp)
00001581	movl	%ebx,(%esp)
00001584	call	*0x00000158(%eax)
0000158a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
0000158e	setne	%al
00001591	movzbl	%al,%eax
00001594	addl	$0x2c,%esp
00001597	popl	%esi
00001598	popl	%edi
00001599	popl	%ebx
0000159a	popl	%ebp
0000159b	ret
0000159c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*):
000015a0	pushl	%ebp
000015a1	movl	%esp,%ebp
000015a3	pushl	%ebx
000015a4	pushl	%edi
000015a5	pushl	%esi
000015a6	subl	$0x5c,%esp
000015a9	movl	0x10(%ebp),%ebx
000015ac	testl	%ebx,%ebx
000015ae	je	0x00001693
000015b4	movl	%ebx,(%esp)
000015b7	calll	_strlen
000015bc	movl	%eax,%esi
000015be	movl	%esi,0x08(%esp)
000015c2	movl	%ebx,0x04(%esp)
000015c6	leal	0xb8(%ebp),%eax
000015c9	movl	%eax,(%esp)
000015cc	movl	$0x00000009,0x0c(%esp)
000015d4	calll	CUtlBuffer::CUtlBuffer(void const*, int, int)
000015d9	cmpl	$0x03,%esi
000015dc	jl	0x00001649
000015de	cmpb	$0xff,(%ebx)
000015e1	jne	0x00001649
000015e3	cmpb	$0xfe,0x01(%ebx)
000015e7	jne	0x00001649
000015e9	addl	$0x02,%ebx
000015ec	movl	%ebx,(%esp)
000015ef	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000015f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
000015ff	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00001604	movl	%eax,%esi
00001606	testl	%esi,%esi
00001608	movl	$0xffffffff,%eax
0000160d	cmovnsl	%esi,%eax
00001610	movl	%eax,(%esp)
00001613	calll	operator new[](unsigned long)
00001618	movl	%eax,%edi
0000161a	movl	%esi,0x08(%esp)
0000161e	movl	%edi,0x04(%esp)
00001622	movl	%ebx,(%esp)
00001625	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
0000162a	movl	%esi,0x0c(%esp)
0000162e	movl	%esi,0x08(%esp)
00001632	movl	%edi,0x04(%esp)
00001636	leal	0xb8(%ebp),%eax
00001639	movl	%eax,(%esp)
0000163c	movl	$0x00000009,0x10(%esp)
00001644	calll	CUtlBuffer::AssumeMemory(void*, int, int, int)
00001649	movl	0x18(%ebp),%edx
0000164c	movl	0x14(%ebp),%esi
0000164f	movl	0x0c(%ebp),%eax
00001652	movl	0x08(%ebp),%ecx
00001655	movl	%edx,0x10(%esp)
00001659	movl	%esi,0x0c(%esp)
0000165d	leal	0xb8(%ebp),%edx
00001660	movl	%edx,0x08(%esp)
00001664	movl	%eax,0x04(%esp)
00001668	movl	%ecx,(%esp)
0000166b	calll	KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*)
00001670	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00001674	js	0x00001693
00001676	movl	0xb8(%ebp),%eax
00001679	testl	%eax,%eax
0000167b	je	0x0000168c
0000167d	movl	%eax,(%esp)
00001680	calll	_free
00001685	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
0000168c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
00001693	movl	$0x00000001,%eax
00001698	addl	$0x5c,%esp
0000169b	popl	%esi
0000169c	popl	%edi
0000169d	popl	%ebx
0000169e	popl	%ebp
0000169f	ret
000016a0	movl	%eax,%esi
000016a2	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000016a6	js	0x000016c5
000016a8	movl	0xb8(%ebp),%eax
000016ab	testl	%eax,%eax
000016ad	je	0x000016be
000016af	movl	%eax,(%esp)
000016b2	calll	_free
000016b7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
000016be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
000016c5	movl	%esi,(%esp)
000016c8	calll	__Unwind_Resume
000016cd	nopl	(%eax)
KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*, bool, bool):
000016d0	pushl	%ebp
000016d1	movl	%esp,%ebp
000016d3	pushl	%ebx
000016d4	pushl	%edi
000016d5	pushl	%esi
000016d6	subl	$0x1c,%esp
000016d9	calll	0x000016de
000016de	popl	%edi
000016df	movl	0x0c(%ebp),%edx
000016e2	movl	(%edx),%eax
000016e4	movl	0x14(%ebp),%ebx
000016e7	movl	%ebx,0x0c(%esp)
000016eb	leal	0x3a923-0x16de(%edi),%ecx
000016f1	movl	%ecx,0x08(%esp)
000016f5	movl	0x10(%ebp),%ecx
000016f8	movl	%ecx,0x04(%esp)
000016fc	movl	%edx,(%esp)
000016ff	call	*0x08(%eax)
00001702	movl	%eax,%esi
00001704	testl	%esi,%esi
00001706	jne	0x0000173d
00001708	leal	0x3a926-0x16de(%edi),%eax
0000170e	movl	%eax,0x04(%esp)
00001712	leal	0x3a964-0x16de(%edi),%eax
00001718	testl	%ebx,%ebx
0000171a	cmovel	%eax,%ebx
0000171d	movl	%ebx,0x0c(%esp)
00001721	movl	0x10(%ebp),%ecx
00001724	testl	%ecx,%ecx
00001726	cmovnel	%ecx,%eax
00001729	movl	%eax,0x08(%esp)
0000172d	movl	$0x00000001,(%esp)
00001734	calll	_DevMsg
00001739	xorb	%al,%al
0000173b	jmp	0x00001785
0000173d	movb	0x1c(%ebp),%dl
00001740	movb	0x18(%ebp),%cl
00001743	movl	0x08(%ebp),%eax
00001746	movzbl	%dl,%edx
00001749	movl	%edx,0x18(%esp)
0000174d	movzbl	%cl,%ecx
00001750	movl	%ecx,0x14(%esp)
00001754	movl	%esi,0x08(%esp)
00001758	movl	0x0c(%ebp),%edi
0000175b	movl	%edi,0x04(%esp)
0000175f	movl	%eax,(%esp)
00001762	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esp)
0000176a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esp)
00001772	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
00001777	movl	(%edi),%eax
00001779	movl	%esi,0x04(%esp)
0000177d	movl	%edi,(%esp)
00001780	call	*0x0c(%eax)
00001783	movb	$0x01,%al
00001785	movzbl	%al,%eax
00001788	addl	$0x1c,%esp
0000178b	popl	%esi
0000178c	popl	%edi
0000178d	popl	%ebx
0000178e	popl	%ebp
0000178f	ret
KeyValues::WriteIndents(IBaseFileSystem*, void*, CUtlBuffer*, int):
00001790	pushl	%ebp
00001791	movl	%esp,%ebp
00001793	pushl	%ebx
00001794	pushl	%edi
00001795	pushl	%esi
00001796	subl	$0x1c,%esp
00001799	calll	0x0000179e
0000179e	popl	%eax
0000179f	movl	%eax,0xf0(%ebp)
000017a2	movl	0x18(%ebp),%edi
000017a5	testl	%edi,%edi
000017a7	jle	0x0000180c
000017a9	movl	0x14(%ebp),%ecx
000017ac	movl	0x0c(%ebp),%edx
000017af	nop
000017b0	movl	%ecx,%ebx
000017b2	testl	%edx,%edx
000017b4	je	0x000017de
000017b6	movl	(%edx),%eax
000017b8	movl	0x10(%ebp),%ecx
000017bb	movl	%ecx,0x0c(%esp)
000017bf	movl	0xf0(%ebp),%ecx
000017c2	leal	0x3a969-0x179e(%ecx),%ecx
000017c8	movl	%ecx,0x04(%esp)
000017cc	movl	%edx,(%esp)
000017cf	movl	$0x00000001,0x08(%esp)
000017d7	movl	%edx,%esi
000017d9	call	*0x04(%eax)
000017dc	movl	%esi,%edx
000017de	movl	%edx,%esi
000017e0	movl	%ebx,%ecx
000017e2	testl	%ecx,%ecx
000017e4	je	0x00001807
000017e6	movl	0xf0(%ebp),%eax
000017e9	leal	0x3a969-0x179e(%eax),%eax
000017ef	movl	%eax,0x04(%esp)
000017f3	movl	%ecx,(%esp)
000017f6	movl	$0x00000001,0x08(%esp)
000017fe	movl	%ecx,%ebx
00001800	calll	CUtlBuffer::Put(void const*, int)
00001805	movl	%ebx,%ecx
00001807	decl	%edi
00001808	movl	%esi,%edx
0000180a	jne	0x000017b0
0000180c	addl	$0x1c,%esp
0000180f	popl	%esi
00001810	popl	%edi
00001811	popl	%ebx
00001812	popl	%ebp
00001813	ret
00001814	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::InternalWrite(IBaseFileSystem*, void*, CUtlBuffer*, void const*, int):
00001820	pushl	%ebp
00001821	movl	%esp,%ebp
00001823	pushl	%edi
00001824	pushl	%esi
00001825	subl	$0x10,%esp
00001828	movl	0x1c(%ebp),%esi
0000182b	movl	0x18(%ebp),%edi
0000182e	movl	0x0c(%ebp),%eax
00001831	testl	%eax,%eax
00001833	je	0x0000184c
00001835	movl	0x10(%ebp),%edx
00001838	movl	(%eax),%ecx
0000183a	movl	%edx,0x0c(%esp)
0000183e	movl	%esi,0x08(%esp)
00001842	movl	%edi,0x04(%esp)
00001846	movl	%eax,(%esp)
00001849	call	*0x04(%ecx)
0000184c	movl	0x14(%ebp),%eax
0000184f	testl	%eax,%eax
00001851	je	0x00001863
00001853	movl	%esi,0x08(%esp)
00001857	movl	%edi,0x04(%esp)
0000185b	movl	%eax,(%esp)
0000185e	calll	CUtlBuffer::Put(void const*, int)
00001863	addl	$0x10,%esp
00001866	popl	%esi
00001867	popl	%edi
00001868	popl	%ebp
00001869	ret
0000186a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*):
00001870	pushl	%ebp
00001871	movl	%esp,%ebp
00001873	pushl	%ebx
00001874	pushl	%edi
00001875	pushl	%esi
00001876	subl	$0x0c,%esp
00001879	calll	0x0000187e
0000187e	popl	%eax
0000187f	movl	0x42cec-0x187e(%eax),%eax
00001885	movl	%eax,0xec(%ebp)
00001888	movl	(%eax),%eax
0000188a	movl	%eax,0xf0(%ebp)
0000188d	subl	$0x10,%esp
00001890	movl	0x18(%ebp),%esi
00001893	movl	%esi,(%esp)
00001896	calll	_strlen
0000189b	addl	$0x10,%esp
0000189e	leal	0x11(%eax,%eax),%ecx
000018a2	andl	$0xf0,%ecx
000018a5	movl	%esp,%ebx
000018a7	subl	%ecx,%ebx
000018a9	movl	%ebx,%esp
000018ab	testl	%eax,%eax
000018ad	js	0x000018df
000018af	movl	0x08(%ebp),%edi
000018b2	incl	%eax
000018b3	xorl	%edx,%edx
000018b5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000018c0	movb	(%esi),%cl
000018c2	cmpb	$0x22,%cl
000018c5	je	0x000018d2
000018c7	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%edi)
000018cb	je	0x000018d7
000018cd	cmpb	$0x5c,%cl
000018d0	jne	0x000018d7
000018d2	movb	$0x5c,(%ebx,%edx)
000018d6	incl	%edx
000018d7	movb	%cl,(%ebx,%edx)
000018da	incl	%esi
000018db	incl	%edx
000018dc	decl	%eax
000018dd	jne	0x000018c0
000018df	movl	0x0c(%ebp),%edi
000018e2	subl	$0x10,%esp
000018e5	movl	%ebx,(%esp)
000018e8	calll	_strlen
000018ed	addl	$0x10,%esp
000018f0	movl	%eax,%esi
000018f2	testl	%edi,%edi
000018f4	je	0x00001913
000018f6	movl	0x10(%ebp),%ecx
000018f9	movl	(%edi),%eax
000018fb	subl	$0x10,%esp
000018fe	movl	%ecx,0x0c(%esp)
00001902	movl	%esi,0x08(%esp)
00001906	movl	%ebx,0x04(%esp)
0000190a	movl	%edi,(%esp)
0000190d	call	*0x04(%eax)
00001910	addl	$0x10,%esp
00001913	movl	0x14(%ebp),%eax
00001916	testl	%eax,%eax
00001918	je	0x00001930
0000191a	subl	$0x10,%esp
0000191d	movl	%esi,0x08(%esp)
00001921	movl	%ebx,0x04(%esp)
00001925	movl	%eax,(%esp)
00001928	calll	CUtlBuffer::Put(void const*, int)
0000192d	addl	$0x10,%esp
00001930	movl	0xec(%ebp),%eax
00001933	movl	(%eax),%eax
00001935	cmpl	0xf0(%ebp),%eax
00001938	jne	0x00001942
0000193a	leal	0xf4(%ebp),%esp
0000193d	popl	%esi
0000193e	popl	%edi
0000193f	popl	%ebx
00001940	popl	%ebp
00001941	ret
00001942	calll	___stack_chk_fail
00001947	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool):
00001950	pushl	%ebp
00001951	movl	%esp,%ebp
00001953	pushl	%ebx
00001954	pushl	%edi
00001955	pushl	%esi
00001956	subl	$0x000000ac,%esp
0000195c	calll	0x00001961
00001961	popl	%edx
00001962	movl	0x42cec-0x1961(%edx),%eax
00001968	movl	%eax,0xffffff70(%ebp)
0000196e	movl	(%eax),%eax
00001970	movl	%eax,0xf0(%ebp)
00001973	movb	0x24(%ebp),%al
00001976	movl	0x1c(%ebp),%ebx
00001979	movl	0x18(%ebp),%esi
0000197c	movl	0x10(%ebp),%edi
0000197f	movl	0x0c(%ebp),%ecx
00001982	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ecx)
00001986	je	0x000019ba
00001988	movb	0x20(%ebp),%dl
0000198b	movzbl	%al,%eax
0000198e	movl	%eax,0x18(%esp)
00001992	movzbl	%dl,%eax
00001995	movl	%eax,0x14(%esp)
00001999	incl	%ebx
0000199a	movl	%ebx,0x10(%esp)
0000199e	movl	%esi,0x0c(%esp)
000019a2	movl	0x14(%ebp),%eax
000019a5	movl	%eax,0x08(%esp)
000019a9	movl	%edi,0x04(%esp)
000019ad	movl	%ecx,(%esp)
000019b0	calll	KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
000019b5	jmp	0x000022ac
000019ba	movsbl	0x10(%ecx),%ecx
000019be	decl	%ecx
000019bf	cmpl	$0x06,%ecx
000019c2	ja	0x000022ac
000019c8	movl	%edx,0xffffff7c(%ebp)
000019ce	movl	0x0000096b(%edx,%ecx,4),%ecx
000019d5	addl	%edx,%ecx
000019d7	jmp	*%ecx
000019d9	movl	0x0c(%ebp),%ecx
000019dc	movl	0x04(%ecx),%ecx
000019df	testl	%ecx,%ecx
000019e1	je	0x000022ac
000019e7	testb	%al,%al
000019e9	jne	0x000019f4
000019eb	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ecx)
000019ee	je	0x000022ac
000019f4	incl	%ebx
000019f5	testl	%ebx,%ebx
000019f7	jle	0x00001a52
000019f9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00001a00	testl	%edi,%edi
00001a02	je	0x00001a2b
00001a04	movl	(%edi),%eax
00001a06	movl	0x14(%ebp),%ecx
00001a09	movl	%ecx,0x0c(%esp)
00001a0d	movl	0xffffff7c(%ebp),%ecx
00001a13	leal	0x3a969-0x1961(%ecx),%ecx
00001a19	movl	%ecx,0x04(%esp)
00001a1d	movl	%edi,(%esp)
00001a20	movl	$0x00000001,0x08(%esp)
00001a28	call	*0x04(%eax)
00001a2b	testl	%esi,%esi
00001a2d	je	0x00001a4f
00001a2f	movl	0xffffff7c(%ebp),%eax
00001a35	leal	0x3a969-0x1961(%eax),%eax
00001a3b	movl	%eax,0x04(%esp)
00001a3f	movl	%esi,(%esp)
00001a42	movl	$0x00000001,0x08(%esp)
00001a4a	calll	CUtlBuffer::Put(void const*, int)
00001a4f	decl	%ebx
00001a50	jne	0x00001a00
00001a52	movb	$0x01,%al
00001a54	testl	%edi,%edi
00001a56	movl	0x0c(%ebp),%ebx
00001a59	je	0x00001a84
00001a5b	movl	(%edi),%eax
00001a5d	movl	0x14(%ebp),%ecx
00001a60	movl	%ecx,0x0c(%esp)
00001a64	movl	0xffffff7c(%ebp),%ecx
00001a6a	leal	0x3a96b-0x1961(%ecx),%ecx
00001a70	movl	%ecx,0x04(%esp)
00001a74	movl	%edi,(%esp)
00001a77	movl	$0x00000001,0x08(%esp)
00001a7f	call	*0x04(%eax)
00001a82	xorb	%al,%al
00001a84	movb	%al,0xffffff7b(%ebp)
00001a8a	testl	%esi,%esi
00001a8c	je	0x00001aae
00001a8e	movl	0xffffff7c(%ebp),%eax
00001a94	leal	0x3a96b-0x1961(%eax),%eax
00001a9a	movl	%eax,0x04(%esp)
00001a9e	movl	%esi,(%esp)
00001aa1	movl	$0x00000001,0x08(%esp)
00001aa9	calll	CUtlBuffer::Put(void const*, int)
00001aae	movl	(%ebx),%eax
00001ab0	movl	%eax,(%esp)
00001ab3	movl	0xffffff7c(%ebp),%eax
00001ab9	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%eax)
00001abf	movl	%eax,0x10(%esp)
00001ac3	movl	%esi,0x0c(%esp)
00001ac7	movl	0x14(%ebp),%ebx
00001aca	movl	%ebx,0x08(%esp)
00001ace	movl	%edi,0x04(%esp)
00001ad2	movl	0x08(%ebp),%eax
00001ad5	movl	%eax,(%esp)
00001ad8	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00001add	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001ae4	jne	0x00001b0a
00001ae6	movl	(%edi),%eax
00001ae8	movl	%ebx,0x0c(%esp)
00001aec	movl	0xffffff7c(%ebp),%ecx
00001af2	leal	0x3a976-0x1961(%ecx),%ecx
00001af8	movl	%ecx,0x04(%esp)
00001afc	movl	%edi,(%esp)
00001aff	movl	$0x00000004,0x08(%esp)
00001b07	call	*0x04(%eax)
00001b0a	testl	%esi,%esi
00001b0c	je	0x00001b2e
00001b0e	movl	0xffffff7c(%ebp),%eax
00001b14	leal	0x3a976-0x1961(%eax),%eax
00001b1a	movl	%eax,0x04(%esp)
00001b1e	movl	%esi,(%esp)
00001b21	movl	$0x00000004,0x08(%esp)
00001b29	calll	CUtlBuffer::Put(void const*, int)
00001b2e	movl	0x0c(%ebp),%eax
00001b31	movl	0x04(%eax),%eax
00001b34	movl	%eax,0x10(%esp)
00001b38	movl	%esi,0x0c(%esp)
00001b3c	movl	0x14(%ebp),%ebx
00001b3f	movl	%ebx,0x08(%esp)
00001b43	movl	%edi,0x04(%esp)
00001b47	movl	0x08(%ebp),%eax
00001b4a	movl	%eax,(%esp)
00001b4d	calll	KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
00001b52	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001b59	jne	0x00001b7f
00001b5b	movl	(%edi),%eax
00001b5d	movl	%ebx,0x0c(%esp)
00001b61	movl	0xffffff7c(%ebp),%ecx
00001b67	leal	0x3a96d-0x1961(%ecx),%ecx
00001b6d	movl	%ecx,0x04(%esp)
00001b71	movl	%edi,(%esp)
00001b74	movl	$0x00000002,0x08(%esp)
00001b7c	call	*0x04(%eax)
00001b7f	testl	%esi,%esi
00001b81	je	0x000022ac
00001b87	movl	0xffffff7c(%ebp),%eax
00001b8d	leal	0x3a96d-0x1961(%eax),%eax
00001b93	movl	%eax,0x04(%esp)
00001b97	movl	%esi,(%esp)
00001b9a	movl	$0x00000002,0x08(%esp)
00001ba2	calll	CUtlBuffer::Put(void const*, int)
00001ba7	jmp	0x000022ac
00001bac	movl	0x0c(%ebp),%eax
00001baf	movl	0x08(%eax),%eax
00001bb2	testl	%eax,%eax
00001bb4	je	0x000022ac
00001bba	movl	0xffffff7c(%ebp),%ecx
00001bc0	leal	KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)::buf-0x1961(%ecx),%ecx
00001bc6	movl	%ecx,0xffffff6c(%ebp)
00001bcc	movl	%ecx,0x04(%esp)
00001bd0	movl	%eax,(%esp)
00001bd3	movl	$0x00001000,0x08(%esp)
00001bdb	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00001be0	testl	%eax,%eax
00001be2	je	0x000022ac
00001be8	incl	%ebx
00001be9	testl	%ebx,%ebx
00001beb	jle	0x00001c42
00001bed	nopl	(%eax)
00001bf0	testl	%edi,%edi
00001bf2	je	0x00001c1b
00001bf4	movl	(%edi),%eax
00001bf6	movl	0x14(%ebp),%ecx
00001bf9	movl	%ecx,0x0c(%esp)
00001bfd	movl	0xffffff7c(%ebp),%ecx
00001c03	leal	0x3a969-0x1961(%ecx),%ecx
00001c09	movl	%ecx,0x04(%esp)
00001c0d	movl	%edi,(%esp)
00001c10	movl	$0x00000001,0x08(%esp)
00001c18	call	*0x04(%eax)
00001c1b	testl	%esi,%esi
00001c1d	je	0x00001c3f
00001c1f	movl	0xffffff7c(%ebp),%eax
00001c25	leal	0x3a969-0x1961(%eax),%eax
00001c2b	movl	%eax,0x04(%esp)
00001c2f	movl	%esi,(%esp)
00001c32	movl	$0x00000001,0x08(%esp)
00001c3a	calll	CUtlBuffer::Put(void const*, int)
00001c3f	decl	%ebx
00001c40	jne	0x00001bf0
00001c42	movb	$0x01,0xffffff7b(%ebp)
00001c49	testl	%edi,%edi
00001c4b	je	0x00001c7b
00001c4d	movl	(%edi),%eax
00001c4f	movl	0x14(%ebp),%ecx
00001c52	movl	%ecx,0x0c(%esp)
00001c56	movl	0xffffff7c(%ebp),%ecx
00001c5c	leal	0x3a96b-0x1961(%ecx),%ecx
00001c62	movl	%ecx,0x04(%esp)
00001c66	movl	%edi,(%esp)
00001c69	movl	$0x00000001,0x08(%esp)
00001c71	call	*0x04(%eax)
00001c74	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001c7b	testl	%esi,%esi
00001c7d	movl	0xffffff7c(%ebp),%ebx
00001c83	je	0x00001c9f
00001c85	leal	0x3a96b-0x1961(%ebx),%eax
00001c8b	movl	%eax,0x04(%esp)
00001c8f	movl	%esi,(%esp)
00001c92	movl	$0x00000001,0x08(%esp)
00001c9a	calll	CUtlBuffer::Put(void const*, int)
00001c9f	movl	0x0c(%ebp),%esi
00001ca2	movl	(%esi),%eax
00001ca4	movl	%eax,(%esp)
00001ca7	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%ebx)
00001cad	movl	%eax,0xffffff74(%ebp)
00001cb3	movl	(%esi),%ecx
00001cb5	movl	%ecx,(%esp)
00001cb8	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%ebx)
00001cbe	movl	%eax,(%esp)
00001cc1	calll	_strlen
00001cc6	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001ccd	movl	0x14(%ebp),%ebx
00001cd0	jne	0x00001cf4
00001cd2	movl	(%edi),%ecx
00001cd4	movl	%ebx,0x0c(%esp)
00001cd8	movl	%eax,0x08(%esp)
00001cdc	movl	0xffffff74(%ebp),%edx
00001ce2	movl	%edx,0x04(%esp)
00001ce6	movl	%edi,(%esp)
00001ce9	movl	%ebx,%esi
00001ceb	movl	%eax,%ebx
00001ced	call	*0x04(%ecx)
00001cf0	movl	%ebx,%eax
00001cf2	movl	%esi,%ebx
00001cf4	movl	0xffffff74(%ebp),%ecx
00001cfa	movl	0x18(%ebp),%esi
00001cfd	testl	%esi,%esi
00001cff	je	0x00001d11
00001d01	movl	%eax,0x08(%esp)
00001d05	movl	%ecx,0x04(%esp)
00001d09	movl	%esi,(%esp)
00001d0c	calll	CUtlBuffer::Put(void const*, int)
00001d11	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001d18	jne	0x00001d3e
00001d1a	movl	(%edi),%eax
00001d1c	movl	%ebx,0x0c(%esp)
00001d20	movl	0xffffff7c(%ebp),%ecx
00001d26	leal	0x3a976-0x1961(%ecx),%ecx
00001d2c	movl	%ecx,0x04(%esp)
00001d30	movl	%edi,(%esp)
00001d33	movl	$0x00000004,0x08(%esp)
00001d3b	call	*0x04(%eax)
00001d3e	testl	%esi,%esi
00001d40	je	0x00001d62
00001d42	movl	0xffffff7c(%ebp),%eax
00001d48	leal	0x3a976-0x1961(%eax),%eax
00001d4e	movl	%eax,0x04(%esp)
00001d52	movl	%esi,(%esp)
00001d55	movl	$0x00000004,0x08(%esp)
00001d5d	calll	CUtlBuffer::Put(void const*, int)
00001d62	movl	0xffffff6c(%ebp),%eax
00001d68	movl	%eax,0x10(%esp)
00001d6c	movl	%esi,0x0c(%esp)
00001d70	jmp	0x00001b3f
00001d75	incl	%ebx
00001d76	testl	%ebx,%ebx
00001d78	jle	0x00001dd2
00001d7a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001d80	testl	%edi,%edi
00001d82	je	0x00001dab
00001d84	movl	(%edi),%eax
00001d86	movl	0x14(%ebp),%ecx
00001d89	movl	%ecx,0x0c(%esp)
00001d8d	movl	0xffffff7c(%ebp),%ecx
00001d93	leal	0x3a969-0x1961(%ecx),%ecx
00001d99	movl	%ecx,0x04(%esp)
00001d9d	movl	%edi,(%esp)
00001da0	movl	$0x00000001,0x08(%esp)
00001da8	call	*0x04(%eax)
00001dab	testl	%esi,%esi
00001dad	je	0x00001dcf
00001daf	movl	0xffffff7c(%ebp),%eax
00001db5	leal	0x3a969-0x1961(%eax),%eax
00001dbb	movl	%eax,0x04(%esp)
00001dbf	movl	%esi,(%esp)
00001dc2	movl	$0x00000001,0x08(%esp)
00001dca	calll	CUtlBuffer::Put(void const*, int)
00001dcf	decl	%ebx
00001dd0	jne	0x00001d80
00001dd2	movb	$0x01,%al
00001dd4	testl	%edi,%edi
00001dd6	movl	0xffffff7c(%ebp),%ebx
00001ddc	je	0x00001e01
00001dde	movl	(%edi),%eax
00001de0	movl	0x14(%ebp),%ecx
00001de3	movl	%ecx,0x0c(%esp)
00001de7	leal	0x3a96b-0x1961(%ebx),%ecx
00001ded	movl	%ecx,0x04(%esp)
00001df1	movl	%edi,(%esp)
00001df4	movl	$0x00000001,0x08(%esp)
00001dfc	call	*0x04(%eax)
00001dff	xorb	%al,%al
00001e01	movb	%al,0xffffff7b(%ebp)
00001e07	movl	%esi,%ecx
00001e09	testl	%ecx,%ecx
00001e0b	je	0x00001e27
00001e0d	leal	0x3a96b-0x1961(%ebx),%eax
00001e13	movl	%eax,0x04(%esp)
00001e17	movl	%ecx,(%esp)
00001e1a	movl	$0x00000001,0x08(%esp)
00001e22	calll	CUtlBuffer::Put(void const*, int)
00001e27	movl	%ebx,%esi
00001e29	movl	0x0c(%ebp),%ebx
00001e2c	movl	(%ebx),%eax
00001e2e	movl	%eax,(%esp)
00001e31	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00001e37	movl	%eax,0xffffff74(%ebp)
00001e3d	movl	(%ebx),%eax
00001e3f	movl	%eax,(%esp)
00001e42	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00001e48	movl	%eax,(%esp)
00001e4b	calll	_strlen
00001e50	movb	0xffffff7b(%ebp),%bl
00001e56	testb	%bl,%bl
00001e58	jne	0x00001e7b
00001e5a	movl	(%edi),%edx
00001e5c	movl	0x14(%ebp),%ecx
00001e5f	movl	%ecx,0x0c(%esp)
00001e63	movl	%eax,0x08(%esp)
00001e67	movl	0xffffff74(%ebp),%ecx
00001e6d	movl	%ecx,0x04(%esp)
00001e71	movl	%edi,(%esp)
00001e74	movl	%eax,%esi
00001e76	call	*0x04(%edx)
00001e79	movl	%esi,%eax
00001e7b	movl	0xffffff74(%ebp),%ecx
00001e81	movl	0x18(%ebp),%esi
00001e84	testl	%esi,%esi
00001e86	je	0x00001e98
00001e88	movl	%eax,0x08(%esp)
00001e8c	movl	%ecx,0x04(%esp)
00001e90	movl	%esi,(%esp)
00001e93	calll	CUtlBuffer::Put(void const*, int)
00001e98	testb	%bl,%bl
00001e9a	movl	0xffffff7c(%ebp),%ebx
00001ea0	jne	0x00001ec3
00001ea2	movl	(%edi),%eax
00001ea4	movl	0x14(%ebp),%ecx
00001ea7	movl	%ecx,0x0c(%esp)
00001eab	leal	0x3a976-0x1961(%ebx),%ecx
00001eb1	movl	%ecx,0x04(%esp)
00001eb5	movl	%edi,(%esp)
00001eb8	movl	$0x00000004,0x08(%esp)
00001ec0	call	*0x04(%eax)
00001ec3	testl	%esi,%esi
00001ec5	je	0x00001ee1
00001ec7	leal	0x3a976-0x1961(%ebx),%eax
00001ecd	movl	%eax,0x04(%esp)
00001ed1	movl	%esi,(%esp)
00001ed4	movl	$0x00000004,0x08(%esp)
00001edc	calll	CUtlBuffer::Put(void const*, int)
00001ee1	movl	0x0c(%ebp),%eax
00001ee4	movl	0x0c(%eax),%eax
00001ee7	movl	%eax,0x0c(%esp)
00001eeb	leal	0x3a97b-0x1961(%ebx),%eax
00001ef1	movl	%eax,0x08(%esp)
00001ef5	leal	0xd0(%ebp),%ebx
00001ef8	movl	%ebx,(%esp)
00001efb	movl	$0x00000020,0x04(%esp)
00001f03	calll	V_snprintf(char*, int, char const*, ...)
00001f08	movl	%ebx,(%esp)
00001f0b	calll	_strlen
00001f10	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001f17	jne	0x00001f34
00001f19	movl	(%edi),%edx
00001f1b	movl	0x14(%ebp),%ecx
00001f1e	movl	%ecx,0x0c(%esp)
00001f22	movl	%eax,0x08(%esp)
00001f26	movl	%ebx,0x04(%esp)
00001f2a	movl	%edi,(%esp)
00001f2d	movl	%eax,%esi
00001f2f	call	*0x04(%edx)
00001f32	movl	%esi,%eax
00001f34	movl	0x18(%ebp),%esi
00001f37	testl	%esi,%esi
00001f39	je	0x00001f4b
00001f3b	movl	%eax,0x08(%esp)
00001f3f	movl	%ebx,0x04(%esp)
00001f43	movl	%esi,(%esp)
00001f46	calll	CUtlBuffer::Put(void const*, int)
00001f4b	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffff7b(%ebp)
00001f52	jne	0x00001b7f
00001f58	movl	(%edi),%eax
00001f5a	movl	0x14(%ebp),%ecx
00001f5d	movl	%ecx,0x0c(%esp)
00001f61	jmp	0x00001b61
00001f66	incl	%ebx
00001f67	testl	%ebx,%ebx
00001f69	jle	0x00001fc2
00001f6b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00001f70	testl	%edi,%edi
00001f72	je	0x00001f9b
00001f74	movl	(%edi),%eax
00001f76	movl	0x14(%ebp),%ecx
00001f79	movl	%ecx,0x0c(%esp)
00001f7d	movl	0xffffff7c(%ebp),%ecx
00001f83	leal	0x3a969-0x1961(%ecx),%ecx
00001f89	movl	%ecx,0x04(%esp)
00001f8d	movl	%edi,(%esp)
00001f90	movl	$0x00000001,0x08(%esp)
00001f98	call	*0x04(%eax)
00001f9b	testl	%esi,%esi
00001f9d	je	0x00001fbf
00001f9f	movl	0xffffff7c(%ebp),%eax
00001fa5	leal	0x3a969-0x1961(%eax),%eax
00001fab	movl	%eax,0x04(%esp)
00001faf	movl	%esi,(%esp)
00001fb2	movl	$0x00000001,0x08(%esp)
00001fba	calll	CUtlBuffer::Put(void const*, int)
00001fbf	decl	%ebx
00001fc0	jne	0x00001f70
00001fc2	movb	$0x01,%al
00001fc4	testl	%edi,%edi
00001fc6	movl	0xffffff7c(%ebp),%ebx
00001fcc	je	0x00001ff1
00001fce	movl	(%edi),%eax
00001fd0	movl	0x14(%ebp),%ecx
00001fd3	movl	%ecx,0x0c(%esp)
00001fd7	leal	0x3a96b-0x1961(%ebx),%ecx
00001fdd	movl	%ecx,0x04(%esp)
00001fe1	movl	%edi,(%esp)
00001fe4	movl	$0x00000001,0x08(%esp)
00001fec	call	*0x04(%eax)
00001fef	xorb	%al,%al
00001ff1	movb	%al,0xffffff7b(%ebp)
00001ff7	movl	%esi,%ecx
00001ff9	testl	%ecx,%ecx
00001ffb	je	0x00002017
00001ffd	leal	0x3a96b-0x1961(%ebx),%eax
00002003	movl	%eax,0x04(%esp)
00002007	movl	%ecx,(%esp)
0000200a	movl	$0x00000001,0x08(%esp)
00002012	calll	CUtlBuffer::Put(void const*, int)
00002017	movl	%ebx,%esi
00002019	movl	0x0c(%ebp),%ebx
0000201c	movl	(%ebx),%eax
0000201e	movl	%eax,(%esp)
00002021	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00002027	movl	%eax,0xffffff74(%ebp)
0000202d	movl	(%ebx),%eax
0000202f	movl	%eax,(%esp)
00002032	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
00002038	movl	%eax,(%esp)
0000203b	calll	_strlen
00002040	movb	0xffffff7b(%ebp),%bl
00002046	testb	%bl,%bl
00002048	jne	0x0000206b
0000204a	movl	(%edi),%edx
0000204c	movl	0x14(%ebp),%ecx
0000204f	movl	%ecx,0x0c(%esp)
00002053	movl	%eax,0x08(%esp)
00002057	movl	0xffffff74(%ebp),%ecx
0000205d	movl	%ecx,0x04(%esp)
00002061	movl	%edi,(%esp)
00002064	movl	%eax,%esi
00002066	call	*0x04(%edx)
00002069	movl	%esi,%eax
0000206b	movl	0xffffff74(%ebp),%ecx
00002071	movl	0x18(%ebp),%esi
00002074	testl	%esi,%esi
00002076	je	0x00002088
00002078	movl	%eax,0x08(%esp)
0000207c	movl	%ecx,0x04(%esp)
00002080	movl	%esi,(%esp)
00002083	calll	CUtlBuffer::Put(void const*, int)
00002088	testb	%bl,%bl
0000208a	movl	0xffffff7c(%ebp),%ebx
00002090	jne	0x000020b3
00002092	movl	(%edi),%eax
00002094	movl	0x14(%ebp),%ecx
00002097	movl	%ecx,0x0c(%esp)
0000209b	leal	0x3a976-0x1961(%ebx),%ecx
000020a1	movl	%ecx,0x04(%esp)
000020a5	movl	%edi,(%esp)
000020a8	movl	$0x00000004,0x08(%esp)
000020b0	call	*0x04(%eax)
000020b3	testl	%esi,%esi
000020b5	je	0x000020d1
000020b7	leal	0x3a976-0x1961(%ebx),%eax
000020bd	movl	%eax,0x04(%esp)
000020c1	movl	%esi,(%esp)
000020c4	movl	$0x00000004,0x08(%esp)
000020cc	calll	CUtlBuffer::Put(void const*, int)
000020d1	movl	0x0c(%ebp),%eax
000020d4	movl	0x04(%eax),%ecx
000020d7	movl	(%ecx),%eax
000020d9	movl	0x04(%ecx),%ecx
000020dc	movl	%ecx,0x10(%esp)
000020e0	movl	%eax,0x0c(%esp)
000020e4	leal	0x3a97e-0x1961(%ebx),%eax
000020ea	movl	%eax,0x08(%esp)
000020ee	leal	0xb0(%ebp),%ebx
000020f1	jmp	0x00001ef8
000020f6	incl	%ebx
000020f7	testl	%ebx,%ebx
000020f9	jle	0x00002152
000020fb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002100	testl	%edi,%edi
00002102	je	0x0000212b
00002104	movl	(%edi),%eax
00002106	movl	0x14(%ebp),%ecx
00002109	movl	%ecx,0x0c(%esp)
0000210d	movl	0xffffff7c(%ebp),%ecx
00002113	leal	0x3a969-0x1961(%ecx),%ecx
00002119	movl	%ecx,0x04(%esp)
0000211d	movl	%edi,(%esp)
00002120	movl	$0x00000001,0x08(%esp)
00002128	call	*0x04(%eax)
0000212b	testl	%esi,%esi
0000212d	je	0x0000214f
0000212f	movl	0xffffff7c(%ebp),%eax
00002135	leal	0x3a969-0x1961(%eax),%eax
0000213b	movl	%eax,0x04(%esp)
0000213f	movl	%esi,(%esp)
00002142	movl	$0x00000001,0x08(%esp)
0000214a	calll	CUtlBuffer::Put(void const*, int)
0000214f	decl	%ebx
00002150	jne	0x00002100
00002152	movb	$0x01,%al
00002154	testl	%edi,%edi
00002156	movl	0xffffff7c(%ebp),%ebx
0000215c	je	0x00002181
0000215e	movl	(%edi),%eax
00002160	movl	0x14(%ebp),%ecx
00002163	movl	%ecx,0x0c(%esp)
00002167	leal	0x3a96b-0x1961(%ebx),%ecx
0000216d	movl	%ecx,0x04(%esp)
00002171	movl	%edi,(%esp)
00002174	movl	$0x00000001,0x08(%esp)
0000217c	call	*0x04(%eax)
0000217f	xorb	%al,%al
00002181	movb	%al,0xffffff7b(%ebp)
00002187	movl	%esi,%ecx
00002189	testl	%ecx,%ecx
0000218b	je	0x000021a7
0000218d	leal	0x3a96b-0x1961(%ebx),%eax
00002193	movl	%eax,0x04(%esp)
00002197	movl	%ecx,(%esp)
0000219a	movl	$0x00000001,0x08(%esp)
000021a2	calll	CUtlBuffer::Put(void const*, int)
000021a7	movl	%ebx,%esi
000021a9	movl	0x0c(%ebp),%ebx
000021ac	movl	(%ebx),%eax
000021ae	movl	%eax,(%esp)
000021b1	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
000021b7	movl	%eax,0xffffff74(%ebp)
000021bd	movl	(%ebx),%eax
000021bf	movl	%eax,(%esp)
000021c2	call	*KeyValues::s_pfGetStringForSymbol-0x1961(%esi)
000021c8	movl	%eax,(%esp)
000021cb	calll	_strlen
000021d0	movb	0xffffff7b(%ebp),%bl
000021d6	testb	%bl,%bl
000021d8	jne	0x000021fb
000021da	movl	(%edi),%edx
000021dc	movl	0x14(%ebp),%ecx
000021df	movl	%ecx,0x0c(%esp)
000021e3	movl	%eax,0x08(%esp)
000021e7	movl	0xffffff74(%ebp),%ecx
000021ed	movl	%ecx,0x04(%esp)
000021f1	movl	%edi,(%esp)
000021f4	movl	%eax,%esi
000021f6	call	*0x04(%edx)
000021f9	movl	%esi,%eax
000021fb	movl	0xffffff74(%ebp),%ecx
00002201	movl	0x18(%ebp),%esi
00002204	testl	%esi,%esi
00002206	je	0x00002218
00002208	movl	%eax,0x08(%esp)
0000220c	movl	%ecx,0x04(%esp)
00002210	movl	%esi,(%esp)
00002213	calll	CUtlBuffer::Put(void const*, int)
00002218	testb	%bl,%bl
0000221a	movl	0xffffff7c(%ebp),%ebx
00002220	jne	0x00002243
00002222	movl	(%edi),%eax
00002224	movl	0x14(%ebp),%ecx
00002227	movl	%ecx,0x0c(%esp)
0000222b	leal	0x3a976-0x1961(%ebx),%ecx
00002231	movl	%ecx,0x04(%esp)
00002235	movl	%edi,(%esp)
00002238	movl	$0x00000004,0x08(%esp)
00002240	call	*0x04(%eax)
00002243	testl	%esi,%esi
00002245	je	0x00002261
00002247	leal	0x3a976-0x1961(%ebx),%eax
0000224d	movl	%eax,0x04(%esp)
00002251	movl	%esi,(%esp)
00002254	movl	$0x00000004,0x08(%esp)
0000225c	calll	CUtlBuffer::Put(void const*, int)
00002261	movl	0x0c(%ebp),%eax
00002264	movss	0x0c(%eax),%xmm0
00002269	cvtss2sd	%xmm0,%xmm0
0000226d	movsd	%xmm0,0x0c(%esp)
00002273	leal	0x3a988-0x1961(%ebx),%eax
00002279	movl	%eax,0x08(%esp)
0000227d	leal	0x80(%ebp),%ebx
00002280	movl	%ebx,(%esp)
00002283	movl	KeyValues::GetStringForSymbolClassic(int),0x04(%esp)
0000228b	jmp	0x00001f03
00002290	movl	0xffffff7c(%ebp),%eax
00002296	leal	0x3a98b-0x1961(%eax),%eax
0000229c	movl	%eax,0x04(%esp)
000022a0	movl	$0x00000001,(%esp)
000022a7	calll	_DevMsg
000022ac	movl	0xffffff70(%ebp),%eax
000022b2	movl	(%eax),%eax
000022b4	cmpl	0xf0(%ebp),%eax
000022b7	jne	0x000022c4
000022b9	addl	$0x000000ac,%esp
000022bf	popl	%esi
000022c0	popl	%edi
000022c1	popl	%ebx
000022c2	popl	%ebp
000022c3	ret
000022c4	calll	___stack_chk_fail
000022c9	nopl	(%eax)
000022cc	js	0x000022ce
000022ce	addb	%al,(%eax)
000022d0	adcb	$0x04,%al
000022d2	addb	%al,(%eax)
000022d4	xchg	%ebp,%eax
000022d5	popl	%es
000022d6	addb	%al,(%eax)
000022d8	decl	%ebx
000022d9	orl	%eax,(%eax)
000022db	addb	%cl,0x02(%ebx)
000022de	addb	%al,(%eax)
000022e0	das
000022e1	orl	%eax,(%eax)
000022e3	addb	%al,0x0f000006
000022e9	popl	%ds
000022ea	testb	(%eax),%al
000022ec	addb	%al,(%eax)
000022ee	addb	%al,(%eax)
KeyValues::FindKey(int) const:
000022f0	movl	0x04(%esp),%ecx
000022f4	addl	$0x18,%ecx
000022f7	movl	0x08(%esp),%edx
000022fb	xorl	%eax,%eax
000022fd	jmp	0x00002303
000022ff	nop
00002300	addl	$0x14,%ecx
00002303	movl	(%ecx),%ecx
00002305	testl	%ecx,%ecx
00002307	je	0x0000230f
00002309	cmpl	%edx,(%ecx)
0000230b	jne	0x00002300
0000230d	movl	%ecx,%eax
0000230f	ret
KeyValues::FindKey(char const*, bool):
00002310	pushl	%ebp
00002311	movl	%esp,%ebp
00002313	pushl	%ebx
00002314	pushl	%edi
00002315	pushl	%esi
00002316	subl	$0x0000012c,%esp
0000231c	calll	0x00002321
00002321	popl	%eax
00002322	movl	%eax,0xfffffeec(%ebp)
00002328	movl	0x42cec-0x2321(%eax),%eax
0000232e	movl	%eax,0xfffffee8(%ebp)
00002334	movl	(%eax),%eax
00002336	movl	%eax,0xf0(%ebp)
00002339	movl	0x0c(%ebp),%esi
0000233c	movl	0x08(%ebp),%edi
0000233f	testl	%esi,%esi
00002341	je	0x000024f8
00002347	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
0000234a	je	0x000024f8
00002350	movl	%esi,(%esp)
00002353	movl	$0x0000002f,0x04(%esp)
0000235b	calll	_strchr
00002360	movl	%eax,%edi
00002362	testl	%edi,%edi
00002364	movl	%esi,%eax
00002366	movl	%eax,%ebx
00002368	je	0x0000238c
0000236a	movl	%edi,%esi
0000236c	subl	%eax,%esi
0000236e	movl	%esi,0x08(%esp)
00002372	movl	%eax,0x04(%esp)
00002376	leal	0xfffffef0(%ebp),%ebx
0000237c	movl	%ebx,(%esp)
0000237f	calll	_memcpy
00002384	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xfffffef0(%ebp,%esi)
0000238c	movl	%edi,0xfffffee4(%ebp)
00002392	movzbl	0x10(%ebp),%eax
00002396	movl	%eax,0xfffffee0(%ebp)
0000239c	movl	%eax,0x04(%esp)
000023a0	movl	%ebx,(%esp)
000023a3	movl	0xfffffeec(%ebp),%eax
000023a9	call	*KeyValues::s_pfGetSymbolForString-0x2321(%eax)
000023af	xorl	%edi,%edi
000023b1	cmpl	$0xff,%eax
000023b4	je	0x000024f8
000023ba	movl	0x08(%ebp),%edx
000023bd	leal	0x18(%edx),%ecx
000023c0	movl	%ecx,0xfffffedc(%ebp)
000023c6	xorl	%esi,%esi
000023c8	jmp	0x000023dd
000023ca	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000023d0	cmpl	%eax,(%edi)
000023d2	je	0x000024d3
000023d8	leal	0x14(%edi),%ecx
000023db	movl	%edi,%esi
000023dd	movl	(%ecx),%edi
000023df	testl	%edi,%edi
000023e1	jne	0x000023d0
000023e3	movl	0x1c(%edx),%eax
000023e6	testl	%eax,%eax
000023e8	je	0x0000240b
000023ea	movl	0x0c(%ebp),%ecx
000023ed	movl	%ecx,0x04(%esp)
000023f1	movl	%eax,(%esp)
000023f4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000023fc	calll	KeyValues::FindKey(char const*, bool)
00002401	movl	%eax,%edi
00002403	testl	%edi,%edi
00002405	jne	0x000024d3
0000240b	xorl	%edi,%edi
0000240d	cmpb	$0x01,0x10(%ebp)
00002411	jne	0x000024f8
00002417	calll	_KeyValuesSystem
0000241c	movl	(%eax),%ecx
0000241e	movl	%eax,(%esp)
00002421	movl	$0x00000020,0x04(%esp)
00002429	call	*0x04(%ecx)
0000242c	movl	%eax,%edi
0000242e	movl	$0xffffffff,(%edi)
00002434	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
0000243b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00002442	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00002449	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00002450	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00002457	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000245d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00002464	movb	$0x01,0x12(%edi)
00002468	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
0000246c	movl	0xfffffeec(%ebp),%eax
00002472	movl	KeyValues::s_pfGetSymbolForString-0x2321(%eax),%eax
00002478	movl	%ebx,(%esp)
0000247b	movl	$0x00000001,0x04(%esp)
00002483	call	*%eax
00002485	movl	%eax,(%edi)
00002487	movl	0x08(%ebp),%eax
0000248a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
0000248e	setne	0x11(%edi)
00002492	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00002496	setne	0x12(%edi)
0000249a	testl	%esi,%esi
0000249c	je	0x000024c0
0000249e	movl	%edi,0x14(%esi)
000024a1	jmp	0x000024c8
000024a3	movl	%eax,%esi
000024a5	calll	_KeyValuesSystem
000024aa	movl	(%eax),%ecx
000024ac	movl	0x08(%ecx),%ecx
000024af	movl	%edi,0x04(%esp)
000024b3	movl	%eax,(%esp)
000024b6	call	*%ecx
000024b8	movl	%esi,(%esp)
000024bb	calll	__Unwind_Resume
000024c0	movl	0xfffffedc(%ebp),%ecx
000024c6	movl	%edi,(%ecx)
000024c8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000024cf	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000024d3	movl	0xfffffee4(%ebp),%eax
000024d9	testl	%eax,%eax
000024db	je	0x000024f8
000024dd	movl	0xfffffee0(%ebp),%ecx
000024e3	movl	%ecx,0x08(%esp)
000024e7	leal	0x01(%eax),%eax
000024ea	movl	%eax,0x04(%esp)
000024ee	movl	%edi,(%esp)
000024f1	calll	KeyValues::FindKey(char const*, bool)
000024f6	movl	%eax,%edi
000024f8	movl	0xfffffee8(%ebp),%eax
000024fe	movl	(%eax),%eax
00002500	cmpl	0xf0(%ebp),%eax
00002503	jne	0x00002517
00002505	movl	%edi,%eax
00002507	addl	$0x0000012c,%esp
0000250d	popl	%esi
0000250e	popl	%edi
0000250f	popl	%ebx
00002510	popl	%ebp
00002511	ret
00002512	calll	std::terminate()
00002517	calll	___stack_chk_fail
0000251c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::operator new(unsigned long):
00002520	pushl	%ebp
00002521	movl	%esp,%ebp
00002523	subl	$0x08,%esp
00002526	calll	_KeyValuesSystem
0000252b	movl	(%eax),%ecx
0000252d	movl	0x08(%ebp),%edx
00002530	movl	%edx,0x04(%esp)
00002534	movl	%eax,(%esp)
00002537	call	*0x04(%ecx)
0000253a	addl	$0x08,%esp
0000253d	popl	%ebp
0000253e	ret
0000253f	nop
KeyValues::CreateNewKey():
00002540	pushl	%ebp
00002541	movl	%esp,%ebp
00002543	pushl	%ebx
00002544	pushl	%edi
00002545	pushl	%esi
00002546	subl	$0x2c,%esp
00002549	calll	0x0000254e
0000254e	popl	%ebx
0000254f	movl	0x42cec-0x254e(%ebx),%eax
00002555	movl	%eax,0xe0(%ebp)
00002558	movl	(%eax),%eax
0000255a	movl	%eax,0xf0(%ebp)
0000255d	movl	0x08(%ebp),%eax
00002560	movl	0x18(%eax),%eax
00002563	xorl	%edi,%edi
00002565	movl	$0x00000001,%esi
0000256a	jmp	0x00002590
0000256c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00002570	movl	%eax,%edi
00002572	movl	(%edi),%eax
00002574	movl	%eax,(%esp)
00002577	call	*KeyValues::s_pfGetStringForSymbol-0x254e(%ebx)
0000257d	movl	%eax,(%esp)
00002580	calll	_atoi
00002585	cmpl	%eax,%esi
00002587	leal	0x01(%eax),%eax
0000258a	cmovlel	%eax,%esi
0000258d	movl	0x14(%edi),%eax
00002590	testl	%eax,%eax
00002592	jne	0x00002570
00002594	movl	%esi,0x0c(%esp)
00002598	leal	0x3a97b-0x254e(%ebx),%eax
0000259e	movl	%eax,0x08(%esp)
000025a2	leal	0xe4(%ebp),%esi
000025a5	movl	%esi,(%esp)
000025a8	movl	$0x0000000c,0x04(%esp)
000025b0	calll	V_snprintf(char*, int, char const*, ...)
000025b5	movl	%edi,0x08(%esp)
000025b9	movl	%esi,0x04(%esp)
000025bd	movl	0x08(%ebp),%eax
000025c0	movl	%eax,(%esp)
000025c3	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
000025c8	movl	0xe0(%ebp),%ecx
000025cb	movl	(%ecx),%ecx
000025cd	cmpl	0xf0(%ebp),%ecx
000025d0	jne	0x000025da
000025d2	addl	$0x2c,%esp
000025d5	popl	%esi
000025d6	popl	%edi
000025d7	popl	%ebx
000025d8	popl	%ebp
000025d9	ret
000025da	calll	___stack_chk_fail
000025df	nop
KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*):
000025e0	pushl	%ebp
000025e1	movl	%esp,%ebp
000025e3	pushl	%edi
000025e4	pushl	%esi
000025e5	subl	$0x10,%esp
000025e8	calll	0x000025ed
000025ed	popl	%edi
000025ee	calll	_KeyValuesSystem
000025f3	movl	(%eax),%ecx
000025f5	movl	%eax,(%esp)
000025f8	movl	$0x00000020,0x04(%esp)
00002600	call	*0x04(%ecx)
00002603	movl	%eax,%esi
00002605	movl	$0xffffffff,(%esi)
0000260b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00002612	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00002619	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00002620	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00002627	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000262e	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00002634	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
0000263b	movb	$0x01,0x12(%esi)
0000263f	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00002643	movl	KeyValues::s_pfGetSymbolForString-0x25ed(%edi),%eax
00002649	movl	0x0c(%ebp),%ecx
0000264c	movl	%ecx,(%esp)
0000264f	movl	$0x00000001,0x04(%esp)
00002657	call	*%eax
00002659	movl	0x10(%ebp),%ecx
0000265c	movl	0x08(%ebp),%edx
0000265f	movl	%eax,(%esi)
00002661	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%edx)
00002665	setne	0x11(%esi)
00002669	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%edx)
0000266d	setne	0x12(%esi)
00002671	testl	%ecx,%ecx
00002673	jne	0x0000267a
00002675	movl	%esi,0x18(%edx)
00002678	jmp	0x0000267d
0000267a	movl	%esi,0x14(%ecx)
0000267d	movl	%esi,%eax
0000267f	addl	$0x10,%esp
00002682	popl	%esi
00002683	popl	%edi
00002684	popl	%ebp
00002685	ret
00002686	movl	%eax,%edi
00002688	calll	_KeyValuesSystem
0000268d	movl	(%eax),%ecx
0000268f	movl	0x08(%ecx),%ecx
00002692	movl	%esi,0x04(%esp)
00002696	movl	%eax,(%esp)
00002699	call	*%ecx
0000269b	movl	%edi,(%esp)
0000269e	calll	__Unwind_Resume
000026a3	calll	std::terminate()
000026a8	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::CreateKey(char const*):
000026b0	pushl	%ebp
000026b1	movl	%esp,%ebp
000026b3	subl	$0x18,%esp
000026b6	movl	0x08(%ebp),%eax
000026b9	movl	0x18(%eax),%edx
000026bc	xorl	%ecx,%ecx
000026be	jmp	0x000026c5
000026c0	movl	%edx,%ecx
000026c2	movl	0x14(%ecx),%edx
000026c5	testl	%edx,%edx
000026c7	jne	0x000026c0
000026c9	movl	0x0c(%ebp),%edx
000026cc	movl	%ecx,0x08(%esp)
000026d0	movl	%edx,0x04(%esp)
000026d4	movl	%eax,(%esp)
000026d7	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
000026dc	addl	$0x18,%esp
000026df	popl	%ebp
000026e0	ret
000026e1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::FindLastSubKey():
000026f0	movl	0x04(%esp),%eax
000026f4	movl	0x18(%eax),%ecx
000026f7	xorl	%eax,%eax
000026f9	jmp	0x00002705
000026fb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002700	movl	%ecx,%eax
00002702	movl	0x14(%eax),%ecx
00002705	testl	%ecx,%ecx
00002707	jne	0x00002700
00002709	ret
0000270a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::AddSubkeyUsingKnownLastChild(KeyValues*, KeyValues*):
00002710	movl	0x0c(%esp),%ecx
00002714	movl	0x08(%esp),%eax
00002718	testl	%ecx,%ecx
0000271a	jne	0x00002724
0000271c	movl	0x04(%esp),%ecx
00002720	movl	%eax,0x18(%ecx)
00002723	ret
00002724	movl	%eax,0x14(%ecx)
00002727	ret
00002728	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetNextKey(KeyValues*):
00002730	movl	0x08(%esp),%eax
00002734	movl	0x04(%esp),%ecx
00002738	movl	%eax,0x14(%ecx)
0000273b	ret
0000273c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::AddSubKey(KeyValues*):
00002740	movl	0x04(%esp),%edx
00002744	movl	0x18(%edx),%ecx
00002747	movl	0x08(%esp),%eax
0000274b	testl	%ecx,%ecx
0000274d	jne	0x00002760
0000274f	movl	%eax,0x18(%edx)
00002752	ret
00002753	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002760	movl	%ecx,%edx
00002762	movl	0x14(%edx),%ecx
00002765	testl	%ecx,%ecx
00002767	jne	0x00002760
00002769	movl	%eax,0x14(%edx)
0000276c	ret
0000276d	nopl	(%eax)
KeyValues::RemoveSubKey(KeyValues*):
00002770	movl	0x08(%esp),%eax
00002774	testl	%eax,%eax
00002776	je	0x000027ac
00002778	movl	0x04(%esp),%edx
0000277c	movl	0x18(%edx),%ecx
0000277f	cmpl	%eax,%ecx
00002781	jne	0x00002790
00002783	movl	0x14(%eax),%ecx
00002786	movl	%ecx,0x18(%edx)
00002789	jmp	0x000027a3
0000278b	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002790	movl	%ecx,%edx
00002792	movl	0x14(%edx),%ecx
00002795	testl	%ecx,%ecx
00002797	je	0x000027a3
00002799	cmpl	%eax,%ecx
0000279b	jne	0x00002790
0000279d	movl	0x14(%eax),%ecx
000027a0	movl	%ecx,0x14(%edx)
000027a3	addl	$0x14,%eax
000027a6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
000027ac	ret
000027ad	nopl	(%eax)
KeyValues::GetFirstTrueSubKey():
000027b0	movl	0x04(%esp),%eax
000027b4	addl	$0x18,%eax
000027b7	jmp	0x000027c3
000027b9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
000027c0	addl	$0x14,%eax
000027c3	movl	(%eax),%eax
000027c5	testl	%eax,%eax
000027c7	je	0x000027cf
000027c9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000027cd	jne	0x000027c0
000027cf	ret
KeyValues::GetNextTrueSubKey():
000027d0	movl	0x04(%esp),%eax
000027d4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000027e0	movl	0x14(%eax),%eax
000027e3	testl	%eax,%eax
000027e5	je	0x000027ed
000027e7	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000027eb	jne	0x000027e0
000027ed	ret
000027ee	nop
KeyValues::GetFirstValue():
000027f0	movl	0x04(%esp),%eax
000027f4	addl	$0x18,%eax
000027f7	jmp	0x00002803
000027f9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00002800	addl	$0x14,%eax
00002803	movl	(%eax),%eax
00002805	testl	%eax,%eax
00002807	je	0x0000280f
00002809	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000280d	je	0x00002800
0000280f	ret
KeyValues::GetNextValue():
00002810	movl	0x04(%esp),%eax
00002814	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00002820	movl	0x14(%eax),%eax
00002823	testl	%eax,%eax
00002825	je	0x0000282d
00002827	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000282b	je	0x00002820
0000282d	ret
0000282e	nop
KeyValues::GetInt(char const*, int):
00002830	pushl	%ebp
00002831	movl	%esp,%ebp
00002833	pushl	%esi
00002834	subl	$0x14,%esp
00002837	calll	0x0000283c
0000283c	popl	%esi
0000283d	movl	0x0c(%ebp),%eax
00002840	movl	%eax,0x04(%esp)
00002844	movl	0x08(%ebp),%eax
00002847	movl	%eax,(%esp)
0000284a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002852	calll	KeyValues::FindKey(char const*, bool)
00002857	testl	%eax,%eax
00002859	jne	0x00002860
0000285b	movl	0x10(%ebp),%ecx
0000285e	jmp	0x000028a9
00002860	movsbl	0x10(%eax),%edx
00002864	decl	%edx
00002865	cmpl	$0x06,%edx
00002868	ja	0x000028a6
0000286a	xorl	%ecx,%ecx
0000286c	addl	0x00000078(%esi,%edx,4),%esi
00002873	jmp	*%esi
00002875	movl	0x04(%eax),%eax
00002878	movl	%eax,(%esp)
0000287b	calll	_atoi
00002880	jmp	0x000028ab
00002882	movl	0x08(%eax),%eax
00002885	movl	%eax,(%esp)
00002888	movl	$0x0000000a,0x08(%esp)
00002890	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002898	calll	_wcstol
0000289d	jmp	0x000028ab
0000289f	cvttss2si	0x0c(%eax),%ecx
000028a4	jmp	0x000028a9
000028a6	movl	0x0c(%eax),%ecx
000028a9	movl	%ecx,%eax
000028ab	addl	$0x14,%esp
000028ae	popl	%esi
000028af	popl	%ebp
000028b0	ret
000028b1	nopl	(%eax)
000028b4	cmpl	%eax,(%eax)
000028b6	addb	%al,(%eax)
000028b8	pushl	KeyValues::GetSymbolForStringClassic(char const*, bool)
000028ba	addb	%al,(%eax)
000028bc	arpl	%ax,(%eax)
000028be	addb	%al,(%eax)
000028c0	pushl	KeyValues::GetSymbolForStringClassic(char const*, bool)
000028c2	addb	%al,(%eax)
000028c4	incl	%esi
000028c5	addb	%al,(%eax)
000028c7	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx)
000028ca	addb	%al,(%eax)
000028cc	insl
000028cd	addb	%al,(%eax)
000028cf	addb	%dl,0x89(%ebp)
000028d2	inl	$0x56,%eax
000028d4	subl	$0x14,%esp
000028d7	calll	0x000028dc
000028dc	popl	%esi
000028dd	movl	0x0c(%ebp),%eax
000028e0	movl	%eax,0x04(%esp)
000028e4	movl	0x08(%ebp),%eax
000028e7	movl	%eax,(%esp)
000028ea	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000028f2	calll	KeyValues::FindKey(char const*, bool)
000028f7	testl	%eax,%eax
000028f9	jne	0x00002903
000028fb	movl	0x14(%ebp),%edx
000028fe	movl	0x10(%ebp),%eax
00002901	jmp	0x00002959
00002903	movsbl	0x10(%eax),%ecx
00002907	decl	%ecx
00002908	cmpl	$0x06,%ecx
0000290b	ja	0x00002951
0000290d	addl	0x00000084(%esi,%ecx,4),%esi
00002914	jmp	*%esi
00002916	movl	0x04(%eax),%eax
00002919	movl	%eax,(%esp)
0000291c	calll	V_atoi64(char const*)
00002921	jmp	0x00002959
00002923	movl	0x08(%eax),%eax
00002926	movl	%eax,(%esp)
00002929	movl	$0x0000000a,0x08(%esp)
00002931	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002939	calll	_wcstoll
0000293e	jmp	0x00002959
00002940	cvttss2si	0x0c(%eax),%eax
00002945	jmp	0x00002954
00002947	movl	0x04(%eax),%ecx
0000294a	movl	(%ecx),%eax
0000294c	movl	0x04(%ecx),%edx
0000294f	jmp	0x00002959
00002951	movl	0x0c(%eax),%eax
00002954	movl	%eax,%edx
00002956	sarl	$0x1f,%edx
00002959	addl	$0x14,%esp
0000295c	popl	%esi
0000295d	popl	%ebp
0000295e	ret
0000295f	nop
00002960	cmpb	(%eax),%al
00002962	addb	%al,(%eax)
00002964	jne	0x00002966
00002966	addb	%al,(%eax)
00002968	addb	%al,%fs:(%eax)
0000296b	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebp)
0000296e	addb	%al,(%eax)
00002970	incl	%edi
00002971	addb	%al,(%eax)
00002973	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebp)
00002976	addb	%al,(%eax)
00002978	imull	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax),%eax
0000297b	addb	%cl,(%edi)
0000297d	popl	%ds
0000297e	incl	%eax
0000297f	addb	%dl,0x89(%ebp)
00002982	inl	$0x83,%eax
00002984	inb	%dx,%al
00002985	sbbb	%cl,0x44890c45(%ebx)
0000298b	andb	$0x04,%al
0000298d	movl	0x08(%ebp),%eax
00002990	movl	%eax,(%esp)
00002993	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000299b	calll	KeyValues::FindKey(char const*, bool)
000029a0	movl	%eax,%ecx
000029a2	testl	%ecx,%ecx
000029a4	jne	0x000029ab
000029a6	movl	0x10(%ebp),%eax
000029a9	jmp	0x000029b6
000029ab	xorl	%eax,%eax
000029ad	cmpb	$0x04,0x10(%ecx)
000029b1	jne	0x000029b6
000029b3	movl	0x0c(%ecx),%eax
000029b6	addl	$0x18,%esp
000029b9	popl	%ebp
000029ba	ret
000029bb	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetFloat(char const*, float):
000029c0	pushl	%ebp
000029c1	movl	%esp,%ebp
000029c3	pushl	%esi
000029c4	subl	$0x24,%esp
000029c7	calll	0x000029cc
000029cc	popl	%esi
000029cd	movl	0x0c(%ebp),%eax
000029d0	movl	%eax,0x04(%esp)
000029d4	movl	0x08(%ebp),%eax
000029d7	movl	%eax,(%esp)
000029da	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000029e2	calll	KeyValues::FindKey(char const*, bool)
000029e7	testl	%eax,%eax
000029e9	jne	0x000029f2
000029eb	movss	0x10(%ebp),%xmm0
000029f0	jmp	0x00002a58
000029f2	movsbl	0x10(%eax),%ecx
000029f6	decl	%ecx
000029f7	pxor	%xmm0,%xmm0
000029fb	cmpl	$0x06,%ecx
000029fe	ja	0x00002a58
00002a00	movl	0x0000009c(%esi,%ecx,4),%ecx
00002a07	addl	%esi,%ecx
00002a09	jmp	*%ecx
00002a0b	movl	0x04(%eax),%eax
00002a0e	movl	%eax,(%esp)
00002a11	calll	_atof
00002a16	fstps	0xe8(%ebp)
00002a19	movss	0xe8(%ebp),%xmm0
00002a1e	jmp	0x00002a58
00002a20	movss	0x0c(%eax),%xmm0
00002a25	jmp	0x00002a58
00002a27	cvtsi2ss	0x0c(%eax),%xmm0
00002a2c	jmp	0x00002a58
00002a2e	movl	0x04(%eax),%eax
00002a31	movl	(%eax),%ecx
00002a33	movl	0x04(%eax),%eax
00002a36	movl	%eax,0xf4(%ebp)
00002a39	movl	%ecx,0xf0(%ebp)
00002a3c	testl	%eax,%eax
00002a3e	sets	%al
00002a41	xorb	$0x01,%al
00002a43	movzbl	%al,%eax
00002a46	fildq	0xf0(%ebp)
00002a49	fadds	0x3a8f0-0x29cc(%esi,%eax,4)
00002a50	fstps	0xec(%ebp)
00002a53	movss	0xec(%ebp),%xmm0
00002a58	movss	%xmm0,0xe4(%ebp)
00002a5d	flds	0xe4(%ebp)
00002a60	addl	$0x24,%esp
00002a63	popl	%esi
00002a64	popl	%ebp
00002a65	ret
00002a66	nop
00002a68	aas
00002a69	addb	%al,(%eax)
00002a6b	addb	%bl,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx)
00002a6e	addb	%al,(%eax)
00002a70	pushl	%esp
00002a71	addb	%al,(%eax)
00002a73	addb	%cl,0x008c0000(%eax,%eax)
00002a7a	addb	%al,(%eax)
00002a7c	mov	%es,(%eax)
00002a7e	addb	%al,(%eax)
00002a80	bound	(%eax),%eax
00002a82	addb	%al,(%eax)
00002a84	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetString(char const*, char const*):
00002a90	pushl	%ebp
00002a91	movl	%esp,%ebp
00002a93	pushl	%ebx
00002a94	pushl	%edi
00002a95	pushl	%esi
00002a96	subl	$0x0000025c,%esp
00002a9c	calll	0x00002aa1
00002aa1	popl	%ebx
00002aa2	movl	0x42cec-0x2aa1(%ebx),%eax
00002aa8	movl	%eax,0xfffffdac(%ebp)
00002aae	movl	(%eax),%eax
00002ab0	movl	%eax,0xf0(%ebp)
00002ab3	movl	0x0c(%ebp),%eax
00002ab6	movl	%eax,0x04(%esp)
00002aba	movl	0x08(%ebp),%eax
00002abd	movl	%eax,(%esp)
00002ac0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002ac8	calll	KeyValues::FindKey(char const*, bool)
00002acd	movl	%eax,%esi
00002acf	movl	0x10(%ebp),%edi
00002ad2	testl	%esi,%esi
00002ad4	je	0x00002b86
00002ada	movsbl	0x10(%esi),%eax
00002ade	decl	%eax
00002adf	cmpl	$0x06,%eax
00002ae2	ja	0x00002b86
00002ae8	movl	0x00000107(%ebx,%eax,4),%eax
00002aef	addl	%ebx,%eax
00002af1	jmp	*%eax
00002af3	movss	0x0c(%esi),%xmm0
00002af8	cvtss2sd	%xmm0,%xmm0
00002afc	movsd	%xmm0,0x0c(%esp)
00002b02	leal	0x3a988-0x2aa1(%ebx),%eax
00002b08	jmp	0x00002b17
00002b0a	movl	0x0c(%esi),%eax
00002b0d	movl	%eax,0x0c(%esp)
00002b11	leal	0x3a97b-0x2aa1(%ebx),%eax
00002b17	movl	%eax,0x08(%esp)
00002b1b	leal	0xb0(%ebp),%edi
00002b1e	movl	%edi,(%esp)
00002b21	movl	$0x00000040,0x04(%esp)
00002b29	calll	V_snprintf(char*, int, char const*, ...)
00002b2e	movl	%edi,0x08(%esp)
00002b32	jmp	0x00002b71
00002b34	movl	0x04(%esi),%ecx
00002b37	movl	(%ecx),%eax
00002b39	movl	0x04(%ecx),%ecx
00002b3c	movl	%ecx,0x10(%esp)
00002b40	movl	%eax,0x0c(%esp)
00002b44	leal	0x3a9cf-0x2aa1(%ebx),%eax
00002b4a	jmp	0x00002b17
00002b4c	movl	0x08(%esi),%eax
00002b4f	leal	0xfffffdb0(%ebp),%ebx
00002b55	movl	%ebx,0x04(%esp)
00002b59	movl	%eax,(%esp)
00002b5c	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
00002b64	calll	V_UnicodeToUTF8(wchar_t const*, char*, int)
00002b69	testl	%eax,%eax
00002b6b	je	0x00002b86
00002b6d	movl	%ebx,0x08(%esp)
00002b71	movl	0x0c(%ebp),%eax
00002b74	movl	%eax,0x04(%esp)
00002b78	movl	0x08(%ebp),%eax
00002b7b	movl	%eax,(%esp)
00002b7e	calll	KeyValues::SetString(char const*, char const*)
00002b83	movl	0x04(%esi),%edi
00002b86	movl	0xfffffdac(%ebp),%eax
00002b8c	movl	(%eax),%eax
00002b8e	cmpl	0xf0(%ebp),%eax
00002b91	jne	0x00002ba0
00002b93	movl	%edi,%eax
00002b95	addl	$0x0000025c,%esp
00002b9b	popl	%esi
00002b9c	popl	%edi
00002b9d	popl	%ebx
00002b9e	popl	%ebp
00002b9f	ret
00002ba0	calll	___stack_chk_fail
00002ba5	nopl	(%eax)
00002ba8	loop	0x00002baa
00002baa	addb	%al,(%eax)
00002bac	imull	$0x00520000,(%eax),%eax
00002bb2	addb	%al,(%eax)
00002bb4	imull	$0x00ab0000,(%eax),%eax
00002bba	addb	%al,(%eax)
00002bbc	inl	KeyValues::GetSymbolForStringClassic(char const*, bool),%eax
00002bbe	addb	%al,(%eax)
00002bc0	xchgl	%ebx,%eax
00002bc1	addb	%al,(%eax)
00002bc3	addb	%ah,0x66(%esi)
00002bc6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetWString(char const*, wchar_t const*):
00002bd0	pushl	%ebp
00002bd1	movl	%esp,%ebp
00002bd3	pushl	%ebx
00002bd4	pushl	%edi
00002bd5	pushl	%esi
00002bd6	subl	$0x0000012c,%esp
00002bdc	calll	0x00002be1
00002be1	popl	%edi
00002be2	movl	0x42cec-0x2be1(%edi),%eax
00002be8	movl	%eax,0xfffffee8(%ebp)
00002bee	movl	(%eax),%eax
00002bf0	movl	%eax,0xf0(%ebp)
00002bf3	movl	0x0c(%ebp),%eax
00002bf6	movl	%eax,0x04(%esp)
00002bfa	movl	0x08(%ebp),%ebx
00002bfd	movl	%ebx,(%esp)
00002c00	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002c08	calll	KeyValues::FindKey(char const*, bool)
00002c0d	movl	%eax,%esi
00002c0f	movl	0x10(%ebp),%eax
00002c12	movl	%eax,0xfffffeec(%ebp)
00002c18	testl	%esi,%esi
00002c1a	je	0x00002d34
00002c20	movsbl	0x10(%esi),%eax
00002c24	decl	%eax
00002c25	cmpl	$0x06,%eax
00002c28	ja	0x00002d34
00002c2e	movl	0x00000177(%edi,%eax,4),%eax
00002c35	addl	%edi,%eax
00002c37	jmp	*%eax
00002c39	movss	0x0c(%esi),%xmm0
00002c3e	cvtss2sd	%xmm0,%xmm0
00002c42	movsd	%xmm0,0x0c(%esp)
00002c48	leal	0x3ac50-0x2be1(%edi),%eax
00002c4e	jmp	0x00002c5d
00002c50	movl	0x0c(%esi),%eax
00002c53	movl	%eax,0x0c(%esp)
00002c57	leal	0x3ac5c-0x2be1(%edi),%eax
00002c5d	movl	%eax,0x08(%esp)
00002c61	movl	%esi,%edi
00002c63	leal	0xfffffef0(%ebp),%esi
00002c69	movl	%esi,(%esp)
00002c6c	movl	$0x00000040,0x04(%esp)
00002c74	calll	_swprintf
00002c79	movl	%esi,0x08(%esp)
00002c7d	movl	%edi,%esi
00002c7f	movl	0x0c(%ebp),%eax
00002c82	movl	%eax,0x04(%esp)
00002c86	movl	%ebx,(%esp)
00002c89	calll	KeyValues::SetWString(char const*, wchar_t const*)
00002c8e	jmp	0x00002d1d
00002c93	movl	0x04(%esi),%ecx
00002c96	movl	(%ecx),%eax
00002c98	movl	0x04(%ecx),%ecx
00002c9b	movl	%ecx,0x10(%esp)
00002c9f	movl	%eax,0x0c(%esp)
00002ca3	leal	0x3ac68-0x2be1(%edi),%eax
00002ca9	jmp	0x00002c5d
00002cab	movl	%esi,0xfffffee4(%ebp)
00002cb1	movl	0x04(%esi),%esi
00002cb4	movl	%esi,(%esp)
00002cb7	calll	_strlen
00002cbc	movl	%eax,%edi
00002cbe	leal	0x01(%edi),%eax
00002cc1	movl	$0xffffffff,%ecx
00002cc6	movl	$0x00000004,%edx
00002ccb	mull	%edx
00002ccd	cmovol	%ecx,%eax
00002cd0	movl	%eax,(%esp)
00002cd3	calll	operator new[](unsigned long)
00002cd8	movl	%eax,%ebx
00002cda	leal	0x00000004(,%edi,4),%eax
00002ce1	movl	%eax,0x08(%esp)
00002ce5	movl	%ebx,0x04(%esp)
00002ce9	movl	%esi,(%esp)
00002cec	calll	V_UTF8ToUnicode(char const*, wchar_t*, int)
00002cf1	testl	%eax,%eax
00002cf3	js	0x00002d28
00002cf5	movl	%ebx,0x08(%esp)
00002cf9	movl	0x0c(%ebp),%eax
00002cfc	movl	%eax,0x04(%esp)
00002d00	movl	0x08(%ebp),%eax
00002d03	movl	%eax,(%esp)
00002d06	calll	KeyValues::SetWString(char const*, wchar_t const*)
00002d0b	testl	%ebx,%ebx
00002d0d	movl	0xfffffee4(%ebp),%esi
00002d13	je	0x00002d1d
00002d15	movl	%ebx,(%esp)
00002d18	calll	operator delete[](void*)
00002d1d	movl	0x08(%esi),%eax
00002d20	movl	%eax,0xfffffeec(%ebp)
00002d26	jmp	0x00002d34
00002d28	testl	%ebx,%ebx
00002d2a	je	0x00002d34
00002d2c	movl	%ebx,(%esp)
00002d2f	calll	operator delete[](void*)
00002d34	movl	0xfffffee8(%ebp),%eax
00002d3a	movl	(%eax),%eax
00002d3c	cmpl	0xf0(%ebp),%eax
00002d3f	jne	0x00002d52
00002d41	movl	0xfffffeec(%ebp),%eax
00002d47	addl	$0x0000012c,%esp
00002d4d	popl	%esi
00002d4e	popl	%edi
00002d4f	popl	%ebx
00002d50	popl	%ebp
00002d51	ret
00002d52	calll	___stack_chk_fail
00002d57	nop
00002d58	lretl	KeyValues::GetSymbolForStringClassic(char const*, bool)
00002d5b	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edi)
00002d5e	addb	%al,(%eax)
00002d60	popl	%eax
00002d61	addb	%al,(%eax)
00002d63	addb	%ch,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edi)
00002d66	addb	%al,(%eax)
00002d68	cmpb	$0x01,%al
00002d6a	addb	%al,(%eax)
00002d6c	pushl	%ebx
00002d6d	addl	%eax,(%eax)
00002d6f	addb	%dh,0x66000000(%edx)
00002d75	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::GetBool(char const*, bool):
00002d80	pushl	%ebp
00002d81	movl	%esp,%ebp
00002d83	pushl	%ebx
00002d84	pushl	%edi
00002d85	pushl	%esi
00002d86	subl	$0x0c,%esp
00002d89	calll	0x00002d8e
00002d8e	popl	%edi
00002d8f	movl	0x0c(%ebp),%esi
00002d92	movl	%esi,0x04(%esp)
00002d96	movl	0x08(%ebp),%ebx
00002d99	movl	%ebx,(%esp)
00002d9c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002da4	calll	KeyValues::FindKey(char const*, bool)
00002da9	testl	%eax,%eax
00002dab	jne	0x00002db2
00002dad	movb	0x10(%ebp),%al
00002db0	jmp	0x00002e1e
00002db2	movl	%esi,0x04(%esp)
00002db6	movl	%ebx,(%esp)
00002db9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002dc1	xorl	%esi,%esi
00002dc3	calll	KeyValues::FindKey(char const*, bool)
00002dc8	testl	%eax,%eax
00002dca	je	0x00002e19
00002dcc	movsbl	0x10(%eax),%ecx
00002dd0	decl	%ecx
00002dd1	cmpl	$0x06,%ecx
00002dd4	ja	0x00002e16
00002dd6	xorl	%esi,%esi
00002dd8	addl	0x0000009e(%edi,%ecx,4),%edi
00002ddf	jmp	*%edi
00002de1	movl	0x04(%eax),%eax
00002de4	movl	%eax,(%esp)
00002de7	calll	_atoi
00002dec	movl	%eax,%esi
00002dee	jmp	0x00002e19
00002df0	movl	0x08(%eax),%eax
00002df3	movl	%eax,(%esp)
00002df6	movl	$0x0000000a,0x08(%esp)
00002dfe	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00002e06	calll	_wcstol
00002e0b	movl	%eax,%esi
00002e0d	jmp	0x00002e19
00002e0f	cvttss2si	0x0c(%eax),%esi
00002e14	jmp	0x00002e19
00002e16	movl	0x0c(%eax),%esi
00002e19	testl	%esi,%esi
00002e1b	setne	%al
00002e1e	movzbl	%al,%eax
00002e21	addl	$0x0c,%esp
00002e24	popl	%esi
00002e25	popl	%edi
00002e26	popl	%ebx
00002e27	popl	%ebp
00002e28	ret
00002e29	nopl	(%eax)
00002e2c	pushl	%ebx
00002e2d	addb	%al,(%eax)
00002e2f	addb	%cl,0x81000000(%eax)
00002e35	addb	%al,(%eax)
00002e37	addb	%cl,0x62000000(%eax)
00002e3d	addb	%al,(%eax)
00002e3f	addb	%cl,0x8b000000(%eax)
00002e45	addb	%al,(%eax)
00002e47	addb	%cl,(%edi)
00002e49	popl	%ds
00002e4a	testb	(%eax),%al
00002e4c	addb	%al,(%eax)
00002e4e	addb	%al,(%eax)
KeyValues::GetColor(char const*):
00002e50	pushl	%ebp
00002e51	movl	%esp,%ebp
00002e53	pushl	%edi
00002e54	pushl	%esi
00002e55	subl	KeyValues::GetStringForSymbolClassic(int),%esp
00002e58	calll	0x00002e5d
00002e5d	popl	%edi
00002e5e	movl	0x0c(%ebp),%eax
00002e61	movl	%eax,0x04(%esp)
00002e65	movl	0x08(%ebp),%eax
00002e68	movl	%eax,(%esp)
00002e6b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00002e73	xorl	%esi,%esi
00002e75	calll	KeyValues::FindKey(char const*, bool)
00002e7a	testl	%eax,%eax
00002e7c	je	0x00002f48
00002e82	movb	0x10(%eax),%cl
00002e85	decb	%cl
00002e87	xorl	%esi,%esi
00002e89	cmpb	$0x05,%cl
00002e8c	ja	0x00002f48
00002e92	movzbl	%cl,%ecx
00002e95	movl	0x000000f7(%edi,%ecx,4),%ecx
00002e9c	addl	%edi,%ecx
00002e9e	jmp	*%ecx
00002ea0	movzbl	0x0c(%eax),%ecx
00002ea4	movzbl	0x0d(%eax),%edx
00002ea8	shll	$0x08,%edx
00002eab	orl	%ecx,%edx
00002ead	movzbl	0x0e(%eax),%ecx
00002eb1	shll	$0x10,%ecx
00002eb4	orl	%edx,%ecx
00002eb6	movzbl	0x0f(%eax),%esi
00002eba	jmp	0x00002f43
00002ebf	cvttss2si	0x0c(%eax),%eax
00002ec4	movzbl	%al,%esi
00002ec7	jmp	0x00002f48
00002ec9	movzbl	0x0c(%eax),%esi
00002ecd	jmp	0x00002f48
00002ecf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xf4(%ebp)
00002ed6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xf0(%ebp)
00002edd	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xec(%ebp)
00002ee4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
00002eeb	movl	0x04(%eax),%eax
00002eee	leal	0xe8(%ebp),%ecx
00002ef1	movl	%ecx,0x14(%esp)
00002ef5	leal	0xec(%ebp),%ecx
00002ef8	movl	%ecx,0x10(%esp)
00002efc	leal	0xf0(%ebp),%ecx
00002eff	movl	%ecx,0x0c(%esp)
00002f03	leal	0xf4(%ebp),%ecx
00002f06	movl	%ecx,0x08(%esp)
00002f0a	leal	0x3a9d4-0x2e5d(%edi),%ecx
00002f10	movl	%ecx,0x04(%esp)
00002f14	movl	%eax,(%esp)
00002f17	calll	_sscanf
00002f1c	cvttss2si	0xf4(%ebp),%eax
00002f21	movzbl	%al,%ecx
00002f24	cvttss2si	0xf0(%ebp),%eax
00002f29	movzbl	%al,%eax
00002f2c	shll	$0x08,%eax
00002f2f	orl	%ecx,%eax
00002f31	cvttss2si	0xec(%ebp),%ecx
00002f36	movzbl	%cl,%ecx
00002f39	shll	$0x10,%ecx
00002f3c	orl	%eax,%ecx
00002f3e	cvttss2si	0xe8(%ebp),%esi
00002f43	shll	$0x18,%esi
00002f46	orl	%ecx,%esi
00002f48	movl	%esi,%eax
00002f4a	addl	KeyValues::GetStringForSymbolClassic(int),%esp
00002f4d	popl	%esi
00002f4e	popl	%edi
00002f4f	popl	%ebp
00002f50	ret
00002f51	nopl	(%eax)
00002f54	jb	0x00002f56
00002f56	addb	%al,(%eax)
00002f58	insb
00002f59	addb	%al,(%eax)
00002f5b	addb	%ah,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx)
00002f5e	addb	%al,(%eax)
00002f60	jmp	0x00002f62
00002f62	addb	%al,(%eax)
00002f64	jmp	0x00002f66
00002f66	addb	%al,(%eax)
00002f68	incl	%ebx
00002f69	addb	%al,(%eax)
00002f6b	addb	%cl,(%edi)
00002f6d	popl	%ds
00002f6e	incl	%eax
00002f6f	addb	%dl,0x89(%ebp)
00002f72	inl	$0x83,%eax
00002f74	inb	%dx,%al
00002f75	sbbb	%cl,0x44890c45(%ebx)
00002f7b	andb	$0x04,%al
00002f7d	movl	0x08(%ebp),%eax
00002f80	movl	%eax,(%esp)
00002f83	movl	$0x00000001,0x08(%esp)
00002f8b	calll	KeyValues::FindKey(char const*, bool)
00002f90	testl	%eax,%eax
00002f92	je	0x00002fb1
00002f94	leal	0x10(%ebp),%ecx
00002f97	movb	$0x06,0x10(%eax)
00002f9b	movl	(%ecx),%ecx
00002f9d	movb	%cl,0x0c(%eax)
00002fa0	movb	%ch,0x0d(%eax)
00002fa3	movl	%ecx,%edx
00002fa5	shrl	$0x10,%edx
00002fa8	movb	%dl,0x0e(%eax)
00002fab	shrl	$0x18,%ecx
00002fae	movb	%cl,0x0f(%eax)
00002fb1	addl	$0x18,%esp
00002fb4	popl	%ebp
00002fb5	ret
00002fb6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetStringValue(char const*):
00002fc0	pushl	%ebp
00002fc1	movl	%esp,%ebp
00002fc3	pushl	%ebx
00002fc4	pushl	%edi
00002fc5	pushl	%esi
00002fc6	subl	$0x0c,%esp
00002fc9	calll	0x00002fce
00002fce	popl	%esi
00002fcf	movl	0x08(%ebp),%edi
00002fd2	movl	0x04(%edi),%eax
00002fd5	testl	%eax,%eax
00002fd7	je	0x00002fe1
00002fd9	movl	%eax,(%esp)
00002fdc	calll	operator delete[](void*)
00002fe1	movl	0x08(%edi),%eax
00002fe4	testl	%eax,%eax
00002fe6	je	0x00002ff0
00002fe8	movl	%eax,(%esp)
00002feb	calll	operator delete[](void*)
00002ff0	movl	0x0c(%ebp),%eax
00002ff3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00002ffa	leal	0x3a9e0-0x2fce(%esi),%ebx
00003000	testl	%eax,%eax
00003002	cmovnel	%eax,%ebx
00003005	movl	%ebx,(%esp)
00003008	calll	_strlen
0000300d	movl	%eax,%esi
0000300f	incl	%esi
00003010	testl	%esi,%esi
00003012	movl	$0xffffffff,%eax
00003017	cmovnsl	%esi,%eax
0000301a	movl	%eax,(%esp)
0000301d	calll	operator new[](unsigned long)
00003022	movl	%eax,0x04(%edi)
00003025	movl	%esi,0x08(%esp)
00003029	movl	%ebx,0x04(%esp)
0000302d	movl	%eax,(%esp)
00003030	calll	_memcpy
00003035	movb	$0x01,0x10(%edi)
00003039	addl	$0x0c,%esp
0000303c	popl	%esi
0000303d	popl	%edi
0000303e	popl	%ebx
0000303f	popl	%ebp
00003040	ret
00003041	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetUint64(char const*, unsigned long long):
00003050	pushl	%ebp
00003051	movl	%esp,%ebp
00003053	pushl	%ebx
00003054	pushl	%edi
00003055	pushl	%esi
00003056	subl	$0x0c,%esp
00003059	movl	0x0c(%ebp),%eax
0000305c	movl	%eax,0x04(%esp)
00003060	movl	0x08(%ebp),%eax
00003063	movl	%eax,(%esp)
00003066	movl	$0x00000001,0x08(%esp)
0000306e	calll	KeyValues::FindKey(char const*, bool)
00003073	movl	%eax,%esi
00003075	testl	%esi,%esi
00003077	je	0x000030bc
00003079	movl	0x04(%esi),%eax
0000307c	testl	%eax,%eax
0000307e	je	0x00003088
00003080	movl	%eax,(%esp)
00003083	calll	operator delete[](void*)
00003088	movl	0x08(%esi),%eax
0000308b	testl	%eax,%eax
0000308d	je	0x00003097
0000308f	movl	%eax,(%esp)
00003092	calll	operator delete[](void*)
00003097	movl	0x14(%ebp),%edi
0000309a	movl	0x10(%ebp),%ebx
0000309d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
000030a4	movl	$0x00000008,(%esp)
000030ab	calll	operator new[](unsigned long)
000030b0	movl	%eax,0x04(%esi)
000030b3	movl	%edi,0x04(%eax)
000030b6	movl	%ebx,(%eax)
000030b8	movb	$0x07,0x10(%esi)
000030bc	addl	$0x0c,%esp
000030bf	popl	%esi
000030c0	popl	%edi
000030c1	popl	%ebx
000030c2	popl	%ebp
000030c3	ret
000030c4	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetFloat(char const*, float):
000030d0	pushl	%ebp
000030d1	movl	%esp,%ebp
000030d3	subl	$0x18,%esp
000030d6	movl	0x0c(%ebp),%eax
000030d9	movl	%eax,0x04(%esp)
000030dd	movl	0x08(%ebp),%eax
000030e0	movl	%eax,(%esp)
000030e3	movl	$0x00000001,0x08(%esp)
000030eb	calll	KeyValues::FindKey(char const*, bool)
000030f0	testl	%eax,%eax
000030f2	je	0x00003102
000030f4	movss	0x10(%ebp),%xmm0
000030f9	movss	%xmm0,0x0c(%eax)
000030fe	movb	$0x03,0x10(%eax)
00003102	addl	$0x18,%esp
00003105	popl	%ebp
00003106	ret
00003107	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::SetPtr(char const*, void*):
00003110	pushl	%ebp
00003111	movl	%esp,%ebp
00003113	subl	$0x18,%esp
00003116	movl	0x0c(%ebp),%eax
00003119	movl	%eax,0x04(%esp)
0000311d	movl	0x08(%ebp),%eax
00003120	movl	%eax,(%esp)
00003123	movl	$0x00000001,0x08(%esp)
0000312b	calll	KeyValues::FindKey(char const*, bool)
00003130	testl	%eax,%eax
00003132	je	0x0000313e
00003134	movl	0x10(%ebp),%ecx
00003137	movl	%ecx,0x0c(%eax)
0000313a	movb	$0x04,0x10(%eax)
0000313e	addl	$0x18,%esp
00003141	popl	%ebp
00003142	ret
00003143	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveCopyKeyValues(KeyValues&):
00003150	pushl	%ebp
00003151	movl	%esp,%ebp
00003153	pushl	%ebx
00003154	pushl	%edi
00003155	pushl	%esi
00003156	subl	$0x0000012c,%esp
0000315c	calll	0x00003161
00003161	popl	%eax
00003162	movl	%eax,0xfffffeec(%ebp)
00003168	movl	0x42cec-0x3161(%eax),%eax
0000316e	movl	%eax,0xfffffee8(%ebp)
00003174	movl	(%eax),%eax
00003176	movl	%eax,0xf0(%ebp)
00003179	movl	0x0c(%ebp),%ebx
0000317c	movl	(%ebx),%eax
0000317e	movl	0x08(%ebp),%esi
00003181	movl	%eax,(%esi)
00003183	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
00003187	jne	0x000032c5
0000318d	movb	0x10(%ebx),%al
00003190	movb	%al,0x10(%esi)
00003193	movsbl	0x10(%ebx),%eax
00003197	decl	%eax
00003198	cmpl	$0x06,%eax
0000319b	ja	0x000032bb
000031a1	movl	0xfffffeec(%ebp),%ecx
000031a7	movl	0x000002d3(%ecx,%eax,4),%eax
000031ae	addl	%ecx,%eax
000031b0	jmp	*%eax
000031b2	movl	0x04(%ebx),%eax
000031b5	testl	%eax,%eax
000031b7	je	0x000032bb
000031bd	movl	%eax,(%esp)
000031c0	calll	_strlen
000031c5	movl	%esi,%edi
000031c7	movl	%eax,%esi
000031c9	incl	%esi
000031ca	testl	%esi,%esi
000031cc	movl	$0xffffffff,%eax
000031d1	cmovnsl	%esi,%eax
000031d4	movl	%eax,(%esp)
000031d7	calll	operator new[](unsigned long)
000031dc	movl	%eax,0x04(%edi)
000031df	movl	0x04(%ebx),%ecx
000031e2	movl	%esi,0x08(%esp)
000031e6	movl	%edi,%esi
000031e8	movl	%ecx,0x04(%esp)
000031ec	movl	%eax,(%esp)
000031ef	calll	V_strncpy(char*, char const*, int)
000031f4	jmp	0x000032bb
000031f9	movl	0x0c(%ebx),%eax
000031fc	movl	%eax,0x0c(%esi)
000031ff	movl	%eax,0x0c(%esp)
00003203	movl	0xfffffeec(%ebp),%eax
00003209	leal	0x3a97b-0x3161(%eax),%eax
0000320f	movl	%eax,0x08(%esp)
00003213	leal	0xfffffef0(%ebp),%edi
00003219	movl	%edi,(%esp)
0000321c	movl	$0x00000100,0x04(%esp)
00003224	calll	V_snprintf(char*, int, char const*, ...)
00003229	movl	%edi,(%esp)
0000322c	calll	_strlen
00003231	movl	%ebx,%edi
00003233	movl	%esi,%ebx
00003235	movl	%eax,%esi
00003237	incl	%esi
00003238	testl	%esi,%esi
0000323a	movl	$0xffffffff,%eax
0000323f	cmovnsl	%esi,%eax
00003242	movl	%eax,(%esp)
00003245	calll	operator new[](unsigned long)
0000324a	movl	%eax,0x04(%ebx)
0000324d	movl	%esi,0x08(%esp)
00003251	movl	%ebx,%esi
00003253	movl	%edi,%ebx
00003255	leal	0xfffffef0(%ebp),%ecx
0000325b	jmp	0x000031e8
0000325d	movss	0x0c(%ebx),%xmm0
00003262	movss	%xmm0,0x0c(%esi)
00003267	cvtss2sd	%xmm0,%xmm0
0000326b	movsd	%xmm0,0x0c(%esp)
00003271	movl	0xfffffeec(%ebp),%eax
00003277	leal	0x3a988-0x3161(%eax),%eax
0000327d	jmp	0x0000320f
0000327f	movl	0x0c(%ebx),%eax
00003282	movl	%eax,0x0c(%esi)
00003285	jmp	0x000032bb
00003287	movl	$0x00000008,(%esp)
0000328e	calll	operator new[](unsigned long)
00003293	movl	%eax,0x04(%esi)
00003296	movl	0x04(%ebx),%ecx
00003299	movsd	(%ecx),%xmm0
0000329d	movsd	%xmm0,(%eax)
000032a1	jmp	0x000032bb
000032a3	movb	0x0c(%ebx),%al
000032a6	movb	%al,0x0c(%esi)
000032a9	movb	0x0d(%ebx),%al
000032ac	movb	%al,0x0d(%esi)
000032af	movb	0x0e(%ebx),%al
000032b2	movb	%al,0x0e(%esi)
000032b5	movb	0x0f(%ebx),%al
000032b8	movb	%al,0x0f(%esi)
000032bb	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
000032bf	je	0x0000334b
000032c5	calll	_KeyValuesSystem
000032ca	movl	(%eax),%ecx
000032cc	movl	%eax,(%esp)
000032cf	movl	$0x00000020,0x04(%esp)
000032d7	call	*0x04(%ecx)
000032da	movl	%eax,%edi
000032dc	movl	$0xffffffff,(%edi)
000032e2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
000032e9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000032f0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
000032f7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
000032fe	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00003305	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000330b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00003312	movb	$0x01,0x12(%edi)
00003316	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
0000331a	movl	0xfffffeec(%ebp),%eax
00003320	movl	KeyValues::s_pfGetSymbolForString-0x3161(%eax),%eax
00003326	movl	$0x00000001,0x04(%esp)
0000332e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esp)
00003335	call	*%eax
00003337	movl	%eax,(%edi)
00003339	movl	%edi,0x18(%esi)
0000333c	movl	0x18(%ebx),%eax
0000333f	movl	%eax,0x04(%esp)
00003343	movl	%edi,(%esp)
00003346	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
0000334b	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebx)
0000334f	je	0x000033db
00003355	calll	_KeyValuesSystem
0000335a	movl	(%eax),%ecx
0000335c	movl	%eax,(%esp)
0000335f	movl	$0x00000020,0x04(%esp)
00003367	call	*0x04(%ecx)
0000336a	movl	%eax,%edi
0000336c	movl	$0xffffffff,(%edi)
00003372	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00003379	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00003380	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00003387	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
0000338e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00003395	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
0000339b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
000033a2	movb	$0x01,0x12(%edi)
000033a6	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
000033aa	movl	0xfffffeec(%ebp),%eax
000033b0	movl	KeyValues::s_pfGetSymbolForString-0x3161(%eax),%eax
000033b6	movl	$0x00000001,0x04(%esp)
000033be	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esp)
000033c5	call	*%eax
000033c7	movl	%eax,(%edi)
000033c9	movl	%edi,0x14(%esi)
000033cc	movl	0x14(%ebx),%eax
000033cf	movl	%eax,0x04(%esp)
000033d3	movl	%edi,(%esp)
000033d6	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
000033db	movl	0xfffffee8(%ebp),%eax
000033e1	movl	(%eax),%eax
000033e3	cmpl	0xf0(%ebp),%eax
000033e6	jne	0x00003427
000033e8	addl	$0x0000012c,%esp
000033ee	popl	%esi
000033ef	popl	%edi
000033f0	popl	%ebx
000033f1	popl	%ebp
000033f2	ret
000033f3	movl	%eax,%esi
000033f5	calll	_KeyValuesSystem
000033fa	movl	(%eax),%ecx
000033fc	movl	0x08(%ecx),%ecx
000033ff	movl	%edi,0x04(%esp)
00003403	movl	%eax,(%esp)
00003406	call	*%ecx
00003408	jmp	0x0000341f
0000340a	movl	%eax,%esi
0000340c	calll	_KeyValuesSystem
00003411	movl	(%eax),%ecx
00003413	movl	0x08(%ecx),%ecx
00003416	movl	%edi,0x04(%esp)
0000341a	movl	%eax,(%esp)
0000341d	call	*%ecx
0000341f	movl	%esi,(%esp)
00003422	calll	__Unwind_Resume
00003427	calll	___stack_chk_fail
0000342c	calll	std::terminate()
00003431	nopl	(%eax)
00003434	pushl	%ecx
00003435	addb	%al,(%eax)
00003437	addb	%bl,0xfc000000(%eax)
0000343d	addb	%al,(%eax)
0000343f	addb	%bl,(%esi)
00003441	addl	%eax,(%eax)
00003443	addb	%bl,0x01(%edx)
00003446	addb	%al,(%eax)
00003448	incl	%edx
00003449	addl	%eax,(%eax)
0000344b	addb	%ah,(%esi)
0000344d	addl	%eax,(%eax)
0000344f	addb	%dl,0x89(%ebp)
00003452	inl	$0x56,%eax
00003454	subl	$0x14,%esp
00003457	movl	0x08(%ebp),%esi
0000345a	movl	%esi,(%esp)
0000345d	calll	KeyValues::RemoveEverything()
00003462	movl	$0xffffffff,(%esi)
00003468	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
0000346f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003476	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000347d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003484	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000348b	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003491	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003498	movb	$0x01,0x12(%esi)
0000349c	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000034a0	movl	0x0c(%ebp),%eax
000034a3	movl	%eax,0x04(%esp)
000034a7	movl	%esi,(%esp)
000034aa	calll	KeyValues::RecursiveCopyKeyValues(KeyValues&)
000034af	movl	%esi,%eax
000034b1	addl	$0x14,%esp
000034b4	popl	%esi
000034b5	popl	%ebp
000034b6	ret
000034b7	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::CopySubkeys(KeyValues*) const:
000034c0	pushl	%ebp
000034c1	movl	%esp,%ebp
000034c3	pushl	%ebx
000034c4	pushl	%edi
000034c5	pushl	%esi
000034c6	subl	$0x0c,%esp
000034c9	movl	0x08(%ebp),%eax
000034cc	movl	0x18(%eax),%esi
000034cf	testl	%esi,%esi
000034d1	je	0x00003504
000034d3	movl	0x0c(%ebp),%edi
000034d6	xorl	%ebx,%ebx
000034d8	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000034e0	movl	%esi,(%esp)
000034e3	calll	KeyValues::MakeCopy() const
000034e8	testl	%ebx,%ebx
000034ea	je	0x000034f1
000034ec	movl	%eax,0x14(%ebx)
000034ef	jmp	0x000034f4
000034f1	movl	%eax,0x18(%edi)
000034f4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000034fb	movl	0x14(%esi),%esi
000034fe	testl	%esi,%esi
00003500	movl	%eax,%ebx
00003502	jne	0x000034e0
00003504	addl	$0x0c,%esp
00003507	popl	%esi
00003508	popl	%edi
00003509	popl	%ebx
0000350a	popl	%ebp
0000350b	ret
0000350c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::MakeCopy() const:
00003510	pushl	%ebp
00003511	movl	%esp,%ebp
00003513	pushl	%ebx
00003514	pushl	%edi
00003515	pushl	%esi
00003516	subl	$0x1c,%esp
00003519	calll	0x0000351e
0000351e	popl	%edi
0000351f	calll	_KeyValuesSystem
00003524	movl	(%eax),%ecx
00003526	movl	%eax,(%esp)
00003529	movl	$0x00000020,0x04(%esp)
00003531	call	*0x04(%ecx)
00003534	movl	%eax,%esi
00003536	movl	0x08(%ebp),%ebx
00003539	movl	(%ebx),%eax
0000353b	movl	KeyValues::s_pfGetStringForSymbol-0x351e(%edi),%ecx
00003541	movl	%eax,(%esp)
00003544	call	*%ecx
00003546	movl	$0xffffffff,(%esi)
0000354c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003553	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
0000355a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00003561	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003568	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000356f	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003575	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
0000357c	movb	$0x01,0x12(%esi)
00003580	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00003584	movl	KeyValues::s_pfGetSymbolForString-0x351e(%edi),%ecx
0000358a	movl	%eax,(%esp)
0000358d	movl	$0x00000001,0x04(%esp)
00003595	call	*%ecx
00003597	movl	%eax,(%esi)
00003599	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%ebx)
0000359d	setne	0x11(%esi)
000035a1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ebx)
000035a5	setne	0x12(%esi)
000035a9	movb	0x10(%ebx),%al
000035ac	movb	%al,0x10(%esi)
000035af	movsbl	0x10(%ebx),%eax
000035b3	decl	%eax
000035b4	cmpl	$0x06,%eax
000035b7	ja	0x000036b9
000035bd	leal	0x04(%esi),%ecx
000035c0	addl	0x000001e6(%edi,%eax,4),%edi
000035c7	jmp	*%edi
000035c9	movl	%eax,%edi
000035cb	calll	_KeyValuesSystem
000035d0	movl	(%eax),%ecx
000035d2	movl	0x08(%ecx),%ecx
000035d5	movl	%esi,0x04(%esp)
000035d9	movl	%eax,(%esp)
000035dc	call	*%ecx
000035de	movl	%edi,(%esp)
000035e1	calll	__Unwind_Resume
000035e6	movl	0x04(%ebx),%eax
000035e9	testl	%eax,%eax
000035eb	movl	%ecx,0xf0(%ebp)
000035ee	je	0x000036b9
000035f4	movl	%eax,(%esp)
000035f7	calll	_strlen
000035fc	movl	%eax,%edi
000035fe	incl	%edi
000035ff	testl	%edi,%edi
00003601	movl	$0xffffffff,%eax
00003606	cmovnsl	%edi,%eax
00003609	movl	%eax,(%esp)
0000360c	calll	operator new[](unsigned long)
00003611	movl	0xf0(%ebp),%ecx
00003614	movl	%eax,(%ecx)
00003616	movl	0x04(%ebx),%ecx
00003619	movl	%edi,0x08(%esp)
0000361d	movl	%ecx,0x04(%esp)
00003621	movl	%eax,(%esp)
00003624	calll	_memcpy
00003629	jmp	0x000036b9
0000362e	movl	0x08(%ebx),%eax
00003631	testl	%eax,%eax
00003633	je	0x000036b9
00003639	movl	%eax,(%esp)
0000363c	calll	_wcslen
00003641	movl	%eax,%edi
00003643	leal	0x01(%edi),%eax
00003646	movl	$0xffffffff,%ecx
0000364b	movl	$0x00000004,%edx
00003650	mull	%edx
00003652	cmovol	%ecx,%eax
00003655	movl	%eax,(%esp)
00003658	calll	operator new[](unsigned long)
0000365d	movl	%eax,0x08(%esi)
00003660	movl	0x08(%ebx),%ecx
00003663	leal	0x00000004(,%edi,4),%edx
0000366a	movl	%edx,0x08(%esp)
0000366e	jmp	0x0000361d
00003670	movss	0x0c(%ebx),%xmm0
00003675	movss	%xmm0,0x0c(%esi)
0000367a	jmp	0x000036b9
0000367c	movl	0x0c(%ebx),%eax
0000367f	movl	%eax,0x0c(%esi)
00003682	jmp	0x000036b9
00003684	movb	0x0c(%ebx),%al
00003687	movb	%al,0x0c(%esi)
0000368a	movb	0x0d(%ebx),%al
0000368d	movb	%al,0x0d(%esi)
00003690	movb	0x0e(%ebx),%al
00003693	movb	%al,0x0e(%esi)
00003696	movb	0x0f(%ebx),%al
00003699	movb	%al,0x0f(%esi)
0000369c	jmp	0x000036b9
0000369e	movl	$0x00000008,(%esp)
000036a5	movl	%ecx,%edi
000036a7	calll	operator new[](unsigned long)
000036ac	movl	%eax,(%edi)
000036ae	movl	0x04(%ebx),%ecx
000036b1	movsd	(%ecx),%xmm0
000036b5	movsd	%xmm0,(%eax)
000036b9	movl	0x18(%ebx),%edi
000036bc	testl	%edi,%edi
000036be	je	0x000036f4
000036c0	xorl	%ebx,%ebx
000036c2	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000036d0	movl	%edi,(%esp)
000036d3	calll	KeyValues::MakeCopy() const
000036d8	testl	%ebx,%ebx
000036da	je	0x000036e1
000036dc	movl	%eax,0x14(%ebx)
000036df	jmp	0x000036e4
000036e1	movl	%eax,0x18(%esi)
000036e4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000036eb	movl	0x14(%edi),%edi
000036ee	testl	%edi,%edi
000036f0	movl	%eax,%ebx
000036f2	jne	0x000036d0
000036f4	movl	%esi,%eax
000036f6	addl	$0x1c,%esp
000036f9	popl	%esi
000036fa	popl	%edi
000036fb	popl	%ebx
000036fc	popl	%ebp
000036fd	ret
000036fe	calll	std::terminate()
00003703	nop
00003704	enter	KeyValues::GetSymbolForStringClassic(char const*, bool),KeyValues::GetSymbolForStringClassic(char const*, bool)
00003708	popl	%esi
00003709	addl	%eax,(%eax)
0000370b	addb	%dl,0x01(%edx)
0000370e	addb	%al,(%eax)
00003710	popl	%esi
00003711	addl	%eax,(%eax)
00003713	addb	%dl,(%eax)
00003715	addl	%eax,(%eax)
00003717	addb	%ah,0x01(%esi)
0000371a	addb	%al,(%eax)
0000371c	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ecx)
0000371f	addb	%dl,0x89(%ebp)
00003722	inl	$0x83,%eax
00003724	inb	%dx,%al
00003725	sbbb	%cl,0x44890c45(%ebx)
0000372b	andb	$0x04,%al
0000372d	movl	0x08(%ebp),%eax
00003730	movl	%eax,(%esp)
00003733	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000373b	calll	KeyValues::FindKey(char const*, bool)
00003740	movb	$0x01,%cl
00003742	testl	%eax,%eax
00003744	je	0x00003756
00003746	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
0000374a	jne	0x00003754
0000374c	movb	$0x01,%cl
0000374e	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
00003752	je	0x00003756
00003754	xorb	%cl,%cl
00003756	movzbl	%cl,%eax
00003759	addl	$0x18,%esp
0000375c	popl	%ebp
0000375d	ret
0000375e	nop
KeyValues::Clear():
00003760	pushl	%ebp
00003761	movl	%esp,%ebp
00003763	pushl	%edi
00003764	pushl	%esi
00003765	subl	$0x10,%esp
00003768	movl	0x08(%ebp),%esi
0000376b	movl	0x18(%esi),%edi
0000376e	testl	%edi,%edi
00003770	je	0x0000378b
00003772	movl	%edi,(%esp)
00003775	calll	KeyValues::RemoveEverything()
0000377a	calll	_KeyValuesSystem
0000377f	movl	(%eax),%ecx
00003781	movl	%edi,0x04(%esp)
00003785	movl	%eax,(%esp)
00003788	call	*0x08(%ecx)
0000378b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003792	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003796	addl	$0x10,%esp
00003799	popl	%esi
0000379a	popl	%edi
0000379b	popl	%ebp
0000379c	ret
0000379d	movl	%eax,%esi
0000379f	calll	_KeyValuesSystem
000037a4	movl	(%eax),%ecx
000037a6	movl	0x08(%ecx),%ecx
000037a9	movl	%edi,0x04(%esp)
000037ad	movl	%eax,(%esp)
000037b0	call	*%ecx
000037b2	movl	%esi,(%esp)
000037b5	calll	__Unwind_Resume
000037ba	calll	std::terminate()
000037bf	nop
KeyValues::GetDataType(char const*):
000037c0	pushl	%ebp
000037c1	movl	%esp,%ebp
000037c3	subl	$0x18,%esp
000037c6	movl	0x0c(%ebp),%eax
000037c9	movl	%eax,0x04(%esp)
000037cd	movl	0x08(%ebp),%eax
000037d0	movl	%eax,(%esp)
000037d3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000037db	calll	KeyValues::FindKey(char const*, bool)
000037e0	testl	%eax,%eax
000037e2	jne	0x000037e8
000037e4	xorl	%eax,%eax
000037e6	jmp	0x000037ec
000037e8	movsbl	0x10(%eax),%eax
000037ec	addl	$0x18,%esp
000037ef	popl	%ebp
000037f0	ret
000037f1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::deleteThis():
00003800	pushl	%ebp
00003801	movl	%esp,%ebp
00003803	pushl	%edi
00003804	pushl	%esi
00003805	subl	$0x10,%esp
00003808	movl	0x08(%ebp),%edi
0000380b	testl	%edi,%edi
0000380d	je	0x00003828
0000380f	movl	%edi,(%esp)
00003812	calll	KeyValues::RemoveEverything()
00003817	calll	_KeyValuesSystem
0000381c	movl	(%eax),%ecx
0000381e	movl	%edi,0x04(%esp)
00003822	movl	%eax,(%esp)
00003825	call	*0x08(%ecx)
00003828	addl	$0x10,%esp
0000382b	popl	%esi
0000382c	popl	%edi
0000382d	popl	%ebp
0000382e	ret
0000382f	movl	%eax,%esi
00003831	calll	_KeyValuesSystem
00003836	movl	(%eax),%ecx
00003838	movl	0x08(%ecx),%ecx
0000383b	movl	%edi,0x04(%esp)
0000383f	movl	%eax,(%esp)
00003842	call	*%ecx
00003844	movl	%esi,(%esp)
00003847	calll	__Unwind_Resume
0000384c	calll	std::terminate()
00003851	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::AppendIncludedKeys(CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
00003860	pushl	%ebx
00003861	pushl	%edi
00003862	pushl	%esi
00003863	movl	0x14(%esp),%eax
00003867	movl	0x0c(%eax),%ecx
0000386a	testl	%ecx,%ecx
0000386c	jle	0x000038a3
0000386e	movl	0x10(%esp),%esi
00003872	xorl	%edx,%edx
00003874	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003880	movl	(%eax),%edi
00003882	movl	(%edi,%edx,4),%ebx
00003885	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003890	movl	%esi,%edi
00003892	movl	0x14(%edi),%esi
00003895	testl	%esi,%esi
00003897	jne	0x00003890
00003899	movl	%ebx,0x14(%edi)
0000389c	incl	%edx
0000389d	cmpl	%ecx,%edx
0000389f	movl	%edi,%esi
000038a1	jne	0x00003880
000038a3	popl	%esi
000038a4	popl	%edi
000038a5	popl	%ebx
000038a6	ret
000038a7	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
000038b0	pushl	%ebp
000038b1	movl	%esp,%ebp
000038b3	pushl	%ebx
000038b4	pushl	%edi
000038b5	pushl	%esi
000038b6	subl	$0x0000021c,%esp
000038bc	calll	0x000038c1
000038c1	popl	%edi
000038c2	movl	0x42cec-0x38c1(%edi),%eax
000038c8	movl	%eax,0xfffffdec(%ebp)
000038ce	movl	(%eax),%eax
000038d0	movl	%eax,0xf0(%ebp)
000038d3	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebp)
000038d7	je	0x00003a8f
000038dd	movl	0x10(%ebp),%esi
000038e0	movl	0x0c(%ebp),%eax
000038e3	movl	%eax,0x04(%esp)
000038e7	leal	0xfffffdf0(%ebp),%ebx
000038ed	movl	%ebx,(%esp)
000038f0	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
000038f8	calll	V_strncpy(char*, char const*, int)
000038fd	movl	%ebx,(%esp)
00003900	calll	_strlen
00003905	jmp	0x0000391b
00003907	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003910	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xfffffdef(%ebp,%eax)
00003918	leal	0xff(%eax),%eax
0000391b	testl	%eax,%eax
0000391d	jle	0x00003930
0000391f	movb	0xfffffdef(%ebp,%eax),%cl
00003926	cmpb	$0x2f,%cl
00003929	je	0x00003930
0000392b	cmpb	$0x5c,%cl
0000392e	jne	0x00003910
00003930	movl	%esi,0x04(%esp)
00003934	movl	%ebx,(%esp)
00003937	movl	$0xffffffff,0x0c(%esp)
0000393f	movl	KeyValues::GetSymbolForStringGrowable(char const*, bool),0x08(%esp)
00003947	calll	V_strncat(char*, char const*, unsigned long, int)
0000394c	calll	_KeyValuesSystem
00003951	movl	(%eax),%ecx
00003953	movl	%eax,(%esp)
00003956	movl	$0x00000020,0x04(%esp)
0000395e	call	*0x04(%ecx)
00003961	movl	%eax,%esi
00003963	movl	$0xffffffff,(%esi)
00003969	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003970	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003977	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
0000397e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003985	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000398c	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003992	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003999	movb	$0x01,0x12(%esi)
0000399d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
000039a1	movl	KeyValues::s_pfGetSymbolForString-0x38c1(%edi),%eax
000039a7	movl	%ebx,(%esp)
000039aa	movl	$0x00000001,0x04(%esp)
000039b2	call	*%eax
000039b4	movl	%eax,(%esi)
000039b6	movl	0x08(%ebp),%eax
000039b9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
000039bd	setne	0x11(%esi)
000039c1	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
000039c5	setne	0x12(%esi)
000039c9	movl	0x18(%ebp),%eax
000039cc	movl	%eax,0x0c(%esp)
000039d0	movl	%ebx,0x08(%esp)
000039d4	movl	0x14(%ebp),%eax
000039d7	movl	%eax,0x04(%esp)
000039db	movl	%esi,(%esp)
000039de	calll	KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*)
000039e3	cmpb	$0x01,%al
000039e5	jne	0x00003a75
000039eb	movl	0x1c(%ebp),%edx
000039ee	movl	0x04(%edx),%eax
000039f1	movl	0x0c(%edx),%edi
000039f4	leal	0x01(%edi),%ebx
000039f7	cmpl	%eax,%ebx
000039f9	movl	%edi,%ecx
000039fb	jle	0x00003a20
000039fd	movl	%ebx,%ecx
000039ff	subl	%eax,%ecx
00003a01	movl	%ecx,0x04(%esp)
00003a05	movl	%edx,(%esp)
00003a08	movl	%ebx,0xfffffde8(%ebp)
00003a0e	movl	%edx,%ebx
00003a10	calll	CUtlMemory<KeyValues*, int>::Grow(int)
00003a15	movl	%ebx,%edx
00003a17	movl	0xfffffde8(%ebp),%ebx
00003a1d	movl	0x0c(%edx),%ecx
00003a20	incl	%ecx
00003a21	movl	%ecx,0x0c(%edx)
00003a24	movl	(%edx),%eax
00003a26	movl	%eax,0x10(%edx)
00003a29	subl	%edi,%ecx
00003a2b	decl	%ecx
00003a2c	testl	%ecx,%ecx
00003a2e	jle	0x00003a4d
00003a30	shll	$0x02,%ecx
00003a33	movl	%ecx,0x08(%esp)
00003a37	leal	(%eax,%edi,4),%ecx
00003a3a	movl	%ecx,0x04(%esp)
00003a3e	leal	(%eax,%ebx,4),%eax
00003a41	movl	%eax,(%esp)
00003a44	movl	%edx,%ebx
00003a46	calll	_memmove
00003a4b	movl	(%ebx),%eax
00003a4d	shll	$0x02,%edi
00003a50	addl	%eax,%edi
00003a52	je	0x00003a8f
00003a54	movl	%esi,(%edi)
00003a56	jmp	0x00003a8f
00003a58	movl	%eax,%edi
00003a5a	calll	_KeyValuesSystem
00003a5f	movl	(%eax),%ecx
00003a61	movl	0x08(%ecx),%ecx
00003a64	movl	%esi,0x04(%esp)
00003a68	movl	%eax,(%esp)
00003a6b	call	*%ecx
00003a6d	movl	%edi,(%esp)
00003a70	calll	__Unwind_Resume
00003a75	movl	%ebx,0x04(%esp)
00003a79	leal	0x3a9e1-0x38c1(%edi),%eax
00003a7f	movl	%eax,(%esp)
00003a82	calll	DevMsg(char const*, ...)
00003a87	movl	%esi,(%esp)
00003a8a	calll	KeyValues::deleteThis()
00003a8f	movl	0xfffffdec(%ebp),%eax
00003a95	movl	(%eax),%eax
00003a97	cmpl	0xf0(%ebp),%eax
00003a9a	jne	0x00003aac
00003a9c	addl	$0x0000021c,%esp
00003aa2	popl	%esi
00003aa3	popl	%edi
00003aa4	popl	%ebx
00003aa5	popl	%ebp
00003aa6	ret
00003aa7	calll	std::terminate()
00003aac	calll	___stack_chk_fail
00003ab1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::MergeBaseKeys(CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&):
00003ac0	pushl	%ebp
00003ac1	movl	%esp,%ebp
00003ac3	pushl	%ebx
00003ac4	pushl	%edi
00003ac5	pushl	%esi
00003ac6	subl	$0x0c,%esp
00003ac9	movl	0x0c(%ebp),%eax
00003acc	movl	0x0c(%eax),%edi
00003acf	testl	%edi,%edi
00003ad1	jle	0x00003afd
00003ad3	xorl	%esi,%esi
00003ad5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003ae0	movl	%eax,%ebx
00003ae2	movl	(%ebx),%eax
00003ae4	movl	(%eax,%esi,4),%eax
00003ae7	movl	%eax,0x04(%esp)
00003aeb	movl	0x08(%ebp),%eax
00003aee	movl	%eax,(%esp)
00003af1	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
00003af6	movl	%ebx,%eax
00003af8	incl	%esi
00003af9	cmpl	%esi,%edi
00003afb	jne	0x00003ae0
00003afd	addl	$0x0c,%esp
00003b00	popl	%esi
00003b01	popl	%edi
00003b02	popl	%ebx
00003b03	popl	%ebp
00003b04	ret
00003b05	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveMergeKeyValues(KeyValues*):
00003b10	pushl	%ebp
00003b11	movl	%esp,%ebp
00003b13	pushl	%ebx
00003b14	pushl	%edi
00003b15	pushl	%esi
00003b16	subl	$0x1c,%esp
00003b19	calll	0x00003b1e
00003b1e	popl	%ebx
00003b1f	movl	0x0c(%ebp),%eax
00003b22	movl	0x18(%eax),%eax
00003b25	movl	%eax,0xf0(%ebp)
00003b28	testl	%eax,%eax
00003b2a	je	0x00003bcd
00003b30	movl	0x08(%ebp),%esi
00003b33	addl	$0x18,%esi
00003b36	movl	%esi,0xec(%ebp)
00003b39	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00003b40	movl	%esi,%edi
00003b42	jmp	0x00003b53
00003b44	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003b50	addl	$0x14,%edi
00003b53	movl	(%edi),%edi
00003b55	testl	%edi,%edi
00003b57	je	0x00003b98
00003b59	movl	0xf0(%ebp),%eax
00003b5c	movl	(%eax),%eax
00003b5e	movl	%eax,(%esp)
00003b61	call	*KeyValues::s_pfGetStringForSymbol-0x3b1e(%ebx)
00003b67	movl	%eax,%esi
00003b69	movl	(%edi),%eax
00003b6b	movl	%eax,(%esp)
00003b6e	call	*KeyValues::s_pfGetStringForSymbol-0x3b1e(%ebx)
00003b74	movl	%eax,0x04(%esp)
00003b78	movl	%esi,(%esp)
00003b7b	calll	_strcmp
00003b80	testl	%eax,%eax
00003b82	jne	0x00003b50
00003b84	movl	0xf0(%ebp),%eax
00003b87	movl	%eax,0x04(%esp)
00003b8b	movl	%edi,(%esp)
00003b8e	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
00003b93	movl	0xec(%ebp),%esi
00003b96	jmp	0x00003bbc
00003b98	movl	0xf0(%ebp),%eax
00003b9b	movl	%eax,(%esp)
00003b9e	calll	KeyValues::MakeCopy() const
00003ba3	movl	0xec(%ebp),%esi
00003ba6	movl	(%esi),%ecx
00003ba8	testl	%ecx,%ecx
00003baa	jne	0x00003bb0
00003bac	movl	%eax,(%esi)
00003bae	jmp	0x00003bbc
00003bb0	movl	%ecx,%edx
00003bb2	movl	0x14(%edx),%ecx
00003bb5	testl	%ecx,%ecx
00003bb7	jne	0x00003bb0
00003bb9	movl	%eax,0x14(%edx)
00003bbc	movl	0xf0(%ebp),%eax
00003bbf	movl	0x14(%eax),%eax
00003bc2	movl	%eax,0xf0(%ebp)
00003bc5	testl	%eax,%eax
00003bc7	jne	0x00003b40
00003bcd	addl	$0x1c,%esp
00003bd0	popl	%esi
00003bd1	popl	%edi
00003bd2	popl	%ebx
00003bd3	popl	%ebp
00003bd4	ret
00003bd5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
EvaluateConditional(char const*):
00003be0	pushl	%ebp
00003be1	movl	%esp,%ebp
00003be3	pushl	%ebx
00003be4	pushl	%edi
00003be5	pushl	%esi
00003be6	subl	$0x0c,%esp
00003be9	calll	0x00003bee
00003bee	popl	%esi
00003bef	xorb	%bl,%bl
00003bf1	movl	0x08(%ebp),%eax
00003bf4	testl	%eax,%eax
00003bf6	je	0x00003c3b
00003bf8	leal	0x01(%eax),%edi
00003bfb	cmpb	$0x5b,(%eax)
00003bfe	cmovnel	%eax,%edi
00003c01	movb	(%edi),%bh
00003c03	leal	0x3aa28-0x3bee(%esi),%eax
00003c09	movl	%eax,0x04(%esp)
00003c0d	movl	%edi,(%esp)
00003c10	cmpb	$0x21,%bh
00003c13	sete	%bl
00003c16	calll	V_stristr(char const*, char const*)
00003c1b	testl	%eax,%eax
00003c1d	jne	0x00003c3b
00003c1f	leal	0x3aa2e-0x3bee(%esi),%eax
00003c25	movl	%eax,0x04(%esp)
00003c29	movl	%edi,(%esp)
00003c2c	calll	V_stristr(char const*, char const*)
00003c31	testl	%eax,%eax
00003c33	je	0x00003c40
00003c35	cmpb	$0x21,%bh
00003c38	setne	%bl
00003c3b	movzbl	%bl,%eax
00003c3e	jmp	0x00003ca4
00003c40	leal	0x3aa35-0x3bee(%esi),%eax
00003c46	movl	%eax,0x04(%esp)
00003c4a	movl	%edi,(%esp)
00003c4d	calll	V_stristr(char const*, char const*)
00003c52	testl	%eax,%eax
00003c54	jne	0x00003c3b
00003c56	leal	0x3aa3e-0x3bee(%esi),%eax
00003c5c	movl	%eax,0x04(%esp)
00003c60	movl	%edi,(%esp)
00003c63	calll	V_stristr(char const*, char const*)
00003c68	testl	%eax,%eax
00003c6a	jne	0x00003c35
00003c6c	leal	0x3aa43-0x3bee(%esi),%eax
00003c72	movl	%eax,0x04(%esp)
00003c76	movl	%edi,(%esp)
00003c79	calll	V_stristr(char const*, char const*)
00003c7e	testl	%eax,%eax
00003c80	jne	0x00003c3b
00003c82	leal	0x3aa4a-0x3bee(%esi),%eax
00003c88	movl	%eax,0x04(%esp)
00003c8c	movl	%edi,(%esp)
00003c8f	cmpb	$0x21,%bh
00003c92	setne	%bl
00003c95	calll	V_stristr(char const*, char const*)
00003c9a	testl	%eax,%eax
00003c9c	setne	%al
00003c9f	andb	%bl,%al
00003ca1	movzbl	%al,%eax
00003ca4	addl	$0x0c,%esp
00003ca7	popl	%esi
00003ca8	popl	%edi
00003ca9	popl	%ebx
00003caa	popl	%ebp
00003cab	ret
00003cac	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*):
00003cb0	pushl	%ebp
00003cb1	movl	%esp,%ebp
00003cb3	pushl	%ebx
00003cb4	pushl	%edi
00003cb5	pushl	%esi
00003cb6	subl	$0x6c,%esp
00003cb9	calll	0x00003cbe
00003cbe	popl	%eax
00003cbf	movl	%eax,0xb0(%ebp)
00003cc2	xorps	%xmm0,%xmm0
00003cc5	movaps	%xmm0,0xd8(%ebp)
00003cc9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
00003cd0	movaps	%xmm0,0xb8(%ebp)
00003cd4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00003cdb	movl	0x0c(%ebp),%ecx
00003cde	movl	%ecx,_g_KeyValuesErrorStack-0x3cbe+0x00000100(%eax)
00003ce4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),_g_KeyValuesErrorStack-0x3cbe+0x00000108(%eax)
00003cee	xorl	%ebx,%ebx
00003cf0	movl	0x08(%ebp),%eax
00003cf3	movl	%eax,%esi
00003cf5	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00003d00	leal	0xb6(%ebp),%eax
00003d03	movl	%eax,0x0c(%esp)
00003d07	leal	0xb7(%ebp),%eax
00003d0a	movl	%eax,0x08(%esp)
00003d0e	movl	0x10(%ebp),%eax
00003d11	movl	%eax,0x04(%esp)
00003d15	movl	0x08(%ebp),%eax
00003d18	movl	%eax,(%esp)
00003d1b	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003d20	movl	%eax,%edi
00003d22	movl	0x10(%ebp),%eax
00003d25	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00003d29	jne	0x0000401e
00003d2f	testl	%edi,%edi
00003d31	je	0x0000401e
00003d37	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
00003d3a	je	0x0000401e
00003d40	movl	0xb0(%ebp),%eax
00003d43	leal	0x3aa51-0x3cbe(%eax),%eax
00003d49	movl	%eax,0x04(%esp)
00003d4d	movl	%edi,(%esp)
00003d50	calll	V_stricmp(char const*, char const*)
00003d55	testl	%eax,%eax
00003d57	jne	0x00003dfa
00003d5d	leal	0xb6(%ebp),%eax
00003d60	movl	%eax,0x0c(%esp)
00003d64	leal	0xb7(%ebp),%eax
00003d67	movl	%eax,0x08(%esp)
00003d6b	movl	0x10(%ebp),%eax
00003d6e	movl	%eax,0x04(%esp)
00003d72	movl	0x08(%ebp),%eax
00003d75	movl	%eax,(%esp)
00003d78	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003d7d	testl	%eax,%eax
00003d7f	je	0x00003d86
00003d81	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00003d84	jne	0x00003dca
00003d86	movl	0xb0(%ebp),%ecx
00003d89	leal	0x3aa5a-0x3cbe(%ecx),%eax
00003d8f	movl	%eax,0x04(%esp)
00003d93	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003d99	movl	%eax,(%esp)
00003d9c	calll	CKeyValuesErrorStack::ReportError(char const*)
00003da1	jmp	0x00004011
00003da6	jmp	0x00003dac
00003da8	jmp	0x00003dac
00003daa	jmp	0x00003dac
00003dac	movl	%eax,%edi
00003dae	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
00003db5	movl	0xb8(%ebp),%eax
00003db8	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
00003dbc	jns	0x00004162
00003dc2	movl	%eax,0xc8(%ebp)
00003dc5	jmp	0x0000418a
00003dca	leal	0xd8(%ebp),%ecx
00003dcd	movl	%ecx,0x14(%esp)
00003dd1	movl	0x18(%ebp),%ecx
00003dd4	movl	%ecx,0x10(%esp)
00003dd8	movl	0x14(%ebp),%ecx
00003ddb	movl	%ecx,0x0c(%esp)
00003ddf	movl	%eax,0x08(%esp)
00003de3	movl	0x0c(%ebp),%eax
00003de6	movl	%eax,0x04(%esp)
00003dea	movl	0x08(%ebp),%eax
00003ded	movl	%eax,(%esp)
00003df0	calll	KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
00003df5	jmp	0x00004011
00003dfa	movl	0xb0(%ebp),%eax
00003dfd	leal	0x3aa6c-0x3cbe(%eax),%eax
00003e03	movl	%eax,0x04(%esp)
00003e07	movl	%edi,(%esp)
00003e0a	calll	V_stricmp(char const*, char const*)
00003e0f	testl	%eax,%eax
00003e11	jne	0x00003e8c
00003e13	leal	0xb6(%ebp),%eax
00003e16	movl	%eax,0x0c(%esp)
00003e1a	leal	0xb7(%ebp),%eax
00003e1d	movl	%eax,0x08(%esp)
00003e21	movl	0x10(%ebp),%eax
00003e24	movl	%eax,0x04(%esp)
00003e28	movl	0x08(%ebp),%eax
00003e2b	movl	%eax,(%esp)
00003e2e	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003e33	testl	%eax,%eax
00003e35	je	0x00003e3c
00003e37	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
00003e3a	jne	0x00003e5c
00003e3c	movl	0xb0(%ebp),%ecx
00003e3f	leal	0x3aa72-0x3cbe(%ecx),%eax
00003e45	movl	%eax,0x04(%esp)
00003e49	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003e4f	movl	%eax,(%esp)
00003e52	calll	CKeyValuesErrorStack::ReportError(char const*)
00003e57	jmp	0x00004011
00003e5c	leal	0xb8(%ebp),%ecx
00003e5f	movl	%ecx,0x14(%esp)
00003e63	movl	0x18(%ebp),%ecx
00003e66	movl	%ecx,0x10(%esp)
00003e6a	movl	0x14(%ebp),%ecx
00003e6d	movl	%ecx,0x0c(%esp)
00003e71	movl	%eax,0x08(%esp)
00003e75	movl	0x0c(%ebp),%eax
00003e78	movl	%eax,0x04(%esp)
00003e7c	movl	0x08(%ebp),%eax
00003e7f	movl	%eax,(%esp)
00003e82	calll	KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
00003e87	jmp	0x00004011
00003e8c	testl	%esi,%esi
00003e8e	jne	0x00003f39
00003e94	calll	_KeyValuesSystem
00003e99	movl	(%eax),%ecx
00003e9b	movl	0x04(%ecx),%ecx
00003e9e	movl	%eax,(%esp)
00003ea1	movl	$0x00000020,0x04(%esp)
00003ea9	call	*%ecx
00003eab	movl	%eax,%esi
00003ead	movl	$0xffffffff,(%esi)
00003eb3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%esi)
00003eba	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00003ec1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%esi)
00003ec8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esi)
00003ecf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
00003ed6	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%esi)
00003edc	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%esi)
00003ee3	movb	$0x01,0x12(%esi)
00003ee7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%esi)
00003eeb	movl	0xb0(%ebp),%eax
00003eee	movl	KeyValues::s_pfGetSymbolForString-0x3cbe(%eax),%eax
00003ef4	movl	%edi,(%esp)
00003ef7	movl	$0x00000001,0x04(%esp)
00003eff	call	*%eax
00003f01	movl	%eax,(%esi)
00003f03	movl	0x08(%ebp),%eax
00003f06	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x11(%eax)
00003f0a	setne	0x11(%esi)
00003f0e	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00003f12	setne	0x12(%esi)
00003f16	testl	%ebx,%ebx
00003f18	je	0x00003f51
00003f1a	movl	%esi,0x14(%ebx)
00003f1d	jmp	0x00003f51
00003f1f	movl	%eax,%edi
00003f21	calll	_KeyValuesSystem
00003f26	movl	(%eax),%ecx
00003f28	movl	0x08(%ecx),%ecx
00003f2b	movl	%esi,0x04(%esp)
00003f2f	movl	%eax,(%esp)
00003f32	call	*%ecx
00003f34	jmp	0x00003dae
00003f39	movl	0xb0(%ebp),%eax
00003f3c	movl	KeyValues::s_pfGetSymbolForString-0x3cbe(%eax),%eax
00003f42	movl	%edi,(%esp)
00003f45	movl	$0x00000001,0x04(%esp)
00003f4d	call	*%eax
00003f4f	movl	%eax,(%esi)
00003f51	movl	%ebx,%edi
00003f53	leal	0xb6(%ebp),%eax
00003f56	movl	%eax,0x0c(%esp)
00003f5a	leal	0xb7(%ebp),%eax
00003f5d	movl	%eax,0x08(%esp)
00003f61	movl	0x10(%ebp),%eax
00003f64	movl	%eax,0x04(%esp)
00003f68	movl	0x08(%ebp),%eax
00003f6b	movl	%eax,(%esp)
00003f6e	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003f73	movb	$0x01,%bl
00003f75	testb	$0x01,0xb6(%ebp)
00003f79	je	0x00003fb0
00003f7b	movb	$0x01,%bl
00003f7d	movl	0x08(%ebp),%ecx
00003f80	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ecx)
00003f84	je	0x00003f90
00003f86	movl	%eax,(%esp)
00003f89	calll	EvaluateConditional(char const*)
00003f8e	movb	%al,%bl
00003f90	leal	0xb6(%ebp),%eax
00003f93	movl	%eax,0x0c(%esp)
00003f97	leal	0xb7(%ebp),%eax
00003f9a	movl	%eax,0x08(%esp)
00003f9e	movl	0x10(%ebp),%eax
00003fa1	movl	%eax,0x04(%esp)
00003fa5	movl	0x08(%ebp),%eax
00003fa8	movl	%eax,(%esp)
00003fab	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
00003fb0	testl	%eax,%eax
00003fb2	je	0x00003fd7
00003fb4	cmpb	$0x7b,(%eax)
00003fb7	jne	0x00003fd7
00003fb9	testb	$0x01,0xb7(%ebp)
00003fbd	jne	0x00003fd7
00003fbf	movl	0x10(%ebp),%eax
00003fc2	movl	%eax,0x08(%esp)
00003fc6	movl	0x0c(%ebp),%eax
00003fc9	movl	%eax,0x04(%esp)
00003fcd	movl	%esi,(%esp)
00003fd0	calll	KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
00003fd5	jmp	0x00003ff2
00003fd7	movl	0xb0(%ebp),%ecx
00003fda	leal	0x3aa81-0x3cbe(%ecx),%eax
00003fe0	movl	%eax,0x04(%esp)
00003fe4	leal	_g_KeyValuesErrorStack-0x3cbe(%ecx),%eax
00003fea	movl	%eax,(%esp)
00003fed	calll	CKeyValuesErrorStack::ReportError(char const*)
00003ff2	testb	%bl,%bl
00003ff4	je	0x00003ffc
00003ff6	movl	%esi,%ebx
00003ff8	xorl	%esi,%esi
00003ffa	jmp	0x00004011
00003ffc	testl	%edi,%edi
00003ffe	je	0x00004007
00004000	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004007	movl	%edi,%ebx
00004009	movl	%esi,(%esp)
0000400c	calll	KeyValues::Clear()
00004011	movl	0x10(%ebp),%eax
00004014	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
00004018	je	0x00003d00
0000401e	movl	0xe4(%ebp),%edi
00004021	testl	%edi,%edi
00004023	jle	0x00004056
00004025	xorl	%eax,%eax
00004027	movl	0x08(%ebp),%ecx
0000402a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004030	movl	0xd8(%ebp),%edx
00004033	movl	(%edx,%eax,4),%esi
00004036	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004040	movl	%ecx,%edx
00004042	movl	0x14(%edx),%ecx
00004045	testl	%ecx,%ecx
00004047	jne	0x00004040
00004049	movl	%esi,0x14(%edx)
0000404c	incl	%eax
0000404d	cmpl	%edi,%eax
0000404f	movl	%edx,%ecx
00004051	jne	0x00004030
00004053	movl	0xe4(%ebp),%edi
00004056	decl	%edi
00004057	movl	0xd8(%ebp),%esi
0000405a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004060	testl	%edi,%edi
00004062	jle	0x00004072
00004064	movl	(%esi,%edi,4),%eax
00004067	decl	%edi
00004068	movl	%eax,(%esp)
0000406b	calll	KeyValues::deleteThis()
00004070	jmp	0x00004060
00004072	movl	%esi,0xac(%ebp)
00004075	movl	0xc4(%ebp),%esi
00004078	testl	%esi,%esi
0000407a	jle	0x000040a7
0000407c	movl	0xb8(%ebp),%ebx
0000407f	movl	%esi,%edi
00004081	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004090	movl	(%ebx),%eax
00004092	movl	%eax,0x04(%esp)
00004096	movl	0x08(%ebp),%eax
00004099	movl	%eax,(%esp)
0000409c	calll	KeyValues::RecursiveMergeKeyValues(KeyValues*)
000040a1	addl	$0x04,%ebx
000040a4	decl	%edi
000040a5	jne	0x00004090
000040a7	movl	0xb8(%ebp),%ebx
000040aa	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000040b0	testl	%esi,%esi
000040b2	jle	0x000040c5
000040b4	movl	0xfc(%ebx,%esi,4),%eax
000040b8	leal	0xff(%esi),%esi
000040bb	movl	%eax,(%esp)
000040be	calll	KeyValues::deleteThis()
000040c3	jmp	0x000040b0
000040c5	movl	0xb0(%ebp),%ecx
000040c8	leal	0x3a9e0-0x3cbe(%ecx),%eax
000040ce	movl	%eax,_g_KeyValuesErrorStack-0x3cbe+0x00000100(%ecx)
000040d4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),_g_KeyValuesErrorStack-0x3cbe+0x00000108(%ecx)
000040de	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc4(%ebp)
000040e5	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc0(%ebp)
000040e9	movl	0xac(%ebp),%esi
000040ec	jns	0x000040f3
000040ee	movl	%ebx,0xc8(%ebp)
000040f1	jmp	0x0000411b
000040f3	testl	%ebx,%ebx
000040f5	je	0x00004106
000040f7	movl	%ebx,(%esp)
000040fa	calll	_free
000040ff	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00004106	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000410d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00004114	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000411b	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00004122	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe0(%ebp)
00004126	jns	0x0000412d
00004128	movl	%esi,0xe8(%ebp)
0000412b	jmp	0x00004155
0000412d	testl	%esi,%esi
0000412f	je	0x00004140
00004131	movl	%esi,(%esp)
00004134	calll	_free
00004139	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd8(%ebp)
00004140	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
00004147	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
0000414e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
00004155	movl	$0x00000001,%eax
0000415a	addl	$0x6c,%esp
0000415d	popl	%esi
0000415e	popl	%edi
0000415f	popl	%ebx
00004160	popl	%ebp
00004161	ret
00004162	testl	%eax,%eax
00004164	je	0x00004175
00004166	movl	%eax,(%esp)
00004169	calll	_free
0000416e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xb8(%ebp)
00004175	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000417c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xc8(%ebp)
00004183	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xbc(%ebp)
0000418a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe4(%ebp)
00004191	movl	0xd8(%ebp),%eax
00004194	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe0(%ebp)
00004198	jns	0x000041a5
0000419a	movl	%eax,0xe8(%ebp)
0000419d	movl	%edi,(%esp)
000041a0	calll	__Unwind_Resume
000041a5	testl	%eax,%eax
000041a7	je	0x000041b8
000041a9	movl	%eax,(%esp)
000041ac	calll	_free
000041b1	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xd8(%ebp)
000041b8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
000041bf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xe8(%ebp)
000041c6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdc(%ebp)
000041cd	movl	%edi,(%esp)
000041d0	calll	__Unwind_Resume
000041d5	calll	std::terminate()
000041da	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&):
000041e0	pushl	%ebp
000041e1	movl	%esp,%ebp
000041e3	pushl	%ebx
000041e4	pushl	%edi
000041e5	pushl	%esi
000041e6	subl	$0x5c,%esp
000041e9	calll	0x000041ee
000041ee	popl	%edx
000041ef	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%eax
000041f5	movl	0x08(%ebp),%ecx
000041f8	cmpl	$0x3f,%eax
000041fb	jg	0x0000420c
000041fd	movl	(%ecx),%ecx
000041ff	movl	%ecx,_g_KeyValuesErrorStack-0x41ee(%edx,%eax,4)
00004206	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%eax
0000420c	leal	0x01(%eax),%esi
0000420f	movl	%esi,_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx)
00004215	movl	_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx),%ecx
0000421b	cmpl	%eax,%ecx
0000421d	cmovlel	%eax,%ecx
00004220	movl	%ecx,_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx)
00004226	cmpl	$0x3f,%esi
00004229	jg	0x00004242
0000422b	movl	$0xffffffff,_g_KeyValuesErrorStack-0x41ee+0x00000004(%edx,%eax,4)
00004236	movl	_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx),%ecx
0000423c	movl	_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx),%esi
00004242	cmpl	%esi,%ecx
00004244	cmovlel	%esi,%ecx
00004247	leal	0x01(%esi),%eax
0000424a	movl	%eax,_g_KeyValuesErrorStack-0x41ee+0x00000104(%edx)
00004250	movl	%ecx,_g_KeyValuesErrorStack-0x41ee+0x00000108(%edx)
00004256	movl	%edx,0xd0(%ebp)
00004259	movl	0x08(%ebp),%eax
0000425c	movl	0x18(%eax),%eax
0000425f	xorl	%ecx,%ecx
00004261	jmp	0x00004275
00004263	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004270	movl	%eax,%ecx
00004272	movl	0x14(%ecx),%eax
00004275	testl	%eax,%eax
00004277	jne	0x00004270
00004279	movl	%ecx,%edi
0000427b	movl	%esi,0xcc(%ebp)
0000427e	jmp	0x00004282
00004280	movl	%ebx,%edi
00004282	movl	%edi,0xbc(%ebp)
00004285	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004290	leal	0xf2(%ebp),%eax
00004293	movl	%eax,0x0c(%esp)
00004297	leal	0xf3(%ebp),%eax
0000429a	movl	%eax,0x08(%esp)
0000429e	movl	0x10(%ebp),%eax
000042a1	movl	%eax,0x04(%esp)
000042a5	movl	0x08(%ebp),%eax
000042a8	movl	%eax,(%esp)
000042ab	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
000042b0	testl	%eax,%eax
000042b2	jne	0x000042fd
000042b4	jmp	0x000042e0
000042b6	movl	0xbc(%ebp),%edi
000042b9	testl	%edi,%edi
000042bb	jne	0x000042cc
000042bd	movl	0x08(%ebp),%eax
000042c0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%eax)
000042c7	jmp	0x00004674
000042cc	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
000042d3	jmp	0x00004674
000042d8	testb	$0x01,0xf3(%ebp)
000042dc	je	0x00004323
000042de	jmp	0x00004338
000042e0	movl	0xd0(%ebp),%ecx
000042e3	leal	0x3aa9b-0x41ee(%ecx),%eax
000042e9	movl	%eax,0x04(%esp)
000042ed	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
000042f3	movl	%eax,(%esp)
000042f6	calll	CKeyValuesErrorStack::ReportError(char const*)
000042fb	jmp	0x00004323
000042fd	movb	(%eax),%cl
000042ff	cmpb	$0x7d,%cl
00004302	je	0x000042d8
00004304	testb	%cl,%cl
00004306	jne	0x00004338
00004308	movl	0xd0(%ebp),%ecx
0000430b	leal	0x3aad0-0x41ee(%ecx),%eax
00004311	movl	%eax,0x04(%esp)
00004315	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
0000431b	movl	%eax,(%esp)
0000431e	calll	CKeyValuesErrorStack::ReportError(char const*)
00004323	movl	0xd0(%ebp),%eax
00004326	addl	$0xfffffffe,_g_KeyValuesErrorStack-0x41ee+0x00000104(%eax)
00004330	addl	$0x5c,%esp
00004333	popl	%esi
00004334	popl	%edi
00004335	popl	%ebx
00004336	popl	%ebp
00004337	ret
00004338	movl	%edi,0x08(%esp)
0000433c	movl	%eax,0x04(%esp)
00004340	movl	0x08(%ebp),%eax
00004343	movl	%eax,(%esp)
00004346	calll	KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
0000434b	movl	%eax,%esi
0000434d	movl	(%esi),%eax
0000434f	movl	0xd0(%ebp),%ecx
00004352	movl	0xcc(%ebp),%edx
00004355	movl	%eax,_g_KeyValuesErrorStack-0x41ee(%ecx,%edx,4)
0000435c	leal	0xf2(%ebp),%eax
0000435f	movl	%eax,0x0c(%esp)
00004363	leal	0xf3(%ebp),%eax
00004366	movl	%eax,0x08(%esp)
0000436a	movl	0x10(%ebp),%eax
0000436d	movl	%eax,0x04(%esp)
00004371	movl	0x08(%ebp),%eax
00004374	movl	%eax,(%esp)
00004377	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
0000437c	movl	%eax,%edi
0000437e	movb	$0x01,0xdf(%ebp)
00004382	testb	$0x01,0xf2(%ebp)
00004386	je	0x000043c6
00004388	testl	%edi,%edi
0000438a	je	0x000043c6
0000438c	movb	$0x01,0xdf(%ebp)
00004390	movl	0x08(%ebp),%eax
00004393	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%eax)
00004397	je	0x000043a4
00004399	movl	%edi,(%esp)
0000439c	calll	EvaluateConditional(char const*)
000043a1	movb	%al,0xdf(%ebp)
000043a4	leal	0xf2(%ebp),%eax
000043a7	movl	%eax,0x0c(%esp)
000043ab	leal	0xf3(%ebp),%eax
000043ae	movl	%eax,0x08(%esp)
000043b2	movl	0x10(%ebp),%eax
000043b5	movl	%eax,0x04(%esp)
000043b9	movl	0x08(%ebp),%eax
000043bc	movl	%eax,(%esp)
000043bf	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
000043c4	movl	%eax,%edi
000043c6	testl	%edi,%edi
000043c8	jne	0x000043ea
000043ca	movl	0xd0(%ebp),%ecx
000043cd	leal	0x3aafc-0x41ee(%ecx),%eax
000043d3	movl	%eax,0x04(%esp)
000043d7	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
000043dd	movl	%eax,(%esp)
000043e0	calll	CKeyValuesErrorStack::ReportError(char const*)
000043e5	jmp	0x00004323
000043ea	movb	(%edi),%al
000043ec	cmpb	$0x7b,%al
000043ee	je	0x0000441a
000043f0	cmpb	$0x7d,%al
000043f2	jne	0x0000444e
000043f4	testb	$0x01,0xf3(%ebp)
000043f8	jne	0x0000444e
000043fa	movl	0xd0(%ebp),%ecx
000043fd	leal	0x3ab23-0x41ee(%ecx),%eax
00004403	movl	%eax,0x04(%esp)
00004407	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
0000440d	movl	%eax,(%esp)
00004410	calll	CKeyValuesErrorStack::ReportError(char const*)
00004415	jmp	0x00004323
0000441a	testb	$0x01,0xf3(%ebp)
0000441e	jne	0x0000444e
00004420	movl	0xd0(%ebp),%eax
00004423	movl	0xcc(%ebp),%ecx
00004426	movl	$0xffffffff,_g_KeyValuesErrorStack-0x41ee(%eax,%ecx,4)
00004431	movl	0x10(%ebp),%eax
00004434	movl	%eax,0x08(%esp)
00004438	movl	0x0c(%ebp),%eax
0000443b	movl	%eax,0x04(%esp)
0000443f	movl	%esi,(%esp)
00004442	movl	%esi,%ebx
00004444	calll	KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
00004449	jmp	0x00004665
0000444e	testb	$0x01,0xf2(%ebp)
00004452	je	0x00004474
00004454	movl	0xd0(%ebp),%ecx
00004457	leal	0x3ab4a-0x41ee(%ecx),%eax
0000445d	movl	%eax,0x04(%esp)
00004461	leal	_g_KeyValuesErrorStack-0x41ee(%ecx),%eax
00004467	movl	%eax,(%esp)
0000446a	calll	CKeyValuesErrorStack::ReportError(char const*)
0000446f	jmp	0x00004323
00004474	movl	0x04(%esi),%eax
00004477	testl	%eax,%eax
00004479	je	0x0000448a
0000447b	movl	%eax,(%esp)
0000447e	calll	operator delete[](void*)
00004483	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esi)
0000448a	movl	%edi,(%esp)
0000448d	calll	_strlen
00004492	movl	%eax,%ebx
00004494	movl	%edi,(%esp)
00004497	leal	0xec(%ebp),%eax
0000449a	movl	%eax,0x04(%esp)
0000449e	movl	$0x0000000a,0x08(%esp)
000044a6	calll	_strtol
000044ab	movl	%eax,0xd8(%ebp)
000044ae	leal	0xe8(%ebp),%eax
000044b1	movl	%eax,0x04(%esp)
000044b5	movl	%edi,(%esp)
000044b8	calll	_strtod$UNIX2003
000044bd	fstpl	0xe0(%ebp)
000044c0	movsd	0xe0(%ebp),%xmm0
000044c5	movsd	%xmm0,0xc0(%ebp)
000044ca	movl	0xd8(%ebp),%eax
000044cd	leal	0x80000001(%eax),%eax
000044d3	xorb	%cl,%cl
000044d5	cmpl	$0x01,%eax
000044d8	ja	0x000044e5
000044da	calll	___error
000044df	cmpl	$0x22,(%eax)
000044e2	sete	%cl
000044e5	movb	%cl,0xcb(%ebp)
000044e8	movl	%ebx,%eax
000044ea	movl	%eax,0xd4(%ebp)
000044ed	movsd	0xc0(%ebp),%xmm0
000044f2	cvtsd2ss	%xmm0,%xmm0
000044f6	cmpl	$0x02,%eax
000044f9	jge	0x000044ff
000044fb	movl	%esi,%edx
000044fd	jmp	0x00004523
000044ff	movsbl	0x01(%edi),%eax
00004503	movl	%eax,(%esp)
00004506	movss	%xmm0,0xc0(%ebp)
0000450b	calll	___tolower
00004510	movss	0xc0(%ebp),%xmm0
00004515	cmpl	$0x78,%eax
00004518	movl	%esi,%edx
0000451a	jne	0x00004523
0000451c	movl	%edi,0xe8(%ebp)
0000451f	pxor	%xmm0,%xmm0
00004523	movb	(%edi),%al
00004525	testb	%al,%al
00004527	je	0x000045da
0000452d	cmpl	$0x12,0xd4(%ebp)
00004531	jne	0x000045a5
00004533	cmpb	KeyValues::GetStringForSymbolClassic(int),%al
00004535	jne	0x000045a5
00004537	cmpb	$0x78,0x01(%edi)
0000453b	jne	0x000045a5
0000453d	movl	%edx,0xd8(%ebp)
00004540	xorl	%eax,%eax
00004542	xorl	%esi,%esi
00004544	xorl	%ebx,%ebx
00004546	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00004550	movb	0x02(%edi,%eax),%dl
00004554	cmpb	$0x61,%dl
00004557	jl	0x0000455e
00004559	addb	$0xd9,%dl
0000455c	jmp	0x00004568
0000455e	movb	%dl,%cl
00004560	addb	$0xf9,%cl
00004563	cmpb	$0x40,%dl
00004566	jg	0x0000456a
00004568	movb	%dl,%cl
0000456a	shldl	$0x04,%esi,%ebx
0000456e	movsbl	%cl,%ecx
00004571	addl	$0xd0,%ecx
00004574	movl	%ecx,%edx
00004576	sarl	$0x1f,%edx
00004579	shll	$0x04,%esi
0000457c	addl	%ecx,%esi
0000457e	adcl	%edx,%ebx
00004580	incl	%eax
00004581	cmpl	$0x10,%eax
00004584	jne	0x00004550
00004586	movl	$0x00000008,(%esp)
0000458d	calll	operator new[](unsigned long)
00004592	movl	0xd8(%ebp),%ecx
00004595	movl	%eax,0x04(%ecx)
00004598	movl	%ebx,0x04(%eax)
0000459b	movl	%esi,(%eax)
0000459d	movb	$0x07,0x10(%ecx)
000045a1	movl	%ecx,%ebx
000045a3	jmp	0x0000460b
000045a5	addl	%edi,%ebx
000045a7	movl	0xe8(%ebp),%ecx
000045aa	movl	0xec(%ebp),%eax
000045ad	cmpl	%eax,%ecx
000045af	jbe	0x000045c2
000045b1	cmpl	%ebx,%ecx
000045b3	jne	0x000045c2
000045b5	movss	%xmm0,0x0c(%edx)
000045ba	movb	$0x03,0x10(%edx)
000045be	movl	%edx,%ebx
000045c0	jmp	0x0000460b
000045c2	cmpl	%ebx,%eax
000045c4	setne	%al
000045c7	orb	0xcb(%ebp),%al
000045ca	jne	0x000045da
000045cc	movl	0xd8(%ebp),%eax
000045cf	movl	%eax,0x0c(%edx)
000045d2	movb	$0x02,0x10(%edx)
000045d6	movl	%edx,%ebx
000045d8	jmp	0x0000460b
000045da	movb	$0x01,0x10(%edx)
000045de	movl	%edx,%ebx
000045e0	movl	0xd4(%ebp),%eax
000045e3	leal	0x01(%eax),%esi
000045e6	testl	%esi,%esi
000045e8	movl	$0xffffffff,%eax
000045ed	cmovnsl	%esi,%eax
000045f0	movl	%eax,(%esp)
000045f3	calll	operator new[](unsigned long)
000045f8	movl	%eax,0x04(%ebx)
000045fb	movl	%esi,0x08(%esp)
000045ff	movl	%edi,0x04(%esp)
00004603	movl	%eax,(%esp)
00004606	calll	_memcpy
0000460b	movl	0x10(%ebp),%eax
0000460e	movl	0x0c(%eax),%esi
00004611	leal	0xf2(%ebp),%ecx
00004614	movl	%ecx,0x0c(%esp)
00004618	leal	0xf3(%ebp),%ecx
0000461b	movl	%ecx,0x08(%esp)
0000461f	movl	%eax,0x04(%esp)
00004623	movl	0x08(%ebp),%eax
00004626	movl	%eax,(%esp)
00004629	calll	KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
0000462e	testb	$0x01,0xf2(%ebp)
00004632	je	0x0000464e
00004634	movb	$0x01,0xdf(%ebp)
00004638	movl	0x08(%ebp),%ecx
0000463b	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x12(%ecx)
0000463f	je	0x00004665
00004641	movl	%eax,(%esp)
00004644	calll	EvaluateConditional(char const*)
00004649	movb	%al,0xdf(%ebp)
0000464c	jmp	0x00004665
0000464e	movl	%esi,0x08(%esp)
00004652	movl	0x10(%ebp),%eax
00004655	movl	%eax,(%esp)
00004658	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00004660	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00004665	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xdf(%ebp)
00004669	je	0x000042b6
0000466f	jmp	0x00004280
00004674	movl	%ebx,(%esp)
00004677	calll	KeyValues::deleteThis()
0000467c	jmp	0x00004290
00004681	jmp	0x00004683
00004683	movl	0xd0(%ebp),%ecx
00004686	addl	$0xfffffffe,_g_KeyValuesErrorStack-0x41ee+0x00000104(%ecx)
00004690	movl	%eax,(%esp)
00004693	calll	__Unwind_Resume
00004698	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::WriteAsBinary(CUtlBuffer&):
000046a0	pushl	%ebp
000046a1	movl	%esp,%ebp
000046a3	pushl	%ebx
000046a4	pushl	%edi
000046a5	pushl	%esi
000046a6	subl	$0x3c,%esp
000046a9	calll	0x000046ae
000046ae	popl	%eax
000046af	movl	%eax,0xdc(%ebp)
000046b2	movl	0x0c(%ebp),%esi
000046b5	movb	0x15(%esi),%al
000046b8	xorb	%cl,%cl
000046ba	testb	$0x01,%al
000046bc	jne	0x00004ab0
000046c2	xorb	%cl,%cl
000046c4	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
000046c8	jne	0x00004ab0
000046ce	movl	0x08(%ebp),%edi
000046d1	jmp	0x00004712
000046d3	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
000046e0	movl	0xd8(%ebp),%eax
000046e3	movl	0x0c(%eax),%edi
000046e6	testb	$0x01,0x15(%esi)
000046ea	je	0x000047ef
000046f0	movl	%edi,0x08(%esp)
000046f4	movl	0xdc(%ebp),%eax
000046f7	leal	0x3ac10-0x46ae(%eax),%eax
000046fd	movl	%eax,0x04(%esp)
00004701	movl	%esi,(%esp)
00004704	calll	CUtlBuffer::Printf(char const*, ...)
00004709	movb	0x15(%esi),%al
0000470c	movl	0xd8(%ebp),%edi
0000470f	movl	0x14(%edi),%edi
00004712	testl	%edi,%edi
00004714	je	0x00004a5b
0000471a	movb	0x10(%edi),%bl
0000471d	testb	$0x01,%al
0000471f	jne	0x0000474d
00004721	movl	%esi,(%esp)
00004724	movl	$0x00000001,0x04(%esp)
0000472c	calll	CUtlBuffer::CheckPut(int)
00004731	cmpb	$0x01,%al
00004733	jne	0x00004769
00004735	movl	(%esi),%eax
00004737	movl	0x10(%esi),%ecx
0000473a	subl	0x20(%esi),%ecx
0000473d	movb	%bl,(%eax,%ecx)
00004740	incl	0x10(%esi)
00004743	movl	%esi,(%esp)
00004746	calll	CUtlBuffer::AddNullTermination()
0000474b	jmp	0x00004769
0000474d	movzbl	%bl,%eax
00004750	movl	%eax,0x08(%esp)
00004754	movl	0xdc(%ebp),%eax
00004757	leal	0x3ac10-0x46ae(%eax),%eax
0000475d	movl	%eax,0x04(%esp)
00004761	movl	%esi,(%esp)
00004764	calll	CUtlBuffer::Printf(char const*, ...)
00004769	movl	(%edi),%eax
0000476b	movl	%eax,(%esp)
0000476e	movl	0xdc(%ebp),%eax
00004771	call	*KeyValues::s_pfGetStringForSymbol-0x46ae(%eax)
00004777	movl	%eax,0x04(%esp)
0000477b	movl	%esi,(%esp)
0000477e	calll	CUtlBuffer::PutString(char const*)
00004783	movsbl	0x10(%edi),%eax
00004787	movl	%edi,0xd8(%ebp)
0000478a	cmpl	$0x07,%eax
0000478d	ja	0x00004709
00004793	movl	0xdc(%ebp),%ecx
00004796	movl	0x0000040e(%ecx,%eax,4),%eax
0000479d	addl	%ecx,%eax
0000479f	jmp	*%eax
000047a1	movl	0xd8(%ebp),%eax
000047a4	movl	0x18(%eax),%eax
000047a7	movl	%esi,0x04(%esp)
000047ab	movl	%eax,(%esp)
000047ae	calll	KeyValues::WriteAsBinary(CUtlBuffer&)
000047b3	jmp	0x00004709
000047b8	movl	0xd8(%ebp),%eax
000047bb	movl	0x04(%eax),%eax
000047be	testl	%eax,%eax
000047c0	je	0x000047d8
000047c2	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
000047c5	je	0x000047d8
000047c7	movl	%eax,0x04(%esp)
000047cb	movl	%esi,(%esp)
000047ce	calll	CUtlBuffer::PutString(char const*)
000047d3	jmp	0x00004709
000047d8	movl	0xdc(%ebp),%eax
000047db	leal	0x3a9e0-0x46ae(%eax),%eax
000047e1	jmp	0x000047c7
000047e3	movl	0xd8(%ebp),%eax
000047e6	movl	0x0c(%eax),%edi
000047e9	testb	$0x01,0x15(%esi)
000047ed	jne	0x0000482e
000047ef	movl	%esi,(%esp)
000047f2	movl	$0x00000004,0x04(%esp)
000047fa	calll	CUtlBuffer::CheckPut(int)
000047ff	cmpb	$0x01,%al
00004801	jne	0x00004709
00004807	movl	0x10(%esi),%eax
0000480a	subl	0x20(%esi),%eax
0000480d	addl	(%esi),%eax
0000480f	testb	$0x01,0x34(%esi)
00004813	je	0x0000481b
00004815	testl	%eax,%eax
00004817	je	0x0000481d
00004819	bswap	%edi
0000481b	movl	%edi,(%eax)
0000481d	addl	$0x04,0x10(%esi)
00004821	movl	%esi,(%esp)
00004824	calll	CUtlBuffer::AddNullTermination()
00004829	jmp	0x00004709
0000482e	movl	%edi,0x08(%esp)
00004832	movl	0xdc(%ebp),%eax
00004835	leal	0x3a97b-0x46ae(%eax),%eax
0000483b	jmp	0x000046fd
00004840	movl	0xd8(%ebp),%eax
00004843	movl	0x04(%eax),%eax
00004846	movsd	(%eax),%xmm0
0000484a	testb	$0x01,0x15(%esi)
0000484e	jne	0x0000490e
00004854	movl	%esi,(%esp)
00004857	movsd	%xmm0,0xe8(%ebp)
0000485c	movsd	%xmm0,0xd0(%ebp)
00004861	movl	$0x00000008,0x04(%esp)
00004869	calll	CUtlBuffer::CheckPut(int)
0000486e	testb	%al,%al
00004870	je	0x00004709
00004876	movl	0x10(%esi),%eax
00004879	subl	0x20(%esi),%eax
0000487c	addl	(%esi),%eax
0000487e	testb	$0x01,0x34(%esi)
00004882	jne	0x0000488b
00004884	movsd	0xd0(%ebp),%xmm0
00004889	jmp	0x000048a4
0000488b	testl	%eax,%eax
0000488d	je	0x000048a8
0000488f	movl	0xe8(%ebp),%edx
00004892	movl	0xec(%ebp),%ecx
00004895	bswap	%edx
00004897	movl	%edx,0xe4(%ebp)
0000489a	bswap	%ecx
0000489c	movl	%ecx,0xe0(%ebp)
0000489f	movsd	0xe0(%ebp),%xmm0
000048a4	movsd	%xmm0,(%eax)
000048a8	addl	$0x08,0x10(%esi)
000048ac	jmp	0x00004821
000048b1	movl	0xd8(%ebp),%eax
000048b4	movss	0x0c(%eax),%xmm0
000048b9	testb	$0x01,0x15(%esi)
000048bd	jne	0x0000490a
000048bf	movl	%esi,(%esp)
000048c2	movl	$0x00000004,0x04(%esp)
000048ca	movss	%xmm0,0xd0(%ebp)
000048cf	calll	CUtlBuffer::CheckPut(int)
000048d4	movss	0xd0(%ebp),%xmm0
000048d9	testb	%al,%al
000048db	je	0x00004709
000048e1	movl	0x10(%esi),%eax
000048e4	subl	0x20(%esi),%eax
000048e7	addl	(%esi),%eax
000048e9	testb	$0x01,0x34(%esi)
000048ed	je	0x00004901
000048ef	testl	%eax,%eax
000048f1	je	0x0000481d
000048f7	movd	%xmm0,%ecx
000048fb	bswap	%ecx
000048fd	movd	%ecx,%xmm0
00004901	movss	%xmm0,(%eax)
00004905	jmp	0x0000481d
0000490a	cvtss2sd	%xmm0,%xmm0
0000490e	movsd	%xmm0,0x08(%esp)
00004914	movl	0xdc(%ebp),%eax
00004917	leal	0x3a988-0x46ae(%eax),%eax
0000491d	jmp	0x000046fd
00004922	movl	0xd8(%ebp),%edi
00004925	movb	0x0c(%edi),%bl
00004928	testb	$0x01,0x15(%esi)
0000492c	jne	0x0000495a
0000492e	movl	%esi,(%esp)
00004931	movl	$0x00000001,0x04(%esp)
00004939	calll	CUtlBuffer::CheckPut(int)
0000493e	cmpb	$0x01,%al
00004940	jne	0x00004976
00004942	movl	(%esi),%eax
00004944	movl	0x10(%esi),%ecx
00004947	subl	0x20(%esi),%ecx
0000494a	movb	%bl,(%eax,%ecx)
0000494d	incl	0x10(%esi)
00004950	movl	%esi,(%esp)
00004953	calll	CUtlBuffer::AddNullTermination()
00004958	jmp	0x00004976
0000495a	movzbl	%bl,%eax
0000495d	movl	%eax,0x08(%esp)
00004961	movl	0xdc(%ebp),%eax
00004964	leal	0x3ac10-0x46ae(%eax),%eax
0000496a	movl	%eax,0x04(%esp)
0000496e	movl	%esi,(%esp)
00004971	calll	CUtlBuffer::Printf(char const*, ...)
00004976	movb	0x0d(%edi),%bl
00004979	testb	$0x01,0x15(%esi)
0000497d	jne	0x000049ab
0000497f	movl	%esi,(%esp)
00004982	movl	$0x00000001,0x04(%esp)
0000498a	calll	CUtlBuffer::CheckPut(int)
0000498f	cmpb	$0x01,%al
00004991	jne	0x000049c7
00004993	movl	(%esi),%eax
00004995	movl	0x10(%esi),%ecx
00004998	subl	0x20(%esi),%ecx
0000499b	movb	%bl,(%eax,%ecx)
0000499e	incl	0x10(%esi)
000049a1	movl	%esi,(%esp)
000049a4	calll	CUtlBuffer::AddNullTermination()
000049a9	jmp	0x000049c7
000049ab	movzbl	%bl,%eax
000049ae	movl	%eax,0x08(%esp)
000049b2	movl	0xdc(%ebp),%eax
000049b5	leal	0x3ac10-0x46ae(%eax),%eax
000049bb	movl	%eax,0x04(%esp)
000049bf	movl	%esi,(%esp)
000049c2	calll	CUtlBuffer::Printf(char const*, ...)
000049c7	movb	0x0e(%edi),%bl
000049ca	testb	$0x01,0x15(%esi)
000049ce	jne	0x000049fc
000049d0	movl	%esi,(%esp)
000049d3	movl	$0x00000001,0x04(%esp)
000049db	calll	CUtlBuffer::CheckPut(int)
000049e0	cmpb	$0x01,%al
000049e2	jne	0x00004a18
000049e4	movl	(%esi),%eax
000049e6	movl	0x10(%esi),%ecx
000049e9	subl	0x20(%esi),%ecx
000049ec	movb	%bl,(%eax,%ecx)
000049ef	incl	0x10(%esi)
000049f2	movl	%esi,(%esp)
000049f5	calll	CUtlBuffer::AddNullTermination()
000049fa	jmp	0x00004a18
000049fc	movzbl	%bl,%eax
000049ff	movl	%eax,0x08(%esp)
00004a03	movl	0xdc(%ebp),%eax
00004a06	leal	0x3ac10-0x46ae(%eax),%eax
00004a0c	movl	%eax,0x04(%esp)
00004a10	movl	%esi,(%esp)
00004a13	calll	CUtlBuffer::Printf(char const*, ...)
00004a18	movb	0x0f(%edi),%bl
00004a1b	movl	%edi,0xd8(%ebp)
00004a1e	testb	$0x01,0x15(%esi)
00004a22	jne	0x00004a4f
00004a24	movl	%esi,(%esp)
00004a27	movl	$0x00000001,0x04(%esp)
00004a2f	calll	CUtlBuffer::CheckPut(int)
00004a34	cmpb	$0x01,%al
00004a36	jne	0x00004709
00004a3c	movl	(%esi),%eax
00004a3e	movl	0x10(%esi),%ecx
00004a41	subl	0x20(%esi),%ecx
00004a44	movb	%bl,(%eax,%ecx)
00004a47	incl	0x10(%esi)
00004a4a	jmp	0x00004821
00004a4f	movzbl	%bl,%eax
00004a52	movl	%eax,0x08(%esp)
00004a56	jmp	0x000046f4
00004a5b	testb	$0x01,%al
00004a5d	jne	0x00004a8c
00004a5f	movl	%esi,(%esp)
00004a62	movl	$0x00000001,0x04(%esp)
00004a6a	calll	CUtlBuffer::CheckPut(int)
00004a6f	cmpb	$0x01,%al
00004a71	jne	0x00004aa9
00004a73	movl	(%esi),%eax
00004a75	movl	0x10(%esi),%ecx
00004a78	subl	0x20(%esi),%ecx
00004a7b	movb	$0x08,(%eax,%ecx)
00004a7f	incl	0x10(%esi)
00004a82	movl	%esi,(%esp)
00004a85	calll	CUtlBuffer::AddNullTermination()
00004a8a	jmp	0x00004aa9
00004a8c	movl	0xdc(%ebp),%eax
00004a8f	leal	0x3ac10-0x46ae(%eax),%eax
00004a95	movl	%eax,0x04(%esp)
00004a99	movl	%esi,(%esp)
00004a9c	movl	$0x00000008,0x08(%esp)
00004aa4	calll	CUtlBuffer::Printf(char const*, ...)
00004aa9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%esi)
00004aad	sete	%cl
00004ab0	movzbl	%cl,%eax
00004ab3	addl	$0x3c,%esp
00004ab6	popl	%esi
00004ab7	popl	%edi
00004ab8	popl	%ebx
00004ab9	popl	%ebp
00004aba	ret
00004abb	nop
00004abc	repz/addb	%al,(%eax)
00004abf	addb	%cl,(%edx)
00004ac1	addl	%eax,(%eax)
00004ac3	addb	%dh,0x03000001
00004ac9	addb	(%eax),%al
00004acb	addb	%dh,(%edx)
00004acd	addb	%al,(%eax)
00004acf	addb	%bl,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx)
00004ad2	addb	%al,(%eax)
00004ad4	je	0x00004ad8
00004ad6	addb	%al,(%eax)
00004ad8	xchgl	%edx,%eax
00004ad9	addl	%eax,(%eax)
00004adb	addb	%cl,(%edi)
00004add	popl	%ds
00004ade	incl	%eax
00004adf	addb	%dl,0x89(%ebp)
00004ae2	inl	$0x53,%eax
00004ae4	pushl	%edi
00004ae5	pushl	%esi
00004ae6	subl	$0x0000204c,%esp
00004aec	calll	0x00004af1
00004af1	popl	%eax
00004af2	movl	%eax,0xffffdfc8(%ebp)
00004af8	movl	0x42cec-0x4af1(%eax),%eax
00004afe	movl	%eax,0xffffdfbc(%ebp)
00004b04	movl	(%eax),%eax
00004b06	movl	%eax,0xf0(%ebp)
00004b09	xorb	%al,%al
00004b0b	movl	0x0c(%ebp),%edi
00004b0e	testb	$0x01,0x15(%edi)
00004b12	jne	0x000052c5
00004b18	xorb	%al,%al
00004b1a	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004b1e	jne	0x000052c5
00004b24	movl	0x10(%ebp),%esi
00004b27	movl	%esi,0xffffdfc0(%ebp)
00004b2d	movl	0x08(%ebp),%ebx
00004b30	movl	%ebx,(%esp)
00004b33	calll	KeyValues::RemoveEverything()
00004b38	movl	$0xffffffff,(%ebx)
00004b3e	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%ebx)
00004b45	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%ebx)
00004b4c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%ebx)
00004b53	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebx)
00004b5a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%ebx)
00004b61	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%ebx)
00004b67	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebx)
00004b6e	movb	$0x01,0x12(%ebx)
00004b72	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%ebx)
00004b76	xorb	%al,%al
00004b78	cmpl	$0x64,%esi
00004b7b	movl	%ebx,%esi
00004b7d	jg	0x000052c5
00004b83	testb	$0x01,0x15(%edi)
00004b87	jne	0x00004bc7
00004b89	movl	%esi,%ebx
00004b8b	movl	%edi,(%esp)
00004b8e	movl	$0x00000001,0x04(%esp)
00004b96	calll	CUtlBuffer::CheckGet(int)
00004b9b	cmpb	$0x01,%al
00004b9d	jne	0x00004bba
00004b9f	movl	(%edi),%ecx
00004ba1	movl	0x0c(%edi),%eax
00004ba4	movl	%eax,%edx
00004ba6	subl	0x20(%edi),%edx
00004ba9	movb	(%ecx,%edx),%cl
00004bac	movb	%cl,0xffffdfd3(%ebp)
00004bb2	incl	%eax
00004bb3	movl	%eax,0x0c(%edi)
00004bb6	movl	%ebx,%esi
00004bb8	jmp	0x00004bf6
00004bba	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd3(%ebp)
00004bc1	xorb	%cl,%cl
00004bc3	movl	%ebx,%esi
00004bc5	jmp	0x00004bf6
00004bc7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd3(%ebp)
00004bce	leal	0xffffdfd3(%ebp),%eax
00004bd4	movl	%eax,0x08(%esp)
00004bd8	movl	0xffffdfc8(%ebp),%eax
00004bde	leal	0x3ac10-0x4af1(%eax),%eax
00004be4	movl	%eax,0x04(%esp)
00004be8	movl	%edi,(%esp)
00004beb	calll	CUtlBuffer::Scanf(char const*, ...)
00004bf0	movb	0xffffdfd3(%ebp),%cl
00004bf6	incl	0xffffdfc0(%ebp)
00004bfc	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
00004c00	cmpb	$0x08,%cl
00004c03	je	0x000052bb
00004c09	movb	%cl,0x10(%esi)
00004c0c	movl	%esi,0xffffdfcc(%ebp)
00004c12	leal	0xffffeff0(%ebp),%ebx
00004c18	movl	%ebx,0x04(%esp)
00004c1c	movl	0x0c(%ebp),%esi
00004c1f	movl	%esi,(%esp)
00004c22	movl	$0x00000fff,0x08(%esp)
00004c2a	movb	%cl,0xffffdfc4(%ebp)
00004c30	calll	CUtlBuffer::GetString(char*, int)
00004c35	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xef(%ebp)
00004c39	movl	%ebx,(%esp)
00004c3c	movl	0xffffdfc8(%ebp),%ebx
00004c42	movl	%esi,%edi
00004c44	movl	$0x00000001,0x04(%esp)
00004c4c	call	*KeyValues::s_pfGetSymbolForString-0x4af1(%ebx)
00004c52	movb	0xffffdfc4(%ebp),%cl
00004c58	movl	%ebx,%esi
00004c5a	movl	0xffffdfcc(%ebp),%ebx
00004c60	movl	%eax,(%ebx)
00004c62	cmpb	$0x07,%cl
00004c65	ja	0x00005184
00004c6b	movzbl	%cl,%eax
00004c6e	movl	0x000007fb(%esi,%eax,4),%eax
00004c75	addl	%esi,%eax
00004c77	jmp	*%eax
00004c79	calll	_KeyValuesSystem
00004c7e	movl	(%eax),%ecx
00004c80	movl	%eax,(%esp)
00004c83	movl	$0x00000020,0x04(%esp)
00004c8b	call	*0x04(%ecx)
00004c8e	movl	%eax,%edi
00004c90	movl	$0xffffffff,(%edi)
00004c96	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00004c9d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
00004ca4	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00004cab	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00004cb2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00004cb9	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
00004cbf	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00004cc6	movb	$0x01,0x12(%edi)
00004cca	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
00004cce	movl	KeyValues::s_pfGetSymbolForString-0x4af1(%esi),%eax
00004cd4	leal	0x3a9e0-0x4af1(%esi),%ecx
00004cda	movl	%ecx,(%esp)
00004cdd	movl	$0x00000001,0x04(%esp)
00004ce5	call	*%eax
00004ce7	movl	%eax,(%edi)
00004ce9	movl	%edi,0x18(%ebx)
00004cec	movl	0xffffdfc0(%ebp),%eax
00004cf2	movl	%eax,0x08(%esp)
00004cf6	movl	0x0c(%ebp),%ebx
00004cf9	movl	%ebx,0x04(%esp)
00004cfd	movl	%edi,(%esp)
00004d00	movl	%ebx,%edi
00004d02	calll	KeyValues::ReadAsBinary(CUtlBuffer&, int)
00004d07	jmp	0x00005184
00004d0c	leal	0xffffdff0(%ebp),%esi
00004d12	movl	%esi,0x04(%esp)
00004d16	movl	%edi,(%esp)
00004d19	movl	$0x00000fff,0x08(%esp)
00004d21	calll	CUtlBuffer::GetString(char*, int)
00004d26	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffefef(%ebp)
00004d2d	movl	%esi,(%esp)
00004d30	calll	_strlen
00004d35	movl	%eax,%esi
00004d37	incl	%esi
00004d38	testl	%esi,%esi
00004d3a	movl	$0xffffffff,%eax
00004d3f	cmovnsl	%esi,%eax
00004d42	movl	%eax,(%esp)
00004d45	calll	operator new[](unsigned long)
00004d4a	movl	%eax,0x04(%ebx)
00004d4d	movl	%esi,0x08(%esp)
00004d51	movl	0xffffdfc8(%ebp),%esi
00004d57	leal	0xffffdff0(%ebp),%ecx
00004d5d	movl	%ecx,0x04(%esp)
00004d61	movl	%eax,(%esp)
00004d64	calll	_memcpy
00004d69	jmp	0x00005184
00004d6e	testb	$0x01,0x15(%edi)
00004d72	jne	0x00004e01
00004d78	movl	%edi,(%esp)
00004d7b	movl	$0x00000004,0x04(%esp)
00004d83	calll	CUtlBuffer::CheckGet(int)
00004d88	cmpb	$0x01,%al
00004d8a	jne	0x00004ded
00004d8c	movl	%edi,%ecx
00004d8e	movl	%esi,%edi
00004d90	movl	0x0c(%ecx),%eax
00004d93	movl	%eax,%edx
00004d95	subl	0x20(%ecx),%edx
00004d98	addl	(%ecx),%edx
00004d9a	testb	$0x01,0x34(%ecx)
00004d9e	movl	%ecx,%ebx
00004da0	jne	0x00004da6
00004da2	movl	(%edx),%ecx
00004da4	jmp	0x00004dcf
00004da6	leal	0xffffdfd4(%ebp),%ecx
00004dac	testl	%edx,%edx
00004dae	cmovnel	%edx,%ecx
00004db1	movzbl	0x03(%ecx),%edx
00004db5	movzbl	0x02(%ecx),%esi
00004db9	shll	$0x08,%esi
00004dbc	orl	%edx,%esi
00004dbe	movzbl	0x01(%ecx),%edx
00004dc2	shll	$0x10,%edx
00004dc5	orl	%esi,%edx
00004dc7	movzbl	(%ecx),%ecx
00004dca	shll	$0x18,%ecx
00004dcd	orl	%edx,%ecx
00004dcf	movl	%edi,%esi
00004dd1	movl	%ecx,0xffffdfd4(%ebp)
00004dd7	addl	$0x04,%eax
00004dda	movl	%ebx,%edi
00004ddc	movl	%eax,0x0c(%edi)
00004ddf	movl	0xffffdfcc(%ebp),%eax
00004de5	movl	%ecx,0x0c(%eax)
00004de8	jmp	0x00005184
00004ded	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd4(%ebp)
00004df7	xorl	%eax,%eax
00004df9	movl	%eax,0x0c(%ebx)
00004dfc	jmp	0x00005184
00004e01	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfd4(%ebp)
00004e0b	leal	0xffffdfd4(%ebp),%eax
00004e11	movl	%eax,0x08(%esp)
00004e15	leal	0x3a97b-0x4af1(%esi),%eax
00004e1b	movl	%eax,0x04(%esp)
00004e1f	movl	%edi,(%esp)
00004e22	calll	CUtlBuffer::Scanf(char const*, ...)
00004e27	movl	0xffffdfd4(%ebp),%eax
00004e2d	movl	%eax,0x0c(%ebx)
00004e30	jmp	0x00005184
00004e35	movl	$0x00000008,(%esp)
00004e3c	calll	operator new[](unsigned long)
00004e41	movl	%eax,0x04(%ebx)
00004e44	leal	0x3a9cf-0x4af1(%esi),%eax
00004e4a	movl	%eax,0x08(%esp)
00004e4e	leal	0xffffdfd8(%ebp),%eax
00004e54	movl	%eax,0x04(%esp)
00004e58	movl	%edi,(%esp)
00004e5b	calll	void CUtlBuffer::GetType<long long>(long long&, char const*)
00004e60	movl	0x04(%ebx),%eax
00004e63	movsd	0xffffdfd8(%ebp),%xmm0
00004e6b	movsd	%xmm0,(%eax)
00004e6f	jmp	0x00005184
00004e74	testb	$0x01,0x15(%edi)
00004e78	jne	0x00004ee3
00004e7a	movl	%edi,(%esp)
00004e7d	movl	$0x00000004,0x04(%esp)
00004e85	calll	CUtlBuffer::CheckGet(int)
00004e8a	cmpb	$0x01,%al
00004e8c	jne	0x00004ecb
00004e8e	movl	(%edi),%ecx
00004e90	movl	0x0c(%edi),%eax
00004e93	movl	%eax,%edx
00004e95	subl	0x20(%edi),%edx
00004e98	movss	(%ecx,%edx),%xmm0
00004e9d	movss	%xmm0,0xffffdfe0(%ebp)
00004ea5	testb	$0x01,0x34(%edi)
00004ea9	je	0x00004ebb
00004eab	movd	%xmm0,%ecx
00004eaf	bswap	%ecx
00004eb1	movl	%ecx,0xffffdfe0(%ebp)
00004eb7	movd	%ecx,%xmm0
00004ebb	addl	$0x04,%eax
00004ebe	movl	%eax,0x0c(%edi)
00004ec1	movss	%xmm0,0x0c(%ebx)
00004ec6	jmp	0x00005184
00004ecb	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe0(%ebp)
00004ed5	pxor	%xmm0,%xmm0
00004ed9	movss	%xmm0,0x0c(%ebx)
00004ede	jmp	0x00005184
00004ee3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe0(%ebp)
00004eed	leal	0xffffdfe0(%ebp),%eax
00004ef3	movl	%eax,0x08(%esp)
00004ef7	leal	0x3a988-0x4af1(%esi),%eax
00004efd	movl	%eax,0x04(%esp)
00004f01	movl	%edi,(%esp)
00004f04	calll	CUtlBuffer::Scanf(char const*, ...)
00004f09	movss	0xffffdfe0(%ebp),%xmm0
00004f11	movss	%xmm0,0x0c(%ebx)
00004f16	jmp	0x00005184
00004f1b	testb	$0x01,0x15(%edi)
00004f1f	jne	0x00004f59
00004f21	movl	%edi,(%esp)
00004f24	movl	$0x00000001,0x04(%esp)
00004f2c	calll	CUtlBuffer::CheckGet(int)
00004f31	cmpb	$0x01,%al
00004f33	jne	0x00004f4e
00004f35	movl	(%edi),%eax
00004f37	movl	0x0c(%edi),%ecx
00004f3a	movl	%ecx,%edx
00004f3c	subl	0x20(%edi),%edx
00004f3f	movb	(%eax,%edx),%al
00004f42	movb	%al,0xffffdfe4(%ebp)
00004f48	incl	%ecx
00004f49	movl	%ecx,0x0c(%edi)
00004f4c	jmp	0x00004f82
00004f4e	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe4(%ebp)
00004f55	xorb	%al,%al
00004f57	jmp	0x00004f82
00004f59	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe4(%ebp)
00004f60	leal	0xffffdfe4(%ebp),%eax
00004f66	movl	%eax,0x08(%esp)
00004f6a	leal	0x3ac10-0x4af1(%esi),%eax
00004f70	movl	%eax,0x04(%esp)
00004f74	movl	%edi,(%esp)
00004f77	calll	CUtlBuffer::Scanf(char const*, ...)
00004f7c	movb	0xffffdfe4(%ebp),%al
00004f82	movb	%al,0x0c(%ebx)
00004f85	testb	$0x01,0x15(%edi)
00004f89	jne	0x00004fc3
00004f8b	movl	%edi,(%esp)
00004f8e	movl	$0x00000001,0x04(%esp)
00004f96	calll	CUtlBuffer::CheckGet(int)
00004f9b	cmpb	$0x01,%al
00004f9d	jne	0x00004fb8
00004f9f	movl	(%edi),%eax
00004fa1	movl	0x0c(%edi),%ecx
00004fa4	movl	%ecx,%edx
00004fa6	subl	0x20(%edi),%edx
00004fa9	movb	(%eax,%edx),%al
00004fac	movb	%al,0xffffdfe5(%ebp)
00004fb2	incl	%ecx
00004fb3	movl	%ecx,0x0c(%edi)
00004fb6	jmp	0x00004fec
00004fb8	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe5(%ebp)
00004fbf	xorb	%al,%al
00004fc1	jmp	0x00004fec
00004fc3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe5(%ebp)
00004fca	leal	0xffffdfe5(%ebp),%eax
00004fd0	movl	%eax,0x08(%esp)
00004fd4	leal	0x3ac10-0x4af1(%esi),%eax
00004fda	movl	%eax,0x04(%esp)
00004fde	movl	%edi,(%esp)
00004fe1	calll	CUtlBuffer::Scanf(char const*, ...)
00004fe6	movb	0xffffdfe5(%ebp),%al
00004fec	movb	%al,0x0d(%ebx)
00004fef	testb	$0x01,0x15(%edi)
00004ff3	jne	0x0000502d
00004ff5	movl	%edi,(%esp)
00004ff8	movl	$0x00000001,0x04(%esp)
00005000	calll	CUtlBuffer::CheckGet(int)
00005005	cmpb	$0x01,%al
00005007	jne	0x00005022
00005009	movl	(%edi),%eax
0000500b	movl	0x0c(%edi),%ecx
0000500e	movl	%ecx,%edx
00005010	subl	0x20(%edi),%edx
00005013	movb	(%eax,%edx),%al
00005016	movb	%al,0xffffdfe6(%ebp)
0000501c	incl	%ecx
0000501d	movl	%ecx,0x0c(%edi)
00005020	jmp	0x00005056
00005022	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe6(%ebp)
00005029	xorb	%al,%al
0000502b	jmp	0x00005056
0000502d	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe6(%ebp)
00005034	leal	0xffffdfe6(%ebp),%eax
0000503a	movl	%eax,0x08(%esp)
0000503e	leal	0x3ac10-0x4af1(%esi),%eax
00005044	movl	%eax,0x04(%esp)
00005048	movl	%edi,(%esp)
0000504b	calll	CUtlBuffer::Scanf(char const*, ...)
00005050	movb	0xffffdfe6(%ebp),%al
00005056	movb	%al,0x0e(%ebx)
00005059	testb	$0x01,0x15(%edi)
0000505d	jne	0x000050a3
0000505f	movl	%edi,(%esp)
00005062	movl	$0x00000001,0x04(%esp)
0000506a	calll	CUtlBuffer::CheckGet(int)
0000506f	cmpb	$0x01,%al
00005071	jne	0x00005092
00005073	movl	(%edi),%ecx
00005075	movl	0x0c(%edi),%eax
00005078	movl	%eax,%edx
0000507a	subl	0x20(%edi),%edx
0000507d	movb	(%ecx,%edx),%cl
00005080	movb	%cl,0xffffdfe7(%ebp)
00005086	incl	%eax
00005087	movl	%eax,0x0c(%edi)
0000508a	movb	%cl,0x0f(%ebx)
0000508d	jmp	0x00005184
00005092	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe7(%ebp)
00005099	xorb	%al,%al
0000509b	movb	%al,0x0f(%ebx)
0000509e	jmp	0x00005184
000050a3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe7(%ebp)
000050aa	leal	0xffffdfe7(%ebp),%eax
000050b0	movl	%eax,0x08(%esp)
000050b4	leal	0x3ac10-0x4af1(%esi),%eax
000050ba	movl	%eax,0x04(%esp)
000050be	movl	%edi,(%esp)
000050c1	calll	CUtlBuffer::Scanf(char const*, ...)
000050c6	movb	0xffffdfe7(%ebp),%al
000050cc	movb	%al,0x0f(%ebx)
000050cf	jmp	0x00005184
000050d4	testb	$0x01,0x15(%edi)
000050d8	jne	0x00005155
000050da	movl	%edi,(%esp)
000050dd	movl	$0x00000004,0x04(%esp)
000050e5	calll	CUtlBuffer::CheckGet(int)
000050ea	cmpb	$0x01,%al
000050ec	jne	0x00005147
000050ee	movl	0x0c(%edi),%eax
000050f1	movl	%eax,%edx
000050f3	subl	0x20(%edi),%edx
000050f6	addl	(%edi),%edx
000050f8	testb	$0x01,0x34(%edi)
000050fc	jne	0x00005102
000050fe	movl	(%edx),%ecx
00005100	jmp	0x00005139
00005102	leal	0xffffdfe8(%ebp),%ecx
00005108	testl	%edx,%edx
0000510a	cmovnel	%edx,%ecx
0000510d	movzbl	0x03(%ecx),%edx
00005111	movl	%edi,%ebx
00005113	movl	%esi,%edi
00005115	movzbl	0x02(%ecx),%esi
00005119	shll	$0x08,%esi
0000511c	orl	%edx,%esi
0000511e	movzbl	0x01(%ecx),%edx
00005122	shll	$0x10,%edx
00005125	orl	%esi,%edx
00005127	movl	%edi,%esi
00005129	movl	%ebx,%edi
0000512b	movl	0xffffdfcc(%ebp),%ebx
00005131	movzbl	(%ecx),%ecx
00005134	shll	$0x18,%ecx
00005137	orl	%edx,%ecx
00005139	movl	%ecx,0xffffdfe8(%ebp)
0000513f	addl	$0x04,%eax
00005142	movl	%eax,0x0c(%edi)
00005145	jmp	0x00005181
00005147	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe8(%ebp)
00005151	xorl	%ecx,%ecx
00005153	jmp	0x00005181
00005155	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfe8(%ebp)
0000515f	leal	0xffffdfe8(%ebp),%eax
00005165	movl	%eax,0x08(%esp)
00005169	leal	0x3ac10-0x4af1(%esi),%eax
0000516f	movl	%eax,0x04(%esp)
00005173	movl	%edi,(%esp)
00005176	calll	CUtlBuffer::Scanf(char const*, ...)
0000517b	movl	0xffffdfe8(%ebp),%ecx
00005181	movl	%ecx,0x0c(%ebx)
00005184	xorb	%al,%al
00005186	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
0000518a	jne	0x000052c5
00005190	testb	$0x01,0x15(%edi)
00005194	jne	0x000051ce
00005196	movl	%edi,(%esp)
00005199	movl	$0x00000001,0x04(%esp)
000051a1	calll	CUtlBuffer::CheckGet(int)
000051a6	cmpb	$0x01,%al
000051a8	jne	0x000051c3
000051aa	movl	(%edi),%ecx
000051ac	movl	0x0c(%edi),%eax
000051af	movl	%eax,%edx
000051b1	subl	0x20(%edi),%edx
000051b4	movb	(%ecx,%edx),%bl
000051b7	movb	%bl,0xffffdfef(%ebp)
000051bd	incl	%eax
000051be	movl	%eax,0x0c(%edi)
000051c1	jmp	0x000051f7
000051c3	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfef(%ebp)
000051ca	xorb	%bl,%bl
000051cc	jmp	0x0000521f
000051ce	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0xffffdfef(%ebp)
000051d5	leal	0xffffdfef(%ebp),%eax
000051db	movl	%eax,0x08(%esp)
000051df	leal	0x3ac10-0x4af1(%esi),%eax
000051e5	movl	%eax,0x04(%esp)
000051e9	movl	%edi,(%esp)
000051ec	calll	CUtlBuffer::Scanf(char const*, ...)
000051f1	movb	0xffffdfef(%ebp),%bl
000051f7	cmpb	$0x08,%bl
000051fa	je	0x000052bb
00005200	jmp	0x0000521f
00005202	movl	%eax,%esi
00005204	calll	_KeyValuesSystem
00005209	movl	(%eax),%ecx
0000520b	movl	0x08(%ecx),%ecx
0000520e	movl	%edi,0x04(%esp)
00005212	movl	%eax,(%esp)
00005215	call	*%ecx
00005217	movl	%esi,(%esp)
0000521a	calll	__Unwind_Resume
0000521f	calll	_KeyValuesSystem
00005224	movl	(%eax),%ecx
00005226	movl	%eax,(%esp)
00005229	movl	$0x00000020,0x04(%esp)
00005231	call	*0x04(%ecx)
00005234	movl	%eax,%edi
00005236	movl	$0xffffffff,(%edi)
0000523c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x18(%edi)
00005243	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%edi)
0000524a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x1c(%edi)
00005251	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
00005258	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
0000525f	movw	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%edi)
00005265	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
0000526c	movb	$0x01,0x12(%edi)
00005270	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x13(%edi)
00005274	movl	KeyValues::s_pfGetSymbolForString-0x4af1(%esi),%eax
0000527a	leal	0x3a9e0-0x4af1(%esi),%ecx
00005280	movl	%ecx,(%esp)
00005283	movl	$0x00000001,0x04(%esp)
0000528b	call	*%eax
0000528d	movl	%eax,(%edi)
0000528f	movl	0xffffdfcc(%ebp),%eax
00005295	movl	%edi,0x14(%eax)
00005298	movl	%edi,%esi
0000529a	movb	%bl,%cl
0000529c	jmp	0x00004c00
000052a1	movl	%eax,%esi
000052a3	calll	_KeyValuesSystem
000052a8	movl	(%eax),%ecx
000052aa	movl	0x08(%ecx),%ecx
000052ad	movl	%edi,0x04(%esp)
000052b1	movl	%eax,(%esp)
000052b4	call	*%ecx
000052b6	jmp	0x00005217
000052bb	movl	0x0c(%ebp),%eax
000052be	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x14(%eax)
000052c2	sete	%al
000052c5	movl	0xffffdfbc(%ebp),%ecx
000052cb	movl	(%ecx),%ecx
000052cd	cmpl	0xf0(%ebp),%ecx
000052d0	jne	0x000052e5
000052d2	movzbl	%al,%eax
000052d5	addl	$0x0000204c,%esp
000052db	popl	%esi
000052dc	popl	%edi
000052dd	popl	%ebx
000052de	popl	%ebp
000052df	ret
000052e0	calll	std::terminate()
000052e5	calll	___stack_chk_fail
000052ea	nop
000052ec	movb	%al,(%ecx)
000052ee	addb	%al,(%eax)
000052f0	sbbl	(%edx),%eax
000052f2	addb	%al,(%eax)
000052f4	jge	0x000052f8
000052f6	addb	%al,(%eax)
000052f8	addl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
000052fb	addb	%ah,%bl
000052fd	addl	$0x06930000,%eax
00005302	addb	%al,(%eax)
00005304	subb	(%eax,%eax),%al
00005307	addb	%al,KeyValues::GetSymbolForStringClassic(char const*, bool)(%ebx,%eax)
0000530b	addb	%cl,(%edi)
0000530d	popl	%ds
0000530e	incl	%eax
0000530f	addb	%dl,0x89(%ebp)
00005312	inl	$0x83,%eax
00005314	inb	%dx,%al
00005315	orb	%ch,%al
00005317	inl	$0xac,%eax
00005319	.byte 0xff, 0xff #bad opcode
0000531b	movl	(%eax),%ecx
0000531d	movl	0x08(%ebp),%edx
00005320	movl	%edx,0x04(%esp)
00005324	movl	%eax,(%esp)
00005327	call	*0x04(%ecx)
0000532a	addl	$0x08,%esp
0000532d	popl	%ebp
0000532e	ret
0000532f	nop
KeyValues::operator delete(void*, int, char const*, int):
00005330	pushl	%ebp
00005331	movl	%esp,%ebp
00005333	subl	$0x08,%esp
00005336	calll	_KeyValuesSystem
0000533b	movl	(%eax),%ecx
0000533d	movl	0x08(%ebp),%edx
00005340	movl	%edx,0x04(%esp)
00005344	movl	%eax,(%esp)
00005347	call	*0x08(%ecx)
0000534a	addl	$0x08,%esp
0000534d	popl	%ebp
0000534e	ret
0000534f	nop
KeyValues::UnpackIntoStructure(KeyValuesUnpackStructure const*, void*, unsigned long):
00005350	pushl	%ebp
00005351	movl	%esp,%ebp
00005353	pushl	%ebx
00005354	pushl	%edi
00005355	pushl	%esi
00005356	subl	$0x4c,%esp
00005359	calll	0x0000535e
0000535e	popl	%eax
0000535f	movl	%eax,0xd8(%ebp)
00005362	movl	0x0c(%ebp),%edi
00005365	movl	(%edi),%eax
00005367	testl	%eax,%eax
00005369	je	0x00005797
0000536f	addl	$0x14,%edi
00005372	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005380	movl	%edi,0xdc(%ebp)
00005383	movl	0xf8(%edi),%esi
00005386	movl	%eax,0x04(%esp)
0000538a	movl	0x08(%ebp),%eax
0000538d	movl	%eax,(%esp)
00005390	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005398	calll	KeyValues::FindKey(char const*, bool)
0000539d	movl	0xf4(%edi),%ecx
000053a0	cmpl	$0x06,%ecx
000053a3	ja	0x00005787
000053a9	movl	0x10(%ebp),%edx
000053ac	leal	(%edx,%esi),%edx
000053af	movl	%edx,0xd4(%ebp)
000053b2	movl	0xd8(%ebp),%edx
000053b5	movl	0x00000442(%edx,%ecx,4),%ecx
000053bc	addl	%edx,%ecx
000053be	jmp	*%ecx
000053c0	movl	0xdc(%ebp),%esi
000053c3	movl	0xf0(%esi),%eax
000053c6	pxor	%xmm0,%xmm0
000053ca	testl	%eax,%eax
000053cc	je	0x000053de
000053ce	movl	%eax,(%esp)
000053d1	calll	_atof
000053d6	fstps	0xf0(%ebp)
000053d9	movss	0xf0(%ebp),%xmm0
000053de	movss	%xmm0,0xd0(%ebp)
000053e3	movl	0xec(%esi),%eax
000053e6	movl	%esi,0xdc(%ebp)
000053e9	movl	%eax,0x04(%esp)
000053ed	movl	0x08(%ebp),%eax
000053f0	movl	%eax,(%esp)
000053f3	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
000053fb	calll	KeyValues::FindKey(char const*, bool)
00005400	movss	0xd0(%ebp),%xmm0
00005405	testl	%eax,%eax
00005407	je	0x00005475
00005409	movsbl	0x10(%eax),%ecx
0000540d	decl	%ecx
0000540e	pxor	%xmm0,%xmm0
00005412	cmpl	$0x06,%ecx
00005415	ja	0x00005475
00005417	movl	0xd8(%ebp),%edx
0000541a	movl	0x0000047a(%edx,%ecx,4),%ecx
00005421	addl	%edx,%ecx
00005423	jmp	*%ecx
00005425	movl	0x04(%eax),%eax
00005428	movl	%eax,(%esp)
0000542b	calll	_atof
00005430	fstps	0xe0(%ebp)
00005433	movss	0xe0(%ebp),%xmm0
00005438	jmp	0x00005475
0000543a	movss	0x0c(%eax),%xmm0
0000543f	jmp	0x00005475
00005441	cvtsi2ss	0x0c(%eax),%xmm0
00005446	jmp	0x00005475
00005448	movl	0x04(%eax),%eax
0000544b	movl	(%eax),%ecx
0000544d	movl	0x04(%eax),%eax
00005450	movl	%eax,0xec(%ebp)
00005453	movl	%ecx,0xe8(%ebp)
00005456	testl	%eax,%eax
00005458	sets	%al
0000545b	xorb	$0x01,%al
0000545d	movzbl	%al,%eax
00005460	fildq	0xe8(%ebp)
00005463	movl	0xd8(%ebp),%ecx
00005466	fadds	0x3a8f8-0x535e(%ecx,%eax,4)
0000546d	fstps	0xe4(%ebp)
00005470	movss	0xe4(%ebp),%xmm0
00005475	movl	0xd4(%ebp),%eax
00005478	movss	%xmm0,(%eax)
0000547c	jmp	0x00005787
00005481	movl	0xdc(%ebp),%ecx
00005484	movl	0xec(%ecx),%eax
00005487	movl	0xf0(%ecx),%ecx
0000548a	movl	%ecx,0x08(%esp)
0000548e	movl	%eax,0x04(%esp)
00005492	movl	0x08(%ebp),%eax
00005495	movl	%eax,(%esp)
00005498	movl	0x10(%ebp),%eax
0000549b	leal	0x08(%esi,%eax),%edi
0000549f	leal	0x04(%esi,%eax),%esi
000054a3	calll	KeyValues::GetString(char const*, char const*)
000054a8	testl	%eax,%eax
000054aa	movl	0xd4(%ebp),%ebx
000054ad	je	0x000054d9
000054af	movl	%edi,0x10(%esp)
000054b3	movl	%esi,0x0c(%esp)
000054b7	movl	%ebx,0x08(%esp)
000054bb	movl	0xd8(%ebp),%ecx
000054be	leal	0x3ab8a-0x535e(%ecx),%ecx
000054c4	movl	%ecx,0x04(%esp)
000054c8	movl	%eax,(%esp)
000054cb	calll	_sscanf
000054d0	cmpl	$0x03,%eax
000054d3	je	0x00005787
000054d9	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%ebx)
000054df	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
000054e5	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
000054eb	jmp	0x00005787
000054f0	movl	0xdc(%ebp),%ecx
000054f3	movl	0xec(%ecx),%eax
000054f6	movl	0xf0(%ecx),%ecx
000054f9	movl	%ecx,0x08(%esp)
000054fd	movl	%eax,0x04(%esp)
00005501	movl	0x08(%ebp),%eax
00005504	movl	%eax,(%esp)
00005507	calll	KeyValues::GetString(char const*, char const*)
0000550c	testl	%eax,%eax
0000550e	movl	0xd4(%ebp),%edi
00005511	je	0x00005550
00005513	movl	0x10(%ebp),%edx
00005516	leal	0x0c(%esi,%edx),%ecx
0000551a	movl	%ecx,0x14(%esp)
0000551e	leal	0x08(%esi,%edx),%ecx
00005522	movl	%ecx,0x10(%esp)
00005526	leal	0x04(%esi,%edx),%ecx
0000552a	movl	%ecx,0x0c(%esp)
0000552e	movl	%edi,0x08(%esp)
00005532	movl	0xd8(%ebp),%ecx
00005535	leal	0x3a9d4-0x535e(%ecx),%ecx
0000553b	movl	%ecx,0x04(%esp)
0000553f	movl	%eax,(%esp)
00005542	calll	_sscanf
00005547	cmpl	$0x04,%eax
0000554a	je	0x00005787
00005550	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
00005557	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
0000555d	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%edi)
00005564	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%edi)
0000556b	jmp	0x00005787
00005570	movl	0xdc(%ebp),%ecx
00005573	movl	0xec(%ecx),%eax
00005576	movl	0xf0(%ecx),%ecx
00005579	movl	%ecx,0x08(%esp)
0000557d	movl	%eax,0x04(%esp)
00005581	movl	0x08(%ebp),%eax
00005584	movl	%eax,(%esp)
00005587	calll	KeyValues::GetString(char const*, char const*)
0000558c	testl	%eax,%eax
0000558e	movl	0xd4(%ebp),%edi
00005591	je	0x000055c0
00005593	movl	0x10(%ebp),%ecx
00005596	leal	0x04(%esi,%ecx),%ecx
0000559a	movl	%ecx,0x0c(%esp)
0000559e	movl	%edi,0x08(%esp)
000055a2	movl	0xd8(%ebp),%ecx
000055a5	leal	0x3ab93-0x535e(%ecx),%ecx
000055ab	movl	%ecx,0x04(%esp)
000055af	movl	%eax,(%esp)
000055b2	calll	_sscanf
000055b7	cmpl	$0x02,%eax
000055ba	je	0x00005787
000055c0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%edi)
000055c7	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi)
000055cd	jmp	0x00005787
000055d2	movl	0xdc(%ebp),%esi
000055d5	movl	0xec(%esi),%eax
000055d8	movl	0xf0(%esi),%ecx
000055db	movl	%ecx,0x08(%esp)
000055df	movl	%eax,0x04(%esp)
000055e3	movl	0x08(%ebp),%eax
000055e6	movl	%eax,(%esp)
000055e9	calll	KeyValues::GetString(char const*, char const*)
000055ee	movl	0xfc(%esi),%ecx
000055f1	movl	%ecx,0x08(%esp)
000055f5	movl	%eax,0x04(%esp)
000055f9	movl	0xd4(%ebp),%eax
000055fc	movl	%eax,(%esp)
000055ff	calll	_strncpy
00005604	jmp	0x00005787
00005609	movl	0xdc(%ebp),%edi
0000560c	movl	0xf0(%edi),%eax
0000560f	xorl	%esi,%esi
00005611	testl	%eax,%eax
00005613	je	0x0000561f
00005615	movl	%eax,(%esp)
00005618	calll	_atoi
0000561d	movl	%eax,%esi
0000561f	movl	0xec(%edi),%eax
00005622	movl	%edi,0xdc(%ebp)
00005625	movl	%eax,0x04(%esp)
00005629	movl	0x08(%ebp),%eax
0000562c	movl	%eax,(%esp)
0000562f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005637	calll	KeyValues::FindKey(char const*, bool)
0000563c	testl	%eax,%eax
0000563e	je	0x00005692
00005640	movsbl	0x10(%eax),%ecx
00005644	decl	%ecx
00005645	cmpl	$0x06,%ecx
00005648	ja	0x0000568f
0000564a	xorl	%esi,%esi
0000564c	movl	0xd8(%ebp),%edx
0000564f	movl	0x0000045e(%edx,%ecx,4),%ecx
00005656	addl	%edx,%ecx
00005658	jmp	*%ecx
0000565a	movl	0x04(%eax),%eax
0000565d	movl	%eax,(%esp)
00005660	calll	_atoi
00005665	movl	%eax,%esi
00005667	jmp	0x00005692
00005669	movl	0x08(%eax),%eax
0000566c	movl	%eax,(%esp)
0000566f	movl	$0x0000000a,0x08(%esp)
00005677	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
0000567f	calll	_wcstol
00005684	movl	%eax,%esi
00005686	jmp	0x00005692
00005688	cvttss2si	0x0c(%eax),%esi
0000568d	jmp	0x00005692
0000568f	movl	0x0c(%eax),%esi
00005692	movl	0xd4(%ebp),%eax
00005695	movl	%esi,(%eax)
00005697	jmp	0x00005787
0000569c	testl	%eax,%eax
0000569e	movl	0xdc(%ebp),%ecx
000056a1	je	0x000056ee
000056a3	movl	0xec(%ecx),%eax
000056a6	movl	%ecx,0xdc(%ebp)
000056a9	movl	%eax,0x04(%esp)
000056ad	movl	0x08(%ebp),%eax
000056b0	movl	%eax,(%esp)
000056b3	calll	KeyValues::GetColor(char const*)
000056b8	movzbl	%al,%ecx
000056bb	cvtsi2ss	%ecx,%xmm0
000056bf	movl	0x10(%ebp),%edx
000056c2	movss	%xmm0,(%edx,%esi)
000056c7	movzbl	%ah,%ecx
000056ca	cvtsi2ss	%ecx,%xmm1
000056ce	movss	%xmm1,0x04(%edx,%esi)
000056d4	shrl	$0x10,%eax
000056d7	movzbl	%al,%eax
000056da	cvtsi2ss	%eax,%xmm1
000056de	movss	%xmm1,0x08(%edx,%esi)
000056e4	leal	0x08(%edx,%esi),%edi
000056e8	leal	0x04(%edx,%esi),%ebx
000056ec	jmp	0x0000575d
000056ee	movl	0xf0(%ecx),%eax
000056f1	movl	%ecx,0xdc(%ebp)
000056f4	testl	%eax,%eax
000056f6	je	0x00005737
000056f8	movl	0x10(%ebp),%edi
000056fb	leal	0x08(%edi,%esi),%ecx
000056ff	movl	%ecx,0xd0(%ebp)
00005702	movl	%ecx,0x10(%esp)
00005706	leal	0x04(%edi,%esi),%ebx
0000570a	movl	%ebx,0x0c(%esp)
0000570e	movl	0xd4(%ebp),%ecx
00005711	movl	%ecx,0x08(%esp)
00005715	movl	0xd8(%ebp),%ecx
00005718	leal	0x3ab8a-0x535e(%ecx),%ecx
0000571e	movl	%ecx,0x04(%esp)
00005722	movl	%eax,(%esp)
00005725	calll	_sscanf
0000572a	movl	0xd4(%ebp),%ecx
0000572d	movss	(%edi,%esi),%xmm0
00005732	movl	0xd0(%ebp),%edi
00005735	jmp	0x00005760
00005737	movl	0x10(%ebp),%eax
0000573a	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax,%esi)
00005741	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%eax,%esi)
00005749	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%eax,%esi)
00005751	leal	0x08(%eax,%esi),%edi
00005755	leal	0x04(%eax,%esi),%ebx
00005759	pxor	%xmm0,%xmm0
0000575d	movl	0xd4(%ebp),%ecx
00005760	movl	0xd8(%ebp),%eax
00005763	movss	0x3a908-0x535e(%eax),%xmm1
0000576b	mulss	%xmm1,%xmm0
0000576f	movss	%xmm0,(%ecx)
00005773	movss	(%ebx),%xmm0
00005777	mulss	%xmm1,%xmm0
0000577b	movss	%xmm0,(%ebx)
0000577f	mulss	(%edi),%xmm1
00005783	movss	%xmm1,(%edi)
00005787	movl	0xdc(%ebp),%edi
0000578a	movl	(%edi),%eax
0000578c	addl	$0x14,%edi
0000578f	testl	%eax,%eax
00005791	jne	0x00005380
00005797	addl	$0x4c,%esp
0000579a	popl	%esi
0000579b	popl	%edi
0000579c	popl	%ebx
0000579d	popl	%ebp
0000579e	ret
0000579f	nop
000057a0	bound	(%eax),%eax
000057a2	addb	%al,(%eax)
000057a4	andl	(%ecx),%eax
000057a6	addb	%al,(%eax)
000057a8	addl	%ds:(%eax),%eax
000057ab	addb	%dh,KeyValues::GetSymbolForStringClassic(char const*, bool)(%edx,%eax)
000057af	addb	%ch,0x92000002(%ebx)
000057b5	addl	%eax,(%eax)
000057b7	addb	%dl,(%edx)
000057b9	addb	(%eax),%al
000057bb	addb	%bh,%ah
000057bd	addb	(%eax),%al
000057bf	addb	%dh,(%ecx)
000057c1	addl	(%eax),%eax
000057c3	addb	%ch,(%edx)
000057c5	addl	(%eax),%eax
000057c7	addb	%dh,(%ecx)
000057c9	addl	(%eax),%eax
000057cb	addb	%cl,(%ebx)
000057cd	addl	(%eax),%eax
000057cf	addb	%dh,(%ecx)
000057d1	addl	(%eax),%eax
000057d3	addb	%dh,(%ebx,%eax)
000057d6	addb	%al,(%eax)
000057d8	movl	$0x00e30000,(%eax)
000057de	addb	%al,(%eax)
000057e0	faddl	(%eax)
000057e2	addb	%al,(%eax)
000057e4	popl	%ss
000057e5	addl	%eax,(%eax)
000057e7	addb	%dl,(%edi)
000057e9	addl	%eax,(%eax)
000057eb	addb	%dl,(%edi)
000057ed	addl	%eax,(%eax)
000057ef	addb	%ch,%dl
000057f1	addb	%al,(%eax)
000057f3	addb	%ah,0x66(%esi)
000057f6	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::ProcessResolutionKeys(char const*):
00005800	pushl	%ebp
00005801	movl	%esp,%ebp
00005803	pushl	%ebx
00005804	pushl	%edi
00005805	pushl	%esi
00005806	subl	$0x0000009c,%esp
0000580c	calll	0x00005811
00005811	popl	%eax
00005812	movl	%eax,0xffffff6c(%ebp)
00005818	movl	0x42cec-0x5811(%eax),%eax
0000581e	movl	%eax,0xffffff68(%ebp)
00005824	movl	(%eax),%eax
00005826	movl	%eax,0xf0(%ebp)
00005829	xorb	%al,%al
0000582b	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebp)
0000582f	je	0x00005947
00005835	movl	0x08(%ebp),%eax
00005838	movl	0x18(%eax),%edi
0000583b	xorb	%al,%al
0000583d	jmp	0x0000587a
0000583f	nop
00005840	movl	%ecx,%edx
00005842	movl	0x14(%edx),%ecx
00005845	testl	%ecx,%ecx
00005847	je	0x00005853
00005849	cmpl	%eax,%ecx
0000584b	jne	0x00005840
0000584d	movl	0x14(%eax),%ecx
00005850	movl	%ecx,0x14(%edx)
00005853	addl	$0x14,%eax
00005856	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),(%eax)
0000585c	movl	%ebx,(%esp)
0000585f	movl	$0x00000001,0x04(%esp)
00005867	movl	0xffffff6c(%ebp),%eax
0000586d	call	*KeyValues::s_pfGetSymbolForString-0x5811(%eax)
00005873	movl	%eax,(%edi)
00005875	movl	0x14(%edi),%edi
00005878	movb	$0x01,%al
0000587a	testl	%edi,%edi
0000587c	je	0x00005947
00005882	movl	0x0c(%ebp),%esi
00005885	movl	%esi,0x04(%esp)
00005889	movl	%edi,(%esp)
0000588c	calll	KeyValues::ProcessResolutionKeys(char const*)
00005891	movl	(%edi),%eax
00005893	movl	%eax,(%esp)
00005896	movl	0xffffff6c(%ebp),%eax
0000589c	call	*KeyValues::s_pfGetStringForSymbol-0x5811(%eax)
000058a2	movl	%esi,0x04(%esp)
000058a6	movl	%eax,(%esp)
000058a9	calll	V_stristr(char const*, char const*)
000058ae	testl	%eax,%eax
000058b0	je	0x00005875
000058b2	movl	(%edi),%eax
000058b4	movl	%eax,(%esp)
000058b7	movl	0xffffff6c(%ebp),%eax
000058bd	call	*KeyValues::s_pfGetStringForSymbol-0x5811(%eax)
000058c3	movl	%eax,0x04(%esp)
000058c7	leal	0xffffff70(%ebp),%ebx
000058cd	movl	%ebx,(%esp)
000058d0	movl	$0x00000080,0x08(%esp)
000058d8	calll	V_strncpy(char*, char const*, int)
000058dd	movl	0x0c(%ebp),%eax
000058e0	movl	%eax,0x04(%esp)
000058e4	movl	%ebx,(%esp)
000058e7	calll	V_stristr(char*, char const*)
000058ec	movl	%eax,%esi
000058ee	testl	%esi,%esi
000058f0	je	0x00005875
000058f2	movl	0x0c(%ebp),%eax
000058f5	movl	%eax,0x04(%esp)
000058f9	movl	%esi,(%esp)
000058fc	calll	V_stricmp(char const*, char const*)
00005901	testl	%eax,%eax
00005903	jne	0x00005875
00005909	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%esi)
0000590c	movl	%ebx,0x04(%esp)
00005910	movl	0x08(%ebp),%eax
00005913	movl	%eax,(%esp)
00005916	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
0000591e	calll	KeyValues::FindKey(char const*, bool)
00005923	testl	%eax,%eax
00005925	je	0x0000585c
0000592b	movl	0x08(%ebp),%ecx
0000592e	movl	0x18(%ecx),%ecx
00005931	cmpl	%eax,%ecx
00005933	jne	0x00005840
00005939	movl	0x14(%eax),%ecx
0000593c	movl	0x08(%ebp),%edx
0000593f	movl	%ecx,0x18(%edx)
00005942	jmp	0x00005853
00005947	movl	0xffffff68(%ebp),%ecx
0000594d	movl	(%ecx),%ecx
0000594f	cmpl	0xf0(%ebp),%ecx
00005952	jne	0x00005962
00005954	movzbl	%al,%eax
00005957	addl	$0x0000009c,%esp
0000595d	popl	%esi
0000595e	popl	%edi
0000595f	popl	%ebx
00005960	popl	%ebp
00005961	ret
00005962	calll	___stack_chk_fail
00005967	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
KeyValues::Dump(IKeyValuesDumpContext*, int):
00005970	pushl	%ebp
00005971	movl	%esp,%ebp
00005973	pushl	%ebx
00005974	pushl	%edi
00005975	pushl	%esi
00005976	subl	$0x0c,%esp
00005979	movl	0x0c(%ebp),%esi
0000597c	movl	(%esi),%eax
0000597e	movl	0x10(%ebp),%ecx
00005981	movl	%ecx,0x08(%esp)
00005985	movl	0x08(%ebp),%ecx
00005988	movl	%ecx,0x04(%esp)
0000598c	movl	%esi,(%esp)
0000598f	call	(%eax)
00005991	movb	%al,%cl
00005993	xorb	%al,%al
00005995	testb	%cl,%cl
00005997	je	0x00005a8b
0000599d	xorl	%ebx,%ebx
0000599f	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebp)
000059a3	je	0x000059c1
000059a5	movl	0x08(%ebp),%eax
000059a8	leal	0x18(%eax),%eax
000059ab	xorl	%ebx,%ebx
000059ad	jmp	0x000059b3
000059af	nop
000059b0	addl	$0x14,%eax
000059b3	movl	(%eax),%eax
000059b5	testl	%eax,%eax
000059b7	je	0x000059c1
000059b9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
000059bd	je	0x000059b0
000059bf	movl	%eax,%ebx
000059c1	movl	0x10(%ebp),%eax
000059c4	leal	0x01(%eax),%edi
000059c7	jmp	0x00005a01
000059c9	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
000059d0	movl	(%esi),%eax
000059d2	movl	%edi,0x08(%esp)
000059d6	movl	%ebx,0x04(%esp)
000059da	movl	%esi,(%esp)
000059dd	call	*0x04(%eax)
000059e0	movb	%al,%cl
000059e2	xorb	%al,%al
000059e4	testb	%cl,%cl
000059e6	movl	%ebx,%ecx
000059e8	je	0x00005a8b
000059ee	nop
000059f0	movl	0x14(%ecx),%ecx
000059f3	xorl	%ebx,%ebx
000059f5	testl	%ecx,%ecx
000059f7	je	0x00005a01
000059f9	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%ecx)
000059fd	movl	%ecx,%ebx
000059ff	je	0x000059f0
00005a01	testl	%ebx,%ebx
00005a03	jne	0x000059d0
00005a05	xorl	%ebx,%ebx
00005a07	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%ebp)
00005a0b	je	0x00005a71
00005a0d	movl	0x08(%ebp),%eax
00005a10	leal	0x18(%eax),%eax
00005a13	xorl	%ebx,%ebx
00005a15	jmp	0x00005a23
00005a17	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a20	addl	$0x14,%eax
00005a23	movl	(%eax),%eax
00005a25	testl	%eax,%eax
00005a27	je	0x00005a71
00005a29	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00005a2d	jne	0x00005a20
00005a2f	movl	%eax,%ebx
00005a31	jmp	0x00005a71
00005a33	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a40	movl	%edi,0x08(%esp)
00005a44	movl	%esi,0x04(%esp)
00005a48	movl	%ebx,(%esp)
00005a4b	calll	KeyValues::Dump(IKeyValuesDumpContext*, int)
00005a50	movb	%al,%cl
00005a52	xorb	%al,%al
00005a54	testb	%cl,%cl
00005a56	je	0x00005a8b
00005a58	movl	%ebx,%eax
00005a5a	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
00005a60	movl	0x14(%eax),%eax
00005a63	xorl	%ebx,%ebx
00005a65	testl	%eax,%eax
00005a67	je	0x00005a71
00005a69	cmpb	KeyValues::GetSymbolForStringClassic(char const*, bool),0x10(%eax)
00005a6d	movl	%eax,%ebx
00005a6f	jne	0x00005a60
00005a71	testl	%ebx,%ebx
00005a73	jne	0x00005a40
00005a75	movl	(%esi),%eax
00005a77	movl	0x10(%ebp),%ecx
00005a7a	movl	%ecx,0x08(%esp)
00005a7e	movl	0x08(%ebp),%ecx
00005a81	movl	%ecx,0x04(%esp)
00005a85	movl	%esi,(%esp)
00005a88	call	*0x08(%eax)
00005a8b	movzbl	%al,%eax
00005a8e	addl	$0x0c,%esp
00005a91	popl	%esi
00005a92	popl	%edi
00005a93	popl	%ebx
00005a94	popl	%ebp
00005a95	ret
00005a96	nopw	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
IKeyValuesDumpContextAsText::KvBeginKey(KeyValues*, int):
00005aa0	pushl	%ebp
00005aa1	movl	%esp,%ebp
00005aa3	pushl	%ebx
00005aa4	pushl	%edi
00005aa5	pushl	%esi
00005aa6	subl	$0x0c,%esp
00005aa9	calll	0x00005aae
00005aae	popl	%edi
00005aaf	movl	0x08(%ebp),%esi
00005ab2	movl	(%esi),%eax
00005ab4	movl	0x10(%ebp),%ecx
00005ab7	movl	%ecx,0x04(%esp)
00005abb	movl	%esi,(%esp)
00005abe	call	*0x0c(%eax)
00005ac1	movb	%al,%cl
00005ac3	movl	0x0c(%ebp),%edx
00005ac6	xorb	%al,%al
00005ac8	testl	%edx,%edx
00005aca	je	0x00005afc
00005acc	cmpb	$0x01,%cl
00005acf	jne	0x00005b13
00005ad1	movl	(%esi),%eax
00005ad3	movl	0x10(%eax),%ebx
00005ad6	movl	(%edx),%eax
00005ad8	movl	%eax,(%esp)
00005adb	call	*KeyValues::s_pfGetStringForSymbol-0x5aae(%edi)
00005ae1	movl	%eax,0x04(%esp)
00005ae5	movl	%esi,(%esp)
00005ae8	call	*%ebx
00005aea	movb	%al,%cl
00005aec	xorb	%al,%al
00005aee	testb	%cl,%cl
00005af0	je	0x00005b13
00005af2	movl	(%esi),%eax
00005af4	leal	0x3ab99-0x5aae(%edi),%ecx
00005afa	jmp	0x00005b09
00005afc	cmpb	$0x01,%cl
00005aff	jne	0x00005b13
00005b01	movl	(%esi),%eax
00005b03	leal	0x3ab9d-0x5aae(%edi),%ecx
00005b09	movl	%ecx,0x04(%esp)
00005b0d	movl	%esi,(%esp)
00005b10	call	*0x10(%eax)
00005b13	movzbl	%al,%eax
00005b16	addl	$0x0c,%esp
00005b19	popl	%esi
00005b1a	popl	%edi
00005b1b	popl	%ebx
00005b1c	popl	%ebp
00005b1d	ret
00005b1e	nop
IKeyValuesDumpContextAsText::KvWriteValue(KeyValues*, int):
00005b20	pushl	%ebp
00005b21	movl	%esp,%ebp
00005b23	pushl	%ebx
00005b24	pushl	%edi
00005b25	pushl	%esi
00005b26	subl	$0x2c,%esp
00005b29	calll	0x00005b2e
00005b2e	popl	%eax
00005b2f	movl	%eax,0xdc(%ebp)
00005b32	movl	0x42cec-0x5b2e(%eax),%eax
00005b38	movl	%eax,0xd8(%ebp)
00005b3b	movl	(%eax),%eax
00005b3d	movl	%eax,0xf0(%ebp)
00005b40	movl	0x08(%ebp),%ebx
00005b43	movl	(%ebx),%eax
00005b45	subl	$0x10,%esp
00005b48	movl	0x10(%ebp),%ecx
00005b4b	movl	%ecx,0x04(%esp)
00005b4f	movl	%ebx,(%esp)
00005b52	call	*0x0c(%eax)
00005b55	addl	$0x10,%esp
00005b58	movb	%al,%cl
00005b5a	movl	0x0c(%ebp),%esi
00005b5d	xorb	%al,%al
00005b5f	testl	%esi,%esi
00005b61	jne	0x00005b86
00005b63	cmpb	$0x01,%cl
00005b66	jne	0x00005fab
00005b6c	movl	(%ebx),%eax
00005b6e	subl	$0x10,%esp
00005b71	movl	0xdc(%ebp),%ecx
00005b74	leal	0x3ab9d-0x5b2e(%ecx),%ecx
00005b7a	movl	%ecx,0x04(%esp)
00005b7e	movl	%ebx,(%esp)
00005b81	jmp	0x00005fa5
00005b86	cmpb	$0x01,%cl
00005b89	jne	0x00005fab
00005b8f	movl	%ebx,%edi
00005b91	movl	(%edi),%eax
00005b93	movl	0x10(%eax),%ebx
00005b96	movl	(%esi),%eax
00005b98	subl	$0x10,%esp
00005b9b	movl	%eax,(%esp)
00005b9e	movl	0xdc(%ebp),%eax
00005ba1	call	*KeyValues::s_pfGetStringForSymbol-0x5b2e(%eax)
00005ba7	addl	$0x10,%esp
00005baa	subl	$0x10,%esp
00005bad	movl	%eax,0x04(%esp)
00005bb1	movl	%edi,(%esp)
00005bb4	call	*%ebx
00005bb6	addl	$0x10,%esp
00005bb9	movb	%al,%cl
00005bbb	xorb	%al,%al
00005bbd	testb	%cl,%cl
00005bbf	je	0x00005fab
00005bc5	movl	(%edi),%eax
00005bc7	subl	$0x10,%esp
00005bca	movl	0xdc(%ebp),%ecx
00005bcd	leal	0x3aba9-0x5b2e(%ecx),%ecx
00005bd3	movl	%ecx,0x04(%esp)
00005bd7	movl	%edi,(%esp)
00005bda	call	*0x10(%eax)
00005bdd	addl	$0x10,%esp
00005be0	movb	%al,%cl
00005be2	xorb	%al,%al
00005be4	testb	%cl,%cl
00005be6	je	0x00005fab
00005bec	subl	$0x10,%esp
00005bef	movl	%esi,(%esp)
00005bf2	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005bfa	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c02	calll	KeyValues::FindKey(char const*, bool)
00005c07	addl	$0x10,%esp
00005c0a	testl	%eax,%eax
00005c0c	je	0x00005f8d
00005c12	movsbl	0x10(%eax),%eax
00005c16	decl	%eax
00005c17	cmpl	$0x06,%eax
00005c1a	ja	0x00005f8d
00005c20	movl	0xdc(%ebp),%ecx
00005c23	movl	0x0000049a(%ecx,%eax,4),%eax
00005c2a	addl	%ecx,%eax
00005c2c	jmp	*%eax
00005c2e	movl	0x08(%ebp),%edi
00005c31	movl	(%edi),%eax
00005c33	movl	0x10(%eax),%ebx
00005c36	subl	$0x10,%esp
00005c39	movl	0xdc(%ebp),%eax
00005c3c	leal	0x3a9e0-0x5b2e(%eax),%eax
00005c42	movl	%eax,0x08(%esp)
00005c46	movl	%esi,(%esp)
00005c49	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c51	calll	KeyValues::GetString(char const*, char const*)
00005c56	addl	$0x10,%esp
00005c59	subl	$0x10,%esp
00005c5c	movl	%eax,0x04(%esp)
00005c60	movl	%edi,(%esp)
00005c63	call	*%ebx
00005c65	jmp	0x00005f82
00005c6a	subl	$0x10,%esp
00005c6d	movl	%esi,(%esp)
00005c70	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005c78	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005c80	xorl	%esi,%esi
00005c82	calll	KeyValues::FindKey(char const*, bool)
00005c87	addl	$0x10,%esp
00005c8a	testl	%eax,%eax
00005c8c	je	0x00005ce7
00005c8e	movsbl	0x10(%eax),%ecx
00005c92	decl	%ecx
00005c93	cmpl	$0x06,%ecx
00005c96	ja	0x00005ce4
00005c98	xorl	%esi,%esi
00005c9a	movl	0xdc(%ebp),%edx
00005c9d	movl	0x000004ee(%edx,%ecx,4),%ecx
00005ca4	addl	%edx,%ecx
00005ca6	jmp	*%ecx
00005ca8	movl	0x04(%eax),%eax
00005cab	subl	$0x10,%esp
00005cae	movl	%eax,(%esp)
00005cb1	calll	_atoi
00005cb6	addl	$0x10,%esp
00005cb9	movl	%eax,%esi
00005cbb	jmp	0x00005ce7
00005cbd	movl	0x08(%eax),%eax
00005cc0	subl	$0x10,%esp
00005cc3	movl	%eax,(%esp)
00005cc6	movl	$0x0000000a,0x08(%esp)
00005cce	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005cd6	calll	_wcstol
00005cdb	jmp	0x00005cb6
00005cdd	cvttss2si	0x0c(%eax),%esi
00005ce2	jmp	0x00005ce7
00005ce4	movl	0x0c(%eax),%esi
00005ce7	leal	0x80(%esp),%ebx
00005ceb	movl	%ebx,%esp
00005ced	subl	$0x20,%esp
00005cf0	movl	%esi,0x10(%esp)
00005cf4	movl	%esi,0x0c(%esp)
00005cf8	movl	0xdc(%ebp),%eax
00005cfb	leal	0x3abab-0x5b2e(%eax),%eax
00005d01	jmp	0x00005f59
00005d06	subl	$0x10,%esp
00005d09	movl	%esi,(%esp)
00005d0c	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005d14	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005d1c	calll	KeyValues::FindKey(char const*, bool)
00005d21	addl	$0x10,%esp
00005d24	pxor	%xmm0,%xmm0
00005d28	testl	%eax,%eax
00005d2a	je	0x00005d9e
00005d2c	movsbl	0x10(%eax),%ecx
00005d30	decl	%ecx
00005d31	pxor	%xmm0,%xmm0
00005d35	cmpl	$0x06,%ecx
00005d38	ja	0x00005d9e
00005d3a	movl	0xdc(%ebp),%edx
00005d3d	movl	0x000004d2(%edx,%ecx,4),%ecx
00005d44	addl	%edx,%ecx
00005d46	jmp	*%ecx
00005d48	movl	0x04(%eax),%eax
00005d4b	subl	$0x10,%esp
00005d4e	movl	%eax,(%esp)
00005d51	calll	_atof
00005d56	addl	$0x10,%esp
00005d59	fstps	0xe0(%ebp)
00005d5c	movss	0xe0(%ebp),%xmm0
00005d61	jmp	0x00005d9e
00005d63	movss	0x0c(%eax),%xmm0
00005d68	jmp	0x00005d9e
00005d6a	cvtsi2ss	0x0c(%eax),%xmm0
00005d6f	jmp	0x00005d9e
00005d71	movl	0x04(%eax),%eax
00005d74	movl	(%eax),%ecx
00005d76	movl	0x04(%eax),%eax
00005d79	movl	%eax,0xec(%ebp)
00005d7c	movl	%ecx,0xe8(%ebp)
00005d7f	testl	%eax,%eax
00005d81	sets	%al
00005d84	xorb	$0x01,%al
00005d86	movzbl	%al,%eax
00005d89	fildq	0xe8(%ebp)
00005d8c	movl	0xdc(%ebp),%ecx
00005d8f	fadds	0x3a900-0x5b2e(%ecx,%eax,4)
00005d96	fstps	0xe4(%ebp)
00005d99	movss	0xe4(%ebp),%xmm0
00005d9e	leal	0x80(%esp),%esi
00005da2	movl	%esi,%esp
00005da4	subl	$0x20,%esp
00005da7	cvtss2sd	%xmm0,%xmm0
00005dab	movsd	%xmm0,0x0c(%esp)
00005db1	movl	0xdc(%ebp),%eax
00005db4	leal	0x3abbc-0x5b2e(%eax),%eax
00005dba	movl	%eax,0x08(%esp)
00005dbe	movl	%esi,(%esp)
00005dc1	movl	$0x00000080,0x04(%esp)
00005dc9	calll	V_snprintf(char*, int, char const*, ...)
00005dce	addl	$0x20,%esp
00005dd1	movl	0x08(%ebp),%ecx
00005dd4	movl	(%ecx),%eax
00005dd6	subl	$0x10,%esp
00005dd9	movl	%esi,0x04(%esp)
00005ddd	jmp	0x00005f7c
00005de2	subl	$0x10,%esp
00005de5	movl	%esi,(%esp)
00005de8	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005df0	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005df8	xorl	%esi,%esi
00005dfa	calll	KeyValues::FindKey(char const*, bool)
00005dff	addl	$0x10,%esp
00005e02	testl	%eax,%eax
00005e04	je	0x00005e11
00005e06	xorl	%esi,%esi
00005e08	cmpb	$0x04,0x10(%eax)
00005e0c	jne	0x00005e11
00005e0e	movl	0x0c(%eax),%esi
00005e11	leal	0x80(%esp),%ebx
00005e15	movl	%ebx,%esp
00005e17	subl	$0x10,%esp
00005e1a	movl	%esi,0x0c(%esp)
00005e1e	movl	0xdc(%ebp),%eax
00005e21	leal	0x3abc8-0x5b2e(%eax),%eax
00005e27	movl	%eax,0x08(%esp)
00005e2b	movl	%ebx,(%esp)
00005e2e	movl	$0x00000080,0x04(%esp)
00005e36	calll	V_snprintf(char*, int, char const*, ...)
00005e3b	addl	$0x10,%esp
00005e3e	jmp	0x00005f70
00005e43	subl	$0x10,%esp
00005e46	movl	0xdc(%ebp),%edi
00005e49	leal	0x3ac7c-0x5b2e(%edi),%eax
00005e4f	movl	%eax,0x08(%esp)
00005e53	movl	%esi,(%esp)
00005e56	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005e5e	calll	KeyValues::GetWString(char const*, wchar_t const*)
00005e63	addl	$0x10,%esp
00005e66	movl	%eax,%esi
00005e68	subl	$0x10,%esp
00005e6b	movl	%esi,(%esp)
00005e6e	calll	_wcslen
00005e73	addl	$0x10,%esp
00005e76	leal	0x4f(%eax,%eax),%ecx
00005e7a	andl	$0xf0,%ecx
00005e7d	movl	%esp,%ebx
00005e7f	subl	%ecx,%ebx
00005e81	movl	%ebx,%esp
00005e83	subl	$0x20,%esp
00005e86	movl	%eax,0x10(%esp)
00005e8a	movl	%esi,0x0c(%esp)
00005e8e	leal	0x3abd4-0x5b2e(%edi),%ecx
00005e94	movl	%ecx,0x08(%esp)
00005e98	leal	0x40(%eax,%eax),%eax
00005e9c	movl	%eax,0x04(%esp)
00005ea0	movl	%ebx,(%esp)
00005ea3	jmp	0x00005f68
00005ea8	subl	$0x10,%esp
00005eab	movl	%esi,(%esp)
00005eae	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x08(%esp)
00005eb6	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005ebe	xorl	%esi,%esi
00005ec0	calll	KeyValues::FindKey(char const*, bool)
00005ec5	addl	$0x10,%esp
00005ec8	testl	%eax,%eax
00005eca	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),%edx
00005ecf	je	0x00005f37
00005ed1	movsbl	0x10(%eax),%ecx
00005ed5	decl	%ecx
00005ed6	cmpl	$0x06,%ecx
00005ed9	ja	0x00005f2f
00005edb	movl	0xdc(%ebp),%edx
00005ede	movl	0x000004b6(%edx,%ecx,4),%ecx
00005ee5	addl	%edx,%ecx
00005ee7	jmp	*%ecx
00005ee9	movl	0x04(%eax),%eax
00005eec	subl	$0x10,%esp
00005eef	movl	%eax,(%esp)
00005ef2	calll	V_atoi64(char const*)
00005ef7	addl	$0x10,%esp
00005efa	movl	%eax,%esi
00005efc	jmp	0x00005f37
00005efe	movl	0x08(%eax),%eax
00005f01	subl	$0x10,%esp
00005f04	movl	%eax,(%esp)
00005f07	movl	$0x0000000a,0x08(%esp)
00005f0f	movl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x04(%esp)
00005f17	calll	_wcstoll
00005f1c	jmp	0x00005ef7
00005f1e	cvttss2si	0x0c(%eax),%esi
00005f23	jmp	0x00005f32
00005f25	movl	0x04(%eax),%eax
00005f28	movl	(%eax),%esi
00005f2a	movl	0x04(%eax),%edx
00005f2d	jmp	0x00005f37
00005f2f	movl	0x0c(%eax),%esi
00005f32	movl	%esi,%edx
00005f34	sarl	$0x1f,%edx
00005f37	leal	0x80(%esp),%ebx
00005f3b	movl	%ebx,%esp
00005f3d	subl	$0x20,%esp
00005f40	movl	%edx,0x18(%esp)
00005f44	movl	%esi,0x14(%esp)
00005f48	movl	%edx,0x10(%esp)
00005f4c	movl	%esi,0x0c(%esp)
00005f50	movl	0xdc(%ebp),%eax
00005f53	leal	0x3abec-0x5b2e(%eax),%eax
00005f59	movl	%eax,0x08(%esp)
00005f5d	movl	%ebx,(%esp)
00005f60	movl	$0x00000080,0x04(%esp)
00005f68	calll	V_snprintf(char*, int, char const*, ...)
00005f6d	addl	$0x20,%esp
00005f70	movl	0x08(%ebp),%ecx
00005f73	movl	(%ecx),%eax
00005f75	subl	$0x10,%esp
00005f78	movl	%ebx,0x04(%esp)
00005f7c	movl	%ecx,(%esp)
00005f7f	call	*0x10(%eax)
00005f82	addl	$0x10,%esp
00005f85	movb	%al,%cl
00005f87	xorb	%al,%al
00005f89	testb	%cl,%cl
00005f8b	je	0x00005fab
00005f8d	movl	0x08(%ebp),%edx
00005f90	movl	(%edx),%eax
00005f92	subl	$0x10,%esp
00005f95	movl	0xdc(%ebp),%ecx
00005f98	leal	0x3ac01-0x5b2e(%ecx),%ecx
00005f9e	movl	%ecx,0x04(%esp)
00005fa2	movl	%edx,(%esp)
00005fa5	call	*0x10(%eax)
00005fa8	addl	$0x10,%esp
00005fab	movl	0xd8(%ebp),%ecx
00005fae	movl	(%ecx),%ecx
00005fb0	cmpl	0xf0(%ebp),%ecx
00005fb3	jne	0x00005fc0
00005fb5	movzbl	%al,%eax
00005fb8	leal	0xf4(%ebp),%esp
00005fbb	popl	%esi
00005fbc	popl	%edi
00005fbd	popl	%ebx
00005fbe	popl	%ebp
00005fbf	ret
00005fc0	calll	___stack_chk_fail
00005fc5	nopl	(%eax)
00005fc8	addb	%al,(%ecx)
00005fca	addb	%al,(%eax)
00005fcc	cmpb	$0x01,%al
00005fce	addb	%al,(%eax)
00005fd0	fadds	(%ecx)
00005fd2	addb	%al,(%eax)
00005fd4	movb	$0x02,%ah
00005fd6	addb	%al,(%eax)
00005fd8	adcl	$0x5f000003,%eax
00005fdd	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005fdf	addb	%bh,0x03(%edx)
00005fe2	addb	%al,(%eax)
00005fe4	movl	$0x01000003,%ebx
00005fe9	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005feb	addb	%dh,%al
00005fed	addl	(%eax),%eax
00005fef	addb	%al,(%ecx)
00005ff1	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005ff3	addb	%dl,%al
00005ff5	addl	(%eax),%eax
00005ff7	addb	%al,(%ecx)
00005ff9	addb	KeyValues::GetSymbolForStringClassic(char const*, bool),%al
00005ffb	addb	%dh,%bh
00005ffd	addl	(%eax),%eax
00005fff	addb	%bl,(%edx)
00006001	addb	(%eax),%al
00006003	addb	%bh,(%edx,%eax)
00006006	addb	%al,(%eax)
00006008	xorl	$0x70000002,%eax
0000600d	addb	(%eax),%al
0000600f	addb	%dh,0x02(%eax)
00006012	addb	%al,(%eax)
00006014	jo	0x00006018
00006016	addb	%al,(%eax)
00006018	incl	%ebx
00006019	addb	(%eax),%al
0000601b	addb	%bh,0x01(%edx)
0000601e	addb	%al,(%eax)
00006020	movb	$0x01,%dh
00006022	addb	%al,(%eax)
00006024	scasl	%eax,(%edi)
00006025	addl	%eax,(%eax)
00006027	addb	%dh,0x8f000001(%esi)
0000602d	addl	%eax,(%eax)
0000602f	addb	%dh,0xb9000001(%esi)
00006035	addl	%eax,(%eax)
00006037	addb	%cl,(%edi)
00006039	popl	%ds
0000603a	testb	(%eax),%al
0000603c	addb	%al,(%eax)
0000603e	addb	%al,(%eax)
IKeyValuesDumpContextAsText::KvEndKey(KeyValues*, int):
00006040	pushl	%ebp
00006041	movl	%esp,%ebp
00006043	pushl	%edi
00006044	pushl	%esi
00006045	subl	$0x10,%esp
00006048	calll	0x0000604d
0000604d	popl	%esi
0000604e	movb	$0x01,%al
00006050	cmpl	KeyValues::GetSymbolForStringClassic(char const*, bool),0x0c(%ebp)
00006054	je	0x00006082
00006056	movl	0x10(%ebp),%ecx
00006059	movl	0x08(%ebp),%edi
0000605c	movl	(%edi),%eax
0000605e	movl	%ecx,0x04(%esp)
00006062	movl	%edi,(%esp)
00006065	call	*0x0c(%eax)
00006068	movb	%al,%cl
0000606a	xorb	%al,%al
0000606c	testb	%cl,%cl
0000606e	je	0x00006082
00006070	movl	(%edi),%eax
00006072	leal	0x3a973-0x604d(%esi),%ecx
00006078	movl	%ecx,0x04(%esp)
0000607c	movl	%edi,(%esp)
0000607f	call	*0x10(%eax)
00006082	movzbl	%al,%eax
00006085	addl	$0x10,%esp
00006088	popl	%esi
00006089	popl	%edi
0000608a	popl	%ebp
0000608b	ret
0000608c	nopl	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax)
IKeyValuesDumpContextAsText::KvWriteIndent(int):
00006090	pushl	%ebp
00006091	movl	%esp,%ebp
00006093	pushl	%ebx
00006094	pushl	%edi
00006095	pushl	%esi
00006096	subl	$0x0c,%esp
00006099	calll	0x0000609e
0000609e	popl	%eax
0000609f	movl	0x42cec-0x609e(%eax),%esi
000060a5	movl	(%esi),%eax
000060a7	movl	%eax,0xf0(%ebp)
000060aa	movl	0x0c(%ebp),%ebx
000060ad	leal	0x10(%ebx,%ebx),%eax
000060b1	andl	$0xf0,%eax
000060b4	movl	%esp,%edi
000060b6	subl	%eax,%edi
000060b8	movl	%edi,%esp
000060ba	subl	$0x10,%esp
000060bd	leal	(%ebx,%ebx),%eax
000060c0	movl	%eax,0x08(%esp)
000060c4	movl	%edi,(%esp)
000060c7	movl	$0x00000020,0x04(%esp)
000060cf	calll	_memset
000060d4	addl	$0x10,%esp
000060d7	movb	KeyValues::GetSymbolForStringClassic(char const*, bool),(%edi,%ebx,2)
000060db	movl	0x08(%ebp),%ecx
000060de	movl	(%ecx),%eax
000060e0	subl	$0x10,%esp
000060e3	movl	%edi,0x04(%esp)
000060e7	movl	%ecx,(%esp)
000060ea	call	*0x10(%eax)
000060ed	addl	$0x10,%esp
000060f0	movl	(%esi),%ecx
000060f2	cmpl	0xf0(%ebp),%ecx
000060f5	jne	0x00006102
000060f7	movzbl	%al,%eax
000060fa	leal	0xf4(%ebp),%esp
000060fd	popl	%esi
000060fe	popl	%edi
000060ff	popl	%ebx
00006100	popl	%ebp
00006101	ret
00006102	calll	___stack_chk_fail
00006107	nopw	KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int):
00006110	pushl	%ebp
00006111	movl	%esp,%ebp
00006113	pushl	%edi
00006114	pushl	%esi
00006115	subl	$0x10,%esp
00006118	calll	0x0000611d
0000611d	popl	%esi
0000611e	movb	guard variable for CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%al
00006124	testb	%al,%al
00006126	jne	0x0000615a
00006128	leal	guard variable for CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%edi
0000612e	movl	%edi,(%esp)
00006131	calll	___cxa_guard_acquire
00006136	testl	%eax,%eax
00006138	je	0x0000615a
0000613a	leal	0x3ac03-0x611d(%esi),%eax
00006140	movl	%eax,0x04(%esp)
00006144	leal	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%eax
0000614a	movl	%eax,(%esp)
0000614d	calll	ConVarRef::ConVarRef(char const*)
00006152	movl	%edi,(%esp)
00006155	calll	___cxa_guard_release
0000615a	movl	0x08(%ebp),%edi
0000615d	leal	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d(%esi),%eax
00006163	movl	%eax,(%esp)
00006166	calll	ConVarRef::IsValid() const
0000616b	cmpb	$0x01,%al
0000616d	jne	0x0000617f
0000616f	movl	CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer-0x611d+0x00000004(%esi),%eax
00006175	movl	KeyValues::GetStringForSymbolClassic(int)(%eax),%ecx
00006178	xorb	%al,%al
0000617a	cmpl	0x04(%edi),%ecx
0000617d	jl	0x00006195
0000617f	movl	0x10(%ebp),%eax
00006182	movl	0x0c(%ebp),%ecx
00006185	movl	%eax,0x08(%esp)
00006189	movl	%ecx,0x04(%esp)
0000618d	movl	%edi,(%esp)
00006190	calll	IKeyValuesDumpContextAsText::KvBeginKey(KeyValues*, int)
00006195	movzbl	%al,%eax
00006198	addl	$0x10,%esp
0000619b	popl	%esi
0000619c	popl	%edi
0000619d	popl	%ebp
0000619e	ret
0000619f	movl	%eax,%esi
000061a1	movl	%edi,(%esp)
000061a4	calll	___cxa_guard_abort
000061a9	movl	%esi,(%esp)
000061ac	calll	__Unwind_Resume
000061b1	nopl	%cs:KeyValues::GetSymbolForStringClassic(char const*, bool)(%eax,%eax)
CKeyValuesDumpContextAsDevMsg::KvWriteText(char const*):
000061c0	pushl	%ebp
000061c1	movl	%esp,%ebp
000061c3	subl	$0x18,%esp
000061c6	calll	0x000061cb
000061cb	popl	%eax
000061cc	movl	0x08(%ebp),%ecx
000061cf	movl	0x04(%ecx),%ecx
000061d2	movl	0x0c(%ebp),%edx
000061d5	testl	%ecx,%ecx
000061d7	jle	0x000061f1
000061d9	movl	%edx,0x08(%esp)
000061dd	leal	0x3ac0d-0x61cb(%eax),%eax
000061e3	movl	%eax,0x04(%esp)
000061e7	movl	%ecx,(%esp)
000061ea	calll	_DevMsg
000061ef	jmp	0x00006203
000061f1	movl	%edx,0x04(%esp)
000061f5	leal	0x3ac0d-0x61cb(%eax),%eax
000061fb	movl	%eax,(%esp)
000061fe	calll	_Msg
00006203	movl	$0x00000001,%eax
00006208	addl	$0x18,%esp
0000620b	popl	%ebp
0000620c	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(kvpacker.o):
(__TEXT,__text) section
KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x2c,%esp
00000009	calll	0x0000000e
0000000e	popl	%eax
0000000f	movl	%eax,0xec(%ebp)
00000012	xorb	%cl,%cl
00000014	movl	0x10(%ebp),%ebx
00000017	testb	$0x01,0x15(%ebx)
0000001b	jne	0x0000086d
00000021	xorb	%cl,%cl
00000023	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%ebx)
00000027	jne	0x0000086d
0000002d	movl	0x0c(%ebp),%esi
00000030	jmp	0x00000086
00000032	nopw	%cs:KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)(%eax,%eax)
00000040	movl	0xe8(%ebp),%eax
00000043	movl	%eax,(%esp)
00000046	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
0000004e	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000056	calll	KeyValues::GetPtr(char const*, void*)
0000005b	movl	%eax,%esi
0000005d	testb	$0x01,0x15(%ebx)
00000061	je	0x00000558
00000067	movl	%esi,0x08(%esp)
0000006b	movl	0xec(%ebp),%eax
0000006e	leal	0xdc28-0xe(%eax),%eax
00000074	movl	%eax,0x04(%esp)
00000078	movl	%ebx,(%esp)
0000007b	calll	CUtlBuffer::Printf(char const*, ...)
00000080	movl	0xe8(%ebp),%esi
00000083	movl	0x14(%esi),%esi
00000086	testl	%esi,%esi
00000088	je	0x00000816
0000008e	movl	%esi,(%esp)
00000091	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000099	calll	KeyValues::GetDataType(char const*)
0000009e	cmpl	$0x07,%eax
000000a1	ja	0x00000312
000000a7	movl	0xec(%ebp),%ecx
000000aa	movl	0x0000086a(%ecx,%eax,4),%eax
000000b1	addl	%ecx,%eax
000000b3	jmp	*%eax
000000b5	testb	$0x01,0x15(%ebx)
000000b9	jne	0x000000ef
000000bb	movl	%ebx,(%esp)
000000be	movl	$0x00000001,0x04(%esp)
000000c6	calll	CUtlBuffer::CheckPut(int)
000000cb	cmpb	$0x01,%al
000000cd	jne	0x00000312
000000d3	movl	(%ebx),%eax
000000d5	movl	0x10(%ebx),%ecx
000000d8	subl	0x20(%ebx),%ecx
000000db	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%eax,%ecx)
000000df	incl	0x10(%ebx)
000000e2	movl	%ebx,(%esp)
000000e5	calll	CUtlBuffer::AddNullTermination()
000000ea	jmp	0x00000312
000000ef	movl	0xec(%ebp),%eax
000000f2	leal	0xdc28-0xe(%eax),%eax
000000f8	movl	%eax,0x04(%esp)
000000fc	movl	%ebx,(%esp)
000000ff	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000107	jmp	0x0000030d
0000010c	testb	$0x01,0x15(%ebx)
00000110	jne	0x00000138
00000112	movl	%ebx,(%esp)
00000115	movl	$0x00000001,0x04(%esp)
0000011d	calll	CUtlBuffer::CheckPut(int)
00000122	cmpb	$0x01,%al
00000124	jne	0x00000312
0000012a	movl	(%ebx),%eax
0000012c	movl	0x10(%ebx),%ecx
0000012f	subl	0x20(%ebx),%ecx
00000132	movb	$0x01,(%eax,%ecx)
00000136	jmp	0x000000df
00000138	movl	0xec(%ebp),%eax
0000013b	leal	0xdc28-0xe(%eax),%eax
00000141	movl	%eax,0x04(%esp)
00000145	movl	%ebx,(%esp)
00000148	movl	$0x00000001,0x08(%esp)
00000150	jmp	0x0000030d
00000155	testb	$0x01,0x15(%ebx)
00000159	jne	0x00000184
0000015b	movl	%ebx,(%esp)
0000015e	movl	$0x00000001,0x04(%esp)
00000166	calll	CUtlBuffer::CheckPut(int)
0000016b	cmpb	$0x01,%al
0000016d	jne	0x00000312
00000173	movl	(%ebx),%eax
00000175	movl	0x10(%ebx),%ecx
00000178	subl	0x20(%ebx),%ecx
0000017b	movb	$0x05,(%eax,%ecx)
0000017f	jmp	0x000000df
00000184	movl	0xec(%ebp),%eax
00000187	leal	0xdc28-0xe(%eax),%eax
0000018d	movl	%eax,0x04(%esp)
00000191	movl	%ebx,(%esp)
00000194	movl	$0x00000005,0x08(%esp)
0000019c	jmp	0x0000030d
000001a1	testb	$0x01,0x15(%ebx)
000001a5	jne	0x000001d0
000001a7	movl	%ebx,(%esp)
000001aa	movl	$0x00000001,0x04(%esp)
000001b2	calll	CUtlBuffer::CheckPut(int)
000001b7	cmpb	$0x01,%al
000001b9	jne	0x00000312
000001bf	movl	(%ebx),%eax
000001c1	movl	0x10(%ebx),%ecx
000001c4	subl	0x20(%ebx),%ecx
000001c7	movb	$0x02,(%eax,%ecx)
000001cb	jmp	0x000000df
000001d0	movl	0xec(%ebp),%eax
000001d3	leal	0xdc28-0xe(%eax),%eax
000001d9	movl	%eax,0x04(%esp)
000001dd	movl	%ebx,(%esp)
000001e0	movl	$0x00000002,0x08(%esp)
000001e8	jmp	0x0000030d
000001ed	testb	$0x01,0x15(%ebx)
000001f1	jne	0x0000021c
000001f3	movl	%ebx,(%esp)
000001f6	movl	$0x00000001,0x04(%esp)
000001fe	calll	CUtlBuffer::CheckPut(int)
00000203	cmpb	$0x01,%al
00000205	jne	0x00000312
0000020b	movl	(%ebx),%eax
0000020d	movl	0x10(%ebx),%ecx
00000210	subl	0x20(%ebx),%ecx
00000213	movb	$0x07,(%eax,%ecx)
00000217	jmp	0x000000df
0000021c	movl	0xec(%ebp),%eax
0000021f	leal	0xdc28-0xe(%eax),%eax
00000225	movl	%eax,0x04(%esp)
00000229	movl	%ebx,(%esp)
0000022c	movl	$0x00000007,0x08(%esp)
00000234	jmp	0x0000030d
00000239	testb	$0x01,0x15(%ebx)
0000023d	jne	0x00000268
0000023f	movl	%ebx,(%esp)
00000242	movl	$0x00000001,0x04(%esp)
0000024a	calll	CUtlBuffer::CheckPut(int)
0000024f	cmpb	$0x01,%al
00000251	jne	0x00000312
00000257	movl	(%ebx),%eax
00000259	movl	0x10(%ebx),%ecx
0000025c	subl	0x20(%ebx),%ecx
0000025f	movb	$0x03,(%eax,%ecx)
00000263	jmp	0x000000df
00000268	movl	0xec(%ebp),%eax
0000026b	leal	0xdc28-0xe(%eax),%eax
00000271	movl	%eax,0x04(%esp)
00000275	movl	%ebx,(%esp)
00000278	movl	$0x00000003,0x08(%esp)
00000280	jmp	0x0000030d
00000285	testb	$0x01,0x15(%ebx)
00000289	jne	0x000002b0
0000028b	movl	%ebx,(%esp)
0000028e	movl	$0x00000001,0x04(%esp)
00000296	calll	CUtlBuffer::CheckPut(int)
0000029b	cmpb	$0x01,%al
0000029d	jne	0x00000312
0000029f	movl	(%ebx),%eax
000002a1	movl	0x10(%ebx),%ecx
000002a4	subl	0x20(%ebx),%ecx
000002a7	movb	$0x06,(%eax,%ecx)
000002ab	jmp	0x000000df
000002b0	movl	0xec(%ebp),%eax
000002b3	leal	0xdc28-0xe(%eax),%eax
000002b9	movl	%eax,0x04(%esp)
000002bd	movl	%ebx,(%esp)
000002c0	movl	$0x00000006,0x08(%esp)
000002c8	jmp	0x0000030d
000002ca	testb	$0x01,0x15(%ebx)
000002ce	jne	0x000002f5
000002d0	movl	%ebx,(%esp)
000002d3	movl	$0x00000001,0x04(%esp)
000002db	calll	CUtlBuffer::CheckPut(int)
000002e0	cmpb	$0x01,%al
000002e2	jne	0x00000312
000002e4	movl	(%ebx),%eax
000002e6	movl	0x10(%ebx),%ecx
000002e9	subl	0x20(%ebx),%ecx
000002ec	movb	$0x04,(%eax,%ecx)
000002f0	jmp	0x000000df
000002f5	movl	0xec(%ebp),%eax
000002f8	leal	0xdc28-0xe(%eax),%eax
000002fe	movl	%eax,0x04(%esp)
00000302	movl	%ebx,(%esp)
00000305	movl	$0x00000004,0x08(%esp)
0000030d	calll	CUtlBuffer::Printf(char const*, ...)
00000312	movl	%esi,(%esp)
00000315	calll	KeyValues::GetName() const
0000031a	movl	%eax,0x04(%esp)
0000031e	movl	%ebx,(%esp)
00000321	calll	CUtlBuffer::PutString(char const*)
00000326	movl	%esi,(%esp)
00000329	movl	%esi,0xe8(%ebp)
0000032c	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000334	calll	KeyValues::GetDataType(char const*)
00000339	cmpl	$0x07,%eax
0000033c	ja	0x00000080
00000342	movl	0xec(%ebp),%ecx
00000345	movl	0x0000088a(%ecx,%eax,4),%eax
0000034c	addl	%ecx,%eax
0000034e	jmp	*%eax
00000350	movl	0xe8(%ebp),%eax
00000353	movl	0x18(%eax),%eax
00000356	movl	%ebx,0x08(%esp)
0000035a	movl	%eax,0x04(%esp)
0000035e	movl	0x08(%ebp),%eax
00000361	movl	%eax,(%esp)
00000364	calll	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)
00000369	xorb	%cl,%cl
0000036b	testb	%al,%al
0000036d	jne	0x00000080
00000373	jmp	0x0000086d
00000378	movl	0xec(%ebp),%eax
0000037b	leal	0xdc27-0xe(%eax),%esi
00000381	movl	%esi,0x08(%esp)
00000385	movl	0xe8(%ebp),%edi
00000388	movl	%edi,(%esp)
0000038b	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000393	calll	KeyValues::GetString(char const*, char const*)
00000398	testl	%eax,%eax
0000039a	je	0x000003d2
0000039c	movl	%esi,0x08(%esp)
000003a0	movl	%edi,(%esp)
000003a3	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000003ab	calll	KeyValues::GetString(char const*, char const*)
000003b0	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%eax)
000003b3	je	0x000003d2
000003b5	movl	%esi,0x08(%esp)
000003b9	movl	%edi,(%esp)
000003bc	movl	%edi,0xe8(%ebp)
000003bf	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000003c7	calll	KeyValues::GetString(char const*, char const*)
000003cc	movl	%eax,0x04(%esp)
000003d0	jmp	0x000003d9
000003d2	movl	%edi,0xe8(%ebp)
000003d5	movl	%esi,0x04(%esp)
000003d9	movl	%ebx,(%esp)
000003dc	calll	CUtlBuffer::PutString(char const*)
000003e1	jmp	0x00000080
000003e6	movl	0xec(%ebp),%eax
000003e9	leal	0xdc3c-0xe(%eax),%edi
000003ef	movl	%edi,0x08(%esp)
000003f3	movl	0xe8(%ebp),%esi
000003f6	movl	%esi,(%esp)
000003f9	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000401	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xe4(%ebp)
00000408	calll	KeyValues::GetWString(char const*, wchar_t const*)
0000040d	testl	%eax,%eax
0000040f	je	0x00000430
00000411	movl	%edi,0x08(%esp)
00000415	movl	%esi,(%esp)
00000418	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000420	calll	KeyValues::GetWString(char const*, wchar_t const*)
00000425	movl	%eax,(%esp)
00000428	calll	_wcslen
0000042d	movl	%eax,0xe4(%ebp)
00000430	movl	%edi,0xe0(%ebp)
00000433	testb	$0x01,0x15(%ebx)
00000437	jne	0x0000047f
00000439	movl	%ebx,(%esp)
0000043c	movl	$0x00000002,0x04(%esp)
00000444	calll	CUtlBuffer::CheckPut(int)
00000449	cmpb	$0x01,%al
0000044b	jne	0x0000049e
0000044d	movl	0x10(%ebx),%eax
00000450	subl	0x20(%ebx),%eax
00000453	addl	(%ebx),%eax
00000455	testb	$0x01,0x34(%ebx)
00000459	jne	0x00000463
0000045b	movl	0xe4(%ebp),%ecx
0000045e	movw	%cx,(%eax)
00000461	jmp	0x00000471
00000463	testl	%eax,%eax
00000465	je	0x00000471
00000467	movl	0xe4(%ebp),%ecx
0000046a	rolw	$0x08,%cx
0000046e	movw	%cx,(%eax)
00000471	addl	$0x02,0x10(%ebx)
00000475	movl	%ebx,(%esp)
00000478	calll	CUtlBuffer::AddNullTermination()
0000047d	jmp	0x0000049e
0000047f	movl	0xe4(%ebp),%eax
00000482	movswl	%ax,%eax
00000485	movl	%eax,0x08(%esp)
00000489	movl	0xec(%ebp),%eax
0000048c	leal	0xdc33-0xe(%eax),%eax
00000492	movl	%eax,0x04(%esp)
00000496	movl	%ebx,(%esp)
00000499	calll	CUtlBuffer::Printf(char const*, ...)
0000049e	movl	%esi,0xe8(%ebp)
000004a1	xorl	%edi,%edi
000004a3	cmpl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xe4(%ebp)
000004a7	jle	0x00000080
000004ad	jmp	0x000004d6
000004af	nop
000004b0	movswl	%si,%eax
000004b3	movl	%eax,0x08(%esp)
000004b7	movl	0xec(%ebp),%eax
000004ba	leal	0xdc33-0xe(%eax),%eax
000004c0	movl	%eax,0x04(%esp)
000004c4	movl	%ebx,(%esp)
000004c7	calll	CUtlBuffer::Printf(char const*, ...)
000004cc	incl	%edi
000004cd	cmpl	%edi,0xe4(%ebp)
000004d0	je	0x00000080
000004d6	movl	0xe0(%ebp),%eax
000004d9	movl	%eax,0x08(%esp)
000004dd	movl	0xe8(%ebp),%eax
000004e0	movl	%eax,(%esp)
000004e3	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000004eb	calll	KeyValues::GetWString(char const*, wchar_t const*)
000004f0	movzwl	(%eax,%edi,4),%esi
000004f4	testb	$0x01,0x15(%ebx)
000004f8	jne	0x000004b0
000004fa	movl	%ebx,(%esp)
000004fd	movl	$0x00000002,0x04(%esp)
00000505	calll	CUtlBuffer::CheckPut(int)
0000050a	cmpb	$0x01,%al
0000050c	jne	0x000004cc
0000050e	movl	0x10(%ebx),%eax
00000511	subl	0x20(%ebx),%eax
00000514	addl	(%ebx),%eax
00000516	testb	$0x01,0x34(%ebx)
0000051a	je	0x00000524
0000051c	testl	%eax,%eax
0000051e	je	0x00000527
00000520	rolw	$0x08,%si
00000524	movw	%si,(%eax)
00000527	addl	$0x02,0x10(%ebx)
0000052b	movl	%ebx,(%esp)
0000052e	calll	CUtlBuffer::AddNullTermination()
00000533	jmp	0x000004cc
00000535	movl	0xe8(%ebp),%eax
00000538	movl	%eax,(%esp)
0000053b	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000543	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
0000054b	calll	KeyValues::GetInt(char const*, int)
00000550	movl	%eax,%esi
00000552	testb	$0x01,0x15(%ebx)
00000556	jne	0x00000597
00000558	movl	%ebx,(%esp)
0000055b	movl	$0x00000004,0x04(%esp)
00000563	calll	CUtlBuffer::CheckPut(int)
00000568	cmpb	$0x01,%al
0000056a	jne	0x00000080
00000570	movl	0x10(%ebx),%eax
00000573	subl	0x20(%ebx),%eax
00000576	addl	(%ebx),%eax
00000578	testb	$0x01,0x34(%ebx)
0000057c	je	0x00000584
0000057e	testl	%eax,%eax
00000580	je	0x00000586
00000582	bswap	%esi
00000584	movl	%esi,(%eax)
00000586	addl	$0x04,0x10(%ebx)
0000058a	movl	%ebx,(%esp)
0000058d	calll	CUtlBuffer::AddNullTermination()
00000592	jmp	0x00000080
00000597	movl	%esi,0x08(%esp)
0000059b	movl	0xec(%ebp),%eax
0000059e	leal	0xdc33-0xe(%eax),%eax
000005a4	jmp	0x00000074
000005a9	movl	0xe8(%ebp),%eax
000005ac	movl	%eax,(%esp)
000005af	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x0c(%esp)
000005b7	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
000005bf	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000005c7	calll	KeyValues::GetUint64(char const*, unsigned long long)
000005cc	movl	%eax,%edi
000005ce	movl	%edx,%esi
000005d0	testb	$0x01,0x15(%ebx)
000005d4	jne	0x0000061d
000005d6	movl	%ebx,(%esp)
000005d9	movl	$0x00000008,0x04(%esp)
000005e1	calll	CUtlBuffer::CheckPut(int)
000005e6	cmpb	$0x01,%al
000005e8	jne	0x00000080
000005ee	movl	0x10(%ebx),%eax
000005f1	subl	0x20(%ebx),%eax
000005f4	addl	(%ebx),%eax
000005f6	testb	$0x01,0x34(%ebx)
000005fa	jne	0x00000607
000005fc	movl	%edi,(%eax)
000005fe	movl	%esi,0x04(%eax)
00000601	addl	$0x08,0x10(%ebx)
00000605	jmp	0x0000058a
00000607	testl	%eax,%eax
00000609	je	0x00000614
0000060b	bswap	%edi
0000060d	movl	%edi,0x04(%eax)
00000610	bswap	%esi
00000612	movl	%esi,(%eax)
00000614	addl	$0x08,0x10(%ebx)
00000618	jmp	0x0000058a
0000061d	movl	%esi,0x0c(%esp)
00000621	movl	%edi,0x08(%esp)
00000625	movl	0xec(%ebp),%eax
00000628	leal	0xdc36-0xe(%eax),%eax
0000062e	jmp	0x00000074
00000633	movl	0xe8(%ebp),%eax
00000636	movl	%eax,(%esp)
00000639	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x08(%esp)
00000641	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000649	calll	KeyValues::GetFloat(char const*, float)
0000064e	fstps	0xf0(%ebp)
00000651	movss	0xf0(%ebp),%xmm0
00000656	testb	$0x01,0x15(%ebx)
0000065a	jne	0x000006a7
0000065c	movl	%ebx,(%esp)
0000065f	movl	$0x00000004,0x04(%esp)
00000667	movss	%xmm0,0xe4(%ebp)
0000066c	calll	CUtlBuffer::CheckPut(int)
00000671	movss	0xe4(%ebp),%xmm0
00000676	testb	%al,%al
00000678	je	0x00000080
0000067e	movl	0x10(%ebx),%eax
00000681	subl	0x20(%ebx),%eax
00000684	addl	(%ebx),%eax
00000686	testb	$0x01,0x34(%ebx)
0000068a	je	0x0000069e
0000068c	testl	%eax,%eax
0000068e	je	0x00000586
00000694	movd	%xmm0,%ecx
00000698	bswap	%ecx
0000069a	movd	%ecx,%xmm0
0000069e	movss	%xmm0,(%eax)
000006a2	jmp	0x00000586
000006a7	cvtss2sd	%xmm0,%xmm0
000006ab	movsd	%xmm0,0x08(%esp)
000006b1	movl	0xec(%ebp),%eax
000006b4	leal	0xdc2b-0xe(%eax),%eax
000006ba	jmp	0x00000074
000006bf	movl	0xe8(%ebp),%eax
000006c2	movl	%eax,(%esp)
000006c5	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000006cd	calll	KeyValues::GetColor(char const*)
000006d2	movl	%eax,%ecx
000006d4	testb	$0x01,0x15(%ebx)
000006d8	jne	0x0000070c
000006da	movl	%ebx,(%esp)
000006dd	movl	$0x00000001,0x04(%esp)
000006e5	movl	%ecx,%esi
000006e7	calll	CUtlBuffer::CheckPut(int)
000006ec	cmpb	$0x01,%al
000006ee	jne	0x0000072a
000006f0	movl	(%ebx),%eax
000006f2	movl	0x10(%ebx),%ecx
000006f5	subl	0x20(%ebx),%ecx
000006f8	movl	%esi,%edx
000006fa	movb	%dl,(%eax,%ecx)
000006fd	movl	%edx,%esi
000006ff	incl	0x10(%ebx)
00000702	movl	%ebx,(%esp)
00000705	calll	CUtlBuffer::AddNullTermination()
0000070a	jmp	0x0000072a
0000070c	movl	0xec(%ebp),%eax
0000070f	leal	0xdc28-0xe(%eax),%eax
00000715	movl	%eax,0x04(%esp)
00000719	movl	%ebx,(%esp)
0000071c	movzbl	%cl,%eax
0000071f	movl	%eax,0x08(%esp)
00000723	movl	%ecx,%esi
00000725	calll	CUtlBuffer::Printf(char const*, ...)
0000072a	movl	%esi,%ecx
0000072c	movl	%esi,%edi
0000072e	shrl	$0x08,%ecx
00000731	testb	$0x01,0x15(%ebx)
00000735	jne	0x00000767
00000737	movl	%ecx,%esi
00000739	movl	%ebx,(%esp)
0000073c	movl	$0x00000001,0x04(%esp)
00000744	calll	CUtlBuffer::CheckPut(int)
00000749	cmpb	$0x01,%al
0000074b	jne	0x00000783
0000074d	movl	(%ebx),%eax
0000074f	movl	0x10(%ebx),%ecx
00000752	subl	0x20(%ebx),%ecx
00000755	movl	%esi,%edx
00000757	movb	%dl,(%eax,%ecx)
0000075a	incl	0x10(%ebx)
0000075d	movl	%ebx,(%esp)
00000760	calll	CUtlBuffer::AddNullTermination()
00000765	jmp	0x00000783
00000767	movl	0xec(%ebp),%eax
0000076a	leal	0xdc28-0xe(%eax),%eax
00000770	movl	%eax,0x04(%esp)
00000774	movl	%ebx,(%esp)
00000777	movzbl	%cl,%eax
0000077a	movl	%eax,0x08(%esp)
0000077e	calll	CUtlBuffer::Printf(char const*, ...)
00000783	movl	%edi,%ecx
00000785	movl	%edi,%esi
00000787	shrl	$0x10,%ecx
0000078a	testb	$0x01,0x15(%ebx)
0000078e	jne	0x000007c0
00000790	movl	%ecx,%edi
00000792	movl	%ebx,(%esp)
00000795	movl	$0x00000001,0x04(%esp)
0000079d	calll	CUtlBuffer::CheckPut(int)
000007a2	cmpb	$0x01,%al
000007a4	jne	0x000007dc
000007a6	movl	(%ebx),%eax
000007a8	movl	0x10(%ebx),%ecx
000007ab	subl	0x20(%ebx),%ecx
000007ae	movl	%edi,%edx
000007b0	movb	%dl,(%eax,%ecx)
000007b3	incl	0x10(%ebx)
000007b6	movl	%ebx,(%esp)
000007b9	calll	CUtlBuffer::AddNullTermination()
000007be	jmp	0x000007dc
000007c0	movl	0xec(%ebp),%eax
000007c3	leal	0xdc28-0xe(%eax),%eax
000007c9	movl	%eax,0x04(%esp)
000007cd	movl	%ebx,(%esp)
000007d0	movzbl	%cl,%eax
000007d3	movl	%eax,0x08(%esp)
000007d7	calll	CUtlBuffer::Printf(char const*, ...)
000007dc	shrl	$0x18,%esi
000007df	testb	$0x01,0x15(%ebx)
000007e3	jne	0x00000067
000007e9	movl	%ebx,(%esp)
000007ec	movl	$0x00000001,0x04(%esp)
000007f4	calll	CUtlBuffer::CheckPut(int)
000007f9	cmpb	$0x01,%al
000007fb	jne	0x00000080
00000801	movl	(%ebx),%eax
00000803	movl	0x10(%ebx),%ecx
00000806	subl	0x20(%ebx),%ecx
00000809	movl	%esi,%edx
0000080b	movb	%dl,(%eax,%ecx)
0000080e	incl	0x10(%ebx)
00000811	jmp	0x0000058a
00000816	testb	$0x01,0x15(%ebx)
0000081a	jne	0x00000849
0000081c	movl	%ebx,(%esp)
0000081f	movl	$0x00000001,0x04(%esp)
00000827	calll	CUtlBuffer::CheckPut(int)
0000082c	cmpb	$0x01,%al
0000082e	jne	0x00000866
00000830	movl	(%ebx),%eax
00000832	movl	0x10(%ebx),%ecx
00000835	subl	0x20(%ebx),%ecx
00000838	movb	$0x08,(%eax,%ecx)
0000083c	incl	0x10(%ebx)
0000083f	movl	%ebx,(%esp)
00000842	calll	CUtlBuffer::AddNullTermination()
00000847	jmp	0x00000866
00000849	movl	0xec(%ebp),%eax
0000084c	leal	0xdc28-0xe(%eax),%eax
00000852	movl	%eax,0x04(%esp)
00000856	movl	%ebx,(%esp)
00000859	movl	$0x00000008,0x08(%esp)
00000861	calll	CUtlBuffer::Printf(char const*, ...)
00000866	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%ebx)
0000086a	sete	%cl
0000086d	movzbl	%cl,%eax
00000870	addl	$0x2c,%esp
00000873	popl	%esi
00000874	popl	%edi
00000875	popl	%ebx
00000876	popl	%ebp
00000877	ret
00000878	cmpsl	(%esi),(%edi)
00000879	addb	%al,(%eax)
0000087b	addb	%bh,%dh
0000087d	addb	%al,(%eax)
0000087f	addb	%dl,0x2b000001(%ebx)
00000885	addb	(%eax),%al
00000887	addb	%bh,0x01470000(%edx,%eax)
0000088e	addb	%al,(%eax)
00000890	ja	0x00000894
00000892	addb	%al,(%eax)
00000894	filds	(%ecx)
00000896	addb	%al,(%eax)
00000898	incl	%edx
00000899	addl	(%eax),%eax
0000089b	addb	%ch,0x03(%edx)
0000089e	addb	%al,(%eax)
000008a0	daa
000008a1	addl	$0x06250000,%eax
000008a6	addb	%al,(%eax)
000008a8	xorb	(%eax),%al
000008aa	addb	%al,(%eax)
000008ac	fadds	(%ebx)
000008ae	addb	%al,(%eax)
000008b0	movb	$0x06,%cl
000008b2	addb	%al,(%eax)
000008b4	wait/addl	$0x1f0f0000,%eax
000008ba	testb	(%eax),%al
000008bc	addb	%al,(%eax)
000008be	addb	%al,(%eax)
KVPacker::ReadAsBinary(KeyValues*, CUtlBuffer&):
000008c0	pushl	%ebp
000008c1	movl	%esp,%ebp
000008c3	pushl	%ebx
000008c4	pushl	%edi
000008c5	pushl	%esi
000008c6	subl	$0x0000044c,%esp
000008cc	calll	0x000008d1
000008d1	popl	%eax
000008d2	movl	%eax,0xfffffbc4(%ebp)
000008d8	movl	0xf9aa-0x8d1(%eax),%eax
000008de	movl	%eax,0xfffffbb0(%ebp)
000008e4	movl	(%eax),%eax
000008e6	movl	%eax,0xf0(%ebp)
000008e9	xorb	%cl,%cl
000008eb	movl	0x10(%ebp),%esi
000008ee	testb	$0x01,0x15(%esi)
000008f2	jne	0x0000127c
000008f8	xorb	%cl,%cl
000008fa	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
000008fe	jne	0x0000127c
00000904	movl	0x0c(%ebp),%eax
00000907	movl	%eax,0xfffffbbc(%ebp)
0000090d	subl	$0x10,%esp
00000910	movl	%eax,(%esp)
00000913	calll	KeyValues::Clear()
00000918	addl	$0x10,%esp
0000091b	testb	$0x01,0x15(%esi)
0000091f	jne	0x0000095f
00000921	subl	$0x10,%esp
00000924	movl	%esi,(%esp)
00000927	movl	$0x00000001,0x04(%esp)
0000092f	calll	CUtlBuffer::CheckGet(int)
00000934	addl	$0x10,%esp
00000937	cmpb	$0x01,%al
00000939	jne	0x00000954
0000093b	movl	(%esi),%ecx
0000093d	movl	0x0c(%esi),%eax
00000940	movl	%eax,%edx
00000942	subl	0x20(%esi),%edx
00000945	movb	(%ecx,%edx),%bl
00000948	movb	%bl,0xfffffbcf(%ebp)
0000094e	incl	%eax
0000094f	movl	%eax,0x0c(%esi)
00000952	jmp	0x000009a0
00000954	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbcf(%ebp)
0000095b	xorb	%bl,%bl
0000095d	jmp	0x000009a0
0000095f	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbcf(%ebp)
00000966	subl	$0x10,%esp
00000969	leal	0xfffffbcf(%ebp),%eax
0000096f	movl	%eax,0x08(%esp)
00000973	movl	0xfffffbc4(%ebp),%eax
00000979	leal	0xdc28-0x8d1(%eax),%eax
0000097f	movl	%eax,0x04(%esp)
00000983	movl	%esi,(%esp)
00000986	calll	CUtlBuffer::Scanf(char const*, ...)
0000098b	addl	$0x10,%esp
0000098e	movb	0xfffffbcf(%ebp),%bl
00000994	nopw	%cs:KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&)(%eax,%eax)
000009a0	cmpb	$0x08,%bl
000009a3	je	0x00001275
000009a9	subl	$0x10,%esp
000009ac	leal	0xfffffbf0(%ebp),%edi
000009b2	movl	%edi,0x04(%esp)
000009b6	movl	%esi,(%esp)
000009b9	movl	$0x000003ff,0x08(%esp)
000009c1	calll	CUtlBuffer::GetString(char*, int)
000009c6	addl	$0x10,%esp
000009c9	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xef(%ebp)
000009cd	subl	$0x10,%esp
000009d0	movl	%edi,0x04(%esp)
000009d4	movl	0xfffffbbc(%ebp),%eax
000009da	movl	%eax,(%esp)
000009dd	calll	KeyValues::SetName(char const*)
000009e2	addl	$0x10,%esp
000009e5	cmpb	$0x07,%bl
000009e8	ja	0x00001180
000009ee	movzbl	%bl,%eax
000009f1	movl	0xfffffbc4(%ebp),%ecx
000009f7	movl	0x000009eb(%ecx,%eax,4),%eax
000009fe	addl	%ecx,%eax
00000a00	jmp	*%eax
00000a02	movl	%esi,%edi
00000a04	subl	$0x10,%esp
00000a07	movl	$0x00000020,(%esp)
00000a0e	calll	KeyValues::operator new(unsigned long)
00000a13	addl	$0x10,%esp
00000a16	movl	%eax,%esi
00000a18	subl	$0x10,%esp
00000a1b	movl	0xfffffbc4(%ebp),%eax
00000a21	leal	0xdc27-0x8d1(%eax),%eax
00000a27	movl	%eax,0x04(%esp)
00000a2b	movl	%esi,(%esp)
00000a2e	calll	KeyValues::KeyValues(char const*)
00000a33	addl	$0x10,%esp
00000a36	subl	$0x10,%esp
00000a39	movl	%esi,0x04(%esp)
00000a3d	movl	0xfffffbbc(%ebp),%eax
00000a43	movl	%eax,(%esp)
00000a46	calll	KeyValues::AddSubKey(KeyValues*)
00000a4b	addl	$0x10,%esp
00000a4e	subl	$0x10,%esp
00000a51	movl	%edi,0x08(%esp)
00000a55	movl	%esi,0x04(%esp)
00000a59	movl	%edi,%esi
00000a5b	movl	0x08(%ebp),%eax
00000a5e	movl	%eax,(%esp)
00000a61	calll	KVPacker::ReadAsBinary(KeyValues*, CUtlBuffer&)
00000a66	addl	$0x10,%esp
00000a69	xorb	%cl,%cl
00000a6b	testb	%al,%al
00000a6d	jne	0x00001180
00000a73	jmp	0x0000127c
00000a78	subl	$0x10,%esp
00000a7b	leal	0xfffffbf0(%ebp),%edi
00000a81	movl	%edi,0x04(%esp)
00000a85	movl	%esi,(%esp)
00000a88	movl	$0x000003ff,0x08(%esp)
00000a90	calll	CUtlBuffer::GetString(char*, int)
00000a95	addl	$0x10,%esp
00000a98	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xef(%ebp)
00000a9c	subl	$0x10,%esp
00000a9f	movl	%edi,0x04(%esp)
00000aa3	movl	0xfffffbbc(%ebp),%eax
00000aa9	movl	%eax,(%esp)
00000aac	calll	KeyValues::SetStringValue(char const*)
00000ab1	jmp	0x0000117d
00000ab6	testb	$0x01,0x15(%esi)
00000aba	jne	0x00000b22
00000abc	subl	$0x10,%esp
00000abf	movl	%esi,(%esp)
00000ac2	movl	$0x00000002,0x04(%esp)
00000aca	calll	CUtlBuffer::CheckGet(int)
00000acf	addl	$0x10,%esp
00000ad2	cmpb	$0x01,%al
00000ad4	jne	0x00000b15
00000ad6	movl	0x0c(%esi),%eax
00000ad9	movl	%eax,%ecx
00000adb	subl	0x20(%esi),%ecx
00000ade	addl	(%esi),%ecx
00000ae0	testb	$0x01,0x34(%esi)
00000ae4	jne	0x00000aeb
00000ae6	movzwl	(%ecx),%ecx
00000ae9	jmp	0x00000b06
00000aeb	movl	%esi,%edi
00000aed	leal	0xfffffbd0(%ebp),%esi
00000af3	testl	%ecx,%ecx
00000af5	cmovnel	%ecx,%esi
00000af8	movzbl	0x01(%esi),%edx
00000afc	movzbl	(%esi),%ecx
00000aff	movl	%edi,%esi
00000b01	shll	$0x08,%ecx
00000b04	orl	%edx,%ecx
00000b06	movw	%cx,0xfffffbd0(%ebp)
00000b0d	addl	$0x02,%eax
00000b10	movl	%eax,0x0c(%esi)
00000b13	jmp	0x00000b5a
00000b15	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd0(%ebp)
00000b1e	xorl	%ecx,%ecx
00000b20	jmp	0x00000b5a
00000b22	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd0(%ebp)
00000b2b	subl	$0x10,%esp
00000b2e	leal	0xfffffbd0(%ebp),%eax
00000b34	movl	%eax,0x08(%esp)
00000b38	movl	0xfffffbc4(%ebp),%eax
00000b3e	leal	0xdc33-0x8d1(%eax),%eax
00000b44	movl	%eax,0x04(%esp)
00000b48	movl	%esi,(%esp)
00000b4b	calll	CUtlBuffer::Scanf(char const*, ...)
00000b50	addl	$0x10,%esp
00000b53	movzwl	0xfffffbd0(%ebp),%ecx
00000b5a	movswl	%cx,%ecx
00000b5d	movl	%ecx,0xfffffbb8(%ebp)
00000b63	leal	0x00000013(,%ecx,4),%eax
00000b6a	andl	$0xf0,%eax
00000b6d	movl	%esp,%edx
00000b6f	subl	%eax,%edx
00000b71	movl	%edx,0xfffffbb4(%ebp)
00000b77	movl	%edx,%esp
00000b79	testw	%cx,%cx
00000b7c	jle	0x00000c4b
00000b82	movl	0xfffffbb8(%ebp),%eax
00000b88	movl	0xfffffbb4(%ebp),%ebx
00000b8e	nop
00000b90	movl	%eax,0xfffffbc0(%ebp)
00000b96	testb	$0x01,0x15(%esi)
00000b9a	jne	0x00000bfe
00000b9c	subl	$0x10,%esp
00000b9f	movl	%esi,(%esp)
00000ba2	movl	$0x00000002,0x04(%esp)
00000baa	calll	CUtlBuffer::CheckGet(int)
00000baf	addl	$0x10,%esp
00000bb2	cmpb	$0x01,%al
00000bb4	jne	0x00000bf1
00000bb6	movl	0x0c(%esi),%eax
00000bb9	movl	%eax,%ecx
00000bbb	subl	0x20(%esi),%ecx
00000bbe	addl	(%esi),%ecx
00000bc0	testb	$0x01,0x34(%esi)
00000bc4	jne	0x00000bcb
00000bc6	movzwl	(%ecx),%ecx
00000bc9	jmp	0x00000be2
00000bcb	leal	0xfffffbd2(%ebp),%edi
00000bd1	testl	%ecx,%ecx
00000bd3	cmovnel	%ecx,%edi
00000bd6	movzbl	0x01(%edi),%edx
00000bda	movzbl	(%edi),%ecx
00000bdd	shll	$0x08,%ecx
00000be0	orl	%edx,%ecx
00000be2	movw	%cx,0xfffffbd2(%ebp)
00000be9	addl	$0x02,%eax
00000bec	movl	%eax,0x0c(%esi)
00000bef	jmp	0x00000c36
00000bf1	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd2(%ebp)
00000bfa	xorl	%ecx,%ecx
00000bfc	jmp	0x00000c36
00000bfe	movw	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd2(%ebp)
00000c07	subl	$0x10,%esp
00000c0a	leal	0xfffffbd2(%ebp),%eax
00000c10	movl	%eax,0x08(%esp)
00000c14	movl	0xfffffbc4(%ebp),%eax
00000c1a	leal	0xdc33-0x8d1(%eax),%eax
00000c20	movl	%eax,0x04(%esp)
00000c24	movl	%esi,(%esp)
00000c27	calll	CUtlBuffer::Scanf(char const*, ...)
00000c2c	addl	$0x10,%esp
00000c2f	movzwl	0xfffffbd2(%ebp),%ecx
00000c36	movswl	%cx,%eax
00000c39	movl	%eax,(%ebx)
00000c3b	addl	$0x04,%ebx
00000c3e	movl	0xfffffbc0(%ebp),%eax
00000c44	decl	%eax
00000c45	jne	0x00000b90
00000c4b	movl	0xfffffbb8(%ebp),%eax
00000c51	movl	0xfffffbb4(%ebp),%ecx
00000c57	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),(%ecx,%eax,4)
00000c5e	subl	$0x10,%esp
00000c61	movl	%ecx,0x08(%esp)
00000c65	movl	0xfffffbbc(%ebp),%eax
00000c6b	movl	%eax,(%esp)
00000c6e	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000c76	calll	KeyValues::SetWString(char const*, wchar_t const*)
00000c7b	jmp	0x0000117d
00000c80	testb	$0x01,0x15(%esi)
00000c84	jne	0x00000cfd
00000c86	subl	$0x10,%esp
00000c89	movl	%esi,(%esp)
00000c8c	movl	$0x00000004,0x04(%esp)
00000c94	calll	CUtlBuffer::CheckGet(int)
00000c99	addl	$0x10,%esp
00000c9c	cmpb	$0x01,%al
00000c9e	jne	0x00000cef
00000ca0	movl	0x0c(%esi),%eax
00000ca3	movl	%eax,%edx
00000ca5	subl	0x20(%esi),%edx
00000ca8	addl	(%esi),%edx
00000caa	testb	$0x01,0x34(%esi)
00000cae	jne	0x00000cb4
00000cb0	movl	(%edx),%ecx
00000cb2	jmp	0x00000ce1
00000cb4	leal	0xfffffbd4(%ebp),%ecx
00000cba	testl	%edx,%edx
00000cbc	cmovnel	%edx,%ecx
00000cbf	movzbl	0x03(%ecx),%edx
00000cc3	movl	%esi,%edi
00000cc5	movzbl	0x02(%ecx),%esi
00000cc9	shll	$0x08,%esi
00000ccc	orl	%edx,%esi
00000cce	movzbl	0x01(%ecx),%edx
00000cd2	shll	$0x10,%edx
00000cd5	orl	%esi,%edx
00000cd7	movl	%edi,%esi
00000cd9	movzbl	(%ecx),%ecx
00000cdc	shll	$0x18,%ecx
00000cdf	orl	%edx,%ecx
00000ce1	movl	%ecx,0xfffffbd4(%ebp)
00000ce7	addl	$0x04,%eax
00000cea	movl	%eax,0x0c(%esi)
00000ced	jmp	0x00000d35
00000cef	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd4(%ebp)
00000cf9	xorl	%ecx,%ecx
00000cfb	jmp	0x00000d35
00000cfd	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbd4(%ebp)
00000d07	subl	$0x10,%esp
00000d0a	leal	0xfffffbd4(%ebp),%eax
00000d10	movl	%eax,0x08(%esp)
00000d14	movl	0xfffffbc4(%ebp),%eax
00000d1a	leal	0xdc33-0x8d1(%eax),%eax
00000d20	movl	%eax,0x04(%esp)
00000d24	movl	%esi,(%esp)
00000d27	calll	CUtlBuffer::Scanf(char const*, ...)
00000d2c	addl	$0x10,%esp
00000d2f	movl	0xfffffbd4(%ebp),%ecx
00000d35	subl	$0x10,%esp
00000d38	movl	%ecx,0x08(%esp)
00000d3c	movl	0xfffffbbc(%ebp),%eax
00000d42	movl	%eax,(%esp)
00000d45	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000d4d	calll	KeyValues::SetInt(char const*, int)
00000d52	jmp	0x0000117d
00000d57	subl	$0x10,%esp
00000d5a	movl	0xfffffbc4(%ebp),%eax
00000d60	leal	0xdc2e-0x8d1(%eax),%eax
00000d66	movl	%eax,0x08(%esp)
00000d6a	leal	0xfffffbd8(%ebp),%eax
00000d70	movl	%eax,0x04(%esp)
00000d74	movl	%esi,(%esp)
00000d77	calll	void CUtlBuffer::GetType<long long>(long long&, char const*)
00000d7c	addl	$0x10,%esp
00000d7f	movl	0xfffffbd8(%ebp),%eax
00000d85	movl	0xfffffbdc(%ebp),%ecx
00000d8b	subl	$0x10,%esp
00000d8e	movl	%ecx,0x0c(%esp)
00000d92	movl	%eax,0x08(%esp)
00000d96	movl	0xfffffbbc(%ebp),%eax
00000d9c	movl	%eax,(%esp)
00000d9f	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000da7	calll	KeyValues::SetUint64(char const*, unsigned long long)
00000dac	jmp	0x0000117d
00000db1	testb	$0x01,0x15(%esi)
00000db5	jne	0x00000e16
00000db7	subl	$0x10,%esp
00000dba	movl	%esi,(%esp)
00000dbd	movl	$0x00000004,0x04(%esp)
00000dc5	calll	CUtlBuffer::CheckGet(int)
00000dca	addl	$0x10,%esp
00000dcd	cmpb	$0x01,%al
00000dcf	jne	0x00000e06
00000dd1	movl	(%esi),%ecx
00000dd3	movl	0x0c(%esi),%eax
00000dd6	movl	%eax,%edx
00000dd8	subl	0x20(%esi),%edx
00000ddb	movss	(%ecx,%edx),%xmm0
00000de0	movss	%xmm0,0xfffffbe4(%ebp)
00000de8	testb	$0x01,0x34(%esi)
00000dec	je	0x00000dfe
00000dee	movd	%xmm0,%ecx
00000df2	bswap	%ecx
00000df4	movl	%ecx,0xfffffbe4(%ebp)
00000dfa	movd	%ecx,%xmm0
00000dfe	addl	$0x04,%eax
00000e01	movl	%eax,0x0c(%esi)
00000e04	jmp	0x00000e50
00000e06	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe4(%ebp)
00000e10	pxor	%xmm0,%xmm0
00000e14	jmp	0x00000e50
00000e16	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe4(%ebp)
00000e20	subl	$0x10,%esp
00000e23	leal	0xfffffbe4(%ebp),%eax
00000e29	movl	%eax,0x08(%esp)
00000e2d	movl	0xfffffbc4(%ebp),%eax
00000e33	leal	0xdc2b-0x8d1(%eax),%eax
00000e39	movl	%eax,0x04(%esp)
00000e3d	movl	%esi,(%esp)
00000e40	calll	CUtlBuffer::Scanf(char const*, ...)
00000e45	addl	$0x10,%esp
00000e48	movss	0xfffffbe4(%ebp),%xmm0
00000e50	subl	$0x10,%esp
00000e53	movss	%xmm0,0x08(%esp)
00000e59	movl	0xfffffbbc(%ebp),%eax
00000e5f	movl	%eax,(%esp)
00000e62	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00000e6a	calll	KeyValues::SetFloat(char const*, float)
00000e6f	jmp	0x0000117d
00000e74	testb	$0x01,0x15(%esi)
00000e78	jne	0x00000eb8
00000e7a	subl	$0x10,%esp
00000e7d	movl	%esi,(%esp)
00000e80	movl	$0x00000001,0x04(%esp)
00000e88	calll	CUtlBuffer::CheckGet(int)
00000e8d	addl	$0x10,%esp
00000e90	cmpb	$0x01,%al
00000e92	jne	0x00000ead
00000e94	movl	(%esi),%ecx
00000e96	movl	0x0c(%esi),%eax
00000e99	movl	%eax,%edx
00000e9b	subl	0x20(%esi),%edx
00000e9e	movb	(%ecx,%edx),%cl
00000ea1	movb	%cl,0xfffffbe8(%ebp)
00000ea7	incl	%eax
00000ea8	movl	%eax,0x0c(%esi)
00000eab	jmp	0x00000eed
00000ead	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe8(%ebp)
00000eb4	xorb	%cl,%cl
00000eb6	jmp	0x00000eed
00000eb8	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe8(%ebp)
00000ebf	subl	$0x10,%esp
00000ec2	leal	0xfffffbe8(%ebp),%eax
00000ec8	movl	%eax,0x08(%esp)
00000ecc	movl	0xfffffbc4(%ebp),%eax
00000ed2	leal	0xdc28-0x8d1(%eax),%eax
00000ed8	movl	%eax,0x04(%esp)
00000edc	movl	%esi,(%esp)
00000edf	calll	CUtlBuffer::Scanf(char const*, ...)
00000ee4	addl	$0x10,%esp
00000ee7	movb	0xfffffbe8(%ebp),%cl
00000eed	movb	%cl,0xfffffbc0(%ebp)
00000ef3	testb	$0x01,0x15(%esi)
00000ef7	jne	0x00000f37
00000ef9	subl	$0x10,%esp
00000efc	movl	%esi,(%esp)
00000eff	movl	$0x00000001,0x04(%esp)
00000f07	calll	CUtlBuffer::CheckGet(int)
00000f0c	addl	$0x10,%esp
00000f0f	cmpb	$0x01,%al
00000f11	jne	0x00000f2c
00000f13	movl	(%esi),%ecx
00000f15	movl	0x0c(%esi),%eax
00000f18	movl	%eax,%edx
00000f1a	subl	0x20(%esi),%edx
00000f1d	movb	(%ecx,%edx),%bh
00000f20	movb	%bh,0xfffffbe9(%ebp)
00000f26	incl	%eax
00000f27	movl	%eax,0x0c(%esi)
00000f2a	jmp	0x00000f6c
00000f2c	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe9(%ebp)
00000f33	xorb	%bh,%bh
00000f35	jmp	0x00000f6c
00000f37	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbe9(%ebp)
00000f3e	subl	$0x10,%esp
00000f41	leal	0xfffffbe9(%ebp),%eax
00000f47	movl	%eax,0x08(%esp)
00000f4b	movl	0xfffffbc4(%ebp),%eax
00000f51	leal	0xdc28-0x8d1(%eax),%eax
00000f57	movl	%eax,0x04(%esp)
00000f5b	movl	%esi,(%esp)
00000f5e	calll	CUtlBuffer::Scanf(char const*, ...)
00000f63	addl	$0x10,%esp
00000f66	movb	0xfffffbe9(%ebp),%bh
00000f6c	testb	$0x01,0x15(%esi)
00000f70	jne	0x00000fb0
00000f72	subl	$0x10,%esp
00000f75	movl	%esi,(%esp)
00000f78	movl	$0x00000001,0x04(%esp)
00000f80	calll	CUtlBuffer::CheckGet(int)
00000f85	addl	$0x10,%esp
00000f88	cmpb	$0x01,%al
00000f8a	jne	0x00000fa5
00000f8c	movl	(%esi),%ecx
00000f8e	movl	0x0c(%esi),%eax
00000f91	movl	%eax,%edx
00000f93	subl	0x20(%esi),%edx
00000f96	movb	(%ecx,%edx),%bl
00000f99	movb	%bl,0xfffffbea(%ebp)
00000f9f	incl	%eax
00000fa0	movl	%eax,0x0c(%esi)
00000fa3	jmp	0x00000fe5
00000fa5	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbea(%ebp)
00000fac	xorb	%bl,%bl
00000fae	jmp	0x00000fe5
00000fb0	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbea(%ebp)
00000fb7	subl	$0x10,%esp
00000fba	leal	0xfffffbea(%ebp),%eax
00000fc0	movl	%eax,0x08(%esp)
00000fc4	movl	0xfffffbc4(%ebp),%eax
00000fca	leal	0xdc28-0x8d1(%eax),%eax
00000fd0	movl	%eax,0x04(%esp)
00000fd4	movl	%esi,(%esp)
00000fd7	calll	CUtlBuffer::Scanf(char const*, ...)
00000fdc	addl	$0x10,%esp
00000fdf	movb	0xfffffbea(%ebp),%bl
00000fe5	testb	$0x01,0x15(%esi)
00000fe9	jne	0x00001029
00000feb	subl	$0x10,%esp
00000fee	movl	%esi,(%esp)
00000ff1	movl	$0x00000001,0x04(%esp)
00000ff9	calll	CUtlBuffer::CheckGet(int)
00000ffe	addl	$0x10,%esp
00001001	cmpb	$0x01,%al
00001003	jne	0x0000101e
00001005	movl	(%esi),%eax
00001007	movl	0x0c(%esi),%ecx
0000100a	movl	%ecx,%edx
0000100c	subl	0x20(%esi),%edx
0000100f	movb	(%eax,%edx),%al
00001012	movb	%al,0xfffffbeb(%ebp)
00001018	incl	%ecx
00001019	movl	%ecx,0x0c(%esi)
0000101c	jmp	0x0000105e
0000101e	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbeb(%ebp)
00001025	xorb	%al,%al
00001027	jmp	0x0000105e
00001029	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbeb(%ebp)
00001030	subl	$0x10,%esp
00001033	leal	0xfffffbeb(%ebp),%eax
00001039	movl	%eax,0x08(%esp)
0000103d	movl	0xfffffbc4(%ebp),%eax
00001043	leal	0xdc28-0x8d1(%eax),%eax
00001049	movl	%eax,0x04(%esp)
0000104d	movl	%esi,(%esp)
00001050	calll	CUtlBuffer::Scanf(char const*, ...)
00001055	addl	$0x10,%esp
00001058	movb	0xfffffbeb(%ebp),%al
0000105e	movzbl	0xfffffbc0(%ebp),%ecx
00001065	movzbl	%bh,%edx
00001068	shll	$0x08,%edx
0000106b	orl	%ecx,%edx
0000106d	movzbl	%bl,%ecx
00001070	shll	$0x10,%ecx
00001073	orl	%edx,%ecx
00001075	movzbl	%al,%eax
00001078	shll	$0x18,%eax
0000107b	orl	%ecx,%eax
0000107d	movl	%eax,0xfffffbc8(%ebp)
00001083	subl	$0x10,%esp
00001086	movl	0xfffffbc8(%ebp),%eax
0000108c	movl	%eax,0x08(%esp)
00001090	movl	0xfffffbbc(%ebp),%eax
00001096	movl	%eax,(%esp)
00001099	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
000010a1	calll	KeyValues::SetColor(char const*, Color)
000010a6	jmp	0x0000117d
000010ab	testb	$0x01,0x15(%esi)
000010af	jne	0x00001128
000010b1	subl	$0x10,%esp
000010b4	movl	%esi,(%esp)
000010b7	movl	$0x00000004,0x04(%esp)
000010bf	calll	CUtlBuffer::CheckGet(int)
000010c4	addl	$0x10,%esp
000010c7	cmpb	$0x01,%al
000010c9	jne	0x0000111a
000010cb	movl	0x0c(%esi),%eax
000010ce	movl	%eax,%edx
000010d0	subl	0x20(%esi),%edx
000010d3	addl	(%esi),%edx
000010d5	testb	$0x01,0x34(%esi)
000010d9	jne	0x000010df
000010db	movl	(%edx),%ecx
000010dd	jmp	0x0000110c
000010df	leal	0xfffffbec(%ebp),%ecx
000010e5	testl	%edx,%edx
000010e7	cmovnel	%edx,%ecx
000010ea	movzbl	0x03(%ecx),%edx
000010ee	movl	%esi,%edi
000010f0	movzbl	0x02(%ecx),%esi
000010f4	shll	$0x08,%esi
000010f7	orl	%edx,%esi
000010f9	movzbl	0x01(%ecx),%edx
000010fd	shll	$0x10,%edx
00001100	orl	%esi,%edx
00001102	movl	%edi,%esi
00001104	movzbl	(%ecx),%ecx
00001107	shll	$0x18,%ecx
0000110a	orl	%edx,%ecx
0000110c	movl	%ecx,0xfffffbec(%ebp)
00001112	addl	$0x04,%eax
00001115	movl	%eax,0x0c(%esi)
00001118	jmp	0x00001160
0000111a	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbec(%ebp)
00001124	xorl	%ecx,%ecx
00001126	jmp	0x00001160
00001128	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbec(%ebp)
00001132	subl	$0x10,%esp
00001135	leal	0xfffffbec(%ebp),%eax
0000113b	movl	%eax,0x08(%esp)
0000113f	movl	0xfffffbc4(%ebp),%eax
00001145	leal	0xdc28-0x8d1(%eax),%eax
0000114b	movl	%eax,0x04(%esp)
0000114f	movl	%esi,(%esp)
00001152	calll	CUtlBuffer::Scanf(char const*, ...)
00001157	addl	$0x10,%esp
0000115a	movl	0xfffffbec(%ebp),%ecx
00001160	subl	$0x10,%esp
00001163	movl	%ecx,0x08(%esp)
00001167	movl	0xfffffbbc(%ebp),%eax
0000116d	movl	%eax,(%esp)
00001170	movl	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x04(%esp)
00001178	calll	KeyValues::SetPtr(char const*, void*)
0000117d	addl	$0x10,%esp
00001180	xorb	%cl,%cl
00001182	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
00001186	jne	0x0000127c
0000118c	testb	$0x01,0x15(%esi)
00001190	jne	0x000011d0
00001192	subl	$0x10,%esp
00001195	movl	%esi,(%esp)
00001198	movl	$0x00000001,0x04(%esp)
000011a0	calll	CUtlBuffer::CheckGet(int)
000011a5	addl	$0x10,%esp
000011a8	cmpb	$0x01,%al
000011aa	jne	0x000011c5
000011ac	movl	(%esi),%ecx
000011ae	movl	0x0c(%esi),%eax
000011b1	movl	%eax,%edx
000011b3	subl	0x20(%esi),%edx
000011b6	movb	(%ecx,%edx),%bl
000011b9	movb	%bl,0xfffffbce(%ebp)
000011bf	incl	%eax
000011c0	movl	%eax,0x0c(%esi)
000011c3	jmp	0x00001205
000011c5	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbce(%ebp)
000011cc	xorb	%bl,%bl
000011ce	jmp	0x0000120a
000011d0	movb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0xfffffbce(%ebp)
000011d7	subl	$0x10,%esp
000011da	leal	0xfffffbce(%ebp),%eax
000011e0	movl	%eax,0x08(%esp)
000011e4	movl	0xfffffbc4(%ebp),%eax
000011ea	leal	0xdc28-0x8d1(%eax),%eax
000011f0	movl	%eax,0x04(%esp)
000011f4	movl	%esi,(%esp)
000011f7	calll	CUtlBuffer::Scanf(char const*, ...)
000011fc	addl	$0x10,%esp
000011ff	movb	0xfffffbce(%ebp),%bl
00001205	cmpb	$0x08,%bl
00001208	je	0x00001275
0000120a	movl	%esi,%edi
0000120c	subl	$0x10,%esp
0000120f	movl	$0x00000020,(%esp)
00001216	calll	KeyValues::operator new(unsigned long)
0000121b	addl	$0x10,%esp
0000121e	movl	%eax,%esi
00001220	subl	$0x10,%esp
00001223	movl	0xfffffbc4(%ebp),%eax
00001229	leal	0xdc27-0x8d1(%eax),%eax
0000122f	movl	%eax,0x04(%esp)
00001233	movl	%esi,(%esp)
00001236	calll	KeyValues::KeyValues(char const*)
0000123b	addl	$0x10,%esp
0000123e	subl	$0x10,%esp
00001241	movl	%esi,0x04(%esp)
00001245	movl	0xfffffbbc(%ebp),%eax
0000124b	movl	%eax,(%esp)
0000124e	calll	KeyValues::SetNextKey(KeyValues*)
00001253	addl	$0x10,%esp
00001256	movl	%esi,0xfffffbbc(%ebp)
0000125c	movl	%edi,%esi
0000125e	jmp	0x000009a0
00001263	movl	%eax,%edi
00001265	subl	$0x10,%esp
00001268	movl	%esi,(%esp)
0000126b	calll	KeyValues::operator delete(void*)
00001270	addl	$0x10,%esp
00001273	jmp	0x000012a4
00001275	cmpb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),0x14(%esi)
00001279	sete	%cl
0000127c	movl	0xfffffbb0(%ebp),%eax
00001282	movl	(%eax),%eax
00001284	cmpl	0xf0(%ebp),%eax
00001287	jne	0x000012b2
00001289	movzbl	%cl,%eax
0000128c	leal	0xf4(%ebp),%esp
0000128f	popl	%esi
00001290	popl	%edi
00001291	popl	%ebx
00001292	popl	%ebp
00001293	ret
00001294	movl	%eax,%edi
00001296	subl	$0x10,%esp
00001299	movl	%esi,(%esp)
0000129c	calll	KeyValues::operator delete(void*)
000012a1	addl	$0x10,%esp
000012a4	subl	$0x10,%esp
000012a7	movl	%edi,(%esp)
000012aa	calll	__Unwind_Resume
000012af	addl	$0x10,%esp
000012b2	calll	___stack_chk_fail
000012b7	calll	std::terminate()
000012bc	xorl	%eax,(%ecx)
000012be	addb	%al,(%eax)
000012c0	cmpsl	(%esi),(%edi)
000012c1	addl	%eax,(%eax)
000012c3	addb	%ch,0xe0000003(%edi)
000012c9	addb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),%al
000012cb	addb	%bl,%dl
000012cd	popl	%es
000012ce	addb	%al,(%eax)
000012d0	inl	$0x01,%eax
000012d2	addb	%al,(%eax)
000012d4	movl	%eax,0x86000005
000012d9	addb	KVPacker::WriteAsBinary(KeyValues*, CUtlBuffer&),%al
000012db	addb	%al,(%eax)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(lzmaDecoder.o):
(__TEXT,__text) section
LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int):
00000000	movl	$0x00000001,%eax
00000005	cmpl	$0x05,0x0c(%esp)
0000000a	jl	0x00000063
0000000c	movl	0x08(%esp),%eax
00000010	movb	(%eax),%cl
00000012	movl	$0x00000001,%eax
00000017	cmpb	$0xe0,%cl
0000001a	ja	0x00000063
0000001c	movl	0x04(%esp),%eax
00000020	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0x08(%eax)
00000027	cmpb	$0x2d,%cl
0000002a	jb	0x0000003c
0000002c	xorl	%edx,%edx
0000002e	nop
00000030	incl	%edx
00000031	addb	$0xd3,%cl
00000034	cmpb	$0x2c,%cl
00000037	ja	0x00000030
00000039	movl	%edx,0x08(%eax)
0000003c	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0x04(%eax)
00000043	cmpb	$0x09,%cl
00000046	jb	0x0000005c
00000048	xorl	%edx,%edx
0000004a	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000050	incl	%edx
00000051	addb	$0xf7,%cl
00000054	cmpb	$0x08,%cl
00000057	ja	0x00000050
00000059	movl	%edx,0x04(%eax)
0000005c	movzbl	%cl,%ecx
0000005f	movl	%ecx,(%eax)
00000061	xorl	%eax,%eax
00000063	ret
00000064	nopw	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
LzmaDecode(_CLzmaDecoderState*, unsigned char const*, unsigned int, unsigned int*, unsigned char*, unsigned int, unsigned int*):
00000070	pushl	%ebp
00000071	movl	%esp,%ebp
00000073	pushl	%ebx
00000074	pushl	%edi
00000075	pushl	%esi
00000076	subl	$0x7c,%esp
00000079	calll	0x0000007e
0000007e	popl	%eax
0000007f	movl	%eax,0xf0(%ebp)
00000082	movl	0x08(%ebp),%esi
00000085	movl	0x0c(%esi),%edx
00000088	movl	%edx,0xe4(%ebp)
0000008b	movl	(%esi),%ebx
0000008d	movb	0x08(%esi),%al
00000090	movb	0x04(%esi),%cl
00000093	movl	0x14(%ebp),%edi
00000096	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),(%edi)
0000009c	movl	0x20(%ebp),%edi
0000009f	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),(%edi)
000000a5	movl	$0x00000001,%edi
000000aa	shll	%cl,%edi
000000ac	movl	%edi,0xc0(%ebp)
000000af	movl	%edx,%edi
000000b1	movb	%al,%cl
000000b3	movl	$0x00000001,%eax
000000b8	shll	%cl,%eax
000000ba	movl	%eax,0xbc(%ebp)
000000bd	movl	0x04(%esi),%ecx
000000c0	addl	%ebx,%ecx
000000c2	movl	%ebx,%esi
000000c4	movl	$0x00000300,%eax
000000c9	shll	%cl,%eax
000000cb	cmpl	$0xfffff8ca,%eax
000000d0	je	0x000000f2
000000d2	leal	0x00001cd8(,%eax,4),%eax
000000d9	movl	%eax,0x08(%esp)
000000dd	movl	0xf0(%ebp),%eax
000000e0	leal	_.memset_pattern-0x7e(%eax),%eax
000000e6	movl	%eax,0x04(%esp)
000000ea	movl	%edi,(%esp)
000000ed	calll	_memset_pattern16
000000f2	movl	%edi,%ecx
000000f4	decl	0xc0(%ebp)
000000f7	decl	0xbc(%ebp)
000000fa	movl	0x10(%ebp),%edx
000000fd	movl	0x0c(%ebp),%eax
00000100	leal	(%eax,%edx),%eax
00000103	movl	%eax,0xdc(%ebp)
00000106	xorl	%edi,%edi
00000108	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xf0(%ebp)
0000010f	jmp	0x00000140
00000111	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000120	movl	$0x00000001,%eax
00000125	cmpl	%edi,%edx
00000127	je	0x00000c70
0000012d	movl	0x0c(%ebp),%eax
00000130	movzbl	(%eax,%edi),%eax
00000134	movl	0xf0(%ebp),%ebx
00000137	shll	$0x08,%ebx
0000013a	orl	%eax,%ebx
0000013c	movl	%ebx,0xf0(%ebp)
0000013f	incl	%edi
00000140	cmpl	$0x05,%edi
00000143	jl	0x00000120
00000145	addl	0x0c(%ebp),%edi
00000148	movl	$0x00000008,%eax
0000014d	movl	%esi,0xb8(%ebp)
00000150	subl	%esi,%eax
00000152	movl	%eax,0xb4(%ebp)
00000155	movl	%ecx,0xe4(%ebp)
00000158	leal	0x000014d0(%ecx),%eax
0000015e	movl	%eax,0x98(%ebp)
00000161	leal	0x00000c88(%ecx),%eax
00000167	movl	%eax,0x94(%ebp)
0000016a	leal	0x00000cc8(%ecx),%eax
00000170	movl	%eax,0x90(%ebp)
00000173	movb	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe8(%ebp)
00000177	xorl	%ecx,%ecx
00000179	movl	$0xffffffff,%esi
0000017e	movl	$0x00000001,0xb0(%ebp)
00000185	movl	$0x00000001,0xac(%ebp)
0000018c	movl	$0x00000001,0xa8(%ebp)
00000193	movl	$0x00000001,0xc4(%ebp)
0000019a	movl	%ecx,%eax
0000019c	jmp	0x00000c2e
000001a1	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
000001b0	cmpl	$0x00ffffff,%esi
000001b6	movl	%esi,%edx
000001b8	jbe	0x000001c2
000001ba	movl	%edi,0xec(%ebp)
000001bd	movl	0xf0(%ebp),%edi
000001c0	jmp	0x000001e8
000001c2	movl	%eax,%ecx
000001c4	movl	$0x00000001,%eax
000001c9	cmpl	0xdc(%ebp),%edi
000001cc	movl	%edi,%esi
000001ce	je	0x00000c70
000001d4	movl	0xf0(%ebp),%eax
000001d7	shll	$0x08,%eax
000001da	movzbl	(%esi),%edi
000001dd	orl	%eax,%edi
000001df	incl	%esi
000001e0	movl	%esi,0xec(%ebp)
000001e3	shll	$0x08,%edx
000001e6	movl	%ecx,%eax
000001e8	movl	0xe4(%ebp),%ecx
000001eb	movl	%eax,%esi
000001ed	andl	0xbc(%ebp),%esi
000001f0	movl	%esi,0xd8(%ebp)
000001f3	movl	%ebx,0xc8(%ebp)
000001f6	shll	$0x04,%ebx
000001f9	movl	%ebx,0xe0(%ebp)
000001fc	leal	(%esi,%ebx),%esi
000001ff	movl	%esi,0xf0(%ebp)
00000202	movl	(%ecx,%esi,4),%esi
00000205	movl	%eax,%ebx
00000207	movl	%edx,%eax
00000209	shrl	$0x0b,%eax
0000020c	imull	%esi,%eax
0000020f	cmpl	%eax,%edi
00000211	jae	0x00000444
00000217	movl	$0x00000800,%edx
0000021c	subl	%esi,%edx
0000021e	shrl	$0x05,%edx
00000221	addl	%esi,%edx
00000223	movl	0xf0(%ebp),%esi
00000226	movl	%edx,(%ecx,%esi,4)
00000229	movzbl	0xe8(%ebp),%edx
0000022d	movl	0xb4(%ebp),%ecx
00000230	shrl	%cl,%edx
00000232	movl	%ebx,%esi
00000234	andl	0xc0(%ebp),%esi
00000237	movl	0xb8(%ebp),%ecx
0000023a	shll	%cl,%esi
0000023c	addl	%edx,%esi
0000023e	imull	$0x00000300,%esi,%esi
00000244	movl	$0x00000001,%ecx
00000249	cmpl	$0x07,0xc8(%ebp)
0000024d	jge	0x00000262
0000024f	movl	%esi,0xd4(%ebp)
00000252	movl	%ebx,0xcc(%ebp)
00000255	movl	%edi,0xf0(%ebp)
00000258	movl	%eax,%esi
0000025a	movl	0xe4(%ebp),%ebx
0000025d	jmp	0x0000034d
00000262	movl	%ebx,%ecx
00000264	movl	%ebx,0xcc(%ebp)
00000267	subl	0xc4(%ebp),%ecx
0000026a	movl	0x18(%ebp),%edx
0000026d	movzbl	(%edx,%ecx),%ecx
00000271	movl	%ecx,0xd8(%ebp)
00000274	leal	0x00000836(%esi),%ecx
0000027a	movl	%ecx,0xd0(%ebp)
0000027d	movl	%esi,0xd4(%ebp)
00000280	movl	$0x00000001,%ecx
00000285	movl	%edi,0xf0(%ebp)
00000288	movl	%eax,%esi
0000028a	movl	0xe4(%ebp),%ebx
0000028d	jmp	0x000002bf
0000028f	nop
00000290	movl	%edx,0xf0(%ebp)
00000293	movl	$0x00000800,%eax
00000298	subl	%ecx,%eax
0000029a	shrl	$0x05,%eax
0000029d	addl	%ecx,%eax
0000029f	movl	%eax,(%ebx,%edi,4)
000002a2	movl	0xe8(%ebp),%eax
000002a5	addl	%eax,%eax
000002a7	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe0(%ebp)
000002ab	movl	%eax,%ecx
000002ad	jne	0x0000034d
000002b3	cmpl	$0x00000100,%ecx
000002b9	jge	0x0000034d
000002bf	movl	%ecx,%edi
000002c1	cmpl	$0x00ffffff,%esi
000002c7	movl	0xec(%ebp),%ecx
000002ca	jbe	0x000002d3
000002cc	movl	%esi,%eax
000002ce	movl	0xf0(%ebp),%edx
000002d1	jmp	0x000002f5
000002d3	movl	$0x00000001,%eax
000002d8	cmpl	0xdc(%ebp),%ecx
000002db	je	0x00000c70
000002e1	movl	0xf0(%ebp),%edx
000002e4	shll	$0x08,%edx
000002e7	movzbl	(%ecx),%eax
000002ea	orl	%eax,%edx
000002ec	incl	%ecx
000002ed	movl	%ecx,0xec(%ebp)
000002f0	shll	$0x08,%esi
000002f3	movl	%esi,%eax
000002f5	movl	%edi,0xe8(%ebp)
000002f8	movl	0xd0(%ebp),%esi
000002fb	leal	(%esi,%edi),%edi
000002fe	movl	0xd8(%ebp),%esi
00000301	addl	%esi,%esi
00000303	movl	%esi,0xd8(%ebp)
00000306	andl	$0x00000100,%esi
0000030c	movl	%esi,0xe0(%ebp)
0000030f	addl	%esi,%edi
00000311	movl	(%ebx,%edi,4),%ecx
00000314	movl	%eax,%esi
00000316	shrl	$0x0b,%esi
00000319	imull	%ecx,%esi
0000031c	cmpl	%esi,%edx
0000031e	jb	0x00000290
00000324	movl	%ecx,%ebx
00000326	shrl	$0x05,%ebx
00000329	subl	%ebx,%ecx
0000032b	movl	0xe4(%ebp),%ebx
0000032e	movl	%ecx,(%ebx,%edi,4)
00000331	subl	%esi,%edx
00000333	movl	%edx,0xf0(%ebp)
00000336	subl	%esi,%eax
00000338	movl	0xe8(%ebp),%ecx
0000033b	leal	0x01(%ecx,%ecx),%ecx
0000033f	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe0(%ebp)
00000343	movl	%eax,%esi
00000345	jne	0x000002b3
0000034b	movl	%eax,%esi
0000034d	addl	$0x00000736,0xd4(%ebp)
00000354	movl	0xec(%ebp),%edi
00000357	jmp	0x00000389
00000359	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax)
00000360	movl	%edi,%ebx
00000362	shrl	$0x05,%ebx
00000365	subl	%ebx,%edi
00000367	movl	0xe4(%ebp),%ecx
0000036a	movl	0xf0(%ebp),%ebx
0000036d	movl	%edi,(%ecx,%ebx,4)
00000370	movl	%ecx,%edi
00000372	subl	%esi,%eax
00000374	movl	0xe0(%ebp),%ecx
00000377	subl	%esi,%ecx
00000379	leal	0x01(%edx,%edx),%edx
0000037d	movl	%eax,0xf0(%ebp)
00000380	movl	%edi,%ebx
00000382	movl	0xec(%ebp),%edi
00000385	movl	%ecx,%esi
00000387	movl	%edx,%ecx
00000389	cmpl	$0x000000ff,%ecx
0000038f	jg	0x00000408
00000391	movl	%ecx,0xe8(%ebp)
00000394	cmpl	$0x00ffffff,%esi
0000039a	jbe	0x000003a1
0000039c	movl	0xf0(%ebp),%eax
0000039f	jmp	0x000003c2
000003a1	movl	%ebx,%edx
000003a3	movl	$0x00000001,%eax
000003a8	cmpl	0xdc(%ebp),%edi
000003ab	je	0x00000c70
000003b1	movl	0xf0(%ebp),%ecx
000003b4	shll	$0x08,%ecx
000003b7	movzbl	(%edi),%eax
000003ba	orl	%ecx,%eax
000003bc	incl	%edi
000003bd	shll	$0x08,%esi
000003c0	movl	%edx,%ebx
000003c2	movl	%esi,0xe0(%ebp)
000003c5	movl	%edi,0xec(%ebp)
000003c8	movl	0xd4(%ebp),%ecx
000003cb	movl	0xe8(%ebp),%edx
000003ce	leal	(%ecx,%edx),%ecx
000003d1	movl	%ecx,0xf0(%ebp)
000003d4	movl	(%ebx,%ecx,4),%edi
000003d7	shrl	$0x0b,%esi
000003da	imull	%edi,%esi
000003dd	cmpl	%esi,%eax
000003df	jae	0x00000360
000003e5	movl	$0x00000800,%ebx
000003ea	subl	%edi,%ebx
000003ec	shrl	$0x05,%ebx
000003ef	addl	%edi,%ebx
000003f1	movl	0xe4(%ebp),%ecx
000003f4	movl	0xf0(%ebp),%edi
000003f7	movl	%ebx,(%ecx,%edi,4)
000003fa	addl	%edx,%edx
000003fc	movl	%eax,0xf0(%ebp)
000003ff	movl	%ecx,%ebx
00000401	movl	0xec(%ebp),%edi
00000404	movl	%edx,%ecx
00000406	jmp	0x00000389
00000408	movb	%cl,%dl
0000040a	movb	%dl,0xe8(%ebp)
0000040d	movl	0x18(%ebp),%eax
00000410	movl	0xcc(%ebp),%ecx
00000413	movb	%dl,(%eax,%ecx)
00000416	movl	%ecx,%eax
00000418	incl	%eax
00000419	xorl	%ecx,%ecx
0000041b	movl	0xc8(%ebp),%edx
0000041e	cmpl	$0x04,%edx
00000421	jl	0x00000c2e
00000427	movl	%edi,%ebx
00000429	cmpl	$0x09,%edx
0000042c	movl	%edx,%ecx
0000042e	jg	0x0000043a
00000430	addl	$0xfd,%ecx
00000433	movl	%ebx,%edi
00000435	jmp	0x00000c2e
0000043a	addl	$0xfa,%ecx
0000043d	movl	%ebx,%edi
0000043f	jmp	0x00000c2e
00000444	movl	%ebx,0xcc(%ebp)
00000447	movl	%esi,%ebx
00000449	shrl	$0x05,%ebx
0000044c	subl	%ebx,%esi
0000044e	movl	0xe4(%ebp),%ecx
00000451	movl	0xf0(%ebp),%ebx
00000454	movl	%esi,(%ecx,%ebx,4)
00000457	subl	%eax,%edi
00000459	subl	%eax,%edx
0000045b	cmpl	$0x00ffffff,%edx
00000461	movl	%edx,%esi
00000463	jbe	0x0000046a
00000465	movl	%edi,0xf0(%ebp)
00000468	jmp	0x0000048d
0000046a	movl	$0x00000001,%eax
0000046f	movl	0xec(%ebp),%edx
00000472	cmpl	0xdc(%ebp),%edx
00000475	je	0x00000c70
0000047b	shll	$0x08,%edi
0000047e	movzbl	(%edx),%eax
00000481	orl	%edi,%eax
00000483	movl	%eax,0xf0(%ebp)
00000486	incl	%edx
00000487	movl	%edx,0xec(%ebp)
0000048a	shll	$0x08,%esi
0000048d	movl	%ecx,%edx
0000048f	movl	0xc8(%ebp),%ebx
00000492	movl	0x00000300(%edx,%ebx,4),%eax
00000499	movl	%esi,%edi
0000049b	movl	%edi,%esi
0000049d	shrl	$0x0b,%esi
000004a0	imull	%eax,%esi
000004a3	cmpl	%esi,0xf0(%ebp)
000004a6	jae	0x000004ea
000004a8	movl	%edx,%ecx
000004aa	movl	$0x00000800,%edx
000004af	subl	%eax,%edx
000004b1	shrl	$0x05,%edx
000004b4	addl	%eax,%edx
000004b6	movl	%edx,0x00000300(%ecx,%ebx,4)
000004bd	cmpl	$0x06,%ebx
000004c0	setg	%al
000004c3	movzbl	%al,%eax
000004c6	leal	(%eax,%eax,2),%eax
000004c9	movl	%eax,0xc8(%ebp)
000004cc	movl	0x90(%ebp),%eax
000004cf	movl	%eax,0xd4(%ebp)
000004d2	movl	0xac(%ebp),%ebx
000004d5	movl	0xa8(%ebp),%eax
000004d8	movl	%eax,0xac(%ebp)
000004db	movl	0xc4(%ebp),%eax
000004de	movl	%eax,%edx
000004e0	movl	%eax,%edi
000004e2	movl	0xec(%ebp),%ecx
000004e5	jmp	0x00000749
000004ea	movl	%eax,%ecx
000004ec	shrl	$0x05,%ecx
000004ef	subl	%ecx,%eax
000004f1	movl	%eax,0x00000300(%edx,%ebx,4)
000004f8	movl	0xf0(%ebp),%ebx
000004fb	subl	%esi,%ebx
000004fd	subl	%esi,%edi
000004ff	cmpl	$0x00ffffff,%edi
00000505	movl	%edi,%ecx
00000507	movl	%edx,%eax
00000509	jbe	0x0000050f
0000050b	movl	%ebx,%edx
0000050d	jmp	0x00000535
0000050f	movl	%ebx,%edi
00000511	movl	%eax,%ebx
00000513	movl	$0x00000001,%eax
00000518	movl	0xec(%ebp),%esi
0000051b	cmpl	0xdc(%ebp),%esi
0000051e	je	0x00000c70
00000524	shll	$0x08,%edi
00000527	movzbl	(%esi),%edx
0000052a	orl	%edi,%edx
0000052c	incl	%esi
0000052d	movl	%esi,0xec(%ebp)
00000530	shll	$0x08,%ecx
00000533	movl	%ebx,%eax
00000535	movl	0xc8(%ebp),%ebx
00000538	movl	%eax,%edi
0000053a	movl	0x00000330(%edi,%ebx,4),%eax
00000541	movl	%ecx,%esi
00000543	shrl	$0x0b,%esi
00000546	imull	%eax,%esi
00000549	cmpl	%esi,%edx
0000054b	jae	0x000005ed
00000551	movl	$0x00000800,%ecx
00000556	subl	%eax,%ecx
00000558	shrl	$0x05,%ecx
0000055b	addl	%eax,%ecx
0000055d	movl	%ecx,0x00000330(%edi,%ebx,4)
00000564	cmpl	$0x00ffffff,%esi
0000056a	movl	%edi,%eax
0000056c	jbe	0x00000574
0000056e	movl	%edx,%edi
00000570	movl	%eax,%edx
00000572	jmp	0x00000598
00000574	movl	%eax,%ebx
00000576	movl	$0x00000001,%eax
0000057b	movl	0xec(%ebp),%ecx
0000057e	cmpl	0xdc(%ebp),%ecx
00000581	je	0x00000c70
00000587	shll	$0x08,%edx
0000058a	movzbl	(%ecx),%edi
0000058d	orl	%edx,%edi
0000058f	incl	%ecx
00000590	movl	%ecx,0xec(%ebp)
00000593	shll	$0x08,%esi
00000596	movl	%ebx,%edx
00000598	movl	%edi,0xf0(%ebp)
0000059b	movl	0xd8(%ebp),%ebx
0000059e	movl	0xe0(%ebp),%eax
000005a1	leal	0x000000f0(%eax,%ebx),%eax
000005a8	movl	(%edx,%eax,4),%edx
000005ab	movl	%esi,%ecx
000005ad	shrl	$0x0b,%ecx
000005b0	imull	%edx,%ecx
000005b3	movl	%ecx,0xe0(%ebp)
000005b6	cmpl	%ecx,%edi
000005b8	jb	0x00000be6
000005be	movl	%ebx,0xd8(%ebp)
000005c1	movl	%edx,%ecx
000005c3	shrl	$0x05,%ecx
000005c6	subl	%ecx,%edx
000005c8	movl	0xe4(%ebp),%ecx
000005cb	movl	%edx,(%ecx,%eax,4)
000005ce	movl	0xe0(%ebp),%eax
000005d1	subl	%eax,0xf0(%ebp)
000005d4	subl	%eax,%esi
000005d6	movl	0xb0(%ebp),%eax
000005d9	movl	%eax,0xd0(%ebp)
000005dc	movl	0xa8(%ebp),%edx
000005df	movl	0xc4(%ebp),%edi
000005e2	movl	0xec(%ebp),%ecx
000005e5	movl	0xc8(%ebp),%ebx
000005e8	jmp	0x00000730
000005ed	movl	%ecx,0xe0(%ebp)
000005f0	movl	%eax,%ecx
000005f2	shrl	$0x05,%ecx
000005f5	subl	%ecx,%eax
000005f7	movl	%eax,0x00000330(%edi,%ebx,4)
000005fe	movl	%edx,%ebx
00000600	subl	%esi,%ebx
00000602	movl	0xe0(%ebp),%eax
00000605	subl	%esi,%eax
00000607	cmpl	$0x00ffffff,%eax
0000060c	movl	%eax,%ecx
0000060e	movl	%edi,%esi
00000610	jbe	0x00000616
00000612	movl	%ebx,%edx
00000614	jmp	0x0000063c
00000616	movl	%esi,%edx
00000618	movl	$0x00000001,%eax
0000061d	movl	0xec(%ebp),%esi
00000620	cmpl	0xdc(%ebp),%esi
00000623	je	0x00000c70
00000629	shll	$0x08,%ebx
0000062c	movzbl	(%esi),%eax
0000062f	orl	%ebx,%eax
00000631	incl	%esi
00000632	movl	%esi,0xec(%ebp)
00000635	shll	$0x08,%ecx
00000638	movl	%edx,%esi
0000063a	movl	%eax,%edx
0000063c	movl	0xc8(%ebp),%ebx
0000063f	movl	0x00000360(%esi,%ebx,4),%eax
00000646	movl	%ecx,%edi
00000648	movl	%edi,%esi
0000064a	shrl	$0x0b,%esi
0000064d	imull	%eax,%esi
00000650	cmpl	%esi,%edx
00000652	jae	0x0000067e
00000654	movl	%edx,0xf0(%ebp)
00000657	movl	$0x00000800,%edx
0000065c	subl	%eax,%edx
0000065e	shrl	$0x05,%edx
00000661	addl	%eax,%edx
00000663	movl	0xe4(%ebp),%eax
00000666	movl	%edx,0x00000360(%eax,%ebx,4)
0000066d	movl	0xb0(%ebp),%eax
00000670	movl	%eax,0xd0(%ebp)
00000673	movl	0xc4(%ebp),%edx
00000676	movl	0xa8(%ebp),%edi
00000679	jmp	0x0000072d
0000067e	movl	%eax,%ecx
00000680	shrl	$0x05,%ecx
00000683	subl	%ecx,%eax
00000685	movl	0xe4(%ebp),%ecx
00000688	movl	%eax,0x00000360(%ecx,%ebx,4)
0000068f	subl	%esi,%edx
00000691	subl	%esi,%edi
00000693	cmpl	$0x00ffffff,%edi
00000699	movl	%edi,%esi
0000069b	movl	%ecx,%eax
0000069d	jbe	0x000006a5
0000069f	movl	%eax,%ecx
000006a1	movl	%edx,%eax
000006a3	jmp	0x000006cb
000006a5	movl	%edx,%edi
000006a7	movl	%eax,%edx
000006a9	movl	$0x00000001,%eax
000006ae	movl	0xec(%ebp),%ecx
000006b1	cmpl	0xdc(%ebp),%ecx
000006b4	je	0x00000c70
000006ba	shll	$0x08,%edi
000006bd	movzbl	(%ecx),%eax
000006c0	orl	%edi,%eax
000006c2	incl	%ecx
000006c3	movl	%ecx,0xec(%ebp)
000006c6	shll	$0x08,%esi
000006c9	movl	%edx,%ecx
000006cb	movl	0x00000390(%ecx,%ebx,4),%ecx
000006d2	movl	%esi,%edi
000006d4	movl	%edi,%esi
000006d6	shrl	$0x0b,%esi
000006d9	imull	%ecx,%esi
000006dc	cmpl	%esi,%eax
000006de	jae	0x000006fd
000006e0	movl	$0x00000800,%edx
000006e5	subl	%ecx,%edx
000006e7	shrl	$0x05,%edx
000006ea	addl	%ecx,%edx
000006ec	movl	%eax,0xf0(%ebp)
000006ef	movl	0xb0(%ebp),%eax
000006f2	movl	%eax,0xd0(%ebp)
000006f5	movl	0xac(%ebp),%edi
000006f8	movl	0xc4(%ebp),%ecx
000006fb	jmp	0x0000071b
000006fd	subl	%esi,%eax
000006ff	subl	%esi,%edi
00000701	movl	%ecx,%edx
00000703	shrl	$0x05,%edx
00000706	subl	%edx,%ecx
00000708	movl	%ecx,%edx
0000070a	movl	%eax,0xf0(%ebp)
0000070d	movl	%edi,%esi
0000070f	movl	0xac(%ebp),%eax
00000712	movl	%eax,0xd0(%ebp)
00000715	movl	0xc4(%ebp),%ecx
00000718	movl	0xb0(%ebp),%edi
0000071b	movl	0xe4(%ebp),%eax
0000071e	movl	%edx,0x00000390(%eax,%ebx,4)
00000725	movl	0xa8(%ebp),%eax
00000728	movl	%eax,0xac(%ebp)
0000072b	movl	%ecx,%edx
0000072d	movl	0xec(%ebp),%ecx
00000730	cmpl	$0x06,%ebx
00000733	setg	%al
00000736	movzbl	%al,%eax
00000739	leal	0x08(%eax,%eax,2),%eax
0000073d	movl	%eax,0xc8(%ebp)
00000740	movl	0x98(%ebp),%eax
00000743	movl	%eax,0xd4(%ebp)
00000746	movl	0xd0(%ebp),%ebx
00000749	movl	%edx,0x9c(%ebp)
0000074c	cmpl	$0x00ffffff,%esi
00000752	jbe	0x00000762
00000754	movl	%ebx,0xd0(%ebp)
00000757	movl	%edi,0xb0(%ebp)
0000075a	movl	%ecx,0xec(%ebp)
0000075d	movl	0xf0(%ebp),%ebx
00000760	jmp	0x00000788
00000762	movl	%ebx,0xd0(%ebp)
00000765	movl	%edi,0xb0(%ebp)
00000768	movl	$0x00000001,%eax
0000076d	cmpl	0xdc(%ebp),%ecx
00000770	je	0x00000c70
00000776	movl	0xf0(%ebp),%eax
00000779	shll	$0x08,%eax
0000077c	movzbl	(%ecx),%ebx
0000077f	orl	%eax,%ebx
00000781	incl	%ecx
00000782	movl	%ecx,0xec(%ebp)
00000785	shll	$0x08,%esi
00000788	movl	%esi,%edi
0000078a	shrl	$0x0b,%edi
0000078d	movl	0xd4(%ebp),%edx
00000790	movl	(%edx),%eax
00000792	imull	%eax,%edi
00000795	cmpl	%edi,%ebx
00000797	jae	0x000007c3
00000799	movl	%edi,0xe0(%ebp)
0000079c	movl	$0x00000800,%ecx
000007a1	subl	%eax,%ecx
000007a3	shrl	$0x05,%ecx
000007a6	addl	%eax,%ecx
000007a8	movl	%ecx,(%edx)
000007aa	movl	0xd8(%ebp),%eax
000007ad	shll	$0x05,%eax
000007b0	leal	0x08(%edx,%eax),%edx
000007b4	movl	%edx,0xd4(%ebp)
000007b7	xorl	%ecx,%ecx
000007b9	movl	$0x00000003,%edi
000007be	jmp	0x00000863
000007c3	movl	%eax,%ecx
000007c5	shrl	$0x05,%ecx
000007c8	subl	%ecx,%eax
000007ca	movl	%eax,(%edx)
000007cc	subl	%edi,%ebx
000007ce	subl	%edi,%esi
000007d0	cmpl	$0x00ffffff,%esi
000007d6	jbe	0x000007dc
000007d8	movl	%ebx,%eax
000007da	jmp	0x000007fc
000007dc	movl	$0x00000001,%eax
000007e1	movl	0xec(%ebp),%ecx
000007e4	cmpl	0xdc(%ebp),%ecx
000007e7	je	0x00000c70
000007ed	shll	$0x08,%ebx
000007f0	movzbl	(%ecx),%eax
000007f3	orl	%ebx,%eax
000007f5	incl	%ecx
000007f6	movl	%ecx,0xec(%ebp)
000007f9	shll	$0x08,%esi
000007fc	movl	%esi,%edi
000007fe	shrl	$0x0b,%edi
00000801	movl	0x04(%edx),%ecx
00000804	imull	%ecx,%edi
00000807	cmpl	%edi,%eax
00000809	movl	%edx,%ebx
0000080b	jae	0x0000083d
0000080d	movl	%edi,0xe0(%ebp)
00000810	movl	$0x00000800,%edx
00000815	subl	%ecx,%edx
00000817	shrl	$0x05,%edx
0000081a	addl	%ecx,%edx
0000081c	movl	%edx,0x04(%ebx)
0000081f	movl	0xd8(%ebp),%ecx
00000822	shll	$0x05,%ecx
00000825	leal	0x00000208(%ecx,%ebx),%ebx
0000082c	movl	%ebx,0xd4(%ebp)
0000082f	movl	$0x00000008,%ecx
00000834	movl	$0x00000003,%edi
00000839	movl	%eax,%ebx
0000083b	jmp	0x00000863
0000083d	movl	%ecx,%edx
0000083f	shrl	$0x05,%edx
00000842	subl	%edx,%ecx
00000844	movl	%ecx,0x04(%ebx)
00000847	subl	%edi,%eax
00000849	subl	%edi,%esi
0000084b	addl	$0x00000408,%ebx
00000851	movl	%ebx,0xd4(%ebp)
00000854	movl	$0x00000010,%ecx
00000859	movl	$0x00000008,%edi
0000085e	movl	%eax,%ebx
00000860	movl	%esi,0xe0(%ebp)
00000863	movl	%edi,0xd8(%ebp)
00000866	movl	%ecx,0xa8(%ebp)
00000869	movl	$0x00000001,%edx
0000086e	movl	%edi,%eax
00000870	movl	%eax,0xe8(%ebp)
00000873	movl	%edx,%edi
00000875	cmpl	$0x00ffffff,0xe0(%ebp)
0000087c	jbe	0x00000886
0000087e	movl	0xe0(%ebp),%esi
00000881	movl	0xec(%ebp),%edx
00000884	jmp	0x000008a8
00000886	movl	$0x00000001,%eax
0000088b	movl	0xec(%ebp),%edx
0000088e	cmpl	0xdc(%ebp),%edx
00000891	je	0x00000c70
00000897	shll	$0x08,%ebx
0000089a	movzbl	(%edx),%eax
0000089d	orl	%ebx,%eax
0000089f	movl	%eax,%ebx
000008a1	incl	%edx
000008a2	movl	0xe0(%ebp),%esi
000008a5	shll	$0x08,%esi
000008a8	movl	%ebx,0xf0(%ebp)
000008ab	movl	%edx,0xec(%ebp)
000008ae	movl	%edi,%ecx
000008b0	movl	0xd4(%ebp),%eax
000008b3	movl	(%eax,%ecx,4),%edx
000008b6	movl	%esi,%edi
000008b8	shrl	$0x0b,%edi
000008bb	imull	%edx,%edi
000008be	cmpl	%edi,%ebx
000008c0	jae	0x000008db
000008c2	movl	$0x00000800,%ebx
000008c7	subl	%edx,%ebx
000008c9	shrl	$0x05,%ebx
000008cc	addl	%edx,%ebx
000008ce	movl	%ebx,(%eax,%ecx,4)
000008d1	addl	%ecx,%ecx
000008d3	movl	0xf0(%ebp),%ebx
000008d6	movl	%edi,0xe0(%ebp)
000008d9	jmp	0x000008f5
000008db	movl	%edx,%ebx
000008dd	shrl	$0x05,%ebx
000008e0	subl	%ebx,%edx
000008e2	movl	%edx,(%eax,%ecx,4)
000008e5	movl	0xf0(%ebp),%eax
000008e8	subl	%edi,%eax
000008ea	subl	%edi,%esi
000008ec	movl	%esi,0xe0(%ebp)
000008ef	leal	0x01(%ecx,%ecx),%ecx
000008f3	movl	%eax,%ebx
000008f5	movl	%ecx,%edx
000008f7	movl	0xe8(%ebp),%eax
000008fa	decl	%eax
000008fb	movl	0xd8(%ebp),%ecx
000008fe	jne	0x00000870
00000904	movl	$0x00000001,%esi
00000909	shll	%cl,%esi
0000090b	movl	0xc8(%ebp),%ecx
0000090e	cmpl	$0x03,%ecx
00000911	jbe	0x00000924
00000913	movl	%ebx,0xf0(%ebp)
00000916	movl	%esi,0xa0(%ebp)
00000919	movl	%edx,0xa4(%ebp)
0000091c	movl	0xb0(%ebp),%ecx
0000091f	jmp	0x00000b65
00000924	movl	%edx,%eax
00000926	movl	%edx,0xa4(%ebp)
00000929	subl	%esi,%eax
0000092b	movl	%esi,0xa0(%ebp)
0000092e	addl	0xa8(%ebp),%eax
00000931	movl	%eax,%edx
00000933	shll	$0x06,%edx
00000936	addl	$0x000001b0,%edx
0000093c	cmpl	$0x03,%eax
0000093f	movl	$0x00000270,%eax
00000944	cmovgl	%eax,%edx
00000947	movl	%edx,0xd8(%ebp)
0000094a	addl	$0x07,%ecx
0000094d	movl	%ecx,0xc8(%ebp)
00000950	movl	$0x00000001,%edi
00000955	movl	$0xfffffffa,%eax
0000095a	movl	0xe0(%ebp),%ecx
0000095d	movl	0xec(%ebp),%edx
00000960	movl	%eax,0xe8(%ebp)
00000963	cmpl	$0x00ffffff,%ecx
00000969	jbe	0x00000972
0000096b	movl	%edx,0xec(%ebp)
0000096e	movl	%ebx,%eax
00000970	jmp	0x0000098f
00000972	movl	$0x00000001,%eax
00000977	cmpl	0xdc(%ebp),%edx
0000097a	je	0x00000c70
00000980	shll	$0x08,%ebx
00000983	movzbl	(%edx),%eax
00000986	orl	%ebx,%eax
00000988	incl	%edx
00000989	movl	%edx,0xec(%ebp)
0000098c	shll	$0x08,%ecx
0000098f	movl	%ecx,0xe0(%ebp)
00000992	movl	0xd8(%ebp),%edx
00000995	leal	(%edi,%edx),%edx
00000998	movl	%edx,0xf0(%ebp)
0000099b	movl	0xe4(%ebp),%esi
0000099e	movl	(%esi,%edx,4),%ebx
000009a1	movl	%ecx,%esi
000009a3	shrl	$0x0b,%esi
000009a6	imull	%ebx,%esi
000009a9	cmpl	%esi,%eax
000009ab	jae	0x000009ca
000009ad	movl	$0x00000800,%ecx
000009b2	subl	%ebx,%ecx
000009b4	shrl	$0x05,%ecx
000009b7	addl	%ebx,%ecx
000009b9	movl	0xf0(%ebp),%edx
000009bc	movl	0xe4(%ebp),%ebx
000009bf	movl	%ecx,(%ebx,%edx,4)
000009c2	addl	%edi,%edi
000009c4	movl	%eax,%ebx
000009c6	movl	%esi,%ecx
000009c8	jmp	0x000009e7
000009ca	movl	%ebx,%ecx
000009cc	shrl	$0x05,%ecx
000009cf	subl	%ecx,%ebx
000009d1	movl	0xf0(%ebp),%ecx
000009d4	movl	0xe4(%ebp),%edx
000009d7	movl	%ebx,(%edx,%ecx,4)
000009da	subl	%esi,%eax
000009dc	movl	0xe0(%ebp),%ecx
000009df	subl	%esi,%ecx
000009e1	leal	0x01(%edi,%edi),%edi
000009e5	movl	%eax,%ebx
000009e7	movl	0xe8(%ebp),%eax
000009ea	incl	%eax
000009eb	movl	0xec(%ebp),%edx
000009ee	jne	0x00000960
000009f4	movl	%ecx,%edx
000009f6	leal	0xc0(%edi),%esi
000009f9	cmpl	$0x04,%esi
000009fc	jge	0x00000a0b
000009fe	movl	%ebx,0xf0(%ebp)
00000a01	movl	%esi,0xc4(%ebp)
00000a04	movl	%edx,%esi
00000a06	jmp	0x00000b58
00000a0b	movl	%edi,%ecx
00000a0d	movl	%esi,%edi
00000a0f	andl	$0x01,%edi
00000a12	orl	$0x02,%edi
00000a15	movl	%esi,%eax
00000a17	sarl	%eax
00000a19	cmpl	$0x0d,%esi
00000a1c	jg	0x00000a3c
00000a1e	movl	%ebx,0xf0(%ebp)
00000a21	decl	%eax
00000a22	movl	$0x000002ef,%esi
00000a27	subl	%ecx,%esi
00000a29	movb	%al,%cl
00000a2b	shll	%cl,%edi
00000a2d	movl	%edi,0xc4(%ebp)
00000a30	addl	%edi,%esi
00000a32	movl	0xe4(%ebp),%ecx
00000a35	leal	(%ecx,%esi,4),%ecx
00000a38	movl	%edx,%esi
00000a3a	jmp	0x00000a9c
00000a3c	movl	$0x00000005,%ecx
00000a41	subl	%eax,%ecx
00000a43	movl	%edx,%esi
00000a45	movl	0xec(%ebp),%edx
00000a48	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000a50	cmpl	$0x00ffffff,%esi
00000a56	jbe	0x00000a5c
00000a58	movl	%ebx,%eax
00000a5a	jmp	0x00000a76
00000a5c	movl	$0x00000001,%eax
00000a61	cmpl	0xdc(%ebp),%edx
00000a64	je	0x00000c70
00000a6a	shll	$0x08,%ebx
00000a6d	movzbl	(%edx),%eax
00000a70	orl	%ebx,%eax
00000a72	incl	%edx
00000a73	shll	$0x08,%esi
00000a76	addl	%edi,%edi
00000a78	shrl	%esi
00000a7a	cmpl	%esi,%eax
00000a7c	jb	0x00000a83
00000a7e	subl	%esi,%eax
00000a80	orl	$0x01,%edi
00000a83	movl	%eax,%ebx
00000a85	incl	%ecx
00000a86	jne	0x00000a50
00000a88	movl	%ebx,0xf0(%ebp)
00000a8b	movl	%edx,0xec(%ebp)
00000a8e	shll	$0x04,%edi
00000a91	movl	%edi,0xc4(%ebp)
00000a94	movl	$0x00000004,%eax
00000a99	movl	0x94(%ebp),%ecx
00000a9c	movl	%ecx,0xd8(%ebp)
00000a9f	movl	$0x00000001,%edx
00000aa4	movl	%edx,0xe8(%ebp)
00000aa7	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000ab0	movl	%edx,0xe0(%ebp)
00000ab3	movl	%eax,0xd4(%ebp)
00000ab6	cmpl	$0x00ffffff,%esi
00000abc	movl	%ecx,%edi
00000abe	jbe	0x00000acb
00000ac0	movl	0xf0(%ebp),%eax
00000ac3	movl	0xec(%ebp),%ecx
00000ac6	movl	0xe8(%ebp),%ebx
00000ac9	jmp	0x00000aee
00000acb	movl	$0x00000001,%eax
00000ad0	movl	0xec(%ebp),%ecx
00000ad3	cmpl	0xdc(%ebp),%ecx
00000ad6	movl	0xe8(%ebp),%ebx
00000ad9	je	0x00000c70
00000adf	movl	0xf0(%ebp),%edx
00000ae2	shll	$0x08,%edx
00000ae5	movzbl	(%ecx),%eax
00000ae8	orl	%edx,%eax
00000aea	incl	%ecx
00000aeb	shll	$0x08,%esi
00000aee	movl	%ecx,0xec(%ebp)
00000af1	movl	%ebx,%ecx
00000af3	movl	(%edi,%ecx,4),%edx
00000af6	movl	%esi,%edi
00000af8	movl	%edi,%esi
00000afa	shrl	$0x0b,%esi
00000afd	imull	%edx,%esi
00000b00	cmpl	%esi,%eax
00000b02	jae	0x00000b25
00000b04	movl	$0x00000800,%ebx
00000b09	subl	%edx,%ebx
00000b0b	shrl	$0x05,%ebx
00000b0e	addl	%edx,%ebx
00000b10	movl	0xd8(%ebp),%edx
00000b13	movl	%ebx,(%edx,%ecx,4)
00000b16	addl	%ecx,%ecx
00000b18	movl	%ecx,0xe8(%ebp)
00000b1b	movl	%eax,0xf0(%ebp)
00000b1e	movl	%edx,%edi
00000b20	movl	0xe0(%ebp),%edx
00000b23	jmp	0x00000b4a
00000b25	movl	%edx,%ebx
00000b27	shrl	$0x05,%ebx
00000b2a	subl	%ebx,%edx
00000b2c	movl	0xd8(%ebp),%ebx
00000b2f	movl	%edx,(%ebx,%ecx,4)
00000b32	movl	0xe0(%ebp),%edx
00000b35	orl	%edx,0xc4(%ebp)
00000b38	subl	%esi,%eax
00000b3a	subl	%esi,%edi
00000b3c	leal	0x01(%ecx,%ecx),%ecx
00000b40	movl	%ecx,0xe8(%ebp)
00000b43	movl	%eax,0xf0(%ebp)
00000b46	movl	%edi,%esi
00000b48	movl	%ebx,%edi
00000b4a	movl	%edi,%ecx
00000b4c	addl	%edx,%edx
00000b4e	movl	0xd4(%ebp),%eax
00000b51	decl	%eax
00000b52	jne	0x00000ab0
00000b58	movl	%esi,0xe0(%ebp)
00000b5b	movl	0xc4(%ebp),%ecx
00000b5e	incl	%ecx
00000b5f	je	0x00000c42
00000b65	movl	%ecx,0xc4(%ebp)
00000b68	movl	$0x00000001,%eax
00000b6d	cmpl	0xcc(%ebp),%ecx
00000b70	ja	0x00000c70
00000b76	movl	0xa0(%ebp),%edi
00000b79	addl	$0xfe,%edi
00000b7c	subl	0xa8(%ebp),%edi
00000b7f	subl	0xa4(%ebp),%edi
00000b82	movl	0xcc(%ebp),%edx
00000b85	leal	0x01(%edx),%ebx
00000b88	movl	0x1c(%ebp),%ecx
00000b8b	cmpl	%ecx,%ebx
00000b8d	movl	%ebx,%eax
00000b8f	cmovbl	%ecx,%eax
00000b92	movl	%edx,%esi
00000b94	subl	%eax,%esi
00000b96	cmpl	%edi,%esi
00000b98	cmovbel	%edi,%esi
00000b9b	movl	0x18(%ebp),%eax
00000b9e	leal	(%eax,%edx),%eax
00000ba1	cmpl	%ebx,%ecx
00000ba3	cmoval	%ecx,%ebx
00000ba6	movl	%edx,%ecx
00000ba8	subl	%ebx,%ecx
00000baa	subl	%esi,%edx
00000bac	movl	%edx,0xcc(%ebp)
00000baf	cmpl	%edi,%ecx
00000bb1	cmovbel	%edi,%ecx
00000bb4	negl	%ecx
00000bb6	movl	0xc4(%ebp),%esi
00000bb9	negl	%esi
00000bbb	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000bc0	movb	(%eax,%esi),%dl
00000bc3	movb	%dl,(%eax)
00000bc5	incl	%eax
00000bc6	decl	%ecx
00000bc7	jne	0x00000bc0
00000bc9	movb	%dl,0xe8(%ebp)
00000bcc	movl	0xd0(%ebp),%eax
00000bcf	movl	%eax,0xb0(%ebp)
00000bd2	movl	0x9c(%ebp),%eax
00000bd5	movl	%eax,0xa8(%ebp)
00000bd8	movl	0xcc(%ebp),%eax
00000bdb	movl	0xe0(%ebp),%esi
00000bde	movl	0xec(%ebp),%edi
00000be1	movl	0xc8(%ebp),%ecx
00000be4	jmp	0x00000c2e
00000be6	movl	$0x00000800,%esi
00000beb	subl	%edx,%esi
00000bed	shrl	$0x05,%esi
00000bf0	addl	%edx,%esi
00000bf2	movl	0xe4(%ebp),%ecx
00000bf5	movl	%esi,(%ecx,%eax,4)
00000bf8	movl	$0x00000001,%eax
00000bfd	cmpl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xcc(%ebp)
00000c01	movl	0xec(%ebp),%edi
00000c04	je	0x00000c70
00000c06	movl	0xcc(%ebp),%edx
00000c09	movl	%edx,%eax
00000c0b	subl	0xc4(%ebp),%eax
00000c0e	movl	0x18(%ebp),%ecx
00000c11	movb	(%ecx,%eax),%al
00000c14	movb	%al,0xe8(%ebp)
00000c17	movb	%al,(%ecx,%edx)
00000c1a	incl	%edx
00000c1b	cmpl	$0x06,0xc8(%ebp)
00000c1f	setg	%al
00000c22	movzbl	%al,%eax
00000c25	leal	0x09(%eax,%eax),%ecx
00000c29	movl	%edx,%eax
00000c2b	movl	0xe0(%ebp),%esi
00000c2e	movl	%ecx,%ebx
00000c30	cmpl	0x1c(%ebp),%eax
00000c33	jb	0x000001b0
00000c39	movl	%edi,0xec(%ebp)
00000c3c	movl	%esi,0xe0(%ebp)
00000c3f	movl	%eax,0xcc(%ebp)
00000c42	cmpl	$0x00ffffff,0xe0(%ebp)
00000c49	jbe	0x00000c50
00000c4b	movl	0xec(%ebp),%ecx
00000c4e	jmp	0x00000c5e
00000c50	movl	$0x00000001,%eax
00000c55	movl	0xec(%ebp),%ecx
00000c58	cmpl	0xdc(%ebp),%ecx
00000c5b	je	0x00000c70
00000c5d	incl	%ecx
00000c5e	subl	0x0c(%ebp),%ecx
00000c61	movl	0x14(%ebp),%eax
00000c64	movl	%ecx,(%eax)
00000c66	movl	0x20(%ebp),%eax
00000c69	movl	0xcc(%ebp),%ecx
00000c6c	movl	%ecx,(%eax)
00000c6e	xorl	%eax,%eax
00000c70	addl	$0x7c,%esp
00000c73	popl	%esi
00000c74	popl	%edi
00000c75	popl	%ebx
00000c76	popl	%ebp
00000c77	ret
00000c78	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::IsCompressed(unsigned char*):
00000c80	movl	0x08(%esp),%ecx
00000c84	testl	%ecx,%ecx
00000c86	je	0x00000c92
00000c88	movb	$0x01,%al
00000c8a	cmpl	$0x414d5a4c,(%ecx)
00000c90	je	0x00000c94
00000c92	xorb	%al,%al
00000c94	movzbl	%al,%eax
00000c97	ret
00000c98	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::GetActualSize(unsigned char*):
00000ca0	xorl	%eax,%eax
00000ca2	movl	0x08(%esp),%ecx
00000ca6	testl	%ecx,%ecx
00000ca8	je	0x00000cb7
00000caa	xorl	%eax,%eax
00000cac	cmpl	$0x414d5a4c,(%ecx)
00000cb2	jne	0x00000cb7
00000cb4	movl	0x04(%ecx),%eax
00000cb7	ret
00000cb8	nopl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
CLZMA::Uncompress(unsigned char*, unsigned char*):
00000cc0	pushl	%ebp
00000cc1	movl	%esp,%ebp
00000cc3	pushl	%ebx
00000cc4	pushl	%edi
00000cc5	pushl	%esi
00000cc6	subl	$0x3c,%esp
00000cc9	xorl	%eax,%eax
00000ccb	movl	0x0c(%ebp),%esi
00000cce	testl	%esi,%esi
00000cd0	je	0x00000da9
00000cd6	xorl	%eax,%eax
00000cd8	cmpl	$0x414d5a4c,(%esi)
00000cde	jne	0x00000da9
00000ce4	movl	0x04(%esi),%edi
00000ce7	xorl	%eax,%eax
00000ce9	testl	%edi,%edi
00000ceb	je	0x00000da9
00000cf1	movb	0x0c(%esi),%al
00000cf4	cmpb	$0xe0,%al
00000cf6	ja	0x00000d40
00000cf8	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe8(%ebp)
00000cff	cmpb	$0x2d,%al
00000d01	jb	0x00000d1a
00000d03	xorl	%ecx,%ecx
00000d05	nopl	%cs:LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000d10	incl	%ecx
00000d11	addb	$0xd3,%al
00000d13	cmpb	$0x2c,%al
00000d15	ja	0x00000d10
00000d17	movl	%ecx,0xe8(%ebp)
00000d1a	movl	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int),0xe4(%ebp)
00000d21	xorl	%edx,%edx
00000d23	cmpb	$0x09,%al
00000d25	jb	0x00000d3a
00000d27	nopw	LzmaDecodeProperties(_CLzmaProperties*, unsigned char const*, int)(%eax,%eax)
00000d30	incl	%edx
00000d31	addb	$0xf7,%al
00000d33	cmpb	$0x08,%al
00000d35	ja	0x00000d30
00000d37	movl	%edx,0xe4(%ebp)
00000d3a	movzbl	%al,%ecx
00000d3d	movl	%ecx,0xe0(%ebp)
00000d40	movl	0x10(%ebp),%ebx
00000d43	addl	%edx,%ecx
00000d45	movl	$0x00000c00,%eax
00000d4a	shll	%cl,%eax
00000d4c	addl	$0x00001cd8,%eax
00000d51	movl	%eax,(%esp)
00000d54	calll	_malloc
00000d59	movl	%eax,0xec(%ebp)
00000d5c	movl	0x08(%esi),%eax
00000d5f	leal	0xd8(%ebp),%ecx
00000d62	movl	%ecx,0x18(%esp)
00000d66	movl	%edi,0x14(%esp)
00000d6a	movl	%ebx,0x10(%esp)
00000d6e	leal	0xdc(%ebp),%ecx
00000d71	movl	%ecx,0x0c(%esp)
00000d75	movl	%eax,0x08(%esp)
00000d79	addl	$0x11,%esi
00000d7c	movl	%esi,0x04(%esp)
00000d80	leal	0xe0(%ebp),%eax
00000d83	movl	%eax,(%esp)
00000d86	calll	LzmaDecode(_CLzmaDecoderState*, unsigned char const*, unsigned int, unsigned int*, unsigned char*, unsigned int, unsigned int*)
00000d8b	movl	%eax,%esi
00000d8d	movl	0xec(%ebp),%eax
00000d90	movl	%eax,(%esp)
00000d93	calll	_free
00000d98	xorl	%eax,%eax
00000d9a	testl	%esi,%esi
00000d9c	jne	0x00000da9
00000d9e	xorl	%eax,%eax
00000da0	movl	0xd8(%ebp),%ecx
00000da3	cmpl	%edi,%ecx
00000da5	jne	0x00000da9
00000da7	movl	%ecx,%eax
00000da9	addl	$0x3c,%esp
00000dac	popl	%esi
00000dad	popl	%edi
00000dae	popl	%ebx
00000daf	popl	%ebp
00000db0	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(lzss.o):
(__TEXT,__text) section
CLZSS::IsCompressed(unsigned char const*):
00000000	movl	0x04(%esp),%ecx
00000004	testl	%ecx,%ecx
00000006	je	0x00000012
00000008	movb	$0x01,%al
0000000a	cmpl	$0x53535a4c,(%ecx)
00000010	je	0x00000014
00000012	xorb	%al,%al
00000014	movzbl	%al,%eax
00000017	ret
00000018	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::GetActualSize(unsigned char const*):
00000020	xorl	%eax,%eax
00000022	movl	0x04(%esp),%ecx
00000026	testl	%ecx,%ecx
00000028	je	0x00000037
0000002a	xorl	%eax,%eax
0000002c	cmpl	$0x53535a4c,(%ecx)
00000032	jne	0x00000037
00000034	movl	0x04(%ecx),%eax
00000037	ret
00000038	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::BuildHash(unsigned char const*):
00000040	pushl	%ebp
00000041	pushl	%ebx
00000042	pushl	%edi
00000043	pushl	%esi
00000044	pushl	%eax
00000045	movl	0x18(%esp),%edi
00000049	movl	0x04(%edi),%ecx
0000004c	movl	0x08(%edi),%edx
0000004f	decl	%edx
00000050	andl	0x1c(%esp),%edx
00000054	shll	$0x04,%edx
00000057	movl	(%ecx,%edx),%ebp
0000005a	leal	(%ecx,%edx),%eax
0000005d	testl	%ebp,%ebp
0000005f	jne	0x00000067
00000061	leal	0x04(%ecx,%edx),%ebx
00000065	jmp	0x000000a1
00000067	movl	%eax,(%esp)
0000006a	leal	0x04(%ecx,%edx),%ebx
0000006e	movl	0x04(%ecx,%edx),%esi
00000072	movl	%edi,%eax
00000074	movl	(%eax),%edi
00000076	movzbl	CLZSS::IsCompressed(unsigned char const*)(%ebp),%ebp
0000007a	testl	%esi,%esi
0000007c	je	0x0000008d
0000007e	movl	%esi,0x04(%edi,%ebp,8)
00000082	movl	(%ebx),%esi
00000084	movl	CLZSS::IsCompressed(unsigned char const*),0x08(%esi)
0000008b	jmp	0x0000009c
0000008d	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%edi,%ebp,8)
00000095	movl	CLZSS::IsCompressed(unsigned char const*),(%edi,%ebp,8)
0000009c	movl	%eax,%edi
0000009e	movl	(%esp),%eax
000000a1	movl	(%edi),%esi
000000a3	movl	0x1c(%esp),%edi
000000a7	movzbl	(%edi),%ebp
000000aa	movl	%edi,(%eax)
000000ac	movl	CLZSS::IsCompressed(unsigned char const*),(%ebx)
000000b2	movl	(%esi,%ebp,8),%edi
000000b5	movl	%edi,0x08(%ecx,%edx)
000000b9	movl	(%esi,%ebp,8),%ecx
000000bc	testl	%ecx,%ecx
000000be	je	0x000000c5
000000c0	movl	%eax,0x04(%ecx)
000000c3	jmp	0x000000c9
000000c5	movl	%eax,0x04(%esi,%ebp,8)
000000c9	movl	%eax,(%esi,%ebp,8)
000000cc	addl	$0x04,%esp
000000cf	popl	%esi
000000d0	popl	%edi
000000d1	popl	%ebx
000000d2	popl	%ebp
000000d3	ret
000000d4	nopw	%cs:CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%ebx
000000e4	pushl	%edi
000000e5	pushl	%esi
000000e6	subl	$0x4c,%esp
000000e9	calll	0x000000ee
000000ee	popl	%edi
000000ef	movl	0x6a23-0xee(%edi),%eax
000000f5	movl	%eax,0xb8(%ebp)
000000f8	movl	(%eax),%eax
000000fa	movl	%eax,0xf0(%ebp)
000000fd	xorl	%esi,%esi
000000ff	cmpl	$0x11,0x10(%ebp)
00000103	jb	0x00000454
00000109	movl	0x6a27-0xee(%edi),%esi
0000010f	movl	0x0000100c(%esi),%eax
00000115	movl	%eax,0xb0(%ebp)
00000118	testl	%eax,%eax
0000011a	je	0x00000186
0000011c	movl	%esi,%ebx
0000011e	movl	0x000019b8(%ebx),%esi
00000124	calll	_ThreadGetCurrentId
00000129	cmpl	%eax,%esi
0000012b	movl	%ebx,%esi
0000012d	jne	0x00000186
0000012f	movl	0x00001014(%esi),%eax
00000135	leal	0x61f9-0xee(%edi),%ecx
0000013b	cmpl	%ecx,(%eax)
0000013d	je	0x00000171
0000013f	subl	CLZSS::GetActualSize(unsigned char const*),%esp
00000142	leal	0x6210-0xee(%edi),%edx
00000148	movl	%edx,0x0c(%esp)
0000014c	movl	%ecx,0x04(%esp)
00000150	movl	%eax,(%esp)
00000153	movl	CLZSS::IsCompressed(unsigned char const*),0x10(%esp)
0000015b	movl	$0x00000001,0x08(%esp)
00000163	calll	CVProfNode::GetSubNode(char const*, int, char const*, int)
00000168	addl	CLZSS::GetActualSize(unsigned char const*),%esp
0000016b	movl	%eax,0x00001014(%esi)
00000171	subl	$0x10,%esp
00000174	movl	%eax,(%esp)
00000177	calll	CVProfNode::EnterScope()
0000017c	addl	$0x10,%esp
0000017f	movb	CLZSS::IsCompressed(unsigned char const*),0x00001010(%esi)
00000186	movl	%esi,0xb4(%ebp)
00000189	movl	0x14(%ebp),%esi
0000018c	movl	0x0c(%ebp),%ebx
0000018f	movl	0x08(%ebp),%edi
00000192	leal	0xfffff800(%esp),%eax
00000199	movl	%eax,%esp
0000019b	movl	%eax,(%edi)
0000019d	subl	$0x10,%esp
000001a0	movl	%eax,(%esp)
000001a3	movl	$0x00000800,0x08(%esp)
000001ab	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%esp)
000001b3	calll	_memset
000001b8	addl	$0x10,%esp
000001bb	movl	0x08(%edi),%eax
000001be	shll	$0x04,%eax
000001c1	movl	%esp,%ecx
000001c3	subl	%eax,%ecx
000001c5	movl	%ecx,%esp
000001c7	movl	%ecx,0x04(%edi)
000001ca	movl	%ebx,%edi
000001cc	subl	$0x10,%esp
000001cf	movl	%eax,0x08(%esp)
000001d3	movl	%ecx,(%esp)
000001d6	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%esp)
000001de	calll	_memset
000001e3	addl	$0x10,%esp
000001e6	movl	$0x53535a4c,(%esi)
000001ec	movl	0x10(%ebp),%eax
000001ef	movl	%eax,0x04(%esi)
000001f2	leal	0xf0(%eax,%esi),%ecx
000001f6	movl	%ecx,0xbc(%ebp)
000001f9	leal	0x08(%esi),%ebx
000001fc	movl	CLZSS::IsCompressed(unsigned char const*),0xd4(%ebp)
00000203	movl	CLZSS::IsCompressed(unsigned char const*),0xd0(%ebp)
0000020a	xorl	%edx,%edx
0000020c	jmp	0x00000241
0000020e	nop
00000210	movl	%edx,0x04(%edi,%esi,8)
00000214	movl	%edx,(%edi,%esi,8)
00000217	movl	CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)(%ebp),%ecx
0000021a	decl	%ecx
0000021b	movl	0xdc(%ebp),%edi
0000021e	movl	0x08(%ebp),%edx
00000221	jne	0x00000320
00000227	movl	0xcc(%ebp),%eax
0000022a	subl	0xe8(%ebp),%eax
0000022d	xorl	%esi,%esi
0000022f	movl	0xc4(%ebp),%ebx
00000232	cmpl	0xbc(%ebp),%ebx
00000235	movl	0xc0(%ebp),%edi
00000238	movl	0xc8(%ebp),%edx
0000023b	jae	0x000003f3
00000241	testl	%eax,%eax
00000243	movl	%eax,%ecx
00000245	jle	0x000003b3
0000024b	testl	%edx,%edx
0000024d	movl	%edx,%eax
0000024f	je	0x00000256
00000251	movl	%ebx,0xec(%ebp)
00000254	jmp	0x00000262
00000256	movb	CLZSS::IsCompressed(unsigned char const*),(%ebx)
00000259	leal	0x01(%ebx),%edx
0000025c	movl	%edx,0xec(%ebp)
0000025f	movl	%ebx,0xd0(%ebp)
00000262	movl	%ecx,%edx
00000264	movl	%ecx,0xcc(%ebp)
00000267	notl	%edx
00000269	cmpl	$0xef,%edx
0000026c	movl	$0xffffffef,%ecx
00000271	cmovlel	%ecx,%edx
00000274	notl	%edx
00000276	movzbl	(%edi),%esi
00000279	shll	$0x03,%esi
0000027c	movl	0x08(%ebp),%ecx
0000027f	addl	(%ecx),%esi
00000281	incl	%eax
00000282	andl	$0x07,%eax
00000285	movl	%eax,0xc8(%ebp)
00000288	xorl	%eax,%eax
0000028a	jmp	0x00000293
0000028c	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax)
00000290	addl	$0x08,%esi
00000293	movl	(%esi),%esi
00000295	testl	%esi,%esi
00000297	je	0x000002c5
00000299	movl	%eax,0xe8(%ebp)
0000029c	xorl	%ecx,%ecx
0000029e	jmp	0x000002a1
000002a0	incl	%ecx
000002a1	cmpl	%ecx,%edx
000002a3	je	0x000002b3
000002a5	movl	%edi,%eax
000002a7	movl	(%esi),%edi
000002a9	movb	(%edi,%ecx),%bl
000002ac	movl	%eax,%edi
000002ae	cmpb	(%edi,%ecx),%bl
000002b1	je	0x000002a0
000002b3	movl	0xe8(%ebp),%eax
000002b6	cmpl	%eax,%ecx
000002b8	jle	0x000002c1
000002ba	movl	(%esi),%eax
000002bc	movl	%eax,0xd4(%ebp)
000002bf	movl	%ecx,%eax
000002c1	cmpl	%ecx,%edx
000002c3	jne	0x00000290
000002c5	movl	0xd0(%ebp),%edx
000002c8	movb	(%edx),%cl
000002ca	shrb	%cl
000002cc	cmpl	$0x02,%eax
000002cf	jg	0x000002e3
000002d1	movb	%cl,(%edx)
000002d3	movb	(%edi),%cl
000002d5	movl	0xec(%ebp),%edx
000002d8	movb	%cl,(%edx)
000002da	movl	$0x00000001,%eax
000002df	movl	%edx,%ecx
000002e1	jmp	0x00000309
000002e3	orb	$0x80,%cl
000002e6	movb	%cl,(%edx)
000002e8	movl	%edi,%ecx
000002ea	subl	0xd4(%ebp),%ecx
000002ed	decl	%ecx
000002ee	movl	%ecx,%edx
000002f0	shrl	$0x04,%edx
000002f3	movl	0xec(%ebp),%esi
000002f6	movb	%dl,(%esi)
000002f8	shll	$0x04,%ecx
000002fb	leal	0x000000ff(%eax),%edx
00000301	orl	%ecx,%edx
00000303	movb	%dl,0x01(%esi)
00000306	incl	%esi
00000307	movl	%esi,%ecx
00000309	movl	0x08(%ebp),%edx
0000030c	movl	%eax,0xe8(%ebp)
0000030f	incl	%ecx
00000310	movl	%ecx,0xc4(%ebp)
00000313	movl	%eax,%ecx
00000315	leal	(%edi,%eax),%eax
00000318	movl	%eax,0xc0(%ebp)
0000031b	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
00000320	movl	%ecx,CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)(%ebp)
00000323	movl	%edi,0xe4(%ebp)
00000326	movl	0x04(%edx),%ebx
00000329	movl	0x08(%edx),%ecx
0000032c	decl	%ecx
0000032d	andl	%edi,%ecx
0000032f	shll	$0x04,%ecx
00000332	movl	(%ebx,%ecx),%esi
00000335	leal	(%ebx,%ecx),%eax
00000338	movl	%eax,0xd8(%ebp)
0000033b	leal	0x01(%edi),%eax
0000033e	movl	%eax,0xdc(%ebp)
00000341	testl	%esi,%esi
00000343	leal	0x04(%ebx,%ecx),%eax
00000347	jne	0x0000034e
00000349	movl	%eax,0xec(%ebp)
0000034c	jmp	0x00000383
0000034e	movl	%eax,0xec(%ebp)
00000351	movl	%edx,%eax
00000353	movl	0x04(%ebx,%ecx),%edx
00000357	movl	(%eax),%edi
00000359	movzbl	(%esi),%esi
0000035c	testl	%edx,%edx
0000035e	je	0x00000372
00000360	movl	%edx,0x04(%edi,%esi,8)
00000364	movl	0xec(%ebp),%edx
00000367	movl	(%edx),%edx
00000369	movl	CLZSS::IsCompressed(unsigned char const*),0x08(%edx)
00000370	jmp	0x00000381
00000372	movl	CLZSS::IsCompressed(unsigned char const*),0x04(%edi,%esi,8)
0000037a	movl	CLZSS::IsCompressed(unsigned char const*),(%edi,%esi,8)
00000381	movl	%eax,%edx
00000383	movl	(%edx),%edi
00000385	movl	0xe4(%ebp),%eax
00000388	movzbl	(%eax),%esi
0000038b	movl	0xd8(%ebp),%edx
0000038e	movl	%eax,(%edx)
00000390	movl	0xec(%ebp),%eax
00000393	movl	CLZSS::IsCompressed(unsigned char const*),(%eax)
00000399	movl	(%edi,%esi,8),%eax
0000039c	movl	%eax,0x08(%ebx,%ecx)
000003a0	movl	(%edi,%esi,8),%eax
000003a3	testl	%eax,%eax
000003a5	je	0x00000210
000003ab	movl	%edx,0x04(%eax)
000003ae	jmp	0x00000214
000003b3	xorl	%esi,%esi
000003b5	testl	%ecx,%ecx
000003b7	jne	0x000003f3
000003b9	testl	%edx,%edx
000003bb	jne	0x000003c3
000003bd	movb	$0x01,(%ebx)
000003c0	incl	%ebx
000003c1	jmp	0x000003db
000003c3	movl	$0x00000007,%ecx
000003c8	subl	%edx,%ecx
000003ca	movl	0xd0(%ebp),%edx
000003cd	movzbl	(%edx),%eax
000003d0	shrl	%eax
000003d2	orl	$0x00000080,%eax
000003d7	shrl	%cl,%eax
000003d9	movb	%al,(%edx)
000003db	movl	0x18(%ebp),%eax
000003de	movb	CLZSS::IsCompressed(unsigned char const*),(%ebx)
000003e1	movb	CLZSS::IsCompressed(unsigned char const*),0x01(%ebx)
000003e5	testl	%eax,%eax
000003e7	movl	0x14(%ebp),%esi
000003ea	je	0x000003f3
000003ec	addl	$0x02,%ebx
000003ef	subl	%esi,%ebx
000003f1	movl	%ebx,(%eax)
000003f3	cmpl	CLZSS::IsCompressed(unsigned char const*),0xb0(%ebp)
000003f7	je	0x00000454
000003f9	movl	0xb4(%ebp),%ebx
000003fc	testb	$0x01,0x00001010(%ebx)
00000403	je	0x0000040f
00000405	movl	0x0000100c(%ebx),%eax
0000040b	testl	%eax,%eax
0000040d	je	0x00000454
0000040f	movl	0x000019b8(%ebx),%edi
00000415	calll	_ThreadGetCurrentId
0000041a	cmpl	%eax,%edi
0000041c	jne	0x00000454
0000041e	movl	0x00001014(%ebx),%eax
00000424	subl	$0x10,%esp
00000427	movl	%eax,(%esp)
0000042a	calll	CVProfNode::ExitScope()
0000042f	addl	$0x10,%esp
00000432	movl	0x00001014(%ebx),%ecx
00000438	testb	%al,%al
0000043a	je	0x00000445
0000043c	movl	0x64(%ecx),%ecx
0000043f	movl	%ecx,0x00001014(%ebx)
00000445	leal	0x00001018(%ebx),%eax
0000044b	cmpl	%eax,%ecx
0000044d	sete	0x00001010(%ebx)
00000454	movl	0xb8(%ebp),%eax
00000457	movl	(%eax),%eax
00000459	cmpl	0xf0(%ebp),%eax
0000045c	jne	0x00000468
0000045e	movl	%esi,%eax
00000460	leal	0xf4(%ebp),%esp
00000463	popl	%esi
00000464	popl	%edi
00000465	popl	%ebx
00000466	popl	%ebp
00000467	ret
00000468	calll	___stack_chk_fail
0000046d	nopl	(%eax)
CLZSS::Compress(unsigned char const*, int, unsigned int*):
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	pushl	%edi
00000474	pushl	%esi
00000475	subl	CLZSS::GetActualSize(unsigned char const*),%esp
00000478	movl	0x10(%ebp),%edi
0000047b	movl	%edi,(%esp)
0000047e	calll	_malloc
00000483	movl	%eax,%esi
00000485	movl	0x14(%ebp),%eax
00000488	movl	%eax,0x10(%esp)
0000048c	movl	%esi,0x0c(%esp)
00000490	movl	%edi,0x08(%esp)
00000494	movl	0x0c(%ebp),%eax
00000497	movl	%eax,0x04(%esp)
0000049b	movl	0x08(%ebp),%eax
0000049e	movl	%eax,(%esp)
000004a1	calll	CLZSS::CompressNoAlloc(unsigned char const*, int, unsigned char*, unsigned int*)
000004a6	testl	%eax,%eax
000004a8	jne	0x000004b4
000004aa	movl	%esi,(%esp)
000004ad	calll	_free
000004b2	xorl	%esi,%esi
000004b4	movl	%esi,%eax
000004b6	addl	CLZSS::GetActualSize(unsigned char const*),%esp
000004b9	popl	%esi
000004ba	popl	%edi
000004bb	popl	%ebp
000004bc	ret
000004bd	nopl	(%eax)
CLZSS::SafeUncompress(unsigned char const*, unsigned char*, unsigned int):
000004c0	pushl	%ebp
000004c1	pushl	%ebx
000004c2	pushl	%edi
000004c3	pushl	%esi
000004c4	subl	$0x10,%esp
000004c7	xorl	%eax,%eax
000004c9	movl	0x28(%esp),%ecx
000004cd	testl	%ecx,%ecx
000004cf	je	0x00000592
000004d5	xorl	%eax,%eax
000004d7	cmpl	$0x53535a4c,(%ecx)
000004dd	jne	0x00000592
000004e3	movl	0x04(%ecx),%edx
000004e6	xorl	%eax,%eax
000004e8	testl	%edx,%edx
000004ea	je	0x00000592
000004f0	cmpl	0x30(%esp),%edx
000004f4	movl	%edx,(%esp)
000004f7	ja	0x00000592
000004fd	movl	0x2c(%esp),%ebx
00000501	addl	$0x08,%ecx
00000504	xorl	%esi,%esi
00000506	xorl	%eax,%eax
00000508	movl	%esi,%edi
0000050a	jmp	0x00000525
0000050c	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax)
00000510	incl	%edi
00000511	xorl	%eax,%eax
00000513	cmpl	0x30(%esp),%edi
00000517	ja	0x00000592
00000519	movb	(%ecx),%al
0000051b	movb	%al,(%ebx)
0000051d	incl	%ebx
0000051e	movl	0x08(%esp),%eax
00000522	sarl	%eax
00000524	incl	%ecx
00000525	testl	%esi,%esi
00000527	jne	0x0000052d
00000529	movzbl	(%ecx),%eax
0000052c	incl	%ecx
0000052d	movl	%eax,0x08(%esp)
00000531	incl	%esi
00000532	andl	$0x07,%esi
00000535	testb	$0x01,%al
00000537	je	0x00000510
00000539	movzbl	0x01(%ecx),%ebp
0000053d	movl	%ebp,%edx
0000053f	andl	$0x0f,%edx
00000542	je	0x00000587
00000544	leal	0x01(%edx,%edi),%edi
00000548	xorl	%eax,%eax
0000054a	cmpl	0x30(%esp),%edi
0000054e	ja	0x00000592
00000550	movl	%esi,0x0c(%esp)
00000554	leal	0x01(%ecx),%eax
00000557	movl	%eax,0x04(%esp)
0000055b	movl	%ebp,%esi
0000055d	shrl	$0x04,%esi
00000560	movzbl	(%ecx),%ecx
00000563	shll	$0x04,%ecx
00000566	orl	%esi,%ecx
00000568	notl	%ecx
0000056a	andl	$0x0f,%ebp
0000056d	incl	%ebp
0000056e	movl	%ebx,%esi
00000570	movb	(%esi,%ecx),%al
00000573	movb	%al,(%esi)
00000575	incl	%esi
00000576	decl	%ebp
00000577	jne	0x00000570
00000579	leal	0x01(%edx,%ebx),%ebx
0000057d	movl	0x04(%esp),%ecx
00000581	movl	0x0c(%esp),%esi
00000585	jmp	0x0000051e
00000587	cmpl	(%esp),%edi
0000058a	movl	CLZSS::IsCompressed(unsigned char const*),%eax
0000058f	cmovel	%edi,%eax
00000592	addl	$0x10,%esp
00000595	popl	%esi
00000596	popl	%edi
00000597	popl	%ebx
00000598	popl	%ebp
00000599	ret
0000059a	nopw	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
CLZSS::Uncompress(unsigned char const*, unsigned char*):
000005a0	pushl	%ebp
000005a1	pushl	%ebx
000005a2	pushl	%edi
000005a3	pushl	%esi
000005a4	subl	$0x14,%esp
000005a7	xorl	%eax,%eax
000005a9	movl	0x2c(%esp),%edi
000005ad	testl	%edi,%edi
000005af	je	0x00000680
000005b5	xorl	%eax,%eax
000005b7	cmpl	$0x53535a4c,(%edi)
000005bd	jne	0x00000680
000005c3	movl	0x04(%edi),%ecx
000005c6	movl	%ecx,(%esp)
000005c9	xorl	%eax,%eax
000005cb	testl	%ecx,%ecx
000005cd	je	0x00000680
000005d3	movl	0x30(%esp),%ecx
000005d7	addl	$0x08,%edi
000005da	xorl	%edx,%edx
000005dc	xorl	%esi,%esi
000005de	xorl	%eax,%eax
000005e0	jmp	0x00000641
000005e2	nopw	%cs:CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
000005f0	incl	%edi
000005f1	movb	%bl,(%ecx)
000005f3	incl	%ecx
000005f4	movl	$0x00000001,%ebp
000005f9	jmp	0x00000639
000005fb	movzbl	%bl,%eax
000005fe	addl	$0x02,%edi
00000601	incl	%ebp
00000602	shll	$0x04,%eax
00000605	movl	%edx,%ebx
00000607	shrl	$0x04,%ebx
0000060a	orl	%eax,%ebx
0000060c	notl	%ebx
0000060e	andl	$0x0f,%edx
00000611	incl	%edx
00000612	movl	%ecx,%eax
00000614	movl	%ecx,0x0c(%esp)
00000618	nopl	CLZSS::IsCompressed(unsigned char const*)(%eax,%eax)
00000620	movb	(%eax,%ebx),%cl
00000623	movb	%cl,(%eax)
00000625	incl	%eax
00000626	decl	%edx
00000627	jne	0x00000620
00000629	movl	0x0c(%esp),%ecx
0000062d	leal	0x01(%esi,%ecx),%ecx
00000631	movl	0x08(%esp),%edx
00000635	movl	0x04(%esp),%esi
00000639	movl	0x10(%esp),%eax
0000063d	addl	%ebp,%eax
0000063f	sarl	%esi
00000641	movl	%eax,0x10(%esp)
00000645	testl	%edx,%edx
00000647	jne	0x0000064d
00000649	movzbl	(%edi),%esi
0000064c	incl	%edi
0000064d	movb	(%edi),%bl
0000064f	incl	%edx
00000650	andl	$0x07,%edx
00000653	movl	%esi,%eax
00000655	testb	$0x01,%al
00000657	je	0x000005f0
00000659	movl	%esi,0x04(%esp)
0000065d	movl	%edx,0x08(%esp)
00000661	movzbl	0x01(%edi),%edx
00000665	movl	%edx,%ebp
00000667	andl	$0x0f,%ebp
0000066a	movl	%edx,%esi
0000066c	andl	$0x0f,%esi
0000066f	jne	0x000005fb
00000671	movl	0x10(%esp),%ecx
00000675	cmpl	(%esp),%ecx
00000678	movl	CLZSS::IsCompressed(unsigned char const*),%eax
0000067d	cmovel	%ecx,%eax
00000680	addl	$0x14,%esp
00000683	popl	%esi
00000684	popl	%edi
00000685	popl	%ebx
00000686	popl	%ebp
00000687	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(mempool.o):
(__TEXT,__text) section
CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	%ecx,CUtlMemoryPool::g_ReportFunc-0x5(%eax)
00000010	ret
00000011	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int):
00000020	pushl	%edi
00000021	pushl	%esi
00000022	calll	0x00000027
00000027	popl	%ecx
00000028	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esp),%eax
0000002c	testl	%eax,%eax
0000002e	movw	$0x0001,%dx
00000032	cmovnew	%ax,%dx
00000036	movl	0x0c(%esp),%eax
0000003a	movw	%dx,0x18(%eax)
0000003e	movl	0x10(%esp),%esi
00000042	movl	$0x00000003,%edi
00000047	cmpl	$0x04,%esi
0000004a	leal	0xff(%esi),%esi
0000004d	cmovbl	%edi,%esi
00000050	movzwl	%dx,%edx
00000053	addl	%edx,%esi
00000055	negl	%edx
00000057	andl	%esi,%edx
00000059	movl	%edx,(%eax)
0000005b	movl	0x14(%esp),%edx
0000005f	movl	%edx,0x04(%eax)
00000062	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x14(%eax)
00000069	movl	0x18(%esp),%edx
0000006d	movl	%edx,0x08(%eax)
00000070	leal	0x2ebe-0x27(%ecx),%ecx
00000076	movl	0x1c(%esp),%edx
0000007a	testl	%edx,%edx
0000007c	cmovnel	%edx,%ecx
0000007f	movl	%ecx,0x1c(%eax)
00000082	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
00000088	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
0000008f	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000096	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
00000099	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000009c	movl	%ecx,0x24(%eax)
0000009f	popl	%esi
000000a0	popl	%edi
000000a1	jmp	CUtlMemoryPool::AddNewBlob()
000000a6	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int):
000000b0	pushl	%edi
000000b1	pushl	%esi
000000b2	calll	0x000000b7
000000b7	popl	%ecx
000000b8	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esp),%eax
000000bc	testl	%eax,%eax
000000be	movw	$0x0001,%dx
000000c2	cmovnew	%ax,%dx
000000c6	movl	0x0c(%esp),%eax
000000ca	movw	%dx,0x18(%eax)
000000ce	movl	0x10(%esp),%esi
000000d2	movl	$0x00000003,%edi
000000d7	cmpl	$0x04,%esi
000000da	leal	0xff(%esi),%esi
000000dd	cmovbl	%edi,%esi
000000e0	movzwl	%dx,%edx
000000e3	addl	%edx,%esi
000000e5	negl	%edx
000000e7	andl	%esi,%edx
000000e9	movl	%edx,(%eax)
000000eb	movl	0x14(%esp),%edx
000000ef	movl	%edx,0x04(%eax)
000000f2	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x14(%eax)
000000f9	movl	0x18(%esp),%edx
000000fd	movl	%edx,0x08(%eax)
00000100	leal	0x2ebe-0xb7(%ecx),%ecx
00000106	movl	0x1c(%esp),%edx
0000010a	testl	%edx,%edx
0000010c	cmovnel	%edx,%ecx
0000010f	movl	%ecx,0x1c(%eax)
00000112	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
00000118	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
0000011f	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000126	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
00000129	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000012c	movl	%ecx,0x24(%eax)
0000012f	popl	%esi
00000130	popl	%edi
00000131	jmp	CUtlMemoryPool::AddNewBlob()
00000136	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Init():
00000140	movl	0x04(%esp),%eax
00000144	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%eax)
0000014a	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%eax)
00000151	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%eax)
00000158	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax),%ecx
0000015b	movl	%ecx,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%eax)
0000015e	movl	%ecx,0x24(%eax)
00000161	ret
00000162	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::AddNewBlob():
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x0c,%esp
00000179	movl	0x08(%ebp),%esi
0000017c	movl	0x08(%esi),%ecx
0000017f	movl	$0x00000001,%eax
00000184	testl	%ecx,%ecx
00000186	je	0x00000194
00000188	cmpl	$0x02,%ecx
0000018b	je	0x0000019b
0000018d	movzwl	0x1a(%esi),%eax
00000191	incl	%eax
00000192	jmp	0x0000019b
00000194	cmpw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000199	jne	0x00000203
0000019b	movl	(%esi),%ebx
0000019d	movl	0x04(%esi),%edi
000001a0	imull	%eax,%edi
000001a3	imull	%edi,%ebx
000001a6	movzwl	0x18(%esi),%eax
000001aa	leal	0x0e(%ebx,%eax),%eax
000001ae	movl	%eax,(%esp)
000001b1	calll	_malloc
000001b6	movl	%ebx,0x08(%eax)
000001b9	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%ecx
000001bc	movl	%ecx,0x04(%eax)
000001bf	movl	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%ecx
000001c2	movl	%ecx,(%eax)
000001c4	movl	%eax,0x04(%ecx)
000001c7	movl	0x04(%eax),%ecx
000001ca	movl	%eax,(%ecx)
000001cc	movzwl	0x18(%esi),%ecx
000001d0	leal	0x0b(%eax,%ecx),%eax
000001d4	negl	%ecx
000001d6	andl	%eax,%ecx
000001d8	movl	%ecx,0x10(%esi)
000001db	decl	%edi
000001dc	testl	%edi,%edi
000001de	jg	0x000001e4
000001e0	movl	%ecx,%eax
000001e2	jmp	0x000001f9
000001e4	movl	%ecx,%eax
000001e6	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
000001f0	addl	(%esi),%eax
000001f2	movl	%eax,(%ecx)
000001f4	decl	%edi
000001f5	movl	%eax,%ecx
000001f7	jne	0x000001f0
000001f9	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),(%eax)
000001ff	incw	0x1a(%esi)
00000203	addl	$0x0c,%esp
00000206	popl	%esi
00000207	popl	%edi
00000208	popl	%ebx
00000209	popl	%ebp
0000020a	ret
0000020b	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::~CUtlMemoryPool():
00000210	pushl	%ebp
00000211	movl	%esp,%ebp
00000213	pushl	%ebx
00000214	pushl	%edi
00000215	pushl	%esi
00000216	subl	$0x0c,%esp
00000219	calll	0x0000021e
0000021e	popl	%eax
0000021f	movl	0x08(%ebp),%esi
00000222	movl	0x0c(%esi),%ecx
00000225	testl	%ecx,%ecx
00000227	jle	0x00000242
00000229	movl	CUtlMemoryPool::g_ReportFunc-0x21e(%eax),%edx
0000022f	testl	%edx,%edx
00000231	je	0x00000242
00000233	movl	%ecx,0x04(%esp)
00000237	leal	0x2ef5-0x21e(%eax),%eax
0000023d	movl	%eax,(%esp)
00000240	call	*%edx
00000242	movl	0x24(%esi),%eax
00000245	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
00000248	cmpl	%edi,%eax
0000024a	je	0x00000261
0000024c	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
00000250	movl	0x04(%eax),%ebx
00000253	movl	%eax,(%esp)
00000256	calll	_free
0000025b	cmpl	%edi,%ebx
0000025d	movl	%ebx,%eax
0000025f	jne	0x00000250
00000261	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000267	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
0000026e	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
00000275	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
00000278	movl	%edi,0x24(%esi)
0000027b	addl	$0x0c,%esp
0000027e	popl	%esi
0000027f	popl	%edi
00000280	popl	%ebx
00000281	popl	%ebp
00000282	ret
00000283	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::~CUtlMemoryPool():
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%ebx
00000294	pushl	%edi
00000295	pushl	%esi
00000296	subl	$0x0c,%esp
00000299	calll	0x0000029e
0000029e	popl	%eax
0000029f	movl	0x08(%ebp),%esi
000002a2	movl	0x0c(%esi),%ecx
000002a5	testl	%ecx,%ecx
000002a7	jle	0x000002c2
000002a9	movl	CUtlMemoryPool::g_ReportFunc-0x29e(%eax),%edx
000002af	testl	%edx,%edx
000002b1	je	0x000002c2
000002b3	movl	%ecx,0x04(%esp)
000002b7	leal	0x2ef5-0x29e(%eax),%eax
000002bd	movl	%eax,(%esp)
000002c0	call	*%edx
000002c2	movl	0x24(%esi),%eax
000002c5	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
000002c8	cmpl	%edi,%eax
000002ca	je	0x000002e1
000002cc	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
000002d0	movl	0x04(%eax),%ebx
000002d3	movl	%eax,(%esp)
000002d6	calll	_free
000002db	cmpl	%edi,%ebx
000002dd	movl	%ebx,%eax
000002df	jne	0x000002d0
000002e1	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
000002e7	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
000002ee	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
000002f5	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
000002f8	movl	%edi,0x24(%esi)
000002fb	addl	$0x0c,%esp
000002fe	popl	%esi
000002ff	popl	%edi
00000300	popl	%ebx
00000301	popl	%ebp
00000302	ret
00000303	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::ReportLeaks():
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	subl	$0x08,%esp
00000316	calll	0x0000031b
0000031b	popl	%ecx
0000031c	movl	CUtlMemoryPool::g_ReportFunc-0x31b(%ecx),%eax
00000322	testl	%eax,%eax
00000324	je	0x0000033b
00000326	movl	0x08(%ebp),%edx
00000329	movl	0x0c(%edx),%edx
0000032c	movl	%edx,0x04(%esp)
00000330	leal	0x2ef5-0x31b(%ecx),%ecx
00000336	movl	%ecx,(%esp)
00000339	call	*%eax
0000033b	addl	$0x08,%esp
0000033e	popl	%ebp
0000033f	ret
CUtlMemoryPool::Clear():
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%edi
00000345	pushl	%esi
00000346	subl	$0x0c,%esp
00000349	movl	0x08(%ebp),%esi
0000034c	movl	0x24(%esi),%eax
0000034f	leal	CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi),%edi
00000352	cmpl	%edi,%eax
00000354	je	0x00000371
00000356	nopw	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
00000360	movl	0x04(%eax),%ebx
00000363	movl	%eax,(%esp)
00000366	calll	_free
0000036b	cmpl	%edi,%ebx
0000036d	movl	%ebx,%eax
0000036f	jne	0x00000360
00000371	movw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x1a(%esi)
00000377	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x0c(%esi)
0000037e	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x10(%esi)
00000385	movl	%edi,CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)(%esi)
00000388	movl	%edi,0x24(%esi)
0000038b	addl	$0x0c,%esp
0000038e	popl	%esi
0000038f	popl	%edi
00000390	popl	%ebx
00000391	popl	%ebp
00000392	ret
00000393	nopl	%cs:CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Alloc():
000003a0	pushl	%ebp
000003a1	movl	%esp,%ebp
000003a3	pushl	%esi
000003a4	pushl	%eax
000003a5	movl	0x08(%ebp),%esi
000003a8	movl	0x10(%esi),%ecx
000003ab	testl	%ecx,%ecx
000003ad	jne	0x000003c8
000003af	xorl	%eax,%eax
000003b1	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%esi)
000003b5	je	0x000003e1
000003b7	movl	%esi,(%esp)
000003ba	calll	CUtlMemoryPool::AddNewBlob()
000003bf	movl	0x10(%esi),%ecx
000003c2	xorl	%eax,%eax
000003c4	testl	%ecx,%ecx
000003c6	je	0x000003e1
000003c8	movl	0x0c(%esi),%eax
000003cb	incl	%eax
000003cc	movl	%eax,0x0c(%esi)
000003cf	movl	0x14(%esi),%edx
000003d2	cmpl	%eax,%edx
000003d4	cmovgl	%edx,%eax
000003d7	movl	%eax,0x14(%esi)
000003da	movl	(%ecx),%eax
000003dc	movl	%eax,0x10(%esi)
000003df	movl	%ecx,%eax
000003e1	addl	$0x04,%esp
000003e4	popl	%esi
000003e5	popl	%ebp
000003e6	ret
000003e7	nopw	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax,%eax)
CUtlMemoryPool::Alloc(unsigned long):
000003f0	pushl	%ebp
000003f1	movl	%esp,%ebp
000003f3	pushl	%esi
000003f4	pushl	%eax
000003f5	movl	0x08(%ebp),%esi
000003f8	movl	(%esi),%ecx
000003fa	xorl	%eax,%eax
000003fc	cmpl	0x0c(%ebp),%ecx
000003ff	jb	0x0000043a
00000401	movl	0x10(%esi),%ecx
00000404	testl	%ecx,%ecx
00000406	jne	0x00000421
00000408	xorl	%eax,%eax
0000040a	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%esi)
0000040e	je	0x0000043a
00000410	movl	%esi,(%esp)
00000413	calll	CUtlMemoryPool::AddNewBlob()
00000418	movl	0x10(%esi),%ecx
0000041b	xorl	%eax,%eax
0000041d	testl	%ecx,%ecx
0000041f	je	0x0000043a
00000421	movl	0x0c(%esi),%eax
00000424	incl	%eax
00000425	movl	%eax,0x0c(%esi)
00000428	movl	0x14(%esi),%edx
0000042b	cmpl	%eax,%edx
0000042d	cmovgl	%edx,%eax
00000430	movl	%eax,0x14(%esi)
00000433	movl	(%ecx),%eax
00000435	movl	%eax,0x10(%esi)
00000438	movl	%ecx,%eax
0000043a	addl	$0x04,%esp
0000043d	popl	%esi
0000043e	popl	%ebp
0000043f	ret
CUtlMemoryPool::AllocZero():
00000440	pushl	%ebp
00000441	movl	%esp,%ebp
00000443	pushl	%ebx
00000444	pushl	%edi
00000445	pushl	%esi
00000446	subl	$0x0c,%esp
00000449	movl	0x08(%ebp),%edi
0000044c	movl	(%edi),%esi
0000044e	movl	0x10(%edi),%ebx
00000451	testl	%ebx,%ebx
00000453	jne	0x0000046e
00000455	xorl	%eax,%eax
00000457	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%edi)
0000045b	je	0x000004a1
0000045d	movl	%edi,(%esp)
00000460	calll	CUtlMemoryPool::AddNewBlob()
00000465	movl	0x10(%edi),%ebx
00000468	xorl	%eax,%eax
0000046a	testl	%ebx,%ebx
0000046c	je	0x000004a1
0000046e	movl	0x0c(%edi),%eax
00000471	incl	%eax
00000472	movl	%eax,0x0c(%edi)
00000475	movl	0x14(%edi),%ecx
00000478	cmpl	%eax,%ecx
0000047a	cmovgl	%ecx,%eax
0000047d	movl	%eax,0x14(%edi)
00000480	movl	(%ebx),%eax
00000482	movl	%eax,0x10(%edi)
00000485	xorl	%eax,%eax
00000487	testl	%ebx,%ebx
00000489	je	0x000004a1
0000048b	movl	%esi,0x08(%esp)
0000048f	movl	%ebx,(%esp)
00000492	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x04(%esp)
0000049a	calll	_memset
0000049f	movl	%ebx,%eax
000004a1	addl	$0x0c,%esp
000004a4	popl	%esi
000004a5	popl	%edi
000004a6	popl	%ebx
000004a7	popl	%ebp
000004a8	ret
000004a9	nopl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...))(%eax)
CUtlMemoryPool::AllocZero(unsigned long):
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%ebx
000004b4	pushl	%edi
000004b5	pushl	%esi
000004b6	subl	$0x0c,%esp
000004b9	xorl	%eax,%eax
000004bb	movl	0x0c(%ebp),%esi
000004be	movl	0x08(%ebp),%edi
000004c1	cmpl	%esi,(%edi)
000004c3	jb	0x00000518
000004c5	movl	0x10(%edi),%ebx
000004c8	testl	%ebx,%ebx
000004ca	jne	0x000004e5
000004cc	xorl	%eax,%eax
000004ce	cmpl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x08(%edi)
000004d2	je	0x00000518
000004d4	movl	%edi,(%esp)
000004d7	calll	CUtlMemoryPool::AddNewBlob()
000004dc	movl	0x10(%edi),%ebx
000004df	xorl	%eax,%eax
000004e1	testl	%ebx,%ebx
000004e3	je	0x00000518
000004e5	movl	0x0c(%edi),%eax
000004e8	incl	%eax
000004e9	movl	%eax,0x0c(%edi)
000004ec	movl	0x14(%edi),%ecx
000004ef	cmpl	%eax,%ecx
000004f1	cmovgl	%ecx,%eax
000004f4	movl	%eax,0x14(%edi)
000004f7	movl	(%ebx),%eax
000004f9	movl	%eax,0x10(%edi)
000004fc	xorl	%eax,%eax
000004fe	testl	%ebx,%ebx
00000500	je	0x00000518
00000502	movl	%esi,0x08(%esp)
00000506	movl	%ebx,(%esp)
00000509	movl	CUtlMemoryPool::SetErrorReportFunc(void (*)(char const*, ...)),0x04(%esp)
00000511	calll	_memset
00000516	movl	%ebx,%eax
00000518	addl	$0x0c,%esp
0000051b	popl	%esi
0000051c	popl	%edi
0000051d	popl	%ebx
0000051e	popl	%ebp
0000051f	ret
CUtlMemoryPool::Free(void*):
00000520	movl	0x08(%esp),%eax
00000524	testl	%eax,%eax
00000526	je	0x00000537
00000528	movl	0x04(%esp),%ecx
0000052c	decl	0x0c(%ecx)
0000052f	movl	0x10(%ecx),%edx
00000532	movl	%edx,(%eax)
00000534	movl	%eax,0x10(%ecx)
00000537	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(memstack.o):
(__TEXT,__text) section
CMemoryStack::CMemoryStack():
00000000	movl	0x04(%esp),%eax
00000004	movl	CMemoryStack::CMemoryStack(),0x04(%eax)
0000000b	movl	CMemoryStack::CMemoryStack(),(%eax)
00000011	movl	CMemoryStack::CMemoryStack(),0x0c(%eax)
00000018	movl	CMemoryStack::CMemoryStack(),0x08(%eax)
0000001f	movl	CMemoryStack::CMemoryStack(),0x10(%eax)
00000026	movl	$0x00000010,0x14(%eax)
0000002d	ret
0000002e	nop
CMemoryStack::CMemoryStack():
00000030	movl	0x04(%esp),%eax
00000034	movl	CMemoryStack::CMemoryStack(),0x04(%eax)
0000003b	movl	CMemoryStack::CMemoryStack(),(%eax)
00000041	movl	CMemoryStack::CMemoryStack(),0x0c(%eax)
00000048	movl	CMemoryStack::CMemoryStack(),0x08(%eax)
0000004f	movl	CMemoryStack::CMemoryStack(),0x10(%eax)
00000056	movl	$0x00000010,0x14(%eax)
0000005d	ret
0000005e	nop
CMemoryStack::~CMemoryStack():
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%esi
00000064	pushl	%eax
00000065	movl	0x08(%ebp),%esi
00000068	movl	0x0c(%esi),%eax
0000006b	testl	%eax,%eax
0000006d	je	0x00000089
0000006f	movl	0x04(%esi),%ecx
00000072	subl	%eax,%ecx
00000074	testl	%ecx,%ecx
00000076	jle	0x0000007a
00000078	movl	%eax,(%esi)
0000007a	movl	%eax,(%esp)
0000007d	calll	_free
00000082	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
00000089	addl	$0x04,%esp
0000008c	popl	%esi
0000008d	popl	%ebp
0000008e	ret
0000008f	nop
CMemoryStack::~CMemoryStack():
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	pushl	%esi
00000094	pushl	%eax
00000095	movl	0x08(%ebp),%esi
00000098	movl	0x0c(%esi),%eax
0000009b	testl	%eax,%eax
0000009d	je	0x000000b9
0000009f	movl	0x04(%esi),%ecx
000000a2	subl	%eax,%ecx
000000a4	testl	%ecx,%ecx
000000a6	jle	0x000000aa
000000a8	movl	%eax,(%esi)
000000aa	movl	%eax,(%esp)
000000ad	calll	_free
000000b2	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
000000b9	addl	$0x04,%esp
000000bc	popl	%esi
000000bd	popl	%ebp
000000be	ret
000000bf	nop
CMemoryStack::Term():
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%esi
000000c4	pushl	%eax
000000c5	movl	0x08(%ebp),%esi
000000c8	movl	0x0c(%esi),%eax
000000cb	testl	%eax,%eax
000000cd	je	0x000000e9
000000cf	movl	0x04(%esi),%ecx
000000d2	subl	%eax,%ecx
000000d4	testl	%ecx,%ecx
000000d6	jle	0x000000da
000000d8	movl	%eax,(%esi)
000000da	movl	%eax,(%esp)
000000dd	calll	_free
000000e2	movl	CMemoryStack::CMemoryStack(),0x0c(%esi)
000000e9	addl	$0x04,%esp
000000ec	popl	%esi
000000ed	popl	%ebp
000000ee	ret
000000ef	nop
CMemoryStack::Init(unsigned int, unsigned int, unsigned int, unsigned int):
000000f0	pushl	%ebp
000000f1	movl	%esp,%ebp
000000f3	pushl	%edi
000000f4	pushl	%esi
000000f5	subl	$0x10,%esp
000000f8	movl	0x0c(%ebp),%esi
000000fb	movl	0x08(%ebp),%edi
000000fe	movl	%esi,0x10(%edi)
00000101	movl	0x18(%ebp),%eax
00000104	addl	$0x03,%eax
00000107	andl	$0xfc,%eax
0000010a	movl	%eax,0x14(%edi)
0000010d	movl	%esi,(%esp)
00000110	calll	_malloc
00000115	movl	%eax,0x0c(%edi)
00000118	movl	%eax,(%edi)
0000011a	addl	%eax,%esi
0000011c	movl	%esi,0x04(%edi)
0000011f	movl	%esi,0x08(%edi)
00000122	testl	%eax,%eax
00000124	setne	%al
00000127	movzbl	%al,%eax
0000012a	addl	$0x10,%esp
0000012d	popl	%esi
0000012e	popl	%edi
0000012f	popl	%ebp
00000130	ret
00000131	nopl	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::FreeAll(bool):
00000140	movl	0x04(%esp),%eax
00000144	movl	0x0c(%eax),%ecx
00000147	testl	%ecx,%ecx
00000149	je	0x00000156
0000014b	movl	0x04(%eax),%edx
0000014e	subl	%ecx,%edx
00000150	testl	%edx,%edx
00000152	jle	0x00000156
00000154	movl	%ecx,(%eax)
00000156	ret
00000157	nopw	CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::GetSize():
00000160	movl	0x04(%esp),%eax
00000164	movl	0x10(%eax),%eax
00000167	ret
00000168	nopl	CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::CommitTo(unsigned char*):
00000170	xorl	%eax,%eax
00000172	ret
00000173	nopl	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::FreeToAllocPoint(unsigned int, bool):
00000180	movl	0x08(%esp),%eax
00000184	testl	%eax,%eax
00000186	js	0x00000195
00000188	movl	0x04(%esp),%ecx
0000018c	addl	0x0c(%ecx),%eax
0000018f	cmpl	(%ecx),%eax
00000191	jae	0x00000195
00000193	movl	%eax,(%ecx)
00000195	ret
00000196	nopw	%cs:CMemoryStack::CMemoryStack()(%eax,%eax)
CMemoryStack::Access(void**, unsigned int*):
000001a0	movl	0x04(%esp),%eax
000001a4	movl	0x0c(%eax),%ecx
000001a7	movl	0x08(%esp),%edx
000001ab	movl	%ecx,(%edx)
000001ad	movl	(%eax),%ecx
000001af	subl	0x0c(%eax),%ecx
000001b2	movl	0x0c(%esp),%eax
000001b6	movl	%ecx,(%eax)
000001b8	ret
000001b9	nopl	CMemoryStack::CMemoryStack()(%eax)
CMemoryStack::PrintContents():
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%edi
000001c4	pushl	%esi
000001c5	subl	$0x10,%esp
000001c8	calll	0x000001cd
000001cd	popl	%esi
000001ce	movl	0x08(%ebp),%edi
000001d1	movl	(%edi),%eax
000001d3	subl	0x0c(%edi),%eax
000001d6	movl	%eax,0x04(%esp)
000001da	leal	0x23cf-0x1cd(%esi),%eax
000001e0	movl	%eax,(%esp)
000001e3	calll	_Msg
000001e8	movl	0x10(%edi),%eax
000001eb	movl	%eax,0x04(%esp)
000001ef	leal	0x23eb-0x1cd(%esi),%eax
000001f5	movl	%eax,(%esp)
000001f8	calll	_Msg
000001fd	addl	$0x10,%esp
00000200	popl	%esi
00000201	popl	%edi
00000202	popl	%ebp
00000203	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(NetAdr.o):
(__TEXT,__text) section
netadr_s::CompareAdr(netadr_s const&, bool) const:
00000000	pushl	%edi
00000001	pushl	%esi
00000002	movl	0x0c(%esp),%eax
00000006	movl	(%eax),%esi
00000008	xorb	%dl,%dl
0000000a	movl	0x10(%esp),%ecx
0000000e	cmpl	%esi,(%ecx)
00000010	jne	0x00000059
00000012	leal	0xff(%esi),%edi
00000015	movb	$0x01,%dl
00000017	cmpl	$0x02,%edi
0000001a	jb	0x00000059
0000001c	cmpl	$0x03,%esi
0000001f	jne	0x00000057
00000021	movb	0x14(%esp),%dl
00000025	testb	%dl,%dl
00000027	jne	0x00000035
00000029	movw	0x08(%eax),%si
0000002d	xorb	%dl,%dl
0000002f	cmpw	0x08(%ecx),%si
00000033	jne	0x00000059
00000035	movb	0x04(%ecx),%dl
00000038	cmpb	0x04(%eax),%dl
0000003b	jne	0x00000057
0000003d	movb	0x05(%ecx),%dl
00000040	cmpb	0x05(%eax),%dl
00000043	jne	0x00000057
00000045	movb	0x06(%ecx),%dl
00000048	cmpb	0x06(%eax),%dl
0000004b	jne	0x00000057
0000004d	movb	0x07(%ecx),%cl
00000050	movb	$0x01,%dl
00000052	cmpb	0x07(%eax),%cl
00000055	je	0x00000059
00000057	xorb	%dl,%dl
00000059	movzbl	%dl,%eax
0000005c	popl	%esi
0000005d	popl	%edi
0000005e	ret
0000005f	nop
netadr_s::CompareClassBAdr(netadr_s const&) const:
00000060	pushl	%esi
00000061	movl	0x08(%esp),%eax
00000065	movl	(%eax),%esi
00000067	xorb	%dl,%dl
00000069	movl	0x0c(%esp),%ecx
0000006d	cmpl	%esi,(%ecx)
0000006f	jne	0x00000091
00000071	movb	$0x01,%dl
00000073	cmpl	$0x01,%esi
00000076	je	0x00000091
00000078	cmpl	$0x03,%esi
0000007b	jne	0x0000008f
0000007d	movb	0x04(%ecx),%dl
00000080	cmpb	0x04(%eax),%dl
00000083	jne	0x0000008f
00000085	movb	0x05(%ecx),%cl
00000088	movb	$0x01,%dl
0000008a	cmpb	0x05(%eax),%cl
0000008d	je	0x00000091
0000008f	xorb	%dl,%dl
00000091	movzbl	%dl,%eax
00000094	popl	%esi
00000095	ret
00000096	nopw	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::CompareClassCAdr(netadr_s const&) const:
000000a0	pushl	%esi
000000a1	movl	0x08(%esp),%eax
000000a5	movl	(%eax),%esi
000000a7	xorb	%dl,%dl
000000a9	movl	0x0c(%esp),%ecx
000000ad	cmpl	%esi,(%ecx)
000000af	jne	0x000000d9
000000b1	movb	$0x01,%dl
000000b3	cmpl	$0x01,%esi
000000b6	je	0x000000d9
000000b8	cmpl	$0x03,%esi
000000bb	jne	0x000000d7
000000bd	movb	0x04(%ecx),%dl
000000c0	cmpb	0x04(%eax),%dl
000000c3	jne	0x000000d7
000000c5	movb	0x05(%ecx),%dl
000000c8	cmpb	0x05(%eax),%dl
000000cb	jne	0x000000d7
000000cd	movb	0x06(%ecx),%cl
000000d0	movb	$0x01,%dl
000000d2	cmpb	0x06(%eax),%cl
000000d5	je	0x000000d9
000000d7	xorb	%dl,%dl
000000d9	movzbl	%dl,%eax
000000dc	popl	%esi
000000dd	ret
000000de	nop
netadr_s::IsReservedAdr() const:
000000e0	movl	0x04(%esp),%ecx
000000e4	movl	(%ecx),%edx
000000e6	movb	$0x01,%al
000000e8	cmpl	$0x01,%edx
000000eb	je	0x0000012d
000000ed	cmpl	$0x03,%edx
000000f0	jne	0x0000012b
000000f2	movb	0x04(%ecx),%dl
000000f5	movb	$0x01,%al
000000f7	cmpb	$0x7f,%dl
000000fa	je	0x0000010d
000000fc	cmpb	$0xac,%dl
000000ff	je	0x00000114
00000101	cmpb	$0xc0,%dl
00000104	je	0x00000123
00000106	cmpb	$0x0a,%dl
00000109	jne	0x0000012b
0000010b	jmp	0x0000012d
0000010d	cmpb	$0x7f,%dl
00000110	jne	0x0000012b
00000112	jmp	0x0000012d
00000114	movb	0x05(%ecx),%cl
00000117	addb	$0xf0,%cl
0000011a	movb	$0x01,%al
0000011c	cmpb	$0x10,%cl
0000011f	jae	0x0000012b
00000121	jmp	0x0000012d
00000123	movb	$0x01,%al
00000125	cmpb	$0xa7,0x05(%ecx)
00000129	ja	0x0000012d
0000012b	xorb	%al,%al
0000012d	movzbl	%al,%eax
00000130	ret
00000131	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::ToString(bool) const:
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%ebx
00000144	pushl	%edi
00000145	pushl	%esi
00000146	subl	$0x2c,%esp
00000149	calll	0x0000014e
0000014e	popl	%edi
0000014f	leal	0x2cec-0x14e(%edi),%eax
00000155	movl	%eax,0x04(%esp)
00000159	leal	netadr_s::ToString(bool) const::s-0x14e(%edi),%esi
0000015f	movl	%esi,(%esp)
00000162	movl	$0x00000040,0x08(%esp)
0000016a	calll	V_strncpy(char*, char const*, int)
0000016f	movl	0x08(%ebp),%eax
00000172	movl	(%eax),%ecx
00000174	cmpl	$0x03,%ecx
00000177	je	0x000001ae
00000179	cmpl	$0x02,%ecx
0000017c	je	0x000001a6
0000017e	cmpl	$0x01,%ecx
00000181	jne	0x00000227
00000187	leal	0x2cf4-0x14e(%edi),%eax
0000018d	movl	%eax,0x04(%esp)
00000191	movl	%esi,(%esp)
00000194	movl	$0x00000040,0x08(%esp)
0000019c	calll	V_strncpy(char*, char const*, int)
000001a1	jmp	0x00000227
000001a6	leal	0x2cfd-0x14e(%edi),%eax
000001ac	jmp	0x0000018d
000001ae	movzbl	0x07(%eax),%ebx
000001b2	movzbl	0x06(%eax),%edx
000001b6	movzbl	0x05(%eax),%ecx
000001ba	movl	%ecx,0xec(%ebp)
000001bd	movzbl	0x04(%eax),%ecx
000001c1	movl	%ecx,0xf0(%ebp)
000001c4	cmpb	$0x01,0x0c(%ebp)
000001c8	jne	0x000001e8
000001ca	movl	%ebx,0x18(%esp)
000001ce	movl	%edx,0x14(%esp)
000001d2	movl	0xec(%ebp),%eax
000001d5	movl	%eax,0x10(%esp)
000001d9	movl	0xf0(%ebp),%eax
000001dc	movl	%eax,0x0c(%esp)
000001e0	leal	0x2d07-0x14e(%edi),%eax
000001e6	jmp	0x00000213
000001e8	movw	0x08(%eax),%ax
000001ec	rolw	$0x08,%ax
000001f0	movzwl	%ax,%eax
000001f3	movl	%eax,0x1c(%esp)
000001f7	movl	%ebx,0x18(%esp)
000001fb	movl	%edx,0x14(%esp)
000001ff	movl	0xec(%ebp),%eax
00000202	movl	%eax,0x10(%esp)
00000206	movl	0xf0(%ebp),%eax
00000209	movl	%eax,0x0c(%esp)
0000020d	leal	0x2d13-0x14e(%edi),%eax
00000213	movl	%eax,0x08(%esp)
00000217	movl	%esi,(%esp)
0000021a	movl	$0x00000040,0x04(%esp)
00000222	calll	V_snprintf(char*, int, char const*, ...)
00000227	movl	%esi,%eax
00000229	addl	$0x2c,%esp
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	popl	%ebp
00000230	ret
00000231	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsLocalhost() const:
00000240	xorb	%al,%al
00000242	movl	0x04(%esp),%ecx
00000246	cmpb	$0x7f,0x04(%ecx)
0000024a	jne	0x00000263
0000024c	xorb	%al,%al
0000024e	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x05(%ecx)
00000252	jne	0x00000263
00000254	xorb	%al,%al
00000256	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x06(%ecx)
0000025a	jne	0x00000263
0000025c	cmpb	$0x01,0x07(%ecx)
00000260	sete	%al
00000263	movzbl	%al,%eax
00000266	ret
00000267	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsLoopback() const:
00000270	movl	0x04(%esp),%eax
00000274	cmpl	$0x01,(%eax)
00000277	sete	%al
0000027a	movzbl	%al,%eax
0000027d	ret
0000027e	nop
netadr_s::Clear():
00000280	movl	0x04(%esp),%eax
00000284	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000028b	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000291	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
00000297	ret
00000298	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetIP(unsigned char, unsigned char, unsigned char, unsigned char):
000002a0	movb	0x08(%esp),%cl
000002a4	movl	0x04(%esp),%eax
000002a8	movb	%cl,0x04(%eax)
000002ab	movb	0x0c(%esp),%cl
000002af	movb	%cl,0x05(%eax)
000002b2	movb	0x10(%esp),%cl
000002b6	movb	%cl,0x06(%eax)
000002b9	movb	0x14(%esp),%cl
000002bd	movb	%cl,0x07(%eax)
000002c0	ret
000002c1	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetIP(unsigned int):
000002d0	movl	0x08(%esp),%eax
000002d4	bswap	%eax
000002d6	movl	0x04(%esp),%ecx
000002da	movl	%eax,0x04(%ecx)
000002dd	ret
000002de	nop
netadr_s::SetType(netadrtype_t):
000002e0	movl	0x08(%esp),%eax
000002e4	movl	0x04(%esp),%ecx
000002e8	movl	%eax,(%ecx)
000002ea	ret
000002eb	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetType() const:
000002f0	movl	0x04(%esp),%eax
000002f4	movl	(%eax),%eax
000002f6	ret
000002f7	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetPort() const:
00000300	movl	0x04(%esp),%eax
00000304	movw	0x08(%eax),%ax
00000308	rolw	$0x08,%ax
0000030c	movzwl	%ax,%eax
0000030f	ret
netadr_s::GetIPNetworkByteOrder() const:
00000310	movl	0x04(%esp),%eax
00000314	movl	0x04(%eax),%eax
00000317	ret
00000318	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::GetIPHostByteOrder() const:
00000320	movl	0x04(%esp),%eax
00000324	movl	0x04(%eax),%eax
00000327	bswap	%eax
00000329	ret
0000032a	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::ToSockadr(sockaddr*) const:
00000330	movl	0x08(%esp),%eax
00000334	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000033b	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000341	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x0c(%eax)
00000348	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
0000034f	movl	0x04(%esp),%ecx
00000353	movl	(%ecx),%edx
00000355	cmpl	$0x01,%edx
00000358	je	0x0000038b
0000035a	cmpl	$0x03,%edx
0000035d	je	0x00000378
0000035f	cmpl	$0x02,%edx
00000362	jne	0x0000039e
00000364	movb	$0x02,0x01(%eax)
00000368	movw	0x08(%ecx),%cx
0000036c	movw	%cx,0x02(%eax)
00000370	movl	$0xffffffff,0x04(%eax)
00000377	ret
00000378	movb	$0x02,0x01(%eax)
0000037c	movl	0x04(%ecx),%edx
0000037f	movl	%edx,0x04(%eax)
00000382	movw	0x08(%ecx),%cx
00000386	movw	%cx,0x02(%eax)
0000038a	ret
0000038b	movb	$0x02,0x01(%eax)
0000038f	movw	0x08(%ecx),%cx
00000393	movw	%cx,0x02(%eax)
00000397	movl	$0x7f000001,0x04(%eax)
0000039e	ret
0000039f	nop
netadr_s::SetFromSockadr(sockaddr const*):
000003a0	movl	0x08(%esp),%ecx
000003a4	movl	0x04(%esp),%eax
000003a8	cmpb	$0x02,0x01(%ecx)
000003ac	jne	0x000003c8
000003ae	movl	$0x00000003,(%eax)
000003b4	movl	0x04(%ecx),%edx
000003b7	movl	%edx,0x04(%eax)
000003ba	movw	0x02(%ecx),%cx
000003be	movw	%cx,0x08(%eax)
000003c2	movb	$0x01,%al
000003c4	movzbl	%al,%eax
000003c7	ret
000003c8	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
000003cf	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
000003d5	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
000003db	xorb	%al,%al
000003dd	movzbl	%al,%eax
000003e0	ret
000003e1	nopl	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::IsValid() const:
000003f0	xorb	%cl,%cl
000003f2	movl	0x04(%esp),%eax
000003f6	cmpw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%eax)
000003fb	je	0x00000423
000003fd	xorb	%cl,%cl
000003ff	cmpl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%eax)
00000402	je	0x00000423
00000404	movb	$0x01,%cl
00000406	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%eax)
0000040a	jne	0x00000423
0000040c	movb	$0x01,%cl
0000040e	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x05(%eax)
00000412	jne	0x00000423
00000414	movb	$0x01,%cl
00000416	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x06(%eax)
0000041a	jne	0x00000423
0000041c	cmpb	netadr_s::CompareAdr(netadr_s const&, bool) const,0x07(%eax)
00000420	setne	%cl
00000423	movzbl	%cl,%eax
00000426	ret
00000427	nopw	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetPort(unsigned short):
00000430	movw	0x08(%esp),%ax
00000435	rolw	$0x08,%ax
00000439	movl	0x04(%esp),%ecx
0000043d	movw	%ax,0x08(%ecx)
00000441	ret
00000442	nopw	%cs:netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::SetFromString(char const*, bool):
00000450	pushl	%ebp
00000451	movl	%esp,%ebp
00000453	pushl	%ebx
00000454	pushl	%edi
00000455	pushl	%esi
00000456	subl	$0x0000013c,%esp
0000045c	calll	0x00000461
00000461	popl	%edi
00000462	movl	0x36eb-0x461(%edi),%eax
00000468	movl	%eax,0xfffffed8(%ebp)
0000046e	movl	(%eax),%eax
00000470	movl	%eax,0xf0(%ebp)
00000473	movl	0x08(%ebp),%ebx
00000476	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%ebx)
0000047d	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%ebx)
00000483	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%ebx)
00000489	movl	$0x00000003,(%ebx)
0000048f	movl	0x0c(%ebp),%esi
00000492	testl	%esi,%esi
00000494	je	0x000005de
0000049a	movb	(%esi),%al
0000049c	addb	$0xd0,%al
0000049e	cmpb	$0x09,%al
000004a0	ja	0x00000577
000004a6	movl	%esi,(%esp)
000004a9	movl	$0x0000002e,0x04(%esp)
000004b1	calll	_strchr
000004b6	testl	%eax,%eax
000004b8	je	0x00000577
000004be	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffeec(%ebp)
000004c8	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee8(%ebp)
000004d2	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee4(%ebp)
000004dc	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffee0(%ebp)
000004e6	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0xfffffedc(%ebp)
000004f0	leal	0xfffffedc(%ebp),%eax
000004f6	movl	%eax,0x18(%esp)
000004fa	leal	0xfffffee0(%ebp),%eax
00000500	movl	%eax,0x14(%esp)
00000504	leal	0xfffffee4(%ebp),%eax
0000050a	movl	%eax,0x10(%esp)
0000050e	leal	0xfffffee8(%ebp),%eax
00000514	movl	%eax,0x0c(%esp)
00000518	leal	0xfffffeec(%ebp),%eax
0000051e	movl	%eax,0x08(%esp)
00000522	leal	0x2d22-0x461(%edi),%eax
00000528	movl	%eax,0x04(%esp)
0000052c	movl	%esi,(%esp)
0000052f	calll	_sscanf
00000534	cmpl	$0x04,%eax
00000537	jl	0x000005de
0000053d	movb	0xfffffee0(%ebp),%cl
00000543	movb	0xfffffee4(%ebp),%dl
00000549	movb	0xfffffee8(%ebp),%ch
0000054f	movb	0xfffffeec(%ebp),%dh
00000555	movb	%dh,0x04(%ebx)
00000558	movb	%ch,0x05(%ebx)
0000055b	movb	%dl,0x06(%ebx)
0000055e	movb	%cl,0x07(%ebx)
00000561	cmpl	$0x05,%eax
00000564	jne	0x000005de
00000566	movw	0xfffffedc(%ebp),%ax
0000056d	rolw	$0x08,%ax
00000571	movw	%ax,0x08(%ebx)
00000575	jmp	0x000005de
00000577	movb	0x10(%ebp),%al
0000057a	cmpb	$0x01,%al
0000057c	jne	0x000005de
0000057e	movl	%esi,0x04(%esp)
00000582	leal	0xfffffef0(%ebp),%edi
00000588	movl	%edi,(%esp)
0000058b	movl	$0x00000100,0x08(%esp)
00000593	calll	V_strncpy(char*, char const*, int)
00000598	movl	%edi,(%esp)
0000059b	movl	$0x0000003a,0x04(%esp)
000005a3	calll	_strchr
000005a8	movl	%eax,%esi
000005aa	testl	%esi,%esi
000005ac	je	0x000005b1
000005ae	movb	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
000005b1	movl	%edi,(%esp)
000005b4	calll	_gethostbyname
000005b9	testl	%eax,%eax
000005bb	je	0x000005de
000005bd	movl	0x10(%eax),%eax
000005c0	movl	(%eax),%eax
000005c2	movl	(%eax),%eax
000005c4	movl	%eax,0x04(%ebx)
000005c7	testl	%esi,%esi
000005c9	je	0x000005de
000005cb	leal	0x01(%esi),%eax
000005ce	movl	%eax,(%esp)
000005d1	calll	_atoi
000005d6	rolw	$0x08,%ax
000005da	movw	%ax,0x08(%ebx)
000005de	movl	0xfffffed8(%ebp),%eax
000005e4	movl	(%eax),%eax
000005e6	cmpl	0xf0(%ebp),%eax
000005e9	jne	0x000005f6
000005eb	addl	$0x0000013c,%esp
000005f1	popl	%esi
000005f2	popl	%edi
000005f3	popl	%ebx
000005f4	popl	%ebp
000005f5	ret
000005f6	calll	___stack_chk_fail
000005fb	nopl	netadr_s::CompareAdr(netadr_s const&, bool) const(%eax,%eax)
netadr_s::operator<(netadr_s const&) const:
00000600	pushl	%edi
00000601	pushl	%esi
00000602	movl	0x0c(%esp),%eax
00000606	movl	0x04(%eax),%esi
00000609	movl	0x10(%esp),%ecx
0000060d	movl	0x04(%ecx),%edi
00000610	movb	$0x01,%dl
00000612	cmpl	%esi,%edi
00000614	jb	0x00000627
00000616	xorb	%dl,%dl
00000618	cmpl	%esi,%edi
0000061a	ja	0x00000627
0000061c	movw	0x08(%ecx),%cx
00000620	cmpw	0x08(%eax),%cx
00000624	setb	%dl
00000627	movzbl	%dl,%eax
0000062a	popl	%esi
0000062b	popl	%edi
0000062c	ret
0000062d	nopl	(%eax)
netadr_s::SetFromSocket(int):
00000630	pushl	%ebp
00000631	movl	%esp,%ebp
00000633	pushl	%esi
00000634	subl	$0x24,%esp
00000637	movl	0x08(%ebp),%esi
0000063a	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%esi)
00000641	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
00000647	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%esi)
0000064d	movl	$0x00000003,(%esi)
00000653	movl	$0x00000010,0xe4(%ebp)
0000065a	leal	0xe4(%ebp),%eax
0000065d	movl	%eax,0x08(%esp)
00000661	leal	0xe8(%ebp),%eax
00000664	movl	%eax,0x04(%esp)
00000668	movl	0x0c(%ebp),%eax
0000066b	movl	%eax,(%esp)
0000066e	calll	_getsockname$UNIX2003
00000673	testl	%eax,%eax
00000675	jne	0x000006a6
00000677	cmpb	$0x02,0xe9(%ebp)
0000067b	jne	0x00000693
0000067d	movl	$0x00000003,(%esi)
00000683	movl	0xec(%ebp),%eax
00000686	movl	%eax,0x04(%esi)
00000689	movw	0xea(%ebp),%ax
0000068d	movw	%ax,0x08(%esi)
00000691	jmp	0x000006a6
00000693	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,0x04(%esi)
0000069a	movl	netadr_s::CompareAdr(netadr_s const&, bool) const,(%esi)
000006a0	movw	netadr_s::CompareAdr(netadr_s const&, bool) const,0x08(%esi)
000006a6	addl	$0x24,%esp
000006a9	popl	%esi
000006aa	popl	%ebp
000006ab	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(newbitbuf.o):
(__TEXT,__text) section
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(processor_detect_linux.o):
(__TEXT,__text) section
CheckMMXTechnology():
00000000	pushl	%esi
00000001	movl	$0x00000001,%eax
00000006	pushl	%ebx
00000007	cpuid
00000009	movl	%ebx,%esi
0000000b	popl	%ebx
0000000c	andl	$0x00800000,%edx
00000012	shrl	$0x17,%edx
00000015	movl	%edx,%eax
00000017	popl	%esi
00000018	ret
00000019	nopl	CheckMMXTechnology()(%eax)
CheckSSETechnology():
00000020	pushl	%esi
00000021	movl	$0x00000001,%eax
00000026	pushl	%ebx
00000027	cpuid
00000029	movl	%ebx,%esi
0000002b	popl	%ebx
0000002c	andl	$0x02000000,%edx
00000032	shrl	$0x19,%edx
00000035	movl	%edx,%eax
00000037	popl	%esi
00000038	ret
00000039	nopl	CheckMMXTechnology()(%eax)
CheckSSE2Technology():
00000040	pushl	%esi
00000041	movl	$0x00000001,%eax
00000046	pushl	%ebx
00000047	cpuid
00000049	movl	%ebx,%esi
0000004b	popl	%ebx
0000004c	andl	$0x04000000,%edx
00000052	shrl	$0x1a,%edx
00000055	movl	%edx,%eax
00000057	popl	%esi
00000058	ret
00000059	nopl	CheckMMXTechnology()(%eax)
Check3DNowTechnology():
00000060	pushl	%esi
00000061	movl	$0x80000000,%eax
00000066	pushl	%ebx
00000067	cpuid
00000069	movl	%ebx,%esi
0000006b	popl	%ebx
0000006c	cmpl	$0x80000001,%eax
00000071	jae	0x00000077
00000073	xorb	%dl,%dl
00000075	jmp	0x00000085
00000077	movl	$0x80000001,%eax
0000007c	pushl	%ebx
0000007d	cpuid
0000007f	movl	%ebx,%esi
00000081	popl	%ebx
00000082	shrl	$0x1f,%edx
00000085	movzbl	%dl,%eax
00000088	popl	%esi
00000089	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(rangecheckedvar.o):
(__TEXT,__text) section
CDisableRangeChecks::CDisableRangeChecks():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%esi
00000004	pushl	%eax
00000005	calll	0x0000000a
0000000a	popl	%esi
0000000b	calll	_ThreadInMainThread
00000010	cmpb	$0x01,%al
00000012	jne	0x00000021
00000014	incl	g_nDisables-0xa(%esi)
0000001a	movb	CDisableRangeChecks::CDisableRangeChecks(),_g_bDoRangeChecks-0xa(%esi)
00000021	addl	$0x04,%esp
00000024	popl	%esi
00000025	popl	%ebp
00000026	ret
00000027	nopw	CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::CDisableRangeChecks():
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%esi
00000034	pushl	%eax
00000035	calll	0x0000003a
0000003a	popl	%esi
0000003b	calll	_ThreadInMainThread
00000040	cmpb	$0x01,%al
00000042	jne	0x00000051
00000044	incl	g_nDisables-0x3a(%esi)
0000004a	movb	CDisableRangeChecks::CDisableRangeChecks(),_g_bDoRangeChecks-0x3a(%esi)
00000051	addl	$0x04,%esp
00000054	popl	%esi
00000055	popl	%ebp
00000056	ret
00000057	nopw	CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::~CDisableRangeChecks():
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	pushl	%esi
00000064	pushl	%eax
00000065	calll	0x0000006a
0000006a	popl	%esi
0000006b	calll	_ThreadInMainThread
00000070	cmpb	$0x01,%al
00000072	jne	0x0000008c
00000074	movl	g_nDisables-0x6a(%esi),%eax
0000007a	decl	%eax
0000007b	movl	%eax,g_nDisables-0x6a(%esi)
00000081	testl	%eax,%eax
00000083	jne	0x0000008c
00000085	movb	$0x01,_g_bDoRangeChecks-0x6a(%esi)
0000008c	addl	$0x04,%esp
0000008f	popl	%esi
00000090	popl	%ebp
00000091	ret
00000092	nopw	%cs:CDisableRangeChecks::CDisableRangeChecks()(%eax,%eax)
CDisableRangeChecks::~CDisableRangeChecks():
000000a0	pushl	%ebp
000000a1	movl	%esp,%ebp
000000a3	pushl	%esi
000000a4	pushl	%eax
000000a5	calll	0x000000aa
000000aa	popl	%esi
000000ab	calll	_ThreadInMainThread
000000b0	cmpb	$0x01,%al
000000b2	jne	0x000000cc
000000b4	movl	g_nDisables-0xaa(%esi),%eax
000000ba	decl	%eax
000000bb	movl	%eax,g_nDisables-0xaa(%esi)
000000c1	testl	%eax,%eax
000000c3	jne	0x000000cc
000000c5	movb	$0x01,_g_bDoRangeChecks-0xaa(%esi)
000000cc	addl	$0x04,%esp
000000cf	popl	%esi
000000d0	popl	%ebp
000000d1	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(reliabletimer.o):
(__TEXT,__text) section
CReliableTimer::CReliableTimer():
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	CReliableTimer::CReliableTimer(),0x04(%ecx)
00000011	movl	CReliableTimer::CReliableTimer(),(%ecx)
00000017	movl	CReliableTimer::CReliableTimer(),0x0c(%ecx)
0000001e	movl	CReliableTimer::CReliableTimer(),0x08(%ecx)
00000025	movl	CReliableTimer::CReliableTimer(),0x14(%ecx)
0000002c	movl	CReliableTimer::CReliableTimer(),0x10(%ecx)
00000033	movl	CReliableTimer::sm_nPerformanceFrequency-0x5(%eax),%ecx
00000039	orl	CReliableTimer::sm_nPerformanceFrequency-0x5+0x00000004(%eax),%ecx
0000003f	jne	0x00000053
00000041	movl	0x18d6-0x5(%eax),%ecx
00000047	movsd	(%ecx),%xmm0
0000004b	movsd	%xmm0,CReliableTimer::sm_nPerformanceFrequency-0x5(%eax)
00000053	ret
00000054	nopw	%cs:CReliableTimer::CReliableTimer()(%eax,%eax)
CReliableTimer::CReliableTimer():
00000060	calll	0x00000065
00000065	popl	%eax
00000066	movl	0x04(%esp),%ecx
0000006a	movl	CReliableTimer::CReliableTimer(),0x04(%ecx)
00000071	movl	CReliableTimer::CReliableTimer(),(%ecx)
00000077	movl	CReliableTimer::CReliableTimer(),0x0c(%ecx)
0000007e	movl	CReliableTimer::CReliableTimer(),0x08(%ecx)
00000085	movl	CReliableTimer::CReliableTimer(),0x14(%ecx)
0000008c	movl	CReliableTimer::CReliableTimer(),0x10(%ecx)
00000093	movl	CReliableTimer::sm_nPerformanceFrequency-0x65(%eax),%ecx
00000099	orl	CReliableTimer::sm_nPerformanceFrequency-0x65+0x00000004(%eax),%ecx
0000009f	jne	0x000000b3
000000a1	movl	0x18d6-0x65(%eax),%ecx
000000a7	movsd	(%ecx),%xmm0
000000ab	movsd	%xmm0,CReliableTimer::sm_nPerformanceFrequency-0x65(%eax)
000000b3	ret
000000b4	nopw	%cs:CReliableTimer::CReliableTimer()(%eax,%eax)
CReliableTimer::GetPerformanceCountNow():
000000c0	rdtsc
000000c2	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(snappy-sinksource.o):
(__TEXT,__text) section
snappy::Source::~Source():
00000000	jmp	operator delete(void*)
00000005	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Source::~Source():
00000010	ret
00000011	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Source::~Source():
00000020	ret
00000021	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000030	jmp	operator delete(void*)
00000035	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000040	ret
00000041	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::~Sink():
00000050	ret
00000051	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::Sink::GetAppendBuffer(unsigned long, char*):
00000060	movl	0x0c(%esp),%eax
00000064	ret
00000065	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000070	jmp	operator delete(void*)
00000075	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000080	ret
00000081	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::~ByteArraySource():
00000090	ret
00000091	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Available() const:
000000a0	movl	0x04(%esp),%eax
000000a4	movl	0x08(%eax),%eax
000000a7	ret
000000a8	nopl	snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Peek(unsigned long*):
000000b0	movl	0x04(%esp),%eax
000000b4	movl	0x08(%eax),%ecx
000000b7	movl	0x08(%esp),%edx
000000bb	movl	%ecx,(%edx)
000000bd	movl	0x04(%eax),%eax
000000c0	ret
000000c1	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::ByteArraySource::Skip(unsigned long):
000000d0	movl	0x08(%esp),%eax
000000d4	movl	0x04(%esp),%ecx
000000d8	subl	%eax,0x08(%ecx)
000000db	addl	%eax,0x04(%ecx)
000000de	ret
000000df	nop
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
000000e0	jmp	operator delete(void*)
000000e5	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
000000f0	ret
000000f1	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::~UncheckedByteArraySink():
00000100	ret
00000101	nopl	%cs:snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::Append(char const*, unsigned long):
00000110	pushl	%ebp
00000111	movl	%esp,%ebp
00000113	pushl	%edi
00000114	pushl	%esi
00000115	subl	snappy::Source::~Source(),%esp
00000118	movl	0x08(%ebp),%esi
0000011b	movl	0x04(%esi),%eax
0000011e	movl	snappy::Source::~Source()(%ebp),%edi
00000121	movl	0x0c(%ebp),%ecx
00000124	cmpl	%ecx,%eax
00000126	je	0x0000013b
00000128	movl	%edi,0x08(%esp)
0000012c	movl	%ecx,0x04(%esp)
00000130	movl	%eax,(%esp)
00000133	calll	_memcpy
00000138	movl	0x04(%esi),%eax
0000013b	addl	%edi,%eax
0000013d	movl	%eax,0x04(%esi)
00000140	addl	snappy::Source::~Source(),%esp
00000143	popl	%esi
00000144	popl	%edi
00000145	popl	%ebp
00000146	ret
00000147	nopw	snappy::Source::~Source()(%eax,%eax)
snappy::UncheckedByteArraySink::GetAppendBuffer(unsigned long, char*):
00000150	movl	0x04(%esp),%eax
00000154	movl	0x04(%eax),%eax
00000157	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(snappy-stubs-internal.o):
(__TEXT,__text) section
snappy::Varint::Append32(std::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	movl	0x0c(%ebp),%ecx
00000009	movl	0x08(%ebp),%eax
0000000c	cmpl	$0x7f,%ecx
0000000f	ja	0x0000001c
00000011	movb	%cl,0xfb(%ebp)
00000014	leal	0xfc(%ebp),%ecx
00000017	jmp	0x000000a4
0000001c	movl	%ecx,%edx
0000001e	orl	$0x00000080,%edx
00000024	cmpl	$0x00003fff,%ecx
0000002a	ja	0x0000003a
0000002c	movb	%dl,0xfb(%ebp)
0000002f	shrl	$0x07,%ecx
00000032	movb	%cl,0xfc(%ebp)
00000035	leal	0xfd(%ebp),%ecx
00000038	jmp	0x000000a4
0000003a	cmpl	$0x001fffff,%ecx
00000040	ja	0x0000005e
00000042	movb	%dl,0xfb(%ebp)
00000045	movl	%ecx,%edx
00000047	shrl	$0x07,%edx
0000004a	orl	$0x00000080,%edx
00000050	movb	%dl,0xfc(%ebp)
00000053	shrl	$0x0e,%ecx
00000056	movb	%cl,0xfd(%ebp)
00000059	leal	0xfe(%ebp),%ecx
0000005c	jmp	0x000000a4
0000005e	movb	%dl,0xfb(%ebp)
00000061	movl	%ecx,%edx
00000063	shrl	$0x07,%edx
00000066	orl	$0x00000080,%edx
0000006c	movb	%dl,0xfc(%ebp)
0000006f	movl	%ecx,%edx
00000071	shrl	$0x0e,%edx
00000074	orl	$0x00000080,%edx
0000007a	movb	%dl,0xfd(%ebp)
0000007d	movl	%ecx,%edx
0000007f	shrl	$0x15,%edx
00000082	cmpl	$0x0fffffff,%ecx
00000088	ja	0x00000092
0000008a	movb	%dl,0xfe(%ebp)
0000008d	leal	0xff(%ebp),%ecx
00000090	jmp	0x000000a4
00000092	orl	$0x00000080,%edx
00000098	movb	%dl,0xfe(%ebp)
0000009b	shrl	$0x1c,%ecx
0000009e	movb	%cl,0xff(%ebp)
000000a1	leal	snappy::Varint::Append32(std::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned int)(%ebp),%ecx
000000a4	leal	0xfb(%ebp),%edx
000000a7	subl	%edx,%ecx
000000a9	movl	%ecx,0x08(%esp)
000000ad	movl	%edx,0x04(%esp)
000000b1	movl	%eax,(%esp)
000000b4	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)
000000b9	addl	$0x18,%esp
000000bc	popl	%ebp
000000bd	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(snappy.o):
(__TEXT,__text) section
snappy::MaxCompressedLength(unsigned long):
00000000	movl	0x04(%esp),%ecx
00000004	movl	$0xaaaaaaab,%edx
00000009	movl	%ecx,%eax
0000000b	mull	%edx
0000000d	shrl	$0x02,%edx
00000010	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%ecx,%edx),%eax
00000014	ret
00000015	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*):
00000020	pushl	%ebx
00000021	pushl	%edi
00000022	pushl	%esi
00000023	xorb	%bl,%bl
00000025	movl	0x14(%esp),%esi
00000029	testl	%esi,%esi
0000002b	jle	0x000000c8
00000031	movl	0x18(%esp),%eax
00000035	movl	0x10(%esp),%ecx
00000039	movzbl	(%ecx),%edx
0000003c	movl	%edx,%edi
0000003e	andl	$0x7f,%edi
00000041	testb	%dl,%dl
00000043	js	0x00000048
00000045	incl	%ecx
00000046	jmp	0x000000be
00000048	xorb	%bl,%bl
0000004a	cmpl	$0x02,%esi
0000004d	jl	0x000000c8
0000004f	movzbl	0x01(%ecx),%edx
00000053	movl	%edx,%ebx
00000055	andl	$0x7f,%ebx
00000058	shll	$0x07,%ebx
0000005b	orl	%ebx,%edi
0000005d	testb	%dl,%dl
0000005f	js	0x00000066
00000061	addl	$0x02,%ecx
00000064	jmp	0x000000be
00000066	xorb	%bl,%bl
00000068	cmpl	$0x03,%esi
0000006b	jl	0x000000c8
0000006d	movzbl	0x02(%ecx),%edx
00000071	movl	%edx,%ebx
00000073	andl	$0x7f,%ebx
00000076	shll	$0x0e,%ebx
00000079	orl	%ebx,%edi
0000007b	testb	%dl,%dl
0000007d	js	0x00000084
0000007f	addl	$0x03,%ecx
00000082	jmp	0x000000be
00000084	xorb	%bl,%bl
00000086	cmpl	$0x04,%esi
00000089	jl	0x000000c8
0000008b	movzbl	0x03(%ecx),%edx
0000008f	movl	%edx,%ebx
00000091	andl	$0x7f,%ebx
00000094	shll	$0x15,%ebx
00000097	orl	%ebx,%edi
00000099	testb	%dl,%dl
0000009b	js	0x000000a2
0000009d	addl	$0x04,%ecx
000000a0	jmp	0x000000be
000000a2	xorb	%bl,%bl
000000a4	cmpl	$0x05,%esi
000000a7	jl	0x000000c8
000000a9	movzbl	0x04(%ecx),%edx
000000ad	xorb	%bl,%bl
000000af	cmpb	$0x0f,%dl
000000b2	ja	0x000000c8
000000b4	shll	$0x1c,%edx
000000b7	orl	%edi,%edx
000000b9	addl	$0x05,%ecx
000000bc	movl	%edx,%edi
000000be	xorb	%bl,%bl
000000c0	testl	%ecx,%ecx
000000c2	je	0x000000c8
000000c4	movl	%edi,(%eax)
000000c6	movb	$0x01,%bl
000000c8	movzbl	%bl,%eax
000000cb	popl	%esi
000000cc	popl	%edi
000000cd	popl	%ebx
000000ce	ret
000000cf	nop
snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*):
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%ebx
000000d4	pushl	%edi
000000d5	pushl	%esi
000000d6	subl	$0x4c,%esp
000000d9	calll	0x000000de
000000de	popl	%esi
000000df	movl	$0x00000100,%edi
000000e4	movl	0x0c(%ebp),%eax
000000e7	cmpl	$0x00000101,%eax
000000ec	jb	0x000000fe
000000ee	nop
000000f0	addl	%edi,%edi
000000f2	cmpl	$0x00003fff,%edi
000000f8	jg	0x000000fe
000000fa	cmpl	%eax,%edi
000000fc	jb	0x000000f0
000000fe	leal	0xff(%edi),%eax
00000101	testl	%edi,%eax
00000103	je	0x0000016e
00000105	leal	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
00000108	movl	%eax,0x08(%esp)
0000010c	leal	0xe567-0xde(%esi),%eax
00000112	movl	%eax,0x04(%esp)
00000116	leal	0xd8(%ebp),%eax
00000119	movl	%eax,(%esp)
0000011c	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000121	movl	0x10864-0xde(%esi),%eax
00000127	movl	(%eax),%ecx
00000129	movl	0xd8(%ebp),%eax
0000012c	movl	%ecx,0x04(%esp)
00000130	movl	%eax,(%esp)
00000133	calll	_fputs
00000138	movl	0xd8(%ebp),%ecx
0000013b	leal	0xf4(%ecx),%eax
0000013e	cmpl	0x10854-0xde(%esi),%eax
00000144	je	0x00000163
00000146	movl	$0xffffffff,%edx
0000014b	lock/xaddl	%edx,0xfc(%ecx)
00000150	testl	%edx,%edx
00000152	jg	0x00000163
00000154	leal	0xf0(%ebp),%ecx
00000157	movl	%ecx,0x04(%esp)
0000015b	movl	%eax,(%esp)
0000015e	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
00000163	leal	0xe0(%ebp),%eax
00000166	movl	%eax,(%esp)
00000169	calll	snappy::LogMessageCrash::~LogMessageCrash()
0000016e	cmpl	$0x00004001,%edi
00000174	jl	0x000001df
00000176	leal	0xb8(%ebp),%eax
00000179	movl	%eax,0x08(%esp)
0000017d	leal	0xe57e-0xde(%esi),%eax
00000183	movl	%eax,0x04(%esp)
00000187	leal	0xc0(%ebp),%eax
0000018a	movl	%eax,(%esp)
0000018d	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000192	movl	0x10864-0xde(%esi),%eax
00000198	movl	(%eax),%ecx
0000019a	movl	0xc0(%ebp),%eax
0000019d	movl	%ecx,0x04(%esp)
000001a1	movl	%eax,(%esp)
000001a4	calll	_fputs
000001a9	movl	0xc0(%ebp),%ecx
000001ac	leal	0xf4(%ecx),%eax
000001af	cmpl	0x10854-0xde(%esi),%eax
000001b5	je	0x000001d4
000001b7	movl	$0xffffffff,%edx
000001bc	lock/xaddl	%edx,0xfc(%ecx)
000001c1	testl	%edx,%edx
000001c3	jg	0x000001d4
000001c5	leal	0xe8(%ebp),%ecx
000001c8	movl	%ecx,0x04(%esp)
000001cc	movl	%eax,(%esp)
000001cf	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
000001d4	leal	0xc8(%ebp),%eax
000001d7	movl	%eax,(%esp)
000001da	calll	snappy::LogMessageCrash::~LogMessageCrash()
000001df	movl	0x08(%ebp),%ebx
000001e2	cmpl	$0x00000400,%edi
000001e8	ja	0x00000204
000001ea	movl	%ebx,%esi
000001ec	jmp	0x00000222
000001ee	leal	0xe0(%ebp),%eax
000001f1	movl	%eax,(%esp)
000001f4	calll	snappy::LogMessageCrash::~LogMessageCrash()
000001f9	leal	0xc8(%ebp),%eax
000001fc	movl	%eax,(%esp)
000001ff	calll	snappy::LogMessageCrash::~LogMessageCrash()
00000204	movl	0x00000800(%ebx),%esi
0000020a	testl	%esi,%esi
0000020c	jne	0x00000222
0000020e	movl	$0x00008000,(%esp)
00000215	calll	operator new[](unsigned long)
0000021a	movl	%eax,%esi
0000021c	movl	%esi,0x00000800(%ebx)
00000222	movl	0x10(%ebp),%eax
00000225	movl	%edi,(%eax)
00000227	addl	%edi,%edi
00000229	movl	%edi,0x08(%esp)
0000022d	movl	%esi,(%esp)
00000230	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
00000238	calll	_memset
0000023d	movl	%esi,%eax
0000023f	addl	$0x4c,%esp
00000242	popl	%esi
00000243	popl	%edi
00000244	popl	%ebx
00000245	popl	%ebp
00000246	ret
00000247	calll	std::terminate()
0000024c	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int):
00000250	pushl	%ebp
00000251	movl	%esp,%ebp
00000253	pushl	%ebx
00000254	pushl	%edi
00000255	pushl	%esi
00000256	subl	$0x6c,%esp
00000259	calll	0x0000025e
0000025e	popl	%esi
0000025f	movl	0x0c(%ebp),%ecx
00000262	cmpl	$0x00008001,%ecx
00000268	jae	0x00000700
0000026e	movl	0x18(%ebp),%edx
00000271	leal	0xff(%edx),%eax
00000274	testl	%edx,%eax
00000276	je	0x000002e1
00000278	leal	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
0000027b	movl	%eax,0x08(%esp)
0000027f	leal	0xe595-0x25e(%esi),%eax
00000285	movl	%eax,0x04(%esp)
00000289	leal	0xd8(%ebp),%eax
0000028c	movl	%eax,(%esp)
0000028f	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00000294	movl	0x10864-0x25e(%esi),%eax
0000029a	movl	(%eax),%ecx
0000029c	movl	0xd8(%ebp),%eax
0000029f	movl	%ecx,0x04(%esp)
000002a3	movl	%eax,(%esp)
000002a6	calll	_fputs
000002ab	movl	0xd8(%ebp),%ecx
000002ae	leal	0xf4(%ecx),%eax
000002b1	cmpl	0x10854-0x25e(%esi),%eax
000002b7	je	0x000002d6
000002b9	movl	$0xffffffff,%edx
000002be	lock/xaddl	%edx,0xfc(%ecx)
000002c3	testl	%edx,%edx
000002c5	jg	0x000002d6
000002c7	leal	0xf0(%ebp),%ecx
000002ca	movl	%ecx,0x04(%esp)
000002ce	movl	%eax,(%esp)
000002d1	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_M_destroy(std::allocator<char> const&)
000002d6	leal	0xe0(%ebp),%eax
000002d9	movl	%eax,(%esp)
000002dc	calll	snappy::LogMessageCrash::~LogMessageCrash()
000002e1	movl	$0xffffffff,%eax
000002e6	testl	%edx,%edx
000002e8	je	0x0000034b
000002ea	movl	%edx,%esi
000002ec	shrl	$0x10,%esi
000002ef	testl	%esi,%esi
000002f1	cmovel	%edx,%esi
000002f4	setne	%al
000002f7	movl	%esi,%edi
000002f9	shrl	$0x08,%edi
000002fc	testl	%edi,%edi
000002fe	cmovel	%esi,%edi
00000301	setne	%dl
00000304	movl	%edi,%esi
00000306	shrl	$0x04,%esi
00000309	testl	%esi,%esi
0000030b	cmovel	%edi,%esi
0000030e	setne	%ah
00000311	movl	%esi,%edi
00000313	shrl	$0x02,%edi
00000316	testl	%edi,%edi
00000318	cmovel	%esi,%edi
0000031b	sete	%dh
0000031e	cmpl	$0x01,%edi
00000321	seta	%bl
00000324	movzbl	%bl,%esi
00000327	notb	%dh
00000329	movzbl	%dh,%edi
0000032c	andl	$0x01,%edi
0000032f	addl	%edi,%edi
00000331	movzbl	%ah,%ebx
00000334	shll	$0x02,%ebx
00000337	movzbl	%dl,%edx
0000033a	shll	$0x03,%edx
0000033d	movzbl	%al,%eax
00000340	shll	$0x04,%eax
00000343	orl	%edx,%eax
00000345	orl	%ebx,%eax
00000347	orl	%edi,%eax
00000349	orl	%esi,%eax
0000034b	movl	0x10(%ebp),%edi
0000034e	movl	0x08(%ebp),%esi
00000351	leal	(%esi,%ecx),%edx
00000354	movl	%edx,0xcc(%ebp)
00000357	cmpl	$0x0f,%ecx
0000035a	jb	0x0000039c
0000035c	movl	%edi,0xbc(%ebp)
0000035f	movl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%edx
00000364	subl	%eax,%edx
00000366	movl	%edx,0xb8(%ebp)
00000369	leal	0xf1(%ecx,%esi),%eax
0000036d	movl	%eax,0xa8(%ebp)
00000370	leal	0xfc(%ecx,%esi),%eax
00000374	movl	%eax,0xa4(%ebp)
00000377	movl	0x01(%esi),%eax
0000037a	movl	%eax,0xc4(%ebp)
0000037d	leal	0x01(%esi),%edx
00000380	movl	%esi,0xb4(%ebp)
00000383	movl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%ecx
00000388	movl	%edx,%eax
0000038a	movl	%ecx,%edx
0000038c	shrl	$0x05,%edx
0000038f	addl	%eax,%edx
00000391	cmpl	0xa8(%ebp),%edx
00000394	jbe	0x000003b9
00000396	movl	0xb4(%ebp),%esi
00000399	movl	0xbc(%ebp),%edi
0000039c	movl	0xcc(%ebp),%eax
0000039f	cmpl	%eax,%esi
000003a1	jb	0x000006af
000003a7	movl	%edi,%esi
000003a9	jmp	0x000006f1
000003ae	leal	0xe0(%ebp),%eax
000003b1	movl	%eax,(%esp)
000003b4	calll	snappy::LogMessageCrash::~LogMessageCrash()
000003b9	imull	$0x1e35a7bd,0xc4(%ebp),%esi
000003c0	movl	%ecx,0xc0(%ebp)
000003c3	movl	0xb8(%ebp),%ecx
000003c6	shrl	%cl,%esi
000003c8	movl	0x14(%ebp),%ecx
000003cb	movzwl	(%ecx,%esi,2),%edi
000003cf	movl	%edi,0xc8(%ebp)
000003d2	movl	%eax,%edi
000003d4	movl	%edi,%eax
000003d6	movl	0x08(%ebp),%ebx
000003d9	subl	%ebx,%eax
000003db	movl	(%edx),%ebx
000003dd	movl	%ebx,0xc4(%ebp)
000003e0	movl	0xc8(%ebp),%ebx
000003e3	movw	%ax,(%ecx,%esi,2)
000003e7	movl	0xc0(%ebp),%ecx
000003ea	incl	%ecx
000003eb	movl	(%edi),%eax
000003ed	movl	0x08(%ebp),%esi
000003f0	cmpl	(%esi,%ebx),%eax
000003f3	jne	0x00000388
000003f5	addl	0x08(%ebp),%ebx
000003f8	movl	%edi,%edx
000003fa	movl	%edi,0xb0(%ebp)
000003fd	movl	0xb4(%ebp),%edi
00000400	subl	%edi,%edx
00000402	leal	0xff(%edx),%eax
00000405	cmpl	$0x3c,%eax
00000408	jl	0x00000448
0000040a	movl	%edx,0xc8(%ebp)
0000040d	movl	0xbc(%ebp),%edx
00000410	leal	0x01(%edx),%esi
00000413	movb	$0xec,%cl
00000415	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000420	movb	%al,(%esi)
00000422	addb	$0x04,%cl
00000425	incl	%esi
00000426	sarl	$0x08,%eax
00000429	testl	%eax,%eax
0000042b	jg	0x00000420
0000042d	movb	%cl,(%edx)
0000042f	movl	0xc8(%ebp),%edx
00000432	movl	%edx,0x08(%esp)
00000436	movl	%edi,0x04(%esp)
0000043a	movl	%esi,(%esp)
0000043d	movl	%edx,%edi
0000043f	calll	_memcpy
00000444	movl	%edi,%edx
00000446	jmp	0x0000046b
00000448	shll	$0x02,%eax
0000044b	movl	0xbc(%ebp),%ecx
0000044e	movb	%al,(%ecx)
00000450	leal	0x01(%ecx),%esi
00000453	cmpl	$0x10,%edx
00000456	jg	0x00000432
00000458	movsd	(%edi),%xmm0
0000045c	movsd	%xmm0,0x01(%ecx)
00000461	movsd	0x08(%edi),%xmm0
00000466	movsd	%xmm0,0x09(%ecx)
0000046b	movl	0xb0(%ebp),%eax
0000046e	addl	%edx,%esi
00000470	movl	%esi,0xc0(%ebp)
00000473	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000480	movl	%eax,%ecx
00000482	movl	%ecx,0xbc(%ebp)
00000485	leal	0x04(%ecx),%eax
00000488	xorl	%edx,%edx
0000048a	movl	%ecx,0xc4(%ebp)
0000048d	movl	0xa4(%ebp),%edi
00000490	leal	(%eax,%edx),%ecx
00000493	cmpl	%edi,%ecx
00000495	ja	0x00000526
0000049b	movl	(%eax,%edx),%esi
0000049e	movl	0x04(%ebx,%edx),%ecx
000004a2	addl	$0x04,%edx
000004a5	cmpl	%ecx,%esi
000004a7	je	0x00000490
000004a9	movl	%ebx,0xc8(%ebp)
000004ac	xorl	%esi,%ecx
000004ae	movl	%ecx,%eax
000004b0	shll	$0x10,%eax
000004b3	testl	%eax,%eax
000004b5	cmovel	%ecx,%eax
000004b8	movl	$0x0000000f,%ecx
000004bd	movl	%ecx,%esi
000004bf	movl	$0x0000001f,%ecx
000004c4	cmovel	%ecx,%esi
000004c7	movl	%esi,0xb4(%ebp)
000004ca	movl	%eax,%esi
000004cc	shll	$0x08,%esi
000004cf	testl	%esi,%esi
000004d1	cmovel	%eax,%esi
000004d4	movl	$0xfffffff8,%eax
000004d9	movl	snappy::MaxCompressedLength(unsigned long),%edi
000004de	cmovel	%edi,%eax
000004e1	movl	%esi,%ecx
000004e3	shll	$0x04,%ecx
000004e6	testl	%ecx,%ecx
000004e8	cmovel	%esi,%ecx
000004eb	movl	$0xfffffffc,%ebx
000004f0	cmovel	%edi,%ebx
000004f3	leal	snappy::MaxCompressedLength(unsigned long)(,%ecx,4),%esi
000004fa	testl	%esi,%esi
000004fc	cmovnel	%esi,%ecx
000004ff	movl	$0xfffffffe,%esi
00000504	cmovel	%edi,%esi
00000507	andl	$0x7fffffff,%ecx
0000050d	cmpl	$0x01,%ecx
00000510	sbbl	%ecx,%ecx
00000512	notl	%ecx
00000514	addl	0xb4(%ebp),%eax
00000517	addl	%ebx,%eax
00000519	addl	%esi,%eax
0000051b	addl	%ecx,%eax
0000051d	sarl	$0x03,%eax
00000520	leal	0xfc(%eax,%edx),%edx
00000524	jmp	0x00000553
00000526	movl	%edi,0xa4(%ebp)
00000529	leal	(%ebx,%edx),%esi
0000052c	movl	%ebx,0xc8(%ebp)
0000052f	movl	0xbc(%ebp),%eax
00000532	leal	0x04(%eax,%edx),%edi
00000536	xorl	%eax,%eax
00000538	jmp	0x00000541
0000053a	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000540	incl	%eax
00000541	leal	(%edi,%eax),%ecx
00000544	cmpl	0xcc(%ebp),%ecx
00000547	jae	0x00000551
00000549	movb	0x04(%esi,%eax),%bl
0000054d	cmpb	(%ecx),%bl
0000054f	je	0x00000540
00000551	addl	%eax,%edx
00000553	movl	0xc0(%ebp),%ebx
00000556	movl	0xc4(%ebp),%ecx
00000559	subl	0xc8(%ebp),%ecx
0000055c	leal	0x04(%edx),%eax
0000055f	cmpl	$0x44,%eax
00000562	jl	0x000005a6
00000564	leal	0x01(%ebx),%edi
00000567	leal	0xc0(%edx),%esi
0000056a	movl	%ecx,%ebx
0000056c	movl	%esi,%ecx
0000056e	shrl	$0x06,%ecx
00000571	leal	(%ecx,%ecx,2),%ecx
00000574	movl	%ecx,0xc8(%ebp)
00000577	movl	%ebx,%ecx
00000579	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
00000580	movb	$0xfe,0xff(%edi)
00000584	movw	%cx,(%edi)
00000587	addl	$0x03,%edi
0000058a	addl	$0xc0,%eax
0000058d	cmpl	$0x43,%eax
00000590	jg	0x00000580
00000592	movl	0xc0(%ebp),%eax
00000595	movl	0xc8(%ebp),%edi
00000598	leal	0x03(%edi,%eax),%eax
0000059c	movl	%eax,%ebx
0000059e	andl	$0xc0,%esi
000005a1	leal	0xc4(%edx),%eax
000005a4	subl	%esi,%eax
000005a6	cmpl	$0x41,%eax
000005a9	movl	0xbc(%ebp),%esi
000005ac	jl	0x000005bb
000005ae	movb	$0xee,(%ebx)
000005b1	movw	%cx,0x01(%ebx)
000005b5	addl	$0xc4,%eax
000005b8	addl	$0x03,%ebx
000005bb	leal	0x04(%esi,%edx),%edi
000005bf	cmpl	$0x0b,%eax
000005c2	leal	snappy::MaxCompressedLength(unsigned long)(,%eax,4),%eax
000005c9	jg	0x000005f9
000005cb	cmpl	$0x000007ff,%ecx
000005d1	jg	0x000005f9
000005d3	addl	$0x000000f0,%eax
000005d8	movl	%ecx,0xc4(%ebp)
000005db	movl	0xc4(%ebp),%ecx
000005de	shrl	$0x03,%ecx
000005e1	andl	$0x000000e0,%ecx
000005e7	orl	%eax,%ecx
000005e9	orl	$0x01,%ecx
000005ec	movb	%cl,(%ebx)
000005ee	movl	0xc4(%ebp),%eax
000005f1	movb	%al,0x01(%ebx)
000005f4	addl	$0x02,%ebx
000005f7	jmp	0x0000060a
000005f9	addl	$0x000000fc,%eax
000005fe	orl	$0x02,%eax
00000601	movb	%al,(%ebx)
00000603	movw	%cx,0x01(%ebx)
00000607	addl	$0x03,%ebx
0000060a	movl	%edi,%eax
0000060c	cmpl	0xa8(%ebp),%eax
0000060f	jae	0x000006a6
00000615	movl	%ebx,0xc0(%ebp)
00000618	movl	0x03(%edx,%esi),%ecx
0000061c	movl	%ecx,0xac(%ebp)
0000061f	movl	0x07(%edx,%esi),%esi
00000623	movl	%esi,0xc4(%ebp)
00000626	imull	$0x1e35a7bd,%ecx,%edi
0000062c	movl	0xb8(%ebp),%ecx
0000062f	shrl	%cl,%edi
00000631	movl	%eax,%ecx
00000633	movl	0x08(%ebp),%esi
00000636	subl	%esi,%ecx
00000638	movl	%ecx,0xa0(%ebp)
0000063b	movl	%eax,0xb0(%ebp)
0000063e	leal	0x0000ffff(%ecx),%eax
00000644	movl	0x14(%ebp),%ebx
00000647	movw	%ax,(%ebx,%edi,2)
0000064b	movl	0xc4(%ebp),%eax
0000064e	movl	0xac(%ebp),%ecx
00000651	shldl	$0x18,%ecx,%eax
00000655	imull	$0x1e35a7bd,%eax,%edi
0000065b	movl	0xb8(%ebp),%ecx
0000065e	shrl	%cl,%edi
00000660	movzwl	(%ebx,%edi,2),%ecx
00000664	movl	%ecx,0xb4(%ebp)
00000667	movl	0xb4(%ebp),%ecx
0000066a	leal	(%esi,%ecx),%ecx
0000066d	movl	%ecx,0xc8(%ebp)
00000670	movl	0xb4(%ebp),%ecx
00000673	cmpl	(%esi,%ecx),%eax
00000676	movl	0xb0(%ebp),%eax
00000679	movl	0xa0(%ebp),%ecx
0000067c	movw	%cx,(%ebx,%edi,2)
00000680	movl	0xc8(%ebp),%ebx
00000683	je	0x00000480
00000689	movl	0xbc(%ebp),%ecx
0000068c	leal	0x05(%edx,%ecx),%edx
00000690	movl	0xac(%ebp),%ecx
00000693	shldl	$0x10,%ecx,0xc4(%ebp)
00000698	movl	%eax,0xb4(%ebp)
0000069b	movl	0xc0(%ebp),%eax
0000069e	movl	%eax,0xbc(%ebp)
000006a1	jmp	0x00000383
000006a6	movl	%eax,%esi
000006a8	movl	%ebx,%edi
000006aa	jmp	0x0000039c
000006af	subl	%esi,%eax
000006b1	movl	%esi,%ebx
000006b3	movl	%eax,%ecx
000006b5	leal	0xff(%ecx),%eax
000006b8	movl	%ecx,%edx
000006ba	leal	0x01(%edi),%esi
000006bd	cmpl	$0x3c,%eax
000006c0	jl	0x0000070b
000006c2	movl	$0x000000ec,%ecx
000006c7	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
000006d0	movb	%al,(%esi)
000006d2	addl	$0x04,%ecx
000006d5	incl	%esi
000006d6	sarl	$0x08,%eax
000006d9	testl	%eax,%eax
000006db	jg	0x000006d0
000006dd	movb	%cl,(%edi)
000006df	movl	%esi,(%esp)
000006e2	movl	%edx,0x08(%esp)
000006e6	movl	%ebx,0x04(%esp)
000006ea	addl	%edx,%esi
000006ec	calll	_memcpy
000006f1	movl	%esi,%eax
000006f3	addl	$0x6c,%esp
000006f6	popl	%esi
000006f7	popl	%edi
000006f8	popl	%ebx
000006f9	popl	%ebp
000006fa	ret
000006fb	calll	std::terminate()
00000700	leal	0xe8(%ebp),%eax
00000703	movl	%eax,(%esp)
00000706	calll	snappy::LogMessageCrash::~LogMessageCrash()
0000070b	shll	$0x02,%eax
0000070e	movl	%eax,%ecx
00000710	jmp	0x000006dd
00000712	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::SnappyDecompressor::RefillTag():
00000720	pushl	%ebp
00000721	movl	%esp,%ebp
00000723	pushl	%ebx
00000724	pushl	%edi
00000725	pushl	%esi
00000726	subl	$0x1c,%esp
00000729	calll	0x0000072e
0000072e	popl	%ebx
0000072f	movl	0x08(%ebp),%esi
00000732	movl	0x04(%esi),%eax
00000735	movl	0x08(%esi),%edi
00000738	cmpl	%edi,%eax
0000073a	jne	0x00000778
0000073c	movl	(%esi),%eax
0000073e	movl	0x0c(%esi),%edx
00000741	movl	(%eax),%ecx
00000743	movl	%edx,0x04(%esp)
00000747	movl	%eax,(%esp)
0000074a	call	*0x10(%ecx)
0000074d	movl	(%esi),%ecx
0000074f	movl	(%ecx),%eax
00000751	leal	0xf0(%ebp),%edx
00000754	movl	%edx,0x04(%esp)
00000758	movl	%ecx,(%esp)
0000075b	call	*0x0c(%eax)
0000075e	movl	0xf0(%ebp),%edi
00000761	movl	%edi,0x0c(%esi)
00000764	testl	%edi,%edi
00000766	jne	0x00000773
00000768	movb	$0x01,0x10(%esi)
0000076c	xorb	%cl,%cl
0000076e	jmp	0x00000879
00000773	addl	%eax,%edi
00000775	movl	%edi,0x08(%esi)
00000778	movl	%esi,%edx
0000077a	subl	%eax,%edi
0000077c	movzbl	(%eax),%ecx
0000077f	movzwl	snappy::char_table-0x72e(%ebx,%ecx,2),%ebx
00000787	shrl	$0x0b,%ebx
0000078a	incl	%ebx
0000078b	movl	%ebx,0xe8(%ebp)
0000078e	cmpl	%ebx,%edi
00000790	jae	0x00000836
00000796	movl	%edi,0x08(%esp)
0000079a	movl	%eax,0x04(%esp)
0000079e	movl	%edx,%esi
000007a0	leal	0x11(%esi),%eax
000007a3	movl	%eax,0xe4(%ebp)
000007a6	movl	%eax,(%esp)
000007a9	calll	_memmove
000007ae	movl	(%esi),%eax
000007b0	movl	0x0c(%esi),%edx
000007b3	movl	(%eax),%ecx
000007b5	movl	%edx,0x04(%esp)
000007b9	movl	%eax,(%esp)
000007bc	call	*0x10(%ecx)
000007bf	movl	snappy::MaxCompressedLength(unsigned long),0x0c(%esi)
000007c6	jmp	0x00000823
000007c8	nopl	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
000007d0	movl	%esi,%ebx
000007d2	movl	(%ebx),%ecx
000007d4	movl	(%ecx),%eax
000007d6	leal	0xec(%ebp),%edx
000007d9	movl	%edx,0x04(%esp)
000007dd	movl	%ecx,(%esp)
000007e0	call	*0x0c(%eax)
000007e3	xorb	%cl,%cl
000007e5	movl	0xec(%ebp),%edx
000007e8	testl	%edx,%edx
000007ea	je	0x00000879
000007f0	movl	%eax,0x04(%esp)
000007f4	leal	0x11(%ebx,%edi),%eax
000007f8	movl	%eax,(%esp)
000007fb	movl	%ebx,%esi
000007fd	movl	0xe8(%ebp),%ebx
00000800	subl	%edi,%ebx
00000802	cmpl	%ebx,%edx
00000804	cmovbl	%edx,%ebx
00000807	movl	%ebx,0x08(%esp)
0000080b	calll	_memcpy
00000810	movl	(%esi),%ecx
00000812	movl	(%ecx),%eax
00000814	movl	%ebx,0x04(%esp)
00000818	movl	%ecx,(%esp)
0000081b	call	*0x10(%eax)
0000081e	addl	%ebx,%edi
00000820	movl	0xe8(%ebp),%ebx
00000823	cmpl	%ebx,%edi
00000825	jb	0x000007d0
00000827	movl	0xe4(%ebp),%eax
0000082a	movl	%eax,0x04(%esi)
0000082d	leal	0x11(%esi,%ebx),%eax
00000831	movl	%eax,0x08(%esi)
00000834	jmp	0x00000877
00000836	cmpl	$0x04,%edi
00000839	movl	%edx,%ebx
0000083b	ja	0x00000874
0000083d	movl	%edi,0x08(%esp)
00000841	movl	%eax,0x04(%esp)
00000845	leal	0x11(%ebx),%esi
00000848	movl	%esi,(%esp)
0000084b	calll	_memmove
00000850	movl	(%ebx),%eax
00000852	movl	0x0c(%ebx),%edx
00000855	movl	(%eax),%ecx
00000857	movl	%edx,0x04(%esp)
0000085b	movl	%eax,(%esp)
0000085e	call	*0x10(%ecx)
00000861	movl	snappy::MaxCompressedLength(unsigned long),0x0c(%ebx)
00000868	movl	%esi,0x04(%ebx)
0000086b	leal	0x11(%ebx,%edi),%eax
0000086f	movl	%eax,0x08(%ebx)
00000872	jmp	0x00000877
00000874	movl	%eax,0x04(%ebx)
00000877	movb	$0x01,%cl
00000879	movzbl	%cl,%eax
0000087c	addl	$0x1c,%esp
0000087f	popl	%esi
00000880	popl	%edi
00000881	popl	%ebx
00000882	popl	%ebp
00000883	ret
00000884	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::GetUncompressedLength(snappy::Source*, unsigned int*):
00000890	pushl	%ebp
00000891	movl	%esp,%ebp
00000893	pushl	%ebx
00000894	pushl	%edi
00000895	pushl	%esi
00000896	subl	$0x0c,%esp
00000899	movl	0x0c(%ebp),%eax
0000089c	movl	snappy::MaxCompressedLength(unsigned long),(%eax)
000008a2	xorl	%edx,%edx
000008a4	movl	0x08(%ebp),%edi
000008a7	jmp	0x000008b3
000008a9	nopl	snappy::MaxCompressedLength(unsigned long)(%eax)
000008b0	addl	$0x07,%edx
000008b3	xorb	%bl,%bl
000008b5	cmpl	$0x1f,%edx
000008b8	movl	%edx,%esi
000008ba	ja	0x00000902
000008bc	movl	(%edi),%eax
000008be	movl	0x0c(%eax),%eax
000008c1	leal	0xf0(%ebp),%ecx
000008c4	movl	%ecx,0x04(%esp)
000008c8	movl	%edi,(%esp)
000008cb	call	*%eax
000008cd	xorb	%bl,%bl
000008cf	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
000008d3	je	0x00000902
000008d5	movzbl	(%eax),%ebx
000008d8	movl	(%edi),%eax
000008da	movl	0x10(%eax),%eax
000008dd	movl	%edi,(%esp)
000008e0	movl	$0x00000001,0x04(%esp)
000008e8	call	*%eax
000008ea	movl	%ebx,%eax
000008ec	andl	$0x7f,%eax
000008ef	movl	%esi,%edx
000008f1	movb	%dl,%cl
000008f3	shll	%cl,%eax
000008f5	movl	0x0c(%ebp),%ecx
000008f8	orl	%eax,(%ecx)
000008fa	movl	%ebx,%eax
000008fc	movb	$0x01,%bl
000008fe	testb	%al,%al
00000900	js	0x000008b0
00000902	movl	(%edi),%eax
00000904	movl	%edi,(%esp)
00000907	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
0000090f	call	*0x10(%eax)
00000912	movzbl	%bl,%eax
00000915	addl	$0x0c,%esp
00000918	popl	%esi
00000919	popl	%edi
0000091a	popl	%ebx
0000091b	popl	%ebp
0000091c	ret
0000091d	movl	%eax,%esi
0000091f	movl	(%edi),%eax
00000921	movl	0x10(%eax),%eax
00000924	movl	%edi,(%esp)
00000927	movl	snappy::MaxCompressedLength(unsigned long),0x04(%esp)
0000092f	call	*%eax
00000931	movl	%esi,(%esp)
00000934	calll	__Unwind_Resume
00000939	calll	std::terminate()
0000093e	nop
snappy::Compress(snappy::Source*, snappy::Sink*):
00000940	pushl	%ebp
00000941	movl	%esp,%ebp
00000943	pushl	%ebx
00000944	pushl	%edi
00000945	pushl	%esi
00000946	subl	$0x0000084c,%esp
0000094c	movl	0x08(%ebp),%esi
0000094f	movl	(%esi),%eax
00000951	movl	%esi,(%esp)
00000954	call	*0x08(%eax)
00000957	movl	%eax,%ecx
00000959	movl	0x0c(%ebp),%edx
0000095c	cmpl	$0x7f,%ecx
0000095f	ja	0x00000972
00000961	movb	%cl,0xef(%ebp)
00000964	movl	%ecx,0xfffff7cc(%ebp)
0000096a	leal	0xf0(%ebp),%edi
0000096d	jmp	0x00000a13
00000972	movl	%ecx,%eax
00000974	orl	$0x00000080,%eax
00000979	cmpl	$0x00003fff,%ecx
0000097f	ja	0x00000997
00000981	movb	%al,0xef(%ebp)
00000984	movl	%ecx,%eax
00000986	movl	%ecx,0xfffff7cc(%ebp)
0000098c	shrl	$0x07,%eax
0000098f	movb	%al,0xf0(%ebp)
00000992	leal	0xf1(%ebp),%edi
00000995	jmp	0x00000a13
00000997	cmpl	$0x001fffff,%ecx
0000099d	ja	0x000009c2
0000099f	movb	%al,0xef(%ebp)
000009a2	movl	%ecx,%eax
000009a4	shrl	$0x07,%eax
000009a7	orl	$0x00000080,%eax
000009ac	movb	%al,0xf0(%ebp)
000009af	movl	%ecx,%eax
000009b1	movl	%ecx,0xfffff7cc(%ebp)
000009b7	shrl	$0x0e,%eax
000009ba	movb	%al,0xf1(%ebp)
000009bd	leal	0xf2(%ebp),%edi
000009c0	jmp	0x00000a13
000009c2	movb	%al,0xef(%ebp)
000009c5	movl	%ecx,%eax
000009c7	shrl	$0x07,%eax
000009ca	orl	$0x00000080,%eax
000009cf	movb	%al,0xf0(%ebp)
000009d2	movl	%ecx,%eax
000009d4	shrl	$0x0e,%eax
000009d7	orl	$0x00000080,%eax
000009dc	movb	%al,0xf1(%ebp)
000009df	movl	%ecx,%eax
000009e1	shrl	$0x15,%eax
000009e4	cmpl	$0x0fffffff,%ecx
000009ea	ja	0x000009fa
000009ec	movl	%ecx,0xfffff7cc(%ebp)
000009f2	movb	%al,0xf2(%ebp)
000009f5	leal	0xf3(%ebp),%edi
000009f8	jmp	0x00000a13
000009fa	orl	$0x00000080,%eax
000009ff	movb	%al,0xf2(%ebp)
00000a02	movl	%ecx,%eax
00000a04	movl	%ecx,0xfffff7cc(%ebp)
00000a0a	shrl	$0x1c,%eax
00000a0d	movb	%al,0xf3(%ebp)
00000a10	leal	0xf4(%ebp),%edi
00000a13	leal	0xef(%ebp),%eax
00000a16	subl	%eax,%edi
00000a18	movl	%edi,0xfffff7c4(%ebp)
00000a1e	movl	(%edx),%ecx
00000a20	movl	%edi,0x08(%esp)
00000a24	movl	%eax,0x04(%esp)
00000a28	movl	%edx,(%esp)
00000a2b	call	*0x08(%ecx)
00000a2e	movl	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00000a35	xorl	%eax,%eax
00000a37	movl	%eax,0xfffff7d0(%ebp)
00000a3d	movl	snappy::MaxCompressedLength(unsigned long),0xfffff7d8(%ebp)
00000a47	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000a50	movl	0xfffff7cc(%ebp),%eax
00000a56	testl	%eax,%eax
00000a58	jle	0x00000c75
00000a5e	movl	%eax,%edi
00000a60	movl	(%esi),%eax
00000a62	movl	0x0c(%eax),%eax
00000a65	leal	0xfffff7e4(%ebp),%ecx
00000a6b	movl	%ecx,0x04(%esp)
00000a6f	movl	%esi,(%esp)
00000a72	movl	%esi,%ebx
00000a74	call	*%eax
00000a76	movl	%eax,0xfffff7d4(%ebp)
00000a7c	cmpl	$0x00008000,%edi
00000a82	movl	%edi,%ecx
00000a84	movl	$0x00008000,%eax
00000a89	cmovgl	%eax,%ecx
00000a8c	movl	0xfffff7e4(%ebp),%edi
00000a92	cmpl	%ecx,%edi
00000a94	jb	0x00000b9d
00000a9a	movl	%ecx,%esi
00000a9c	movl	%ecx,0xfffff7e4(%ebp)
00000aa2	leal	0xfffff7e0(%ebp),%eax
00000aa8	movl	%eax,0x08(%esp)
00000aac	movl	%ecx,0x04(%esp)
00000ab0	movl	%ecx,%edi
00000ab2	leal	0xfffff7e8(%ebp),%eax
00000ab8	movl	%eax,(%esp)
00000abb	calll	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)
00000ac0	movl	%eax,0xfffff7c8(%ebp)
00000ac6	movl	%edi,0xfffff7dc(%ebp)
00000acc	movl	%edi,%eax
00000ace	movl	$0xaaaaaaab,%ecx
00000ad3	mull	%ecx
00000ad5	shrl	$0x02,%edx
00000ad8	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%edi,%edx),%edi
00000adc	cmpl	snappy::MaxCompressedLength(unsigned long),0xfffff7d0(%ebp)
00000ae3	jne	0x00000af3
00000ae5	movl	%edi,(%esp)
00000ae8	calll	operator new[](unsigned long)
00000aed	movl	%eax,0xfffff7d0(%ebp)
00000af3	movl	0x0c(%ebp),%ecx
00000af6	movl	(%ecx),%eax
00000af8	movl	0x0c(%eax),%eax
00000afb	movl	0xfffff7d0(%ebp),%edx
00000b01	movl	%edx,0x08(%esp)
00000b05	movl	%edi,0x04(%esp)
00000b09	movl	%ecx,(%esp)
00000b0c	call	*%eax
00000b0e	movl	%eax,%edx
00000b10	movl	0xfffff7e4(%ebp),%eax
00000b16	movl	0xfffff7e0(%ebp),%ecx
00000b1c	movl	%ecx,0x10(%esp)
00000b20	movl	0xfffff7c8(%ebp),%ecx
00000b26	movl	%ecx,0x0c(%esp)
00000b2a	movl	%edx,0x08(%esp)
00000b2e	movl	%eax,0x04(%esp)
00000b32	movl	0xfffff7d4(%ebp),%eax
00000b38	movl	%eax,(%esp)
00000b3b	movl	%edx,%edi
00000b3d	calll	snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int)
00000b42	movl	%edi,%edx
00000b44	movl	%eax,%edi
00000b46	subl	%edx,%edi
00000b48	movl	0x0c(%ebp),%ecx
00000b4b	movl	(%ecx),%eax
00000b4d	movl	0x08(%eax),%eax
00000b50	movl	%edi,0x08(%esp)
00000b54	movl	%edx,0x04(%esp)
00000b58	movl	%ecx,(%esp)
00000b5b	call	*%eax
00000b5d	movl	0xfffff7dc(%ebp),%eax
00000b63	subl	%eax,0xfffff7cc(%ebp)
00000b69	addl	%edi,0xfffff7c4(%ebp)
00000b6f	movl	(%ebx),%eax
00000b71	movl	0x10(%eax),%eax
00000b74	movl	%esi,0x04(%esp)
00000b78	movl	%ebx,(%esp)
00000b7b	movl	%ebx,%esi
00000b7d	call	*%eax
00000b7f	jmp	0x00000a50
00000b84	movl	%eax,%esi
00000b86	movl	0xe8(%ebp),%eax
00000b89	testl	%eax,%eax
00000b8b	je	0x00000b95
00000b8d	movl	%eax,(%esp)
00000b90	calll	operator delete[](void*)
00000b95	movl	%esi,(%esp)
00000b98	calll	__Unwind_Resume
00000b9d	movl	%ecx,0xfffff7dc(%ebp)
00000ba3	cmpl	snappy::MaxCompressedLength(unsigned long),0xfffff7d8(%ebp)
00000baa	jne	0x00000bca
00000bac	movl	0xfffff7dc(%ebp),%ecx
00000bb2	testl	%ecx,%ecx
00000bb4	movl	$0xffffffff,%eax
00000bb9	cmovnsl	%ecx,%eax
00000bbc	movl	%eax,(%esp)
00000bbf	calll	operator new[](unsigned long)
00000bc4	movl	%eax,0xfffff7d8(%ebp)
00000bca	movl	%edi,0x08(%esp)
00000bce	movl	0xfffff7d4(%ebp),%eax
00000bd4	movl	%eax,0x04(%esp)
00000bd8	movl	0xfffff7d8(%ebp),%eax
00000bde	movl	%eax,(%esp)
00000be1	calll	_memcpy
00000be6	movl	(%ebx),%eax
00000be8	movl	0x10(%eax),%eax
00000beb	movl	%edi,0x04(%esp)
00000bef	movl	%ebx,(%esp)
00000bf2	call	*%eax
00000bf4	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000c00	xorl	%esi,%esi
00000c02	movl	0xfffff7dc(%ebp),%ecx
00000c08	cmpl	%ecx,%edi
00000c0a	jb	0x00000c1d
00000c0c	movl	0xfffff7d8(%ebp),%eax
00000c12	movl	%eax,0xfffff7d4(%ebp)
00000c18	jmp	0x00000a9c
00000c1d	movl	%ecx,0xfffff7dc(%ebp)
00000c23	movl	(%ebx),%eax
00000c25	movl	0x0c(%eax),%eax
00000c28	leal	0xfffff7e4(%ebp),%ecx
00000c2e	movl	%ecx,0x04(%esp)
00000c32	movl	%ebx,(%esp)
00000c35	call	*%eax
00000c37	movl	0xfffff7e4(%ebp),%ecx
00000c3d	movl	%eax,0x04(%esp)
00000c41	movl	0xfffff7d8(%ebp),%eax
00000c47	leal	(%eax,%edi),%eax
00000c4a	movl	%eax,(%esp)
00000c4d	movl	0xfffff7dc(%ebp),%esi
00000c53	subl	%edi,%esi
00000c55	cmpl	%ecx,%esi
00000c57	cmovael	%ecx,%esi
00000c5a	movl	%esi,0x08(%esp)
00000c5e	addl	%esi,%edi
00000c60	calll	_memcpy
00000c65	movl	(%ebx),%eax
00000c67	movl	0x10(%eax),%eax
00000c6a	movl	%esi,0x04(%esp)
00000c6e	movl	%ebx,(%esp)
00000c71	call	*%eax
00000c73	jmp	0x00000c00
00000c75	movl	0xfffff7d8(%ebp),%eax
00000c7b	testl	%eax,%eax
00000c7d	je	0x00000c87
00000c7f	movl	%eax,(%esp)
00000c82	calll	operator delete[](void*)
00000c87	movl	0xfffff7d0(%ebp),%eax
00000c8d	testl	%eax,%eax
00000c8f	movl	0xfffff7c4(%ebp),%esi
00000c95	je	0x00000c9f
00000c97	movl	%eax,(%esp)
00000c9a	calll	operator delete[](void*)
00000c9f	movl	0xe8(%ebp),%eax
00000ca2	testl	%eax,%eax
00000ca4	je	0x00000cae
00000ca6	movl	%eax,(%esp)
00000ca9	calll	operator delete[](void*)
00000cae	movl	%esi,%eax
00000cb0	addl	$0x0000084c,%esp
00000cb6	popl	%esi
00000cb7	popl	%edi
00000cb8	popl	%ebx
00000cb9	popl	%ebp
00000cba	ret
00000cbb	jmp	0x00000b84
snappy::RawUncompress(char const*, unsigned long, char*):
00000cc0	pushl	%ebp
00000cc1	movl	%esp,%ebp
00000cc3	pushl	%ebx
00000cc4	pushl	%edi
00000cc5	pushl	%esi
00000cc6	subl	$0x1c,%esp
00000cc9	calll	0x00000cce
00000cce	popl	%eax
00000ccf	movl	0x10858-0xcce(%eax),%eax
00000cd5	addl	$0x08,%eax
00000cd8	movl	%eax,0xe8(%ebp)
00000cdb	movl	0x08(%ebp),%eax
00000cde	movl	%eax,0xec(%ebp)
00000ce1	movl	0x0c(%ebp),%eax
00000ce4	movl	%eax,0xf0(%ebp)
00000ce7	movl	0x10(%ebp),%eax
00000cea	movl	%eax,0x04(%esp)
00000cee	leal	0xe8(%ebp),%edi
00000cf1	movl	%edi,(%esp)
00000cf4	calll	snappy::RawUncompress(snappy::Source*, char*)
00000cf9	movb	%al,%bl
00000cfb	movl	%edi,(%esp)
00000cfe	calll	snappy::ByteArraySource::~ByteArraySource()
00000d03	movzbl	%bl,%eax
00000d06	addl	$0x1c,%esp
00000d09	popl	%esi
00000d0a	popl	%edi
00000d0b	popl	%ebx
00000d0c	popl	%ebp
00000d0d	ret
00000d0e	movl	%eax,%esi
00000d10	movl	%edi,(%esp)
00000d13	calll	snappy::ByteArraySource::~ByteArraySource()
00000d18	movl	%esi,(%esp)
00000d1b	calll	__Unwind_Resume
00000d20	calll	std::terminate()
00000d25	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::RawUncompress(snappy::Source*, char*):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%ebx
00000d34	pushl	%edi
00000d35	pushl	%esi
00000d36	subl	$0x3c,%esp
00000d39	movl	0x0c(%ebp),%eax
00000d3c	movl	%eax,0xc8(%ebp)
00000d3f	movl	%eax,0xcc(%ebp)
00000d42	movl	0x08(%ebp),%eax
00000d45	movl	%eax,0xd8(%ebp)
00000d48	movl	snappy::MaxCompressedLength(unsigned long),0xe0(%ebp)
00000d4f	movl	snappy::MaxCompressedLength(unsigned long),0xdc(%ebp)
00000d56	movb	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00000d5a	movl	snappy::MaxCompressedLength(unsigned long),0xe4(%ebp)
00000d61	xorl	%edi,%edi
00000d63	movl	%edi,%edx
00000d65	jmp	0x00000d73
00000d67	nopw	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00000d70	addl	$0x07,%edx
00000d73	xorb	%bl,%bl
00000d75	cmpl	$0x1f,%edx
00000d78	movl	%edx,%esi
00000d7a	ja	0x00000e12
00000d80	movl	0xd8(%ebp),%eax
00000d83	movl	(%eax),%ecx
00000d85	movl	0x0c(%ecx),%ecx
00000d88	leal	0xf0(%ebp),%edx
00000d8b	movl	%edx,0x04(%esp)
00000d8f	movl	%eax,(%esp)
00000d92	call	*%ecx
00000d94	xorb	%bl,%bl
00000d96	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
00000d9a	je	0x00000e12
00000d9c	movzbl	(%eax),%ebx
00000d9f	movl	0xd8(%ebp),%ecx
00000da2	movl	(%ecx),%eax
00000da4	movl	0x10(%eax),%eax
00000da7	movl	%ecx,(%esp)
00000daa	movl	$0x00000001,0x04(%esp)
00000db2	call	*%eax
00000db4	movl	%ebx,%eax
00000db6	andl	$0x7f,%eax
00000db9	movl	%esi,%edx
00000dbb	movb	%dl,%cl
00000dbd	shll	%cl,%eax
00000dbf	orl	%eax,%edi
00000dc1	testb	%bl,%bl
00000dc3	jns	0x00000de7
00000dc5	jmp	0x00000d70
00000dc7	jmp	0x00000dc9
00000dc9	movl	%eax,%esi
00000dcb	movl	0xd8(%ebp),%eax
00000dce	movl	0xe4(%ebp),%edx
00000dd1	movl	(%eax),%ecx
00000dd3	movl	0x10(%ecx),%ecx
00000dd6	movl	%edx,0x04(%esp)
00000dda	movl	%eax,(%esp)
00000ddd	call	*%ecx
00000ddf	movl	%esi,(%esp)
00000de2	calll	__Unwind_Resume
00000de7	movl	0x0c(%ebp),%eax
00000dea	addl	%edi,%eax
00000dec	movl	%eax,snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp)
00000def	leal	0xc8(%ebp),%eax
00000df2	movl	%eax,0x04(%esp)
00000df6	leal	0xd8(%ebp),%eax
00000df9	movl	%eax,(%esp)
00000dfc	calll	void snappy::SnappyDecompressor::DecompressAllTags<snappy::SnappyArrayWriter>(snappy::SnappyArrayWriter*)
00000e01	xorb	%bl,%bl
00000e03	testb	$0x01,0xe8(%ebp)
00000e07	je	0x00000e12
00000e09	movl	0xcc(%ebp),%eax
00000e0c	cmpl	snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp),%eax
00000e0f	sete	%bl
00000e12	movl	0xd8(%ebp),%eax
00000e15	movl	0xe4(%ebp),%edx
00000e18	movl	(%eax),%ecx
00000e1a	movl	%edx,0x04(%esp)
00000e1e	movl	%eax,(%esp)
00000e21	call	*0x10(%ecx)
00000e24	movzbl	%bl,%eax
00000e27	addl	$0x3c,%esp
00000e2a	popl	%esi
00000e2b	popl	%edi
00000e2c	popl	%ebx
00000e2d	popl	%ebp
00000e2e	ret
00000e2f	calll	std::terminate()
00000e34	nopw	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::Uncompress(char const*, unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%ebx
00000e44	pushl	%edi
00000e45	pushl	%esi
00000e46	subl	$0x1c,%esp
00000e49	calll	0x00000e4e
00000e4e	popl	%eax
00000e4f	movl	%eax,0xe4(%ebp)
00000e52	xorb	%bl,%bl
00000e54	movl	0x0c(%ebp),%esi
00000e57	testl	%esi,%esi
00000e59	jle	0x00000f99
00000e5f	movl	0x08(%ebp),%edi
00000e62	movzbl	(%edi),%ecx
00000e65	movl	%ecx,%eax
00000e67	andl	$0x7f,%eax
00000e6a	testb	%cl,%cl
00000e6c	js	0x00000e76
00000e6e	leal	0x01(%edi),%ecx
00000e71	jmp	0x00000f00
00000e76	xorb	%bl,%bl
00000e78	cmpl	$0x02,%esi
00000e7b	jl	0x00000f99
00000e81	movzbl	0x01(%edi),%ecx
00000e85	movl	%ecx,%edx
00000e87	andl	$0x7f,%edx
00000e8a	shll	$0x07,%edx
00000e8d	orl	%edx,%eax
00000e8f	testb	%cl,%cl
00000e91	js	0x00000e98
00000e93	leal	0x02(%edi),%ecx
00000e96	jmp	0x00000f00
00000e98	xorb	%bl,%bl
00000e9a	cmpl	$0x03,%esi
00000e9d	jl	0x00000f99
00000ea3	movzbl	0x02(%edi),%ecx
00000ea7	movl	%ecx,%edx
00000ea9	andl	$0x7f,%edx
00000eac	shll	$0x0e,%edx
00000eaf	orl	%edx,%eax
00000eb1	testb	%cl,%cl
00000eb3	js	0x00000eba
00000eb5	leal	0x03(%edi),%ecx
00000eb8	jmp	0x00000f00
00000eba	xorb	%bl,%bl
00000ebc	cmpl	$0x04,%esi
00000ebf	jl	0x00000f99
00000ec5	movzbl	0x03(%edi),%ecx
00000ec9	movl	%ecx,%edx
00000ecb	andl	$0x7f,%edx
00000ece	shll	$0x15,%edx
00000ed1	orl	%edx,%eax
00000ed3	testb	%cl,%cl
00000ed5	js	0x00000edc
00000ed7	leal	0x04(%edi),%ecx
00000eda	jmp	0x00000f00
00000edc	xorb	%bl,%bl
00000ede	cmpl	$0x05,%esi
00000ee1	jl	0x00000f99
00000ee7	movzbl	0x04(%edi),%edx
00000eeb	xorb	%bl,%bl
00000eed	cmpb	$0x0f,%dl
00000ef0	ja	0x00000f99
00000ef6	shll	$0x1c,%edx
00000ef9	orl	%eax,%edx
00000efb	leal	0x05(%edi),%ecx
00000efe	movl	%edx,%eax
00000f00	xorb	%bl,%bl
00000f02	testl	%ecx,%ecx
00000f04	je	0x00000f99
00000f0a	movl	0x10(%ebp),%ecx
00000f0d	movl	(%ecx),%ecx
00000f0f	movl	0xf4(%ecx),%ecx
00000f12	addl	%eax,%ecx
00000f14	sbbl	%edx,%edx
00000f16	movl	0xe4(%ebp),%ebx
00000f19	movl	0x10850-0xe4e(%ebx),%ebx
00000f1f	cmpl	(%ebx),%ecx
00000f21	seta	%cl
00000f24	testb	$0x01,%dl
00000f27	setne	%dl
00000f2a	je	0x00000f2e
00000f2c	movb	%dl,%cl
00000f2e	xorb	%bl,%bl
00000f30	testb	%cl,%cl
00000f32	jne	0x00000f99
00000f34	movl	%eax,0x04(%esp)
00000f38	movl	0x10(%ebp),%ebx
00000f3b	movl	%ebx,(%esp)
00000f3e	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
00000f46	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
00000f4b	movl	(%ebx),%ecx
00000f4d	movl	%ebx,%edx
00000f4f	xorl	%eax,%eax
00000f51	cmpl	snappy::MaxCompressedLength(unsigned long),0xf4(%ecx)
00000f55	je	0x00000f6b
00000f57	cmpl	snappy::MaxCompressedLength(unsigned long),0xfc(%ecx)
00000f5b	movl	%ecx,%eax
00000f5d	js	0x00000f6b
00000f5f	movl	%edx,%ebx
00000f61	movl	%ebx,(%esp)
00000f64	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard()
00000f69	movl	(%ebx),%eax
00000f6b	movl	0xe4(%ebp),%ecx
00000f6e	movl	0x10858-0xe4e(%ecx),%ecx
00000f74	addl	$0x08,%ecx
00000f77	movl	%ecx,0xe8(%ebp)
00000f7a	movl	%edi,0xec(%ebp)
00000f7d	movl	%esi,0xf0(%ebp)
00000f80	movl	%eax,0x04(%esp)
00000f84	leal	0xe8(%ebp),%edi
00000f87	movl	%edi,(%esp)
00000f8a	calll	snappy::RawUncompress(snappy::Source*, char*)
00000f8f	movb	%al,%bl
00000f91	movl	%edi,(%esp)
00000f94	calll	snappy::ByteArraySource::~ByteArraySource()
00000f99	movzbl	%bl,%eax
00000f9c	addl	$0x1c,%esp
00000f9f	popl	%esi
00000fa0	popl	%edi
00000fa1	popl	%ebx
00000fa2	popl	%ebp
00000fa3	ret
00000fa4	movl	%eax,%esi
00000fa6	movl	%edi,(%esp)
00000fa9	calll	snappy::ByteArraySource::~ByteArraySource()
00000fae	movl	%esi,(%esp)
00000fb1	calll	__Unwind_Resume
00000fb6	calll	std::terminate()
00000fbb	nopl	snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
snappy::IsValidCompressedBuffer(char const*, unsigned long):
00000fc0	pushl	%ebp
00000fc1	movl	%esp,%ebp
00000fc3	pushl	%ebx
00000fc4	pushl	%edi
00000fc5	pushl	%esi
00000fc6	subl	$0x3c,%esp
00000fc9	calll	0x00000fce
00000fce	popl	%eax
00000fcf	movl	0x10858-0xfce(%eax),%eax
00000fd5	addl	$0x08,%eax
00000fd8	movl	%eax,0xc8(%ebp)
00000fdb	movl	0x08(%ebp),%eax
00000fde	movl	%eax,0xcc(%ebp)
00000fe1	movl	0x0c(%ebp),%eax
00000fe4	movl	%eax,snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*)(%ebp)
00000fe7	movl	snappy::MaxCompressedLength(unsigned long),0xc4(%ebp)
00000fee	leal	0xc8(%ebp),%eax
00000ff1	movl	%eax,0xd8(%ebp)
00000ff4	movl	snappy::MaxCompressedLength(unsigned long),0xe0(%ebp)
00000ffb	movl	snappy::MaxCompressedLength(unsigned long),0xdc(%ebp)
00001002	movb	snappy::MaxCompressedLength(unsigned long),0xe8(%ebp)
00001006	movl	snappy::MaxCompressedLength(unsigned long),0xe4(%ebp)
0000100d	xorl	%esi,%esi
0000100f	movl	%esi,%edx
00001011	jmp	0x00001023
00001013	nopl	%cs:snappy::MaxCompressedLength(unsigned long)(%eax,%eax)
00001020	addl	$0x07,%edx
00001023	xorb	%bl,%bl
00001025	cmpl	$0x1f,%edx
00001028	movl	%edx,%edi
0000102a	ja	0x000010b7
00001030	movl	0xd8(%ebp),%eax
00001033	movl	(%eax),%ecx
00001035	movl	0x0c(%ecx),%ecx
00001038	leal	0xf0(%ebp),%edx
0000103b	movl	%edx,0x04(%esp)
0000103f	movl	%eax,(%esp)
00001042	call	*%ecx
00001044	xorb	%bl,%bl
00001046	cmpl	snappy::MaxCompressedLength(unsigned long),0xf0(%ebp)
0000104a	je	0x000010b7
0000104c	movzbl	(%eax),%ebx
0000104f	movl	0xd8(%ebp),%ecx
00001052	movl	(%ecx),%eax
00001054	movl	0x10(%eax),%eax
00001057	movl	%ecx,(%esp)
0000105a	movl	$0x00000001,0x04(%esp)
00001062	call	*%eax
00001064	movl	%ebx,%eax
00001066	andl	$0x7f,%eax
00001069	movl	%edi,%edx
0000106b	movb	%dl,%cl
0000106d	shll	%cl,%eax
0000106f	orl	%eax,%esi
00001071	testb	%bl,%bl
00001073	jns	0x00001091
00001075	jmp	0x00001020
00001077	jmp	0x00001079
00001079	movl	%eax,%esi
0000107b	movl	0xd8(%ebp),%eax
0000107e	movl	0xe4(%ebp),%edx
00001081	movl	(%eax),%ecx
00001083	movl	0x10(%ecx),%ecx
00001086	movl	%edx,0x04(%esp)
0000108a	movl	%eax,(%esp)
0000108d	call	*%ecx
0000108f	jmp	0x000010e3
00001091	movl	%esi,0xc0(%ebp)
00001094	leal	0xc0(%ebp),%eax
00001097	movl	%eax,0x04(%esp)
0000109b	leal	0xd8(%ebp),%eax
0000109e	movl	%eax,(%esp)
000010a1	calll	void snappy::SnappyDecompressor::DecompressAllTags<snappy::SnappyDecompressionValidator>(snappy::SnappyDecompressionValidator*)
000010a6	xorb	%bl,%bl
000010a8	testb	$0x01,0xe8(%ebp)
000010ac	je	0x000010b7
000010ae	movl	0xc0(%ebp),%eax
000010b1	cmpl	0xc4(%ebp),%eax
000010b4	sete	%bl
000010b7	movl	0xd8(%ebp),%eax
000010ba	movl	0xe4(%ebp),%edx
000010bd	movl	(%eax),%ecx
000010bf	movl	0x10(%ecx),%ecx
000010c2	movl	%edx,0x04(%esp)
000010c6	movl	%eax,(%esp)
000010c9	call	*%ecx
000010cb	leal	0xc8(%ebp),%eax
000010ce	movl	%eax,(%esp)
000010d1	calll	snappy::ByteArraySource::~ByteArraySource()
000010d6	movzbl	%bl,%eax
000010d9	addl	$0x3c,%esp
000010dc	popl	%esi
000010dd	popl	%edi
000010de	popl	%ebx
000010df	popl	%ebp
000010e0	ret
000010e1	movl	%eax,%esi
000010e3	leal	0xc8(%ebp),%eax
000010e6	movl	%eax,(%esp)
000010e9	calll	snappy::ByteArraySource::~ByteArraySource()
000010ee	movl	%esi,(%esp)
000010f1	calll	__Unwind_Resume
000010f6	calll	std::terminate()
000010fb	calll	std::terminate()
snappy::RawCompress(char const*, unsigned long, char*, unsigned long*):
00001100	pushl	%ebp
00001101	movl	%esp,%ebp
00001103	pushl	%ebx
00001104	pushl	%edi
00001105	pushl	%esi
00001106	subl	$0x1c,%esp
00001109	calll	0x0000110e
0000110e	popl	%eax
0000110f	movl	0x10858-0x110e(%eax),%ecx
00001115	addl	$0x08,%ecx
00001118	movl	%ecx,0xe8(%ebp)
0000111b	movl	0x08(%ebp),%ecx
0000111e	movl	%ecx,0xec(%ebp)
00001121	movl	0x0c(%ebp),%ecx
00001124	movl	%ecx,0xf0(%ebp)
00001127	movl	0x1085c-0x110e(%eax),%eax
0000112d	addl	$0x08,%eax
00001130	movl	%eax,0xe0(%ebp)
00001133	movl	0x10(%ebp),%esi
00001136	movl	%esi,0xe4(%ebp)
00001139	leal	0xe0(%ebp),%ebx
0000113c	movl	%ebx,0x04(%esp)
00001140	leal	0xe8(%ebp),%edi
00001143	movl	%edi,(%esp)
00001146	calll	snappy::Compress(snappy::Source*, snappy::Sink*)
0000114b	movl	0x14(%ebp),%eax
0000114e	movl	0xe4(%ebp),%ecx
00001151	subl	%esi,%ecx
00001153	movl	%ecx,(%eax)
00001155	movl	%ebx,(%esp)
00001158	calll	snappy::UncheckedByteArraySink::~UncheckedByteArraySink()
0000115d	movl	%edi,(%esp)
00001160	calll	snappy::ByteArraySource::~ByteArraySource()
00001165	addl	$0x1c,%esp
00001168	popl	%esi
00001169	popl	%edi
0000116a	popl	%ebx
0000116b	popl	%ebp
0000116c	ret
0000116d	movl	%eax,%esi
0000116f	jmp	0x0000117b
00001171	movl	%eax,%esi
00001173	movl	%ebx,(%esp)
00001176	calll	snappy::UncheckedByteArraySink::~UncheckedByteArraySink()
0000117b	movl	%edi,(%esp)
0000117e	calll	snappy::ByteArraySource::~ByteArraySource()
00001183	movl	%esi,(%esp)
00001186	calll	__Unwind_Resume
0000118b	calll	std::terminate()
snappy::Compress(char const*, unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> >*):
00001190	pushl	%ebp
00001191	movl	%esp,%ebp
00001193	pushl	%edi
00001194	pushl	%esi
00001195	subl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%esp
00001198	movl	0x10(%ebp),%edi
0000119b	movl	%edi,(%esp)
0000119e	movl	0x0c(%ebp),%esi
000011a1	movl	$0xaaaaaaab,%ecx
000011a6	movl	%esi,%eax
000011a8	mull	%ecx
000011aa	shrl	$0x02,%edx
000011ad	leal	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)(%esi,%edx),%eax
000011b1	movl	%eax,0x04(%esp)
000011b5	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
000011bd	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
000011c2	movl	(%edi),%ecx
000011c4	xorl	%eax,%eax
000011c6	cmpl	snappy::MaxCompressedLength(unsigned long),0xf4(%ecx)
000011ca	je	0x000011de
000011cc	cmpl	snappy::MaxCompressedLength(unsigned long),0xfc(%ecx)
000011d0	movl	%ecx,%eax
000011d2	js	0x000011de
000011d4	movl	%edi,(%esp)
000011d7	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_leak_hard()
000011dc	movl	(%edi),%eax
000011de	movl	0x08(%ebp),%ecx
000011e1	leal	0xf4(%ebp),%edx
000011e4	movl	%edx,0x0c(%esp)
000011e8	movl	%eax,0x08(%esp)
000011ec	movl	%esi,0x04(%esp)
000011f0	movl	%ecx,(%esp)
000011f3	calll	snappy::RawCompress(char const*, unsigned long, char*, unsigned long*)
000011f8	movl	0xf4(%ebp),%esi
000011fb	movl	%esi,0x04(%esp)
000011ff	movl	%edi,(%esp)
00001202	movl	snappy::MaxCompressedLength(unsigned long),0x08(%esp)
0000120a	calll	std::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
0000120f	movl	%esi,%eax
00001211	addl	snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*),%esp
00001214	popl	%esi
00001215	popl	%edi
00001216	popl	%ebp
00001217	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(sparsematrix.o):
(__TEXT,__text) section
CSparseMatrix::AdjustAllRowIndicesAfter(int, int):
00000000	pushl	%esi
00000001	movl	0x0c(%esp),%eax
00000005	incl	%eax
00000006	movl	0x08(%esp),%ecx
0000000a	cmpl	(%ecx),%eax
0000000c	jge	0x0000002c
0000000e	movl	0x10(%esp),%edx
00000012	nopw	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000020	movl	0x08(%ecx),%esi
00000023	addl	%edx,0x04(%esi,%eax,8)
00000027	incl	%eax
00000028	cmpl	(%ecx),%eax
0000002a	jl	0x00000020
0000002c	popl	%esi
0000002d	ret
0000002e	nop
CSparseMatrix::SetDimensions(int, int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%edi
00000034	pushl	%esi
00000035	subl	$0x10,%esp
00000038	movl	0x0c(%ebp),%edi
0000003b	movl	0x08(%ebp),%esi
0000003e	movl	%edi,(%esi)
00000040	movl	0x10(%ebp),%eax
00000043	movl	%eax,0x04(%esi)
00000046	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x28(%esi)
0000004d	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x14(%esi)
00000054	testl	%edi,%edi
00000056	je	0x000000a1
00000058	movl	0x0c(%esi),%ecx
0000005b	xorl	%eax,%eax
0000005d	cmpl	%edi,%ecx
0000005f	jge	0x00000077
00000061	leal	0x08(%esi),%eax
00000064	movl	%edi,%edx
00000066	subl	%ecx,%edx
00000068	movl	%edx,0x04(%esp)
0000006c	movl	%eax,(%esp)
0000006f	calll	CUtlMemory<CSparseMatrix::RowDescriptor_t, int>::Grow(int)
00000074	movl	0x14(%esi),%eax
00000077	leal	(%eax,%edi),%ecx
0000007a	movl	%ecx,0x14(%esi)
0000007d	movl	0x08(%esi),%ecx
00000080	movl	%ecx,0x18(%esi)
00000083	testl	%eax,%eax
00000085	jle	0x000000a1
00000087	testl	%edi,%edi
00000089	jle	0x000000a1
0000008b	shll	$0x03,%eax
0000008e	movl	%eax,0x08(%esp)
00000092	movl	%ecx,0x04(%esp)
00000096	leal	(%ecx,%edi,8),%eax
00000099	movl	%eax,(%esp)
0000009c	calll	_memmove
000000a1	cmpl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),(%esi)
000000a4	jle	0x000000ca
000000a6	xorl	%eax,%eax
000000a8	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000000b0	movl	0x08(%esi),%ecx
000000b3	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),(%ecx,%eax,8)
000000ba	movl	0x08(%esi),%ecx
000000bd	movl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int),0x04(%ecx,%eax,8)
000000c5	incl	%eax
000000c6	cmpl	(%esi),%eax
000000c8	jl	0x000000b0
000000ca	movl	$0xffffffff,CSparseMatrix::SetDimensions(int, int)(%esi)
000000d1	addl	$0x10,%esp
000000d4	popl	%esi
000000d5	popl	%edi
000000d6	popl	%ebp
000000d7	ret
000000d8	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::SetElement(int, int, float):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%ebx
000000e4	pushl	%edi
000000e5	pushl	%esi
000000e6	subl	$0x2c,%esp
000000e9	movl	0x08(%ebp),%ecx
000000ec	movl	0x08(%ecx),%eax
000000ef	movl	%eax,0xe4(%ebp)
000000f2	movl	0x0c(%ebp),%edi
000000f5	movl	0x04(%eax,%edi,8),%esi
000000f9	movl	(%eax,%edi,8),%eax
000000fc	movl	%eax,0xf0(%ebp)
000000ff	movss	0x14(%ebp),%xmm1
00000104	testl	%eax,%eax
00000106	je	0x00000312
0000010c	movl	0x1c(%ecx),%eax
0000010f	movl	%eax,CSparseMatrix::SetElement(int, int, float)(%ebp)
00000112	leal	0x04(%eax,%esi,8),%edx
00000116	movl	%esi,0xec(%ebp)
00000119	leal	0x1c(%ecx),%eax
0000011c	movl	%eax,0xe8(%ebp)
0000011f	xorl	%esi,%esi
00000121	movl	%esi,%ebx
00000123	jmp	0x0000013c
00000125	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000130	cmpl	%eax,%ecx
00000132	jg	0x000001d2
00000138	addl	$0x08,%esi
0000013b	incl	%ebx
0000013c	cmpl	0xf0(%ebp),%ebx
0000013f	jge	0x000001d2
00000145	movl	0xfc(%edx,%esi),%ecx
00000149	movl	0x10(%ebp),%eax
0000014c	cmpl	%eax,%ecx
0000014e	jne	0x00000130
00000150	pxor	%xmm0,%xmm0
00000154	ucomiss	%xmm0,%xmm1
00000157	jne	0x0000015b
00000159	jnp	0x0000016f
0000015b	movl	0xec(%ebp),%eax
0000015e	movl	CSparseMatrix::SetElement(int, int, float)(%ebp),%ecx
00000161	leal	(%ecx,%eax,8),%eax
00000164	movss	%xmm1,0x04(%esi,%eax)
0000016a	jmp	0x000003bc
0000016f	movl	0xf0(%ebp),%eax
00000172	decl	%eax
00000173	movl	0xe4(%ebp),%ecx
00000176	movl	%eax,(%ecx,%edi,8)
00000179	movl	0x08(%ebp),%edx
0000017c	movl	0x28(%edx),%eax
0000017f	movl	%eax,%ecx
00000181	subl	0xec(%ebp),%ecx
00000184	subl	%ebx,%ecx
00000186	decl	%ecx
00000187	testl	%ecx,%ecx
00000189	jle	0x000001b8
0000018b	movl	0x1c(%edx),%ecx
0000018e	movl	0xec(%ebp),%ebx
00000191	leal	(%ecx,%ebx,8),%ecx
00000194	leal	0x08(%esi,%ecx),%edx
00000198	movl	%edx,0x04(%esp)
0000019c	addl	%esi,%ecx
0000019e	movl	%ecx,(%esp)
000001a1	decl	%eax
000001a2	subl	%ebx,%eax
000001a4	shll	$0x03,%eax
000001a7	subl	%esi,%eax
000001a9	movl	%eax,0x08(%esp)
000001ad	calll	_memmove
000001b2	movl	0x08(%ebp),%edx
000001b5	movl	0x28(%edx),%eax
000001b8	decl	%eax
000001b9	movl	%eax,0x28(%edx)
000001bc	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax)
000001c0	incl	%edi
000001c1	cmpl	(%edx),%edi
000001c3	jge	0x000003bc
000001c9	movl	0x08(%edx),%eax
000001cc	decl	0x04(%eax,%edi,8)
000001d0	jmp	0x000001c0
000001d2	pxor	%xmm0,%xmm0
000001d6	ucomiss	%xmm0,%xmm1
000001d9	jne	0x000001e1
000001db	jnp	0x000003bc
000001e1	movl	0xf0(%ebp),%eax
000001e4	leal	0x01(%eax),%ecx
000001e7	movl	0xe4(%ebp),%edx
000001ea	movl	%ecx,(%edx,%edi,8)
000001ed	cmpl	%ebx,%eax
000001ef	jne	0x00000270
000001f1	movl	0x08(%ebp),%esi
000001f4	movl	0x20(%esi),%edx
000001f7	movl	0x28(%esi),%eax
000001fa	leal	0x01(%eax),%ecx
000001fd	cmpl	%edx,%ecx
000001ff	jle	0x00000215
00000201	subl	%edx,%ecx
00000203	movl	%ecx,0x04(%esp)
00000207	movl	0xe8(%ebp),%eax
0000020a	movl	%eax,(%esp)
0000020d	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
00000212	movl	0x28(%esi),%eax
00000215	movl	0xec(%ebp),%ebx
00000218	addl	0xf0(%ebp),%ebx
0000021b	incl	%eax
0000021c	movl	%eax,0x28(%esi)
0000021f	movl	0x1c(%esi),%ecx
00000222	movl	%ecx,0x2c(%esi)
00000225	subl	%ebx,%eax
00000227	decl	%eax
00000228	testl	%eax,%eax
0000022a	movl	%esi,%edx
0000022c	jle	0x00000251
0000022e	shll	$0x03,%eax
00000231	movl	%eax,0x08(%esp)
00000235	leal	(%ecx,%ebx,8),%eax
00000238	movl	%eax,0x04(%esp)
0000023c	leal	0x08(%ecx,%ebx,8),%eax
00000240	movl	%eax,(%esp)
00000243	movl	%edx,%esi
00000245	calll	_memmove
0000024a	movl	%esi,%edx
0000024c	movl	0xe8(%ebp),%eax
0000024f	movl	(%eax),%ecx
00000251	shll	$0x03,%ebx
00000254	addl	%ecx,%ebx
00000256	movss	0x14(%ebp),%xmm0
0000025b	je	0x00000300
00000261	movss	%xmm0,0x04(%ebx)
00000266	movl	0x10(%ebp),%eax
00000269	movl	%eax,(%ebx)
0000026b	jmp	0x00000300
00000270	movl	0x08(%ebp),%eax
00000273	movl	0x20(%eax),%edx
00000276	movl	0x28(%eax),%eax
00000279	leal	0x01(%eax),%ecx
0000027c	cmpl	%edx,%ecx
0000027e	jle	0x00000297
00000280	subl	%edx,%ecx
00000282	movl	%ecx,0x04(%esp)
00000286	movl	0xe8(%ebp),%eax
00000289	movl	%eax,(%esp)
0000028c	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
00000291	movl	0x08(%ebp),%eax
00000294	movl	0x28(%eax),%eax
00000297	leal	0x01(%eax),%ecx
0000029a	movl	0x08(%ebp),%edx
0000029d	movl	%ecx,0x28(%edx)
000002a0	movl	0x1c(%edx),%ecx
000002a3	movl	%ecx,0x2c(%edx)
000002a6	subl	0xec(%ebp),%eax
000002a9	movl	%eax,%edx
000002ab	subl	%ebx,%edx
000002ad	testl	%edx,%edx
000002af	jg	0x000002b6
000002b1	movl	0xec(%ebp),%eax
000002b4	jmp	0x000002de
000002b6	movl	0xec(%ebp),%ebx
000002b9	leal	(%ecx,%ebx,8),%ecx
000002bc	leal	0x08(%esi,%ecx),%edx
000002c0	addl	%esi,%ecx
000002c2	movl	%ecx,0x04(%esp)
000002c6	movl	%edx,(%esp)
000002c9	shll	$0x03,%eax
000002cc	subl	%esi,%eax
000002ce	movl	%eax,0x08(%esp)
000002d2	calll	_memmove
000002d7	movl	0xe8(%ebp),%eax
000002da	movl	(%eax),%ecx
000002dc	movl	%ebx,%eax
000002de	leal	(%ecx,%eax,8),%eax
000002e1	movl	%eax,%ecx
000002e3	addl	%esi,%ecx
000002e5	movl	0x08(%ebp),%edx
000002e8	movss	0x14(%ebp),%xmm0
000002ed	je	0x00000300
000002ef	movss	%xmm0,0x04(%esi,%eax)
000002f5	movl	0x10(%ebp),%ecx
000002f8	movl	%ecx,(%esi,%eax)
000002fb	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000300	incl	%edi
00000301	cmpl	(%edx),%edi
00000303	jge	0x000003bc
00000309	movl	0x08(%edx),%eax
0000030c	incl	0x04(%eax,%edi,8)
00000310	jmp	0x00000300
00000312	movl	%esi,0xec(%ebp)
00000315	pxor	%xmm0,%xmm0
00000319	ucomiss	%xmm0,%xmm1
0000031c	jne	0x00000324
0000031e	jnp	0x000003bc
00000324	movl	0xe4(%ebp),%eax
00000327	movl	$0x00000001,(%eax,%edi,8)
0000032e	movl	%ecx,%ebx
00000330	movl	0x20(%ebx),%edx
00000333	movl	0x28(%ebx),%eax
00000336	leal	0x1c(%ebx),%esi
00000339	leal	0x01(%eax),%ecx
0000033c	cmpl	%edx,%ecx
0000033e	jle	0x00000351
00000340	subl	%edx,%ecx
00000342	movl	%ecx,0x04(%esp)
00000346	movl	%esi,(%esp)
00000349	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
0000034e	movl	0x28(%ebx),%eax
00000351	movl	%esi,0xf0(%ebp)
00000354	incl	%eax
00000355	movl	%eax,0x28(%ebx)
00000358	movl	0x1c(%ebx),%ecx
0000035b	movl	%ecx,0x2c(%ebx)
0000035e	movl	0xec(%ebp),%esi
00000361	subl	%esi,%eax
00000363	decl	%eax
00000364	testl	%eax,%eax
00000366	movl	%ebx,%edx
00000368	jle	0x0000038d
0000036a	shll	$0x03,%eax
0000036d	movl	%eax,0x08(%esp)
00000371	leal	(%ecx,%esi,8),%eax
00000374	movl	%eax,0x04(%esp)
00000378	leal	0x08(%ecx,%esi,8),%eax
0000037c	movl	%eax,(%esp)
0000037f	movl	%edx,%ebx
00000381	calll	_memmove
00000386	movl	%ebx,%edx
00000388	movl	0xf0(%ebp),%eax
0000038b	movl	(%eax),%ecx
0000038d	movl	0x10(%ebp),%eax
00000390	shll	$0x03,%esi
00000393	addl	%ecx,%esi
00000395	movss	0x14(%ebp),%xmm0
0000039a	je	0x000003b7
0000039c	movss	%xmm0,0x04(%esi)
000003a1	movl	%eax,(%esi)
000003a3	jmp	0x000003b7
000003a5	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000003b0	movl	0x08(%edx),%eax
000003b3	incl	0x04(%eax,%edi,8)
000003b7	incl	%edi
000003b8	cmpl	(%edx),%edi
000003ba	jl	0x000003b0
000003bc	addl	$0x2c,%esp
000003bf	popl	%esi
000003c0	popl	%edi
000003c1	popl	%ebx
000003c2	popl	%ebp
000003c3	ret
000003c4	nopw	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::FinishedAppending():
000003d0	pushl	%esi
000003d1	movl	0x08(%esp),%eax
000003d5	movl	CSparseMatrix::SetDimensions(int, int)(%eax),%ecx
000003d8	jmp	0x000003ea
000003da	nopw	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
000003e0	movl	0x08(%eax),%edx
000003e3	movl	0x28(%eax),%esi
000003e6	movl	%esi,0x04(%edx,%ecx,8)
000003ea	incl	%ecx
000003eb	cmpl	(%eax),%ecx
000003ed	jl	0x000003e0
000003ef	popl	%esi
000003f0	ret
000003f1	nopl	%cs:CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
CSparseMatrix::AppendElement(int, int, float):
00000400	pushl	%ebp
00000401	movl	%esp,%ebp
00000403	pushl	%ebx
00000404	pushl	%edi
00000405	pushl	%esi
00000406	subl	$0x1c,%esp
00000409	pxor	%xmm0,%xmm0
0000040d	ucomiss	0x14(%ebp),%xmm0
00000411	jne	0x00000419
00000413	jnp	0x000004bf
00000419	movl	0x0c(%ebp),%eax
0000041c	movl	0x08(%ebp),%edi
0000041f	movl	CSparseMatrix::SetDimensions(int, int)(%edi),%ecx
00000422	cmpl	%eax,%ecx
00000424	jne	0x0000043a
00000426	jmp	0x0000043f
00000428	nopl	CSparseMatrix::AdjustAllRowIndicesAfter(int, int)(%eax,%eax)
00000430	movl	0x08(%edi),%edx
00000433	movl	0x28(%edi),%esi
00000436	movl	%esi,0x04(%edx,%ecx,8)
0000043a	incl	%ecx
0000043b	cmpl	%eax,%ecx
0000043d	jle	0x00000430
0000043f	movl	%eax,CSparseMatrix::SetDimensions(int, int)(%edi)
00000442	movl	0x08(%edi),%ecx
00000445	incl	(%ecx,%eax,8)
00000448	movl	0x20(%edi),%eax
0000044b	movl	0x28(%edi),%esi
0000044e	leal	0x1c(%edi),%ebx
00000451	leal	0x01(%esi),%edx
00000454	cmpl	%eax,%edx
00000456	movl	%esi,%ecx
00000458	jle	0x00000477
0000045a	movl	%edx,%ecx
0000045c	subl	%eax,%ecx
0000045e	movl	%ecx,0x04(%esp)
00000462	movl	%ebx,(%esp)
00000465	movl	%ebx,0xf0(%ebp)
00000468	movl	%edx,%ebx
0000046a	calll	CUtlMemory<CSparseMatrix::NonZeroValueDescriptor_t, int>::Grow(int)
0000046f	movl	%ebx,%edx
00000471	movl	0xf0(%ebp),%ebx
00000474	movl	0x28(%edi),%ecx
00000477	movl	%ebx,0xf0(%ebp)
0000047a	incl	%ecx
0000047b	movl	%ecx,0x28(%edi)
0000047e	movl	0x1c(%edi),%eax
00000481	movl	%eax,0x2c(%edi)
00000484	subl	%esi,%ecx
00000486	decl	%ecx
00000487	testl	%ecx,%ecx
00000489	jle	0x000004a9
0000048b	shll	$0x03,%ecx
0000048e	movl	%ecx,0x08(%esp)
00000492	leal	(%eax,%esi,8),%ecx
00000495	movl	%ecx,0x04(%esp)
00000499	leal	(%eax,%edx,8),%eax
0000049c	movl	%eax,(%esp)
0000049f	calll	_memmove
000004a4	movl	0xf0(%ebp),%eax
000004a7	movl	(%eax),%eax
000004a9	shll	$0x03,%esi
000004ac	addl	%eax,%esi
000004ae	je	0x000004bf
000004b0	movl	0x10(%ebp),%eax
000004b3	movss	0x14(%ebp),%xmm0
000004b8	movss	%xmm0,0x04(%esi)
000004bd	movl	%eax,(%esi)
000004bf	addl	$0x1c,%esp
000004c2	popl	%esi
000004c3	popl	%edi
000004c4	popl	%ebx
000004c5	popl	%ebp
000004c6	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(splitstring.o):
(__TEXT,__text) section
CSplitString::CSplitString(char const*, char const**, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	movl	0x08(%ebp),%edi
0000000b	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000012	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
00000018	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000001f	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000026	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000002d	movl	0x14(%ebp),%eax
00000030	movl	%eax,0x0c(%esp)
00000034	movl	0x10(%ebp),%eax
00000037	movl	%eax,0x08(%esp)
0000003b	movl	0x0c(%ebp),%eax
0000003e	movl	%eax,0x04(%esp)
00000042	movl	%edi,(%esp)
00000045	calll	CSplitString::Construct(char const*, char const**, int)
0000004a	addl	$0x10,%esp
0000004d	popl	%esi
0000004e	popl	%edi
0000004f	popl	%ebp
00000050	ret
00000051	movl	%eax,%esi
00000053	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000005a	movl	(%edi),%eax
0000005c	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000060	jns	0x0000006d
00000062	movl	%eax,0x10(%edi)
00000065	movl	%esi,(%esp)
00000068	calll	__Unwind_Resume
0000006d	testl	%eax,%eax
0000006f	jne	0x00000081
00000071	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000078	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000007f	jmp	0x000000a3
00000081	movl	%eax,(%esp)
00000084	calll	_free
00000089	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000008f	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000093	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000009a	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000000a1	js	0x000000aa
000000a3	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000000aa	movl	%esi,(%esp)
000000ad	calll	__Unwind_Resume
000000b2	nopw	%cs:CSplitString::CSplitString(char const*, char const**, int)(%eax,%eax)
CSplitString::CSplitString(char const*, char const**, int):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	pushl	%edi
000000c4	pushl	%esi
000000c5	subl	$0x10,%esp
000000c8	movl	0x08(%ebp),%edi
000000cb	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000000d2	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000000d8	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
000000df	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000000e6	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000000ed	movl	0x14(%ebp),%eax
000000f0	movl	%eax,0x0c(%esp)
000000f4	movl	0x10(%ebp),%eax
000000f7	movl	%eax,0x08(%esp)
000000fb	movl	0x0c(%ebp),%eax
000000fe	movl	%eax,0x04(%esp)
00000102	movl	%edi,(%esp)
00000105	calll	CSplitString::Construct(char const*, char const**, int)
0000010a	addl	$0x10,%esp
0000010d	popl	%esi
0000010e	popl	%edi
0000010f	popl	%ebp
00000110	ret
00000111	movl	%eax,%esi
00000113	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
0000011a	movl	(%edi),%eax
0000011c	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000120	jns	0x0000012d
00000122	movl	%eax,0x10(%edi)
00000125	movl	%esi,(%esp)
00000128	calll	__Unwind_Resume
0000012d	testl	%eax,%eax
0000012f	jne	0x00000141
00000131	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000138	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
0000013f	jmp	0x00000163
00000141	movl	%eax,(%esp)
00000144	calll	_free
00000149	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000014f	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000153	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000015a	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000161	js	0x0000016a
00000163	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000016a	movl	%esi,(%esp)
0000016d	calll	__Unwind_Resume
00000172	nopw	%cs:CSplitString::CSplitString(char const*, char const**, int)(%eax,%eax)
CSplitString::Construct(char const*, char const**, int):
00000180	pushl	%ebp
00000181	movl	%esp,%ebp
00000183	pushl	%ebx
00000184	pushl	%edi
00000185	pushl	%esi
00000186	subl	$0x1c,%esp
00000189	movl	0x0c(%ebp),%ebx
0000018c	movl	%ebx,(%esp)
0000018f	calll	_strlen
00000194	movl	%eax,%esi
00000196	incl	%esi
00000197	testl	%esi,%esi
00000199	movl	$0xffffffff,%eax
0000019e	cmovnsl	%esi,%eax
000001a1	movl	%eax,(%esp)
000001a4	calll	operator new[](unsigned long)
000001a9	movl	0x08(%ebp),%edi
000001ac	movl	%eax,0x14(%edi)
000001af	movl	%esi,0x08(%esp)
000001b3	movl	%ebx,0x04(%esp)
000001b7	movl	%eax,(%esp)
000001ba	calll	_memcpy
000001bf	movl	%edi,%edx
000001c1	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edx)
000001c8	movl	(%edx),%eax
000001ca	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edx)
000001ce	js	0x000001ef
000001d0	testl	%eax,%eax
000001d2	je	0x000001e6
000001d4	movl	%eax,(%esp)
000001d7	movl	%edx,%esi
000001d9	calll	_free
000001de	movl	%esi,%edx
000001e0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edx)
000001e6	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edx)
000001ed	xorl	%eax,%eax
000001ef	movl	%eax,0x10(%edx)
000001f2	movl	0x0c(%ebp),%eax
000001f5	movl	%eax,0xf0(%ebp)
000001f8	jmp	0x0000029e
000001fd	nopl	(%eax)
00000200	movl	0x10(%ebp),%eax
00000203	movl	(%eax,%ebx,4),%eax
00000206	movl	%eax,(%esp)
00000209	movl	%edx,%edi
0000020b	calll	_strlen
00000210	movl	%edi,%edx
00000212	movl	%eax,0xec(%ebp)
00000215	cmpl	0xf0(%ebp),%esi
00000218	jbe	0x00000298
0000021a	movl	%esi,%eax
0000021c	subl	0x0c(%ebp),%eax
0000021f	movl	0x14(%edx),%ecx
00000222	movl	%ecx,0xe8(%ebp)
00000225	movb	CSplitString::CSplitString(char const*, char const**, int),(%ecx,%eax)
00000229	movl	0x04(%edx),%eax
0000022c	movl	0x0c(%edx),%edi
0000022f	leal	0x01(%edi),%ebx
00000232	cmpl	%eax,%ebx
00000234	movl	%edi,%ecx
00000236	jle	0x00000255
00000238	movl	%ebx,%ecx
0000023a	subl	%eax,%ecx
0000023c	movl	%ecx,0x04(%esp)
00000240	movl	%edx,(%esp)
00000243	movl	%ebx,0xe4(%ebp)
00000246	movl	%edx,%ebx
00000248	calll	CUtlMemory<char*, int>::Grow(int)
0000024d	movl	%ebx,%edx
0000024f	movl	0xe4(%ebp),%ebx
00000252	movl	0x0c(%edx),%ecx
00000255	incl	%ecx
00000256	movl	%ecx,0x0c(%edx)
00000259	movl	(%edx),%eax
0000025b	movl	%eax,0x10(%edx)
0000025e	subl	%edi,%ecx
00000260	decl	%ecx
00000261	testl	%ecx,%ecx
00000263	jle	0x00000284
00000265	shll	$0x02,%ecx
00000268	movl	%ecx,0x08(%esp)
0000026c	leal	(%eax,%edi,4),%ecx
0000026f	movl	%ecx,0x04(%esp)
00000273	leal	(%eax,%ebx,4),%eax
00000276	movl	%eax,(%esp)
00000279	movl	%edx,%ebx
0000027b	calll	_memmove
00000280	movl	%ebx,%edx
00000282	movl	(%edx),%eax
00000284	shll	$0x02,%edi
00000287	addl	%eax,%edi
00000289	je	0x00000298
0000028b	movl	0xf0(%ebp),%eax
0000028e	subl	0x0c(%ebp),%eax
00000291	movl	0xe8(%ebp),%ecx
00000294	addl	%eax,%ecx
00000296	movl	%ecx,(%edi)
00000298	addl	0xec(%ebp),%esi
0000029b	movl	%esi,0xf0(%ebp)
0000029e	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x14(%ebp)
000002a2	jle	0x000002e6
000002a4	xorl	%edi,%edi
000002a6	movl	$0xffffffff,%ebx
000002ab	xorl	%esi,%esi
000002ad	nopl	(%eax)
000002b0	movl	0x10(%ebp),%eax
000002b3	movl	(%eax,%edi,4),%eax
000002b6	movl	%eax,0x04(%esp)
000002ba	movl	0xf0(%ebp),%eax
000002bd	movl	%eax,(%esp)
000002c0	calll	V_stristr(char const*, char const*)
000002c5	testl	%eax,%eax
000002c7	je	0x000002d5
000002c9	testl	%esi,%esi
000002cb	je	0x000002d1
000002cd	cmpl	%esi,%eax
000002cf	jae	0x000002d5
000002d1	movl	%edi,%ebx
000002d3	movl	%eax,%esi
000002d5	incl	%edi
000002d6	cmpl	%edi,0x14(%ebp)
000002d9	jne	0x000002b0
000002db	testl	%esi,%esi
000002dd	movl	0x08(%ebp),%edx
000002e0	jne	0x00000200
000002e6	movl	0xf0(%ebp),%eax
000002e9	cmpb	CSplitString::CSplitString(char const*, char const**, int),(%eax)
000002ec	je	0x00000356
000002ee	subl	0x0c(%ebp),%eax
000002f1	addl	0x14(%edx),%eax
000002f4	movl	%eax,0xf0(%ebp)
000002f7	movl	0x04(%edx),%eax
000002fa	movl	0x0c(%edx),%esi
000002fd	leal	0x01(%esi),%edi
00000300	cmpl	%eax,%edi
00000302	movl	%esi,%ecx
00000304	jle	0x0000031d
00000306	movl	%edi,%ecx
00000308	subl	%eax,%ecx
0000030a	movl	%ecx,0x04(%esp)
0000030e	movl	%edx,(%esp)
00000311	movl	%edx,%ebx
00000313	calll	CUtlMemory<char*, int>::Grow(int)
00000318	movl	%ebx,%edx
0000031a	movl	0x0c(%edx),%ecx
0000031d	incl	%ecx
0000031e	movl	%ecx,0x0c(%edx)
00000321	movl	(%edx),%eax
00000323	movl	%eax,0x10(%edx)
00000326	subl	%esi,%ecx
00000328	decl	%ecx
00000329	testl	%ecx,%ecx
0000032b	jle	0x0000034a
0000032d	shll	$0x02,%ecx
00000330	movl	%ecx,0x08(%esp)
00000334	leal	(%eax,%esi,4),%ecx
00000337	movl	%ecx,0x04(%esp)
0000033b	leal	(%eax,%edi,4),%eax
0000033e	movl	%eax,(%esp)
00000341	movl	%edx,%edi
00000343	calll	_memmove
00000348	movl	(%edi),%eax
0000034a	shll	$0x02,%esi
0000034d	addl	%eax,%esi
0000034f	movl	0xf0(%ebp),%eax
00000352	je	0x00000356
00000354	movl	%eax,(%esi)
00000356	addl	$0x1c,%esp
00000359	popl	%esi
0000035a	popl	%edi
0000035b	popl	%ebx
0000035c	popl	%ebp
0000035d	ret
0000035e	nop
CSplitString::CSplitString(char const*, char const*):
00000360	pushl	%ebp
00000361	movl	%esp,%ebp
00000363	pushl	%edi
00000364	pushl	%esi
00000365	subl	$0x20,%esp
00000368	movl	0x10(%ebp),%eax
0000036b	movl	%eax,0xf4(%ebp)
0000036e	movl	0x08(%ebp),%edi
00000371	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000378	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000037e	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000385	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
0000038c	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000393	leal	0xf4(%ebp),%eax
00000396	movl	%eax,0x08(%esp)
0000039a	movl	0x0c(%ebp),%eax
0000039d	movl	%eax,0x04(%esp)
000003a1	movl	%edi,(%esp)
000003a4	movl	$0x00000001,0x0c(%esp)
000003ac	calll	CSplitString::Construct(char const*, char const**, int)
000003b1	addl	$0x20,%esp
000003b4	popl	%esi
000003b5	popl	%edi
000003b6	popl	%ebp
000003b7	ret
000003b8	movl	%eax,%esi
000003ba	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
000003c1	movl	(%edi),%eax
000003c3	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000003c7	jns	0x000003d4
000003c9	movl	%eax,0x10(%edi)
000003cc	movl	%esi,(%esp)
000003cf	calll	__Unwind_Resume
000003d4	testl	%eax,%eax
000003d6	jne	0x000003e8
000003d8	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000003df	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000003e6	jmp	0x0000040a
000003e8	movl	%eax,(%esp)
000003eb	calll	_free
000003f0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000003f6	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000003fa	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000401	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000408	js	0x00000411
0000040a	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000411	movl	%esi,(%esp)
00000414	calll	__Unwind_Resume
00000419	nopl	CSplitString::CSplitString(char const*, char const**, int)(%eax)
CSplitString::CSplitString(char const*, char const*):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%edi
00000424	pushl	%esi
00000425	subl	$0x20,%esp
00000428	movl	0x10(%ebp),%eax
0000042b	movl	%eax,0xf4(%ebp)
0000042e	movl	0x08(%ebp),%edi
00000431	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
00000438	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
0000043e	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000445	movl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
0000044c	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
00000453	leal	0xf4(%ebp),%eax
00000456	movl	%eax,0x08(%esp)
0000045a	movl	0x0c(%ebp),%eax
0000045d	movl	%eax,0x04(%esp)
00000461	movl	%edi,(%esp)
00000464	movl	$0x00000001,0x0c(%esp)
0000046c	calll	CSplitString::Construct(char const*, char const**, int)
00000471	addl	$0x20,%esp
00000474	popl	%esi
00000475	popl	%edi
00000476	popl	%ebp
00000477	ret
00000478	movl	%eax,%esi
0000047a	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%edi)
00000481	movl	(%edi),%eax
00000483	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
00000487	jns	0x00000494
00000489	movl	%eax,0x10(%edi)
0000048c	movl	%esi,(%esp)
0000048f	calll	__Unwind_Resume
00000494	testl	%eax,%eax
00000496	jne	0x000004a8
00000498	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
0000049f	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000004a6	jmp	0x000004ca
000004a8	movl	%eax,(%esp)
000004ab	calll	_free
000004b0	movl	CSplitString::CSplitString(char const*, char const**, int),(%edi)
000004b6	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%edi)
000004ba	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000004c1	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%edi)
000004c8	js	0x000004d1
000004ca	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%edi)
000004d1	movl	%esi,(%esp)
000004d4	calll	__Unwind_Resume
000004d9	nopl	CSplitString::CSplitString(char const*, char const**, int)(%eax)
CSplitString::~CSplitString():
000004e0	pushl	%ebp
000004e1	movl	%esp,%ebp
000004e3	pushl	%esi
000004e4	pushl	%eax
000004e5	movl	0x08(%ebp),%esi
000004e8	movl	0x14(%esi),%eax
000004eb	testl	%eax,%eax
000004ed	je	0x000004f7
000004ef	movl	%eax,(%esp)
000004f2	calll	operator delete[](void*)
000004f7	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
000004fe	movl	(%esi),%eax
00000500	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000504	jns	0x0000050b
00000506	movl	%eax,0x10(%esi)
00000509	jmp	0x00000548
0000050b	testl	%eax,%eax
0000050d	jne	0x0000051f
0000050f	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000516	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000051d	jmp	0x00000541
0000051f	movl	%eax,(%esp)
00000522	calll	_free
00000527	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
0000052d	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000531	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000538	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000053f	js	0x00000548
00000541	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000548	addl	$0x04,%esp
0000054b	popl	%esi
0000054c	popl	%ebp
0000054d	ret
0000054e	nop
CSplitString::~CSplitString():
00000550	pushl	%ebp
00000551	movl	%esp,%ebp
00000553	pushl	%esi
00000554	pushl	%eax
00000555	movl	0x08(%ebp),%esi
00000558	movl	0x14(%esi),%eax
0000055b	testl	%eax,%eax
0000055d	je	0x00000567
0000055f	movl	%eax,(%esp)
00000562	calll	operator delete[](void*)
00000567	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
0000056e	movl	(%esi),%eax
00000570	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
00000574	jns	0x0000057b
00000576	movl	%eax,0x10(%esi)
00000579	jmp	0x000005b8
0000057b	testl	%eax,%eax
0000057d	jne	0x0000058f
0000057f	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
00000586	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
0000058d	jmp	0x000005b1
0000058f	movl	%eax,(%esp)
00000592	calll	_free
00000597	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
0000059d	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
000005a1	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005a8	movl	CSplitString::CSplitString(char const*, char const**, int),0x10(%esi)
000005af	js	0x000005b8
000005b1	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005b8	addl	$0x04,%esp
000005bb	popl	%esi
000005bc	popl	%ebp
000005bd	ret
000005be	nop
CSplitString::PurgeAndDeleteElements():
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%esi
000005c4	pushl	%eax
000005c5	movl	0x08(%ebp),%esi
000005c8	movl	CSplitString::CSplitString(char const*, char const**, int),0x0c(%esi)
000005cf	movl	(%esi),%eax
000005d1	cmpl	CSplitString::CSplitString(char const*, char const**, int),0x08(%esi)
000005d5	js	0x000005f2
000005d7	testl	%eax,%eax
000005d9	je	0x000005e9
000005db	movl	%eax,(%esp)
000005de	calll	_free
000005e3	movl	CSplitString::CSplitString(char const*, char const**, int),(%esi)
000005e9	movl	CSplitString::CSplitString(char const*, char const**, int),0x04(%esi)
000005f0	xorl	%eax,%eax
000005f2	movl	%eax,0x10(%esi)
000005f5	addl	$0x04,%esp
000005f8	popl	%esi
000005f9	popl	%ebp
000005fa	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(stringpool.o):
(__TEXT,__text) section
StrLess(char const* const&, char const* const&):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x08,%esp
00000006	movl	0x08(%ebp),%eax
00000009	movl	(%eax),%eax
0000000b	movl	0x0c(%ebp),%ecx
0000000e	movl	(%ecx),%ecx
00000010	movl	%ecx,0x04(%esp)
00000014	movl	%eax,(%esp)
00000017	calll	V_stricmp(char const*, char const*)
0000001c	shrl	$0x1f,%eax
0000001f	addl	$0x08,%esp
00000022	popl	%ebp
00000023	ret
00000024	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::CStringPool():
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%esi
00000034	pushl	%eax
00000035	calll	0x0000003a
0000003a	popl	%eax
0000003b	leal	StrLess(char const* const&, char const* const&)-0x3a(%eax),%eax
00000041	movl	0x08(%ebp),%esi
00000044	movl	%eax,(%esi)
00000046	movl	CStringPool::~CStringPool(),0x08(%esi)
0000004d	movl	$0x00000020,0x0c(%esi)
00000054	movl	$0x00000c00,(%esp)
0000005b	calll	_malloc
00000060	movl	%eax,0x04(%esi)
00000063	movw	$0xffff,0x10(%esi)
00000069	movw	StrLess(char const* const&, char const* const&),0x12(%esi)
0000006f	movw	$0xffff,0x14(%esi)
00000075	movw	$0xffff,0x16(%esi)
0000007b	movl	%eax,0x18(%esi)
0000007e	addl	$0x04,%esp
00000081	popl	%esi
00000082	popl	%ebp
00000083	ret
00000084	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::CStringPool():
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	pushl	%esi
00000094	pushl	%eax
00000095	calll	0x0000009a
0000009a	popl	%eax
0000009b	leal	StrLess(char const* const&, char const* const&)-0x9a(%eax),%eax
000000a1	movl	0x08(%ebp),%esi
000000a4	movl	%eax,(%esi)
000000a6	movl	CStringPool::~CStringPool(),0x08(%esi)
000000ad	movl	$0x00000020,0x0c(%esi)
000000b4	movl	$0x00000c00,(%esp)
000000bb	calll	_malloc
000000c0	movl	%eax,0x04(%esi)
000000c3	movw	$0xffff,0x10(%esi)
000000c9	movw	StrLess(char const* const&, char const* const&),0x12(%esi)
000000cf	movw	$0xffff,0x14(%esi)
000000d5	movw	$0xffff,0x16(%esi)
000000db	movl	%eax,0x18(%esi)
000000de	addl	$0x04,%esp
000000e1	popl	%esi
000000e2	popl	%ebp
000000e3	ret
000000e4	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::~CStringPool():
000000f0	jmp	CStringPool::~CStringPool()
000000f5	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::~CStringPool():
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	pushl	%edi
00000104	pushl	%esi
00000105	subl	$0x10,%esp
00000108	movl	0x08(%ebp),%edi
0000010b	movl	%edi,(%esp)
0000010e	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
00000113	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000120	cmpw	$0xff,%ax
00000124	je	0x00000149
00000126	movl	0x04(%edi),%ecx
00000129	movzwl	%ax,%esi
0000012c	imull	$0x0c,%esi,%eax
0000012f	movl	0x08(%ecx,%eax),%eax
00000133	movl	%eax,(%esp)
00000136	calll	_free
0000013b	movl	%esi,0x04(%esp)
0000013f	movl	%edi,(%esp)
00000142	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
00000147	jmp	0x00000120
00000149	movl	%edi,(%esp)
0000014c	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
00000151	addl	$0x10,%esp
00000154	popl	%esi
00000155	popl	%edi
00000156	popl	%ebp
00000157	jmp	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::~CUtlRBTree()
0000015c	jmp	0x0000015e
0000015e	movl	%eax,%esi
00000160	movl	%edi,(%esp)
00000163	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::~CUtlRBTree()
00000168	movl	%esi,(%esp)
0000016b	calll	__Unwind_Resume
00000170	calll	std::terminate()
00000175	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::FreeAll():
00000180	pushl	%ebp
00000181	movl	%esp,%ebp
00000183	pushl	%edi
00000184	pushl	%esi
00000185	subl	$0x10,%esp
00000188	movl	0x08(%ebp),%esi
0000018b	movl	%esi,(%esp)
0000018e	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
00000193	jmp	0x000001c1
00000195	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000001a0	movl	0x04(%esi),%ecx
000001a3	movzwl	%ax,%edi
000001a6	imull	$0x0c,%edi,%eax
000001a9	movl	0x08(%ecx,%eax),%eax
000001ad	movl	%eax,(%esp)
000001b0	calll	_free
000001b5	movl	%edi,0x04(%esp)
000001b9	movl	%esi,(%esp)
000001bc	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
000001c1	cmpw	$0xff,%ax
000001c5	jne	0x000001a0
000001c7	addl	$0x10,%esp
000001ca	popl	%esi
000001cb	popl	%edi
000001cc	popl	%ebp
000001cd	jmp	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
000001d2	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CStringPool::Count() const:
000001e0	movl	0x04(%esp),%eax
000001e4	movzwl	0x12(%eax),%eax
000001e8	ret
000001e9	nopl	StrLess(char const* const&, char const* const&)(%eax)
CStringPool::Find(char const*):
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	pushl	%ebx
000001f4	pushl	%edi
000001f5	pushl	%esi
000001f6	subl	$0x1c,%esp
000001f9	calll	0x000001fe
000001fe	popl	%edi
000001ff	movl	0x0c(%ebp),%eax
00000202	movl	%eax,CStringPool::~CStringPool()(%ebp)
00000205	leal	CStringPool::~CStringPool()(%ebp),%eax
00000208	movl	%eax,0x04(%esp)
0000020c	movl	0x08(%ebp),%esi
0000020f	movl	%esi,(%esp)
00000212	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
00000217	movl	%esi,%ecx
00000219	movw	%ax,%si
0000021c	movzwl	%si,%edx
0000021f	xorl	%eax,%eax
00000221	cmpl	0x08(%ecx),%edx
00000224	jae	0x000002a4
00000226	xorl	%eax,%eax
00000228	cmpw	%si,0x16(%ecx)
0000022c	jb	0x000002a4
0000022e	movl	%edx,0xec(%ebp)
00000231	movb	guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%al
00000237	testb	%al,%al
00000239	jne	0x00000279
0000023b	leal	guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%ebx
00000241	movl	%ebx,(%esp)
00000244	calll	___cxa_guard_acquire
00000249	testl	%eax,%eax
0000024b	je	0x00000279
0000024d	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi)
00000256	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000002(%edi)
0000025f	movw	$0xffff,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000004(%edi)
00000268	movw	$0x0001,CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe+0x00000006(%edi)
00000271	movl	%ebx,(%esp)
00000274	calll	___cxa_guard_release
00000279	cmpw	$0xff,%si
0000027d	movl	0x08(%ebp),%edx
00000280	movl	0xec(%ebp),%ebx
00000283	jne	0x0000028d
00000285	leal	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel-0x1fe(%edi),%ecx
0000028b	jmp	0x00000293
0000028d	imull	$0x0c,%ebx,%ecx
00000290	addl	0x04(%edx),%ecx
00000293	xorl	%eax,%eax
00000295	cmpw	%si,(%ecx)
00000298	je	0x000002a4
0000029a	imull	$0x0c,%ebx,%eax
0000029d	movl	0x04(%edx),%ecx
000002a0	movl	0x08(%ecx,%eax),%eax
000002a4	addl	$0x1c,%esp
000002a7	popl	%esi
000002a8	popl	%edi
000002a9	popl	%ebx
000002aa	popl	%ebp
000002ab	ret
000002ac	nopl	StrLess(char const* const&, char const* const&)(%eax)
CStringPool::Allocate(char const*):
000002b0	pushl	%ebp
000002b1	movl	%esp,%ebp
000002b3	pushl	%edi
000002b4	pushl	%esi
000002b5	subl	$0x10,%esp
000002b8	movl	0x0c(%ebp),%eax
000002bb	movl	%eax,0xf4(%ebp)
000002be	leal	0xf4(%ebp),%eax
000002c1	movl	%eax,0x04(%esp)
000002c5	movl	0x08(%ebp),%edi
000002c8	movl	%edi,(%esp)
000002cb	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
000002d0	cmpw	$0xff,%ax
000002d4	je	0x000002e5
000002d6	movl	0x04(%edi),%ecx
000002d9	movzwl	%ax,%eax
000002dc	imull	$0x0c,%eax,%eax
000002df	movl	0x08(%ecx,%eax),%esi
000002e3	jmp	0x00000304
000002e5	movl	0xf4(%ebp),%eax
000002e8	movl	%eax,(%esp)
000002eb	calll	_strdup
000002f0	movl	%eax,%esi
000002f2	movl	%esi,CStringPool::~CStringPool()(%ebp)
000002f5	leal	CStringPool::~CStringPool()(%ebp),%eax
000002f8	movl	%eax,0x04(%esp)
000002fc	movl	%edi,(%esp)
000002ff	calll	CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Insert(char const* const&)
00000304	movl	%esi,%eax
00000306	addl	$0x10,%esp
00000309	popl	%esi
0000030a	popl	%edi
0000030b	popl	%ebp
0000030c	ret
0000030d	nopl	(%eax)
CCountedStringPool::CCountedStringPool():
00000310	jmp	CCountedStringPool::CCountedStringPool()
00000315	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::CCountedStringPool():
00000320	pushl	%ebp
00000321	movl	%esp,%ebp
00000323	pushl	%ebx
00000324	pushl	%edi
00000325	pushl	%esi
00000326	subl	$0x1c,%esp
00000329	calll	0x0000032e
0000032e	popl	%eax
0000032f	leal	vtable for CCountedStringPool-0x32e+0x00000008(%eax),%eax
00000335	movl	0x08(%ebp),%esi
00000338	movl	%eax,(%esi)
0000033a	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000341	movl	StrLess(char const* const&, char const* const&),0x04(%esi)
00000348	movl	StrLess(char const* const&, char const* const&),0x10(%esi)
0000034f	movl	StrLess(char const* const&, char const* const&),0x0c(%esi)
00000356	movl	StrLess(char const* const&, char const* const&),0x18(%esi)
0000035d	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
00000364	movl	StrLess(char const* const&, char const* const&),0x20(%esi)
0000036b	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000372	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
00000379	movl	StrLess(char const* const&, char const* const&),0x24(%esi)
00000380	leal	0x04(%esi),%eax
00000383	movl	%eax,(%esp)
00000386	movl	$0x00000400,0x04(%esp)
0000038e	calll	CUtlMemory<unsigned short, int>::Grow(int)
00000393	movl	0x04(%esi),%eax
00000396	movl	0x10(%esi),%ecx
00000399	leal	0x00000400(%ecx),%edx
0000039f	movl	%edx,0x10(%esi)
000003a2	movl	%eax,0x14(%esi)
000003a5	testl	%ecx,%ecx
000003a7	jle	0x000003c3
000003a9	movl	%eax,0x04(%esp)
000003ad	addl	%ecx,%ecx
000003af	movl	%ecx,0x08(%esp)
000003b3	addl	$0x00000800,%eax
000003b8	movl	%eax,(%esp)
000003bb	calll	_memmove
000003c0	movl	0x10(%esi),%edx
000003c3	testl	%edx,%edx
000003c5	jle	0x000003df
000003c7	xorl	%eax,%eax
000003c9	nopl	StrLess(char const* const&, char const* const&)(%eax)
000003d0	movl	0x04(%esi),%ecx
000003d3	movw	StrLess(char const* const&, char const* const&),(%ecx,%eax,2)
000003d9	incl	%eax
000003da	cmpl	0x10(%esi),%eax
000003dd	jl	0x000003d0
000003df	leal	0x18(%esi),%ebx
000003e2	movw	StrLess(char const* const&, char const* const&),0x2c(%esi)
000003e8	movl	0x1c(%esi),%eax
000003eb	movl	0x24(%esi),%edi
000003ee	leal	0x01(%edi),%edx
000003f1	cmpl	%eax,%edx
000003f3	movl	%edi,%ecx
000003f5	jle	0x00000414
000003f7	movl	%edx,%ecx
000003f9	subl	%eax,%ecx
000003fb	movl	%ecx,0x04(%esp)
000003ff	movl	%ebx,(%esp)
00000402	movl	%ebx,CStringPool::~CStringPool()(%ebp)
00000405	movl	%edx,%ebx
00000407	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
0000040c	movl	%ebx,%edx
0000040e	movl	CStringPool::~CStringPool()(%ebp),%ebx
00000411	movl	0x24(%esi),%ecx
00000414	movl	%ebx,CStringPool::~CStringPool()(%ebp)
00000417	incl	%ecx
00000418	movl	%ecx,0x24(%esi)
0000041b	movl	0x18(%esi),%eax
0000041e	movl	%eax,0x28(%esi)
00000421	subl	%edi,%ecx
00000423	decl	%ecx
00000424	testl	%ecx,%ecx
00000426	jg	0x0000042d
00000428	movl	CStringPool::~CStringPool()(%ebp),%ecx
0000042b	jmp	0x0000044b
0000042d	shll	$0x03,%ecx
00000430	movl	%ecx,0x08(%esp)
00000434	leal	(%eax,%edi,8),%ecx
00000437	movl	%ecx,0x04(%esp)
0000043b	leal	(%eax,%edx,8),%eax
0000043e	movl	%eax,(%esp)
00000441	calll	_memmove
00000446	movl	CStringPool::~CStringPool()(%ebp),%ecx
00000449	movl	(%ecx),%eax
0000044b	movl	StrLess(char const* const&, char const* const&),(%eax)
00000451	movl	(%ecx),%eax
00000453	movb	StrLess(char const* const&, char const* const&),0x06(%eax)
00000457	movl	(%ecx),%eax
00000459	movw	StrLess(char const* const&, char const* const&),0x04(%eax)
0000045f	addl	$0x1c,%esp
00000462	popl	%esi
00000463	popl	%edi
00000464	popl	%ebx
00000465	popl	%ebp
00000466	ret
00000467	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::~CCountedStringPool():
00000470	pushl	%ebp
00000471	movl	%esp,%ebp
00000473	pushl	%edi
00000474	pushl	%esi
00000475	subl	$0x10,%esp
00000478	movl	0x08(%ebp),%edi
0000047b	movl	%edi,(%esp)
0000047e	calll	CCountedStringPool::~CCountedStringPool()
00000483	addl	$0x10,%esp
00000486	popl	%esi
00000487	popl	%edi
00000488	popl	%ebp
00000489	jmp	operator delete(void*)
0000048e	movl	%eax,%esi
00000490	movl	%edi,(%esp)
00000493	calll	operator delete(void*)
00000498	movl	%esi,(%esp)
0000049b	calll	__Unwind_Resume
CCountedStringPool::~CCountedStringPool():
000004a0	jmp	CCountedStringPool::~CCountedStringPool()
000004a5	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::~CCountedStringPool():
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%esi
000004b4	pushl	%eax
000004b5	calll	0x000004ba
000004ba	popl	%eax
000004bb	leal	vtable for CCountedStringPool-0x4ba+0x00000008(%eax),%eax
000004c1	movl	0x08(%ebp),%esi
000004c4	movl	%eax,(%esi)
000004c6	movl	%esi,(%esp)
000004c9	calll	CCountedStringPool::FreeAll()
000004ce	movl	StrLess(char const* const&, char const* const&),0x24(%esi)
000004d5	movl	0x18(%esi),%eax
000004d8	cmpl	StrLess(char const* const&, char const* const&),0x20(%esi)
000004dc	jns	0x000004e3
000004de	movl	%eax,0x28(%esi)
000004e1	jmp	0x00000521
000004e3	testl	%eax,%eax
000004e5	jne	0x000004f7
000004e7	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
000004ee	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
000004f5	jmp	0x0000051a
000004f7	movl	%eax,(%esp)
000004fa	calll	_free
000004ff	movl	StrLess(char const* const&, char const* const&),0x18(%esi)
00000506	cmpl	StrLess(char const* const&, char const* const&),0x20(%esi)
0000050a	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000511	movl	StrLess(char const* const&, char const* const&),0x28(%esi)
00000518	js	0x00000521
0000051a	movl	StrLess(char const* const&, char const* const&),0x1c(%esi)
00000521	movl	StrLess(char const* const&, char const* const&),0x10(%esi)
00000528	movl	0x04(%esi),%eax
0000052b	cmpl	StrLess(char const* const&, char const* const&),0x0c(%esi)
0000052f	jns	0x00000536
00000531	movl	%eax,0x14(%esi)
00000534	jmp	0x00000574
00000536	testl	%eax,%eax
00000538	jne	0x0000054a
0000053a	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000541	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
00000548	jmp	0x0000056d
0000054a	movl	%eax,(%esp)
0000054d	calll	_free
00000552	movl	StrLess(char const* const&, char const* const&),0x04(%esi)
00000559	cmpl	StrLess(char const* const&, char const* const&),0x0c(%esi)
0000055d	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000564	movl	StrLess(char const* const&, char const* const&),0x14(%esi)
0000056b	js	0x00000574
0000056d	movl	StrLess(char const* const&, char const* const&),0x08(%esi)
00000574	addl	$0x04,%esp
00000577	popl	%esi
00000578	popl	%ebp
00000579	ret
0000057a	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::FreeAll():
00000580	pushl	%ebp
00000581	movl	%esp,%ebp
00000583	pushl	%ebx
00000584	pushl	%edi
00000585	pushl	%esi
00000586	subl	$0x0c,%esp
00000589	movl	0x08(%ebp),%edi
0000058c	cmpl	StrLess(char const* const&, char const* const&),0x10(%edi)
00000590	jle	0x000005af
00000592	xorl	%eax,%eax
00000594	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000005a0	movl	0x04(%edi),%ecx
000005a3	movw	StrLess(char const* const&, char const* const&),(%ecx,%eax,2)
000005a9	incl	%eax
000005aa	cmpl	0x10(%edi),%eax
000005ad	jl	0x000005a0
000005af	movw	StrLess(char const* const&, char const* const&),0x2c(%edi)
000005b5	movl	0x24(%edi),%eax
000005b8	leal	0x18(%edi),%esi
000005bb	testl	%eax,%eax
000005bd	jle	0x00000605
000005bf	xorl	%ebx,%ebx
000005c1	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000005d0	movl	(%esi),%ecx
000005d2	movl	(%ecx,%ebx,8),%ecx
000005d5	testl	%ecx,%ecx
000005d7	je	0x00000600
000005d9	movl	%ecx,(%esp)
000005dc	calll	operator delete[](void*)
000005e1	movl	0x18(%edi),%eax
000005e4	movl	StrLess(char const* const&, char const* const&),(%eax,%ebx,8)
000005eb	movl	0x18(%edi),%eax
000005ee	movb	StrLess(char const* const&, char const* const&),0x06(%eax,%ebx,8)
000005f3	movl	0x18(%edi),%eax
000005f6	movw	StrLess(char const* const&, char const* const&),0x04(%eax,%ebx,8)
000005fd	movl	0x24(%edi),%eax
00000600	incl	%ebx
00000601	cmpl	%eax,%ebx
00000603	jl	0x000005d0
00000605	movl	StrLess(char const* const&, char const* const&),0x24(%edi)
0000060c	movl	0x1c(%edi),%ecx
0000060f	xorl	%eax,%eax
00000611	testl	%ecx,%ecx
00000613	jg	0x0000062b
00000615	movl	$0x00000001,%eax
0000061a	subl	%ecx,%eax
0000061c	movl	%eax,0x04(%esp)
00000620	movl	%esi,(%esp)
00000623	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
00000628	movl	0x24(%edi),%eax
0000062b	leal	0x01(%eax),%ecx
0000062e	movl	%ecx,0x24(%edi)
00000631	movl	0x18(%edi),%ecx
00000634	movl	%ecx,0x28(%edi)
00000637	testl	%eax,%eax
00000639	jle	0x00000653
0000063b	movl	%ecx,0x04(%esp)
0000063f	shll	$0x03,%eax
00000642	movl	%eax,0x08(%esp)
00000646	addl	$0x08,%ecx
00000649	movl	%ecx,(%esp)
0000064c	calll	_memmove
00000651	movl	(%esi),%ecx
00000653	movl	StrLess(char const* const&, char const* const&),(%ecx)
00000659	movl	(%esi),%eax
0000065b	movb	StrLess(char const* const&, char const* const&),0x06(%eax)
0000065f	movl	(%esi),%eax
00000661	movw	StrLess(char const* const&, char const* const&),0x04(%eax)
00000667	addl	$0x0c,%esp
0000066a	popl	%esi
0000066b	popl	%edi
0000066c	popl	%ebx
0000066d	popl	%ebp
0000066e	ret
0000066f	nop
CCountedStringPool::FindStringHandle(char const*):
00000670	pushl	%ebp
00000671	movl	%esp,%ebp
00000673	pushl	%ebx
00000674	pushl	%edi
00000675	pushl	%esi
00000676	subl	$0x0c,%esp
00000679	xorl	%eax,%eax
0000067b	cmpl	StrLess(char const* const&, char const* const&),0x0c(%ebp)
0000067f	je	0x000006e2
00000681	movl	0x08(%ebp),%esi
00000684	movl	0x0c(%ebp),%eax
00000687	movl	%eax,(%esp)
0000068a	calll	HashStringCaseless(char const*)
0000068f	movl	%esi,%edx
00000691	andl	$0x000003ff,%eax
00000696	movl	0x04(%edx),%ecx
00000699	movw	(%ecx,%eax,2),%di
0000069d	xorl	%eax,%eax
0000069f	testw	%di,%di
000006a2	je	0x000006e2
000006a4	jmp	0x000006b8
000006a6	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
000006b0	movl	0x18(%edx),%eax
000006b3	movzwl	0x04(%eax,%esi,8),%edi
000006b8	xorl	%eax,%eax
000006ba	testw	%di,%di
000006bd	je	0x000006e2
000006bf	movzwl	%di,%esi
000006c2	movl	0x18(%edx),%eax
000006c5	movl	(%eax,%esi,8),%eax
000006c8	movl	%eax,0x04(%esp)
000006cc	movl	0x0c(%ebp),%eax
000006cf	movl	%eax,(%esp)
000006d2	movl	%edx,%ebx
000006d4	calll	V_stricmp(char const*, char const*)
000006d9	movl	%ebx,%edx
000006db	testl	%eax,%eax
000006dd	movw	%di,%ax
000006e0	jne	0x000006b0
000006e2	movzwl	%ax,%eax
000006e5	addl	$0x0c,%esp
000006e8	popl	%esi
000006e9	popl	%edi
000006ea	popl	%ebx
000006eb	popl	%ebp
000006ec	ret
000006ed	nopl	(%eax)
CCountedStringPool::FindString(char const*):
000006f0	pushl	%ebp
000006f1	movl	%esp,%ebp
000006f3	pushl	%ebx
000006f4	pushl	%edi
000006f5	pushl	%esi
000006f6	subl	$0x0c,%esp
000006f9	xorl	%eax,%eax
000006fb	movl	0x0c(%ebp),%ecx
000006fe	testl	%ecx,%ecx
00000700	je	0x0000076b
00000702	movl	0x08(%ebp),%esi
00000705	movl	%ecx,(%esp)
00000708	calll	HashStringCaseless(char const*)
0000070d	movl	%esi,%edx
0000070f	andl	$0x000003ff,%eax
00000714	movl	0x04(%edx),%ecx
00000717	movw	(%ecx,%eax,2),%di
0000071b	xorl	%eax,%eax
0000071d	testw	%di,%di
00000720	je	0x00000762
00000722	jmp	0x00000738
00000724	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000730	movl	0x18(%edx),%eax
00000733	movzwl	0x04(%eax,%esi,8),%edi
00000738	xorl	%eax,%eax
0000073a	testw	%di,%di
0000073d	je	0x00000762
0000073f	movzwl	%di,%esi
00000742	movl	0x18(%edx),%eax
00000745	movl	(%eax,%esi,8),%eax
00000748	movl	%eax,0x04(%esp)
0000074c	movl	0x0c(%ebp),%eax
0000074f	movl	%eax,(%esp)
00000752	movl	%edx,%ebx
00000754	calll	V_stricmp(char const*, char const*)
00000759	movl	%ebx,%edx
0000075b	testl	%eax,%eax
0000075d	movw	%di,%ax
00000760	jne	0x00000730
00000762	movzwl	%ax,%eax
00000765	movl	0x18(%edx),%ecx
00000768	movl	(%ecx,%eax,8),%eax
0000076b	addl	$0x0c,%esp
0000076e	popl	%esi
0000076f	popl	%edi
00000770	popl	%ebx
00000771	popl	%ebp
00000772	ret
00000773	nopl	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::ReferenceStringHandle(char const*):
00000780	pushl	%ebp
00000781	movl	%esp,%ebp
00000783	pushl	%ebx
00000784	pushl	%edi
00000785	pushl	%esi
00000786	subl	$0x1c,%esp
00000789	xorl	%edi,%edi
0000078b	movl	0x0c(%ebp),%eax
0000078e	testl	%eax,%eax
00000790	je	0x000008c2
00000796	movl	0x08(%ebp),%ebx
00000799	movl	%eax,(%esp)
0000079c	calll	HashStringCaseless(char const*)
000007a1	andl	$0x000003ff,%eax
000007a6	movl	%eax,CStringPool::~CStringPool()(%ebp)
000007a9	movl	0x04(%ebx),%ecx
000007ac	movw	(%ecx,%eax,2),%di
000007b0	testw	%di,%di
000007b3	je	0x00000800
000007b5	jmp	0x000007c5
000007b7	nopw	StrLess(char const* const&, char const* const&)(%eax,%eax)
000007c0	movzwl	0x04(%ecx,%esi,8),%edi
000007c5	testw	%di,%di
000007c8	je	0x00000800
000007ca	movzwl	%di,%esi
000007cd	movl	0x18(%ebx),%eax
000007d0	movl	(%eax,%esi,8),%eax
000007d3	movl	%eax,0x04(%esp)
000007d7	movl	0x0c(%ebp),%eax
000007da	movl	%eax,(%esp)
000007dd	calll	V_stricmp(char const*, char const*)
000007e2	movl	0x18(%ebx),%ecx
000007e5	testl	%eax,%eax
000007e7	jne	0x000007c0
000007e9	movb	0x06(%ecx,%esi,8),%al
000007ed	cmpb	$0xff,%al
000007ef	je	0x000008c2
000007f5	incb	%al
000007f7	movb	%al,0x06(%ecx,%esi,8)
000007fb	jmp	0x000008c2
00000800	movzwl	0x2c(%ebx),%edi
00000804	testl	%edi,%edi
00000806	je	0x00000816
00000808	movl	0x18(%ebx),%eax
0000080b	movw	0x04(%eax,%edi,8),%cx
00000810	movw	%cx,0x2c(%ebx)
00000814	jmp	0x00000868
00000816	movl	0x1c(%ebx),%eax
00000819	movl	0x24(%ebx),%edi
0000081c	leal	0x01(%edi),%esi
0000081f	cmpl	%eax,%esi
00000821	movl	%edi,%ecx
00000823	jle	0x0000083b
00000825	leal	0x18(%ebx),%ecx
00000828	movl	%esi,%edx
0000082a	subl	%eax,%edx
0000082c	movl	%edx,0x04(%esp)
00000830	movl	%ecx,(%esp)
00000833	calll	CUtlMemory<CCountedStringPool::hash_item_t, int>::Grow(int)
00000838	movl	0x24(%ebx),%ecx
0000083b	incl	%ecx
0000083c	movl	%ecx,0x24(%ebx)
0000083f	movl	0x18(%ebx),%eax
00000842	movl	%eax,0x28(%ebx)
00000845	subl	%edi,%ecx
00000847	decl	%ecx
00000848	testl	%ecx,%ecx
0000084a	jle	0x00000868
0000084c	shll	$0x03,%ecx
0000084f	movl	%ecx,0x08(%esp)
00000853	leal	(%eax,%edi,8),%ecx
00000856	movl	%ecx,0x04(%esp)
0000085a	leal	(%eax,%esi,8),%eax
0000085d	movl	%eax,(%esp)
00000860	calll	_memmove
00000865	movl	0x18(%ebx),%eax
00000868	movzwl	%di,%esi
0000086b	movb	$0x01,0x06(%eax,%esi,8)
00000870	movl	0x04(%ebx),%ecx
00000873	movl	0x18(%ebx),%eax
00000876	movl	CStringPool::~CStringPool()(%ebp),%edx
00000879	movw	(%ecx,%edx,2),%cx
0000087d	movw	%cx,0x04(%eax,%esi,8)
00000882	movl	0x04(%ebx),%eax
00000885	movw	%si,(%eax,%edx,2)
00000889	movl	0x0c(%ebp),%eax
0000088c	movl	%eax,(%esp)
0000088f	calll	_strlen
00000894	incl	%eax
00000895	testl	%eax,%eax
00000897	movl	$0xffffffff,%ecx
0000089c	cmovnsl	%eax,%ecx
0000089f	movl	%ecx,(%esp)
000008a2	calll	operator new[](unsigned long)
000008a7	movl	0x18(%ebx),%ecx
000008aa	movl	%eax,(%ecx,%esi,8)
000008ad	movl	0x18(%ebx),%eax
000008b0	movl	(%eax,%esi,8),%eax
000008b3	movl	0x0c(%ebp),%ecx
000008b6	movl	%ecx,0x04(%esp)
000008ba	movl	%eax,(%esp)
000008bd	calll	_strcpy
000008c2	movzwl	%di,%eax
000008c5	addl	$0x1c,%esp
000008c8	popl	%esi
000008c9	popl	%edi
000008ca	popl	%ebx
000008cb	popl	%ebp
000008cc	ret
000008cd	nopl	(%eax)
CCountedStringPool::ReferenceString(char const*):
000008d0	pushl	%ebp
000008d1	movl	%esp,%ebp
000008d3	pushl	%esi
000008d4	subl	$0x14,%esp
000008d7	movl	0x0c(%ebp),%eax
000008da	testl	%eax,%eax
000008dc	jne	0x000008e2
000008de	xorl	%eax,%eax
000008e0	jmp	0x000008fa
000008e2	movl	0x08(%ebp),%esi
000008e5	movl	%eax,0x04(%esp)
000008e9	movl	%esi,(%esp)
000008ec	calll	CCountedStringPool::ReferenceStringHandle(char const*)
000008f1	movzwl	%ax,%eax
000008f4	movl	0x18(%esi),%ecx
000008f7	movl	(%ecx,%eax,8),%eax
000008fa	addl	$0x14,%esp
000008fd	popl	%esi
000008fe	popl	%ebp
000008ff	ret
CCountedStringPool::DereferenceString(char const*):
00000900	pushl	%ebp
00000901	movl	%esp,%ebp
00000903	pushl	%ebx
00000904	pushl	%edi
00000905	pushl	%esi
00000906	subl	$0x1c,%esp
00000909	cmpl	StrLess(char const* const&, char const* const&),0x0c(%ebp)
0000090d	je	0x000009fe
00000913	movl	0x08(%ebp),%esi
00000916	movl	0x0c(%ebp),%eax
00000919	movl	%eax,(%esp)
0000091c	calll	HashStringCaseless(char const*)
00000921	xorl	%edx,%edx
00000923	divl	0x10(%esi)
00000926	movzwl	%dx,%ecx
00000929	movl	%ecx,0xec(%ebp)
0000092c	movl	%esi,%edx
0000092e	movl	0x04(%edx),%eax
00000931	movw	(%eax,%ecx,2),%ax
00000935	testw	%ax,%ax
00000938	je	0x000009fe
0000093e	xorl	%edi,%edi
00000940	jmp	0x00000955
00000942	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
00000950	movzwl	0x04(%ecx,%ebx,8),%eax
00000955	movw	%di,0xf2(%ebp)
00000959	movw	%ax,%di
0000095c	testw	%di,%di
0000095f	je	0x000009fe
00000965	movzwl	%di,%ebx
00000968	movl	0x18(%edx),%eax
0000096b	movl	(%eax,%ebx,8),%eax
0000096e	movl	%eax,0x04(%esp)
00000972	movl	0x0c(%ebp),%eax
00000975	movl	%eax,(%esp)
00000978	movl	%edx,%esi
0000097a	calll	V_stricmp(char const*, char const*)
0000097f	movl	%esi,%edx
00000981	movl	0x18(%edx),%ecx
00000984	testl	%eax,%eax
00000986	jne	0x00000950
00000988	movb	0x06(%ecx,%ebx,8),%al
0000098c	cmpb	$0xff,%al
0000098e	je	0x00000950
00000990	decb	%al
00000992	movb	%al,0x06(%ecx,%ebx,8)
00000996	movl	0x18(%edx),%ecx
00000999	cmpb	StrLess(char const* const&, char const* const&),0x06(%ecx,%ebx,8)
0000099e	jne	0x00000950
000009a0	movzwl	0x04(%ecx,%ebx,8),%eax
000009a5	movw	0xf2(%ebp),%si
000009a9	testw	%si,%si
000009ac	jne	0x000009ba
000009ae	movl	0x04(%edx),%ecx
000009b1	movl	0xec(%ebp),%esi
000009b4	movw	%ax,(%ecx,%esi,2)
000009b8	jmp	0x000009c6
000009ba	movl	%edx,%edi
000009bc	movzwl	%si,%edx
000009bf	movw	%ax,0x04(%ecx,%edx,8)
000009c4	movl	%edi,%edx
000009c6	movl	0x18(%edx),%eax
000009c9	movl	(%eax,%ebx,8),%ecx
000009cc	testl	%ecx,%ecx
000009ce	je	0x000009df
000009d0	movl	%ecx,(%esp)
000009d3	movl	%edx,%esi
000009d5	calll	operator delete[](void*)
000009da	movl	%esi,%edx
000009dc	movl	0x18(%edx),%eax
000009df	movl	StrLess(char const* const&, char const* const&),(%eax,%ebx,8)
000009e6	movl	0x18(%edx),%eax
000009e9	movb	StrLess(char const* const&, char const* const&),0x06(%eax,%ebx,8)
000009ee	movl	0x18(%edx),%eax
000009f1	movw	0x2c(%edx),%cx
000009f5	movw	%cx,0x04(%eax,%ebx,8)
000009fa	movw	%bx,0x2c(%edx)
000009fe	addl	$0x1c,%esp
00000a01	popl	%esi
00000a02	popl	%edi
00000a03	popl	%ebx
00000a04	popl	%ebp
00000a05	ret
00000a06	nopw	%cs:StrLess(char const* const&, char const* const&)(%eax,%eax)
CCountedStringPool::HandleToString(unsigned short):
00000a10	movl	0x04(%esp),%eax
00000a14	movl	0x18(%eax),%eax
00000a17	movzwl	0x08(%esp),%ecx
00000a1c	movl	(%eax,%ecx,8),%eax
00000a1f	ret
CCountedStringPool::SpewStrings():
00000a20	pushl	%ebp
00000a21	movl	%esp,%ebp
00000a23	pushl	%ebx
00000a24	pushl	%edi
00000a25	pushl	%esi
00000a26	subl	$0x1c,%esp
00000a29	calll	0x00000a2e
00000a2e	popl	%eax
00000a2f	movl	%eax,0xec(%ebp)
00000a32	movl	0x08(%ebp),%edi
00000a35	movl	0x24(%edi),%eax
00000a38	testl	%eax,%eax
00000a3a	jle	0x00000a7d
00000a3c	xorl	%ebx,%ebx
00000a3e	movl	0xec(%ebp),%eax
00000a41	leal	0x16afd-0xa2e(%eax),%ecx
00000a47	movl	%ecx,CStringPool::~CStringPool()(%ebp)
00000a4a	leal	0x16ae8-0xa2e(%eax),%esi
00000a50	movl	0x18(%edi),%ecx
00000a53	movl	(%ecx,%ebx,8),%eax
00000a56	testl	%eax,%eax
00000a58	cmovel	CStringPool::~CStringPool()(%ebp),%eax
00000a5c	movzbl	0x06(%ecx,%ebx,8),%ecx
00000a61	movl	%eax,0x0c(%esp)
00000a65	movl	%ecx,0x08(%esp)
00000a69	movl	%ebx,0x04(%esp)
00000a6d	movl	%esi,(%esp)
00000a70	calll	_Msg
00000a75	incl	%ebx
00000a76	movl	0x24(%edi),%eax
00000a79	cmpl	%eax,%ebx
00000a7b	jl	0x00000a50
00000a7d	movl	%eax,0x04(%esp)
00000a81	movl	0xec(%ebp),%eax
00000a84	leal	0x16b1c-0xa2e(%eax),%eax
00000a8a	movl	%eax,(%esp)
00000a8d	calll	_Msg
00000a92	addl	$0x1c,%esp
00000a95	popl	%esi
00000a96	popl	%edi
00000a97	popl	%ebx
00000a98	popl	%ebp
00000a99	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(strtools.o):
(__TEXT,__text) section
_V_memset(char const*, int, void*, int, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	subl	$0x18,%esp
00000006	movl	0x18(%ebp),%eax
00000009	movl	%eax,0x08(%esp)
0000000d	movzbl	0x14(%ebp),%eax
00000011	movl	%eax,0x04(%esp)
00000015	movl	0x10(%ebp),%eax
00000018	movl	%eax,(%esp)
0000001b	calll	_memset
00000020	addl	$0x18,%esp
00000023	popl	%ebp
00000024	ret
00000025	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memcpy(char const*, int, void*, void const*, int):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	subl	$0x18,%esp
00000036	movl	0x18(%ebp),%eax
00000039	movl	%eax,0x08(%esp)
0000003d	movl	0x14(%ebp),%eax
00000040	movl	%eax,0x04(%esp)
00000044	movl	0x10(%ebp),%eax
00000047	movl	%eax,(%esp)
0000004a	calll	_memcpy
0000004f	addl	$0x18,%esp
00000052	popl	%ebp
00000053	ret
00000054	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memmove(char const*, int, void*, void const*, int):
00000060	pushl	%ebp
00000061	movl	%esp,%ebp
00000063	subl	$0x18,%esp
00000066	movl	0x18(%ebp),%eax
00000069	movl	%eax,0x08(%esp)
0000006d	movl	0x14(%ebp),%eax
00000070	movl	%eax,0x04(%esp)
00000074	movl	0x10(%ebp),%eax
00000077	movl	%eax,(%esp)
0000007a	calll	_memmove
0000007f	addl	$0x18,%esp
00000082	popl	%ebp
00000083	ret
00000084	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_memcmp(char const*, int, void const*, void const*, int):
00000090	pushl	%ebp
00000091	movl	%esp,%ebp
00000093	subl	$0x18,%esp
00000096	movl	0x18(%ebp),%eax
00000099	movl	%eax,0x08(%esp)
0000009d	movl	0x14(%ebp),%eax
000000a0	movl	%eax,0x04(%esp)
000000a4	movl	0x10(%ebp),%eax
000000a7	movl	%eax,(%esp)
000000aa	calll	_memcmp
000000af	addl	$0x18,%esp
000000b2	popl	%ebp
000000b3	ret
000000b4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strlen(char const*, int, char const*):
000000c0	pushl	%ebp
000000c1	movl	%esp,%ebp
000000c3	subl	$0x08,%esp
000000c6	movl	0x10(%ebp),%eax
000000c9	movl	%eax,(%esp)
000000cc	calll	_strlen
000000d1	addl	$0x08,%esp
000000d4	popl	%ebp
000000d5	ret
000000d6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strcpy(char const*, int, char*, char const*):
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	subl	$0x08,%esp
000000e6	movl	0x14(%ebp),%eax
000000e9	movl	%eax,0x04(%esp)
000000ed	movl	0x10(%ebp),%eax
000000f0	movl	%eax,(%esp)
000000f3	calll	_strcpy
000000f8	addl	$0x08,%esp
000000fb	popl	%ebp
000000fc	ret
000000fd	nopl	(%eax)
_V_wcslen(char const*, int, wchar_t const*):
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	subl	$0x08,%esp
00000106	movl	0x10(%ebp),%eax
00000109	movl	%eax,(%esp)
0000010c	calll	_wcslen
00000111	addl	$0x08,%esp
00000114	popl	%ebp
00000115	ret
00000116	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strrchr(char const*, int, char const*, char):
00000120	pushl	%ebp
00000121	movl	%esp,%ebp
00000123	pushl	%esi
00000124	pushl	%eax
00000125	movl	0x10(%ebp),%esi
00000128	movl	%esi,(%esp)
0000012b	calll	_strlen
00000130	movb	0x14(%ebp),%dl
00000133	xorl	%ecx,%ecx
00000135	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000140	testl	%eax,%eax
00000142	je	0x00000151
00000144	cmpb	%dl,0xff(%esi,%eax)
00000148	leal	0xff(%eax),%eax
0000014b	jne	0x00000140
0000014d	addl	%eax,%esi
0000014f	movl	%esi,%ecx
00000151	movl	%ecx,%eax
00000153	addl	$0x04,%esp
00000156	popl	%esi
00000157	popl	%ebp
00000158	ret
00000159	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
_V_strcmp(char const*, int, char const*, char const*):
00000160	pushl	%ebp
00000161	movl	%esp,%ebp
00000163	subl	$0x08,%esp
00000166	movl	0x14(%ebp),%eax
00000169	movl	%eax,0x04(%esp)
0000016d	movl	0x10(%ebp),%eax
00000170	movl	%eax,(%esp)
00000173	calll	_strcmp
00000178	addl	$0x08,%esp
0000017b	popl	%ebp
0000017c	ret
0000017d	nopl	(%eax)
_V_wcscmp(char const*, int, wchar_t const*, wchar_t const*):
00000180	pushl	%esi
00000181	movl	0x14(%esp),%ecx
00000185	movl	0x10(%esp),%edx
00000189	jmp	0x0000019c
0000018b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000190	xorl	%eax,%eax
00000192	testl	%esi,%esi
00000194	je	0x000001b3
00000196	addl	$0x04,%ecx
00000199	addl	$0x04,%edx
0000019c	movl	(%ecx),%eax
0000019e	movl	(%edx),%esi
000001a0	cmpl	%eax,%esi
000001a2	je	0x00000190
000001a4	movl	$0x00000001,%ecx
000001a9	cmpl	%eax,%esi
000001ab	movl	$0xffffffff,%eax
000001b0	cmovgl	%ecx,%eax
000001b3	popl	%esi
000001b4	ret
000001b5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
_V_strstr(char const*, int, char const*, char const*):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	subl	$0x08,%esp
000001c6	movl	0x14(%ebp),%eax
000001c9	movl	%eax,0x04(%esp)
000001cd	movl	0x10(%ebp),%eax
000001d0	movl	%eax,(%esp)
000001d3	calll	_strstr
000001d8	addl	$0x08,%esp
000001db	popl	%ebp
000001dc	ret
000001dd	nopl	(%eax)
_V_wcsupr(char const*, int, wchar_t*):
000001e0	pushl	%ebp
000001e1	movl	%esp,%ebp
000001e3	pushl	%edi
000001e4	pushl	%esi
000001e5	subl	$0x10,%esp
000001e8	movl	0x10(%ebp),%esi
000001eb	movl	%esi,%edi
000001ed	jmp	0x000001fd
000001ef	nop
000001f0	movl	%eax,(%esp)
000001f3	calll	___toupper
000001f8	movl	%eax,(%edi)
000001fa	addl	$0x04,%edi
000001fd	testl	%edi,%edi
000001ff	je	0x00000207
00000201	movl	(%edi),%eax
00000203	testl	%eax,%eax
00000205	jne	0x000001f0
00000207	movl	%esi,%eax
00000209	addl	$0x10,%esp
0000020c	popl	%esi
0000020d	popl	%edi
0000020e	popl	%ebp
0000020f	ret
_V_wcslower(char const*, int, wchar_t*):
00000210	pushl	%ebp
00000211	movl	%esp,%ebp
00000213	pushl	%edi
00000214	pushl	%esi
00000215	subl	$0x10,%esp
00000218	movl	0x10(%ebp),%esi
0000021b	movl	%esi,%edi
0000021d	jmp	0x0000022d
0000021f	nop
00000220	movl	%eax,(%esp)
00000223	calll	___tolower
00000228	movl	%eax,(%edi)
0000022a	addl	$0x04,%edi
0000022d	testl	%edi,%edi
0000022f	je	0x00000237
00000231	movl	(%edi),%eax
00000233	testl	%eax,%eax
00000235	jne	0x00000220
00000237	movl	%esi,%eax
00000239	addl	$0x10,%esp
0000023c	popl	%esi
0000023d	popl	%edi
0000023e	popl	%ebp
0000023f	ret
V_strupr(char*):
00000240	pushl	%ebp
00000241	movl	%esp,%ebp
00000243	pushl	%edi
00000244	pushl	%esi
00000245	subl	$0x10,%esp
00000248	movl	0x08(%ebp),%esi
0000024b	movb	(%esi),%cl
0000024d	testb	%cl,%cl
0000024f	je	0x00000285
00000251	movl	%esi,%edi
00000253	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000260	movzbl	%cl,%eax
00000263	addb	$0x9f,%cl
00000266	cmpb	$0x19,%cl
00000269	ja	0x0000026f
0000026b	addb	_V_strcpy(char const*, int, char*, char const*),%al
0000026d	jmp	0x0000027b
0000026f	testb	%al,%al
00000271	jns	0x0000027d
00000273	movl	%eax,(%esp)
00000276	calll	___toupper
0000027b	movb	%al,(%edi)
0000027d	movb	0x01(%edi),%cl
00000280	incl	%edi
00000281	testb	%cl,%cl
00000283	jne	0x00000260
00000285	movl	%esi,%eax
00000287	addl	$0x10,%esp
0000028a	popl	%esi
0000028b	popl	%edi
0000028c	popl	%ebp
0000028d	ret
0000028e	nop
V_strlower(char*):
00000290	pushl	%ebp
00000291	movl	%esp,%ebp
00000293	pushl	%edi
00000294	pushl	%esi
00000295	subl	$0x10,%esp
00000298	movl	0x08(%ebp),%esi
0000029b	movb	(%esi),%cl
0000029d	testb	%cl,%cl
0000029f	je	0x000002d5
000002a1	movl	%esi,%edi
000002a3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000002b0	movzbl	%cl,%eax
000002b3	addb	$0xbf,%cl
000002b6	cmpb	$0x19,%cl
000002b9	ja	0x000002bf
000002bb	addb	$0x20,%al
000002bd	jmp	0x000002cb
000002bf	testb	%al,%al
000002c1	jns	0x000002cd
000002c3	movl	%eax,(%esp)
000002c6	calll	___tolower
000002cb	movb	%al,(%edi)
000002cd	movb	0x01(%edi),%cl
000002d0	incl	%edi
000002d1	testb	%cl,%cl
000002d3	jne	0x000002b0
000002d5	movl	%esi,%eax
000002d7	addl	$0x10,%esp
000002da	popl	%esi
000002db	popl	%edi
000002dc	popl	%ebp
000002dd	ret
000002de	nop
V_strnlwr(char*, unsigned long):
000002e0	pushl	%ebp
000002e1	movl	%esp,%ebp
000002e3	pushl	%ebx
000002e4	pushl	%edi
000002e5	pushl	%esi
000002e6	subl	$0x0c,%esp
000002e9	movl	0x08(%ebp),%esi
000002ec	testl	%esi,%esi
000002ee	je	0x0000032a
000002f0	movl	0x0c(%ebp),%eax
000002f3	testl	%eax,%eax
000002f5	je	0x0000032a
000002f7	movl	$0x00000001,%edi
000002fc	subl	%eax,%edi
000002fe	movl	%esi,%ebx
00000300	jmp	0x00000323
00000302	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000310	movsbl	(%ebx),%eax
00000313	testl	%eax,%eax
00000315	je	0x0000032a
00000317	movl	%eax,(%esp)
0000031a	calll	___tolower
0000031f	movb	%al,(%ebx)
00000321	incl	%edi
00000322	incl	%ebx
00000323	testl	%edi,%edi
00000325	jne	0x00000310
00000327	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
0000032a	movl	%esi,%eax
0000032c	addl	$0x0c,%esp
0000032f	popl	%esi
00000330	popl	%edi
00000331	popl	%ebx
00000332	popl	%ebp
00000333	ret
00000334	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stricmp(char const*, char const*):
00000340	pushl	%ebp
00000341	movl	%esp,%ebp
00000343	pushl	%ebx
00000344	pushl	%esi
00000345	subl	$0x10,%esp
00000348	xorl	%eax,%eax
0000034a	movl	0x0c(%ebp),%edx
0000034d	movl	0x08(%ebp),%esi
00000350	cmpl	%edx,%esi
00000352	je	0x000003c4
00000354	jmp	0x00000362
00000356	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000360	incl	%edx
00000361	incl	%esi
00000362	movb	(%edx),%al
00000364	movb	(%esi),%cl
00000366	testb	%cl,%cl
00000368	je	0x000003be
0000036a	cmpb	%al,%cl
0000036c	je	0x00000360
0000036e	movb	%cl,%ah
00000370	orb	$0x20,%ah
00000373	movb	%ah,%bh
00000375	addb	$0x9f,%bh
00000378	movb	%al,%bl
0000037a	orb	$0x20,%bl
0000037d	cmpb	%bl,%ah
0000037f	jne	0x00000386
00000381	cmpb	$0x1a,%bh
00000384	jb	0x00000360
00000386	movb	%al,%ch
00000388	orb	%cl,%ch
0000038a	jns	0x0000039a
0000038c	movl	%edx,0x04(%esp)
00000390	movl	%esi,(%esp)
00000393	calll	_strcasecmp
00000398	jmp	0x000003c4
0000039a	cmpb	$0x19,%bh
0000039d	ja	0x000003a1
0000039f	movb	%ah,%cl
000003a1	movb	%bl,%dl
000003a3	addb	$0x9f,%dl
000003a6	cmpb	$0x19,%dl
000003a9	ja	0x000003ad
000003ab	movb	%bl,%al
000003ad	movl	$0x00000001,%edx
000003b2	cmpb	%al,%cl
000003b4	movl	$0xffffffff,%eax
000003b9	cmoval	%edx,%eax
000003bc	jmp	0x000003c4
000003be	cmpb	$0x01,%al
000003c0	sbbl	%eax,%eax
000003c2	notl	%eax
000003c4	addl	$0x10,%esp
000003c7	popl	%esi
000003c8	popl	%ebx
000003c9	popl	%ebp
000003ca	ret
000003cb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnicmp(char const*, char const*, int):
000003d0	pushl	%ebp
000003d1	movl	%esp,%ebp
000003d3	pushl	%ebx
000003d4	pushl	%edi
000003d5	pushl	%esi
000003d6	subl	$0x0c,%esp
000003d9	movl	0x10(%ebp),%esi
000003dc	movl	0x0c(%ebp),%edx
000003df	movl	0x08(%ebp),%edi
000003e2	jmp	0x000003f3
000003e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000003f0	incl	%edx
000003f1	incl	%edi
000003f2	decl	%esi
000003f3	xorb	%al,%al
000003f5	testl	%esi,%esi
000003f7	jle	0x0000045e
000003f9	movb	(%edx),%al
000003fb	movb	(%edi),%cl
000003fd	testb	%cl,%cl
000003ff	je	0x00000459
00000401	cmpb	%al,%cl
00000403	je	0x000003f0
00000405	movb	%cl,%bh
00000407	orb	$0x20,%bh
0000040a	movb	%bh,%ah
0000040c	addb	$0x9f,%ah
0000040f	movb	%al,%bl
00000411	orb	$0x20,%bl
00000414	cmpb	%bl,%bh
00000416	jne	0x0000041d
00000418	cmpb	$0x1a,%ah
0000041b	jb	0x000003f0
0000041d	movb	%al,%ch
0000041f	orb	%cl,%ch
00000421	jns	0x00000435
00000423	movl	%esi,0x08(%esp)
00000427	movl	%edx,0x04(%esp)
0000042b	movl	%edi,(%esp)
0000042e	calll	_strncasecmp
00000433	jmp	0x00000467
00000435	cmpb	$0x19,%ah
00000438	ja	0x0000043c
0000043a	movb	%bh,%cl
0000043c	movb	%bl,%dl
0000043e	addb	$0x9f,%dl
00000441	cmpb	$0x19,%dl
00000444	ja	0x00000448
00000446	movb	%bl,%al
00000448	movl	$0x00000001,%edx
0000044d	cmpb	%al,%cl
0000044f	movl	$0xffffffff,%eax
00000454	cmoval	%edx,%eax
00000457	jmp	0x00000467
00000459	testb	%al,%al
0000045b	setne	%al
0000045e	movzbl	%al,%eax
00000461	shll	$0x1f,%eax
00000464	sarl	$0x1f,%eax
00000467	addl	$0x0c,%esp
0000046a	popl	%esi
0000046b	popl	%edi
0000046c	popl	%ebx
0000046d	popl	%ebp
0000046e	ret
0000046f	nop
V_strncmp(char const*, char const*, int):
00000470	pushl	%ebx
00000471	pushl	%esi
00000472	movl	0x14(%esp),%ecx
00000476	movl	0x10(%esp),%edx
0000047a	movl	0x0c(%esp),%esi
0000047e	jmp	0x00000489
00000480	xorl	%eax,%eax
00000482	testb	%bl,%bl
00000484	je	0x000004a6
00000486	decl	%ecx
00000487	incl	%edx
00000488	incl	%esi
00000489	xorl	%eax,%eax
0000048b	testl	%ecx,%ecx
0000048d	jle	0x000004a6
0000048f	movb	(%edx),%al
00000491	movb	(%esi),%bl
00000493	cmpb	%al,%bl
00000495	je	0x00000480
00000497	movl	$0xffffffff,%ecx
0000049c	cmpb	%al,%bl
0000049e	movl	$0x00000001,%eax
000004a3	cmovbl	%ecx,%eax
000004a6	popl	%esi
000004a7	popl	%ebx
000004a8	ret
000004a9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
StringAfterPrefix(char const*, char const*):
000004b0	pushl	%ebp
000004b1	movl	%esp,%ebp
000004b3	pushl	%ebx
000004b4	pushl	%edi
000004b5	pushl	%esi
000004b6	subl	$0x0c,%esp
000004b9	movl	0x0c(%ebp),%edi
000004bc	movl	0x08(%ebp),%edx
000004bf	nop
000004c0	movb	(%edi),%cl
000004c2	testb	%cl,%cl
000004c4	je	0x0000055c
000004ca	movzbl	(%edx),%eax
000004cd	incl	%edx
000004ce	movl	%edx,0xf0(%ebp)
000004d1	movl	%eax,%edx
000004d3	testb	%dl,%dl
000004d5	js	0x000004eb
000004d7	movl	$0x00000040,%eax
000004dc	subl	%edx,%eax
000004de	leal	0xa5(%edx),%ebx
000004e1	andl	%eax,%ebx
000004e3	shrl	$0x1a,%ebx
000004e6	andl	$0x20,%ebx
000004e9	jmp	0x0000050c
000004eb	movl	%edx,(%esp)
000004ee	movl	$0x00008000,0x04(%esp)
000004f6	movl	%edx,%esi
000004f8	calll	___maskrune
000004fd	movl	%esi,%edx
000004ff	movb	(%edi),%cl
00000501	testl	%eax,%eax
00000503	setne	%al
00000506	movzbl	%al,%ebx
00000509	shll	$0x05,%ebx
0000050c	addl	%edx,%ebx
0000050e	movzbl	%cl,%esi
00000511	incl	%edi
00000512	testb	%cl,%cl
00000514	js	0x0000052a
00000516	movl	$0x00000040,%eax
0000051b	subl	%esi,%eax
0000051d	leal	0xa5(%esi),%ecx
00000520	andl	%eax,%ecx
00000522	shrl	$0x1a,%ecx
00000525	andl	$0x20,%ecx
00000528	jmp	0x00000545
0000052a	movl	%esi,(%esp)
0000052d	movl	$0x00008000,0x04(%esp)
00000535	calll	___maskrune
0000053a	testl	%eax,%eax
0000053c	setne	%al
0000053f	movzbl	%al,%ecx
00000542	shll	$0x05,%ecx
00000545	addl	%esi,%ecx
00000547	xorl	%eax,%eax
00000549	cmpl	%ecx,%ebx
0000054b	movl	0xf0(%ebp),%edx
0000054e	je	0x000004c0
00000554	addl	$0x0c,%esp
00000557	popl	%esi
00000558	popl	%edi
00000559	popl	%ebx
0000055a	popl	%ebp
0000055b	ret
0000055c	movl	%edx,%eax
0000055e	jmp	0x00000554
StringAfterPrefixCaseSensitive(char const*, char const*):
00000560	pushl	%ebx
00000561	pushl	%esi
00000562	movl	0x10(%esp),%ecx
00000566	movl	0x0c(%esp),%edx
0000056a	xorl	%eax,%eax
0000056c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00000570	movb	(%ecx),%bl
00000572	testb	%bl,%bl
00000574	je	0x00000583
00000576	incl	%ecx
00000577	leal	0x01(%edx),%esi
0000057a	cmpb	%bl,(%edx)
0000057c	movl	%esi,%edx
0000057e	je	0x00000570
00000580	popl	%esi
00000581	popl	%ebx
00000582	ret
00000583	movl	%edx,%eax
00000585	jmp	0x00000580
00000587	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atoi64(char const*):
00000590	pushl	%ebp
00000591	pushl	%ebx
00000592	pushl	%edi
00000593	pushl	%esi
00000594	subl	$0x08,%esp
00000597	movl	0x1c(%esp),%eax
0000059b	leal	0x01(%eax),%ebp
0000059e	movl	$0xffffffff,%ecx
000005a3	cmpb	$0x2d,(%eax)
000005a6	movl	_V_memset(char const*, int, void*, int, int),%edx
000005ab	cmovel	%ecx,%edx
000005ae	movl	%edx,0x04(%esp)
000005b2	movl	$0x00000001,%edx
000005b7	cmovel	%ecx,%edx
000005ba	movl	%edx,(%esp)
000005bd	cmovnel	%eax,%ebp
000005c0	movb	_V_memset(char const*, int, void*, int, int)(%ebp),%bl
000005c3	cmpb	$0x27,%bl
000005c6	je	0x00000681
000005cc	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000005cf	jne	0x0000068c
000005d5	movb	0x01(%ebp),%al
000005d8	orb	$0x20,%al
000005da	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000005dc	cmpb	$0x78,%al
000005de	je	0x0000061f
000005e0	incl	%ebp
000005e1	movl	$0xffffffff,%eax
000005e6	movl	$0xffffffd0,%ecx
000005eb	movl	$0x0000000a,%edi
000005f0	movsbl	%bl,%edx
000005f3	movl	%edx,%esi
000005f5	sarl	$0x1f,%esi
000005f8	addl	%edx,%ecx
000005fa	adcl	%eax,%esi
000005fc	movb	_V_memset(char const*, int, void*, int, int)(%ebp),%bl
000005ff	movb	%bl,%al
00000601	addb	$0xd0,%al
00000603	cmpb	$0x09,%al
00000605	ja	0x0000069f
0000060b	movl	%ecx,%eax
0000060d	mull	%edi
0000060f	movl	%eax,%ecx
00000611	imull	$0x0a,%esi,%eax
00000614	addl	%edx,%eax
00000616	addl	$0xd0,%ecx
00000619	adcl	$0xff,%eax
0000061c	incl	%ebp
0000061d	jmp	0x000005f0
0000061f	addl	$0x02,%ebp
00000622	xorl	%ecx,%ecx
00000624	xorl	%esi,%esi
00000626	jmp	0x00000641
00000628	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000630	shldl	$0x04,%ecx,%esi
00000634	shll	$0x04,%ecx
00000637	addl	$0xa9,%ecx
0000063a	adcl	$0xff,%esi
0000063d	addl	%eax,%ecx
0000063f	adcl	%edx,%esi
00000641	movsbl	_V_memset(char const*, int, void*, int, int)(%ebp),%eax
00000645	incl	%ebp
00000646	movl	%eax,%edx
00000648	sarl	$0x1f,%edx
0000064b	movl	%eax,%ebx
0000064d	addb	$0xd0,%bl
00000650	cmpb	$0x09,%bl
00000653	ja	0x00000661
00000655	shldl	$0x04,%ecx,%esi
00000659	shll	$0x04,%ecx
0000065c	addl	$0xd0,%ecx
0000065f	jmp	0x0000063a
00000661	movl	%eax,%ebx
00000663	addb	$0x9f,%bl
00000666	cmpb	$0x05,%bl
00000669	jbe	0x00000630
0000066b	movl	%eax,%ebx
0000066d	addb	$0xbf,%bl
00000670	cmpb	$0x05,%bl
00000673	ja	0x0000069f
00000675	shldl	$0x04,%ecx,%esi
00000679	shll	$0x04,%ecx
0000067c	addl	$0xc9,%ecx
0000067f	jmp	0x0000063a
00000681	movsbl	0x01(%ebp),%ecx
00000685	movl	%ecx,%esi
00000687	sarl	$0x1f,%esi
0000068a	jmp	0x0000069f
0000068c	movb	%bl,%al
0000068e	addb	$0xd0,%al
00000690	xorl	%ecx,%ecx
00000692	cmpb	$0x09,%al
00000694	movl	_V_memset(char const*, int, void*, int, int),%esi
00000699	jbe	0x000005e0
0000069f	movl	%ecx,%eax
000006a1	movl	(%esp),%ebx
000006a4	mull	%ebx
000006a6	movl	0x04(%esp),%edi
000006aa	imull	%ecx,%edi
000006ad	addl	%edx,%edi
000006af	imull	%ebx,%esi
000006b2	addl	%edi,%esi
000006b4	movl	%esi,%edx
000006b6	addl	$0x08,%esp
000006b9	popl	%esi
000006ba	popl	%edi
000006bb	popl	%ebx
000006bc	popl	%ebp
000006bd	ret
000006be	nop
V_atoui64(char const*):
000006c0	pushl	%ebp
000006c1	pushl	%ebx
000006c2	pushl	%edi
000006c3	pushl	%esi
000006c4	movl	0x14(%esp),%esi
000006c8	movb	(%esi),%bl
000006ca	cmpb	$0x27,%bl
000006cd	je	0x00000790
000006d3	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000006d6	jne	0x0000079b
000006dc	movb	0x01(%esi),%al
000006df	orb	$0x20,%al
000006e1	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
000006e3	cmpb	$0x78,%al
000006e5	je	0x0000072c
000006e7	incl	%esi
000006e8	movl	$0xffffffff,%ebp
000006ed	movl	$0xffffffd0,%eax
000006f2	movl	$0x0000000a,%edi
000006f7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000700	movsbl	%bl,%edx
00000703	movl	%edx,%ecx
00000705	sarl	$0x1f,%ecx
00000708	addl	%edx,%eax
0000070a	adcl	%ebp,%ecx
0000070c	movb	(%esi),%bl
0000070e	movb	%bl,%dl
00000710	addb	$0xd0,%dl
00000713	cmpb	$0x09,%dl
00000716	ja	0x000007b0
0000071c	mull	%edi
0000071e	imull	$0x0a,%ecx,%ebp
00000721	addl	%edx,%ebp
00000723	addl	$0xd0,%eax
00000726	adcl	$0xff,%ebp
00000729	incl	%esi
0000072a	jmp	0x00000700
0000072c	addl	$0x02,%esi
0000072f	xorl	%eax,%eax
00000731	xorl	%ecx,%ecx
00000733	jmp	0x00000751
00000735	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000740	shldl	$0x04,%eax,%ecx
00000744	shll	$0x04,%eax
00000747	addl	$0xa9,%eax
0000074a	adcl	$0xff,%ecx
0000074d	addl	%edx,%eax
0000074f	adcl	%edi,%ecx
00000751	movsbl	(%esi),%edx
00000754	incl	%esi
00000755	movl	%edx,%edi
00000757	sarl	$0x1f,%edi
0000075a	movl	%edx,%ebx
0000075c	addb	$0xd0,%bl
0000075f	cmpb	$0x09,%bl
00000762	ja	0x00000770
00000764	shldl	$0x04,%eax,%ecx
00000768	shll	$0x04,%eax
0000076b	addl	$0xd0,%eax
0000076e	jmp	0x0000074a
00000770	movl	%edx,%ebx
00000772	addb	$0x9f,%bl
00000775	cmpb	$0x05,%bl
00000778	jbe	0x00000740
0000077a	movl	%edx,%ebx
0000077c	addb	$0xbf,%bl
0000077f	cmpb	$0x05,%bl
00000782	ja	0x000007b0
00000784	shldl	$0x04,%eax,%ecx
00000788	shll	$0x04,%eax
0000078b	addl	$0xc9,%eax
0000078e	jmp	0x0000074a
00000790	movsbl	0x01(%esi),%eax
00000794	movl	%eax,%ecx
00000796	sarl	$0x1f,%ecx
00000799	jmp	0x000007b0
0000079b	movb	%bl,%cl
0000079d	addb	$0xd0,%cl
000007a0	xorl	%eax,%eax
000007a2	cmpb	$0x09,%cl
000007a5	movl	_V_memset(char const*, int, void*, int, int),%ecx
000007aa	jbe	0x000006e7
000007b0	movl	%ecx,%edx
000007b2	popl	%esi
000007b3	popl	%edi
000007b4	popl	%ebx
000007b5	popl	%ebp
000007b6	ret
000007b7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atoi(char const*):
000007c0	jmp	V_atoi64(char const*)
000007c5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_atof(char const*):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x2c,%esp
000007d9	calll	0x000007de
000007de	popl	%edi
000007df	movl	0x08(%ebp),%eax
000007e2	movb	(%eax),%cl
000007e4	cmpb	$0x2b,%cl
000007e7	je	0x000007fb
000007e9	movl	$0x00000001,%esi
000007ee	cmpb	$0x2d,%cl
000007f1	jne	0x00000801
000007f3	incl	%eax
000007f4	movl	$0xffffffff,%esi
000007f9	jmp	0x00000801
000007fb	incl	%eax
000007fc	movl	$0x00000001,%esi
00000801	movb	(%eax),%cl
00000803	cmpb	$0x27,%cl
00000806	je	0x000008d6
0000080c	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%cl
0000080f	je	0x00000825
00000811	movl	%esi,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00000814	xorl	%ebx,%ebx
00000816	pxor	%xmm1,%xmm1
0000081a	movl	$0xffffffff,%ecx
0000081f	incl	%eax
00000820	jmp	0x0000092c
00000825	movb	0x01(%eax),%cl
00000828	orb	$0x20,%cl
0000082b	cmpb	$0x78,%cl
0000082e	jne	0x00000811
00000830	addl	$0x02,%eax
00000833	pxor	%xmm1,%xmm1
00000837	movsd	0x13500-0x7de(%edi),%xmm0
0000083f	jmp	0x0000086a
00000841	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000850	mulsd	%xmm0,%xmm1
00000854	movsbl	%cl,%ecx
00000857	cvtsi2sd	%ecx,%xmm2
0000085b	addsd	%xmm1,%xmm2
0000085f	addsd	0x13520-0x7de(%edi),%xmm2
00000867	movaps	%xmm2,%xmm1
0000086a	movb	(%eax),%cl
0000086c	incl	%eax
0000086d	movb	%cl,%dl
0000086f	addb	$0xd0,%dl
00000872	cmpb	$0x09,%dl
00000875	jbe	0x00000850
00000877	movb	%cl,%dl
00000879	addb	$0x9f,%dl
0000087c	cmpb	$0x05,%dl
0000087f	ja	0x000008a5
00000881	mulsd	%xmm0,%xmm1
00000885	movsbl	%cl,%ecx
00000888	cvtsi2sd	%ecx,%xmm2
0000088c	addsd	%xmm1,%xmm2
00000890	addsd	0x13518-0x7de(%edi),%xmm2
00000898	addsd	0x13510-0x7de(%edi),%xmm2
000008a0	movaps	%xmm2,%xmm1
000008a3	jmp	0x0000086a
000008a5	movb	%cl,%dl
000008a7	addb	$0xbf,%dl
000008aa	cmpb	$0x05,%dl
000008ad	ja	0x000008c8
000008af	mulsd	%xmm0,%xmm1
000008b3	movsbl	%cl,%ecx
000008b6	cvtsi2sd	%ecx,%xmm2
000008ba	addsd	%xmm1,%xmm2
000008be	addsd	0x13508-0x7de(%edi),%xmm2
000008c6	jmp	0x00000898
000008c8	cvtsi2sd	%esi,%xmm0
000008cc	mulsd	%xmm0,%xmm1
000008d0	cvtsd2ss	%xmm1,%xmm0
000008d4	jmp	0x000008e1
000008d6	movsbl	0x01(%eax),%eax
000008da	imull	%esi,%eax
000008dd	cvtsi2ss	%eax,%xmm0
000008e1	movss	%xmm0,0xe4(%ebp)
000008e6	flds	0xe4(%ebp)
000008e9	addl	$0x2c,%esp
000008ec	popl	%esi
000008ed	popl	%edi
000008ee	popl	%ebx
000008ef	popl	%ebp
000008f0	ret
000008f1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000900	movb	%cl,%dl
00000902	addb	$0xd0,%dl
00000905	cmpb	$0x0a,%dl
00000908	jae	0x0000096b
0000090a	mulsd	0x13510-0x7de(%edi),%xmm1
00000912	movsbl	%cl,%ecx
00000915	cvtsi2sd	%ecx,%xmm0
00000919	addsd	%xmm1,%xmm0
0000091d	addsd	0x13520-0x7de(%edi),%xmm0
00000925	incl	%ebx
00000926	movl	%esi,%ecx
00000928	movaps	%xmm0,%xmm1
0000092b	incl	%eax
0000092c	movl	%ecx,%esi
0000092e	movb	0xff(%eax),%cl
00000931	cmpb	$0x2e,%cl
00000934	jne	0x00000900
00000936	incl	%eax
00000937	cmpl	$0xff,%esi
0000093a	movl	%ebx,%ecx
0000093c	je	0x0000092c
0000093e	cmpl	%esi,%ebx
00000940	jle	0x00000959
00000942	movsd	0x13510-0x7de(%edi),%xmm0
0000094a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000950	divsd	%xmm0,%xmm1
00000954	decl	%ebx
00000955	cmpl	%esi,%ebx
00000957	jg	0x00000950
00000959	cvtsi2sd	_V_strcpy(char const*, int, char*, char const*)(%ebp),%xmm0
0000095e	mulsd	%xmm1,%xmm0
00000962	cvtsd2ss	%xmm0,%xmm0
00000966	jmp	0x000008e1
0000096b	orb	$0x20,%cl
0000096e	cmpb	$0x65,%cl
00000971	jne	0x000009b4
00000973	movsd	%xmm1,0xd8(%ebp)
00000978	movl	%eax,(%esp)
0000097b	calll	V_atoi64(char const*)
00000980	testl	%eax,%eax
00000982	jne	0x0000098b
00000984	movsd	0xd8(%ebp),%xmm1
00000989	jmp	0x000009b4
0000098b	cvtsi2sd	%eax,%xmm0
0000098f	movsd	%xmm0,0x08(%esp)
00000995	movsd	0x13510-0x7de(%edi),%xmm0
0000099d	movsd	%xmm0,(%esp)
000009a2	calll	_pow
000009a7	fstpl	0xe8(%ebp)
000009aa	movsd	0xd8(%ebp),%xmm1
000009af	mulsd	0xe8(%ebp),%xmm1
000009b4	cmpl	$0xff,%esi
000009b7	jne	0x0000093e
000009b9	cvtsi2sd	_V_strcpy(char const*, int, char*, char const*)(%ebp),%xmm0
000009be	jmp	0x000008cc
000009c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_normalizeFloatString(char*):
000009d0	pushl	%ebp
000009d1	movl	%esp,%ebp
000009d3	pushl	%esi
000009d4	subl	$0x14,%esp
000009d7	movl	0x08(%ebp),%esi
000009da	movl	%esi,(%esp)
000009dd	movl	$0x0000002e,0x04(%esp)
000009e5	calll	_strchr
000009ea	testl	%eax,%eax
000009ec	je	0x00000a20
000009ee	movl	%esi,(%esp)
000009f1	calll	_strlen
000009f6	jmp	0x00000a0d
000009f8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000a00	cmpb	_V_memcpy(char const*, int, void*, void const*, int),%cl
00000a03	jne	0x00000a20
00000a05	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00000a0a	leal	0xff(%eax),%eax
00000a0d	cmpl	$0x02,%eax
00000a10	jl	0x00000a20
00000a12	movb	0xff(%esi,%eax),%cl
00000a16	cmpb	$0x2e,%cl
00000a19	jne	0x00000a00
00000a1b	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00000a20	addl	$0x14,%esp
00000a23	popl	%esi
00000a24	popl	%ebp
00000a25	ret
00000a26	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stristr(char const*, char const*):
00000a30	pushl	%ebp
00000a31	movl	%esp,%ebp
00000a33	pushl	%ebx
00000a34	pushl	%edi
00000a35	pushl	%esi
00000a36	subl	$0x0c,%esp
00000a39	xorl	%eax,%eax
00000a3b	movl	0x08(%ebp),%ecx
00000a3e	testl	%ecx,%ecx
00000a40	je	0x00000bad
00000a46	cmpl	_V_memset(char const*, int, void*, int, int),0x0c(%ebp)
00000a4a	je	0x00000bad
00000a50	movl	%ecx,%eax
00000a52	jmp	0x00000a61
00000a54	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000a60	incl	%eax
00000a61	movl	%eax,0xf0(%ebp)
00000a64	movzbl	(%eax),%ecx
00000a67	movl	%eax,%esi
00000a69	xorl	%eax,%eax
00000a6b	testl	%ecx,%ecx
00000a6d	je	0x00000bad
00000a73	testb	%cl,%cl
00000a75	js	0x00000a8b
00000a77	movl	$0x00000040,%eax
00000a7c	subl	%ecx,%eax
00000a7e	leal	0xa5(%ecx),%ebx
00000a81	andl	%eax,%ebx
00000a83	shrl	$0x1a,%ebx
00000a86	andl	$0x20,%ebx
00000a89	jmp	0x00000aaa
00000a8b	movl	%ecx,(%esp)
00000a8e	movl	$0x00008000,0x04(%esp)
00000a96	movl	%ecx,%edi
00000a98	calll	___maskrune
00000a9d	movl	%edi,%ecx
00000a9f	testl	%eax,%eax
00000aa1	setne	%al
00000aa4	movzbl	%al,%ebx
00000aa7	shll	$0x05,%ebx
00000aaa	addl	%ecx,%ebx
00000aac	movl	0x0c(%ebp),%eax
00000aaf	movzbl	(%eax),%edx
00000ab2	testb	%dl,%dl
00000ab4	js	0x00000aca
00000ab6	movl	$0x00000040,%ecx
00000abb	subl	%edx,%ecx
00000abd	leal	0xa5(%edx),%eax
00000ac0	andl	%ecx,%eax
00000ac2	shrl	$0x1a,%eax
00000ac5	andl	$0x20,%eax
00000ac8	jmp	0x00000ae9
00000aca	movl	%edx,(%esp)
00000acd	movl	$0x00008000,0x04(%esp)
00000ad5	movl	%edx,%edi
00000ad7	calll	___maskrune
00000adc	movl	%edi,%edx
00000ade	testl	%eax,%eax
00000ae0	setne	%al
00000ae3	movzbl	%al,%eax
00000ae6	shll	$0x05,%eax
00000ae9	addl	%edx,%eax
00000aeb	movl	$0x00000001,%edi
00000af0	cmpl	%eax,%ebx
00000af2	movl	%esi,%eax
00000af4	jne	0x00000a60
00000afa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000b00	movl	0x0c(%ebp),%ecx
00000b03	movb	(%ecx,%edi),%cl
00000b06	testb	%cl,%cl
00000b08	je	0x00000bad
00000b0e	movzbl	(%eax,%edi),%edx
00000b12	xorl	%eax,%eax
00000b14	testl	%edx,%edx
00000b16	je	0x00000bad
00000b1c	testb	%dl,%dl
00000b1e	js	0x00000b34
00000b20	movl	$0x00000040,%eax
00000b25	subl	%edx,%eax
00000b27	leal	0xa5(%edx),%ebx
00000b2a	andl	%eax,%ebx
00000b2c	shrl	$0x1a,%ebx
00000b2f	andl	$0x20,%ebx
00000b32	jmp	0x00000b59
00000b34	movl	%edx,(%esp)
00000b37	movl	$0x00008000,0x04(%esp)
00000b3f	movl	%edx,%esi
00000b41	calll	___maskrune
00000b46	movl	%esi,%edx
00000b48	movl	0x0c(%ebp),%ecx
00000b4b	movb	(%ecx,%edi),%cl
00000b4e	testl	%eax,%eax
00000b50	setne	%al
00000b53	movzbl	%al,%ebx
00000b56	shll	$0x05,%ebx
00000b59	addl	%edx,%ebx
00000b5b	movzbl	%cl,%esi
00000b5e	testb	%cl,%cl
00000b60	js	0x00000b76
00000b62	movl	$0x00000040,%ecx
00000b67	subl	%esi,%ecx
00000b69	leal	0xa5(%esi),%eax
00000b6c	andl	%ecx,%eax
00000b6e	shrl	$0x1a,%eax
00000b71	andl	$0x20,%eax
00000b74	jmp	0x00000b91
00000b76	movl	%esi,(%esp)
00000b79	movl	$0x00008000,0x04(%esp)
00000b81	calll	___maskrune
00000b86	testl	%eax,%eax
00000b88	setne	%al
00000b8b	movzbl	%al,%eax
00000b8e	shll	$0x05,%eax
00000b91	addl	%esi,%eax
00000b93	incl	%edi
00000b94	cmpl	%eax,%ebx
00000b96	movl	0xf0(%ebp),%eax
00000b99	je	0x00000b00
00000b9f	movl	0x0c(%ebp),%ecx
00000ba2	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%ecx,%edi)
00000ba7	jne	0x00000a60
00000bad	addl	$0x0c,%esp
00000bb0	popl	%esi
00000bb1	popl	%edi
00000bb2	popl	%ebx
00000bb3	popl	%ebp
00000bb4	ret
00000bb5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_stristr(char*, char const*):
00000bc0	jmp	V_stristr(char const*, char const*)
00000bc5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnistr(char const*, char const*, int):
00000bd0	pushl	%ebp
00000bd1	movl	%esp,%ebp
00000bd3	pushl	%ebx
00000bd4	pushl	%edi
00000bd5	pushl	%esi
00000bd6	subl	$0x1c,%esp
00000bd9	xorl	%eax,%eax
00000bdb	movl	0x08(%ebp),%edx
00000bde	testl	%edx,%edx
00000be0	je	0x00000d6c
00000be6	cmpl	_V_memset(char const*, int, void*, int, int),0x0c(%ebp)
00000bea	je	0x00000d6c
00000bf0	movl	0x10(%ebp),%ecx
00000bf3	leal	0xff(%ecx),%eax
00000bf6	movl	%eax,0xe8(%ebp)
00000bf9	jmp	0x00000c08
00000bfb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000c00	decl	0xe8(%ebp)
00000c03	movl	0xe4(%ebp),%ecx
00000c06	decl	%ecx
00000c07	incl	%edx
00000c08	movl	%edx,0xec(%ebp)
00000c0b	movzbl	(%edx),%ebx
00000c0e	xorl	%eax,%eax
00000c10	testl	%ebx,%ebx
00000c12	je	0x00000d6c
00000c18	testl	%ecx,%ecx
00000c1a	movl	%ecx,0xe4(%ebp)
00000c1d	jle	0x00000d6c
00000c23	movl	%edx,0xec(%ebp)
00000c26	testb	%bl,%bl
00000c28	js	0x00000c3e
00000c2a	movl	$0x00000040,%eax
00000c2f	subl	%ebx,%eax
00000c31	leal	0xa5(%ebx),%esi
00000c34	andl	%eax,%esi
00000c36	shrl	$0x1a,%esi
00000c39	andl	$0x20,%esi
00000c3c	jmp	0x00000c59
00000c3e	movl	%ebx,(%esp)
00000c41	movl	$0x00008000,0x04(%esp)
00000c49	calll	___maskrune
00000c4e	testl	%eax,%eax
00000c50	setne	%al
00000c53	movzbl	%al,%esi
00000c56	shll	$0x05,%esi
00000c59	addl	%ebx,%esi
00000c5b	movl	0x0c(%ebp),%eax
00000c5e	movzbl	(%eax),%ebx
00000c61	testb	%bl,%bl
00000c63	js	0x00000c79
00000c65	movl	$0x00000040,%ecx
00000c6a	subl	%ebx,%ecx
00000c6c	leal	0xa5(%ebx),%eax
00000c6f	andl	%ecx,%eax
00000c71	shrl	$0x1a,%eax
00000c74	andl	$0x20,%eax
00000c77	jmp	0x00000c94
00000c79	movl	%ebx,(%esp)
00000c7c	movl	$0x00008000,0x04(%esp)
00000c84	calll	___maskrune
00000c89	testl	%eax,%eax
00000c8b	setne	%al
00000c8e	movzbl	%al,%eax
00000c91	shll	$0x05,%eax
00000c94	addl	%ebx,%eax
00000c96	movl	$0x00000001,%edi
00000c9b	cmpl	%eax,%esi
00000c9d	movl	0xe8(%ebp),%ebx
00000ca0	movl	0xec(%ebp),%edx
00000ca3	jne	0x00000c00
00000ca9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00000cb0	movl	0x0c(%ebp),%eax
00000cb3	movb	(%eax,%edi),%cl
00000cb6	testb	%cl,%cl
00000cb8	je	0x00000d6a
00000cbe	xorl	%eax,%eax
00000cc0	testl	%ebx,%ebx
00000cc2	movl	%ebx,0xf0(%ebp)
00000cc5	jle	0x00000d6c
00000ccb	movzbl	(%edx,%edi),%ebx
00000ccf	xorl	%eax,%eax
00000cd1	testl	%ebx,%ebx
00000cd3	je	0x00000d6c
00000cd9	testb	%bl,%bl
00000cdb	js	0x00000cf1
00000cdd	movl	$0x00000040,%eax
00000ce2	subl	%ebx,%eax
00000ce4	leal	0xa5(%ebx),%esi
00000ce7	andl	%eax,%esi
00000ce9	shrl	$0x1a,%esi
00000cec	andl	$0x20,%esi
00000cef	jmp	0x00000d12
00000cf1	movl	%ebx,(%esp)
00000cf4	movl	$0x00008000,0x04(%esp)
00000cfc	calll	___maskrune
00000d01	movl	0x0c(%ebp),%ecx
00000d04	movb	(%ecx,%edi),%cl
00000d07	testl	%eax,%eax
00000d09	setne	%al
00000d0c	movzbl	%al,%esi
00000d0f	shll	$0x05,%esi
00000d12	addl	%ebx,%esi
00000d14	movzbl	%cl,%ebx
00000d17	testb	%cl,%cl
00000d19	js	0x00000d2f
00000d1b	movl	$0x00000040,%ecx
00000d20	subl	%ebx,%ecx
00000d22	leal	0xa5(%ebx),%eax
00000d25	andl	%ecx,%eax
00000d27	shrl	$0x1a,%eax
00000d2a	andl	$0x20,%eax
00000d2d	jmp	0x00000d4a
00000d2f	movl	%ebx,(%esp)
00000d32	movl	$0x00008000,0x04(%esp)
00000d3a	calll	___maskrune
00000d3f	testl	%eax,%eax
00000d41	setne	%al
00000d44	movzbl	%al,%eax
00000d47	shll	$0x05,%eax
00000d4a	addl	%ebx,%eax
00000d4c	incl	%edi
00000d4d	movl	0xf0(%ebp),%ebx
00000d50	decl	%ebx
00000d51	cmpl	%eax,%esi
00000d53	movl	0xec(%ebp),%edx
00000d56	je	0x00000cb0
00000d5c	movl	0x0c(%ebp),%eax
00000d5f	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%edi)
00000d64	jne	0x00000c00
00000d6a	movl	%edx,%eax
00000d6c	addl	$0x1c,%esp
00000d6f	popl	%esi
00000d70	popl	%edi
00000d71	popl	%ebx
00000d72	popl	%ebp
00000d73	ret
00000d74	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strnchr(char const*, char, int):
00000d80	pushl	%ebx
00000d81	movl	0x08(%esp),%ecx
00000d85	movl	0x10(%esp),%edx
00000d89	addl	%ecx,%edx
00000d8b	movb	0x0c(%esp),%bl
00000d8f	jmp	0x00000da1
00000d91	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00000da0	incl	%ecx
00000da1	xorl	%eax,%eax
00000da3	cmpl	%edx,%ecx
00000da5	jae	0x00000db5
00000da7	movb	(%ecx),%bh
00000da9	xorl	%eax,%eax
00000dab	testb	%bh,%bh
00000dad	je	0x00000db5
00000daf	cmpb	%bl,%bh
00000db1	jne	0x00000da0
00000db3	movl	%ecx,%eax
00000db5	popl	%ebx
00000db6	ret
00000db7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strncpy(char*, char const*, int):
00000dc0	pushl	%ebp
00000dc1	movl	%esp,%ebp
00000dc3	pushl	%edi
00000dc4	pushl	%esi
00000dc5	subl	$0x10,%esp
00000dc8	movl	0x10(%ebp),%esi
00000dcb	movl	%esi,0x08(%esp)
00000dcf	movl	0x0c(%ebp),%eax
00000dd2	movl	%eax,0x04(%esp)
00000dd6	movl	0x08(%ebp),%edi
00000dd9	movl	%edi,(%esp)
00000ddc	calll	_strncpy
00000de1	testl	%esi,%esi
00000de3	jle	0x00000dea
00000de5	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000dea	addl	$0x10,%esp
00000ded	popl	%esi
00000dee	popl	%edi
00000def	popl	%ebp
00000df0	ret
00000df1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_wcsncpy(wchar_t*, wchar_t const*, int):
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	pushl	%edi
00000e04	pushl	%esi
00000e05	subl	$0x10,%esp
00000e08	movl	0x10(%ebp),%esi
00000e0b	shrl	$0x02,%esi
00000e0e	movl	%esi,0x08(%esp)
00000e12	movl	0x0c(%ebp),%eax
00000e15	movl	%eax,0x04(%esp)
00000e19	movl	0x08(%ebp),%edi
00000e1c	movl	%edi,(%esp)
00000e1f	calll	_wcsncpy
00000e24	testl	%esi,%esi
00000e26	je	0x00000e30
00000e28	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000e30	addl	$0x10,%esp
00000e33	popl	%esi
00000e34	popl	%edi
00000e35	popl	%ebp
00000e36	ret
00000e37	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_snwprintf(wchar_t*, int, wchar_t const*, ...):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%edi
00000e44	pushl	%esi
00000e45	subl	$0x20,%esp
00000e48	leal	0x14(%ebp),%eax
00000e4b	movl	%eax,0xf4(%ebp)
00000e4e	movl	%eax,0x0c(%esp)
00000e52	movl	0x10(%ebp),%eax
00000e55	movl	%eax,0x08(%esp)
00000e59	movl	0x0c(%ebp),%esi
00000e5c	movl	%esi,0x04(%esp)
00000e60	movl	0x08(%ebp),%edi
00000e63	movl	%edi,(%esp)
00000e66	calll	_vswprintf
00000e6b	testl	%eax,%eax
00000e6d	js	0x00000e73
00000e6f	cmpl	%esi,%eax
00000e71	jl	0x00000e7d
00000e73	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000e7b	movl	%esi,%eax
00000e7d	addl	$0x20,%esp
00000e80	popl	%esi
00000e81	popl	%edi
00000e82	popl	%ebp
00000e83	ret
00000e84	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_vsnwprintf(wchar_t*, int, wchar_t const*, char*):
00000e90	pushl	%ebp
00000e91	movl	%esp,%ebp
00000e93	pushl	%edi
00000e94	pushl	%esi
00000e95	subl	$0x10,%esp
00000e98	movl	0x14(%ebp),%eax
00000e9b	movl	%eax,0x0c(%esp)
00000e9f	movl	0x10(%ebp),%eax
00000ea2	movl	%eax,0x08(%esp)
00000ea6	movl	0x0c(%ebp),%esi
00000ea9	movl	%esi,0x04(%esp)
00000ead	movl	0x08(%ebp),%edi
00000eb0	movl	%edi,(%esp)
00000eb3	calll	_vswprintf
00000eb8	testl	%eax,%eax
00000eba	js	0x00000ec0
00000ebc	cmpl	%esi,%eax
00000ebe	jl	0x00000eca
00000ec0	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
00000ec8	movl	%esi,%eax
00000eca	addl	$0x10,%esp
00000ecd	popl	%esi
00000ece	popl	%edi
00000ecf	popl	%ebp
00000ed0	ret
00000ed1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_snprintf(char*, int, char const*, ...):
00000ee0	pushl	%ebp
00000ee1	movl	%esp,%ebp
00000ee3	pushl	%edi
00000ee4	pushl	%esi
00000ee5	subl	$0x20,%esp
00000ee8	leal	0x14(%ebp),%eax
00000eeb	movl	%eax,0xf4(%ebp)
00000eee	movl	%eax,0x0c(%esp)
00000ef2	movl	0x10(%ebp),%eax
00000ef5	movl	%eax,0x08(%esp)
00000ef9	movl	0x0c(%ebp),%esi
00000efc	movl	%esi,0x04(%esp)
00000f00	movl	0x08(%ebp),%edi
00000f03	movl	%edi,(%esp)
00000f06	calll	_vsnprintf
00000f0b	testl	%eax,%eax
00000f0d	js	0x00000f13
00000f0f	cmpl	%esi,%eax
00000f11	jl	0x00000f1a
00000f13	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000f18	movl	%esi,%eax
00000f1a	addl	$0x20,%esp
00000f1d	popl	%esi
00000f1e	popl	%edi
00000f1f	popl	%ebp
00000f20	ret
00000f21	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_vsnprintf(char*, int, char const*, char*):
00000f30	pushl	%ebp
00000f31	movl	%esp,%ebp
00000f33	pushl	%edi
00000f34	pushl	%esi
00000f35	subl	$0x10,%esp
00000f38	movl	0x14(%ebp),%eax
00000f3b	movl	%eax,0x0c(%esp)
00000f3f	movl	0x10(%ebp),%eax
00000f42	movl	%eax,0x08(%esp)
00000f46	movl	0x0c(%ebp),%esi
00000f49	movl	%esi,0x04(%esp)
00000f4d	movl	0x08(%ebp),%edi
00000f50	movl	%edi,(%esp)
00000f53	calll	_vsnprintf
00000f58	testl	%eax,%eax
00000f5a	js	0x00000f60
00000f5c	cmpl	%esi,%eax
00000f5e	jl	0x00000f67
00000f60	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000f65	movl	%esi,%eax
00000f67	addl	$0x10,%esp
00000f6a	popl	%esi
00000f6b	popl	%edi
00000f6c	popl	%ebp
00000f6d	ret
00000f6e	nop
V_vsnprintfRet(char*, int, char const*, char*, bool*):
00000f70	pushl	%ebp
00000f71	movl	%esp,%ebp
00000f73	pushl	%ebx
00000f74	pushl	%edi
00000f75	pushl	%esi
00000f76	subl	$0x1c,%esp
00000f79	movl	0x14(%ebp),%eax
00000f7c	movl	%eax,0x0c(%esp)
00000f80	movl	0x10(%ebp),%eax
00000f83	movl	%eax,0x08(%esp)
00000f87	movl	0x0c(%ebp),%esi
00000f8a	movl	%esi,0x04(%esp)
00000f8e	movl	0x08(%ebp),%edi
00000f91	movl	%edi,(%esp)
00000f94	calll	_vsnprintf
00000f99	movl	0x18(%ebp),%ecx
00000f9c	testl	%ecx,%ecx
00000f9e	je	0x00000fae
00000fa0	cmpl	%esi,%eax
00000fa2	setge	%bl
00000fa5	movl	%eax,%edx
00000fa7	shrl	$0x1f,%edx
00000faa	orb	%bl,%dl
00000fac	movb	%dl,(%ecx)
00000fae	testl	%eax,%eax
00000fb0	js	0x00000fb6
00000fb2	cmpl	%esi,%eax
00000fb4	jl	0x00000fbd
00000fb6	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00000fbb	movl	%esi,%eax
00000fbd	addl	$0x1c,%esp
00000fc0	popl	%esi
00000fc1	popl	%edi
00000fc2	popl	%ebx
00000fc3	popl	%ebp
00000fc4	ret
00000fc5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strncat(char*, char const*, unsigned long, int):
00000fd0	pushl	%ebp
00000fd1	movl	%esp,%ebp
00000fd3	pushl	%ebx
00000fd4	pushl	%edi
00000fd5	pushl	%esi
00000fd6	subl	$0x0c,%esp
00000fd9	movl	0x08(%ebp),%esi
00000fdc	movl	%esi,(%esp)
00000fdf	calll	_strlen
00000fe4	movl	%eax,%edi
00000fe6	movl	0x0c(%ebp),%ebx
00000fe9	movl	%ebx,(%esp)
00000fec	calll	_strlen
00000ff1	movl	0x14(%ebp),%ecx
00000ff4	testl	%ecx,%ecx
00000ff6	js	0x00000ffd
00000ff8	cmpl	%ecx,%eax
00000ffa	cmovgl	%ecx,%eax
00000ffd	movl	0x10(%ebp),%ecx
00001000	leal	(%eax,%edi),%edx
00001003	cmpl	%ecx,%edx
00001005	jb	0x0000100c
00001007	decl	%ecx
00001008	subl	%edi,%ecx
0000100a	movl	%ecx,%eax
0000100c	testl	%eax,%eax
0000100e	jle	0x00001022
00001010	movl	%eax,0x08(%esp)
00001014	movl	%ebx,0x04(%esp)
00001018	movl	%esi,(%esp)
0000101b	calll	_strncat
00001020	jmp	0x00001024
00001022	movl	%esi,%eax
00001024	addl	$0x0c,%esp
00001027	popl	%esi
00001028	popl	%edi
00001029	popl	%ebx
0000102a	popl	%ebp
0000102b	ret
0000102c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_wcsncat(wchar_t*, wchar_t const*, unsigned long, int):
00001030	pushl	%ebp
00001031	movl	%esp,%ebp
00001033	pushl	%ebx
00001034	pushl	%edi
00001035	pushl	%esi
00001036	subl	$0x0c,%esp
00001039	movl	0x08(%ebp),%esi
0000103c	movl	%esi,(%esp)
0000103f	calll	_wcslen
00001044	movl	%eax,%edi
00001046	movl	0x0c(%ebp),%ebx
00001049	movl	%ebx,(%esp)
0000104c	calll	_wcslen
00001051	movl	0x14(%ebp),%ecx
00001054	testl	%ecx,%ecx
00001056	js	0x0000105d
00001058	cmpl	%ecx,%eax
0000105a	cmovgl	%ecx,%eax
0000105d	movl	0x10(%ebp),%ecx
00001060	leal	(%eax,%edi),%edx
00001063	cmpl	%ecx,%edx
00001065	jb	0x0000106c
00001067	decl	%ecx
00001068	subl	%edi,%ecx
0000106a	movl	%ecx,%eax
0000106c	testl	%eax,%eax
0000106e	jle	0x00001082
00001070	movl	%eax,0x08(%esp)
00001074	movl	%ebx,0x04(%esp)
00001078	movl	%esi,(%esp)
0000107b	calll	_wcsncat
00001080	jmp	0x00001084
00001082	movl	%esi,%eax
00001084	addl	$0x0c,%esp
00001087	popl	%esi
00001088	popl	%edi
00001089	popl	%ebx
0000108a	popl	%ebp
0000108b	ret
0000108c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_pretifymem(float, int, bool):
00001090	pushl	%ebp
00001091	movl	%esp,%ebp
00001093	pushl	%ebx
00001094	pushl	%edi
00001095	pushl	%esi
00001096	subl	$0x6c,%esp
00001099	calll	0x0000109e
0000109e	popl	%ebx
0000109f	movl	0x15f7b-0x109e(%ebx),%eax
000010a5	movl	%eax,0x9c(%ebp)
000010a8	movl	(%eax),%eax
000010aa	movl	%eax,0xf0(%ebp)
000010ad	movl	V_pretifymem(float, int, bool)::current-0x109e(%ebx),%eax
000010b3	leal	0x01(%eax),%ecx
000010b6	andl	$0x07,%ecx
000010b9	movl	%ecx,V_pretifymem(float, int, bool)::current-0x109e(%ebx)
000010bf	movb	0x10(%ebp),%cl
000010c2	testb	%cl,%cl
000010c4	je	0x000010d0
000010c6	movss	0x13530-0x109e(%ebx),%xmm0
000010ce	jmp	0x000010d8
000010d0	movss	0x13534-0x109e(%ebx),%xmm0
000010d8	movaps	%xmm0,%xmm1
000010db	mulss	%xmm1,%xmm1
000010df	shll	$0x05,%eax
000010e2	leal	V_pretifymem(float, int, bool)::output-0x109e(%ebx,%eax),%eax
000010e9	movl	%eax,0xa4(%ebp)
000010ec	movl	0x0c(%ebp),%edi
000010ef	movss	0x08(%ebp),%xmm2
000010f4	ucomiss	%xmm1,%xmm2
000010f7	jbe	0x00001117
000010f9	leal	0x135ec-0x109e(%ebx),%eax
000010ff	movl	%eax,0x08(%esp)
00001103	leal	0xe8(%ebp),%eax
00001106	movl	%eax,(%esp)
00001109	movl	$0x00000008,0x04(%esp)
00001111	divss	%xmm1,%xmm2
00001115	jmp	0x00001152
00001117	ucomiss	%xmm0,%xmm2
0000111a	jbe	0x0000113a
0000111c	leal	0x135f0-0x109e(%ebx),%eax
00001122	movl	%eax,0x08(%esp)
00001126	leal	0xe8(%ebp),%eax
00001129	movl	%eax,(%esp)
0000112c	movl	$0x00000008,0x04(%esp)
00001134	divss	%xmm0,%xmm2
00001138	jmp	0x00001152
0000113a	leal	0x135f4-0x109e(%ebx),%eax
00001140	movl	%eax,0x08(%esp)
00001144	leal	0xe8(%ebp),%eax
00001147	movl	%eax,(%esp)
0000114a	movl	$0x00000008,0x04(%esp)
00001152	movss	%xmm2,0xa0(%ebp)
00001157	calll	V_snprintf(char*, int, char const*, ...)
0000115c	movss	0xa0(%ebp),%xmm0
00001161	cvttss2si	%xmm0,%eax
00001165	cvtsi2ss	%eax,%xmm1
00001169	subss	%xmm1,%xmm0
0000116d	andps	0x13540-0x109e(%ebx),%xmm0
00001174	cvtss2sd	%xmm0,%xmm0
00001178	movsd	0x13528-0x109e(%ebx),%xmm1
00001180	ucomisd	%xmm0,%xmm1
00001184	jbe	0x0000119d
00001186	leal	0xe8(%ebp),%ecx
00001189	movl	%ecx,0x10(%esp)
0000118d	movl	%eax,0x0c(%esp)
00001191	leal	0x135fb-0x109e(%ebx),%eax
00001197	movl	%eax,0x08(%esp)
0000119b	jmp	0x000011e2
0000119d	leal	0xe8(%ebp),%eax
000011a0	movl	%eax,0x10(%esp)
000011a4	leal	0x13600-0x109e(%ebx),%eax
000011aa	movl	%eax,0x08(%esp)
000011ae	leal	0xa8(%ebp),%esi
000011b1	movl	%esi,(%esp)
000011b4	testl	%edi,%edi
000011b6	movl	_V_memset(char const*, int, void*, int, int),%eax
000011bb	cmovgl	%edi,%eax
000011be	movl	%eax,0x0c(%esp)
000011c2	movl	$0x00000020,0x04(%esp)
000011ca	calll	V_snprintf(char*, int, char const*, ...)
000011cf	movss	0xa0(%ebp),%xmm0
000011d4	cvtss2sd	%xmm0,%xmm0
000011d8	movsd	%xmm0,0x0c(%esp)
000011de	movl	%esi,0x08(%esp)
000011e2	leal	0xc8(%ebp),%eax
000011e5	movl	%eax,(%esp)
000011e8	movl	$0x00000020,0x04(%esp)
000011f0	calll	V_snprintf(char*, int, char const*, ...)
000011f5	leal	0xc8(%ebp),%esi
000011f8	movl	%esi,(%esp)
000011fb	movl	$0x0000002e,0x04(%esp)
00001203	calll	_strchr
00001208	testl	%eax,%eax
0000120a	jne	0x0000121c
0000120c	movl	%esi,(%esp)
0000120f	movl	$0x00000020,0x04(%esp)
00001217	calll	_strchr
0000121c	movb	0xc8(%ebp),%bl
0000121f	testb	%bl,%bl
00001221	movl	0xa4(%ebp),%edi
00001224	je	0x00001274
00001226	movl	$0xfffffffd,%ecx
0000122b	subl	%esi,%ecx
0000122d	addl	%eax,%ecx
0000122f	leal	0xc9(%ebp),%esi
00001232	movl	0xa4(%ebp),%edi
00001235	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001240	movl	%ecx,%eax
00001242	movl	$0x55555556,%edx
00001247	imull	%edx
00001249	movl	%edx,%eax
0000124b	shrl	$0x1f,%eax
0000124e	addl	%edx,%eax
00001250	leal	(%eax,%eax,2),%eax
00001253	movl	%ecx,%edx
00001255	subl	%eax,%edx
00001257	jne	0x00001269
00001259	testl	%ecx,%ecx
0000125b	js	0x00001269
0000125d	cmpl	0xa4(%ebp),%edi
00001260	je	0x00001269
00001262	movb	$0x2c,(%edi)
00001265	movb	0xff(%esi),%bl
00001268	incl	%edi
00001269	movb	%bl,(%edi)
0000126b	incl	%edi
0000126c	decl	%ecx
0000126d	movb	(%esi),%bl
0000126f	incl	%esi
00001270	testb	%bl,%bl
00001272	jne	0x00001240
00001274	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00001277	movl	0x9c(%ebp),%eax
0000127a	movl	(%eax),%eax
0000127c	cmpl	0xf0(%ebp),%eax
0000127f	jne	0x0000128c
00001281	movl	0xa4(%ebp),%eax
00001284	addl	$0x6c,%esp
00001287	popl	%esi
00001288	popl	%edi
00001289	popl	%ebx
0000128a	popl	%ebp
0000128b	ret
0000128c	calll	___stack_chk_fail
00001291	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_pretifynum(long long):
000012a0	pushl	%ebp
000012a1	movl	%esp,%ebp
000012a3	pushl	%ebx
000012a4	pushl	%edi
000012a5	pushl	%esi
000012a6	subl	$0x3c,%esp
000012a9	calll	0x000012ae
000012ae	popl	%edx
000012af	movl	V_pretifynum(long long)::current-0x12ae(%edx),%esi
000012b5	leal	0x01(%esi),%eax
000012b8	andl	$0x07,%eax
000012bb	movl	%eax,V_pretifynum(long long)::current-0x12ae(%edx)
000012c1	shll	$0x05,%esi
000012c4	movb	_V_memset(char const*, int, void*, int, int),V_pretifynum(long long)::output-0x12ae(%edx,%esi)
000012cc	leal	V_pretifynum(long long)::output-0x12ae(%edx,%esi),%ecx
000012d3	movl	0x0c(%ebp),%eax
000012d6	movl	0x08(%ebp),%edi
000012d9	testl	%eax,%eax
000012db	js	0x000012e8
000012dd	movl	%edi,0xe8(%ebp)
000012e0	movl	%eax,0xe4(%ebp)
000012e3	movl	%ecx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000012e6	jmp	0x0000132b
000012e8	leal	0x13609-0x12ae(%edx),%eax
000012ee	movl	%eax,0x08(%esp)
000012f2	movl	%ecx,(%esp)
000012f5	movl	$0x00000020,0x04(%esp)
000012fd	movl	%ecx,%ebx
000012ff	movl	%edx,0xec(%ebp)
00001302	calll	V_snprintf(char*, int, char const*, ...)
00001307	movl	%ebx,(%esp)
0000130a	xorl	%eax,%eax
0000130c	subl	%edi,%eax
0000130e	movl	%eax,0xe8(%ebp)
00001311	movl	_V_memset(char const*, int, void*, int, int),%eax
00001316	sbbl	0x0c(%ebp),%eax
00001319	movl	%eax,0xe4(%ebp)
0000131c	calll	_strlen
00001321	movl	0xec(%ebp),%edx
00001324	movl	%ebx,%ecx
00001326	addl	%ecx,%eax
00001328	movl	%eax,_V_strcpy(char const*, int, char*, char const*)(%ebp)
0000132b	movl	%edx,0xec(%ebp)
0000132e	movl	%ecx,0xcc(%ebp)
00001331	leal	V_pretifynum(long long)::output-0x12ae+0x00000020(%edx,%esi),%eax
00001338	movl	%eax,0xd4(%ebp)
0000133b	xorl	%edi,%edi
0000133d	movl	$0x00000001,%eax
00001342	movl	$0xffffffff,%ecx
00001347	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001350	movl	%eax,%edx
00001352	movl	%edi,%esi
00001354	incl	%ecx
00001355	cmpl	$0x05,%ecx
00001358	jg	0x00001385
0000135a	movl	%edx,%eax
0000135c	movl	%edx,0xf0(%ebp)
0000135f	movl	$0x000003e8,%edx
00001364	mull	%edx
00001366	cmpl	%eax,0xe8(%ebp)
00001369	setae	%bl
0000136c	imull	$0x000003e8,%esi,%edi
00001372	addl	%edx,%edi
00001374	cmpl	%edi,0xe4(%ebp)
00001377	setae	%dl
0000137a	je	0x0000137e
0000137c	movb	%dl,%bl
0000137e	testb	%bl,%bl
00001380	movl	0xf0(%ebp),%edx
00001383	jne	0x00001350
00001385	movl	%edx,0xf0(%ebp)
00001388	movl	%esi,0x0c(%esp)
0000138c	movl	%edx,0x08(%esp)
00001390	movl	0xe4(%ebp),%eax
00001393	movl	%eax,0x04(%esp)
00001397	movl	0xe8(%ebp),%eax
0000139a	movl	%eax,(%esp)
0000139d	movl	%edx,%edi
0000139f	calll	___udivdi3
000013a4	movl	%eax,%ebx
000013a6	movl	%ebx,0x0c(%esp)
000013aa	movl	0xec(%ebp),%eax
000013ad	leal	0x1360b-0x12ae(%eax),%eax
000013b3	movl	%eax,0x08(%esp)
000013b7	movl	0xd4(%ebp),%eax
000013ba	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
000013bd	subl	%ecx,%eax
000013bf	movl	%eax,0x04(%esp)
000013c3	movl	%ecx,(%esp)
000013c6	cmpl	$0x000003e8,%edi
000013cc	setb	%al
000013cf	testl	%esi,%esi
000013d1	movl	%esi,%edi
000013d3	je	0x000013d7
000013d5	movb	_V_memset(char const*, int, void*, int, int),%al
000013d7	movb	%al,0xdc(%ebp)
000013da	calll	V_snprintf(char*, int, char const*, ...)
000013df	cmpb	_V_memset(char const*, int, void*, int, int),0xdc(%ebp)
000013e3	movl	0xf0(%ebp),%ecx
000013e6	jne	0x000014e3
000013ec	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%eax
000013ef	movl	%eax,(%esp)
000013f2	movl	%ebx,%eax
000013f4	movl	%ecx,%esi
000013f6	mull	%esi
000013f8	movl	%ebx,%ecx
000013fa	imull	%edi,%ecx
000013fd	addl	%edx,%ecx
000013ff	sarl	$0x1f,%ebx
00001402	imull	%esi,%ebx
00001405	addl	%ecx,%ebx
00001407	subl	%eax,0xe8(%ebp)
0000140a	sbbl	%ebx,0xe4(%ebp)
0000140d	calll	_strlen
00001412	movl	%esi,%ecx
00001414	movl	%eax,%edx
00001416	addl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%edx
00001419	movl	0xec(%ebp),%eax
0000141c	leal	0x1360e-0x12ae(%eax),%eax
00001422	movl	%eax,0xd0(%ebp)
00001425	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001430	movl	%edi,0xd8(%ebp)
00001433	movl	%ecx,0xf0(%ebp)
00001436	movl	%edx,0xdc(%ebp)
00001439	movl	%edi,0x04(%esp)
0000143d	movl	%ecx,(%esp)
00001440	movl	_V_memset(char const*, int, void*, int, int),0x0c(%esp)
00001448	movl	$0x000003e8,0x08(%esp)
00001450	movl	%edx,%esi
00001452	calll	___udivdi3
00001457	movl	%eax,0xec(%ebp)
0000145a	movl	%edx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
0000145d	movl	%edx,0x0c(%esp)
00001461	movl	%eax,0x08(%esp)
00001465	movl	0xe4(%ebp),%eax
00001468	movl	%eax,0x04(%esp)
0000146c	movl	0xe8(%ebp),%ebx
0000146f	movl	%ebx,(%esp)
00001472	calll	___udivdi3
00001477	movl	%eax,%edi
00001479	movl	%edi,0x0c(%esp)
0000147d	movl	0xd0(%ebp),%eax
00001480	movl	%eax,0x08(%esp)
00001484	movl	0xd4(%ebp),%eax
00001487	subl	%esi,%eax
00001489	movl	%eax,0x04(%esp)
0000148d	movl	%esi,(%esp)
00001490	calll	V_snprintf(char*, int, char const*, ...)
00001495	movl	%esi,(%esp)
00001498	movl	%edi,%eax
0000149a	mull	0xec(%ebp)
0000149d	movl	%edi,%ecx
0000149f	imull	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
000014a3	addl	%edx,%ecx
000014a5	sarl	$0x1f,%edi
000014a8	imull	0xec(%ebp),%edi
000014ac	addl	%ecx,%edi
000014ae	subl	%eax,%ebx
000014b0	movl	%ebx,0xe8(%ebp)
000014b3	sbbl	%edi,0xe4(%ebp)
000014b6	cmpl	$0x000f423f,0xf0(%ebp)
000014bd	seta	%bl
000014c0	cmpl	_V_memset(char const*, int, void*, int, int),0xd8(%ebp)
000014c4	setne	%al
000014c7	je	0x000014cb
000014c9	movb	%al,%bl
000014cb	calll	_strlen
000014d0	movl	0xdc(%ebp),%edx
000014d3	addl	%eax,%edx
000014d5	testb	%bl,%bl
000014d7	movl	0xec(%ebp),%ecx
000014da	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%edi
000014dd	jne	0x00001430
000014e3	movl	0xcc(%ebp),%eax
000014e6	addl	$0x3c,%esp
000014e9	popl	%esi
000014ea	popl	%edi
000014eb	popl	%ebx
000014ec	popl	%ebp
000014ed	ret
000014ee	nop
Q_IsMeanSpaceW(wchar_t):
000014f0	xorb	%al,%al
000014f2	movl	0x04(%esp),%ecx
000014f6	cmpl	$0x0000fffb,%ecx
000014fc	jg	0x00001567
000014fe	cmpl	$0x0000fefe,%ecx
00001504	jg	0x0000155d
00001506	cmpl	$0x0000205f,%ecx
0000150c	jg	0x00001553
0000150e	cmpl	$0x00001fff,%ecx
00001514	jg	0x00001533
00001516	leal	0xffffff7e(%ecx),%edx
0000151c	cmpl	$0x02,%edx
0000151f	jb	0x0000156f
00001521	cmpl	$0x000000a0,%ecx
00001527	je	0x0000156f
00001529	cmpl	$0x0000034f,%ecx
0000152f	je	0x0000156f
00001531	jmp	0x00001571
00001533	leal	0xffffe000(%ecx),%edx
00001539	cmpl	$0x0e,%edx
0000153c	jb	0x0000156f
0000153e	leal	0xffffdfd8(%ecx),%edx
00001544	cmpl	$0x02,%edx
00001547	jb	0x0000156f
00001549	cmpl	$0x0000202f,%ecx
0000154f	je	0x0000156f
00001551	jmp	0x00001571
00001553	cmpl	$0x00002060,%ecx
00001559	je	0x0000156f
0000155b	jmp	0x00001571
0000155d	cmpl	$0x0000feff,%ecx
00001563	je	0x0000156f
00001565	jmp	0x00001571
00001567	cmpl	$0x0000fffc,%ecx
0000156d	jne	0x00001571
0000156f	movb	$0x01,%al
00001571	movzbl	%al,%eax
00001574	ret
00001575	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
Q_StripPrecedingAndTrailingWhitespaceW(wchar_t*):
00001580	pushl	%ebp
00001581	movl	%esp,%ebp
00001583	pushl	%ebx
00001584	pushl	%edi
00001585	pushl	%esi
00001586	subl	$0x1c,%esp
00001589	calll	0x0000158e
0000158e	popl	%eax
0000158f	movl	%eax,0xe8(%ebp)
00001592	movl	0x15f7b-0x158e(%eax),%eax
00001598	movl	%eax,0xe4(%ebp)
0000159b	movl	(%eax),%eax
0000159d	movl	%eax,0xf0(%ebp)
000015a0	subl	$0x10,%esp
000015a3	movl	0x08(%ebp),%edi
000015a6	movl	%edi,(%esp)
000015a9	calll	_wcslen
000015ae	addl	$0x10,%esp
000015b1	movl	%eax,0xec(%ebp)
000015b4	leal	0x00000013(,%eax,4),%ecx
000015bb	andl	$0xf0,%ecx
000015be	movl	%esp,%esi
000015c0	subl	%ecx,%esi
000015c2	movl	%esi,%esp
000015c4	subl	$0x10,%esp
000015c7	leal	0x00000004(,%eax,4),%ebx
000015ce	shrl	$0x02,%ebx
000015d1	movl	%ebx,0x08(%esp)
000015d5	movl	%edi,0x04(%esp)
000015d9	movl	%esi,(%esp)
000015dc	calll	_wcsncpy
000015e1	addl	$0x10,%esp
000015e4	testl	%ebx,%ebx
000015e6	je	0x000015f0
000015e8	movl	_V_memset(char const*, int, void*, int, int),0xfc(%esi,%ebx,4)
000015f0	movl	%ebx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000015f3	movl	0xec(%ebp),%eax
000015f6	leal	0xfc(%edi,%eax,4),%esi
000015fa	movb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000015fe	jmp	0x0000164c
00001600	movl	(%esi),%eax
00001602	cmpl	$0x7f,%eax
00001605	ja	0x0000161d
00001607	movl	0xe8(%ebp),%ecx
0000160a	movl	0x15f77-0x158e(%ecx),%ecx
00001610	movl	0x34(%ecx,%eax,4),%eax
00001614	movl	$0x00004000,%ecx
00001619	andl	%ecx,%eax
0000161b	jmp	0x00001633
0000161d	subl	$0x10,%esp
00001620	movl	%eax,(%esp)
00001623	movl	$0x00004000,0x04(%esp)
0000162b	calll	___maskrune
00001630	addl	$0x10,%esp
00001633	testl	%eax,%eax
00001635	movl	%edi,%eax
00001637	movl	%eax,%edi
00001639	movl	%eax,%ebx
0000163b	je	0x00001667
0000163d	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001643	addl	$0xfc,%esi
00001646	movb	$0x01,0xec(%ebp)
0000164a	movl	%ebx,%edi
0000164c	cmpl	%edi,%esi
0000164e	jae	0x00001600
00001650	movl	%edi,%eax
00001652	movl	%eax,%edi
00001654	movl	%eax,%ebx
00001656	jmp	0x00001667
00001658	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001660	addl	$0x04,%edi
00001663	movb	$0x01,0xec(%ebp)
00001667	cmpl	%esi,%edi
00001669	jae	0x000016a0
0000166b	movl	(%edi),%ecx
0000166d	cmpl	$0x7f,%ecx
00001670	ja	0x00001686
00001672	movl	0xe8(%ebp),%eax
00001675	movl	0x15f77-0x158e(%eax),%edx
0000167b	movl	$0x00004000,%eax
00001680	andl	0x34(%edx,%ecx,4),%eax
00001684	jmp	0x0000169c
00001686	subl	$0x10,%esp
00001689	movl	%ecx,(%esp)
0000168c	movl	$0x00004000,0x04(%esp)
00001694	calll	___maskrune
00001699	addl	$0x10,%esp
0000169c	testl	%eax,%eax
0000169e	jne	0x00001660
000016a0	andb	$0x01,0xec(%ebp)
000016a4	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%esi
000016a7	je	0x000016cb
000016a9	subl	$0x10,%esp
000016ac	movl	%esi,0x08(%esp)
000016b0	movl	%edi,0x04(%esp)
000016b4	movl	%ebx,(%esp)
000016b7	calll	_wcsncpy
000016bc	addl	$0x10,%esp
000016bf	testl	%esi,%esi
000016c1	je	0x000016cb
000016c3	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%esi,4)
000016cb	cmpb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000016cf	setne	%al
000016d2	movl	0xe4(%ebp),%ecx
000016d5	movl	(%ecx),%ecx
000016d7	cmpl	0xf0(%ebp),%ecx
000016da	jne	0x000016e7
000016dc	movzbl	%al,%eax
000016df	leal	0xf4(%ebp),%esp
000016e2	popl	%esi
000016e3	popl	%edi
000016e4	popl	%ebx
000016e5	popl	%ebp
000016e6	ret
000016e7	calll	___stack_chk_fail
000016ec	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
Q_AggressiveStripPrecedingAndTrailingWhitespaceW(wchar_t*):
000016f0	pushl	%ebp
000016f1	movl	%esp,%ebp
000016f3	pushl	%ebx
000016f4	pushl	%edi
000016f5	pushl	%esi
000016f6	subl	$0x1c,%esp
000016f9	calll	0x000016fe
000016fe	popl	%eax
000016ff	movl	%eax,0xe8(%ebp)
00001702	movl	0x15f7b-0x16fe(%eax),%eax
00001708	movl	%eax,0xe4(%ebp)
0000170b	movl	(%eax),%eax
0000170d	movl	%eax,0xf0(%ebp)
00001710	subl	$0x10,%esp
00001713	movl	0x08(%ebp),%edi
00001716	movl	%edi,(%esp)
00001719	calll	_wcslen
0000171e	addl	$0x10,%esp
00001721	movl	%eax,0xec(%ebp)
00001724	leal	0x00000013(,%eax,4),%ecx
0000172b	andl	$0xf0,%ecx
0000172e	movl	%esp,%ebx
00001730	subl	%ecx,%ebx
00001732	movl	%ebx,%esp
00001734	subl	$0x10,%esp
00001737	leal	0x00000004(,%eax,4),%esi
0000173e	shrl	$0x02,%esi
00001741	movl	%esi,0x08(%esp)
00001745	movl	%edi,0x04(%esp)
00001749	movl	%ebx,(%esp)
0000174c	calll	_wcsncpy
00001751	addl	$0x10,%esp
00001754	testl	%esi,%esi
00001756	je	0x00001760
00001758	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%esi,4)
00001760	movl	%esi,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00001763	movl	0xec(%ebp),%eax
00001766	leal	0xfc(%edi,%eax,4),%esi
0000176a	xorb	%al,%al
0000176c	jmp	0x0000182d
00001771	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001780	movl	(%esi),%eax
00001782	cmpl	$0x7f,%eax
00001785	ja	0x0000179d
00001787	movl	0xe8(%ebp),%ecx
0000178a	movl	0x15f77-0x16fe(%ecx),%ecx
00001790	movl	0x34(%ecx,%eax,4),%eax
00001794	movl	$0x00004000,%ecx
00001799	andl	%ecx,%eax
0000179b	jmp	0x000017b3
0000179d	subl	$0x10,%esp
000017a0	movl	%eax,(%esp)
000017a3	movl	$0x00004000,0x04(%esp)
000017ab	calll	___maskrune
000017b0	addl	$0x10,%esp
000017b3	testl	%eax,%eax
000017b5	jne	0x00001822
000017b7	movl	(%esi),%eax
000017b9	cmpl	$0x0000fffb,%eax
000017be	jg	0x00001819
000017c0	cmpl	$0x0000fefe,%eax
000017c5	jg	0x00001812
000017c7	cmpl	$0x0000205f,%eax
000017cc	jg	0x0000180b
000017ce	cmpl	$0x00001fff,%eax
000017d3	jg	0x000017ee
000017d5	leal	0xffffff7e(%eax),%ecx
000017db	cmpl	$0x02,%ecx
000017de	jb	0x00001822
000017e0	cmpl	$0x000000a0,%eax
000017e5	je	0x00001822
000017e7	cmpl	$0x0000034f,%eax
000017ec	jmp	0x0000181e
000017ee	leal	0xffffe000(%eax),%ecx
000017f4	cmpl	$0x0e,%ecx
000017f7	jb	0x00001822
000017f9	leal	0xffffdfd8(%eax),%ecx
000017ff	cmpl	$0x02,%ecx
00001802	jb	0x00001822
00001804	cmpl	$0x0000202f,%eax
00001809	jmp	0x0000181e
0000180b	cmpl	$0x00002060,%eax
00001810	jmp	0x0000181e
00001812	cmpl	$0x0000feff,%eax
00001817	jmp	0x0000181e
00001819	cmpl	$0x0000fffc,%eax
0000181e	movl	%edi,%ebx
00001820	jne	0x00001847
00001822	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001828	addl	$0xfc,%esi
0000182b	movb	$0x01,%al
0000182d	movb	%al,0xec(%ebp)
00001830	cmpl	%edi,%esi
00001832	jae	0x00001780
00001838	movl	%edi,%ebx
0000183a	jmp	0x00001847
0000183c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00001840	addl	$0x04,%ebx
00001843	movb	$0x01,0xec(%ebp)
00001847	cmpl	%esi,%ebx
00001849	jae	0x00001880
0000184b	movl	(%ebx),%ecx
0000184d	cmpl	$0x7f,%ecx
00001850	ja	0x00001866
00001852	movl	0xe8(%ebp),%eax
00001855	movl	0x15f77-0x16fe(%eax),%edx
0000185b	movl	$0x00004000,%eax
00001860	andl	0x34(%edx,%ecx,4),%eax
00001864	jmp	0x0000187c
00001866	subl	$0x10,%esp
00001869	movl	%ecx,(%esp)
0000186c	movl	$0x00004000,0x04(%esp)
00001874	calll	___maskrune
00001879	addl	$0x10,%esp
0000187c	testl	%eax,%eax
0000187e	jne	0x00001840
00001880	andb	$0x01,0xec(%ebp)
00001884	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%esi
00001887	je	0x000018ab
00001889	subl	$0x10,%esp
0000188c	movl	%esi,0x08(%esp)
00001890	movl	%ebx,0x04(%esp)
00001894	movl	%edi,(%esp)
00001897	calll	_wcsncpy
0000189c	addl	$0x10,%esp
0000189f	testl	%esi,%esi
000018a1	je	0x000018ab
000018a3	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%esi,4)
000018ab	cmpb	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
000018af	setne	%al
000018b2	movl	0xe4(%ebp),%ecx
000018b5	movl	(%ecx),%ecx
000018b7	cmpl	0xf0(%ebp),%ecx
000018ba	jne	0x000018c7
000018bc	movzbl	%al,%eax
000018bf	leal	0xf4(%ebp),%esp
000018c2	popl	%esi
000018c3	popl	%edi
000018c4	popl	%ebx
000018c5	popl	%ebp
000018c6	ret
000018c7	calll	___stack_chk_fail
000018cc	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
Q_StripPrecedingAndTrailingWhitespace(char*):
000018d0	pushl	%ebp
000018d1	movl	%esp,%ebp
000018d3	pushl	%ebx
000018d4	pushl	%edi
000018d5	pushl	%esi
000018d6	subl	$0x1c,%esp
000018d9	calll	0x000018de
000018de	popl	%eax
000018df	movl	%eax,0xec(%ebp)
000018e2	movl	0x15f7b-0x18de(%eax),%eax
000018e8	movl	%eax,0xe8(%ebp)
000018eb	movl	(%eax),%eax
000018ed	movl	%eax,0xf0(%ebp)
000018f0	subl	$0x10,%esp
000018f3	movl	0x08(%ebp),%eax
000018f6	movl	%eax,(%esp)
000018f9	calll	_strlen
000018fe	addl	$0x10,%esp
00001901	movl	%eax,0xe4(%ebp)
00001904	leal	0x00000013(,%eax,4),%ecx
0000190b	andl	$0xf0,%ecx
0000190e	movl	%esp,%edi
00001910	subl	%ecx,%edi
00001912	movl	%edi,%esp
00001914	leal	0x00000004(,%eax,4),%esi
0000191b	testl	%esi,%esi
0000191d	jle	0x00001925
0000191f	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001925	xorl	%eax,%eax
00001927	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ebp)
0000192b	je	0x00001958
0000192d	subl	$0x10,%esp
00001930	movl	%esi,%ebx
00001932	shrl	$0x02,%ebx
00001935	movl	%ebx,0x08(%esp)
00001939	movl	0x08(%ebp),%eax
0000193c	movl	%eax,0x04(%esp)
00001940	movl	%edi,(%esp)
00001943	calll	_mbstowcs
00001948	addl	$0x10,%esp
0000194b	incl	%eax
0000194c	testl	%esi,%esi
0000194e	jle	0x00001958
00001950	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%ebx,4)
00001958	leal	0xf8(%edi,%eax,4),%esi
0000195c	xorb	%bl,%bl
0000195e	jmp	0x0000196b
00001960	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001966	addl	$0xfc,%esi
00001969	movb	$0x01,%bl
0000196b	cmpl	%edi,%esi
0000196d	jb	0x000019b5
0000196f	movl	(%esi),%eax
00001971	cmpl	$0x7f,%eax
00001974	ja	0x0000198c
00001976	movl	0xec(%ebp),%ecx
00001979	movl	0x15f77-0x18de(%ecx),%ecx
0000197f	movl	0x34(%ecx,%eax,4),%eax
00001983	movl	$0x00004000,%ecx
00001988	andl	%ecx,%eax
0000198a	jmp	0x000019a2
0000198c	subl	$0x10,%esp
0000198f	movl	%eax,(%esp)
00001992	movl	$0x00004000,0x04(%esp)
0000199a	calll	___maskrune
0000199f	addl	$0x10,%esp
000019a2	testl	%eax,%eax
000019a4	jne	0x00001960
000019a6	jmp	0x000019b5
000019a8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000019b0	addl	$0x04,%edi
000019b3	movb	$0x01,%bl
000019b5	cmpl	%esi,%edi
000019b7	jae	0x000019ee
000019b9	movl	(%edi),%ecx
000019bb	cmpl	$0x7f,%ecx
000019be	ja	0x000019d4
000019c0	movl	0xec(%ebp),%eax
000019c3	movl	0x15f77-0x18de(%eax),%edx
000019c9	movl	$0x00004000,%eax
000019ce	andl	0x34(%edx,%ecx,4),%eax
000019d2	jmp	0x000019ea
000019d4	subl	$0x10,%esp
000019d7	movl	%ecx,(%esp)
000019da	movl	$0x00004000,0x04(%esp)
000019e2	calll	___maskrune
000019e7	addl	$0x10,%esp
000019ea	testl	%eax,%eax
000019ec	jne	0x000019b0
000019ee	andb	$0x01,%bl
000019f1	movl	0x08(%ebp),%esi
000019f4	movl	0xe4(%ebp),%eax
000019f7	je	0x00001a2b
000019f9	testl	%eax,%eax
000019fb	jle	0x00001a00
000019fd	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00001a00	testl	%edi,%edi
00001a02	je	0x00001a22
00001a04	testl	%esi,%esi
00001a06	je	0x00001a22
00001a08	subl	$0x10,%esp
00001a0b	movl	%eax,0x08(%esp)
00001a0f	movl	%edi,0x04(%esp)
00001a13	movl	%esi,(%esp)
00001a16	movl	%eax,%edi
00001a18	calll	_wcstombs
00001a1d	movl	%edi,%eax
00001a1f	addl	$0x10,%esp
00001a22	testl	%eax,%eax
00001a24	jle	0x00001a2b
00001a26	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%esi)
00001a2b	testb	%bl,%bl
00001a2d	setne	%al
00001a30	movl	0xe8(%ebp),%ecx
00001a33	movl	(%ecx),%ecx
00001a35	cmpl	0xf0(%ebp),%ecx
00001a38	jne	0x00001a45
00001a3a	movzbl	%al,%eax
00001a3d	leal	0xf4(%ebp),%esp
00001a40	popl	%esi
00001a41	popl	%edi
00001a42	popl	%ebx
00001a43	popl	%ebp
00001a44	ret
00001a45	calll	___stack_chk_fail
00001a4a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UTF8ToUnicode(char const*, wchar_t*, int):
00001a50	pushl	%ebp
00001a51	movl	%esp,%ebp
00001a53	pushl	%ebx
00001a54	pushl	%edi
00001a55	pushl	%esi
00001a56	subl	$0x0c,%esp
00001a59	movl	0x10(%ebp),%edi
00001a5c	movl	0x0c(%ebp),%esi
00001a5f	testl	%edi,%edi
00001a61	jle	0x00001a69
00001a63	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001a69	movl	0x08(%ebp),%ecx
00001a6c	xorl	%eax,%eax
00001a6e	testl	%ecx,%ecx
00001a70	je	0x00001a94
00001a72	movl	%edi,%ebx
00001a74	shrl	$0x02,%ebx
00001a77	movl	%ebx,0x08(%esp)
00001a7b	movl	%ecx,0x04(%esp)
00001a7f	movl	%esi,(%esp)
00001a82	calll	_mbstowcs
00001a87	incl	%eax
00001a88	testl	%edi,%edi
00001a8a	jle	0x00001a94
00001a8c	movl	_V_memset(char const*, int, void*, int, int),0xfc(%esi,%ebx,4)
00001a94	addl	$0x0c,%esp
00001a97	popl	%esi
00001a98	popl	%edi
00001a99	popl	%ebx
00001a9a	popl	%ebp
00001a9b	ret
00001a9c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_UnicodeToUTF8(wchar_t const*, char*, int):
00001aa0	pushl	%ebp
00001aa1	movl	%esp,%ebp
00001aa3	pushl	%edi
00001aa4	pushl	%esi
00001aa5	subl	$0x10,%esp
00001aa8	movl	0x10(%ebp),%esi
00001aab	movl	0x0c(%ebp),%edi
00001aae	testl	%esi,%esi
00001ab0	jle	0x00001ab5
00001ab2	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00001ab5	movl	0x08(%ebp),%ecx
00001ab8	xorl	%eax,%eax
00001aba	testl	%ecx,%ecx
00001abc	je	0x00001ad3
00001abe	testl	%edi,%edi
00001ac0	je	0x00001ad3
00001ac2	movl	%esi,0x08(%esp)
00001ac6	movl	%ecx,0x04(%esp)
00001aca	movl	%edi,(%esp)
00001acd	calll	_wcstombs
00001ad2	incl	%eax
00001ad3	testl	%esi,%esi
00001ad5	jle	0x00001adc
00001ad7	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00001adc	addl	$0x10,%esp
00001adf	popl	%esi
00001ae0	popl	%edi
00001ae1	popl	%ebp
00001ae2	ret
00001ae3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
Q_AggressiveStripPrecedingAndTrailingWhitespace(char*):
00001af0	pushl	%ebp
00001af1	movl	%esp,%ebp
00001af3	pushl	%ebx
00001af4	pushl	%edi
00001af5	pushl	%esi
00001af6	subl	$0x1c,%esp
00001af9	calll	0x00001afe
00001afe	popl	%eax
00001aff	movl	%eax,0xec(%ebp)
00001b02	movl	0x15f7b-0x1afe(%eax),%eax
00001b08	movl	%eax,0xe8(%ebp)
00001b0b	movl	(%eax),%eax
00001b0d	movl	%eax,0xf0(%ebp)
00001b10	subl	$0x10,%esp
00001b13	movl	0x08(%ebp),%eax
00001b16	movl	%eax,(%esp)
00001b19	calll	_strlen
00001b1e	addl	$0x10,%esp
00001b21	movl	%eax,0xe4(%ebp)
00001b24	leal	0x00000013(,%eax,4),%ecx
00001b2b	andl	$0xf0,%ecx
00001b2e	movl	%esp,%edi
00001b30	subl	%ecx,%edi
00001b32	movl	%edi,%esp
00001b34	leal	0x00000004(,%eax,4),%esi
00001b3b	testl	%esi,%esi
00001b3d	jle	0x00001b45
00001b3f	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001b45	xorl	%eax,%eax
00001b47	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ebp)
00001b4b	je	0x00001b78
00001b4d	subl	$0x10,%esp
00001b50	movl	%esi,%ebx
00001b52	shrl	$0x02,%ebx
00001b55	movl	%ebx,0x08(%esp)
00001b59	movl	0x08(%ebp),%eax
00001b5c	movl	%eax,0x04(%esp)
00001b60	movl	%edi,(%esp)
00001b63	calll	_mbstowcs
00001b68	addl	$0x10,%esp
00001b6b	incl	%eax
00001b6c	testl	%esi,%esi
00001b6e	jle	0x00001b78
00001b70	movl	_V_memset(char const*, int, void*, int, int),0xfc(%edi,%ebx,4)
00001b78	leal	0xf8(%edi,%eax,4),%esi
00001b7c	xorb	%bl,%bl
00001b7e	jmp	0x00001b96
00001b80	cmpl	$0x0000fffc,%eax
00001b85	jne	0x00001c65
00001b8b	movl	_V_memset(char const*, int, void*, int, int),(%esi)
00001b91	addl	$0xfc,%esi
00001b94	movb	$0x01,%bl
00001b96	cmpl	%edi,%esi
00001b98	jb	0x00001c65
00001b9e	movl	(%esi),%eax
00001ba0	cmpl	$0x7f,%eax
00001ba3	ja	0x00001bbb
00001ba5	movl	0xec(%ebp),%ecx
00001ba8	movl	0x15f77-0x1afe(%ecx),%ecx
00001bae	movl	0x34(%ecx,%eax,4),%eax
00001bb2	movl	$0x00004000,%ecx
00001bb7	andl	%ecx,%eax
00001bb9	jmp	0x00001bd1
00001bbb	subl	$0x10,%esp
00001bbe	movl	%eax,(%esp)
00001bc1	movl	$0x00004000,0x04(%esp)
00001bc9	calll	___maskrune
00001bce	addl	$0x10,%esp
00001bd1	testl	%eax,%eax
00001bd3	jne	0x00001b8b
00001bd5	movl	(%esi),%eax
00001bd7	cmpl	$0x0000fffb,%eax
00001bdc	jg	0x00001b80
00001bde	cmpl	$0x0000fefe,%eax
00001be3	jg	0x00001c3d
00001be5	cmpl	$0x0000205f,%eax
00001bea	jg	0x00001c4a
00001bec	cmpl	$0x00001fff,%eax
00001bf1	jg	0x00001c12
00001bf3	leal	0xffffff7e(%eax),%ecx
00001bf9	cmpl	$0x02,%ecx
00001bfc	jb	0x00001b8b
00001bfe	cmpl	$0x000000a0,%eax
00001c03	je	0x00001b8b
00001c05	cmpl	$0x0000034f,%eax
00001c0a	je	0x00001b8b
00001c10	jmp	0x00001c65
00001c12	leal	0xffffe000(%eax),%ecx
00001c18	cmpl	$0x0e,%ecx
00001c1b	jb	0x00001b8b
00001c21	leal	0xffffdfd8(%eax),%ecx
00001c27	cmpl	$0x02,%ecx
00001c2a	jb	0x00001b8b
00001c30	cmpl	$0x0000202f,%eax
00001c35	je	0x00001b8b
00001c3b	jmp	0x00001c65
00001c3d	cmpl	$0x0000feff,%eax
00001c42	je	0x00001b8b
00001c48	jmp	0x00001c65
00001c4a	cmpl	$0x00002060,%eax
00001c4f	je	0x00001b8b
00001c55	jmp	0x00001c65
00001c57	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00001c60	addl	$0x04,%edi
00001c63	movb	$0x01,%bl
00001c65	cmpl	%esi,%edi
00001c67	jae	0x00001c9e
00001c69	movl	(%edi),%ecx
00001c6b	cmpl	$0x7f,%ecx
00001c6e	ja	0x00001c84
00001c70	movl	0xec(%ebp),%eax
00001c73	movl	0x15f77-0x1afe(%eax),%edx
00001c79	movl	$0x00004000,%eax
00001c7e	andl	0x34(%edx,%ecx,4),%eax
00001c82	jmp	0x00001c9a
00001c84	subl	$0x10,%esp
00001c87	movl	%ecx,(%esp)
00001c8a	movl	$0x00004000,0x04(%esp)
00001c92	calll	___maskrune
00001c97	addl	$0x10,%esp
00001c9a	testl	%eax,%eax
00001c9c	jne	0x00001c60
00001c9e	andb	$0x01,%bl
00001ca1	movl	0x08(%ebp),%esi
00001ca4	movl	0xe4(%ebp),%eax
00001ca7	je	0x00001cdb
00001ca9	testl	%eax,%eax
00001cab	jle	0x00001cb0
00001cad	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00001cb0	testl	%edi,%edi
00001cb2	je	0x00001cd2
00001cb4	testl	%esi,%esi
00001cb6	je	0x00001cd2
00001cb8	subl	$0x10,%esp
00001cbb	movl	%eax,0x08(%esp)
00001cbf	movl	%edi,0x04(%esp)
00001cc3	movl	%esi,(%esp)
00001cc6	movl	%eax,%edi
00001cc8	calll	_wcstombs
00001ccd	movl	%edi,%eax
00001ccf	addl	$0x10,%esp
00001cd2	testl	%eax,%eax
00001cd4	jle	0x00001cdb
00001cd6	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%esi)
00001cdb	testb	%bl,%bl
00001cdd	setne	%al
00001ce0	movl	0xe8(%ebp),%ecx
00001ce3	movl	(%ecx),%ecx
00001ce5	cmpl	0xf0(%ebp),%ecx
00001ce8	jne	0x00001cf5
00001cea	movzbl	%al,%eax
00001ced	leal	0xf4(%ebp),%esp
00001cf0	popl	%esi
00001cf1	popl	%edi
00001cf2	popl	%ebx
00001cf3	popl	%ebp
00001cf4	ret
00001cf5	calll	___stack_chk_fail
00001cfa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UCS2ToUnicode(unsigned short const*, wchar_t*, int):
00001d00	pushl	%ebp
00001d01	movl	%esp,%ebp
00001d03	pushl	%ebx
00001d04	pushl	%edi
00001d05	pushl	%esi
00001d06	subl	$0x2c,%esp
00001d09	calll	0x00001d0e
00001d0e	popl	%eax
00001d0f	movl	0x0c(%ebp),%edi
00001d12	movl	_V_memset(char const*, int, void*, int, int),(%edi)
00001d18	leal	0x1361c-0x1d0e(%eax),%ecx
00001d1e	movl	%ecx,0x04(%esp)
00001d22	leal	0x13614-0x1d0e(%eax),%eax
00001d28	movl	%eax,(%esp)
00001d2b	calll	_iconv_open
00001d30	movl	%eax,%esi
00001d32	movl	0x10(%ebp),%ebx
00001d35	movl	%ebx,0xf0(%ebp)
00001d38	movl	%ebx,0xec(%ebp)
00001d3b	movl	0x08(%ebp),%eax
00001d3e	movl	%eax,0xe8(%ebp)
00001d41	movl	%edi,0xe4(%ebp)
00001d44	movl	$0xffffffff,%eax
00001d49	testl	%esi,%esi
00001d4b	je	0x00001d84
00001d4d	leal	0xec(%ebp),%eax
00001d50	movl	%eax,0x10(%esp)
00001d54	leal	0xe4(%ebp),%eax
00001d57	movl	%eax,0x0c(%esp)
00001d5b	leal	0xf0(%ebp),%eax
00001d5e	movl	%eax,0x08(%esp)
00001d62	leal	0xe8(%ebp),%eax
00001d65	movl	%eax,0x04(%esp)
00001d69	movl	%esi,(%esp)
00001d6c	calll	_iconv
00001d71	movl	%eax,%edi
00001d73	movl	%esi,(%esp)
00001d76	calll	_iconv_close
00001d7b	xorl	%eax,%eax
00001d7d	testl	%edi,%edi
00001d7f	js	0x00001d84
00001d81	movl	0xec(%ebp),%eax
00001d84	andl	$0xfc,%ebx
00001d87	movl	0x0c(%ebp),%ecx
00001d8a	movl	_V_memset(char const*, int, void*, int, int),0xfc(%ebx,%ecx)
00001d92	addl	$0x2c,%esp
00001d95	popl	%esi
00001d96	popl	%edi
00001d97	popl	%ebx
00001d98	popl	%ebp
00001d99	ret
00001d9a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UnicodeToUCS2(wchar_t const*, int, char*, int):
00001da0	pushl	%ebp
00001da1	movl	%esp,%ebp
00001da3	pushl	%edi
00001da4	pushl	%esi
00001da5	subl	_V_memcpy(char const*, int, void*, void const*, int),%esp
00001da8	calll	0x00001dad
00001dad	popl	%eax
00001dae	leal	0x13624-0x1dad(%eax),%ecx
00001db4	movl	%ecx,0x04(%esp)
00001db8	leal	0x1361c-0x1dad(%eax),%eax
00001dbe	movl	%eax,(%esp)
00001dc1	calll	_iconv_open
00001dc6	movl	%eax,%esi
00001dc8	movl	0x0c(%ebp),%edi
00001dcb	movl	%edi,0xf4(%ebp)
00001dce	movl	0x14(%ebp),%eax
00001dd1	movl	%eax,0xf0(%ebp)
00001dd4	movl	0x08(%ebp),%eax
00001dd7	movl	%eax,0xec(%ebp)
00001dda	movl	0x10(%ebp),%eax
00001ddd	movl	%eax,0xe8(%ebp)
00001de0	testl	%esi,%esi
00001de2	je	0x00001e21
00001de4	leal	0xf0(%ebp),%eax
00001de7	movl	%eax,0x10(%esp)
00001deb	leal	0xe8(%ebp),%eax
00001dee	movl	%eax,0x0c(%esp)
00001df2	leal	0xf4(%ebp),%eax
00001df5	movl	%eax,0x08(%esp)
00001df9	leal	0xec(%ebp),%eax
00001dfc	movl	%eax,0x04(%esp)
00001e00	movl	%esi,(%esp)
00001e03	calll	_iconv
00001e08	movl	%esi,(%esp)
00001e0b	shrl	$0x02,%edi
00001e0e	testl	%eax,%eax
00001e10	movl	_V_memset(char const*, int, void*, int, int),%esi
00001e15	cmovnsl	%edi,%esi
00001e18	calll	_iconv_close
00001e1d	movl	%esi,%eax
00001e1f	jmp	0x00001e26
00001e21	movl	$0xffffffff,%eax
00001e26	addl	_V_memcpy(char const*, int, void*, void const*, int),%esp
00001e29	popl	%esi
00001e2a	popl	%edi
00001e2b	popl	%ebp
00001e2c	ret
00001e2d	nopl	(%eax)
V_UCS2ToUTF8(unsigned short const*, char*, int):
00001e30	pushl	%ebp
00001e31	movl	%esp,%ebp
00001e33	pushl	%ebx
00001e34	pushl	%edi
00001e35	pushl	%esi
00001e36	subl	$0x2c,%esp
00001e39	calll	0x00001e3e
00001e3e	popl	%eax
00001e3f	movl	0x0c(%ebp),%ebx
00001e42	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
00001e45	leal	0x1361c-0x1e3e(%eax),%ecx
00001e4b	movl	%ecx,0x04(%esp)
00001e4f	leal	0x1362d-0x1e3e(%eax),%eax
00001e55	movl	%eax,(%esp)
00001e58	calll	_iconv_open
00001e5d	movl	%eax,%esi
00001e5f	movl	0x10(%ebp),%eax
00001e62	movl	%eax,0xf0(%ebp)
00001e65	movl	%eax,0xec(%ebp)
00001e68	movl	0x08(%ebp),%eax
00001e6b	movl	%eax,0xe8(%ebp)
00001e6e	movl	%ebx,0xe4(%ebp)
00001e71	movl	$0xffffffff,%eax
00001e76	testl	%esi,%esi
00001e78	je	0x00001eb1
00001e7a	leal	0xec(%ebp),%eax
00001e7d	movl	%eax,0x10(%esp)
00001e81	leal	0xe4(%ebp),%eax
00001e84	movl	%eax,0x0c(%esp)
00001e88	leal	0xf0(%ebp),%eax
00001e8b	movl	%eax,0x08(%esp)
00001e8f	leal	0xe8(%ebp),%eax
00001e92	movl	%eax,0x04(%esp)
00001e96	movl	%esi,(%esp)
00001e99	calll	_iconv
00001e9e	movl	%eax,%edi
00001ea0	movl	%esi,(%esp)
00001ea3	calll	_iconv_close
00001ea8	xorl	%eax,%eax
00001eaa	testl	%edi,%edi
00001eac	js	0x00001eb1
00001eae	movl	0xec(%ebp),%eax
00001eb1	movl	0x10(%ebp),%ecx
00001eb4	movb	_V_memset(char const*, int, void*, int, int),0xff(%ecx,%ebx)
00001eb9	addl	$0x2c,%esp
00001ebc	popl	%esi
00001ebd	popl	%edi
00001ebe	popl	%ebx
00001ebf	popl	%ebp
00001ec0	ret
00001ec1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UTF8ToUCS2(char const*, int, unsigned short*, int):
00001ed0	pushl	%ebp
00001ed1	movl	%esp,%ebp
00001ed3	pushl	%ebx
00001ed4	pushl	%edi
00001ed5	pushl	%esi
00001ed6	subl	$0x2c,%esp
00001ed9	calll	0x00001ede
00001ede	popl	%eax
00001edf	movl	0x10(%ebp),%ecx
00001ee2	movw	_V_memset(char const*, int, void*, int, int),(%ecx)
00001ee7	leal	0x1362d-0x1ede(%eax),%ecx
00001eed	movl	%ecx,0x04(%esp)
00001ef1	leal	0x1361c-0x1ede(%eax),%eax
00001ef7	movl	%eax,(%esp)
00001efa	calll	_iconv_open
00001eff	movl	%eax,%esi
00001f01	movl	0x0c(%ebp),%edi
00001f04	movl	%edi,0xf0(%ebp)
00001f07	movl	0x14(%ebp),%ebx
00001f0a	movl	%ebx,0xec(%ebp)
00001f0d	movl	0x08(%ebp),%eax
00001f10	movl	%eax,0xe8(%ebp)
00001f13	movl	0x10(%ebp),%eax
00001f16	movl	%eax,0xe4(%ebp)
00001f19	movl	$0xffffffff,%eax
00001f1e	testl	%esi,%esi
00001f20	je	0x00001f57
00001f22	leal	0xec(%ebp),%eax
00001f25	movl	%eax,0x10(%esp)
00001f29	leal	0xe4(%ebp),%eax
00001f2c	movl	%eax,0x0c(%esp)
00001f30	leal	0xf0(%ebp),%eax
00001f33	movl	%eax,0x08(%esp)
00001f37	leal	0xe8(%ebp),%eax
00001f3a	movl	%eax,0x04(%esp)
00001f3e	movl	%esi,(%esp)
00001f41	calll	_iconv
00001f46	movl	%esi,(%esp)
00001f49	xorl	%ecx,%ecx
00001f4b	testl	%eax,%eax
00001f4d	cmovsl	%ecx,%edi
00001f50	calll	_iconv_close
00001f55	movl	%edi,%eax
00001f57	andl	$0xfe,%ebx
00001f5a	movl	0x10(%ebp),%ecx
00001f5d	movw	_V_memset(char const*, int, void*, int, int),0xfe(%ebx,%ecx)
00001f64	addl	$0x2c,%esp
00001f67	popl	%esi
00001f68	popl	%edi
00001f69	popl	%ebx
00001f6a	popl	%ebp
00001f6b	ret
00001f6c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_nibble(char):
00001f70	movb	0x04(%esp),%al
00001f74	movb	%al,%cl
00001f76	addb	$0xd0,%cl
00001f79	cmpb	$0x0a,%cl
00001f7c	jb	0x00001f9d
00001f7e	movb	%al,%cl
00001f80	addb	$0xbf,%cl
00001f83	cmpb	$0x05,%cl
00001f86	ja	0x00001f90
00001f88	addb	$0xc9,%al
00001f8a	movb	%al,%cl
00001f8c	movzbl	%cl,%eax
00001f8f	ret
00001f90	movb	%al,%cl
00001f92	addb	$0xa9,%cl
00001f95	addb	$0x9f,%al
00001f97	cmpb	$0x06,%al
00001f99	jb	0x00001f9d
00001f9b	movb	_V_memcpy(char const*, int, void*, void const*, int),%cl
00001f9d	movzbl	%cl,%eax
00001fa0	ret
00001fa1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_hextobinary(char const*, int, unsigned char*, int):
00001fb0	pushl	%ebp
00001fb1	movl	%esp,%ebp
00001fb3	pushl	%ebx
00001fb4	pushl	%edi
00001fb5	pushl	%esi
00001fb6	subl	$0x0c,%esp
00001fb9	movl	0x08(%ebp),%edi
00001fbc	movl	%edi,(%esp)
00001fbf	calll	_strlen
00001fc4	movl	0x14(%ebp),%ecx
00001fc7	movl	%ecx,0x08(%esp)
00001fcb	movl	0x10(%ebp),%ebx
00001fce	movl	%ebx,(%esp)
00001fd1	movl	_V_memset(char const*, int, void*, int, int),0x04(%esp)
00001fd9	movl	0x0c(%ebp),%esi
00001fdc	cmpl	%esi,%eax
00001fde	cmovll	%eax,%esi
00001fe1	andl	$0xfe,%esi
00001fe4	calll	_memset
00001fe9	xorl	%eax,%eax
00001feb	movl	%ebx,%ecx
00001fed	jmp	0x0000200a
00001fef	nop
00001ff0	movb	%dh,%bl
00001ff2	addb	$0xa9,%bl
00001ff5	addb	$0x9f,%dh
00001ff8	cmpb	$0x06,%dh
00001ffb	jb	0x00001fff
00001ffd	movb	_V_memcpy(char const*, int, void*, void const*, int),%bl
00001fff	shlb	$0x04,%dl
00002002	orb	%bl,%dl
00002004	movb	%dl,(%ecx)
00002006	addl	$0x02,%eax
00002009	incl	%ecx
0000200a	cmpl	%esi,%eax
0000200c	jge	0x00002064
0000200e	movl	%ecx,%edx
00002010	subl	0x10(%ebp),%edx
00002013	cmpl	0x14(%ebp),%edx
00002016	jge	0x00002064
00002018	movb	(%edi,%eax),%dh
0000201b	movb	%dh,%dl
0000201d	addb	$0xd0,%dl
00002020	cmpb	$0x0a,%dl
00002023	jb	0x00002045
00002025	movb	%dh,%dl
00002027	addb	$0xbf,%dl
0000202a	cmpb	$0x05,%dl
0000202d	ja	0x00002036
0000202f	addb	$0xc9,%dh
00002032	movb	%dh,%dl
00002034	jmp	0x00002045
00002036	movb	%dh,%dl
00002038	addb	$0xa9,%dl
0000203b	addb	$0x9f,%dh
0000203e	cmpb	$0x06,%dh
00002041	jb	0x00002045
00002043	movb	_V_memcpy(char const*, int, void*, void const*, int),%dl
00002045	movb	0x01(%edi,%eax),%dh
00002049	movb	%dh,%bl
0000204b	addb	$0xd0,%bl
0000204e	cmpb	$0x0a,%bl
00002051	jb	0x00001fff
00002053	movb	%dh,%bl
00002055	addb	$0xbf,%bl
00002058	cmpb	$0x05,%bl
0000205b	ja	0x00001ff0
0000205d	addb	$0xc9,%dh
00002060	movb	%dh,%bl
00002062	jmp	0x00001fff
00002064	addl	$0x0c,%esp
00002067	popl	%esi
00002068	popl	%edi
00002069	popl	%ebx
0000206a	popl	%ebp
0000206b	ret
0000206c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_binarytohex(unsigned char const*, int, char*, int):
00002070	pushl	%ebp
00002071	movl	%esp,%ebp
00002073	pushl	%ebx
00002074	pushl	%edi
00002075	pushl	%esi
00002076	subl	$0x3c,%esp
00002079	calll	0x0000207e
0000207e	popl	%eax
0000207f	movl	0x15f7b-0x207e(%eax),%ecx
00002085	movl	%ecx,0xd4(%ebp)
00002088	movl	(%ecx),%ecx
0000208a	movl	%ecx,0xf0(%ebp)
0000208d	movl	0x10(%ebp),%esi
00002090	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00002093	movl	0x0c(%ebp),%ecx
00002096	testl	%ecx,%ecx
00002098	jle	0x00002124
0000209e	movl	0x14(%ebp),%edx
000020a1	movl	0x08(%ebp),%ebx
000020a4	leal	0xff(%edx),%edx
000020a7	movl	%edx,0xdc(%ebp)
000020aa	leal	0x13633-0x207e(%eax),%eax
000020b0	movl	%eax,0xd8(%ebp)
000020b3	leal	0xe6(%ebp),%edi
000020b6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000020c0	movl	%ecx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
000020c3	movzbl	(%ebx),%eax
000020c6	movl	%eax,0x0c(%esp)
000020ca	movl	0xd8(%ebp),%eax
000020cd	movl	%eax,0x08(%esp)
000020d1	movl	%edi,(%esp)
000020d4	movl	$0x0000000a,0x04(%esp)
000020dc	calll	V_snprintf(char*, int, char const*, ...)
000020e1	movl	%esi,(%esp)
000020e4	calll	_strlen
000020e9	movl	%eax,%esi
000020eb	movl	%edi,(%esp)
000020ee	movl	0xdc(%ebp),%edi
000020f1	subl	%esi,%edi
000020f3	calll	_strlen
000020f8	addl	%eax,%esi
000020fa	cmpl	0x14(%ebp),%esi
000020fd	movl	0x10(%ebp),%esi
00002100	cmovbl	%eax,%edi
00002103	testl	%edi,%edi
00002105	jle	0x0000211a
00002107	movl	%edi,0x08(%esp)
0000210b	leal	0xe6(%ebp),%eax
0000210e	movl	%eax,0x04(%esp)
00002112	movl	%esi,(%esp)
00002115	calll	_strncat
0000211a	incl	%ebx
0000211b	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ecx
0000211e	decl	%ecx
0000211f	leal	0xe6(%ebp),%edi
00002122	jne	0x000020c0
00002124	movl	0xd4(%ebp),%eax
00002127	movl	(%eax),%eax
00002129	cmpl	0xf0(%ebp),%eax
0000212c	jne	0x00002136
0000212e	addl	$0x3c,%esp
00002131	popl	%esi
00002132	popl	%edi
00002133	popl	%ebx
00002134	popl	%ebp
00002135	ret
00002136	calll	___stack_chk_fail
0000213b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
PATHSEPARATOR(char):
00002140	movb	0x04(%esp),%cl
00002144	cmpb	$0x2f,%cl
00002147	sete	%al
0000214a	cmpb	$0x5c,%cl
0000214d	sete	%cl
00002150	orb	%al,%cl
00002152	movzbl	%cl,%eax
00002155	ret
00002156	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FileBase(char const*, char*, int):
00002160	pushl	%ebp
00002161	movl	%esp,%ebp
00002163	pushl	%ebx
00002164	pushl	%edi
00002165	pushl	%esi
00002166	subl	$0x1c,%esp
00002169	movl	0x0c(%ebp),%esi
0000216c	movl	0x08(%ebp),%edi
0000216f	testl	%edi,%edi
00002171	je	0x0000217c
00002173	movb	(%edi),%al
00002175	movb	%al,0xf3(%ebp)
00002178	testb	%al,%al
0000217a	jne	0x00002184
0000217c	movb	_V_memset(char const*, int, void*, int, int),(%esi)
0000217f	jmp	0x00002225
00002184	movl	%edi,(%esp)
00002187	calll	_strlen
0000218c	leal	0xff(%eax),%ebx
0000218f	movl	%ebx,%ecx
00002191	jmp	0x000021b3
00002193	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000021a0	movb	(%edi,%ecx),%dl
000021a3	movb	%dl,%dh
000021a5	addb	$0xd2,%dh
000021a8	cmpb	$0x02,%dh
000021ab	jb	0x000021ba
000021ad	cmpb	$0x5c,%dl
000021b0	je	0x000021ba
000021b2	decl	%ecx
000021b3	testl	%ecx,%ecx
000021b5	jne	0x000021a0
000021b7	movb	0xf3(%ebp),%dl
000021ba	decl	%ecx
000021bb	cmpb	$0x2e,%dl
000021be	cmovel	%ecx,%ebx
000021c1	jmp	0x000021d2
000021c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000021d0	movl	%edx,%eax
000021d2	xorl	%ecx,%ecx
000021d4	movl	%eax,%edx
000021d6	decl	%edx
000021d7	js	0x000021fd
000021d9	movb	0xff(%edi,%eax),%cl
000021dd	cmpb	$0x2f,%cl
000021e0	je	0x000021e7
000021e2	cmpb	$0x5c,%cl
000021e5	jne	0x000021d0
000021e7	cmpb	$0x2f,%cl
000021ea	sete	%dl
000021ed	cmpb	$0x5c,%cl
000021f0	sete	%cl
000021f3	orb	%dl,%cl
000021f5	movl	_V_memset(char const*, int, void*, int, int),%ecx
000021fa	cmovnel	%eax,%ecx
000021fd	addl	%ecx,%edi
000021ff	movl	%edi,0x04(%esp)
00002203	movl	%esi,(%esp)
00002206	subl	%ecx,%ebx
00002208	addl	$0x02,%ebx
0000220b	movl	0x10(%ebp),%eax
0000220e	cmpl	%eax,%ebx
00002210	cmovgel	%eax,%ebx
00002213	movl	%ebx,0x08(%esp)
00002217	calll	_strncpy
0000221c	testl	%ebx,%ebx
0000221e	jle	0x00002225
00002220	movb	_V_memset(char const*, int, void*, int, int),0xff(%ebx,%esi)
00002225	addl	$0x1c,%esp
00002228	popl	%esi
00002229	popl	%edi
0000222a	popl	%ebx
0000222b	popl	%ebp
0000222c	ret
0000222d	nopl	(%eax)
V_StripTrailingSlash(char*):
00002230	pushl	%ebp
00002231	movl	%esp,%ebp
00002233	pushl	%esi
00002234	pushl	%eax
00002235	movl	0x08(%ebp),%esi
00002238	movl	%esi,(%esp)
0000223b	calll	_strlen
00002240	testl	%eax,%eax
00002242	jle	0x00002257
00002244	movb	0xff(%eax,%esi),%cl
00002248	cmpb	$0x2f,%cl
0000224b	je	0x00002252
0000224d	cmpb	$0x5c,%cl
00002250	jne	0x00002257
00002252	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%eax)
00002257	addl	$0x04,%esp
0000225a	popl	%esi
0000225b	popl	%ebp
0000225c	ret
0000225d	nopl	(%eax)
V_StripExtension(char const*, char*, int):
00002260	pushl	%ebp
00002261	movl	%esp,%ebp
00002263	pushl	%ebx
00002264	pushl	%edi
00002265	pushl	%esi
00002266	subl	$0x0c,%esp
00002269	movl	0x08(%ebp),%ebx
0000226c	movl	%ebx,(%esp)
0000226f	calll	_strlen
00002274	decl	%eax
00002275	movl	0x10(%ebp),%esi
00002278	movl	0x0c(%ebp),%edi
0000227b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002280	testl	%eax,%eax
00002282	jle	0x000022c6
00002284	movb	(%ebx,%eax),%cl
00002287	movb	%cl,%dl
00002289	addb	$0xd2,%dl
0000228c	decl	%eax
0000228d	cmpb	$0x02,%dl
00002290	jb	0x00002297
00002292	cmpb	$0x5c,%cl
00002295	jne	0x00002280
00002297	incl	%eax
00002298	cmpl	%esi,%eax
0000229a	jge	0x000022c6
0000229c	cmpb	$0x2f,%cl
0000229f	je	0x000022c6
000022a1	cmpb	$0x5c,%cl
000022a4	je	0x000022c6
000022a6	decl	%esi
000022a7	cmpl	%esi,%eax
000022a9	cmovll	%eax,%esi
000022ac	cmpl	%ebx,%edi
000022ae	je	0x000022c0
000022b0	movl	%esi,0x08(%esp)
000022b4	movl	%ebx,0x04(%esp)
000022b8	movl	%edi,(%esp)
000022bb	calll	_memcpy
000022c0	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000022c4	jmp	0x000022e3
000022c6	cmpl	%ebx,%edi
000022c8	je	0x000022e3
000022ca	movl	%esi,0x08(%esp)
000022ce	movl	%ebx,0x04(%esp)
000022d2	movl	%edi,(%esp)
000022d5	calll	_strncpy
000022da	testl	%esi,%esi
000022dc	jle	0x000022e3
000022de	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
000022e3	addl	$0x0c,%esp
000022e6	popl	%esi
000022e7	popl	%edi
000022e8	popl	%ebx
000022e9	popl	%ebp
000022ea	ret
000022eb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_DefaultExtension(char*, char const*, int):
000022f0	pushl	%ebp
000022f1	movl	%esp,%ebp
000022f3	pushl	%ebx
000022f4	pushl	%edi
000022f5	pushl	%esi
000022f6	subl	$0x0c,%esp
000022f9	movl	0x08(%ebp),%edi
000022fc	movl	%edi,(%esp)
000022ff	calll	_strlen
00002304	leal	0xff(%eax,%edi),%eax
00002308	movl	0x10(%ebp),%ebx
0000230b	jmp	0x00002311
0000230d	nopl	(%eax)
00002310	decl	%eax
00002311	cmpl	%edi,%eax
00002313	jbe	0x00002326
00002315	movb	(%eax),%cl
00002317	cmpb	$0x2e,%cl
0000231a	je	0x0000235e
0000231c	cmpb	$0x2f,%cl
0000231f	je	0x00002326
00002321	cmpb	$0x5c,%cl
00002324	jne	0x00002310
00002326	movl	%edi,(%esp)
00002329	calll	_strlen
0000232e	movl	%eax,%esi
00002330	movl	0x0c(%ebp),%eax
00002333	movl	%eax,(%esp)
00002336	calll	_strlen
0000233b	leal	(%eax,%esi),%ecx
0000233e	cmpl	%ebx,%ecx
00002340	jb	0x00002347
00002342	decl	%ebx
00002343	subl	%esi,%ebx
00002345	movl	%ebx,%eax
00002347	testl	%eax,%eax
00002349	jle	0x0000235e
0000234b	movl	%eax,0x08(%esp)
0000234f	movl	0x0c(%ebp),%eax
00002352	movl	%eax,0x04(%esp)
00002356	movl	%edi,(%esp)
00002359	calll	_strncat
0000235e	addl	$0x0c,%esp
00002361	popl	%esi
00002362	popl	%edi
00002363	popl	%ebx
00002364	popl	%ebp
00002365	ret
00002366	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SetExtension(char*, char const*, int):
00002370	pushl	%ebp
00002371	movl	%esp,%ebp
00002373	pushl	%ebx
00002374	pushl	%edi
00002375	pushl	%esi
00002376	subl	$0x0c,%esp
00002379	movl	0x08(%ebp),%edi
0000237c	movl	%edi,(%esp)
0000237f	calll	_strlen
00002384	decl	%eax
00002385	movl	0x10(%ebp),%ebx
00002388	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002390	testl	%eax,%eax
00002392	jle	0x000023c2
00002394	movb	(%edi,%eax),%cl
00002397	movb	%cl,%dl
00002399	addb	$0xd2,%dl
0000239c	decl	%eax
0000239d	cmpb	$0x02,%dl
000023a0	jb	0x000023a7
000023a2	cmpb	$0x5c,%cl
000023a5	jne	0x00002390
000023a7	incl	%eax
000023a8	cmpl	%ebx,%eax
000023aa	jge	0x000023c2
000023ac	cmpb	$0x2f,%cl
000023af	je	0x000023c2
000023b1	cmpb	$0x5c,%cl
000023b4	je	0x000023c2
000023b6	leal	0xff(%ebx),%ecx
000023b9	cmpl	%ecx,%eax
000023bb	cmovll	%eax,%ecx
000023be	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
000023c2	movl	%edi,(%esp)
000023c5	calll	_strlen
000023ca	leal	0xff(%eax,%edi),%eax
000023ce	jmp	0x000023d1
000023d0	decl	%eax
000023d1	cmpl	%edi,%eax
000023d3	jbe	0x000023e6
000023d5	movb	(%eax),%cl
000023d7	cmpb	$0x2e,%cl
000023da	je	0x0000241e
000023dc	cmpb	$0x2f,%cl
000023df	je	0x000023e6
000023e1	cmpb	$0x5c,%cl
000023e4	jne	0x000023d0
000023e6	movl	%edi,(%esp)
000023e9	calll	_strlen
000023ee	movl	%eax,%esi
000023f0	movl	0x0c(%ebp),%eax
000023f3	movl	%eax,(%esp)
000023f6	calll	_strlen
000023fb	leal	(%eax,%esi),%ecx
000023fe	cmpl	%ebx,%ecx
00002400	jb	0x00002407
00002402	decl	%ebx
00002403	subl	%esi,%ebx
00002405	movl	%ebx,%eax
00002407	testl	%eax,%eax
00002409	jle	0x0000241e
0000240b	movl	%eax,0x08(%esp)
0000240f	movl	0x0c(%ebp),%eax
00002412	movl	%eax,0x04(%esp)
00002416	movl	%edi,(%esp)
00002419	calll	_strncat
0000241e	addl	$0x0c,%esp
00002421	popl	%esi
00002422	popl	%edi
00002423	popl	%ebx
00002424	popl	%ebp
00002425	ret
00002426	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StripFilename(char*):
00002430	pushl	%ebp
00002431	movl	%esp,%ebp
00002433	pushl	%esi
00002434	pushl	%eax
00002435	movl	0x08(%ebp),%esi
00002438	movl	%esi,(%esp)
0000243b	calll	_strlen
00002440	decl	%eax
00002441	testl	%eax,%eax
00002443	jle	0x00002466
00002445	jmp	0x00002451
00002447	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002450	decl	%eax
00002451	testl	%eax,%eax
00002453	jle	0x00002462
00002455	movb	(%esi,%eax),%cl
00002458	cmpb	$0x2f,%cl
0000245b	je	0x00002462
0000245d	cmpb	$0x5c,%cl
00002460	jne	0x00002450
00002462	movb	_V_memset(char const*, int, void*, int, int),(%esi,%eax)
00002466	addl	$0x04,%esp
00002469	popl	%esi
0000246a	popl	%ebp
0000246b	ret
0000246c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_FixSlashes(char*, char):
00002470	movb	0x08(%esp),%al
00002474	movl	0x04(%esp),%ecx
00002478	jmp	0x0000248d
0000247a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002480	cmpb	$0x2f,%dl
00002483	je	0x0000248a
00002485	cmpb	$0x5c,%dl
00002488	jne	0x0000248c
0000248a	movb	%al,(%ecx)
0000248c	incl	%ecx
0000248d	movb	(%ecx),%dl
0000248f	testb	%dl,%dl
00002491	jne	0x00002480
00002493	ret
00002494	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FixDoubleSlashes(char*):
000024a0	pushl	%ebp
000024a1	movl	%esp,%ebp
000024a3	pushl	%ebx
000024a4	pushl	%edi
000024a5	pushl	%esi
000024a6	subl	$0x1c,%esp
000024a9	movl	0x08(%ebp),%esi
000024ac	movl	%esi,(%esp)
000024af	calll	_strlen
000024b4	leal	0xff(%eax),%edi
000024b7	cmpl	$0x02,%edi
000024ba	jl	0x0000251f
000024bc	movl	$0x00000001,%ecx
000024c1	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000024d0	movb	(%esi,%ecx),%dl
000024d3	cmpb	$0x2f,%dl
000024d6	je	0x000024e0
000024d8	cmpb	$0x5c,%dl
000024db	je	0x000024e0
000024dd	incl	%ecx
000024de	jmp	0x00002518
000024e0	movb	0x01(%esi,%ecx),%dl
000024e4	leal	0x01(%ecx),%ebx
000024e7	cmpb	$0x2f,%dl
000024ea	je	0x000024f5
000024ec	cmpb	$0x5c,%dl
000024ef	je	0x000024f5
000024f1	movl	%ebx,%ecx
000024f3	jmp	0x00002518
000024f5	leal	(%esi,%ecx),%edx
000024f8	movl	%edx,0xf0(%ebp)
000024fb	leal	0x01(%esi,%ecx),%edx
000024ff	subl	%ecx,%eax
00002501	movl	%eax,0x08(%esp)
00002505	movl	%edx,0x04(%esp)
00002509	movl	0xf0(%ebp),%eax
0000250c	movl	%eax,(%esp)
0000250f	calll	_memmove
00002514	movl	%ebx,%ecx
00002516	movl	%edi,%eax
00002518	leal	0xff(%eax),%edi
0000251b	cmpl	%edi,%ecx
0000251d	jl	0x000024d0
0000251f	addl	$0x1c,%esp
00002522	popl	%esi
00002523	popl	%edi
00002524	popl	%ebx
00002525	popl	%ebp
00002526	ret
00002527	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StripLastDir(char*, int):
00002530	pushl	%ebp
00002531	movl	%esp,%ebp
00002533	pushl	%ebx
00002534	pushl	%edi
00002535	pushl	%esi
00002536	subl	$0x1c,%esp
00002539	calll	0x0000253e
0000253e	popl	%edi
0000253f	movl	0x08(%ebp),%esi
00002542	movb	(%esi),%cl
00002544	xorb	%dl,%dl
00002546	testb	%cl,%cl
00002548	je	0x000026bd
0000254e	leal	0x13638-0x253e(%edi),%eax
00002554	cmpl	%eax,%esi
00002556	je	0x000026bd
0000255c	leal	0x13638-0x253e(%edi),%eax
00002562	movb	%cl,%dl
00002564	movb	%cl,0xf3(%ebp)
00002567	movl	%esi,%ecx
00002569	jmp	0x00002575
0000256b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002570	movb	0x01(%ecx),%dl
00002573	incl	%eax
00002574	incl	%ecx
00002575	movb	(%eax),%bl
00002577	testb	%dl,%dl
00002579	je	0x000025bd
0000257b	cmpb	%bl,%dl
0000257d	je	0x00002570
0000257f	movb	%dl,%bh
00002581	orb	$0x20,%bh
00002584	movb	%bl,%dh
00002586	orb	$0x20,%dh
00002589	cmpb	%dh,%bh
0000258b	jne	0x00002595
0000258d	addb	$0x9f,%bh
00002590	cmpb	$0x1a,%bh
00002593	jb	0x00002570
00002595	orb	%dl,%bl
00002597	jns	0x000025a7
00002599	movl	%eax,0x04(%esp)
0000259d	movl	%ecx,(%esp)
000025a0	calll	_strcasecmp
000025a5	jmp	0x000025c4
000025a7	leal	0x1363b-0x253e(%edi),%eax
000025ad	xorb	%dl,%dl
000025af	cmpl	%eax,%esi
000025b1	movl	%esi,%ecx
000025b3	movb	0xf3(%ebp),%bl
000025b6	jne	0x000025f5
000025b8	jmp	0x000026bd
000025bd	cmpb	$0x01,%bl
000025c0	sbbl	%eax,%eax
000025c2	notl	%eax
000025c4	xorb	%dl,%dl
000025c6	testl	%eax,%eax
000025c8	movb	0xf3(%ebp),%bl
000025cb	je	0x000026bd
000025d1	leal	0x1363b-0x253e(%edi),%eax
000025d7	cmpl	%eax,%esi
000025d9	je	0x000026bd
000025df	leal	0x1363b-0x253e(%edi),%eax
000025e5	movl	%esi,%ecx
000025e7	jmp	0x000025f5
000025e9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
000025f0	movb	0x01(%ecx),%bl
000025f3	incl	%eax
000025f4	incl	%ecx
000025f5	movb	(%eax),%dl
000025f7	testb	%bl,%bl
000025f9	je	0x00002627
000025fb	cmpb	%dl,%bl
000025fd	je	0x000025f0
000025ff	movb	%bl,%dh
00002601	orb	$0x20,%dh
00002604	movb	%dl,%bh
00002606	orb	$0x20,%bh
00002609	cmpb	%bh,%dh
0000260b	jne	0x00002615
0000260d	addb	$0x9f,%dh
00002610	cmpb	$0x1a,%dh
00002613	jb	0x000025f0
00002615	orb	%bl,%dl
00002617	jns	0x00002638
00002619	movl	%eax,0x04(%esp)
0000261d	movl	%ecx,(%esp)
00002620	calll	_strcasecmp
00002625	jmp	0x0000262e
00002627	cmpb	$0x01,%dl
0000262a	sbbl	%eax,%eax
0000262c	notl	%eax
0000262e	xorb	%dl,%dl
00002630	testl	%eax,%eax
00002632	je	0x000026bd
00002638	movl	%esi,(%esp)
0000263b	calll	_strlen
00002640	movb	0xff(%esi,%eax),%cl
00002644	cmpb	$0x2f,%cl
00002647	sete	%dl
0000264a	cmpb	$0x5c,%cl
0000264d	sete	%dh
00002650	leal	0xff(%eax),%ecx
00002653	orb	%dl,%dh
00002655	cmovel	%eax,%ecx
00002658	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002660	testl	%ecx,%ecx
00002662	jle	0x00002694
00002664	movb	0xff(%esi,%ecx),%al
00002668	decl	%ecx
00002669	cmpb	$0x2f,%al
0000266b	je	0x00002671
0000266d	cmpb	$0x5c,%al
0000266f	jne	0x00002660
00002671	movb	_V_memset(char const*, int, void*, int, int),0x01(%esi,%ecx)
00002676	movb	$0x01,%dl
00002678	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002680	movb	(%esi),%al
00002682	testb	%al,%al
00002684	je	0x000026bd
00002686	cmpb	$0x2f,%al
00002688	je	0x0000268e
0000268a	cmpb	$0x5c,%al
0000268c	jne	0x00002691
0000268e	movb	$0x2f,(%esi)
00002691	incl	%esi
00002692	jmp	0x00002680
00002694	movb	$0x01,%dl
00002696	testl	%ecx,%ecx
00002698	jne	0x000026bd
0000269a	leal	0x1363e-0x253e(%edi),%eax
000026a0	movl	%eax,0x08(%esp)
000026a4	movl	0x0c(%ebp),%eax
000026a7	movl	%eax,0x04(%esp)
000026ab	movl	%esi,(%esp)
000026ae	movl	$0x0000002f,0x0c(%esp)
000026b6	calll	V_snprintf(char*, int, char const*, ...)
000026bb	movb	$0x01,%dl
000026bd	movzbl	%dl,%eax
000026c0	addl	$0x1c,%esp
000026c3	popl	%esi
000026c4	popl	%edi
000026c5	popl	%ebx
000026c6	popl	%ebp
000026c7	ret
000026c8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_UnqualifiedFileName(char const*):
000026d0	pushl	%ebp
000026d1	movl	%esp,%ebp
000026d3	pushl	%esi
000026d4	pushl	%eax
000026d5	movl	0x08(%ebp),%esi
000026d8	movl	%esi,(%esp)
000026db	calll	_strlen
000026e0	leal	0xff(%eax,%esi),%ecx
000026e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000026f0	movl	%ecx,%eax
000026f2	cmpl	%esi,%eax
000026f4	jbe	0x00002706
000026f6	movb	0xff(%eax),%dl
000026f9	cmpb	$0x2f,%dl
000026fc	je	0x00002706
000026fe	leal	0xff(%eax),%ecx
00002701	cmpb	$0x5c,%dl
00002704	jne	0x000026f0
00002706	addl	$0x04,%esp
00002709	popl	%esi
0000270a	popl	%ebp
0000270b	ret
0000270c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_ComposeFileName(char const*, char const*, char*, int):
00002710	pushl	%ebp
00002711	movl	%esp,%ebp
00002713	pushl	%ebx
00002714	pushl	%edi
00002715	pushl	%esi
00002716	subl	$0x1c,%esp
00002719	calll	0x0000271e
0000271e	popl	%eax
0000271f	movl	%eax,0xf0(%ebp)
00002722	movl	0x14(%ebp),%ebx
00002725	movl	%ebx,0x08(%esp)
00002729	movl	0x08(%ebp),%eax
0000272c	movl	%eax,0x04(%esp)
00002730	movl	0x10(%ebp),%edi
00002733	movl	%edi,(%esp)
00002736	calll	_strncpy
0000273b	testl	%ebx,%ebx
0000273d	movl	%edi,%eax
0000273f	jle	0x0000275e
00002741	movb	_V_memset(char const*, int, void*, int, int),0xff(%ebx,%edi)
00002746	movl	%edi,%eax
00002748	jmp	0x0000275e
0000274a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002750	cmpb	$0x2f,%cl
00002753	je	0x0000275a
00002755	cmpb	$0x5c,%cl
00002758	jne	0x0000275d
0000275a	movb	$0x2f,(%eax)
0000275d	incl	%eax
0000275e	movb	(%eax),%cl
00002760	testb	%cl,%cl
00002762	jne	0x00002750
00002764	movl	%edi,(%esp)
00002767	calll	_strlen
0000276c	movl	%eax,%esi
0000276e	testl	%esi,%esi
00002770	jle	0x000027a3
00002772	movb	0xff(%esi,%edi),%al
00002776	cmpb	$0x2f,%al
00002778	je	0x000027a3
0000277a	cmpb	$0x5c,%al
0000277c	je	0x000027a3
0000277e	leal	0x01(%esi),%eax
00002781	cmpl	%ebx,%eax
00002783	jl	0x0000279a
00002785	movl	%edi,0x04(%esp)
00002789	movl	0xf0(%ebp),%eax
0000278c	leal	0x13642-0x271e(%eax),%eax
00002792	movl	%eax,(%esp)
00002795	calll	_Error
0000279a	movb	$0x2f,(%edi,%esi)
0000279e	movb	_V_memset(char const*, int, void*, int, int),0x01(%edi,%esi)
000027a3	movl	%edi,(%esp)
000027a6	calll	_strlen
000027ab	movl	%eax,%esi
000027ad	movl	0x0c(%ebp),%eax
000027b0	movl	%eax,(%esp)
000027b3	calll	_strlen
000027b8	leal	(%eax,%esi),%ecx
000027bb	cmpl	%ebx,%ecx
000027bd	jb	0x000027c4
000027bf	decl	%ebx
000027c0	subl	%esi,%ebx
000027c2	movl	%ebx,%eax
000027c4	testl	%eax,%eax
000027c6	jle	0x000027ec
000027c8	movl	%eax,0x08(%esp)
000027cc	movl	0x0c(%ebp),%eax
000027cf	movl	%eax,0x04(%esp)
000027d3	movl	%edi,(%esp)
000027d6	calll	_strncat
000027db	jmp	0x000027ec
000027dd	nopl	(%eax)
000027e0	cmpb	$0x2f,%al
000027e2	je	0x000027e8
000027e4	cmpb	$0x5c,%al
000027e6	jne	0x000027eb
000027e8	movb	$0x2f,(%edi)
000027eb	incl	%edi
000027ec	movb	(%edi),%al
000027ee	testb	%al,%al
000027f0	jne	0x000027e0
000027f2	addl	$0x1c,%esp
000027f5	popl	%esi
000027f6	popl	%edi
000027f7	popl	%ebx
000027f8	popl	%ebp
000027f9	ret
000027fa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_AppendSlash(char*, int):
00002800	pushl	%ebp
00002801	movl	%esp,%ebp
00002803	pushl	%ebx
00002804	pushl	%edi
00002805	pushl	%esi
00002806	subl	$0x0c,%esp
00002809	calll	0x0000280e
0000280e	popl	%ebx
0000280f	movl	0x08(%ebp),%edi
00002812	movl	%edi,(%esp)
00002815	calll	_strlen
0000281a	movl	%eax,%esi
0000281c	testl	%esi,%esi
0000281e	jle	0x00002851
00002820	movb	0xff(%esi,%edi),%al
00002824	cmpb	$0x2f,%al
00002826	je	0x00002851
00002828	cmpb	$0x5c,%al
0000282a	je	0x00002851
0000282c	movl	0x0c(%ebp),%eax
0000282f	leal	0x01(%esi),%ecx
00002832	cmpl	%eax,%ecx
00002834	jl	0x00002848
00002836	movl	%edi,0x04(%esp)
0000283a	leal	0x13642-0x280e(%ebx),%eax
00002840	movl	%eax,(%esp)
00002843	calll	_Error
00002848	movb	$0x2f,(%edi,%esi)
0000284c	movb	_V_memset(char const*, int, void*, int, int),0x01(%edi,%esi)
00002851	addl	$0x0c,%esp
00002854	popl	%esi
00002855	popl	%edi
00002856	popl	%ebx
00002857	popl	%ebp
00002858	ret
00002859	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_ExtractFilePath(char const*, char*, int):
00002860	pushl	%ebp
00002861	movl	%esp,%ebp
00002863	pushl	%ebx
00002864	pushl	%edi
00002865	pushl	%esi
00002866	subl	$0x0c,%esp
00002869	xorb	%al,%al
0000286b	movl	0x10(%ebp),%esi
0000286e	testl	%esi,%esi
00002870	jle	0x000028cd
00002872	movl	0x0c(%ebp),%edi
00002875	movl	0x08(%ebp),%ebx
00002878	movl	%ebx,(%esp)
0000287b	calll	_strlen
00002880	cmpl	$0x01,%eax
00002883	movl	$0x00000001,%ecx
00002888	cmoval	%eax,%ecx
0000288b	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002890	movl	%ecx,%eax
00002892	cmpl	$0x01,%eax
00002895	je	0x000028a8
00002897	movb	0xfe(%ebx,%eax),%dl
0000289b	cmpb	$0x2f,%dl
0000289e	je	0x000028a8
000028a0	leal	0xff(%eax),%ecx
000028a3	cmpb	$0x5c,%dl
000028a6	jne	0x00002890
000028a8	movl	%ebx,0x04(%esp)
000028ac	movl	%edi,(%esp)
000028af	leal	0xff(%ebx,%eax),%eax
000028b3	subl	%ebx,%eax
000028b5	decl	%esi
000028b6	cmpl	%esi,%eax
000028b8	cmovll	%eax,%esi
000028bb	movl	%esi,0x08(%esp)
000028bf	calll	_memcpy
000028c4	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000028c8	testl	%esi,%esi
000028ca	setne	%al
000028cd	movzbl	%al,%eax
000028d0	addl	$0x0c,%esp
000028d3	popl	%esi
000028d4	popl	%edi
000028d5	popl	%ebx
000028d6	popl	%ebp
000028d7	ret
000028d8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_ExtractFileExtension(char const*, char*, int):
000028e0	pushl	%ebp
000028e1	movl	%esp,%ebp
000028e3	pushl	%ebx
000028e4	pushl	%edi
000028e5	pushl	%esi
000028e6	subl	$0x0c,%esp
000028e9	movl	0x0c(%ebp),%edi
000028ec	movb	_V_memset(char const*, int, void*, int, int),(%edi)
000028ef	movl	0x08(%ebp),%ebx
000028f2	movl	%ebx,(%esp)
000028f5	calll	_strlen
000028fa	leal	(%ebx,%eax),%edx
000028fd	xorl	%ecx,%ecx
000028ff	nop
00002900	leal	(%eax,%ecx),%esi
00002903	cmpl	$0x01,%esi
00002906	je	0x00002941
00002908	cmpb	$0x2e,0xfe(%edx,%ecx)
0000290d	leal	0xff(%ecx),%ecx
00002910	jne	0x00002900
00002912	addl	%eax,%ebx
00002914	movb	(%ecx,%ebx),%al
00002917	cmpb	$0x2f,%al
00002919	je	0x00002941
0000291b	cmpb	$0x5c,%al
0000291d	je	0x00002941
0000291f	addl	%ecx,%ebx
00002921	testl	%ebx,%ebx
00002923	je	0x00002941
00002925	movl	0x10(%ebp),%esi
00002928	movl	%esi,0x08(%esp)
0000292c	movl	%ebx,0x04(%esp)
00002930	movl	%edi,(%esp)
00002933	calll	_strncpy
00002938	testl	%esi,%esi
0000293a	jle	0x00002941
0000293c	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00002941	addl	$0x0c,%esp
00002944	popl	%esi
00002945	popl	%edi
00002946	popl	%ebx
00002947	popl	%ebp
00002948	ret
00002949	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_GetFileExtension(char const*):
00002950	pushl	%ebp
00002951	movl	%esp,%ebp
00002953	pushl	%esi
00002954	pushl	%eax
00002955	movl	0x08(%ebp),%esi
00002958	movl	%esi,(%esp)
0000295b	calll	_strlen
00002960	xorl	%ecx,%ecx
00002962	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002970	cmpl	$0x01,%eax
00002973	je	0x00002992
00002975	cmpb	$0x2e,0xfe(%esi,%eax)
0000297a	leal	0xff(%eax),%eax
0000297d	jne	0x00002970
0000297f	movb	(%esi,%eax),%dl
00002982	xorl	%ecx,%ecx
00002984	cmpb	$0x2f,%dl
00002987	je	0x00002992
00002989	cmpb	$0x5c,%dl
0000298c	je	0x00002992
0000298e	addl	%eax,%esi
00002990	movl	%esi,%ecx
00002992	movl	%ecx,%eax
00002994	addl	$0x04,%esp
00002997	popl	%esi
00002998	popl	%ebp
00002999	ret
0000299a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_GetFileName(char const*):
000029a0	pushl	%ebp
000029a1	movl	%esp,%ebp
000029a3	pushl	%esi
000029a4	pushl	%eax
000029a5	movl	0x08(%ebp),%esi
000029a8	movl	%esi,(%esp)
000029ab	calll	_strlen
000029b0	leal	0xff(%eax,%esi),%ecx
000029b4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000029c0	movl	%ecx,%eax
000029c2	cmpl	%esi,%eax
000029c4	jbe	0x000029d6
000029c6	movb	0xff(%eax),%dl
000029c9	cmpb	$0x2f,%dl
000029cc	je	0x000029d6
000029ce	leal	0xff(%eax),%ecx
000029d1	cmpb	$0x5c,%dl
000029d4	jne	0x000029c0
000029d6	addl	$0x04,%esp
000029d9	popl	%esi
000029da	popl	%ebp
000029db	ret
000029dc	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_RemoveDotSlashes(char*, char, bool):
000029e0	pushl	%ebp
000029e1	pushl	%ebx
000029e2	pushl	%edi
000029e3	pushl	%esi
000029e4	pushl	%eax
000029e5	movb	$0x01,0x03(%esp)
000029ea	movb	0x1c(%esp),%al
000029ee	movl	0x18(%esp),%esi
000029f2	movl	%esi,%ebx
000029f4	movl	%esi,%edi
000029f6	movb	$0x01,%ah
000029f8	jmp	0x00002a0c
000029fa	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002a00	incl	%ebx
00002a01	cmpl	%esi,%edi
00002a03	je	0x00002a41
00002a05	cmpb	%al,_V_memset(char const*, int, void*, int, int)(%ebp)
00002a08	jne	0x00002a41
00002a0a	movl	%ebp,%edi
00002a0c	leal	0xff(%edi),%ebp
00002a0f	jmp	0x00002a41
00002a11	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002a20	testb	%ah,%ah
00002a22	je	0x00002aa3
00002a24	cmpb	$0x2e,%ch
00002a27	jne	0x00002aa3
00002a29	movb	0x01(%ebx),%dl
00002a2c	testb	%dl,%dl
00002a2e	je	0x00002a00
00002a30	cmpb	$0x2f,%dl
00002a33	je	0x00002a3e
00002a35	cmpb	$0x5c,%dl
00002a38	jne	0x00002acb
00002a3e	addl	$0x02,%ebx
00002a41	movb	(%ebx),%ch
00002a43	testb	%ch,%ch
00002a45	je	0x00002ada
00002a4b	testb	%ah,%ah
00002a4d	je	0x00002a20
00002a4f	cmpb	$0x2e,%ch
00002a52	jne	0x00002a20
00002a54	cmpb	$0x2e,0x01(%ebx)
00002a58	jne	0x00002a20
00002a5a	movb	0x02(%ebx),%cl
00002a5d	leal	0x02(%ebx),%edx
00002a60	testb	%cl,%cl
00002a62	je	0x00002a70
00002a64	cmpb	$0x2f,%cl
00002a67	je	0x00002a70
00002a69	cmpb	$0x5c,%cl
00002a6c	jne	0x00002a20
00002a6e	nop
00002a70	movl	%edi,%ebx
00002a72	cmpl	%ebx,%esi
00002a74	je	0x00002a80
00002a76	leal	0xff(%ebx),%edi
00002a79	cmpb	%al,0xff(%ebx)
00002a7c	je	0x00002a70
00002a7e	nop
00002a80	cmpl	%ebx,%esi
00002a82	je	0x00002a9a
00002a84	leal	0xff(%ebx),%edi
00002a87	cmpb	%al,0xff(%ebx)
00002a8a	movl	%edi,%ebx
00002a8c	jne	0x00002a80
00002a8e	cmpl	%esi,%edi
00002a90	sete	%ah
00002a93	movl	%edx,%ebx
00002a95	jmp	0x00002a0c
00002a9a	movl	%ebx,%edi
00002a9c	movb	_V_memset(char const*, int, void*, int, int),0x03(%esp)
00002aa1	jmp	0x00002a8e
00002aa3	cmpb	$0x2f,%ch
00002aa6	je	0x00002aad
00002aa8	cmpb	$0x5c,%ch
00002aab	jne	0x00002acb
00002aad	movb	%al,(%edi)
00002aaf	cmpl	%esi,%edi
00002ab1	setne	%cl
00002ab4	andb	0x20(%esp),%cl
00002ab8	andb	%ah,%cl
00002aba	movzbl	%cl,%ecx
00002abd	negl	%ecx
00002abf	leal	0x01(%edi,%ecx),%edi
00002ac3	movb	$0x01,%ah
00002ac5	incl	%ebx
00002ac6	jmp	0x00002a0c
00002acb	cmpl	%ebx,%edi
00002acd	je	0x00002ad1
00002acf	movb	%ch,(%edi)
00002ad1	incl	%edi
00002ad2	xorb	%ah,%ah
00002ad4	incl	%ebx
00002ad5	jmp	0x00002a0c
00002ada	movb	_V_memset(char const*, int, void*, int, int),(%edi)
00002add	movb	0x03(%esp),%al
00002ae1	andb	$0x01,%al
00002ae3	movzbl	%al,%eax
00002ae6	addl	$0x04,%esp
00002ae9	popl	%esi
00002aea	popl	%edi
00002aeb	popl	%ebx
00002aec	popl	%ebp
00002aed	ret
00002aee	nop
V_MakeAbsolutePath(char*, int, char const*, char const*):
00002af0	pushl	%ebp
00002af1	movl	%esp,%ebp
00002af3	pushl	%ebx
00002af4	pushl	%edi
00002af5	pushl	%esi
00002af6	subl	$0x1c,%esp
00002af9	calll	0x00002afe
00002afe	popl	%eax
00002aff	movl	%eax,0xf0(%ebp)
00002b02	movl	0x10(%ebp),%ecx
00002b05	movb	(%ecx),%al
00002b07	movl	0x0c(%ebp),%edi
00002b0a	movl	0x08(%ebp),%ebx
00002b0d	testb	%al,%al
00002b0f	je	0x00002b41
00002b11	cmpb	$0x3a,0x01(%ecx)
00002b15	je	0x00002b1f
00002b17	cmpb	$0x2f,%al
00002b19	je	0x00002b1f
00002b1b	cmpb	$0x5c,%al
00002b1d	jne	0x00002b41
00002b1f	movl	%edi,0x08(%esp)
00002b23	movl	%ecx,0x04(%esp)
00002b27	movl	%ebx,(%esp)
00002b2a	calll	_strncpy
00002b2f	testl	%edi,%edi
00002b31	jle	0x00002c91
00002b37	movb	_V_memset(char const*, int, void*, int, int),0xff(%edi,%ebx)
00002b3c	jmp	0x00002c91
00002b41	movl	0x14(%ebp),%esi
00002b44	testl	%esi,%esi
00002b46	je	0x00002b7e
00002b48	movb	(%esi),%al
00002b4a	testb	%al,%al
00002b4c	je	0x00002b7e
00002b4e	cmpb	$0x3a,0x01(%esi)
00002b52	je	0x00002b5c
00002b54	cmpb	$0x2f,%al
00002b56	je	0x00002b5c
00002b58	cmpb	$0x5c,%al
00002b5a	jne	0x00002b7e
00002b5c	movl	%edi,0x08(%esp)
00002b60	movl	%esi,0x04(%esp)
00002b64	movl	%ebx,(%esp)
00002b67	calll	_strncpy
00002b6c	testl	%edi,%edi
00002b6e	jle	0x00002c1a
00002b74	movb	_V_memset(char const*, int, void*, int, int),0xff(%edi,%ebx)
00002b79	jmp	0x00002c1a
00002b7e	movl	%edi,0x04(%esp)
00002b82	movl	%ebx,(%esp)
00002b85	calll	_getcwd
00002b8a	testl	%eax,%eax
00002b8c	jne	0x00002b9f
00002b8e	movl	0xf0(%ebp),%eax
00002b91	leal	0x13669-0x2afe(%eax),%eax
00002b97	movl	%eax,(%esp)
00002b9a	calll	_Error
00002b9f	testl	%esi,%esi
00002ba1	je	0x00002c1a
00002ba3	movl	%ebx,(%esp)
00002ba6	calll	_strlen
00002bab	movl	%eax,%esi
00002bad	testl	%esi,%esi
00002baf	jle	0x00002be2
00002bb1	movb	0xff(%esi,%ebx),%al
00002bb5	cmpb	$0x2f,%al
00002bb7	je	0x00002be2
00002bb9	cmpb	$0x5c,%al
00002bbb	je	0x00002be2
00002bbd	leal	0x01(%esi),%eax
00002bc0	cmpl	%edi,%eax
00002bc2	jl	0x00002bd9
00002bc4	movl	%ebx,0x04(%esp)
00002bc8	movl	0xf0(%ebp),%eax
00002bcb	leal	0x13642-0x2afe(%eax),%eax
00002bd1	movl	%eax,(%esp)
00002bd4	calll	_Error
00002bd9	movb	$0x2f,(%ebx,%esi)
00002bdd	movb	_V_memset(char const*, int, void*, int, int),0x01(%ebx,%esi)
00002be2	movl	%ebx,(%esp)
00002be5	calll	_strlen
00002bea	movl	%eax,%esi
00002bec	movl	0x14(%ebp),%eax
00002bef	movl	%eax,(%esp)
00002bf2	calll	_strlen
00002bf7	leal	(%eax,%esi),%ecx
00002bfa	cmpl	%edi,%ecx
00002bfc	jb	0x00002c03
00002bfe	leal	0xff(%edi),%eax
00002c01	subl	%esi,%eax
00002c03	testl	%eax,%eax
00002c05	jle	0x00002c1a
00002c07	movl	%eax,0x08(%esp)
00002c0b	movl	0x14(%ebp),%eax
00002c0e	movl	%eax,0x04(%esp)
00002c12	movl	%ebx,(%esp)
00002c15	calll	_strncat
00002c1a	movl	%ebx,(%esp)
00002c1d	calll	_strlen
00002c22	movl	%eax,%esi
00002c24	testl	%esi,%esi
00002c26	jle	0x00002c59
00002c28	movb	0xff(%esi,%ebx),%al
00002c2c	cmpb	$0x2f,%al
00002c2e	je	0x00002c59
00002c30	cmpb	$0x5c,%al
00002c32	je	0x00002c59
00002c34	leal	0x01(%esi),%eax
00002c37	cmpl	%edi,%eax
00002c39	jl	0x00002c50
00002c3b	movl	%ebx,0x04(%esp)
00002c3f	movl	0xf0(%ebp),%eax
00002c42	leal	0x13642-0x2afe(%eax),%eax
00002c48	movl	%eax,(%esp)
00002c4b	calll	_Error
00002c50	movb	$0x2f,(%ebx,%esi)
00002c54	movb	_V_memset(char const*, int, void*, int, int),0x01(%ebx,%esi)
00002c59	movl	%ebx,(%esp)
00002c5c	calll	_strlen
00002c61	movl	%eax,%esi
00002c63	movl	0x10(%ebp),%eax
00002c66	movl	%eax,(%esp)
00002c69	calll	_strlen
00002c6e	leal	(%eax,%esi),%ecx
00002c71	cmpl	%edi,%ecx
00002c73	jb	0x00002c7a
00002c75	decl	%edi
00002c76	subl	%esi,%edi
00002c78	movl	%edi,%eax
00002c7a	testl	%eax,%eax
00002c7c	movl	0x10(%ebp),%ecx
00002c7f	jle	0x00002c91
00002c81	movl	%eax,0x08(%esp)
00002c85	movl	%ecx,0x04(%esp)
00002c89	movl	%ebx,(%esp)
00002c8c	calll	_strncat
00002c91	movl	%ebx,(%esp)
00002c94	movl	$0x00000001,0x08(%esp)
00002c9c	movl	$0x0000002f,0x04(%esp)
00002ca4	calll	V_RemoveDotSlashes(char*, char, bool)
00002ca9	testb	%al,%al
00002cab	jne	0x00002cbe
00002cad	movl	0xf0(%ebp),%eax
00002cb0	leal	0x1368d-0x2afe(%eax),%eax
00002cb6	movl	%eax,(%esp)
00002cb9	calll	_Error
00002cbe	addl	$0x1c,%esp
00002cc1	popl	%esi
00002cc2	popl	%edi
00002cc3	popl	%ebx
00002cc4	popl	%ebp
00002cc5	ret
00002cc6	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_IsAbsolutePath(char const*):
00002cd0	pushl	%esi
00002cd1	movl	0x08(%esp),%esi
00002cd5	movb	(%esi),%cl
00002cd7	xorb	%dl,%dl
00002cd9	testb	%cl,%cl
00002cdb	je	0x00002cec
00002cdd	movb	$0x01,%al
00002cdf	cmpb	$0x3a,0x01(%esi)
00002ce3	je	0x00002cf2
00002ce5	cmpb	$0x2f,%cl
00002ce8	movb	%cl,%dl
00002cea	je	0x00002cf2
00002cec	cmpb	$0x5c,%dl
00002cef	sete	%al
00002cf2	movzbl	%al,%eax
00002cf5	popl	%esi
00002cf6	ret
00002cf7	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_MakeRelativePath(char const*, char const*, char*, int):
00002d00	pushl	%ebp
00002d01	movl	%esp,%ebp
00002d03	pushl	%ebx
00002d04	pushl	%edi
00002d05	pushl	%esi
00002d06	subl	$0x1c,%esp
00002d09	movl	0x10(%ebp),%eax
00002d0c	movb	_V_memset(char const*, int, void*, int, int),(%eax)
00002d0f	movl	0x08(%ebp),%edx
00002d12	incl	%edx
00002d13	movl	0x0c(%ebp),%esi
00002d16	incl	%esi
00002d17	movl	_V_memset(char const*, int, void*, int, int),0xe8(%ebp)
00002d1e	movl	_V_memset(char const*, int, void*, int, int),0xec(%ebp)
00002d25	jmp	0x00002de6
00002d2a	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002d30	movl	%esi,0xf0(%ebp)
00002d33	movl	%edx,%edi
00002d35	testb	%bl,%bl
00002d37	js	0x00002d4d
00002d39	movl	$0x00000040,%eax
00002d3e	subl	%ebx,%eax
00002d40	leal	0xa5(%ebx),%esi
00002d43	andl	%eax,%esi
00002d45	shrl	$0x1a,%esi
00002d48	andl	$0x20,%esi
00002d4b	jmp	0x00002d68
00002d4d	movl	%ebx,(%esp)
00002d50	movl	$0x00008000,0x04(%esp)
00002d58	calll	___maskrune
00002d5d	testl	%eax,%eax
00002d5f	setne	%al
00002d62	movzbl	%al,%esi
00002d65	shll	$0x05,%esi
00002d68	addl	%ebx,%esi
00002d6a	movl	0xf0(%ebp),%eax
00002d6d	movzbl	0xff(%eax),%ebx
00002d71	testb	%bl,%bl
00002d73	js	0x00002d89
00002d75	movl	$0x00000040,%eax
00002d7a	subl	%ebx,%eax
00002d7c	leal	0xa5(%ebx),%ecx
00002d7f	andl	%eax,%ecx
00002d81	shrl	$0x1a,%ecx
00002d84	andl	$0x20,%ecx
00002d87	jmp	0x00002da4
00002d89	movl	%ebx,(%esp)
00002d8c	movl	$0x00008000,0x04(%esp)
00002d94	calll	___maskrune
00002d99	testl	%eax,%eax
00002d9b	setne	%al
00002d9e	movzbl	%al,%ecx
00002da1	shll	$0x05,%ecx
00002da4	movl	%edi,%edx
00002da6	addl	%ebx,%ecx
00002da8	movb	0xff(%edx),%al
00002dab	cmpl	%ecx,%esi
00002dad	movl	0xec(%ebp),%ebx
00002db0	movl	0xf0(%ebp),%esi
00002db3	je	0x00002dce
00002db5	cmpb	$0x2f,%al
00002db7	je	0x00002dbd
00002db9	cmpb	$0x5c,%al
00002dbb	jne	0x00002df8
00002dbd	movb	0xff(%esi),%cl
00002dc0	testb	%cl,%cl
00002dc2	je	0x00002dce
00002dc4	cmpb	$0x2f,%cl
00002dc7	je	0x00002dce
00002dc9	cmpb	$0x5c,%cl
00002dcc	jne	0x00002df8
00002dce	cmpb	$0x2f,%al
00002dd0	je	0x00002dd6
00002dd2	cmpb	$0x5c,%al
00002dd4	jne	0x00002ddb
00002dd6	movl	%edx,0xe8(%ebp)
00002dd9	movl	%esi,%ebx
00002ddb	cmpb	_V_memset(char const*, int, void*, int, int),0xff(%esi)
00002ddf	je	0x00002df7
00002de1	movl	%ebx,0xec(%ebp)
00002de4	incl	%edx
00002de5	incl	%esi
00002de6	movzbl	0xff(%edx),%ebx
00002dea	testl	%ebx,%ebx
00002dec	jne	0x00002d30
00002df2	movl	0xec(%ebp),%ebx
00002df5	jmp	0x00002df8
00002df7	decl	%ebx
00002df8	xorb	%al,%al
00002dfa	movl	0xe8(%ebp),%edi
00002dfd	testl	%edi,%edi
00002dff	je	0x00002e86
00002e05	movb	$0x01,%cl
00002e07	xorl	%eax,%eax
00002e09	movl	0x10(%ebp),%esi
00002e0c	jmp	0x00002e30
00002e0e	nop
00002e10	cmpb	$0x2f,%dl
00002e13	je	0x00002e1c
00002e15	xorb	%cl,%cl
00002e17	cmpb	$0x5c,%dl
00002e1a	jne	0x00002e2f
00002e1c	movb	$0x2e,(%esi,%eax)
00002e20	movb	$0x2e,0x01(%esi,%eax)
00002e25	movb	$0x2f,0x02(%esi,%eax)
00002e2a	addl	$0x03,%eax
00002e2d	movb	$0x01,%cl
00002e2f	incl	%ebx
00002e30	movb	(%ebx),%dl
00002e32	testb	%dl,%dl
00002e34	jne	0x00002e10
00002e36	testb	$0x01,%cl
00002e39	movl	0x14(%ebp),%edx
00002e3c	jne	0x00002e4f
00002e3e	movb	$0x2e,(%esi,%eax)
00002e42	movb	$0x2e,0x01(%esi,%eax)
00002e47	movb	$0x2f,0x02(%esi,%eax)
00002e4c	addl	$0x03,%eax
00002e4f	addl	$0xfe,%edx
00002e52	jmp	0x00002e62
00002e54	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00002e60	incl	%eax
00002e61	incl	%edi
00002e62	movb	(%edi),%cl
00002e64	testb	%cl,%cl
00002e66	je	0x00002e80
00002e68	cmpb	$0x2f,%cl
00002e6b	je	0x00002e72
00002e6d	cmpb	$0x5c,%cl
00002e70	jne	0x00002e78
00002e72	movb	$0x2f,(%esi,%eax)
00002e76	jmp	0x00002e7b
00002e78	movb	%cl,(%esi,%eax)
00002e7b	cmpl	%eax,%edx
00002e7d	jne	0x00002e60
00002e7f	incl	%eax
00002e80	movb	_V_memset(char const*, int, void*, int, int),(%esi,%eax)
00002e84	movb	$0x01,%al
00002e86	movzbl	%al,%eax
00002e89	addl	$0x1c,%esp
00002e8c	popl	%esi
00002e8d	popl	%edi
00002e8e	popl	%ebx
00002e8f	popl	%ebp
00002e90	ret
00002e91	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_FixupPathName(char*, unsigned long, char const*):
00002ea0	pushl	%ebp
00002ea1	movl	%esp,%ebp
00002ea3	pushl	%edi
00002ea4	pushl	%esi
00002ea5	subl	$0x10,%esp
00002ea8	movl	0x0c(%ebp),%esi
00002eab	movl	%esi,0x08(%esp)
00002eaf	movl	0x10(%ebp),%eax
00002eb2	movl	%eax,0x04(%esp)
00002eb6	movl	0x08(%ebp),%edi
00002eb9	movl	%edi,(%esp)
00002ebc	calll	_strncpy
00002ec1	testl	%esi,%esi
00002ec3	jle	0x00002eca
00002ec5	movb	_V_memset(char const*, int, void*, int, int),0xff(%esi,%edi)
00002eca	movl	%edi,(%esp)
00002ecd	movl	$0x00000001,0x08(%esp)
00002ed5	movl	$0x0000002f,0x04(%esp)
00002edd	calll	V_RemoveDotSlashes(char*, char, bool)
00002ee2	addl	$0x10,%esp
00002ee5	popl	%esi
00002ee6	popl	%edi
00002ee7	popl	%ebp
00002ee8	ret
00002ee9	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_StrSubst(char const*, char const*, char const*, char*, int, bool):
00002ef0	pushl	%ebp
00002ef1	movl	%esp,%ebp
00002ef3	pushl	%ebx
00002ef4	pushl	%edi
00002ef5	pushl	%esi
00002ef6	subl	$0x2c,%esp
00002ef9	movl	0x0c(%ebp),%edi
00002efc	movl	%edi,(%esp)
00002eff	calll	_strlen
00002f04	movl	%eax,0xdc(%ebp)
00002f07	movl	0x10(%ebp),%eax
00002f0a	movl	%eax,(%esp)
00002f0d	calll	_strlen
00002f12	movl	%eax,0xe8(%ebp)
00002f15	movl	0x14(%ebp),%ebx
00002f18	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
00002f1b	movl	0x18(%ebp),%eax
00002f1e	leal	0xff(%ebx,%eax),%eax
00002f22	movl	%eax,0xe4(%ebp)
00002f25	movl	0x08(%ebp),%eax
00002f28	movl	%eax,0xf0(%ebp)
00002f2b	jmp	0x00002fa0
00002f2d	nopl	(%eax)
00002f30	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
00002f34	xorb	%cl,%cl
00002f36	cmpl	%esi,0xec(%ebp)
00002f39	movl	%edi,%ebx
00002f3b	jg	0x0000304d
00002f41	movl	%ebx,(%esp)
00002f44	calll	_strlen
00002f49	leal	(%ebx,%eax),%edi
00002f4c	movl	0x14(%ebp),%edx
00002f4f	subl	%edi,%edx
00002f51	xorb	%cl,%cl
00002f53	addl	0x18(%ebp),%edx
00002f56	je	0x0000304d
00002f5c	movl	0xe4(%ebp),%edx
00002f5f	subl	%edi,%edx
00002f61	leal	(%ebx,%eax),%esi
00002f64	movl	%ebx,_V_strcpy(char const*, int, char*, char const*)(%ebp)
00002f67	movl	0x10(%ebp),%ebx
00002f6a	movl	0xe8(%ebp),%edi
00002f6d	jmp	0x00002f76
00002f6f	nop
00002f70	movb	%cl,(%esi)
00002f72	decl	%edx
00002f73	incl	%esi
00002f74	decl	%edi
00002f75	incl	%ebx
00002f76	testl	%edi,%edi
00002f78	jle	0x00002f89
00002f7a	movb	(%ebx),%cl
00002f7c	testb	%cl,%cl
00002f7e	je	0x00002f89
00002f80	testl	%edx,%edx
00002f82	jne	0x00002f70
00002f84	jmp	0x00003017
00002f89	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00002f8c	addl	0xe8(%ebp),%eax
00002f8f	movl	_V_strcpy(char const*, int, char*, char const*)(%ebp),%ebx
00002f92	addl	%eax,%ebx
00002f94	movl	0xec(%ebp),%eax
00002f97	addl	0xdc(%ebp),%eax
00002f9a	addl	%eax,0xf0(%ebp)
00002f9d	movl	0x0c(%ebp),%edi
00002fa0	movl	0x14(%ebp),%esi
00002fa3	subl	%ebx,%esi
00002fa5	addl	0x18(%ebp),%esi
00002fa8	cmpb	$0x01,0x1c(%ebp)
00002fac	jne	0x00002fbf
00002fae	movl	%edi,0x04(%esp)
00002fb2	movl	0xf0(%ebp),%eax
00002fb5	movl	%eax,(%esp)
00002fb8	calll	_strstr
00002fbd	jmp	0x00002fce
00002fbf	movl	%edi,0x04(%esp)
00002fc3	movl	0xf0(%ebp),%eax
00002fc6	movl	%eax,(%esp)
00002fc9	calll	V_stristr(char const*, char const*)
00002fce	testl	%eax,%eax
00002fd0	je	0x0000301e
00002fd2	xorb	%cl,%cl
00002fd4	testl	%esi,%esi
00002fd6	je	0x0000304d
00002fd8	movl	%eax,%edx
00002fda	subl	0xf0(%ebp),%edx
00002fdd	movl	%edx,0xec(%ebp)
00002fe0	movl	0xe4(%ebp),%eax
00002fe3	subl	%ebx,%eax
00002fe5	decl	%esi
00002fe6	xorl	%ecx,%ecx
00002fe8	movl	%ebx,%edi
00002fea	jmp	0x00002ff5
00002fec	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00002ff0	movb	%bl,(%edi,%ecx)
00002ff3	decl	%edx
00002ff4	incl	%ecx
00002ff5	testl	%edx,%edx
00002ff7	jle	0x00002f30
00002ffd	movl	0xf0(%ebp),%ebx
00003000	movb	(%ebx,%ecx),%bl
00003003	testb	%bl,%bl
00003005	je	0x00002f30
0000300b	cmpl	%ecx,%eax
0000300d	jne	0x00002ff0
0000300f	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ecx)
00003013	xorb	%cl,%cl
00003015	jmp	0x0000304d
00003017	movb	_V_memset(char const*, int, void*, int, int),(%esi)
0000301a	xorb	%cl,%cl
0000301c	jmp	0x0000304d
0000301e	movl	0xf0(%ebp),%edi
00003021	movl	%edi,(%esp)
00003024	calll	_strlen
00003029	movl	%eax,0xec(%ebp)
0000302c	movl	%esi,0x08(%esp)
00003030	movl	%edi,0x04(%esp)
00003034	movl	%ebx,(%esp)
00003037	calll	_strncpy
0000303c	leal	0xff(%esi),%eax
0000303f	testl	%esi,%esi
00003041	jle	0x00003047
00003043	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%eax)
00003047	cmpl	%eax,0xec(%ebp)
0000304a	setle	%cl
0000304d	movzbl	%cl,%eax
00003050	addl	$0x2c,%esp
00003053	popl	%esi
00003054	popl	%edi
00003055	popl	%ebx
00003056	popl	%ebp
00003057	ret
00003058	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
AllocString(char const*, int):
00003060	pushl	%ebp
00003061	movl	%esp,%ebp
00003063	pushl	%ebx
00003064	pushl	%edi
00003065	pushl	%esi
00003066	subl	$0x0c,%esp
00003069	movl	0x08(%ebp),%eax
0000306c	movl	%eax,(%esp)
0000306f	movl	0x0c(%ebp),%edi
00003072	calll	_strlen
00003077	cmpl	$0xff,%edi
0000307a	je	0x00003080
0000307c	cmpl	%edi,%eax
0000307e	jge	0x00003082
00003080	movl	%eax,%edi
00003082	leal	0x01(%edi),%ebx
00003085	testl	%ebx,%ebx
00003087	movl	$0xffffffff,%eax
0000308c	cmovnsl	%ebx,%eax
0000308f	movl	%eax,(%esp)
00003092	calll	operator new[](unsigned long)
00003097	movl	%eax,%esi
00003099	movl	%ebx,0x08(%esp)
0000309d	movl	0x08(%ebp),%eax
000030a0	movl	%eax,0x04(%esp)
000030a4	movl	%esi,(%esp)
000030a7	calll	_strncpy
000030ac	testl	%ebx,%ebx
000030ae	jle	0x000030b4
000030b0	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
000030b4	movl	%esi,%eax
000030b6	addl	$0x0c,%esp
000030b9	popl	%esi
000030ba	popl	%edi
000030bb	popl	%ebx
000030bc	popl	%ebp
000030bd	ret
000030be	nop
V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&):
000030c0	pushl	%ebp
000030c1	movl	%esp,%ebp
000030c3	pushl	%ebx
000030c4	pushl	%edi
000030c5	pushl	%esi
000030c6	subl	$0x1c,%esp
000030c9	movl	0x14(%ebp),%ecx
000030cc	movl	_V_memset(char const*, int, void*, int, int),0x0c(%ecx)
000030d3	movl	(%ecx),%eax
000030d5	cmpl	_V_memset(char const*, int, void*, int, int),0x08(%ecx)
000030d9	js	0x000030fa
000030db	testl	%eax,%eax
000030dd	je	0x000030f1
000030df	movl	%eax,(%esp)
000030e2	movl	%ecx,%esi
000030e4	calll	_free
000030e9	movl	%esi,%ecx
000030eb	movl	_V_memset(char const*, int, void*, int, int),(%ecx)
000030f1	movl	_V_memset(char const*, int, void*, int, int),0x04(%ecx)
000030f8	xorl	%eax,%eax
000030fa	movl	0x08(%ebp),%edx
000030fd	movl	%edx,0xf0(%ebp)
00003100	movl	%eax,0x10(%ecx)
00003103	jmp	0x000031e9
00003108	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00003110	movl	0x0c(%ebp),%eax
00003113	movl	(%eax,%ebx,4),%eax
00003116	movl	%eax,(%esp)
00003119	calll	_strlen
0000311e	movl	%eax,0xe8(%ebp)
00003121	movl	0xf0(%ebp),%eax
00003124	cmpl	%eax,%esi
00003126	jbe	0x000031e3
0000312c	movl	%eax,(%esp)
0000312f	movl	%esi,%ebx
00003131	subl	%eax,%ebx
00003133	calll	_strlen
00003138	cmpl	$0xff,%ebx
0000313b	je	0x00003141
0000313d	cmpl	%ebx,%eax
0000313f	jge	0x00003143
00003141	movl	%eax,%ebx
00003143	leal	0x01(%ebx),%edi
00003146	testl	%edi,%edi
00003148	movl	$0xffffffff,%eax
0000314d	cmovnsl	%edi,%eax
00003150	movl	%eax,(%esp)
00003153	calll	operator new[](unsigned long)
00003158	movl	%eax,%ecx
0000315a	movl	%ecx,0xec(%ebp)
0000315d	movl	%edi,0x08(%esp)
00003161	movl	0xf0(%ebp),%eax
00003164	movl	%eax,0x04(%esp)
00003168	movl	%ecx,(%esp)
0000316b	calll	_strncpy
00003170	movl	0xec(%ebp),%eax
00003173	testl	%edi,%edi
00003175	jle	0x0000317b
00003177	movb	_V_memset(char const*, int, void*, int, int),(%eax,%ebx)
0000317b	movl	0x14(%ebp),%edx
0000317e	movl	0x04(%edx),%eax
00003181	movl	0x0c(%edx),%ebx
00003184	leal	0x01(%ebx),%edi
00003187	cmpl	%eax,%edi
00003189	movl	%ebx,%ecx
0000318b	jle	0x000031aa
0000318d	movl	%edi,%ecx
0000318f	subl	%eax,%ecx
00003191	movl	%ecx,0x04(%esp)
00003195	movl	%edx,(%esp)
00003198	movl	%edi,0xf0(%ebp)
0000319b	movl	%edx,%edi
0000319d	calll	CUtlMemory<char*, int>::Grow(int)
000031a2	movl	%edi,%edx
000031a4	movl	0xf0(%ebp),%edi
000031a7	movl	0x0c(%edx),%ecx
000031aa	incl	%ecx
000031ab	movl	%ecx,0x0c(%edx)
000031ae	movl	(%edx),%eax
000031b0	movl	%eax,0x10(%edx)
000031b3	subl	%ebx,%ecx
000031b5	decl	%ecx
000031b6	testl	%ecx,%ecx
000031b8	jle	0x000031d7
000031ba	shll	$0x02,%ecx
000031bd	movl	%ecx,0x08(%esp)
000031c1	leal	(%eax,%ebx,4),%ecx
000031c4	movl	%ecx,0x04(%esp)
000031c8	leal	(%eax,%edi,4),%eax
000031cb	movl	%eax,(%esp)
000031ce	movl	%edx,%edi
000031d0	calll	_memmove
000031d5	movl	(%edi),%eax
000031d7	movl	0xec(%ebp),%ecx
000031da	shll	$0x02,%ebx
000031dd	addl	%eax,%ebx
000031df	je	0x000031e3
000031e1	movl	%ecx,(%ebx)
000031e3	addl	0xe8(%ebp),%esi
000031e6	movl	%esi,0xf0(%ebp)
000031e9	xorl	%edi,%edi
000031eb	cmpl	_V_memset(char const*, int, void*, int, int),0x10(%ebp)
000031ef	movl	_V_memset(char const*, int, void*, int, int),%esi
000031f4	movl	$0xffffffff,%ebx
000031f9	jle	0x00003233
000031fb	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
00003200	movl	0x0c(%ebp),%eax
00003203	movl	(%eax,%edi,4),%eax
00003206	movl	%eax,0x04(%esp)
0000320a	movl	0xf0(%ebp),%eax
0000320d	movl	%eax,(%esp)
00003210	calll	V_stristr(char const*, char const*)
00003215	testl	%eax,%eax
00003217	je	0x00003225
00003219	testl	%esi,%esi
0000321b	je	0x00003221
0000321d	cmpl	%esi,%eax
0000321f	jae	0x00003225
00003221	movl	%edi,%ebx
00003223	movl	%eax,%esi
00003225	incl	%edi
00003226	cmpl	%edi,0x10(%ebp)
00003229	jne	0x00003200
0000322b	testl	%esi,%esi
0000322d	jne	0x00003110
00003233	movl	0xf0(%ebp),%esi
00003236	movl	%esi,(%esp)
00003239	calll	_strlen
0000323e	movl	%eax,%edi
00003240	testl	%edi,%edi
00003242	je	0x000032dc
00003248	leal	0x01(%edi),%ebx
0000324b	testl	%ebx,%ebx
0000324d	movl	$0xffffffff,%eax
00003252	cmovnsl	%ebx,%eax
00003255	movl	%eax,(%esp)
00003258	calll	operator new[](unsigned long)
0000325d	movl	%ebx,0x08(%esp)
00003261	movl	%esi,0x04(%esp)
00003265	movl	%eax,%esi
00003267	movl	%esi,(%esp)
0000326a	calll	_strncpy
0000326f	testl	%ebx,%ebx
00003271	jle	0x00003277
00003273	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
00003277	movl	%esi,0xf0(%ebp)
0000327a	movl	0x14(%ebp),%edx
0000327d	movl	0x04(%edx),%eax
00003280	movl	0x0c(%edx),%edi
00003283	leal	0x01(%edi),%ebx
00003286	cmpl	%eax,%ebx
00003288	movl	%edi,%ecx
0000328a	jle	0x000032a3
0000328c	movl	%ebx,%ecx
0000328e	subl	%eax,%ecx
00003290	movl	%ecx,0x04(%esp)
00003294	movl	%edx,(%esp)
00003297	movl	%edx,%esi
00003299	calll	CUtlMemory<char*, int>::Grow(int)
0000329e	movl	%esi,%edx
000032a0	movl	0x0c(%edx),%ecx
000032a3	incl	%ecx
000032a4	movl	%ecx,0x0c(%edx)
000032a7	movl	(%edx),%eax
000032a9	movl	%eax,0x10(%edx)
000032ac	subl	%edi,%ecx
000032ae	decl	%ecx
000032af	testl	%ecx,%ecx
000032b1	jle	0x000032d0
000032b3	shll	$0x02,%ecx
000032b6	movl	%ecx,0x08(%esp)
000032ba	leal	(%eax,%edi,4),%ecx
000032bd	movl	%ecx,0x04(%esp)
000032c1	leal	(%eax,%ebx,4),%eax
000032c4	movl	%eax,(%esp)
000032c7	movl	%edx,%ebx
000032c9	calll	_memmove
000032ce	movl	(%ebx),%eax
000032d0	movl	0xf0(%ebp),%ecx
000032d3	shll	$0x02,%edi
000032d6	addl	%eax,%edi
000032d8	je	0x000032dc
000032da	movl	%ecx,(%edi)
000032dc	addl	$0x1c,%esp
000032df	popl	%esi
000032e0	popl	%edi
000032e1	popl	%ebx
000032e2	popl	%ebp
000032e3	ret
000032e4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&):
000032f0	pushl	%ebp
000032f1	movl	%esp,%ebp
000032f3	subl	$0x18,%esp
000032f6	movl	0x0c(%ebp),%eax
000032f9	movl	%eax,0xfc(%ebp)
000032fc	movl	0x10(%ebp),%eax
000032ff	movl	%eax,0x0c(%esp)
00003303	leal	0xfc(%ebp),%eax
00003306	movl	%eax,0x04(%esp)
0000330a	movl	0x08(%ebp),%eax
0000330d	movl	%eax,(%esp)
00003310	movl	$0x00000001,0x08(%esp)
00003318	calll	V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
0000331d	addl	$0x18,%esp
00003320	popl	%ebp
00003321	ret
00003322	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_GetCurrentDirectory(char*, int):
00003330	pushl	%ebp
00003331	movl	%esp,%ebp
00003333	pushl	%esi
00003334	subl	$0x14,%esp
00003337	movl	0x0c(%ebp),%eax
0000333a	movl	%eax,0x04(%esp)
0000333e	movl	0x08(%ebp),%esi
00003341	movl	%esi,(%esp)
00003344	calll	_getcwd
00003349	cmpl	%esi,%eax
0000334b	sete	%al
0000334e	movzbl	%al,%eax
00003351	addl	$0x14,%esp
00003354	popl	%esi
00003355	popl	%ebp
00003356	ret
00003357	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_SetCurrentDirectory(char const*):
00003360	pushl	%ebp
00003361	movl	%esp,%ebp
00003363	subl	$0x08,%esp
00003366	movl	0x08(%ebp),%eax
00003369	movl	%eax,(%esp)
0000336c	calll	_chdir
00003371	testl	%eax,%eax
00003373	sete	%al
00003376	movzbl	%al,%eax
00003379	addl	$0x08,%esp
0000337c	popl	%ebp
0000337d	ret
0000337e	nop
V_StrSlice(char const*, int, int, char*, int):
00003380	pushl	%ebp
00003381	movl	%esp,%ebp
00003383	pushl	%ebx
00003384	pushl	%edi
00003385	pushl	%esi
00003386	subl	$0x0c,%esp
00003389	cmpl	_V_memset(char const*, int, void*, int, int),0x18(%ebp)
0000338d	je	0x00003424
00003393	movl	0x10(%ebp),%ebx
00003396	movl	0x0c(%ebp),%edi
00003399	movl	0x08(%ebp),%eax
0000339c	movl	%eax,(%esp)
0000339f	calll	_strlen
000033a4	movl	%eax,%esi
000033a6	testl	%edi,%edi
000033a8	jns	0x000033c7
000033aa	negl	%edi
000033ac	movl	%edi,%eax
000033ae	cltd
000033af	idivl	%esi
000033b1	movl	%esi,%edi
000033b3	subl	%edx,%edi
000033b5	testl	%ebx,%ebx
000033b7	movl	0x08(%ebp),%ecx
000033ba	jns	0x000033d3
000033bc	negl	%ebx
000033be	movl	%ebx,%eax
000033c0	cltd
000033c1	idivl	%esi
000033c3	subl	%edx,%esi
000033c5	jmp	0x000033e2
000033c7	cmpl	%edi,%esi
000033c9	jg	0x000033b5
000033cb	movl	0x14(%ebp),%eax
000033ce	movb	_V_memset(char const*, int, void*, int, int),(%eax)
000033d1	jmp	0x00003424
000033d3	cmpl	%ebx,%esi
000033d5	jl	0x000033db
000033d7	movl	%ebx,%esi
000033d9	jmp	0x000033e2
000033db	movl	%ebx,%eax
000033dd	cltd
000033de	idivl	%esi
000033e0	movl	%edx,%esi
000033e2	cmpl	%edi,%esi
000033e4	movl	0x14(%ebp),%ebx
000033e7	jg	0x000033ee
000033e9	movb	_V_memset(char const*, int, void*, int, int),(%ebx)
000033ec	jmp	0x00003424
000033ee	addl	%edi,%ecx
000033f0	subl	%edi,%esi
000033f2	movl	0x18(%ebp),%edi
000033f5	decl	%edi
000033f6	cmpl	%edi,%esi
000033f8	jg	0x00003410
000033fa	movl	%esi,0x08(%esp)
000033fe	movl	%ecx,0x04(%esp)
00003402	movl	%ebx,(%esp)
00003405	calll	_memcpy
0000340a	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%esi)
0000340e	jmp	0x00003424
00003410	movl	%edi,0x08(%esp)
00003414	movl	%ecx,0x04(%esp)
00003418	movl	%ebx,(%esp)
0000341b	calll	_memcpy
00003420	movb	_V_memset(char const*, int, void*, int, int),(%ebx,%edi)
00003424	addl	$0x0c,%esp
00003427	popl	%esi
00003428	popl	%edi
00003429	popl	%ebx
0000342a	popl	%ebp
0000342b	ret
0000342c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
V_StrLeft(char const*, int, char*, int):
00003430	pushl	%ebp
00003431	movl	%esp,%ebp
00003433	pushl	%ebx
00003434	pushl	%edi
00003435	pushl	%esi
00003436	subl	$0x0c,%esp
00003439	movl	0x14(%ebp),%ebx
0000343c	movl	0x0c(%ebp),%edi
0000343f	testl	%edi,%edi
00003441	jne	0x0000344f
00003443	testl	%ebx,%ebx
00003445	je	0x000034c0
00003447	movl	0x10(%ebp),%eax
0000344a	movb	_V_memset(char const*, int, void*, int, int),(%eax)
0000344d	jmp	0x000034c0
0000344f	testl	%ebx,%ebx
00003451	je	0x000034c0
00003453	movl	0x08(%ebp),%eax
00003456	movl	%eax,(%esp)
00003459	calll	_strlen
0000345e	movl	%eax,%esi
00003460	testl	%esi,%esi
00003462	jle	0x00003447
00003464	testl	%edi,%edi
00003466	jns	0x00003473
00003468	negl	%edi
0000346a	movl	%edi,%eax
0000346c	cltd
0000346d	idivl	%esi
0000346f	subl	%edx,%esi
00003471	jmp	0x00003482
00003473	cmpl	%edi,%esi
00003475	jl	0x0000347b
00003477	movl	%edi,%esi
00003479	jmp	0x00003482
0000347b	movl	%edi,%eax
0000347d	cltd
0000347e	idivl	%esi
00003480	movl	%edx,%esi
00003482	testl	%esi,%esi
00003484	movl	0x10(%ebp),%edi
00003487	movl	0x08(%ebp),%eax
0000348a	jg	0x00003491
0000348c	movb	_V_memset(char const*, int, void*, int, int),(%edi)
0000348f	jmp	0x000034c0
00003491	decl	%ebx
00003492	cmpl	%ebx,%esi
00003494	jg	0x000034ac
00003496	movl	%esi,0x08(%esp)
0000349a	movl	%eax,0x04(%esp)
0000349e	movl	%edi,(%esp)
000034a1	calll	_memcpy
000034a6	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
000034aa	jmp	0x000034c0
000034ac	movl	%ebx,0x08(%esp)
000034b0	movl	%eax,0x04(%esp)
000034b4	movl	%edi,(%esp)
000034b7	calll	_memcpy
000034bc	movb	_V_memset(char const*, int, void*, int, int),(%edi,%ebx)
000034c0	addl	$0x0c,%esp
000034c3	popl	%esi
000034c4	popl	%edi
000034c5	popl	%ebx
000034c6	popl	%ebp
000034c7	ret
000034c8	nopl	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_StrRight(char const*, int, char*, int):
000034d0	pushl	%ebp
000034d1	movl	%esp,%ebp
000034d3	pushl	%ebx
000034d4	pushl	%edi
000034d5	pushl	%esi
000034d6	subl	$0x0c,%esp
000034d9	movl	0x08(%ebp),%esi
000034dc	movl	%esi,(%esp)
000034df	calll	_strlen
000034e4	movl	%eax,%ebx
000034e6	movl	0x14(%ebp),%eax
000034e9	movl	0x10(%ebp),%ecx
000034ec	movl	0x0c(%ebp),%edi
000034ef	cmpl	%edi,%ebx
000034f1	jg	0x0000351d
000034f3	movl	%eax,0x08(%esp)
000034f7	movl	%esi,0x04(%esp)
000034fb	movl	%ecx,(%esp)
000034fe	movl	%eax,%edi
00003500	movl	%ecx,%esi
00003502	calll	_strncpy
00003507	movl	%esi,%ecx
00003509	movl	%edi,%eax
0000350b	testl	%eax,%eax
0000350d	jle	0x000035ad
00003513	movb	_V_memset(char const*, int, void*, int, int),0xff(%eax,%ecx)
00003518	jmp	0x000035ad
0000351d	testl	%eax,%eax
0000351f	je	0x000035ad
00003525	movl	%esi,(%esp)
00003528	calll	_strlen
0000352d	movl	%eax,%esi
0000352f	testl	%edi,%edi
00003531	jle	0x0000354e
00003533	movl	%edi,%eax
00003535	cltd
00003536	idivl	%esi
00003538	movl	%esi,%edi
0000353a	subl	%edx,%edi
0000353c	testl	%ebx,%ebx
0000353e	movl	0x14(%ebp),%ecx
00003541	jns	0x0000355c
00003543	negl	%ebx
00003545	movl	%ebx,%eax
00003547	cltd
00003548	idivl	%esi
0000354a	subl	%edx,%esi
0000354c	jmp	0x0000356b
0000354e	negl	%edi
00003550	cmpl	%edi,%esi
00003552	jg	0x0000353c
00003554	movl	0x10(%ebp),%eax
00003557	movb	_V_memset(char const*, int, void*, int, int),(%eax)
0000355a	jmp	0x000035ad
0000355c	cmpl	%ebx,%esi
0000355e	jl	0x00003564
00003560	movl	%ebx,%esi
00003562	jmp	0x0000356b
00003564	movl	%ebx,%eax
00003566	cltd
00003567	idivl	%esi
00003569	movl	%edx,%esi
0000356b	cmpl	%edi,%esi
0000356d	movl	0x08(%ebp),%eax
00003570	jle	0x00003554
00003572	addl	%edi,%eax
00003574	subl	%edi,%esi
00003576	decl	%ecx
00003577	cmpl	%ecx,%esi
00003579	jg	0x00003594
0000357b	movl	%esi,0x08(%esp)
0000357f	movl	%eax,0x04(%esp)
00003583	movl	0x10(%ebp),%edi
00003586	movl	%edi,(%esp)
00003589	calll	_memcpy
0000358e	movb	_V_memset(char const*, int, void*, int, int),(%edi,%esi)
00003592	jmp	0x000035ad
00003594	movl	%ecx,0x08(%esp)
00003598	movl	%eax,0x04(%esp)
0000359c	movl	0x10(%ebp),%esi
0000359f	movl	%esi,(%esp)
000035a2	movl	%ecx,%edi
000035a4	calll	_memcpy
000035a9	movb	_V_memset(char const*, int, void*, int, int),(%esi,%edi)
000035ad	addl	$0x0c,%esp
000035b0	popl	%esi
000035b1	popl	%edi
000035b2	popl	%ebx
000035b3	popl	%ebp
000035b4	ret
000035b5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_strtowcs(char const*, int, wchar_t*, int):
000035c0	pushl	%ebp
000035c1	movl	%esp,%ebp
000035c3	pushl	%esi
000035c4	subl	$0x14,%esp
000035c7	movl	0x14(%ebp),%eax
000035ca	shrl	$0x02,%eax
000035cd	movl	%eax,0x08(%esp)
000035d1	movl	0x08(%ebp),%eax
000035d4	movl	%eax,0x04(%esp)
000035d8	movl	0x10(%ebp),%esi
000035db	movl	%esi,(%esp)
000035de	calll	_mbstowcs
000035e3	testl	%eax,%eax
000035e5	jne	0x000035ed
000035e7	movl	_V_memset(char const*, int, void*, int, int),(%esi)
000035ed	addl	$0x14,%esp
000035f0	popl	%esi
000035f1	popl	%ebp
000035f2	ret
000035f3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_wcstostr(wchar_t const*, int, char*, int):
00003600	pushl	%ebp
00003601	movl	%esp,%ebp
00003603	pushl	%esi
00003604	subl	$0x14,%esp
00003607	movl	0x14(%ebp),%eax
0000360a	movl	%eax,0x08(%esp)
0000360e	movl	0x08(%ebp),%eax
00003611	movl	%eax,0x04(%esp)
00003615	movl	0x10(%ebp),%esi
00003618	movl	%esi,(%esp)
0000361b	calll	_wcstombs
00003620	testl	%eax,%eax
00003622	jne	0x00003627
00003624	movb	_V_memset(char const*, int, void*, int, int),(%esi)
00003627	addl	$0x14,%esp
0000362a	popl	%esi
0000362b	popl	%ebp
0000362c	ret
0000362d	nopl	(%eax)
V_AddBackSlashesToSpecialChars(char const*):
00003630	pushl	%ebp
00003631	movl	%esp,%ebp
00003633	pushl	%ebx
00003634	pushl	%edi
00003635	pushl	%esi
00003636	subl	$0x0c,%esp
00003639	calll	0x0000363e
0000363e	popl	%eax
0000363f	movl	%eax,0xec(%ebp)
00003642	movl	0x08(%ebp),%eax
00003645	movb	(%eax),%bl
00003647	testb	%bl,%bl
00003649	je	0x00003717
0000364f	movl	%eax,0xf0(%ebp)
00003652	leal	0x01(%eax),%eax
00003655	movl	$0x00000001,%edx
0000365a	movb	%bl,%cl
0000365c	nopl	_V_memset(char const*, int, void*, int, int)(%eax)
00003660	cmpb	$0x09,%cl
00003663	sete	%ch
00003666	movzbl	%ch,%esi
00003669	addl	%edx,%esi
0000366b	cmpb	$0x0a,%cl
0000366e	sete	%dl
00003671	movzbl	%dl,%edi
00003674	addl	%esi,%edi
00003676	cmpb	$0x0d,%cl
00003679	sete	%dl
0000367c	movzbl	%dl,%edx
0000367f	addl	%edi,%edx
00003681	cmpb	$0x22,%cl
00003684	sete	%ch
00003687	movzbl	%ch,%esi
0000368a	addl	%edx,%esi
0000368c	cmpb	$0x5c,%cl
0000368f	sete	%cl
00003692	movzbl	%cl,%ecx
00003695	leal	0x01(%ecx,%esi),%edx
00003699	movb	(%eax),%cl
0000369b	incl	%eax
0000369c	testb	%cl,%cl
0000369e	jne	0x00003660
000036a0	testl	%edx,%edx
000036a2	movl	$0xffffffff,%eax
000036a7	cmovnsl	%edx,%eax
000036aa	movl	%eax,(%esp)
000036ad	calll	operator new[](unsigned long)
000036b2	testb	%bl,%bl
000036b4	jne	0x000036ba
000036b6	movl	%eax,%ecx
000036b8	jmp	0x0000370c
000036ba	movl	0xec(%ebp),%ecx
000036bd	leal	s_BackSlashMap-0x363e+0x00000001(%ecx),%edx
000036c3	movl	%eax,%ecx
000036c5	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000036d0	movl	%edx,%edi
000036d2	jmp	0x000036e3
000036d4	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
000036e0	addl	$0x02,%edi
000036e3	movb	0xff(%edi),%bh
000036e6	testb	%bh,%bh
000036e8	je	0x000036fb
000036ea	cmpb	%bl,%bh
000036ec	jne	0x000036e0
000036ee	movb	$0x5c,(%ecx)
000036f1	movb	(%edi),%bl
000036f3	movb	%bl,0x01(%ecx)
000036f6	addl	$0x02,%ecx
000036f9	jmp	0x000036fe
000036fb	movb	%bl,(%ecx)
000036fd	incl	%ecx
000036fe	movl	0xf0(%ebp),%esi
00003701	movb	0x01(%esi),%bl
00003704	incl	%esi
00003705	movl	%esi,0xf0(%ebp)
00003708	testb	%bl,%bl
0000370a	jne	0x000036d0
0000370c	movb	_V_memset(char const*, int, void*, int, int),(%ecx)
0000370f	addl	$0x0c,%esp
00003712	popl	%esi
00003713	popl	%edi
00003714	popl	%ebx
00003715	popl	%ebp
00003716	ret
00003717	movl	$0x00000001,(%esp)
0000371e	calll	operator new[](unsigned long)
00003723	movl	%eax,%ecx
00003725	jmp	0x0000370c
00003727	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
V_qsort_s(void*, unsigned long, unsigned long, int (*)(void*, void const*, void const*), void*):
00003730	pushl	%ebp
00003731	movl	%esp,%ebp
00003733	subl	$0x18,%esp
00003736	movl	0x14(%ebp),%eax
00003739	movl	%eax,0x10(%esp)
0000373d	movl	0x18(%ebp),%eax
00003740	movl	%eax,0x0c(%esp)
00003744	movl	0x10(%ebp),%eax
00003747	movl	%eax,0x08(%esp)
0000374b	movl	0x0c(%ebp),%eax
0000374e	movl	%eax,0x04(%esp)
00003752	movl	0x08(%ebp),%eax
00003755	movl	%eax,(%esp)
00003758	calll	_qsort_r
0000375d	addl	$0x18,%esp
00003760	popl	%ebp
00003761	ret
00003762	nopw	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedDateAndTime(long, char*, int, char*, int):
00003770	pushl	%ebp
00003771	movl	%esp,%ebp
00003773	pushl	%ebx
00003774	pushl	%edi
00003775	pushl	%esi
00003776	subl	$0x7c,%esp
00003779	calll	0x0000377e
0000377e	popl	%esi
0000377f	movl	0x08(%ebp),%eax
00003782	movl	%eax,0xf0(%ebp)
00003785	testl	%eax,%eax
00003787	jg	0x000037a0
00003789	leal	0xf0(%ebp),%eax
0000378c	movl	%eax,(%esp)
0000378f	calll	_time
00003794	xorb	%dl,%dl
00003796	cmpl	_V_memset(char const*, int, void*, int, int),0xf0(%ebp)
0000379a	je	0x000038b8
000037a0	movl	0x0c(%ebp),%edi
000037a3	leal	_V_strlen(char const*, int, char const*)(%ebp),%eax
000037a6	movl	%eax,0x04(%esp)
000037aa	leal	0xf0(%ebp),%eax
000037ad	movl	%eax,(%esp)
000037b0	calll	_Plat_localtime
000037b5	movl	0x28(%eax),%ecx
000037b8	movl	%ecx,0xb8(%ebp)
000037bb	movsd	0x20(%eax),%xmm0
000037c0	movsd	%xmm0,0xb0(%ebp)
000037c5	movsd	0x18(%eax),%xmm0
000037ca	movsd	%xmm0,0xa8(%ebp)
000037cf	movsd	0x10(%eax),%xmm0
000037d4	movsd	%xmm0,0xa0(%ebp)
000037d9	movsd	(%eax),%xmm0
000037dd	movsd	0x08(%eax),%xmm1
000037e2	movsd	%xmm1,0x98(%ebp)
000037e7	movsd	%xmm0,_V_memcmp(char const*, int, void const*, void const*, int)(%ebp)
000037ec	testl	%edi,%edi
000037ee	je	0x0000381d
000037f0	movl	0x10(%ebp),%eax
000037f3	movb	_V_memset(char const*, int, void*, int, int),(%edi)
000037f6	leal	_V_memcmp(char const*, int, void const*, void const*, int)(%ebp),%ecx
000037f9	movl	%ecx,0x0c(%esp)
000037fd	leal	0x136c9-0x377e(%esi),%ecx
00003803	movl	%ecx,0x08(%esp)
00003807	movl	%eax,0x04(%esp)
0000380b	movl	%edi,(%esp)
0000380e	calll	_strftime$UNIX2003
00003813	xorb	%dl,%dl
00003815	testl	%eax,%eax
00003817	je	0x000038b8
0000381d	movl	0x14(%ebp),%eax
00003820	movb	$0x01,%dl
00003822	testl	%eax,%eax
00003824	je	0x000038b8
0000382a	movl	0x18(%ebp),%ebx
0000382d	movl	%eax,%ecx
0000382f	movb	_V_memset(char const*, int, void*, int, int),(%ecx)
00003832	leal	_V_memcmp(char const*, int, void const*, void const*, int)(%ebp),%eax
00003835	movl	%eax,0x0c(%esp)
00003839	leal	0x136d2-0x377e(%esi),%eax
0000383f	movl	%eax,0x08(%esp)
00003843	leal	0xfa(%ebx),%eax
00003846	movl	%eax,0x04(%esp)
0000384a	movl	%ecx,(%esp)
0000384d	calll	_strftime$UNIX2003
00003852	xorb	%dl,%dl
00003854	testl	%eax,%eax
00003856	je	0x000038b8
00003858	movl	0x98(%ebp),%edi
0000385b	movl	0x14(%ebp),%eax
0000385e	movl	%eax,(%esp)
00003861	calll	_strlen
00003866	cmpl	$0x0c,%edi
00003869	leal	0x04(%eax),%edx
0000386c	movl	$0x00000004,%ecx
00003871	jl	0x0000388e
00003873	cmpl	%ebx,%edx
00003875	jb	0x00003882
00003877	decl	%ebx
00003878	subl	%eax,%ebx
0000387a	movb	$0x01,%dl
0000387c	testl	%ebx,%ebx
0000387e	movl	%ebx,%ecx
00003880	jle	0x000038b8
00003882	movl	%ecx,0x08(%esp)
00003886	leal	0x136d9-0x377e(%esi),%eax
0000388c	jmp	0x000038a7
0000388e	cmpl	%ebx,%edx
00003890	jb	0x0000389d
00003892	decl	%ebx
00003893	subl	%eax,%ebx
00003895	movb	$0x01,%dl
00003897	testl	%ebx,%ebx
00003899	movl	%ebx,%ecx
0000389b	jle	0x000038b8
0000389d	movl	%ecx,0x08(%esp)
000038a1	leal	0x136de-0x377e(%esi),%eax
000038a7	movl	%eax,0x04(%esp)
000038ab	movl	0x14(%ebp),%eax
000038ae	movl	%eax,(%esp)
000038b1	calll	_strncat
000038b6	movb	$0x01,%dl
000038b8	movzbl	%dl,%eax
000038bb	addl	$0x7c,%esp
000038be	popl	%esi
000038bf	popl	%edi
000038c0	popl	%ebx
000038c1	popl	%ebp
000038c2	ret
000038c3	nopl	%cs:_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedDate(long, char*, int):
000038d0	pushl	%ebp
000038d1	movl	%esp,%ebp
000038d3	subl	$0x18,%esp
000038d6	movl	0x10(%ebp),%eax
000038d9	movl	%eax,0x08(%esp)
000038dd	movl	0x0c(%ebp),%eax
000038e0	movl	%eax,0x04(%esp)
000038e4	movl	0x08(%ebp),%eax
000038e7	movl	%eax,(%esp)
000038ea	movl	_V_memset(char const*, int, void*, int, int),0x10(%esp)
000038f2	movl	_V_memset(char const*, int, void*, int, int),0x0c(%esp)
000038fa	calll	BGetLocalFormattedDateAndTime(long, char*, int, char*, int)
000038ff	movzbl	%al,%eax
00003902	addl	$0x18,%esp
00003905	popl	%ebp
00003906	ret
00003907	nopw	_V_memset(char const*, int, void*, int, int)(%eax,%eax)
BGetLocalFormattedTime(long, char*, int):
00003910	pushl	%ebp
00003911	movl	%esp,%ebp
00003913	subl	$0x18,%esp
00003916	movl	0x10(%ebp),%eax
00003919	movl	%eax,0x10(%esp)
0000391d	movl	0x0c(%ebp),%eax
00003920	movl	%eax,0x0c(%esp)
00003924	movl	0x08(%ebp),%eax
00003927	movl	%eax,(%esp)
0000392a	movl	_V_memset(char const*, int, void*, int, int),0x08(%esp)
00003932	movl	_V_memset(char const*, int, void*, int, int),0x04(%esp)
0000393a	calll	BGetLocalFormattedDateAndTime(long, char*, int, char*, int)
0000393f	movzbl	%al,%eax
00003942	addl	$0x18,%esp
00003945	popl	%ebp
00003946	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(tier1.o):
(__TEXT,__text) section
ConnectTier1Libraries(void* (**)(char const*, int*), int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%esi
0000000f	movb	__ZL12s_bConnected.b-0xe(%esi),%al
00000015	testb	%al,%al
00000017	jne	0x00000086
00000019	movl	0x0c(%ebp),%edi
0000001c	movb	$0x01,__ZL12s_bConnected.b-0xe(%esi)
00000023	testl	%edi,%edi
00000025	jle	0x00000086
00000027	movl	0x08(%ebp),%ebx
0000002a	nopw	ConnectTier1Libraries(void* (**)(char const*, int*), int)(%eax,%eax)
00000030	cmpl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pCVar-0xe(%esi)
0000003a	jne	0x0000005b
0000003c	leal	0x11db-0xe(%esi),%eax
00000042	movl	%eax,(%esp)
00000045	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),0x04(%esp)
0000004d	call	(%ebx)
0000004f	movl	%eax,_g_pCVar-0xe(%esi)
00000055	movl	%eax,_cvar-0xe(%esi)
0000005b	cmpl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pProcessUtils-0xe(%esi)
00000065	jne	0x00000080
00000067	leal	0x11ea-0xe(%esi),%eax
0000006d	movl	%eax,(%esp)
00000070	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),0x04(%esp)
00000078	call	(%ebx)
0000007a	movl	%eax,_g_pProcessUtils-0xe(%esi)
00000080	addl	$0x04,%ebx
00000083	decl	%edi
00000084	jne	0x00000030
00000086	addl	$0x0c,%esp
00000089	popl	%esi
0000008a	popl	%edi
0000008b	popl	%ebx
0000008c	popl	%ebp
0000008d	ret
0000008e	nop
DisconnectTier1Libraries():
00000090	calll	0x00000095
00000095	popl	%eax
00000096	movb	__ZL12s_bConnected.b-0x95(%eax),%cl
0000009c	cmpb	$0x01,%cl
0000009f	jne	0x000000c6
000000a1	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_cvar-0x95(%eax)
000000ab	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pCVar-0x95(%eax)
000000b5	movl	ConnectTier1Libraries(void* (**)(char const*, int*), int),_g_pProcessUtils-0x95(%eax)
000000bf	movb	ConnectTier1Libraries(void* (**)(char const*, int*), int),__ZL12s_bConnected.b-0x95(%eax)
000000c6	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(tokenreader.o):
(__TEXT,__text) section
TokenReader::TokenReader():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%ebx
00000004	pushl	%edi
00000005	pushl	%esi
00000006	subl	$0x0c,%esp
00000009	calll	0x0000000e
0000000e	popl	%edi
0000000f	movl	0x08(%ebp),%esi
00000012	leal	0x0000031c(%esi),%ebx
00000018	movl	%ebx,(%esp)
0000001b	calll	std::ios_base::ios_base()
00000020	movl	0x122f8-0xe(%edi),%eax
00000026	addl	$0x08,%eax
00000029	movl	%eax,0x0000031c(%esi)
0000002f	movl	TokenReader::TokenReader(),0x0000038c(%esi)
00000039	movb	TokenReader::TokenReader(),0x00000390(%esi)
00000040	movb	TokenReader::TokenReader(),0x00000391(%esi)
00000047	movl	TokenReader::TokenReader(),0x00000398(%esi)
00000051	movl	TokenReader::TokenReader(),0x00000394(%esi)
0000005b	movl	TokenReader::TokenReader(),0x000003a0(%esi)
00000065	movl	TokenReader::TokenReader(),0x0000039c(%esi)
0000006f	leal	VTT for TokenReader-0xe+0x00000004(%edi),%eax
00000075	movl	%eax,0x04(%esp)
00000079	movl	%esi,(%esp)
0000007c	calll	std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()
00000081	leal	vtable for TokenReader-0xe+0x0000000c(%edi),%eax
00000087	movl	%eax,(%esi)
00000089	leal	vtable for TokenReader-0xe+0x00000020(%edi),%eax
0000008f	movl	%eax,0x0000031c(%esi)
00000095	movb	TokenReader::TokenReader(),0x00000214(%esi)
0000009c	movl	$0x00000001,0x0000020c(%esi)
000000a6	movl	TokenReader::TokenReader(),0x00000210(%esi)
000000b0	movb	TokenReader::TokenReader(),0x00000314(%esi)
000000b7	addl	$0x0c,%esp
000000ba	popl	%esi
000000bb	popl	%edi
000000bc	popl	%ebx
000000bd	popl	%ebp
000000be	ret
000000bf	movl	%eax,%esi
000000c1	movl	%ebx,(%esp)
000000c4	calll	std::ios_base::~ios_base()
000000c9	movl	%esi,(%esp)
000000cc	calll	__Unwind_Resume
000000d1	calll	std::terminate()
000000d6	nopw	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::TokenReader():
000000e0	pushl	%ebp
000000e1	movl	%esp,%ebp
000000e3	pushl	%edi
000000e4	pushl	%esi
000000e5	subl	$0x10,%esp
000000e8	movl	0x0c(%ebp),%edi
000000eb	leal	0x04(%edi),%eax
000000ee	movl	%eax,0x04(%esp)
000000f2	movl	0x08(%ebp),%esi
000000f5	movl	%esi,(%esp)
000000f8	calll	std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()
000000fd	movl	(%edi),%eax
000000ff	movl	%eax,(%esi)
00000101	movl	0xf4(%eax),%eax
00000104	movl	0x14(%edi),%ecx
00000107	movl	%ecx,(%esi,%eax)
0000010a	movb	TokenReader::TokenReader(),0x00000214(%esi)
00000111	movl	$0x00000001,0x0000020c(%esi)
0000011b	movl	TokenReader::TokenReader(),0x00000210(%esi)
00000125	movb	TokenReader::TokenReader(),0x00000314(%esi)
0000012c	addl	$0x10,%esp
0000012f	popl	%esi
00000130	popl	%edi
00000131	popl	%ebp
00000132	ret
00000133	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::Open(char const*):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	movl	0x0c(%ebp),%edi
0000014b	movl	%edi,0x04(%esp)
0000014f	movl	0x08(%ebp),%esi
00000152	leal	0x08(%esi),%eax
00000155	movl	%eax,(%esp)
00000158	movl	$0x0000000c,0x08(%esp)
00000160	calll	std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
00000165	movl	(%esi),%ecx
00000167	movl	0xf4(%ecx),%edx
0000016a	leal	(%esi,%edx),%ecx
0000016d	testl	%eax,%eax
0000016f	jne	0x00000181
00000171	movl	0x14(%edx,%esi),%eax
00000175	orl	$0x04,%eax
00000178	movl	%eax,0x04(%esp)
0000017c	movl	%ecx,(%esp)
0000017f	jmp	0x0000018c
00000181	movl	%ecx,(%esp)
00000184	movl	TokenReader::TokenReader(),0x04(%esp)
0000018c	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000191	movl	%edi,0x04(%esp)
00000195	leal	0x00000214(%esi),%eax
0000019b	movl	%eax,(%esp)
0000019e	movl	$0x00000080,0x08(%esp)
000001a6	calll	V_strncpy(char*, char const*, int)
000001ab	movl	$0x00000001,0x0000020c(%esi)
000001b5	movl	TokenReader::TokenReader(),0x00000210(%esi)
000001bf	movb	TokenReader::TokenReader(),0x00000314(%esi)
000001c6	addl	$0x54,%esi
000001c9	movl	%esi,(%esp)
000001cc	calll	std::__basic_file<char>::is_open() const
000001d1	movzbl	%al,%eax
000001d4	addl	$0x10,%esp
000001d7	popl	%esi
000001d8	popl	%edi
000001d9	popl	%ebp
000001da	ret
000001db	movl	%eax,(%esp)
000001de	calll	___cxa_call_unexpected
000001e3	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::Close():
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	pushl	%esi
000001f4	subl	$0x14,%esp
000001f7	movl	0x08(%ebp),%esi
000001fa	leal	0x08(%esi),%eax
000001fd	movl	%eax,(%esp)
00000200	calll	std::basic_filebuf<char, std::char_traits<char> >::close()
00000205	testl	%eax,%eax
00000207	jne	0x00000223
00000209	movl	(%esi),%eax
0000020b	movl	0xf4(%eax),%eax
0000020e	movl	0x14(%esi,%eax),%ecx
00000212	orl	$0x04,%ecx
00000215	movl	%ecx,0x04(%esp)
00000219	addl	%eax,%esi
0000021b	movl	%esi,(%esp)
0000021e	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000223	addl	$0x14,%esp
00000226	popl	%esi
00000227	popl	%ebp
00000228	ret
00000229	nopl	TokenReader::TokenReader()(%eax)
TokenReader::Error(char*, ...):
00000230	pushl	%ebp
00000231	movl	%esp,%ebp
00000233	pushl	%edi
00000234	pushl	%esi
00000235	subl	$0x20,%esp
00000238	calll	0x0000023d
0000023d	popl	%eax
0000023e	movl	0x08(%ebp),%edi
00000241	movl	0x0000020c(%edi),%ecx
00000247	movl	%ecx,0x10(%esp)
0000024b	leal	0x00000214(%edi),%ecx
00000251	movl	%ecx,0x0c(%esp)
00000255	leal	0x10948-0x23d(%eax),%ecx
0000025b	movl	%ecx,0x08(%esp)
0000025f	leal	TokenReader::Error(char*, ...)::szErrorBuf-0x23d(%eax),%esi
00000265	movl	%esi,(%esp)
00000268	movl	$0x00000100,0x04(%esp)
00000270	calll	V_snprintf(char*, int, char const*, ...)
00000275	movl	0x0c(%ebp),%eax
00000278	movl	%eax,0x04(%esp)
0000027c	movl	%esi,(%esp)
0000027f	movl	$0xffffffff,0x0c(%esp)
00000287	movl	$0x00000100,0x08(%esp)
0000028f	calll	V_strncat(char*, char const*, unsigned long, int)
00000294	incl	0x00000210(%edi)
0000029a	movl	%esi,%eax
0000029c	addl	$0x20,%esp
0000029f	popl	%esi
000002a0	popl	%edi
000002a1	popl	%ebp
000002a2	ret
000002a3	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::GetString(char*, int):
000002b0	pushl	%ebp
000002b1	movl	%esp,%ebp
000002b3	pushl	%ebx
000002b4	pushl	%edi
000002b5	pushl	%esi
000002b6	subl	$0x0000041c,%esp
000002bc	calll	0x000002c1
000002c1	popl	%eax
000002c2	movl	0x12300-0x2c1(%eax),%eax
000002c8	movl	%eax,0xfffffbec(%ebp)
000002ce	movl	(%eax),%eax
000002d0	movl	%eax,0xf0(%ebp)
000002d3	movl	$0xfffffffd,%eax
000002d8	movl	0x10(%ebp),%ebx
000002db	testl	%ebx,%ebx
000002dd	jle	0x00000402
000002e3	movl	0x0c(%ebp),%edi
000002e6	movl	0x08(%ebp),%esi
000002e9	jmp	0x00000339
000002eb	nopl	TokenReader::TokenReader()(%eax,%eax)
000002f0	movl	%esi,(%esp)
000002f3	calll	std::basic_istream<char, std::char_traits<char> >::peek()
000002f8	cmpl	$0x22,%eax
000002fb	jne	0x00000339
000002fd	movl	%esi,(%esp)
00000300	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000305	movl	%esi,(%esp)
00000308	calll	TokenReader::SkipWhiteSpace()
0000030d	cmpb	$0x01,%al
0000030f	jne	0x000003fa
00000315	movl	%esi,(%esp)
00000318	calll	std::basic_istream<char, std::char_traits<char> >::peek()
0000031d	cmpl	$0x22,%eax
00000320	jne	0x000003fa
00000326	jmp	0x00000331
00000328	testb	%cl,%cl
0000032a	je	0x000002f0
0000032c	jmp	0x000003e0
00000331	movl	%esi,(%esp)
00000334	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000339	leal	0xfffffbf0(%ebp),%eax
0000033f	movl	%eax,0x04(%esp)
00000343	movl	%esi,(%esp)
00000346	movl	$0x00000022,0x0c(%esp)
0000034e	movl	$0x00000400,0x08(%esp)
00000356	calll	std::basic_istream<char, std::char_traits<char> >::get(char*, int, char)
0000035b	movl	(%esi),%eax
0000035d	movl	0xf4(%eax),%ecx
00000360	movl	0x14(%esi,%ecx),%edx
00000364	movl	$0xffffffff,%eax
00000369	testb	$0x02,%dl
0000036c	jne	0x00000402
00000372	testb	$0x05,%dl
00000375	je	0x00000389
00000377	addl	%esi,%ecx
00000379	movl	%ecx,(%esp)
0000037c	movl	TokenReader::TokenReader(),0x04(%esp)
00000384	calll	std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
00000389	leal	0xfffffbf0(%ebp),%eax
0000038f	jmp	0x000003b3
00000391	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
000003a0	movb	%cl,(%edi)
000003a2	incl	%eax
000003a3	jmp	0x000003b1
000003a5	cmpb	$0x6e,0x01(%eax)
000003a9	jne	0x000003ae
000003ab	movb	$0x0a,(%edi)
000003ae	addl	$0x02,%eax
000003b1	decl	%ebx
000003b2	incl	%edi
000003b3	movb	(%eax),%cl
000003b5	testb	%cl,%cl
000003b7	setne	%dl
000003ba	cmpl	$0x02,%ebx
000003bd	jl	0x00000328
000003c3	cmpb	$0x01,%dl
000003c6	jne	0x00000328
000003cc	cmpb	$0x5c,%cl
000003cf	je	0x000003a5
000003d1	cmpb	$0x0d,%cl
000003d4	jne	0x000003a0
000003d6	movb	TokenReader::TokenReader(),(%edi)
000003d9	movl	$0xfffffffc,%eax
000003de	jmp	0x00000402
000003e0	movl	%esi,(%esp)
000003e3	movl	$0x00000022,0x08(%esp)
000003eb	movl	$0x00000400,0x04(%esp)
000003f3	calll	std::basic_istream<char, std::char_traits<char> >::ignore(int, int)
000003f8	jmp	0x000003d6
000003fa	movb	TokenReader::TokenReader(),(%edi)
000003fd	movl	$0x00000002,%eax
00000402	movl	0xfffffbec(%ebp),%ecx
00000408	movl	(%ecx),%ecx
0000040a	cmpl	0xf0(%ebp),%ecx
0000040d	jne	0x0000041a
0000040f	addl	$0x0000041c,%esp
00000415	popl	%esi
00000416	popl	%edi
00000417	popl	%ebx
00000418	popl	%ebp
00000419	ret
0000041a	calll	___stack_chk_fail
0000041f	nop
TokenReader::SkipWhiteSpace():
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%esi
00000425	subl	$0x10,%esp
00000428	xorb	%bl,%bl
0000042a	movl	0x08(%ebp),%esi
0000042d	jmp	0x0000043c
0000042f	nop
00000430	cmpb	$0x09,%al
00000432	je	0x0000043c
00000434	cmpb	$0x0a,%al
00000436	je	0x0000045e
00000438	cmpb	$0x0d,%al
0000043a	jne	0x0000046a
0000043c	movl	%esi,(%esp)
0000043f	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000444	cmpb	$0x2a,%al
00000446	jg	0x00000456
00000448	cmpb	$0x1f,%al
0000044a	jg	0x00000466
0000044c	cmpb	$0x08,%al
0000044e	jg	0x00000430
00000450	testb	%al,%al
00000452	je	0x0000043c
00000454	jmp	0x0000046a
00000456	cmpb	$0x2b,%al
00000458	jne	0x0000046a
0000045a	movb	$0x01,%bl
0000045c	jmp	0x0000043c
0000045e	incl	0x0000020c(%esi)
00000464	jmp	0x0000043c
00000466	cmpb	$0x20,%al
00000468	je	0x0000043c
0000046a	movl	(%esi),%ecx
0000046c	movl	0xf4(%ecx),%ecx
0000046f	testb	$0x02,0x14(%ecx,%esi)
00000474	jne	0x000004b6
00000476	cmpb	$0x2f,%al
00000478	jne	0x000004a7
0000047a	movl	%esi,(%esp)
0000047d	calll	std::basic_istream<char, std::char_traits<char> >::peek()
00000482	cmpl	$0x2f,%eax
00000485	jne	0x0000043c
00000487	movl	%esi,(%esp)
0000048a	movl	$0x0000000a,0x08(%esp)
00000492	movl	$0x00000400,0x04(%esp)
0000049a	calll	std::basic_istream<char, std::char_traits<char> >::ignore(int, int)
0000049f	incl	0x0000020c(%esi)
000004a5	jmp	0x0000043c
000004a7	movsbl	%al,%eax
000004aa	movl	%eax,0x04(%esp)
000004ae	movl	%esi,(%esp)
000004b1	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
000004b6	testb	%bl,%bl
000004b8	setne	%al
000004bb	movzbl	%al,%eax
000004be	addl	$0x10,%esp
000004c1	popl	%esi
000004c2	popl	%ebx
000004c3	popl	%ebp
000004c4	ret
000004c5	nopl	%cs:TokenReader::TokenReader()(%eax,%eax)
TokenReader::NextTokenDynamic(char**):
000004d0	pushl	%ebp
000004d1	movl	%esp,%ebp
000004d3	pushl	%ebx
000004d4	pushl	%edi
000004d5	pushl	%esi
000004d6	subl	$0x0000201c,%esp
000004dc	calll	0x000004e1
000004e1	popl	%eax
000004e2	movl	0x12300-0x4e1(%eax),%ebx
000004e8	movl	(%ebx),%eax
000004ea	movl	%eax,0xf0(%ebp)
000004ed	leal	0xffffdff0(%ebp),%esi
000004f3	movl	%esi,0x04(%esp)
000004f7	movl	0x08(%ebp),%eax
000004fa	movl	%eax,(%esp)
000004fd	movl	$0x00002000,0x08(%esp)
00000505	calll	TokenReader::NextToken(char*, int)
0000050a	movl	%eax,0xffffdfec(%ebp)
00000510	movl	%esi,(%esp)
00000513	calll	_strlen
00000518	movl	%eax,%edi
0000051a	incl	%edi
0000051b	testl	%edi,%edi
0000051d	movl	$0xffffffff,%eax
00000522	cmovnsl	%edi,%eax
00000525	movl	%eax,(%esp)
00000528	calll	operator new[](unsigned long)
0000052d	movl	0x0c(%ebp),%ecx
00000530	movl	%eax,(%ecx)
00000532	movl	%edi,0x08(%esp)
00000536	movl	%esi,0x04(%esp)
0000053a	movl	%eax,(%esp)
0000053d	calll	V_strncpy(char*, char const*, int)
00000542	movl	(%ebx),%eax
00000544	cmpl	0xf0(%ebp),%eax
00000547	jne	0x0000055a
00000549	movl	0xffffdfec(%ebp),%eax
0000054f	addl	$0x0000201c,%esp
00000555	popl	%esi
00000556	popl	%edi
00000557	popl	%ebx
00000558	popl	%ebp
00000559	ret
0000055a	calll	___stack_chk_fail
0000055f	nop
TokenReader::NextToken(char*, int):
00000560	pushl	%ebp
00000561	movl	%esp,%ebp
00000563	pushl	%ebx
00000564	pushl	%edi
00000565	pushl	%esi
00000566	subl	$0x1c,%esp
00000569	calll	0x0000056e
0000056e	popl	%eax
0000056f	movl	%eax,0xf0(%ebp)
00000572	movl	0x08(%ebp),%esi
00000575	leal	0x54(%esi),%eax
00000578	movl	%eax,(%esp)
0000057b	calll	std::__basic_file<char>::is_open() const
00000580	movb	%al,%cl
00000582	movl	$0xffffffff,%eax
00000587	cmpb	$0x01,%cl
0000058a	jne	0x00000794
00000590	movl	0x10(%ebp),%eax
00000593	movl	0x0c(%ebp),%edi
00000596	testb	$0x01,0x00000314(%esi)
0000059d	je	0x000005c7
0000059f	movb	TokenReader::TokenReader(),0x00000314(%esi)
000005a6	movl	%eax,0x08(%esp)
000005aa	leal	0x00000294(%esi),%eax
000005b0	movl	%eax,0x04(%esp)
000005b4	movl	%edi,(%esp)
000005b7	calll	V_strncpy(char*, char const*, int)
000005bc	movl	0x00000318(%esi),%eax
000005c2	jmp	0x00000794
000005c7	movl	%esi,(%esp)
000005ca	calll	TokenReader::SkipWhiteSpace()
000005cf	movl	(%esi),%eax
000005d1	movl	0xf4(%eax),%ecx
000005d4	movl	$0xffffffff,%eax
000005d9	testb	$0x07,0x14(%ecx,%esi)
000005de	jne	0x00000794
000005e4	movl	0x08(%ebp),%eax
000005e7	movl	%eax,(%esp)
000005ea	calll	std::basic_istream<char, std::char_traits<char> >::get()
000005ef	movb	%al,%bl
000005f1	movsbl	%bl,%eax
000005f4	cmpl	$0x7a,%eax
000005f7	jg	0x00000612
000005f9	cmpl	$0x5a,%eax
000005fc	jg	0x00000629
000005fe	leal	0xdf(%eax),%ecx
00000601	cmpl	$0x1f,%ecx
00000604	ja	0x00000631
00000606	movl	$0x92002fa9,%edx
0000060b	btl	%ecx,%edx
0000060e	jb	0x0000061c
00000610	jmp	0x00000631
00000612	cmpl	$0x7b,%eax
00000615	je	0x0000061c
00000617	cmpl	$0x7d,%eax
0000061a	jne	0x00000631
0000061c	movb	%bl,(%edi)
0000061e	movb	TokenReader::TokenReader(),0x01(%edi)
00000622	xorl	%eax,%eax
00000624	jmp	0x00000794
00000629	leal	0xa5(%eax),%ecx
0000062c	cmpl	$0x03,%ecx
0000062f	jb	0x0000061c
00000631	cmpb	$0x22,%bl
00000634	je	0x000007a4
0000063a	xorb	%cl,%cl
0000063c	testb	%bl,%bl
0000063e	js	0x00000653
00000640	movl	0xf0(%ebp),%ecx
00000643	movl	0x122f4-0x56e(%ecx),%ecx
00000649	movb	0x35(%ecx,%eax,4),%cl
0000064d	andb	$0x04,%cl
00000650	shrb	$0x02,%cl
00000653	movl	$0x00000001,%eax
00000658	subl	%edi,%eax
0000065a	movl	%eax,0xec(%ebp)
0000065d	testb	%cl,%cl
0000065f	jne	0x00000670
00000661	cmpb	$0x2d,%bl
00000664	jne	0x0000072b
0000066a	nopw	TokenReader::TokenReader()(%eax,%eax)
00000670	movl	0xec(%ebp),%eax
00000673	leal	(%eax,%edi),%eax
00000676	cmpl	0x10(%ebp),%eax
00000679	jge	0x0000067e
0000067b	movb	%bl,(%edi)
0000067d	incl	%edi
0000067e	movl	0x08(%ebp),%eax
00000681	movl	%eax,(%esp)
00000684	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000689	movb	%al,%bl
0000068b	movl	$0xfffffffd,%eax
00000690	cmpb	$0x2d,%bl
00000693	je	0x00000794
00000699	movsbl	%bl,%esi
0000069c	testb	%bl,%bl
0000069e	js	0x000006be
000006a0	movl	0xf0(%ebp),%eax
000006a3	movl	0x122f4-0x56e(%eax),%eax
000006a9	movl	0x34(%eax,%esi,4),%ecx
000006ad	testb	$0x04,%ch
000006b0	jne	0x00000670
000006b2	testb	%bl,%bl
000006b4	js	0x000006be
000006b6	andl	$0x00000100,%ecx
000006bc	jmp	0x000006d0
000006be	movl	%esi,(%esp)
000006c1	movl	$0x00000100,0x04(%esp)
000006c9	calll	___maskrune
000006ce	movl	%eax,%ecx
000006d0	movl	$0xfffffffd,%eax
000006d5	testl	%ecx,%ecx
000006d7	jne	0x00000794
000006dd	cmpb	$0x5f,%bl
000006e0	je	0x00000794
000006e6	movl	%esi,0x04(%esp)
000006ea	movl	0x08(%ebp),%eax
000006ed	movl	%eax,(%esp)
000006f0	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
000006f5	movb	TokenReader::TokenReader(),(%edi)
000006f8	movl	$0x00000001,%eax
000006fd	jmp	0x00000794
00000702	nopw	%cs:TokenReader::TokenReader()(%eax,%eax)
00000710	movl	0xec(%ebp),%eax
00000713	leal	(%eax,%edi),%eax
00000716	cmpl	0x10(%ebp),%eax
00000719	jge	0x0000071e
0000071b	movb	%bl,(%edi)
0000071d	incl	%edi
0000071e	movl	0x08(%ebp),%eax
00000721	movl	%eax,(%esp)
00000724	calll	std::basic_istream<char, std::char_traits<char> >::get()
00000729	movb	%al,%bl
0000072b	movsbl	%bl,%esi
0000072e	testb	%bl,%bl
00000730	js	0x00000748
00000732	movl	0xf0(%ebp),%eax
00000735	movl	0x122f4-0x56e(%eax),%eax
0000073b	movl	0x34(%eax,%esi,4),%eax
0000073f	movl	$0x00000100,%ecx
00000744	andl	%ecx,%eax
00000746	jmp	0x00000758
00000748	movl	%esi,(%esp)
0000074b	movl	$0x00000100,0x04(%esp)
00000753	calll	___maskrune
00000758	testl	%eax,%eax
0000075a	jne	0x00000710
0000075c	xorb	%al,%al
0000075e	testb	%bl,%bl
00000760	js	0x00000774
00000762	movl	0xf0(%ebp),%eax
00000765	movl	0x122f4-0x56e(%eax),%eax
0000076b	movb	0x35(%eax,%esi,4),%al
0000076f	andb	$0x04,%al
00000771	shrb	$0x02,%al
00000774	testb	%al,%al
00000776	jne	0x00000710
00000778	cmpb	$0x5f,%bl
0000077b	je	0x00000710
0000077d	movl	%esi,0x04(%esp)
00000781	movl	0x08(%ebp),%eax
00000784	movl	%eax,(%esp)
00000787	calll	std::basic_istream<char, std::char_traits<char> >::putback(char)
0000078c	movb	TokenReader::TokenReader(),(%edi)
0000078f	movl	$0x00000003,%eax
00000794	addl	$0x1c,%esp
00000797	popl	%esi
00000798	popl	%edi
00000799	popl	%ebx
0000079a	popl	%ebp
0000079b	ret
0000079c	movl	%eax,(%esp)
0000079f	calll	___cxa_call_unexpected
000007a4	addl	$0x1c,%esp
000007a7	popl	%esi
000007a8	popl	%edi
000007a9	popl	%ebx
000007aa	popl	%ebp
000007ab	jmp	TokenReader::GetString(char*, int)
TokenReader::IgnoreTill(trtoken_t, char const*):
000007b0	pushl	%ebp
000007b1	movl	%esp,%ebp
000007b3	pushl	%ebx
000007b4	pushl	%edi
000007b5	pushl	%esi
000007b6	subl	$0x0000041c,%esp
000007bc	calll	0x000007c1
000007c1	popl	%eax
000007c2	movl	0x12300-0x7c1(%eax),%eax
000007c8	movl	%eax,0xfffffbec(%ebp)
000007ce	movl	(%eax),%eax
000007d0	movl	%eax,0xf0(%ebp)
000007d3	movl	0x0c(%ebp),%esi
000007d6	movl	0x08(%ebp),%edi
000007d9	leal	0xfffffbf0(%ebp),%ebx
000007df	nop
000007e0	movl	%ebx,0x04(%esp)
000007e4	movl	%edi,(%esp)
000007e7	movl	$0x00000400,0x08(%esp)
000007ef	calll	TokenReader::NextToken(char*, int)
000007f4	cmpl	$0xff,%eax
000007f7	je	0x0000083a
000007f9	cmpl	%esi,%eax
000007fb	jne	0x000007e0
000007fd	movl	%ebx,0x04(%esp)
00000801	movl	0x10(%ebp),%eax
00000804	movl	%eax,(%esp)
00000807	calll	_strcasecmp
0000080c	testl	%eax,%eax
0000080e	jne	0x000007e0
00000810	movl	%esi,0x00000318(%edi)
00000816	movl	0x10(%ebp),%eax
00000819	movl	%eax,0x04(%esp)
0000081d	leal	0x00000294(%edi),%eax
00000823	movl	%eax,(%esp)
00000826	movl	$0x00000080,0x08(%esp)
0000082e	calll	V_strncpy(char*, char const*, int)
00000833	movb	$0x01,0x00000314(%edi)
0000083a	movl	0xfffffbec(%ebp),%eax
00000840	movl	(%eax),%eax
00000842	cmpl	0xf0(%ebp),%eax
00000845	jne	0x00000852
00000847	addl	$0x0000041c,%esp
0000084d	popl	%esi
0000084e	popl	%edi
0000084f	popl	%ebx
00000850	popl	%ebp
00000851	ret
00000852	calll	___stack_chk_fail
00000857	nopw	TokenReader::TokenReader()(%eax,%eax)
TokenReader::Stuff(trtoken_t, char const*):
00000860	pushl	%ebp
00000861	movl	%esp,%ebp
00000863	pushl	%esi
00000864	subl	$0x14,%esp
00000867	movl	0x0c(%ebp),%eax
0000086a	movl	0x08(%ebp),%esi
0000086d	movl	%eax,0x00000318(%esi)
00000873	movl	0x10(%ebp),%eax
00000876	movl	%eax,0x04(%esp)
0000087a	leal	0x00000294(%esi),%eax
00000880	movl	%eax,(%esp)
00000883	movl	$0x00000080,0x08(%esp)
0000088b	calll	V_strncpy(char*, char const*, int)
00000890	movb	$0x01,0x00000314(%esi)
00000897	addl	$0x14,%esp
0000089a	popl	%esi
0000089b	popl	%ebp
0000089c	ret
0000089d	nopl	(%eax)
TokenReader::Expecting(trtoken_t, char const*):
000008a0	pushl	%ebp
000008a1	movl	%esp,%ebp
000008a3	pushl	%edi
000008a4	pushl	%esi
000008a5	subl	$0x00000410,%esp
000008ab	calll	0x000008b0
000008b0	popl	%eax
000008b1	movl	0x12300-0x8b0(%eax),%esi
000008b7	movl	(%esi),%eax
000008b9	movl	%eax,0xf4(%ebp)
000008bc	leal	0xfffffbf4(%ebp),%edi
000008c2	movl	%edi,0x04(%esp)
000008c6	movl	0x08(%ebp),%eax
000008c9	movl	%eax,(%esp)
000008cc	movl	$0x00000400,0x08(%esp)
000008d4	calll	TokenReader::NextToken(char*, int)
000008d9	xorb	%cl,%cl
000008db	cmpl	0x0c(%ebp),%eax
000008de	jne	0x000008f7
000008e0	movl	0x10(%ebp),%eax
000008e3	movl	%edi,0x04(%esp)
000008e7	movl	%eax,(%esp)
000008ea	calll	_strcasecmp
000008ef	xorb	%cl,%cl
000008f1	testl	%eax,%eax
000008f3	jne	0x000008f7
000008f5	movb	$0x01,%cl
000008f7	movl	(%esi),%eax
000008f9	cmpl	0xf4(%ebp),%eax
000008fc	jne	0x0000090b
000008fe	movzbl	%cl,%eax
00000901	addl	$0x00000410,%esp
00000907	popl	%esi
00000908	popl	%edi
00000909	popl	%ebp
0000090a	ret
0000090b	calll	___stack_chk_fail
TokenReader::PeekTokenType(char*, int):
00000910	pushl	%ebp
00000911	movl	%esp,%ebp
00000913	pushl	%esi
00000914	subl	$0x14,%esp
00000917	movl	0x08(%ebp),%esi
0000091a	testb	$0x01,0x00000314(%esi)
00000921	jne	0x0000094a
00000923	movl	%esi,(%esp)
00000926	leal	0x00000294(%esi),%eax
0000092c	movl	%eax,0x04(%esp)
00000930	movl	$0x00000080,0x08(%esp)
00000938	calll	TokenReader::NextToken(char*, int)
0000093d	movl	%eax,0x00000318(%esi)
00000943	movb	$0x01,0x00000314(%esi)
0000094a	movl	0x0c(%ebp),%eax
0000094d	testl	%eax,%eax
0000094f	je	0x0000096a
00000951	movl	0x10(%ebp),%ecx
00000954	movl	%ecx,0x08(%esp)
00000958	leal	0x00000294(%esi),%ecx
0000095e	movl	%ecx,0x04(%esp)
00000962	movl	%eax,(%esp)
00000965	calll	V_strncpy(char*, char const*, int)
0000096a	movl	0x00000318(%esi),%eax
00000970	addl	$0x14,%esp
00000973	popl	%esi
00000974	popl	%ebp
00000975	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(uniqueid.o):
(__TEXT,__text) section
CreateUniqueId(UniqueId_t*):
00000000	movl	0x04(%esp),%eax
00000004	movl	CreateUniqueId(UniqueId_t*),0x04(%eax)
0000000b	movl	CreateUniqueId(UniqueId_t*),(%eax)
00000011	movl	CreateUniqueId(UniqueId_t*),0x0c(%eax)
00000018	movl	CreateUniqueId(UniqueId_t*),0x08(%eax)
0000001f	ret
UniqueIdFromString(UniqueId_t*, char const*, int):
00000020	pushl	%ebp
00000021	movl	%esp,%ebp
00000023	pushl	%ebx
00000024	pushl	%edi
00000025	pushl	%esi
00000026	subl	$0x1c,%esp
00000029	calll	0x0000002e
0000002e	popl	%eax
0000002f	movl	%eax,0xe8(%ebp)
00000032	movl	0x58c2-0x2e(%eax),%eax
00000038	movl	%eax,0xe4(%ebp)
0000003b	movl	(%eax),%eax
0000003d	movl	%eax,0xf0(%ebp)
00000040	movl	0x10(%ebp),%ebx
00000043	movl	0x0c(%ebp),%esi
00000046	testl	%ebx,%ebx
00000048	jne	0x0000005a
0000004a	subl	$0x10,%esp
0000004d	movl	%esi,(%esp)
00000050	calll	_strlen
00000055	addl	$0x10,%esp
00000058	movl	%eax,%ebx
0000005a	leal	0x10(%ebx),%eax
0000005d	andl	$0xf0,%eax
00000060	movl	%esp,%edi
00000062	subl	%eax,%edi
00000064	movl	%edi,%esp
00000066	subl	$0x10,%esp
00000069	leal	0x01(%ebx),%eax
0000006c	movl	%eax,0x08(%esp)
00000070	movl	%esi,0x04(%esp)
00000074	movl	%edi,(%esp)
00000077	calll	V_strncpy(char*, char const*, int)
0000007c	addl	$0x10,%esp
0000007f	nop
00000080	movl	%ebx,%esi
00000082	testl	%esi,%esi
00000084	jle	0x000000c2
00000086	leal	0xff(%esi),%ebx
00000089	movsbl	0xff(%edi,%esi),%eax
0000008e	testl	%eax,%eax
00000090	js	0x000000a8
00000092	movl	0xe8(%ebp),%ecx
00000095	movl	0x58be-0x2e(%ecx),%ecx
0000009b	movl	0x34(%ecx,%eax,4),%eax
0000009f	movl	$0x00004000,%ecx
000000a4	andl	%ecx,%eax
000000a6	jmp	0x000000be
000000a8	subl	$0x10,%esp
000000ab	movl	%eax,(%esp)
000000ae	movl	$0x00004000,0x04(%esp)
000000b6	calll	___maskrune
000000bb	addl	$0x10,%esp
000000be	testl	%eax,%eax
000000c0	jne	0x00000080
000000c2	movb	CreateUniqueId(UniqueId_t*),(%edi,%esi)
000000c6	decl	%esi
000000c7	movl	$0x00004000,%ebx
000000cc	jmp	0x000000d1
000000ce	nop
000000d0	incl	%edi
000000d1	movsbl	(%edi),%eax
000000d4	testl	%eax,%eax
000000d6	je	0x00000107
000000d8	testb	%al,%al
000000da	js	0x000000ed
000000dc	movl	0xe8(%ebp),%ecx
000000df	movl	0x58be-0x2e(%ecx),%ecx
000000e5	movl	0x34(%ecx,%eax,4),%eax
000000e9	andl	%ebx,%eax
000000eb	jmp	0x00000103
000000ed	subl	$0x10,%esp
000000f0	movl	%eax,(%esp)
000000f3	movl	$0x00004000,0x04(%esp)
000000fb	calll	___maskrune
00000100	addl	$0x10,%esp
00000103	testl	%eax,%eax
00000105	jne	0x000000d0
00000107	movl	0x08(%ebp),%ebx
0000010a	movl	CreateUniqueId(UniqueId_t*),0x04(%ebx)
00000111	movl	CreateUniqueId(UniqueId_t*),(%ebx)
00000117	movl	CreateUniqueId(UniqueId_t*),0x0c(%ebx)
0000011e	movl	CreateUniqueId(UniqueId_t*),0x08(%ebx)
00000125	testl	%esi,%esi
00000127	jle	0x00000166
00000129	subl	$0x10,%esp
0000012c	leal	0xec(%ebp),%edi
0000012f	movl	%edi,(%esp)
00000132	calll	CRC32_Init(unsigned int*)
00000137	addl	$0x10,%esp
0000013a	subl	$0x10,%esp
0000013d	movl	%esi,0x08(%esp)
00000141	movl	0x0c(%ebp),%eax
00000144	movl	%eax,0x04(%esp)
00000148	movl	%edi,(%esp)
0000014b	calll	CRC32_ProcessBuffer(unsigned int*, void const*, int)
00000150	addl	$0x10,%esp
00000153	subl	$0x10,%esp
00000156	movl	%edi,(%esp)
00000159	calll	CRC32_Final(unsigned int*)
0000015e	addl	$0x10,%esp
00000161	movl	0xec(%ebp),%eax
00000164	movl	%eax,(%ebx)
00000166	movl	0xe4(%ebp),%eax
00000169	movl	(%eax),%eax
0000016b	cmpl	0xf0(%ebp),%eax
0000016e	jne	0x0000017d
00000170	movl	$0x00000001,%eax
00000175	leal	0xf4(%ebp),%esp
00000178	popl	%esi
00000179	popl	%edi
0000017a	popl	%ebx
0000017b	popl	%ebp
0000017c	ret
0000017d	calll	___stack_chk_fail
00000182	nopw	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
InvalidateUniqueId(UniqueId_t*):
00000190	movl	0x04(%esp),%eax
00000194	movl	CreateUniqueId(UniqueId_t*),0x04(%eax)
0000019b	movl	CreateUniqueId(UniqueId_t*),(%eax)
000001a1	movl	CreateUniqueId(UniqueId_t*),0x0c(%eax)
000001a8	movl	CreateUniqueId(UniqueId_t*),0x08(%eax)
000001af	ret
IsUniqueIdValid(UniqueId_t const&):
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	subl	$0x28,%esp
000001b6	xorps	%xmm0,%xmm0
000001b9	movaps	%xmm0,0xe8(%ebp)
000001bd	movl	0x08(%ebp),%eax
000001c0	movl	%eax,0x04(%esp)
000001c4	leal	0xe8(%ebp),%eax
000001c7	movl	%eax,(%esp)
000001ca	movl	$0x00000010,0x08(%esp)
000001d2	calll	_memcmp
000001d7	testl	%eax,%eax
000001d9	setne	%al
000001dc	movzbl	%al,%eax
000001df	addl	$0x28,%esp
000001e2	popl	%ebp
000001e3	ret
000001e4	nopw	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
IsUniqueIdEqual(UniqueId_t const&, UniqueId_t const&):
000001f0	pushl	%ebp
000001f1	movl	%esp,%ebp
000001f3	subl	$0x18,%esp
000001f6	movl	0x0c(%ebp),%eax
000001f9	movl	%eax,0x04(%esp)
000001fd	movl	0x08(%ebp),%eax
00000200	movl	%eax,(%esp)
00000203	movl	$0x00000010,0x08(%esp)
0000020b	calll	_memcmp
00000210	testl	%eax,%eax
00000212	sete	%al
00000215	movzbl	%al,%eax
00000218	addl	$0x18,%esp
0000021b	popl	%ebp
0000021c	ret
0000021d	nopl	(%eax)
UniqueIdToString(UniqueId_t const&, char*, int):
00000220	movl	0x08(%esp),%eax
00000224	movb	CreateUniqueId(UniqueId_t*),(%eax)
00000227	ret
00000228	nopl	CreateUniqueId(UniqueId_t*)(%eax,%eax)
CopyUniqueId(UniqueId_t const&, UniqueId_t*):
00000230	movl	0x04(%esp),%eax
00000234	movsd	(%eax),%xmm0
00000238	movsd	0x08(%eax),%xmm1
0000023d	movl	0x08(%esp),%eax
00000241	movsd	%xmm1,0x08(%eax)
00000246	movsd	%xmm0,(%eax)
0000024a	ret
0000024b	nopl	CreateUniqueId(UniqueId_t*)(%eax,%eax)
Serialize(CUtlBuffer&, UniqueId_t const&):
00000250	xorl	%eax,%eax
00000252	ret
00000253	nopl	%cs:CreateUniqueId(UniqueId_t*)(%eax,%eax)
Unserialize(CUtlBuffer&, UniqueId_t&):
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x0c,%esp
00000269	calll	0x0000026e
0000026e	popl	%eax
0000026f	movl	0x58c2-0x26e(%eax),%eax
00000275	movl	%eax,0xec(%ebp)
00000278	movl	(%eax),%eax
0000027a	movl	%eax,0xf0(%ebp)
0000027d	movl	0x0c(%ebp),%eax
00000280	movl	0x08(%ebp),%ebx
00000283	testb	$0x01,0x15(%ebx)
00000287	je	0x000002d3
00000289	subl	$0x10,%esp
0000028c	movl	%ebx,(%esp)
0000028f	calll	CUtlBuffer::PeekStringLength()
00000294	addl	$0x10,%esp
00000297	movl	%eax,%esi
00000299	leal	0x0f(%esi),%eax
0000029c	andl	$0xf0,%eax
0000029f	movl	%esp,%edi
000002a1	subl	%eax,%edi
000002a3	movl	%edi,%esp
000002a5	subl	$0x10,%esp
000002a8	movl	%esi,0x08(%esp)
000002ac	movl	%edi,0x04(%esp)
000002b0	movl	%ebx,(%esp)
000002b3	calll	CUtlBuffer::GetString(char*, int)
000002b8	addl	$0x10,%esp
000002bb	subl	$0x10,%esp
000002be	movl	%esi,0x08(%esp)
000002c2	movl	%edi,0x04(%esp)
000002c6	movl	0x0c(%ebp),%eax
000002c9	movl	%eax,(%esp)
000002cc	calll	UniqueIdFromString(UniqueId_t*, char const*, int)
000002d1	jmp	0x000002ea
000002d3	subl	$0x10,%esp
000002d6	movl	%eax,0x04(%esp)
000002da	movl	%ebx,(%esp)
000002dd	movl	$0x00000010,0x08(%esp)
000002e5	calll	CUtlBuffer::Get(void*, int)
000002ea	addl	$0x10,%esp
000002ed	cmpb	CreateUniqueId(UniqueId_t*),0x14(%ebx)
000002f1	sete	%al
000002f4	movl	0xec(%ebp),%ecx
000002f7	movl	(%ecx),%ecx
000002f9	cmpl	0xf0(%ebp),%ecx
000002fc	jne	0x00000309
000002fe	movzbl	%al,%eax
00000301	leal	0xf4(%ebp),%esp
00000304	popl	%esi
00000305	popl	%edi
00000306	popl	%ebx
00000307	popl	%ebp
00000308	ret
00000309	calll	___stack_chk_fail
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(utlbuffer.o):
(__TEXT,__text) section
CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000000	jmp	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
00000005	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
GetCStringCharConversion():
00000010	calll	0x00000015
00000015	popl	%eax
00000016	leal	_s_StringCharConversion-0x15(%eax),%eax
0000001c	ret
0000001d	nopl	(%eax)
GetNoEscCharConversion():
00000020	calll	0x00000025
00000025	popl	%eax
00000026	leal	_s_NoEscConversion-0x25(%eax),%eax
0000002c	ret
0000002d	nopl	(%eax)
CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000030	pushl	%ebp
00000031	movl	%esp,%ebp
00000033	pushl	%ebx
00000034	pushl	%edi
00000035	pushl	%esi
00000036	subl	$0x1c,%esp
00000039	calll	0x0000003e
0000003e	popl	%edi
0000003f	leal	vtable for CUtlCharConversion-0x3e+0x00000008(%edi),%eax
00000045	movl	0x08(%ebp),%ebx
00000048	movl	%eax,(%ebx)
0000004a	movb	0x0c(%ebp),%al
0000004d	movb	%al,0x04(%ebx)
00000050	movl	GetCStringCharConversion()(%ebp),%eax
00000053	movl	%eax,0x08(%ebx)
00000056	movl	0x14(%ebp),%esi
00000059	movl	%esi,GetCStringCharConversion()(%ebx)
0000005c	movl	%eax,(%esp)
0000005f	calll	_strlen
00000064	movl	%eax,0x0c(%ebx)
00000067	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
0000006e	leal	0x00000118(%ebx),%eax
00000074	movl	%eax,(%esp)
00000077	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
0000007f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000087	calll	_memset
0000008c	testl	%esi,%esi
0000008e	jle	0x0000013d
00000094	movl	%edi,0xec(%ebp)
00000097	movl	0x18(%ebp),%ecx
0000009a	movl	%esi,%eax
0000009c	leal	0x04(%ecx),%esi
0000009f	leal	0x18(%ebx),%edi
000000a2	movl	%ebx,%ecx
000000a4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000000b0	movl	%eax,0xf0(%ebp)
000000b3	movzbl	0xfc(%esi),%ebx
000000b7	movb	%bl,(%edi)
000000b9	movl	(%esi),%eax
000000bb	movl	%eax,0x0000011c(%ecx,%ebx,8)
000000c2	movl	%eax,(%esp)
000000c5	calll	_strlen
000000ca	movl	0x08(%ebp),%ecx
000000cd	movl	%eax,0x00000118(%ecx,%ebx,8)
000000d4	cmpl	0x14(%ecx),%eax
000000d7	jle	0x000000dc
000000d9	movl	%eax,0x14(%ecx)
000000dc	addl	$0x08,%esi
000000df	incl	%edi
000000e0	movl	0xf0(%ebp),%eax
000000e3	decl	%eax
000000e4	jne	0x000000b0
000000e6	movl	0xec(%ebp),%eax
000000e9	leal	vtable for CUtlCStringConversion-0x3e+0x00000008(%eax),%eax
000000ef	movl	%eax,(%ecx)
000000f1	leal	0x00000918(%ecx),%eax
000000f7	movl	%eax,(%esp)
000000fa	movl	$0x00000100,0x08(%esp)
00000102	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
0000010a	movl	%ecx,%esi
0000010c	calll	_memset
00000111	movl	%esi,%edx
00000113	movl	0x14(%ebp),%esi
00000116	testl	%esi,%esi
00000118	movl	0x18(%ebp),%edi
0000011b	jle	0x00000135
0000011d	addl	$0x04,%edi
00000120	movb	0xfc(%edi),%al
00000123	movl	(%edi),%ecx
00000125	movzbl	(%ecx),%ecx
00000128	movb	%al,0x00000918(%edx,%ecx)
0000012f	addl	$0x08,%edi
00000132	decl	%esi
00000133	jne	0x00000120
00000135	addl	$0x1c,%esp
00000138	popl	%esi
00000139	popl	%edi
0000013a	popl	%ebx
0000013b	popl	%ebp
0000013c	ret
0000013d	leal	vtable for CUtlCStringConversion-0x3e+0x00000008(%edi),%eax
00000143	movl	%eax,(%ebx)
00000145	addl	$0x00000918,%ebx
0000014b	movl	%ebx,(%esp)
0000014e	movl	$0x00000100,0x08(%esp)
00000156	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
0000015e	calll	_memset
00000163	jmp	0x00000135
00000165	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000170	pushl	%ebp
00000171	movl	%esp,%ebp
00000173	pushl	%ebx
00000174	pushl	%edi
00000175	pushl	%esi
00000176	subl	$0x1c,%esp
00000179	calll	0x0000017e
0000017e	popl	%eax
0000017f	leal	vtable for CUtlCharConversion-0x17e+0x00000008(%eax),%eax
00000185	movl	0x08(%ebp),%esi
00000188	movl	%eax,(%esi)
0000018a	movb	0x0c(%ebp),%al
0000018d	movb	%al,0x04(%esi)
00000190	movl	GetCStringCharConversion()(%ebp),%eax
00000193	movl	%eax,0x08(%esi)
00000196	movl	0x14(%ebp),%edi
00000199	movl	%edi,GetCStringCharConversion()(%esi)
0000019c	movl	%eax,(%esp)
0000019f	calll	_strlen
000001a4	movl	%eax,0x0c(%esi)
000001a7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000001ae	leal	0x00000118(%esi),%eax
000001b4	movl	%eax,(%esp)
000001b7	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
000001bf	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000001c7	calll	_memset
000001cc	movl	%esi,%ecx
000001ce	testl	%edi,%edi
000001d0	jle	0x0000021d
000001d2	movl	0x18(%ebp),%ebx
000001d5	addl	$0x04,%ebx
000001d8	leal	0x18(%ecx),%esi
000001db	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000001e0	movl	%edi,0xf0(%ebp)
000001e3	movzbl	0xfc(%ebx),%edx
000001e7	movl	%edx,0xec(%ebp)
000001ea	movb	%dl,(%esi)
000001ec	movl	(%ebx),%eax
000001ee	movl	%eax,0x0000011c(%ecx,%edx,8)
000001f5	movl	%eax,(%esp)
000001f8	movl	%ecx,%edi
000001fa	calll	_strlen
000001ff	movl	%edi,%ecx
00000201	movl	0xec(%ebp),%edx
00000204	movl	%eax,0x00000118(%ecx,%edx,8)
0000020b	cmpl	0x14(%ecx),%eax
0000020e	jle	0x00000213
00000210	movl	%eax,0x14(%ecx)
00000213	addl	$0x08,%ebx
00000216	incl	%esi
00000217	movl	0xf0(%ebp),%edi
0000021a	decl	%edi
0000021b	jne	0x000001e0
0000021d	addl	$0x1c,%esp
00000220	popl	%esi
00000221	popl	%edi
00000222	popl	%ebx
00000223	popl	%ebp
00000224	ret
00000225	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCStringConversion::FindConversion(char const*, int*):
00000230	movl	0x08(%esp),%eax
00000234	movzbl	(%eax),%eax
00000237	movl	0x04(%esp),%ecx
0000023b	movsbl	0x00000918(%ecx,%eax),%eax
00000243	testl	%eax,%eax
00000245	setne	%cl
00000248	movzbl	%cl,%ecx
0000024b	movl	0x0c(%esp),%edx
0000024f	movl	%ecx,(%edx)
00000251	ret
00000252	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*):
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x1c,%esp
00000269	calll	0x0000026e
0000026e	popl	%eax
0000026f	leal	vtable for CUtlCharConversion-0x26e+0x00000008(%eax),%eax
00000275	movl	0x08(%ebp),%esi
00000278	movl	%eax,(%esi)
0000027a	movb	0x0c(%ebp),%al
0000027d	movb	%al,0x04(%esi)
00000280	movl	GetCStringCharConversion()(%ebp),%eax
00000283	movl	%eax,0x08(%esi)
00000286	movl	0x14(%ebp),%edi
00000289	movl	%edi,GetCStringCharConversion()(%esi)
0000028c	movl	%eax,(%esp)
0000028f	calll	_strlen
00000294	movl	%eax,0x0c(%esi)
00000297	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
0000029e	leal	0x00000118(%esi),%eax
000002a4	movl	%eax,(%esp)
000002a7	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x08(%esp)
000002af	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000002b7	calll	_memset
000002bc	movl	%esi,%ecx
000002be	testl	%edi,%edi
000002c0	jle	0x0000030d
000002c2	movl	0x18(%ebp),%ebx
000002c5	leal	0x18(%ecx),%esi
000002c8	addl	$0x04,%ebx
000002cb	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000002d0	movl	%edi,0xf0(%ebp)
000002d3	movzbl	0xfc(%ebx),%edx
000002d7	movl	%edx,0xec(%ebp)
000002da	movb	%dl,(%esi)
000002dc	movl	(%ebx),%eax
000002de	movl	%eax,0x0000011c(%ecx,%edx,8)
000002e5	movl	%eax,(%esp)
000002e8	movl	%ecx,%edi
000002ea	calll	_strlen
000002ef	movl	%edi,%ecx
000002f1	movl	0xec(%ebp),%edx
000002f4	movl	%eax,0x00000118(%ecx,%edx,8)
000002fb	cmpl	0x14(%ecx),%eax
000002fe	jle	0x00000303
00000300	movl	%eax,0x14(%ecx)
00000303	incl	%esi
00000304	addl	$0x08,%ebx
00000307	movl	0xf0(%ebp),%edi
0000030a	decl	%edi
0000030b	jne	0x000002d0
0000030d	addl	$0x1c,%esp
00000310	popl	%esi
00000311	popl	%edi
00000312	popl	%ebx
00000313	popl	%ebp
00000314	ret
00000315	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetEscapeChar() const:
00000320	movl	0x04(%esp),%eax
00000324	movsbl	0x04(%eax),%eax
00000328	ret
00000329	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlCharConversion::GetDelimiter() const:
00000330	movl	0x04(%esp),%eax
00000334	movl	0x08(%eax),%eax
00000337	ret
00000338	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetDelimiterLength() const:
00000340	movl	0x04(%esp),%eax
00000344	movl	0x0c(%eax),%eax
00000347	ret
00000348	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetConversionString(char) const:
00000350	movzbl	0x08(%esp),%eax
00000355	movl	0x04(%esp),%ecx
00000359	movl	0x0000011c(%ecx,%eax,8),%eax
00000360	ret
00000361	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::GetConversionLength(char) const:
00000370	movzbl	0x08(%esp),%eax
00000375	movl	0x04(%esp),%ecx
00000379	movl	0x00000118(%ecx,%eax,8),%eax
00000380	ret
00000381	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::MaxConversionLength() const:
00000390	movl	0x04(%esp),%eax
00000394	movl	0x14(%eax),%eax
00000397	ret
00000398	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlCharConversion::FindConversion(char const*, int*):
000003a0	pushl	%ebp
000003a1	movl	%esp,%ebp
000003a3	pushl	%ebx
000003a4	pushl	%edi
000003a5	pushl	%esi
000003a6	subl	$0x0c,%esp
000003a9	movl	0x08(%ebp),%esi
000003ac	movl	GetCStringCharConversion()(%esi),%eax
000003af	movl	%eax,0xf0(%ebp)
000003b2	xorl	%edi,%edi
000003b4	jmp	0x000003c1
000003b6	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000003c0	incl	%edi
000003c1	cmpl	0xf0(%ebp),%edi
000003c4	jge	0x000003f7
000003c6	movzbl	0x18(%esi,%edi),%ebx
000003cb	movl	0x0000011c(%esi,%ebx,8),%eax
000003d2	movl	%eax,0x04(%esp)
000003d6	movl	0x0c(%ebp),%eax
000003d9	movl	%eax,(%esp)
000003dc	calll	_strcmp
000003e1	testl	%eax,%eax
000003e3	jne	0x000003c0
000003e5	movl	0x00000118(%esi,%ebx,8),%eax
000003ec	movl	GetCStringCharConversion()(%ebp),%ecx
000003ef	movl	%eax,(%ecx)
000003f1	movb	0x18(%esi,%edi),%al
000003f5	jmp	0x00000402
000003f7	movl	GetCStringCharConversion()(%ebp),%eax
000003fa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00000400	xorb	%al,%al
00000402	movsbl	%al,%eax
00000405	addl	$0x0c,%esp
00000408	popl	%esi
00000409	popl	%edi
0000040a	popl	%ebx
0000040b	popl	%ebp
0000040c	ret
0000040d	nopl	(%eax)
CUtlBuffer::CUtlBuffer(int, int, int):
00000410	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00000415	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(int, int, int):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x0c,%esp
00000429	calll	0x0000042e
0000042e	popl	%esi
0000042f	movl	0x08(%ebp),%edi
00000432	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
00000438	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
0000043c	andb	$0xfc,0x34(%edi)
00000440	movl	0x0c(%ebp),%eax
00000443	movl	%eax,0x08(%edi)
00000446	movl	GetCStringCharConversion()(%ebp),%ebx
00000449	movl	%ebx,0x04(%edi)
0000044c	testl	%ebx,%ebx
0000044e	je	0x0000045a
00000450	movl	%ebx,(%esp)
00000453	calll	_malloc
00000458	movl	%eax,(%edi)
0000045a	movl	0x14(%ebp),%eax
0000045d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000464	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
0000046b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000472	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000479	movb	%al,0x15(%edi)
0000047c	testl	%ebx,%ebx
0000047e	je	0x000004c0
00000480	testb	$0x08,%al
00000482	jne	0x000004c0
00000484	movl	$0xffffffff,0x1c(%edi)
0000048b	movl	%edi,(%esp)
0000048e	calll	CUtlBuffer::AddNullTermination()
00000493	jmp	0x000004c7
00000495	movl	%eax,%esi
00000497	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
0000049b	js	0x000004b8
0000049d	movl	(%edi),%eax
0000049f	testl	%eax,%eax
000004a1	je	0x000004b1
000004a3	movl	%eax,(%esp)
000004a6	calll	_free
000004ab	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
000004b1	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
000004b8	movl	%esi,(%esp)
000004bb	calll	__Unwind_Resume
000004c0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x1c(%edi)
000004c7	leal	CUtlBuffer::GetOverflow(int)-0x42e(%esi),%eax
000004cd	movl	%eax,0x24(%edi)
000004d0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000004d7	leal	CUtlBuffer::PutOverflow(int)-0x42e(%esi),%eax
000004dd	movl	%eax,0x2c(%edi)
000004e0	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
000004e7	addl	$0x0c,%esp
000004ea	popl	%esi
000004eb	popl	%edi
000004ec	popl	%ebx
000004ed	popl	%ebp
000004ee	ret
000004ef	nop
CUtlBuffer::AddNullTermination():
000004f0	pushl	%ebp
000004f1	movl	%esp,%ebp
000004f3	pushl	%esi
000004f4	subl	$0x14,%esp
000004f7	movl	0x08(%ebp),%esi
000004fa	movl	GetCStringCharConversion()(%esi),%eax
000004fd	cmpl	0x1c(%esi),%eax
00000500	jle	0x0000055e
00000502	testb	$0x08,0x15(%esi)
00000506	jne	0x00000558
00000508	testb	$0x01,0x14(%esi)
0000050c	jne	0x00000558
0000050e	movl	GetNoEscCharConversion()(%esi),%ecx
00000511	cmpl	%ecx,%eax
00000513	jl	0x0000051f
00000515	leal	0x01(%eax),%edx
00000518	subl	%ecx,%edx
0000051a	cmpl	%edx,0x04(%esi)
0000051d	jge	0x00000548
0000051f	movl	0x2c(%esi),%eax
00000522	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%ecx
00000525	addl	%esi,%ecx
00000527	testb	$0x01,%al
00000529	je	0x00000531
0000052b	movl	(%ecx),%edx
0000052d	movl	0xff(%eax,%edx),%eax
00000531	movl	%ecx,(%esp)
00000534	movl	$0x00000001,0x04(%esp)
0000053c	call	*%eax
0000053e	cmpb	$0x01,%al
00000540	jne	0x00000554
00000542	movl	GetCStringCharConversion()(%esi),%eax
00000545	movl	GetNoEscCharConversion()(%esi),%ecx
00000548	subl	%ecx,%eax
0000054a	js	0x00000558
0000054c	movl	(%esi),%ecx
0000054e	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
00000552	jmp	0x00000558
00000554	andb	$0xfe,0x14(%esi)
00000558	movl	GetCStringCharConversion()(%esi),%eax
0000055b	movl	%eax,0x1c(%esi)
0000055e	addl	$0x14,%esp
00000561	popl	%esi
00000562	popl	%ebp
00000563	ret
00000564	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SetOverflowFuncs(bool (CUtlBuffer::*)(int), bool (CUtlBuffer::*)(int)):
00000570	pushl	%edi
00000571	pushl	%esi
00000572	movl	0x18(%esp),%eax
00000576	movl	0x1c(%esp),%ecx
0000057a	movl	GetCStringCharConversion()(%esp),%esi
0000057e	movl	0x14(%esp),%edi
00000582	movl	0x0c(%esp),%edx
00000586	movl	%edi,0x28(%edx)
00000589	movl	%esi,0x24(%edx)
0000058c	movl	%ecx,CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edx)
0000058f	movl	%eax,0x2c(%edx)
00000592	popl	%esi
00000593	popl	%edi
00000594	ret
00000595	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetOverflow(int):
000005a0	xorl	%eax,%eax
000005a2	ret
000005a3	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PutOverflow(int):
000005b0	pushl	%ebp
000005b1	movl	%esp,%ebp
000005b3	pushl	%ebx
000005b4	pushl	%edi
000005b5	pushl	%esi
000005b6	subl	$0x0c,%esp
000005b9	movl	0x0c(%ebp),%esi
000005bc	movl	0x08(%ebp),%ebx
000005bf	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
000005c3	js	0x000005ca
000005c5	movl	0x04(%ebx),%edi
000005c8	jmp	0x0000060b
000005ca	xorb	%al,%al
000005cc	testb	$0x02,0x15(%ebx)
000005d0	je	0x0000063f
000005d2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
000005d9	movl	0x04(%ebx),%edi
000005dc	testl	%edi,%edi
000005de	je	0x00000600
000005e0	movl	%edi,(%esp)
000005e3	calll	_malloc
000005e8	movl	%eax,%esi
000005ea	movl	(%ebx),%eax
000005ec	movl	%edi,0x08(%esp)
000005f0	movl	%eax,0x04(%esp)
000005f4	movl	%esi,(%esp)
000005f7	calll	_memcpy
000005fc	movl	%esi,(%ebx)
000005fe	jmp	0x00000608
00000600	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00000606	xorl	%edi,%edi
00000608	movl	0x0c(%ebp),%esi
0000060b	movl	GetCStringCharConversion()(%ebx),%ecx
0000060e	addl	%esi,%ecx
00000610	subl	GetNoEscCharConversion()(%ebx),%ecx
00000613	movb	$0x01,%al
00000615	cmpl	%ecx,%edi
00000617	jge	0x0000063f
00000619	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
00000620	movl	%ebx,(%esp)
00000623	movl	$0x00000001,0x04(%esp)
0000062b	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000630	movl	GetCStringCharConversion()(%ebx),%ecx
00000633	addl	%esi,%ecx
00000635	subl	GetNoEscCharConversion()(%ebx),%ecx
00000638	movb	$0x01,%al
0000063a	cmpl	%ecx,0x04(%ebx)
0000063d	jl	0x00000620
0000063f	movzbl	%al,%eax
00000642	addl	$0x0c,%esp
00000645	popl	%esi
00000646	popl	%edi
00000647	popl	%ebx
00000648	popl	%ebp
00000649	ret
0000064a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(void const*, int, int):
00000650	pushl	%ebp
00000651	movl	%esp,%ebp
00000653	pushl	%edi
00000654	pushl	%esi
00000655	subl	GetCStringCharConversion(),%esp
00000658	calll	0x0000065d
0000065d	popl	%esi
0000065e	movl	0x0c(%ebp),%eax
00000661	movl	0x08(%ebp),%edi
00000664	movl	%eax,(%edi)
00000666	movl	GetCStringCharConversion()(%ebp),%eax
00000669	movl	%eax,0x04(%edi)
0000066c	movl	$0xffffffff,0x08(%edi)
00000673	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000677	andb	$0xfc,0x34(%edi)
0000067b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000682	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
00000689	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000690	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000697	movb	0x14(%ebp),%cl
0000069a	movb	%cl,0x15(%edi)
0000069d	testb	$0x08,%cl
000006a0	je	0x000006d2
000006a2	movl	%eax,0x1c(%edi)
000006a5	jmp	0x000006e1
000006a7	movl	%eax,%esi
000006a9	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
000006ad	js	0x000006ca
000006af	movl	(%edi),%eax
000006b1	testl	%eax,%eax
000006b3	je	0x000006c3
000006b5	movl	%eax,(%esp)
000006b8	calll	_free
000006bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
000006c3	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
000006ca	movl	%esi,(%esp)
000006cd	calll	__Unwind_Resume
000006d2	movl	$0xffffffff,0x1c(%edi)
000006d9	movl	%edi,(%esp)
000006dc	calll	CUtlBuffer::AddNullTermination()
000006e1	leal	CUtlBuffer::GetOverflow(int)-0x65d(%esi),%eax
000006e7	movl	%eax,0x24(%edi)
000006ea	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000006f1	leal	CUtlBuffer::PutOverflow(int)-0x65d(%esi),%eax
000006f7	movl	%eax,0x2c(%edi)
000006fa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
00000701	addl	GetCStringCharConversion(),%esp
00000704	popl	%esi
00000705	popl	%edi
00000706	popl	%ebp
00000707	ret
00000708	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CUtlBuffer(void const*, int, int):
00000710	pushl	%ebp
00000711	movl	%esp,%ebp
00000713	pushl	%edi
00000714	pushl	%esi
00000715	subl	GetCStringCharConversion(),%esp
00000718	calll	0x0000071d
0000071d	popl	%esi
0000071e	movl	0x0c(%ebp),%eax
00000721	movl	0x08(%ebp),%edi
00000724	movl	%eax,(%edi)
00000726	movl	GetCStringCharConversion()(%ebp),%eax
00000729	movl	%eax,0x04(%edi)
0000072c	movl	$0xffffffff,0x08(%edi)
00000733	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000737	andb	$0xfc,0x34(%edi)
0000073b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%edi)
00000742	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%edi)
00000749	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
00000750	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%edi)
00000757	movb	0x14(%ebp),%cl
0000075a	movb	%cl,0x15(%edi)
0000075d	testb	$0x08,%cl
00000760	je	0x00000792
00000762	movl	%eax,0x1c(%edi)
00000765	jmp	0x000007a1
00000767	movl	%eax,%esi
00000769	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%edi)
0000076d	js	0x0000078a
0000076f	movl	(%edi),%eax
00000771	testl	%eax,%eax
00000773	je	0x00000783
00000775	movl	%eax,(%esp)
00000778	calll	_free
0000077d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edi)
00000783	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%edi)
0000078a	movl	%esi,(%esp)
0000078d	calll	__Unwind_Resume
00000792	movl	$0xffffffff,0x1c(%edi)
00000799	movl	%edi,(%esp)
0000079c	calll	CUtlBuffer::AddNullTermination()
000007a1	leal	CUtlBuffer::GetOverflow(int)-0x71d(%esi),%eax
000007a7	movl	%eax,0x24(%edi)
000007aa	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x28(%edi)
000007b1	leal	CUtlBuffer::PutOverflow(int)-0x71d(%esi),%eax
000007b7	movl	%eax,0x2c(%edi)
000007ba	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi)
000007c1	addl	GetCStringCharConversion(),%esp
000007c4	popl	%esi
000007c5	popl	%edi
000007c6	popl	%ebp
000007c7	ret
000007c8	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SetBufferType(bool, bool):
000007d0	movl	0x04(%esp),%eax
000007d4	movb	0x15(%eax),%dl
000007d7	movb	%dl,%cl
000007d9	orb	$0x01,%cl
000007dc	andb	$0xfe,%dl
000007df	movb	0x08(%esp),%ch
000007e3	testb	%ch,%ch
000007e5	jne	0x000007e9
000007e7	movb	%dl,%cl
000007e9	movb	%cl,%dl
000007eb	orb	$0x04,%dl
000007ee	andb	$0xfb,%cl
000007f1	movb	0x0c(%esp),%ch
000007f5	testb	%ch,%ch
000007f7	jne	0x000007fb
000007f9	movb	%cl,%dl
000007fb	movb	%dl,0x15(%eax)
000007fe	ret
000007ff	nop
CUtlBuffer::SetExternalBuffer(void*, int, int, int):
00000800	pushl	%ebp
00000801	movl	%esp,%ebp
00000803	pushl	%edi
00000804	pushl	%esi
00000805	subl	GetCStringCharConversion(),%esp
00000808	movl	0x08(%ebp),%esi
0000080b	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
0000080f	js	0x0000082c
00000811	movl	(%esi),%eax
00000813	testl	%eax,%eax
00000815	je	0x00000825
00000817	movl	%eax,(%esp)
0000081a	calll	_free
0000081f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000825	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esi)
0000082c	movl	0x18(%ebp),%eax
0000082f	movl	0x14(%ebp),%ecx
00000832	movl	GetCStringCharConversion()(%ebp),%edx
00000835	movl	0x0c(%ebp),%edi
00000838	movl	%edi,(%esi)
0000083a	movl	%edx,0x04(%esi)
0000083d	movl	$0xffffffff,0x08(%esi)
00000844	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%esi)
0000084b	movl	%ecx,GetCStringCharConversion()(%esi)
0000084e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%esi)
00000855	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000859	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%esi)
00000860	movb	%al,0x15(%esi)
00000863	movl	$0xffffffff,0x1c(%esi)
0000086a	addl	GetCStringCharConversion(),%esp
0000086d	popl	%esi
0000086e	popl	%edi
0000086f	popl	%ebp
00000870	jmp	CUtlBuffer::AddNullTermination()
00000875	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::AssumeMemory(void*, int, int, int):
00000880	pushl	%ebp
00000881	movl	%esp,%ebp
00000883	pushl	%edi
00000884	pushl	%esi
00000885	subl	GetCStringCharConversion(),%esp
00000888	movl	0x08(%ebp),%esi
0000088b	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
0000088f	js	0x000008ac
00000891	movl	(%esi),%eax
00000893	testl	%eax,%eax
00000895	je	0x000008a5
00000897	movl	%eax,(%esp)
0000089a	calll	_free
0000089f	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
000008a5	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esi)
000008ac	movl	0x18(%ebp),%eax
000008af	movl	0x14(%ebp),%ecx
000008b2	movl	GetCStringCharConversion()(%ebp),%edx
000008b5	movl	0x0c(%ebp),%edi
000008b8	movl	%edi,(%esi)
000008ba	movl	%edx,0x04(%esi)
000008bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%esi)
000008c4	movl	%ecx,GetCStringCharConversion()(%esi)
000008c7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%esi)
000008ce	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000008d2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%esi)
000008d9	movb	%al,0x15(%esi)
000008dc	movl	$0xffffffff,0x1c(%esi)
000008e3	addl	GetCStringCharConversion(),%esp
000008e6	popl	%esi
000008e7	popl	%edi
000008e8	popl	%ebp
000008e9	jmp	CUtlBuffer::AddNullTermination()
000008ee	nop
CUtlBuffer::EnsureCapacity(int):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%ebx
000008f4	pushl	%edi
000008f5	pushl	%esi
000008f6	subl	$0x1c,%esp
000008f9	movl	0x0c(%ebp),%eax
000008fc	leal	0x01(%eax),%edx
000008ff	movl	0x08(%ebp),%esi
00000902	movl	0x08(%esi),%ecx
00000905	testl	%ecx,%ecx
00000907	js	0x0000090d
00000909	movl	%edx,%eax
0000090b	jmp	0x00000956
0000090d	testb	$0x02,0x15(%esi)
00000911	je	0x00000956
00000913	movl	0x04(%esi),%edi
00000916	cmpl	%edx,%edi
00000918	cmovll	%edx,%eax
0000091b	jge	0x00000956
0000091d	movl	%edx,0xf0(%ebp)
00000920	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esi)
00000927	testl	%edi,%edi
00000929	je	0x0000094b
0000092b	movl	%edi,(%esp)
0000092e	calll	_malloc
00000933	movl	%eax,%ebx
00000935	movl	(%esi),%eax
00000937	movl	%edi,0x08(%esp)
0000093b	movl	%eax,0x04(%esp)
0000093f	movl	%ebx,(%esp)
00000942	calll	_memcpy
00000947	movl	%ebx,(%esi)
00000949	jmp	0x00000951
0000094b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000951	xorl	%ecx,%ecx
00000953	movl	0xf0(%ebp),%eax
00000956	cmpl	%eax,0x04(%esi)
00000959	jge	0x00000980
0000095b	testl	%ecx,%ecx
0000095d	js	0x00000980
0000095f	movl	%eax,0x04(%esi)
00000962	movl	(%esi),%ecx
00000964	testl	%ecx,%ecx
00000966	je	0x00000976
00000968	movl	%eax,0x04(%esp)
0000096c	movl	%ecx,(%esp)
0000096f	calll	_realloc
00000974	jmp	0x0000097e
00000976	movl	%eax,(%esp)
00000979	calll	_malloc
0000097e	movl	%eax,(%esi)
00000980	addl	$0x1c,%esp
00000983	popl	%esi
00000984	popl	%edi
00000985	popl	%ebx
00000986	popl	%ebp
00000987	ret
00000988	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Get(void*, int):
00000990	pushl	%ebp
00000991	movl	%esp,%ebp
00000993	pushl	%ebx
00000994	pushl	%edi
00000995	pushl	%esi
00000996	subl	$0x0c,%esp
00000999	movl	GetCStringCharConversion()(%ebp),%esi
0000099c	testl	%esi,%esi
0000099e	jle	0x00000a0d
000009a0	movl	0x08(%ebp),%edi
000009a3	movb	0x14(%edi),%cl
000009a6	testb	$0x02,%cl
000009a9	jne	0x00000a0d
000009ab	movl	0x0c(%edi),%eax
000009ae	leal	(%eax,%esi),%edx
000009b1	cmpl	%edx,0x1c(%edi)
000009b4	jge	0x000009be
000009b6	orb	$0x02,%cl
000009b9	movb	%cl,0x14(%edi)
000009bc	jmp	0x00000a0d
000009be	movl	0x0c(%ebp),%ebx
000009c1	movl	GetNoEscCharConversion()(%edi),%ecx
000009c4	cmpl	%ecx,%eax
000009c6	jl	0x000009cf
000009c8	subl	%ecx,%edx
000009ca	cmpl	%edx,0x04(%edi)
000009cd	jge	0x000009f4
000009cf	movl	0x24(%edi),%eax
000009d2	movl	0x28(%edi),%ecx
000009d5	addl	%edi,%ecx
000009d7	testb	$0x01,%al
000009d9	je	0x000009e1
000009db	movl	(%ecx),%edx
000009dd	movl	0xff(%eax,%edx),%eax
000009e1	movl	%esi,0x04(%esp)
000009e5	movl	%ecx,(%esp)
000009e8	call	*%eax
000009ea	cmpb	$0x01,%al
000009ec	jne	0x00000a15
000009ee	movl	0x0c(%edi),%eax
000009f1	movl	GetNoEscCharConversion()(%edi),%ecx
000009f4	movl	(%edi),%edx
000009f6	movl	%esi,0x08(%esp)
000009fa	subl	%ecx,%eax
000009fc	addl	%edx,%eax
000009fe	movl	%eax,0x04(%esp)
00000a02	movl	%ebx,(%esp)
00000a05	calll	_memcpy
00000a0a	addl	%esi,0x0c(%edi)
00000a0d	addl	$0x0c,%esp
00000a10	popl	%esi
00000a11	popl	%edi
00000a12	popl	%ebx
00000a13	popl	%ebp
00000a14	ret
00000a15	orb	$0x02,0x14(%edi)
00000a19	jmp	0x00000a0d
00000a1b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckGet(int):
00000a20	pushl	%ebp
00000a21	movl	%esp,%ebp
00000a23	pushl	%edi
00000a24	pushl	%esi
00000a25	subl	GetCStringCharConversion(),%esp
00000a28	movl	0x08(%ebp),%esi
00000a2b	movb	0x14(%esi),%dl
00000a2e	xorb	%cl,%cl
00000a30	testb	$0x02,%dl
00000a33	jne	0x00000a83
00000a35	movl	0x0c(%ebp),%eax
00000a38	movl	0x0c(%esi),%ecx
00000a3b	leal	(%ecx,%eax),%edi
00000a3e	cmpl	%edi,0x1c(%esi)
00000a41	jge	0x00000a4b
00000a43	orb	$0x02,%dl
00000a46	movb	%dl,0x14(%esi)
00000a49	jmp	0x00000a81
00000a4b	movl	GetNoEscCharConversion()(%esi),%edx
00000a4e	cmpl	%edx,%ecx
00000a50	jl	0x00000a5b
00000a52	subl	%edx,%edi
00000a54	movb	$0x01,%cl
00000a56	cmpl	%edi,0x04(%esi)
00000a59	jge	0x00000a83
00000a5b	movl	0x24(%esi),%ecx
00000a5e	movl	0x28(%esi),%edx
00000a61	addl	%esi,%edx
00000a63	testb	$0x01,%cl
00000a66	je	0x00000a6e
00000a68	movl	(%edx),%edi
00000a6a	movl	0xff(%ecx,%edi),%ecx
00000a6e	movl	%eax,0x04(%esp)
00000a72	movl	%edx,(%esp)
00000a75	call	*%ecx
00000a77	movb	$0x01,%cl
00000a79	testb	%al,%al
00000a7b	jne	0x00000a83
00000a7d	orb	$0x02,0x14(%esi)
00000a81	xorb	%cl,%cl
00000a83	movzbl	%cl,%eax
00000a86	addl	GetCStringCharConversion(),%esp
00000a89	popl	%esi
00000a8a	popl	%edi
00000a8b	popl	%ebp
00000a8c	ret
00000a8d	nopl	(%eax)
CUtlBuffer::GetUpTo(void*, int):
00000a90	pushl	%ebp
00000a91	movl	%esp,%ebp
00000a93	pushl	%ebx
00000a94	pushl	%edi
00000a95	pushl	%esi
00000a96	subl	$0x0c,%esp
00000a99	movl	0x08(%ebp),%esi
00000a9c	movl	0x0c(%esi),%ecx
00000a9f	movl	0x1c(%esi),%edx
00000aa2	xorl	%eax,%eax
00000aa4	cmpl	%edx,%ecx
00000aa6	jge	0x00000afc
00000aa8	movl	GetCStringCharConversion()(%ebp),%eax
00000aab	movl	%esi,(%esp)
00000aae	movl	%edx,%ebx
00000ab0	subl	%ecx,%ebx
00000ab2	addl	%eax,%ecx
00000ab4	cmpl	%edx,%ecx
00000ab6	cmovlel	%eax,%ebx
00000ab9	movl	%ebx,0x08(%esp)
00000abd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000ac5	calll	CUtlBuffer::CheckPeekGet(int, int)
00000aca	movl	0x0c(%esi),%ecx
00000acd	movl	0x1c(%esi),%edi
00000ad0	subl	%ecx,%edi
00000ad2	cmpl	%ebx,%edi
00000ad4	cmovgel	%ebx,%edi
00000ad7	xorl	%eax,%eax
00000ad9	testl	%edi,%edi
00000adb	je	0x00000afc
00000add	movl	0x0c(%ebp),%eax
00000ae0	subl	GetNoEscCharConversion()(%esi),%ecx
00000ae3	movl	(%esi),%edx
00000ae5	movl	%edi,0x08(%esp)
00000ae9	addl	%ecx,%edx
00000aeb	movl	%edx,0x04(%esp)
00000aef	movl	%eax,(%esp)
00000af2	calll	_memcpy
00000af7	addl	%edi,0x0c(%esi)
00000afa	movl	%edi,%eax
00000afc	addl	$0x0c,%esp
00000aff	popl	%esi
00000b00	popl	%edi
00000b01	popl	%ebx
00000b02	popl	%ebp
00000b03	ret
00000b04	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckArbitraryPeekGet(int, int&):
00000b10	pushl	%ebp
00000b11	movl	%esp,%ebp
00000b13	pushl	%ebx
00000b14	pushl	%edi
00000b15	pushl	%esi
00000b16	subl	$0x0c,%esp
00000b19	movl	0x08(%ebp),%edi
00000b1c	movl	0x0c(%edi),%ecx
00000b1f	addl	0x0c(%ebp),%ecx
00000b22	movl	0x1c(%edi),%edx
00000b25	movl	GetCStringCharConversion()(%ebp),%esi
00000b28	cmpl	%edx,%ecx
00000b2a	jl	0x00000b36
00000b2c	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi)
00000b32	xorb	%al,%al
00000b34	jmp	0x00000b6d
00000b36	movl	(%esi),%ebx
00000b38	leal	(%ebx,%ecx),%eax
00000b3b	cmpl	%edx,%eax
00000b3d	jle	0x00000b45
00000b3f	subl	%ecx,%edx
00000b41	movl	%edx,(%esi)
00000b43	movl	%edx,%ebx
00000b45	movl	%ebx,0x08(%esp)
00000b49	movl	0x0c(%ebp),%eax
00000b4c	movl	%eax,0x04(%esp)
00000b50	movl	%edi,(%esp)
00000b53	calll	CUtlBuffer::CheckPeekGet(int, int)
00000b58	movl	0x1c(%edi),%eax
00000b5b	subl	0x0c(%edi),%eax
00000b5e	movl	(%esi),%ecx
00000b60	cmpl	%ecx,%eax
00000b62	jge	0x00000b68
00000b64	movl	%eax,(%esi)
00000b66	movl	%eax,%ecx
00000b68	testl	%ecx,%ecx
00000b6a	setne	%al
00000b6d	movzbl	%al,%eax
00000b70	addl	$0x0c,%esp
00000b73	popl	%esi
00000b74	popl	%edi
00000b75	popl	%ebx
00000b76	popl	%ebp
00000b77	ret
00000b78	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::EatWhiteSpace():
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%ebx
00000b84	pushl	%edi
00000b85	pushl	%esi
00000b86	subl	$0x0c,%esp
00000b89	calll	0x00000b8e
00000b8e	popl	%eax
00000b8f	movl	0x08(%ebp),%esi
00000b92	testb	$0x01,0x15(%esi)
00000b96	je	0x00000c41
00000b9c	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000ba0	jne	0x00000c41
00000ba6	xorb	%cl,%cl
00000ba8	movl	0x19013-0xb8e(%eax),%edi
00000bae	movl	$0x00004000,%ebx
00000bb3	jmp	0x00000c25
00000bb5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000bc0	movl	GetNoEscCharConversion()(%esi),%ecx
00000bc3	cmpl	%ecx,%eax
00000bc5	jl	0x00000bce
00000bc7	subl	%ecx,%edx
00000bc9	cmpl	%edx,0x04(%esi)
00000bcc	jge	0x00000bf7
00000bce	movl	0x24(%esi),%eax
00000bd1	movl	0x28(%esi),%ecx
00000bd4	addl	%esi,%ecx
00000bd6	testb	$0x01,%al
00000bd8	je	0x00000be0
00000bda	movl	(%ecx),%edx
00000bdc	movl	0xff(%eax,%edx),%eax
00000be0	movl	%ecx,(%esp)
00000be3	movl	$0x00000001,0x04(%esp)
00000beb	call	*%eax
00000bed	cmpb	$0x01,%al
00000bef	jne	0x00000c3d
00000bf1	movl	0x0c(%esi),%eax
00000bf4	movl	GetNoEscCharConversion()(%esi),%ecx
00000bf7	subl	%ecx,%eax
00000bf9	movl	(%esi),%ecx
00000bfb	movzbl	(%ecx,%eax),%eax
00000bff	testb	%al,%al
00000c01	js	0x00000c0b
00000c03	movl	0x34(%edi,%eax,4),%eax
00000c07	andl	%ebx,%eax
00000c09	jmp	0x00000c1b
00000c0b	movl	%eax,(%esp)
00000c0e	movl	$0x00004000,0x04(%esp)
00000c16	calll	___maskrune
00000c1b	testl	%eax,%eax
00000c1d	je	0x00000c41
00000c1f	incl	0x0c(%esi)
00000c22	movb	0x14(%esi),%cl
00000c25	testb	$0x02,%cl
00000c28	jne	0x00000c41
00000c2a	movl	0x0c(%esi),%eax
00000c2d	leal	0x01(%eax),%edx
00000c30	cmpl	%edx,0x1c(%esi)
00000c33	jge	0x00000bc0
00000c35	orb	$0x02,%cl
00000c38	movb	%cl,0x14(%esi)
00000c3b	jmp	0x00000c41
00000c3d	orb	$0x02,0x14(%esi)
00000c41	addl	$0x0c,%esp
00000c44	popl	%esi
00000c45	popl	%edi
00000c46	popl	%ebx
00000c47	popl	%ebp
00000c48	ret
00000c49	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::EatCPPComment():
00000c50	pushl	%ebp
00000c51	movl	%esp,%ebp
00000c53	pushl	%ebx
00000c54	pushl	%edi
00000c55	pushl	%esi
00000c56	subl	$0x1c,%esp
00000c59	calll	0x00000c5e
00000c5e	popl	%eax
00000c5f	movl	%eax,0xec(%ebp)
00000c62	xorb	%cl,%cl
00000c64	movl	0x08(%ebp),%esi
00000c67	testb	$0x01,0x15(%esi)
00000c6b	je	0x00000d1f
00000c71	xorb	%cl,%cl
00000c73	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000c77	jne	0x00000d1f
00000c7d	movl	%esi,(%esp)
00000c80	movl	$0x00000002,0x08(%esp)
00000c88	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00000c90	calll	CUtlBuffer::CheckPeekGet(int, int)
00000c95	xorb	%cl,%cl
00000c97	testb	%al,%al
00000c99	je	0x00000d1f
00000c9f	movl	(%esi),%edi
00000ca1	movl	0x0c(%esi),%eax
00000ca4	movl	%eax,%ebx
00000ca6	subl	GetNoEscCharConversion()(%esi),%ebx
00000ca9	xorb	%cl,%cl
00000cab	movl	%edi,%edx
00000cad	addl	%ebx,%edx
00000caf	je	0x00000d1f
00000cb1	xorb	%cl,%cl
00000cb3	cmpb	$0x2f,(%edx)
00000cb6	jne	0x00000d1f
00000cb8	xorb	%cl,%cl
00000cba	cmpb	$0x2f,0x01(%ebx,%edi)
00000cbf	jne	0x00000d1f
00000cc1	addl	$0x02,%eax
00000cc4	movl	%eax,0x0c(%esi)
00000cc7	movl	0xec(%ebp),%eax
00000cca	leal	0x151ef-0xc5e(%eax),%edi
00000cd0	movl	%edi,0x08(%esp)
00000cd4	leal	0xf3(%ebp),%eax
00000cd7	movl	%eax,0x04(%esp)
00000cdb	movl	%esi,(%esp)
00000cde	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00000ce3	movb	$0x01,%cl
00000ce5	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000ce9	jne	0x00000d1f
00000ceb	movb	0xf3(%ebp),%al
00000cee	cmpb	$0x0a,%al
00000cf0	je	0x00000d1f
00000cf2	leal	0xf2(%ebp),%ebx
00000cf5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000d00	movl	%edi,0x08(%esp)
00000d04	movl	%ebx,0x04(%esp)
00000d08	movl	%esi,(%esp)
00000d0b	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00000d10	movb	$0x01,%cl
00000d12	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
00000d16	jne	0x00000d1f
00000d18	movb	0xf2(%ebp),%al
00000d1b	cmpb	$0x0a,%al
00000d1d	jne	0x00000d00
00000d1f	movzbl	%cl,%eax
00000d22	addl	$0x1c,%esp
00000d25	popl	%esi
00000d26	popl	%edi
00000d27	popl	%ebx
00000d28	popl	%ebp
00000d29	ret
00000d2a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekGet(int, int):
00000d30	pushl	%ebp
00000d31	movl	%esp,%ebp
00000d33	pushl	%edi
00000d34	pushl	%esi
00000d35	subl	GetCStringCharConversion(),%esp
00000d38	movl	0x0c(%ebp),%eax
00000d3b	movl	%eax,0x08(%esp)
00000d3f	movl	GetCStringCharConversion()(%ebp),%esi
00000d42	movl	%esi,0x04(%esp)
00000d46	movl	0x08(%ebp),%edi
00000d49	movl	%edi,(%esp)
00000d4c	calll	CUtlBuffer::CheckPeekGet(int, int)
00000d51	testb	%al,%al
00000d53	jne	0x00000d59
00000d55	xorl	%esi,%esi
00000d57	jmp	0x00000d61
00000d59	addl	0x0c(%edi),%esi
00000d5c	subl	GetNoEscCharConversion()(%edi),%esi
00000d5f	addl	(%edi),%esi
00000d61	movl	%esi,%eax
00000d63	addl	GetCStringCharConversion(),%esp
00000d66	popl	%esi
00000d67	popl	%edi
00000d68	popl	%ebp
00000d69	ret
00000d6a	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekWhiteSpace(int):
00000d70	pushl	%ebp
00000d71	movl	%esp,%ebp
00000d73	pushl	%ebx
00000d74	pushl	%edi
00000d75	pushl	%esi
00000d76	subl	$0x0c,%esp
00000d79	calll	0x00000d7e
00000d7e	popl	%eax
00000d7f	xorl	%esi,%esi
00000d81	movl	0x08(%ebp),%edi
00000d84	testb	$0x01,0x15(%edi)
00000d88	je	0x00000dea
00000d8a	xorl	%esi,%esi
00000d8c	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00000d90	jne	0x00000dea
00000d92	movl	0x0c(%ebp),%esi
00000d95	movl	0x19013-0xd7e(%eax),%ebx
00000d9b	jmp	0x00000da1
00000d9d	nopl	(%eax)
00000da0	incl	%esi
00000da1	movl	%esi,0x04(%esp)
00000da5	movl	%edi,(%esp)
00000da8	movl	$0x00000001,0x08(%esp)
00000db0	calll	CUtlBuffer::CheckPeekGet(int, int)
00000db5	cmpb	$0x01,%al
00000db7	jne	0x00000dea
00000db9	movl	0x0c(%edi),%eax
00000dbc	subl	GetNoEscCharConversion()(%edi),%eax
00000dbf	addl	(%edi),%eax
00000dc1	movzbl	(%esi,%eax),%eax
00000dc5	testb	%al,%al
00000dc7	js	0x00000dd6
00000dc9	movl	0x34(%ebx,%eax,4),%eax
00000dcd	movl	$0x00004000,%ecx
00000dd2	andl	%ecx,%eax
00000dd4	jmp	0x00000de6
00000dd6	movl	%eax,(%esp)
00000dd9	movl	$0x00004000,0x04(%esp)
00000de1	calll	___maskrune
00000de6	testl	%eax,%eax
00000de8	jne	0x00000da0
00000dea	movl	%esi,%eax
00000dec	addl	$0x0c,%esp
00000def	popl	%esi
00000df0	popl	%edi
00000df1	popl	%ebx
00000df2	popl	%ebp
00000df3	ret
00000df4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::CheckPeekGet(int, int):
00000e00	pushl	%ebp
00000e01	movl	%esp,%ebp
00000e03	pushl	%ebx
00000e04	pushl	%edi
00000e05	pushl	%esi
00000e06	subl	$0x0c,%esp
00000e09	movl	0x08(%ebp),%esi
00000e0c	movb	0x14(%esi),%cl
00000e0f	xorb	%dl,%dl
00000e11	testb	$0x02,%cl
00000e14	jne	0x00000e6c
00000e16	movl	GetCStringCharConversion()(%ebp),%edx
00000e19	movl	0x0c(%ebp),%eax
00000e1c	addl	%edx,%eax
00000e1e	movl	0x0c(%esi),%edx
00000e21	leal	(%edx,%eax),%edi
00000e24	cmpl	%edi,0x1c(%esi)
00000e27	jl	0x00000e5e
00000e29	movl	GetNoEscCharConversion()(%esi),%ebx
00000e2c	cmpl	%ebx,%edx
00000e2e	jl	0x00000e39
00000e30	subl	%ebx,%edi
00000e32	movb	$0x01,%dl
00000e34	cmpl	%edi,0x04(%esi)
00000e37	jge	0x00000e66
00000e39	movl	0x24(%esi),%ecx
00000e3c	movl	0x28(%esi),%edx
00000e3f	addl	%esi,%edx
00000e41	testb	$0x01,%cl
00000e44	je	0x00000e4c
00000e46	movl	(%edx),%edi
00000e48	movl	0xff(%ecx,%edi),%ecx
00000e4c	movl	%eax,0x04(%esp)
00000e50	movl	%edx,(%esp)
00000e53	call	*%ecx
00000e55	movb	0x14(%esi),%cl
00000e58	movb	$0x01,%dl
00000e5a	testb	%al,%al
00000e5c	jne	0x00000e66
00000e5e	orb	$0x02,%cl
00000e61	movb	%cl,0x14(%esi)
00000e64	xorb	%dl,%dl
00000e66	andb	$0xfd,%cl
00000e69	movb	%cl,0x14(%esi)
00000e6c	movzbl	%dl,%eax
00000e6f	addl	$0x0c,%esp
00000e72	popl	%esi
00000e73	popl	%edi
00000e74	popl	%ebx
00000e75	popl	%ebp
00000e76	ret
00000e77	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekStringLength():
00000e80	pushl	%ebp
00000e81	movl	%esp,%ebp
00000e83	pushl	%ebx
00000e84	pushl	%edi
00000e85	pushl	%esi
00000e86	subl	$0x1c,%esp
00000e89	calll	0x00000e8e
00000e8e	popl	%eax
00000e8f	movl	%eax,0xf0(%ebp)
00000e92	xorl	%eax,%eax
00000e94	movl	0x08(%ebp),%ebx
00000e97	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00000e9b	jne	0x00001002
00000ea1	xorl	%edi,%edi
00000ea3	testb	$0x01,0x15(%ebx)
00000ea7	je	0x00000efe
00000ea9	movl	$0x00004000,%esi
00000eae	jmp	0x00000eb1
00000eb0	incl	%edi
00000eb1	movl	%edi,0x04(%esp)
00000eb5	movl	%ebx,(%esp)
00000eb8	movl	$0x00000001,0x08(%esp)
00000ec0	calll	CUtlBuffer::CheckPeekGet(int, int)
00000ec5	cmpb	$0x01,%al
00000ec7	jne	0x00000efe
00000ec9	movl	0x0c(%ebx),%eax
00000ecc	subl	GetNoEscCharConversion()(%ebx),%eax
00000ecf	addl	(%ebx),%eax
00000ed1	movzbl	(%edi,%eax),%eax
00000ed5	testb	%al,%al
00000ed7	js	0x00000eea
00000ed9	movl	0xf0(%ebp),%ecx
00000edc	movl	0x19013-0xe8e(%ecx),%ecx
00000ee2	movl	0x34(%ecx,%eax,4),%eax
00000ee6	andl	%esi,%eax
00000ee8	jmp	0x00000efa
00000eea	movl	%eax,(%esp)
00000eed	movl	$0x00004000,0x04(%esp)
00000ef5	calll	___maskrune
00000efa	testl	%eax,%eax
00000efc	jne	0x00000eb0
00000efe	movl	%edi,0xe8(%ebp)
00000f01	movl	%edi,%edx
00000f03	jmp	0x00000f97
00000f08	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f10	addl	0xec(%ebp),%eax
00000f13	subl	%ecx,%eax
00000f15	addl	%eax,%esi
00000f17	xorl	%ecx,%ecx
00000f19	jmp	0x00000f21
00000f1b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f20	incl	%ecx
00000f21	cmpl	%ebx,%ecx
00000f23	jge	0x00000f8f
00000f25	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi,%ecx)
00000f29	jne	0x00000f20
00000f2b	jmp	0x0000100a
00000f30	movl	(%edi),%esi
00000f32	movl	GetNoEscCharConversion()(%edi),%ecx
00000f35	testb	$0x01,0x15(%edi)
00000f39	je	0x00000f10
00000f3b	addl	0xec(%ebp),%eax
00000f3e	subl	%ecx,%eax
00000f40	addl	%eax,%esi
00000f42	xorl	%edi,%edi
00000f44	jmp	0x00000f51
00000f46	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00000f50	incl	%edi
00000f51	cmpl	%ebx,%edi
00000f53	jge	0x00000f8f
00000f55	movzbl	(%esi,%edi),%eax
00000f59	testb	%al,%al
00000f5b	js	0x00000f73
00000f5d	movl	0xf0(%ebp),%ecx
00000f60	movl	0x19013-0xe8e(%ecx),%ecx
00000f66	movl	0x34(%ecx,%eax,4),%eax
00000f6a	movl	$0x00004000,%ecx
00000f6f	andl	%ecx,%eax
00000f71	jmp	0x00000f83
00000f73	movl	%eax,(%esp)
00000f76	movl	$0x00004000,0x04(%esp)
00000f7e	calll	___maskrune
00000f83	testl	%eax,%eax
00000f85	jne	0x00000ff5
00000f87	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%esi,%edi)
00000f8b	jne	0x00000f50
00000f8d	jmp	0x00000ff5
00000f8f	movl	0xec(%ebp),%edx
00000f92	addl	%ebx,%edx
00000f94	movl	0x08(%ebp),%ebx
00000f97	movl	0x0c(%ebx),%eax
00000f9a	addl	%edx,%eax
00000f9c	movl	0x1c(%ebx),%ecx
00000f9f	cmpl	%ecx,%eax
00000fa1	movl	%ebx,%edi
00000fa3	jge	0x00000fe1
00000fa5	movl	%edx,0x04(%esp)
00000fa9	movl	%edi,(%esp)
00000fac	movl	%edx,0xec(%ebp)
00000faf	movl	%ecx,%esi
00000fb1	subl	%eax,%esi
00000fb3	subl	$0x80,%eax
00000fb6	cmpl	%ecx,%eax
00000fb8	movl	$0x00000080,%eax
00000fbd	cmovlel	%eax,%esi
00000fc0	movl	%esi,0x08(%esp)
00000fc4	calll	CUtlBuffer::CheckPeekGet(int, int)
00000fc9	movl	0x0c(%edi),%eax
00000fcc	movl	0x1c(%edi),%ebx
00000fcf	subl	%eax,%ebx
00000fd1	cmpl	%esi,%ebx
00000fd3	cmovgel	%esi,%ebx
00000fd6	movl	0xec(%ebp),%edx
00000fd9	testl	%ebx,%ebx
00000fdb	jne	0x00000f30
00000fe1	xorl	%eax,%eax
00000fe3	movl	0xe8(%ebp),%ecx
00000fe6	cmpl	%ecx,%edx
00000fe8	je	0x00001002
00000fea	movl	$0x00000001,%eax
00000fef	subl	%ecx,%eax
00000ff1	addl	%edx,%eax
00000ff3	jmp	0x00001002
00000ff5	movl	$0x00000001,%eax
00000ffa	subl	0xe8(%ebp),%eax
00000ffd	addl	0xec(%ebp),%eax
00001000	addl	%edi,%eax
00001002	addl	$0x1c,%esp
00001005	popl	%esi
00001006	popl	%edi
00001007	popl	%ebx
00001008	popl	%ebp
00001009	ret
0000100a	movl	$0x00000001,%eax
0000100f	subl	0xe8(%ebp),%eax
00001012	addl	0xec(%ebp),%eax
00001015	addl	%ecx,%eax
00001017	jmp	0x00001002
00001019	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::PeekLineLength():
00001020	pushl	%ebp
00001021	movl	%esp,%ebp
00001023	pushl	%ebx
00001024	pushl	%edi
00001025	pushl	%esi
00001026	subl	$0x1c,%esp
00001029	xorl	%eax,%eax
0000102b	movl	0x08(%ebp),%ecx
0000102e	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ecx)
00001032	jne	0x000010eb
00001038	movl	0x0c(%ecx),%ebx
0000103b	movl	0x1c(%ecx),%eax
0000103e	xorl	%edi,%edi
00001040	jmp	0x0000108d
00001042	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001050	movl	%eax,0xf0(%ebp)
00001053	movl	%ebx,%eax
00001055	subl	GetNoEscCharConversion()(%edi),%eax
00001058	addl	(%edi),%eax
0000105a	addl	%ecx,%eax
0000105c	xorl	%esi,%esi
0000105e	movl	%ecx,%edi
00001060	jmp	0x00001071
00001062	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001070	incl	%esi
00001071	cmpl	%edx,%esi
00001073	jge	0x00001088
00001075	movb	(%eax,%esi),%cl
00001078	testb	%cl,%cl
0000107a	je	0x000010e7
0000107c	cmpb	$0x0a,%cl
0000107f	je	0x000010e1
00001081	cmpb	$0x0d,%cl
00001084	jne	0x00001070
00001086	jmp	0x000010e1
00001088	addl	%edx,%edi
0000108a	movl	0xf0(%ebp),%eax
0000108d	addl	%edi,%ebx
0000108f	cmpl	%eax,%ebx
00001091	movl	%edi,%ecx
00001093	movl	0x08(%ebp),%edi
00001096	jge	0x000010d0
00001098	movl	%ecx,0x04(%esp)
0000109c	movl	%edi,(%esp)
0000109f	movl	%eax,%esi
000010a1	subl	%ebx,%esi
000010a3	subl	$0x80,%ebx
000010a6	cmpl	%eax,%ebx
000010a8	movl	$0x00000080,%eax
000010ad	cmovlel	%eax,%esi
000010b0	movl	%esi,0x08(%esp)
000010b4	movl	%ecx,%ebx
000010b6	calll	CUtlBuffer::CheckPeekGet(int, int)
000010bb	movl	%ebx,%ecx
000010bd	movl	0x0c(%edi),%ebx
000010c0	movl	0x1c(%edi),%eax
000010c3	movl	%eax,%edx
000010c5	subl	%ebx,%edx
000010c7	cmpl	%esi,%edx
000010c9	cmovgel	%esi,%edx
000010cc	testl	%edx,%edx
000010ce	jne	0x00001050
000010d0	movl	%ecx,%eax
000010d2	leal	0x01(%eax),%ecx
000010d5	testl	%eax,%eax
000010d7	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%eax
000010dc	cmovnel	%ecx,%eax
000010df	jmp	0x000010eb
000010e1	leal	0x02(%edi,%esi),%eax
000010e5	jmp	0x000010eb
000010e7	leal	0x01(%edi,%esi),%eax
000010eb	addl	$0x1c,%esp
000010ee	popl	%esi
000010ef	popl	%edi
000010f0	popl	%ebx
000010f1	popl	%ebp
000010f2	ret
000010f3	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekStringMatch(int, char const*, int):
00001100	pushl	%ebp
00001101	movl	%esp,%ebp
00001103	pushl	%ebx
00001104	pushl	%edi
00001105	pushl	%esi
00001106	subl	$0x0c,%esp
00001109	movl	0x14(%ebp),%edi
0000110c	movl	%edi,0x08(%esp)
00001110	movl	0x0c(%ebp),%esi
00001113	movl	%esi,0x04(%esp)
00001117	movl	0x08(%ebp),%ebx
0000111a	movl	%ebx,(%esp)
0000111d	calll	CUtlBuffer::CheckPeekGet(int, int)
00001122	xorb	%cl,%cl
00001124	testb	%al,%al
00001126	je	0x0000114c
00001128	movl	GetCStringCharConversion()(%ebp),%ecx
0000112b	addl	0x0c(%ebx),%esi
0000112e	movl	(%ebx),%eax
00001130	movl	GetNoEscCharConversion()(%ebx),%edx
00001133	movl	%edi,0x08(%esp)
00001137	movl	%ecx,0x04(%esp)
0000113b	subl	%edx,%esi
0000113d	addl	%eax,%esi
0000113f	movl	%esi,(%esp)
00001142	calll	V_strncmp(char const*, char const*, int)
00001147	testl	%eax,%eax
00001149	sete	%cl
0000114c	movzbl	%cl,%eax
0000114f	addl	$0x0c,%esp
00001152	popl	%esi
00001153	popl	%edi
00001154	popl	%ebx
00001155	popl	%ebp
00001156	ret
00001157	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool):
00001160	pushl	%ebp
00001161	movl	%esp,%ebp
00001163	pushl	%ebx
00001164	pushl	%edi
00001165	pushl	%esi
00001166	subl	$0x2c,%esp
00001169	calll	0x0000116e
0000116e	popl	%eax
0000116f	movl	0x08(%ebp),%esi
00001172	movb	0x15(%esi),%cl
00001175	andb	$0x01,%cl
00001178	sete	%dl
0000117b	movl	0x0c(%ebp),%edi
0000117e	testl	%edi,%edi
00001180	je	0x00001187
00001182	cmpb	$0x01,%dl
00001185	jne	0x00001196
00001187	movl	%esi,(%esp)
0000118a	calll	CUtlBuffer::PeekStringLength()
0000118f	movl	%eax,%ecx
00001191	jmp	0x000013c3
00001196	xorl	%ebx,%ebx
00001198	testb	%cl,%cl
0000119a	je	0x0000120d
0000119c	xorl	%ebx,%ebx
0000119e	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%esi)
000011a2	jne	0x0000120d
000011a4	movl	0x19013-0x116e(%eax),%eax
000011aa	movl	%eax,0xec(%ebp)
000011ad	xorl	%ebx,%ebx
000011af	jmp	0x000011c1
000011b1	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000011c0	incl	%ebx
000011c1	movl	%ebx,0x04(%esp)
000011c5	movl	%esi,(%esp)
000011c8	movl	$0x00000001,0x08(%esp)
000011d0	calll	CUtlBuffer::CheckPeekGet(int, int)
000011d5	cmpb	$0x01,%al
000011d7	jne	0x0000120d
000011d9	movl	0x0c(%esi),%eax
000011dc	subl	GetNoEscCharConversion()(%esi),%eax
000011df	addl	(%esi),%eax
000011e1	movzbl	(%ebx,%eax),%eax
000011e5	testb	%al,%al
000011e7	js	0x000011f9
000011e9	movl	0xec(%ebp),%ecx
000011ec	movl	0x34(%ecx,%eax,4),%eax
000011f0	movl	$0x00004000,%ecx
000011f5	andl	%ecx,%eax
000011f7	jmp	0x00001209
000011f9	movl	%eax,(%esp)
000011fc	movl	$0x00004000,0x04(%esp)
00001204	calll	___maskrune
00001209	testl	%eax,%eax
0000120b	jne	0x000011c0
0000120d	movl	0x08(%edi),%eax
00001210	movl	%eax,0xec(%ebp)
00001213	movl	0x0c(%edi),%edi
00001216	movl	%edi,0x08(%esp)
0000121a	movl	%ebx,0x04(%esp)
0000121e	movl	%esi,(%esp)
00001221	calll	CUtlBuffer::CheckPeekGet(int, int)
00001226	testb	%al,%al
00001228	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%ecx
0000122d	je	0x000013c3
00001233	movl	0x0c(%esi),%eax
00001236	addl	%ebx,%eax
00001238	movl	(%esi),%ecx
0000123a	movl	GetNoEscCharConversion()(%esi),%edx
0000123d	movl	%edi,0x08(%esp)
00001241	movl	0xec(%ebp),%esi
00001244	movl	%esi,0x04(%esp)
00001248	subl	%edx,%eax
0000124a	addl	%ecx,%eax
0000124c	movl	%eax,(%esp)
0000124f	calll	V_strncmp(char const*, char const*, int)
00001254	xorl	%ecx,%ecx
00001256	testl	%eax,%eax
00001258	jne	0x000013c3
0000125e	movl	0x0c(%ebp),%edi
00001261	movl	0x0c(%edi),%esi
00001264	movl	$0x00000001,0xec(%ebp)
0000126b	movl	%ebx,%eax
0000126d	leal	(%esi,%eax),%ebx
00001270	movl	%eax,0xe4(%ebp)
00001273	jmp	0x00001346
00001278	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001280	movl	(%esi),%ecx
00001282	movl	0x0c(%esi),%eax
00001285	leal	(%eax,%ebx),%edx
00001288	subl	GetNoEscCharConversion()(%esi),%edx
0000128b	movb	(%ecx,%edx),%cl
0000128e	movl	0xec(%ebp),%edx
00001291	leal	0x01(%edx),%edi
00001294	movl	%edi,0xe8(%ebp)
00001297	incl	%ebx
00001298	movl	0x0c(%ebp),%edi
0000129b	cmpb	0x04(%edi),%cl
0000129e	jne	0x0000133d
000012a4	movl	%edi,%ecx
000012a6	movl	%ebx,%edi
000012a8	movl	%edx,%ebx
000012aa	movl	0x14(%ecx),%ecx
000012ad	movl	%ecx,0xf0(%ebp)
000012b0	addl	%edi,%eax
000012b2	movl	0x1c(%esi),%edx
000012b5	cmpl	%edx,%eax
000012b7	jl	0x000012dd
000012b9	jmp	0x0000139a
000012be	movl	%ebx,0x04(%esp)
000012c2	movl	%edi,(%esp)
000012c5	movl	$0x00000001,0x08(%esp)
000012cd	calll	CUtlBuffer::CheckPeekGet(int, int)
000012d2	cmpb	$0x01,%al
000012d4	movl	%edi,%esi
000012d6	je	0x00001280
000012d8	jmp	0x00001395
000012dd	leal	(%eax,%ecx),%esi
000012e0	cmpl	%edx,%esi
000012e2	jle	0x000012eb
000012e4	subl	%eax,%edx
000012e6	movl	%edx,0xf0(%ebp)
000012e9	movl	%edx,%ecx
000012eb	movl	%ecx,0x08(%esp)
000012ef	movl	%edi,%ebx
000012f1	movl	%ebx,0x04(%esp)
000012f5	movl	0x08(%ebp),%esi
000012f8	movl	%esi,(%esp)
000012fb	calll	CUtlBuffer::CheckPeekGet(int, int)
00001300	movl	0x0c(%esi),%eax
00001303	movl	0x1c(%esi),%ecx
00001306	subl	%eax,%ecx
00001308	movl	0xf0(%ebp),%edx
0000130b	cmpl	%edx,%ecx
0000130d	jge	0x00001314
0000130f	movl	%ecx,0xf0(%ebp)
00001312	movl	%ecx,%edx
00001314	testl	%edx,%edx
00001316	movl	0x0c(%ebp),%edi
00001319	je	0x000013a8
0000131f	addl	%ebx,%eax
00001321	subl	GetNoEscCharConversion()(%esi),%eax
00001324	movl	(%edi),%ecx
00001326	movl	(%esi),%edx
00001328	leal	0xf0(%ebp),%esi
0000132b	movl	%esi,0x08(%esp)
0000132f	addl	%eax,%edx
00001331	movl	%edx,0x04(%esp)
00001335	movl	%edi,(%esp)
00001338	call	(%ecx)
0000133a	addl	0xf0(%ebp),%ebx
0000133d	movl	0x0c(%edi),%esi
00001340	movl	0xe8(%ebp),%eax
00001343	movl	%eax,0xec(%ebp)
00001346	movl	0x08(%edi),%eax
00001349	movl	%eax,0xe8(%ebp)
0000134c	movl	%esi,0x08(%esp)
00001350	movl	%ebx,0x04(%esp)
00001354	movl	0x08(%ebp),%edi
00001357	movl	%edi,(%esp)
0000135a	calll	CUtlBuffer::CheckPeekGet(int, int)
0000135f	testb	%al,%al
00001361	je	0x000012be
00001367	movl	0x0c(%edi),%eax
0000136a	addl	%ebx,%eax
0000136c	movl	(%edi),%ecx
0000136e	movl	GetNoEscCharConversion()(%edi),%edx
00001371	movl	%esi,0x08(%esp)
00001375	movl	0xe8(%ebp),%esi
00001378	movl	%esi,0x04(%esp)
0000137c	subl	%edx,%eax
0000137e	addl	%ecx,%eax
00001380	movl	%eax,(%esp)
00001383	calll	V_strncmp(char const*, char const*, int)
00001388	testl	%eax,%eax
0000138a	jne	0x000012be
00001390	movl	0xec(%ebp),%ecx
00001393	jmp	0x000013ab
00001395	movl	0xec(%ebp),%ecx
00001398	jmp	0x000013ab
0000139a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf0(%ebp)
000013a1	movl	%ebx,%ecx
000013a3	incl	%ecx
000013a4	movl	%edi,%ebx
000013a6	jmp	0x000013ab
000013a8	movl	0xe8(%ebp),%ecx
000013ab	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%ebp)
000013af	movl	0xe4(%ebp),%eax
000013b2	jne	0x000013c3
000013b4	movl	$0x00000001,%ecx
000013b9	subl	%eax,%ecx
000013bb	addl	%ebx,%ecx
000013bd	movl	0x0c(%ebp),%eax
000013c0	addl	0x0c(%eax),%ecx
000013c3	movl	%ecx,%eax
000013c5	addl	$0x2c,%esp
000013c8	popl	%esi
000013c9	popl	%edi
000013ca	popl	%ebx
000013cb	popl	%ebp
000013cc	ret
000013cd	nopl	(%eax)
CUtlBuffer::GetString(char*, int):
000013d0	pushl	%ebp
000013d1	movl	%esp,%ebp
000013d3	pushl	%ebx
000013d4	pushl	%edi
000013d5	pushl	%esi
000013d6	subl	$0x1c,%esp
000013d9	calll	0x000013de
000013de	popl	%eax
000013df	movl	%eax,0xec(%ebp)
000013e2	movl	0x0c(%ebp),%eax
000013e5	movl	0x08(%ebp),%edi
000013e8	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000013ec	je	0x000013f6
000013ee	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000013f1	jmp	0x000014e0
000013f6	movl	GetCStringCharConversion()(%ebp),%eax
000013f9	movl	%edi,(%esp)
000013fc	testl	%eax,%eax
000013fe	movl	$0x7fffffff,%ebx
00001403	cmovnel	%eax,%ebx
00001406	calll	CUtlBuffer::PeekStringLength()
0000140b	movl	%eax,%esi
0000140d	testb	$0x01,0x15(%edi)
00001411	je	0x0000141b
00001413	movl	%edi,(%esp)
00001416	calll	CUtlBuffer::EatWhiteSpace()
0000141b	testl	%esi,%esi
0000141d	jne	0x0000142e
0000141f	movl	0x0c(%ebp),%eax
00001422	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001425	orb	$0x02,0x14(%edi)
00001429	jmp	0x000014e0
0000142e	movl	%edi,%ecx
00001430	cmpl	%ebx,%esi
00001432	jg	0x00001455
00001434	leal	0xff(%esi),%eax
00001437	movl	%eax,0x08(%esp)
0000143b	movl	0x0c(%ebp),%edi
0000143e	movl	%edi,0x04(%esp)
00001442	movl	%ecx,%ebx
00001444	movl	%ebx,(%esp)
00001447	calll	CUtlBuffer::Get(void*, int)
0000144c	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%edi,%esi)
00001451	movl	%ebx,%edi
00001453	jmp	0x000014be
00001455	leal	0xff(%ebx),%eax
00001458	movl	%eax,0x08(%esp)
0000145c	movl	0x0c(%ebp),%edi
0000145f	movl	%edi,0x04(%esp)
00001463	movl	%ecx,(%esp)
00001466	calll	CUtlBuffer::Get(void*, int)
0000146b	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%edi,%ebx)
00001470	movl	0x08(%ebp),%edi
00001473	notl	%ebx
00001475	addl	%ebx,%esi
00001477	addl	0x0c(%edi),%esi
0000147a	movl	%esi,0x0c(%edi)
0000147d	movb	0x14(%edi),%al
00001480	cmpl	0x1c(%edi),%esi
00001483	jle	0x0000148c
00001485	orb	$0x02,%al
00001487	movb	%al,0x14(%edi)
0000148a	jmp	0x000014be
0000148c	andb	$0xfd,%al
0000148e	movb	%al,0x14(%edi)
00001491	movl	GetNoEscCharConversion()(%edi),%eax
00001494	cmpl	%eax,%esi
00001496	jl	0x0000149f
00001498	addl	0x04(%edi),%eax
0000149b	cmpl	%eax,%esi
0000149d	jl	0x000014be
0000149f	movl	0x24(%edi),%eax
000014a2	movl	0x28(%edi),%ecx
000014a5	addl	%edi,%ecx
000014a7	testb	$0x01,%al
000014a9	je	0x000014b1
000014ab	movl	(%ecx),%edx
000014ad	movl	0xff(%eax,%edx),%eax
000014b1	movl	%ecx,(%esp)
000014b4	movl	$0xffffffff,0x04(%esp)
000014bc	call	*%eax
000014be	testb	$0x01,0x15(%edi)
000014c2	jne	0x000014e0
000014c4	movl	0xec(%ebp),%eax
000014c7	leal	0x151ef-0x13de(%eax),%eax
000014cd	movl	%eax,0x08(%esp)
000014d1	leal	0xf3(%ebp),%eax
000014d4	movl	%eax,0x04(%esp)
000014d8	movl	%edi,(%esp)
000014db	calll	void CUtlBuffer::GetType<char>(char&, char const*)
000014e0	addl	$0x1c,%esp
000014e3	popl	%esi
000014e4	popl	%edi
000014e5	popl	%ebx
000014e6	popl	%ebp
000014e7	ret
000014e8	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int):
000014f0	pushl	%ebp
000014f1	movl	%esp,%ebp
000014f3	subl	$0x08,%esp
000014f6	movl	GetCStringCharConversion()(%ebp),%ecx
000014f9	movl	0x0c(%ebp),%edx
000014fc	movl	0x08(%ebp),%eax
000014ff	testl	%edx,%edx
00001501	je	0x00001512
00001503	cmpl	$0x01,%edx
00001506	je	0x00001517
00001508	cmpl	$0x02,%edx
0000150b	je	0x0000151f
0000150d	movl	0x0c(%eax),%ecx
00001510	jmp	0x00001529
00001512	movl	%ecx,0x0c(%eax)
00001515	jmp	0x00001529
00001517	addl	0x0c(%eax),%ecx
0000151a	movl	%ecx,0x0c(%eax)
0000151d	jmp	0x00001529
0000151f	movl	0x1c(%eax),%edx
00001522	subl	%ecx,%edx
00001524	movl	%edx,0x0c(%eax)
00001527	movl	%edx,%ecx
00001529	movb	0x14(%eax),%dl
0000152c	cmpl	0x1c(%eax),%ecx
0000152f	jle	0x00001539
00001531	orb	$0x02,%dl
00001534	movb	%dl,0x14(%eax)
00001537	jmp	0x0000156b
00001539	andb	$0xfd,%dl
0000153c	movb	%dl,0x14(%eax)
0000153f	movl	GetNoEscCharConversion()(%eax),%edx
00001542	cmpl	%edx,%ecx
00001544	jl	0x0000154d
00001546	addl	0x04(%eax),%edx
00001549	cmpl	%edx,%ecx
0000154b	jl	0x0000156b
0000154d	movl	0x24(%eax),%ecx
00001550	addl	0x28(%eax),%eax
00001553	testb	$0x01,%cl
00001556	je	0x0000155e
00001558	movl	(%eax),%edx
0000155a	movl	0xff(%ecx,%edx),%ecx
0000155e	movl	%eax,(%esp)
00001561	movl	$0xffffffff,0x04(%esp)
00001569	call	*%ecx
0000156b	addl	$0x08,%esp
0000156e	popl	%ebp
0000156f	ret
CUtlBuffer::GetLine(char*, int):
00001570	pushl	%ebp
00001571	movl	%esp,%ebp
00001573	pushl	%ebx
00001574	pushl	%edi
00001575	pushl	%esi
00001576	subl	$0x0c,%esp
00001579	movl	0x0c(%ebp),%eax
0000157c	movl	0x08(%ebp),%edi
0000157f	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
00001583	je	0x0000158d
00001585	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001588	jmp	0x0000163f
0000158d	movl	GetCStringCharConversion()(%ebp),%eax
00001590	movl	%edi,(%esp)
00001593	testl	%eax,%eax
00001595	movl	$0x7fffffff,%ebx
0000159a	cmovnel	%eax,%ebx
0000159d	calll	CUtlBuffer::PeekLineLength()
000015a2	movl	%eax,%esi
000015a4	testl	%esi,%esi
000015a6	jne	0x000015b7
000015a8	movl	0x0c(%ebp),%eax
000015ab	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000015ae	orb	$0x02,0x14(%edi)
000015b2	jmp	0x0000163f
000015b7	cmpl	%ebx,%esi
000015b9	jg	0x000015d8
000015bb	leal	0xff(%esi),%eax
000015be	movl	%eax,0x08(%esp)
000015c2	movl	0x0c(%ebp),%ebx
000015c5	movl	%ebx,0x04(%esp)
000015c9	movl	%edi,(%esp)
000015cc	calll	CUtlBuffer::Get(void*, int)
000015d1	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%ebx,%esi)
000015d6	jmp	0x0000163f
000015d8	leal	0xff(%ebx),%eax
000015db	movl	%eax,0x08(%esp)
000015df	movl	0x0c(%ebp),%eax
000015e2	movl	%eax,0x04(%esp)
000015e6	movl	%edi,(%esp)
000015e9	calll	CUtlBuffer::Get(void*, int)
000015ee	movl	0x0c(%ebp),%eax
000015f1	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%ebx)
000015f6	notl	%ebx
000015f8	addl	%ebx,%esi
000015fa	addl	0x0c(%edi),%esi
000015fd	movl	%esi,0x0c(%edi)
00001600	movb	0x14(%edi),%al
00001603	cmpl	0x1c(%edi),%esi
00001606	jle	0x0000160f
00001608	orb	$0x02,%al
0000160a	movb	%al,0x14(%edi)
0000160d	jmp	0x0000163f
0000160f	andb	$0xfd,%al
00001611	movb	%al,0x14(%edi)
00001614	movl	GetNoEscCharConversion()(%edi),%eax
00001617	cmpl	%eax,%esi
00001619	jl	0x00001622
0000161b	addl	0x04(%edi),%eax
0000161e	cmpl	%eax,%esi
00001620	jl	0x0000163f
00001622	movl	0x24(%edi),%eax
00001625	addl	0x28(%edi),%edi
00001628	testb	$0x01,%al
0000162a	je	0x00001632
0000162c	movl	(%edi),%ecx
0000162e	movl	0xff(%eax,%ecx),%eax
00001632	movl	%edi,(%esp)
00001635	movl	$0xffffffff,0x04(%esp)
0000163d	call	*%eax
0000163f	addl	$0x0c,%esp
00001642	popl	%esi
00001643	popl	%edi
00001644	popl	%ebx
00001645	popl	%ebp
00001646	ret
00001647	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*):
00001650	pushl	%ebp
00001651	movl	%esp,%ebp
00001653	pushl	%ebx
00001654	pushl	%edi
00001655	pushl	%esi
00001656	subl	$0x1c,%esp
00001659	calll	0x0000165e
0000165e	popl	%eax
0000165f	leal	0x151ef-0x165e(%eax),%eax
00001665	movl	%eax,0x08(%esp)
00001669	leal	0xf3(%ebp),%eax
0000166c	movl	%eax,0x04(%esp)
00001670	movl	0x08(%ebp),%esi
00001673	movl	%esi,(%esp)
00001676	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000167b	movl	0x0c(%ebp),%edi
0000167e	movb	0xf3(%ebp),%bl
00001681	cmpb	0x04(%edi),%bl
00001684	jne	0x00001749
0000168a	movl	0x14(%edi),%eax
0000168d	movl	%eax,0xec(%ebp)
00001690	movl	0x0c(%esi),%edx
00001693	movl	0x1c(%esi),%ecx
00001696	cmpl	%ecx,%edx
00001698	jl	0x000016a8
0000169a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xec(%ebp)
000016a1	xorb	%bl,%bl
000016a3	jmp	0x00001749
000016a8	leal	(%edx,%eax),%ebx
000016ab	cmpl	%ecx,%ebx
000016ad	jle	0x000016b6
000016af	subl	%edx,%ecx
000016b1	movl	%ecx,0xec(%ebp)
000016b4	movl	%ecx,%eax
000016b6	movl	%eax,0x08(%esp)
000016ba	movl	%esi,(%esp)
000016bd	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000016c5	calll	CUtlBuffer::CheckPeekGet(int, int)
000016ca	movl	0x0c(%esi),%eax
000016cd	movl	0x1c(%esi),%ecx
000016d0	subl	%eax,%ecx
000016d2	movl	0xec(%ebp),%edx
000016d5	cmpl	%edx,%ecx
000016d7	jge	0x000016de
000016d9	movl	%ecx,0xec(%ebp)
000016dc	movl	%ecx,%edx
000016de	xorb	%bl,%bl
000016e0	testl	%edx,%edx
000016e2	je	0x00001749
000016e4	subl	GetNoEscCharConversion()(%esi),%eax
000016e7	movl	(%edi),%ecx
000016e9	movl	(%esi),%edx
000016eb	leal	0xec(%ebp),%ebx
000016ee	movl	%ebx,0x08(%esp)
000016f2	addl	%eax,%edx
000016f4	movl	%edx,0x04(%esp)
000016f8	movl	%edi,(%esp)
000016fb	call	(%ecx)
000016fd	movb	%al,%bl
000016ff	movl	0x0c(%esi),%eax
00001702	addl	0xec(%ebp),%eax
00001705	movl	%eax,0x0c(%esi)
00001708	movb	0x14(%esi),%cl
0000170b	cmpl	0x1c(%esi),%eax
0000170e	jle	0x00001718
00001710	orb	$0x02,%cl
00001713	movb	%cl,0x14(%esi)
00001716	jmp	0x00001749
00001718	andb	$0xfd,%cl
0000171b	movb	%cl,0x14(%esi)
0000171e	movl	GetNoEscCharConversion()(%esi),%ecx
00001721	cmpl	%ecx,%eax
00001723	jl	0x0000172c
00001725	addl	0x04(%esi),%ecx
00001728	cmpl	%ecx,%eax
0000172a	jl	0x00001749
0000172c	movl	0x24(%esi),%eax
0000172f	addl	0x28(%esi),%esi
00001732	testb	$0x01,%al
00001734	je	0x0000173c
00001736	movl	(%esi),%ecx
00001738	movl	0xff(%eax,%ecx),%eax
0000173c	movl	%esi,(%esp)
0000173f	movl	$0xffffffff,0x04(%esp)
00001747	call	*%eax
00001749	movsbl	%bl,%eax
0000174c	addl	$0x1c,%esp
0000174f	popl	%esi
00001750	popl	%edi
00001751	popl	%ebx
00001752	popl	%ebp
00001753	ret
00001754	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetDelimitedChar(CUtlCharConversion*):
00001760	pushl	%ebp
00001761	movl	%esp,%ebp
00001763	subl	$0x18,%esp
00001766	calll	0x0000176b
0000176b	popl	%ecx
0000176c	movl	0x08(%ebp),%eax
0000176f	testb	$0x01,0x15(%eax)
00001773	je	0x0000177c
00001775	movl	0x0c(%ebp),%edx
00001778	testl	%edx,%edx
0000177a	jne	0x0000179a
0000177c	leal	0x151ef-0x176b(%ecx),%ecx
00001782	movl	%ecx,0x08(%esp)
00001786	leal	0xff(%ebp),%ecx
00001789	movl	%ecx,0x04(%esp)
0000178d	movl	%eax,(%esp)
00001790	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00001795	movb	0xff(%ebp),%al
00001798	jmp	0x000017a6
0000179a	movl	%edx,0x04(%esp)
0000179e	movl	%eax,(%esp)
000017a1	calll	CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
000017a6	movsbl	%al,%eax
000017a9	addl	$0x18,%esp
000017ac	popl	%ebp
000017ad	ret
000017ae	nop
CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int):
000017b0	pushl	%ebp
000017b1	movl	%esp,%ebp
000017b3	pushl	%ebx
000017b4	pushl	%edi
000017b5	pushl	%esi
000017b6	subl	$0x1c,%esp
000017b9	movl	0x14(%ebp),%ebx
000017bc	movl	GetCStringCharConversion()(%ebp),%eax
000017bf	movl	0x08(%ebp),%edi
000017c2	testb	$0x01,0x15(%edi)
000017c6	je	0x000017cf
000017c8	movl	0x0c(%ebp),%esi
000017cb	testl	%esi,%esi
000017cd	jne	0x000017e1
000017cf	movl	%ebx,0x08(%esp)
000017d3	movl	%eax,0x04(%esp)
000017d7	movl	%edi,(%esp)
000017da	calll	CUtlBuffer::GetString(char*, int)
000017df	jmp	0x000017ea
000017e1	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000017e5	je	0x000017f2
000017e7	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000017ea	addl	$0x1c,%esp
000017ed	popl	%esi
000017ee	popl	%edi
000017ef	popl	%ebx
000017f0	popl	%ebp
000017f1	ret
000017f2	movl	%edi,(%esp)
000017f5	calll	CUtlBuffer::EatWhiteSpace()
000017fa	movl	0x08(%esi),%eax
000017fd	movl	%eax,0xec(%ebp)
00001800	movl	0x0c(%esi),%esi
00001803	movl	%esi,0x08(%esp)
00001807	movl	%edi,(%esp)
0000180a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001812	testl	%ebx,%ebx
00001814	movl	$0x7fffffff,%eax
00001819	cmovnel	%ebx,%eax
0000181c	movl	%eax,0xf0(%ebp)
0000181f	calll	CUtlBuffer::CheckPeekGet(int, int)
00001824	testb	%al,%al
00001826	je	0x000017ea
00001828	movl	(%edi),%ecx
0000182a	movl	0x0c(%edi),%eax
0000182d	subl	GetNoEscCharConversion()(%edi),%eax
00001830	movl	%esi,0x08(%esp)
00001834	movl	0xec(%ebp),%edx
00001837	movl	%edx,0x04(%esp)
0000183b	addl	%ecx,%eax
0000183d	movl	%eax,(%esp)
00001840	calll	V_strncmp(char const*, char const*, int)
00001845	testl	%eax,%eax
00001847	jne	0x000017ea
00001849	movl	0x0c(%edi),%ecx
0000184c	movl	0x0c(%ebp),%eax
0000184f	addl	0x0c(%eax),%ecx
00001852	movl	%ecx,0x0c(%edi)
00001855	movb	0x14(%edi),%al
00001858	cmpl	0x1c(%edi),%ecx
0000185b	jle	0x00001866
0000185d	orb	$0x02,%al
0000185f	movb	%al,0x14(%edi)
00001862	xorl	%esi,%esi
00001864	jmp	0x0000189f
00001866	andb	$0xfd,%al
00001868	movb	%al,0x14(%edi)
0000186b	movl	GetNoEscCharConversion()(%edi),%eax
0000186e	cmpl	%eax,%ecx
00001870	jl	0x0000187b
00001872	addl	0x04(%edi),%eax
00001875	xorl	%esi,%esi
00001877	cmpl	%eax,%ecx
00001879	jl	0x0000189c
0000187b	movl	0x24(%edi),%eax
0000187e	movl	0x28(%edi),%ecx
00001881	addl	%edi,%ecx
00001883	testb	$0x01,%al
00001885	je	0x0000188d
00001887	movl	(%ecx),%edx
00001889	movl	0xff(%eax,%edx),%eax
0000188d	movl	%ecx,(%esp)
00001890	movl	$0xffffffff,0x04(%esp)
00001898	call	*%eax
0000189a	xorl	%esi,%esi
0000189c	movb	0x14(%edi),%al
0000189f	testb	%al,%al
000018a1	jne	0x0000193d
000018a7	movl	0x0c(%ebp),%eax
000018aa	movl	0x08(%eax),%ecx
000018ad	movl	%ecx,0xec(%ebp)
000018b0	movl	0x0c(%eax),%ebx
000018b3	movl	%ebx,0x08(%esp)
000018b7	movl	%edi,(%esp)
000018ba	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
000018c2	calll	CUtlBuffer::CheckPeekGet(int, int)
000018c7	testb	%al,%al
000018c9	je	0x00001954
000018cf	movl	(%edi),%ecx
000018d1	movl	0x0c(%edi),%eax
000018d4	subl	GetNoEscCharConversion()(%edi),%eax
000018d7	movl	%ebx,0x08(%esp)
000018db	movl	0xec(%ebp),%edx
000018de	movl	%edx,0x04(%esp)
000018e2	addl	%ecx,%eax
000018e4	movl	%eax,(%esp)
000018e7	calll	V_strncmp(char const*, char const*, int)
000018ec	testl	%eax,%eax
000018ee	jne	0x00001954
000018f0	movl	0x0c(%edi),%eax
000018f3	movl	0x0c(%ebp),%ecx
000018f6	addl	0x0c(%ecx),%eax
000018f9	movl	%eax,0x0c(%edi)
000018fc	movb	0x14(%edi),%cl
000018ff	cmpl	0x1c(%edi),%eax
00001902	jle	0x0000190c
00001904	orb	$0x02,%cl
00001907	movb	%cl,0x14(%edi)
0000190a	jmp	0x0000193d
0000190c	andb	$0xfd,%cl
0000190f	movb	%cl,0x14(%edi)
00001912	movl	GetNoEscCharConversion()(%edi),%ecx
00001915	cmpl	%ecx,%eax
00001917	jl	0x00001920
00001919	addl	0x04(%edi),%ecx
0000191c	cmpl	%ecx,%eax
0000191e	jl	0x0000193d
00001920	movl	0x24(%edi),%eax
00001923	addl	0x28(%edi),%edi
00001926	testb	$0x01,%al
00001928	je	0x00001930
0000192a	movl	(%edi),%ecx
0000192c	movl	0xff(%eax,%ecx),%eax
00001930	movl	%edi,(%esp)
00001933	movl	$0xffffffff,0x04(%esp)
0000193b	call	*%eax
0000193d	movl	0xf0(%ebp),%eax
00001940	cmpl	%eax,%esi
00001942	leal	0xff(%eax),%eax
00001945	cmovll	%esi,%eax
00001948	movl	GetCStringCharConversion()(%ebp),%ecx
0000194b	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
0000194f	jmp	0x000017ea
00001954	movl	0x0c(%ebp),%eax
00001957	movl	%eax,0x04(%esp)
0000195b	movl	%edi,(%esp)
0000195e	calll	CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
00001963	cmpl	0xf0(%ebp),%esi
00001966	jge	0x0000189c
0000196c	movl	GetCStringCharConversion()(%ebp),%ecx
0000196f	movb	%al,(%ecx,%esi)
00001972	incl	%esi
00001973	jmp	0x0000189c
00001978	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::OnGetOverflow(int):
00001980	pushl	%ebp
00001981	movl	%esp,%ebp
00001983	pushl	%esi
00001984	subl	$0x14,%esp
00001987	movl	0x08(%ebp),%ecx
0000198a	movl	0x24(%ecx),%eax
0000198d	addl	0x28(%ecx),%ecx
00001990	movl	0x0c(%ebp),%edx
00001993	testb	$0x01,%al
00001995	je	0x0000199d
00001997	movl	(%ecx),%esi
00001999	movl	0xff(%eax,%esi),%eax
0000199d	movl	%edx,0x04(%esp)
000019a1	movl	%ecx,(%esp)
000019a4	call	*%eax
000019a6	movzbl	%al,%eax
000019a9	addl	$0x14,%esp
000019ac	popl	%esi
000019ad	popl	%ebp
000019ae	ret
000019af	nop
CUtlBuffer::VaScanf(char const*, char*):
000019b0	pushl	%ebp
000019b1	movl	%esp,%ebp
000019b3	pushl	%ebx
000019b4	pushl	%edi
000019b5	pushl	%esi
000019b6	subl	$0x2c,%esp
000019b9	calll	0x000019be
000019be	popl	%eax
000019bf	movl	%eax,0xdc(%ebp)
000019c2	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xe4(%ebp)
000019c9	movl	0x08(%ebp),%edi
000019cc	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%edi)
000019d0	jne	0x00001d36
000019d6	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xe4(%ebp)
000019dd	testb	$0x01,0x15(%edi)
000019e1	je	0x00001d36
000019e7	movl	GetCStringCharConversion()(%ebp),%ecx
000019ea	movl	0x0c(%ebp),%esi
000019ed	xorl	%eax,%eax
000019ef	jmp	0x00001c30
000019f4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001a00	movl	(%esi),%ebx
00001a02	movl	%edi,(%esp)
00001a05	movl	$0x00000001,0x08(%esp)
00001a0d	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001a15	calll	CUtlBuffer::CheckPeekGet(int, int)
00001a1a	testb	%al,%al
00001a1c	je	0x00001d33
00001a22	movl	(%edi),%eax
00001a24	movl	0x0c(%edi),%ecx
00001a27	subl	GetNoEscCharConversion()(%edi),%ecx
00001a2a	movb	(%eax,%ecx),%al
00001a2d	movb	%al,(%ebx)
00001a2f	incl	0x0c(%edi)
00001a32	movl	0xe8(%ebp),%esi
00001a35	jmp	0x00001c26
00001a3a	movl	%ecx,%ebx
00001a3c	subl	%eax,%ebx
00001a3e	subl	$0x80,%eax
00001a41	cmpl	%ecx,%eax
00001a43	movl	$0x00000080,%eax
00001a48	cmovlel	%eax,%ebx
00001a4b	movl	(%esi),%eax
00001a4d	movl	%eax,0xe0(%ebp)
00001a50	movl	%esi,0xec(%ebp)
00001a53	movl	%ebx,0x08(%esp)
00001a57	movl	%edi,(%esp)
00001a5a	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001a62	calll	CUtlBuffer::CheckPeekGet(int, int)
00001a67	movl	0x0c(%edi),%eax
00001a6a	movl	0x1c(%edi),%ecx
00001a6d	subl	%eax,%ecx
00001a6f	cmpl	%ebx,%ecx
00001a71	cmovgel	%ebx,%ecx
00001a74	testl	%ecx,%ecx
00001a76	jne	0x00001aa3
00001a78	jmp	0x00001d28
00001a7d	movsbl	0xff(%esi),%edx
00001a81	testl	%edx,%edx
00001a83	je	0x00001d36
00001a89	cmpl	$0x72,%edx
00001a8c	jg	0x00001cc4
00001a92	addl	$0x9d,%edx
00001a95	cmpl	$0x06,%edx
00001a98	ja	0x00001d36
00001a9e	jmp	0x00001cb0
00001aa3	subl	GetNoEscCharConversion()(%edi),%eax
00001aa6	movl	(%edi),%ecx
00001aa8	leal	0xf0(%ebp),%edx
00001aab	movl	%edx,0x04(%esp)
00001aaf	addl	%eax,%ecx
00001ab1	movl	%ecx,(%esp)
00001ab4	movl	$0x0000000a,0x08(%esp)
00001abc	calll	_strtol
00001ac1	movl	0xe0(%ebp),%ecx
00001ac4	movl	%eax,(%ecx)
00001ac6	movl	0x0c(%edi),%ecx
00001ac9	movl	%ecx,%eax
00001acb	subl	GetNoEscCharConversion()(%edi),%eax
00001ace	addl	(%edi),%eax
00001ad0	movl	0xf0(%ebp),%edx
00001ad3	cmpl	%eax,%edx
00001ad5	je	0x00001d36
00001adb	addl	%ecx,%edx
00001add	subl	%eax,%edx
00001adf	movl	%edx,0x0c(%edi)
00001ae2	movl	0xe8(%ebp),%esi
00001ae5	jmp	0x00001c26
00001aea	subl	GetNoEscCharConversion()(%edi),%eax
00001aed	movl	(%edi),%ecx
00001aef	leal	0xf0(%ebp),%edx
00001af2	movl	%edx,0x04(%esp)
00001af6	addl	%eax,%ecx
00001af8	movl	%ecx,(%esp)
00001afb	movl	GetCStringCharConversion(),0x08(%esp)
00001b03	calll	_strtol
00001b08	movl	0xe8(%ebp),%ecx
00001b0b	movl	%eax,(%ecx)
00001b0d	movl	0x0c(%edi),%ecx
00001b10	movl	%ecx,%eax
00001b12	subl	GetNoEscCharConversion()(%edi),%eax
00001b15	addl	(%edi),%eax
00001b17	movl	0xf0(%ebp),%edx
00001b1a	cmpl	%eax,%edx
00001b1c	je	0x00001d36
00001b22	addl	%ecx,%edx
00001b24	subl	%eax,%edx
00001b26	movl	%edx,0x0c(%edi)
00001b29	jmp	0x00001c26
00001b2e	movl	%ecx,%ebx
00001b30	subl	%eax,%ebx
00001b32	subl	$0x80,%eax
00001b35	cmpl	%ecx,%eax
00001b37	movl	$0x00000080,%eax
00001b3c	cmovlel	%eax,%ebx
00001b3f	movl	0xec(%ebp),%eax
00001b42	movl	(%eax),%eax
00001b44	movl	%eax,0xe8(%ebp)
00001b47	movl	%ebx,0x08(%esp)
00001b4b	movl	%edi,(%esp)
00001b4e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001b56	calll	CUtlBuffer::CheckPeekGet(int, int)
00001b5b	movl	0x0c(%edi),%eax
00001b5e	movl	0x1c(%edi),%ecx
00001b61	subl	%eax,%ecx
00001b63	cmpl	%ebx,%ecx
00001b65	cmovgel	%ebx,%ecx
00001b68	testl	%ecx,%ecx
00001b6a	je	0x00001d1d
00001b70	subl	GetNoEscCharConversion()(%edi),%eax
00001b73	movl	(%edi),%ecx
00001b75	leal	0xf0(%ebp),%edx
00001b78	movl	%edx,0x04(%esp)
00001b7c	addl	%eax,%ecx
00001b7e	movl	%ecx,(%esp)
00001b81	movl	$0x0000000a,0x08(%esp)
00001b89	calll	_strtoul
00001b8e	jmp	0x00001b08
00001b93	movl	%ecx,%ebx
00001b95	subl	%eax,%ebx
00001b97	subl	$0x80,%eax
00001b9a	cmpl	%ecx,%eax
00001b9c	movl	$0x00000080,%eax
00001ba1	cmovlel	%eax,%ebx
00001ba4	movl	(%esi),%eax
00001ba6	movl	%eax,0xe0(%ebp)
00001ba9	movl	%esi,0xec(%ebp)
00001bac	movl	%ebx,0x08(%esp)
00001bb0	movl	%edi,(%esp)
00001bb3	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001bbb	calll	CUtlBuffer::CheckPeekGet(int, int)
00001bc0	movl	0x0c(%edi),%eax
00001bc3	movl	0x1c(%edi),%ecx
00001bc6	subl	%eax,%ecx
00001bc8	cmpl	%ebx,%ecx
00001bca	cmovgel	%ebx,%ecx
00001bcd	testl	%ecx,%ecx
00001bcf	je	0x00001d28
00001bd5	subl	GetNoEscCharConversion()(%edi),%eax
00001bd8	movl	(%edi),%ecx
00001bda	leal	0xf0(%ebp),%edx
00001bdd	movl	%edx,0x04(%esp)
00001be1	addl	%eax,%ecx
00001be3	movl	%ecx,(%esp)
00001be6	calll	_strtod$UNIX2003
00001beb	movl	0xe0(%ebp),%eax
00001bee	fstps	(%eax)
00001bf0	movl	0x0c(%edi),%ecx
00001bf3	movl	%ecx,%eax
00001bf5	subl	GetNoEscCharConversion()(%edi),%eax
00001bf8	addl	(%edi),%eax
00001bfa	movl	0xf0(%ebp),%edx
00001bfd	cmpl	%eax,%edx
00001bff	movl	0xe8(%ebp),%esi
00001c02	jne	0x00001b22
00001c08	jmp	0x00001d36
00001c0d	movl	0xec(%ebp),%eax
00001c10	movl	(%eax),%eax
00001c12	movl	%eax,0x04(%esp)
00001c16	movl	%edi,(%esp)
00001c19	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%esp)
00001c21	calll	CUtlBuffer::GetString(char*, int)
00001c26	movl	0xe4(%ebp),%eax
00001c29	incl	%eax
00001c2a	movl	0xec(%ebp),%ecx
00001c2d	addl	$0x04,%ecx
00001c30	movl	%ecx,0xec(%ebp)
00001c33	movl	%eax,0xe4(%ebp)
00001c36	addl	$0x02,%esi
00001c39	jmp	0x00001c91
00001c3b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001c40	movl	%edi,(%esp)
00001c43	movl	$0x00000001,0x08(%esp)
00001c4b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001c53	calll	CUtlBuffer::CheckPeekGet(int, int)
00001c58	cmpb	$0x01,%al
00001c5a	jne	0x00001d36
00001c60	movl	(%edi),%ecx
00001c62	movl	0x0c(%edi),%eax
00001c65	movl	%eax,%edx
00001c67	subl	GetNoEscCharConversion()(%edi),%edx
00001c6a	cmpb	(%ecx,%edx),%bl
00001c6d	jne	0x00001d36
00001c73	incl	%eax
00001c74	movl	%eax,0x0c(%edi)
00001c77	incl	%esi
00001c78	jmp	0x00001c91
00001c7a	cmpl	$0x25,%ebx
00001c7d	je	0x00001a7d
00001c83	cmpl	GetNoEscCharConversion(),%ebx
00001c86	jne	0x00001c40
00001c88	movl	%edi,(%esp)
00001c8b	calll	CUtlBuffer::EatWhiteSpace()
00001c90	incl	%esi
00001c91	movsbl	0xfe(%esi),%ebx
00001c95	testl	%ebx,%ebx
00001c97	je	0x00001d36
00001c9d	movl	0x0c(%edi),%eax
00001ca0	movl	0x1c(%edi),%ecx
00001ca3	cmpl	%ecx,%eax
00001ca5	jl	0x00001c7a
00001ca7	orb	$0x02,0x14(%edi)
00001cab	jmp	0x00001d36
00001cb0	movl	%esi,0xe8(%ebp)
00001cb3	movl	0xdc(%ebp),%ebx
00001cb6	movl	0x00000386(%ebx,%edx,4),%edx
00001cbd	addl	%ebx,%edx
00001cbf	movl	0xec(%ebp),%esi
00001cc2	jmp	*%edx
00001cc4	cmpl	$0x73,%edx
00001cc7	je	0x00001c0d
00001ccd	cmpl	$0x75,%edx
00001cd0	je	0x00001b2e
00001cd6	cmpl	$0x78,%edx
00001cd9	jne	0x00001d36
00001cdb	movl	%ecx,%ebx
00001cdd	subl	%eax,%ebx
00001cdf	subl	$0x80,%eax
00001ce2	cmpl	%ecx,%eax
00001ce4	movl	$0x00000080,%eax
00001ce9	cmovlel	%eax,%ebx
00001cec	movl	0xec(%ebp),%eax
00001cef	movl	(%eax),%eax
00001cf1	movl	%eax,0xe8(%ebp)
00001cf4	movl	%ebx,0x08(%esp)
00001cf8	movl	%edi,(%esp)
00001cfb	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001d03	calll	CUtlBuffer::CheckPeekGet(int, int)
00001d08	movl	0x0c(%edi),%eax
00001d0b	movl	0x1c(%edi),%ecx
00001d0e	subl	%eax,%ecx
00001d10	cmpl	%ebx,%ecx
00001d12	cmovgel	%ebx,%ecx
00001d15	testl	%ecx,%ecx
00001d17	jne	0x00001aea
00001d1d	movl	0xe8(%ebp),%eax
00001d20	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001d26	jmp	0x00001d36
00001d28	movl	0xe0(%ebp),%eax
00001d2b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
00001d31	jmp	0x00001d36
00001d33	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00001d36	movl	0xe4(%ebp),%eax
00001d39	addl	$0x2c,%esp
00001d3c	popl	%esi
00001d3d	popl	%edi
00001d3e	popl	%ebx
00001d3f	popl	%ebp
00001d40	ret
00001d41	nopl	(%eax)
00001d44	incl	%edx
00001d45	addb	%al,(%eax)
00001d47	addb	%bh,CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001d4b	addb	%bh,0x03(%eax)
00001d4e	addb	%al,(%eax)
00001d50	aad	$0x1
00001d52	addb	%al,(%eax)
00001d54	js	0x00001d59
00001d56	addb	%al,(%eax)
00001d58	js	0x00001d5d
00001d5a	addb	%al,(%eax)
00001d5c	jl	0x00001d5e
00001d5e	addb	%al,(%eax)
CUtlBuffer::Scanf(char const*, ...):
00001d60	pushl	%ebp
00001d61	movl	%esp,%ebp
00001d63	subl	$0x18,%esp
00001d66	leal	GetCStringCharConversion()(%ebp),%eax
00001d69	movl	%eax,0xfc(%ebp)
00001d6c	movl	%eax,0x08(%esp)
00001d70	movl	0x0c(%ebp),%eax
00001d73	movl	%eax,0x04(%esp)
00001d77	movl	0x08(%ebp),%eax
00001d7a	movl	%eax,(%esp)
00001d7d	calll	CUtlBuffer::VaScanf(char const*, char*)
00001d82	addl	$0x18,%esp
00001d85	popl	%ebp
00001d86	ret
00001d87	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::GetToken(char const*):
00001d90	pushl	%ebp
00001d91	movl	%esp,%ebp
00001d93	pushl	%ebx
00001d94	pushl	%edi
00001d95	pushl	%esi
00001d96	subl	$0x1c,%esp
00001d99	movl	0x0c(%ebp),%eax
00001d9c	movl	%eax,(%esp)
00001d9f	calll	_strlen
00001da4	movl	%eax,0xf0(%ebp)
00001da7	movl	$0x00000001,%ecx
00001dac	subl	%eax,%ecx
00001dae	movl	%ecx,0xec(%ebp)
00001db1	movl	0x08(%ebp),%edi
00001db4	movl	0x04(%edi),%esi
00001db7	movl	0x0c(%edi),%ecx
00001dba	movl	%ecx,0xe4(%ebp)
00001dbd	subl	%ecx,%esi
00001dbf	subl	GetNoEscCharConversion()(%edi),%esi
00001dc2	notl	%eax
00001dc4	movl	%eax,0xe8(%ebp)
00001dc7	jmp	0x00001e4d
00001dcc	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
00001dd0	addl	0xe8(%ebp),%ebx
00001dd3	addl	0x0c(%edi),%ebx
00001dd6	movl	%ebx,0x0c(%edi)
00001dd9	movb	0x14(%edi),%al
00001ddc	cmpl	0x1c(%edi),%ebx
00001ddf	jle	0x00001e10
00001de1	orb	$0x02,%al
00001de3	movb	%al,0x14(%edi)
00001de6	movl	%ebx,%ecx
00001de8	jmp	0x00001e47
00001dea	movl	(%edi),%eax
00001dec	movl	0x0c(%edi),%esi
00001def	subl	GetNoEscCharConversion()(%edi),%esi
00001df2	movl	%ebx,0x08(%esp)
00001df6	movl	0x0c(%ebp),%ecx
00001df9	movl	%ecx,0x04(%esp)
00001dfd	addl	%eax,%esi
00001dff	movl	%esi,(%esp)
00001e02	calll	V_strnistr(char const*, char const*, int)
00001e07	testl	%eax,%eax
00001e09	je	0x00001dd0
00001e0b	jmp	0x00001e94
00001e10	andb	$0xfd,%al
00001e12	movb	%al,0x14(%edi)
00001e15	movl	GetNoEscCharConversion()(%edi),%eax
00001e18	cmpl	%eax,%ebx
00001e1a	jl	0x00001e25
00001e1c	addl	0x04(%edi),%eax
00001e1f	cmpl	%eax,%ebx
00001e21	movl	%ebx,%ecx
00001e23	jl	0x00001e47
00001e25	movl	0x24(%edi),%eax
00001e28	movl	0x28(%edi),%ecx
00001e2b	addl	%edi,%ecx
00001e2d	testb	$0x01,%al
00001e2f	je	0x00001e37
00001e31	movl	(%ecx),%edx
00001e33	movl	0xff(%eax,%edx),%eax
00001e37	movl	%ecx,(%esp)
00001e3a	movl	$0xffffffff,0x04(%esp)
00001e42	call	*%eax
00001e44	movl	0x0c(%edi),%ecx
00001e47	movl	0x04(%edi),%esi
00001e4a	addl	0xec(%ebp),%esi
00001e4d	movl	0x1c(%edi),%edx
00001e50	movl	%edx,%ebx
00001e52	subl	%ecx,%ebx
00001e54	cmpl	%esi,%ebx
00001e56	cmovgel	%esi,%ebx
00001e59	cmpl	%ebx,0xf0(%ebp)
00001e5c	jg	0x00001e7d
00001e5e	movl	%ebx,0x08(%esp)
00001e62	movl	%edi,(%esp)
00001e65	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%esp)
00001e6d	calll	CUtlBuffer::CheckPeekGet(int, int)
00001e72	testb	%al,%al
00001e74	jne	0x00001dea
00001e7a	movl	0x1c(%edi),%edx
00001e7d	movl	0xe4(%ebp),%esi
00001e80	movl	%esi,0x0c(%edi)
00001e83	movb	0x14(%edi),%al
00001e86	cmpl	%edx,%esi
00001e88	jle	0x00001ee8
00001e8a	orb	$0x02,%al
00001e8c	movb	%al,0x14(%edi)
00001e8f	jmp	0x00001f1a
00001e94	addl	0xf0(%ebp),%eax
00001e97	subl	%esi,%eax
00001e99	addl	0x0c(%edi),%eax
00001e9c	movl	%eax,0x0c(%edi)
00001e9f	movb	0x14(%edi),%cl
00001ea2	cmpl	0x1c(%edi),%eax
00001ea5	jle	0x00001eb1
00001ea7	orb	$0x02,%cl
00001eaa	movb	%cl,0x14(%edi)
00001ead	movb	$0x01,%cl
00001eaf	jmp	0x00001f1c
00001eb1	andb	$0xfd,%cl
00001eb4	movb	%cl,0x14(%edi)
00001eb7	movl	GetNoEscCharConversion()(%edi),%edx
00001eba	cmpl	%edx,%eax
00001ebc	jl	0x00001ec7
00001ebe	addl	0x04(%edi),%edx
00001ec1	movb	$0x01,%cl
00001ec3	cmpl	%edx,%eax
00001ec5	jl	0x00001f1c
00001ec7	movl	0x24(%edi),%eax
00001eca	addl	0x28(%edi),%edi
00001ecd	testb	$0x01,%al
00001ecf	je	0x00001ed7
00001ed1	movl	(%edi),%ecx
00001ed3	movl	0xff(%eax,%ecx),%eax
00001ed7	movl	%edi,(%esp)
00001eda	movl	$0xffffffff,0x04(%esp)
00001ee2	call	*%eax
00001ee4	movb	$0x01,%cl
00001ee6	jmp	0x00001f1c
00001ee8	andb	$0xfd,%al
00001eea	movb	%al,0x14(%edi)
00001eed	movl	GetNoEscCharConversion()(%edi),%eax
00001ef0	cmpl	%eax,%esi
00001ef2	jl	0x00001efd
00001ef4	addl	0x04(%edi),%eax
00001ef7	xorb	%cl,%cl
00001ef9	cmpl	%eax,%esi
00001efb	jl	0x00001f1c
00001efd	movl	0x24(%edi),%eax
00001f00	addl	0x28(%edi),%edi
00001f03	testb	$0x01,%al
00001f05	je	0x00001f0d
00001f07	movl	(%edi),%ecx
00001f09	movl	0xff(%eax,%ecx),%eax
00001f0d	movl	%edi,(%esp)
00001f10	movl	$0xffffffff,0x04(%esp)
00001f18	call	*%eax
00001f1a	xorb	%cl,%cl
00001f1c	movzbl	%cl,%eax
00001f1f	addl	$0x1c,%esp
00001f22	popl	%esi
00001f23	popl	%edi
00001f24	popl	%ebx
00001f25	popl	%ebp
00001f26	ret
00001f27	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::ParseToken(char const*, char const*, char*, int):
00001f30	pushl	%ebp
00001f31	movl	%esp,%ebp
00001f33	pushl	%ebx
00001f34	pushl	%edi
00001f35	pushl	%esi
00001f36	subl	$0x2c,%esp
00001f39	calll	0x00001f3e
00001f3e	popl	%eax
00001f3f	movl	%eax,0xec(%ebp)
00001f42	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf2(%ebp)
00001f46	movl	GetCStringCharConversion()(%ebp),%eax
00001f49	movl	%eax,(%esp)
00001f4c	calll	_strlen
00001f51	movl	%eax,0xe4(%ebp)
00001f54	movl	0x08(%ebp),%ebx
00001f57	movl	0x0c(%ebx),%eax
00001f5a	movl	%eax,0xe0(%ebp)
00001f5d	movl	%ebx,(%esp)
00001f60	leal	0xf2(%ebp),%esi
00001f63	movl	0x0c(%ebp),%eax
00001f66	testl	%eax,%eax
00001f68	cmovnel	%eax,%esi
00001f6b	jmp	0x00001f73
00001f6d	nopl	(%eax)
00001f70	movl	%ebx,(%esp)
00001f73	calll	CUtlBuffer::EatWhiteSpace()
00001f78	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00001f80	movzbl	(%esi),%eax
00001f83	testl	%eax,%eax
00001f85	je	0x00002015
00001f8b	movsbl	%al,%ecx
00001f8e	movl	%ecx,0xe8(%ebp)
00001f91	incl	%esi
00001f92	testb	%al,%al
00001f94	js	0x00001fac
00001f96	movl	0xec(%ebp),%ecx
00001f99	movl	0x19013-0x1f3e(%ecx),%ecx
00001f9f	movl	0x34(%ecx,%eax,4),%eax
00001fa3	movl	$0x00004000,%ecx
00001fa8	andl	%ecx,%eax
00001faa	jmp	0x00001fbc
00001fac	movl	%eax,(%esp)
00001faf	movl	$0x00004000,0x04(%esp)
00001fb7	calll	___maskrune
00001fbc	testl	%eax,%eax
00001fbe	jne	0x00001f70
00001fc0	movl	0xec(%ebp),%eax
00001fc3	leal	0x151ef-0x1f3e(%eax),%eax
00001fc9	movl	%eax,0x08(%esp)
00001fcd	leal	0xf3(%ebp),%eax
00001fd0	movl	%eax,0x04(%esp)
00001fd4	movl	%ebx,(%esp)
00001fd7	calll	void CUtlBuffer::GetType<char>(char&, char const*)
00001fdc	movsbl	0xf3(%ebp),%eax
00001fe0	movl	%eax,(%esp)
00001fe3	calll	___tolower
00001fe8	movl	%eax,%edi
00001fea	movl	0xe8(%ebp),%eax
00001fed	movl	%eax,(%esp)
00001ff0	calll	___tolower
00001ff5	cmpl	%eax,%edi
00001ff7	je	0x00001f80
00001ff9	movl	0xe0(%ebp),%ecx
00001ffc	movl	%ecx,0x0c(%ebx)
00001fff	movb	0x14(%ebx),%al
00002002	cmpl	0x1c(%ebx),%ecx
00002005	jle	0x00002167
0000200b	orb	$0x02,%al
0000200d	movb	%al,0x14(%ebx)
00002010	jmp	0x00002197
00002015	movl	%ebx,(%esp)
00002018	calll	CUtlBuffer::EatWhiteSpace()
0000201d	movl	0x0c(%ebx),%esi
00002020	movl	GetCStringCharConversion()(%ebp),%eax
00002023	movl	%eax,0x04(%esp)
00002027	movl	%ebx,(%esp)
0000202a	calll	CUtlBuffer::GetToken(char const*)
0000202f	testb	%al,%al
00002031	je	0x00001ff9
00002033	movl	0x0c(%ebx),%eax
00002036	movl	%eax,0xdc(%ebp)
00002039	subl	0xe4(%ebp),%eax
0000203c	subl	%esi,%eax
0000203e	movl	0x18(%ebp),%ecx
00002041	cmpl	%ecx,%eax
00002043	leal	0xff(%ecx),%edi
00002046	cmovll	%eax,%edi
00002049	testl	%edi,%edi
0000204b	jg	0x0000205b
0000204d	leal	0x14(%ebx),%ecx
00002050	leal	0x1c(%ebx),%eax
00002053	movl	%eax,0xe4(%ebp)
00002056	jmp	0x00002114
0000205b	movl	%esi,0x0c(%ebx)
0000205e	movb	0x14(%ebx),%al
00002061	leal	0x14(%ebx),%ecx
00002064	leal	0x1c(%ebx),%edx
00002067	movl	%edx,0xe4(%ebp)
0000206a	cmpl	0x1c(%ebx),%esi
0000206d	jle	0x00002078
0000206f	orb	$0x02,%al
00002071	movb	%al,(%ecx)
00002073	movl	%ecx,0xe8(%ebp)
00002076	jmp	0x000020ad
00002078	movl	%ecx,0xe8(%ebp)
0000207b	andb	$0xfd,%al
0000207d	movb	%al,0x14(%ebx)
00002080	movl	GetNoEscCharConversion()(%ebx),%eax
00002083	cmpl	%eax,%esi
00002085	jl	0x0000208e
00002087	addl	0x04(%ebx),%eax
0000208a	cmpl	%eax,%esi
0000208c	jl	0x000020ad
0000208e	movl	0x24(%ebx),%eax
00002091	movl	0x28(%ebx),%ecx
00002094	addl	%ebx,%ecx
00002096	testb	$0x01,%al
00002098	je	0x000020a0
0000209a	movl	(%ecx),%edx
0000209c	movl	0xff(%eax,%edx),%eax
000020a0	movl	%ecx,(%esp)
000020a3	movl	$0xffffffff,0x04(%esp)
000020ab	call	*%eax
000020ad	movl	%edi,0x08(%esp)
000020b1	movl	0x14(%ebp),%eax
000020b4	movl	%eax,0x04(%esp)
000020b8	movl	%ebx,(%esp)
000020bb	calll	CUtlBuffer::Get(void*, int)
000020c0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000020c4	jne	0x00001ff9
000020ca	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
000020d0	movl	%edi,%esi
000020d2	testl	%esi,%esi
000020d4	jle	0x0000210f
000020d6	movl	0x14(%ebp),%eax
000020d9	movzbl	0xff(%eax,%esi),%eax
000020de	leal	0xff(%esi),%edi
000020e1	testb	%al,%al
000020e3	js	0x000020fb
000020e5	movl	0xec(%ebp),%ecx
000020e8	movl	0x19013-0x1f3e(%ecx),%ecx
000020ee	movl	0x34(%ecx,%eax,4),%eax
000020f2	movl	$0x00004000,%ecx
000020f7	andl	%ecx,%eax
000020f9	jmp	0x0000210b
000020fb	movl	%eax,(%esp)
000020fe	movl	$0x00004000,0x04(%esp)
00002106	calll	___maskrune
0000210b	testl	%eax,%eax
0000210d	jne	0x000020d0
0000210f	movl	%esi,%edi
00002111	movl	0xe8(%ebp),%ecx
00002114	movl	0x14(%ebp),%eax
00002117	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax,%edi)
0000211b	movl	0xdc(%ebp),%edx
0000211e	movl	%edx,0x0c(%ebx)
00002121	movb	(%ecx),%al
00002123	movl	0xe4(%ebp),%esi
00002126	cmpl	(%esi),%edx
00002128	jle	0x00002132
0000212a	orb	$0x02,%al
0000212c	movb	%al,(%ecx)
0000212e	movb	$0x01,%al
00002130	jmp	0x0000219f
00002132	andb	$0xfd,%al
00002134	movb	%al,(%ecx)
00002136	movl	GetNoEscCharConversion()(%ebx),%ecx
00002139	cmpl	%ecx,%edx
0000213b	jl	0x00002146
0000213d	addl	0x04(%ebx),%ecx
00002140	movb	$0x01,%al
00002142	cmpl	%ecx,%edx
00002144	jl	0x0000219f
00002146	movl	0x24(%ebx),%eax
00002149	addl	0x28(%ebx),%ebx
0000214c	testb	$0x01,%al
0000214e	je	0x00002156
00002150	movl	(%ebx),%ecx
00002152	movl	0xff(%eax,%ecx),%eax
00002156	movl	%ebx,(%esp)
00002159	movl	$0xffffffff,0x04(%esp)
00002161	call	*%eax
00002163	movb	$0x01,%al
00002165	jmp	0x0000219f
00002167	andb	$0xfd,%al
00002169	movb	%al,0x14(%ebx)
0000216c	movl	GetNoEscCharConversion()(%ebx),%eax
0000216f	cmpl	%eax,%ecx
00002171	jl	0x0000217a
00002173	addl	0x04(%ebx),%eax
00002176	cmpl	%eax,%ecx
00002178	jl	0x00002197
0000217a	movl	0x24(%ebx),%eax
0000217d	addl	0x28(%ebx),%ebx
00002180	testb	$0x01,%al
00002182	je	0x0000218a
00002184	movl	(%ebx),%ecx
00002186	movl	0xff(%eax,%ecx),%eax
0000218a	movl	%ebx,(%esp)
0000218d	movl	$0xffffffff,0x04(%esp)
00002195	call	*%eax
00002197	movl	0x14(%ebp),%eax
0000219a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
0000219d	xorb	%al,%al
0000219f	movzbl	%al,%eax
000021a2	addl	$0x2c,%esp
000021a5	popl	%esi
000021a6	popl	%edi
000021a7	popl	%ebx
000021a8	popl	%ebp
000021a9	ret
000021aa	nopw	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::ParseToken(characterset_t*, char*, int, bool):
000021b0	pushl	%ebp
000021b1	movl	%esp,%ebp
000021b3	pushl	%ebx
000021b4	pushl	%edi
000021b5	pushl	%esi
000021b6	subl	$0x1c,%esp
000021b9	calll	0x000021be
000021be	popl	%edi
000021bf	movl	GetCStringCharConversion()(%ebp),%eax
000021c2	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax)
000021c5	movl	0x08(%ebp),%ebx
000021c8	movl	$0xffffffff,%esi
000021cd	nopl	(%eax)
000021d0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000021d4	jne	0x00002319
000021da	movl	%ebx,(%esp)
000021dd	calll	CUtlBuffer::EatWhiteSpace()
000021e2	cmpb	$0x01,0x18(%ebp)
000021e6	jne	0x000021f4
000021e8	movl	%ebx,(%esp)
000021eb	calll	CUtlBuffer::EatCPPComment()
000021f0	testb	%al,%al
000021f2	jne	0x000021d0
000021f4	leal	0x151ef-0x21be(%edi),%edi
000021fa	movl	%edi,0x08(%esp)
000021fe	leal	0xf1(%ebp),%eax
00002201	movl	%eax,0x04(%esp)
00002205	movl	%ebx,(%esp)
00002208	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000220d	movzbl	0xf1(%ebp),%eax
00002211	movl	$0xffffffff,%esi
00002216	testl	%eax,%eax
00002218	je	0x00002319
0000221e	cmpb	$0x22,%al
00002220	jne	0x0000227c
00002222	xorl	%esi,%esi
00002224	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00002230	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00002234	jne	0x00002312
0000223a	movl	%edi,0x08(%esp)
0000223e	leal	0xf3(%ebp),%eax
00002241	movl	%eax,0x04(%esp)
00002245	movl	%ebx,(%esp)
00002248	calll	void CUtlBuffer::GetType<char>(char&, char const*)
0000224d	movb	0xf3(%ebp),%al
00002250	testb	%al,%al
00002252	je	0x00002312
00002258	cmpb	$0x22,%al
0000225a	je	0x00002312
00002260	movl	GetCStringCharConversion()(%ebp),%ecx
00002263	movb	%al,(%ecx,%esi)
00002266	incl	%esi
00002267	cmpl	%esi,0x14(%ebp)
0000226a	jne	0x00002230
0000226c	movl	GetCStringCharConversion()(%ebp),%eax
0000226f	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%esi)
00002274	movl	0x14(%ebp),%esi
00002277	jmp	0x00002319
0000227c	movl	0x0c(%ebp),%ecx
0000227f	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
00002283	jne	0x00002323
00002289	movl	$0x00000001,%ecx
0000228e	nop
00002290	movl	%ecx,%esi
00002292	movl	GetCStringCharConversion()(%ebp),%ecx
00002295	movb	%al,0xff(%ecx,%esi)
00002299	cmpl	%esi,0x14(%ebp)
0000229c	je	0x0000226c
0000229e	movl	%edi,0x08(%esp)
000022a2	leal	0xf2(%ebp),%eax
000022a5	movl	%eax,0x04(%esp)
000022a9	movl	%ebx,(%esp)
000022ac	calll	void CUtlBuffer::GetType<char>(char&, char const*)
000022b1	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000022b5	jne	0x00002312
000022b7	movb	0xf2(%ebp),%al
000022ba	movzbl	%al,%ecx
000022bd	movl	0x0c(%ebp),%edx
000022c0	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%edx,%ecx)
000022c4	jne	0x000022d1
000022c6	cmpb	$0x22,%al
000022c8	je	0x000022d1
000022ca	leal	0x01(%esi),%ecx
000022cd	cmpb	GetNoEscCharConversion(),%al
000022cf	jg	0x00002290
000022d1	movl	0x0c(%ebx),%eax
000022d4	decl	%eax
000022d5	movl	%eax,0x0c(%ebx)
000022d8	cmpl	0x1c(%ebx),%eax
000022db	jle	0x000022e3
000022dd	movb	$0x02,0x14(%ebx)
000022e1	jmp	0x00002312
000022e3	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
000022e7	movl	GetNoEscCharConversion()(%ebx),%ecx
000022ea	cmpl	%ecx,%eax
000022ec	jl	0x000022f5
000022ee	addl	0x04(%ebx),%ecx
000022f1	cmpl	%ecx,%eax
000022f3	jl	0x00002312
000022f5	movl	0x24(%ebx),%eax
000022f8	addl	0x28(%ebx),%ebx
000022fb	testb	$0x01,%al
000022fd	je	0x00002305
000022ff	movl	(%ebx),%ecx
00002301	movl	0xff(%eax,%ecx),%eax
00002305	movl	%ebx,(%esp)
00002308	movl	$0xffffffff,0x04(%esp)
00002310	call	*%eax
00002312	movl	GetCStringCharConversion()(%ebp),%eax
00002315	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%eax,%esi)
00002319	movl	%esi,%eax
0000231b	addl	$0x1c,%esp
0000231e	popl	%esi
0000231f	popl	%edi
00002320	popl	%ebx
00002321	popl	%ebp
00002322	ret
00002323	movl	GetCStringCharConversion()(%ebp),%ecx
00002326	movb	%al,(%ecx)
00002328	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x01(%ecx)
0000232c	movl	$0x00000001,%esi
00002331	jmp	0x00002319
00002333	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Put(void const*, int):
00002340	pushl	%ebp
00002341	movl	%esp,%ebp
00002343	pushl	%ebx
00002344	pushl	%edi
00002345	pushl	%esi
00002346	subl	$0x0c,%esp
00002349	movl	GetCStringCharConversion()(%ebp),%esi
0000234c	testl	%esi,%esi
0000234e	je	0x000023c6
00002350	movl	0x08(%ebp),%edi
00002353	testb	$0x01,0x14(%edi)
00002357	jne	0x000023c6
00002359	testb	$0x08,0x15(%edi)
0000235d	jne	0x000023c6
0000235f	movl	0x0c(%ebp),%ebx
00002362	movl	GetCStringCharConversion()(%edi),%eax
00002365	movl	GetNoEscCharConversion()(%edi),%ecx
00002368	cmpl	%ecx,%eax
0000236a	jl	0x00002376
0000236c	leal	(%eax,%esi),%edx
0000236f	subl	%ecx,%edx
00002371	cmpl	%edx,0x04(%edi)
00002374	jge	0x0000239b
00002376	movl	0x2c(%edi),%eax
00002379	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%ecx
0000237c	addl	%edi,%ecx
0000237e	testb	$0x01,%al
00002380	je	0x00002388
00002382	movl	(%ecx),%edx
00002384	movl	0xff(%eax,%edx),%eax
00002388	movl	%esi,0x04(%esp)
0000238c	movl	%ecx,(%esp)
0000238f	call	*%eax
00002391	cmpb	$0x01,%al
00002393	jne	0x000023c2
00002395	movl	GetCStringCharConversion()(%edi),%eax
00002398	movl	GetNoEscCharConversion()(%edi),%ecx
0000239b	subl	%ecx,%eax
0000239d	js	0x000023c6
0000239f	movl	(%edi),%ecx
000023a1	movl	%esi,0x08(%esp)
000023a5	movl	%ebx,0x04(%esp)
000023a9	addl	%eax,%ecx
000023ab	movl	%ecx,(%esp)
000023ae	calll	_memcpy
000023b3	addl	%esi,GetCStringCharConversion()(%edi)
000023b6	addl	$0x0c,%esp
000023b9	popl	%esi
000023ba	popl	%edi
000023bb	popl	%ebx
000023bc	popl	%ebp
000023bd	jmp	CUtlBuffer::AddNullTermination()
000023c2	orb	$0x01,0x14(%edi)
000023c6	addl	$0x0c,%esp
000023c9	popl	%esi
000023ca	popl	%edi
000023cb	popl	%ebx
000023cc	popl	%ebp
000023cd	ret
000023ce	nop
CUtlBuffer::CheckPut(int):
000023d0	pushl	%ebp
000023d1	movl	%esp,%ebp
000023d3	pushl	%edi
000023d4	pushl	%esi
000023d5	subl	GetCStringCharConversion(),%esp
000023d8	xorb	%cl,%cl
000023da	movl	0x08(%ebp),%esi
000023dd	testb	$0x01,0x14(%esi)
000023e1	jne	0x0000242b
000023e3	xorb	%cl,%cl
000023e5	testb	$0x08,0x15(%esi)
000023e9	jne	0x0000242b
000023eb	movl	0x0c(%ebp),%eax
000023ee	movl	GetCStringCharConversion()(%esi),%edx
000023f1	movl	GetNoEscCharConversion()(%esi),%ecx
000023f4	cmpl	%ecx,%edx
000023f6	jl	0x00002403
000023f8	addl	%eax,%edx
000023fa	subl	%ecx,%edx
000023fc	movb	$0x01,%cl
000023fe	cmpl	%edx,0x04(%esi)
00002401	jge	0x0000242b
00002403	movl	0x2c(%esi),%ecx
00002406	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%edx
00002409	addl	%esi,%edx
0000240b	testb	$0x01,%cl
0000240e	je	0x00002416
00002410	movl	(%edx),%edi
00002412	movl	0xff(%ecx,%edi),%ecx
00002416	movl	%eax,0x04(%esp)
0000241a	movl	%edx,(%esp)
0000241d	call	*%ecx
0000241f	movb	$0x01,%cl
00002421	testb	%al,%al
00002423	jne	0x0000242b
00002425	orb	$0x01,0x14(%esi)
00002429	xorb	%cl,%cl
0000242b	movzbl	%cl,%eax
0000242e	addl	GetCStringCharConversion(),%esp
00002431	popl	%esi
00002432	popl	%edi
00002433	popl	%ebp
00002434	ret
00002435	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::PutString(char const*):
00002440	pushl	%ebp
00002441	movl	%esp,%ebp
00002443	pushl	%ebx
00002444	pushl	%edi
00002445	pushl	%esi
00002446	subl	$0x0c,%esp
00002449	movl	0x08(%ebp),%edi
0000244c	movb	0x15(%edi),%al
0000244f	movl	0x0c(%ebp),%ebx
00002452	testb	$0x01,%al
00002454	jne	0x000024d2
00002456	testl	%ebx,%ebx
00002458	je	0x00002468
0000245a	movl	%ebx,(%esp)
0000245d	calll	_strlen
00002462	incl	%eax
00002463	jmp	0x0000253f
00002468	testb	$0x01,0x14(%edi)
0000246c	jne	0x0000254f
00002472	testb	$0x08,%al
00002474	jne	0x0000254f
0000247a	movl	GetCStringCharConversion()(%edi),%eax
0000247d	movl	GetNoEscCharConversion()(%edi),%ecx
00002480	cmpl	%ecx,%eax
00002482	jl	0x0000248e
00002484	leal	0x01(%eax),%edx
00002487	subl	%ecx,%edx
00002489	cmpl	%edx,0x04(%edi)
0000248c	jge	0x000024bb
0000248e	movl	0x2c(%edi),%eax
00002491	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%ecx
00002494	addl	%edi,%ecx
00002496	testb	$0x01,%al
00002498	je	0x000024a0
0000249a	movl	(%ecx),%edx
0000249c	movl	0xff(%eax,%edx),%eax
000024a0	movl	%ecx,(%esp)
000024a3	movl	$0x00000001,0x04(%esp)
000024ab	call	*%eax
000024ad	cmpb	$0x01,%al
000024af	jne	0x00002557
000024b5	movl	GetCStringCharConversion()(%edi),%eax
000024b8	movl	GetNoEscCharConversion()(%edi),%ecx
000024bb	subl	%ecx,%eax
000024bd	movl	(%edi),%ecx
000024bf	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ecx,%eax)
000024c3	incl	GetCStringCharConversion()(%edi)
000024c6	addl	$0x0c,%esp
000024c9	popl	%esi
000024ca	popl	%edi
000024cb	popl	%ebx
000024cc	popl	%ebp
000024cd	jmp	CUtlBuffer::AddNullTermination()
000024d2	testl	%ebx,%ebx
000024d4	je	0x0000254f
000024d6	testb	GetCStringCharConversion(),%al
000024d8	jne	0x00002533
000024da	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x18(%edi)
000024de	jle	0x00002533
000024e0	movl	GetCStringCharConversion()(%edi),%eax
000024e3	testl	%eax,%eax
000024e5	je	0x000024fb
000024e7	decl	%eax
000024e8	subl	GetNoEscCharConversion()(%edi),%eax
000024eb	movl	(%edi),%ecx
000024ed	cmpb	$0x0a,(%ecx,%eax)
000024f1	jne	0x000024fb
000024f3	movl	%edi,(%esp)
000024f6	calll	CUtlBuffer::PutTabs()
000024fb	movl	%ebx,(%esp)
000024fe	movl	$0x0000000a,0x04(%esp)
00002506	calll	_strchr
0000250b	movl	%eax,%esi
0000250d	testl	%esi,%esi
0000250f	je	0x00002533
00002511	movl	%ebx,0x04(%esp)
00002515	movl	%edi,(%esp)
00002518	movl	$0x00000001,%eax
0000251d	subl	%ebx,%eax
0000251f	addl	%esi,%eax
00002521	movl	%eax,0x08(%esp)
00002525	calll	CUtlBuffer::Put(void const*, int)
0000252a	cmpb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x01(%esi)
0000252e	leal	0x01(%esi),%ebx
00002531	jne	0x000024f3
00002533	movl	%ebx,(%esp)
00002536	calll	_strlen
0000253b	testl	%eax,%eax
0000253d	je	0x0000254f
0000253f	movl	%eax,0x08(%esp)
00002543	movl	%ebx,0x04(%esp)
00002547	movl	%edi,(%esp)
0000254a	calll	CUtlBuffer::Put(void const*, int)
0000254f	addl	$0x0c,%esp
00002552	popl	%esi
00002553	popl	%edi
00002554	popl	%ebx
00002555	popl	%ebp
00002556	ret
00002557	orb	$0x01,0x14(%edi)
0000255b	jmp	0x0000254f
0000255d	nopl	(%eax)
CUtlBuffer::PutDelimitedChar(CUtlCharConversion*, char):
00002560	pushl	%ebp
00002561	movl	%esp,%ebp
00002563	pushl	%ebx
00002564	pushl	%edi
00002565	pushl	%esi
00002566	subl	$0x0c,%esp
00002569	movb	GetCStringCharConversion()(%ebp),%al
0000256c	movl	0x08(%ebp),%ecx
0000256f	testb	$0x01,0x15(%ecx)
00002573	je	0x0000257c
00002575	movl	0x0c(%ebp),%edx
00002578	testl	%edx,%edx
0000257a	jne	0x00002593
0000257c	movsbl	%al,%eax
0000257f	movl	%eax,0x04(%esp)
00002583	movl	%ecx,(%esp)
00002586	calll	CUtlBuffer::PutChar(char)
0000258b	addl	$0x0c,%esp
0000258e	popl	%esi
0000258f	popl	%edi
00002590	popl	%ebx
00002591	popl	%ebp
00002592	ret
00002593	movzbl	%al,%esi
00002596	movl	0x00000118(%edx,%esi,8),%ebx
0000259d	testl	%ebx,%ebx
0000259f	je	0x0000257c
000025a1	movsbl	0x04(%edx),%eax
000025a5	movl	%eax,0x04(%esp)
000025a9	movl	%ecx,(%esp)
000025ac	movl	%edx,%edi
000025ae	calll	CUtlBuffer::PutChar(char)
000025b3	movl	0x0000011c(%edi,%esi,8),%eax
000025ba	movl	%ebx,0x08(%esp)
000025be	movl	%eax,0x04(%esp)
000025c2	movl	0x08(%ebp),%eax
000025c5	movl	%eax,(%esp)
000025c8	calll	CUtlBuffer::Put(void const*, int)
000025cd	jmp	0x0000258b
000025cf	nop
CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*):
000025d0	pushl	%ebp
000025d1	movl	%esp,%ebp
000025d3	pushl	%ebx
000025d4	pushl	%edi
000025d5	pushl	%esi
000025d6	subl	$0x1c,%esp
000025d9	movl	GetCStringCharConversion()(%ebp),%ebx
000025dc	movl	0x08(%ebp),%edi
000025df	testb	$0x01,0x15(%edi)
000025e3	je	0x000025ec
000025e5	movl	0x0c(%ebp),%esi
000025e8	testl	%esi,%esi
000025ea	jne	0x00002600
000025ec	movl	%ebx,0x04(%esp)
000025f0	movl	%edi,(%esp)
000025f3	calll	CUtlBuffer::PutString(char const*)
000025f8	addl	$0x1c,%esp
000025fb	popl	%esi
000025fc	popl	%edi
000025fd	popl	%ebx
000025fe	popl	%ebp
000025ff	ret
00002600	movl	GetCStringCharConversion()(%edi),%eax
00002603	testl	%eax,%eax
00002605	je	0x0000261b
00002607	decl	%eax
00002608	subl	GetNoEscCharConversion()(%edi),%eax
0000260b	movl	(%edi),%ecx
0000260d	cmpb	$0x0a,(%ecx,%eax)
00002611	jne	0x0000261b
00002613	movl	%edi,(%esp)
00002616	calll	CUtlBuffer::PutTabs()
0000261b	movl	0x08(%esi),%eax
0000261e	movl	0x0c(%esi),%ecx
00002621	movl	%ecx,0x08(%esp)
00002625	movl	%eax,0x04(%esp)
00002629	movl	%edi,(%esp)
0000262c	calll	CUtlBuffer::Put(void const*, int)
00002631	testl	%ebx,%ebx
00002633	je	0x000026b5
00002639	movl	%ebx,(%esp)
0000263c	calll	_strlen
00002641	testl	%eax,%eax
00002643	jle	0x000026b5
00002645	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
00002650	movl	%eax,0xec(%ebp)
00002653	movl	%ebx,0xf0(%ebp)
00002656	movl	%edi,%ecx
00002658	movzbl	(%ebx),%ebx
0000265b	movl	0x0c(%ebp),%esi
0000265e	movl	0x00000118(%esi,%ebx,8),%eax
00002665	movl	%eax,0xe8(%ebp)
00002668	testl	%eax,%eax
0000266a	jne	0x0000267f
0000266c	movl	%ecx,%edi
0000266e	movl	%edi,(%esp)
00002671	movsbl	%bl,%eax
00002674	movl	%eax,0x04(%esp)
00002678	calll	CUtlBuffer::PutChar(char)
0000267d	jmp	0x000026ab
0000267f	movsbl	0x04(%esi),%eax
00002683	movl	%eax,0x04(%esp)
00002687	movl	%ecx,%edi
00002689	movl	%edi,(%esp)
0000268c	calll	CUtlBuffer::PutChar(char)
00002691	movl	0x0000011c(%esi,%ebx,8),%eax
00002698	movl	0xe8(%ebp),%ecx
0000269b	movl	%ecx,0x08(%esp)
0000269f	movl	%eax,0x04(%esp)
000026a3	movl	%edi,(%esp)
000026a6	calll	CUtlBuffer::Put(void const*, int)
000026ab	movl	0xf0(%ebp),%ebx
000026ae	incl	%ebx
000026af	movl	0xec(%ebp),%eax
000026b2	decl	%eax
000026b3	jne	0x00002650
000026b5	testb	$0x01,0x15(%edi)
000026b9	je	0x000026d6
000026bb	movl	GetCStringCharConversion()(%edi),%eax
000026be	testl	%eax,%eax
000026c0	je	0x000026d6
000026c2	decl	%eax
000026c3	subl	GetNoEscCharConversion()(%edi),%eax
000026c6	movl	(%edi),%ecx
000026c8	cmpb	$0x0a,(%ecx,%eax)
000026cc	jne	0x000026d6
000026ce	movl	%edi,(%esp)
000026d1	calll	CUtlBuffer::PutTabs()
000026d6	movl	0x0c(%ebp),%ecx
000026d9	movl	0x08(%ecx),%eax
000026dc	movl	0x0c(%ecx),%ecx
000026df	movl	%ecx,0x08(%esp)
000026e3	movl	%eax,0x04(%esp)
000026e7	movl	%edi,(%esp)
000026ea	calll	CUtlBuffer::Put(void const*, int)
000026ef	jmp	0x000025f8
000026f4	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::VaPrintf(char const*, char*):
00002700	pushl	%ebp
00002701	movl	%esp,%ebp
00002703	pushl	%edi
00002704	pushl	%esi
00002705	subl	$0x00000820,%esp
0000270b	calll	0x00002710
00002710	popl	%eax
00002711	movl	0x1901b-0x2710(%eax),%esi
00002717	movl	(%esi),%eax
00002719	movl	%eax,0xf4(%ebp)
0000271c	movl	GetCStringCharConversion()(%ebp),%eax
0000271f	movl	%eax,0x0c(%esp)
00002723	movl	0x0c(%ebp),%eax
00002726	movl	%eax,0x08(%esp)
0000272a	leal	0xfffff7f4(%ebp),%edi
00002730	movl	%edi,(%esp)
00002733	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x04(%esp)
0000273b	calll	V_vsnprintf(char*, int, char const*, char*)
00002740	movl	%edi,0x04(%esp)
00002744	movl	0x08(%ebp),%eax
00002747	movl	%eax,(%esp)
0000274a	calll	CUtlBuffer::PutString(char const*)
0000274f	movl	(%esi),%eax
00002751	cmpl	0xf4(%ebp),%eax
00002754	jne	0x00002760
00002756	addl	$0x00000820,%esp
0000275c	popl	%esi
0000275d	popl	%edi
0000275e	popl	%ebp
0000275f	ret
00002760	calll	___stack_chk_fail
00002765	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Printf(char const*, ...):
00002770	pushl	%ebp
00002771	movl	%esp,%ebp
00002773	pushl	%edi
00002774	pushl	%esi
00002775	subl	$0x00000820,%esp
0000277b	calll	0x00002780
00002780	popl	%eax
00002781	movl	0x1901b-0x2780(%eax),%esi
00002787	movl	(%esi),%eax
00002789	movl	%eax,0xf4(%ebp)
0000278c	leal	GetCStringCharConversion()(%ebp),%eax
0000278f	movl	%eax,0xfffff7f0(%ebp)
00002795	movl	%eax,0x0c(%esp)
00002799	movl	0x0c(%ebp),%eax
0000279c	movl	%eax,0x08(%esp)
000027a0	leal	0xfffff7f4(%ebp),%edi
000027a6	movl	%edi,(%esp)
000027a9	movl	CUtlBuffer::SetExternalBuffer(void*, int, int, int),0x04(%esp)
000027b1	calll	V_vsnprintf(char*, int, char const*, char*)
000027b6	movl	%edi,0x04(%esp)
000027ba	movl	0x08(%ebp),%eax
000027bd	movl	%eax,(%esp)
000027c0	calll	CUtlBuffer::PutString(char const*)
000027c5	movl	(%esi),%eax
000027c7	cmpl	0xf4(%ebp),%eax
000027ca	jne	0x000027d6
000027cc	addl	$0x00000820,%esp
000027d2	popl	%esi
000027d3	popl	%edi
000027d4	popl	%ebp
000027d5	ret
000027d6	calll	___stack_chk_fail
000027db	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::OnPutOverflow(int):
000027e0	pushl	%ebp
000027e1	movl	%esp,%ebp
000027e3	pushl	%esi
000027e4	subl	$0x14,%esp
000027e7	movl	0x08(%ebp),%ecx
000027ea	movl	0x2c(%ecx),%eax
000027ed	addl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%ecx),%ecx
000027f0	movl	0x0c(%ebp),%edx
000027f3	testb	$0x01,%al
000027f5	je	0x000027fd
000027f7	movl	(%ecx),%esi
000027f9	movl	0xff(%eax,%esi),%eax
000027fd	movl	%edx,0x04(%esp)
00002801	movl	%ecx,(%esp)
00002804	call	*%eax
00002806	movzbl	%al,%eax
00002809	addl	$0x14,%esp
0000280c	popl	%esi
0000280d	popl	%ebp
0000280e	ret
0000280f	nop
CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int):
00002810	pushl	%ebp
00002811	movl	%esp,%ebp
00002813	pushl	%ebx
00002814	pushl	%edi
00002815	pushl	%esi
00002816	subl	$0x0c,%esp
00002819	movl	0x08(%ebp),%esi
0000281c	movl	GetCStringCharConversion()(%ebp),%eax
0000281f	movl	0x0c(%ebp),%ecx
00002822	cmpl	$0x02,%ecx
00002825	je	0x0000283b
00002827	movl	GetCStringCharConversion()(%esi),%edi
0000282a	cmpl	$0x01,%ecx
0000282d	je	0x00002837
0000282f	testl	%ecx,%ecx
00002831	jne	0x00002840
00002833	movl	%eax,%edi
00002835	jmp	0x00002840
00002837	addl	%eax,%edi
00002839	jmp	0x00002840
0000283b	movl	0x1c(%esi),%edi
0000283e	subl	%eax,%edi
00002840	movl	0x2c(%esi),%eax
00002843	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%esi),%ecx
00002846	addl	%esi,%ecx
00002848	movl	%edi,%edx
0000284a	notl	%edx
0000284c	testb	$0x01,%al
0000284e	je	0x00002856
00002850	movl	(%ecx),%ebx
00002852	movl	0xff(%eax,%ebx),%eax
00002856	movl	%edx,0x04(%esp)
0000285a	movl	%ecx,(%esp)
0000285d	call	*%eax
0000285f	movl	%edi,GetCStringCharConversion()(%esi)
00002862	addl	$0x0c,%esp
00002865	popl	%esi
00002866	popl	%edi
00002867	popl	%ebx
00002868	popl	%ebp
00002869	jmp	CUtlBuffer::AddNullTermination()
0000286e	nop
CUtlBuffer::ActivateByteSwapping(bool):
00002870	movb	0x08(%esp),%al
00002874	movzbl	%al,%ecx
00002877	leal	(%ecx,%ecx),%eax
0000287a	orl	%ecx,%eax
0000287c	movl	0x04(%esp),%ecx
00002880	movl	0x34(%ecx),%edx
00002883	andl	$0xfc,%edx
00002886	orl	%eax,%edx
00002888	movl	%edx,0x34(%ecx)
0000288b	ret
0000288c	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::SetBigEndian(bool):
00002890	movb	0x08(%esp),%al
00002894	movzbl	%al,%ecx
00002897	leal	(%ecx,%ecx),%eax
0000289a	orl	%ecx,%eax
0000289c	movl	0x04(%esp),%ecx
000028a0	movl	0x34(%ecx),%edx
000028a3	andl	$0xfc,%edx
000028a6	orl	%eax,%edx
000028a8	movl	%edx,0x34(%ecx)
000028ab	ret
000028ac	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax)
CUtlBuffer::IsBigEndian():
000028b0	movl	0x04(%esp),%eax
000028b4	movb	0x34(%eax),%al
000028b7	andb	$0x02,%al
000028b9	shrb	%al
000028bb	movzbl	%al,%eax
000028be	ret
000028bf	nop
CUtlBuffer::ConvertCRLF(CUtlBuffer&):
000028c0	pushl	%ebp
000028c1	movl	%esp,%ebp
000028c3	pushl	%ebx
000028c4	pushl	%edi
000028c5	pushl	%esi
000028c6	subl	$0x3c,%esp
000028c9	calll	0x000028ce
000028ce	popl	%esi
000028cf	movl	0x08(%ebp),%edi
000028d2	movb	0x15(%edi),%al
000028d5	xorb	%cl,%cl
000028d7	testb	$0x01,%al
000028d9	je	0x00002b27
000028df	movl	0x0c(%ebp),%ebx
000028e2	movb	0x15(%ebx),%dl
000028e5	xorb	%cl,%cl
000028e7	testb	$0x01,%dl
000028ea	je	0x00002b27
000028f0	xorb	%dl,%al
000028f2	andb	$0x04,%al
000028f4	shrb	$0x02,%al
000028f7	xorb	%cl,%cl
000028f9	testb	%al,%al
000028fb	je	0x00002b27
00002901	movl	0x1c(%edi),%eax
00002904	movl	%eax,0xdc(%ebp)
00002907	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%ebx)
0000290e	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetCStringCharConversion()(%ebx)
00002915	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),GetNoEscCharConversion()(%ebx)
0000291c	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x1c(%ebx)
00002923	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%ebx)
00002927	cmpl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x08(%ebx)
0000292b	js	0x00002948
0000292d	movl	(%ebx),%eax
0000292f	testl	%eax,%eax
00002931	je	0x00002941
00002933	movl	%eax,(%esp)
00002936	calll	_free
0000293b	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),(%ebx)
00002941	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x04(%ebx)
00002948	movl	0xdc(%ebp),%eax
0000294b	movl	%eax,0x04(%esp)
0000294f	movl	%ebx,(%esp)
00002952	calll	CUtlBuffer::EnsureCapacity(int)
00002957	movb	0x15(%edi),%al
0000295a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xdb(%ebp)
0000295e	testb	$0x01,%al
00002960	je	0x0000296a
00002962	andb	$0x04,%al
00002964	shrb	$0x02,%al
00002967	movb	%al,0xdb(%ebp)
0000296a	movl	(%edi),%eax
0000296c	movl	%eax,0xd4(%ebp)
0000296f	movl	0x0c(%edi),%eax
00002972	movl	%eax,0xe4(%ebp)
00002975	movl	GetCStringCharConversion()(%edi),%eax
00002978	movl	%eax,0xec(%ebp)
0000297b	leal	0x151ec-0x28ce(%esi),%eax
00002981	movl	%eax,0xd0(%ebp)
00002984	xorl	%esi,%esi
00002986	xorl	%ecx,%ecx
00002988	xorl	%eax,%eax
0000298a	jmp	0x00002a52
0000298f	nop
00002990	movl	%edi,0x08(%esp)
00002994	movl	%ebx,(%esp)
00002997	movl	$0x0000000a,0x04(%esp)
0000299f	calll	V_strnchr(char const*, char, int)
000029a4	movl	%eax,%esi
000029a6	testl	%esi,%esi
000029a8	je	0x00002a93
000029ae	subl	%ebx,%esi
000029b0	movl	%esi,0x08(%esp)
000029b4	movl	%ebx,0x04(%esp)
000029b8	movl	0x0c(%ebp),%edi
000029bb	movl	%edi,(%esp)
000029be	calll	CUtlBuffer::Put(void const*, int)
000029c3	movl	%edi,(%esp)
000029c6	movl	$0x0000000d,0x04(%esp)
000029ce	calll	CUtlBuffer::PutChar(char)
000029d3	movl	%edi,(%esp)
000029d6	movl	$0x0000000a,0x04(%esp)
000029de	movl	0xf0(%ebp),%eax
000029e1	leal	0x01(%eax,%esi),%eax
000029e5	movl	%eax,%esi
000029e7	cmpl	%esi,0xec(%ebp)
000029ea	setge	%al
000029ed	movzbl	%al,%edi
000029f0	cmpl	%esi,0xe4(%ebp)
000029f3	setge	%al
000029f6	movzbl	%al,%ebx
000029f9	jmp	0x00002a43
000029fb	subl	%ebx,%esi
000029fd	movl	%esi,0x08(%esp)
00002a01	movl	%ebx,0x04(%esp)
00002a05	movl	0x0c(%ebp),%edi
00002a08	movl	%edi,(%esp)
00002a0b	calll	CUtlBuffer::Put(void const*, int)
00002a10	movl	%edi,(%esp)
00002a13	movl	$0x0000000a,0x04(%esp)
00002a1b	movl	0xf0(%ebp),%ecx
00002a1e	leal	0x01(%ecx,%esi),%eax
00002a22	cmpl	%eax,0xec(%ebp)
00002a25	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%edi
00002a2a	movl	$0xffffffff,%edx
00002a2f	cmovgel	%edx,%edi
00002a32	cmpl	%eax,0xe4(%ebp)
00002a35	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),%ebx
00002a3a	cmovgel	%edx,%ebx
00002a3d	leal	0x02(%ecx,%esi),%ecx
00002a41	movl	%ecx,%esi
00002a43	calll	CUtlBuffer::PutChar(char)
00002a48	movl	0xe8(%ebp),%ecx
00002a4b	addl	%ebx,%ecx
00002a4d	movl	0xe0(%ebp),%eax
00002a50	addl	%edi,%eax
00002a52	movl	%eax,0xe0(%ebp)
00002a55	movl	0xdc(%ebp),%eax
00002a58	cmpl	%eax,%esi
00002a5a	jge	0x00002aa9
00002a5c	movl	%ecx,0xe8(%ebp)
00002a5f	movl	%eax,%edi
00002a61	subl	%esi,%edi
00002a63	movl	0xd4(%ebp),%eax
00002a66	leal	(%eax,%esi),%ebx
00002a69	movl	%esi,0xf0(%ebp)
00002a6c	cmpb	$0x01,0xdb(%ebp)
00002a70	jne	0x00002990
00002a76	movl	%edi,0x08(%esp)
00002a7a	movl	0xd0(%ebp),%eax
00002a7d	movl	%eax,0x04(%esp)
00002a81	movl	%ebx,(%esp)
00002a84	calll	V_strnistr(char const*, char const*, int)
00002a89	movl	%eax,%esi
00002a8b	testl	%esi,%esi
00002a8d	jne	0x000029fb
00002a93	movl	%edi,0x08(%esp)
00002a97	movl	%ebx,0x04(%esp)
00002a9b	movl	0x0c(%ebp),%eax
00002a9e	movl	%eax,(%esp)
00002aa1	calll	CUtlBuffer::Put(void const*, int)
00002aa6	movl	0xe8(%ebp),%ecx
00002aa9	addl	0xe4(%ebp),%ecx
00002aac	movl	0x0c(%ebp),%edi
00002aaf	movl	%ecx,0x0c(%edi)
00002ab2	movb	0x14(%edi),%al
00002ab5	cmpl	0x1c(%edi),%ecx
00002ab8	jle	0x00002ac1
00002aba	orb	$0x02,%al
00002abc	movb	%al,0x14(%edi)
00002abf	jmp	0x00002af3
00002ac1	andb	$0xfd,%al
00002ac3	movb	%al,0x14(%edi)
00002ac6	movl	GetNoEscCharConversion()(%edi),%eax
00002ac9	cmpl	%eax,%ecx
00002acb	jl	0x00002ad4
00002acd	addl	0x04(%edi),%eax
00002ad0	cmpl	%eax,%ecx
00002ad2	jl	0x00002af3
00002ad4	movl	0x24(%edi),%eax
00002ad7	movl	0x28(%edi),%ecx
00002ada	addl	%edi,%ecx
00002adc	testb	$0x01,%al
00002ade	je	0x00002ae6
00002ae0	movl	(%ecx),%edx
00002ae2	movl	0xff(%eax,%edx),%eax
00002ae6	movl	%ecx,(%esp)
00002ae9	movl	$0xffffffff,0x04(%esp)
00002af1	call	*%eax
00002af3	movl	0xe0(%ebp),%eax
00002af6	addl	0xec(%ebp),%eax
00002af9	movl	%eax,%ecx
00002afb	movl	%eax,%ebx
00002afd	notl	%ecx
00002aff	movl	0x2c(%edi),%eax
00002b02	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%edi),%edx
00002b05	addl	%edi,%edx
00002b07	testb	$0x01,%al
00002b09	je	0x00002b11
00002b0b	movl	(%edx),%esi
00002b0d	movl	0xff(%eax,%esi),%eax
00002b11	movl	%ecx,0x04(%esp)
00002b15	movl	%edx,(%esp)
00002b18	call	*%eax
00002b1a	movl	%ebx,GetCStringCharConversion()(%edi)
00002b1d	movl	%edi,(%esp)
00002b20	calll	CUtlBuffer::AddNullTermination()
00002b25	movb	$0x01,%cl
00002b27	movzbl	%cl,%eax
00002b2a	addl	$0x3c,%esp
00002b2d	popl	%esi
00002b2e	popl	%edi
00002b2f	popl	%ebx
00002b30	popl	%ebp
00002b31	ret
00002b32	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Swap(CUtlBuffer&):
00002b40	pushl	%esi
00002b41	movl	0x08(%esp),%eax
00002b45	movl	0x0c(%eax),%edx
00002b48	movl	0x0c(%esp),%ecx
00002b4c	movl	0x0c(%ecx),%esi
00002b4f	movl	%esi,0x0c(%eax)
00002b52	movl	%edx,0x0c(%ecx)
00002b55	movl	GetCStringCharConversion()(%eax),%edx
00002b58	movl	GetCStringCharConversion()(%ecx),%esi
00002b5b	movl	%esi,GetCStringCharConversion()(%eax)
00002b5e	movl	%edx,GetCStringCharConversion()(%ecx)
00002b61	movl	0x1c(%eax),%edx
00002b64	movl	0x1c(%ecx),%esi
00002b67	movl	%esi,0x1c(%eax)
00002b6a	movl	%edx,0x1c(%ecx)
00002b6d	movb	0x14(%eax),%dl
00002b70	movb	0x14(%ecx),%dh
00002b73	movb	%dh,0x14(%eax)
00002b76	movb	%dl,0x14(%ecx)
00002b79	movl	0x08(%eax),%edx
00002b7c	movl	0x08(%ecx),%esi
00002b7f	movl	%esi,0x08(%eax)
00002b82	movl	%edx,0x08(%ecx)
00002b85	movl	(%eax),%edx
00002b87	movl	(%ecx),%esi
00002b89	movl	%esi,(%eax)
00002b8b	movl	%edx,(%ecx)
00002b8d	movl	0x04(%eax),%edx
00002b90	movl	0x04(%ecx),%esi
00002b93	movl	%esi,0x04(%eax)
00002b96	movl	%edx,0x04(%ecx)
00002b99	popl	%esi
00002b9a	ret
00002b9b	nopl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlBuffer::Swap(CUtlMemory<unsigned char, int>&):
00002ba0	pushl	%esi
00002ba1	movl	0x08(%esp),%eax
00002ba5	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x0c(%eax)
00002bac	movl	0x0c(%esp),%ecx
00002bb0	movl	0x04(%ecx),%edx
00002bb3	movl	%edx,GetCStringCharConversion()(%eax)
00002bb6	movl	0x04(%ecx),%edx
00002bb9	movl	%edx,0x1c(%eax)
00002bbc	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0x14(%eax)
00002bc0	movl	0x08(%eax),%edx
00002bc3	movl	0x08(%ecx),%esi
00002bc6	movl	%esi,0x08(%eax)
00002bc9	movl	%edx,0x08(%ecx)
00002bcc	movl	(%eax),%edx
00002bce	movl	(%ecx),%esi
00002bd0	movl	%esi,(%eax)
00002bd2	movl	%edx,(%ecx)
00002bd4	movl	0x04(%eax),%edx
00002bd7	movl	0x04(%ecx),%esi
00002bda	movl	%esi,0x04(%eax)
00002bdd	movl	%edx,0x04(%ecx)
00002be0	popl	%esi
00002be1	ret
00002be2	nopw	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int):
00002bf0	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00002bf5	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int):
00002c00	jmp	CUtlBuffer::CUtlBuffer(int, int, int)
00002c05	nopl	%cs:CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)(%eax,%eax)
CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*):
00002c10	pushl	%ebp
00002c11	movl	%esp,%ebp
00002c13	pushl	%ebx
00002c14	pushl	%edi
00002c15	pushl	%esi
00002c16	subl	$0x0c,%esp
00002c19	movl	0x08(%ebp),%edi
00002c1c	movl	%edi,(%esp)
00002c1f	calll	CUtlBuffer::PeekLineLength()
00002c24	movl	%eax,%esi
00002c26	cmpl	$0x01,%esi
00002c29	jg	0x00002c6a
00002c2b	movl	0x1c(%edi),%ecx
00002c2e	movl	%ecx,0x0c(%edi)
00002c31	andb	$0xfd,0x14(%edi)
00002c35	movl	GetNoEscCharConversion()(%edi),%edx
00002c38	cmpl	%edx,%ecx
00002c3a	jl	0x00002c49
00002c3c	addl	0x04(%edi),%edx
00002c3f	xorb	%al,%al
00002c41	cmpl	%edx,%ecx
00002c43	jl	0x00002cd2
00002c49	movl	0x24(%edi),%eax
00002c4c	addl	0x28(%edi),%edi
00002c4f	testb	$0x01,%al
00002c51	je	0x00002c59
00002c53	movl	(%edi),%ecx
00002c55	movl	0xff(%eax,%ecx),%eax
00002c59	movl	%edi,(%esp)
00002c5c	movl	$0xffffffff,0x04(%esp)
00002c64	call	*%eax
00002c66	xorb	%al,%al
00002c68	jmp	0x00002cd2
00002c6a	movl	(%edi),%edx
00002c6c	movl	0x0c(%edi),%ebx
00002c6f	leal	0xff(%ebx,%esi),%eax
00002c73	movl	GetNoEscCharConversion()(%edi),%ecx
00002c76	movl	%eax,0x0c(%edi)
00002c79	subl	%ecx,%ebx
00002c7b	addl	%edx,%ebx
00002c7d	decl	%esi
00002c7e	movb	0x14(%edi),%dl
00002c81	cmpl	0x1c(%edi),%eax
00002c84	jle	0x00002c8e
00002c86	orb	$0x02,%dl
00002c89	movb	%dl,0x14(%edi)
00002c8c	jmp	0x00002cbc
00002c8e	andb	$0xfd,%dl
00002c91	movb	%dl,0x14(%edi)
00002c94	cmpl	%ecx,%eax
00002c96	jl	0x00002c9f
00002c98	addl	0x04(%edi),%ecx
00002c9b	cmpl	%ecx,%eax
00002c9d	jl	0x00002cbc
00002c9f	movl	0x24(%edi),%eax
00002ca2	addl	0x28(%edi),%edi
00002ca5	testb	$0x01,%al
00002ca7	je	0x00002caf
00002ca9	movl	(%edi),%ecx
00002cab	movl	0xff(%eax,%ecx),%eax
00002caf	movl	%edi,(%esp)
00002cb2	movl	$0xffffffff,0x04(%esp)
00002cba	call	*%eax
00002cbc	movl	0x0c(%ebp),%eax
00002cbf	testl	%eax,%eax
00002cc1	je	0x00002cc5
00002cc3	movl	%ebx,(%eax)
00002cc5	movb	$0x01,%al
00002cc7	movl	GetCStringCharConversion()(%ebp),%ecx
00002cca	testl	%ecx,%ecx
00002ccc	je	0x00002cd2
00002cce	movl	%esi,(%ecx)
00002cd0	movb	$0x01,%al
00002cd2	movzbl	%al,%eax
00002cd5	addl	$0x0c,%esp
00002cd8	popl	%esi
00002cd9	popl	%edi
00002cda	popl	%ebx
00002cdb	popl	%ebp
00002cdc	ret
00002cdd	nopl	(%eax)
CUtlInplaceBuffer::InplaceGetLinePtr():
00002ce0	pushl	%ebp
00002ce1	movl	%esp,%ebp
00002ce3	subl	$0x18,%esp
00002ce6	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xfc(%ebp)
00002ced	movl	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xf8(%ebp)
00002cf4	leal	0xf8(%ebp),%eax
00002cf7	movl	%eax,0x08(%esp)
00002cfb	leal	0xfc(%ebp),%eax
00002cfe	movl	%eax,0x04(%esp)
00002d02	movl	0x08(%ebp),%eax
00002d05	movl	%eax,(%esp)
00002d08	calll	CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*)
00002d0d	cmpb	$0x01,%al
00002d0f	jne	0x00002d4f
00002d11	movl	0xfc(%ebp),%eax
00002d14	movl	0xf8(%ebp),%ecx
00002d17	movsbl	0xff(%ecx,%eax),%edx
00002d1c	cmpl	$0x0a,%edx
00002d1f	je	0x00002d26
00002d21	cmpl	$0x0d,%edx
00002d24	jne	0x00002d4f
00002d26	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xff(%eax,%ecx)
00002d2b	movl	0xf8(%ebp),%eax
00002d2e	leal	0xff(%eax),%ecx
00002d31	movl	%ecx,0xf8(%ebp)
00002d34	testl	%ecx,%ecx
00002d36	je	0x00002d4f
00002d38	movl	0xfc(%ebp),%ecx
00002d3b	movsbl	0xfe(%eax,%ecx),%edx
00002d40	cmpl	$0x0a,%edx
00002d43	je	0x00002d4a
00002d45	cmpl	$0x0d,%edx
00002d48	jne	0x00002d4f
00002d4a	movb	CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*),0xfe(%eax,%ecx)
00002d4f	movl	0xfc(%ebp),%eax
00002d52	addl	$0x18,%esp
00002d55	popl	%ebp
00002d56	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(utlbufferutil.o):
(__TEXT,__text) section
SetSerializationDelimiter(CUtlCharConversion*):
00000000	calll	0x00000005
00000005	popl	%eax
00000006	movl	0x04(%esp),%ecx
0000000a	movl	%ecx,_s_pConv-0x5(%eax)
00000010	ret
00000011	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
SetSerializationArrayDelimiter(char const*):
00000020	calll	0x00000025
00000025	popl	%eax
00000026	movl	0x04(%esp),%ecx
0000002a	movl	%ecx,_s_pUtlBufferUtilArrayDelim-0x25(%eax)
00000030	ret
00000031	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, bool const&):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	pushl	%esi
00000044	subl	$0x14,%esp
00000047	calll	0x0000004c
0000004c	popl	%eax
0000004d	movl	0x0c(%ebp),%ecx
00000050	movb	(%ecx),%cl
00000052	andb	$0x01,%cl
00000055	movl	0x08(%ebp),%esi
00000058	testb	$0x01,0x15(%esi)
0000005c	je	0x00000079
0000005e	movzbl	%cl,%ecx
00000061	movl	%ecx,0x08(%esp)
00000065	leal	0x1726a-0x4c(%eax),%eax
0000006b	movl	%eax,0x04(%esp)
0000006f	movl	%esi,(%esp)
00000072	calll	CUtlBuffer::Printf(char const*, ...)
00000077	jmp	0x00000088
00000079	movzbl	%cl,%eax
0000007c	movl	%eax,0x04(%esp)
00000080	movl	%esi,(%esp)
00000083	calll	CUtlBuffer::PutChar(char)
00000088	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000008c	sete	%al
0000008f	movzbl	%al,%eax
00000092	addl	$0x14,%esp
00000095	popl	%esi
00000096	popl	%ebp
00000097	ret
00000098	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, bool&):
000000a0	pushl	%ebp
000000a1	movl	%esp,%ebp
000000a3	pushl	%edi
000000a4	pushl	%esi
000000a5	subl	SetSerializationArrayDelimiter(char const*),%esp
000000a8	calll	0x000000ad
000000ad	popl	%eax
000000ae	movl	0x0c(%ebp),%edi
000000b1	movl	0x08(%ebp),%esi
000000b4	testb	$0x01,0x15(%esi)
000000b8	je	0x000000ea
000000ba	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000000c1	leal	0xf0(%ebp),%ecx
000000c4	movl	%ecx,0x08(%esp)
000000c8	leal	0x1726a-0xad(%eax),%eax
000000ce	movl	%eax,0x04(%esp)
000000d2	movl	%esi,(%esp)
000000d5	calll	CUtlBuffer::Scanf(char const*, ...)
000000da	cmpl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000000de	setne	(%edi)
000000e1	xorb	%cl,%cl
000000e3	cmpl	$0x01,%eax
000000e6	je	0x00000121
000000e8	jmp	0x00000128
000000ea	movl	%esi,(%esp)
000000ed	movl	$0x00000001,0x04(%esp)
000000f5	calll	CUtlBuffer::CheckGet(int)
000000fa	cmpb	$0x01,%al
000000fc	jne	0x00000119
000000fe	movl	(%esi),%ecx
00000100	movl	0x0c(%esi),%eax
00000103	movl	%eax,%edx
00000105	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000108	movb	(%ecx,%edx),%cl
0000010b	movb	%cl,0xf7(%ebp)
0000010e	incl	%eax
0000010f	movl	%eax,0x0c(%esi)
00000112	testb	%cl,%cl
00000114	setne	%al
00000117	jmp	0x0000011f
00000119	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf7(%ebp)
0000011d	xorb	%al,%al
0000011f	movb	%al,(%edi)
00000121	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000125	sete	%cl
00000128	movzbl	%cl,%eax
0000012b	addl	SetSerializationArrayDelimiter(char const*),%esp
0000012e	popl	%esi
0000012f	popl	%edi
00000130	popl	%ebp
00000131	ret
00000132	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, int const&):
00000140	pushl	%ebp
00000141	movl	%esp,%ebp
00000143	pushl	%edi
00000144	pushl	%esi
00000145	subl	$0x10,%esp
00000148	calll	0x0000014d
0000014d	popl	%eax
0000014e	movl	0x0c(%ebp),%ecx
00000151	movl	(%ecx),%edi
00000153	movl	0x08(%ebp),%esi
00000156	testb	$0x01,0x15(%esi)
0000015a	je	0x00000174
0000015c	movl	%edi,0x08(%esp)
00000160	leal	0x1726a-0x14d(%eax),%eax
00000166	movl	%eax,0x04(%esp)
0000016a	movl	%esi,(%esp)
0000016d	calll	CUtlBuffer::Printf(char const*, ...)
00000172	jmp	0x000001aa
00000174	movl	%esi,(%esp)
00000177	movl	$0x00000004,0x04(%esp)
0000017f	calll	CUtlBuffer::CheckPut(int)
00000184	cmpb	$0x01,%al
00000186	jne	0x000001aa
00000188	movl	0x10(%esi),%eax
0000018b	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
0000018e	addl	(%esi),%eax
00000190	testb	$0x01,0x34(%esi)
00000194	je	0x0000019c
00000196	testl	%eax,%eax
00000198	je	0x0000019e
0000019a	bswap	%edi
0000019c	movl	%edi,(%eax)
0000019e	addl	$0x04,0x10(%esi)
000001a2	movl	%esi,(%esp)
000001a5	calll	CUtlBuffer::AddNullTermination()
000001aa	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000001ae	sete	%al
000001b1	movzbl	%al,%eax
000001b4	addl	$0x10,%esp
000001b7	popl	%esi
000001b8	popl	%edi
000001b9	popl	%ebp
000001ba	ret
000001bb	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, int&):
000001c0	pushl	%ebp
000001c1	movl	%esp,%ebp
000001c3	pushl	%ebx
000001c4	pushl	%edi
000001c5	pushl	%esi
000001c6	subl	$0x1c,%esp
000001c9	calll	0x000001ce
000001ce	popl	%eax
000001cf	movl	0x0c(%ebp),%edi
000001d2	movl	0x08(%ebp),%esi
000001d5	testb	$0x01,0x15(%esi)
000001d9	je	0x000001fa
000001db	movl	%edi,0x08(%esp)
000001df	leal	0x1726a-0x1ce(%eax),%eax
000001e5	movl	%eax,0x04(%esp)
000001e9	movl	%esi,(%esp)
000001ec	calll	CUtlBuffer::Scanf(char const*, ...)
000001f1	xorb	%cl,%cl
000001f3	cmpl	$0x01,%eax
000001f6	je	0x0000025e
000001f8	jmp	0x00000265
000001fa	movl	%esi,(%esp)
000001fd	movl	$0x00000004,0x04(%esp)
00000205	calll	CUtlBuffer::CheckGet(int)
0000020a	cmpb	$0x01,%al
0000020c	jne	0x00000253
0000020e	movl	0x0c(%esi),%eax
00000211	movl	%eax,%edx
00000213	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000216	addl	(%esi),%edx
00000218	testb	$0x01,0x34(%esi)
0000021c	jne	0x00000222
0000021e	movl	(%edx),%ecx
00000220	jmp	0x00000248
00000222	leal	0xf0(%ebp),%ecx
00000225	testl	%edx,%edx
00000227	cmovnel	%edx,%ecx
0000022a	movzbl	0x03(%ecx),%edx
0000022e	movzbl	0x02(%ecx),%ebx
00000232	shll	$0x08,%ebx
00000235	orl	%edx,%ebx
00000237	movzbl	0x01(%ecx),%edx
0000023b	shll	$0x10,%edx
0000023e	orl	%ebx,%edx
00000240	movzbl	(%ecx),%ecx
00000243	shll	$0x18,%ecx
00000246	orl	%edx,%ecx
00000248	movl	%ecx,0xf0(%ebp)
0000024b	addl	$0x04,%eax
0000024e	movl	%eax,0x0c(%esi)
00000251	jmp	0x0000025c
00000253	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
0000025a	xorl	%ecx,%ecx
0000025c	movl	%ecx,(%edi)
0000025e	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000262	sete	%cl
00000265	movzbl	%cl,%eax
00000268	addl	$0x1c,%esp
0000026b	popl	%esi
0000026c	popl	%edi
0000026d	popl	%ebx
0000026e	popl	%ebp
0000026f	ret
Serialize(CUtlBuffer&, float const&):
00000270	pushl	%ebp
00000271	movl	%esp,%ebp
00000273	pushl	%ebx
00000274	pushl	%edi
00000275	pushl	%esi
00000276	subl	$0x0000011c,%esp
0000027c	calll	0x00000281
00000281	popl	%eax
00000282	movl	0x1a404-0x281(%eax),%esi
00000288	movl	(%esi),%ecx
0000028a	movl	%ecx,0xf0(%ebp)
0000028d	movl	0x0c(%ebp),%ecx
00000290	movss	(%ecx),%xmm0
00000294	movl	0x08(%ebp),%edi
00000297	testb	$0x01,0x15(%edi)
0000029b	je	0x00000306
0000029d	cvtss2sd	%xmm0,%xmm0
000002a1	movsd	%xmm0,0x0c(%esp)
000002a7	leal	0x172cc-0x281(%eax),%eax
000002ad	movl	%eax,0x08(%esp)
000002b1	leal	0xfffffef0(%ebp),%ebx
000002b7	movl	%ebx,(%esp)
000002ba	movl	$0x00000100,0x04(%esp)
000002c2	calll	V_snprintf(char*, int, char const*, ...)
000002c7	jmp	0x000002e0
000002c9	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
000002d0	cmpb	$0x30,%cl
000002d3	jne	0x000002f8
000002d5	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000002dd	leal	0xff(%eax),%eax
000002e0	testl	%eax,%eax
000002e2	jle	0x000002f8
000002e4	movb	0xfffffeef(%ebp,%eax),%cl
000002eb	cmpb	$0x2e,%cl
000002ee	jne	0x000002d0
000002f0	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000002f8	movl	%ebx,0x04(%esp)
000002fc	movl	%edi,(%esp)
000002ff	calll	CUtlBuffer::PutString(char const*)
00000304	jmp	0x00000356
00000306	movl	%edi,(%esp)
00000309	movl	$0x00000004,0x04(%esp)
00000311	movss	%xmm0,0xfffffeec(%ebp)
00000319	calll	CUtlBuffer::CheckPut(int)
0000031e	movss	0xfffffeec(%ebp),%xmm0
00000326	testb	%al,%al
00000328	je	0x00000356
0000032a	movl	0x10(%edi),%eax
0000032d	subl	SetSerializationArrayDelimiter(char const*)(%edi),%eax
00000330	addl	(%edi),%eax
00000332	testb	$0x01,0x34(%edi)
00000336	je	0x00000346
00000338	testl	%eax,%eax
0000033a	je	0x0000034a
0000033c	movd	%xmm0,%ecx
00000340	bswap	%ecx
00000342	movd	%ecx,%xmm0
00000346	movss	%xmm0,(%eax)
0000034a	addl	$0x04,0x10(%edi)
0000034e	movl	%edi,(%esp)
00000351	calll	CUtlBuffer::AddNullTermination()
00000356	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%edi)
0000035a	sete	%al
0000035d	movl	(%esi),%ecx
0000035f	cmpl	0xf0(%ebp),%ecx
00000362	jne	0x00000372
00000364	movzbl	%al,%eax
00000367	addl	$0x0000011c,%esp
0000036d	popl	%esi
0000036e	popl	%edi
0000036f	popl	%ebx
00000370	popl	%ebp
00000371	ret
00000372	calll	___stack_chk_fail
00000377	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, float&):
00000380	pushl	%ebp
00000381	movl	%esp,%ebp
00000383	pushl	%edi
00000384	pushl	%esi
00000385	subl	$0x10,%esp
00000388	calll	0x0000038d
0000038d	popl	%eax
0000038e	movl	0x0c(%ebp),%edi
00000391	movl	0x08(%ebp),%esi
00000394	testb	$0x01,0x15(%esi)
00000398	je	0x000003b9
0000039a	movl	%edi,0x08(%esp)
0000039e	leal	0x1726d-0x38d(%eax),%eax
000003a4	movl	%eax,0x04(%esp)
000003a8	movl	%esi,(%esp)
000003ab	calll	CUtlBuffer::Scanf(char const*, ...)
000003b0	xorb	%cl,%cl
000003b2	cmpl	$0x01,%eax
000003b5	je	0x0000040b
000003b7	jmp	0x00000412
000003b9	movl	%esi,(%esp)
000003bc	movl	$0x00000004,0x04(%esp)
000003c4	calll	CUtlBuffer::CheckGet(int)
000003c9	cmpb	$0x01,%al
000003cb	jne	0x000003fc
000003cd	movl	(%esi),%ecx
000003cf	movl	0x0c(%esi),%eax
000003d2	movl	%eax,%edx
000003d4	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000003d7	movss	(%ecx,%edx),%xmm0
000003dc	movss	%xmm0,0xf4(%ebp)
000003e1	testb	$0x01,0x34(%esi)
000003e5	je	0x000003f4
000003e7	movd	%xmm0,%ecx
000003eb	bswap	%ecx
000003ed	movl	%ecx,0xf4(%ebp)
000003f0	movd	%ecx,%xmm0
000003f4	addl	$0x04,%eax
000003f7	movl	%eax,0x0c(%esi)
000003fa	jmp	0x00000407
000003fc	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf4(%ebp)
00000403	pxor	%xmm0,%xmm0
00000407	movss	%xmm0,(%edi)
0000040b	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000040f	sete	%cl
00000412	movzbl	%cl,%eax
00000415	addl	$0x10,%esp
00000418	popl	%esi
00000419	popl	%edi
0000041a	popl	%ebp
0000041b	ret
0000041c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Serialize(CUtlBuffer&, Vector2D const&):
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%ebx
00000424	pushl	%edi
00000425	pushl	%esi
00000426	subl	$0x1c,%esp
00000429	calll	0x0000042e
0000042e	popl	%edi
0000042f	movl	0x0c(%ebp),%ebx
00000432	movl	0x08(%ebp),%esi
00000435	testb	$0x01,0x15(%esi)
00000439	je	0x0000044f
0000043b	movl	%ebx,(%esp)
0000043e	movl	%esi,%ecx
00000440	movl	$0x00000002,%edx
00000445	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000044a	jmp	0x00000517
0000044f	movss	(%ebx),%xmm0
00000453	movss	%xmm0,0xf0(%ebp)
00000458	movl	%esi,(%esp)
0000045b	movl	$0x00000004,0x04(%esp)
00000463	calll	CUtlBuffer::CheckPut(int)
00000468	testb	%al,%al
0000046a	je	0x000004a4
0000046c	movl	0x10(%esi),%eax
0000046f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000472	addl	(%esi),%eax
00000474	testb	$0x01,0x34(%esi)
00000478	jne	0x00000481
0000047a	movss	0xf0(%ebp),%xmm0
0000047f	jmp	0x00000494
00000481	testl	%eax,%eax
00000483	je	0x00000498
00000485	movss	0xf0(%ebp),%xmm0
0000048a	movd	%xmm0,%ecx
0000048e	bswap	%ecx
00000490	movd	%ecx,%xmm0
00000494	movss	%xmm0,(%eax)
00000498	addl	$0x04,0x10(%esi)
0000049c	movl	%esi,(%esp)
0000049f	calll	CUtlBuffer::AddNullTermination()
000004a4	movss	0x04(%ebx),%xmm0
000004a9	testb	$0x01,0x15(%esi)
000004ad	jne	0x000004fb
000004af	movl	%esi,(%esp)
000004b2	movl	$0x00000004,0x04(%esp)
000004ba	movss	%xmm0,0xf0(%ebp)
000004bf	calll	CUtlBuffer::CheckPut(int)
000004c4	movss	0xf0(%ebp),%xmm0
000004c9	testb	%al,%al
000004cb	je	0x00000517
000004cd	movl	0x10(%esi),%eax
000004d0	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000004d3	addl	(%esi),%eax
000004d5	testb	$0x01,0x34(%esi)
000004d9	je	0x000004e9
000004db	testl	%eax,%eax
000004dd	je	0x000004ed
000004df	movd	%xmm0,%ecx
000004e3	bswap	%ecx
000004e5	movd	%ecx,%xmm0
000004e9	movss	%xmm0,(%eax)
000004ed	addl	$0x04,0x10(%esi)
000004f1	movl	%esi,(%esp)
000004f4	calll	CUtlBuffer::AddNullTermination()
000004f9	jmp	0x00000517
000004fb	cvtss2sd	%xmm0,%xmm0
000004ff	movsd	%xmm0,0x08(%esp)
00000505	leal	0x1726d-0x42e(%edi),%eax
0000050b	movl	%eax,0x04(%esp)
0000050f	movl	%esi,(%esp)
00000512	calll	CUtlBuffer::Printf(char const*, ...)
00000517	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000051b	sete	%al
0000051e	movzbl	%al,%eax
00000521	addl	$0x1c,%esp
00000524	popl	%esi
00000525	popl	%edi
00000526	popl	%ebx
00000527	popl	%ebp
00000528	ret
00000529	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
SerializeFloats(CUtlBuffer&, int, float const*):
00000530	pushl	%ebp
00000531	movl	%esp,%ebp
00000533	pushl	%ebx
00000534	pushl	%edi
00000535	pushl	%esi
00000536	subl	$0x0000012c,%esp
0000053c	calll	0x00000541
00000541	popl	%eax
00000542	movl	%edx,%esi
00000544	movl	%ecx,%edi
00000546	movl	0x1a404-0x541(%eax),%ecx
0000054c	movl	%ecx,0xfffffee4(%ebp)
00000552	movl	(%ecx),%ecx
00000554	movl	%ecx,0xf0(%ebp)
00000557	testl	%esi,%esi
00000559	jle	0x0000061b
0000055f	leal	0xff(%esi),%ecx
00000562	movl	%ecx,0xfffffeec(%ebp)
00000568	xorl	%ebx,%ebx
0000056a	leal	0x172cc-0x541(%eax),%eax
00000570	movl	%eax,0xfffffee8(%ebp)
00000576	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
00000580	movl	0x08(%ebp),%eax
00000583	movss	(%eax,%ebx,4),%xmm0
00000588	cvtss2sd	%xmm0,%xmm0
0000058c	movsd	%xmm0,0x0c(%esp)
00000592	movl	0xfffffee8(%ebp),%eax
00000598	movl	%eax,0x08(%esp)
0000059c	leal	0xfffffef0(%ebp),%eax
000005a2	movl	%eax,(%esp)
000005a5	movl	$0x00000100,0x04(%esp)
000005ad	calll	V_snprintf(char*, int, char const*, ...)
000005b2	jmp	0x000005d0
000005b4	nopw	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
000005c0	cmpb	$0x30,%cl
000005c3	jne	0x000005e8
000005c5	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000005cd	leal	0xff(%eax),%eax
000005d0	testl	%eax,%eax
000005d2	jle	0x000005e8
000005d4	movb	0xfffffeef(%ebp,%eax),%cl
000005db	cmpb	$0x2e,%cl
000005de	jne	0x000005c0
000005e0	movb	SetSerializationDelimiter(CUtlCharConversion*),0xfffffeef(%ebp,%eax)
000005e8	leal	0xfffffef0(%ebp),%eax
000005ee	movl	%eax,0x04(%esp)
000005f2	movl	%edi,(%esp)
000005f5	calll	CUtlBuffer::PutString(char const*)
000005fa	cmpl	0xfffffeec(%ebp),%ebx
00000600	je	0x00000612
00000602	movl	%edi,(%esp)
00000605	movl	SetSerializationArrayDelimiter(char const*),0x04(%esp)
0000060d	calll	CUtlBuffer::PutChar(char)
00000612	incl	%ebx
00000613	cmpl	%esi,%ebx
00000615	jne	0x00000580
0000061b	movl	0xfffffee4(%ebp),%eax
00000621	movl	(%eax),%eax
00000623	cmpl	0xf0(%ebp),%eax
00000626	jne	0x00000633
00000628	addl	$0x0000012c,%esp
0000062e	popl	%esi
0000062f	popl	%edi
00000630	popl	%ebx
00000631	popl	%ebp
00000632	ret
00000633	calll	___stack_chk_fail
00000638	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, Vector2D&):
00000640	pushl	%ebp
00000641	movl	%esp,%ebp
00000643	pushl	%ebx
00000644	pushl	%edi
00000645	pushl	%esi
00000646	subl	$0x1c,%esp
00000649	calll	0x0000064e
0000064e	popl	%ebx
0000064f	movl	0x0c(%ebp),%edi
00000652	movl	0x08(%ebp),%esi
00000655	testb	$0x01,0x15(%esi)
00000659	je	0x00000688
0000065b	movl	%edi,0x08(%esp)
0000065f	leal	0x17270-0x64e(%ebx),%eax
00000665	movl	%eax,0x04(%esp)
00000669	movl	%esi,(%esp)
0000066c	addl	$0x04,%edi
0000066f	movl	%edi,0x0c(%esp)
00000673	calll	CUtlBuffer::Scanf(char const*, ...)
00000678	xorb	%cl,%cl
0000067a	cmpl	$0x02,%eax
0000067d	je	0x0000075a
00000683	jmp	0x00000761
00000688	movl	%esi,(%esp)
0000068b	movl	$0x00000004,0x04(%esp)
00000693	calll	CUtlBuffer::CheckGet(int)
00000698	cmpb	$0x01,%al
0000069a	jne	0x000006cb
0000069c	movl	(%esi),%ecx
0000069e	movl	0x0c(%esi),%eax
000006a1	movl	%eax,%edx
000006a3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000006a6	movss	(%ecx,%edx),%xmm0
000006ab	movss	%xmm0,0xf0(%ebp)
000006b0	testb	$0x01,0x34(%esi)
000006b4	je	0x000006c3
000006b6	movd	%xmm0,%ecx
000006ba	bswap	%ecx
000006bc	movl	%ecx,0xf0(%ebp)
000006bf	movd	%ecx,%xmm0
000006c3	addl	$0x04,%eax
000006c6	movl	%eax,0x0c(%esi)
000006c9	jmp	0x000006d6
000006cb	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000006d2	pxor	%xmm0,%xmm0
000006d6	movss	%xmm0,(%edi)
000006da	testb	$0x01,0x15(%esi)
000006de	jne	0x00000730
000006e0	movl	%esi,(%esp)
000006e3	movl	$0x00000004,0x04(%esp)
000006eb	calll	CUtlBuffer::CheckGet(int)
000006f0	cmpb	$0x01,%al
000006f2	jne	0x00000723
000006f4	movl	(%esi),%ecx
000006f6	movl	0x0c(%esi),%eax
000006f9	movl	%eax,%edx
000006fb	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000006fe	movss	(%ecx,%edx),%xmm0
00000703	movss	%xmm0,0xec(%ebp)
00000708	testb	$0x01,0x34(%esi)
0000070c	je	0x0000071b
0000070e	movd	%xmm0,%ecx
00000712	bswap	%ecx
00000714	movl	%ecx,0xec(%ebp)
00000717	movd	%ecx,%xmm0
0000071b	addl	$0x04,%eax
0000071e	movl	%eax,0x0c(%esi)
00000721	jmp	0x00000755
00000723	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
0000072a	pxor	%xmm0,%xmm0
0000072e	jmp	0x00000755
00000730	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000737	leal	0xec(%ebp),%eax
0000073a	movl	%eax,0x08(%esp)
0000073e	leal	0x1726d-0x64e(%ebx),%eax
00000744	movl	%eax,0x04(%esp)
00000748	movl	%esi,(%esp)
0000074b	calll	CUtlBuffer::Scanf(char const*, ...)
00000750	movss	0xec(%ebp),%xmm0
00000755	movss	%xmm0,0x04(%edi)
0000075a	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000075e	sete	%cl
00000761	movzbl	%cl,%eax
00000764	addl	$0x1c,%esp
00000767	popl	%esi
00000768	popl	%edi
00000769	popl	%ebx
0000076a	popl	%ebp
0000076b	ret
0000076c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Serialize(CUtlBuffer&, Vector const&):
00000770	pushl	%ebp
00000771	movl	%esp,%ebp
00000773	pushl	%ebx
00000774	pushl	%edi
00000775	pushl	%esi
00000776	subl	$0x1c,%esp
00000779	calll	0x0000077e
0000077e	popl	%edi
0000077f	movl	0x0c(%ebp),%ebx
00000782	movl	0x08(%ebp),%esi
00000785	testb	$0x01,0x15(%esi)
00000789	je	0x0000079f
0000078b	movl	%ebx,(%esp)
0000078e	movl	%esi,%ecx
00000790	movl	$0x00000003,%edx
00000795	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000079a	jmp	0x000008da
0000079f	movss	(%ebx),%xmm0
000007a3	movss	%xmm0,0xf0(%ebp)
000007a8	movl	%esi,(%esp)
000007ab	movl	$0x00000004,0x04(%esp)
000007b3	calll	CUtlBuffer::CheckPut(int)
000007b8	testb	%al,%al
000007ba	je	0x000007f4
000007bc	movl	0x10(%esi),%eax
000007bf	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000007c2	addl	(%esi),%eax
000007c4	testb	$0x01,0x34(%esi)
000007c8	jne	0x000007d1
000007ca	movss	0xf0(%ebp),%xmm0
000007cf	jmp	0x000007e4
000007d1	testl	%eax,%eax
000007d3	je	0x000007e8
000007d5	movss	0xf0(%ebp),%xmm0
000007da	movd	%xmm0,%ecx
000007de	bswap	%ecx
000007e0	movd	%ecx,%xmm0
000007e4	movss	%xmm0,(%eax)
000007e8	addl	$0x04,0x10(%esi)
000007ec	movl	%esi,(%esp)
000007ef	calll	CUtlBuffer::AddNullTermination()
000007f4	movss	0x04(%ebx),%xmm0
000007f9	testb	$0x01,0x15(%esi)
000007fd	jne	0x0000084b
000007ff	movl	%esi,(%esp)
00000802	movl	$0x00000004,0x04(%esp)
0000080a	movss	%xmm0,0xf0(%ebp)
0000080f	calll	CUtlBuffer::CheckPut(int)
00000814	movss	0xf0(%ebp),%xmm0
00000819	testb	%al,%al
0000081b	je	0x00000867
0000081d	movl	0x10(%esi),%eax
00000820	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000823	addl	(%esi),%eax
00000825	testb	$0x01,0x34(%esi)
00000829	je	0x00000839
0000082b	testl	%eax,%eax
0000082d	je	0x0000083d
0000082f	movd	%xmm0,%ecx
00000833	bswap	%ecx
00000835	movd	%ecx,%xmm0
00000839	movss	%xmm0,(%eax)
0000083d	addl	$0x04,0x10(%esi)
00000841	movl	%esi,(%esp)
00000844	calll	CUtlBuffer::AddNullTermination()
00000849	jmp	0x00000867
0000084b	cvtss2sd	%xmm0,%xmm0
0000084f	movsd	%xmm0,0x08(%esp)
00000855	leal	0x1726d-0x77e(%edi),%eax
0000085b	movl	%eax,0x04(%esp)
0000085f	movl	%esi,(%esp)
00000862	calll	CUtlBuffer::Printf(char const*, ...)
00000867	movss	0x08(%ebx),%xmm0
0000086c	testb	$0x01,0x15(%esi)
00000870	jne	0x000008be
00000872	movl	%esi,(%esp)
00000875	movl	$0x00000004,0x04(%esp)
0000087d	movss	%xmm0,0xf0(%ebp)
00000882	calll	CUtlBuffer::CheckPut(int)
00000887	movss	0xf0(%ebp),%xmm0
0000088c	testb	%al,%al
0000088e	je	0x000008da
00000890	movl	0x10(%esi),%eax
00000893	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000896	addl	(%esi),%eax
00000898	testb	$0x01,0x34(%esi)
0000089c	je	0x000008ac
0000089e	testl	%eax,%eax
000008a0	je	0x000008b0
000008a2	movd	%xmm0,%ecx
000008a6	bswap	%ecx
000008a8	movd	%ecx,%xmm0
000008ac	movss	%xmm0,(%eax)
000008b0	addl	$0x04,0x10(%esi)
000008b4	movl	%esi,(%esp)
000008b7	calll	CUtlBuffer::AddNullTermination()
000008bc	jmp	0x000008da
000008be	cvtss2sd	%xmm0,%xmm0
000008c2	movsd	%xmm0,0x08(%esp)
000008c8	leal	0x1726d-0x77e(%edi),%eax
000008ce	movl	%eax,0x04(%esp)
000008d2	movl	%esi,(%esp)
000008d5	calll	CUtlBuffer::Printf(char const*, ...)
000008da	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000008de	sete	%al
000008e1	movzbl	%al,%eax
000008e4	addl	$0x1c,%esp
000008e7	popl	%esi
000008e8	popl	%edi
000008e9	popl	%ebx
000008ea	popl	%ebp
000008eb	ret
000008ec	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Unserialize(CUtlBuffer&, Vector&):
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%ebx
000008f4	pushl	%edi
000008f5	pushl	%esi
000008f6	subl	$0x2c,%esp
000008f9	calll	0x000008fe
000008fe	popl	%ebx
000008ff	movl	0x0c(%ebp),%edi
00000902	movl	0x08(%ebp),%esi
00000905	testb	$0x01,0x15(%esi)
00000909	je	0x0000093f
0000090b	movl	%edi,0x08(%esp)
0000090f	leal	0x17276-0x8fe(%ebx),%eax
00000915	movl	%eax,0x04(%esp)
00000919	movl	%esi,(%esp)
0000091c	leal	0x08(%edi),%eax
0000091f	movl	%eax,0x10(%esp)
00000923	addl	$0x04,%edi
00000926	movl	%edi,0x0c(%esp)
0000092a	calll	CUtlBuffer::Scanf(char const*, ...)
0000092f	xorb	%cl,%cl
00000931	cmpl	$0x03,%eax
00000934	je	0x00000a91
0000093a	jmp	0x00000a98
0000093f	movl	%esi,(%esp)
00000942	movl	$0x00000004,0x04(%esp)
0000094a	calll	CUtlBuffer::CheckGet(int)
0000094f	cmpb	$0x01,%al
00000951	jne	0x00000982
00000953	movl	(%esi),%ecx
00000955	movl	0x0c(%esi),%eax
00000958	movl	%eax,%edx
0000095a	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
0000095d	movss	(%ecx,%edx),%xmm0
00000962	movss	%xmm0,0xec(%ebp)
00000967	testb	$0x01,0x34(%esi)
0000096b	je	0x0000097a
0000096d	movd	%xmm0,%ecx
00000971	bswap	%ecx
00000973	movl	%ecx,0xec(%ebp)
00000976	movd	%ecx,%xmm0
0000097a	addl	$0x04,%eax
0000097d	movl	%eax,0x0c(%esi)
00000980	jmp	0x0000098d
00000982	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000989	pxor	%xmm0,%xmm0
0000098d	movss	%xmm0,(%edi)
00000991	testb	$0x01,0x15(%esi)
00000995	jne	0x000009e7
00000997	movl	%esi,(%esp)
0000099a	movl	$0x00000004,0x04(%esp)
000009a2	calll	CUtlBuffer::CheckGet(int)
000009a7	cmpb	$0x01,%al
000009a9	jne	0x000009da
000009ab	movl	(%esi),%ecx
000009ad	movl	0x0c(%esi),%eax
000009b0	movl	%eax,%edx
000009b2	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000009b5	movss	(%ecx,%edx),%xmm0
000009ba	movss	%xmm0,0xf0(%ebp)
000009bf	testb	$0x01,0x34(%esi)
000009c3	je	0x000009d2
000009c5	movd	%xmm0,%ecx
000009c9	bswap	%ecx
000009cb	movl	%ecx,0xf0(%ebp)
000009ce	movd	%ecx,%xmm0
000009d2	addl	$0x04,%eax
000009d5	movl	%eax,0x0c(%esi)
000009d8	jmp	0x00000a0c
000009da	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000009e1	pxor	%xmm0,%xmm0
000009e5	jmp	0x00000a0c
000009e7	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
000009ee	leal	0xf0(%ebp),%eax
000009f1	movl	%eax,0x08(%esp)
000009f5	leal	0x1726d-0x8fe(%ebx),%eax
000009fb	movl	%eax,0x04(%esp)
000009ff	movl	%esi,(%esp)
00000a02	calll	CUtlBuffer::Scanf(char const*, ...)
00000a07	movss	0xf0(%ebp),%xmm0
00000a0c	movss	%xmm0,0x04(%edi)
00000a11	testb	$0x01,0x15(%esi)
00000a15	jne	0x00000a67
00000a17	movl	%esi,(%esp)
00000a1a	movl	$0x00000004,0x04(%esp)
00000a22	calll	CUtlBuffer::CheckGet(int)
00000a27	cmpb	$0x01,%al
00000a29	jne	0x00000a5a
00000a2b	movl	(%esi),%ecx
00000a2d	movl	0x0c(%esi),%eax
00000a30	movl	%eax,%edx
00000a32	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000a35	movss	(%ecx,%edx),%xmm0
00000a3a	movss	%xmm0,0xe8(%ebp)
00000a3f	testb	$0x01,0x34(%esi)
00000a43	je	0x00000a52
00000a45	movd	%xmm0,%ecx
00000a49	bswap	%ecx
00000a4b	movl	%ecx,0xe8(%ebp)
00000a4e	movd	%ecx,%xmm0
00000a52	addl	$0x04,%eax
00000a55	movl	%eax,0x0c(%esi)
00000a58	jmp	0x00000a8c
00000a5a	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000a61	pxor	%xmm0,%xmm0
00000a65	jmp	0x00000a8c
00000a67	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000a6e	leal	0xe8(%ebp),%eax
00000a71	movl	%eax,0x08(%esp)
00000a75	leal	0x1726d-0x8fe(%ebx),%eax
00000a7b	movl	%eax,0x04(%esp)
00000a7f	movl	%esi,(%esp)
00000a82	calll	CUtlBuffer::Scanf(char const*, ...)
00000a87	movss	0xe8(%ebp),%xmm0
00000a8c	movss	%xmm0,0x08(%edi)
00000a91	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000a95	sete	%cl
00000a98	movzbl	%cl,%eax
00000a9b	addl	$0x2c,%esp
00000a9e	popl	%esi
00000a9f	popl	%edi
00000aa0	popl	%ebx
00000aa1	popl	%ebp
00000aa2	ret
00000aa3	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, Vector4D const&):
00000ab0	pushl	%ebp
00000ab1	movl	%esp,%ebp
00000ab3	pushl	%ebx
00000ab4	pushl	%edi
00000ab5	pushl	%esi
00000ab6	subl	$0x1c,%esp
00000ab9	calll	0x00000abe
00000abe	popl	%edi
00000abf	movl	0x0c(%ebp),%ebx
00000ac2	movl	0x08(%ebp),%esi
00000ac5	testb	$0x01,0x15(%esi)
00000ac9	je	0x00000adf
00000acb	movl	%ebx,(%esp)
00000ace	movl	%esi,%ecx
00000ad0	movl	$0x00000004,%edx
00000ad5	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00000ada	jmp	0x00000c8d
00000adf	movss	(%ebx),%xmm0
00000ae3	movss	%xmm0,0xf0(%ebp)
00000ae8	movl	%esi,(%esp)
00000aeb	movl	$0x00000004,0x04(%esp)
00000af3	calll	CUtlBuffer::CheckPut(int)
00000af8	testb	%al,%al
00000afa	je	0x00000b34
00000afc	movl	0x10(%esi),%eax
00000aff	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000b02	addl	(%esi),%eax
00000b04	testb	$0x01,0x34(%esi)
00000b08	jne	0x00000b11
00000b0a	movss	0xf0(%ebp),%xmm0
00000b0f	jmp	0x00000b24
00000b11	testl	%eax,%eax
00000b13	je	0x00000b28
00000b15	movss	0xf0(%ebp),%xmm0
00000b1a	movd	%xmm0,%ecx
00000b1e	bswap	%ecx
00000b20	movd	%ecx,%xmm0
00000b24	movss	%xmm0,(%eax)
00000b28	addl	$0x04,0x10(%esi)
00000b2c	movl	%esi,(%esp)
00000b2f	calll	CUtlBuffer::AddNullTermination()
00000b34	movss	0x04(%ebx),%xmm0
00000b39	testb	$0x01,0x15(%esi)
00000b3d	jne	0x00000b8b
00000b3f	movl	%esi,(%esp)
00000b42	movl	$0x00000004,0x04(%esp)
00000b4a	movss	%xmm0,0xf0(%ebp)
00000b4f	calll	CUtlBuffer::CheckPut(int)
00000b54	movss	0xf0(%ebp),%xmm0
00000b59	testb	%al,%al
00000b5b	je	0x00000ba7
00000b5d	movl	0x10(%esi),%eax
00000b60	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000b63	addl	(%esi),%eax
00000b65	testb	$0x01,0x34(%esi)
00000b69	je	0x00000b79
00000b6b	testl	%eax,%eax
00000b6d	je	0x00000b7d
00000b6f	movd	%xmm0,%ecx
00000b73	bswap	%ecx
00000b75	movd	%ecx,%xmm0
00000b79	movss	%xmm0,(%eax)
00000b7d	addl	$0x04,0x10(%esi)
00000b81	movl	%esi,(%esp)
00000b84	calll	CUtlBuffer::AddNullTermination()
00000b89	jmp	0x00000ba7
00000b8b	cvtss2sd	%xmm0,%xmm0
00000b8f	movsd	%xmm0,0x08(%esp)
00000b95	leal	0x1726d-0xabe(%edi),%eax
00000b9b	movl	%eax,0x04(%esp)
00000b9f	movl	%esi,(%esp)
00000ba2	calll	CUtlBuffer::Printf(char const*, ...)
00000ba7	movss	0x08(%ebx),%xmm0
00000bac	testb	$0x01,0x15(%esi)
00000bb0	jne	0x00000bfe
00000bb2	movl	%esi,(%esp)
00000bb5	movl	$0x00000004,0x04(%esp)
00000bbd	movss	%xmm0,0xf0(%ebp)
00000bc2	calll	CUtlBuffer::CheckPut(int)
00000bc7	movss	0xf0(%ebp),%xmm0
00000bcc	testb	%al,%al
00000bce	je	0x00000c1a
00000bd0	movl	0x10(%esi),%eax
00000bd3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000bd6	addl	(%esi),%eax
00000bd8	testb	$0x01,0x34(%esi)
00000bdc	je	0x00000bec
00000bde	testl	%eax,%eax
00000be0	je	0x00000bf0
00000be2	movd	%xmm0,%ecx
00000be6	bswap	%ecx
00000be8	movd	%ecx,%xmm0
00000bec	movss	%xmm0,(%eax)
00000bf0	addl	$0x04,0x10(%esi)
00000bf4	movl	%esi,(%esp)
00000bf7	calll	CUtlBuffer::AddNullTermination()
00000bfc	jmp	0x00000c1a
00000bfe	cvtss2sd	%xmm0,%xmm0
00000c02	movsd	%xmm0,0x08(%esp)
00000c08	leal	0x1726d-0xabe(%edi),%eax
00000c0e	movl	%eax,0x04(%esp)
00000c12	movl	%esi,(%esp)
00000c15	calll	CUtlBuffer::Printf(char const*, ...)
00000c1a	movss	0x0c(%ebx),%xmm0
00000c1f	testb	$0x01,0x15(%esi)
00000c23	jne	0x00000c71
00000c25	movl	%esi,(%esp)
00000c28	movl	$0x00000004,0x04(%esp)
00000c30	movss	%xmm0,0xf0(%ebp)
00000c35	calll	CUtlBuffer::CheckPut(int)
00000c3a	movss	0xf0(%ebp),%xmm0
00000c3f	testb	%al,%al
00000c41	je	0x00000c8d
00000c43	movl	0x10(%esi),%eax
00000c46	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000c49	addl	(%esi),%eax
00000c4b	testb	$0x01,0x34(%esi)
00000c4f	je	0x00000c5f
00000c51	testl	%eax,%eax
00000c53	je	0x00000c63
00000c55	movd	%xmm0,%ecx
00000c59	bswap	%ecx
00000c5b	movd	%ecx,%xmm0
00000c5f	movss	%xmm0,(%eax)
00000c63	addl	$0x04,0x10(%esi)
00000c67	movl	%esi,(%esp)
00000c6a	calll	CUtlBuffer::AddNullTermination()
00000c6f	jmp	0x00000c8d
00000c71	cvtss2sd	%xmm0,%xmm0
00000c75	movsd	%xmm0,0x08(%esp)
00000c7b	leal	0x1726d-0xabe(%edi),%eax
00000c81	movl	%eax,0x04(%esp)
00000c85	movl	%esi,(%esp)
00000c88	calll	CUtlBuffer::Printf(char const*, ...)
00000c8d	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000c91	sete	%al
00000c94	movzbl	%al,%eax
00000c97	addl	$0x1c,%esp
00000c9a	popl	%esi
00000c9b	popl	%edi
00000c9c	popl	%ebx
00000c9d	popl	%ebp
00000c9e	ret
00000c9f	nop
Unserialize(CUtlBuffer&, Vector4D&):
00000ca0	pushl	%ebp
00000ca1	movl	%esp,%ebp
00000ca3	pushl	%ebx
00000ca4	pushl	%edi
00000ca5	pushl	%esi
00000ca6	subl	$0x2c,%esp
00000ca9	calll	0x00000cae
00000cae	popl	%ebx
00000caf	movl	0x0c(%ebp),%edi
00000cb2	movl	0x08(%ebp),%esi
00000cb5	testb	$0x01,0x15(%esi)
00000cb9	je	0x00000cf6
00000cbb	movl	%edi,0x08(%esp)
00000cbf	leal	0x1727f-0xcae(%ebx),%eax
00000cc5	movl	%eax,0x04(%esp)
00000cc9	movl	%esi,(%esp)
00000ccc	leal	0x0c(%edi),%eax
00000ccf	movl	%eax,0x14(%esp)
00000cd3	leal	0x08(%edi),%eax
00000cd6	movl	%eax,0x10(%esp)
00000cda	addl	$0x04,%edi
00000cdd	movl	%edi,0x0c(%esp)
00000ce1	calll	CUtlBuffer::Scanf(char const*, ...)
00000ce6	xorb	%cl,%cl
00000ce8	cmpl	$0x04,%eax
00000ceb	je	0x00000ec8
00000cf1	jmp	0x00000ecf
00000cf6	movl	%esi,(%esp)
00000cf9	movl	$0x00000004,0x04(%esp)
00000d01	calll	CUtlBuffer::CheckGet(int)
00000d06	cmpb	$0x01,%al
00000d08	jne	0x00000d39
00000d0a	movl	(%esi),%ecx
00000d0c	movl	0x0c(%esi),%eax
00000d0f	movl	%eax,%edx
00000d11	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000d14	movss	(%ecx,%edx),%xmm0
00000d19	movss	%xmm0,0xe8(%ebp)
00000d1e	testb	$0x01,0x34(%esi)
00000d22	je	0x00000d31
00000d24	movd	%xmm0,%ecx
00000d28	bswap	%ecx
00000d2a	movl	%ecx,0xe8(%ebp)
00000d2d	movd	%ecx,%xmm0
00000d31	addl	$0x04,%eax
00000d34	movl	%eax,0x0c(%esi)
00000d37	jmp	0x00000d44
00000d39	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00000d40	pxor	%xmm0,%xmm0
00000d44	movss	%xmm0,(%edi)
00000d48	testb	$0x01,0x15(%esi)
00000d4c	jne	0x00000d9e
00000d4e	movl	%esi,(%esp)
00000d51	movl	$0x00000004,0x04(%esp)
00000d59	calll	CUtlBuffer::CheckGet(int)
00000d5e	cmpb	$0x01,%al
00000d60	jne	0x00000d91
00000d62	movl	(%esi),%ecx
00000d64	movl	0x0c(%esi),%eax
00000d67	movl	%eax,%edx
00000d69	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000d6c	movss	(%ecx,%edx),%xmm0
00000d71	movss	%xmm0,0xec(%ebp)
00000d76	testb	$0x01,0x34(%esi)
00000d7a	je	0x00000d89
00000d7c	movd	%xmm0,%ecx
00000d80	bswap	%ecx
00000d82	movl	%ecx,0xec(%ebp)
00000d85	movd	%ecx,%xmm0
00000d89	addl	$0x04,%eax
00000d8c	movl	%eax,0x0c(%esi)
00000d8f	jmp	0x00000dc3
00000d91	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000d98	pxor	%xmm0,%xmm0
00000d9c	jmp	0x00000dc3
00000d9e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00000da5	leal	0xec(%ebp),%eax
00000da8	movl	%eax,0x08(%esp)
00000dac	leal	0x1726d-0xcae(%ebx),%eax
00000db2	movl	%eax,0x04(%esp)
00000db6	movl	%esi,(%esp)
00000db9	calll	CUtlBuffer::Scanf(char const*, ...)
00000dbe	movss	0xec(%ebp),%xmm0
00000dc3	movss	%xmm0,0x04(%edi)
00000dc8	testb	$0x01,0x15(%esi)
00000dcc	jne	0x00000e1e
00000dce	movl	%esi,(%esp)
00000dd1	movl	$0x00000004,0x04(%esp)
00000dd9	calll	CUtlBuffer::CheckGet(int)
00000dde	cmpb	$0x01,%al
00000de0	jne	0x00000e11
00000de2	movl	(%esi),%ecx
00000de4	movl	0x0c(%esi),%eax
00000de7	movl	%eax,%edx
00000de9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000dec	movss	(%ecx,%edx),%xmm0
00000df1	movss	%xmm0,0xf0(%ebp)
00000df6	testb	$0x01,0x34(%esi)
00000dfa	je	0x00000e09
00000dfc	movd	%xmm0,%ecx
00000e00	bswap	%ecx
00000e02	movl	%ecx,0xf0(%ebp)
00000e05	movd	%ecx,%xmm0
00000e09	addl	$0x04,%eax
00000e0c	movl	%eax,0x0c(%esi)
00000e0f	jmp	0x00000e43
00000e11	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00000e18	pxor	%xmm0,%xmm0
00000e1c	jmp	0x00000e43
00000e1e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00000e25	leal	0xf0(%ebp),%eax
00000e28	movl	%eax,0x08(%esp)
00000e2c	leal	0x1726d-0xcae(%ebx),%eax
00000e32	movl	%eax,0x04(%esp)
00000e36	movl	%esi,(%esp)
00000e39	calll	CUtlBuffer::Scanf(char const*, ...)
00000e3e	movss	0xf0(%ebp),%xmm0
00000e43	movss	%xmm0,0x08(%edi)
00000e48	testb	$0x01,0x15(%esi)
00000e4c	jne	0x00000e9e
00000e4e	movl	%esi,(%esp)
00000e51	movl	$0x00000004,0x04(%esp)
00000e59	calll	CUtlBuffer::CheckGet(int)
00000e5e	cmpb	$0x01,%al
00000e60	jne	0x00000e91
00000e62	movl	(%esi),%ecx
00000e64	movl	0x0c(%esi),%eax
00000e67	movl	%eax,%edx
00000e69	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00000e6c	movss	(%ecx,%edx),%xmm0
00000e71	movss	%xmm0,0xe4(%ebp)
00000e76	testb	$0x01,0x34(%esi)
00000e7a	je	0x00000e89
00000e7c	movd	%xmm0,%ecx
00000e80	bswap	%ecx
00000e82	movl	%ecx,0xe4(%ebp)
00000e85	movd	%ecx,%xmm0
00000e89	addl	$0x04,%eax
00000e8c	movl	%eax,0x0c(%esi)
00000e8f	jmp	0x00000ec3
00000e91	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00000e98	pxor	%xmm0,%xmm0
00000e9c	jmp	0x00000ec3
00000e9e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00000ea5	leal	0xe4(%ebp),%eax
00000ea8	movl	%eax,0x08(%esp)
00000eac	leal	0x1726d-0xcae(%ebx),%eax
00000eb2	movl	%eax,0x04(%esp)
00000eb6	movl	%esi,(%esp)
00000eb9	calll	CUtlBuffer::Scanf(char const*, ...)
00000ebe	movss	0xe4(%ebp),%xmm0
00000ec3	movss	%xmm0,0x0c(%edi)
00000ec8	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00000ecc	sete	%cl
00000ecf	movzbl	%cl,%eax
00000ed2	addl	$0x2c,%esp
00000ed5	popl	%esi
00000ed6	popl	%edi
00000ed7	popl	%ebx
00000ed8	popl	%ebp
00000ed9	ret
00000eda	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, QAngle const&):
00000ee0	pushl	%ebp
00000ee1	movl	%esp,%ebp
00000ee3	pushl	%ebx
00000ee4	pushl	%edi
00000ee5	pushl	%esi
00000ee6	subl	$0x1c,%esp
00000ee9	calll	0x00000eee
00000eee	popl	%edi
00000eef	movl	0x0c(%ebp),%ebx
00000ef2	movl	0x08(%ebp),%esi
00000ef5	testb	$0x01,0x15(%esi)
00000ef9	je	0x00000f0f
00000efb	movl	%ebx,(%esp)
00000efe	movl	%esi,%ecx
00000f00	movl	$0x00000003,%edx
00000f05	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00000f0a	jmp	0x0000104a
00000f0f	movss	(%ebx),%xmm0
00000f13	movss	%xmm0,0xf0(%ebp)
00000f18	movl	%esi,(%esp)
00000f1b	movl	$0x00000004,0x04(%esp)
00000f23	calll	CUtlBuffer::CheckPut(int)
00000f28	testb	%al,%al
00000f2a	je	0x00000f64
00000f2c	movl	0x10(%esi),%eax
00000f2f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000f32	addl	(%esi),%eax
00000f34	testb	$0x01,0x34(%esi)
00000f38	jne	0x00000f41
00000f3a	movss	0xf0(%ebp),%xmm0
00000f3f	jmp	0x00000f54
00000f41	testl	%eax,%eax
00000f43	je	0x00000f58
00000f45	movss	0xf0(%ebp),%xmm0
00000f4a	movd	%xmm0,%ecx
00000f4e	bswap	%ecx
00000f50	movd	%ecx,%xmm0
00000f54	movss	%xmm0,(%eax)
00000f58	addl	$0x04,0x10(%esi)
00000f5c	movl	%esi,(%esp)
00000f5f	calll	CUtlBuffer::AddNullTermination()
00000f64	movss	0x04(%ebx),%xmm0
00000f69	testb	$0x01,0x15(%esi)
00000f6d	jne	0x00000fbb
00000f6f	movl	%esi,(%esp)
00000f72	movl	$0x00000004,0x04(%esp)
00000f7a	movss	%xmm0,0xf0(%ebp)
00000f7f	calll	CUtlBuffer::CheckPut(int)
00000f84	movss	0xf0(%ebp),%xmm0
00000f89	testb	%al,%al
00000f8b	je	0x00000fd7
00000f8d	movl	0x10(%esi),%eax
00000f90	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00000f93	addl	(%esi),%eax
00000f95	testb	$0x01,0x34(%esi)
00000f99	je	0x00000fa9
00000f9b	testl	%eax,%eax
00000f9d	je	0x00000fad
00000f9f	movd	%xmm0,%ecx
00000fa3	bswap	%ecx
00000fa5	movd	%ecx,%xmm0
00000fa9	movss	%xmm0,(%eax)
00000fad	addl	$0x04,0x10(%esi)
00000fb1	movl	%esi,(%esp)
00000fb4	calll	CUtlBuffer::AddNullTermination()
00000fb9	jmp	0x00000fd7
00000fbb	cvtss2sd	%xmm0,%xmm0
00000fbf	movsd	%xmm0,0x08(%esp)
00000fc5	leal	0x1726d-0xeee(%edi),%eax
00000fcb	movl	%eax,0x04(%esp)
00000fcf	movl	%esi,(%esp)
00000fd2	calll	CUtlBuffer::Printf(char const*, ...)
00000fd7	movss	0x08(%ebx),%xmm0
00000fdc	testb	$0x01,0x15(%esi)
00000fe0	jne	0x0000102e
00000fe2	movl	%esi,(%esp)
00000fe5	movl	$0x00000004,0x04(%esp)
00000fed	movss	%xmm0,0xf0(%ebp)
00000ff2	calll	CUtlBuffer::CheckPut(int)
00000ff7	movss	0xf0(%ebp),%xmm0
00000ffc	testb	%al,%al
00000ffe	je	0x0000104a
00001000	movl	0x10(%esi),%eax
00001003	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001006	addl	(%esi),%eax
00001008	testb	$0x01,0x34(%esi)
0000100c	je	0x0000101c
0000100e	testl	%eax,%eax
00001010	je	0x00001020
00001012	movd	%xmm0,%ecx
00001016	bswap	%ecx
00001018	movd	%ecx,%xmm0
0000101c	movss	%xmm0,(%eax)
00001020	addl	$0x04,0x10(%esi)
00001024	movl	%esi,(%esp)
00001027	calll	CUtlBuffer::AddNullTermination()
0000102c	jmp	0x0000104a
0000102e	cvtss2sd	%xmm0,%xmm0
00001032	movsd	%xmm0,0x08(%esp)
00001038	leal	0x1726d-0xeee(%edi),%eax
0000103e	movl	%eax,0x04(%esp)
00001042	movl	%esi,(%esp)
00001045	calll	CUtlBuffer::Printf(char const*, ...)
0000104a	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000104e	sete	%al
00001051	movzbl	%al,%eax
00001054	addl	$0x1c,%esp
00001057	popl	%esi
00001058	popl	%edi
00001059	popl	%ebx
0000105a	popl	%ebp
0000105b	ret
0000105c	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
Unserialize(CUtlBuffer&, QAngle&):
00001060	pushl	%ebp
00001061	movl	%esp,%ebp
00001063	pushl	%ebx
00001064	pushl	%edi
00001065	pushl	%esi
00001066	subl	$0x2c,%esp
00001069	calll	0x0000106e
0000106e	popl	%ebx
0000106f	movl	0x0c(%ebp),%edi
00001072	movl	0x08(%ebp),%esi
00001075	testb	$0x01,0x15(%esi)
00001079	je	0x000010af
0000107b	movl	%edi,0x08(%esp)
0000107f	leal	0x17276-0x106e(%ebx),%eax
00001085	movl	%eax,0x04(%esp)
00001089	movl	%esi,(%esp)
0000108c	leal	0x08(%edi),%eax
0000108f	movl	%eax,0x10(%esp)
00001093	addl	$0x04,%edi
00001096	movl	%edi,0x0c(%esp)
0000109a	calll	CUtlBuffer::Scanf(char const*, ...)
0000109f	xorb	%cl,%cl
000010a1	cmpl	$0x03,%eax
000010a4	je	0x00001201
000010aa	jmp	0x00001208
000010af	movl	%esi,(%esp)
000010b2	movl	$0x00000004,0x04(%esp)
000010ba	calll	CUtlBuffer::CheckGet(int)
000010bf	cmpb	$0x01,%al
000010c1	jne	0x000010f2
000010c3	movl	(%esi),%ecx
000010c5	movl	0x0c(%esi),%eax
000010c8	movl	%eax,%edx
000010ca	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000010cd	movss	(%ecx,%edx),%xmm0
000010d2	movss	%xmm0,0xec(%ebp)
000010d7	testb	$0x01,0x34(%esi)
000010db	je	0x000010ea
000010dd	movd	%xmm0,%ecx
000010e1	bswap	%ecx
000010e3	movl	%ecx,0xec(%ebp)
000010e6	movd	%ecx,%xmm0
000010ea	addl	$0x04,%eax
000010ed	movl	%eax,0x0c(%esi)
000010f0	jmp	0x000010fd
000010f2	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
000010f9	pxor	%xmm0,%xmm0
000010fd	movss	%xmm0,(%edi)
00001101	testb	$0x01,0x15(%esi)
00001105	jne	0x00001157
00001107	movl	%esi,(%esp)
0000110a	movl	$0x00000004,0x04(%esp)
00001112	calll	CUtlBuffer::CheckGet(int)
00001117	cmpb	$0x01,%al
00001119	jne	0x0000114a
0000111b	movl	(%esi),%ecx
0000111d	movl	0x0c(%esi),%eax
00001120	movl	%eax,%edx
00001122	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001125	movss	(%ecx,%edx),%xmm0
0000112a	movss	%xmm0,0xf0(%ebp)
0000112f	testb	$0x01,0x34(%esi)
00001133	je	0x00001142
00001135	movd	%xmm0,%ecx
00001139	bswap	%ecx
0000113b	movl	%ecx,0xf0(%ebp)
0000113e	movd	%ecx,%xmm0
00001142	addl	$0x04,%eax
00001145	movl	%eax,0x0c(%esi)
00001148	jmp	0x0000117c
0000114a	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001151	pxor	%xmm0,%xmm0
00001155	jmp	0x0000117c
00001157	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
0000115e	leal	0xf0(%ebp),%eax
00001161	movl	%eax,0x08(%esp)
00001165	leal	0x1726d-0x106e(%ebx),%eax
0000116b	movl	%eax,0x04(%esp)
0000116f	movl	%esi,(%esp)
00001172	calll	CUtlBuffer::Scanf(char const*, ...)
00001177	movss	0xf0(%ebp),%xmm0
0000117c	movss	%xmm0,0x04(%edi)
00001181	testb	$0x01,0x15(%esi)
00001185	jne	0x000011d7
00001187	movl	%esi,(%esp)
0000118a	movl	$0x00000004,0x04(%esp)
00001192	calll	CUtlBuffer::CheckGet(int)
00001197	cmpb	$0x01,%al
00001199	jne	0x000011ca
0000119b	movl	(%esi),%ecx
0000119d	movl	0x0c(%esi),%eax
000011a0	movl	%eax,%edx
000011a2	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000011a5	movss	(%ecx,%edx),%xmm0
000011aa	movss	%xmm0,0xe8(%ebp)
000011af	testb	$0x01,0x34(%esi)
000011b3	je	0x000011c2
000011b5	movd	%xmm0,%ecx
000011b9	bswap	%ecx
000011bb	movl	%ecx,0xe8(%ebp)
000011be	movd	%ecx,%xmm0
000011c2	addl	$0x04,%eax
000011c5	movl	%eax,0x0c(%esi)
000011c8	jmp	0x000011fc
000011ca	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000011d1	pxor	%xmm0,%xmm0
000011d5	jmp	0x000011fc
000011d7	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000011de	leal	0xe8(%ebp),%eax
000011e1	movl	%eax,0x08(%esp)
000011e5	leal	0x1726d-0x106e(%ebx),%eax
000011eb	movl	%eax,0x04(%esp)
000011ef	movl	%esi,(%esp)
000011f2	calll	CUtlBuffer::Scanf(char const*, ...)
000011f7	movss	0xe8(%ebp),%xmm0
000011fc	movss	%xmm0,0x08(%edi)
00001201	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001205	sete	%cl
00001208	movzbl	%cl,%eax
0000120b	addl	$0x2c,%esp
0000120e	popl	%esi
0000120f	popl	%edi
00001210	popl	%ebx
00001211	popl	%ebp
00001212	ret
00001213	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, Quaternion const&):
00001220	pushl	%ebp
00001221	movl	%esp,%ebp
00001223	pushl	%ebx
00001224	pushl	%edi
00001225	pushl	%esi
00001226	subl	$0x1c,%esp
00001229	calll	0x0000122e
0000122e	popl	%edi
0000122f	movl	0x0c(%ebp),%ebx
00001232	movl	0x08(%ebp),%esi
00001235	testb	$0x01,0x15(%esi)
00001239	je	0x0000124f
0000123b	movl	%ebx,(%esp)
0000123e	movl	%esi,%ecx
00001240	movl	$0x00000004,%edx
00001245	calll	SerializeFloats(CUtlBuffer&, int, float const*)
0000124a	jmp	0x000013fd
0000124f	movss	(%ebx),%xmm0
00001253	movss	%xmm0,0xf0(%ebp)
00001258	movl	%esi,(%esp)
0000125b	movl	$0x00000004,0x04(%esp)
00001263	calll	CUtlBuffer::CheckPut(int)
00001268	testb	%al,%al
0000126a	je	0x000012a4
0000126c	movl	0x10(%esi),%eax
0000126f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001272	addl	(%esi),%eax
00001274	testb	$0x01,0x34(%esi)
00001278	jne	0x00001281
0000127a	movss	0xf0(%ebp),%xmm0
0000127f	jmp	0x00001294
00001281	testl	%eax,%eax
00001283	je	0x00001298
00001285	movss	0xf0(%ebp),%xmm0
0000128a	movd	%xmm0,%ecx
0000128e	bswap	%ecx
00001290	movd	%ecx,%xmm0
00001294	movss	%xmm0,(%eax)
00001298	addl	$0x04,0x10(%esi)
0000129c	movl	%esi,(%esp)
0000129f	calll	CUtlBuffer::AddNullTermination()
000012a4	movss	0x04(%ebx),%xmm0
000012a9	testb	$0x01,0x15(%esi)
000012ad	jne	0x000012fb
000012af	movl	%esi,(%esp)
000012b2	movl	$0x00000004,0x04(%esp)
000012ba	movss	%xmm0,0xf0(%ebp)
000012bf	calll	CUtlBuffer::CheckPut(int)
000012c4	movss	0xf0(%ebp),%xmm0
000012c9	testb	%al,%al
000012cb	je	0x00001317
000012cd	movl	0x10(%esi),%eax
000012d0	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000012d3	addl	(%esi),%eax
000012d5	testb	$0x01,0x34(%esi)
000012d9	je	0x000012e9
000012db	testl	%eax,%eax
000012dd	je	0x000012ed
000012df	movd	%xmm0,%ecx
000012e3	bswap	%ecx
000012e5	movd	%ecx,%xmm0
000012e9	movss	%xmm0,(%eax)
000012ed	addl	$0x04,0x10(%esi)
000012f1	movl	%esi,(%esp)
000012f4	calll	CUtlBuffer::AddNullTermination()
000012f9	jmp	0x00001317
000012fb	cvtss2sd	%xmm0,%xmm0
000012ff	movsd	%xmm0,0x08(%esp)
00001305	leal	0x1726d-0x122e(%edi),%eax
0000130b	movl	%eax,0x04(%esp)
0000130f	movl	%esi,(%esp)
00001312	calll	CUtlBuffer::Printf(char const*, ...)
00001317	movss	0x08(%ebx),%xmm0
0000131c	testb	$0x01,0x15(%esi)
00001320	jne	0x0000136e
00001322	movl	%esi,(%esp)
00001325	movl	$0x00000004,0x04(%esp)
0000132d	movss	%xmm0,0xf0(%ebp)
00001332	calll	CUtlBuffer::CheckPut(int)
00001337	movss	0xf0(%ebp),%xmm0
0000133c	testb	%al,%al
0000133e	je	0x0000138a
00001340	movl	0x10(%esi),%eax
00001343	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
00001346	addl	(%esi),%eax
00001348	testb	$0x01,0x34(%esi)
0000134c	je	0x0000135c
0000134e	testl	%eax,%eax
00001350	je	0x00001360
00001352	movd	%xmm0,%ecx
00001356	bswap	%ecx
00001358	movd	%ecx,%xmm0
0000135c	movss	%xmm0,(%eax)
00001360	addl	$0x04,0x10(%esi)
00001364	movl	%esi,(%esp)
00001367	calll	CUtlBuffer::AddNullTermination()
0000136c	jmp	0x0000138a
0000136e	cvtss2sd	%xmm0,%xmm0
00001372	movsd	%xmm0,0x08(%esp)
00001378	leal	0x1726d-0x122e(%edi),%eax
0000137e	movl	%eax,0x04(%esp)
00001382	movl	%esi,(%esp)
00001385	calll	CUtlBuffer::Printf(char const*, ...)
0000138a	movss	0x0c(%ebx),%xmm0
0000138f	testb	$0x01,0x15(%esi)
00001393	jne	0x000013e1
00001395	movl	%esi,(%esp)
00001398	movl	$0x00000004,0x04(%esp)
000013a0	movss	%xmm0,0xf0(%ebp)
000013a5	calll	CUtlBuffer::CheckPut(int)
000013aa	movss	0xf0(%ebp),%xmm0
000013af	testb	%al,%al
000013b1	je	0x000013fd
000013b3	movl	0x10(%esi),%eax
000013b6	subl	SetSerializationArrayDelimiter(char const*)(%esi),%eax
000013b9	addl	(%esi),%eax
000013bb	testb	$0x01,0x34(%esi)
000013bf	je	0x000013cf
000013c1	testl	%eax,%eax
000013c3	je	0x000013d3
000013c5	movd	%xmm0,%ecx
000013c9	bswap	%ecx
000013cb	movd	%ecx,%xmm0
000013cf	movss	%xmm0,(%eax)
000013d3	addl	$0x04,0x10(%esi)
000013d7	movl	%esi,(%esp)
000013da	calll	CUtlBuffer::AddNullTermination()
000013df	jmp	0x000013fd
000013e1	cvtss2sd	%xmm0,%xmm0
000013e5	movsd	%xmm0,0x08(%esp)
000013eb	leal	0x1726d-0x122e(%edi),%eax
000013f1	movl	%eax,0x04(%esp)
000013f5	movl	%esi,(%esp)
000013f8	calll	CUtlBuffer::Printf(char const*, ...)
000013fd	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001401	sete	%al
00001404	movzbl	%al,%eax
00001407	addl	$0x1c,%esp
0000140a	popl	%esi
0000140b	popl	%edi
0000140c	popl	%ebx
0000140d	popl	%ebp
0000140e	ret
0000140f	nop
Unserialize(CUtlBuffer&, Quaternion&):
00001410	pushl	%ebp
00001411	movl	%esp,%ebp
00001413	pushl	%ebx
00001414	pushl	%edi
00001415	pushl	%esi
00001416	subl	$0x2c,%esp
00001419	calll	0x0000141e
0000141e	popl	%ebx
0000141f	movl	0x0c(%ebp),%edi
00001422	movl	0x08(%ebp),%esi
00001425	testb	$0x01,0x15(%esi)
00001429	je	0x00001466
0000142b	movl	%edi,0x08(%esp)
0000142f	leal	0x1727f-0x141e(%ebx),%eax
00001435	movl	%eax,0x04(%esp)
00001439	movl	%esi,(%esp)
0000143c	leal	0x0c(%edi),%eax
0000143f	movl	%eax,0x14(%esp)
00001443	leal	0x08(%edi),%eax
00001446	movl	%eax,0x10(%esp)
0000144a	addl	$0x04,%edi
0000144d	movl	%edi,0x0c(%esp)
00001451	calll	CUtlBuffer::Scanf(char const*, ...)
00001456	xorb	%cl,%cl
00001458	cmpl	$0x04,%eax
0000145b	je	0x00001638
00001461	jmp	0x0000163f
00001466	movl	%esi,(%esp)
00001469	movl	$0x00000004,0x04(%esp)
00001471	calll	CUtlBuffer::CheckGet(int)
00001476	cmpb	$0x01,%al
00001478	jne	0x000014a9
0000147a	movl	(%esi),%ecx
0000147c	movl	0x0c(%esi),%eax
0000147f	movl	%eax,%edx
00001481	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001484	movss	(%ecx,%edx),%xmm0
00001489	movss	%xmm0,0xe8(%ebp)
0000148e	testb	$0x01,0x34(%esi)
00001492	je	0x000014a1
00001494	movd	%xmm0,%ecx
00001498	bswap	%ecx
0000149a	movl	%ecx,0xe8(%ebp)
0000149d	movd	%ecx,%xmm0
000014a1	addl	$0x04,%eax
000014a4	movl	%eax,0x0c(%esi)
000014a7	jmp	0x000014b4
000014a9	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
000014b0	pxor	%xmm0,%xmm0
000014b4	movss	%xmm0,(%edi)
000014b8	testb	$0x01,0x15(%esi)
000014bc	jne	0x0000150e
000014be	movl	%esi,(%esp)
000014c1	movl	$0x00000004,0x04(%esp)
000014c9	calll	CUtlBuffer::CheckGet(int)
000014ce	cmpb	$0x01,%al
000014d0	jne	0x00001501
000014d2	movl	(%esi),%ecx
000014d4	movl	0x0c(%esi),%eax
000014d7	movl	%eax,%edx
000014d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000014dc	movss	(%ecx,%edx),%xmm0
000014e1	movss	%xmm0,0xec(%ebp)
000014e6	testb	$0x01,0x34(%esi)
000014ea	je	0x000014f9
000014ec	movd	%xmm0,%ecx
000014f0	bswap	%ecx
000014f2	movl	%ecx,0xec(%ebp)
000014f5	movd	%ecx,%xmm0
000014f9	addl	$0x04,%eax
000014fc	movl	%eax,0x0c(%esi)
000014ff	jmp	0x00001533
00001501	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001508	pxor	%xmm0,%xmm0
0000150c	jmp	0x00001533
0000150e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001515	leal	0xec(%ebp),%eax
00001518	movl	%eax,0x08(%esp)
0000151c	leal	0x1726d-0x141e(%ebx),%eax
00001522	movl	%eax,0x04(%esp)
00001526	movl	%esi,(%esp)
00001529	calll	CUtlBuffer::Scanf(char const*, ...)
0000152e	movss	0xec(%ebp),%xmm0
00001533	movss	%xmm0,0x04(%edi)
00001538	testb	$0x01,0x15(%esi)
0000153c	jne	0x0000158e
0000153e	movl	%esi,(%esp)
00001541	movl	$0x00000004,0x04(%esp)
00001549	calll	CUtlBuffer::CheckGet(int)
0000154e	cmpb	$0x01,%al
00001550	jne	0x00001581
00001552	movl	(%esi),%ecx
00001554	movl	0x0c(%esi),%eax
00001557	movl	%eax,%edx
00001559	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
0000155c	movss	(%ecx,%edx),%xmm0
00001561	movss	%xmm0,0xf0(%ebp)
00001566	testb	$0x01,0x34(%esi)
0000156a	je	0x00001579
0000156c	movd	%xmm0,%ecx
00001570	bswap	%ecx
00001572	movl	%ecx,0xf0(%ebp)
00001575	movd	%ecx,%xmm0
00001579	addl	$0x04,%eax
0000157c	movl	%eax,0x0c(%esi)
0000157f	jmp	0x000015b3
00001581	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001588	pxor	%xmm0,%xmm0
0000158c	jmp	0x000015b3
0000158e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001595	leal	0xf0(%ebp),%eax
00001598	movl	%eax,0x08(%esp)
0000159c	leal	0x1726d-0x141e(%ebx),%eax
000015a2	movl	%eax,0x04(%esp)
000015a6	movl	%esi,(%esp)
000015a9	calll	CUtlBuffer::Scanf(char const*, ...)
000015ae	movss	0xf0(%ebp),%xmm0
000015b3	movss	%xmm0,0x08(%edi)
000015b8	testb	$0x01,0x15(%esi)
000015bc	jne	0x0000160e
000015be	movl	%esi,(%esp)
000015c1	movl	$0x00000004,0x04(%esp)
000015c9	calll	CUtlBuffer::CheckGet(int)
000015ce	cmpb	$0x01,%al
000015d0	jne	0x00001601
000015d2	movl	(%esi),%ecx
000015d4	movl	0x0c(%esi),%eax
000015d7	movl	%eax,%edx
000015d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
000015dc	movss	(%ecx,%edx),%xmm0
000015e1	movss	%xmm0,0xe4(%ebp)
000015e6	testb	$0x01,0x34(%esi)
000015ea	je	0x000015f9
000015ec	movd	%xmm0,%ecx
000015f0	bswap	%ecx
000015f2	movl	%ecx,0xe4(%ebp)
000015f5	movd	%ecx,%xmm0
000015f9	addl	$0x04,%eax
000015fc	movl	%eax,0x0c(%esi)
000015ff	jmp	0x00001633
00001601	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00001608	pxor	%xmm0,%xmm0
0000160c	jmp	0x00001633
0000160e	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
00001615	leal	0xe4(%ebp),%eax
00001618	movl	%eax,0x08(%esp)
0000161c	leal	0x1726d-0x141e(%ebx),%eax
00001622	movl	%eax,0x04(%esp)
00001626	movl	%esi,(%esp)
00001629	calll	CUtlBuffer::Scanf(char const*, ...)
0000162e	movss	0xe4(%ebp),%xmm0
00001633	movss	%xmm0,0x0c(%edi)
00001638	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000163c	sete	%cl
0000163f	movzbl	%cl,%eax
00001642	addl	$0x2c,%esp
00001645	popl	%esi
00001646	popl	%edi
00001647	popl	%ebx
00001648	popl	%ebp
00001649	ret
0000164a	nopw	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, VMatrix const&):
00001650	pushl	%ebp
00001651	movl	%esp,%ebp
00001653	pushl	%ebx
00001654	pushl	%edi
00001655	pushl	%esi
00001656	subl	$0x0c,%esp
00001659	calll	0x0000165e
0000165e	popl	%eax
0000165f	movl	0x0c(%ebp),%edi
00001662	movl	0x08(%ebp),%esi
00001665	testb	$0x01,0x15(%esi)
00001669	je	0x000016f8
0000166f	leal	0x1728b-0x165e(%eax),%ebx
00001675	movl	%ebx,0x04(%esp)
00001679	movl	%esi,(%esp)
0000167c	calll	CUtlBuffer::Printf(char const*, ...)
00001681	movl	%edi,(%esp)
00001684	movl	%esi,%ecx
00001686	movl	$0x00000004,%edx
0000168b	calll	SerializeFloats(CUtlBuffer&, int, float const*)
00001690	movl	%ebx,0x04(%esp)
00001694	movl	%esi,(%esp)
00001697	calll	CUtlBuffer::Printf(char const*, ...)
0000169c	leal	0x10(%edi),%eax
0000169f	movl	%eax,(%esp)
000016a2	movl	%esi,%ecx
000016a4	movl	$0x00000004,%edx
000016a9	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016ae	movl	%ebx,0x04(%esp)
000016b2	movl	%esi,(%esp)
000016b5	calll	CUtlBuffer::Printf(char const*, ...)
000016ba	leal	SetSerializationArrayDelimiter(char const*)(%edi),%eax
000016bd	movl	%eax,(%esp)
000016c0	movl	%esi,%ecx
000016c2	movl	$0x00000004,%edx
000016c7	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016cc	movl	%ebx,0x04(%esp)
000016d0	movl	%esi,(%esp)
000016d3	calll	CUtlBuffer::Printf(char const*, ...)
000016d8	addl	$0x30,%edi
000016db	movl	%edi,(%esp)
000016de	movl	%esi,%ecx
000016e0	movl	$0x00000004,%edx
000016e5	calll	SerializeFloats(CUtlBuffer&, int, float const*)
000016ea	movl	%ebx,0x04(%esp)
000016ee	movl	%esi,(%esp)
000016f1	calll	CUtlBuffer::Printf(char const*, ...)
000016f6	jmp	0x0000170c
000016f8	movl	%edi,0x04(%esp)
000016fc	movl	%esi,(%esp)
000016ff	movl	Serialize(CUtlBuffer&, bool const&),0x08(%esp)
00001707	calll	CUtlBuffer::Put(void const*, int)
0000170c	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001710	sete	%al
00001713	movzbl	%al,%eax
00001716	addl	$0x0c,%esp
00001719	popl	%esi
0000171a	popl	%edi
0000171b	popl	%ebx
0000171c	popl	%ebp
0000171d	ret
0000171e	nop
Unserialize(CUtlBuffer&, VMatrix&):
00001720	pushl	%ebp
00001721	movl	%esp,%ebp
00001723	subl	$0x48,%esp
00001726	calll	0x0000172b
0000172b	popl	%edx
0000172c	xorb	%al,%al
0000172e	movl	0x08(%ebp),%ecx
00001731	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%ecx)
00001735	jne	0x000017e5
0000173b	movl	0x0c(%ebp),%eax
0000173e	testb	$0x01,0x15(%ecx)
00001742	je	0x000017cf
00001748	movl	%eax,0x08(%esp)
0000174c	leal	0x1728d-0x172b(%edx),%edx
00001752	movl	%edx,0x04(%esp)
00001756	movl	%ecx,(%esp)
00001759	leal	0x3c(%eax),%ecx
0000175c	movl	%ecx,0x44(%esp)
00001760	leal	0x38(%eax),%ecx
00001763	movl	%ecx,Serialize(CUtlBuffer&, bool const&)(%esp)
00001767	leal	0x34(%eax),%ecx
0000176a	movl	%ecx,0x3c(%esp)
0000176e	leal	0x30(%eax),%ecx
00001771	movl	%ecx,0x38(%esp)
00001775	leal	0x2c(%eax),%ecx
00001778	movl	%ecx,0x34(%esp)
0000177c	leal	0x28(%eax),%ecx
0000177f	movl	%ecx,0x30(%esp)
00001783	leal	0x24(%eax),%ecx
00001786	movl	%ecx,0x2c(%esp)
0000178a	leal	SetSerializationArrayDelimiter(char const*)(%eax),%ecx
0000178d	movl	%ecx,0x28(%esp)
00001791	leal	0x1c(%eax),%ecx
00001794	movl	%ecx,0x24(%esp)
00001798	leal	0x18(%eax),%ecx
0000179b	movl	%ecx,SetSerializationArrayDelimiter(char const*)(%esp)
0000179f	leal	0x14(%eax),%ecx
000017a2	movl	%ecx,0x1c(%esp)
000017a6	leal	0x10(%eax),%ecx
000017a9	movl	%ecx,0x18(%esp)
000017ad	leal	0x0c(%eax),%ecx
000017b0	movl	%ecx,0x14(%esp)
000017b4	leal	0x08(%eax),%ecx
000017b7	movl	%ecx,0x10(%esp)
000017bb	addl	$0x04,%eax
000017be	movl	%eax,0x0c(%esp)
000017c2	calll	CUtlBuffer::Scanf(char const*, ...)
000017c7	cmpl	$0x10,%eax
000017ca	sete	%al
000017cd	jmp	0x000017e5
000017cf	movl	%eax,0x04(%esp)
000017d3	movl	%ecx,(%esp)
000017d6	movl	Serialize(CUtlBuffer&, bool const&),0x08(%esp)
000017de	calll	CUtlBuffer::Get(void*, int)
000017e3	movb	$0x01,%al
000017e5	movzbl	%al,%eax
000017e8	addl	$0x48,%esp
000017eb	popl	%ebp
000017ec	ret
000017ed	nopl	(%eax)
Serialize(CUtlBuffer&, Color const&):
000017f0	pushl	%ebp
000017f1	movl	%esp,%ebp
000017f3	pushl	%ebx
000017f4	pushl	%edi
000017f5	pushl	%esi
000017f6	subl	$0x1c,%esp
000017f9	calll	0x000017fe
000017fe	popl	%edi
000017ff	movl	0x0c(%ebp),%ecx
00001802	movb	(%ecx),%bl
00001804	movl	0x08(%ebp),%esi
00001807	testb	$0x01,0x15(%esi)
0000180b	je	0x00001839
0000180d	movzbl	%bl,%eax
00001810	movl	%ecx,%ebx
00001812	movzbl	0x01(%ebx),%ecx
00001816	movzbl	0x02(%ebx),%edx
0000181a	movzbl	0x03(%ebx),%ebx
0000181e	movl	%ebx,0x14(%esp)
00001822	movl	%edx,0x10(%esp)
00001826	movl	%ecx,0x0c(%esp)
0000182a	movl	%eax,0x08(%esp)
0000182e	leal	0x172bd-0x17fe(%edi),%eax
00001834	jmp	0x0000194a
00001839	movl	%esi,(%esp)
0000183c	movl	$0x00000001,0x04(%esp)
00001844	calll	CUtlBuffer::CheckPut(int)
00001849	cmpb	$0x01,%al
0000184b	jne	0x00001863
0000184d	movl	(%esi),%eax
0000184f	movl	0x10(%esi),%ecx
00001852	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
00001855	movb	%bl,(%eax,%ecx)
00001858	incl	0x10(%esi)
0000185b	movl	%esi,(%esp)
0000185e	calll	CUtlBuffer::AddNullTermination()
00001863	movl	0x0c(%ebp),%eax
00001866	movb	0x01(%eax),%bl
00001869	testb	$0x01,0x15(%esi)
0000186d	jne	0x0000189b
0000186f	movl	%esi,(%esp)
00001872	movl	$0x00000001,0x04(%esp)
0000187a	calll	CUtlBuffer::CheckPut(int)
0000187f	cmpb	$0x01,%al
00001881	jne	0x000018b4
00001883	movl	(%esi),%eax
00001885	movl	0x10(%esi),%ecx
00001888	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
0000188b	movb	%bl,(%eax,%ecx)
0000188e	incl	0x10(%esi)
00001891	movl	%esi,(%esp)
00001894	calll	CUtlBuffer::AddNullTermination()
00001899	jmp	0x000018b4
0000189b	movzbl	%bl,%eax
0000189e	movl	%eax,0x08(%esp)
000018a2	leal	0x172c9-0x17fe(%edi),%eax
000018a8	movl	%eax,0x04(%esp)
000018ac	movl	%esi,(%esp)
000018af	calll	CUtlBuffer::Printf(char const*, ...)
000018b4	movl	0x0c(%ebp),%eax
000018b7	movb	0x02(%eax),%bl
000018ba	testb	$0x01,0x15(%esi)
000018be	jne	0x000018ec
000018c0	movl	%esi,(%esp)
000018c3	movl	$0x00000001,0x04(%esp)
000018cb	calll	CUtlBuffer::CheckPut(int)
000018d0	cmpb	$0x01,%al
000018d2	jne	0x00001905
000018d4	movl	(%esi),%eax
000018d6	movl	0x10(%esi),%ecx
000018d9	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
000018dc	movb	%bl,(%eax,%ecx)
000018df	incl	0x10(%esi)
000018e2	movl	%esi,(%esp)
000018e5	calll	CUtlBuffer::AddNullTermination()
000018ea	jmp	0x00001905
000018ec	movzbl	%bl,%eax
000018ef	movl	%eax,0x08(%esp)
000018f3	leal	0x172c9-0x17fe(%edi),%eax
000018f9	movl	%eax,0x04(%esp)
000018fd	movl	%esi,(%esp)
00001900	calll	CUtlBuffer::Printf(char const*, ...)
00001905	movl	0x0c(%ebp),%eax
00001908	movb	0x03(%eax),%bl
0000190b	testb	$0x01,0x15(%esi)
0000190f	jne	0x0000193d
00001911	movl	%esi,(%esp)
00001914	movl	$0x00000001,0x04(%esp)
0000191c	calll	CUtlBuffer::CheckPut(int)
00001921	cmpb	$0x01,%al
00001923	jne	0x00001956
00001925	movl	(%esi),%eax
00001927	movl	0x10(%esi),%ecx
0000192a	subl	SetSerializationArrayDelimiter(char const*)(%esi),%ecx
0000192d	movb	%bl,(%eax,%ecx)
00001930	incl	0x10(%esi)
00001933	movl	%esi,(%esp)
00001936	calll	CUtlBuffer::AddNullTermination()
0000193b	jmp	0x00001956
0000193d	movzbl	%bl,%eax
00001940	movl	%eax,0x08(%esp)
00001944	leal	0x172c9-0x17fe(%edi),%eax
0000194a	movl	%eax,0x04(%esp)
0000194e	movl	%esi,(%esp)
00001951	calll	CUtlBuffer::Printf(char const*, ...)
00001956	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
0000195a	sete	%al
0000195d	movzbl	%al,%eax
00001960	addl	$0x1c,%esp
00001963	popl	%esi
00001964	popl	%edi
00001965	popl	%ebx
00001966	popl	%ebp
00001967	ret
00001968	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, Color&):
00001970	pushl	%ebp
00001971	movl	%esp,%ebp
00001973	pushl	%ebx
00001974	pushl	%edi
00001975	pushl	%esi
00001976	subl	$0x2c,%esp
00001979	calll	0x0000197e
0000197e	popl	%ebx
0000197f	movl	0x0c(%ebp),%edi
00001982	movl	0x08(%ebp),%esi
00001985	testb	$0x01,0x15(%esi)
00001989	je	0x000019fc
0000198b	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001992	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe8(%ebp)
00001999	movl	SetSerializationDelimiter(CUtlCharConversion*),0xe4(%ebp)
000019a0	movl	$0x000000ff,0xe0(%ebp)
000019a7	leal	0xe0(%ebp),%eax
000019aa	movl	%eax,0x14(%esp)
000019ae	leal	0xe4(%ebp),%eax
000019b1	movl	%eax,0x10(%esp)
000019b5	leal	0xe8(%ebp),%eax
000019b8	movl	%eax,0x0c(%esp)
000019bc	leal	0xec(%ebp),%eax
000019bf	movl	%eax,0x08(%esp)
000019c3	leal	0x172bd-0x197e(%ebx),%eax
000019c9	movl	%eax,0x04(%esp)
000019cd	movl	%esi,(%esp)
000019d0	calll	CUtlBuffer::Scanf(char const*, ...)
000019d5	movb	0xe0(%ebp),%cl
000019d8	movb	0xe4(%ebp),%dl
000019db	movb	0xe8(%ebp),%ch
000019de	movb	0xec(%ebp),%dh
000019e1	movb	%dh,(%edi)
000019e3	movb	%ch,0x01(%edi)
000019e6	movb	%dl,0x02(%edi)
000019e9	movb	%cl,0x03(%edi)
000019ec	xorb	%cl,%cl
000019ee	cmpl	$0x04,%eax
000019f1	je	0x00001b3f
000019f7	jmp	0x00001b46
000019fc	movl	%esi,(%esp)
000019ff	movl	$0x00000001,0x04(%esp)
00001a07	calll	CUtlBuffer::CheckGet(int)
00001a0c	cmpb	$0x01,%al
00001a0e	jne	0x00001a26
00001a10	movl	(%esi),%eax
00001a12	movl	0x0c(%esi),%ecx
00001a15	movl	%ecx,%edx
00001a17	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001a1a	movb	(%eax,%edx),%al
00001a1d	movb	%al,0xf2(%ebp)
00001a20	incl	%ecx
00001a21	movl	%ecx,0x0c(%esi)
00001a24	jmp	0x00001a2c
00001a26	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001a2a	xorb	%al,%al
00001a2c	movb	%al,(%edi)
00001a2e	testb	$0x01,0x15(%esi)
00001a32	jne	0x00001a66
00001a34	movl	%esi,(%esp)
00001a37	movl	$0x00000001,0x04(%esp)
00001a3f	calll	CUtlBuffer::CheckGet(int)
00001a44	cmpb	$0x01,%al
00001a46	jne	0x00001a5e
00001a48	movl	(%esi),%eax
00001a4a	movl	0x0c(%esi),%ecx
00001a4d	movl	%ecx,%edx
00001a4f	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001a52	movb	(%eax,%edx),%al
00001a55	movb	%al,0xf3(%ebp)
00001a58	incl	%ecx
00001a59	movl	%ecx,0x0c(%esi)
00001a5c	jmp	0x00001a86
00001a5e	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001a62	xorb	%al,%al
00001a64	jmp	0x00001a86
00001a66	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001a6a	leal	0xf3(%ebp),%eax
00001a6d	movl	%eax,0x08(%esp)
00001a71	leal	0x172c9-0x197e(%ebx),%eax
00001a77	movl	%eax,0x04(%esp)
00001a7b	movl	%esi,(%esp)
00001a7e	calll	CUtlBuffer::Scanf(char const*, ...)
00001a83	movb	0xf3(%ebp),%al
00001a86	movb	%al,0x01(%edi)
00001a89	testb	$0x01,0x15(%esi)
00001a8d	jne	0x00001ac1
00001a8f	movl	%esi,(%esp)
00001a92	movl	$0x00000001,0x04(%esp)
00001a9a	calll	CUtlBuffer::CheckGet(int)
00001a9f	cmpb	$0x01,%al
00001aa1	jne	0x00001ab9
00001aa3	movl	(%esi),%eax
00001aa5	movl	0x0c(%esi),%ecx
00001aa8	movl	%ecx,%edx
00001aaa	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001aad	movb	(%eax,%edx),%al
00001ab0	movb	%al,0xf1(%ebp)
00001ab3	incl	%ecx
00001ab4	movl	%ecx,0x0c(%esi)
00001ab7	jmp	0x00001ae1
00001ab9	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001abd	xorb	%al,%al
00001abf	jmp	0x00001ae1
00001ac1	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001ac5	leal	0xf1(%ebp),%eax
00001ac8	movl	%eax,0x08(%esp)
00001acc	leal	0x172c9-0x197e(%ebx),%eax
00001ad2	movl	%eax,0x04(%esp)
00001ad6	movl	%esi,(%esp)
00001ad9	calll	CUtlBuffer::Scanf(char const*, ...)
00001ade	movb	0xf1(%ebp),%al
00001ae1	movb	%al,0x02(%edi)
00001ae4	testb	$0x01,0x15(%esi)
00001ae8	jne	0x00001b1c
00001aea	movl	%esi,(%esp)
00001aed	movl	$0x00000001,0x04(%esp)
00001af5	calll	CUtlBuffer::CheckGet(int)
00001afa	cmpb	$0x01,%al
00001afc	jne	0x00001b14
00001afe	movl	(%esi),%eax
00001b00	movl	0x0c(%esi),%ecx
00001b03	movl	%ecx,%edx
00001b05	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001b08	movb	(%eax,%edx),%al
00001b0b	movb	%al,0xf0(%ebp)
00001b0e	incl	%ecx
00001b0f	movl	%ecx,0x0c(%esi)
00001b12	jmp	0x00001b3c
00001b14	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001b18	xorb	%al,%al
00001b1a	jmp	0x00001b3c
00001b1c	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf0(%ebp)
00001b20	leal	0xf0(%ebp),%eax
00001b23	movl	%eax,0x08(%esp)
00001b27	leal	0x172c9-0x197e(%ebx),%eax
00001b2d	movl	%eax,0x04(%esp)
00001b31	movl	%esi,(%esp)
00001b34	calll	CUtlBuffer::Scanf(char const*, ...)
00001b39	movb	0xf0(%ebp),%al
00001b3c	movb	%al,0x03(%edi)
00001b3f	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001b43	sete	%cl
00001b46	movzbl	%cl,%eax
00001b49	addl	$0x2c,%esp
00001b4c	popl	%esi
00001b4d	popl	%edi
00001b4e	popl	%ebx
00001b4f	popl	%ebp
00001b50	ret
00001b51	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Serialize(CUtlBuffer&, CUtlBinaryBlock const&):
00001b60	pushl	%ebp
00001b61	movl	%esp,%ebp
00001b63	pushl	%ebx
00001b64	pushl	%edi
00001b65	pushl	%esi
00001b66	subl	$0x1c,%esp
00001b69	movl	0x0c(%ebp),%eax
00001b6c	movl	0x0c(%eax),%esi
00001b6f	movl	%esi,0xf0(%ebp)
00001b72	movl	0x08(%ebp),%edi
00001b75	testb	$0x01,0x15(%edi)
00001b79	je	0x00001c21
00001b7f	testl	%esi,%esi
00001b81	jle	0x00001c0f
00001b87	xorl	%esi,%esi
00001b89	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
00001b90	movl	%esi,%eax
00001b92	movl	$0x66666667,%ecx
00001b97	imull	%ecx
00001b99	movl	%edx,%eax
00001b9b	shrl	$0x1f,%eax
00001b9e	sarl	$0x04,%edx
00001ba1	addl	%eax,%edx
00001ba3	imull	$0x28,%edx,%eax
00001ba6	movl	%esi,%ecx
00001ba8	subl	%eax,%ecx
00001baa	jne	0x00001bbc
00001bac	movl	%edi,(%esp)
00001baf	movl	$0x0000000a,0x04(%esp)
00001bb7	calll	CUtlBuffer::PutChar(char)
00001bbc	movl	0x0c(%ebp),%eax
00001bbf	movl	(%eax),%eax
00001bc1	movb	(%eax,%esi),%al
00001bc4	movl	%edi,(%esp)
00001bc7	movb	%al,%cl
00001bc9	shrb	$0x04,%cl
00001bcc	movb	%cl,%dl
00001bce	orb	$0x30,%dl
00001bd1	addb	$0x37,%cl
00001bd4	cmpb	Unserialize(CUtlBuffer&, bool&),%al
00001bd6	jb	0x00001bda
00001bd8	movb	%cl,%dl
00001bda	movsbl	%dl,%ecx
00001bdd	movl	%ecx,0x04(%esp)
00001be1	andb	$0x0f,%al
00001be3	movb	%al,%cl
00001be5	orb	$0x30,%cl
00001be8	movb	%al,%dl
00001bea	addb	$0x37,%dl
00001bed	cmpb	$0x0a,%al
00001bef	jb	0x00001bf3
00001bf1	movb	%dl,%cl
00001bf3	movsbl	%cl,%ebx
00001bf6	calll	CUtlBuffer::PutChar(char)
00001bfb	movl	%ebx,0x04(%esp)
00001bff	movl	%edi,(%esp)
00001c02	calll	CUtlBuffer::PutChar(char)
00001c07	incl	%esi
00001c08	movl	0xf0(%ebp),%eax
00001c0b	cmpl	%esi,%eax
00001c0d	jne	0x00001b90
00001c0f	movl	%edi,(%esp)
00001c12	movl	$0x0000000a,0x04(%esp)
00001c1a	calll	CUtlBuffer::PutChar(char)
00001c1f	jmp	0x00001c76
00001c21	movl	%edi,(%esp)
00001c24	movl	$0x00000004,0x04(%esp)
00001c2c	calll	CUtlBuffer::CheckPut(int)
00001c31	cmpb	$0x01,%al
00001c33	jne	0x00001c5d
00001c35	movl	0x10(%edi),%eax
00001c38	subl	SetSerializationArrayDelimiter(char const*)(%edi),%eax
00001c3b	addl	(%edi),%eax
00001c3d	testb	$0x01,0x34(%edi)
00001c41	jne	0x00001c47
00001c43	movl	%esi,(%eax)
00001c45	jmp	0x00001c51
00001c47	testl	%eax,%eax
00001c49	je	0x00001c51
00001c4b	movl	%esi,%ecx
00001c4d	bswap	%ecx
00001c4f	movl	%ecx,(%eax)
00001c51	addl	$0x04,0x10(%edi)
00001c55	movl	%edi,(%esp)
00001c58	calll	CUtlBuffer::AddNullTermination()
00001c5d	testl	%esi,%esi
00001c5f	je	0x00001c76
00001c61	movl	0x0c(%ebp),%eax
00001c64	movl	(%eax),%eax
00001c66	movl	%esi,0x08(%esp)
00001c6a	movl	%eax,0x04(%esp)
00001c6e	movl	%edi,(%esp)
00001c71	calll	CUtlBuffer::Put(void const*, int)
00001c76	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%edi)
00001c7a	sete	%al
00001c7d	movzbl	%al,%eax
00001c80	addl	$0x1c,%esp
00001c83	popl	%esi
00001c84	popl	%edi
00001c85	popl	%ebx
00001c86	popl	%ebp
00001c87	ret
00001c88	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, CUtlBinaryBlock&):
00001c90	pushl	%ebp
00001c91	movl	%esp,%ebp
00001c93	pushl	%ebx
00001c94	pushl	%edi
00001c95	pushl	%esi
00001c96	subl	$0x2c,%esp
00001c99	calll	0x00001c9e
00001c9e	popl	%eax
00001c9f	movl	%eax,0xe4(%ebp)
00001ca2	movl	0x0c(%ebp),%ebx
00001ca5	movl	0x08(%ebp),%esi
00001ca8	testb	$0x01,0x15(%esi)
00001cac	jne	0x00001d63
00001cb2	movl	%esi,(%esp)
00001cb5	movl	$0x00000004,0x04(%esp)
00001cbd	calll	CUtlBuffer::CheckGet(int)
00001cc2	cmpb	$0x01,%al
00001cc4	jne	0x00001d0b
00001cc6	movl	0x0c(%esi),%eax
00001cc9	movl	%eax,%edx
00001ccb	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001cce	addl	(%esi),%edx
00001cd0	testb	$0x01,0x34(%esi)
00001cd4	jne	0x00001cda
00001cd6	movl	(%edx),%edi
00001cd8	jmp	0x00001d00
00001cda	leal	0xec(%ebp),%ecx
00001cdd	testl	%edx,%edx
00001cdf	cmovnel	%edx,%ecx
00001ce2	movzbl	0x03(%ecx),%edx
00001ce6	movzbl	0x02(%ecx),%edi
00001cea	shll	$0x08,%edi
00001ced	orl	%edx,%edi
00001cef	movzbl	0x01(%ecx),%edx
00001cf3	shll	$0x10,%edx
00001cf6	orl	%edi,%edx
00001cf8	movzbl	(%ecx),%edi
00001cfb	shll	$0x18,%edi
00001cfe	orl	%edx,%edi
00001d00	movl	%edi,0xec(%ebp)
00001d03	addl	$0x04,%eax
00001d06	movl	%eax,0x0c(%esi)
00001d09	jmp	0x00001d14
00001d0b	movl	SetSerializationDelimiter(CUtlCharConversion*),0xec(%ebp)
00001d12	xorl	%edi,%edi
00001d14	movl	%edi,0x04(%esp)
00001d18	movl	%ebx,(%esp)
00001d1b	calll	CUtlBinaryBlock::SetLength(int)
00001d20	movl	0x0c(%ebx),%ecx
00001d23	xorl	%eax,%eax
00001d25	testl	%ecx,%ecx
00001d27	je	0x00001d3e
00001d29	movl	(%ebx),%eax
00001d2b	movl	%ecx,0x08(%esp)
00001d2f	movl	%eax,0x04(%esp)
00001d33	movl	%esi,(%esp)
00001d36	calll	CUtlBuffer::Get(void*, int)
00001d3b	movl	0x0c(%ebx),%eax
00001d3e	cmpl	%eax,%edi
00001d40	je	0x0000202c
00001d46	subl	%eax,%edi
00001d48	movl	%edi,0x08(%esp)
00001d4c	movl	%esi,(%esp)
00001d4f	movl	$0x00000001,0x04(%esp)
00001d57	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00001d5c	xorb	%cl,%cl
00001d5e	jmp	0x00002033
00001d63	movl	0x0c(%esi),%eax
00001d66	movl	%eax,0xdc(%ebp)
00001d69	movl	%esi,(%esp)
00001d6c	calll	CUtlBuffer::EatWhiteSpace()
00001d71	xorl	%edi,%edi
00001d73	jmp	0x00001d89
00001d75	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
00001d80	movl	%esi,(%esp)
00001d83	calll	CUtlBuffer::EatWhiteSpace()
00001d88	incl	%edi
00001d89	movl	0x0c(%esi),%eax
00001d8c	movl	%eax,0xe0(%ebp)
00001d8f	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00001d93	jne	0x00001e9d
00001d99	testb	$0x01,0x15(%esi)
00001d9d	jne	0x00001dd1
00001d9f	movl	%esi,(%esp)
00001da2	movl	$0x00000001,0x04(%esp)
00001daa	calll	CUtlBuffer::CheckGet(int)
00001daf	cmpb	$0x01,%al
00001db1	jne	0x00001dc9
00001db3	movl	(%esi),%ecx
00001db5	movl	0x0c(%esi),%eax
00001db8	movl	%eax,%edx
00001dba	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001dbd	movb	(%ecx,%edx),%bl
00001dc0	movb	%bl,0xf3(%ebp)
00001dc3	incl	%eax
00001dc4	movl	%eax,0x0c(%esi)
00001dc7	jmp	0x00001df4
00001dc9	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001dcd	xorb	%bl,%bl
00001dcf	jmp	0x00001df4
00001dd1	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf3(%ebp)
00001dd5	leal	0xf3(%ebp),%eax
00001dd8	movl	%eax,0x08(%esp)
00001ddc	movl	0xe4(%ebp),%eax
00001ddf	leal	0x172d2-0x1c9e(%eax),%eax
00001de5	movl	%eax,0x04(%esp)
00001de9	movl	%esi,(%esp)
00001dec	calll	CUtlBuffer::Scanf(char const*, ...)
00001df1	movb	0xf3(%ebp),%bl
00001df4	testb	$0x01,0x15(%esi)
00001df8	jne	0x00001e2c
00001dfa	movl	%esi,(%esp)
00001dfd	movl	$0x00000001,0x04(%esp)
00001e05	calll	CUtlBuffer::CheckGet(int)
00001e0a	cmpb	$0x01,%al
00001e0c	jne	0x00001e24
00001e0e	movl	(%esi),%eax
00001e10	movl	0x0c(%esi),%ecx
00001e13	movl	%ecx,%edx
00001e15	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001e18	movb	(%eax,%edx),%al
00001e1b	movb	%al,0xf2(%ebp)
00001e1e	incl	%ecx
00001e1f	movl	%ecx,0x0c(%esi)
00001e22	jmp	0x00001e4f
00001e24	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001e28	xorb	%al,%al
00001e2a	jmp	0x00001e4f
00001e2c	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf2(%ebp)
00001e30	leal	0xf2(%ebp),%eax
00001e33	movl	%eax,0x08(%esp)
00001e37	movl	0xe4(%ebp),%eax
00001e3a	leal	0x172d2-0x1c9e(%eax),%eax
00001e40	movl	%eax,0x04(%esp)
00001e44	movl	%esi,(%esp)
00001e47	calll	CUtlBuffer::Scanf(char const*, ...)
00001e4c	movb	0xf2(%ebp),%al
00001e4f	movb	%bl,%dl
00001e51	addb	$0xbf,%dl
00001e54	movb	$0x01,%cl
00001e56	cmpb	$0x06,%dl
00001e59	movb	$0x01,%dl
00001e5b	jb	0x00001e6a
00001e5d	xorb	%dl,%dl
00001e5f	cmpb	$0x61,%bl
00001e62	jl	0x00001e6a
00001e64	cmpb	$0x67,%bl
00001e67	setl	%dl
00001e6a	movb	%al,%ah
00001e6c	addb	$0xbf,%ah
00001e6f	cmpb	$0x06,%ah
00001e72	jb	0x00001e7f
00001e74	xorb	%cl,%cl
00001e76	cmpb	$0x61,%al
00001e78	jl	0x00001e7f
00001e7a	cmpb	$0x67,%al
00001e7c	setl	%cl
00001e7f	addb	$0xd0,%al
00001e81	addb	$0xd0,%bl
00001e84	cmpb	$0x0a,%al
00001e86	setb	%al
00001e89	cmpb	$0x0a,%bl
00001e8c	setb	%ah
00001e8f	orb	%dl,%ah
00001e91	je	0x00001e9d
00001e93	orb	%cl,%al
00001e95	cmpb	$0x01,%al
00001e97	je	0x00001d80
00001e9d	movl	0xdc(%ebp),%eax
00001ea0	movl	%eax,0x08(%esp)
00001ea4	movl	%esi,(%esp)
00001ea7	movl	SetSerializationDelimiter(CUtlCharConversion*),0x04(%esp)
00001eaf	calll	CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
00001eb4	xorb	%cl,%cl
00001eb6	testl	%edi,%edi
00001eb8	js	0x00002033
00001ebe	movl	%esi,(%esp)
00001ec1	calll	CUtlBuffer::EatWhiteSpace()
00001ec6	movl	%edi,0x04(%esp)
00001eca	movl	0x0c(%ebp),%eax
00001ecd	movl	%eax,(%esp)
00001ed0	calll	CUtlBinaryBlock::SetLength(int)
00001ed5	xorl	%edi,%edi
00001ed7	jmp	0x00001f19
00001ed9	nopl	SetSerializationDelimiter(CUtlCharConversion*)(%eax)
00001ee0	addl	$0x9f,%edx
00001ee3	xorb	%cl,%cl
00001ee5	cmpl	$0x05,%edx
00001ee8	ja	0x00002033
00001eee	addb	$0xa9,%al
00001ef0	xorb	%cl,%cl
00001ef2	cmpb	$0xff,%bl
00001ef5	je	0x00002033
00001efb	cmpb	$0xff,%al
00001efd	je	0x00002033
00001f03	shlb	$0x04,%bl
00001f06	orb	%bl,%al
00001f08	movl	0x0c(%ebp),%ecx
00001f0b	movl	(%ecx),%ecx
00001f0d	movb	%al,(%ecx,%edi)
00001f10	movl	%esi,(%esp)
00001f13	incl	%edi
00001f14	calll	CUtlBuffer::EatWhiteSpace()
00001f19	movb	$0x01,%cl
00001f1b	movl	0xe0(%ebp),%eax
00001f1e	cmpl	%eax,0x0c(%esi)
00001f21	jge	0x00002033
00001f27	testb	$0x01,0x15(%esi)
00001f2b	jne	0x00001f5f
00001f2d	movl	%esi,(%esp)
00001f30	movl	$0x00000001,0x04(%esp)
00001f38	calll	CUtlBuffer::CheckGet(int)
00001f3d	cmpb	$0x01,%al
00001f3f	jne	0x00001f57
00001f41	movl	(%esi),%ecx
00001f43	movl	0x0c(%esi),%eax
00001f46	movl	%eax,%edx
00001f48	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001f4b	movb	(%ecx,%edx),%bl
00001f4e	movb	%bl,0xf1(%ebp)
00001f51	incl	%eax
00001f52	movl	%eax,0x0c(%esi)
00001f55	jmp	0x00001f82
00001f57	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001f5b	xorb	%bl,%bl
00001f5d	jmp	0x00001f82
00001f5f	movb	SetSerializationDelimiter(CUtlCharConversion*),0xf1(%ebp)
00001f63	leal	0xf1(%ebp),%eax
00001f66	movl	%eax,0x08(%esp)
00001f6a	movl	0xe4(%ebp),%eax
00001f6d	leal	0x172d2-0x1c9e(%eax),%eax
00001f73	movl	%eax,0x04(%esp)
00001f77	movl	%esi,(%esp)
00001f7a	calll	CUtlBuffer::Scanf(char const*, ...)
00001f7f	movb	0xf1(%ebp),%bl
00001f82	testb	$0x01,0x15(%esi)
00001f86	jne	0x00001fba
00001f88	movl	%esi,(%esp)
00001f8b	movl	$0x00000001,0x04(%esp)
00001f93	calll	CUtlBuffer::CheckGet(int)
00001f98	cmpb	$0x01,%al
00001f9a	jne	0x00001fb2
00001f9c	movl	(%esi),%eax
00001f9e	movl	0x0c(%esi),%ecx
00001fa1	movl	%ecx,%edx
00001fa3	subl	SetSerializationArrayDelimiter(char const*)(%esi),%edx
00001fa6	movb	(%eax,%edx),%al
00001fa9	movb	%al,0xeb(%ebp)
00001fac	incl	%ecx
00001fad	movl	%ecx,0x0c(%esi)
00001fb0	jmp	0x00001fdd
00001fb2	movb	SetSerializationDelimiter(CUtlCharConversion*),0xeb(%ebp)
00001fb6	xorb	%al,%al
00001fb8	jmp	0x00001fdd
00001fba	movb	SetSerializationDelimiter(CUtlCharConversion*),0xeb(%ebp)
00001fbe	leal	0xeb(%ebp),%eax
00001fc1	movl	%eax,0x08(%esp)
00001fc5	movl	0xe4(%ebp),%eax
00001fc8	leal	0x172d2-0x1c9e(%eax),%eax
00001fce	movl	%eax,0x04(%esp)
00001fd2	movl	%esi,(%esp)
00001fd5	calll	CUtlBuffer::Scanf(char const*, ...)
00001fda	movb	0xeb(%ebp),%al
00001fdd	movsbl	%bl,%ecx
00001fe0	leal	0xd0(%ecx),%edx
00001fe3	cmpl	$0x09,%edx
00001fe6	ja	0x00001fed
00001fe8	addb	$0xd0,%bl
00001feb	jmp	0x00002007
00001fed	leal	0xbf(%ecx),%edx
00001ff0	cmpl	$0x05,%edx
00001ff3	ja	0x00001ffa
00001ff5	addb	$0xc9,%bl
00001ff8	jmp	0x00002007
00001ffa	addb	$0xa9,%bl
00001ffd	addl	$0x9f,%ecx
00002000	cmpl	$0x06,%ecx
00002003	jb	0x00002007
00002005	movb	$0xff,%bl
00002007	movsbl	%al,%edx
0000200a	leal	0xd0(%edx),%ecx
0000200d	cmpl	$0x09,%ecx
00002010	ja	0x00002019
00002012	addb	$0xd0,%al
00002014	jmp	0x00001ef0
00002019	leal	0xbf(%edx),%ecx
0000201c	cmpl	$0x05,%ecx
0000201f	ja	0x00001ee0
00002025	addb	$0xc9,%al
00002027	jmp	0x00001ef0
0000202c	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00002030	sete	%cl
00002033	movzbl	%cl,%eax
00002036	addl	$0x2c,%esp
00002039	popl	%esi
0000203a	popl	%edi
0000203b	popl	%ebx
0000203c	popl	%ebp
0000203d	ret
0000203e	nop
Serialize(CUtlBuffer&, CUtlString const&):
00002040	pushl	%ebp
00002041	movl	%esp,%ebp
00002043	pushl	%esi
00002044	subl	$0x14,%esp
00002047	calll	0x0000204c
0000204c	popl	%eax
0000204d	movl	_s_pConv-0x204c(%eax),%esi
00002053	movl	0x0c(%ebp),%eax
00002056	movl	%eax,(%esp)
00002059	calll	CUtlString::Get() const
0000205e	movl	%eax,0x08(%esp)
00002062	movl	%esi,0x04(%esp)
00002066	movl	0x08(%ebp),%esi
00002069	movl	%esi,(%esp)
0000206c	calll	CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*)
00002071	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
00002075	sete	%al
00002078	movzbl	%al,%eax
0000207b	addl	$0x14,%esp
0000207e	popl	%esi
0000207f	popl	%ebp
00002080	ret
00002081	nopl	%cs:SetSerializationDelimiter(CUtlCharConversion*)(%eax,%eax)
Unserialize(CUtlBuffer&, CUtlString&):
00002090	pushl	%ebp
00002091	movl	%esp,%ebp
00002093	pushl	%ebx
00002094	pushl	%edi
00002095	pushl	%esi
00002096	subl	$0x1c,%esp
00002099	calll	0x0000209e
0000209e	popl	%ebx
0000209f	movl	_s_pConv-0x209e(%ebx),%eax
000020a5	movl	%eax,0x04(%esp)
000020a9	movl	0x08(%ebp),%eax
000020ac	movl	%eax,(%esp)
000020af	movl	$0x00000001,0x08(%esp)
000020b7	calll	CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
000020bc	movl	%eax,%esi
000020be	leal	0xff(%esi),%eax
000020c1	movl	%eax,0x04(%esp)
000020c5	movl	0x0c(%ebp),%edi
000020c8	movl	%edi,(%esp)
000020cb	calll	CUtlString::SetLength(int)
000020d0	movl	_s_pConv-0x209e(%ebx),%ebx
000020d6	movl	%edi,(%esp)
000020d9	calll	CUtlString::Get()
000020de	movl	%esi,0x0c(%esp)
000020e2	movl	%eax,0x08(%esp)
000020e6	movl	%ebx,0x04(%esp)
000020ea	movl	0x08(%ebp),%esi
000020ed	movl	%esi,(%esp)
000020f0	calll	CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
000020f5	cmpb	SetSerializationDelimiter(CUtlCharConversion*),0x14(%esi)
000020f9	sete	%al
000020fc	movzbl	%al,%eax
000020ff	addl	$0x1c,%esp
00002102	popl	%esi
00002103	popl	%edi
00002104	popl	%ebx
00002105	popl	%ebp
00002106	ret
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(utlstring.o):
(__TEXT,__text) section
CUtlBinaryBlock::CUtlBinaryBlock(int, int):
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%esi
00000004	pushl	%eax
00000005	movl	0x08(%ebp),%esi
00000008	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000000e	movl	0x0c(%ebp),%eax
00000011	movl	%eax,0x08(%esi)
00000014	movl	0x10(%ebp),%eax
00000017	movl	%eax,0x04(%esi)
0000001a	testl	%eax,%eax
0000001c	je	0x00000028
0000001e	movl	%eax,(%esp)
00000021	calll	_malloc
00000026	movl	%eax,(%esi)
00000028	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
0000002f	addl	$0x04,%esp
00000032	popl	%esi
00000033	popl	%ebp
00000034	ret
00000035	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(int, int):
00000040	pushl	%ebp
00000041	movl	%esp,%ebp
00000043	pushl	%esi
00000044	pushl	%eax
00000045	movl	0x08(%ebp),%esi
00000048	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000004e	movl	0x0c(%ebp),%eax
00000051	movl	%eax,0x08(%esi)
00000054	movl	0x10(%ebp),%eax
00000057	movl	%eax,0x04(%esi)
0000005a	testl	%eax,%eax
0000005c	je	0x00000068
0000005e	movl	%eax,(%esp)
00000061	calll	_malloc
00000066	movl	%eax,(%esi)
00000068	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
0000006f	addl	$0x04,%esp
00000072	popl	%esi
00000073	popl	%ebp
00000074	ret
00000075	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int):
00000080	movl	0x08(%esp),%ecx
00000084	movl	0x04(%esp),%eax
00000088	movl	%ecx,(%eax)
0000008a	movl	0x0c(%esp),%ecx
0000008e	movl	%ecx,0x04(%eax)
00000091	movl	$0xffffffff,0x08(%eax)
00000098	movl	0x10(%esp),%ecx
0000009c	movl	%ecx,0x0c(%eax)
0000009f	ret
CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int):
000000a0	movl	0x08(%esp),%ecx
000000a4	movl	0x04(%esp),%eax
000000a8	movl	%ecx,(%eax)
000000aa	movl	0x0c(%esp),%ecx
000000ae	movl	%ecx,0x04(%eax)
000000b1	movl	$0xffffffff,0x08(%eax)
000000b8	movl	0x10(%esp),%ecx
000000bc	movl	%ecx,0x0c(%eax)
000000bf	ret
CUtlBinaryBlock::CUtlBinaryBlock(void const*, int):
000000c0	movl	0x08(%esp),%ecx
000000c4	movl	0x04(%esp),%eax
000000c8	movl	%ecx,(%eax)
000000ca	movl	0x0c(%esp),%ecx
000000ce	movl	%ecx,0x04(%eax)
000000d1	movl	$0xfffffffe,0x08(%eax)
000000d8	movl	%ecx,0x0c(%eax)
000000db	ret
000000dc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::CUtlBinaryBlock(void const*, int):
000000e0	movl	0x08(%esp),%ecx
000000e4	movl	0x04(%esp),%eax
000000e8	movl	%ecx,(%eax)
000000ea	movl	0x0c(%esp),%ecx
000000ee	movl	%ecx,0x04(%eax)
000000f1	movl	$0xfffffffe,0x08(%eax)
000000f8	movl	%ecx,0x0c(%eax)
000000fb	ret
000000fc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&):
00000100	pushl	%ebp
00000101	movl	%esp,%ebp
00000103	pushl	%ebx
00000104	pushl	%edi
00000105	pushl	%esi
00000106	subl	$0x0c,%esp
00000109	movl	0x08(%ebp),%edi
0000010c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00000112	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
00000119	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
00000120	movl	0x0c(%ebp),%eax
00000123	movl	(%eax),%esi
00000125	testl	%esi,%esi
00000127	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
0000012c	cmovnel	0x0c(%eax),%ebx
00000130	movl	%ebx,0x0c(%edi)
00000133	testl	%ebx,%ebx
00000135	movl	%ebx,%eax
00000137	jle	0x00000154
00000139	movl	%ebx,0x04(%esp)
0000013d	movl	%edi,(%esp)
00000140	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000145	movl	0x04(%edi),%eax
00000148	cmpl	%ebx,%eax
0000014a	jge	0x00000151
0000014c	movl	%eax,0x0c(%edi)
0000014f	jmp	0x00000154
00000151	movl	0x0c(%edi),%eax
00000154	testl	%eax,%eax
00000156	je	0x00000189
00000158	addl	%esi,%ebx
0000015a	movl	(%edi),%ecx
0000015c	cmpl	%ebx,%ecx
0000015e	jae	0x00000167
00000160	leal	(%ecx,%eax),%edx
00000163	cmpl	%esi,%edx
00000165	ja	0x00000179
00000167	movl	%eax,0x08(%esp)
0000016b	movl	%esi,0x04(%esp)
0000016f	movl	%ecx,(%esp)
00000172	calll	_memcpy
00000177	jmp	0x00000189
00000179	movl	%eax,0x08(%esp)
0000017d	movl	%esi,0x04(%esp)
00000181	movl	%ecx,(%esp)
00000184	calll	_memmove
00000189	addl	$0x0c,%esp
0000018c	popl	%esi
0000018d	popl	%edi
0000018e	popl	%ebx
0000018f	popl	%ebp
00000190	ret
00000191	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&):
000001a0	pushl	%ebp
000001a1	movl	%esp,%ebp
000001a3	pushl	%ebx
000001a4	pushl	%edi
000001a5	pushl	%esi
000001a6	subl	$0x0c,%esp
000001a9	movl	0x08(%ebp),%edi
000001ac	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
000001b2	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
000001b9	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000001c0	movl	0x0c(%ebp),%eax
000001c3	movl	(%eax),%esi
000001c5	testl	%esi,%esi
000001c7	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
000001cc	cmovnel	0x0c(%eax),%ebx
000001d0	movl	%ebx,0x0c(%edi)
000001d3	testl	%ebx,%ebx
000001d5	movl	%ebx,%eax
000001d7	jle	0x000001f4
000001d9	movl	%ebx,0x04(%esp)
000001dd	movl	%edi,(%esp)
000001e0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000001e5	movl	0x04(%edi),%eax
000001e8	cmpl	%ebx,%eax
000001ea	jge	0x000001f1
000001ec	movl	%eax,0x0c(%edi)
000001ef	jmp	0x000001f4
000001f1	movl	0x0c(%edi),%eax
000001f4	testl	%eax,%eax
000001f6	je	0x00000229
000001f8	addl	%esi,%ebx
000001fa	movl	(%edi),%ecx
000001fc	cmpl	%ebx,%ecx
000001fe	jae	0x00000207
00000200	leal	(%ecx,%eax),%edx
00000203	cmpl	%esi,%edx
00000205	ja	0x00000219
00000207	movl	%eax,0x08(%esp)
0000020b	movl	%esi,0x04(%esp)
0000020f	movl	%ecx,(%esp)
00000212	calll	_memcpy
00000217	jmp	0x00000229
00000219	movl	%eax,0x08(%esp)
0000021d	movl	%esi,0x04(%esp)
00000221	movl	%ecx,(%esp)
00000224	calll	_memmove
00000229	addl	$0x0c,%esp
0000022c	popl	%esi
0000022d	popl	%edi
0000022e	popl	%ebx
0000022f	popl	%ebp
00000230	ret
00000231	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::Set(void const*, int):
00000240	pushl	%ebp
00000241	movl	%esp,%ebp
00000243	pushl	%ebx
00000244	pushl	%edi
00000245	pushl	%esi
00000246	subl	$0x0c,%esp
00000249	movl	0x0c(%ebp),%esi
0000024c	testl	%esi,%esi
0000024e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%edi
00000253	cmovnel	0x10(%ebp),%edi
00000257	movl	0x08(%ebp),%ebx
0000025a	movl	%edi,0x0c(%ebx)
0000025d	movl	0x04(%ebx),%ecx
00000260	cmpl	%edi,%ecx
00000262	movl	%edi,%eax
00000264	jge	0x00000285
00000266	movl	%edi,%eax
00000268	subl	%ecx,%eax
0000026a	movl	%eax,0x04(%esp)
0000026e	movl	%ebx,(%esp)
00000271	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000276	movl	0x04(%ebx),%eax
00000279	cmpl	%edi,%eax
0000027b	jge	0x00000282
0000027d	movl	%eax,0x0c(%ebx)
00000280	jmp	0x00000285
00000282	movl	0x0c(%ebx),%eax
00000285	testl	%eax,%eax
00000287	je	0x000002ba
00000289	addl	%esi,%edi
0000028b	movl	(%ebx),%ecx
0000028d	cmpl	%edi,%ecx
0000028f	jae	0x00000298
00000291	leal	(%ecx,%eax),%edx
00000294	cmpl	%esi,%edx
00000296	ja	0x000002aa
00000298	movl	%eax,0x08(%esp)
0000029c	movl	%esi,0x04(%esp)
000002a0	movl	%ecx,(%esp)
000002a3	calll	_memcpy
000002a8	jmp	0x000002ba
000002aa	movl	%eax,0x08(%esp)
000002ae	movl	%esi,0x04(%esp)
000002b2	movl	%ecx,(%esp)
000002b5	calll	_memmove
000002ba	addl	$0x0c,%esp
000002bd	popl	%esi
000002be	popl	%edi
000002bf	popl	%ebx
000002c0	popl	%ebp
000002c1	ret
000002c2	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::Get(void*, int) const:
000002d0	pushl	%ebp
000002d1	movl	%esp,%ebp
000002d3	subl	$0x18,%esp
000002d6	movl	0x08(%ebp),%ecx
000002d9	movl	0x0c(%ecx),%edx
000002dc	movl	0x10(%ebp),%eax
000002df	cmpl	%eax,%edx
000002e1	cmovll	%edx,%eax
000002e4	testl	%eax,%eax
000002e6	jle	0x000002fd
000002e8	movl	0x0c(%ebp),%edx
000002eb	movl	(%ecx),%ecx
000002ed	movl	%eax,0x08(%esp)
000002f1	movl	%ecx,0x04(%esp)
000002f5	movl	%edx,(%esp)
000002f8	calll	_memcpy
000002fd	addl	$0x18,%esp
00000300	popl	%ebp
00000301	ret
00000302	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::SetLength(int):
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	pushl	%edi
00000314	pushl	%esi
00000315	subl	$0x10,%esp
00000318	movl	0x0c(%ebp),%edi
0000031b	movl	0x08(%ebp),%esi
0000031e	movl	%edi,0x0c(%esi)
00000321	movl	0x04(%esi),%eax
00000324	cmpl	%edi,%eax
00000326	jge	0x00000342
00000328	movl	%edi,%ecx
0000032a	subl	%eax,%ecx
0000032c	movl	%ecx,0x04(%esp)
00000330	movl	%esi,(%esp)
00000333	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000338	movl	0x04(%esi),%eax
0000033b	cmpl	%edi,%eax
0000033d	jge	0x00000342
0000033f	movl	%eax,0x0c(%esi)
00000342	addl	$0x10,%esp
00000345	popl	%esi
00000346	popl	%edi
00000347	popl	%ebp
00000348	ret
00000349	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlBinaryBlock::operator=(CUtlBinaryBlock const&):
00000350	pushl	%ebp
00000351	movl	%esp,%ebp
00000353	pushl	%ebx
00000354	pushl	%edi
00000355	pushl	%esi
00000356	subl	$0x0c,%esp
00000359	movl	0x0c(%ebp),%eax
0000035c	movl	(%eax),%edi
0000035e	testl	%edi,%edi
00000360	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
00000365	cmovnel	0x0c(%eax),%ebx
00000369	movl	0x08(%ebp),%esi
0000036c	movl	%ebx,0x0c(%esi)
0000036f	movl	0x04(%esi),%ecx
00000372	cmpl	%ebx,%ecx
00000374	movl	%ebx,%eax
00000376	jge	0x00000397
00000378	movl	%ebx,%eax
0000037a	subl	%ecx,%eax
0000037c	movl	%eax,0x04(%esp)
00000380	movl	%esi,(%esp)
00000383	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000388	movl	0x04(%esi),%eax
0000038b	cmpl	%ebx,%eax
0000038d	jge	0x00000394
0000038f	movl	%eax,0x0c(%esi)
00000392	jmp	0x00000397
00000394	movl	0x0c(%esi),%eax
00000397	testl	%eax,%eax
00000399	je	0x000003cc
0000039b	addl	%edi,%ebx
0000039d	movl	(%esi),%ecx
0000039f	cmpl	%ebx,%ecx
000003a1	jae	0x000003aa
000003a3	leal	(%ecx,%eax),%edx
000003a6	cmpl	%edi,%edx
000003a8	ja	0x000003bc
000003aa	movl	%eax,0x08(%esp)
000003ae	movl	%edi,0x04(%esp)
000003b2	movl	%ecx,(%esp)
000003b5	calll	_memcpy
000003ba	jmp	0x000003cc
000003bc	movl	%eax,0x08(%esp)
000003c0	movl	%edi,0x04(%esp)
000003c4	movl	%ecx,(%esp)
000003c7	calll	_memmove
000003cc	movl	%esi,%eax
000003ce	addl	$0x0c,%esp
000003d1	popl	%esi
000003d2	popl	%edi
000003d3	popl	%ebx
000003d4	popl	%ebp
000003d5	ret
000003d6	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlBinaryBlock::operator==(CUtlBinaryBlock const&) const:
000003e0	pushl	%ebp
000003e1	movl	%esp,%ebp
000003e3	pushl	%esi
000003e4	subl	$0x14,%esp
000003e7	movl	0x08(%ebp),%ecx
000003ea	movl	0x0c(%ecx),%eax
000003ed	xorb	%dl,%dl
000003ef	movl	0x0c(%ebp),%esi
000003f2	cmpl	%eax,0x0c(%esi)
000003f5	jne	0x00000410
000003f7	movl	(%esi),%edx
000003f9	movl	(%ecx),%ecx
000003fb	movl	%eax,0x08(%esp)
000003ff	movl	%ecx,0x04(%esp)
00000403	movl	%edx,(%esp)
00000406	calll	_memcmp
0000040b	testl	%eax,%eax
0000040d	sete	%dl
00000410	movzbl	%dl,%eax
00000413	addl	$0x14,%esp
00000416	popl	%esi
00000417	popl	%ebp
00000418	ret
00000419	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::CUtlString():
00000420	movl	0x04(%esp),%eax
00000424	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%eax)
0000042b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000431	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000438	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%eax)
0000043f	ret
CUtlString::CUtlString():
00000440	movl	0x04(%esp),%eax
00000444	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%eax)
0000044b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000451	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000458	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%eax)
0000045f	ret
CUtlString::CUtlString(char const*):
00000460	pushl	%ebp
00000461	movl	%esp,%ebp
00000463	pushl	%ebx
00000464	pushl	%edi
00000465	pushl	%esi
00000466	subl	$0x0c,%esp
00000469	movl	0x08(%ebp),%ebx
0000046c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000473	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
00000479	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000480	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00000487	movl	0x0c(%ebp),%edi
0000048a	testl	%edi,%edi
0000048c	jne	0x00000497
0000048e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000495	jmp	0x000004fb
00000497	movl	%edi,(%esp)
0000049a	calll	_strlen
0000049f	movl	%eax,%esi
000004a1	incl	%esi
000004a2	movl	%esi,0x0c(%ebx)
000004a5	testl	%esi,%esi
000004a7	movl	%esi,%eax
000004a9	jle	0x000004c6
000004ab	movl	%esi,0x04(%esp)
000004af	movl	%ebx,(%esp)
000004b2	calll	CUtlMemory<unsigned char, int>::Grow(int)
000004b7	movl	0x04(%ebx),%eax
000004ba	cmpl	%esi,%eax
000004bc	jge	0x000004c3
000004be	movl	%eax,0x0c(%ebx)
000004c1	jmp	0x000004c6
000004c3	movl	0x0c(%ebx),%eax
000004c6	testl	%eax,%eax
000004c8	je	0x000004fb
000004ca	addl	%edi,%esi
000004cc	movl	(%ebx),%ecx
000004ce	cmpl	%esi,%ecx
000004d0	jae	0x000004d9
000004d2	leal	(%ecx,%eax),%edx
000004d5	cmpl	%edi,%edx
000004d7	ja	0x000004eb
000004d9	movl	%eax,0x08(%esp)
000004dd	movl	%edi,0x04(%esp)
000004e1	movl	%ecx,(%esp)
000004e4	calll	_memcpy
000004e9	jmp	0x000004fb
000004eb	movl	%eax,0x08(%esp)
000004ef	movl	%edi,0x04(%esp)
000004f3	movl	%ecx,(%esp)
000004f6	calll	_memmove
000004fb	addl	$0x0c,%esp
000004fe	popl	%esi
000004ff	popl	%edi
00000500	popl	%ebx
00000501	popl	%ebp
00000502	ret
00000503	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(char const*):
00000510	pushl	%ebp
00000511	movl	%esp,%ebp
00000513	pushl	%ebx
00000514	pushl	%edi
00000515	pushl	%esi
00000516	subl	$0x0c,%esp
00000519	movl	0x08(%ebp),%ebx
0000051c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000523	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
00000529	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000530	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00000537	movl	0x0c(%ebp),%edi
0000053a	testl	%edi,%edi
0000053c	jne	0x00000547
0000053e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000545	jmp	0x000005ab
00000547	movl	%edi,(%esp)
0000054a	calll	_strlen
0000054f	movl	%eax,%esi
00000551	incl	%esi
00000552	movl	%esi,0x0c(%ebx)
00000555	testl	%esi,%esi
00000557	movl	%esi,%eax
00000559	jle	0x00000576
0000055b	movl	%esi,0x04(%esp)
0000055f	movl	%ebx,(%esp)
00000562	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000567	movl	0x04(%ebx),%eax
0000056a	cmpl	%esi,%eax
0000056c	jge	0x00000573
0000056e	movl	%eax,0x0c(%ebx)
00000571	jmp	0x00000576
00000573	movl	0x0c(%ebx),%eax
00000576	testl	%eax,%eax
00000578	je	0x000005ab
0000057a	addl	%edi,%esi
0000057c	movl	(%ebx),%ecx
0000057e	cmpl	%esi,%ecx
00000580	jae	0x00000589
00000582	leal	(%ecx,%eax),%edx
00000585	cmpl	%edi,%edx
00000587	ja	0x0000059b
00000589	movl	%eax,0x08(%esp)
0000058d	movl	%edi,0x04(%esp)
00000591	movl	%ecx,(%esp)
00000594	calll	_memcpy
00000599	jmp	0x000005ab
0000059b	movl	%eax,0x08(%esp)
0000059f	movl	%edi,0x04(%esp)
000005a3	movl	%ecx,(%esp)
000005a6	calll	_memmove
000005ab	addl	$0x0c,%esp
000005ae	popl	%esi
000005af	popl	%edi
000005b0	popl	%ebx
000005b1	popl	%ebp
000005b2	ret
000005b3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Set(char const*):
000005c0	pushl	%ebp
000005c1	movl	%esp,%ebp
000005c3	pushl	%ebx
000005c4	pushl	%edi
000005c5	pushl	%esi
000005c6	subl	$0x0c,%esp
000005c9	movl	0x0c(%ebp),%edi
000005cc	testl	%edi,%edi
000005ce	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
000005d3	je	0x000005e0
000005d5	movl	%edi,(%esp)
000005d8	calll	_strlen
000005dd	movl	%eax,%esi
000005df	incl	%esi
000005e0	movl	0x08(%ebp),%ebx
000005e3	testl	%edi,%edi
000005e5	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%eax
000005ea	cmovel	%eax,%esi
000005ed	movl	%esi,0x0c(%ebx)
000005f0	movl	0x04(%ebx),%ecx
000005f3	cmpl	%esi,%ecx
000005f5	movl	%esi,%eax
000005f7	jge	0x00000618
000005f9	movl	%esi,%eax
000005fb	subl	%ecx,%eax
000005fd	movl	%eax,0x04(%esp)
00000601	movl	%ebx,(%esp)
00000604	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000609	movl	0x04(%ebx),%eax
0000060c	cmpl	%esi,%eax
0000060e	jge	0x00000615
00000610	movl	%eax,0x0c(%ebx)
00000613	jmp	0x00000618
00000615	movl	0x0c(%ebx),%eax
00000618	testl	%eax,%eax
0000061a	je	0x0000064d
0000061c	addl	%edi,%esi
0000061e	movl	(%ebx),%ecx
00000620	cmpl	%esi,%ecx
00000622	jae	0x0000062b
00000624	leal	(%ecx,%eax),%edx
00000627	cmpl	%edi,%edx
00000629	ja	0x0000063d
0000062b	movl	%eax,0x08(%esp)
0000062f	movl	%edi,0x04(%esp)
00000633	movl	%ecx,(%esp)
00000636	calll	_memcpy
0000063b	jmp	0x0000064d
0000063d	movl	%eax,0x08(%esp)
00000641	movl	%edi,0x04(%esp)
00000645	movl	%ecx,(%esp)
00000648	calll	_memmove
0000064d	addl	$0x0c,%esp
00000650	popl	%esi
00000651	popl	%edi
00000652	popl	%ebx
00000653	popl	%ebp
00000654	ret
00000655	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(CUtlString const&):
00000660	jmp	CUtlString::CUtlString(CUtlString const&)
00000665	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(CUtlString const&):
00000670	pushl	%ebp
00000671	movl	%esp,%ebp
00000673	pushl	%ebx
00000674	pushl	%edi
00000675	pushl	%esi
00000676	subl	$0x0c,%esp
00000679	calll	0x0000067e
0000067e	popl	%eax
0000067f	movl	0x08(%ebp),%ebx
00000682	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00000689	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000068f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00000696	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000069d	movl	0x0c(%ebp),%ecx
000006a0	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
000006a4	jne	0x000006d8
000006a6	leal	0xc978-0x67e(%eax),%edi
000006ac	movl	%edi,(%esp)
000006af	calll	_strlen
000006b4	movl	%eax,%esi
000006b6	incl	%esi
000006b7	movl	%esi,0x0c(%ebx)
000006ba	testl	%esi,%esi
000006bc	movl	%esi,%eax
000006be	jle	0x000006ea
000006c0	movl	%esi,0x04(%esp)
000006c4	movl	%ebx,(%esp)
000006c7	calll	CUtlMemory<unsigned char, int>::Grow(int)
000006cc	movl	0x04(%ebx),%eax
000006cf	cmpl	%esi,%eax
000006d1	jge	0x000006e7
000006d3	movl	%eax,0x0c(%ebx)
000006d6	jmp	0x000006ea
000006d8	movl	(%ecx),%edi
000006da	testl	%edi,%edi
000006dc	jne	0x000006ac
000006de	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
000006e5	jmp	0x0000071f
000006e7	movl	0x0c(%ebx),%eax
000006ea	testl	%eax,%eax
000006ec	je	0x0000071f
000006ee	addl	%edi,%esi
000006f0	movl	(%ebx),%ecx
000006f2	cmpl	%esi,%ecx
000006f4	jae	0x000006fd
000006f6	leal	(%ecx,%eax),%edx
000006f9	cmpl	%edi,%edx
000006fb	ja	0x0000070f
000006fd	movl	%eax,0x08(%esp)
00000701	movl	%edi,0x04(%esp)
00000705	movl	%ecx,(%esp)
00000708	calll	_memcpy
0000070d	jmp	0x0000071f
0000070f	movl	%eax,0x08(%esp)
00000713	movl	%edi,0x04(%esp)
00000717	movl	%ecx,(%esp)
0000071a	calll	_memmove
0000071f	addl	$0x0c,%esp
00000722	popl	%esi
00000723	popl	%edi
00000724	popl	%ebx
00000725	popl	%ebp
00000726	ret
00000727	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Get() const:
00000730	movl	0x04(%esp),%eax
00000734	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000738	jne	0x00000747
0000073a	calll	0x0000073f
0000073f	popl	%eax
00000740	leal	0xc978-0x73f(%eax),%eax
00000746	ret
00000747	movl	(%eax),%eax
00000749	ret
0000074a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::CUtlString(void*, int, int):
00000750	movl	0x08(%esp),%ecx
00000754	movl	0x04(%esp),%eax
00000758	movl	%ecx,(%eax)
0000075a	movl	0x0c(%esp),%ecx
0000075e	movl	%ecx,0x04(%eax)
00000761	movl	$0xffffffff,0x08(%eax)
00000768	movl	0x10(%esp),%ecx
0000076c	movl	%ecx,0x0c(%eax)
0000076f	ret
CUtlString::CUtlString(void*, int, int):
00000770	movl	0x08(%esp),%ecx
00000774	movl	0x04(%esp),%eax
00000778	movl	%ecx,(%eax)
0000077a	movl	0x0c(%esp),%ecx
0000077e	movl	%ecx,0x04(%eax)
00000781	movl	$0xffffffff,0x08(%eax)
00000788	movl	0x10(%esp),%ecx
0000078c	movl	%ecx,0x0c(%eax)
0000078f	ret
CUtlString::CUtlString(void const*, int):
00000790	movl	0x08(%esp),%ecx
00000794	movl	0x04(%esp),%eax
00000798	movl	%ecx,(%eax)
0000079a	movl	0x0c(%esp),%ecx
0000079e	movl	%ecx,0x04(%eax)
000007a1	movl	$0xfffffffe,0x08(%eax)
000007a8	movl	%ecx,0x0c(%eax)
000007ab	ret
000007ac	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::CUtlString(void const*, int):
000007b0	movl	0x08(%esp),%ecx
000007b4	movl	0x04(%esp),%eax
000007b8	movl	%ecx,(%eax)
000007ba	movl	0x0c(%esp),%ecx
000007be	movl	%ecx,0x04(%eax)
000007c1	movl	$0xfffffffe,0x08(%eax)
000007c8	movl	%ecx,0x0c(%eax)
000007cb	ret
000007cc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::SetDirect(char const*, int):
000007d0	pushl	%ebp
000007d1	movl	%esp,%ebp
000007d3	pushl	%ebx
000007d4	pushl	%edi
000007d5	pushl	%esi
000007d6	subl	$0x0c,%esp
000007d9	movl	0x10(%ebp),%eax
000007dc	leal	0x01(%eax),%eax
000007df	movl	0x0c(%ebp),%ebx
000007e2	testl	%ebx,%ebx
000007e4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
000007e9	cmovnel	%eax,%esi
000007ec	movl	0x08(%ebp),%edi
000007ef	movl	%esi,0x0c(%edi)
000007f2	movl	0x04(%edi),%ecx
000007f5	cmpl	%esi,%ecx
000007f7	movl	%esi,%eax
000007f9	jge	0x0000081a
000007fb	movl	%esi,%eax
000007fd	subl	%ecx,%eax
000007ff	movl	%eax,0x04(%esp)
00000803	movl	%edi,(%esp)
00000806	calll	CUtlMemory<unsigned char, int>::Grow(int)
0000080b	movl	0x04(%edi),%eax
0000080e	cmpl	%esi,%eax
00000810	jge	0x00000817
00000812	movl	%eax,0x0c(%edi)
00000815	jmp	0x0000081a
00000817	movl	0x0c(%edi),%eax
0000081a	testl	%eax,%eax
0000081c	je	0x0000084f
0000081e	addl	%ebx,%esi
00000820	movl	(%edi),%ecx
00000822	cmpl	%esi,%ecx
00000824	jae	0x0000082d
00000826	leal	(%ecx,%eax),%edx
00000829	cmpl	%ebx,%edx
0000082b	ja	0x0000083f
0000082d	movl	%eax,0x08(%esp)
00000831	movl	%ebx,0x04(%esp)
00000835	movl	%ecx,(%esp)
00000838	calll	_memcpy
0000083d	jmp	0x0000084f
0000083f	movl	%eax,0x08(%esp)
00000843	movl	%ebx,0x04(%esp)
00000847	movl	%ecx,(%esp)
0000084a	calll	_memmove
0000084f	movl	(%edi),%eax
00000851	movl	0x10(%ebp),%ecx
00000854	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax,%ecx)
00000858	addl	$0x0c,%esp
0000085b	popl	%esi
0000085c	popl	%edi
0000085d	popl	%ebx
0000085e	popl	%ebp
0000085f	ret
CUtlString::Length() const:
00000860	movl	0x04(%esp),%eax
00000864	movl	0x0c(%eax),%eax
00000867	xorl	%ecx,%ecx
00000869	testl	%eax,%eax
0000086b	leal	0xff(%eax),%eax
0000086e	cmovel	%ecx,%eax
00000871	ret
00000872	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::SetLength(int):
00000880	pushl	%ebp
00000881	movl	%esp,%ebp
00000883	pushl	%edi
00000884	pushl	%esi
00000885	subl	$0x10,%esp
00000888	movl	0x0c(%ebp),%ecx
0000088b	xorl	%eax,%eax
0000088d	testl	%ecx,%ecx
0000088f	leal	0x01(%ecx),%edi
00000892	cmovlel	%eax,%edi
00000895	movl	0x08(%ebp),%esi
00000898	movl	%edi,0x0c(%esi)
0000089b	movl	0x04(%esi),%eax
0000089e	cmpl	%edi,%eax
000008a0	jge	0x000008bc
000008a2	movl	%edi,%ecx
000008a4	subl	%eax,%ecx
000008a6	movl	%ecx,0x04(%esp)
000008aa	movl	%esi,(%esp)
000008ad	calll	CUtlMemory<unsigned char, int>::Grow(int)
000008b2	movl	0x04(%esi),%eax
000008b5	cmpl	%edi,%eax
000008b7	jge	0x000008bc
000008b9	movl	%eax,0x0c(%esi)
000008bc	addl	$0x10,%esp
000008bf	popl	%esi
000008c0	popl	%edi
000008c1	popl	%ebp
000008c2	ret
000008c3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator char const*() const:
000008d0	movl	0x04(%esp),%eax
000008d4	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
000008d8	jne	0x000008e7
000008da	calll	0x000008df
000008df	popl	%eax
000008e0	leal	0xc978-0x8df(%eax),%eax
000008e6	ret
000008e7	movl	(%eax),%eax
000008e9	ret
000008ea	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Get():
000008f0	pushl	%ebp
000008f1	movl	%esp,%ebp
000008f3	pushl	%esi
000008f4	subl	$0x14,%esp
000008f7	movl	0x08(%ebp),%esi
000008fa	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
000008fe	jne	0x00000930
00000900	movl	$0x00000001,0x0c(%esi)
00000907	movl	0x04(%esi),%eax
0000090a	testl	%eax,%eax
0000090c	jg	0x0000092b
0000090e	movl	$0x00000001,%ecx
00000913	subl	%eax,%ecx
00000915	movl	%ecx,0x04(%esp)
00000919	movl	%esi,(%esp)
0000091c	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000921	movl	0x04(%esi),%eax
00000924	testl	%eax,%eax
00000926	jg	0x0000092b
00000928	movl	%eax,0x0c(%esi)
0000092b	movl	(%esi),%eax
0000092d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000930	movl	(%esi),%eax
00000932	addl	$0x14,%esp
00000935	popl	%esi
00000936	popl	%ebp
00000937	ret
00000938	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Purge():
00000940	pushl	%ebp
00000941	movl	%esp,%ebp
00000943	pushl	%esi
00000944	subl	$0x14,%esp
00000947	movl	0x08(%ebp),%esi
0000094a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
00000951	movl	0x04(%esi),%eax
00000954	testl	%eax,%eax
00000956	jns	0x00000970
00000958	negl	%eax
0000095a	movl	%eax,0x04(%esp)
0000095e	movl	%esi,(%esp)
00000961	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000966	movl	0x04(%esi),%eax
00000969	testl	%eax,%eax
0000096b	jns	0x00000970
0000096d	movl	%eax,0x0c(%esi)
00000970	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esi)
00000974	js	0x00000991
00000976	movl	(%esi),%eax
00000978	testl	%eax,%eax
0000097a	je	0x0000098a
0000097c	movl	%eax,(%esp)
0000097f	calll	_free
00000984	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
0000098a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%esi)
00000991	addl	$0x14,%esp
00000994	popl	%esi
00000995	popl	%ebp
00000996	ret
00000997	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::ToLower():
000009a0	pushl	%ebp
000009a1	movl	%esp,%ebp
000009a3	pushl	%edi
000009a4	pushl	%esi
000009a5	subl	$0x10,%esp
000009a8	movl	0x08(%ebp),%esi
000009ab	movl	0x0c(%esi),%ecx
000009ae	xorl	%eax,%eax
000009b0	testl	%ecx,%ecx
000009b2	leal	0xff(%ecx),%edi
000009b5	cmovel	%eax,%edi
000009b8	jmp	0x000009d6
000009ba	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
000009c0	movl	(%esi),%eax
000009c2	movzbl	0xff(%eax,%edi),%eax
000009c7	movl	%eax,(%esp)
000009ca	calll	___tolower
000009cf	movl	(%esi),%ecx
000009d1	movb	%al,0xff(%ecx,%edi)
000009d5	decl	%edi
000009d6	testl	%edi,%edi
000009d8	jg	0x000009c0
000009da	addl	$0x10,%esp
000009dd	popl	%esi
000009de	popl	%edi
000009df	popl	%ebp
000009e0	ret
000009e1	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::ToUpper():
000009f0	pushl	%ebp
000009f1	movl	%esp,%ebp
000009f3	pushl	%edi
000009f4	pushl	%esi
000009f5	subl	$0x10,%esp
000009f8	movl	0x08(%ebp),%esi
000009fb	movl	0x0c(%esi),%ecx
000009fe	xorl	%eax,%eax
00000a00	testl	%ecx,%ecx
00000a02	leal	0xff(%ecx),%edi
00000a05	cmovel	%eax,%edi
00000a08	jmp	0x00000a26
00000a0a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00000a10	movl	(%esi),%eax
00000a12	movzbl	0xff(%eax,%edi),%eax
00000a17	movl	%eax,(%esp)
00000a1a	calll	___toupper
00000a1f	movl	(%esi),%ecx
00000a21	movb	%al,0xff(%ecx,%edi)
00000a25	decl	%edi
00000a26	testl	%edi,%edi
00000a28	jg	0x00000a10
00000a2a	addl	$0x10,%esp
00000a2d	popl	%esi
00000a2e	popl	%edi
00000a2f	popl	%ebp
00000a30	ret
00000a31	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator=(CUtlString const&):
00000a40	pushl	%ebp
00000a41	movl	%esp,%ebp
00000a43	pushl	%ebx
00000a44	pushl	%edi
00000a45	pushl	%esi
00000a46	subl	$0x0c,%esp
00000a49	movl	0x0c(%ebp),%eax
00000a4c	movl	(%eax),%edi
00000a4e	testl	%edi,%edi
00000a50	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ebx
00000a55	cmovnel	0x0c(%eax),%ebx
00000a59	movl	0x08(%ebp),%esi
00000a5c	movl	%ebx,0x0c(%esi)
00000a5f	movl	0x04(%esi),%ecx
00000a62	cmpl	%ebx,%ecx
00000a64	movl	%ebx,%eax
00000a66	jge	0x00000a87
00000a68	movl	%ebx,%eax
00000a6a	subl	%ecx,%eax
00000a6c	movl	%eax,0x04(%esp)
00000a70	movl	%esi,(%esp)
00000a73	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000a78	movl	0x04(%esi),%eax
00000a7b	cmpl	%ebx,%eax
00000a7d	jge	0x00000a84
00000a7f	movl	%eax,0x0c(%esi)
00000a82	jmp	0x00000a87
00000a84	movl	0x0c(%esi),%eax
00000a87	testl	%eax,%eax
00000a89	je	0x00000abc
00000a8b	addl	%edi,%ebx
00000a8d	movl	(%esi),%ecx
00000a8f	cmpl	%ebx,%ecx
00000a91	jae	0x00000a9a
00000a93	leal	(%ecx,%eax),%edx
00000a96	cmpl	%edi,%edx
00000a98	ja	0x00000aac
00000a9a	movl	%eax,0x08(%esp)
00000a9e	movl	%edi,0x04(%esp)
00000aa2	movl	%ecx,(%esp)
00000aa5	calll	_memcpy
00000aaa	jmp	0x00000abc
00000aac	movl	%eax,0x08(%esp)
00000ab0	movl	%edi,0x04(%esp)
00000ab4	movl	%ecx,(%esp)
00000ab7	calll	_memmove
00000abc	movl	%esi,%eax
00000abe	addl	$0x0c,%esp
00000ac1	popl	%esi
00000ac2	popl	%edi
00000ac3	popl	%ebx
00000ac4	popl	%ebp
00000ac5	ret
00000ac6	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator=(char const*):
00000ad0	pushl	%ebp
00000ad1	movl	%esp,%ebp
00000ad3	pushl	%ebx
00000ad4	pushl	%edi
00000ad5	pushl	%esi
00000ad6	subl	$0x0c,%esp
00000ad9	movl	0x0c(%ebp),%ebx
00000adc	testl	%ebx,%ebx
00000ade	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%edi
00000ae3	je	0x00000af0
00000ae5	movl	%ebx,(%esp)
00000ae8	calll	_strlen
00000aed	movl	%eax,%edi
00000aef	incl	%edi
00000af0	movl	0x08(%ebp),%esi
00000af3	testl	%ebx,%ebx
00000af5	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%eax
00000afa	cmovel	%eax,%edi
00000afd	movl	%edi,0x0c(%esi)
00000b00	movl	0x04(%esi),%ecx
00000b03	cmpl	%edi,%ecx
00000b05	movl	%edi,%eax
00000b07	jge	0x00000b28
00000b09	movl	%edi,%eax
00000b0b	subl	%ecx,%eax
00000b0d	movl	%eax,0x04(%esp)
00000b11	movl	%esi,(%esp)
00000b14	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000b19	movl	0x04(%esi),%eax
00000b1c	cmpl	%edi,%eax
00000b1e	jge	0x00000b25
00000b20	movl	%eax,0x0c(%esi)
00000b23	jmp	0x00000b28
00000b25	movl	0x0c(%esi),%eax
00000b28	testl	%eax,%eax
00000b2a	je	0x00000b5d
00000b2c	addl	%ebx,%edi
00000b2e	movl	(%esi),%ecx
00000b30	cmpl	%edi,%ecx
00000b32	jae	0x00000b3b
00000b34	leal	(%ecx,%eax),%edx
00000b37	cmpl	%ebx,%edx
00000b39	ja	0x00000b4d
00000b3b	movl	%eax,0x08(%esp)
00000b3f	movl	%ebx,0x04(%esp)
00000b43	movl	%ecx,(%esp)
00000b46	calll	_memcpy
00000b4b	jmp	0x00000b5d
00000b4d	movl	%eax,0x08(%esp)
00000b51	movl	%ebx,0x04(%esp)
00000b55	movl	%ecx,(%esp)
00000b58	calll	_memmove
00000b5d	movl	%esi,%eax
00000b5f	addl	$0x0c,%esp
00000b62	popl	%esi
00000b63	popl	%edi
00000b64	popl	%ebx
00000b65	popl	%ebp
00000b66	ret
00000b67	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator==(CUtlString const&) const:
00000b70	pushl	%ebp
00000b71	movl	%esp,%ebp
00000b73	pushl	%esi
00000b74	subl	$0x14,%esp
00000b77	movl	0x08(%ebp),%ecx
00000b7a	movl	0x0c(%ecx),%eax
00000b7d	xorb	%dl,%dl
00000b7f	movl	0x0c(%ebp),%esi
00000b82	cmpl	%eax,0x0c(%esi)
00000b85	jne	0x00000ba0
00000b87	movl	(%esi),%edx
00000b89	movl	(%ecx),%ecx
00000b8b	movl	%eax,0x08(%esp)
00000b8f	movl	%ecx,0x04(%esp)
00000b93	movl	%edx,(%esp)
00000b96	calll	_memcmp
00000b9b	testl	%eax,%eax
00000b9d	sete	%dl
00000ba0	movzbl	%dl,%eax
00000ba3	addl	$0x14,%esp
00000ba6	popl	%esi
00000ba7	popl	%ebp
00000ba8	ret
00000ba9	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::operator==(char const*) const:
00000bb0	pushl	%ebp
00000bb1	movl	%esp,%ebp
00000bb3	subl	$0x08,%esp
00000bb6	calll	0x00000bbb
00000bbb	popl	%eax
00000bbc	movl	0x08(%ebp),%ecx
00000bbf	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00000bc3	jne	0x00000bcd
00000bc5	leal	0xc978-0xbbb(%eax),%eax
00000bcb	jmp	0x00000bcf
00000bcd	movl	(%ecx),%eax
00000bcf	movl	0x0c(%ebp),%ecx
00000bd2	movl	%ecx,0x04(%esp)
00000bd6	movl	%eax,(%esp)
00000bd9	calll	_strcmp
00000bde	testl	%eax,%eax
00000be0	sete	%al
00000be3	movzbl	%al,%eax
00000be6	addl	$0x08,%esp
00000be9	popl	%ebp
00000bea	ret
00000beb	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(CUtlString const&):
00000bf0	pushl	%ebp
00000bf1	movl	%esp,%ebp
00000bf3	pushl	%ebx
00000bf4	pushl	%edi
00000bf5	pushl	%esi
00000bf6	subl	$0x1c,%esp
00000bf9	calll	0x00000bfe
00000bfe	popl	%eax
00000bff	movl	%eax,0xec(%ebp)
00000c02	movl	0x08(%ebp),%edx
00000c05	movl	0x0c(%edx),%eax
00000c08	xorl	%ebx,%ebx
00000c0a	testl	%eax,%eax
00000c0c	leal	0xff(%eax),%ecx
00000c0f	cmovel	%ebx,%ecx
00000c12	movl	%ecx,0xf0(%ebp)
00000c15	movl	0x0c(%ebp),%eax
00000c18	movl	0x0c(%eax),%eax
00000c1b	testl	%eax,%eax
00000c1d	leal	0xff(%eax),%esi
00000c20	cmovel	%ebx,%esi
00000c23	leal	0x01(%esi,%ecx),%edi
00000c27	leal	(%esi,%ecx),%eax
00000c2a	testl	%eax,%eax
00000c2c	cmovlel	%ebx,%edi
00000c2f	movl	%edi,0x0c(%edx)
00000c32	movl	0x04(%edx),%eax
00000c35	cmpl	%edi,%eax
00000c37	jge	0x00000c5e
00000c39	movl	%edi,%ecx
00000c3b	subl	%eax,%ecx
00000c3d	movl	%ecx,0x04(%esp)
00000c41	movl	%edx,(%esp)
00000c44	movl	%edx,%ebx
00000c46	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000c4b	movl	%ebx,%edx
00000c4d	movl	0x04(%edx),%eax
00000c50	cmpl	%edi,%eax
00000c52	jge	0x00000c5b
00000c54	movl	%eax,0x0c(%edx)
00000c57	movl	%eax,%edi
00000c59	jmp	0x00000c5e
00000c5b	movl	0x0c(%edx),%edi
00000c5e	leal	0xff(%edi),%ebx
00000c61	testl	%edi,%edi
00000c63	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%ecx
00000c68	cmovel	%ecx,%ebx
00000c6b	movl	%ebx,0xe8(%ebp)
00000c6e	subl	0xf0(%ebp),%ebx
00000c71	cmpl	%esi,%ebx
00000c73	cmovgel	%esi,%ebx
00000c76	testl	%edi,%edi
00000c78	jne	0x00000cab
00000c7a	movl	$0x00000001,0x0c(%edx)
00000c81	testl	%eax,%eax
00000c83	jg	0x00000ca6
00000c85	movl	$0x00000001,%ecx
00000c8a	subl	%eax,%ecx
00000c8c	movl	%ecx,0x04(%esp)
00000c90	movl	%edx,(%esp)
00000c93	movl	%edx,%esi
00000c95	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000c9a	movl	%esi,%edx
00000c9c	movl	0x04(%edx),%eax
00000c9f	testl	%eax,%eax
00000ca1	jg	0x00000ca6
00000ca3	movl	%eax,0x0c(%edx)
00000ca6	movl	(%edx),%eax
00000ca8	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000cab	movl	%edx,%eax
00000cad	movl	%edx,%esi
00000caf	movl	0xf0(%ebp),%ecx
00000cb2	addl	(%eax),%ecx
00000cb4	movl	0x0c(%ebp),%eax
00000cb7	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%eax)
00000cbb	jne	0x00000cc8
00000cbd	movl	0xec(%ebp),%eax
00000cc0	leal	0xc978-0xbfe(%eax),%eax
00000cc6	jmp	0x00000cca
00000cc8	movl	(%eax),%eax
00000cca	movl	%ebx,0x08(%esp)
00000cce	movl	%eax,0x04(%esp)
00000cd2	movl	%ecx,(%esp)
00000cd5	calll	_memcpy
00000cda	movl	%esi,%eax
00000cdc	movl	(%eax),%ecx
00000cde	movl	0xe8(%ebp),%edx
00000ce1	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ecx,%edx)
00000ce5	addl	$0x1c,%esp
00000ce8	popl	%esi
00000ce9	popl	%edi
00000cea	popl	%ebx
00000ceb	popl	%ebp
00000cec	ret
00000ced	nopl	(%eax)
CUtlString::operator+=(char const*):
00000cf0	pushl	%ebp
00000cf1	movl	%esp,%ebp
00000cf3	pushl	%ebx
00000cf4	pushl	%edi
00000cf5	pushl	%esi
00000cf6	subl	$0x1c,%esp
00000cf9	movl	0x08(%ebp),%esi
00000cfc	movl	0x0c(%esi),%eax
00000cff	movl	0x0c(%ebp),%ecx
00000d02	movl	%ecx,(%esp)
00000d05	xorl	%ebx,%ebx
00000d07	testl	%eax,%eax
00000d09	leal	0xff(%eax),%edi
00000d0c	cmovel	%ebx,%edi
00000d0f	movl	%edi,0xf0(%ebp)
00000d12	calll	_strlen
00000d17	movl	%esi,%edx
00000d19	movl	%eax,0xec(%ebp)
00000d1c	leal	0x01(%edi,%eax),%esi
00000d20	leal	(%edi,%eax),%eax
00000d23	testl	%eax,%eax
00000d25	cmovlel	%ebx,%esi
00000d28	movl	%esi,0x0c(%edx)
00000d2b	movl	0x04(%edx),%eax
00000d2e	cmpl	%esi,%eax
00000d30	jge	0x00000d57
00000d32	movl	%esi,%ecx
00000d34	subl	%eax,%ecx
00000d36	movl	%ecx,0x04(%esp)
00000d3a	movl	%edx,(%esp)
00000d3d	movl	%edx,%edi
00000d3f	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000d44	movl	%edi,%edx
00000d46	movl	0x04(%edx),%eax
00000d49	cmpl	%esi,%eax
00000d4b	jge	0x00000d54
00000d4d	movl	%eax,0x0c(%edx)
00000d50	movl	%eax,%esi
00000d52	jmp	0x00000d57
00000d54	movl	0x0c(%edx),%esi
00000d57	leal	0xff(%esi),%edi
00000d5a	testl	%esi,%esi
00000d5c	cmovel	%ebx,%edi
00000d5f	movl	%edi,%ebx
00000d61	subl	0xf0(%ebp),%ebx
00000d64	movl	0xec(%ebp),%ecx
00000d67	cmpl	%ecx,%ebx
00000d69	cmovgel	%ecx,%ebx
00000d6c	testl	%esi,%esi
00000d6e	jne	0x00000da1
00000d70	movl	$0x00000001,0x0c(%edx)
00000d77	testl	%eax,%eax
00000d79	jg	0x00000d9c
00000d7b	movl	$0x00000001,%ecx
00000d80	subl	%eax,%ecx
00000d82	movl	%ecx,0x04(%esp)
00000d86	movl	%edx,(%esp)
00000d89	movl	%edx,%esi
00000d8b	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000d90	movl	%esi,%edx
00000d92	movl	0x04(%edx),%eax
00000d95	testl	%eax,%eax
00000d97	jg	0x00000d9c
00000d99	movl	%eax,0x0c(%edx)
00000d9c	movl	(%edx),%eax
00000d9e	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000da1	movl	(%edx),%eax
00000da3	movl	%ebx,0x08(%esp)
00000da7	movl	0x0c(%ebp),%ecx
00000daa	movl	%ecx,0x04(%esp)
00000dae	addl	0xf0(%ebp),%eax
00000db1	movl	%eax,(%esp)
00000db4	movl	%edx,%esi
00000db6	calll	_memcpy
00000dbb	movl	(%esi),%eax
00000dbd	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax,%edi)
00000dc1	movl	%esi,%eax
00000dc3	addl	$0x1c,%esp
00000dc6	popl	%esi
00000dc7	popl	%edi
00000dc8	popl	%ebx
00000dc9	popl	%ebp
00000dca	ret
00000dcb	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(char):
00000dd0	pushl	%ebp
00000dd1	movl	%esp,%ebp
00000dd3	pushl	%ebx
00000dd4	pushl	%edi
00000dd5	pushl	%esi
00000dd6	subl	$0x0c,%esp
00000dd9	movl	0x08(%ebp),%esi
00000ddc	movl	0x0c(%esi),%ecx
00000ddf	xorl	%eax,%eax
00000de1	testl	%ecx,%ecx
00000de3	leal	0xff(%ecx),%edi
00000de6	cmovel	%eax,%edi
00000de9	leal	0x02(%edi),%ebx
00000dec	leal	0x01(%edi),%ecx
00000def	testl	%ecx,%ecx
00000df1	cmovlel	%eax,%ebx
00000df4	movl	%ebx,0x0c(%esi)
00000df7	movl	0x04(%esi),%eax
00000dfa	cmpl	%ebx,%eax
00000dfc	jge	0x00000e18
00000dfe	movl	%ebx,%ecx
00000e00	subl	%eax,%ecx
00000e02	movl	%ecx,0x04(%esp)
00000e06	movl	%esi,(%esp)
00000e09	calll	CUtlMemory<unsigned char, int>::Grow(int)
00000e0e	movl	0x04(%esi),%eax
00000e11	cmpl	%ebx,%eax
00000e13	jge	0x00000e18
00000e15	movl	%eax,0x0c(%esi)
00000e18	movb	0x0c(%ebp),%al
00000e1b	movl	(%esi),%ecx
00000e1d	movb	%al,(%ecx,%edi)
00000e20	movl	(%esi),%eax
00000e22	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x01(%eax,%edi)
00000e27	movl	%esi,%eax
00000e29	addl	$0x0c,%esp
00000e2c	popl	%esi
00000e2d	popl	%edi
00000e2e	popl	%ebx
00000e2f	popl	%ebp
00000e30	ret
00000e31	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(int):
00000e40	pushl	%ebp
00000e41	movl	%esp,%ebp
00000e43	pushl	%edi
00000e44	pushl	%esi
00000e45	subl	$0x20,%esp
00000e48	calll	0x00000e4d
00000e4d	popl	%eax
00000e4e	movl	0xf797-0xe4d(%eax),%esi
00000e54	movl	(%esi),%ecx
00000e56	movl	%ecx,0xf4(%ebp)
00000e59	movl	0x0c(%ebp),%ecx
00000e5c	movl	%ecx,0x0c(%esp)
00000e60	leal	0xc979-0xe4d(%eax),%eax
00000e66	movl	%eax,0x08(%esp)
00000e6a	leal	0xe8(%ebp),%edi
00000e6d	movl	%edi,(%esp)
00000e70	movl	$0x0000000c,0x04(%esp)
00000e78	calll	V_snprintf(char*, int, char const*, ...)
00000e7d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xf3(%ebp)
00000e81	movl	%edi,0x04(%esp)
00000e85	movl	0x08(%ebp),%eax
00000e88	movl	%eax,(%esp)
00000e8b	calll	CUtlString::operator+=(char const*)
00000e90	movl	(%esi),%ecx
00000e92	cmpl	0xf4(%ebp),%ecx
00000e95	jne	0x00000e9e
00000e97	addl	$0x20,%esp
00000e9a	popl	%esi
00000e9b	popl	%edi
00000e9c	popl	%ebp
00000e9d	ret
00000e9e	calll	___stack_chk_fail
00000ea3	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::operator+=(double):
00000eb0	pushl	%ebp
00000eb1	movl	%esp,%ebp
00000eb3	pushl	%edi
00000eb4	pushl	%esi
00000eb5	subl	$0x00000120,%esp
00000ebb	calll	0x00000ec0
00000ec0	popl	%eax
00000ec1	movl	0xf797-0xec0(%eax),%esi
00000ec7	movl	(%esi),%ecx
00000ec9	movl	%ecx,0xf4(%ebp)
00000ecc	movsd	0x0c(%ebp),%xmm0
00000ed1	movsd	%xmm0,0x0c(%esp)
00000ed7	leal	0xc97c-0xec0(%eax),%eax
00000edd	movl	%eax,0x08(%esp)
00000ee1	leal	0xfffffef4(%ebp),%edi
00000ee7	movl	%edi,(%esp)
00000eea	movl	CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&),0x04(%esp)
00000ef2	calll	V_snprintf(char*, int, char const*, ...)
00000ef7	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xf3(%ebp)
00000efb	movl	%edi,0x04(%esp)
00000eff	movl	0x08(%ebp),%eax
00000f02	movl	%eax,(%esp)
00000f05	calll	CUtlString::operator+=(char const*)
00000f0a	movl	(%esi),%ecx
00000f0c	cmpl	0xf4(%ebp),%ecx
00000f0f	jne	0x00000f1b
00000f11	addl	$0x00000120,%esp
00000f17	popl	%esi
00000f18	popl	%edi
00000f19	popl	%ebp
00000f1a	ret
00000f1b	calll	___stack_chk_fail
CUtlString::MatchesPattern(CUtlString const&, int):
00000f20	pushl	%ebp
00000f21	pushl	%ebx
00000f22	pushl	%edi
00000f23	pushl	%esi
00000f24	pushl	%eax
00000f25	calll	0x00000f2a
00000f2a	popl	%eax
00000f2b	leal	0xc978-0xf2a(%eax),%ecx
00000f31	movl	0x18(%esp),%edx
00000f35	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edx)
00000f39	movl	%ecx,%eax
00000f3b	je	0x00000f3f
00000f3d	movl	(%edx),%eax
00000f3f	movl	0x1c(%esp),%edx
00000f43	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edx)
00000f47	je	0x00000f4b
00000f49	movl	(%edx),%ecx
00000f4b	movl	0x20(%esp),%edx
00000f4f	movb	(%ecx),%bl
00000f51	andl	$0x01,%edx
00000f54	movl	%edx,(%esp)
00000f57	xorb	%bh,%bh
00000f59	jmp	0x00000fbb
00000f5b	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00000f60	testb	%bl,%bl
00000f62	je	0x00000f8a
00000f64	cmpb	$0x2a,%bl
00000f67	je	0x00000f8a
00000f69	movb	0x01(%edi),%bl
00000f6c	incl	%edi
00000f6d	incl	%esi
00000f6e	jmp	0x00000f60
00000f70	xorb	%dl,%dl
00000f72	testb	$0x01,%bh
00000f75	je	0x00000fce
00000f77	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esp)
00000f7b	je	0x00000f89
00000f7d	cmpb	$0x2f,%bl
00000f80	je	0x00000f89
00000f82	xorb	%dl,%dl
00000f84	cmpb	$0x2f,(%eax)
00000f87	je	0x00000fce
00000f89	incl	%eax
00000f8a	xorl	%ebp,%ebp
00000f8c	jmp	0x00000fa1
00000f8e	movb	0x01(%ecx),%bl
00000f91	incl	%ecx
00000f92	movb	$0x01,%bh
00000f94	testb	%bl,%bl
00000f96	movb	$0x01,%dl
00000f98	jne	0x00000fbb
00000f9a	jmp	0x00000fce
00000f9c	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
00000fa0	incl	%ebp
00000fa1	cmpl	%esi,%ebp
00000fa3	jge	0x00000fb3
00000fa5	movb	(%eax,%ebp),%dh
00000fa8	xorb	%dl,%dl
00000faa	testb	%dh,%dh
00000fac	je	0x00000fce
00000fae	cmpb	(%ecx,%ebp),%dh
00000fb1	je	0x00000fa0
00000fb3	cmpl	%ebp,%esi
00000fb5	jne	0x00000f70
00000fb7	addl	%esi,%eax
00000fb9	movl	%edi,%ecx
00000fbb	cmpb	$0x2a,%bl
00000fbe	je	0x00000f8e
00000fc0	xorl	%esi,%esi
00000fc2	testb	%bl,%bl
00000fc4	movl	%ecx,%edi
00000fc6	jne	0x00000f60
00000fc8	cmpb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
00000fcb	sete	%dl
00000fce	movzbl	%dl,%eax
00000fd1	addl	$0x04,%esp
00000fd4	popl	%esi
00000fd5	popl	%edi
00000fd6	popl	%ebx
00000fd7	popl	%ebp
00000fd8	ret
00000fd9	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::Format(char const*, ...):
00000fe0	pushl	%ebp
00000fe1	movl	%esp,%ebp
00000fe3	pushl	%ebx
00000fe4	pushl	%edi
00000fe5	pushl	%esi
00000fe6	subl	$0x0000101c,%esp
00000fec	calll	0x00000ff1
00000ff1	popl	%eax
00000ff2	movl	0xf797-0xff1(%eax),%eax
00000ff8	movl	%eax,0xffffefe8(%ebp)
00000ffe	movl	(%eax),%eax
00001000	movl	%eax,0xf0(%ebp)
00001003	leal	0x10(%ebp),%eax
00001006	movl	%eax,0xffffefec(%ebp)
0000100c	movl	%eax,0x0c(%esp)
00001010	movl	0x0c(%ebp),%eax
00001013	movl	%eax,0x08(%esp)
00001017	leal	0xffffeff0(%ebp),%edi
0000101d	movl	%edi,(%esp)
00001020	movl	$0x00000fff,0x04(%esp)
00001028	calll	_vsnprintf
0000102d	movl	%eax,%esi
0000102f	movl	0x08(%ebp),%ebx
00001032	testl	%esi,%esi
00001034	js	0x0000103e
00001036	cmpl	$0x00000fff,%esi
0000103c	jb	0x00001047
0000103e	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xef(%ebp)
00001042	movl	$0x00000fff,%esi
00001047	movl	%edi,(%esp)
0000104a	calll	_strlen
0000104f	movl	%eax,%edi
00001051	incl	%edi
00001052	movl	%edi,0x0c(%ebx)
00001055	movl	0x04(%ebx),%ecx
00001058	cmpl	%edi,%ecx
0000105a	movl	%edi,%eax
0000105c	jge	0x0000107d
0000105e	movl	%edi,%eax
00001060	subl	%ecx,%eax
00001062	movl	%eax,0x04(%esp)
00001066	movl	%ebx,(%esp)
00001069	calll	CUtlMemory<unsigned char, int>::Grow(int)
0000106e	movl	0x04(%ebx),%eax
00001071	cmpl	%edi,%eax
00001073	jge	0x0000107a
00001075	movl	%eax,0x0c(%ebx)
00001078	jmp	0x0000107d
0000107a	movl	0x0c(%ebx),%eax
0000107d	testl	%eax,%eax
0000107f	je	0x000010bd
00001081	movl	(%ebx),%ecx
00001083	leal	0xffffeff0(%ebp,%edi),%edx
0000108a	cmpl	%edx,%ecx
0000108c	leal	0xffffeff0(%ebp),%edi
00001092	jae	0x0000109b
00001094	leal	(%ecx,%eax),%edx
00001097	cmpl	%edi,%edx
00001099	ja	0x000010ad
0000109b	movl	%eax,0x08(%esp)
0000109f	movl	%edi,0x04(%esp)
000010a3	movl	%ecx,(%esp)
000010a6	calll	_memcpy
000010ab	jmp	0x000010bd
000010ad	movl	%eax,0x08(%esp)
000010b1	movl	%edi,0x04(%esp)
000010b5	movl	%ecx,(%esp)
000010b8	calll	_memmove
000010bd	movl	0xffffefe8(%ebp),%eax
000010c3	movl	(%eax),%eax
000010c5	cmpl	0xf0(%ebp),%eax
000010c8	jne	0x000010d7
000010ca	movl	%esi,%eax
000010cc	addl	$0x0000101c,%esp
000010d2	popl	%esi
000010d3	popl	%edi
000010d4	popl	%ebx
000010d5	popl	%ebp
000010d6	ret
000010d7	calll	___stack_chk_fail
000010dc	nopl	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax)
CUtlString::StripTrailingSlash():
000010e0	pushl	%ebp
000010e1	movl	%esp,%ebp
000010e3	pushl	%edi
000010e4	pushl	%esi
000010e5	subl	$0x10,%esp
000010e8	movl	0x08(%ebp),%esi
000010eb	movl	0x0c(%esi),%eax
000010ee	cmpl	$0x02,%eax
000010f1	jb	0x00001130
000010f3	movl	(%esi),%ecx
000010f5	movb	0xfe(%eax,%ecx),%dl
000010f9	cmpb	$0x2f,%dl
000010fc	je	0x00001103
000010fe	cmpb	$0x5c,%dl
00001101	jne	0x00001130
00001103	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xfe(%ecx,%eax)
00001108	movl	0x0c(%esi),%edi
0000110b	decl	%edi
0000110c	movl	%edi,0x0c(%esi)
0000110f	movl	0x04(%esi),%eax
00001112	cmpl	%edi,%eax
00001114	jge	0x00001130
00001116	movl	%edi,%ecx
00001118	subl	%eax,%ecx
0000111a	movl	%ecx,0x04(%esp)
0000111e	movl	%esi,(%esp)
00001121	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001126	movl	0x04(%esi),%eax
00001129	cmpl	%edi,%eax
0000112b	jge	0x00001130
0000112d	movl	%eax,0x0c(%esi)
00001130	addl	$0x10,%esp
00001133	popl	%esi
00001134	popl	%edi
00001135	popl	%ebp
00001136	ret
00001137	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::Slice(int, int):
00001140	pushl	%ebp
00001141	movl	%esp,%ebp
00001143	pushl	%ebx
00001144	pushl	%edi
00001145	pushl	%esi
00001146	subl	$0x3c,%esp
00001149	calll	0x0000114e
0000114e	popl	%eax
0000114f	movl	%eax,0xd4(%ebp)
00001152	movl	0x0c(%ebp),%eax
00001155	movl	0x0c(%eax),%eax
00001158	movl	%eax,0xd0(%ebp)
0000115b	leal	0xff(%eax),%ecx
0000115e	testl	%eax,%eax
00001160	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),%esi
00001165	cmovnel	%ecx,%esi
00001168	movl	0x14(%ebp),%ebx
0000116b	movl	0x10(%ebp),%edi
0000116e	testl	%edi,%edi
00001170	jns	0x0000117f
00001172	negl	%edi
00001174	movl	%edi,%eax
00001176	cltd
00001177	idivl	%ecx
00001179	movl	%esi,%edi
0000117b	subl	%edx,%edi
0000117d	jmp	0x00001185
0000117f	cmpl	%edi,%esi
00001181	jg	0x00001185
00001183	movl	%esi,%edi
00001185	cmpl	$0x7fffffff,%ebx
0000118b	je	0x000011a0
0000118d	testl	%ebx,%ebx
0000118f	jns	0x0000119c
00001191	negl	%ebx
00001193	movl	%ebx,%eax
00001195	cltd
00001196	idivl	%ecx
00001198	subl	%edx,%esi
0000119a	jmp	0x000011a0
0000119c	cmpl	%ebx,%esi
0000119e	jg	0x000011a2
000011a0	movl	%esi,%ebx
000011a2	cmpl	%ebx,%edi
000011a4	jl	0x00001237
000011aa	movl	0x08(%ebp),%esi
000011ad	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%esi)
000011b4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%esi)
000011ba	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%esi)
000011c1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esi)
000011c8	movl	$0x00000001,0x0c(%esi)
000011cf	movl	%esi,(%esp)
000011d2	movl	$0x00000001,0x04(%esp)
000011da	calll	CUtlMemory<unsigned char, int>::Grow(int)
000011df	movl	0x04(%esi),%eax
000011e2	testl	%eax,%eax
000011e4	jg	0x000011eb
000011e6	movl	%eax,0x0c(%esi)
000011e9	jmp	0x000011ee
000011eb	movl	0x0c(%esi),%eax
000011ee	movl	0xd4(%ebp),%edi
000011f1	testl	%eax,%eax
000011f3	je	0x00001366
000011f9	movl	(%esi),%ecx
000011fb	leal	0xc978-0x114e+0x00000001(%edi),%edx
00001201	cmpl	%edx,%ecx
00001203	jae	0x00001212
00001205	leal	(%ecx,%eax),%esi
00001208	leal	0xc978-0x114e(%edi),%edx
0000120e	cmpl	%edx,%esi
00001210	ja	0x00001222
00001212	movl	%eax,0x08(%esp)
00001216	leal	0xc978-0x114e(%edi),%eax
0000121c	movl	%eax,0x04(%esp)
00001220	jmp	0x0000122a
00001222	movl	%eax,0x08(%esp)
00001226	movl	%edx,0x04(%esp)
0000122a	movl	%ecx,(%esp)
0000122d	calll	_memcpy
00001232	jmp	0x00001366
00001237	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xd0(%ebp)
0000123b	jne	0x00001248
0000123d	movl	0xd4(%ebp),%eax
00001240	leal	0xc978-0x114e(%eax),%eax
00001246	jmp	0x0000124d
00001248	movl	0x0c(%ebp),%eax
0000124b	movl	(%eax),%eax
0000124d	movl	%eax,0xcc(%ebp)
00001250	xorps	%xmm0,%xmm0
00001253	movaps	%xmm0,0xd8(%ebp)
00001257	subl	%edi,%ebx
00001259	leal	0x01(%ebx),%esi
0000125c	movl	%esi,0xe4(%ebp)
0000125f	testl	%esi,%esi
00001261	jle	0x00001283
00001263	movl	%esi,0x04(%esp)
00001267	leal	0xd8(%ebp),%eax
0000126a	movl	%eax,(%esp)
0000126d	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001272	movl	0xdc(%ebp),%eax
00001275	cmpl	%esi,%eax
00001277	jl	0x0000127e
00001279	movl	0xe4(%ebp),%esi
0000127c	jmp	0x00001283
0000127e	movl	%eax,0xe4(%ebp)
00001281	movl	%eax,%esi
00001283	movl	0xd8(%ebp),%eax
00001286	movl	%ebx,0x08(%esp)
0000128a	movl	0xcc(%ebp),%ecx
0000128d	addl	%edi,%ecx
0000128f	movl	%eax,%edi
00001291	movl	%ecx,0x04(%esp)
00001295	movl	%edi,(%esp)
00001298	calll	_memcpy
0000129d	movb	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi,%ebx)
000012a1	movl	0x08(%ebp),%ebx
000012a4	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
000012ab	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
000012b1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
000012b8	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
000012bf	testl	%esi,%esi
000012c1	jne	0x000012fb
000012c3	movl	%edi,0xd0(%ebp)
000012c6	movl	0xd4(%ebp),%eax
000012c9	leal	0xc978-0x114e(%eax),%edi
000012cf	movl	%edi,(%esp)
000012d2	calll	_strlen
000012d7	movl	%eax,%esi
000012d9	incl	%esi
000012da	movl	%esi,0x0c(%ebx)
000012dd	testl	%esi,%esi
000012df	movl	%esi,%eax
000012e1	jle	0x0000130e
000012e3	movl	%esi,0x04(%esp)
000012e7	movl	%ebx,(%esp)
000012ea	calll	CUtlMemory<unsigned char, int>::Grow(int)
000012ef	movl	0x04(%ebx),%eax
000012f2	cmpl	%esi,%eax
000012f4	jge	0x0000130b
000012f6	movl	%eax,0x0c(%ebx)
000012f9	jmp	0x0000130e
000012fb	testl	%edi,%edi
000012fd	movl	%edi,0xd0(%ebp)
00001300	jne	0x000012cf
00001302	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001309	jmp	0x00001343
0000130b	movl	0x0c(%ebx),%eax
0000130e	testl	%eax,%eax
00001310	je	0x00001343
00001312	addl	%edi,%esi
00001314	movl	(%ebx),%ecx
00001316	cmpl	%esi,%ecx
00001318	jae	0x00001321
0000131a	leal	(%ecx,%eax),%edx
0000131d	cmpl	%edi,%edx
0000131f	ja	0x00001333
00001321	movl	%eax,0x08(%esp)
00001325	movl	%edi,0x04(%esp)
00001329	movl	%ecx,(%esp)
0000132c	calll	_memcpy
00001331	jmp	0x00001343
00001333	movl	%eax,0x08(%esp)
00001337	movl	%edi,0x04(%esp)
0000133b	movl	%ecx,(%esp)
0000133e	calll	_memmove
00001343	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)(%ebp)
00001347	movl	0xd0(%ebp),%eax
0000134a	js	0x00001366
0000134c	testl	%eax,%eax
0000134e	je	0x0000135f
00001350	movl	%eax,(%esp)
00001353	calll	_free
00001358	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xd8(%ebp)
0000135f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0xdc(%ebp)
00001366	addl	$0x3c,%esp
00001369	popl	%esi
0000136a	popl	%edi
0000136b	popl	%ebx
0000136c	popl	%ebp
0000136d	retl	$0x0004
CUtlString::Left(int):
00001370	pushl	%ebp
00001371	movl	%esp,%ebp
00001373	subl	$0x18,%esp
00001376	movl	0x10(%ebp),%eax
00001379	movl	%eax,0x0c(%esp)
0000137d	movl	0x0c(%ebp),%eax
00001380	movl	%eax,0x04(%esp)
00001384	movl	0x08(%ebp),%eax
00001387	movl	%eax,(%esp)
0000138a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%esp)
00001392	calll	CUtlString::Slice(int, int)
00001397	addl	$0x14,%esp
0000139a	popl	%ebp
0000139b	retl	$0x0004
0000139e	nop
CUtlString::Right(int):
000013a0	pushl	%ebp
000013a1	movl	%esp,%ebp
000013a3	subl	$0x18,%esp
000013a6	xorl	%eax,%eax
000013a8	subl	0x10(%ebp),%eax
000013ab	movl	%eax,0x08(%esp)
000013af	movl	0x0c(%ebp),%eax
000013b2	movl	%eax,0x04(%esp)
000013b6	movl	0x08(%ebp),%eax
000013b9	movl	%eax,(%esp)
000013bc	movl	$0x7fffffff,0x0c(%esp)
000013c4	calll	CUtlString::Slice(int, int)
000013c9	addl	$0x14,%esp
000013cc	popl	%ebp
000013cd	retl	$0x0004
CUtlString::Replace(char, char):
000013d0	pushl	%ebp
000013d1	movl	%esp,%ebp
000013d3	pushl	%ebx
000013d4	pushl	%edi
000013d5	pushl	%esi
000013d6	subl	$0x0c,%esp
000013d9	movl	0x0c(%ebp),%eax
000013dc	movl	%eax,0x04(%esp)
000013e0	movl	0x08(%ebp),%edi
000013e3	movl	%edi,(%esp)
000013e6	calll	CUtlString::CUtlString(CUtlString const&)
000013eb	movl	0x0c(%edi),%ecx
000013ee	xorl	%eax,%eax
000013f0	testl	%ecx,%ecx
000013f2	leal	0xff(%ecx),%ecx
000013f5	cmovel	%eax,%ecx
000013f8	testl	%ecx,%ecx
000013fa	jle	0x00001420
000013fc	movb	0x14(%ebp),%dl
000013ff	movb	0x10(%ebp),%dh
00001402	movsbl	%dh,%esi
00001405	movl	(%edi),%edi
00001407	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
00001410	movzbl	(%edi,%eax),%ebx
00001414	cmpl	%esi,%ebx
00001416	jne	0x0000141b
00001418	movb	%dl,(%edi,%eax)
0000141b	incl	%eax
0000141c	cmpl	%ecx,%eax
0000141e	jl	0x00001410
00001420	addl	$0x0c,%esp
00001423	popl	%esi
00001424	popl	%edi
00001425	popl	%ebx
00001426	popl	%ebp
00001427	retl	$0x0004
0000142a	nopw	CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::AbsPath(char const*):
00001430	pushl	%ebp
00001431	movl	%esp,%ebp
00001433	pushl	%ebx
00001434	pushl	%edi
00001435	pushl	%esi
00001436	subl	$0x0000011c,%esp
0000143c	calll	0x00001441
00001441	popl	%eax
00001442	movl	0xf797-0x1441(%eax),%ecx
00001448	movl	%ecx,0xfffffee8(%ebp)
0000144e	movl	(%ecx),%ecx
00001450	movl	%ecx,0xf0(%ebp)
00001453	movl	0x0c(%ebp),%ecx
00001456	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
0000145a	jne	0x00001464
0000145c	leal	0xc978-0x1441(%eax),%eax
00001462	jmp	0x00001466
00001464	movl	(%ecx),%eax
00001466	movl	0x10(%ebp),%ecx
00001469	movl	0x08(%ebp),%edi
0000146c	movl	%ecx,0x0c(%esp)
00001470	movl	%eax,0x08(%esp)
00001474	leal	0xfffffeec(%ebp),%ebx
0000147a	movl	%ebx,(%esp)
0000147d	movl	$0x00000104,0x04(%esp)
00001485	calll	V_MakeAbsolutePath(char*, int, char const*, char const*)
0000148a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
00001491	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00001497	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edi)
0000149e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000014a5	movl	%ebx,(%esp)
000014a8	calll	_strlen
000014ad	movl	%eax,%esi
000014af	incl	%esi
000014b0	movl	%esi,0x0c(%edi)
000014b3	testl	%esi,%esi
000014b5	movl	%esi,%eax
000014b7	jle	0x000014d4
000014b9	movl	%esi,0x04(%esp)
000014bd	movl	%edi,(%esp)
000014c0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000014c5	movl	0x04(%edi),%eax
000014c8	cmpl	%esi,%eax
000014ca	jge	0x000014d1
000014cc	movl	%eax,0x0c(%edi)
000014cf	jmp	0x000014d4
000014d1	movl	0x0c(%edi),%eax
000014d4	testl	%eax,%eax
000014d6	je	0x0000150e
000014d8	movl	(%edi),%ecx
000014da	leal	0xfffffeec(%ebp,%esi),%edx
000014e1	cmpl	%edx,%ecx
000014e3	jae	0x000014ec
000014e5	leal	(%ecx,%eax),%edx
000014e8	cmpl	%ebx,%edx
000014ea	ja	0x000014fe
000014ec	movl	%eax,0x08(%esp)
000014f0	movl	%ebx,0x04(%esp)
000014f4	movl	%ecx,(%esp)
000014f7	calll	_memcpy
000014fc	jmp	0x0000150e
000014fe	movl	%eax,0x08(%esp)
00001502	movl	%ebx,0x04(%esp)
00001506	movl	%ecx,(%esp)
00001509	calll	_memmove
0000150e	movl	0xfffffee8(%ebp),%eax
00001514	movl	(%eax),%eax
00001516	cmpl	0xf0(%ebp),%eax
00001519	jne	0x00001528
0000151b	addl	$0x0000011c,%esp
00001521	popl	%esi
00001522	popl	%edi
00001523	popl	%ebx
00001524	popl	%ebp
00001525	retl	$0x0004
00001528	calll	___stack_chk_fail
0000152d	nopl	(%eax)
CUtlString::UnqualifiedFilename():
00001530	pushl	%ebp
00001531	movl	%esp,%ebp
00001533	pushl	%ebx
00001534	pushl	%edi
00001535	pushl	%esi
00001536	subl	$0x0c,%esp
00001539	calll	0x0000153e
0000153e	popl	%eax
0000153f	movl	0x0c(%ebp),%ecx
00001542	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00001546	jne	0x00001550
00001548	leal	0xc978-0x153e(%eax),%eax
0000154e	jmp	0x00001552
00001550	movl	(%ecx),%eax
00001552	movl	0x08(%ebp),%ebx
00001555	movl	%eax,(%esp)
00001558	calll	V_UnqualifiedFileName(char const*)
0000155d	movl	%eax,%esi
0000155f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001566	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000156c	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001573	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000157a	testl	%esi,%esi
0000157c	jne	0x00001587
0000157e	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001585	jmp	0x000015eb
00001587	movl	%esi,(%esp)
0000158a	calll	_strlen
0000158f	movl	%eax,%edi
00001591	incl	%edi
00001592	movl	%edi,0x0c(%ebx)
00001595	testl	%edi,%edi
00001597	movl	%edi,%eax
00001599	jle	0x000015b6
0000159b	movl	%edi,0x04(%esp)
0000159f	movl	%ebx,(%esp)
000015a2	calll	CUtlMemory<unsigned char, int>::Grow(int)
000015a7	movl	0x04(%ebx),%eax
000015aa	cmpl	%edi,%eax
000015ac	jge	0x000015b3
000015ae	movl	%eax,0x0c(%ebx)
000015b1	jmp	0x000015b6
000015b3	movl	0x0c(%ebx),%eax
000015b6	testl	%eax,%eax
000015b8	je	0x000015eb
000015ba	addl	%esi,%edi
000015bc	movl	(%ebx),%ecx
000015be	cmpl	%edi,%ecx
000015c0	jae	0x000015c9
000015c2	leal	(%ecx,%eax),%edx
000015c5	cmpl	%esi,%edx
000015c7	ja	0x000015db
000015c9	movl	%eax,0x08(%esp)
000015cd	movl	%esi,0x04(%esp)
000015d1	movl	%ecx,(%esp)
000015d4	calll	_memcpy
000015d9	jmp	0x000015eb
000015db	movl	%eax,0x08(%esp)
000015df	movl	%esi,0x04(%esp)
000015e3	movl	%ecx,(%esp)
000015e6	calll	_memmove
000015eb	addl	$0x0c,%esp
000015ee	popl	%esi
000015ef	popl	%edi
000015f0	popl	%ebx
000015f1	popl	%ebp
000015f2	retl	$0x0004
000015f5	nopl	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::DirName():
00001600	pushl	%ebp
00001601	movl	%esp,%ebp
00001603	pushl	%ebx
00001604	pushl	%edi
00001605	pushl	%esi
00001606	subl	$0x1c,%esp
00001609	calll	0x0000160e
0000160e	popl	%eax
0000160f	movl	0x0c(%ebp),%ecx
00001612	movl	0x08(%ebp),%ebx
00001615	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ecx)
00001619	jne	0x00001644
0000161b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
00001622	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001629	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000162f	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001636	leal	0x04(%ebx),%ecx
00001639	movl	%ecx,0xec(%ebp)
0000163c	leal	0xc978-0x160e(%eax),%edi
00001642	jmp	0x0000166f
00001644	movl	(%ecx),%edi
00001646	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%ebx)
0000164d	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001654	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%ebx)
0000165a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%ebx)
00001661	leal	0x04(%ebx),%eax
00001664	movl	%eax,0xec(%ebp)
00001667	testl	%edi,%edi
00001669	je	0x00001732
0000166f	movl	%ebx,0xf0(%ebp)
00001672	movl	%edi,(%esp)
00001675	calll	_strlen
0000167a	movl	%eax,%esi
0000167c	incl	%esi
0000167d	movl	%esi,0x0c(%ebx)
00001680	testl	%esi,%esi
00001682	movl	%esi,%eax
00001684	jle	0x000016a1
00001686	movl	%esi,0x04(%esp)
0000168a	movl	%ebx,(%esp)
0000168d	calll	CUtlMemory<unsigned char, int>::Grow(int)
00001692	movl	0x04(%ebx),%eax
00001695	cmpl	%esi,%eax
00001697	jge	0x0000169e
00001699	movl	%eax,0x0c(%ebx)
0000169c	jmp	0x000016a1
0000169e	movl	0x0c(%ebx),%eax
000016a1	testl	%eax,%eax
000016a3	jne	0x000016ab
000016a5	movl	%ebx,%ecx
000016a7	movl	(%ecx),%ebx
000016a9	jmp	0x000016df
000016ab	addl	%edi,%esi
000016ad	movl	(%ebx),%ebx
000016af	cmpl	%esi,%ebx
000016b1	jae	0x000016ba
000016b3	leal	(%ebx,%eax),%ecx
000016b6	cmpl	%edi,%ecx
000016b8	ja	0x000016cc
000016ba	movl	%eax,0x08(%esp)
000016be	movl	%edi,0x04(%esp)
000016c2	movl	%ebx,(%esp)
000016c5	calll	_memcpy
000016ca	jmp	0x000016dc
000016cc	movl	%eax,0x08(%esp)
000016d0	movl	%edi,0x04(%esp)
000016d4	movl	%ebx,(%esp)
000016d7	calll	_memmove
000016dc	movl	0x08(%ebp),%ecx
000016df	movl	0x0c(%ecx),%eax
000016e2	movl	%ecx,%edi
000016e4	movl	%eax,0x04(%esp)
000016e8	movl	%ebx,(%esp)
000016eb	calll	V_StripLastDir(char*, int)
000016f0	movl	%ebx,(%esp)
000016f3	calll	V_StripTrailingSlash(char*)
000016f8	addl	$0x1c,%esp
000016fb	popl	%esi
000016fc	popl	%edi
000016fd	popl	%ebx
000016fe	popl	%ebp
000016ff	retl	$0x0004
00001702	movl	%eax,%esi
00001704	cmpl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
00001708	js	0x0000172a
0000170a	movl	0xf0(%ebp),%edi
0000170d	movl	(%edi),%eax
0000170f	testl	%eax,%eax
00001711	je	0x00001721
00001713	movl	%eax,(%esp)
00001716	calll	_free
0000171b	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
00001721	movl	0xec(%ebp),%eax
00001724	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%eax)
0000172a	movl	%esi,(%esp)
0000172d	calll	__Unwind_Resume
00001732	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%ebx)
00001739	movl	%ebx,%ecx
0000173b	xorl	%ebx,%ebx
0000173d	movl	%ecx,0xf0(%ebp)
00001740	jmp	0x000016df
00001742	nopw	%cs:CUtlBinaryBlock::CUtlBinaryBlock(int, int)(%eax,%eax)
CUtlString::PathJoin(char const*, char const*):
00001750	pushl	%ebp
00001751	movl	%esp,%ebp
00001753	pushl	%ebx
00001754	pushl	%edi
00001755	pushl	%esi
00001756	subl	$0x0000011c,%esp
0000175c	calll	0x00001761
00001761	popl	%eax
00001762	movl	0xf797-0x1761(%eax),%eax
00001768	movl	%eax,0xfffffee8(%ebp)
0000176e	movl	(%eax),%eax
00001770	movl	%eax,0xf0(%ebp)
00001773	leal	0xfffffeec(%ebp),%ebx
00001779	movl	%ebx,0x08(%esp)
0000177d	movl	0x10(%ebp),%eax
00001780	movl	%eax,0x04(%esp)
00001784	movl	0x0c(%ebp),%eax
00001787	movl	%eax,(%esp)
0000178a	movl	$0x00000104,0x0c(%esp)
00001792	calll	V_ComposeFileName(char const*, char const*, char*, int)
00001797	movl	0x08(%ebp),%edi
0000179a	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x04(%edi)
000017a1	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),(%edi)
000017a7	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x0c(%edi)
000017ae	movl	CUtlBinaryBlock::CUtlBinaryBlock(int, int),0x08(%edi)
000017b5	movl	%ebx,(%esp)
000017b8	calll	_strlen
000017bd	movl	%eax,%esi
000017bf	incl	%esi
000017c0	movl	%esi,0x0c(%edi)
000017c3	testl	%esi,%esi
000017c5	movl	%esi,%eax
000017c7	jle	0x000017e4
000017c9	movl	%esi,0x04(%esp)
000017cd	movl	%edi,(%esp)
000017d0	calll	CUtlMemory<unsigned char, int>::Grow(int)
000017d5	movl	0x04(%edi),%eax
000017d8	cmpl	%esi,%eax
000017da	jge	0x000017e1
000017dc	movl	%eax,0x0c(%edi)
000017df	jmp	0x000017e4
000017e1	movl	0x0c(%edi),%eax
000017e4	testl	%eax,%eax
000017e6	je	0x0000181e
000017e8	movl	(%edi),%ecx
000017ea	leal	0xfffffeec(%ebp,%esi),%edx
000017f1	cmpl	%edx,%ecx
000017f3	jae	0x000017fc
000017f5	leal	(%ecx,%eax),%edx
000017f8	cmpl	%ebx,%edx
000017fa	ja	0x0000180e
000017fc	movl	%eax,0x08(%esp)
00001800	movl	%ebx,0x04(%esp)
00001804	movl	%ecx,(%esp)
00001807	calll	_memcpy
0000180c	jmp	0x0000181e
0000180e	movl	%eax,0x08(%esp)
00001812	movl	%ebx,0x04(%esp)
00001816	movl	%ecx,(%esp)
00001819	calll	_memmove
0000181e	movl	0xfffffee8(%ebp),%eax
00001824	movl	(%eax),%eax
00001826	cmpl	0xf0(%ebp),%eax
00001829	jne	0x00001838
0000182b	addl	$0x0000011c,%esp
00001831	popl	%esi
00001832	popl	%edi
00001833	popl	%ebx
00001834	popl	%ebp
00001835	retl	$0x0004
00001838	calll	___stack_chk_fail
0000183d	nopl	(%eax)
CUtlString::Append(char const*):
00001840	jmp	CUtlString::operator+=(char const*)
/Users/ericgallager/source-sdk-2013/mp/src/lib/osx32/matsys_controls.a(utlsymbol.o):
(__TEXT,__text) section
CUtlSymbol::Initialize():
00000000	pushl	%ebp
00000001	movl	%esp,%ebp
00000003	pushl	%edi
00000004	pushl	%esi
00000005	subl	$0x10,%esp
00000008	calll	0x0000000d
0000000d	popl	%edi
0000000e	movb	__ZZN10CUtlSymbol10InitializeEvE18symbolsInitialized.b-0xd(%edi),%al
00000014	testb	%al,%al
00000016	jne	0x000000a3
0000001c	movl	$0x0000012c,(%esp)
00000023	calll	operator new(unsigned long)
00000028	movl	%eax,%esi
0000002a	movl	$0x00000020,0x08(%esi)
00000031	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000038	movl	$0x00000180,(%esp)
0000003f	calll	_malloc
00000044	movl	%eax,0x04(%esi)
00000047	movw	$0xffff,0x10(%esi)
0000004d	movw	CUtlSymbol::Initialize(),0x12(%esi)
00000053	movw	$0xffff,0x14(%esi)
00000059	movw	$0xffff,0x16(%esi)
0000005f	movl	%eax,0x18(%esi)
00000062	movb	CUtlSymbol::Initialize(),0x1c(%esi)
00000066	movl	CUtlSymbol::Initialize(),0x24(%esi)
0000006d	movl	CUtlSymbol::Initialize(),0x28(%esi)
00000074	movl	$0x00000008,0x2c(%esi)
0000007b	movl	CUtlSymbol::Initialize(),0x30(%esi)
00000082	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000089	movl	%esi,%eax
0000008b	addl	$0x38,%eax
0000008e	movl	%eax,(%esp)
00000091	calll	CThreadRWLock::CThreadRWLock()
00000096	movl	%esi,CUtlSymbol::s_pSymbolTable-0xd(%edi)
0000009c	movb	$0x01,__ZZN10CUtlSymbol10InitializeEvE18symbolsInitialized.b-0xd(%edi)
000000a3	addl	$0x10,%esp
000000a6	popl	%esi
000000a7	popl	%edi
000000a8	popl	%ebp
000000a9	ret
000000aa	movl	%eax,%edi
000000ac	movl	%esi,(%esp)
000000af	calll	CUtlSymbolTable::~CUtlSymbolTable()
000000b4	movl	%esi,(%esp)
000000b7	calll	operator delete(void*)
000000bc	movl	%edi,(%esp)
000000bf	calll	__Unwind_Resume
000000c4	calll	std::terminate()
000000c9	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbol::CurrTable():
000000d0	pushl	%ebp
000000d1	movl	%esp,%ebp
000000d3	pushl	%esi
000000d4	pushl	%eax
000000d5	calll	0x000000da
000000da	popl	%esi
000000db	calll	CUtlSymbol::Initialize()
000000e0	movl	CUtlSymbol::s_pSymbolTable-0xda(%esi),%eax
000000e6	addl	$0x04,%esp
000000e9	popl	%esi
000000ea	popl	%ebp
000000eb	ret
000000ec	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbol::CUtlSymbol(char const*):
000000f0	pushl	%ebp
000000f1	movl	%esp,%ebp
000000f3	pushl	%edi
000000f4	pushl	%esi
000000f5	subl	$0x20,%esp
000000f8	calll	0x000000fd
000000fd	popl	%esi
000000fe	calll	CUtlSymbol::Initialize()
00000103	movl	CUtlSymbol::s_pSymbolTable-0xfd(%esi),%edi
00000109	leal	0x38(%edi),%esi
0000010c	movl	%esi,(%esp)
0000010f	calll	CThreadRWLock::LockForWrite()
00000114	movl	0x0c(%ebp),%eax
00000117	movl	%eax,0x08(%esp)
0000011b	movl	%edi,0x04(%esp)
0000011f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000122	movl	%eax,(%esp)
00000125	calll	CUtlSymbolTable::AddString(char const*)
0000012a	subl	$0x04,%esp
0000012d	movl	%esi,(%esp)
00000130	calll	CThreadRWLock::UnlockWrite()
00000135	movl	0x08(%ebp),%eax
00000138	movw	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%cx
0000013c	movw	%cx,(%eax)
0000013f	addl	$0x20,%esp
00000142	popl	%esi
00000143	popl	%edi
00000144	popl	%ebp
00000145	ret
00000146	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::CUtlSymbol(char const*):
00000150	pushl	%ebp
00000151	movl	%esp,%ebp
00000153	pushl	%edi
00000154	pushl	%esi
00000155	subl	$0x20,%esp
00000158	calll	0x0000015d
0000015d	popl	%esi
0000015e	calll	CUtlSymbol::Initialize()
00000163	movl	CUtlSymbol::s_pSymbolTable-0x15d(%esi),%edi
00000169	leal	0x38(%edi),%esi
0000016c	movl	%esi,(%esp)
0000016f	calll	CThreadRWLock::LockForWrite()
00000174	movl	0x0c(%ebp),%eax
00000177	movl	%eax,0x08(%esp)
0000017b	movl	%edi,0x04(%esp)
0000017f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000182	movl	%eax,(%esp)
00000185	calll	CUtlSymbolTable::AddString(char const*)
0000018a	subl	$0x04,%esp
0000018d	movl	%esi,(%esp)
00000190	calll	CThreadRWLock::UnlockWrite()
00000195	movl	0x08(%ebp),%eax
00000198	movw	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%cx
0000019c	movw	%cx,(%eax)
0000019f	addl	$0x20,%esp
000001a2	popl	%esi
000001a3	popl	%edi
000001a4	popl	%ebp
000001a5	ret
000001a6	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::String() const:
000001b0	pushl	%ebp
000001b1	movl	%esp,%ebp
000001b3	pushl	%esi
000001b4	subl	$0x14,%esp
000001b7	calll	0x000001bc
000001bc	popl	%esi
000001bd	calll	CUtlSymbol::Initialize()
000001c2	movl	0x08(%ebp),%eax
000001c5	movw	(%eax),%cx
000001c8	movl	CUtlSymbol::s_pSymbolTable-0x1bc(%esi),%eax
000001ce	movw	%cx,0xf8(%ebp)
000001d2	leal	0xf8(%ebp),%ecx
000001d5	movl	%ecx,0x04(%esp)
000001d9	movl	%eax,(%esp)
000001dc	calll	CUtlSymbolTableMT::String(CUtlSymbol) const
000001e1	addl	$0x14,%esp
000001e4	popl	%esi
000001e5	popl	%ebp
000001e6	ret
000001e7	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbol::DisableStaticSymbolTable():
000001f0	calll	0x000001f5
000001f5	popl	%eax
000001f6	movb	CUtlSymbol::Initialize(),CUtlSymbol::s_bAllowStaticSymbolTable-0x1f5(%eax)
000001fd	ret
000001fe	nop
CUtlSymbol::operator==(char const*) const:
00000200	pushl	%ebp
00000201	movl	%esp,%ebp
00000203	pushl	%ebx
00000204	pushl	%edi
00000205	pushl	%esi
00000206	subl	$0x0c,%esp
00000209	calll	0x0000020e
0000020e	popl	%edi
0000020f	xorb	%al,%al
00000211	movl	0x08(%ebp),%ebx
00000214	cmpw	$0xff,(%ebx)
00000218	je	0x0000024f
0000021a	movl	0x0c(%ebp),%esi
0000021d	calll	CUtlSymbol::Initialize()
00000222	movw	(%ebx),%cx
00000225	movl	CUtlSymbol::s_pSymbolTable-0x20e(%edi),%eax
0000022b	movw	%cx,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
0000022f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%ecx
00000232	movl	%ecx,0x04(%esp)
00000236	movl	%eax,(%esp)
00000239	calll	CUtlSymbolTableMT::String(CUtlSymbol) const
0000023e	movl	%esi,0x04(%esp)
00000242	movl	%eax,(%esp)
00000245	calll	_strcmp
0000024a	testl	%eax,%eax
0000024c	sete	%al
0000024f	movzbl	%al,%eax
00000252	addl	$0x0c,%esp
00000255	popl	%esi
00000256	popl	%edi
00000257	popl	%ebx
00000258	popl	%ebp
00000259	ret
0000025a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const:
00000260	pushl	%ebp
00000261	movl	%esp,%ebp
00000263	pushl	%ebx
00000264	pushl	%edi
00000265	pushl	%esi
00000266	subl	$0x0c,%esp
00000269	movl	0x0c(%ebp),%eax
0000026c	movw	0x02(%eax),%si
00000270	movzwl	(%eax),%edx
00000273	movl	0x10(%ebp),%eax
00000276	movl	0x08(%ebp),%ecx
00000279	cmpl	$0x0000ffff,%edx
0000027f	jne	0x0000028c
00000281	cmpw	$0xff,%si
00000285	jne	0x0000028c
00000287	movl	0x20(%ecx),%edx
0000028a	jmp	0x00000299
0000028c	movzwl	%si,%esi
0000028f	movl	0x24(%ecx),%edi
00000292	movl	(%edi,%edx,4),%edx
00000295	leal	0x08(%edx,%esi),%edx
00000299	movw	0x02(%eax),%si
0000029d	movzwl	(%eax),%eax
000002a0	cmpl	$0x0000ffff,%eax
000002a5	jne	0x000002b2
000002a7	cmpw	$0xff,%si
000002ab	jne	0x000002b2
000002ad	movl	0x20(%ecx),%esi
000002b0	jmp	0x000002bf
000002b2	movzwl	%si,%esi
000002b5	movl	0x24(%ecx),%edi
000002b8	movl	(%edi,%eax,4),%eax
000002bb	leal	0x08(%eax,%esi),%esi
000002bf	testl	%edx,%edx
000002c1	jne	0x000002c9
000002c3	xorb	%al,%al
000002c5	testl	%esi,%esi
000002c7	jne	0x00000304
000002c9	testl	%edx,%edx
000002cb	sete	%bl
000002ce	testl	%esi,%esi
000002d0	jne	0x000002d9
000002d2	movb	$0x01,%al
000002d4	cmpb	$0x01,%bl
000002d7	jne	0x00000304
000002d9	xorb	%al,%al
000002db	movl	%edx,%edi
000002dd	orl	%esi,%edi
000002df	je	0x00000304
000002e1	testb	$0x01,0x1c(%ecx)
000002e5	jne	0x000002f5
000002e7	movl	%esi,0x04(%esp)
000002eb	movl	%edx,(%esp)
000002ee	calll	_strcmp
000002f3	jmp	0x00000301
000002f5	movl	%esi,0x04(%esp)
000002f9	movl	%edx,(%esp)
000002fc	calll	V_stricmp(char const*, char const*)
00000301	shrl	$0x1f,%eax
00000304	movzbl	%al,%eax
00000307	addl	$0x0c,%esp
0000030a	popl	%esi
0000030b	popl	%edi
0000030c	popl	%ebx
0000030d	popl	%ebp
0000030e	ret
0000030f	nop
CUtlSymbolTable::CUtlSymbolTable(int, int, bool):
00000310	pushl	%ebp
00000311	movl	%esp,%ebp
00000313	pushl	%esi
00000314	pushl	%eax
00000315	movl	0x08(%ebp),%esi
00000318	movl	CUtlSymbol::Initialize(),0x04(%esi)
0000031f	movl	0x10(%ebp),%eax
00000322	movl	%eax,0x08(%esi)
00000325	movl	0x0c(%ebp),%ecx
00000328	movl	%ecx,0x0c(%esi)
0000032b	testl	%eax,%eax
0000032d	jne	0x00000333
0000032f	xorl	%eax,%eax
00000331	jmp	0x00000341
00000333	imull	$0x0c,%eax,%eax
00000336	movl	%eax,(%esp)
00000339	calll	_malloc
0000033e	movl	%eax,0x04(%esi)
00000341	movb	0x14(%ebp),%cl
00000344	movw	$0xffff,0x10(%esi)
0000034a	movw	CUtlSymbol::Initialize(),0x12(%esi)
00000350	movw	$0xffff,0x14(%esi)
00000356	movw	$0xffff,0x16(%esi)
0000035c	movl	%eax,0x18(%esi)
0000035f	movb	%cl,0x1c(%esi)
00000362	movl	CUtlSymbol::Initialize(),0x24(%esi)
00000369	movl	CUtlSymbol::Initialize(),0x28(%esi)
00000370	movl	$0x00000008,0x2c(%esi)
00000377	movl	CUtlSymbol::Initialize(),0x30(%esi)
0000037e	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000385	addl	$0x04,%esp
00000388	popl	%esi
00000389	popl	%ebp
0000038a	ret
0000038b	nopl	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::CUtlSymbolTable(int, int, bool):
00000390	pushl	%ebp
00000391	movl	%esp,%ebp
00000393	pushl	%esi
00000394	pushl	%eax
00000395	movl	0x08(%ebp),%esi
00000398	movl	CUtlSymbol::Initialize(),0x04(%esi)
0000039f	movl	0x10(%ebp),%eax
000003a2	movl	%eax,0x08(%esi)
000003a5	movl	0x0c(%ebp),%ecx
000003a8	movl	%ecx,0x0c(%esi)
000003ab	testl	%eax,%eax
000003ad	jne	0x000003b3
000003af	xorl	%eax,%eax
000003b1	jmp	0x000003c1
000003b3	imull	$0x0c,%eax,%eax
000003b6	movl	%eax,(%esp)
000003b9	calll	_malloc
000003be	movl	%eax,0x04(%esi)
000003c1	movb	0x14(%ebp),%cl
000003c4	movw	$0xffff,0x10(%esi)
000003ca	movw	CUtlSymbol::Initialize(),0x12(%esi)
000003d0	movw	$0xffff,0x14(%esi)
000003d6	movw	$0xffff,0x16(%esi)
000003dc	movl	%eax,0x18(%esi)
000003df	movb	%cl,0x1c(%esi)
000003e2	movl	CUtlSymbol::Initialize(),0x24(%esi)
000003e9	movl	CUtlSymbol::Initialize(),0x28(%esi)
000003f0	movl	$0x00000008,0x2c(%esi)
000003f7	movl	CUtlSymbol::Initialize(),0x30(%esi)
000003fe	movl	CUtlSymbol::Initialize(),0x34(%esi)
00000405	addl	$0x04,%esp
00000408	popl	%esi
00000409	popl	%ebp
0000040a	ret
0000040b	nopl	CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::~CUtlSymbolTable():
00000410	jmp	CUtlSymbolTable::~CUtlSymbolTable()
00000415	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::~CUtlSymbolTable():
00000420	pushl	%ebp
00000421	movl	%esp,%ebp
00000423	pushl	%edi
00000424	pushl	%esi
00000425	subl	$0x10,%esp
00000428	movl	0x08(%ebp),%edi
0000042b	movl	%edi,(%esp)
0000042e	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
00000433	movw	$0xffff,0x14(%edi)
00000439	cmpl	CUtlSymbol::Initialize(),0x0c(%edi)
0000043d	js	0x0000045c
0000043f	movl	0x04(%edi),%eax
00000442	testl	%eax,%eax
00000444	je	0x00000455
00000446	movl	%eax,(%esp)
00000449	calll	_free
0000044e	movl	CUtlSymbol::Initialize(),0x04(%edi)
00000455	movl	CUtlSymbol::Initialize(),0x08(%edi)
0000045c	movw	$0xffff,0x16(%edi)
00000462	cmpl	CUtlSymbol::Initialize(),0x30(%edi)
00000466	jle	0x00000484
00000468	xorl	%esi,%esi
0000046a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
00000470	movl	0x24(%edi),%eax
00000473	movl	(%eax,%esi,4),%eax
00000476	movl	%eax,(%esp)
00000479	calll	_free
0000047e	incl	%esi
0000047f	cmpl	0x30(%edi),%esi
00000482	jl	0x00000470
00000484	movl	CUtlSymbol::Initialize(),0x30(%edi)
0000048b	movl	0x24(%edi),%eax
0000048e	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
00000492	jns	0x00000499
00000494	movl	%eax,0x34(%edi)
00000497	jmp	0x000004d7
00000499	testl	%eax,%eax
0000049b	jne	0x000004ad
0000049d	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004a4	movl	CUtlSymbol::Initialize(),0x34(%edi)
000004ab	jmp	0x000004d0
000004ad	movl	%eax,(%esp)
000004b0	calll	_free
000004b5	movl	CUtlSymbol::Initialize(),0x24(%edi)
000004bc	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
000004c0	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004c7	movl	CUtlSymbol::Initialize(),0x34(%edi)
000004ce	js	0x000004d7
000004d0	movl	CUtlSymbol::Initialize(),0x28(%edi)
000004d7	addl	$0x10,%esp
000004da	popl	%esi
000004db	popl	%edi
000004dc	popl	%ebp
000004dd	jmp	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
000004e2	movl	%eax,%esi
000004e4	movl	CUtlSymbol::Initialize(),0x30(%edi)
000004eb	movl	0x24(%edi),%eax
000004ee	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
000004f2	jns	0x000004f9
000004f4	movl	%eax,0x34(%edi)
000004f7	jmp	0x00000537
000004f9	testl	%eax,%eax
000004fb	jne	0x0000050d
000004fd	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000504	movl	CUtlSymbol::Initialize(),0x34(%edi)
0000050b	jmp	0x00000530
0000050d	movl	%eax,(%esp)
00000510	calll	_free
00000515	movl	CUtlSymbol::Initialize(),0x24(%edi)
0000051c	cmpl	CUtlSymbol::Initialize(),0x2c(%edi)
00000520	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000527	movl	CUtlSymbol::Initialize(),0x34(%edi)
0000052e	js	0x00000537
00000530	movl	CUtlSymbol::Initialize(),0x28(%edi)
00000537	movl	%edi,(%esp)
0000053a	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
0000053f	movl	%esi,(%esp)
00000542	calll	__Unwind_Resume
00000547	calll	std::terminate()
0000054c	nopl	CUtlSymbol::Initialize()(%eax)
CUtlSymbolTable::RemoveAll():
00000550	pushl	%ebp
00000551	movl	%esp,%ebp
00000553	pushl	%edi
00000554	pushl	%esi
00000555	subl	$0x10,%esp
00000558	movl	0x08(%ebp),%esi
0000055b	movl	%esi,(%esp)
0000055e	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
00000563	movw	$0xffff,0x14(%esi)
00000569	cmpl	CUtlSymbol::Initialize(),0x0c(%esi)
0000056d	js	0x0000058c
0000056f	movl	0x04(%esi),%eax
00000572	testl	%eax,%eax
00000574	je	0x00000585
00000576	movl	%eax,(%esp)
00000579	calll	_free
0000057e	movl	CUtlSymbol::Initialize(),0x04(%esi)
00000585	movl	CUtlSymbol::Initialize(),0x08(%esi)
0000058c	movw	$0xffff,0x16(%esi)
00000592	cmpl	CUtlSymbol::Initialize(),0x30(%esi)
00000596	jle	0x000005b4
00000598	xorl	%edi,%edi
0000059a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
000005a0	movl	0x24(%esi),%eax
000005a3	movl	(%eax,%edi,4),%eax
000005a6	movl	%eax,(%esp)
000005a9	calll	_free
000005ae	incl	%edi
000005af	cmpl	0x30(%esi),%edi
000005b2	jl	0x000005a0
000005b4	movl	CUtlSymbol::Initialize(),0x30(%esi)
000005bb	addl	$0x10,%esp
000005be	popl	%esi
000005bf	popl	%edi
000005c0	popl	%ebp
000005c1	ret
000005c2	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::Find(char const*) const:
000005d0	pushl	%ebp
000005d1	movl	%esp,%ebp
000005d3	pushl	%esi
000005d4	subl	$0x14,%esp
000005d7	movl	0x10(%ebp),%ecx
000005da	movl	0x08(%ebp),%esi
000005dd	testl	%ecx,%ecx
000005df	jne	0x000005e8
000005e1	movw	$0xffff,(%esi)
000005e6	jmp	0x0000060c
000005e8	movl	0x0c(%ebp),%eax
000005eb	movl	%ecx,0x20(%eax)
000005ee	movw	$0xffff,0xf8(%ebp)
000005f4	movw	$0xffff,0xfa(%ebp)
000005fa	leal	0xf8(%ebp),%ecx
000005fd	movl	%ecx,0x04(%esp)
00000601	movl	%eax,(%esp)
00000604	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
00000609	movw	%ax,(%esi)
0000060c	addl	$0x14,%esp
0000060f	popl	%esi
00000610	popl	%ebp
00000611	retl	$0x0004
00000614	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlSymbolTable::FindPoolWithSpace(int) const:
00000620	pushl	%ebx
00000621	pushl	%edi
00000622	pushl	%esi
00000623	movl	0x10(%esp),%ecx
00000627	movl	0x30(%ecx),%esi
0000062a	xorl	%edx,%edx
0000062c	movl	0x14(%esp),%edi
00000630	jmp	0x00000641
00000632	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000640	incl	%edx
00000641	movl	$0xffffffff,%eax
00000646	cmpl	%esi,%edx
00000648	jge	0x0000065b
0000064a	movl	0x24(%ecx),%eax
0000064d	movl	(%eax,%edx,4),%ebx
00000650	movl	(%ebx),%eax
00000652	subl	0x04(%ebx),%eax
00000655	cmpl	%edi,%eax
00000657	jl	0x00000640
00000659	movl	%edx,%eax
0000065b	popl	%esi
0000065c	popl	%edi
0000065d	popl	%ebx
0000065e	ret
0000065f	nop
CUtlSymbolTable::AddString(char const*):
00000660	pushl	%ebp
00000661	movl	%esp,%ebp
00000663	pushl	%ebx
00000664	pushl	%edi
00000665	pushl	%esi
00000666	subl	$0x2c,%esp
00000669	movl	0x10(%ebp),%ebx
0000066c	movl	0x08(%ebp),%esi
0000066f	testl	%ebx,%ebx
00000671	jne	0x0000067d
00000673	movw	$0xffff,(%esi)
00000678	jmp	0x000007d4
0000067d	movl	0x0c(%ebp),%edi
00000680	movl	%ebx,0x20(%edi)
00000683	movw	$0xffff,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000689	movw	$0xffff,0xf2(%ebp)
0000068f	leal	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000692	movl	%eax,0x04(%esp)
00000696	movl	%edi,(%esp)
00000699	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
0000069e	cmpw	$0xff,%ax
000006a2	je	0x000006ac
000006a4	movw	%ax,(%esi)
000006a7	jmp	0x000007d4
000006ac	movl	%ebx,(%esp)
000006af	calll	_strlen
000006b4	movl	0x30(%edi),%ebx
000006b7	movl	%edi,%esi
000006b9	incl	%eax
000006ba	movl	%eax,0xe4(%ebp)
000006bd	xorl	%edi,%edi
000006bf	jmp	0x000006d1
000006c1	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
000006d0	incl	%edi
000006d1	cmpl	%ebx,%edi
000006d3	jge	0x000006ee
000006d5	movl	0x24(%esi),%eax
000006d8	movl	(%eax,%edi,4),%edx
000006db	movl	(%edx),%ecx
000006dd	subl	0x04(%edx),%ecx
000006e0	cmpl	0xe4(%ebp),%ecx
000006e3	jl	0x000006d0
000006e5	cmpl	$0xff,%edi
000006e8	jne	0x0000078b
000006ee	movl	0xe4(%ebp),%eax
000006f1	movl	%eax,0xe4(%ebp)
000006f4	cmpl	$0x00000800,%eax
000006f9	movl	$0x00000800,%edi
000006fe	cmovgl	%eax,%edi
00000701	leal	0x0b(%edi),%eax
00000704	movl	%eax,(%esp)
00000707	calll	_malloc
0000070c	movl	%eax,0xdc(%ebp)
0000070f	movl	%edi,(%eax)
00000711	movl	CUtlSymbol::Initialize(),0x04(%eax)
00000718	movl	0x28(%esi),%eax
0000071b	leal	0x24(%esi),%edi
0000071e	leal	0x01(%ebx),%edx
00000721	cmpl	%eax,%edx
00000723	movl	%ebx,%ecx
00000725	jle	0x00000744
00000727	movl	%edx,%ecx
00000729	subl	%eax,%ecx
0000072b	movl	%ecx,0x04(%esp)
0000072f	movl	%edi,(%esp)
00000732	movl	%edi,0xe0(%ebp)
00000735	movl	%edx,%edi
00000737	calll	CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::Grow(int)
0000073c	movl	%edi,%edx
0000073e	movl	0xe0(%ebp),%edi
00000741	movl	0x30(%esi),%ecx
00000744	movl	%edi,0xe0(%ebp)
00000747	incl	%ecx
00000748	movl	%ecx,0x30(%esi)
0000074b	movl	0x24(%esi),%eax
0000074e	movl	%eax,0x34(%esi)
00000751	subl	%ebx,%ecx
00000753	decl	%ecx
00000754	testl	%ecx,%ecx
00000756	jle	0x00000776
00000758	shll	$0x02,%ecx
0000075b	movl	%ecx,0x08(%esp)
0000075f	leal	(%eax,%ebx,4),%ecx
00000762	movl	%ecx,0x04(%esp)
00000766	leal	(%eax,%edx,4),%eax
00000769	movl	%eax,(%esp)
0000076c	calll	_memmove
00000771	movl	0xe0(%ebp),%eax
00000774	movl	(%eax),%eax
00000776	leal	CUtlSymbol::Initialize()(,%ebx,4),%ecx
0000077d	addl	%eax,%ecx
0000077f	je	0x00000789
00000781	movl	0xdc(%ebp),%eax
00000784	movl	%eax,(%ecx)
00000786	movl	0x24(%esi),%eax
00000789	movl	%ebx,%edi
0000078b	movl	(%eax,%edi,4),%ebx
0000078e	movl	0x04(%ebx),%ecx
00000791	movl	%ecx,0xe0(%ebp)
00000794	movl	0xe4(%ebp),%eax
00000797	movl	%eax,0x08(%esp)
0000079b	movl	0x10(%ebp),%eax
0000079e	movl	%eax,0x04(%esp)
000007a2	leal	0x08(%ebx,%ecx),%eax
000007a6	movl	%eax,(%esp)
000007a9	calll	_memcpy
000007ae	movl	0xe4(%ebp),%eax
000007b1	addl	%eax,0x04(%ebx)
000007b4	movw	%di,0xe8(%ebp)
000007b8	movl	0xe0(%ebp),%eax
000007bb	movw	%ax,0xea(%ebp)
000007bf	leal	0xe8(%ebp),%eax
000007c2	movl	%eax,0x04(%esp)
000007c6	movl	%esi,(%esp)
000007c9	calll	CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
000007ce	movl	0x08(%ebp),%ecx
000007d1	movw	%ax,(%ecx)
000007d4	addl	$0x2c,%esp
000007d7	popl	%esi
000007d8	popl	%edi
000007d9	popl	%ebx
000007da	popl	%ebp
000007db	retl	$0x0004
000007de	nop
CUtlSymbolTable::String(CUtlSymbol) const:
000007e0	pushl	%esi
000007e1	movl	0x0c(%esp),%eax
000007e5	movzwl	(%eax),%eax
000007e8	cmpl	$0x0000ffff,%eax
000007ed	jne	0x000007fd
000007ef	calll	0x000007f4
000007f4	popl	%eax
000007f5	leal	0x2b25b-0x7f4(%eax),%eax
000007fb	popl	%esi
000007fc	ret
000007fd	movl	0x08(%esp),%ecx
00000801	imull	$0x0c,%eax,%eax
00000804	movl	0x04(%ecx),%esi
00000807	movl	0x24(%ecx),%edx
0000080a	movzwl	0x0a(%esi,%eax),%ecx
0000080f	movzwl	0x08(%esi,%eax),%eax
00000814	movl	(%edx,%eax,4),%eax
00000817	leal	0x08(%eax,%ecx),%eax
0000081b	popl	%esi
0000081c	ret
0000081d	nopl	(%eax)
CUtlFilenameSymbolTable::CUtlFilenameSymbolTable():
00000820	pushl	%ebp
00000821	movl	%esp,%ebp
00000823	pushl	%esi
00000824	pushl	%eax
00000825	movl	0x08(%ebp),%esi
00000828	movl	CUtlSymbol::Initialize(),0x10(%esi)
0000082f	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000836	movl	CUtlSymbol::Initialize(),0x08(%esi)
0000083d	movl	CUtlSymbol::Initialize(),0x14(%esi)
00000844	movl	CUtlSymbol::Initialize(),0x10(%esi)
0000084b	movl	$0x00000034,(%esp)
00000852	calll	operator new(unsigned long)
00000857	movl	CUtlSymbol::Initialize(),0x04(%eax)
0000085e	movl	CUtlSymbol::Initialize(),(%eax)
00000864	movl	CUtlSymbol::Initialize(),0x0c(%eax)
0000086b	movl	CUtlSymbol::Initialize(),0x08(%eax)
00000872	movl	$0x00000020,0x10(%eax)
00000879	movb	CUtlSymbol::Initialize(),0x14(%eax)
0000087d	movb	CUtlSymbol::Initialize(),0x15(%eax)
00000881	movb	CUtlSymbol::Initialize(),0x16(%eax)
00000885	movl	CUtlSymbol::Initialize(),0x18(%eax)
0000088c	movl	CUtlSymbol::Initialize(),0x1c(%eax)
00000893	movl	CUtlSymbol::Initialize(),0x20(%eax)
0000089a	movw	$0xffff,0x2e(%eax)
000008a0	movw	$0xffff,0x24(%eax)
000008a6	movw	$0xffff,0x26(%eax)
000008ac	movw	$0xffff,0x28(%eax)
000008b2	movw	CUtlSymbol::Initialize(),0x2a(%eax)
000008b8	movw	CUtlSymbol::Initialize(),0x2c(%eax)
000008be	movl	CUtlSymbol::Initialize(),0x30(%eax)
000008c5	movl	%eax,(%esi)
000008c7	addl	$0x04,%esp
000008ca	popl	%esi
000008cb	popl	%ebp
000008cc	ret
000008cd	nopl	(%eax)
CUtlFilenameSymbolTable::CUtlFilenameSymbolTable():
000008d0	pushl	%ebp
000008d1	movl	%esp,%ebp
000008d3	pushl	%esi
000008d4	pushl	%eax
000008d5	movl	0x08(%ebp),%esi
000008d8	movl	CUtlSymbol::Initialize(),0x10(%esi)
000008df	movl	CUtlSymbol::Initialize(),0x0c(%esi)
000008e6	movl	CUtlSymbol::Initialize(),0x08(%esi)
000008ed	movl	CUtlSymbol::Initialize(),0x14(%esi)
000008f4	movl	CUtlSymbol::Initialize(),0x10(%esi)
000008fb	movl	$0x00000034,(%esp)
00000902	calll	operator new(unsigned long)
00000907	movl	CUtlSymbol::Initialize(),0x04(%eax)
0000090e	movl	CUtlSymbol::Initialize(),(%eax)
00000914	movl	CUtlSymbol::Initialize(),0x0c(%eax)
0000091b	movl	CUtlSymbol::Initialize(),0x08(%eax)
00000922	movl	$0x00000020,0x10(%eax)
00000929	movb	CUtlSymbol::Initialize(),0x14(%eax)
0000092d	movb	CUtlSymbol::Initialize(),0x15(%eax)
00000931	movb	CUtlSymbol::Initialize(),0x16(%eax)
00000935	movl	CUtlSymbol::Initialize(),0x18(%eax)
0000093c	movl	CUtlSymbol::Initialize(),0x1c(%eax)
00000943	movl	CUtlSymbol::Initialize(),0x20(%eax)
0000094a	movw	$0xffff,0x2e(%eax)
00000950	movw	$0xffff,0x24(%eax)
00000956	movw	$0xffff,0x26(%eax)
0000095c	movw	$0xffff,0x28(%eax)
00000962	movw	CUtlSymbol::Initialize(),0x2a(%eax)
00000968	movw	CUtlSymbol::Initialize(),0x2c(%eax)
0000096e	movl	CUtlSymbol::Initialize(),0x30(%eax)
00000975	movl	%eax,(%esi)
00000977	addl	$0x04,%esp
0000097a	popl	%esi
0000097b	popl	%ebp
0000097c	ret
0000097d	nopl	(%eax)
CUtlFilenameSymbolTable::~CUtlFilenameSymbolTable():
00000980	pushl	%ebp
00000981	movl	%esp,%ebp
00000983	pushl	%edi
00000984	pushl	%esi
00000985	subl	$0x10,%esp
00000988	movl	0x08(%ebp),%eax
0000098b	movl	(%eax),%edi
0000098d	testl	%edi,%edi
0000098f	je	0x000009a1
00000991	movl	%edi,(%esp)
00000994	calll	CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::~CUtlStableHashtable()
00000999	movl	%edi,(%esp)
0000099c	calll	operator delete(void*)
000009a1	addl	$0x10,%esp
000009a4	popl	%esi
000009a5	popl	%edi
000009a6	popl	%ebp
000009a7	ret
000009a8	movl	%eax,%esi
000009aa	movl	%edi,(%esp)
000009ad	calll	operator delete(void*)
000009b2	movl	%esi,(%esp)
000009b5	calll	__Unwind_Resume
000009ba	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::~CUtlFilenameSymbolTable():
000009c0	pushl	%ebp
000009c1	movl	%esp,%ebp
000009c3	pushl	%edi
000009c4	pushl	%esi
000009c5	subl	$0x10,%esp
000009c8	movl	0x08(%ebp),%eax
000009cb	movl	(%eax),%edi
000009cd	testl	%edi,%edi
000009cf	je	0x000009e1
000009d1	movl	%edi,(%esp)
000009d4	calll	CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::~CUtlStableHashtable()
000009d9	movl	%edi,(%esp)
000009dc	calll	operator delete(void*)
000009e1	addl	$0x10,%esp
000009e4	popl	%esi
000009e5	popl	%edi
000009e6	popl	%ebp
000009e7	ret
000009e8	movl	%eax,%esi
000009ea	movl	%edi,(%esp)
000009ed	calll	operator delete(void*)
000009f2	movl	%esi,(%esp)
000009f5	calll	__Unwind_Resume
000009fa	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::FindOrAddFileName(char const*):
00000a00	pushl	%ebp
00000a01	movl	%esp,%ebp
00000a03	pushl	%ebx
00000a04	pushl	%edi
00000a05	pushl	%esi
00000a06	subl	$0x0000032c,%esp
00000a0c	calll	0x00000a11
00000a11	popl	%eax
00000a12	movl	0x3146f-0xa11(%eax),%eax
00000a18	movl	%eax,0xfffffce0(%ebp)
00000a1e	movl	(%eax),%eax
00000a20	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000a23	xorl	%esi,%esi
00000a25	movl	0x0c(%ebp),%edi
00000a28	testl	%edi,%edi
00000a2a	je	0x00000b5f
00000a30	movl	0x08(%ebp),%ebx
00000a33	movl	%edi,0x04(%esp)
00000a37	movl	%ebx,(%esp)
00000a3a	calll	CUtlFilenameSymbolTable::FindFileName(char const*)
00000a3f	movl	%eax,%esi
00000a41	testl	%esi,%esi
00000a43	jne	0x00000b5f
00000a49	movl	%edi,0x04(%esp)
00000a4d	leal	0xfffffeec(%ebp),%esi
00000a53	movl	%esi,(%esp)
00000a56	movl	$0x00000104,0x08(%esp)
00000a5e	calll	V_strncpy(char*, char const*, int)
00000a63	movl	%esi,(%esp)
00000a66	movl	$0x00000001,0x08(%esp)
00000a6e	movl	$0x0000002f,0x04(%esp)
00000a76	calll	V_RemoveDotSlashes(char*, char, bool)
00000a7b	leal	0xfffffde8(%ebp),%edi
00000a81	movl	%edi,0x04(%esp)
00000a85	movl	%esi,(%esp)
00000a88	movl	$0x00000104,0x08(%esp)
00000a90	calll	V_ExtractFilePath(char const*, char*, int)
00000a95	movl	%edi,(%esp)
00000a98	calll	_strlen
00000a9d	leal	0xfffffeec(%ebp,%eax),%eax
00000aa4	movl	%eax,0x04(%esp)
00000aa8	leal	0xfffffce4(%ebp),%eax
00000aae	movl	%eax,(%esp)
00000ab1	movl	$0x00000104,0x08(%esp)
00000ab9	calll	V_strncpy(char*, char const*, int)
00000abe	calll	_ThreadGetCurrentId
00000ac3	movl	%eax,%esi
00000ac5	leal	0x10(%ebx),%eax
00000ac8	movl	%eax,(%esp)
00000acb	movl	%ebx,%edi
00000acd	leal	0x08(%edi),%ebx
00000ad0	calll	_ThreadInterlockedIncrement
00000ad5	cmpl	CUtlSymbol::Initialize(),0x0c(%edi)
00000ad9	jg	0x00000b0c
00000adb	cmpl	CUtlSymbol::Initialize(),(%ebx)
00000ade	je	0x00000ae4
00000ae0	cmpl	%esi,(%ebx)
00000ae2	jne	0x00000b0c
00000ae4	movl	%esi,0x04(%esp)
00000ae8	movl	%ebx,(%esp)
00000aeb	movl	CUtlSymbol::Initialize(),0x10(%esp)
00000af3	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000afb	movl	CUtlSymbol::Initialize(),0x08(%esp)
00000b03	calll	_ThreadInterlockedAssignIf64
00000b08	testb	%al,%al
00000b0a	jne	0x00000b1a
00000b0c	pause
00000b0e	movl	%esi,0x04(%esp)
00000b12	movl	%ebx,(%esp)
00000b15	calll	CThreadSpinRWLock::SpinLockForWrite(unsigned int)
00000b1a	movl	%edi,%esi
00000b1c	movl	(%esi),%eax
00000b1e	leal	0xfffffde8(%ebp),%ecx
00000b24	movl	%ecx,0x04(%esp)
00000b28	movl	%eax,(%esp)
00000b2b	calll	unsigned int CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::DoInsert<char const*>(char const*)
00000b30	movl	%eax,%edi
00000b32	movl	(%esi),%eax
00000b34	leal	0xfffffce4(%ebp),%ecx
00000b3a	movl	%ecx,0x04(%esp)
00000b3e	movl	%eax,(%esp)
00000b41	calll	unsigned int CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::DoInsert<char const*>(char const*)
00000b46	movl	%eax,%esi
00000b48	movl	%ebx,(%esp)
00000b4b	incl	%edi
00000b4c	movzwl	%di,%eax
00000b4f	shll	$0x10,%esi
00000b52	addl	$0x00010000,%esi
00000b58	orl	%eax,%esi
00000b5a	calll	CThreadSpinRWLock::UnlockWrite()
00000b5f	movl	0xfffffce0(%ebp),%eax
00000b65	movl	(%eax),%eax
00000b67	cmpl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000b6a	jne	0x00000b79
00000b6c	movl	%esi,%eax
00000b6e	addl	$0x0000032c,%esp
00000b74	popl	%esi
00000b75	popl	%edi
00000b76	popl	%ebx
00000b77	popl	%ebp
00000b78	ret
00000b79	calll	___stack_chk_fail
00000b7e	nop
CUtlFilenameSymbolTable::FindFileName(char const*):
00000b80	pushl	%ebp
00000b81	movl	%esp,%ebp
00000b83	pushl	%ebx
00000b84	pushl	%edi
00000b85	pushl	%esi
00000b86	subl	$0x0000032c,%esp
00000b8c	calll	0x00000b91
00000b91	popl	%eax
00000b92	movl	0x3146f-0xb91(%eax),%eax
00000b98	movl	%eax,0xfffffcdc(%ebp)
00000b9e	movl	(%eax),%eax
00000ba0	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000ba3	xorl	%edi,%edi
00000ba5	movl	0x0c(%ebp),%eax
00000ba8	testl	%eax,%eax
00000baa	je	0x00000d53
00000bb0	movl	0x08(%ebp),%esi
00000bb3	movl	%eax,0x04(%esp)
00000bb7	leal	0xfffffeec(%ebp),%ebx
00000bbd	movl	%ebx,(%esp)
00000bc0	movl	$0x00000104,0x08(%esp)
00000bc8	calll	V_strncpy(char*, char const*, int)
00000bcd	movl	%ebx,(%esp)
00000bd0	movl	$0x00000001,0x08(%esp)
00000bd8	movl	$0x0000002f,0x04(%esp)
00000be0	calll	V_RemoveDotSlashes(char*, char, bool)
00000be5	leal	0xfffffde8(%ebp),%edi
00000beb	movl	%edi,0x04(%esp)
00000bef	movl	%ebx,(%esp)
00000bf2	movl	$0x00000104,0x08(%esp)
00000bfa	calll	V_ExtractFilePath(char const*, char*, int)
00000bff	movl	%edi,(%esp)
00000c02	calll	_strlen
00000c07	leal	0xfffffeec(%ebp,%eax),%eax
00000c0e	movl	%eax,0x04(%esp)
00000c12	leal	0xfffffce4(%ebp),%eax
00000c18	movl	%eax,(%esp)
00000c1b	movl	$0x00000104,0x08(%esp)
00000c23	calll	V_strncpy(char*, char const*, int)
00000c28	leal	0x08(%esi),%eax
00000c2b	movl	%eax,0xfffffcd8(%ebp)
00000c31	movl	%eax,(%esp)
00000c34	calll	CThreadSpinRWLock::LockForRead()
00000c39	movl	(%esi),%ebx
00000c3b	movl	$0x811c9dc5,%eax
00000c40	movb	0xfffffde8(%ebp),%cl
00000c46	testb	%cl,%cl
00000c48	je	0x00000c72
00000c4a	movl	$0x811c9dc5,%eax
00000c4f	leal	0xfffffde9(%ebp),%edx
00000c55	nopl	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000c60	movzbl	%cl,%ecx
00000c63	xorl	%eax,%ecx
00000c65	imull	$0x01000193,%ecx,%eax
00000c6b	movb	(%edx),%cl
00000c6d	incl	%edx
00000c6e	testb	%cl,%cl
00000c70	jne	0x00000c60
00000c72	movl	%edi,0x04(%esp)
00000c76	movl	%ebx,(%esp)
00000c79	movl	%eax,%ecx
00000c7b	shll	$0x11,%ecx
00000c7e	xorl	%eax,%ecx
00000c80	shrl	$0x15,%eax
00000c83	addl	%ecx,%eax
00000c85	movl	%eax,0x08(%esp)
00000c89	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000c91	movl	CUtlSymbol::Initialize(),0xfffffce0(%ebp)
00000c9b	calll	unsigned int CUtlHashtable<CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::IndirectIndex, empty_t, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::HashProxy, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::EqualProxy, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
00000ca0	cmpl	$0xff,%eax
00000ca3	je	0x00000cb6
00000ca5	movl	(%ebx),%ecx
00000ca7	movzwl	0x02(%ecx,%eax,4),%eax
00000cac	incl	%eax
00000cad	movzwl	%ax,%eax
00000cb0	movl	%eax,0xfffffce0(%ebp)
00000cb6	movl	(%esi),%ebx
00000cb8	movl	$0x811c9dc5,%eax
00000cbd	movb	0xfffffce4(%ebp),%cl
00000cc3	testb	%cl,%cl
00000cc5	je	0x00000cf2
00000cc7	movl	$0x811c9dc5,%eax
00000ccc	leal	0xfffffce5(%ebp),%edx
00000cd2	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000ce0	movzbl	%cl,%ecx
00000ce3	xorl	%eax,%ecx
00000ce5	imull	$0x01000193,%ecx,%eax
00000ceb	movb	(%edx),%cl
00000ced	incl	%edx
00000cee	testb	%cl,%cl
00000cf0	jne	0x00000ce0
00000cf2	leal	0xfffffce4(%ebp),%ecx
00000cf8	movl	%ecx,0x04(%esp)
00000cfc	movl	%ebx,(%esp)
00000cff	movl	%eax,%ecx
00000d01	shll	$0x11,%ecx
00000d04	xorl	%eax,%ecx
00000d06	shrl	$0x15,%eax
00000d09	addl	%ecx,%eax
00000d0b	movl	%eax,0x08(%esp)
00000d0f	movl	CUtlSymbol::Initialize(),0x0c(%esp)
00000d17	xorl	%edi,%edi
00000d19	calll	unsigned int CUtlHashtable<CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::IndirectIndex, empty_t, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::HashProxy, CUtlStableHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, unsigned short, char const*>::EqualProxy, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
00000d1e	cmpl	$0xff,%eax
00000d21	movl	CUtlSymbol::Initialize(),%esi
00000d26	je	0x00000d33
00000d28	movl	(%ebx),%ecx
00000d2a	movzwl	0x02(%ecx,%eax,4),%esi
00000d2f	incl	%esi
00000d30	shll	$0x10,%esi
00000d33	movl	0xfffffcd8(%ebp),%eax
00000d39	movl	%eax,(%esp)
00000d3c	calll	CThreadSpinRWLock::UnlockRead()
00000d41	movl	0xfffffce0(%ebp),%eax
00000d47	testl	%eax,%eax
00000d49	je	0x00000d53
00000d4b	testl	%esi,%esi
00000d4d	je	0x00000d53
00000d4f	orl	%eax,%esi
00000d51	movl	%esi,%edi
00000d53	movl	0xfffffcdc(%ebp),%eax
00000d59	movl	(%eax),%eax
00000d5b	cmpl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000d5e	jne	0x00000d6d
00000d60	movl	%edi,%eax
00000d62	addl	$0x0000032c,%esp
00000d68	popl	%esi
00000d69	popl	%edi
00000d6a	popl	%ebx
00000d6b	popl	%ebp
00000d6c	ret
00000d6d	calll	___stack_chk_fail
00000d72	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::String(void* const&, char*, int):
00000d80	pushl	%ebp
00000d81	movl	%esp,%ebp
00000d83	pushl	%ebx
00000d84	pushl	%edi
00000d85	pushl	%esi
00000d86	subl	$0x1c,%esp
00000d89	calll	0x00000d8e
00000d8e	popl	%eax
00000d8f	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000d92	movl	0x10(%ebp),%eax
00000d95	movb	CUtlSymbol::Initialize(),(%eax)
00000d98	xorb	%al,%al
00000d9a	movl	0x0c(%ebp),%esi
00000d9d	testl	%esi,%esi
00000d9f	je	0x00000e3f
00000da5	xorb	%al,%al
00000da7	cmpw	CUtlSymbol::Initialize(),0x02(%esi)
00000dac	je	0x00000e3f
00000db2	xorb	%al,%al
00000db4	cmpw	CUtlSymbol::Initialize(),(%esi)
00000db8	je	0x00000e3f
00000dbe	movl	0x08(%ebp),%ebx
00000dc1	leal	0x08(%ebx),%edi
00000dc4	movl	%edi,(%esp)
00000dc7	calll	CThreadSpinRWLock::LockForRead()
00000dcc	movl	(%ebx),%eax
00000dce	movl	0x18(%eax),%eax
00000dd1	movzwl	0x02(%esi),%ecx
00000dd5	addl	$0x0000ffff,%ecx
00000ddb	movzwl	%cx,%ecx
00000dde	movl	(%eax,%ecx,8),%ebx
00000de1	movzwl	(%esi),%ecx
00000de4	addl	$0x0000ffff,%ecx
00000dea	movzwl	%cx,%ecx
00000ded	movl	(%eax,%ecx,8),%esi
00000df0	movl	%edi,(%esp)
00000df3	calll	CThreadSpinRWLock::UnlockRead()
00000df8	movl	0x14(%ebp),%edi
00000dfb	movl	%edi,0x08(%esp)
00000dff	movl	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%eax
00000e02	leal	0x2b25b-0xd8e(%eax),%eax
00000e08	movl	%eax,CUtlSymbol::CUtlSymbol(char const*)(%ebp)
00000e0b	testl	%esi,%esi
00000e0d	cmovel	%eax,%esi
00000e10	movl	%esi,0x04(%esp)
00000e14	movl	0x10(%ebp),%esi
00000e17	movl	%esi,(%esp)
00000e1a	calll	V_strncpy(char*, char const*, int)
00000e1f	movl	%edi,0x08(%esp)
00000e23	testl	%ebx,%ebx
00000e25	cmovel	CUtlSymbol::CUtlSymbol(char const*)(%ebp),%ebx
00000e29	movl	%ebx,0x04(%esp)
00000e2d	movl	%esi,(%esp)
00000e30	movl	$0xffffffff,0x0c(%esp)
00000e38	calll	V_strncat(char*, char const*, unsigned long, int)
00000e3d	movb	$0x01,%al
00000e3f	movzbl	%al,%eax
00000e42	addl	$0x1c,%esp
00000e45	popl	%esi
00000e46	popl	%edi
00000e47	popl	%ebx
00000e48	popl	%ebp
00000e49	ret
00000e4a	nopw	CUtlSymbol::Initialize()(%eax,%eax)
CUtlFilenameSymbolTable::RemoveAll():
00000e50	pushl	%ebp
00000e51	movl	%esp,%ebp
00000e53	pushl	%esi
00000e54	pushl	%eax
00000e55	movl	0x08(%ebp),%eax
00000e58	movl	(%eax),%esi
00000e5a	movl	0x0c(%esi),%eax
00000e5d	testl	%eax,%eax
00000e5f	je	0x00000e8f
00000e61	movl	(%esi),%ecx
00000e63	movl	0x04(%esi),%edx
00000e66	nopw	%cs:CUtlSymbol::Initialize()(%eax,%eax)
00000e70	testl	%edx,%edx
00000e72	jle	0x00000e88
00000e74	cmpw	CUtlSymbol::Initialize(),0xfc(%ecx,%edx,4)
00000e7a	leal	0xff(%edx),%edx
00000e7d	js	0x00000e70
00000e7f	movw	$0x8000,(%ecx,%edx,4)
00000e85	decl	%eax
00000e86	jne	0x00000e70
00000e88	movl	CUtlSymbol::Initialize(),0x0c(%esi)
00000e8f	cmpl	CUtlSymbol::Initialize(),0x08(%esi)
00000e93	js	0x00000eb0
00000e95	movl	(%esi),%eax
00000e97	testl	%eax,%eax
00000e99	je	0x00000ea9
00000e9b	movl	%eax,(%esp)
00000e9e	calll	_free
00000ea3	movl	CUtlSymbol::Initialize(),(%esi)
00000ea9	movl	CUtlSymbol::Initialize(),0x04(%esi)
00000eb0	addl	$0x18,%esi
00000eb3	movl	%esi,(%esp)
00000eb6	calll	CUtlLinkedList<CUtlKeyValuePair<CUtlConstStringBase<char>, empty_t>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlKeyValuePair<CUtlConstStringBase<char>, empty_t>, unsigned short>, unsigned short> >::Purge()
00000ebb	addl	$0x04,%esp
00000ebe	popl	%esi
00000ebf	popl	%ebp
00000ec0	ret
